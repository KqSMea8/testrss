<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>FastDFS与Nginx的配置说明 - 无涯Ⅱ</title>
<link>http://www.cnblogs.com/wlandwl/p/fastdfs.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wlandwl/p/fastdfs.html</guid>
<description>&lt;p&gt;    FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。&lt;/p&gt;&lt;p&gt;    为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。&lt;/p&gt;&lt;p&gt;    在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。&lt;/p&gt;&lt;div readability=&quot;50.682290347099&quot;&gt;
&lt;h3&gt;2.下载FastDFS安装包&lt;/h3&gt;
&lt;p&gt;    本手册使用CentOS 7.0 64位操作系统，安装文件服务器时所需下载软件包有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;libfastcommon源代码：wget &lt;a href=&quot;https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz&quot; target=&quot;_blank&quot;&gt;https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fastdfs-nginx-module源代码：wget &lt;a href=&quot;http://jaist.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz&quot; target=&quot;_blank&quot;&gt;http://jaist.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FastDFS源代码：wget &lt;a href=&quot;https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz&quot; target=&quot;_blank&quot;&gt;https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx服务器源代码：wget &lt;a target=&quot;_blank&quot;&gt;http://nginx.org/download/nginx-1.8.0.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx依赖的pcre库源代码：wget &lt;a href=&quot;http://netassist.dl.sourceforge.net/project/pcre/pcre/8.36/pcre-8.36.zip&quot; target=&quot;_blank&quot;&gt;http://netassist.dl.sourceforge.net/project/pcre/pcre/8.36/pcre-8.36.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx依赖的zlib库源代码：wget &lt;a href=&quot;http://zlib.net/zlib-1.2.11.tar.gz&quot; target=&quot;_blank&quot;&gt;http://zlib.net/zlib-1.2.11.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;3.安装libfastcommon&lt;/h3&gt;
&lt;p&gt;    安装libfastcommon需进行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;复制已经下载的软件：cp V1.0.7.tar.gz /usr/local/&lt;/li&gt;
&lt;li&gt;进入复制后的目录： cd /usr/local    &lt;/li&gt;
&lt;li&gt;软件解压：tar -zxvf V1.0.7.tar.gz&lt;/li&gt;
&lt;li&gt;软件编译：  ./make.sh&lt;/li&gt;
&lt;li&gt; 软件安装： ./make.sh install&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    注意安装的路径：libfastcommon默认安装到了/usr/lib64/这个位置。&lt;/p&gt;
&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029213131883-2087286974.png&quot; alt=&quot;&quot;/&gt;&lt;h3&gt;4.安装FastDFS&lt;/h3&gt;
&lt;p&gt;    安装fastdfs需进行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解压文件：tar -zxvf V5.05.tar.gz -C /usr/local&lt;/li&gt;
&lt;li&gt;进入软件目录：cd /usr/local/fastdfs-5.05/&lt;/li&gt;
&lt;li&gt;编辑配置文件：vi make.sh   将TARGET_PREFIX=$DESTDIR/usr改成TARGET_PREFIX=$DESTDIR/usr/local&lt;/li&gt;
&lt;li&gt;软件编译：  ./make.sh&lt;/li&gt;
&lt;li&gt;软件安装： ./make.sh install&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    编辑make.sh时，可用vi或者vim命令打开make.sh文件，进入文件后，输入字母i表示把文件设置为可编辑模式，修改内容时，移动光标到指定内容处做修改。修改完成后，按ESC退出编辑模式，输入：wq命令，保存并退出此次编辑。&lt;/p&gt;
&lt;p&gt;   软件安装成功后，服务脚本在/etc/init.d/fdfs_storaged，/etc/init.d/fdfs_trackerd。配置文件在 /etc/fdfs/client.conf.sample，/etc/fdfs/storage.conf.sample，/etc/fdfs/tracker.conf.sample文件中。FastDFS服务脚本设置的bin目录为/usr/local/bin/下,可在这个目录下通过命令（cd /usr/local/bin &amp;amp;&amp;amp; ls | grep fdfs）查看它自带的脚本。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029214404133-1359749247.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;5.进行软链接&lt;/h3&gt;
&lt;p&gt;FastDFS主程序设置的目录为/usr/local/lib/，而我们的安装目录为/usr/lib64,所以我们需要创建/usr/lib64/下的一些核心执行程序的软连接文件。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;命令：ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so&lt;/li&gt;
&lt;li&gt;命令：ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so&lt;/li&gt;
&lt;li&gt;命令：ln -s /usr/local/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so&lt;/li&gt;
&lt;li&gt;命令：ln -s /usr/local/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;6.配置跟踪器tracker&lt;/h3&gt;
&lt;p&gt;    配置tracker需进行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;进入配置目录：cd /etc/fdfs&lt;/li&gt;
&lt;li&gt;复制配置文件：cp tracker.conf.sample tracker.conf&lt;/li&gt;
&lt;li&gt;修改配置文件：vim /etc/fdfs/tracker.conf 修改内容为base_path=/fastdfs/tracker&lt;/li&gt;
&lt;li&gt;新建文件：mkdir -p /fastdfs/tracker （这个新建目录就是与base_path对应的文件目录）&lt;/li&gt;
&lt;li&gt;开放端口：22122端口。&lt;/li&gt;
&lt;li&gt;设置tracker开机启动：cd /ect/init.d/ chkconfig -add fdfs_strackerd chkconfig fdfs_trackerd on （设置为开机启动）&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    对于tracker.conf配置文件参数解释可以找官方文档，地址为：&lt;a href=&quot;http://bbs.chinaunix.net/thread-1941456-1-1.html&quot; target=&quot;_blank&quot;&gt;http://bbs.chinaunix.net/thread-1941456-1-1.html&lt;/a&gt;。Centos 7.0中操作firewall端口的命令为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查看端口：firewall&lt;span class=&quot;hljs-attribute&quot;&gt;-cmd &lt;span class=&quot;hljs-subst&quot;&gt;--&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;span class=&quot;hljs-attribute&quot;&gt;-ports&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;开放端口：&lt;/li&gt;
&lt;li&gt;重启firewall：firewall-cmd --reload&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029224457008-1372818387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    tracker.conf文件配置完成后，可通过tracker的命令启动并查看是否配置成功。配置成功后在 /fastdfs/tracker/目录下面会有logs目录和data目录。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;启动tracker命令：/etc/init.d/fdfs_trackerd start&lt;/li&gt;
&lt;li&gt;查看进程命令：ps -el | grep fdfs&lt;/li&gt;
&lt;li&gt;停止tracker命令：/etc/init.d/fdfs_trackerd stop&lt;/li&gt;
&lt;li&gt;目录命令：cd /fastdfs/tracker/ &amp;amp;&amp;amp; ll&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029225111039-496837193.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;251&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;7.配置存储器storage&lt;/h3&gt;
&lt;p&gt;    配置storage需进行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;进入配置目录：cd /etc/fdfs&lt;/li&gt;
&lt;li&gt;复制配置文件：cp tracker.conf.sample storage.conf&lt;/li&gt;
&lt;li&gt;修改配置文件：vim /etc/fdfs/storage.conf 修改内容为base_path=/fastdfs/storage,store_path0=/fastdfs/storage,tracker_server=192.168.3.159:22122（为服务器的外面ip地址） ,http.server_port=8888&lt;/li&gt;
&lt;li&gt;新建文件：mkdir -p /fastdfs/storage （这个新建目录就是与base_path对应的文件目录）&lt;/li&gt;
&lt;li&gt;开放端口：23000端口。&lt;/li&gt;
&lt;li&gt;设置storage开机启动：cd /ect/init.d/ chkconfig -add fdfs_storaged chkconfig fdfs_storaged on （设置为开机启动）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    对于storage.conf配置文件参数解释可以找官方文档，地址为：&lt;a href=&quot;http://fredlong.iteye.com/blog/2287899&quot; target=&quot;_blank&quot;&gt;http://fredlong.iteye.com/blog/2287899&lt;/a&gt;。 storage.conf文件配置完成后，可通过storage的命令启动并查看是否配置成功。配置成功后在 /fastdfs/storage/目录下面会有logs目录和data目录。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;启动storage命令：/etc/init.d/fdfs_storaged start&lt;/li&gt;
&lt;li&gt;查看进程命令：ps -el | grep fdfs&lt;/li&gt;
&lt;li&gt;停止storage命令：/etc/init.d/fdfs_storaged stop&lt;/li&gt;
&lt;li&gt;目录命令：cd /fastdfs/storage/ &amp;amp;&amp;amp; ll&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029225644930-1327473766.png&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;8.文件服务器测试&lt;/h3&gt;
&lt;p&gt;    测试文件服务器是否可用需进行如下操作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;进入配置文件：cd /etc/fdfs/&lt;/li&gt;
&lt;li&gt;复制客户端配置文件：cp client.conf.sample client.conf&lt;/li&gt;
&lt;li&gt;编辑配置文件：命令：vim /etc/fdfs/client.conf ，修改内容：base_path=/fastdfs/tracker，tracker_server=192.168.3.159:22122&lt;/li&gt;
&lt;li&gt;调用上传命令上传文件：/usr/local/bin/fdfs_upload_file /etc/fdfs/client.conf /root/fastdfsdownfile/V1.0.7.tar.gz   （执行上传文件命令成功时，会返回上传文件所在的位置。）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029230452508-57750008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;9.nginx插件安装&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;安装gcc环境包：yum groupinstall &quot;Development Tools&quot;&lt;/li&gt;
&lt;li&gt;安装pcre：unzip -f pcre-8.36.zip , cd pcre-8.36,./configure,make &amp;amp;&amp;amp; make install (分为四步执行)&lt;/li&gt;
&lt;li&gt;安装zlib：tar -zxvf zlib-1.2.11.tar.gz，cd zlib-1.2.11，./configure，make &amp;amp;&amp;amp; make install&lt;/li&gt;
&lt;/ol&gt;&lt;p align=&quot;left&quot;&gt;    安装nginx插件：&lt;/p&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li&gt;解压文件：tar -zxvf fastdfs-nginx-module_v1.16.tar.gz&lt;/li&gt;
&lt;li&gt;修改配置文件：cd fastdfs-nginx-module/src/  vi config  修改内容为CORE_INCS=&quot;$CORE_INCS  /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;  改成CORE_INCS=&quot;$CORE_INCS  /usr/local/include/fastdfs /usr/include/fastcommon/&quot;&lt;/li&gt;
&lt;li&gt;复制配置文件mod_fastdfs.conf：cp  mod_fastdfs.conf /etc/fdfs&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;修改配置文件mod_fastdfs.conf：修改配置如下：
&lt;p&gt;     vi /etc/fdfs/mod_fastdfs.conf &lt;br/&gt;      group_name=group1&lt;br/&gt;      tracker_server=192.168.3.159:22122&lt;br/&gt;      store_path0=/fastdfs/storage&lt;br/&gt;      base_path=/fastdfs/storage&lt;br/&gt;      url_have_group_name = true&lt;/p&gt;
&lt;p&gt;在文件末尾添加以下信息&lt;/p&gt;
&lt;p&gt;      [group1] &lt;br/&gt;      group_name=group1 &lt;br/&gt;      storage_server_port=23000 &lt;/p&gt;
&lt;p&gt;      store_path_count=1 &lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;文件复制：复制FastDFS里的2个文件，到/etc/fdfs目录中。cp /usr/local/fastdfs-5.05/conf/http.conf /etc/fdfs/，cp /usr/local/fastdfs-5.05/conf/mime.types /etc/fdfs/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;创建一个软连接：在/fastdfs/storage文件存储目录下创建软连接，将其链接到实际存放数据的目录。命令：ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00&lt;/li&gt;
&lt;/ol&gt;&lt;h3 align=&quot;left&quot;&gt;10.nginx安装及绑定&lt;/h3&gt;
&lt;p&gt;    在每个Storage服务器上安装Nginx：&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;解压文件：tar -zxvf nginx-1.8.0.tar.gz&lt;/li&gt;
&lt;li&gt;进入目录： cd nginx-1.8.0&lt;/li&gt;
&lt;li&gt;设置配置：./configure --./configure --add-module=/usr/local/fast/fastdfs-nginx-module/src/      （add-module=/${fastdfs-nginx-module安装目录}/fastdfs-nginx-module/src） &lt;/li&gt;
&lt;li&gt;编译：make&lt;/li&gt;
&lt;li&gt;安装：make install&lt;/li&gt;
&lt;li&gt;设置nginx配置文件：cd /usr/local/nginx/conf ，  vi nginx.conf&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;nginx.conf文件修改内容为：
&lt;p&gt;listen 8888;&lt;br/&gt;server_name localhost;&lt;br/&gt;location ~/group([0-9])/M00 {&lt;br/&gt;root /fastdfs/storage/data;&lt;br/&gt;ngx_fastdfs_module;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;注意：nginx里的端口要和配置FastDFS存储中的storage.conf文件配置一致，&lt;br/&gt;也就是（http.server_port=8888)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029233037961-1804636054.png&quot; alt=&quot;&quot; width=&quot;554&quot; height=&quot;303&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     最后检查防火墙，然后启动nginx服务：启动命令：/usr/local/nginx/sbin/nginx。启动成功后网页访问如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029233346773-1913222055.png&quot; alt=&quot;&quot; width=&quot;771&quot; height=&quot;264&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    上传测试文件并通过网页访问效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029233502648-1375950423.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/626790/201710/626790-20171029234236789-825169155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;










&lt;/div&gt;</description>
<pubDate>Sun, 29 Oct 2017 15:49:00 +0000</pubDate>
<dc:creator>无涯Ⅱ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wlandwl/p/fastdfs.html</dc:identifier>
</item>
<item>
<title>C# 使用OpenCV在一张图片里寻找人脸 - asml</title>
<link>http://www.cnblogs.com/DragonStart/p/7751993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DragonStart/p/7751993.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/481370/201710/481370-20171029223911148-84276179.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;例程中用到一个库叫做emgucv,是opencv\的net封装&lt;br/&gt;编译打包好的稳定版,在这:&lt;a href=&quot;https://sourceforge.net/projects/emgucv/files/emgucv/&quot; class=&quot;uri&quot;&gt;https://sourceforge.net/projects/emgucv/files/emgucv/&lt;/a&gt;&lt;br/&gt;如果要最新代码,在这里获取:&lt;a href=&quot;https://github.com/emgucv/emgucv&quot; class=&quot;uri&quot;&gt;https://github.com/emgucv/emgucv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先建立一个C#控制台工程.添加引用:Emgu.CV.World.dll&lt;br/&gt;然后添加这2个文件到工程(在emgucv的压缩包里有的,搜索下文件吧~):&lt;br/&gt;注意:其中的dll文件需要根据要编译的程序是32位还是64位选不同文件&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/481370/201710/481370-20171029232031695-1872994312.png&quot;/&gt;&lt;br/&gt;记得把&quot;复制到输出目录&quot;设为&quot;较新则复制&quot;&lt;br/&gt;另外准备一张要识别的图片,放到编译输出目录.&lt;br/&gt;接下来就是编辑代码了,后面所有代码都在main里&lt;/p&gt;

&lt;p&gt;使用显卡处理图像数据效率会很多,如果你的设备支持,最好打开,使用CvInvoke.HaveOpenCLCompatibleGpuDevice能返回是否支持.&lt;br/&gt;配置CvInvoke.UseOpenCL能让OpenCV 启用或者停用 GPU运算&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CvInvoke.UseOpenCL = CvInvoke.HaveOpenCLCompatibleGpuDevice;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;emgu包里已经有训练好的数据了,文件名叫做&quot;haarcascade_frontalface_alt.xml&quot;,就是上面添加的文件之一&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var face = new CascadeClassifier(&quot;haarcascade_frontalface_alt.xml&quot;);&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在OpenCV中,大部分函数是处理灰度图的,包括这个识别物体,所以需要转成灰度图,然后再调整下亮度&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//加载要识别的图片
var img = new Image&amp;lt;Bgr, byte&amp;gt;(&quot;0.png&quot;);
var img2 = new Image&amp;lt;Gray, byte&amp;gt;(img.ToBitmap());
//把图片从彩色转灰度
CvInvoke.CvtColor(img, img2, Emgu.CV.CvEnum.ColorConversion.Bgr2Gray);
//亮度增强
CvInvoke.EqualizeHist(img2, img2);&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;其实这一步反而最简单,返回的是rectangle[]格式,因为图中可能有多个人脸,所以返回的是数组.&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//在这一步就已经识别出来了,返回的是人脸所在的位置和大小
var facesDetected = face.DetectMultiScale(img2, 1.1, 10, new Size(50, 50));&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;因为是多个人脸所以需要循环剪切并保存,(→_→)这一块的代码量竟然反而比上面那堆多&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//循环把人脸部分切出来并保存
int count = 0;
var b = img.ToBitmap();
foreach (var item in facesDetected)
{
    count++;
    var bmpOut = new Bitmap(item.Width, item.Height, System.Drawing.Imaging.PixelFormat.Format24bppRgb);
    var g = Graphics.FromImage(bmpOut);
    g.DrawImage(b, new Rectangle(0, 0, item.Width, item.Height), new Rectangle(item.X, item.Y, item.Width, item.Height), GraphicsUnit.Pixel);
    g.Dispose();
    bmpOut.Save($&quot;{count}.png&quot;, System.Drawing.Imaging.ImageFormat.Png);
    bmpOut.Dispose();
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//释放资源退出
b.Dispose();
img.Dispose();
img2.Dispose();
face.Dispose();&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/481370/201710/481370-20171029234720055-2052053817.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    //如果支持用显卡,则用显卡运算
    CvInvoke.UseOpenCL = CvInvoke.HaveOpenCLCompatibleGpuDevice;

    //构建级联分类器,利用已经训练好的数据,识别人脸
    var face = new CascadeClassifier(&quot;haarcascade_frontalface_alt.xml&quot;);

    //加载要识别的图片
    var img = new Image&amp;lt;Bgr, byte&amp;gt;(&quot;0.png&quot;);
    var img2 = new Image&amp;lt;Gray, byte&amp;gt;(img.ToBitmap());

    //把图片从彩色转灰度
    CvInvoke.CvtColor(img, img2, Emgu.CV.CvEnum.ColorConversion.Bgr2Gray);

    //亮度增强
    CvInvoke.EqualizeHist(img2, img2);

    //在这一步就已经识别出来了,返回的是人脸所在的位置和大小
    var facesDetected = face.DetectMultiScale(img2, 1.1, 10, new Size(50, 50));

    //循环把人脸部分切出来并保存
    int count = 0;
    var b = img.ToBitmap();
    foreach (var item in facesDetected)
    {
        count++;
        var bmpOut = new Bitmap(item.Width, item.Height, System.Drawing.Imaging.PixelFormat.Format24bppRgb);
        var g = Graphics.FromImage(bmpOut);
        g.DrawImage(b, new Rectangle(0, 0, item.Width, item.Height), new Rectangle(item.X, item.Y, item.Width, item.Height), GraphicsUnit.Pixel);
        g.Dispose();
        bmpOut.Save($&quot;{count}.png&quot;, System.Drawing.Imaging.ImageFormat.Png);
        bmpOut.Dispose();
    }

    //释放资源退出
    b.Dispose();
    img.Dispose();
    img2.Dispose();
    face.Dispose();

    return;

}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;编译后运行可以看到目录多了两个图片文件:&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/481370/201710/481370-20171029234607539-390032778.png&quot;/&gt;&lt;br/&gt;打开看看:&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/481370/201710/481370-20171029234703180-271947681.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 15:48:00 +0000</pubDate>
<dc:creator>asml</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DragonStart/p/7751993.html</dc:identifier>
</item>
<item>
<title>漏洞挖掘高级方法 - SecurityKid</title>
<link>http://www.cnblogs.com/SecurityKid/p/7751802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SecurityKid/p/7751802.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;最近看了一篇某外国大佬写的关于漏洞挖掘的文章，讲的挺基础的，然后对自己也有一些帮助，于是抽时间翻译过来，一是自己学习，二是希望能够帮助到一些朋友，翻译水平有限还望见谅，有兴趣可以看原文，文末附链接，下面为正文：&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 在此文中我将讲述我在软件漏洞挖掘的实践中学到的技术及方法，不过这些内容并非那些前沿的技术，大多是基础类型的技术及方法。对于初学者而言，希望能够给予入门的指导，对于经验丰富的漏洞挖掘工作者而言，我认为也可以从中获得一些启发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 受限于我个人的知识水平及能力，这篇文章并不可能做到面面俱到，也希望阅读者能够与我积极交流，对于其中的错误不吝赐教。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我将会把此文分为三个章节，分别阐述我的观点。首先我会从一个较高的角度总结于我眼中何谓漏洞挖掘；然后详细讨论在软件漏洞挖掘过程中我们需要掌握的技能以及需要的知识和工具等；最后我将谈谈一些我认为有利于漏洞挖掘但是却并非纯技术性的想法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、什么是漏洞挖掘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVz5zh177XkThVBbaWaKeqOt8W2eGtx54fFHKPiaibYVhnC3j71aRSgBRg/0?wx_fmt=gif&quot; alt=&quot;&quot; data-type=&quot;gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-w=&quot;544&quot;/&gt;​&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从某个角度来讲，我们可以将漏洞挖掘工作比作玩迷宫游戏，不同的是，这个迷宫与我们平时所见的游戏中的迷宫略有不同：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; （1）你无法立即看到它整体的外观&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（2）随着漏洞挖掘工作的深入，这个迷宫的形状逐渐扩大&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（3）你将会拥有多个起点及终点，但是无法确定这些点具体在哪里&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（4） 最终这个迷宫可能永远也无法100%的完整，但是却能够弄清楚A点至B点的一条完整路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以用下面这张图来进行描述：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVlY8hZMp27saqkzMoy6mlgtkicicia6JiaW5o8el6p3FW9p8GTW7YbJglPQ/0?wx_fmt=gif&quot; alt=&quot;&quot; data-type=&quot;gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-w=&quot;544&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体一点的描述，我们可以将漏洞挖掘工作归结为三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1） 枚举程序入口点（例如：与程序交互的接口）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（2） 思考可能出现的不安全状态（即漏洞）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（3） 设法使用识别的入口点到达不安全状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即是说，在这个过程中，迷宫是我们研究的应用程序，地图是我们堆程序的理解程度，起点是我们的入口点（交互接口），终点为程序的不安全状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所谓入口点，既可以是UI界面上直观可见的交互接口，也可以是非常模糊与透明的交互接口（例如IPC），以下是部分安全研究员较为感兴趣的关注点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1） 应用程序中比较古老的代码段，并且这一部分随着时间的推移并没有太大的变化。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（2） 应用程序中用于连接由不同开发团队或者开发者开发的程序模块的接口部分&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（3） 应用程序中那些调试和测试的部分代码，这部分代码本应在形成Release版本时去除，但由于某些原因不小心遗留在程序中。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（4）C-S模式（带客户端和服务端）的应用中客户端及服务端调用API的差异部分（例如网页表单中的hide属性字段）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（5）不受终端用户直接影响的内部请求（如IPC）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我认为从攻击面上来划分可以讲漏洞分为两大类，通用漏洞（General）和上下文漏洞（contextual）。通用型漏洞是指在我们对应用的业务逻辑不是非常熟悉的情况下能够找出的漏洞，例如一些RCE（远程代码执行）、SQLi（sql注入）、XSS（跨站）等。上下文漏洞是指需要在对应用的业务逻辑、认证方式等非常熟悉的情况下才能找到的漏洞，例如权限绕过等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在漏洞挖掘的过程中，我首先会根据经验优先考虑研究测试那些可能会对应用产生巨大威胁的部分。一些轻量级威胁检测模型（如STRIDE）可以辅助我们做出这样的决策。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们首先看一下一个WEB应用程序的漏洞示例，后面将会介绍桌面程序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhV1cShFCqd37ymOp7tOM5eMyn54cVLHltzae7a3Ks5Dc6IYYbLskcHaw/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.26583592938733125&quot; data-w=&quot;963&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;首先我们假设目标web应用是一个单页面应用（single-page-application SPA），我们已经获得合法验证去访问这个应用，但是我们没有任何关于服务端的源代码或者二进制文件。在这种情况下，当我们枚举入口点时，可以通过探寻该应用的不同功能来进一步了解器业务逻辑及功能，可以通过抓包分析看HTTP请求内容，也可以分析客户端的网页代码获取需要提交表单的列表，但是最终的限制还是我们无法具体知悉客户端和服务端调用的API之间的区别，不过通过以上方法，我们可以找到一些入口点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着就是操作这些入口点，以试图达到我们预期的不安全状态。由于漏洞的形态很多，我们通常需要构建一个适用于该测试应用程序的业务功能漏洞的测试集，以求达到最高效的寻找漏洞。如果不那样做的话，我们就将会在一些无用的测试集上花费大量时间，并且看不到任何效果（举个例子，当后台的数据库为Postgres时，我们用xp_cmdshell去测试，测试再多次都无济于事）。所以在构造测试集时，需对应用程序的逻辑有较深的理解。下图形象的展示了低效率测试集的效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVHzaibTTHMFttaHWD74PSVKvqNuf8HDhgFOz6BTmMzXecPJd1Vv8tnWg/0?wx_fmt=gif&quot; alt=&quot;&quot; data-type=&quot;gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7058823529411765&quot; data-w=&quot;425&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于桌面应用程序，漏洞挖掘的思路本质上与web程序是类似的，不过也有一些区别：最大的区别在于，桌面应用的执行方式与流程与web程序不一样，下图展示的是桌面应用漏洞挖掘的一些内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVtp7YSM1iceZOubibTOmuyicxKp6sJR8BudsIYicnbXEziahu5Gt0o9zDteQ/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.23409461663947798&quot; data-w=&quot;1226&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;与黑盒测试相比，当有源代码时（白盒测试），在寻找代码入口和程序执行路径等漏洞挖掘点时所做的猜测性的工作会大大减少，在这种情况下，将数据载荷从入口点执行到不安全的程序位置的效率低于从不安全的程序位置回溯至入口点。不过在白盒测试中，你对代码的测试的覆盖面可能会由于你自己的知识局限性而受到影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、漏洞挖掘需要具备的知识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从事漏洞挖掘工作需要具备的知识是极其广泛的，并且随着时间在不断改变，也取决于你所研究的对象（web程序、桌面程序、嵌入式等等）。不过，万变不离其宗，所需要掌握的知识领域却总可以认为是确定的，我认为大致可以分为以下四个方面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1） 程序正向开发技术。这是一个开发者需要掌握的能力，包括编程语言、系统内部设计、设计模式、协议、框架等。拥有丰富编程经验与开发能力的人在漏洞挖掘过程中往往比那些只对安全相关领域有所了解的人员对目标应用能有更深入的理解，从而有更高的产出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）攻防一体的理念。这些知识涵盖了从基本的安全原则到不断变换的漏洞形态及漏洞缓解措施。攻击和防御结合的理念，能够有效帮助研究者既能够发现漏洞，同时也能够快速给出有效的漏洞缓解措施和规避方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; （3）有效使用工具。能够高效的使用工具能够快速将思路转化为实践，这需要通过花时间去学习如何配置和使用工具，将其应用于自己的任务并构建自己的工作流程来不断积累经验。更进一步，需要深入掌握所使用工具的原理，以及如何对其进行二次开发，以使得其能够更加高效的应用于当前的工作实际。事实上，我认为面向过程的学习方法往往比面向工具的学习方法更加高效以及有价值，当自己发现一个在使用一个工具遇到瓶颈时，先不要退缩，尝试去改造它，或者通过自己动手实践去完成能够适应当前工作的工具，这往往能够帮助快速积累大量实践经验。帮助我们以后更加高效的去实践漏洞挖掘工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）对目标应用的理解。最后，也是最重要的，作为一个漏洞挖掘人员，对自己研究的应用程序在安全性方面必须要比这个程序的开发者或维护者有更深的理解。这样你才能尽可能的发现这个程序中的漏洞并修复它。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面这张表格介绍了我认为在挖掘web应用程序和桌面应用程序的漏洞时所需要掌握的内容，限于笔者个人的认知说平，所展示的内容并非特别齐全：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是我经过无数的不眠之夜、数以千计的小时、一次又一次的错误而总结的知识，我相信它将会帮助你提高你挖掘漏洞的能力。如果说上面一节是讲诉挖掘漏洞所需要的知识，那么下面的这一节将讲诉挖漏洞如何做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三.  漏洞挖掘需要做什么&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我分析一个应用程序时，我通常采用下图展示的四个“分析模型”，每当我遇到障碍导致我思路受阻时，我就会从其中一个模型切换到下一个模型，当然，这不是一个线性的切换，我不知道这个方法是否对每个人都有用，但是对于我的确是帮助巨大：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVic817EwsibJrm7d9oKuNpQRNGlgRam3Dg00sk2nkqIRGGKohOlsEsXVg/0?wx_fmt=gif&quot; alt=&quot;&quot; data-type=&quot;gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8343685300207039&quot; data-w=&quot;483&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在每一个模型之中都有主动活动（active activities）与客观活动存在（passive activities），主动活动需要我们对程序的执行环境及上下文有一个比较全面的了解，而客观活动却不一定，比如它是客观存在与程序的一些技术文档之中。不过，这种划分也不一定严格，不过对于每一个activity，我们可以从以下几方面去考虑：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1） 理解有关漏洞的相关模型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（2） 试图假设一个场景去破坏程序&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（3） 尝试去破坏程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（一） 程序用途分析（Use case analysis）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVhHzZ1yFCBTg5d2LvL2M8XWiaicEbxUT27L4lUricQTSrQiaEiax6tauRnDw/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6034912718204489&quot; data-w=&quot;802&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序用途分析是指理解一个应用程序做了什么工作，会提供什么服务等。每当我去分析一个新的应用程序时，我所做的第一件事就是程序用途分析。同时，阅读与该程序的相关文档将有助于进一步理解程序功能（如上图所示）。我总是这样做，以期对程序有一个透彻的了解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或许，比起直接构造测试样例进行测试，这项工作可能并不是那么有趣。不过，它的确帮助我节省了一大笔时间。举一个我自己的例子，我之前发现过Oracle Opera（一个广泛使用的酒店管理软件）[CVE-2016-5563/4/5]的远程代码执行漏洞，我就是通过阅读器用户手册快速找到可能存在危险的数据表，最后快速找出远程代码执行漏洞。有关这个漏洞的分析，请参看：http://jackson.thuraisamy.me/oracle-opera.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（二） 执行条件分析（Implementation analysis）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVCtIMXBZ3LECzUuNAcqOialbkuEfcFIXBQibD2icicoxcqMxuJic9esZbKcg/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6034912718204489&quot; data-w=&quot;802&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行条件分析是指理解应用程序运行时需要包括的环境因素，比如网络配置，端口使用等。可以通过端口扫描，漏洞扫描等方式进行操作。这些配置上的问题，很可能就会导致一个漏洞的出现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;举个例子，一个系统权限级别的程序，由于配置错误，可能会使的低权限的用户能够访问并修改，最终导致一个权限提升，引发一个提权漏洞。又比如，在一个网络程序中，可能程序本身并没有错误，但是由于这个服务器开了一个anonymous的FTP服务器，那么任何人都有可能访问这个机器，这就导致web应用的源代码或者其他敏感文件暴露在外面。这些问题，理论上并非程序自身的漏洞，但是由于其执行环境的因素，就使得其成为一个漏洞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（三） 通信分析（Communications analysis）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhV35FpVqFiacRmrRCUSQ9qvVvsHdPb0FhRyz0lFcwt4ibk3vGk17KicfjeQ/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6034912718204489&quot; data-w=&quot;802&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通信分析是指对一个目标程序与其他进程或系统之间交互信息的方式进行深入分析。在这样的前提下，可通过发送精心构造的请求（request）等方法，触发不安全状态。许多web应用程序漏洞都是通过这种方式发现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上述模式下，需要我们对数据通信协议有较为清晰的认识，如果并不能够清晰的了解协议格式呢？这种情况就要借助黑盒测试的技术进行解决，主要通过发送请求，并根据返回值进行判断是否存在异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面举个例子来说明，这里假设存在一个金融网站，里面有一项功能允许用户使用不同的货币购买预付信用卡。这里假设实现这项业务的请求（Request）如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;fromAccount :  用于购买预付卡的账户&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;fromAmount : 需要从&lt;span&gt;fromAccount转入预付卡的金额（例如 $100）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;cardType : 需要购买的预付卡类型（例如 USD、GBP）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;currencyPair : 付款账户&lt;span&gt;fromAccount和预付信用卡&lt;span&gt;cardType的货币配对 , 用于计算汇率（如 CADUSD、CADGBP）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当我们要去测试这样一个应用程序时，首先我们可能会想到发送一个正常的数据请求，以帮助我们了解该应用程序的标准响应的格式。例如下图，用CAD去购买82美刀的预付卡的请求和响应是下面这个样子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhVSmAhf3MtPRSVVlJrOxuwZG78kts6aVDptrvYClb59Kv8OQTniaY3l2A/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.46167883211678834&quot; data-w=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或许我们并不知道程序在后台到底对我们的数据做了何种处理，但是我们通过观察status字段的属性知道我们的请求是ok的，下面如果我们将fromAmount参数调整为一个负数，或者将fromAccount调整为其他某个人的账户，那么这个web应用就可能会返回错误响应，比如验证不通过。另外如果我们将currencyPair从CADUSD（加元对美元）改为CADJPY（加元对日元）而cardType不变，那么我们会看到返回值中toAmount字段从82.20变为8863.68。如果程序缺乏足够的验证的话，我们有可能通过这种方式获取到更多的钱而付出的钱不变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一方面，如果我们能够获取到后台代码或程序，那事情就变得更加有意思，我们可以轻松了解到后台的运作流程，如后台是如何处理请求，有哪些错误响应，这将有助于我们构造出更加具有针对性的数据对应用进行测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（四） 代码及二进制分析（Code and binary analysis）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icF50Zk95FicibCBp6xo06bEbSSX1QzEmhV6wkLK6RStciavFuMLyNdNOtIZMDKiaQzmnaNibGvXD3Ke8UoK3ZwJZ6cQ/0?wx_fmt=png&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6034912718204489&quot; data-w=&quot;802&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码及二进制分析是指理解一个目标程序是如何处理用户输入的数据，以及该程序的执行流程。目前有很多方法可以对程序实现动态和静态分析，下面介绍其中一部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt; 数据流分析。数据流分析对于寻找入口点以及数据是如何走向潜在的不安全状态是非常有用的。当我在通信分析（Communications analysis）遇到困难，很难构造出合适的request，我便会调整思路采取其他的方式寻找不安全状态，在数据流分析中，我可以使用这种方法，首先判断是否存在不安全状态，如果存在，则进一步跟踪数据是如何流向该状态。这个方法的有点是，一但发现不安全状态，入口点也随之确定，这为发掘漏洞提供巨大帮助。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;11.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;在这个过程中，动态分析和静态分析需要紧密配合起来。举个例子，当你在寻找如何从A点走到B点时，静态分析就好比是在阅读一张地图，而动态分析就好比直接在这地图上走，需要实时关注路上的天气及交通状况，IDA和windbg的配合就是如此。静态分析可以对程序有一个全貌但不细致的理解，动态分析则可以对程序有一个狭隘但却细致的理解，二者是相互补充的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;外部引用分析。在分析程序的过程中，程序上下文环境中可能非常有限，这个时候分析程序的导入API可以帮助我们进一步了解程序的功能以及它与操作系统的交互方式。比如说，程序引用加密库对数据进行加密，那么你可以跟踪这个加密库并分析其功能，进而分析自己的输入是否能够影响其功能。令外，理解程序是如何与操作系统的交互也可以帮助我们进一步找到我们可以与程序进行交互的入口点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;字符串分析，与外部引用分析一样，分析程序中的字符串将帮助我们进一步理解程序中的功能，特别是那些调试信息，关键字或者令牌什么的，或者是那些看起来特别奇特的东西，对这些关键的字符串的分析及跟踪也将有利于我们寻找到更多的程序入口，进而更加全面的找出程序中的缺陷。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;安全扫描分析。使用自动化的扫描工具（如PHP源代码扫描AWS）可能帮助我们快速找到一些常见的漏洞。但是对于寻找基于上下文和基于设计的漏洞并没有太大帮助。我通常并不会对这种方法有太多青睐，只会用来做一些辅助性的功能，如果单纯靠扫描就能找出一堆漏洞，你研究的目标安全做的就太差了，这在目前并不常见，或者说研究这类目标对于提高你自己并无任何帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;依赖性分析。一个应用程序往往会以来其他外来的组件，比如一些开源模块，它所依赖的开源模块自身存在的漏洞可能会被引入造成自身的未公开漏洞。值得一提的是，现今一个程序往往都是引用了众多第三方扩展模块，这些第三方的漏洞极易造成主程序的漏洞。举个例子，大多数浏览器都会使用sqlite做数据缓存，如果sqlite存在漏洞，那么这些浏览器都有可能存在问题，无论是谷歌还是火狐。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;版本分析。如果你有机会访问程序的代码仓库，那么你就可以通过分析历史版本的方式对程序进行分析，这种方式不是基于上下文的，比如说，寻找那些长时间没有做改动的部分，这些部分极易寻在漏洞。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码分析通常需要花费比其他方式更多的时间，同时也更难，因为研究者对这个程序的功能和使用的技术的掌握程度要不亚于其开发者，另外，一个程序的开发可能是由一个团队进行维护，那么对于研究者，全面掌握这些东西显得比较困难。但是只要肯专研，其实什么也都是能够克服的，中国有句古话，只要肯专研，铁棒变花针。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我无法不再次去强调编程能力的重要性，如果一个研究人员对他当前研究的程序所采用的语言和技术有深入扎实的功底，那么他必将创造出很多有价值的东西。从攻击的角度来说，他可以发现更加简单及直观，编写利用程序也将得心应手。从防御的角度来说，他可以提供出代码级别的具有高度针对性的修复建议而非那种通用的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四. 有关漏洞挖掘的其他想法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（一） 漏洞的复杂性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;漏洞的复杂性分布非常广。一方面，有很多漏洞非常简单与直观，并且利用代码一目了然，比如说经典的sql注入。另一方面，在系统中有的看似并不相关，并且就其自身而言并非不安全，但是当这些东西以一种特定的方式结合起来的时候，就有可能引发大的漏洞，比如说条件竞争，或者一些其他的复杂的逻辑漏洞。我尝试将这些漏洞按照复杂级别分为“一级漏洞”和“二级漏洞”，不过也有其他分类方法。引用一局来自Project Zero的Ben Hawkes说过的一句话：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Themodern exploit is not a single shot vulnerability anymore. They tend to be achain of vulnerabilities that add up to a full-system compromise.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;如今想要完成一个完整的利用，只靠单一的漏洞往往行不通。很多时候我们需要靠一连串的漏洞才能完成一起完整的利用，致使系统“妥协”。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（二） 团队工作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在一个团队中工作能够有效帮助自己了解自己不知道的知识，以及提高自己已知的知识。不过在团队中要需要注意工作的方式方法，知之为知之，不知为不知，永远不要强行假装精通你不熟悉的东西，因为精通的人可以很轻易的指出你的症结。如果一个团队里面大家都不坦诚相待，那么这不是一个合格的团队，你可以尽早更换。在优秀的团队中，不要指望别人会把所有的知识交给你，要学会如何高效的学习，并在团队交流与合作中不断提高。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五. 写在最后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;感谢花时间将我的文章读完，我希望我的文章在可以帮助你解开你的一些对于漏洞挖掘的谜团。在学习和研究漏洞挖掘的过程中遇到困难并感到不知所措是非常正常的。不过学习的过程就是这样，只有不断的去尝试才会进步。祝你在漏洞挖掘的路上走的越来越远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;1.http://jackson.thuraisamy.me/finding-vulnerabilities.html&lt;br/&gt;2.http://jackson.thuraisamy.me/oracle-opera.html&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt; &lt;span&gt;&lt;em&gt;关注安全小子，安全路上你我同行&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/icF50Zk95Ficic4ATePEeicAfdtIXvK3FVF7p9AajeFq6WOgvvwQviammWaLc7cHW36DUkGQmicyInDKcROpU3jwfVgA/0?wx_fmt=jpeg&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6037344398340249&quot; data-w=&quot;482&quot; data-backw=&quot;297&quot; data-backh=&quot;179&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 15:00:00 +0000</pubDate>
<dc:creator>SecurityKid</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SecurityKid/p/7751802.html</dc:identifier>
</item>
<item>
<title>javascript的一些算法的实用小技巧 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/7751770.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/7751770.html</guid>
<description>&lt;p&gt;一、交换两个数字的值&lt;/p&gt;
&lt;p&gt;　　我们交换两个数字的值想到的方法一般就是用一个新的变变量，让他把一个数存起来，然后在交换两个数字的值，看下面这种。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var a = 1,
      b = 2;
//交换两个数字的值
    var c;
    c = a;
    a = b;
    b = c;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看下面这段代码，也可以交换两个数字的值，如果这样写你会不会发现特别高大上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 var a = 1,
     b = 2;
 a = [b, b = a][0];
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
这里其实是a = [][0]数组下标为0的那个，然后 b = a； 这样也可以交换两个数字的值了。
&lt;/pre&gt;

&lt;p&gt;二、数组的排序&lt;/p&gt;
&lt;p&gt;　1.数组方法中的sort排序方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 var a = [9,8,8,6,1,2,4,56];
    a.sort(function(a,b){
        return a - b;//由小到大排序
    })
    console.log(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这是数组方法中的sort排序方法，如果return b - a; 就是由大到小排序，其中的原理是什么呢，其实就是冒泡排序法&lt;/p&gt;
&lt;p&gt; 2.冒泡排序法 （由小到大排列）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var a = [9,8,7,6,5,4,3,2,1];
for(var i=0; i&amp;lt;a.length-1; i++){
   for(var j=0; j&amp;lt;a.length-i; j++){
       if(a[j]&amp;gt;a[j+1])
           a[j] = [a[j+1], a[j+1]=a[j]][0];             
    }
}
console.log(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　3.选择升序法（由小到大排列）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 var a = [9,8,7,5,6,4,1,3,1];
    for(var i=0; i&amp;lt;a.length-1; i++){
        for(var j=i+1; j&amp;lt;a.length; j++){
                if(a[i]&amp;gt;a[j])
                a[i] = [a[j],a[j]=a[i]][0];
        }
    }
    console.log(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三、for in 循环 遍历json&lt;/p&gt;
&lt;p&gt;　　我学习for in循环的时候是在学json的时候学到的，看下面这段代码。&lt;/p&gt;
&lt;p&gt;　　1.for in循环遍历出json里面所有的属性名&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
     var json = {
                a : 1,
                b : 2,
                nam : 'Z',
                clas2 : '我们的'
        }
        for(i in json){
                console.log(i)
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.我们打印出来的i会是json里面所有的属性名，那么他是怎么循环的呢，我当时一直不太清楚，你尝试一下下面这段代码看一下效果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
     var json = {
                a : 1,
                b : 2,
                nam : 'Z',
                clas2 : '我们的'
        }
        for(i in json);
                console.log(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们在for in 循环的这一行给了一个分号结束语句，然后打印出来i我们会发现他是class2，现在你大概明白了吧，每一次循环这个i代表的就是json本次循环得到的属性名，他不是代表的一个数组，而是代表一个值。&lt;/p&gt;
&lt;p&gt;　　3.for in 循环遍历出json里面所有的值&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
     var json = {
                a : 1,
                b : 2,
                nam : 'Z',
                clas2 : '我们的'
        }
        for(i in json){
                console.log(json[i])
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　四、for in循环遍历数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var a = [1,2,5,6,777,6,21];
for(i in a){
 　　console.log(i)  //这里打印出来的是所有的下标
 　　console.log(a[i]) //这里打印出来的是数组里面所有的值
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　五、遍历json属性到数组&lt;/p&gt;
&lt;p&gt;1.这个里面用到的是每一次用数组的长度来代表他的下标，然后将json里面的属性名遍历到a数组中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var json = {
        a : 1,
        b : 111,
        nam : 'z',
        clas2 : 1
 }
 var a = [];
 for(a[a.length] in json);
        console.log(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　2.遍历json的属性的值到数组中&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var json = {
                a : 1,
                b : 111,
                nam : 'z',
                clas2 : 1
        }
        var a = [];
        for(i in json){
                a[a.length] = json[i];
        }
        console.log(a)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;六、判断浏览器是不是IE678&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
if(!-[1,]){
    alert('这是ie678');
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　说出来你可能不信，&lt;/p&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;1.    请你试一下  alert（[1,2,].length）浏览器中弹窗的数字是多少&lt;/p&gt;
&lt;p&gt;　　谷歌 火狐 一些的弹窗都是2，所以后面的那个逗号浏览器判断是不算的&lt;/p&gt;
&lt;p&gt;　　但是在IE6 7 8 中弹窗出的数字是 3 ，&lt;/p&gt;
&lt;p&gt;　　所以Number( [1,])这个东西在谷歌，火狐的眼中就是1,但是在IE678心中他就是NaN&lt;/p&gt;
&lt;p&gt;2.  前面的 - 号  隐式转换为Number型&lt;/p&gt;
&lt;p&gt;3 取反 判断内的值为true，所以可以在这里面判断成。&lt;/p&gt;

&lt;p&gt; 　　如果你看到我的文章可以收获一些知识，那么我会非常高兴的。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 14:53:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/7751770.html</dc:identifier>
</item>
<item>
<title>SSM（Spring+SpringMVC+Mybatis）框架搭建详细教程【附源代码Demo】 - 柒小栈主</title>
<link>http://www.cnblogs.com/qixiaoyizhan/p/7751732.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qixiaoyizhan/p/7751732.html</guid>
<description>&lt;h2&gt;【前言】&lt;/h2&gt;
&lt;p&gt;　　应某网络友人邀约，需要一个SSM框架的Demo作为基础学习资料，于是乎，就有了本文。一个从零开始的SSM框架Demo对一个新手来说，是非常重要的，可大大减少在学习过程中遇到的各种各样的坑，说到最后，也算是助人为乐吧！下面我们从零开始进行SSM框架的搭建，在介绍最后，我会把项目部署在&lt;span&gt;&lt;strong&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;以便需要Demo的亲朋好友们进行下载~~~&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://github.com/dong666/SSM-Demo&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;strong&gt;https://github.com/dong666/SSM-Demo&lt;/strong&gt;&lt;/strong&gt;&lt;/a&gt;　&lt;strong&gt;&lt;span&gt;（访问记得Star哦~）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;本Demo是在IDEA下搭建的Maven项目，在进行下面阅读前先了解这一点！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;【开发环境】&lt;/h2&gt;
&lt;h4&gt;　　1.操作系统：Windows7 ×64 Sp1&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029183046055-1256210930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　2.Java-Version：1.8.0_101&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029183149789-1593251092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　3.IDE:IntelliJ IDEA 2017.2.2 x64&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029183214336-1118240204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;一、新建项目&lt;/h2&gt;
&lt;h4&gt;　　运行IDEA，进入初始化界面，然后我们选择新建项目（进入主界面新建项目也是一样的）&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029183553398-753571014.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;366&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　在Maven选项卡里面找到对应的java web选项，然后我们点下一步&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029183935930-575638356.png&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;472&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　这一步填入组织等信息，这里比较随意，按照自己的需求进行填写，然后下一步&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029184128805-1521091041.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;471&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　这里我早已配置好本地Maven仓库，因此直接默认即可。如果没进行配置本地默认仓库的话，请网上查找对应的资料进行配置&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029184317930-90128668.png&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;472&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　输入Project name，和需要保存的路径，然后finish&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029184505336-420145573.png&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;471&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　去泡一杯咖啡吧，这里需要一小段时间哦~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;　　稍等片刻，idea已经为我们自动建好了一切。到这里，我们的第一步，新建项目阶段已经完成，欢庆一下，进入下一个阶段。&lt;/h4&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029184835930-427964594.png&quot; alt=&quot;&quot; width=&quot;604&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　新建好项目后，我们首先打开SSM_Demo，修改一下JDK版本。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029214230430-594440485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029214251195-78637498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在settings里面对项目版本进行修改：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029215546976-2054631998.png&quot; alt=&quot;&quot; width=&quot;657&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;&lt;span&gt;　原来是1_5，现在改为1_8，可能会存在spring等框架版本和jdk版本不兼容问题，因此，提前升级了版本。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;二、目录结构调整&lt;/h2&gt;
&lt;h4&gt;首先我们配置Maven的项目结构，选择Project Structure&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029185302539-264117483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　选择Modules标签页，然后新建并标识对应的项目结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029185418617-659374416.png&quot; alt=&quot;&quot; width=&quot;577&quot; height=&quot;288&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　最终的文件结构如下所示：&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029203155867-641461335.png&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;495&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029203129289-1465354160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　- Java为主Java代码文件夹&lt;/p&gt;
&lt;p&gt;　　　　- Controllers 控制器文件文件夹&lt;/p&gt;
&lt;p&gt;　　　　- Dao （数据访问）层文件夹&lt;/p&gt;
&lt;p&gt;　　　　- Service（业务逻辑）层文件夹&lt;/p&gt;
&lt;p&gt;　　　　- Entity（实体）层文件夹&lt;/p&gt;
&lt;p&gt;　　- resources资源文件夹&lt;/p&gt;
&lt;p&gt;　　　　- mapper mybatis sql文件夹&lt;/p&gt;
&lt;p&gt;　　- webapp web页面文件夹&lt;/p&gt;
&lt;p&gt;　　- Test 测试文件夹&lt;/p&gt;
&lt;h2&gt;三、Maven包的初始化&lt;/h2&gt;
&lt;h4&gt;Maven是采用配置文件的方式进行jar包的自动导入，因此，我们需要进行对配置文件的修改来进行jar包的导入。&lt;/h4&gt;
&lt;h4&gt;　　打开pom.xml文件&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029203111023-2022824980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt; 　　添加我们将会用到的一系列jar包配置（这里将我的配置直接复制过来，作为参考）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;  xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;QX_JFrame&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo Maven Webapp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Unit Test - 单元测试&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-orm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring transaction&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-tx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-mock&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-expression&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring Web + Spring MVC&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.pagehelper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pagehelper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.7.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.jsqlparser&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jsqlparser&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mysql jdbc&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.38&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;c3p0&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;c3p0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;c3p0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;NoClassDefFoundError: javax/servlet/jsp/jstl/core/Config&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/jstl/jstl &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;file upload jar package&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-io/commons-io &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.json/json &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.json&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;20160212&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/net.sf.json-lib/json-lib &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.sf.json-lib&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json-lib&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-lang/commons-lang &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-beanutils&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-beanutils&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-collections/commons-collections &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-collections&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-collections&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-logging/commons-logging &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-logging&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-logging&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/net.sf.ezmorph/ezmorph &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.sf.ezmorph&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ezmorph&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;json serialize and deserialization&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入fastjson依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入gson依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.google.code.gson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;gson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Base64 加解密&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/net.iharder/base64 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.iharder&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;base64&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.3.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/commons-codec/commons-codec &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;log4j&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.logging.log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.jetbrains&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;annotations-java5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;210&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;212&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;213&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;214&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;216&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;220&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　待配置好的jar包都自动下载并导入后，我们maven包的导入阶段就完成了，下面我们开始整合各个组件。&lt;/h4&gt;
&lt;h2&gt;四、Spring MVC的配置&lt;/h2&gt;
&lt;h4&gt; 　　在resources资源文件夹下新建spring-servlet.xml文件，并在配置文件中声明spring mvc框架对控制器、页面、资源的访问&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029202824242-667310860.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在其中添加下面配置标签信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context/spring-context-3.1.xsd
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/mvc
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 启动包扫描功能，以便注册带有@Controllers、@service、@repository、@Component等注解的类成为spring的bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;Controllers&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对模型视图名称的解析，在请求时模型视图名称添加前后缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.JstlView&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 前缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 后缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 访问静态文件（jpg,js,css）的方法 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;mvc:resources location=&quot;/files/&quot; mapping=&quot;/files/**&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;mvc:resources location=&quot;/scripts/&quot; mapping=&quot;/scripts/**&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;mvc:resources location=&quot;/styles/&quot; mapping=&quot;/styles/**&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;mvc:resources location=&quot;/Views/&quot; mapping=&quot;/Views/**&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029202935789-2147334528.png&quot; alt=&quot;&quot; width=&quot;725&quot; height=&quot;78&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里的Controllers对应的是我们之前新建好的Controllers包文件夹。&lt;/p&gt;
&lt;h4&gt;　　对web.xml进行配置，将我们刚才添加的spring-servlet.xml配置进去&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029203517101-1325369565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029203743086-192280144.png&quot; alt=&quot;&quot; width=&quot;658&quot; height=&quot;504&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　这里的classpath为resources资源目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;　　这一步配置的web.xml内容如下：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE web-app PUBLIC
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;         xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;         version&lt;/span&gt;&lt;span&gt;=&quot;3.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Archetype Created Web Application&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring MVC配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring-servlet.xml config&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring-servlet.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　我们新建一个控制器测试一下（在Controllers包新建java类，RequestTestController）：&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029204013961-678621273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接下来在RequestTestController里面写一个rest api接口：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029204702883-1122203942.png&quot; alt=&quot;&quot; width=&quot;501&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接口代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Controllers;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; @RequestMapping(&quot;/api/RequestTest&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RequestTestController {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    @GetMapping()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String TestString(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;this is a test string. Time:2017-10-29 20:42:00&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，我们便可以通过url地址来进行访问我们的接口数据&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029204816461-2110558613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在右上角的运行服务器配置按钮，打开服务器配置项&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029205003555-550446556.png&quot; alt=&quot;&quot; width=&quot;658&quot; height=&quot;449&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里如果左侧列表是空的话，我们就需要点击加号进行服务器的添加，选择Tomcat Server下的Local。然后点击刚刚添加的标签，在右侧输入Server Name，下面会自动提示设置编译方式，选一个编译方式，然后点击OK即可（这一步的前提是装好了Tomcat服务器，如果没有安装，则需要先安装Tomcat服务器）。&lt;/p&gt;
&lt;p&gt;　　然后我们点击右上角的运行，如果没有什么问题的话，我们的控制台界面会提示服务启动成功！（我这样下来是不会出问题的）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029205255320-724152756.png&quot; alt=&quot;&quot; width=&quot;704&quot; height=&quot;609&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　等浏览器打开以后，我们输入我们配置的api地址：&lt;span&gt;http://localhost:8080/api/RequestTest&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029205423820-123334374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　&lt;strong&gt;&lt;span&gt;这样，spring mvc已经成功整合到了项目里面！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;五、Spring和Mybatis的配置&lt;/h2&gt;
&lt;p&gt;　　稍歇片刻后，我们继续进行Mybatis和Spring组件的整合...&lt;/p&gt;
&lt;h4&gt;　　先添加jdbc.properties（JDBC连接配置文件，当然这个文件里面的内容直接写到mybatis配置文件里面也是可以的）&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029210236695-608767755.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;532&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('78c779dc-2cb5-4775-92e4-37ab7f0b0131')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_78c779dc-2cb5-4775-92e4-37ab7f0b0131&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_78c779dc-2cb5-4775-92e4-37ab7f0b0131&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('78c779dc-2cb5-4775-92e4-37ab7f0b0131',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_78c779dc-2cb5-4775-92e4-37ab7f0b0131&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#mysql
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; jdbc.driverClassName=&lt;span&gt;com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; jdbc.url=jdbc\:mysql\://***.***.***\:3306/db_test?useSSL=&lt;span&gt;false
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; jdbc.username=&lt;span&gt;username
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; jdbc.password=&lt;span&gt;password
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#c3p0连接池信息
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; c3p0.minPoolSize=10
&lt;span&gt; 9&lt;/span&gt; c3p0.maxPoolSize=100
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#当连接池中的连接耗尽的时候c3p0一次同时获取的连接数
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; c3p0.acquireIncrement=3
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#定义在从数据库获取新连接失败后重复尝试的次数
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; c3p0.acquireRetryAttempts=60
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#两次连接中间隔时间，单位毫秒
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; c3p0.acquireRetryDelay=1000
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#连接关闭时默认将所有未提交的操作回滚
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; c3p0.autoCommitOnClose=&lt;span&gt;false
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; #当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,&lt;span&gt;如设为0则无限
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; c3p0.checkoutTimeout=3000
&lt;span&gt;20&lt;/span&gt; #每120秒检查所有连接池中的空闲连接。Default: 0
&lt;span&gt;21&lt;/span&gt; c3p0.idleConnectionTestPeriod=120
&lt;span&gt;22&lt;/span&gt; #最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
&lt;span&gt;23&lt;/span&gt; c3p0.maxIdleTime=600
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#如果设为true那么在取得连接的同时将校验连接的有效性。Default: false
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; c3p0.testConnectionOnCheckin=&lt;span&gt;false
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; #如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
&lt;span&gt;27&lt;/span&gt; c3p0.maxStatements=8
&lt;span&gt;28&lt;/span&gt; #maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0
&lt;span&gt;29&lt;/span&gt; c3p0.maxStatementsPerConnection=5
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#自动超时回收Connection
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; c3p0.unreturnedConnectionTimeout=25
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;jdbc.properties&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　继续在resources文件夹里面添加mybatis配置文件 spring-mybatis.xml&lt;/h4&gt;
&lt;p&gt;　　内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('dc2aa421-84a4-4ce9-8bd0-9ad9e1b320aa')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dc2aa421-84a4-4ce9-8bd0-9ad9e1b320aa&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dc2aa421-84a4-4ce9-8bd0-9ad9e1b320aa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('dc2aa421-84a4-4ce9-8bd0-9ad9e1b320aa',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dc2aa421-84a4-4ce9-8bd0-9ad9e1b320aa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;configProperties&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;locations&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:jdbc.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.driverClassName}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbcUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.url}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.username}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.password}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;minPoolSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.minPoolSize}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;acquireIncrement&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.acquireIncrement}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;acquireRetryAttempts&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.acquireRetryAttempts}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;acquireRetryDelay&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.acquireRetryDelay}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;autoCommitOnClose&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.autoCommitOnClose}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;checkoutTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.checkoutTimeout}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;idleConnectionTestPeriod&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.idleConnectionTestPeriod}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxIdleTime&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.maxIdleTime}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testConnectionOnCheckin&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.testConnectionOnCheckin}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxStatements&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.maxStatements}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxStatementsPerConnection&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.maxStatementsPerConnection}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;unreturnedConnectionTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${c3p0.unreturnedConnectionTimeout}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatisSqlSessionFactoryBean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mapperLocations&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;classpath:mapper/*.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis mapper接口 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;basePackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Dao&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spring-mybatis.xml&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　添加spring支持（applicationContext.xml），并在spring支持里面将mybatis配置文件进行引入&lt;/h4&gt;
&lt;p&gt;　　内容如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:annotation-config &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置component所在的包，自动加载需要管理的Bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;Service,Dao&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;spring-mybatis.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　applicationContext.xml配置文件是对spring的配置，我们配置spring组件的扫描包围Service和Dao层目录，然后将spring-mybatis.xml配置文件导入.&lt;/p&gt;
&lt;p&gt;　　完成这三个后的文件目录是这样子的：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029210931101-1702935000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　target文件夹是刚才编译运行时候自动产生的，不要惊慌~~~&lt;/p&gt;
&lt;h4&gt;　　完成这几步后，我们还需要将spring的配置加载到已有的框架中去，打开web.xml文件，进行添加spring配置&lt;/h4&gt;
&lt;p&gt;　　在刚才的web-app标签内继续添加spring支持：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029211118695-686471217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此刻完整的web.xml文件内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('751c4443-fb04-4d7d-9706-44e4829e5a68')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_751c4443-fb04-4d7d-9706-44e4829e5a68&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_751c4443-fb04-4d7d-9706-44e4829e5a68&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('751c4443-fb04-4d7d-9706-44e4829e5a68',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_751c4443-fb04-4d7d-9706-44e4829e5a68&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE web-app PUBLIC
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;         xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;         version&lt;/span&gt;&lt;span&gt;=&quot;3.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Archetype Created Web Application&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring MVC配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Spring-servlet.xml config&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring-servlet.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;spring listener config&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置log4j配置文件的路径，可以是xml或 properties（此参数必须配）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param-name&amp;gt;log4jConfigLocation&amp;lt;/param-name&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param-value&amp;gt;classpath:log4j.properties&amp;lt;/param-value&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;web.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;&lt;span&gt;　到此刻，我们的spring、mybatis已经整合完毕，接下来稍歇片刻，我们进行demo的完成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;六、demo的构建&lt;/h2&gt;
&lt;p&gt; 　　打开数据库，我们新建一个数据库，并设计两张测试表，student和studentclass&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029211606383-562481343.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;student表的设计如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029211620055-415963798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;-- ----------------------------
-- Table structure for `student`
-- ----------------------------
DROP TABLE IF EXISTS `student`&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;CREATE TABLE `student` (
  `Uid` binary(&lt;/span&gt;36) NOT NULL COMMENT 'Uid',&lt;span&gt;
  `Name` varchar(&lt;/span&gt;20) NOT NULL,&lt;span&gt;
  `Age` int(&lt;/span&gt;3) NOT NULL,&lt;span&gt;
  `ClassId` int(&lt;/span&gt;3) NOT NULL,&lt;span&gt;
  PRIMARY KEY (`Uid`)&lt;/span&gt;,&lt;span&gt;
  KEY `StudentClass` (`ClassId`)&lt;/span&gt;,&lt;span&gt;
  CONSTRAINT `StudentClass` FOREIGN KEY (`ClassId`) REFERENCES `studentclass` (`ClassId`)
) ENGINE&lt;/span&gt;=InnoDB DEFAULT CHARSET=utf8&lt;span&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;studentclass表的设计如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029211701726-1924195263.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;386&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;-- ----------------------------
-- Table structure for `studentclass`
-- ----------------------------
DROP TABLE IF EXISTS `studentclass`&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;CREATE TABLE `studentclass` (
  `ClassId` int(&lt;/span&gt;3) NOT NULL AUTO_INCREMENT,&lt;span&gt;
  `ClassName` varchar(&lt;/span&gt;10) DEFAULT NULL,&lt;span&gt;
  PRIMARY KEY (`ClassId`)
) ENGINE&lt;/span&gt;=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8&lt;span&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将数据库建好后，我们进行Entity，Dao，Service层以及mapper文件的的编写。&lt;/p&gt;
&lt;h4&gt;　　首先在mapper文件夹新建一个mapper文件：StudentMapper.xml&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;81&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;Dao.StudentMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;BaseResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;Uid&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;BINARY&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;Name&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;VARCHAR&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;Age&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;INTEGER&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;ClassId&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;INTEGER&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;classid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sql &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;Base_Column_List&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;        Uid, Name, Age, ClassId
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectByPrimaryKey&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;byte[]&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;BaseResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;        select
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;Base_Column_List&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;        from student
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;        where Uid = #{uid,jdbcType=BINARY}
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectByCondition&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;BaseResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        SELECT
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;Base_Column_List&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        from student
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;            1=1
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;uid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;                and Uid=#{uid,jdbcType=BINARY}
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;                and Name=#{name,jdbcType=VARCHAR}
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;age != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;                and Age=#{age,jdbcType=INTEGER}
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;classid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;                and ClassId=#{classid,jdbcType=INTEGER}
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteByPrimaryKey&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;byte[]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;        delete from student
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        where Uid = #{uid,jdbcType=BINARY}
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insert&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        insert into student (Uid, Name, Age,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        ClassId)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        values (#{uid,jdbcType=BINARY}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        #{classid,jdbcType=INTEGER})
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertSelective&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        insert into student
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;(&quot;&lt;/span&gt;&lt;span&gt; suffix&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt; suffixOverrides&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;uid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;                Uid,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;                Name,
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;age != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;                Age,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;classid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                ClassId,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;values (&quot;&lt;/span&gt;&lt;span&gt; suffix&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt; suffixOverrides&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;uid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;                #{uid,jdbcType=BINARY},
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;                #{name,jdbcType=VARCHAR},
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;age != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                #{age,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;classid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;                #{classid,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateByPrimaryKeySelective&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        update student
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                Name = #{name,jdbcType=VARCHAR},
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;age != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;                Age = #{age,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;classid != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                ClassId = #{classid,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        where Uid = #{uid,jdbcType=BINARY}
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateByPrimaryKey&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Entity.Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        update student
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        set Name = #{name,jdbcType=VARCHAR},
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        Age = #{age,jdbcType=INTEGER},
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        ClassId = #{classid,jdbcType=INTEGER}
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        where Uid = #{uid,jdbcType=BINARY}
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;以上这段代码是直接使用mybatis generator直接进行生成的，如果不想手写的话（手写容易出错），可以直接使用该工具进行生成，该工具的下载以及使用参见本人博客地址：&lt;a href=&quot;http://www.cnblogs.com/qixiaoyizhan/p/7597315.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/qixiaoyizhan/p/7597315.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;　　添加Entity实体&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029213132539-205804456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer classid;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] getUid() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUid(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.uid =&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name = name == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : name.trim();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getClassid() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; classid;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setClassid(Integer classid) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.classid =&lt;span&gt; classid;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　在Dao层写Mybatis接口（不需要写实现类，mybatis不需要），新建StudentMapper&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029213115258-322062452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Entity.Student;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Repository;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;@Repository
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; StudentMapper {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; deleteByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insert(Student record);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insertSelective(Student record);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     Student selectByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     List&amp;lt;Student&amp;gt;&lt;span&gt; selectByCondition(Student record);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKeySelective(Student record);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKey(Student record);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　在Service层写对Dao层的访问逻辑，当然Demo没有什么业务处理逻辑，仅作为Demo&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029213318383-540664573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;　IStudentService 接口：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Service;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Entity.Student;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IStudentService {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; deleteByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insert(Student record);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insertSelective(Student record);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     Student selectByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     List&amp;lt;Student&amp;gt;&lt;span&gt; selectByCondition(Student record);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKeySelective(Student record);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKey(Student record);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　StudentService 实现了 IStudentService 接口：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Service;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Dao.StudentMapper;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Entity.Student;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StudentService &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IStudentService {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; StudentMapper studentMapper;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; deleteByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.deleteByPrimaryKey(uid);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insert(Student record) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.insert(record);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insertSelective(Student record) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.insertSelective(record);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Student selectByPrimaryKey(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] uid) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.selectByPrimaryKey(uid);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt;&lt;span&gt; selectByCondition(Student record) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.selectByCondition(record);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKeySelective(Student record) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.updateByPrimaryKeySelective(record);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateByPrimaryKey(Student record) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentMapper.updateByPrimaryKey(record);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　然后我们写一个StudentController用于调用Service&lt;/h4&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029220617555-1525679877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Controllers;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Entity.Student;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Service.IStudentService;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; @RequestMapping(&quot;/api/Student&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StudentController {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; IStudentService service;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @GetMapping()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Get() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         List&amp;lt;Student&amp;gt; students = service.selectByCondition(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         String jsonResult =&lt;span&gt; com.alibaba.fastjson.JSON.toJSONString(students);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; jsonResult;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;&lt;span&gt;　走到这一步的代码目录结构是这样子的：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029220734992-31084957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　如果进行顺利的话，我们运行我们的Tomacat服务器，并调用我们的新接口：http://localhost:8080/api/Student&lt;/h4&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;运行时候，别忘记了修改jdbc.properties文件里的连接url以及用户名密码！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029220845414-1273870722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029220918789-1477794282.png&quot; alt=&quot;&quot; width=&quot;712&quot; height=&quot;140&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;哇，数据成功显示！（别把这个数据当成你会真的显示出来的一样，这是我数据库原有的数据，哈哈哈）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/998608/201710/998608-20171029221108195-1413464896.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;468&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　还不快去添加几条数据调用一下试试嘛~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;七、结尾&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　至此，我们的SSM框架已经基本搭建完毕，我们已经用我们搭建的Demo从真实的数据库中获取到了数据，并转成了Json格式，在浏览器中用Rest api接口的形式获取到了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　该项目源代码可以在Github上找到，如果需要的可以直接去下载-&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;a href=&quot;https://github.com/dong666/SSM-Demo&quot; target=&quot;_blank&quot;&gt;https://github.com/dong666/SSM-Demo&lt;/a&gt; (不赶紧访问点个Star嘛？)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;如果在搭建中还有任何疑问，随时可以在下面的签名联系方式中找到我~ 茫茫人海中，也是有缘~~~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;如果有推荐工作的也可以在下面的联系方式中找到我哦，如果是这样的话，我是真的感激呢！！！~~~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 14:42:00 +0000</pubDate>
<dc:creator>柒小栈主</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qixiaoyizhan/p/7751732.html</dc:identifier>
</item>
<item>
<title>PhiloGL学习（5）——神说要有光，便有了光 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/7751691.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/7751691.html</guid>
<description>&lt;p&gt;上一篇文章中介绍了如何创建三维对象及加载皮肤，本文为大家介绍如何为场景添加光源。&lt;/p&gt;

&lt;p&gt;光在任何地方都是非常重要的，无论在哪里都说是要发光发热，光和热也是分不开的。光线分为点光源和线光源，所谓点光源和线光源也是个相对的概念，站在地球上我们可以认为太阳光是线光源，其实从更大的尺度来看太阳光也是个点光源，只是我们站在地球上来看光线基本上是平行的了，所以可以认为是线光源。所有问题，站在不同的角度来看就会发生变化。&lt;/p&gt;
&lt;p&gt;光线还有另外几个概念，环境光（ambient light）、漫反射光（diffuse light）、镜面反射光（specular light）。所谓环境光是指入射光均匀地从周围环境入射至景物表面并等量地向各个方向反射出去，通常物体表面还会受到从周围环境来的反射光（地面、天空、墙壁等）的照射，这些统称为环境光。漫反射光表示特定光源在景物表面的反射光中那些向空间各方向均匀反射出去的光。镜面反射光为朝一定方向的反射光，如点光源照射一个金属球时会在表面形成一块特定亮的区域，它是光源在金属球面上产生的镜面反射光，镜面反射光与物体的光滑程度有关系。&lt;/p&gt;
&lt;p&gt;对于3D也是一样，我这几年搞的比较多的是地理信息系统，那么为什么还要学习3D以及之前的大数据等技术呢？首先我对学习充满了无限热情，碰到新技术就想学一下，当然这不见得是个好事情，因为一个人不可能把什么都学会，必须要有所取舍，否则就会像我一样导致什么都略懂但都不精通。其次任何知识都是有用的，不知道哪天就会用到，比如Hadoop集群，刚开始感觉很高大上就学了一点，后面果然需要使用这种分布式计算技术来处理遥感影像，于是Geotrellis很快就上手了，关于3D我认为也是同样如此，这个说不定就会在将来的工作中用到，比如倾斜摄影以及点云等等技术。&lt;/p&gt;
&lt;p&gt;骚年们，让我们开始今天的学习吧。&lt;/p&gt;

&lt;p&gt;首先，我们必须清楚，光源是加在整个场景中的而不是某个对象，就像太阳光打到地球上，是整个环境都有了光，而不是说只是某个对象有了光。对待PhiloGL也是一样，直接从场景中获取光线设置信息，并对其进行设置。&lt;/p&gt;
&lt;h2 id=&quot;场景配置&quot;&gt;2.1 场景配置&lt;/h2&gt;
&lt;p&gt;所以在onLoad事件中添加如下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; scene &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;scene&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; lightConfig &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lights&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;lightConfig&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lightConfig就是对整个场景光源设置的变量。首先设置其enbale属性为true，表示使用光源。上面分析的几种光源均可以添加或者不添加在特定场景中，并可以任意设置其光源位置及颜色分量等。&lt;/p&gt;
&lt;h2 id=&quot;线光源&quot;&gt;2.2 线光源&lt;/h2&gt;
&lt;p&gt;设置lightConfig属性的directional的direction和color属性。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;lightConfig&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;directional&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;lightConfig&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;directional&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中direction表示光线方向，color表示光线颜色。&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;此处需要补充一个之前早已涉及但被我忽略的问题——坐标系。坐标系是任何图形学的基础，居然遗漏了此问题。&lt;/p&gt;
&lt;p&gt;WEbGL同样采用笛卡尔左手坐标系，其Z轴正向为从屏幕指向用户的方向，X轴正向为从屏幕中央指向屏幕右侧的方向，Y轴正向为从屏幕中央指向屏幕上侧的方向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处light是我定义的变量，存储了光线的上述信息，注意此处变量前的+，此符号在js中的意义为将其他类型的数据转换为number，此处因为可以直接定义成number类型，所以不写也可。&lt;/p&gt;
&lt;p&gt;此处还有一个问题，经过我实际测试，线光源的x、y、z为反向，即真正光线的向量方向为(-x,-y,-z)。当然此处可能是由于我对坐标系理解有误或者实验有误，如果如此，欢迎批评指正。&lt;/p&gt;
&lt;h2 id=&quot;点光源&quot;&gt;2.3 点光源&lt;/h2&gt;
&lt;p&gt;点光源直接设置lightConfig的points属性。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;lightConfig&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;diffuse&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 散射光&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dg&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;specular&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 反射光&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sg&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sb&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;light&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;z&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中diffuse表示散射光，specular表示散射光，position表示点光源的位置，此处位置为实际的光源点的位置。&lt;/p&gt;
&lt;h2 id=&quot;环境光&quot;&gt;2.4 环境光&lt;/h2&gt;
&lt;p&gt;设置lightConfig的ambient属性。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;lightConfig&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ambient&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;ambient&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;ambient&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;ambient&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;环境光不需要设置位置，无论物体处在何处以及哪一面均会被射上此光。&lt;/p&gt;
&lt;h2 id=&quot;另外一种写法&quot;&gt;2.5 另外一种写法&lt;/h2&gt;
&lt;p&gt;采用上面的写法的好处在于我们可以改变光线的值或者光线的位置，其方法如同在第二篇文章中讲述的动画，直接改变light的值即可。当然如果为固定我们还可以直接写在PhiloGL的配置中，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;PhiloGL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;lights&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;directional&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是线光源的设置方法，可以看出两种方式写法实质相同。点光源写法相同。&lt;/p&gt;

&lt;p&gt;本文简单介绍了如何设置光源。到这里PhiloGL的基础以及WebGL的基础我们已经基本全部掌握了，下一篇文章介绍一个案例，做一个自转的地球及围绕其公转的地球。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 14:31:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/7751691.html</dc:identifier>
</item>
<item>
<title>Kotlin——最详细的接口使用、介绍 - Jetictors</title>
<link>http://www.cnblogs.com/Jetictors/p/7751662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jetictors/p/7751662.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6304125-1e320199e94c0cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中，接口(&lt;code&gt;Interface&lt;/code&gt;)的使用和Java中的使用方式是有很大的区别。不管是接口中的属性定义，方法等。但是定义方式还是相同的。&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6304125-51e015b4adc0bc01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一接口的声明&quot;&gt;一、接口的声明&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、接口的声明&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关键字：&lt;strong&gt;interface&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;interface 接口名{
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、使用&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;关键字：冒号(&lt;code&gt;:&lt;/code&gt;)，这一点是和&lt;code&gt;Java&lt;/code&gt;不同的。&lt;code&gt;Java&lt;/code&gt;中使用接口使用的是&lt;code&gt;implements&lt;/code&gt;关键字&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中冒号(&lt;code&gt;:&lt;/code&gt;)使用的地方很多：&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;用于变量的定义&lt;/li&gt;
&lt;li&gt;用于继承&lt;/li&gt;
&lt;li&gt;用于接口&lt;/li&gt;
&lt;li&gt;方法的返回类型声明&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;使用格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class 类名 ： 接口名{
    // 重写的接口函数、属性等
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、举例说明&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {

   // 类的初始化
   var demo = Demo1()

   demo.fun1()
}

/**
 * 我定义的接口
 */
interface Demo1Interface{

    // 定义的方法
    fun fun1()
}

/**
 * 接口的实现类
 */
class Demo1 : Demo1Interface{
    override fun fun1() {
        println(&quot;我是接口中的fun1方法&quot;)
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;我是接口中的fun1方法&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二接口中的方法使用&quot;&gt;二、接口中的方法使用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;不带结构体的函数可以省略大括号，且不用强制重写带结构体的函数就可以直接调用。不太明白也没关系，下面的代码中都有注释。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {
    var demo = Demo2()

    demo.fun1()
    demo.fun2(5)
    println(demo.fun3(10))
    println(demo.fun4())

    //可以不重写该方法直接调用
    demo.fun5()
}

interface Demo2Interface{

    /**
     * 定义一个无参数无返回值的方法
     */
    fun fun1()

    /**
     * 定义一个有参数的方法
     */
    fun fun2(num: Int)

    /**
     * 定义一个有参数有返回值的方法
     */
    fun fun3(num: Int) : Int

    // 下面的两个方法是有结构体， 故可以不重写

    /**
     * 定义一个无参数有返回值的方法
     */
    fun fun4() : String{
        return &quot;fun4&quot;
    }

    /**
     * 定义一个无结构体函数，大括号是可以省略的
     */
    fun fun5(){
        // 如果函数中不存在表达式，大括号可以省略。
        // 如fun1一样
    }
}

class Demo2 : Demo2Interface{

    override fun fun1() {
        println(&quot;我是fun1()方法&quot;)
    }

    override fun fun2(num: Int) {
        println(&quot;我是fun2()方法，我的参数是$num&quot;)
    }

    override fun fun3(num: Int): Int {
        println(&quot;我是fun3()方法，我的参数是$num，并且返回一个Int类型的值&quot;)
        return num + 3
    }

    override fun fun4(): String {
        println(&quot;我是fun4()方法，并且返回一个String类型的值&quot;)
   
        /*
            接口中的fun4()方法默认返回”fun4“字符串.
            可以用super.fun4()返回默认值
            也可以不用super关键字，自己返回一个字符串
        */
        return super.fun4()
    }

    /*
         接口中的fun5()带有结构体，故而可以不用重写，
         fun4()同样
    */

    //    override fun fun5() {
    //        super.fun5()
    //    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;我是fun1()方法
我是fun2()方法，我的参数是5
我是fun3()方法，我的参数是10，并且返回一个Int类型的值
13
我是fun4()方法，并且返回一个String类型的值
fun4&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三接口中的属性使用&quot;&gt;三、接口中的属性使用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;在接口中申明属性。接口中的属性要么是抽象的，要么提供访问器的实现。接口属性不可以有后备字段。而且访问器不可以引用它们。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、作为抽象&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;即重写属性的时候是在实现类的类参数中。这也是用代码提示去重写的实现方法&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {
    var demo = Demo3(1,2)
    println(demo.sum())
}

interface Demo3Interface{

    val num1: Int

    val num2 : Int  
}

class Demo3(override val num1: Int, override val num2: Int) : Demo3Interface{
    fun sum() : Int{
        return num1 + num2
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、作为访问器&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;即手动方式去实现重写，并提供get()方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {
    println(demo.result())

    // 在这里也可以改变接口属性的值
    demo.num4 = 10
    println(demo.result())
}

interface Demo3Interface{

     // 声明比那俩和提供默认值
     // 注意： val num3: Int = 3  这种方式不提供，为直接报错的
    val num3: Int
    get() = 3

    val num4: Int
}

class Demo3(override val num1: Int, override val num2: Int) : Demo3Interface{

    // 提供访问器实现
    override val num3: Int
        get() = super.num3

    // 手动赋值
    override var num4: Int = 4

    fun result() : Int{
        return num3 + num4
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;7
13&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四接口的冲突问题解决&quot;&gt;四、接口的冲突问题解决&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;该问题是指当我们在父类中声明了许多类型，有可能出现一个方法的多种实现。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {

    // 类的初始化
    val demo = Demo4()

    demo.fun1()
    demo.fun2()
}

interface Demo4InterfaceOne{
    fun fun1(){
        println(&quot;我是Demo4InterfaceOne中的fun1()&quot;)
    }

    fun fun2(){
        println(&quot;我是Demo4InterfaceOne中的fun2()&quot;)
    }
}

interface Demo4InterfaceTwo{
    fun fun1(){
        println(&quot;我是Demo4InterfaceTwo中的fun1()&quot;)
    }

    fun fun2(){
        println(&quot;我是Demo4InterfaceTwo中的fun2()&quot;)
    }
}

class Demo4 : Demo4InterfaceOne,Demo4InterfaceTwo{

    override fun fun1() {
        super&amp;lt;Demo4InterfaceOne&amp;gt;.fun1()
        super&amp;lt;Demo4InterfaceTwo&amp;gt;.fun1()
    }

    override fun fun2() {
        super&amp;lt;Demo4InterfaceOne&amp;gt;.fun2()
        super&amp;lt;Demo4InterfaceTwo&amp;gt;.fun2()
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：Demo4实现了Demo4InterfaceOne和Demo4InterfaceTwo两个接口，而两个接口中都存在两个相同方法名的方法。因此编译器不知道应该选哪个，故而我们用&lt;code&gt;super&amp;lt;接口名&amp;gt;.方法名&lt;/code&gt;来区分。&lt;/p&gt;
&lt;h2 id=&quot;五总结&quot;&gt;五、总结&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中，接口的重要性还是相当大的，不管是对代码的重构，还是项目的架构梳理。都占据一定的比重，故而学好接口是很有必要性的。当然，此篇文章只作为最入门级的文章，但是文章对一些用法写的比较详细。我也是参照&lt;a href=&quot;http://www.kotlindoc.cn/ClassesAndObjects/Interfaces.html&quot;&gt;官方文档&lt;/a&gt;写的。&lt;br/&gt;&lt;a href=&quot;https://github.com/Jetictors/KotlinLeran/tree/master/src/com/kotlin/leran/cls/interfaceDemo&quot;&gt;项目源代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果各位大佬看了之后感觉还阔以，就请各位大佬随便star一下，您的关注是我最大的动力。&lt;br/&gt;我的个人博客：&lt;a href=&quot;https://jetictors.github.io/&quot;&gt;Jetictors&lt;/a&gt;&lt;br/&gt;我的简书：&lt;a href=&quot;http://www.jianshu.com/u/9877d6088780&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/u/9877d6088780&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 14:27:00 +0000</pubDate>
<dc:creator>Jetictors</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jetictors/p/7751662.html</dc:identifier>
</item>
<item>
<title>Appium python自动化测试系列之等待函数如何进行实战（九） - Mushishi_xu</title>
<link>http://www.cnblogs.com/Mushishi_xu/p/7751523.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mushishi_xu/p/7751523.html</guid>
<description>&lt;h3&gt;​9.1 等待函数的使用&lt;/h3&gt;
&lt;h4&gt;9.1.1 为什么要使用等待函数&lt;/h4&gt;
&lt;p&gt;我们在做自动化的时候很多时候都不是很顺利，不是因为app的问题，我们的脚本也没问题，但是很多时候都会报错，比如一个页面本来就有id为1的这个元素，可是我无论怎么定位他都没办法操作，然后报错，这个是怎么个情况呢？因为当我们app打开一个页面的时候我们的appium的运行速度过快那么可能害没有将页面的资源解析完成然后你就去操作了，这样能行吗？肯定不行的，这样不报错谁错呢？所以在很多的时候我们都需要加载等待时间的。那我们是不是盲目的去每个页面都加载等待时间呢？&lt;/p&gt;
&lt;h4&gt;9.1.2 什么时候使用等待函数&lt;/h4&gt;
&lt;p&gt;答案肯定是否定的，自动化的目的是高效，但是你每个页面都去添加等待时间那么执行下来的效率是不是大大降低了？估计你的领导该找你谈话了。在加载等待时间时我们需要根据自己的判断去增加，比如一些页面资源较多加载慢了那你肯定需要加的。是不是都是这样呢？其实不是的，所以这个就有了下面我们需要讲的知识点，几种不同类型的等待。&lt;/p&gt;
&lt;h3&gt;9.2 强制等待&lt;/h3&gt;
&lt;h4&gt;9.2.1 什么是强制等待&lt;/h4&gt;
&lt;p&gt;故名思义就是你必须给我等，有点耍流氓的意思。比如：我进入到登陆页面，刚好有一个强制等待的函数，那么结果就是无论页面的资源加载完没有你都得给我等着。懂了吗？只要时间没到你就给我等着！哈哈，就像那啥一样蛮不讲理哈。&lt;/p&gt;
&lt;h4&gt;9.2.2 强制等待使用&lt;/h4&gt;
&lt;p&gt;在python里面这个比较好，他调用的是time包下的等待函数，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#coding = &quot;utf-8&quot;
import time
time.sleep(10)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先是需要导入time的包，下面一句话就搞定，是不是方便、实用呢？你调试程序的时候这样写写就好，千万别在实际项目中多用。因为这个time的等待是线程的死等，就是无论如何都会执行这一条语句，如果你在实际项目中去运行那么你会发现效率会很慢。所以实际项目不推荐。&lt;/p&gt;
&lt;p&gt;备注：时间是按秒计算&lt;/p&gt;
&lt;h4&gt;9.2.3 强制等待封装实战&lt;/h4&gt;
&lt;p&gt;前面我们学了函数的封装，如果我们这个等待函数需要在很多地方用到是不是每个地方都要来这么一句呢？其实不是的，程序最重要的目的就是我们能够少写哪怕是一个单词我们都要进行封装，这是我的理解。实现同样的功能为什么不挑简单的方法做呢？对吧。看封装代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#conding=&quot;utf-8&quot;
import time
from appium import webdriver
import os 
def Case(platformName,platformVersion,deviceName,app,appPackage,appActivity):
  PATH = lambda p: os.path.abspath(os.path.join(os.path.dirname(__file__), p))
  #print getConfig(&quot;baseconf&quot;, &quot;platformName&quot;)
  desired_caps = {}
  desired_caps['platformName'] = platformName #设置平台
  desired_caps['platformVersion'] = platformVersion #系统版本
  desired_caps['deviceName'] = deviceName #设备id
  desired_caps['autoLaunch'] = 'true' #是否自动启动
  desired_caps['noReset'] = 'true'
  desired_caps['newCommandTimeout'] = 20
  desired_caps['app'] = PATH(app)#安装包路径，放在该py文件的目录下)
  desired_caps['appPackage'] = appPackage #包名
  desired_caps['appActivity'] = appActivity #启动的activity
  driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
  waitFor(5)
      
#等待函数
def waitFor(t):
  time.sleep(t)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　看见这个代码大家是不是有种朦胧的感觉？其实这个就是上一章节让大家下去思考的，我将我们启动的参数做了一个简单的封装，然后将等待函数也进行了封装，然后他俩结合就成了现在的样子。是不是很简单？其实我想告诉你的是这个在真的自动化中不算自动化，但是大家需要慢慢的养成这个思维，多练习。在上面的代码中我们将我们启动app的代码进行了一个简单的重构封装，这个时候对于初学者来说强烈建议大家动手操作，不然你不知道你是否能够启动，而且上面各行代码什么意思一定要搞清楚。&lt;/p&gt;

&lt;h3&gt;9.3 隐式等待&lt;/h3&gt;
&lt;p&gt;　　隐式等待可能对于刚学的人来说比较模糊，不知道是什么意思，大家可以这样理解，智能等待。为什么这么说呢，我们需要先了解了他的用处那么为什么这么叫也就很明白了，首先我们看下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
driver.implicitly_wait(10)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　上面代码就是隐式等待，他的语句就是这样很简单。但是你有思考过一个问题没，为什么这个等待是使用的driver？这里需要说的是因为这个等待函数是webdriver提供的一个等待函数。那么问题又来了，既然是webdriver提供的等待函数为什么没看到他指定需要的等待对象呢？有没有思考过这个问题呢？因为这里的等待函数是针对我们整个driver的。也就是说你只要是用driver去操作一个对象，或者一个元素，当你找不到这个元素或者对象的时候他就会自动的去等待你设置的这个超时时间，如果在超时时间内还没有找到，程序就会报错。是不是感觉这个等待太高大上了？还不动手练习去。&lt;/p&gt;
&lt;p&gt;　　可能又有人会提出疑问说：为什么你这了又driver，我没有啊，或者说我按照你强制等待那样将启动的封装了，然后隐式等待我也这样封装了，然后我这个就报错了，为什么？首先思考一下，你回去把我们生成driver的地方去掉封装，然后运行这样的一句话就不是就不会报错，尝试一下。但是封装就报错，为什么？因为我们这里没有把driver返回出去，也就是说我们需要用到的driver现在是没有被定义的，那么肯定会报错，那我如何和前面的代码一样封装呢？看下面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#conding=&quot;utf-8&quot;
import time
from appium import webdriver
import os 
def Case(platformName,platformVersion,deviceName,app,appPackage,appActivity):
  PATH = lambda p: os.path.abspath(os.path.join(os.path.dirname(__file__), p))
  #print getConfig(&quot;baseconf&quot;, &quot;platformName&quot;)
  desired_caps = {}
  desired_caps['platformName'] = platformName #设置平台
  desired_caps['platformVersion'] = platformVersion #系统版本
  desired_caps['deviceName'] = deviceName #设备id
  desired_caps['autoLaunch'] = 'true' #是否自动启动
  desired_caps['noReset'] = 'true'
  desired_caps['newCommandTimeout'] = 20
  desired_caps['app'] = PATH(app)#安装包路径，放在该py文件的目录下)
  desired_caps['appPackage'] = appPackage #包名
  desired_caps['appActivity'] = appActivity #启动的activity
  driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
  waitFor(5)
  return driver  
      
#等待函数
def waitFor(t):
  time.sleep(t)

#隐式等待
def implicit_for_wait(t):
 driver = Case(platformName,platformVersion,deviceName,app,appPackage,appActivity)
 driver.implicitly_wait(t)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再回过头去看代码是不是发现了不一样的地方？这里我们将初始化的driver进行了一个闭包，也就是给出了一个返回值，然后我们在隐式等待中将我们的driver进行调用，然后他就拥有了driver，所以这个时候就能够像上面的代码一样进行调用该等待方法了。&lt;/p&gt;
&lt;h3&gt;9.4 显式等待&lt;/h3&gt;
&lt;p&gt;　　前面我们讲了隐式等待和强制等待，下面我们看看显示等待，同样的先看代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先我们来弄明白这个方法里面几个参数的含义：&lt;/p&gt;
&lt;p&gt;1、driver：是我们操作的driver。&lt;/p&gt;
&lt;p&gt;2、timeout：超时时间，也就是我们找这个元素要找多久&lt;/p&gt;
&lt;p&gt;3、poll_frequency:间隔时间，怎么理解？就是说在超时时间内每多少秒去查询一次，默认情况是0.5秒一次&lt;/p&gt;
&lt;p&gt;4、ignored_exceptions：异常，就是没有找到程序抛出什么异常。在默认情况是跑出：NoSuchElementException&lt;/p&gt;
&lt;p&gt;在一般情况下我们只需要填写前面两个就行。看到这里是否发现一个问题，这个也没有定位元素，只是driver和时间。是不是也是全局的呢？答案肯定是否定的。在一般的情况下显式等待是需要和其他方法一起结合的，看下面完整的代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
driver = self.driver
WebDriverWait(driver, 10,5).until(lambda driver:driver.find_element_by_id(&quot;ssss&quot;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个代码是不是又看不懂了？我们再接着按照刚才的方法把这个代码重构一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;55&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#conding=&quot;utf-8&quot;
import time
from appium import webdriver
import os 
def Case(platformName,platformVersion,deviceName,app,appPackage,appActivity):
  PATH = lambda p: os.path.abspath(os.path.join(os.path.dirname(__file__), p))
  #print getConfig(&quot;baseconf&quot;, &quot;platformName&quot;)
  desired_caps = {}
  desired_caps['platformName'] = platformName #设置平台
  desired_caps['platformVersion'] = platformVersion #系统版本
  desired_caps['deviceName'] = deviceName #设备id
  desired_caps['autoLaunch'] = 'true' #是否自动启动
  desired_caps['noReset'] = 'true'
  desired_caps['newCommandTimeout'] = 20
  desired_caps['app'] = PATH(app)#安装包路径，放在该py文件的目录下)
  desired_caps['appPackage'] = appPackage #包名
  desired_caps['appActivity'] = appActivity #启动的activity
  driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
  waitFor(5)
  return driver  
       
#等待函数
def waitFor(t):
  time.sleep(t)
 
#隐式等待
def implicit_for_wait(t):
 driver = Case(platformName,platformVersion,deviceName,app,appPackage,appActivity)
 driver.implicitly_wait(t)

#显示等待
def wait(t):
  driver = Case(platformName,platformVersion,deviceName,app,appPackage,appActivity)
  WebDriverWait(driver, 10,5).until(lambda driver:driver.find_element_by_id(&quot;ssss&quot;))
  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这里python基础不好的读者会有一定困难，前面的不讲解。先看lambda后面的代码，他是一个匿名函数，冒号前面的是参数，冒号后面的是返回值，driver是我们需要传入的一个参数，类似下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
def appiumDriver(driver):
  return driver.find_element_by_id(&quot;xxxxx&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　他们俩的意思是一样的。接着看.until方法，他给出的解释是：调用该方法提供的驱动程序作为一个参数，直到返回值不为 False。那么整脚本的意识翻译过来是不是在10秒内每5秒去查找一个id为sss的元素，如果没找到那么就报错。&lt;/p&gt;
&lt;p&gt;在自动化中我们需要的是不断去学习新的思想，程序永远是跟着思想走的，如果说你的思想很好了，那么脚本怎么实现就相对而言很简单了。&lt;/p&gt;

</description>
<pubDate>Sun, 29 Oct 2017 13:56:00 +0000</pubDate>
<dc:creator>Mushishi_xu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mushishi_xu/p/7751523.html</dc:identifier>
</item>
<item>
<title>【译】10分钟学会Pandas - Python学习者</title>
<link>http://www.cnblogs.com/yan-lei/p/7718744.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yan-lei/p/7718744.html</guid>
<description>&lt;p&gt;这是关于Pandas的简短介绍主要面向新用户。你可以参考&lt;a&gt;Cookbook&lt;/a&gt;了解更复杂的使用方法&lt;/p&gt;
&lt;p&gt;习惯上，我们这样导入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
In [1]: &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd

In [&lt;/span&gt;2]: &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np

In [&lt;/span&gt;3]: &lt;span&gt;import&lt;/span&gt; matplotlib.pyplot as plt
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建对象&lt;/h2&gt;
&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dsintro&quot;&gt;数据结构简介部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过传递一个列表的值创建一个&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html#pandas.Series&quot;&gt;Series&lt;/a&gt;，让Pandas创建一个默认的整数索引：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
In [4]: s = pd.Series([1,3,5,np.nan,6,8&lt;span&gt;])

In [&lt;/span&gt;5&lt;span&gt;]: s
Out[&lt;/span&gt;5&lt;span&gt;]: 
0    &lt;/span&gt;1.0
1    3.0
2    5.0
3&lt;span&gt;    NaN
&lt;/span&gt;4    6.0
5    8.0&lt;span&gt;
dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过传递的numpy数组创建一个&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html#pandas.DataFrame&quot;&gt;DataFrame&lt;/a&gt;，并使用DataFrame索引和标记列：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
In [6]: dates = pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130101&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=6&lt;span&gt;)

In [&lt;/span&gt;7&lt;span&gt;]: dates
Out[&lt;/span&gt;7&lt;span&gt;]: 
DatetimeIndex([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-04&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
               &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-06&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
              dtype&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;datetime64[ns]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;8]: df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABCD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

In [&lt;/span&gt;9&lt;span&gt;]: df
Out[&lt;/span&gt;9&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
2013-01-06 -0.673690  0.113648 -1.478427  0.524988
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过传递可转换成类似序列结构的字典序列来创建DataFrame。&lt;/p&gt;
&lt;p&gt;查看不同列的&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-dtypes&quot;&gt;数据类型&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [12&lt;span&gt;]: df2.dtypes
Out[&lt;/span&gt;12&lt;span&gt;]: 
A           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你使用的是IPython，可以使用Tab自动补全列名称（以及公共属性）。以下是将要完成的属性的一个子集：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [13]: df2.&amp;lt;TAB&amp;gt;&lt;span&gt;
df2.A                  df2.bool
df2.abs                df2.boxplot
df2.add                df2.C
df2.add_prefix         df2.clip
df2.add_suffix         df2.clip_lower
df2.align              df2.clip_upper
df2.all                df2.columns
df2.any                df2.combine
df2.append             df2.combine_first
df2.apply              df2.compound
df2.applymap           df2.consolidate
df2.as_blocks          df2.convert_objects
df2.asfreq             df2.copy
df2.as_matrix          df2.corr
df2.astype             df2.corrwith
df2.at                 df2.count
df2.at_time            df2.cov
df2.axes               df2.cummax
df2.B                  df2.cummin
df2.between_time       df2.cumprod
df2.bfill              df2.cumsum
df2.blocks             df2.D&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;像你见到的那样，A、B、C、D都是使用Tab自动补全的。E也是如此；为了简洁其它的属性被截断了。&lt;/p&gt;
&lt;h2&gt;查看数据&lt;/h2&gt;
&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/basics.html#basics&quot;&gt;基础部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看frame中头部和尾部的行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [14&lt;span&gt;]: df.head()
Out[&lt;/span&gt;14&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401&lt;span&gt;

In [&lt;/span&gt;15]: df.tail(3&lt;span&gt;)
Out[&lt;/span&gt;15&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
2013-01-06 -0.673690  0.113648 -1.478427  0.524988
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示索引、行和底层numpy数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
In [16&lt;span&gt;]: df.index
Out[&lt;/span&gt;16&lt;span&gt;]: 
DatetimeIndex([&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-04&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
               &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-01-06&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
              dtype&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;datetime64[ns]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;17&lt;span&gt;]: df.columns
Out[&lt;/span&gt;17]: Index([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], dtype=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;18&lt;span&gt;]: df.values
Out[&lt;/span&gt;18&lt;span&gt;]: 
array([[ &lt;/span&gt;0.4691, -0.2829, -1.5091, -1.1356&lt;span&gt;],
       [ &lt;/span&gt;1.2121, -0.1732,  0.1192, -1.0442&lt;span&gt;],
       [&lt;/span&gt;-0.8618, -2.1046, -0.4949,  1.0718&lt;span&gt;],
       [ &lt;/span&gt;0.7216, -0.7068, -1.0396,  0.2719&lt;span&gt;],
       [&lt;/span&gt;-0.425 ,  0.567 ,  0.2762, -1.0874&lt;span&gt;],
       [&lt;/span&gt;-0.6737,  0.1136, -1.4784,  0.525 ]])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示您的数据的快速统计摘要&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [19&lt;span&gt;]: df.describe()
Out[&lt;/span&gt;19&lt;span&gt;]: 
              A         B         C         D
count  &lt;/span&gt;6.000000  6.000000  6.000000  6.000000&lt;span&gt;
mean   &lt;/span&gt;0.073711 -0.431125 -0.687758 -0.233103&lt;span&gt;
std    &lt;/span&gt;0.843157  0.922818  0.779887  0.973118&lt;span&gt;
min   &lt;/span&gt;-0.861849 -2.104569 -1.509059 -1.135632
25%   -0.611510 -0.600794 -1.368714 -1.076610
50%    0.022070 -0.228039 -0.767252 -0.386188
75%    0.658444  0.041933 -0.034326  0.461706
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据转置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [20&lt;span&gt;]: df.T
Out[&lt;/span&gt;20&lt;span&gt;]: 
   &lt;/span&gt;2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06&lt;span&gt;
A    &lt;/span&gt;0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690&lt;span&gt;
B   &lt;/span&gt;-0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648&lt;span&gt;
C   &lt;/span&gt;-1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427&lt;span&gt;
D   &lt;/span&gt;-1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按轴排序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [21]: df.sort_index(axis=1, ascending=&lt;span&gt;False)
Out[&lt;/span&gt;21&lt;span&gt;]: 
                   D         C         B         A
&lt;/span&gt;2013-01-01 -1.135632 -1.509059 -0.282863  0.469112
2013-01-02 -1.044236  0.119209 -0.173215  1.212112
2013-01-03  1.071804 -0.494929 -2.104569 -0.861849
2013-01-04  0.271860 -1.039575 -0.706771  0.721555
2013-01-05 -1.087401  0.276232  0.567020 -0.424972
2013-01-06  0.524988 -1.478427  0.113648 -0.673690
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按值排序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [22]: df.sort_values(by=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;22&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-06 -0.673690  0.113648 -1.478427  0.524988
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;选择&lt;/h2&gt;
&lt;p&gt;请参阅索引文档 &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing&quot;&gt;索引和选择数据&lt;/a&gt; 和 &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced&quot;&gt;多索引/高级索引&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;读取&lt;/h3&gt;
&lt;p&gt;选择一个单独的列，返回一个Series，等同于 df.A&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [23]: df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;23&lt;span&gt;]: 
&lt;/span&gt;2013-01-01    0.469112
2013-01-02    1.212112
2013-01-03   -0.861849
2013-01-04    0.721555
2013-01-05   -0.424972
2013-01-06   -0.673690&lt;span&gt;
Freq: D, Name: A, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用[]选择，对行进行切片。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [24]: df[0:3&lt;span&gt;]
Out[&lt;/span&gt;24&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804&lt;span&gt;

In [&lt;/span&gt;25]: df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130102&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130104&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;25&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;通过标签选择&lt;/h3&gt;
&lt;p&gt;详情参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-label&quot;&gt;标签选择&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用标签获取交叉区域&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [26&lt;span&gt;]: df.loc[dates[0]]
Out[&lt;/span&gt;26&lt;span&gt;]: 
A    &lt;/span&gt;0.469112&lt;span&gt;
B   &lt;/span&gt;-0.282863&lt;span&gt;
C   &lt;/span&gt;-1.509059&lt;span&gt;
D   &lt;/span&gt;-1.135632&lt;span&gt;
Name: &lt;/span&gt;2013-01-01 00:00:00, dtype: float64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过标签选择多轴&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [27]: df.loc[:,[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]]
Out[&lt;/span&gt;27&lt;span&gt;]: 
                   A         B
&lt;/span&gt;2013-01-01  0.469112 -0.282863
2013-01-02  1.212112 -0.173215
2013-01-03 -0.861849 -2.104569
2013-01-04  0.721555 -0.706771
2013-01-05 -0.424972  0.567020
2013-01-06 -0.673690  0.113648
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示标签切片，包含端点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [28]: df.loc[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130102&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130104&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]]
Out[&lt;/span&gt;28&lt;span&gt;]: 
                   A         B
&lt;/span&gt;2013-01-02  1.212112 -0.173215
2013-01-03 -0.861849 -2.104569
2013-01-04  0.721555 -0.706771
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;降低返回对象维度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [29]: df.loc[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130102&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]]
Out[&lt;/span&gt;29&lt;span&gt;]: 
A    &lt;/span&gt;1.212112&lt;span&gt;
B   &lt;/span&gt;-0.173215&lt;span&gt;
Name: &lt;/span&gt;2013-01-02 00:00:00, dtype: float64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取标量值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [30]: df.loc[dates[0],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;30]: 0.46911229990718628
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速访问标量（同上一方法等价）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [31]: df.at[dates[0],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;31]: 0.46911229990718628
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;按位置选择&lt;/h3&gt;
&lt;p&gt;详情参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-label&quot;&gt;按位置选择&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过传递整数选择位置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [32]: df.iloc[3&lt;span&gt;]
Out[&lt;/span&gt;32&lt;span&gt;]: 
A    &lt;/span&gt;0.721555&lt;span&gt;
B   &lt;/span&gt;-0.706771&lt;span&gt;
C   &lt;/span&gt;-1.039575&lt;span&gt;
D    &lt;/span&gt;0.271860&lt;span&gt;
Name: &lt;/span&gt;2013-01-04 00:00:00, dtype: float64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过整数切片，类似于numpy/python&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [33]: df.iloc[3:5,0:2&lt;span&gt;]
Out[&lt;/span&gt;33&lt;span&gt;]: 
                   A         B
&lt;/span&gt;2013-01-04  0.721555 -0.706771
2013-01-05 -0.424972  0.567020
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过列表指定位置，类似于numpy/python样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [34]: df.iloc[[1,2,4],[0,2&lt;span&gt;]]
Out[&lt;/span&gt;34&lt;span&gt;]: 
                   A         C
&lt;/span&gt;2013-01-02  1.212112  0.119209
2013-01-03 -0.861849 -0.494929
2013-01-05 -0.424972  0.276232
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对行切片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [35]: df.iloc[1:3&lt;span&gt;,:]
Out[&lt;/span&gt;35&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对列切片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [36]: df.iloc[:,1:3&lt;span&gt;]
Out[&lt;/span&gt;36&lt;span&gt;]: 
                   B         C
&lt;/span&gt;2013-01-01 -0.282863 -1.509059
2013-01-02 -0.173215  0.119209
2013-01-03 -2.104569 -0.494929
2013-01-04 -0.706771 -1.039575
2013-01-05  0.567020  0.276232
2013-01-06  0.113648 -1.478427
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取指定值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [37]: df.iloc[1,1&lt;span&gt;]
Out[&lt;/span&gt;37]: -0.17321464905330858
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速访问标量（同上一方法等价）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [38]: df.iat[1,1&lt;span&gt;]
Out[&lt;/span&gt;38]: -0.17321464905330858
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;布尔索引&lt;/h3&gt;
&lt;p&gt;使用单列值选择数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [39]: df[df.A &amp;gt;&lt;span&gt; 0]
Out[&lt;/span&gt;39&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从满足布尔条件的DataFrame中选择值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [40]: df[df &amp;gt;&lt;span&gt; 0]
Out[&lt;/span&gt;40&lt;span&gt;]: 
                   A         B         C         D
&lt;/span&gt;2013-01-01  0.469112&lt;span&gt;       NaN       NaN       NaN
&lt;/span&gt;2013-01-02  1.212112       NaN  0.119209&lt;span&gt;       NaN
&lt;/span&gt;2013-01-03       NaN       NaN       NaN  1.071804
2013-01-04  0.721555       NaN       NaN  0.271860
2013-01-05       NaN  0.567020  0.276232&lt;span&gt;       NaN
&lt;/span&gt;2013-01-06       NaN  0.113648       NaN  0.524988
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html#pandas.Series.isin&quot;&gt;isin()&lt;/a&gt;方法进行过滤&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [41]: df2 =&lt;span&gt; df.copy()

In [&lt;/span&gt;42]: df2[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

In [&lt;/span&gt;43&lt;span&gt;]: df2
Out[&lt;/span&gt;43&lt;span&gt;]: 
                   A         B         C         D      E
&lt;/span&gt;2013-01-01  0.469112 -0.282863 -1.509059 -1.135632&lt;span&gt;    one
&lt;/span&gt;2013-01-02  1.212112 -0.173215  0.119209 -1.044236&lt;span&gt;    one
&lt;/span&gt;2013-01-03 -0.861849 -2.104569 -0.494929  1.071804&lt;span&gt;    two
&lt;/span&gt;2013-01-04  0.721555 -0.706771 -1.039575  0.271860&lt;span&gt;  three
&lt;/span&gt;2013-01-05 -0.424972  0.567020  0.276232 -1.087401&lt;span&gt;   four
&lt;/span&gt;2013-01-06 -0.673690  0.113648 -1.478427  0.524988&lt;span&gt;  three

In [&lt;/span&gt;44]: df2[df2[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].isin([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])]
Out[&lt;/span&gt;44&lt;span&gt;]: 
                   A         B         C         D     E
&lt;/span&gt;2013-01-03 -0.861849 -2.104569 -0.494929  1.071804&lt;span&gt;   two
&lt;/span&gt;2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;设置&lt;/h3&gt;
&lt;p&gt;设置一个新列会自动使索引对齐数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
In [45]: s1 = pd.Series([1,2,3,4,5,6], index=pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20130102&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=6&lt;span&gt;))

In [&lt;/span&gt;46&lt;span&gt;]: s1
Out[&lt;/span&gt;46&lt;span&gt;]: 
&lt;/span&gt;2013-01-02    1
2013-01-03    2
2013-01-04    3
2013-01-05    4
2013-01-06    5
2013-01-07    6&lt;span&gt;
Freq: D, dtype: int64

In [&lt;/span&gt;47]: df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = s1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按标签切片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [48]: df.at[dates[0],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按位置设置值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
In [49]: df.iat[0,1] = 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过numpy数组设置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [50]: df.loc[:,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = np.array([5] * len(df))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置结果如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [51&lt;span&gt;]: df
Out[&lt;/span&gt;51&lt;span&gt;]: 
                   A         B         C  D    F
&lt;/span&gt;2013-01-01  0.000000  0.000000 -1.509059  5&lt;span&gt;  NaN
&lt;/span&gt;2013-01-02  1.212112 -0.173215  0.119209  5  1.0
2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0
2013-01-04  0.721555 -0.706771 -1.039575  5  3.0
2013-01-05 -0.424972  0.567020  0.276232  5  4.0
2013-01-06 -0.673690  0.113648 -1.478427  5  5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where操作赋值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [52]: df2 =&lt;span&gt; df.copy()

In [&lt;/span&gt;53]: df2[df2 &amp;gt; 0] = -&lt;span&gt;df2

In [&lt;/span&gt;54&lt;span&gt;]: df2
Out[&lt;/span&gt;54&lt;span&gt;]: 
                   A         B         C  D    F
&lt;/span&gt;2013-01-01  0.000000  0.000000 -1.509059 -5&lt;span&gt;  NaN
&lt;/span&gt;2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0
2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0
2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0
2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0
2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;缺失数据&lt;/h2&gt;
&lt;p&gt;Pandas主要使用np.nan来表示缺失数据。默认情况下不包括在计算中。请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/missing_data.html#missing-data&quot;&gt;缺失数据部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重建索引允许修改/添加/删除指定轴的索引，并返回数据副本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;56]: df1.loc[dates[0]:dates[1],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 1&lt;span&gt;

In [&lt;/span&gt;57&lt;span&gt;]: df1
Out[&lt;/span&gt;57&lt;span&gt;]: 
                   A         B         C  D    F    E
&lt;/span&gt;2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0
2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0
2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0&lt;span&gt;  NaN
&lt;/span&gt;2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除所有缺少数据的行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [58]: df1.dropna(how=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;any&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;58&lt;span&gt;]: 
                   A         B         C  D    F    E
&lt;/span&gt;2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;填写缺失的数据行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [59]: df1.fillna(value=5&lt;span&gt;)
Out[&lt;/span&gt;59&lt;span&gt;]: 
                   A         B         C  D    F    E
&lt;/span&gt;2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0
2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0
2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0
2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取值为nan的布尔值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [60&lt;span&gt;]: pd.isnull(df1)
Out[&lt;/span&gt;60&lt;span&gt;]: 
                A      B      C      D      F      E
&lt;/span&gt;2013-01-01&lt;span&gt;  False  False  False  False   True  False
&lt;/span&gt;2013-01-02&lt;span&gt;  False  False  False  False  False  False
&lt;/span&gt;2013-01-03&lt;span&gt;  False  False  False  False  False   True
&lt;/span&gt;2013-01-04  False  False  False  False  False   True
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;运算&lt;/h2&gt;
&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-binop&quot;&gt;二进制运算的基础部分&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;统计&lt;/h3&gt;
&lt;p&gt;运算一般排除丢失的数据。&lt;/p&gt;
&lt;p&gt;执行描述性统计&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [61&lt;span&gt;]: df.mean()
Out[&lt;/span&gt;61&lt;span&gt;]: 
A   &lt;/span&gt;-0.004474&lt;span&gt;
B   &lt;/span&gt;-0.383981&lt;span&gt;
C   &lt;/span&gt;-0.687758&lt;span&gt;
D    &lt;/span&gt;5.000000&lt;span&gt;
F    &lt;/span&gt;3.000000&lt;span&gt;
dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在其他轴上执行相同的运算&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [62]: df.mean(1&lt;span&gt;)
Out[&lt;/span&gt;62&lt;span&gt;]: 
&lt;/span&gt;2013-01-01    0.872735
2013-01-02    1.431621
2013-01-03    0.707731
2013-01-04    1.395042
2013-01-05    1.883656
2013-01-06    1.592306&lt;span&gt;
Freq: D, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运算具有不同维度和需要对齐的对象。此外，Pandas会沿着指定维度运算。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [63]: s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2&lt;span&gt;)

In [&lt;/span&gt;64&lt;span&gt;]: s
Out[&lt;/span&gt;64&lt;span&gt;]: 
&lt;/span&gt;2013-01-01&lt;span&gt;    NaN
&lt;/span&gt;2013-01-02&lt;span&gt;    NaN
&lt;/span&gt;2013-01-03    1.0
2013-01-04    3.0
2013-01-05    5.0
2013-01-06&lt;span&gt;    NaN
Freq: D, dtype: float64

In [&lt;/span&gt;65]: df.sub(s, axis=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;65&lt;span&gt;]: 
                   A         B         C    D    F
&lt;/span&gt;2013-01-01&lt;span&gt;       NaN       NaN       NaN  NaN  NaN
&lt;/span&gt;2013-01-02&lt;span&gt;       NaN       NaN       NaN  NaN  NaN
&lt;/span&gt;2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0
2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0
2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0
2013-01-06       NaN       NaN       NaN  NaN  NaN
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;应用&lt;/h3&gt;
&lt;p&gt;将函数应用于数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [66&lt;span&gt;]: df.apply(np.cumsum)
Out[&lt;/span&gt;66&lt;span&gt;]: 
                   A         B         C   D     F
&lt;/span&gt;2013-01-01  0.000000  0.000000 -1.509059   5&lt;span&gt;   NaN
&lt;/span&gt;2013-01-02  1.212112 -0.173215 -1.389850  10   1.0
2013-01-03  0.350263 -2.277784 -1.884779  15   3.0
2013-01-04  1.071818 -2.984555 -2.924354  20   6.0
2013-01-05  0.646846 -2.417535 -2.648122  25  10.0
2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0&lt;span&gt;

In [&lt;/span&gt;67]: df.apply(&lt;span&gt;lambda&lt;/span&gt; x: x.max() -&lt;span&gt; x.min())
Out[&lt;/span&gt;67&lt;span&gt;]: 
A    &lt;/span&gt;2.073961&lt;span&gt;
B    &lt;/span&gt;2.671590&lt;span&gt;
C    &lt;/span&gt;1.785291&lt;span&gt;
D    &lt;/span&gt;0.000000&lt;span&gt;
F    &lt;/span&gt;4.000000&lt;span&gt;
dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;直方图&lt;/h3&gt;
&lt;p&gt;详情请请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-discretization&quot;&gt;直方图和离散化&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [68]: s = pd.Series(np.random.randint(0, 7, size=10&lt;span&gt;))

In [&lt;/span&gt;69&lt;span&gt;]: s
Out[&lt;/span&gt;69&lt;span&gt;]: 
0    &lt;/span&gt;4
1    2
2    1
3    2
4    6
5    4
6    4
7    6
8    4
9    4&lt;span&gt;
dtype: int64

In [&lt;/span&gt;70&lt;span&gt;]: s.value_counts()
Out[&lt;/span&gt;70&lt;span&gt;]: 
&lt;/span&gt;4    5
6    2
2    2
1    1&lt;span&gt;
dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;字符串方法&lt;/h3&gt;
&lt;p&gt;Series在字符串中设置了一组字符串处理方法，可以方便地对数组中每个元素进行操作，如下面代码片段所示。请注意，字符串中的模式匹配默认使用&lt;a href=&quot;https://docs.python.org/2/library/re.html&quot;&gt;正则表达式&lt;/a&gt;。（在某些情况下总是使用它们）。详情请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods&quot;&gt;矢量字符串方法&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [71]: s = pd.Series([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Aaba&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Baca&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, np.nan, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CABA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;72&lt;span&gt;]: s.str.lower()
Out[&lt;/span&gt;72&lt;span&gt;]: 
0       a
&lt;/span&gt;1&lt;span&gt;       b
&lt;/span&gt;2&lt;span&gt;       c
&lt;/span&gt;3&lt;span&gt;    aaba
&lt;/span&gt;4&lt;span&gt;    baca
&lt;/span&gt;5&lt;span&gt;     NaN
&lt;/span&gt;6&lt;span&gt;    caba
&lt;/span&gt;7&lt;span&gt;     dog
&lt;/span&gt;8&lt;span&gt;     cat
dtype: object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;合并&lt;/h2&gt;
&lt;h3&gt;连接&lt;/h3&gt;
&lt;p&gt;在连接/合并类型操作的情况下，Pandas提供了一些具有用于索引和关系代数的各种函数合并Series、DataFrame和Panel对象的方法&lt;/p&gt;
&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/merging.html#merging&quot;&gt;合并部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html#pandas.concat&quot;&gt;concat()&lt;/a&gt;把Pandas对象连接：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
In [73]: df = pd.DataFrame(np.random.randn(10, 4&lt;span&gt;))

In [&lt;/span&gt;74&lt;span&gt;]: df
Out[&lt;/span&gt;74&lt;span&gt;]: 
          0         &lt;/span&gt;1         2         3&lt;span&gt;
0 &lt;/span&gt;-0.548702  1.467327 -1.015962 -0.483075
1  1.637550 -1.217659 -0.291519 -1.745505
2 -0.263952  0.991460 -0.919069  0.266046
3 -0.709661  1.669052  1.037882 -1.705775
4 -0.919854 -0.042379  1.247642 -0.009920
5  0.290213  0.495767  0.362949  1.548106
6 -1.131345 -0.089329  0.337863 -0.945867
7 -0.932132  1.956030  0.017587 -0.016692
8 -0.575247  0.254161 -1.143704  0.215897
9  1.193555 -0.077118 -0.408530 -0.862495

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; break it into pieces&lt;/span&gt;
In [75]: pieces = [df[:3], df[3:7], df[7&lt;span&gt;:]]

In [&lt;/span&gt;76&lt;span&gt;]: pd.concat(pieces)
Out[&lt;/span&gt;76&lt;span&gt;]: 
          0         &lt;/span&gt;1         2         3&lt;span&gt;
0 &lt;/span&gt;-0.548702  1.467327 -1.015962 -0.483075
1  1.637550 -1.217659 -0.291519 -1.745505
2 -0.263952  0.991460 -0.919069  0.266046
3 -0.709661  1.669052  1.037882 -1.705775
4 -0.919854 -0.042379  1.247642 -0.009920
5  0.290213  0.495767  0.362949  1.548106
6 -1.131345 -0.089329  0.337863 -0.945867
7 -0.932132  1.956030  0.017587 -0.016692
8 -0.575247  0.254161 -1.143704  0.215897
9  1.193555 -0.077118 -0.408530 -0.862495
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;连接&lt;/h3&gt;
&lt;p&gt;SQL风格合并。请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-join&quot;&gt;数据库风格连接&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [77]: left = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lval&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [1, 2&lt;span&gt;]})

In [&lt;/span&gt;78]: right = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rval&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [4, 5&lt;span&gt;]})

In [&lt;/span&gt;79&lt;span&gt;]: left
Out[&lt;/span&gt;79&lt;span&gt;]: 
   key  lval
0  foo     &lt;/span&gt;1
1  foo     2&lt;span&gt;

In [&lt;/span&gt;80&lt;span&gt;]: right
Out[&lt;/span&gt;80&lt;span&gt;]: 
   key  rval
0  foo     &lt;/span&gt;4
1  foo     5&lt;span&gt;

In [&lt;/span&gt;81]: pd.merge(left, right, on=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;81&lt;span&gt;]: 
   key  lval  rval
0  foo     &lt;/span&gt;1     4
1  foo     1     5
2  foo     2     4
3  foo     2     5
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;给出另一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [82]: left = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lval&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [1, 2&lt;span&gt;]})

In [&lt;/span&gt;83]: right = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rval&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [4, 5&lt;span&gt;]})

In [&lt;/span&gt;84&lt;span&gt;]: left
Out[&lt;/span&gt;84&lt;span&gt;]: 
   key  lval
0  foo     &lt;/span&gt;1
1  bar     2&lt;span&gt;

In [&lt;/span&gt;85&lt;span&gt;]: right
Out[&lt;/span&gt;85&lt;span&gt;]: 
   key  rval
0  foo     &lt;/span&gt;4
1  bar     5&lt;span&gt;

In [&lt;/span&gt;86]: pd.merge(left, right, on=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;86&lt;span&gt;]: 
   key  lval  rval
0  foo     &lt;/span&gt;1     4
1  bar     2     5
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;追加&lt;/h3&gt;
&lt;p&gt;添加行到DataFrame。请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-concatenation&quot;&gt;追加&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [87]: df = pd.DataFrame(np.random.randn(8, 4), columns=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;88&lt;span&gt;]: df
Out[&lt;/span&gt;88&lt;span&gt;]: 
          A         B         C         D
0  &lt;/span&gt;1.346061  1.511763  1.627081 -0.990582
1 -0.441652  1.211526  0.268520  0.024580
2 -1.577585  0.396823 -0.105381 -0.532532
3  1.453749  1.208843 -0.080952 -0.264610
4 -0.727965 -0.589346  0.339969 -0.693205
5 -0.339355  0.593616  0.884345  1.591431
6  0.141809  0.220390  0.435589  0.192451
7 -0.096701  0.803351  1.715071 -0.708758&lt;span&gt;

In [&lt;/span&gt;89]: s = df.iloc[3&lt;span&gt;]

In [&lt;/span&gt;90]: df.append(s, ignore_index=&lt;span&gt;True)
Out[&lt;/span&gt;90&lt;span&gt;]: 
          A         B         C         D
0  &lt;/span&gt;1.346061  1.511763  1.627081 -0.990582
1 -0.441652  1.211526  0.268520  0.024580
2 -1.577585  0.396823 -0.105381 -0.532532
3  1.453749  1.208843 -0.080952 -0.264610
4 -0.727965 -0.589346  0.339969 -0.693205
5 -0.339355  0.593616  0.884345  1.591431
6  0.141809  0.220390  0.435589  0.192451
7 -0.096701  0.803351  1.715071 -0.708758
8  1.453749  1.208843 -0.080952 -0.264610
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;分组&lt;/h2&gt;
&lt;p&gt;&quot;分组&quot;我们指的是涉及一个或多个以下步骤的过程&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Splitting：根据一些标准将数据分组&lt;/li&gt;
&lt;li&gt;Applying：将功能独立应用于每个组&lt;/li&gt;
&lt;li&gt;Combining：将结果合并成数据结构&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/groupby.html#groupby&quot;&gt;分组部分&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
In [91]: df = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
   ....:                           &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
   ....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
   ....:                           &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
   ....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : np.random.randn(8&lt;span&gt;),
   ....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : np.random.randn(8&lt;span&gt;)})
   ....: 

In [&lt;/span&gt;92&lt;span&gt;]: df
Out[&lt;/span&gt;92&lt;span&gt;]: 
     A      B         C         D
0  foo    one &lt;/span&gt;-1.202872 -0.055224
1  bar    one -1.814470  2.395985
2  foo    two  1.018601  1.552825
3  bar  three -0.595447  0.166599
4  foo    two  1.395433  0.047609
5  bar    two -0.392670 -0.136473
6  foo    one  0.007207 -0.561757
7  foo  three  1.928123 -1.623033
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;分组，然后将sum()函数应用于生成的组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
In [93]: df.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).sum()
Out[&lt;/span&gt;93&lt;span&gt;]: 
            C        D
A                     
bar &lt;/span&gt;-2.802588  2.42611&lt;span&gt;
foo  &lt;/span&gt;3.146492 -0.63958
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按多列分组形成层次索引，然后应用该函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [94]: df.groupby([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).sum()
Out[&lt;/span&gt;94&lt;span&gt;]: 
                  C         D
A   B                        
bar one   &lt;/span&gt;-1.814470  2.395985&lt;span&gt;
    three &lt;/span&gt;-0.595447  0.166599&lt;span&gt;
    two   &lt;/span&gt;-0.392670 -0.136473&lt;span&gt;
foo one   &lt;/span&gt;-1.195665 -0.616981&lt;span&gt;
    three  &lt;/span&gt;1.928123 -1.623033&lt;span&gt;
    two    &lt;/span&gt;2.414034  1.600434
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;重塑&lt;/h2&gt;
&lt;p&gt;请参阅有关&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced-hierarchical&quot;&gt;分层索引&lt;/a&gt;和&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-stacking&quot;&gt;重塑部分&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
In [95]: tuples = list(zip(*[[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;baz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;baz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
   ....:                      &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;qux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;qux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
   ....:                     [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
   ....:                      &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]]))
   ....: 

In [&lt;/span&gt;96]: index = pd.MultiIndex.from_tuples(tuples, names=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;97]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;98]: df2 = df[:4&lt;span&gt;]

In [&lt;/span&gt;99&lt;span&gt;]: df2
Out[&lt;/span&gt;99&lt;span&gt;]: 
                     A         B
first second                    
bar   one     &lt;/span&gt;0.029399 -0.542108&lt;span&gt;
      two     &lt;/span&gt;0.282696 -0.087302&lt;span&gt;
baz   one    &lt;/span&gt;-1.575170  1.771208&lt;span&gt;
      two     &lt;/span&gt;0.816482  1.100230
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;堆&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html#pandas.DataFrame.stack&quot;&gt;stack()&lt;/a&gt;方法将&quot;压缩&quot;DataFrame列中的一个级别。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [100]: stacked =&lt;span&gt; df2.stack()

In [&lt;/span&gt;101&lt;span&gt;]: stacked
Out[&lt;/span&gt;101&lt;span&gt;]: 
first  second   
bar    one     A    &lt;/span&gt;0.029399&lt;span&gt;
               B   &lt;/span&gt;-0.542108&lt;span&gt;
       two     A    &lt;/span&gt;0.282696&lt;span&gt;
               B   &lt;/span&gt;-0.087302&lt;span&gt;
baz    one     A   &lt;/span&gt;-1.575170&lt;span&gt;
               B    &lt;/span&gt;1.771208&lt;span&gt;
       two     A    &lt;/span&gt;0.816482&lt;span&gt;
               B    &lt;/span&gt;1.100230&lt;span&gt;
dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&quot;stacked&quot;DataFrame或Series（有一个MultilIndex作为索引）&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html#pandas.DataFrame.stack&quot;&gt;stack()&lt;/a&gt;的反向操作是&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack&quot;&gt;unstack()&lt;/a&gt;，它默认情况下解除最后一个级别。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [102&lt;span&gt;]: stacked.unstack()
Out[&lt;/span&gt;102&lt;span&gt;]: 
                     A         B
first second                    
bar   one     &lt;/span&gt;0.029399 -0.542108&lt;span&gt;
      two     &lt;/span&gt;0.282696 -0.087302&lt;span&gt;
baz   one    &lt;/span&gt;-1.575170  1.771208&lt;span&gt;
      two     &lt;/span&gt;0.816482  1.100230&lt;span&gt;

In [&lt;/span&gt;103]: stacked.unstack(1&lt;span&gt;)
Out[&lt;/span&gt;103&lt;span&gt;]: 
second        one       two
first                      
bar   A  &lt;/span&gt;0.029399  0.282696&lt;span&gt;
      B &lt;/span&gt;-0.542108 -0.087302&lt;span&gt;
baz   A &lt;/span&gt;-1.575170  0.816482&lt;span&gt;
      B  &lt;/span&gt;1.771208  1.100230&lt;span&gt;

In [&lt;/span&gt;104&lt;span&gt;]: stacked.unstack(0)
Out[&lt;/span&gt;104&lt;span&gt;]: 
first          bar       baz
second                      
one    A  &lt;/span&gt;0.029399 -1.575170&lt;span&gt;
       B &lt;/span&gt;-0.542108  1.771208&lt;span&gt;
two    A  &lt;/span&gt;0.282696  0.816482&lt;span&gt;
       B &lt;/span&gt;-0.087302  1.100230
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;数据透视表&lt;/h3&gt;
&lt;p&gt;请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-pivot&quot;&gt;数据透视表部分&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
In [105]: df = pd.DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] * 3&lt;span&gt;,
   .....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] * 4&lt;span&gt;,
   .....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] * 2&lt;span&gt;,
   .....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : np.random.randn(12&lt;span&gt;),
   .....:                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : np.random.randn(12&lt;span&gt;)})
   .....: 

In [&lt;/span&gt;106&lt;span&gt;]: df
Out[&lt;/span&gt;106&lt;span&gt;]: 
        A  B    C         D         E
0     one  A  foo  &lt;/span&gt;1.418757 -0.179666
1     one  B  foo -1.879024  1.291836
2     two  C  foo  0.536826 -0.009614
3   three  A  bar  1.006160  0.392149
4     one  B  bar -0.029716  0.264599
5     one  C  bar -1.146178 -0.057409
6     two  A  foo  0.100900 -1.425638
7   three  B  foo -1.035018  1.024098
8     one  C  foo  0.314665 -0.106062
9     one  A  bar -0.773723  1.824375
10    two  B  bar -1.170653  0.595974
11  three  C  bar  0.648740  1.167115
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以轻松地从这些数据中快速生成数据透视表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
In [107]: pd.pivot_table(df, values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], columns=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
Out[&lt;/span&gt;107&lt;span&gt;]: 
C             bar       foo
A     B                    
one   A &lt;/span&gt;-0.773723  1.418757&lt;span&gt;
      B &lt;/span&gt;-0.029716 -1.879024&lt;span&gt;
      C &lt;/span&gt;-1.146178  0.314665&lt;span&gt;
three A  &lt;/span&gt;1.006160&lt;span&gt;       NaN
      B       NaN &lt;/span&gt;-1.035018&lt;span&gt;
      C  &lt;/span&gt;0.648740&lt;span&gt;       NaN
two   A       NaN  &lt;/span&gt;0.100900&lt;span&gt;
      B &lt;/span&gt;-1.170653&lt;span&gt;       NaN
      C       NaN  &lt;/span&gt;0.536826
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;时间序列&lt;/h2&gt;
&lt;p&gt;Pandas具有简单、强大和高效的功能，用于在变频期间执行重采样操作。这在金融应用中非常常见，但是不限于此。请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/timeseries.html#timeseries&quot;&gt;时间序列部分&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
In [108]: rng = pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1/1/2012&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=100, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;109]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=&lt;span&gt;rng)

In [&lt;/span&gt;110]: ts.resample(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5Min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).sum()
Out[&lt;/span&gt;110&lt;span&gt;]: 
&lt;/span&gt;2012-01-01    25083&lt;span&gt;
Freq: 5T, dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;时区表示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
In [111]: rng = pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3/6/2012 00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=5, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;112]: ts =&lt;span&gt; pd.Series(np.random.randn(len(rng)), rng)

In [&lt;/span&gt;113&lt;span&gt;]: ts
Out[&lt;/span&gt;113&lt;span&gt;]: 
&lt;/span&gt;2012-03-06    0.464000
2012-03-07    0.227371
2012-03-08   -0.496922
2012-03-09    0.306389
2012-03-10   -2.290613&lt;span&gt;
Freq: D, dtype: float64

In [&lt;/span&gt;114]: ts_utc = ts.tz_localize(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UTC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;115&lt;span&gt;]: ts_utc
Out[&lt;/span&gt;115&lt;span&gt;]: 
&lt;/span&gt;2012-03-06 00:00:00+00:00    0.464000
2012-03-07 00:00:00+00:00    0.227371
2012-03-08 00:00:00+00:00   -0.496922
2012-03-09 00:00:00+00:00    0.306389
2012-03-10 00:00:00+00:00   -2.290613&lt;span&gt;
Freq: D, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转换到另一时区&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [116]: ts_utc.tz_convert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;US/Eastern&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;116&lt;span&gt;]: 
&lt;/span&gt;2012-03-05 19:00:00-05:00    0.464000
2012-03-06 19:00:00-05:00    0.227371
2012-03-07 19:00:00-05:00   -0.496922
2012-03-08 19:00:00-05:00    0.306389
2012-03-09 19:00:00-05:00   -2.290613&lt;span&gt;
Freq: D, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在时间跨度之间转换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [117]: rng = pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1/1/2012&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=5, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;118]: ts = pd.Series(np.random.randn(len(rng)), index=&lt;span&gt;rng)

In [&lt;/span&gt;119&lt;span&gt;]: ts
Out[&lt;/span&gt;119&lt;span&gt;]: 
&lt;/span&gt;2012-01-31   -1.134623
2012-02-29   -1.561819
2012-03-31   -0.260838
2012-04-30    0.281957
2012-05-31    1.523962&lt;span&gt;
Freq: M, dtype: float64

In [&lt;/span&gt;120]: ps =&lt;span&gt; ts.to_period()

In [&lt;/span&gt;121&lt;span&gt;]: ps
Out[&lt;/span&gt;121&lt;span&gt;]: 
&lt;/span&gt;2012-01   -1.134623
2012-02   -1.561819
2012-03   -0.260838
2012-04    0.281957
2012-05    1.523962&lt;span&gt;
Freq: M, dtype: float64

In [&lt;/span&gt;122&lt;span&gt;]: ps.to_timestamp()
Out[&lt;/span&gt;122&lt;span&gt;]: 
&lt;/span&gt;2012-01-01   -1.134623
2012-02-01   -1.561819
2012-03-01   -0.260838
2012-04-01    0.281957
2012-05-01    1.523962&lt;span&gt;
Freq: MS, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在时间和时间戳之间转换，可以使用一些方便的算术函数。在下面例子中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [123]: prng = pd.period_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1990Q1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2000Q4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, freq=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q-NOV&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;124]: ts =&lt;span&gt; pd.Series(np.random.randn(len(prng)), prng)

In [&lt;/span&gt;125]: ts.index = (prng.asfreq(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + 1).asfreq(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + 9&lt;span&gt;

In [&lt;/span&gt;126&lt;span&gt;]: ts.head()
Out[&lt;/span&gt;126&lt;span&gt;]: 
&lt;/span&gt;1990-03-01 09:00   -0.902937
1990-06-01 09:00    0.068159
1990-09-01 09:00   -0.057873
1990-12-01 09:00   -0.368204
1991-03-01 09:00   -1.144073&lt;span&gt;
Freq: H, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;明确的&lt;/h2&gt;
&lt;p&gt;自0.15版本以来，Pandas可以在DataFrame中包含分类数据。有关完整文档，请参阅&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/categorical.html#categorical&quot;&gt;分类介绍&lt;/a&gt;和&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/api.html#api-categorical&quot;&gt;API文档&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
In [127]: df = pd.DataFrame({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[1,2,3,4,5,6], &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;raw_grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将原始数据转换为分类数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
In [128]: df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;raw_grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].astype(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;129]: df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;129&lt;span&gt;]: 
0    a
&lt;/span&gt;1&lt;span&gt;    b
&lt;/span&gt;2&lt;span&gt;    b
&lt;/span&gt;3&lt;span&gt;    a
&lt;/span&gt;4&lt;span&gt;    a
&lt;/span&gt;5&lt;span&gt;    e
Name: grade, dtype: category
Categories (&lt;/span&gt;3, object): [a, b, e]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将类别重命名为更有意义的名称&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [130]: df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].cat.categories = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;very good&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;very bad&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新排列类别并同时添加丢失的类别（Series.cat下的方法返回一个默认的新Series）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
In [131]: df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].cat.set_categories([&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;very bad&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;medium&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;very good&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;132]: df[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
Out[&lt;/span&gt;132&lt;span&gt;]: 
0    very good
&lt;/span&gt;1&lt;span&gt;         good
&lt;/span&gt;2&lt;span&gt;         good
&lt;/span&gt;3&lt;span&gt;    very good
&lt;/span&gt;4&lt;span&gt;    very good
&lt;/span&gt;5&lt;span&gt;     very bad
Name: grade, dtype: category
Categories (&lt;/span&gt;5, object): [very bad, bad, medium, good, very good]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排序是按类别中的顺序排序的，而不是词法顺序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [133]: df.sort_values(by=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;133&lt;span&gt;]: 
   id raw_grade      grade
&lt;/span&gt;5   6&lt;span&gt;         e   very bad
&lt;/span&gt;1   2&lt;span&gt;         b       good
&lt;/span&gt;2   3&lt;span&gt;         b       good
0   &lt;/span&gt;1&lt;span&gt;         a  very good
&lt;/span&gt;3   4&lt;span&gt;         a  very good
&lt;/span&gt;4   5         a  very good
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按分类列分组还显示空类别。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [134]: df.groupby(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).size()
Out[&lt;/span&gt;134&lt;span&gt;]: 
grade
very bad     &lt;/span&gt;1&lt;span&gt;
bad          0
medium       0
good         &lt;/span&gt;2&lt;span&gt;
very good    &lt;/span&gt;3&lt;span&gt;
dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;绘图&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/visualization.html#visualization&quot;&gt;绘图&lt;/a&gt;文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [135]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1/1/2000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, periods=1000&lt;span&gt;))

In [&lt;/span&gt;136]: ts =&lt;span&gt; ts.cumsum()

In [&lt;/span&gt;137&lt;span&gt;]: ts.plot()
Out[&lt;/span&gt;137]: &amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1187d7278&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043750/201710/1043750-20171029213931930-1251572693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在DataFrame中，&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.DataFrame.plot.html#pandas.DataFrame.plot&quot;&gt;plot()&lt;/a&gt;可以方便绘制带标签的所有列。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
In [138]: df = pd.DataFrame(np.random.randn(1000, 4), index=&lt;span&gt;ts.index,
   .....:                   columns&lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
   .....: 

In [&lt;/span&gt;139]: df =&lt;span&gt; df.cumsum()

In [&lt;/span&gt;140]: plt.figure(); df.plot(); plt.legend(loc=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;best&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;140]: &amp;lt;matplotlib.legend.Legend at 0x11b5dea20&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043750/201710/1043750-20171029214021461-1151480323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;获取数据输入/输出&lt;/h2&gt;
&lt;h3&gt;CSV&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/io.html#io-store-in-csv&quot;&gt;写入一个csv文件&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
In [141]: df.to_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/io.html#io-read-csv-table&quot;&gt;从csv文件读取&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [142]: pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;142&lt;span&gt;]: 
     Unnamed: 0          A          B         C          D
0    &lt;/span&gt;2000-01-01   0.266457  -0.399641 -0.219582   1.186860
1    2000-01-02  -1.170732  -0.345873  1.653061  -0.282953
2    2000-01-03  -1.734933   0.530468  2.060811  -0.515536
3    2000-01-04  -1.555121   1.452620  0.239859  -1.156896
4    2000-01-05   0.578117   0.511371  0.103552  -2.428202
5    2000-01-06   0.478344   0.449933 -0.741620  -1.962409
6    2000-01-07   1.235339  -0.091757 -1.543861  -1.084753&lt;span&gt;
..          ...        ...        ...       ...        ...
&lt;/span&gt;993  2002-09-20 -10.628548  -9.153563 -7.883146  28.313940
994  2002-09-21 -10.390377  -8.727491 -6.399645  30.914107
995  2002-09-22  -8.985362  -8.485624 -4.669462  31.367740
996  2002-09-23  -9.558560  -8.781216 -4.499815  30.518439
997  2002-09-24  -9.902058  -9.340490 -4.386639  30.105593
998  2002-09-25 -10.216020  -9.480682 -3.933802  29.758560
999  2002-09-26 -11.856774 -10.671012 -3.216025  29.369368&lt;span&gt;

[&lt;/span&gt;1000 rows x 5 columns]
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;HDF5&lt;/h3&gt;
&lt;p&gt;读写&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/io.html#io-hdf5&quot;&gt;HDF存储&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写入HDF5存储&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [143]: df.to_hdf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.h5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;df&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从HDF5存储中读取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
In [144]: pd.read_hdf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.h5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;df&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;144&lt;span&gt;]: 
                    A          B         C          D
&lt;/span&gt;2000-01-01   0.266457  -0.399641 -0.219582   1.186860
2000-01-02  -1.170732  -0.345873  1.653061  -0.282953
2000-01-03  -1.734933   0.530468  2.060811  -0.515536
2000-01-04  -1.555121   1.452620  0.239859  -1.156896
2000-01-05   0.578117   0.511371  0.103552  -2.428202
2000-01-06   0.478344   0.449933 -0.741620  -1.962409
2000-01-07   1.235339  -0.091757 -1.543861  -1.084753&lt;span&gt;
...               ...        ...       ...        ...
&lt;/span&gt;2002-09-20 -10.628548  -9.153563 -7.883146  28.313940
2002-09-21 -10.390377  -8.727491 -6.399645  30.914107
2002-09-22  -8.985362  -8.485624 -4.669462  31.367740
2002-09-23  -9.558560  -8.781216 -4.499815  30.518439
2002-09-24  -9.902058  -9.340490 -4.386639  30.105593
2002-09-25 -10.216020  -9.480682 -3.933802  29.758560
2002-09-26 -11.856774 -10.671012 -3.216025  29.369368&lt;span&gt;

[&lt;/span&gt;1000 rows x 4 columns]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Excel&lt;/h3&gt;
&lt;p&gt;读写&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.20/io.html#io-excel&quot;&gt;Excel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写入Excel文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
In [145]: df.to_excel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.xlsx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, sheet_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sheet1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从Excel文件读取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
In [146]: pd.read_excel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo.xlsx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sheet1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, index_col=None, na_values=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
Out[&lt;/span&gt;146&lt;span&gt;]: 
                    A          B         C          D
&lt;/span&gt;2000-01-01   0.266457  -0.399641 -0.219582   1.186860
2000-01-02  -1.170732  -0.345873  1.653061  -0.282953
2000-01-03  -1.734933   0.530468  2.060811  -0.515536
2000-01-04  -1.555121   1.452620  0.239859  -1.156896
2000-01-05   0.578117   0.511371  0.103552  -2.428202
2000-01-06   0.478344   0.449933 -0.741620  -1.962409
2000-01-07   1.235339  -0.091757 -1.543861  -1.084753&lt;span&gt;
...               ...        ...       ...        ...
&lt;/span&gt;2002-09-20 -10.628548  -9.153563 -7.883146  28.313940
2002-09-21 -10.390377  -8.727491 -6.399645  30.914107
2002-09-22  -8.985362  -8.485624 -4.669462  31.367740
2002-09-23  -9.558560  -8.781216 -4.499815  30.518439
2002-09-24  -9.902058  -9.340490 -4.386639  30.105593
2002-09-25 -10.216020  -9.480682 -3.933802  29.758560
2002-09-26 -11.856774 -10.671012 -3.216025  29.369368&lt;span&gt;

[&lt;/span&gt;1000 rows x 4 columns]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;陷阱&lt;/h2&gt;
&lt;p&gt;如果你尝试以下操作，可以看到如下异常：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; pd.Series([False, True, False]):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I was true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Traceback
    ...
ValueError: The truth value of an array &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.any() &lt;span&gt;or&lt;/span&gt; a.all().
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 29 Oct 2017 13:43:00 +0000</pubDate>
<dc:creator>Python学习者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yan-lei/p/7718744.html</dc:identifier>
</item>
<item>
<title>Arduino上传数据至贝壳物联并与FPGA进行交互 - NingHeChuan</title>
<link>http://www.cnblogs.com/ninghechuan/p/7751382.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ninghechuan/p/7751382.html</guid>
<description>&lt;p&gt;         本篇实现Arduino与FPGA交互，当然也没有什么新的协议，还是基于串口通讯，现在学一个串口通信基本上可以驱动大多数模块了，而且和各种单片机无缝数据交互，Arduino由于其强大的库函数支持，在实现很多事情上会方便很多，比如串口通讯，Arduino就两行的代码，Verilog至少也得上百行，但是从学习知识的角度上来说，学Arduino也只不过是学了一门软件操控硬件的方法罢了，而且很多东西都简化了，跟在电脑上编程没什么两样，还不如学学单片机。最起码还能了解其内部各种寄存器的使用。我用Arduino也就是玩玩，当然还是有了很多不一样的体验，都知道Arduino是开源项目，我们可以免费使用别人的代码，当然也要分享出来自己的代码，将开源进行到底。&lt;/p&gt;
&lt;p&gt;         Arduino的编程语言没啥说的，使用一种简易版的C语言编程，一般有C语言基础的朋友应该两天就上手了，然后就是利用各种函数了，我在做实验的时候，学到了一个函数，map函数。现在来说说吧！下面张图其实是很形象的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029212840898-1971481889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         再看一下官方给的解释，即把一个数从一个范围变换到另一个范围。&lt;/p&gt;
&lt;p&gt;map(value, fromLow, fromHigh, toLow, toHigh)&lt;br/&gt;Description&lt;/p&gt;
&lt;p&gt;Re-maps a number from one range to another. That is, a value of fromLow would get mapped to toLow, a value of fromHigh to toHigh, values in-between to values in-between, etc.&lt;br/&gt;         我使用Arduino采集到土壤湿度模块的数据，200-100不等，Arduino读取模拟量的最大数值为1023，而这么大的数据，也并不是我们需要的，我们需要的是一个百分数，所以使用map函数，把0-1023这个区间投影到0-100这个区间，那么得出来的数据就可以近似的认为是土壤湿度百分比了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213027914-347105746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Arduino原本的串口只有一个，那么如果必须要用两个或以上串口来收发数据怎么办，这个时候使用软件模拟串口就可以了。官方给的配置历程，调用SoftwareSerial库函数，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213034773-2104766423.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;初始化配置波特率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213041883-1366483556.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输出的时候使用Serial.write()函数，这里要注意的是Serial.print输给串口的是ASCII码值，Serial.write输入给串口的是真实数值，我这里需要的是arduino采集到的土壤湿度，当然希望直接是十六进制的代码了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213047601-631928124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         实现数据上传至贝壳物联，最终要的是需要ESP8266 WIFI模块了，模块配置如下。&lt;/p&gt;
&lt;p&gt;ESP8266模块支持STA/AP/STA+AP 三种工作模式。&lt;br/&gt;*STA 模式：ESP8266模块通过路由器连接互联网，手机或电脑通过互联网实现对设备的远程控制。&lt;br/&gt;*AP 模式：ESP8266模块作为热点，实现手机或电脑直接与模块通信，实现局域网无线控制。&lt;br/&gt;*STA+AP 模式：两种模式的共存模式，即可以通过互联网控制可实现无缝切换，方便操作。&lt;/p&gt;
&lt;p&gt;我们这里为了方便直接设置成两种模式共存的状态。&lt;/p&gt;
&lt;p&gt;ESP8266的接口如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213056820-1212855638.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中需要用的端口是TX，RX，CH_PD，VCC，GND&lt;/p&gt;
&lt;p&gt;TX，RX分别接USB转TTL接口的RX，TX，&lt;/p&gt;
&lt;p&gt;CH_PD，VCC接3.3v（切记必须为3.3v）&lt;/p&gt;
&lt;p&gt;GND接地&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联接物联网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开串口调试助手，搜索串口，将波特率设置为115200，然后将ESP8266的VCC引脚拔下在插上，会返回一串乱码和ready，表示连接正常，如果没有返回值，检查引脚是否连接正确。&lt;/p&gt;
&lt;p&gt;发送AT命令：+++，返回CLOSED，表示关闭之前设定的模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213110805-2140833374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发送AT+CWMODE=3+回车,设置WiFi模块为AT/AP模式，（WiFi模块的知识需要看手册），返回OK，表示设置成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213118633-1237790053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发送AT+CWJAP=”WIFI name”,”WIFI 密码”+回车，连接WiFi。返回OK表示连接正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213125508-1696980765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后发送AT+CIPSTART=&quot;TCP&quot;,&quot;www.bigiot.net&quot;,8181+回车，返回如图所示，表示连接到贝壳网。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213131008-1731605428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样WiFi模块就配置好了，然后将WiFi模块连接到开发板上，通电后，就会自动连接到贝壳网上了。&lt;/p&gt;
&lt;p&gt;WiFi模块配置好了之后。我们这里用第一个WiFi模块配置连接到贝壳网，贝壳网是一个物联网，可以实现与硬件进行远程交互。&lt;/p&gt;
&lt;p&gt;注册一个贝壳网账号&lt;a href=&quot;http://www.bigiot.net/&quot;&gt;www.bigiot.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击添加一个设备&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213153664-1805888688.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加一个数据接口，这里可以修改借口类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213200523-98287753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加完成后，每一个设备都有自己专属的ID，APIKEY，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213208664-292499480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每个设备有对应的数据接口，也有对应的ID&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213214523-1165094511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要几个数据接口你就添加几个，我这里添加了四个。然后根据代码将所有模块连接，连接设备，上传程序，注意，上传Arduino程序的时候一定要将0、1引脚拔下，否则肯定上传失败。上传成功后，打开数据接口，可以看到数据实时上传了，贝壳物联还有相关的APP和微信公众号，只要设备能连上网络，便可以对设备进行操控，所以远程操控也毫无压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213221320-1250945988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213229039-1054986453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213237289-1405934635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过软串口发送数据给FPGA，FPGA通过处理后，发送数据到上位机，这样便实现了FPGA和Arduino的数据交互，这样便实现了物联网。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201710/1057546-20171029213244320-592581790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         当然Arduino还有很多方便又好玩的玩法，有兴趣的朋友也可以继续玩下去。如果你想要我这个实验的源代码，请在微信订阅号后台回复“Arduino”即可获的源代码和库文件哦！需要本设计FPGA部分代码后台发消息，联系订阅号主，即可获得！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1057546/201706/1057546-20170611114905559-478053885.jpg&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;289&quot;/&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：NingHeChuan（宁河川）&lt;/p&gt;
&lt;p&gt;个人微信订阅号：开源FPGANingHeChuan&lt;/p&gt;
&lt;p&gt;如果你想及时收到个人撰写的博文推送，可以扫描左边二维码（或者长按识别二维码）关注个人微信订阅号&lt;/p&gt;
&lt;p&gt;知乎ID：&lt;a href=&quot;https://www.zhihu.com/people/zhu-he-chuan/activities&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微博ID：&lt;a href=&quot;http://weibo.com/6059461073/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&amp;amp;is_all=1&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Arduino上传数据至贝壳物联并与FPGA进行交互&quot; href=&quot;http://www.cnblogs.com/ninghechuan/p/7751382.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/ninghechuan/p/7751382.html&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 13:37:00 +0000</pubDate>
<dc:creator>NingHeChuan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ninghechuan/p/7751382.html</dc:identifier>
</item>
</channel>
</rss>