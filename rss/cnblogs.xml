<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Django REST framework+Vue 打造生鲜超市（二） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8733578.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8733578.html</guid>
<description>&lt;h2&gt;三、Models设计&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.1.项目初始化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;（1）进虚拟环境下安装&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;django2.0.2&lt;/li&gt;
&lt;li&gt;djangorestframework和相关依赖mark,filter&lt;/li&gt;
&lt;li&gt;pillow  图片处理&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pip install djangorestframework

pip install &lt;/span&gt;-i https://pypi.douban.com/simple django==2.0.2&lt;span&gt;

pip install markdown

pip install django&lt;/span&gt;-filter&lt;p&gt;pip install pillow&lt;/p&gt;&lt;p&gt;pip install pymysql
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）创建项目&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;项目：MxShop&lt;/li&gt;
&lt;li&gt;app：users&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407161515462-1005450340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; interpreter选择虚拟环境里面的python.exe&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407161039264-954367162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）Mysql的配置&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;settings中设置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mxshop&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据库名字&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;账号&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;端口&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这里引擎用innodb（默认myisam）&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为后面第三方登录时，要求引擎为INNODB&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'OPTIONS':{'init_command': 'SET storage_engine=INNODB'}, #这样设置会报错，改为&lt;/span&gt;
        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OPTIONS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;init_command&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SET default_storage_engine=INNODB;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;安装Mysqlclient&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https://www.lfd.uci.edu/~gohlke/pythonlibs/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install mysqlclient-1.3.12-cp36-cp36m-win_amd64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;__init__.py添加代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
pymysql.install_as_MySQLdb()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）项目目录结构搭建&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新建两个python package&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;extra_apps   （扩展的源码包）&lt;/li&gt;
&lt;li&gt;apps              （放所有app）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;新建两个文件夹&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;media       （保存图片）&lt;/li&gt;
&lt;li&gt;db_tools   （数据库相关）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;把extra_apps和apps标记为sources root,然后settings中也要加路径&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;settings.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys

sys.path.insert(0,BASE_DIR)
sys.path.insert(0,os.path.join(BASE_DIR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;apps&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
sys.path.insert(0,os.path.join(BASE_DIR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;extra_apps&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在项目目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407170941802-691485414.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3.2.users models设计&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）创建三个app&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;goods        商品&lt;/li&gt;
&lt;li&gt;trade          交易&lt;/li&gt;
&lt;li&gt;user_operation       用户操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;（2）users/models.py&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; apps/users/models.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AbstractUser

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProfile(AbstractUser):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    用户信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    GENDER_CHOICES &lt;/span&gt;=&lt;span&gt; (
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    )

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为用户是用手机号注册，所以这里name,birthday,email字段可以为空&lt;/span&gt;
    name = models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=32,null=True,blank=&lt;span&gt;True)
    birthday &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;出生日期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,null=True,blank=&lt;span&gt;True)
    gender &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=10,choices=GENDER_CHOICES,default=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    mobile &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=11&lt;span&gt;)
    email &lt;/span&gt;= models.EmailField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;邮箱&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=128,null=True,blank=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.username


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; VerifyCode(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    短信验证码
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    code &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=10&lt;span&gt;)
    mobile &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, max_length=11&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;短信验证码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.code
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要想替换系统的用户，还要在settings中配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;settings.py&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;重载系统的用户，让UserProfile生效&lt;/span&gt;
AUTH_USER_MODEL = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;users.UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）这里UserProfile继承AbstractUser,可以看看AbstractUser的源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a1ffb214-70aa-491f-ab5f-93cb8ee2a934')&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_a1ffb214-70aa-491f-ab5f-93cb8ee2a934&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a1ffb214-70aa-491f-ab5f-93cb8ee2a934&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a1ffb214-70aa-491f-ab5f-93cb8ee2a934',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a1ffb214-70aa-491f-ab5f-93cb8ee2a934&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractUser(AbstractBaseUser, PermissionsMixin):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    An abstract base class implementing a fully featured User model with
    admin-compliant permissions.

    Username and password are required. Other fields are optional.
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    username_validator &lt;/span&gt;=&lt;span&gt; UnicodeUsernameValidator()

    username &lt;/span&gt;=&lt;span&gt; models.CharField(
        _(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        max_length&lt;/span&gt;=150&lt;span&gt;,
        unique&lt;/span&gt;=&lt;span&gt;True,
        help_text&lt;/span&gt;=_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        validators&lt;/span&gt;=&lt;span&gt;[username_validator],
        error_messages&lt;/span&gt;=&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;unique&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: _(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A user with that username already exists.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
        },
    )
    first_name &lt;/span&gt;= models.CharField(_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), max_length=30, blank=&lt;span&gt;True)
    last_name &lt;/span&gt;= models.CharField(_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), max_length=150, blank=&lt;span&gt;True)
    email &lt;/span&gt;= models.EmailField(_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), blank=&lt;span&gt;True)
    is_staff &lt;/span&gt;=&lt;span&gt; models.BooleanField(
        _(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;staff status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        default&lt;/span&gt;=&lt;span&gt;False,
        help_text&lt;/span&gt;=_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Designates whether the user can log into this admin site.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )
    is_active &lt;/span&gt;=&lt;span&gt; models.BooleanField(
        _(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;active&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        default&lt;/span&gt;=&lt;span&gt;True,
        help_text&lt;/span&gt;=&lt;span&gt;_(
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Designates whether this user should be treated as active. &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unselect this instead of deleting accounts.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        ),
    )
    date_joined &lt;/span&gt;= models.DateTimeField(_(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date joined&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), default=&lt;span&gt;timezone.now)

    objects &lt;/span&gt;=&lt;span&gt; UserManager()

    EMAIL_FIELD &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    USERNAME_FIELD &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    REQUIRED_FIELDS &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= _(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        verbose_name_plural &lt;/span&gt;= _(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        abstract &lt;/span&gt;=&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; clean(self):
        super().clean()
        self.email &lt;/span&gt;= self.&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;.objects.normalize_email(self.email)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_full_name(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Return the first_name plus the last_name, with a space in between.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        full_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (self.first_name, self.last_name)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; full_name.strip()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_short_name(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Return the short name for the user.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.first_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; email_user(self, subject, message, from_email=None, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Send an email to this user.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        send_mail(subject, message, from_email, [self.email], &lt;/span&gt;**kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;源码&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;3.3.goods的model设计&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）安装&lt;/p&gt;
&lt;p&gt; 安装好后把xadmin和DjangoUeditor放到extra_apps目录下面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407224609853-1651505654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）把四个app、xadmin和DjangoUeditor添加到 INSTALLED_APPS中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_operation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;crispy_forms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DjangoUeditor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 设置media的保存路径&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;settings.py&lt;/span&gt;
&lt;span&gt;
MEDIA_ROOT &lt;/span&gt;= os.path.join(BASE_DIR, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;media&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）商品分类model 设计&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsCategory(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品类别
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    CATEGORY_TYPE &lt;/span&gt;=&lt;span&gt; (
        (&lt;/span&gt;1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一级类目&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;二级类目&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;三级类目&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    )

    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;''&lt;/span&gt;,max_length=30,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    code &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;''&lt;/span&gt;,max_length=30,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    desc &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别描述&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;''&lt;/span&gt;,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类别描述&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;目录级别，总共有三个级别&lt;/span&gt;
    category_type = models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;类目级别&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=&lt;span&gt;CATEGORY_TYPE)
    parent_category &lt;/span&gt;=&lt;span&gt; models.ForeignKey(
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,null=&lt;span&gt;True,
        blank&lt;/span&gt;=&lt;span&gt;True,
        verbose_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;父类级别&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        help_text&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;父目录&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        related_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sub_cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        on_delete&lt;/span&gt;=&lt;span&gt;models.CASCADE
    )
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否添加到首页导航展示&lt;/span&gt;
    is_tab = models.BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否导航&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;False&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否导航&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品类别&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.name
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407225750685-2028611613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; （4）品牌名model设计&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; djangoUeditor.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; UEditorField


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;

    category &lt;/span&gt;= models.ForeignKey(GoodsCategory,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品类目&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    goods_sn &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品唯一货号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=50,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100&lt;span&gt;)
    click_num &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;点击数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    sold_num &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品销售量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    fav_num &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;收藏数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    goods_num &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;库存数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    market_price &lt;/span&gt;= models.FloatField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;市场价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    shop_price &lt;/span&gt;= models.FloatField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;本店价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    goods_brief &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品简短描述&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=500&lt;span&gt;)
    goods_desc &lt;/span&gt;=&lt;span&gt; UEditorField(
        verbose_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        imagePath&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods/images/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        width&lt;/span&gt;=1000&lt;span&gt;,
        height&lt;/span&gt;=300&lt;span&gt;,
        filePath&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods/files/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        default&lt;/span&gt;=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
    )
    ship_free &lt;/span&gt;= models.BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否承担运费&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;True)
    goods_front_image &lt;/span&gt;=&lt;span&gt; models.ImageField(
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;封面图&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        upload_to&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods/images/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        null&lt;/span&gt;=&lt;span&gt;True,
        blank&lt;/span&gt;=&lt;span&gt;True
    )
    is_new &lt;/span&gt;= models.BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否新品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;False)
    is_hot &lt;/span&gt;= models.BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否新热销&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;False)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsImage(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品详情页轮播图
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    goods &lt;/span&gt;= models.ForeignKey(Goods,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,related_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;images&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    image &lt;/span&gt;=&lt;span&gt; models.ImageField(
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        null&lt;/span&gt;=&lt;span&gt;True,
        blank&lt;/span&gt;=&lt;span&gt;True,
        upload_to&lt;/span&gt;=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
    )
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品轮播图&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.goods.name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407231025699-61386822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （4）首页商品轮播图model设计&lt;/p&gt;
&lt;p&gt;因为首页的商品轮播图片是大图，跟商品详情里面的图片不一样，所以要单独写一个首页轮播图model&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Banner(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    轮播的商品
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    goods &lt;/span&gt;= models.ForeignKey(Goods,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    image &lt;/span&gt;= models.ImageField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;轮播图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,upload_to=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;banner&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    index &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;轮播顺序&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;首页轮播商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.goods.name
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407231518873-230362762.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3.4.trade交易的model设计&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;trade/models.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; apps/trade/models.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth &lt;span&gt;import&lt;/span&gt;&lt;span&gt; get_user_model
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;调用这个方法会自动去settings中找我们设置的UserProfile model---&amp;gt;&amp;gt;&amp;gt;settings.AUTH_USER_MODEL&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;User相当于users中的UserProfile&lt;/span&gt;
User =&lt;span&gt; get_user_model()

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderInfo(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    订单信息
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    ORDER_STATUS &lt;/span&gt;=&lt;span&gt; {
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRADE_SUCCESS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRADE_CLOSED&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;超市关闭&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRADE_BUYER_PAY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;交易创建&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRADE_FINISHED&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;交易结束&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;paying&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;待支付&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    }

    user &lt;/span&gt;= models.ForeignKey(User,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    order_sn &lt;/span&gt;= models.CharField( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单编号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, null=True, blank=True,max_length=30,unique=&lt;span&gt;True)
    trade_no &lt;/span&gt;= models.CharField( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;交易号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,unique=True,null=True, blank=&lt;span&gt;True)
    pay_status &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单状态&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=ORDER_STATUS,default=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;paying&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=30&lt;span&gt;)
    pay_script &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单留言&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=200&lt;span&gt;)
    order_mount &lt;/span&gt;= models.FloatField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单金额&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=0.0&lt;span&gt;)
    pay_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;支付时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,null=True,blank=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用户的信息&lt;/span&gt;
    address = models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;收获地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    singer_name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;签收人&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=20,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    singer_mobile &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;联系电话&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=11&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str(self.order_sn)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderGoods(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    订单的商品详情
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    order &lt;/span&gt;= models.ForeignKey(OrderInfo,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,related_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    goods &lt;/span&gt;= models.ForeignKey(Goods,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    goods_num &lt;/span&gt;= models.IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品数量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;0)

    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; str(self.order.order_sn)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;3.5.用户操作的model设计&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;user_operation/models.py&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;81&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_operation/models.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth &lt;span&gt;import&lt;/span&gt;&lt;span&gt; get_user_model
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;调用这个方法会自动去settings中找我们设置的UserProfile model---&amp;gt;&amp;gt;&amp;gt;settings.AUTH_USER_MODEL&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;User相当于users中的UserProfile&lt;/span&gt;
User =&lt;span&gt; get_user_model()


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserFav(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    用户收藏
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    user &lt;/span&gt;= models.ForeignKey(User, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
    goods &lt;/span&gt;= models.ForeignKey(Goods,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户收藏&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.user.username


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserAddress(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    收货地址
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    user &lt;/span&gt;= models.ForeignKey(User, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
    provice &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;省份&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    city &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;城市&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    distrit &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;区域&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    address &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;详细地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    signer_name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;签收人&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    signer_mobile &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;电话&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=11,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;收获地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.address


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserLeavinMessage(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    用户留言
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    MESSAGE_CHOICES &lt;/span&gt;=&lt;span&gt; (
        (&lt;/span&gt;1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;留言&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;投诉&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;询问&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;4,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;售后&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (&lt;/span&gt;5,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;求购&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )
    user &lt;/span&gt;= models.ForeignKey(User, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)
    message_type &lt;/span&gt;=&lt;span&gt; models.IntegerField(
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;留言类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        choices&lt;/span&gt;=&lt;span&gt;MESSAGE_CHOICES,
        default&lt;/span&gt;=1&lt;span&gt;,
        help_text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    )
    subject &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;主题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=100,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    message &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;留言内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;''&lt;/span&gt;,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;留言内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    file &lt;/span&gt;= models.FileField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上传的文件&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,upload_to=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message/images&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,help_text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上传的文件&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;datetime.now)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta():
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户留言&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.subject
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 07 Apr 2018 18:38:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8733578.html</dc:identifier>
</item>
<item>
<title>前端调试相关 - 大~熊</title>
<link>http://www.cnblogs.com/floor/p/8736904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/floor/p/8736904.html</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h2 id=&quot;alert&quot;&gt;Alert&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;阻塞执行&lt;/li&gt;
&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;必须清理&lt;/li&gt;
&lt;li&gt;遮挡&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;h2 id=&quot;console&quot;&gt;console&lt;/h2&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;console提供了访问浏览器控制台的能力,在全局可以拿到,web workers中也可以,不只是log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;不阻塞,多种多样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以不清理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;清理麻烦,不清理冗余&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;一些方法&lt;/li&gt;
&lt;/ul&gt;&lt;ol readability=&quot;4.5&quot;&gt;&lt;li&gt;console.log()&lt;/li&gt;
&lt;li&gt;Console.assert() 可以打印堆栈信息&lt;/li&gt;
&lt;li&gt;console.clear() 清理控制台&lt;/li&gt;
&lt;li&gt;console.count([label]) 统计次数的&lt;/li&gt;
&lt;li&gt;console.error() 打错误日志,可以类似打堆栈使用&lt;/li&gt;
&lt;li&gt;console.group() 相当于增加缩进&lt;/li&gt;
&lt;li&gt;console.groupEnd() 相当于减少缩进&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;console.info(obj1 [, obj2, ..., objN]);&lt;/p&gt;
&lt;p&gt;console.info(msg [, subst1, ..., substN]);&lt;/p&gt;
跟log差不多&lt;/li&gt;
&lt;li&gt;console.table(me); 通过key,value对象打表&lt;/li&gt;
&lt;li&gt;console.time() console.timeEnd() 用这个可以计算一段代码执行的时间&lt;/li&gt;
&lt;li&gt;console.trace() 打印调用栈&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;console.warn(msg [, subst1, ..., substN]) 打印警告&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;h2 id=&quot;chrome断点调试&quot;&gt;chrome断点调试&lt;/h2&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;添加断点&lt;/p&gt;
&lt;p&gt;source -&amp;gt; ctrl+p找到要打断点资源 -&amp;gt; 点行号就可以加断点了&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;source下右侧面板介绍&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;watch 显示了要跟踪的变量当前的值,在这里可以添加跟踪,取消跟踪等操作&lt;/p&gt;
&lt;h2 id=&quot;ps可以在资源文件选中右键加watch-选项为-add-selected-selected-text-to-watches&quot;&gt;ps:可以在资源文件选中右键加watch 选项为 Add selected selected text to watches&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;callback-显示了函数调用栈&quot;&gt;callback 显示了函数调用栈,&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;scope-显示了当前作用域中的变量&quot;&gt;scope 显示了当前作用域中的变量&lt;/h2&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;breakpoints显示了添加的断点,可以添加的断点进行操作,例如移除多有断点,禁用所有断点等&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;XHR/fetch BP&lt;/p&gt;
&lt;p&gt;可以在任何xhr fetch断,也可以指定URL&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;DOM Break points 后面看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;global listeners&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个我也没打看懂是啥意思&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Event Listener Break points&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看了下有很多很多的事件可以加断点,不仅仅是mouse事件,键盘事件&lt;/p&gt;
&lt;p&gt;还有类似&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Animation

Canvas

Clipboard

Control

DOM Mutation

Device

Drag / drop

这些东西，很多应该也用不上的&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h2 id=&quot;dom断点&quot;&gt;DOM断点&lt;/h2&gt;
&lt;p&gt;这个也是chrome中有的.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;进element面板 -&amp;gt; 选中要加断点的dom结点-&amp;gt; 右键 -&amp;gt; 选择break on -&amp;gt; 然后几个选项自行体会&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;debugger&quot;&gt;debugger&lt;/h2&gt;
&lt;p&gt;这个跟上边的chrome source断点差不多,就是在js代码写debugger,然后运行到那里就会停下来.像这样.功能方面对比上面就有些弱了.不过那你的资源很难找时还是不错的选择&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sum&lt;/span&gt;(a&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;b) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;强大的ide&quot;&gt;强大的IDE&lt;/h2&gt;
&lt;p&gt;要是我们的代码不依赖宿主，不需要window，document之类，可以在IDE中调试，用node环境&lt;/p&gt;
&lt;p&gt;以visual studio code 为例&lt;/p&gt;
&lt;p&gt;在行号左边点击可以加断点，右键还能加条件断点&lt;/p&gt;
&lt;p&gt;F5 可以启动调试&lt;/p&gt;
&lt;p&gt;左侧面板可以看到&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;变量信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控的变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数调用栈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;断点信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;还有一些快捷键记录一下&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;F5 启动调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F10 单步跳过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F11 单步前进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shift+F11 单步后退&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shift + F5 停止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + shift + F5 重来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 07 Apr 2018 16:35:00 +0000</pubDate>
<dc:creator>大~熊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/floor/p/8736904.html</dc:identifier>
</item>
<item>
<title>javaScript识别网址文本并转为链接文本 - 雨霖月寒</title>
<link>http://www.cnblogs.com/jofun/p/8736591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jofun/p/8736591.html</guid>
<description>&lt;p&gt;最近项目有个需求：用户之间发送消息时，如果发送者输入的信息中含有网址文本，要在接受者界面中显示网址链接，点击该链接直接跳转到网页。&lt;br/&gt;这个功能和 QQ 发送网址文本的效果非常像，可以说是一模一样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：首先，要判断文本中是否含有网址文本，其次，将网址文本转换为可点击的链接文本，即将网址文本通过a标签括起来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;判断网址：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 javaScript 中判断某种特殊格式的文本，首选正则表达式，下面是我用来检查网址的正则：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; re = /^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;amp;=]*)?/g;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要注意的是，正则必须使用全局匹配 g 。否则只能匹配到文本中的第一个网址文本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网址转换为链接文本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在网址转换中涉及字符串的操作，那么自然要使用 String 对象的方法，先复习下 String 对象能与正则表达式一起使用的方法有哪些？&lt;br/&gt;常用的有这几个：&lt;/p&gt;
&lt;p&gt;search：检索与正则表达式相匹配的值。&lt;br/&gt;match：找到一个或多个正则表达式的匹配。&lt;br/&gt;replace：替换与正则表达式匹配的子串。&lt;br/&gt;split：把字符串分割为字符串数组。&lt;/p&gt;
&lt;p&gt;可以看出来，其中 replace 是最方便、最适合这个需求的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;replace函数的使用方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
string.replace(searchvalue,newvalue)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;searchvalue&lt;/strong&gt;：必须。规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;newvalue&lt;/strong&gt;：必需。一个字符串值。规定了替换文本或生成替换文本的函数。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：第二个参数支持使用函数来制定文本替换的规则。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;回顾需求，要将网址转换为a链接,那么得到的转换规则如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
url =&amp;gt; &amp;lt;a href='url' target='_blank'&amp;gt;url&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;根据上面的分析过程，使用代码来描述如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;span&gt;var&lt;/span&gt; urlToLink = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(str){
&lt;/span&gt;&lt;span&gt;    var&lt;/span&gt; re = /^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;amp;=]*)?/g; &lt;p&gt;str = str.replace(re, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(website){ &lt;br/&gt;&lt;/span&gt;&lt;span&gt;        return&lt;/span&gt; &quot;&amp;lt;a href='&quot; + website +&quot;' target='_blank'&amp;gt;&quot; + website + &quot;&amp;lt;/a&amp;gt;&quot;&lt;span&gt;; &lt;br/&gt;}); &lt;br/&gt;&lt;/span&gt;&lt;span&gt;    return&lt;/span&gt;&lt;span&gt; str;&lt;br/&gt;};&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到这里，javaScript识别网址文本并转为链接文本的函数接完成了。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 16:25:00 +0000</pubDate>
<dc:creator>雨霖月寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jofun/p/8736591.html</dc:identifier>
</item>
<item>
<title>[翻译]现代java开发指南 第三部分 - htoooth</title>
<link>http://www.cnblogs.com/htoooth/p/8735611.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/htoooth/p/8735611.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/htoooth/p/5418328.html&quot;&gt;第一部分&lt;/a&gt;，&lt;a href=&quot;http://www.cnblogs.com/htoooth/p/5436503.html&quot;&gt;第二部分&lt;/a&gt;，&lt;a href=&quot;http://www.cnblogs.com/htoooth/p/8735611.html&quot;&gt;第三部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;===========================&lt;/p&gt;
&lt;p&gt;欢迎来到现代 Java 开发指南第三部分。在第一部分中，我们尝试着编了写现代Java代码，在之后的第二部分中，探索了JVM应用的部署，管理，监控和测试。现在，是时候研究现代JavaWeb开发了。还是老规矩，先回答一下读者的问题。&lt;/p&gt;
&lt;p&gt;第二部分中，可以看到 JVM 是如何重视监控和怎样暴露 JVM 运行时行为数据。有一位读者提到一个我用过很多次但是第二部分没有说的工具——JITWatch。它帮助我们分析 JVM 更深层次的信息，因此这个工具只推荐给对 Java 或其它语言性能高度关心的专家使用。调用这个工具只用在 JVM 的选项中增加 &lt;code&gt;-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation -XX:+PrintAssembly&lt;/code&gt;，这样就能得到 JVM 怎么优化你的代码和什么时候优化你的代码的信息。还有它还能查看哪些方法被编译成机器码（加上&lt;code&gt;-XX:+PrintAssembly&lt;/code&gt;选项，甚至还能查看编绎成的机器码），哪些方法内联，哪些方法不被内联等等很多信息。更多的信息，可以查看&lt;a href=&quot;https://github.com/AdoptOpenJDK/jitwatch/wiki&quot;&gt;项面维基&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有一些读者对 &lt;a href=&quot;https://github.com/puniverse/capsule&quot;&gt;Capsule&lt;/a&gt; 提出意见，认为 Capsule 没有按 JVM 的打包标准。这不完全对，因为 Capsule 是一个无状态可执行不用安装的程序，因此本身来说，它就不用跟 JVM 的打包标准完全一致。如果你的应用，要求有一些状态（如在安装时，需要一个用户向导），Capsule 并不合适你。另外一部分读者表示对 Capsule 运行时依赖 Maven 的可用性表示不放心。这于这点我要说，很显然，对于软件在可用性/关键性任务的范围有每个人都有不同的观点，而不同的应用在使用安全性和使用便捷性也应该有不同的权衡。你可以创建一个不支持自动升级的 Capsule，或者一个包括所有依赖的 Capsule。你还可以在启动时选择 Java 运行时和 JVM 的配置。我认为，如果选择使用外部 Maven 仓库依赖，就没有理由去怀疑外部库意外的错误或其它的问题因为在依赖问题在构建过程就已经解决。而在前一种方案中，Capsule 必须显式说明它的依赖，并且能够列出整个依赖库。同样，如果把组织内部 Maven 仓库用做 capsule 的依赖，那就没有理由不把当成运维的服务器，确保它和其它服务器一样保证运行时的可用性（特别注意 Maven 仓库软件并不为人所知的crash ）。&lt;/p&gt;
&lt;p&gt;现在让我们回到手边要做的事。&lt;/p&gt;
&lt;h2 id=&quot;现代-javaweb-开发&quot;&gt;现代 JavaWeb 开发&lt;/h2&gt;
&lt;p&gt;因为 JavaWeb 服务器与 Web 一样老，因此在 JavaWeb 上长期存在的成功传统和实践很快就要扔掉，现在可能是一个好的时候来解释这一系列中“现代”意思。&lt;/p&gt;
&lt;p&gt;在本文中，我说“现代”的意思，就是“与现代主流软件开发趋势一致”。这些趋势并不是完全任意的堆砌，他们一个一个契合在一起。出现于这个期间大量小型快速发展的创业公司更偏爱精益开发方法。这些都要求一个更好使用，更少安装、部署和配置，集开发和运维于一体的工具。广受欢迎的云计算通过资源管理，也就虚拟化（无论是工具上还是在系统级）鼓励这些方法。系统级部署和资源分配也支持异构架构的发展。所谓异构架构就是指寻找适合的工具（也有可能是不同的工具）做合适的事。&lt;/p&gt;
&lt;p&gt;传统的 JavaWeb 服务器，也就是典型的应用服务器，都有一个特别的特性：支持在一个 JVM 上运行多个应用。这个应用服务器提供能分开应用的运行时环境，而且升级，安装和启动都是独立的。一个应用可能运行在一个配置好的，已经运行的环境中，这种方法很多时候都工作良好，你也有理由继续使用这种方案，但是这种方案，离“现化”太远了。在不同的应用中分配不同的资源这件事是并不简单，而且在一定程度上跟现在使用 hypervisor 和 os 容器来运行应用的方案是矛盾的。因为现在针对 hypervisor 和 os 容器设计的工具和技术在多应用服务器上效率并不高，即使这些多应用服务器只是用来运行一个应用，而且这些多应用服务器的运维也不“现代”：安装配置 web 或者 app 服务器是不可缺少的，部署应用需要很多步，每一步可能都很麻烦。&lt;/p&gt;
&lt;p&gt;现代的方法，就是在其它语言和运行平台使用的方法--单应用服务器。单应用服务器中，web 容器是嵌入到应用中(而不是把应用部署到we b容嚣中)。这样做就可以简单的部署，管理，配置和在系统级进行资源的分配。这就是为什么，一但现代的方法被引入Java中，传统的应用服务器(我的意思是任何打算运行多个应用的 servlet 或者全功能的 J2e 服务器)就&lt;a href=&quot;https://www.slideshare.net/ewolff/java-application-servers-are-dead&quot;&gt;死了&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在这里，我们调研的工具和技术并非覆盖全部的的领域。特别是在 web 和 web 相关的领域中，开发，工具，库和框架激增。这种增长部分原因是，不像嵌入式开发和大型机开发，web开发在初创公司和开发爱好者中广受欢迎。这类人是新技术的早期采纳者和体验者，有时也会为了探索技术的边界，或者学习，还有自我证明发明一种新的择术。这样的结果就是数以百计的库被发明出来，全都为了解决同样的目标，只是使用的方法略有不同。这种事情发生在 Java 的世界里，也发生在其他的语言生态中。&lt;/p&gt;
&lt;p&gt;同时，我们不会讨论那种有巨大的 MVC 结构，模板系统或者设计来就是在服务器端渲染 html 的“全功能”的 web 框架。有很多理由不这么做，第一个就是，我从来没有使用过那种框架，所以我不会评论他们的适用性或“现化化”，第二，这个主题就非常复杂，需要更多的讨论，而在别的地方已经有了(&lt;a href=&quot;https://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/&quot;&gt;这里&lt;/a&gt;,&lt;a href=&quot;https://www.youtube.com/watch?v=ygW8fJVlDxQ&quot;&gt;这里&lt;/a&gt;), 第三，web 开发正在朝客户端渲染和SPA方向发展(如 angular)，本质上正在朝着以前c/s的架构发展，数据和命令都通过http对服务器进行交互。这种转变没太完全，特别的，它依靠手机浏览器的 js 效率的提升，但是可以肯定的讲，我们将会看到越来越少HTML在服务器端生成。因此，我们会只讨论 http “数据” 服务的库和框架。&lt;/p&gt;
&lt;h2 id=&quot;http-服务和jax-rs-与-dropwizard&quot;&gt;http 服务和JAX-RS 与 Dropwizard&lt;/h2&gt;
&lt;p&gt;Java 与其他语言不同的一点是 JCP（Java Community Process）的工作，它的工作是标准化 API（即使对于不属于语言规范或甚至标准运行时的库）也是如此，然后由各种商业或开源组织实现。这些 JSR（Java Specification Requests）是由专家组制作的，它能把一项技术从普遍变成成熟并成为标准。当 JSR 通过时，就会非常有用，因为几乎所有迎合相关领域的库都将实现这个标准 API，这使得切换实现不那么痛苦。&lt;/p&gt;
&lt;p&gt;对于服务器实现（代码中框架更为普遍）来说，标准对于客户端（每个调用或多或少都是独立的并且可以被替换）而言更重要。 您可以使用三个不同的 HTT P客户端和 3 个不同的 JDBC API，但是您的服务器通常运行在单个框架中。 出于这个原因，。 单纯的 API 美学不应该倾向于支持非标准的API。&lt;/p&gt;
&lt;p&gt;相比于客户端(每次请求或多或少比较独立和能被替代)，标准化对服务器应用更重要(因为框架代码无处不在)。你可以使用三个不同的 http 客户端和三个不同的 JDDC api 在同一个方法中，但是你的服务器通常运行在一个框架中。出于这个原因，你应该更喜欢标准服务器API而不是非标准服务器API，除非非标准服务器 API 为你的应用提供了一些非常重要的优势，或者更适合您的特定用例。单纯的 API 美学不应该倾向于支持非标准的 API。&lt;/p&gt;
&lt;p&gt;那么轻量级的 Web 服务器最好应该实现标准的 API。谈到 HTT P服务时，有几个相关的 API 需要关注。第一个是古老的 Servlet API（目前是 Servlet 3.0的 &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=315&quot;&gt;JSR-315&lt;/a&gt; 和 Servlet 3.1的 &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=340&quot;&gt;JSR-340&lt;/a&gt; ）。几乎所有的 JavaWeb 服务器都实现了 Servlet API，其中一些是“现代”的（在我们之前讨论的意思），而在这里面最流行的是 &lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;。与传统的 JavaWeb 服务器不同，Jetty 不是独立的 We b应用程序容器，而是嵌入在应用程序中的 Web 服务库。它就是为&quot;现代&quot;编写的。不过传统的 Web 服务器，如 &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;，现在也已经有了&lt;a href=&quot;http://java.dzone.com/articles/embedded-tomcat-minimal&quot;&gt;嵌入式模式&lt;/a&gt;。因为 Servlet 是一个相对较低级别的 HTTP 服务器 API，我们不会在这里直接使用它们，所所以让我们继续讨论下一个标准 API -- &lt;a href=&quot;https://jersey.java.net/documentation/latest/jaxrs-resources.html&quot;&gt;JAX-RS&lt;/a&gt;（目前版本2.0，在JSR-339中说明）。现在已经有几种 JAX-RS 的实现，像 &lt;a href=&quot;http://cxf.apache.org/&quot;&gt;Apache CXF&lt;/a&gt;，&lt;a href=&quot;http://resteasy.jboss.org/&quot;&gt;RESTEasy&lt;/a&gt;和 &lt;a href=&quot;http://restlet.org/learn/guide/2.2/extensions/jaxrs&quot;&gt;Restlet&lt;/a&gt;，但最流行的应该是 &lt;a href=&quot;https://github.com/jersey/jersey&quot;&gt;Jersey&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JAX-RS 实现通常是在 Servlet 服务之上来使用。 因此，通过将 Jetty 和 Jersey 组合在一起来构建一个现代化的 JavaWeb服务微框架是非常自然的事，而这正是我们下一步将要使用的工具：&lt;a href=&quot;http://dropwizard.github.io/dropwizard/&quot;&gt;Dropwizard&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以,Dropwizard 把 Jetty，Jersey，Jackson，我们在第 2 部分介绍的现代性能监测库 Metrics（它恰好是由 Dropwizard 背后的人 Coda Hale 创建的）和其他一些库，组合成一个完整，简单，现代的 JavaWeb 服务微框架。&lt;/p&gt;
&lt;p&gt;我们现在将用 Dropwizard 编写第一个现代 JavaWeb 服务。 如果你还没有阅读第一部分，我建议你现在就回头看一下，这样能熟悉一下 Gradle 的基本用法，因为我们将使用 Gradle 做为构建工具。&lt;/p&gt;
&lt;p&gt;我们将创建一个新的 &lt;code&gt;jmodern-web&lt;/code&gt; 目录，&lt;code&gt;cd&lt;/code&gt; 进入该目录，输入 &lt;code&gt;gradle init --type java-library&lt;/code&gt; 创建一个 Gradle项目，删除文件（&lt;code&gt;src/main/java/Library.java&lt;/code&gt; 和 &lt;code&gt;src/test/java/LibraryTest.java&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;然后，编辑 &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'

mainClassName = 'jmodern.Main'
version = '0.1.0'

repositories {
    mavenCentral()
}

configurations {
    capsule
}

dependencies {
    compile 'io.dropwizard:dropwizard-core:0.7.0'
    capsule 'co.paralleluniverse:capsule:0.4.0'
    testCompile 'junit:junit:4.11'
}

task capsule(type: Jar, dependsOn: classes) {
    archiveName = &quot;jmodern-web.jar&quot;

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
            'Main-Class'  :   'Capsule',
            'Application-Class'   : mainClassName,
            'Application-Version' : version,
            'Min-Java-Version' : '1.8.0',
            'JVM-Args' : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -&amp;gt; &quot;$k=$v&quot; }.join(' '),
        )
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;src/main/java/jmodern/Main.java&lt;/code&gt; 文件修改如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package jmodern;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.Application;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.setup.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.atomic.AtomicLong;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.ws.rs.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.ws.rs.core.*;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Main &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Application&amp;lt;Configuration&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Main&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;st&quot;&gt;&quot;server&quot;&lt;/span&gt;});
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;initialize&lt;/span&gt;(Bootstrap&amp;lt;Configuration&amp;gt; bootstrap) {
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Configuration configuration, Environment environment) {
        environment.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HelloWorldResource&lt;/span&gt;());
    }

    &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello-world&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloWorldResource {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; AtomicLong counter = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; AtomicLong();

        &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@QueryParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name) {
            Map&amp;lt;String, Object&amp;gt; res = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
            res.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;, counter.&lt;span class=&quot;fu&quot;&gt;incrementAndGet&lt;/span&gt;());
            res.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; + (name != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? name : &lt;span class=&quot;st&quot;&gt;&quot;World&quot;&lt;/span&gt;));
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; res;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这几乎是最简单的 Dropwizard 服务了。 &lt;code&gt;sayHello&lt;/code&gt; 方法返回一个 &lt;code&gt;Map&lt;/code&gt;，&lt;code&gt;Map&lt;/code&gt;会自动改为 JSON 对象。 在 shell 中键入 &lt;code&gt;gradle run&lt;/code&gt;，运行应用，或者先用 &lt;code&gt;gradle capsule&lt;/code&gt; 构建一个 &lt;code&gt;capsule&lt;/code&gt;，然后使用 &lt;code&gt;java -jar build/libs/jmodern-web.jar&lt;/code&gt; 运行应用。要测试业务逻辑需要在浏览器中输入 &lt;code&gt;http://localhost:8080/hello-world&lt;/code&gt; 和 &lt;code&gt;http://localhost:8080/hello-world?name=Modern+Developer&lt;/code&gt; 进行测试。&lt;/p&gt;
&lt;p&gt;现在让我们用 &lt;code&gt;Dropwizard&lt;/code&gt; 的其它特性改进我们的服务：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package jmodern;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.codahale.metrics.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.codahale.metrics.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.fasterxml.jackson.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.google.common.base.Optional;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.Application;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.setup.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.ThreadLocalRandom;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.atomic.AtomicLong;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.ws.rs.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.ws.rs.core.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.validator.constraints.*;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Main &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Application&amp;lt;Main.&lt;span class=&quot;fu&quot;&gt;JModernConfiguration&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Main&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;st&quot;&gt;&quot;server&quot;&lt;/span&gt;, System.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;dropwizard.config&quot;&lt;/span&gt;)});
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;initialize&lt;/span&gt;(Bootstrap&amp;lt;JModernConfiguration&amp;gt; bootstrap) {
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(JModernConfiguration cfg, Environment env) {
        JmxReporter.&lt;span class=&quot;fu&quot;&gt;forRegistry&lt;/span&gt;(env.&lt;span class=&quot;fu&quot;&gt;metrics&lt;/span&gt;()).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// Manually add JMX reporting (Dropwizard regression)&lt;/span&gt;

        env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HelloWorldResource&lt;/span&gt;(cfg));
    }

    &lt;span class=&quot;co&quot;&gt;// YAML Configuration&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; JModernConfiguration &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Configuration {
        &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@NotEmpty&lt;/span&gt; String template;
        &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@NotEmpty&lt;/span&gt; String defaultName;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getTemplate&lt;/span&gt;()    { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; template; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDefaultName&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; defaultName; }
    }

    &lt;span class=&quot;co&quot;&gt;// The actual service&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello-world&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloWorldResource {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; AtomicLong counter = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; AtomicLong();
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String template;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String defaultName;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HelloWorldResource&lt;/span&gt;(JModernConfiguration cfg) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;template&lt;/span&gt; = cfg.&lt;span class=&quot;fu&quot;&gt;getTemplate&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultName&lt;/span&gt; = cfg.&lt;span class=&quot;fu&quot;&gt;getDefaultName&lt;/span&gt;();
        }

        &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// monitor timing of this service with Metrics&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Saying &lt;span class=&quot;fu&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@QueryParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) Optional&amp;lt;String&amp;gt; name) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException {
            &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String value = String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(template, name.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;(defaultName));
            Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(ThreadLocalRandom.&lt;span class=&quot;fu&quot;&gt;current&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;nextInt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;));
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Saying&lt;/span&gt;(counter.&lt;span class=&quot;fu&quot;&gt;incrementAndGet&lt;/span&gt;(), value);
        }
    }

    &lt;span class=&quot;co&quot;&gt;// JSON (immutable!) payload&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Saying {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; id;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Length&lt;/span&gt;(max = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) String content;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Saying&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; id, String content) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;content&lt;/span&gt; = content;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Saying&lt;/span&gt;() {} &lt;span class=&quot;co&quot;&gt;// required for deserialization&lt;/span&gt;

        &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id; }
        &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getContent&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; content; }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们做了一些改进。 首先，用一个不可变的 java 类来表示 JSON 对象。 其次，为服务添加了随机睡眠功能，以及增加了&lt;code&gt;@Timed&lt;/code&gt; 注解，这样 &lt;code&gt;Metrics&lt;/code&gt; 库就能自动监控报告我们服务的延迟。 最后，我们使用 &lt;code&gt;DropWizard YAML&lt;/code&gt;配置我们的服务。 虽然这对于一个简单的 “Hello，World” 服务来说可能过于复杂了，但它可以作为复杂应用程序的基础。额外的代码为我们带来了监测，可配置性和类型安全。 为了使用配置，我们需要创建一个配置类，并对我们的构建文件进行一些调整。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;template:&lt;/span&gt; Hello, %s!
&lt;span class=&quot;fu&quot;&gt;defaultName:&lt;/span&gt; Stranger&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，增加以下代码到 &lt;code&gt;build.gradle&lt;/code&gt;，这是为了在运行代码时，能找到配置文件:&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;run {
    systemProperty &quot;dropwizard.config&quot;, &quot;build/resources/main/jmodern.yml&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，我们希望在 capsule 中默认包含配置文件，因此我们将添加以下部分：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;from { sourceSets.main.resources }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时，也把 &lt;code&gt;System-Properties&lt;/code&gt; 进行调整：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;System-Properties' : (run.systemProperties + [&quot;dropwizard.config&quot;: '$CAPSULE_DIR/jmodern.yml']).collect { k,v -&amp;gt; &quot;$k=$v&quot; }.join(' '),&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在我们用 &lt;code&gt;gradle capsule&lt;/code&gt; 构建部署 capsule，并使用 &lt;code&gt;java -jar build/libs/jmodern-web.ja&lt;/code&gt; 启动服务器。 您现在可以在 &lt;a href=&quot;http://localhost:8080/hello-world&quot; class=&quot;uri&quot;&gt;http://localhost:8080/hello-world&lt;/a&gt; 和 &lt;a href=&quot;http://localhost:8080/hello-world?name=Modern+Developer&quot; class=&quot;uri&quot;&gt;http://localhost:8080/hello-world?name=Modern+Developer&lt;/a&gt; 测试服务。&lt;/p&gt;
&lt;p&gt;如果想调整默认配置，只要在项目目录下创建 &lt;code&gt;foo.yml&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;template:&lt;/span&gt; Howdy, %s!
&lt;span class=&quot;fu&quot;&gt;defaultName:&lt;/span&gt; fella&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用这个配置文件，覆盖　&lt;code&gt;dropwizard.config&lt;/code&gt; 属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;java -Ddropwizard.config=foo.yml -jar build/libs/jmodern-web.jar&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以启动 VisualVM（请参阅第2部分），并查看应用服务报告，特别的，我们应用的时间花费：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.paralleluniverse.co/images/jmodern/figure20.png&quot; alt=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们打开 Dropwizard 管理控制台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.paralleluniverse.co/images/jmodern/figure21.png&quot; alt=&quot;2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;http://localhost:8081/metrics&lt;/code&gt;，返回以下一个JSON对象：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.paralleluniverse.co/images/jmodern/figure22.png&quot;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就是这样！配置文件也可以用来修改Dropwizard的很多内部变量，如设置日志级别等等。有关详细信息，请参阅&lt;a href=&quot;http://dropwizard.github.io/dropwizard/manual/core.html&quot;&gt;Dropizard文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总而言之，Dropwizard 是一个精简、有趣的现代化微型框架，它可让你部署简单，配置轻松以及开箱即用的出色的监控能力。另一个有类似功能的框架是 &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;。不幸的是，Boot 没有使用 JAX-RS 标准 API，但有一个项目试图修复这个问题。&lt;/p&gt;
&lt;p&gt;Dropwizard具有极好的开箱即用体验，但更高级的用户可能会发现它也有一些限制（例如，Dropwizard 的某些组件很难被其他组件替代：比如日志引擎）。这些用户可能会发现将 Jersey, Jetty 和其他库进行组装是非常有必要的，并且可以自己制定管道，以构建一个最适合其组织的轻量级服务器。这样做应该不需要很多工作，而且只需要一次就可以适用所有自己的项目。Dropwizard 是一个很好的起点，如果它适合你（它应该在大多数情况下），你可以放心地坚持使用下去。在这篇文章中的大部分示例中我们使用 Dropwizard，但是示例中所做的你都可以单独使用Jetty，或者与Jersey结合使用来完成。而在 Dropwizard，更改配置和自动监控则无需额外的工作。&lt;/p&gt;
&lt;h2 id=&quot;http-客户端&quot;&gt;http 客户端&lt;/h2&gt;
&lt;p&gt;增加下面代码到构建文件：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;compile 'io.dropwizard:dropwizard-client:0.7.0'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;导入以下库到 &lt;code&gt;jmoern.Main&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.client.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.sun.jersey.api.client.Client;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加下面代码到 &lt;code&gt;JModernConfiguration&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; JerseyClientConfiguration httpClient = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JerseyClientConfiguration&lt;/span&gt;();
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; JerseyClientConfiguration &lt;span class=&quot;fu&quot;&gt;getJerseyClientConfiguration&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; httpClient; }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将实例化客户端，并注册一个新服务，我们将其称为 &lt;code&gt;Consumer&lt;/code&gt;，并添加到 run 方法中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Client client = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JerseyClientBuilder&lt;/span&gt;(env).&lt;span class=&quot;fu&quot;&gt;using&lt;/span&gt;(cfg.&lt;span class=&quot;fu&quot;&gt;getJerseyClientConfiguration&lt;/span&gt;()).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;client&quot;&lt;/span&gt;);
env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsumerResource&lt;/span&gt;(client));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是我们的服务：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/consumer&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;TEXT_PLAIN&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConsumerResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Client client;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsumerResource&lt;/span&gt;(Client client) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;client&lt;/span&gt; = client;
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;consume&lt;/span&gt;() {
        Saying saying = client.&lt;span class=&quot;fu&quot;&gt;resource&lt;/span&gt;(UriBuilder.&lt;span class=&quot;fu&quot;&gt;fromUri&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080/hello-world&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;queryParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;consumer&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;())
                .&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(Saying.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The service is saying: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; (id: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&quot;&lt;/span&gt;,  saying.&lt;span class=&quot;fu&quot;&gt;getContent&lt;/span&gt;(), saying.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到方法返回的 JSON 对像是如何反序列化成 &lt;code&gt;Saying&lt;/code&gt; 对象的；它也可以是 Map，string 以及其他类型（Dropwizard使用的是Jersey JAX-RS客户端的旧版本，新的API类似）。而且由于 Dropwizard 开箱即用地支持 Jersey JAX-RS 客户端，因此会自动发持请求的性能指标。&lt;/p&gt;
&lt;p&gt;要测试我们的新服务，启动我们的应用程序（ &lt;code&gt;gradle run&lt;/code&gt; ，记住）并将浏览器指向 &lt;code&gt;http：//localhost：8080/consumer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以 JAX-RS 标准也标准化了客户端的 API。但是，正如我们之前所说的，当谈到客户端 API 时，我们也可以使用非标准的API。一个颇受欢迎的HTTP客户端 &lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt; 是由 Square 提供的。如你所见，JAX-RS 客户端可以自动将 Java 对象序列化并反序列化为 JSON 对象（或 XML）。Retrofit 把这种转化用在 Java/REST 转换上（这种转换并不总是一件好事；领域模型的转换通常具有抽象漏洞，但如果你只限于用于简单的协议，应该会很有帮助），包括服务 URL，而不仅仅是 JSON 到 Java 接口的转换。不幸的是，Retrofit 使用与 JAX-RS（服务器）相同的注解名称。因此我们要在不同的包中定义，这会使我们的示例有点难看。幸运的是，Retrofit 有 Netflix 提供的称为 Feign 的克隆/衍生产品。Feign 和 Retrofit 之间的差异并对我来说并不完全清楚。尽管看起来 Retrofit 更广泛地被采用（它更成熟），而 Feign 更容易定制。无论如何，这两者非常相似，可以互换使用。&lt;/p&gt;
&lt;p&gt;试试 Feign，将以下依赖添加到 build.gradle ：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;compile 'com.netflix.feign:feign-core:6.1.2'
compile 'com.netflix.feign:feign-jaxrs:6.1.2'
compile 'com.netflix.feign:feign-jackson:6.1.2'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;导入到 &lt;code&gt;Main&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import feign.Feign;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import feign.jackson.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import feign.jaxrs.*;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们用 Feign 代替 JAX-RS：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Feign.&lt;span class=&quot;fu&quot;&gt;Builder&lt;/span&gt; feignBuilder = Feign.&lt;span class=&quot;fu&quot;&gt;builder&lt;/span&gt;()
        .&lt;span class=&quot;fu&quot;&gt;contract&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; JAXRSModule.&lt;span class=&quot;fu&quot;&gt;JAXRSContract&lt;/span&gt;()) &lt;span class=&quot;co&quot;&gt;// we want JAX-RS annotations&lt;/span&gt;
        .&lt;span class=&quot;fu&quot;&gt;encoder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JacksonEncoder&lt;/span&gt;()) &lt;span class=&quot;co&quot;&gt;// we want Jackson because that's what Dropwizard uses already&lt;/span&gt;
        .&lt;span class=&quot;fu&quot;&gt;decoder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JacksonDecoder&lt;/span&gt;());
env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsumerResource&lt;/span&gt;(feignBuilder));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们的消费服务看起来如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/consumer&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;TEXT_PLAIN&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConsumerResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; HelloWorldAPI hellowWorld;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsumerResource&lt;/span&gt;(Feign.&lt;span class=&quot;fu&quot;&gt;Builder&lt;/span&gt; feignBuilder) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hellowWorld&lt;/span&gt; = feignBuilder.&lt;span class=&quot;fu&quot;&gt;target&lt;/span&gt;(HelloWorldAPI.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;consume&lt;/span&gt;() {
        Saying saying = hellowWorld.&lt;span class=&quot;fu&quot;&gt;hi&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;consumer&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The service is saying: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; (id: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&quot;&lt;/span&gt;,  saying.&lt;span class=&quot;fu&quot;&gt;getContent&lt;/span&gt;(), saying.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，我们添加 HelloWorldAPI 接口，该接口把 REST API 说明定入代码中（你可以将接口定义放在我们的 Main 类中;不需要创建新的Java文件）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; HelloWorldAPI {
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello-world&quot;&lt;/span&gt;)
    Saying &lt;span class=&quot;fu&quot;&gt;hi&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@QueryParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name);

    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello-world&quot;&lt;/span&gt;)
    Saying &lt;span class=&quot;fu&quot;&gt;hi&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此接口使用 JAX-RS 注解说明如何把方法转换 http 为请求。实际执行转换是由 Feign（或Retrofit）自动完成的。&lt;/p&gt;
&lt;p&gt;启动应用后，访问 &lt;a href=&quot;http://localhost:8080/consumer&quot; class=&quot;uri&quot;&gt;http://localhost:8080/consumer&lt;/a&gt; 以测试新的服务。&lt;/p&gt;
&lt;p&gt;如果想看到更复杂的 REST API 是如何转换为Java代码的， &lt;a href=&quot;https://github.com/square/retrofit/blob/master/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java&quot;&gt;这个简单的例子&lt;/a&gt;演示使用 Retroift 消费 GitHub 的API，还有&lt;a href=&quot;https://github.com/Netflix/feign#basics&quot;&gt;这里&lt;/a&gt;使用 Feign。 Retrofit 和 Feign 功能都非常丰富，可以很好地控制请求的转换和执行方式。此时，我会推荐 Retroift 而不是 Feign，因为 Retrofit 更成熟，它利用了高效的 NIO 网络 API，而 Feign使用慢速的 HttpURLConnection API（ 更好的传输机制可以添加进 Feign 中，但我还没有找到）。&lt;/p&gt;
&lt;p&gt;还有其他一些较底层的 HTTP 客户端 API（例如 Apache HTTP Client，Dropwizard 也直接支持），但在大多数情况下，我们刚才试过的高层次的 API（JAX-RS Client 或 Retorfit / Feign）效果最佳。&lt;/p&gt;
&lt;h2 id=&quot;数据库访问&quot;&gt;数据库访问&lt;/h2&gt;
&lt;p&gt;JDK 包含用于（关系）数据库访问的标准 API，称为 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html&quot;&gt;JDBC&lt;/a&gt; （Java数据库连接）。几乎所有的 SQL 数据库都支持 JDBC。但是 JDBC 是一个非常低级的 API，有时可能会令人厌烦。Java 还有一个标准的高级数据库访问 API - 实际上是一个ORM--被 JSR-220 和 JSR-317 叫做 JPA（Java Persistance API）。JPA的知名实现包括 &lt;a href=&quot;http://hibernate.org/orm/&quot;&gt;Hibernate&lt;/a&gt; ， &lt;a href=&quot;https://openjpa.apache.org/&quot;&gt;OpenJPA&lt;/a&gt; 和 &lt;a href=&quot;https://www.eclipse.org/eclipselink/&quot;&gt;EclipseLink&lt;/a&gt; 。请不要使用他们，我相信以后你会感谢我。并不是说他们工作的不好，是因为他们往往比他们的带来麻烦比价值更多。ORM 鼓励复杂的对象图和复杂的模式，这往往会导致生成非常复杂的 SQL 语句，这些语句很难优化。另外，ORM 并不以其出色的性能而闻名。&lt;/p&gt;
&lt;p&gt;直接使用 JDBC 通常更好，但也许最好的方法是使用我们现在提供的工具之一。它位于低级 JDBC 和高级的 ORM 之间。它不是标准的，这意味着每个工具都有它自己的 API。但正如我们所说的，不使用标准 API 适合于客户端 API。在下面我们的例子中，我们使用&lt;a href=&quot;http://www.h2database.com/&quot;&gt;H2&lt;/a&gt; 嵌入式数据库。&lt;/p&gt;
&lt;p&gt;我们将从 &lt;a href=&quot;http://jdbi.org/&quot;&gt;JDBI&lt;/a&gt; 开始，这也由 Dropwizrd 直接支持。要有效地使用 JDBI ，你需要权衡最佳模式和简单代码，直到您达到一个很好的中间地带（JDBI 对于非常复杂的模式并不理想）。&lt;/p&gt;
&lt;p&gt;我们添加这些依赖关系：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;compile 'io.dropwizard:dropwizard-db:0.7.0'
compile 'io.dropwizard:dropwizard-jdbi:0.7.0'
runtime 'com.h2database:h2:1.4.178'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并且导入：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.db.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import io.dropwizard.jdbi.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.skife.jdbi.v2.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.skife.jdbi.v2.util.*;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们增加 DataSource 工厂类到 JModernConfiguration ：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;DBI dbi = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBIFactory&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;(env, cfg.&lt;span class=&quot;fu&quot;&gt;getDataSourceFactory&lt;/span&gt;(), &lt;span class=&quot;st&quot;&gt;&quot;db&quot;&lt;/span&gt;);
env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBResource&lt;/span&gt;(dbi));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了配置数据库，我们需要将以下内容添加到 &lt;code&gt;jmodern.yml&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;database:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;driverClass:&lt;/span&gt; org.h2.Driver
  &lt;span class=&quot;fu&quot;&gt;url:&lt;/span&gt; jdbc:h2:mem:test
  &lt;span class=&quot;fu&quot;&gt;user:&lt;/span&gt; u
  &lt;span class=&quot;fu&quot;&gt;password:&lt;/span&gt; p&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，让我们创建数据库资源：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/db&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DBResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; DBI dbi;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBResource&lt;/span&gt;(DBI dbi) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbi&lt;/span&gt; = dbi;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Handle h = dbi.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;()) {
            h.&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;create table something (id int primary key auto_increment, name varchar(100))&quot;&lt;/span&gt;);
            String[] names = { &lt;span class=&quot;st&quot;&gt;&quot;Gigantic&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Bone Machine&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Hey&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Cactus&quot;&lt;/span&gt; };
            Arrays.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;(names).&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(name -&amp;gt; h.&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;insert into something (name) values (?)&quot;&lt;/span&gt;, name));
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@POST&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/add&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Handle h = dbi.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;()) {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id = h.&lt;span class=&quot;fu&quot;&gt;createStatement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;insert into something (name) values (:name)&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;, name)
                    .&lt;span class=&quot;fu&quot;&gt;executeAndReturnGeneratedKeys&lt;/span&gt;(IntegerMapper.&lt;span class=&quot;fu&quot;&gt;FIRST&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;first&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/item/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Handle h = dbi.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; h.&lt;span class=&quot;fu&quot;&gt;createQuery&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select id, name from something where id = :id&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;, id).&lt;span class=&quot;fu&quot;&gt;first&lt;/span&gt;();
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/all&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; &lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Handle h = dbi.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; h.&lt;span class=&quot;fu&quot;&gt;createQuery&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select * from something&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;list&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于那些了解 JDBC 的人，这些代码有很多熟悉的和不同的地方。JDBI 有一个流畅的接口，并且方法返回Java集合，并将其自动地序列化为 JSON 对象。总之，这就像一个有趣的&quot;现代&quot;JDBC。&lt;/p&gt;
&lt;p&gt;启动应用程序并将浏览器指向 &lt;a href=&quot;http://localhost:8080/db/all&quot; class=&quot;uri&quot;&gt;http://localhost:8080/db/all&lt;/a&gt; 以查看所有条目，或者在http://localhost:8080/db/item/ 2 处查看第二个条目。然后，您也可以通过控制台创建新的条目:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;curl&lt;/span&gt; --data Velouria http://localhost:8080/db/add&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JDBI 还可以像 Retrofit 一样，提供一个数据库使用量身定制的定制界面。通过将 JDBI 将表行映射为 Java 对象，我们还可以获得一些小技巧。&lt;/p&gt;
&lt;p&gt;这是我们的对象：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Something {
    &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;
    &lt;span class=&quot;fu&quot;&gt;@JsonProperty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Something&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id, String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@JsonProperty&lt;/code&gt; 注释将确保这个属性自动将它 JSON 序列化，但为了使 JDBI 能够与 Something 一起工作，我们还需要创建一个 &lt;code&gt;ResultSetMapper&lt;/code&gt; ，它 将JDBC &lt;code&gt;ResultSet&lt;/code&gt; 转换为&lt;code&gt;Something&lt;/code&gt; 对象：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SomethingMapper &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; ResultSetMapper&amp;lt;Something&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Something &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, ResultSet r, StatementContext ctx) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Something&lt;/span&gt;(r.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;), r.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;));
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在有意思的事情就要开始了！这是我们的 DAO 类（或JDBI说法中的 SQL 对象 ） - JDBI SQL 对象是数据库就像 Retrofit 对于 REST 的改造：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RegisterMapper&lt;/span&gt;(SomethingMapper.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; ModernDAO {
    &lt;span class=&quot;fu&quot;&gt;@SqlUpdate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;insert into something (name) values (:name)&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@GetGeneratedKeys&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name);

    &lt;span class=&quot;fu&quot;&gt;@SqlQuery&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select * from something where id = :id&quot;&lt;/span&gt;)
    Something &lt;span class=&quot;fu&quot;&gt;findById&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id);

    &lt;span class=&quot;fu&quot;&gt;@SqlQuery&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select * from something&quot;&lt;/span&gt;)
    List&amp;lt;Something&amp;gt; &lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那现在，我们新的数据库资源可以这样写：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/db&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DBResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ModernDAO dao;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBResource&lt;/span&gt;(DBI dbi) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dao&lt;/span&gt; = dbi.&lt;span class=&quot;fu&quot;&gt;onDemand&lt;/span&gt;(ModernDAO.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Handle h = dbi.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;()) {
            h.&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;create table something (id int primary key auto_increment, name varchar(100))&quot;&lt;/span&gt;);
            String[] names = { &lt;span class=&quot;st&quot;&gt;&quot;Gigantic&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Bone Machine&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Hey&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Cactus&quot;&lt;/span&gt; };
            Arrays.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;(names).&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(name -&amp;gt; h.&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;insert into something (name) values (?)&quot;&lt;/span&gt;, name));
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@POST&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/add&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Something &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(dao.&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;(name));
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/item/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Something &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dao.&lt;span class=&quot;fu&quot;&gt;findById&lt;/span&gt;(id);
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/all&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Something&amp;gt; &lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dao.&lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JDBI并不是一个完整的 ORM 解决方案：它不会自动生成 SQL 语句，也不会自动生成完整的对象图，但它确使我们获得了数据库访问的快捷方法，其量级远低于任何 JPA 实现。&lt;/p&gt;
&lt;p&gt;使用 JDBI 时，Dropwizard 会自动添加一个运行状况检查（ &lt;a href=&quot;http://localhost:8081/healthcheck&quot; class=&quot;uri&quot;&gt;http://localhost:8081/healthcheck&lt;/a&gt;），用于测试数据库的连通性，并用监控 DAO 的性能指标：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.paralleluniverse.co/images/jmodern/figure23.png&quot; alt=&quot;3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们会看到的数据库访问库 &lt;a href=&quot;http://www.jooq.org/&quot;&gt;jOOQ&lt;/a&gt;，它与 JDBI 流畅 API 类似（它没有与 JDB I的 SQL 对象类似的API），但它采用了不同的方法：它使用方法调用链而不是字符串，生成 SQ L语句（并且它可以生成的SQL兼容的多种数据库）。&lt;/p&gt;
&lt;p&gt;我们将添加这个依赖关系：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;compile 'org.&lt;span class=&quot;fu&quot;&gt;jooq&lt;/span&gt;:jooq:&lt;span class=&quot;fl&quot;&gt;3.3.2&lt;/span&gt;'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入库：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.jooq.Record;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.jooq.RecordMapper;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import static org.jooq.impl.DSL.*;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 run 方法中，注册数据库资源：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;DataSource ds = cfg.&lt;span class=&quot;fu&quot;&gt;getDataSourceFactory&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;(env.&lt;span class=&quot;fu&quot;&gt;metrics&lt;/span&gt;(), &lt;span class=&quot;st&quot;&gt;&quot;db&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// Dropwizard will monitor the connection pool&lt;/span&gt;
env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBResource&lt;/span&gt;(ds));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的新 DBResource 如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/db&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DBResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; DataSource ds;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; RecordMapper&amp;lt;Record, Something&amp;gt; toSomething =
            record -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Something&lt;/span&gt;(record.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;, Integer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)), record.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;, String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)));

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DBResource&lt;/span&gt;(DataSource ds) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ds&lt;/span&gt; = ds;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Connection conn = ds.&lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;()) {
            conn.&lt;span class=&quot;fu&quot;&gt;createStatement&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;create table something (id int primary key auto_increment, name varchar(100))&quot;&lt;/span&gt;);

            String[] names = { &lt;span class=&quot;st&quot;&gt;&quot;Gigantic&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Bone Machine&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Hey&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Cactus&quot;&lt;/span&gt; };
            DSLContext context = &lt;span class=&quot;fu&quot;&gt;using&lt;/span&gt;(conn);
            Arrays.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;(names).&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(name -&amp;gt; context.&lt;span class=&quot;fu&quot;&gt;insertInto&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;something&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;values&lt;/span&gt;(name).&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;());
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@POST&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/add&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Something &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(String name) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Connection conn = ds.&lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;()) {
            &lt;span class=&quot;co&quot;&gt;// this does not work&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id = &lt;span class=&quot;fu&quot;&gt;using&lt;/span&gt;(conn).&lt;span class=&quot;fu&quot;&gt;insertInto&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;something&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;values&lt;/span&gt;(name).&lt;span class=&quot;fu&quot;&gt;returning&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;))
                       .&lt;span class=&quot;fu&quot;&gt;fetchOne&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;into&lt;/span&gt;(Integer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/item/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Something &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Connection conn = ds.&lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;using&lt;/span&gt;(conn).&lt;span class=&quot;fu&quot;&gt;select&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;something&quot;&lt;/span&gt;))
                    .&lt;span class=&quot;fu&quot;&gt;where&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;, Integer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;equal&lt;/span&gt;(id)).&lt;span class=&quot;fu&quot;&gt;fetchOne&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(toSomething);
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/all&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Something&amp;gt; &lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;) Integer id) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Connection conn = ds.&lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;using&lt;/span&gt;(conn).&lt;span class=&quot;fu&quot;&gt;select&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;something&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;fetch&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(toSomething);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，jOOQ 还没有实现 DDL（像 &lt;code&gt;create table&lt;/code&gt; 这样的 SQL 语句），所以你会注意到我们使用 JDBC 创建表。不过这也很好，因为 jOOQ 是作为一个JDBC包装器实现的，无论如何都需要 JDBC（我还没有能使add的正确工作的方法（可能是因为自动生成的主键的原因）jOOQ 的开发人员：如果你正在阅读这个，请帮帮忙）。&lt;/p&gt;
&lt;p&gt;这个例子实际上并没有正确的使用 JOOQ 正义，因为它的最大优点是能够从数据库的 scheme 生成 class，并且能够以类型安全的方式执行我们之前完成的所有操作 - 以及更复杂的操作。对我个人来说，JOOQ 有点太智能了，但是如果你的模式很复杂，它可能是一个非常有用的工具。&lt;/p&gt;
&lt;h2 id=&quot;依赖注入&quot;&gt;依赖注入&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;依赖注入&lt;/a&gt;是否有用或无用取决于你问的对象。我相信 DI 在复杂的代码库中非常有用；对于简单代码来说，这不必要。Java 有一个由 &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=330&quot;&gt;JSR-330&lt;/a&gt; 指定的简单标准 DI API。JSR-330 有以下实现： &lt;a href=&quot;http://docs.spring.io/spring/docs/4.1.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#beans&quot;&gt;Spring IoC&lt;/a&gt; ， &lt;a href=&quot;https://code.google.com/p/google-guice/&quot;&gt;Guice&lt;/a&gt; ， &lt;a href=&quot;http://square.github.io/dagger/&quot;&gt;Dagger&lt;/a&gt; ， &lt;a href=&quot;http://www.eclipse.org/sisu/&quot;&gt;Sisu&lt;/a&gt; （建立在Guice之上）和 &lt;a href=&quot;https://hk2.java.net/&quot;&gt;HK2&lt;/a&gt; 。这些实现都是由大公司或组织开发的。鉴于这种情况，人们往往面临着&lt;a href=&quot;http://en.wikipedia.org/wiki/The_Paradox_of_Choice&quot;&gt;两难选择&lt;/a&gt;。我认为你不要害怕：如果你坚持JSR-330标准，或者稍有偏差的实现，您可以随时更改您的DI解决方案。但如果你想让你的应用程序完全由用户配置（XML文件的形式），选择Spring（这就是为什么我们选择Spring for &lt;a href=&quot;http://docs.paralleluniverse.co/galaxy/&quot;&gt;Galaxy&lt;/a&gt;）;如果都不是，那么从Dagger开始，只有当它不再满足你的需求时才去找别的东西。&lt;/p&gt;
&lt;p&gt;我们来看看Dagger。首先，让我们添加Dagger依赖关系：&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;compile 'com.squareup.dagger:dagger:1.2.1'
compile 'com.squareup.dagger:dagger-compiler:1.2.1'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了保持整洁，我们只留下 &lt;code&gt;HelloWorldResource&lt;/code&gt; 。不过，这一次，我们不手动创建服务并将配置对象传递给它，而是使用Dagger 从 YAML 文件读取我们的配置，然后将它们注入到我们的服务中。&lt;/p&gt;
&lt;p&gt;这是服务代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello-world&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Produces&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloWorldResource {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; AtomicLong counter = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; AtomicLong();
    &lt;span class=&quot;fu&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Named&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;template&quot;&lt;/span&gt;) String template;
    &lt;span class=&quot;fu&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Named&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;defaultName&quot;&lt;/span&gt;) String defaultName;

    &lt;span class=&quot;fu&quot;&gt;HelloWorldResource&lt;/span&gt;() {
    }

    &lt;span class=&quot;fu&quot;&gt;@Timed&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// monitor timing of this service with Metrics&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Saying &lt;span class=&quot;fu&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@QueryParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) Optional&amp;lt;String&amp;gt; name) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException {
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String value = String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(template, name.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;(defaultName));
        Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(ThreadLocalRandom.&lt;span class=&quot;fu&quot;&gt;current&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;nextInt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;));
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Saying&lt;/span&gt;(counter.&lt;span class=&quot;fu&quot;&gt;incrementAndGet&lt;/span&gt;(), value);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意&lt;code&gt;@Inject&lt;/code&gt; 和 &lt;code&gt;@Named&lt;/code&gt; 注释。这些是 JSR-330 标准的一部分，所以无论我们使用哪种 DI 工具，我们的服务代码都将保持不变。要实际连接并注入依赖关系，我们使用 Dagge r特定的模式。Dagger 在模块类中指定了依赖配置。这是我们的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Module&lt;/span&gt;(injects = HelloWorldResource.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ModernModule {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; JModernConfiguration cfg;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModernModule&lt;/span&gt;(JModernConfiguration cfg) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cfg&lt;/span&gt; = cfg;
    }

    &lt;span class=&quot;fu&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Named&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;template&quot;&lt;/span&gt;) String &lt;span class=&quot;fu&quot;&gt;provideTemplate&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cfg.&lt;span class=&quot;fu&quot;&gt;getTemplate&lt;/span&gt;();
    }

    &lt;span class=&quot;fu&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@Named&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;defaultName&quot;&lt;/span&gt;) String &lt;span class=&quot;fu&quot;&gt;provideDefaultName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cfg.&lt;span class=&quot;fu&quot;&gt;getDefaultName&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dagger 最有用的功能之一是它在编译时使用注释处理器验证所有依赖关系是否满足。例如，如果我们忘记定义 provideDefaultName ，那么当我们键入时，这就 是NetBeans 中显示的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.paralleluniverse.co/images/jmodern/figure24.png&quot; alt=&quot;5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了获得完整配置的 HelloWorldResource 实例，我们在应用程序的 run 方法中放入了这个实例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;ObjectGraph objectGraph = ObjectGraph.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModernModule&lt;/span&gt;(cfg));
env.&lt;span class=&quot;fu&quot;&gt;jersey&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(objectGraph.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(HelloWorldResource.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你会发现， &lt;code&gt;ModernModule&lt;/code&gt; 类复制 &lt;code&gt;JModernConfiguration&lt;/code&gt; 的一些行为。使用 &lt;code&gt;@Module&lt;/code&gt; 简单注解&lt;code&gt;JModernConfiguration&lt;/code&gt; ，以及使用 &lt;code&gt;@Provides&lt;/code&gt; 注解 &lt;code&gt;getTemplate&lt;/code&gt; 和 &lt;code&gt;getDefaultName&lt;/code&gt; 方法非常简单。Dagger 禁止&lt;a href=&quot;https://www.google.com/url?q=https%3A%2F%2Fgithub.com%2Fsquare%2Fdagger%2Fissues%2F188&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNEYmglwU4VmN6t79epDqjmwyk2V8Q&quot;&gt;子类型注解&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;高级主题阻塞与非阻塞-vs-同步与异步&quot;&gt;高级主题：阻塞与非阻塞 VS 同步与异步&lt;/h2&gt;
&lt;p&gt;在这个话题上，我们需要对阻塞与非阻塞 API 的更多理论讨论。阻塞或同步是方法会阻塞调用线程直到它们完成。当然，阻塞（或非阻塞）的概念只有在这些方法可能需要很长时间才能完成时（例如几十毫秒到几十秒）才有意义。另一种类型的API，通常称为非阻塞，但在这里我们称它们为半阻塞（或半异步），它是在操作期间不会阻塞调用线程的方法。他们只启动一项操作并返回 Feature 对象。Feature 对象用于等待待等待操作成然后在方便的时间完成后面的操作。最后，第三种类型的 API-真正的非阻塞或异步 API，它也不会阻塞调用线程。但它的方法需要一个额外的参数 - 一个回调函数 ，它是在操作完成时将执行的代码（在某个未知的线程上）。有时候，Java API 混合了最后两种类型，既有回调又有 返因Feature对象。&lt;/p&gt;
&lt;p&gt;必须明确：异步 API 的总是比阻塞的 API 更复杂（即使语言本身试图使回调更容易使用，通过使用如 promise，comprehensions, monad 等函数式方案）。除了支持多线程的 Clojure 之外，异步的问题在 Java 这样的语言中尤其糟糕，包括基本上所有其他的 JVM 语言。我们在这里不会详细讨论 clojure 不限制副作用的问题。在这些语言中使用非阻塞 API 需要严格的规范，并且需要对复杂的并发问题有清晰的理解。阻塞 API 则没有这些问题。&lt;/p&gt;
&lt;p&gt;为什么有人会使用异​​步 API？答案很简单：性能。更深刻一点，内核线程进行任务切换的成本不可忽略（这里不是说可以快速释放线程内存堆栈，快速释放线程堆栈这将更好地用于数据高速缓存）。现代 Web 应用程序通常会将实际处理委托给无数的服务，有些会做离线 map-reduce，其他可能会做一些在线处理，面向客户端的 Web 服务器的主要功能是协调：它调用许多其他服务并组装数据。它几乎不做任何处理，但它执行大量的 IO 操作 - 有些可以并行完成，有些需要连续调用。这意味着 Web 服务器在相对较少的 CPU 工作时间内会生成很多线程调度事件（线程阻塞和解除阻塞），这种时候，操作系统的线程调度开销变得繁重。因此，人们为了解决这个内核线程调度性能问题而将代码置于异步 API 这种不自然的扭曲之中。一些现代 We b框架/库也非常喜欢使用非阻塞 API（我们没有讨论过其中的任何一个，因为我们说明，他们都是错误的）。&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;http://static.usenix.org/events/hotos03/tech/full_papers/vonbehren/vonbehren_html/&quot;&gt;错误的方法&lt;/a&gt; 。为了迎合不合理的实现，人们放弃了适当的抽象（线程），而不是简单地修复不合理实现。轻量级（或用户级）线程已在 Erlang，Go 中使用，现在通过 Quasar 库在 JVM 中使用 - 可让您使用简单的阻塞 API，而不存在任何性能问题。&lt;/p&gt;
&lt;p&gt;这种情况在计算机科学中非常罕见的。一种充满了折衷和警告的导步方法几乎总是击败另一种同步方法。异步代码与同步代码相比具有许多缺点和绝对劣势。即使轻量级线程的不完美实现也比异步编程更好，特别是当语言对共享状态突变不做防范时。这个规则可能有一些例外（毕竟，在 C S中，即使绝对不是绝对如此），但它们远少于建议使用 goto 语句时的情况。&lt;/p&gt;
&lt;p&gt;同步和异步是可以相互转换的（每个都可以使用“恒定时间”转换转换为另一个），但同步对人类来说是更好的抽象，我可以证明这一点。我们来看两个 API：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Sync {
    Object &lt;span class=&quot;fu&quot;&gt;pull&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Async {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;push&lt;/span&gt;(Callback cb);
}

&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Callback {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;got&lt;/span&gt;(Object obj);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在让我们使用 Sync 实现 Async:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Async &lt;span class=&quot;fu&quot;&gt;syncToAsync&lt;/span&gt;(Sync sync) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Async&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Callback cb) {
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(() -&amp;gt; {
                  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(;;)
                      cb.&lt;span class=&quot;fu&quot;&gt;got&lt;/span&gt;(sync.&lt;span class=&quot;fu&quot;&gt;pull&lt;/span&gt;());
              }).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，用您最喜欢的编程语言实现相反的功能，即将 &lt;code&gt;Async&lt;/code&gt; 转换为 &lt;code&gt;Sync&lt;/code&gt; 。这将更加棘手，总是需要引入一些中间数据存储，如队列或缓冲区。当然，你需要考虑到 &lt;code&gt;Callback.got&lt;/code&gt; 可以在任何线程上调用，所以你需要考虑与该数据结构的并发性。因此，从&lt;code&gt;Async&lt;/code&gt; 到 &lt;code&gt;Sync&lt;/code&gt; 的转换不仅不那么简单，而且引入了不必要的数据存储：如果真没有引入多余的数据存储，是因为它可能已经内置到系统中（例如以IO缓冲区的形式）。所以 &lt;code&gt;Async&lt;/code&gt; 使用 &lt;code&gt;Sync&lt;/code&gt; 简单的实现，但是相反的转换既浪费又浪费时间，并且需要管理并发。但这对限制或管理副作用的语言（如 Clojure 或 Haskell ）来说不是什么问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/puniverse/comsat&quot;&gt;Comsat&lt;/a&gt; 项目将标准（和非标准但良好的）JavaWeb 相关 API 与 &lt;a href=&quot;https://github.com/puniverse/quasar&quot;&gt;Quasar fibers&lt;/a&gt;（轻量级线程）集成在一起。Comsat 的下一个版本将支持本文讨论的工具（可能有 jOOQ 和 Retrofit / Feign例外），这样你就可以编写相同简单的阻塞代码，但可以获得异步代码的性能和可伸缩性优势。在未来的博客文章中，我们将展示 Comsat 如何不破坏你的代码，同时让您的应用程序具更好的可伸缩性。&lt;/p&gt;
&lt;h2 id=&quot;高级主题使用web-actor与web服务交互&quot;&gt;高级主题：使用Web Actor与Web服务交互&lt;/h2&gt;
&lt;p&gt;虽然通常你应该坚持使用标准的服务器 API，但有时候替代方案会带来显着的优势。这里没有涉及的主题之一是使用 WebSocket 或 &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/eventsource/basics/&quot;&gt;SSE&lt;/a&gt; 等技术的交互式 Web 服务。虽然 Java 的标准 API 支持两者，但是特别是使用 WebSocket 可能会导致复杂的并发问题，因为标准 Java WebSocket API（ &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=356&quot;&gt;JSR-356&lt;/a&gt; ）是异步的。这意味着 WebSocket 消息可能会同时到达服务器端，比如来自同一用户的 HTTP 请求。这样的化，异步 API 要管理可变的共享状态，这种情状很糟糕。 Comsat 提供了一种称为 &lt;a href=&quot;http://blog.paralleluniverse.co/2014/01/28/web-actors-1/&quot;&gt;Web Actors&lt;/a&gt; 的 API，它能为每一个用户对话分配一个 actor，它意味着接收同步化，使得状态管理更容易。要了解有关Web Actors的更多信息，请阅读&lt;a href=&quot;http://blog.paralleluniverse.co/2014/01/28/web-actors-1/&quot;&gt;介绍性博客文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;这篇就结束了“现代 Java 开发的意见指南”（尽管我可能会发布一个回应反馈的文章）。我希望你喜欢阅读它，就像我喜欢写它一样。我希望我能够传达出 Java 生态系统不仅是巨大的，而且还充满活力和与时俱进：用 Lambdas 和流代替冗长的数据操作代码; Markdown 取代 HTML;fiber，channel 和 actor 取代锁和回调；简单的嵌入式服务器取代了重量级，笨重的应用服务器。在所有这些功能下面，是强大，灵活的 JVM，它强调性能和监控，它能支持运行时代码注入和替换。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://blog.paralleluniverse.co/2014/05/15/modern-java-pt3/&quot;&gt;An Opinionated Guide to Modern Java, Part 3: Web Development&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;水平有限，如果看不懂请直接看英文版。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 15:36:00 +0000</pubDate>
<dc:creator>htoooth</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/htoooth/p/8735611.html</dc:identifier>
</item>
<item>
<title>Javascript 装饰器极速指南 - 玄魂</title>
<link>http://www.cnblogs.com/xuanhun/p/8735524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuanhun/p/8735524.html</guid>
<description>&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1024&quot; data-height=&quot;512&quot;&gt;&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407230905747-1859937121.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;pablo.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Decorators 是ES7中添加的JavaScript新特性。熟悉Typescript的同学应该更早的接触到这个特性，TypeScript早些时候已经支持Decorators的使用，而且提供了ES5的支持。本文会对Decorators做详细的讲解，相信你会体验到它给编程带来便利和优雅。&lt;/p&gt;
&lt;p&gt;我在专职做前端开发之前， 是一名专业的.NET程序员，对.NET中的“特性”使用非常熟悉。在类、方法或者属性上写上一个中括号，中括号里面初始化一个特性，就会对类，方法或者属性的行为产生影响。这在AOP编程，以及ORM框架中特别有用，就像魔法一样。 但是当时JavaScript并没有这样的特性。在TypeScript中第一次使用Decorators，是因为我们要对整个应用程序的上下文信息做序列化处理，需要一种简单的方法，在原来的领域模型上打上一个标签来标识是否会序列化或者序列化的行为控制，这种场景下Decorators发挥了它的威力。 后来我们需要重构我们的状态管理，在可变的类定义和不可变对象的应用间进行转换，如果使用Decorators，不论从编的便利性还是解耦的角度都产生了令人惊喜的效果。 一直想把Decorators的相关使用整理出一个通俗的文档，使用最简单的方式来阐述这一话题，一直没有下笔。无意间在网络上发现了一篇文章（&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fcabbageapps.com%2Ffell-love-js-decorators%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://cabbageapps.com/fell-love-js-decorators/&lt;/a&gt;） ， 这篇文章的行文和我要表达的内容正好相符，于是拿过来做重新编辑和改编。喜欢看英文的同学可以点击链接阅读原文。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;500&quot; data-height=&quot;300&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407230941594-1338189983.gif&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;giphy.gif&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;1.0 装饰器模式&lt;/h2&gt;
&lt;p&gt;如果我们在搜索引擎中直接搜索“decorators”或者“装饰器”，和编程相关的结果中，会看到设计模式中的装饰器模式的介绍。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;400&quot; data-height=&quot;317&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407230951726-1257906267.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;3.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;更直观的例子如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;678&quot; data-height=&quot;682&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231005802-2032895206.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;4.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;上图中WeaponAccessory就是一个装饰器，他们添加额外的方法和熟悉到基类上。如果你看不明白没关系，跟随我一步步地实现你自己的装饰器，自然就会明白了。下面这张图，可以帮你直观的理解装饰器。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;480&quot; data-height=&quot;208&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231020775-931115904.gif&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5.gif&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们简单的理解装饰器，可以认为它是一种包装，对对象，方法，熟悉的包装。当我们需要访问一个对象的时候，如果我们通过这个对象外围的包装去访问的话，被这个包装附加的行为就会被触发。例如 一把加了消声器的枪。消声器就是一个装饰，但是它和原来的枪成为一个整体，开枪的时候消声器就会发生作用。&lt;/p&gt;
&lt;p&gt;从面向对象的角度很好理解这个概念。那么我们如何在JavaScript中使用装饰器呢？&lt;/p&gt;
&lt;h2&gt;1.1 开始 Decorators 之旅&lt;/h2&gt;
&lt;p&gt;Decorators 是ES7才支持的新特性，但是借助Babel 和 TypesScript，我们现在就可以使用它了， 本文以TypesScript为例。&lt;/p&gt;
&lt;p&gt;首先修改tsconfig.json文件，设置 experimentalDecorators 和 emitDecoratorMetadata为true。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;compilerOptions&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;target&quot;: &quot;es2015&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;module&quot;: &quot;commonjs&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;sourceMap&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;emitDecoratorMetadata&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;experimentalDecorators&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  },
  &lt;/span&gt;&quot;exclude&quot;&lt;span&gt;: [
    &lt;/span&gt;&quot;node_modules&quot;&lt;span&gt;,
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;848&quot; data-height=&quot;574&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231054773-1181501493.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;6.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们先从效果入手，然后再层层剖析。先看下面的一段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; leDecorator(target, propertyKey: string, descriptor: PropertyDescriptor): any {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oldValue =&lt;span&gt; descriptor.value;

    descriptor.value &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
      console.log(`Calling &lt;/span&gt;&quot;${propertyKey}&quot; &lt;span&gt;with&lt;/span&gt;&lt;span&gt;`, arguments,target);
      let value &lt;/span&gt;= oldValue.apply(&lt;span&gt;null&lt;/span&gt;, [arguments[1], arguments[0&lt;span&gt;]]);

      console.log(`Function is executed`);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; value + &quot;; This is awesome&quot;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; descriptor;
  }

  class JSMeetup {
    speaker &lt;/span&gt;= &quot;Ruban&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@leDecorator&lt;/span&gt;
&lt;span&gt;    welcome(arg1, arg2) {
      console.log(`Arguments Received are ${arg1} ${arg2}`);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; `${arg1} ${arg2}`;
    }
  }

  const meetup &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSMeetup();

  console.log(meetup.welcome(&lt;/span&gt;&quot;World&quot;, &quot;Hello&quot;));
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1156&quot; data-height=&quot;976&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231108751-1056772402.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;7.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;运行上面的代码，得到的结果如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231122513-663570118.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;8.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;下面我们修改代码，将第17行的注释放开。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1106&quot; data-height=&quot;326&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231136819-1944416747.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;9.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;再次运行代码，结果如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231144896-1355912535.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;10.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;注意上图中左侧的输出结果，和右侧显示的代码行号。我们现在可以肯定的是，加上了 @leDecorator 标签之后，函数welcome的行为发生了改变，触发改变的地方是leDecorator函数。 根据我们上面对装饰器的基本理解，我们可以认为leDecorator是welcome的装饰器。&lt;br/&gt;&amp;lt;b&amp;gt;装饰器和被装饰者之间通过 @ 符进行连接&amp;lt;/b&amp;gt;。&lt;/p&gt;
&lt;p&gt;在JavaScript层面我们已经感性的认识了装饰器，我们的代码装饰的是一个函数。在JavaScript中，一共有4类装饰器：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Method Decorator 函数装饰器&lt;/li&gt;
&lt;li&gt;Property Decorators 熟悉装饰器&lt;/li&gt;
&lt;li&gt;Class Decorator 类装饰器&lt;/li&gt;
&lt;li&gt;Parameter Decorator 参数装饰器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们逐一进行攻破！Come on！&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;430&quot; data-height=&quot;286&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231204250-666180455.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;11.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;1.2 函数装饰器&lt;/h2&gt;
&lt;p&gt;第一个要被攻破的装饰器是函数装饰器，这一节是本文的核心内容，我们将通过对函数装饰器的讲解来洞察JavaScript Decorators的本质。&lt;/p&gt;
&lt;p&gt;通过使用 函数装饰器，我们可以控制函数的输入和输出。&lt;/p&gt;
&lt;p&gt;下面是函数装饰器的定义：&lt;/p&gt;
&lt;pre class=&quot;hljs javascript&quot;&gt;
&lt;code class=&quot;javascript&quot;&gt;MethodDecorator = &amp;lt;T&amp;gt;(target: Object, key: string, descriptor: TypedPropertyDescriptor&amp;lt;T&amp;gt;) =&amp;gt; TypedPropertyDescriptor&amp;lt;T&amp;gt; | Void;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只要遵循上面的定义，我们就可以自定义一个函数装饰器，三个参数的含义如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;target -&amp;gt; 被装饰的对象&lt;/li&gt;
&lt;li&gt;key -&amp;gt; 被装饰的函数名&lt;/li&gt;
&lt;li&gt;descriptor -&amp;gt; 被传递过来的属性的属性描述符. 可以通过 Object.getOwnPropertyDescriptor()方法来查看属性描述符。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;2.9347826086957&quot;&gt;
&lt;p&gt;关于属性描述符更详细内容 可以参考 &lt;a href=&quot;https://www.jianshu.com/p/19529527df80&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/19529527df80&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来讲，属性描述符可以用来配置一个对象的某个属性的返回值，get/set 行为，是否可以被删除，是否可以被修改，是否可以被枚举等特性。为了你能顺畅的理解装饰器，我们下面看一个直观一点的例子。&lt;/p&gt;
&lt;p&gt;打开浏览器控制台，输入如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;&lt;span&gt; o, d;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; o = { get foo() { &lt;span&gt;return&lt;/span&gt; 17; }, bar:17, foobar:&lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;return&lt;/span&gt; &quot;FooBar&quot;&lt;span&gt;} };

d &lt;/span&gt;= Object.getOwnPropertyDescriptor(o, 'foo'&lt;span&gt;);
console.log(d);
d &lt;/span&gt;= Object.getOwnPropertyDescriptor(o, 'bar'&lt;span&gt;);
console.log(d);
d &lt;/span&gt;= Object.getOwnPropertyDescriptor(o, 'foobar'&lt;span&gt;);
console.log(d);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1328&quot; data-height=&quot;980&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231215112-1800927530.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;12.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里我们定义了一个对象o,定义了三个属性——foo，bar和foobar，之后通过Object.getOwnPropertyDescriptor()获取每个属性的描述符并打印出来。下面我们对value , enumerable , configurable 和 writable 做简要的说明。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;value – &amp;gt;字面值或者函数/属性计算后的返回值。&lt;/li&gt;
&lt;li&gt;enumerable -&amp;gt; 是否可以被枚举 (是否可以在 (for x in obj)循环中被枚举出来)&lt;/li&gt;
&lt;li&gt;configurable – &amp;gt;属性是否可以被配置&lt;/li&gt;
&lt;li&gt;writable -&amp;gt; 属性是否是可写的.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个属性或者方法都有自己的一个描述符，通过描述符我们可以修改属性的行为或者返回值。下面关键来了：&lt;/p&gt;
&lt;p&gt;&amp;lt;b&amp;gt;装饰器的本质就是修改描述符&amp;lt;/b&amp;gt;&lt;/p&gt;
&lt;p&gt;是时候动手写一个装饰器了。&lt;/p&gt;
&lt;h3&gt;1.2.1 方法装饰器实例&lt;/h3&gt;
&lt;p&gt;下面我们通过方法装饰器来修改一个函数的输入和输出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; leDecorator(target, propertyKey: string, descriptor: PropertyDescriptor): any {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oldValue =&lt;span&gt; descriptor.value;

    descriptor.value &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
      console.log(`Calling &lt;/span&gt;&quot;${propertyKey}&quot; &lt;span&gt;with&lt;/span&gt;&lt;span&gt;`, arguments,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Executing the original function interchanging the arguments&lt;/span&gt;
      let value = oldValue.apply(&lt;span&gt;null&lt;/span&gt;, [arguments[1], arguments[0&lt;span&gt;]]);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;returning a modified value&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; value + &quot;; This is awesome&quot;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; descriptor;
  }

  class JSMeetup {
    speaker &lt;/span&gt;= &quot;Ruban&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@leDecorator&lt;/span&gt;
&lt;span&gt;    welcome(arg1, arg2) {
      console.log(`Arguments Received are ${arg1}, ${arg2}`);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; `${arg1} ${arg2}`;
    }
  }

  const meetup &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSMeetup();

  console.log(meetup.welcome(&lt;/span&gt;&quot;World&quot;, &quot;Hello&quot;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在不使用装饰器的时候，输出值为：&lt;/p&gt;
&lt;pre class=&quot;hljs undefined&quot;&gt;
&lt;code&gt;Arguments Received are World, Hello
World Hello
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启用装饰器后，输出值为：&lt;/p&gt;
&lt;pre class=&quot;hljs python&quot;&gt;
&lt;code class=&quot;python&quot;&gt;Calling &lt;span class=&quot;hljs-string&quot;&gt;&quot;welcome&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;with { &lt;span class=&quot;hljs-string&quot;&gt;'0': &lt;span class=&quot;hljs-string&quot;&gt;'World', &lt;span class=&quot;hljs-string&quot;&gt;'1': &lt;span class=&quot;hljs-string&quot;&gt;'Hello' } JSMeetup {}
Arguments Received are Hello, World
Hello World; This &lt;span class=&quot;hljs-keyword&quot;&gt;is awesome
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到，方法输出值发成了变化。现在去看我们定义的方法装饰器，通过参数，leDecorator在执行时获取了调用对象的名称，被装饰方法的参数，被装饰方法的描述符。 首先通过oldValue变量保存了方法描述符的原值，即我们定义的welcome方法。接下来对descriptor.value进行了重新赋值。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1076&quot; data-height=&quot;250&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231235968-1146809544.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;13.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在新的函数中首先调用了原函数，获得了返回值，然后修改了返回值。 最后return descriptor，新的descriptor会被应用到welcome方法上，此时整合函数体已经被替换了。&lt;/p&gt;
&lt;p&gt;通过使用装饰器，我们实现了对原函数的包装，可以修改方法的输入和输出，这意味着我们可以应用各种想要的魔法效果到目标方法上。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;275&quot; data-height=&quot;252&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231244995-5735391.gif&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;14.gif&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里有几点需要注意的地方：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;装饰器在class被声明的时候被执行，而不是class实例化的时候。&lt;/li&gt;
&lt;li&gt;方法装饰器返回一个值&lt;/li&gt;
&lt;li&gt;存储原有的描述符并且返回一个新的描述符是我们推荐的做法. 这在多描述符应用的场景下非常有用。&lt;/li&gt;
&lt;li&gt;设置描述符的value的时候，不要使用箭头函数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在我们完成并理解了第一个方法装饰器。下面我们来学校属性装饰器。&lt;/p&gt;
&lt;h2&gt;1.3 属性装饰器&lt;/h2&gt;
&lt;p&gt;属性装饰器和方法装饰器很类似，通过属性装饰器，我们可以用来重新定义getters、setters，修改enumerable, configurable等属性。&lt;/p&gt;
&lt;p&gt;属性装饰器定义如下：&lt;/p&gt;
&lt;pre class=&quot;hljs javascript&quot;&gt;
&lt;code class=&quot;javascript&quot;&gt;PropertyDecorator = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target: &lt;span class=&quot;hljs-built_in&quot;&gt;Object, key: string) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;target：属性拥有者&lt;/li&gt;
&lt;li&gt;key：属性名&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在具体使用属性装饰器之前，我们先来简单了解下Object.defineProperty方法。Object.defineProperty方法通常用来动态给一个对象添加或者修改属性。下面是一段示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; o = { get foo() { &lt;span&gt;return&lt;/span&gt; 17; }, bar:17, foobar:&lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;return&lt;/span&gt; &quot;FooBar&quot;&lt;span&gt;} };

Object.defineProperty(o, &lt;/span&gt;'myProperty'&lt;span&gt;, {
get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;['myProperty'&lt;span&gt;];
},
set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (val) {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;['myProperty'] =&lt;span&gt; val;
},
enumerable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
configurable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1228&quot; data-height=&quot;428&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231305408-682444895.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;16.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在调试控制台测试上面的代码。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1346&quot; data-height=&quot;730&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231313414-1799804885.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;15.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;从结果中，我们看到，利用Object.defineProperty，我们动态添给对象添加了属性。下面我们基于Object.defineProperty来实现一个简单的属性装饰器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; realName(target, key: string): any {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; property value&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; _val =&lt;span&gt; target[key];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; property getter&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; getter = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Ragularuban(&quot; + _val + &quot;)&quot;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; property setter&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; setter = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (newVal) {
      _val &lt;/span&gt;=&lt;span&gt; newVal;
    };

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create new property with getter and setter&lt;/span&gt;
&lt;span&gt;    Object.defineProperty(target, key, {
      get: getter,
      set: setter
    });
  }

  class JSMeetup {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@realName&lt;/span&gt;
    public myName = &quot;Ruban&quot;&lt;span&gt;;
    constructor() {
    }
    greet() {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hi, I'm &quot; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.myName;
    }
  }

  const meetup &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSMeetup();
  console.log(meetup.greet());
  meetup.myName &lt;/span&gt;= &quot;Ragul&quot;&lt;span&gt;;
  console.log(meetup.greet());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1098&quot; data-height=&quot;1276&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231334804-1117882802.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;17.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在不适用装饰器时，输出结果为：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;Hi, I&lt;span class=&quot;hljs-string&quot;&gt;'m Ruban
Hi, I'm Ragul
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启用装饰器之后，结果为：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;Hi, I&lt;span class=&quot;hljs-string&quot;&gt;'m Ragularuban(Ruban)
Hi, I'm Ragularuban(Ragul)
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是不是很简单呢？ 接下来是Class装饰器。&lt;/p&gt;
&lt;h2&gt;1.4 Class 装饰器&lt;/h2&gt;
&lt;p&gt;Class装饰器是通过操作Class的构造函数，来实现对Class的相关属性和方法的动态添加和修改。&lt;br/&gt;下面是Class装饰器的定义：&lt;/p&gt;
&lt;pre class=&quot;hljs javascript&quot;&gt;
&lt;code class=&quot;javascript&quot;&gt;ClassDecorator = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TFunction &lt;span class=&quot;hljs-attr&quot;&gt;extends &lt;span class=&quot;hljs-attr&quot;&gt;Function&amp;gt;(target: TFunction) =&amp;gt; TFunction;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ClassDecorator只接收一个参数，就是Class的构造函数。下面的示例代码，修改了类原有的属性speaker，并动态添加了一个属性extra。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; AwesomeMeetup&amp;lt;T extends { &lt;span&gt;new&lt;/span&gt; (...args: any[]): {} }&amp;gt;&lt;span&gt;(constructor: T) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; class extends constructor implements extra {
      speaker: string &lt;/span&gt;= &quot;Ragularuban&quot;&lt;span&gt;;
      extra &lt;/span&gt;= &quot;Tadah!&quot;&lt;span&gt;;
    }
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@AwesomeMeetup&lt;/span&gt;
&lt;span&gt;  class JSMeetup {
    public speaker &lt;/span&gt;= &quot;Ruban&quot;&lt;span&gt;;
    constructor() {
    }
    greet() {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hi, I'm &quot; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.speaker;
    }
  }

  interface extra {
    extra: string;
  }

  const meetup &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; JSMeetup() as JSMeetup &amp;amp;&lt;span&gt; extra;
  console.log(meetup.greet());
  console.log(meetup.extra);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在不启用装饰器的情况下输出值为：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231351157-733665056.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;18.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在启用装饰器的情况下，输出结果为：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;888&quot; data-height=&quot;128&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231359643-1219199202.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;19.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里需要注意的是，&amp;lt;b&amp;gt;构造函数只会被调用一次&amp;lt;/b&amp;gt;。&lt;/p&gt;
&lt;p&gt;下面我来学习最后一种装饰器，参数装饰器。&lt;/p&gt;
&lt;h2&gt;1.5 参数装饰器&lt;/h2&gt;
&lt;p&gt;如果通过上面讲过的装饰器来推论参数装饰器的作用，可能会是修改参数，但事实上并非如此。参数装饰器往往用来对特殊的参数进行标记，然后在方法装饰器中读取对应的标记，执行进一步的操作。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; logParameter(target: any, key: string, index: number) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; metadataKey =&lt;span&gt; `myMetaData`;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Array.isArray(target[metadataKey])) {
      target[metadataKey].push(index);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      target[metadataKey] &lt;/span&gt;=&lt;span&gt; [index];
    }
  }

  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; logMethod(target, key: string, descriptor: any): any {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; originalMethod =&lt;span&gt; descriptor.value;
    descriptor.value &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (...args: any[]) {

      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; metadataKey =&lt;span&gt; `myMetaData`;
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; indices =&lt;span&gt; target[metadataKey];
      console.log(&lt;/span&gt;'indices'&lt;span&gt;, indices);
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; args.length; i++&lt;span&gt;) {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (indices.indexOf(i) !== -1&lt;span&gt;) {
          console.log(&lt;/span&gt;&quot;Found a marked parameter at index&quot; +&lt;span&gt; i);
          args[i] &lt;/span&gt;= &quot;Abrakadabra&quot;&lt;span&gt;;
        }
      }
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = originalMethod.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, args);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;

    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; descriptor;
  }

  class JSMeetup {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@logMethod&lt;/span&gt;
&lt;span&gt;    public saySomething(something: string, @logParameter somethingElse: string): string {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; something + &quot; : &quot; +&lt;span&gt; somethingElse;
    }
  }

  let meetup &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSMeetup();

  console.log(meetup.saySomething(&lt;/span&gt;&quot;something&quot;, &quot;Something Else&quot;));
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1362&quot; data-height=&quot;1378&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231414168-549805305.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;20.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;上面的代码中，我们定义了一个参数装饰器，该装饰器将被装饰的参数放到一个指定的数组中。在方法装饰器中，查找被标记的参数，做进一步的处理&lt;br/&gt;不启用装饰器的情况下，输出结果如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-container-fill&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231429457-1080919901.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;21.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;启用装饰器的情况下，输出结果如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;888&quot; data-height=&quot;206&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42533/201804/42533-20180407231437979-550632067.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;22.png&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;1.6 小结&lt;/h2&gt;
&lt;p&gt;现在我们已经学习了所有装饰器的使用，下面总结一下关键用法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方法装饰器的核心是 方法描述符&lt;/li&gt;
&lt;li&gt;属性装饰器的核心是 Object.defineProperty&lt;/li&gt;
&lt;li&gt;Class装饰器的核心是 构造函数&lt;/li&gt;
&lt;li&gt;参数装饰器的主要作用是标记，要结合方法装饰器来使用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是参考文章：&lt;br/&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fwww.typescriptlang.org%2Fdocs%2Fhandbook%2Fdecorators.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://www.typescriptlang.org/docs/handbook/decorators.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2FMicrosoft%2FTypeScript-Handbook%2Fblob%2Fmaster%2Fpages%2FDecorators.md&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fsurvivejs.com%2Freact%2Fappendices%2Funderstanding-decorators%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://survivejs.com/react/appendices/understanding-decorators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fmedium.com%2Fgoogle-developers%2Fexploring-es7-decorators-76ecb65fb841&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fblog.wolksoftware.com%2Fdecorators-metadata-reflection-in-typescript-from-novice-to-expert-part-ii&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-ii&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Farolson101%2Ftypescript-decorators&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/arolson101/typescript-decorators&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;更多精彩内容，欢迎关注玄魂工作室微信订阅号。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;598&quot; data-height=&quot;598&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2634264-58029500da0102d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/598&quot; alt=&quot;&quot; width=&quot;249&quot; height=&quot;249&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/2634264-58029500da0102d0.png&quot; data-original-width=&quot;598&quot; data-original-height=&quot;598&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;222547&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;24.png&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Apr 2018 15:15:00 +0000</pubDate>
<dc:creator>玄魂</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuanhun/p/8735524.html</dc:identifier>
</item>
<item>
<title>激光雷达移动状态下的数据矫正 - wen_hust</title>
<link>http://www.cnblogs.com/wenhust/p/8735390.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenhust/p/8735390.html</guid>
<description>&lt;p&gt;个人能力有限，若有错误请批评指正！&lt;/p&gt;
&lt;p&gt;转载请标明出处：http://www.cnblogs.com/wenhust/&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;激光雷达可以获得环境点云数据，机器人利用其产生的点云数据与LiDAR-based SLAM算法实现对环境的感知，因此基于激光雷达的移动机器人的环境感知准确度重要依赖于激光雷达提供点云的准确度。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;一、简介&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在过去，激光雷达大多应用于研究型机器人，具有扫描频率高、采样点密集的特点。与此同时，使用激光雷达的机器人移动速度较慢，因此研究人员往往对激光雷达在一个扫描周期内因移动造成的数据准确度丢失选择了忽略。目前，随着消费类机器人需求的增长，激光雷达正朝着低成本方向发展。低成本激光雷达的扫描频率低、采样点稀疏，然而移动机器人的移动速度要求却在逐渐变高，由此激光雷达在移动状态下的测量点云准确度开始变得重要。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;二、问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;图1展示的是一个激光雷达的常见应用，机器人通过装载固定在机器人上的激光雷达从而实现对环境的感知。激光雷达通常分成固定部分和旋转部分，固定部分是用于固定在机器人或其他移动平台上；旋转部分则是利用旋转测量单元从而实现光路对环境的360°扫描，以获得整个平面环境的点云数据。在这个应用下，激光雷达是感知环境的重要传感器，由其获得的点云数据将通过SLAM算法构建起平面的栅格地图——机器人路径导航规划及避障等功能实现的基础，或者利用点云数据与已有地图信息进行匹配从而实现定位等功能，那么点云数据的准确度将直接影响到其被依赖功能的实现效果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407220325145-69142534.png&quot; alt=&quot;&quot; width=&quot;376&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图1. 激光雷达应用示意图&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;激光雷达的工作方式是通过旋转可旋转部分将光路扫描到整个平面环境，在一定时间间隔下测量到被测物体的距离，从而获得整圈的测量点云数据，待整圈数据准备完毕后加时间戳提供给机器人进行运算。在这里我们举例两个对激光雷达准确度影响较大的极端情况，其一是当激光雷达可旋转部分的旋转角速度与机器人旋转角速度大小一致且方向相反时，我们可以预见激光雷达本身并没有意识到其所测量平面的点云数据其实只是恒为同一点的多次测量，如图2中情况一所示；其二是当机器人向着与其前进方向相垂直的一面墙边走边扫描，在扫描墙体的过程中机器人迅速从距墙体较远处移动到墙体附近，观察在一个扫描周期内的点云数据，我们可以预见前进方向相垂直的那面墙所形成的点云将不再与前进方向所垂直，如图2中情况二所示，与此同时其他墙面也不尽如实际的那样，只是其变形比与前进方向相垂直墙面更小。以上两种情况均随机器人角速度与速度大小变大而愈发明显。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407220409339-86387803.png&quot; alt=&quot;&quot; width=&quot;413&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图2. 极端情况测量示意图&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;从这两个例子我们可以得到，当激光雷达固定部分相对于被测物体处于静止的情况下，仅有激光雷达旋转部分的旋转运动而无其他相对运动时，其给出的平面扫描点云数据接近于真实情况，误差仅为激光雷达本身测量误差。而当激光雷达处于移动状态下时，其扫描周期内的扫描运动将不仅仅包含激光雷达旋转部分的旋转运动，还有其相对被测物体因其固定的机器人所产生的平移及旋转运动。我们要做的正是将激光雷达移动状态下这些运动考虑其中，矫正激光雷达在一个扫描周期内的点云数据，使其扫描平面的点云数据更为准确地反映真实情况，从而提高激光雷达点云数据的准确度。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;三、数学推导&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;使用笛卡尔坐标系来表示一个物体在环境中的位置和方向在机器人研究领域是一个基础方法。这里假设机器人与激光雷达各部分均为刚体，此处只考虑平面情况。无论是单线激光雷达或多线激光雷达均采集与地面平行平面数据，不考虑Z轴数据，因此可将三维坐标系简化为二维坐标系，所有数据沿Z轴投影到OXY平面进行计算。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这里将世界坐标系定义为W坐标系，机器人坐标系定义为R坐标系，激光雷达固定在机器人上，其坐标系定义为L坐标系，经过t时间后的机器人坐标系定义为R`坐标系，经过 时间后激光雷达坐标系定义为L`坐标系；P1、P2均为世界坐标系下的观测点，其中P1为计时起点时观察的目标点，P2为经过t时间后所观察的目标点。那么各坐标系间的相对位置关系如图3所示：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407220859874-260107327.png&quot; alt=&quot;&quot; width=&quot;483&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图3. 坐标系相对位置关系图&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;由坐标系转换关系有：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407222817177-2125520366.png&quot; alt=&quot;&quot; width=&quot;274&quot; height=&quot;52&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;其中，各符号代表&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223136641-1917595447.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;138&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由上述关系可得&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223248053-1667624446.png&quot; alt=&quot;&quot; width=&quot;427&quot; height=&quot;208&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;即有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223431376-777010214.png&quot; alt=&quot;&quot; width=&quot;222&quot; height=&quot;38&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223529534-1126817212.png&quot; alt=&quot;&quot; width=&quot;56&quot; height=&quot;38&quot;/&gt;为激光雷达获取到的 观测数据，故&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223554029-75401423.png&quot; alt=&quot;&quot; width=&quot;188&quot; height=&quot;69&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;因此以时间戳为基准的t时间后，点P2的测量矫正值为 ：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223657662-1527938196.png&quot; alt=&quot;&quot; width=&quot;307&quot; height=&quot;174&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;将激光雷达一帧中所有测量数据按照此换算到时间戳所表示时刻的坐标系下，即完成了该帧数据的矫正。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;四、仿真&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1035240/201804/1035240-20180407223828401-1181754423.png&quot; alt=&quot;&quot; width=&quot;683&quot; height=&quot;544&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、结论&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;从仿真结果可以看到，扫描频率和机器人移动速度是影响测量点云准确度的重要因素。扫描频率较低的激光雷达在其一帧扫描过程中于同等移动状态下的位姿变化更大，其点云准确度更差；移动速度越快对点云准确度的影响越大，与此同时，旋转运动较平移运动对点云准确度影响更大。从矫正结果看来，矫正算法虽然在一定程度上改变了点云的疏密分布，但更为准确反映真实环境。&lt;/p&gt;

&lt;p&gt;更多细节：Bai W, Li G, Han L. Correction Algorithm of LIDAR Data for Mobile Robots[C]// International Conference on Intelligent Robotics and Applications. Springer, Cham, 2017:101-110.&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 14:48:00 +0000</pubDate>
<dc:creator>wen_hust</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenhust/p/8735390.html</dc:identifier>
</item>
<item>
<title>扩展Microsoft Graph数据结构 - 架构扩展 - 陈希章</title>
<link>http://www.cnblogs.com/chenxizhang/p/8735354.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenxizhang/p/8735354.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;此前我有一篇 &lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/graphextensions.md&quot;&gt;文章&lt;/a&gt; 讲解了Microsoft Graph的一种数据扩展技术—— 开发扩展(Open Extensions)，它可以实现在支持的对象（例如用户，组等）上面附加任意的数据。但开放扩展的问题在于，它是基于某个具体对象的，你无法确定两个对象是否具有同样的扩展（即便属性名一样，但也可能其包含的数据完全不同）。如果我们需要对一类对象进行统一的扩展，例如给组（Group）这个类型添加几个特殊的属性，此时就可以用到&lt;code&gt;架构扩展&lt;/code&gt;这个非常强大的技术。&lt;/p&gt;
&lt;p&gt;关于架构扩展，官方的文档请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/concepts/extensibility_schema_groups&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/concepts/extensibility_schema_groups&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;支持的类型&lt;/h2&gt;
&lt;p&gt;目前支持进行架构扩展的Microsoft Graph类型有如下几个&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;contact&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;device&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;event on a user or Office 365 group calendar&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;post of an Office 365 group&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;group&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;message&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;organization&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;user&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;权限要求&lt;/h2&gt;
&lt;p&gt;要注册架构扩展，必须使用Office 365的企业或学校账号管理员身份，而且必须申请 Directory.AccessAsUser.All 这个权限（仅支持委派权限）。目前不支持在Microsoft Graph Explorer中进行操作，所以本文为了演示方便，已经注册了一个Azure AD 应用程序，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-21-48-59.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-21-48-59.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时，由于Directory.AccessAsUser.All 这个权限是管理员权限，所以还必须执行“管理员确认（admin consent）”的过程，这个倒也不难，你可以在浏览器中访问如下的地址即可&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://login.microsoftonline.com/common/adminconsent?client_id&quot; class=&quot;uri&quot;&gt;https://login.microsoftonline.com/common/adminconsent?client_id&lt;/a&gt;=&lt;code&gt;87b53490-05d4-4bed-8335-b50ed8b56130&lt;/code&gt;&amp;amp;state=&lt;code&gt;12345&lt;/code&gt;&amp;amp;redirect_uri=&lt;code&gt;http://localhost&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;注册架构扩展&lt;/h2&gt;
&lt;p&gt;注册架构扩展的命令其实很简单，如果你用REST API的话，参考下面的范例执行即可&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-21-54-38.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-21-54-38.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里的关键属性是id。目前支持两种定义id的方式，如果你的Office 365 租户中注册了自定义域名（例如 contoso.com），那么你可以用 &lt;code&gt;域名_扩展名&lt;/code&gt; 这样的格式来定义id（上图的例子就是这样的），如果你没有自定义域名，你可以直接用 &lt;code&gt;扩展名&lt;/code&gt; 这样的格式，例如 &lt;code&gt;myextension&lt;/code&gt;。但为了进行区分，在你保存的时候，系统会自动地加上一个随机的前缀，它的格式是&lt;code&gt;ext+八位随机字符_扩展名&lt;/code&gt;，例如&lt;code&gt;extsjar451r_myextension&lt;/code&gt;。所以，前者要求略高一些，但对于后期使用更加方便一些；而后者因为id是随机产生的，所以在使用过程会复杂一些。你可以根据自己的实际情况选择。&lt;/p&gt;
&lt;p&gt;下图是我在Postman中注册一个新的架构扩展的效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-20-55.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-20-55.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用架构扩展数据&lt;/h2&gt;
&lt;p&gt;我们已经拥有了一个新的架构扩展，接下来如何使用它呢？我同样用Postman来演示创建一个新的Group对象，请注意，我除了提供标准的属性外，还按照架构扩展的属性定义提供了额外的信息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-26-30.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-26-30.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能会发现，返回的结果中并没有显示出来我们添加的扩展属性。如果需要查询这些额外的属性，你需要使用select关键字来指定返回值，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-29-31.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-29-31.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;这一篇文章通过一个实例演示了使用&lt;code&gt;架构扩展&lt;/code&gt;的技术为Microsoft Graph 的数据结构进行扩展，它跟&lt;code&gt;开放扩展&lt;/code&gt;不同的地方在于，它可以为一类对象统一进行扩展，而不是针对单个对象，灵活地搭配使用这两种技术，可以让你充分利用Microsoft Graph，并且为其注入更多的数据，为后续的集成提供更多的可能性。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 14:40:00 +0000</pubDate>
<dc:creator>陈希章</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenxizhang/p/8735354.html</dc:identifier>
</item>
<item>
<title>CSS选择器详解 - laixiangran</title>
<link>http://www.cnblogs.com/laixiangran/p/8735202.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laixiangran/p/8735202.html</guid>
<description>&lt;h2 id=&quot;元素选择器&quot;&gt;元素选择器&lt;/h2&gt;
&lt;h3 id=&quot;通配选择器&quot;&gt;通配选择器&lt;/h3&gt;
&lt;h4 id=&quot;srules&quot;&gt;* { sRules }&lt;/h4&gt;
&lt;p&gt;选定文档所有的元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置所有元素为红色 **/&lt;/span&gt;
* &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;类型选择器&quot;&gt;类型选择器&lt;/h3&gt;
&lt;h4 id=&quot;e-srules&quot;&gt;E { sRules }&lt;/h4&gt;
&lt;p&gt;选定指定的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置元素p为红色 **/&lt;/span&gt;
p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;类选择器&quot;&gt;类选择器&lt;/h3&gt;
&lt;h4 id=&quot;e.myclass-srules&quot;&gt;E.myclass { sRules }&lt;/h4&gt;
&lt;p&gt;选定 class 属性包含 myclass 的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 calss=&quot;myclass&quot; 的元素为红色 **/&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.myClass&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myclass&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;多类选择器&quot;&gt;多类选择器&lt;/h3&gt;
&lt;h4 id=&quot;e.myclass.myotherclass-srules&quot;&gt;E.myclass.myotherclass { sRules }&lt;/h4&gt;
&lt;p&gt;选定 class 属性包含 myclass 以及 myotherclass 的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 calss=&quot;myclass myotherclass&quot; 的元素为红色 **/&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.myClass.myotherclass&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myclass myotherclass&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;id选择器&quot;&gt;ID选择器&lt;/h3&gt;
&lt;h4 id=&quot;emyid-srules&quot;&gt;E#myid { sRules }&lt;/h4&gt;
&lt;p&gt;选定 id 属性值为 myid 的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 id=&quot;myid&quot; 的元素为红色 **/&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;#myid&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myid&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;属性选择器&quot;&gt;属性选择器&lt;/h2&gt;
&lt;h3 id=&quot;根据简单属性选择&quot;&gt;根据简单属性选择&lt;/h3&gt;
&lt;h4 id=&quot;eattr-srules&quot;&gt;E[attr] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置有属性 id 的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[id]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myid&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;根据具体属性值选择&quot;&gt;根据具体属性值选择&lt;/h3&gt;
&lt;h4 id=&quot;eattrval-srules&quot;&gt;E[attr=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值等于 val 的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置有属性 id 且值等于 &quot;myid&quot; 的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myid&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/** 多个属性-值 **/&lt;/span&gt;
input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;][class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text1&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myid&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text1&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;根据部分属性值选择&quot;&gt;根据部分属性值选择&lt;/h3&gt;
&lt;h4 id=&quot;eattrval-srules-1&quot;&gt;E[attr~=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值为用空格分隔的字词列表，其中有一个等于 val （包含只有一个值且该值等于 val 的情况）的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 class 属性有一个值为 div1 的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[class~=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; calss=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1 header&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;eattrval-srules-2&quot;&gt;E[attr^=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值以 val 开头的字符串的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 class 属性的值以 head 开头的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[class^=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; calss=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;headClass&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;eattrval-srules-3&quot;&gt;E[attr$=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值以 val 结尾的字符串的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 class 属性的值以 Class 结尾的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[class$=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Class&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; calss=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;headClass&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;eattrval-srules-4&quot;&gt;E[attr*=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值包含 val 的字符串的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 class 属性的值包含 Div 的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[class*=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Div&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; calss=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;headDivClass&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;eattrval-srules-5&quot;&gt;E[attr|=&quot;val&quot;] { sRules }&lt;/h4&gt;
&lt;p&gt;选定具有属性 attr 且属性值以 val 开头并用连接符 &quot;-&quot; 分隔的字符串（包含属性值只有 val 的情况）的文档元素 E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 设置 class 属性的值以 head 开头并用连接符 &quot;-&quot; 分隔的元素为红色 **/&lt;/span&gt;
div&lt;span class=&quot;ch&quot;&gt;[class|=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; calss=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;head-class&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;关系选择器&quot;&gt;关系选择器&lt;/h2&gt;
&lt;h3 id=&quot;后代选择器&quot;&gt;后代选择器&lt;/h3&gt;
&lt;h4 id=&quot;e-f-srules&quot;&gt;E F { sRules }&lt;/h4&gt;
&lt;p&gt;选定文档元素 E 所有的后代元素 F，包含所有子孙&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 设置 div 后代所有的 p 为红色 */&lt;/span&gt;
div p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;子代选择器&quot;&gt;子代选择器&lt;/h3&gt;
&lt;h4 id=&quot;ef-srules&quot;&gt;E&amp;gt;F { sRules }&lt;/h4&gt;
&lt;p&gt;选定文档元素 E 所有的子代元素 F，不包含孙代元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 设置 div 子代的 p 为红色，但孙代的 p 不为红色 */&lt;/span&gt;
div&amp;gt;p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;相邻选择器&quot;&gt;相邻选择器&lt;/h3&gt;
&lt;h4 id=&quot;ef-srules-1&quot;&gt;E+F { sRules }&lt;/h4&gt;
&lt;p&gt;选定文档元素 E 之后且同属一个父元素的相邻兄弟元素 F&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 设置 h1 相邻的 p 为红色，但第二个 p 不为红色 */&lt;/span&gt;
h1&amp;gt;p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;我是h1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;兄弟选择器&quot;&gt;兄弟选择器&lt;/h3&gt;
&lt;h4 id=&quot;ef-srules-css3&quot;&gt;E~F { sRules } &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;选定文档元素 E 之后且同属一个父元素的兄弟元素 F&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 设置 h1 之后所有的 p 为红色 */&lt;/span&gt;
h1&amp;gt;p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;我是h1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是段落2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;伪类选择器&quot;&gt;伪类选择器&lt;/h2&gt;
&lt;h3 id=&quot;link&quot;&gt;:link&lt;/h3&gt;
&lt;h4 id=&quot;alink-srules&quot;&gt;a:link { sRules }&lt;/h4&gt;
&lt;p&gt;设置超链接 a 未被访问前的样式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;a&lt;span class=&quot;dv&quot;&gt;:link&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://i.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;visited&quot;&gt;:visited&lt;/h3&gt;
&lt;h4 id=&quot;avisited-srules&quot;&gt;a:visited { sRules }&lt;/h4&gt;
&lt;p&gt;设置超链接 a 已经被访问后的样式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;a&lt;span class=&quot;dv&quot;&gt;:link&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://i.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;focus&quot;&gt;:focus&lt;/h3&gt;
&lt;h4 id=&quot;efocus-srules&quot;&gt;E:focus { sRules }&lt;/h4&gt;
&lt;p&gt;设置元素 E 在成为输入焦点（该元素的 onfocus 事件发生）时的样式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;a&lt;span class=&quot;dv&quot;&gt;:focus&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://i.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;hover&quot;&gt;:hover&lt;/h3&gt;
&lt;h4 id=&quot;ehover-srules&quot;&gt;E:hover { sRules }&lt;/h4&gt;
&lt;p&gt;设置元素E在鼠标悬停时的样式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;a&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://i.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;active&quot;&gt;:active&lt;/h3&gt;
&lt;h4 id=&quot;eactive-srules&quot;&gt;E:active { sRules }&lt;/h4&gt;
&lt;p&gt;设置元素E在被用户激活（在鼠标点击与释放之间发生的事件）时的样式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;a&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://i.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;以上五种伪类选择器同时用在a超链接时，各伪类需按特定的顺序书写才能生效，保证各浏览器具有相同的表现。正确的顺序为：&lt;strong&gt;link - visited - focus - hover - active&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;langlang&quot;&gt;:lang(lang)&lt;/h3&gt;
&lt;h4 id=&quot;elanglang-srules&quot;&gt;E:lang(lang) { sRules }&lt;/h4&gt;
&lt;p&gt;选定使用特殊语言的元素E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;p&lt;span class=&quot;dv&quot;&gt;:lang(zh-cn)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#f00&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
p&lt;span class=&quot;dv&quot;&gt;:lang(en)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#090&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zh-cn&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是中文&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;i am English&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nots-css3&quot;&gt;:not(s) &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;enots-srules&quot;&gt;E:not(s) { sRules }&lt;/h4&gt;
&lt;p&gt;匹配不含有s选择符的元素E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 除最后一个li之外，所有li加一条底边线 **/&lt;/span&gt;
li&lt;span class=&quot;dv&quot;&gt;:not&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;:last-child&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;root-css3&quot;&gt;:root &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;root-srules&quot;&gt;:root { sRules }&lt;/h4&gt;
&lt;p&gt;匹配当前文档的根元素。在HTML中，根元素永远是HTML&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** :root 相当于 html **/&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;first-child&quot;&gt;:first-child&lt;/h3&gt;
&lt;h4 id=&quot;efirst-child-srules&quot;&gt;E:first-child { sRules }&lt;/h4&gt;
&lt;p&gt;匹配父元素的第一个子元素 E。要使该属性生效，E 元素必须是某个元素的子元素，E 的父元素最高是 body，即 E 可以是 body 的子元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最重要的是：&lt;/strong&gt; E 必须是它的兄弟元素中的第一个元素，换言之，E 必须是父元素的第一个子元素。与之类似的伪类还有 E:last-child，只不过情况正好相反，需要它是最后一个子元素。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 给第一个 li 加一条底边线 **/&lt;/span&gt;
li&lt;span class=&quot;dv&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/** 本意是想设置第一个 p 元素为红色，但这里无效，因为 p 不是 div 的第一个子元素（第一个子元素是 h2 ） **/&lt;/span&gt;
p&lt;span class=&quot;dv&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;我是一个标题&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;last-child-css3&quot;&gt;:last-child &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;elast-child-srules&quot;&gt;E:last-child { sRules }&lt;/h4&gt;
&lt;p&gt;匹配父元素的最后一个子元素E。要使该属性生效，E 元素必须是某个元素的子元素，E 的父元素最高是 body，即 E 可以是 body 的子元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最重要的是：&lt;/strong&gt; E 必须是它的兄弟元素中的最后一个元素，换言之，E 必须是父元素的最后一个子元素。与之类似的伪类还有 E:first-child，只不过情况正好相反，需要它是第一个子元素。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 给最后一个 li 加一条底边线 **/&lt;/span&gt;
li&lt;span class=&quot;dv&quot;&gt;:last-child&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/** 本意是想设置最后一个 h2 元素为红色，但这里无效，因为 h2 不是 div 的最后一个子元素（最后一个子元素是 p ） **/&lt;/span&gt;
p&lt;span class=&quot;dv&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;我是一个标题&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;only-child-css3&quot;&gt;:only-child &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eonly-child-srules&quot;&gt;E:only-child { sRules }&lt;/h4&gt;
&lt;p&gt;匹配父元素仅有的一个子元素 E。要使该属性生效，E 元素必须是某个元素的子元素，E 的父元素最高是 body，即 E 可以是 body 的子元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** 该规则当元素中只有一个 li 有效，即可设置 li 为红色，如果有多个 li 则无效。**/&lt;/span&gt;
li&lt;span class=&quot;dv&quot;&gt;:only-child&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;li:only-child对我有效，我会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;li:only-child对我无效，我不会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;li:only-child对我无效，我不会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;li:only-child对我无效，我不会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nth-childn-css3&quot;&gt;:nth-child(n) &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;enth-childn-srules&quot;&gt;E:nth-child(n) { sRules }&lt;/h4&gt;
&lt;p&gt;要使该属性生效，E 元素必须是某个元素的子元素，E 的父元素最高是 body，即 E 可以是 body 的子元素&lt;/p&gt;
&lt;p&gt;匹配父元素的第 n 个子元素 E，假设该子元素不是 E，则选择符无效，但 n 会累加&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 第二个 p 会被设置成红色，因为它是父元素的第二个元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;/* 第三个 p 不会设置成红色，因为父元素的第三个元素不是 p，而是 span */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;/* 第三个 p 会被设置成红色，因为它是父元素的第四个元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(4) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第1个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第2个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;第1个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第3个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;第2个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第4个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第5个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该选择符允许使用一个 乘法因子(n) 来作为换算方式，比如我们想选中所有的偶数子元素 E，那么选择符可以写成：E:nth-child(2n)，也可以使用一些关键字，比如：odd, even。E:nth-child(even) 选择偶数子元素，E:nth-child(old) 选择奇数子元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 偶数 或者 E:nth-child(even) */&lt;/span&gt;
    li&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2n) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;/* 奇数 或者 ，E:nth-child(old) */&lt;/span&gt;
    li&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2n+1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;列表项一&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;列表项二&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;列表项三&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;列表项四&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nth-last-childn-css3&quot;&gt;:nth-last-child(n) &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;enth-last-childn-srules&quot;&gt;E:nth-last-child(n) { sRules }&lt;/h4&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是body，即E可以是body的子元素&lt;/p&gt;
&lt;p&gt;该选择符允许使用一个乘法因子(n)来作为换算方式，比如我们想选中倒数第一个子元素E，那么选择符可以写成：E:nth-last-child(1)&lt;/p&gt;
&lt;p&gt;匹配父元素的倒数第n个子元素E，假设该子元素不是E，则选择符无效&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 设置倒数第一个 p 为红色，因为该 p 元素是父元素的倒数第二元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-last-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第1个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第2个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;第1个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;第3个p&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;第2个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;first-of-type-css3&quot;&gt;:first-of-type &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;efirst-of-type-srules&quot;&gt;E:first-of-type { sRules }&lt;/h4&gt;
&lt;p&gt;匹配同类型中的第一个同级兄弟元素E&lt;/p&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body&lt;/p&gt;
&lt;p&gt;该选择符总是能命中父元素的第1个为E的子元素，不论第1个子元素是否为E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 设置第一个元素类型为 p 的元素为红色，尽管该 p 元素不是父元素的第一个元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:first-of-type&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我是一个div元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;last-of-type-css3&quot;&gt;:last-of-type &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;elast-of-type-srules&quot;&gt;E:last-of-type { sRules }&lt;/h4&gt;
&lt;p&gt;匹配同类型中的最后一个同级兄弟元素E&lt;/p&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body&lt;/p&gt;
&lt;p&gt;该选择符总是能命中父元素的倒数第1个为E的子元素，不论倒是第1个子元素是否为E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 设置倒数一个元素类型为 p 的元素为红色，尽管该 p 元素不是父元素的倒数第一个元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:first-of-type&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我是一个div元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;only-of-type-css3&quot;&gt;:only-of-type &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eonly-of-type-srules&quot;&gt;E:only-of-type { sRules }&lt;/h4&gt;
&lt;p&gt;匹配同类型中的唯一的一个同级兄弟元素E&lt;/p&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body&lt;/p&gt;
&lt;p&gt;该选择符总是能命中父元素的唯一同类型子元素E，不论该元素的位置&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 设置父元素中唯一的 p 元素为红色，有多个 p 元素无效 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:only-of-type&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;p:only-of-type对我有效，我会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;p:only-of-type对我无效，我不会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;p:only-of-type对我无效，我不会变红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nth-of-typen-css3&quot;&gt;:nth-of-type(n) &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;enth-of-typen-srules&quot;&gt;E:nth-of-type(n) { sRules }&lt;/h4&gt;
&lt;p&gt;匹配同类型中的第n个同级兄弟元素E&lt;/p&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body&lt;/p&gt;
&lt;p&gt;该选择符总是能命中父元素的第n个为E的子元素，不论第n个子元素是否为E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 设置父元素第二个 p 元素为红色，虽然该 p 元素为父元素的第三个元素 */&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-of-type&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我是一个div元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nth-last-of-typen-css3&quot;&gt;:nth-last-of-type(n) &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;enth-last-of-typen-srules&quot;&gt;E:nth-last-of-type(n) { sRules }&lt;/h4&gt;
&lt;p&gt;匹配同类型中的倒数第n个同级兄弟元素E&lt;/p&gt;
&lt;p&gt;要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body&lt;/p&gt;
&lt;p&gt;该选择符总是能命中父元素的倒数第n个为E的子元素，不论倒数第n个子元素是否为E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:nth-last-of-type&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我是一个div元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是一个p元素&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;empty-css3&quot;&gt;:empty &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eempty-srules&quot;&gt;E:empty { sRules }&lt;/h4&gt;
&lt;p&gt;匹配没有任何子元素（包括text节点）的元素E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;:empty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;结构性伪类选择符 E:empty&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!--我是一个空节点p，请注意我与其它非空节点p的外观有什么不一样--&amp;gt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;结构性伪类选择符 E:empty&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;checked-css3&quot;&gt;:checked &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;echecked-srules&quot;&gt;E:checked { sRules }&lt;/h4&gt;
&lt;p&gt;匹配用户界面上处于选中状态的元素E。(用于input type为radio与checkbox时)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    input&lt;span class=&quot;dv&quot;&gt;:checked&lt;/span&gt; + span &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;红色&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;enabled-css3&quot;&gt;:enabled &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eenabled-srules&quot;&gt;E:enabled { sRules }&lt;/h4&gt;
&lt;p&gt;匹配用户界面上处于可用状态的元素E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:enabled&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#090&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    
    input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;可用状态&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;禁用状态&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; disabled=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;disabled-css3&quot;&gt;:disabled &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;edisabled-srules&quot;&gt;E:disabled { sRules }&lt;/h4&gt;
&lt;p&gt;匹配用户界面上处于禁用状态的元素E&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:enabled&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#090&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    
    input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;可用状态&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;禁用状态&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; disabled=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;target-css3&quot;&gt;:target &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;etarget-srules&quot;&gt;E:target { sRules }&lt;/h4&gt;
&lt;p&gt;匹配相关URL指向的E元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt; URL后面跟锚点#，指向文档内某个具体的元素。这个被链接的元素就是目标元素(target element)，:target选择器用于选取当前活动的目标元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 假设上述代码在页面 a.html 中，那么当访问 a.html#demo 时，这个div元素将会被:target命中 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;#demo&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;E:target伪类使用方法&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;page相关选择器&quot;&gt;@page相关选择器&lt;/h3&gt;
&lt;h4 id=&quot;page-first-srules&quot;&gt;@page :first { sRules }&lt;/h4&gt;
&lt;p&gt;设置在打印时页面容器第一页使用的样式。&lt;a href=&quot;mailto:仅用于@page规则&quot;&gt;仅用于@page规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该伪类选择符只允许定义margin, orphans, widows 和 page breaks相关属性&lt;/p&gt;
&lt;h4 id=&quot;page-left-srules&quot;&gt;@page :left { sRules }&lt;/h4&gt;
&lt;p&gt;设置页面容器位于装订线左边的所有页面使用的样式。&lt;a href=&quot;mailto:仅用于@page规则&quot;&gt;仅用于@page规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该伪类选择符只允许定义margin, padding, border 和 background属性&lt;/p&gt;
&lt;h4 id=&quot;page-right-srules&quot;&gt;@page :right { sRules }&lt;/h4&gt;
&lt;p&gt;设置页面容器位于装订线右边的所有页面使用的样式。&lt;a href=&quot;mailto:仅用于@page规则&quot;&gt;仅用于@page规则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该伪类选择符只允许定义margin, padding, border 和 background属性&lt;/p&gt;
&lt;h2 id=&quot;伪对象选择器&quot;&gt;伪对象选择器&lt;/h2&gt;
&lt;h3 id=&quot;first-letter-css3&quot;&gt;::first-letter &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;efirst-letter-srules&quot;&gt;E::first-letter { sRules }&lt;/h4&gt;
&lt;p&gt;设置对象内的第一个字符的样式&lt;/p&gt;
&lt;p&gt;此伪对象仅作用于块对象。内联对象要使用该伪对象，必须先将其设置为块级对象&lt;/p&gt;
&lt;p&gt;该伪对象常被用来配合font-size属性和float属性制作首字下沉效果&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;::first-letter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;font-weight:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;杂志常用的首字下沉效果&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;今天，阳光明媚，晴空万里，非常适合户外活动，如踏青、远足之类的。长期坐在办公室的同学们要多注意运动。&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;first-line-css3&quot;&gt;::first-line &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;efirst-line-srules&quot;&gt;E::first-line { sRules }&lt;/h4&gt;
&lt;p&gt;设置对象内的第一行的样式&lt;/p&gt;
&lt;p&gt;此伪对象仅作用于块对象。内联对象要使用该伪对象，必须先将其设置为块级对象&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;::first-line&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;#090&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;第一行文字的颜色与其它不同&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;今天，阳光明媚，晴空万里，非常适合户外活动，如踏青、远足之类的。长期坐在办公室的同学们要多注意运动。&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;before-css3&quot;&gt;::before &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;ebefore-srules&quot;&gt;E::before { sRules }&lt;/h4&gt;
&lt;p&gt;设置在对象前（依据对象树的逻辑结构）发生的内容。用来和content属性一起使用，并且必须定义content属性&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;在 p 元素中 span 元素之前可看到这段文字&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;我是一个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;after-css3&quot;&gt;::after &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eafter-srules&quot;&gt;E::after { sRules }&lt;/h4&gt;
&lt;p&gt;设置在对象前（依据对象树的逻辑结构）发生的内容。用来和content属性一起使用，并且必须定义content属性&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;在 p 元素中 span 元素之后可看到这段文字&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;我是一个span&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;placeholder-css3&quot;&gt;::placeholder &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eplaceholder-srules&quot;&gt;E::placeholder { sRules }&lt;/h4&gt;
&lt;p&gt;设置对象文字占位符的样式。&lt;/p&gt;
&lt;p&gt;::placeholder 伪元素用于控制表单输入框占位符的外观，它允许开发者/设计师改变文字占位符的样式，默认的文字占位符为浅灰色。&lt;/p&gt;
&lt;p&gt;当表单背景色为类似的颜色时它可能效果并不是很明显，那么就可以使用这个伪元素来改变文字占位符的颜色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，除了Firefox是 ::[prefix]placeholder，其他浏览器都是使用 ::[prefix]input-placeholder&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    input::-webkit-input-placeholder {&lt;/span&gt;
        color&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; green;
    }
&lt;span class=&quot;er&quot;&gt;    input:-ms-input-placeholder { // IE10+&lt;/span&gt;
        color&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; green;
    }
&lt;span class=&quot;er&quot;&gt;    input:-moz-placeholder { // Firefox4-18&lt;/span&gt;
        color&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; green;
    }
&lt;span class=&quot;er&quot;&gt;    input::-moz-placeholder { // Firefox19+&lt;/span&gt;
        color&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; green;
    }
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; placeholder=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Placeholder text!&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;selection-css3&quot;&gt;::selection &lt;strong&gt;&lt;code&gt;CSS3&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;eselection-srules&quot;&gt;E::selection { sRules }&lt;/h4&gt;
&lt;p&gt;设置对象被选择时的样式。&lt;/p&gt;
&lt;p&gt;需要注意的是，::selection只能定义被选择时的background-color，color及text-shadow&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    p&lt;span class=&quot;dv&quot;&gt;::selection&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;#f00&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;当我被选中是，我会变成黑色背景红色文字&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.css88.com/book/css/selectors/index.htm&quot; class=&quot;uri&quot;&gt;http://www.css88.com/book/css/selectors/index.htm&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 14:11:00 +0000</pubDate>
<dc:creator>laixiangran</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laixiangran/p/8735202.html</dc:identifier>
</item>
<item>
<title>Mego(03) - ORM框架的新选择 - CarefreeXT</title>
<link>http://www.cnblogs.com/CarefreeXT/p/8732949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CarefreeXT/p/8732949.html</guid>
<description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;从之前的两遍文章可以看出ORM的现状。&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;postTitle&quot;&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/CarefreeXT/p/8728025.html&quot;&gt;Mego(01) - NET中主流ORM框架性能对比&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/CarefreeXT/p/8729085.html&quot;&gt;Mego(02) - NET主流ORM框架分析&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;postTitle&quot;&gt;首先我们先谈下一个我们希望的ORM框架是什么样子的：&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;postTitle&quot;&gt;基于ORM原理其性能一定不如手写SQL，但是可以有一定程度损失这就像C++和NET/JAVA的关系一样，所以性能不能太差。&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;CLR模型可以和数据库对象结构高度一致，在大型项目中大家应该有过满世界找某表在哪里有用过，某个字段是否可以删除，某个字段是否可以改名的经历。手写SQL的代码对项目重构是个极大的挑战。&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;ORM模型可以帮助维护数据库结构版本，相信有不少项目团队都需要手写数据库表的升级脚本。&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;可以用LINQ表达出大部分的业务增删改查，当然不可能全部做到，即使是手写SQL也有做不到的（例如大数据统计分析），我觉的可以有10%以内的复杂SQL手写。&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;postTitle&quot;&gt;可能许多开发者都会有找过让自己比较满意的ORM框架，我也是其中之一，在漫长的信息系统设计及开发工作中，一直希望能有一个功能强大性能不错的ORM框架。一直都很关注 EntityFramework 的版本升级，不过后来也很失望，它的发展太慢了。无论是EntityFramework 还是EntityFrameworkCore 都包含了微软的商业竞争的成分。当然期间也尝试过各种其他的ORM框架，都有各种各样的不足，这里就不一一列举了。&lt;/p&gt;
&lt;h3 class=&quot;postTitle&quot;&gt;新选择&lt;/h3&gt;
&lt;p class=&quot;postTitle&quot;&gt;在各种纠结中于是诞生了这个新的ORM框架，我取名叫【Mego】,之所以叫这个名称是由于它包含了本框架的运作原理如下所示，取各个单词的首字母而得：&lt;/p&gt;
&lt;p&gt;Metadata -&amp;gt; Expression -&amp;gt; Generate -&amp;gt; Object&lt;/p&gt;
&lt;p&gt;元数据     -&amp;gt; 表达式        -&amp;gt; 生成         -&amp;gt; 数据对象&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;对于这个框架的定位是要在 &lt;strong&gt;功能和性能 &lt;/strong&gt;两个方面取代 &lt;strong&gt;EntityFramework&lt;/strong&gt; 和 &lt;strong&gt;EntityFrameworkCore&lt;/strong&gt; 。性能在&lt;a title=&quot;第一篇博客&quot; href=&quot;http://www.cnblogs.com/CarefreeXT/p/8728025.html&quot; target=&quot;_blank&quot;&gt;第一篇博客&lt;/a&gt;中已经说明了目前已经超过了它们两个，功能上后续会写出这三个框架的功能对比。&lt;/p&gt;
&lt;h3 class=&quot;postTitle&quot;&gt;简介&lt;/h3&gt;
&lt;p class=&quot;postTitle&quot;&gt; Mego是一个高性能且功能强大的ORM框架，它基于 &lt;strong&gt;EntityFramework&lt;/strong&gt; 和 &lt;strong&gt;EntityFrameworkCore&lt;/strong&gt; 这两个著名的ORM框架吸收了其中优秀理念，借鉴了其中的许多的功能设计，完全支持LINQ写法，多数据库支持，支持NET3.5到目前最新NET及NETCore所有包含分布式事务的NET框架。为了让初学者易于上手及使用，我们最外层的API大部分与 EntityFramework 相同，如果有EF使用经验的人应该会很快上手。&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;我已经在&lt;a href=&quot;https://github.com/CarefreeXT/Mego&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;上开源了Mego框架的源代码，欢迎大家给出改进意见。&lt;/p&gt;
&lt;h3 class=&quot;postTitle&quot;&gt;支持NET版本&lt;/h3&gt;
&lt;p class=&quot;postTitle&quot;&gt;本框架支持下列NET版本及后续版本。&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;postTitle&quot;&gt;&lt;strong&gt;.NETFramework, Version = v3.5&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;&lt;strong&gt;.NETFramework, Version = v4.0&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;&lt;strong&gt;.NETFramework, Version = v4.5&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;postTitle&quot;&gt;&lt;strong&gt;.NETStandard, Version = 2.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 class=&quot;postTitle&quot;&gt; &lt;/h3&gt;
&lt;h3 class=&quot;postTitle&quot;&gt;Mego框架使用文档&lt;/h3&gt;
&lt;p class=&quot;postTitle&quot;&gt;下面是本框架的使用文档，目前会一直在博客园发布框架使用文档，下面的文档会持续更新。&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;postTitle&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/CarefreeXT/p/8732950.html&quot; target=&quot;_blank&quot;&gt;Mego入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;http://www.cnblogs.com/CarefreeXT/p/8732951.html&quot; target=&quot;_blank&quot;&gt;创建模型&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;http://www.cnblogs.com/CarefreeXT/p/8732974.html&quot; target=&quot;_blank&quot;&gt;关系数据库建模&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 高级建模&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 查询数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基本查询&lt;/li&gt;
&lt;li&gt;高级查询&lt;/li&gt;
&lt;li&gt;加载相关数据&lt;/li&gt;
&lt;li&gt;匿名对象查询&lt;/li&gt;
&lt;li&gt;原生数据库操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; 保存数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基本保存&lt;/li&gt;
&lt;li&gt;高级提交数据&lt;/li&gt;
&lt;li&gt;匿名对象保存数据&lt;/li&gt;
&lt;li&gt;保存关系数据&lt;/li&gt;
&lt;li&gt;处理并发冲突&lt;/li&gt;
&lt;li&gt;使用事务&lt;/li&gt;
&lt;li&gt;生成属性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; 数据对象管理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据库特性&lt;/li&gt;
&lt;li&gt;判断对象存在&lt;/li&gt;
&lt;li&gt;创建表&lt;/li&gt;
&lt;li&gt;创建关系&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 数据库提供者&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;postTitle&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 13:54:00 +0000</pubDate>
<dc:creator>CarefreeXT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CarefreeXT/p/8732949.html</dc:identifier>
</item>
<item>
<title>源码解析Flask的配置文件 - renpingsheng</title>
<link>http://www.cnblogs.com/renpingsheng/p/8735107.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renpingsheng/p/8735107.html</guid>
<description>&lt;p&gt;在flask里，我们常在主文件中定义某些配置，比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;app.debug = True
app.secret_key = 'helloworld!!'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，flask中默认可以进行可选的配置项有很多。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;如果在开发的过程中，把所有需要的配置项都定义在主文件中，就会造成整个程序的目录结构不合理，
如果需要重写的flask配置项很多的时候，就可以把配置项用别的方式进行定义，然后导入使用&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;flask的配置文件是一个&lt;code&gt;flask.config.Config&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;导入Config对象，可以发现Config对象继承字典，&lt;/p&gt;
&lt;p&gt;Config默认的配置有：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;default_config = ImmutableDict({
    'DEBUG':                                get_debug_flag(default=False),
    'TESTING':                              False,
    'PROPAGATE_EXCEPTIONS':                 None,
    'PRESERVE_CONTEXT_ON_EXCEPTION':        None,
    'SECRET_KEY':                           None,
    'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),
    'USE_X_SENDFILE':                       False,
    'LOGGER_NAME':                          None,
    'LOGGER_HANDLER_POLICY':               'always',
    'SERVER_NAME':                          None,
    'APPLICATION_ROOT':                     None,
    'SESSION_COOKIE_NAME':                  'session',
    'SESSION_COOKIE_DOMAIN':                None,
    'SESSION_COOKIE_PATH':                  None,
    'SESSION_COOKIE_HTTPONLY':              True,
    'SESSION_COOKIE_SECURE':                False,
    'SESSION_REFRESH_EACH_REQUEST':         True,
    'MAX_CONTENT_LENGTH':                   None,
    'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),
    'TRAP_BAD_REQUEST_ERRORS':              False,
    'TRAP_HTTP_EXCEPTIONS':                 False,
    'EXPLAIN_TEMPLATE_LOADING':             False,
    'PREFERRED_URL_SCHEME':                 'http',
    'JSON_AS_ASCII':                        True,
    'JSON_SORT_KEYS':                       True,
    'JSONIFY_PRETTYPRINT_REGULAR':          True,
    'JSONIFY_MIMETYPE':                     'application/json',
    'TEMPLATES_AUTO_RELOAD':                None,
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过查看Config对象的源码，可以知道flask的配置可以有以下几种方式&lt;/p&gt;
&lt;h3 id=&quot;在主文件中定义通常使用的方式&quot;&gt;1.在主文件中定义(通常使用的方式)&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;app.debug = True
app.secret_key = 'helloworld!!'&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;由于Config对象继承了dict的方法和属性，所以还可以使用app.config.update(配置项)的方式导入配置项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;从环境变量中导入配置项&quot;&gt;2.从环境变量中导入配置项&lt;/h3&gt;
&lt;p&gt;导入配置项的方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;app.config.from_envvar(&quot;环境变量名称&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from_envvar方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def from_envvar(self, variable_name, silent=False):
    
    rv = os.environ.get(variable_name)
    if not rv:
        if silent:
            return False
        raise RuntimeError('The environment variable %r is not set '
                           'and as such configuration could not be '
                           'loaded.  Set this variable and make it '
                           'point to a configuration file' %
                           variable_name)
    return self.from_pyfile(rv, silent=silent)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到,从环境变量中导入配置项的方法，就是从环境变量中找到并读取对应的py文件名称，然后内部调用&lt;code&gt;from_pyfile&lt;/code&gt;方法处理读取到的内容得到配置&lt;/p&gt;
&lt;h3 id=&quot;从python文件中导入&quot;&gt;3.从python文件中导入&lt;/h3&gt;
&lt;p&gt;从python文件中获取配置项的方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;app.config.from_pyfile(&quot;python文件名称&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如，创建一个名为setting.py的文件&lt;/p&gt;
&lt;p&gt;setting.py文件的内容为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;DEBUG=True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后使用&lt;code&gt;app.config.from_pyfile(&quot;setting.py&quot;)&lt;/code&gt;的方式导入配置项&lt;/p&gt;
&lt;p&gt;from_pyfile方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def from_pyfile(self, filename, silent=False):

    filename = os.path.join(self.root_path, filename)
    d = types.ModuleType('config')
    d.__file__ = filename
    try:
        with open(filename, mode='rb') as config_file:
            exec(compile(config_file.read(), filename, 'exec'), d.__dict__)
    except IOError as e:
        if silent and e.errno in (errno.ENOENT, errno.EISDIR):
            return False
        e.strerror = 'Unable to load configuration file (%s)' % e.strerror
        raise
    self.from_object(d)
    return True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从py文件中导入配置项的过程中，读取参数中的python文件的内容，进行编译后exec方法执行，就得到所需要的配置项&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;python文件可以是绝对路径或者相对路径，如果是相对路径，则py文件必须放在root_path目录下，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;从对象中导入配置项&quot;&gt;4.从对象中导入配置项&lt;/h3&gt;
&lt;p&gt;from_object方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def from_object(self, obj):

    if isinstance(obj, string_types):
        obj = import_string(obj)
    for key in dir(obj):
        if key.isupper():
            self[key] = getattr(obj, key)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从对象中导入配置项的过程中，首先判断所传入的对象名是否是字符串，然后调用&lt;code&gt;import_string&lt;/code&gt;方法处理字符串形式的对象名&lt;/p&gt;
&lt;p&gt;import_string方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def import_string(import_name, silent=False):

    import_name = str(import_name).replace(':', '.')
    try:
        try:
            __import__(import_name)
        except ImportError:
            if '.' not in import_name:
                raise
        else:
            return sys.modules[import_name]

        module_name, obj_name = import_name.rsplit('.', 1)
        try:
            module = __import__(module_name, None, None, [obj_name])
        except ImportError:
            module = import_string(module_name)

        try:
            return getattr(module, obj_name)
        except AttributeError as e:
            raise ImportError(e)

    except ImportError as e:
        if not silent:
            reraise(
                ImportStringError,
                ImportStringError(import_name, e),
                sys.exc_info()[2])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，import_string方法，实际上是对字符串形式的对象名执行rsplit方法，得到模块名和对象名&lt;/p&gt;
&lt;p&gt;在模块可以被正常导入之前，不停执行import_string方法,最后执行getattr方法从模块中获取对象名&lt;/p&gt;
&lt;h3 id=&quot;from_json从json字符串中获取配置项&quot;&gt;5.from_json：从json字符串中获取配置项&lt;/h3&gt;
&lt;p&gt;from_json方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def from_json(self, filename, silent=False):
    
    filename = os.path.join(self.root_path, filename)

    try:
        with open(filename) as json_file:
            obj = json.loads(json_file.read())
    except IOError as e:
        if silent and e.errno in (errno.ENOENT, errno.EISDIR):
            return False
        e.strerror = 'Unable to load configuration file (%s)' % e.strerror
        raise
    return self.from_mapping(obj)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从json文件中获取配置项，实际上就是对json文件执行json.loads方法，得到对象&lt;/p&gt;
&lt;p&gt;然后内部调用&lt;code&gt;from_mapping&lt;/code&gt;方法处理所得到的对象&lt;/p&gt;
&lt;h3 id=&quot;from_mapping从dict字典中获取配置项&quot;&gt;6.from_mapping：从dict字典中获取配置项&lt;/h3&gt;
&lt;p&gt;from_mapping方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def from_mapping(self, *mapping, **kwargs):

    mappings = []
    if len(mapping) == 1:
        if hasattr(mapping[0], 'items'):
            mappings.append(mapping[0].items())
        else:
            mappings.append(mapping[0])
    elif len(mapping) &amp;gt; 1:
        raise TypeError(
            'expected at most 1 positional argument, got %d' % len(mapping)
        )
    mappings.append(kwargs.items())
    for mapping in mappings:
        for (key, value) in mapping:
            if key.isupper():
                self[key] = value
    return True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;把参数字典中的所有键值对添加到列表串，循环遍历列表，读取列表中每个元素的键和值&lt;/p&gt;
&lt;p&gt;如果键为大写，则key为配置选项，value为配置选项的值&lt;/p&gt;
&lt;h3 id=&quot;get_namespace从名称空间中获取配置选项&quot;&gt;7.get_namespace：从名称空间中获取配置选项&lt;/h3&gt;
&lt;p&gt;get_namespace源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def get_namespace(self, namespace, lowercase=True, trim_namespace=True):

    rv = {}
    for k, v in iteritems(self):
        if not k.startswith(namespace):
            continue
        if trim_namespace:
            key = k[len(namespace):]
        else:
            key = k
        if lowercase:
            key = key.lower()
        rv[key] = v
    return rv&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;get_namespace方法，是从指定的名称空间或前缀中进行匹配，返回包含配置项的子集的字典&lt;/p&gt;
&lt;p&gt;迭代当前对象，获取key和v,把key转换为小写格式，然后把key和v包含在一个字典中&lt;/p&gt;
</description>
<pubDate>Sat, 07 Apr 2018 13:49:00 +0000</pubDate>
<dc:creator>renpingsheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renpingsheng/p/8735107.html</dc:identifier>
</item>
</channel>
</rss>