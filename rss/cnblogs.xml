<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>elasticsearch高级组合查询ava - 新风之谷</title>
<link>http://www.cnblogs.com/zengxiaoyi36/p/7679560.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zengxiaoyi36/p/7679560.html</guid>
<description>&lt;p&gt;/**&lt;br/&gt;     * 高级检索（组合条件检索）must相当于sql and操作&lt;br/&gt;     * @param modelType 0为模糊查询，1为精确查询&lt;br/&gt;     * @param index 索引&lt;br/&gt;     * @param map key为查询字段和value为查询内容&lt;br/&gt;     * @param Page 分页页码&lt;br/&gt;     * @param Pagesize 每页显示条数&lt;br/&gt;     * @return SearchHits  &lt;br/&gt;     */&lt;br/&gt;    public static SearchHits AdvancedQuery1(Integer modelType,String index,Map&amp;lt;String,String&amp;gt; map,int Page,int Pagesize){&lt;br/&gt;        SearchRequestBuilder sr =transportClient.prepareSearch(index);&lt;br/&gt;        BoolQueryBuilder queryBuilder=QueryBuilders.boolQuery();&lt;br/&gt;        System.out.println(index);&lt;br/&gt;        if(modelType==0){&lt;br/&gt;            for(Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()){&lt;/p&gt;
&lt;p&gt;              //wildcardQuery 模糊查询&lt;br/&gt;                queryBuilder.must(QueryBuilders.wildcardQuery(entry.getKey(), entry.getValue()+&quot;*&quot;));&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        else if(modelType==1){&lt;br/&gt;            for(Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()){&lt;/p&gt;
&lt;p&gt;                 //termQuery 查询精确&lt;br/&gt;                queryBuilder.must(QueryBuilders.termQuery(entry.getKey(),entry.getValue()));&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        sr.setQuery(queryBuilder)&lt;br/&gt;          .setFrom((Page-1)*Pagesize)&lt;br/&gt;          .setSize(Pagesize);&lt;br/&gt;        SearchResponse response=sr.get();&lt;br/&gt;        SearchHits hits=response.getHits();&lt;br/&gt;        return hits;&lt;br/&gt;        &lt;br/&gt;    }&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:44:00 +0000</pubDate>
<dc:creator>新风之谷</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zengxiaoyi36/p/7679560.html</dc:identifier>
</item>
<item>
<title>递归调用在循环体内: 把循环展开, 这种情况是先循环再递归 - georgeguo</title>
<link>http://www.cnblogs.com/georgejguo/p/7679498.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/georgejguo/p/7679498.html</guid>
<description>&lt;p&gt;&lt;strong&gt;整理自陈莉君（翻译深入理解Linux内核的作者）老师文章。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阿里2015笔试中有这样一道题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在一台主流配置的PC上，调用f(35)所需要的时间大概是（ ）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int f(int x){&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int s = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while(x++ &amp;gt;0) s+= f(x);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;return max(s,1);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A．几毫秒 B．几秒 C．几分钟 D．几小时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本题涉及到的知识点包括数据的表示和运算、时间复杂度。考查考生对带符号整数的表示、递归调用的执行过程、计算机系统性能、虚拟存储器、C语言语句等相关知识的理解和运用能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数学上的分析推导结果与计算机系统中的执行结果是有差异的。例如，在数学中一个数可以无限大，但在计算机中受表示位数的限制，数的值是有限的。用数学分析的方法，本题的递归是可以终止的，但受存储容量的限制，在计算机中递归调用时会有栈溢出的问题，导致程序不能正常执行结束。类似的问题还有很多，这是平时编程时需要注意的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设题目中的函数用C语言书写，要分析调用f(35)所需的时间，就得分析代码执行中循环执行次数和递归调用次数等，下面深入剖析f(35)执行过程中存在的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：以下231为2的31次方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）程序是否会终止？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用f(35)时，入口参数x=35。从数学的角度理解while中的判断表达式“x++ &amp;gt;0”，会认为x在增量后永远大于0，这是一个永真式，从而做出错误结论：程序死循环。在计算机中数值是有范围的，int型数据用补码表示，占4个字节，能表示的最大正数是231-1 = 7FFF FFFFH。231的机器数是8000 0000H，其值为int型，能表示的最小负数-2147483648，因此当x = 8000 0000H 时，x &amp;gt; 0的值为假，程序退出while循环，因此，若不考虑栈溢出，则程序能执行结束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）使递归终止的最大x值是多少？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while(x++ &amp;gt;0)语句在Microsoft VC中的机器代码如下，该语句的执行过程是：先把x的值分别保存到EDX和EAX寄存器；然后对EAX寄存器内容加1，以实现x = x+1操作；最后再用EDX的内容（x的旧值）进行x&amp;gt;0的条件判断。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mov edx, dword ptr [ebp+8]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mov eax,dword ptr [ebp+8]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add eax, 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mov dword ptr [ebp+8], eax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test edx, edx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jle f+77h (00401097)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，当调用f(231-1)时，x = 231-1=7FFF FFFFH，先执行x=7FFF FFFFH+1 = 8000 0000H=231，然后，用旧的x=7FFF FFFFH与0比较，比较结果为真，故执行while循环体，在循环体中调用f(231)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用f(231)时，x为231 = 8000 0000H，其真值为负数，因此，与0比较的结果为假，故跳出while循环体，程序结束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;综上所述，使递归终止的最大x值是231，即执行f(231)时结束递归调用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）函数f(x)的递归调用情况如何？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;f(x)是一个递归调用过程，并且递归调用在循环体内，因此调用关系较复杂。图1显示了f(231-4)执行中的递归调用情况。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1252125/201710/1252125-20171016231005474-421057238.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        图1 f(231-4)执行中的递归调用情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在f(x)执行过程中，把执行f(x)过程体的总次数记为f(x)执行次数，把一次递归调用的最大次数记为f(x)递归深度。表1给出了x为不同值时，执行f(x)的次数和递归深度。这两个参数显示了f(x)函数的执行过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       表1  x为不同值时，f(x)执行的次数和递归调用深度&lt;/strong&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt; &lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(x)执行次数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;递归深度&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231-1)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231-2)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231-3)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231-4)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;……&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;……&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;……&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(231-n)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;2n&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;n+1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;f(35)=f(231-2147483613)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;22147483613&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;2147483614&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;（4） 递归调用过程的执行情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统会给每一个用户进程分配存放代码和数据的用户空间，用户空间中的栈区用来存放程序运行时过程调用的参数、返回地址、过程局部变量等。随着程序的执行，栈区不断动态地从高地址向低地址增长或向反方向减退。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户栈由若干个栈帧组成，每个过程对应一个栈帧，帧指针寄存器EBP指定一个栈帧的起始地址，栈指针寄存器ESP指向栈顶，当前栈帧的范围在EBP和ESP指向的区域之间。过程执行时，由于不断有数据入栈，所以栈指针ESP会动态移动，而帧指针EBP固定不变。在一个过程内对栈中信息的访问大多通过帧指针EBP进行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IA-32规定，寄存器EAX、ECX和EDX是调用者保存寄存器，EBX、ESI、EDI寄存器是被调用者保存寄存器。若过程P调用过程Q时，P在需要时先在自己的栈区保存EAX、ECX和EDX、入口参数和返回地址，接着跳转到Q执行。Q在自己的栈帧中先保存P的EBP值，并设置EBP指向当前Q栈帧的栈低，根据需要保存EBX、ESI、EDI，再在栈中给Q的局部变量分配空间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在递归调用执行中，每个递归调用过程都有一个栈帧。栈帧中可能包含如图2所示的信息。&lt;/strong&gt;&lt;/p&gt;

&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;……&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用者的EBP值&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用者的EBX、ESI、EDI&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;过程局部变量&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;自己的EAX、ECX和EDX&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;入口参数n&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;入口参数1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; height=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;返回地址&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;           图2 一次递归调用中的栈帧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图3显示了在windows系统中f(x)函数调用时的部分机器指令。可以看出f(x)的栈帧至少有84B。系统分配给一个进程的用户栈只有有限的空间，因此，递归调用的次数是有限的。f(35)的递归深度是2147483614，即至少需要2147483614×84字节，即大于170GB的栈帧空间。在32位系统中，最大虚拟地址空间仅有4GB，用户栈只是其中的一部分，所以f(35)在执行过程中会出现栈溢出的现象。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1252125/201710/1252125-20171016231142052-859559500.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br/&gt;        图3 f(x)函数调用时的部分机器指令&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（5） f(35)在32位系统中的实际执行情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设在Intel x86+windows+VC+C语言环境中执行f(35)。VC中默认分配栈的大小是1MB，虽然用户可以调整栈大小，但栈的容量是有限的。按2MB的栈空间、栈大小按80字节计算：2MB÷80B≈26214，因此f(x)递归调用的次数不会超过26214-1=26213次。从图4.9中可以看出，栈溢出时，f(x)函数体最多执行26213次。栈溢出时每个f(x)函数体只在while语句中执行，假设每个f(x)函数体执行100条指令，即使指令平均CPI为3，时钟频率为2.4GHz，f(35)的执行时间也只有26213×100×3÷2.4GHz ≈3.2 ms左右时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对f(35)的执行做了测试，在栈大小是1MB时，递归调用11244次后栈溢出；在栈设置为2MB时，递归调用22642次后栈溢出，显然运行时间只有几毫秒。在Microsoft VisualStudio 2012环境中运行，出现如图4所示结果，表明出现了栈溢出（Stack overflow）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1252125/201710/1252125-20171016231224849-947524528.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;综上所述，答案为A。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上整理自陈莉君老师的文章。对于其中不容易理解的&lt;strong&gt;图1 f(231-4)执行中的递归调用情况&lt;/strong&gt;这里给出注释：&lt;/p&gt;
&lt;p&gt;对于递归在循环体内我们可以把循环展开，这种情况是先循环再递归：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while(x++ &amp;gt;0) s+= f(x);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;等价写法(当x=0x80000000-2)：&lt;/p&gt;
&lt;p&gt;if(0x80000000 -2 &amp;gt;0) { // if(x &amp;gt;0)&lt;/p&gt;
&lt;p&gt;0x80000000-1; //x++&lt;/p&gt;
&lt;p&gt;s+=f(0x80000000-1); //f(x)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;if(0x80000000-1 &amp;gt; 0) {&lt;/p&gt;
&lt;p&gt;0x80000000;&lt;/p&gt;
&lt;p&gt;s+=f(0x80000000);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:43:00 +0000</pubDate>
<dc:creator>georgeguo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/georgejguo/p/7679498.html</dc:identifier>
</item>
<item>
<title>Bootstrap表格样式(附源码文件)--Bootstrap - 奇客艺术</title>
<link>http://www.cnblogs.com/qikeyishu/p/7679517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qikeyishu/p/7679517.html</guid>
<description>&lt;h3&gt;&lt;span&gt;1、表格默认样式&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;表格默认样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table&amp;gt;&amp;lt;!--默认样式--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;2、表格基础样式&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;表格基础样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table&quot;&amp;gt;&amp;lt;!--表格基础样式--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;3、带背景条纹的表格&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;带背景条纹&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table table-striped&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;4、带边框的表格&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;带边框的表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table table-bordered&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;5、显示鼠标悬停效果的表格&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;鼠标悬停的表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table table-bordered table-hover&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;6、紧凑型表格&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;紧凑型表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;7、表格行内样式&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;表格行内样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr class=&quot;info&quot;&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr class=&quot;success&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr class=&quot;warning&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr class=&quot;danger&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;tr class=&quot;active&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;8、响应式表格&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;h4&amp;gt;响应式表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;div class=&quot;col-sm-4&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;div class=&quot;table-responsive&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;tr class=&quot;info&quot;&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;tr class=&quot;success&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;tr class=&quot;warning&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;tr class=&quot;danger&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;tr class=&quot;active&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span&gt;9、demo.html：&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;title&amp;gt;Bootstrap表格样式&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.css&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;表格默认样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table&amp;gt;&amp;lt;!--默认样式--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;表格基础样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table&quot;&amp;gt;&amp;lt;!--表格基础样式--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;带背景条纹&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table table-striped&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;带边框的表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table table-bordered&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;鼠标悬停的表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table table-bordered table-hover&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;紧凑型表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;表格行内样式&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr class=&quot;info&quot;&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr class=&quot;success&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr class=&quot;warning&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr class=&quot;danger&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;tr class=&quot;active&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;h4&amp;gt;响应式表格&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;div class=&quot;col-sm-4&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;div class=&quot;table-responsive&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　&amp;lt;table class=&quot;table table-bordered table-condensed&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　　&amp;lt;tr class=&quot;info&quot;&amp;gt;&amp;lt;th&amp;gt;序号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　　&amp;lt;tr class=&quot;success&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　　&amp;lt;tr class=&quot;warning&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　　&amp;lt;tr class=&quot;danger&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　　&amp;lt;tr class=&quot;active&quot;&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;小玲&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;span&gt;Effect Picture：&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1186474/201710/1186474-20171016232734802-1573265908.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;源码文件下载：&lt;a id=&quot;&quot; href=&quot;https://files.cnblogs.com/files/qikeyishu/Bootstrap%E8%A1%A8%E6%A0%BC%E6%A0%B7%E5%BC%8F.zip&quot;&gt;Bootstrap表格样式.zip&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;文章原创，转载请注明出处，感谢大家的合作！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:38:00 +0000</pubDate>
<dc:creator>奇客艺术</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qikeyishu/p/7679517.html</dc:identifier>
</item>
<item>
<title>jquery各种事件使用方法总结（from：天宇之游） - 牙齿有个缺缺</title>
<link>http://www.cnblogs.com/GP1014336455/p/7679543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GP1014336455/p/7679543.html</guid>
<description>
&lt;p&gt;&lt;span&gt;ps：本博客转自博主  天宇之游 ，地址：&lt;span class=&quot;text_gray&quot;&gt;&lt;a class=&quot;gray&quot; href=&quot;http://www.cnblogs.com/cwp-bg/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cwp-bg/&lt;/a&gt;  ，再次感谢天宇之游。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;jquery事件使用方法总结&lt;/p&gt;&lt;p&gt;&lt;span&gt;一、鼠标事件&lt;/span&gt;&lt;br/&gt;1. click()：鼠标单击事件&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;$div.click(data,function (event) { //点击盒子变蓝&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(event);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数function：匿名函数有且只有一个默认的参数event，event输出事件相关的信息；不允许有其他的参数，可以不写。&lt;br/&gt;    参数data：有时候需要传递额外的数据给函数，data可以是一个数组，不需要可以省略。&lt;/p&gt;&lt;p&gt;扩展：&lt;/p&gt;&lt;p&gt;//event参数可以获取事件的各种属性，有几个常用&lt;/p&gt;&lt;p&gt;event.target:  获取触发事件的元素&lt;/p&gt;&lt;p&gt;$div.click(function (event) {&lt;br/&gt;            $(event.target).css({&lt;br/&gt;                    &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;                });&lt;br/&gt;    })&lt;br/&gt;    &lt;br/&gt;event.data: 获取事件传入的参数数据。&lt;br/&gt;event.pageX: 获取鼠标光标点击距离文档左边left的距离；&lt;br/&gt;event.pageY: 获取鼠标光标点击距离文档上边top的距离；&lt;/p&gt;&lt;p&gt;event.offsetX: 获取鼠标光标点击距离元素左边left的距离；&lt;br/&gt;event.offssetY: 获取鼠标光标点击距离元素上边top的距离；&lt;/p&gt;&lt;p&gt;event.screenX: 获取鼠标光标点击距离屏幕left的距离；&lt;br/&gt;event.screenY: 获取鼠标光标点击距离屏幕top的距离；&lt;/p&gt;&lt;p&gt;2. dblclick()：鼠标双击事件&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;$div.dblclick()(function (event) { //双击盒子变蓝&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });               &lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数和click的用法完全一样，event同样可以获取众多的属性。&lt;/p&gt;&lt;p&gt;3. 鼠标进入和离开（进入子元素也触发）&lt;/p&gt;&lt;p&gt;    mouseover()：进入&lt;br/&gt;    mouseout()：离开&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;$div.mouseover(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });               &lt;br/&gt;})&lt;br/&gt;$div.mouseout(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });               &lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数同上，绑定后鼠标进入元素的子元素会再次触发。&lt;/p&gt;&lt;p&gt;4. 鼠标进入和离开（进入子元素不触发）&lt;/p&gt;&lt;p&gt;    mouseenter() 鼠标进入&lt;br/&gt;    mouseleave() 鼠标离开&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;$div.mouseenter(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });               &lt;br/&gt;})&lt;br/&gt;$div.mouseleave(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });               &lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数同上，绑定后鼠标进入和离开子元素不会再次触发。&lt;/p&gt;&lt;p&gt;5. hover():同时为mouseenter和mouseleave事件指定处理函数&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;// 鼠标进入和移出事件&lt;br/&gt;    $div.hover(function (event) {&lt;br/&gt;        $div.css({&lt;br/&gt;            &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;        })&lt;/p&gt;&lt;p&gt;    },function (event) {&lt;br/&gt;        $div.css({&lt;br/&gt;            &quot;background&quot;: &quot;red&quot;,&lt;br/&gt;        });&lt;br/&gt;    })&lt;/p&gt;&lt;p&gt;    hover可以同时加入两个function，第一个是鼠标进入触发，第二个是移出触发。&lt;br/&gt;    前面不可以添加data参数，否则报错。&lt;/p&gt;&lt;p&gt;6. 鼠标按下和松开&lt;/p&gt;&lt;p&gt;    mouseup() 松开鼠标&lt;br/&gt;    mousedown() 按下鼠标&lt;/p&gt;&lt;p&gt;$div = $(&quot;div&quot;)&lt;br/&gt;$div.mousedown(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(event);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;$div.mouseup(function (event) {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(event);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数同click，和点击事件click不同的是，click在鼠标点击（包括按下和松开）后才触发事件，这里是按下或松开就会触发。&lt;/p&gt;&lt;p&gt;7. mousemove() 鼠标在元素内部移动&lt;/p&gt;&lt;p&gt;    同法和参数同上。&lt;/p&gt;&lt;p&gt;&lt;span&gt;二、键盘事件&lt;/span&gt;&lt;br/&gt;*keypress()：按下键盘（指的是按下）&lt;/p&gt;&lt;p&gt; $(window).keypress([20],function (event) {&lt;br/&gt;        $div.css({&lt;br/&gt;            &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;        });&lt;br/&gt;    console.log(event.which);            &lt;br/&gt;    })&lt;/p&gt;&lt;p&gt;    参数：同鼠标事件，第一个参数传递数据，function默认参数event值按下键盘事件。&lt;br/&gt;    键盘事件需要绑定可获得焦点的元素，如：input，body，html，一般绑定窗口：window。&lt;br/&gt;    如果需要具体判断按下了那个按键，使用event.which,返回键盘字母的ascii码。&lt;/p&gt;&lt;p&gt;注意：如果按下不放开，事件会连续触发。&lt;br/&gt;*按下和松开&lt;/p&gt;&lt;p&gt;    keydown() 按下键盘&lt;br/&gt;    keyup() 松开键盘&lt;/p&gt;&lt;p&gt;$(window).keydown([20],function (event) {&lt;br/&gt;    $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(event);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;$(window).keyup([20],function (event) {&lt;br/&gt;    $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(event);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    参数同上。&lt;br/&gt;    keydown和keypress方法区别在于，keypress事件不会触发所有的按键，比如 ALT、CTRL、SHIFT、ESC等。&lt;/p&gt;&lt;p&gt;&lt;span&gt;三、焦点事件&lt;/span&gt;&lt;br/&gt;* 元素获取和失去焦点&lt;/p&gt;&lt;p&gt;    blur() 元素失去焦点&lt;br/&gt;    focus() 元素获得焦点&lt;/p&gt;&lt;p&gt;$put = $(&quot;input&quot;);&lt;br/&gt;$put.focus():元素自动获取焦点&lt;/p&gt;&lt;p&gt;$put.focus(function (event) {&lt;br/&gt;    console.log(event);&lt;br/&gt;        $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;            })&lt;br/&gt;})//获取焦点后触发事件&lt;/p&gt;&lt;p&gt;$put.blur(function (event) {&lt;br/&gt;    console.log(event);&lt;br/&gt;        $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;            })&lt;br/&gt;})//失去焦点后触发事件&lt;/p&gt;&lt;p&gt;    参数同click；&lt;br/&gt;    焦点事件一般使用在input标签上，其他的标签一般得不到焦点。&lt;/p&gt;&lt;p&gt;&lt;span&gt;四、表单事件&lt;/span&gt;&lt;br/&gt;* submit()： 用户递交表单&lt;/p&gt;&lt;p&gt;$(&quot;.form&quot;).submit(function (event) {&lt;br/&gt;    alert(&quot;提交事件&quot;);&lt;br/&gt;    console.log(event);&lt;br/&gt;    //阻止系统默认事件&lt;br/&gt;    event.defaultPrevented();&lt;br/&gt;    return false;&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    submit事件绑定在form表单上，点击提交按钮时触发该事件，可以对系统默认的提交进行拦截。&lt;br/&gt;    event.defaultPrevented();//阻止系统提交数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;五、其他事件&lt;/span&gt;&lt;br/&gt;* ready()：DOM加载完成后执行&lt;/p&gt;&lt;p&gt;    这个事件用来防止js报错，每次引入js都要使用，不在赘述。&lt;/p&gt;&lt;p&gt;* resize()：浏览器窗口的大小发生改变触发事件&lt;/p&gt;&lt;p&gt;$(window).resize(function () {&lt;br/&gt;    console.log($(window).width());&lt;br/&gt;   })&lt;br/&gt;   &lt;/p&gt;&lt;p&gt;    参数同click,这个事件需要绑定在window上才会生效，用于监控窗口的变化。&lt;/p&gt;&lt;p&gt;* scroll()：滚动条的位置发生变化&lt;br/&gt;* change()： 表单元素的值发生变化&lt;/p&gt;&lt;p&gt;$put.change(function () {&lt;br/&gt;    $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;                &lt;br/&gt;})&lt;/p&gt;&lt;p&gt;    当表单元素如单选框、多选框、文本框等值发生变化时触发。&lt;/p&gt;&lt;p&gt;* unload() ：用户离开页面&lt;/p&gt;&lt;p&gt;$(document).unload(function () {&lt;br/&gt;    $div.css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    console.log(&quot;likai&quot;);&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;&lt;span&gt;六、通用的绑定事件和解绑方法&lt;/span&gt;&lt;br/&gt;* bind()：绑定&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('div').bind('mouseover click', function(event) {&lt;br/&gt;        alert($(this).html());&lt;br/&gt;    });&lt;br/&gt;});&lt;br/&gt;   &lt;/p&gt;&lt;p&gt;    参数：第一个参数为需要绑定的事件的名字，可以绑定多个事件，之间用空格隔开；第二个参数是处理函数。&lt;/p&gt;&lt;p&gt;* unbind():解绑&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('#div1').bind('mouseover click', function(event) {&lt;br/&gt;        // $(this).unbind();解绑所有事件&lt;br/&gt;        $(this).unbind('mouseover');解绑指定事件&lt;br/&gt;    });&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;    参数同bind。&lt;/p&gt;&lt;p&gt;* on():绑定和委托都可用的方法&lt;/p&gt;&lt;p&gt;$(&quot;div&quot;).on(event,childSelector,data,function);&lt;br/&gt;//四个参数&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('div').on('mouseover click', function(event) {&lt;br/&gt;        $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;        });&lt;br/&gt;    });&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;    参数：&lt;br/&gt;    event,需要绑定的事件，多个事件用空格隔开；&lt;br/&gt;    function：事件的处理方法。&lt;br/&gt;    childSelector：选择需要委托的元素，用于委托事件。&lt;br/&gt;    data：额外的传参。&lt;/p&gt;&lt;p&gt;* off():解绑&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('#div1').on('mouseover click', function(event) {&lt;br/&gt;        // $(this).off();解绑所有事件&lt;br/&gt;        $(this).off('mouseover');解绑指定事件&lt;br/&gt;    });&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;* one():绑定一次自动解绑&lt;/p&gt;&lt;p&gt;如果需要触发事件一次后就自动失效，比如：按钮点击一次后 就失效使用这个方法。&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('div').one('mouseover click', function(event) {&lt;br/&gt;        $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;        });&lt;br/&gt;    });&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;    注意：当一次性绑定多个事件时，多个事件相互是独立的，即如果有一个事件被触发，那么这个事件解绑，对另外没有被触发的事件没有影响。&lt;/p&gt;&lt;p&gt;&lt;span&gt;七、自定义和主动触发事件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;说明：对于系统没有提供的事件，可以自己定义并主动触发。&lt;/p&gt;&lt;p&gt;$div.bind(&quot;abc&quot;,function () {&lt;br/&gt;    $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;    });&lt;br/&gt;    &lt;br/&gt;})&lt;br/&gt;$div.trigger(&quot;abc&quot;);&lt;/p&gt;&lt;p&gt;    trigger():触发事件的方法；这种方式类似协程。&lt;/p&gt;&lt;p&gt;&lt;span&gt;八、事件的两大特征运用：&lt;/span&gt;&lt;br/&gt;1. 事件的冒泡：&lt;/p&gt;&lt;p&gt;    定义：一个元素标签如div,在上面触发某种事件，如单击；如果div上没有定义单击事件或者定义了单击事件，但返回值不是false，即没有阻止冒泡；那么事件会向父级传递，每一个定义了单击事件的父级都会被触发事件，直到到达document或window。&lt;/p&gt;&lt;p&gt;注意：冒泡是事件的固有属性（自定义不适用），适合所有的系统事件。&lt;/p&gt;&lt;p&gt;    作用： 允许多个事件被击中到父级处理，减少绑定次数，提高性能。&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    var $box1 = $('.father');&lt;br/&gt;    var $box2 = $('.son');&lt;br/&gt;    var $box3 = $('.grandson');&lt;br/&gt;    $box1.click(function() {&lt;br/&gt;        alert('father');&lt;br/&gt;    });&lt;br/&gt;    $box2.click(function() {&lt;br/&gt;        alert('son');&lt;br/&gt;    });&lt;br/&gt;    $box3.click(function(event) {&lt;br/&gt;        alert('grandson');&lt;br/&gt;       // event.stopPropagation();阻止冒泡&lt;/p&gt;&lt;p&gt;    });&lt;br/&gt;    $(document).click(function(event) {&lt;br/&gt;        alert('grandfather');&lt;br/&gt;    });&lt;br/&gt;})&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;p&gt;&amp;lt;div class=&quot;father&quot;&amp;gt;&lt;br/&gt;    &amp;lt;div class=&quot;son&quot;&amp;gt;&lt;br/&gt;        &amp;lt;div class=&quot;grandson&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;&lt;p&gt;    说明：上面代码界面，单击“grandson”的div，所有事件都会被触发；&lt;br/&gt;    如果要阻止事件冒泡，使用stopPropagation()；&lt;/p&gt;&lt;p&gt;扩展：合并阻止操作&lt;/p&gt;&lt;p&gt;event.stopPropagation();//阻止冒泡&lt;br/&gt;event.preventDefault();//阻止默认行为&lt;/p&gt;&lt;p&gt;// 合并写法：&lt;br/&gt;return false;&lt;/p&gt;&lt;p&gt;    实际开发中，一般把阻止冒泡和阻止默认行为合并起来写。&lt;/p&gt;&lt;p&gt;2. 事件委托&lt;/p&gt;&lt;p&gt;    定义：&lt;/p&gt;&lt;p&gt;    利用冒泡原理，将要处理相同事件的子元素的事件委托给父级，从而极大减少事件绑定的次数，提高性能。&lt;/p&gt;&lt;p&gt;    委托事件：&lt;/p&gt;&lt;p&gt;    delegate():&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $list = $('list');&lt;br/&gt;    $list.delegate('li', 'click', function(event) {&lt;br/&gt;        $(this).css({background:'red'});&lt;br/&gt;    });&lt;br/&gt;})//给列表下面的每个li元素的事件委托给list列表。&lt;/p&gt;&lt;p&gt;    参数：第一个参数是需要委托的元素，采用css选择器的写法，默认从一级子元素开始；第二个参数时要委托的事件，可以是多个，之间用空格隔开，第三个参数是处理函数。&lt;/p&gt;&lt;p&gt;    event指触发事件的那个对象。&lt;/p&gt;&lt;p&gt;    on():&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $list = $('list');&lt;br/&gt;    $list.on('click', 'li', function(event) {&lt;br/&gt;        $(this).css({background:'red'});&lt;br/&gt;    });&lt;br/&gt;})//给列表下面的每个li元素的事件委托给list列表。&lt;/p&gt;&lt;p&gt;    参数：&lt;br/&gt;        第一个是需要委托的事件，多个用空格隔开；&lt;br/&gt;        第二个是需要委托事件的子元素；&lt;br/&gt;        第三个是触发处理函数。&lt;/p&gt;&lt;p&gt;    one():委托触发一次自动取消委托&lt;/p&gt;&lt;p&gt;$(function(){&lt;br/&gt;    $('div').one('click',&quot;li&quot; function(event) {&lt;br/&gt;        $(this).css({&lt;br/&gt;        &quot;background&quot;: &quot;blue&quot;,&lt;br/&gt;        });&lt;br/&gt;    });&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;    说明：参数用法和on事件一样。&lt;br/&gt;    取消委托&lt;/p&gt;&lt;p&gt;    undelegate():&lt;/p&gt;&lt;p&gt;$list.undelegate();//选择器找到委托对象取消委托&lt;/p&gt;&lt;p&gt;    使用undelegate（）方法取消委托，所有的子元素的委托都将被取消。&lt;/p&gt;&lt;p&gt;    off():&lt;/p&gt;&lt;p&gt;    $list.off(&quot;click&quot;,&quot;li&quot;);&lt;/p&gt;&lt;p&gt;总结：&lt;br/&gt;    每一个事件相当于一个协程，异步操作；&lt;br/&gt;    所有的事件并列处理，事件不要嵌套事件，否则会出现重复绑定。&lt;br/&gt;    可以进行事件委托尽量使用委托，减少系统资源消耗。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ps：本博客转自博主    《天宇之游》  ，地址：&lt;span class=&quot;text_gray&quot;&gt;&lt;a class=&quot;gray&quot; href=&quot;http://www.cnblogs.com/cwp-bg/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cwp-bg/&lt;/a&gt;&lt;/span&gt;  ，再次感谢。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:35:00 +0000</pubDate>
<dc:creator>牙齿有个缺缺</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GP1014336455/p/7679543.html</dc:identifier>
</item>
<item>
<title>Python通过future处理并发 - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/7679529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/7679529.html</guid>
<description>&lt;h2 id=&quot;toc_1&quot;&gt;future初识&lt;/h2&gt;
&lt;p&gt;通过下面脚本来对future进行一个初步了解：&lt;br/&gt;例子1：普通通过循环的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; POP20_CC =&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CN IN US ID BR PK NG BD RU JP MX PH VN ET EG DE IR TR CD FR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;).split()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; BASE_URL = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://flupy.org/data/flags&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; DEST_DIR = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;downloads/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_flag(img,filename):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     path =&lt;span&gt; os.path.join(DEST_DIR,filename)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     with open(path,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fp:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        fp.write(img)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_flag(cc):
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}/{cc}/{cc}.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(BASE_URL,cc=&lt;span&gt;cc.lower())
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     resp =&lt;span&gt; requests.get(url)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resp.content
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; show(text):
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(text,end=&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    sys.stdout.flush()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; download_many(cc_list):
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; cc &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sorted(cc_list):
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         image =&lt;span&gt; get_flag(cc)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        show(cc)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         save_flag(image,cc.lower()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; len(cc_list)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(download_many):
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     t0 =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     count =&lt;span&gt; download_many(POP20_CC)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     elapsed = time.time()-&lt;span&gt;t0
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     msg = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n{} flags downloaded in {:.2f}s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg.format(count,elapsed))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     main(download_many)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子2：通过future方式实现，这里对上面的部分代码进行了复用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; concurrent &lt;span&gt;import&lt;/span&gt;&lt;span&gt; futures
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flags &lt;span&gt;import&lt;/span&gt;&lt;span&gt; save_flag, get_flag, show, main
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; MAX_WORKERS = 20
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; download_one(cc):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     image =&lt;span&gt; get_flag(cc)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    show(cc)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     save_flag(image, cc.lower()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cc
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; download_many(cc_list):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     workers =&lt;span&gt; min(MAX_WORKERS,len(cc_list))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    with futures.ThreadPoolExecutor(workers) as executor:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         res =&lt;span&gt; executor.map(download_one, sorted(cc_list))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; len(list(res))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     main(download_many)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别运行三次，两者的平均速度：13.67和1.59s，可以看到差别还是非常大的。&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;future&lt;/h2&gt;
&lt;p&gt;future是concurrent.futures模块和asyncio模块的重要组件&lt;br/&gt;从python3.4开始标准库中有两个名为Future的类：concurrent.futures.Future和asyncio.Future&lt;br/&gt;这两个类的作用相同：两个Future类的实例都表示可能完成或者尚未完成的延迟计算。与Twisted中的Deferred类、Tornado框架中的Future类的功能类似&lt;/p&gt;
&lt;p&gt;注意：&lt;span&gt;通常情况下自己不应该创建future，而是由并发框架(concurrent.futures或asyncio)实例化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原因：future表示终将发生的事情，而确定某件事情会发生的唯一方式是执行的时间已经安排好，因此只有把某件事情交给concurrent.futures.Executor子类处理时，才会创建concurrent.futures.Future实例。&lt;br/&gt;如：Executor.submit()方法的参数是&lt;span&gt;一个可调用的对象&lt;/span&gt;，调用这个方法后会为传入的可调用对象排定时间，&lt;span&gt;并返回一个future&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;客户端代码不能应该改变future的状态，并发框架在future表示的延迟计算结束后会改变期物的状态，我们无法控制计算何时结束。&lt;/p&gt;
&lt;p&gt;这两种future都有.done()方法，这个方法不阻塞，返回值是布尔值，指明future链接的可调用对象是否已经执行。客户端代码通常不会询问future是否运行结束，而是会等待通知。因此两个Future类都有&lt;span&gt;.add_done_callback()方法，这个方法只有一个参数，类型是可调用的对象，future运行结束后会调用指定的可调用对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;.result()方法是在两个Future类中的作用相同：返回可调用对象的结果，或者重新抛出执行可调用的对象时抛出的异常。但是如果future没有运行结束，result方法在两个Futrue类中的行为差别非常大。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对concurrent.futures.Future实例来说，调用.result()方法会阻塞调用方所在的线程，直到有结果可返回，此时，result方法可以接收可选的timeout参数，如果在指定的时间内future没有运行完毕，会抛出TimeoutError异常。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;而asyncio.Future.result方法不支持设定超时时间，在获取future结果最好使用yield from结构，但是concurrent.futures.Future不能这样做&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不管是asyncio还是concurrent.futures.Future都会有几个函数是返回future，其他函数则是使用future,在最开始的例子中我们使用的Executor.map就是在使用future，返回值是一个迭代器，迭代器的__next__方法调用各个future的result方法，因此我们得到的是各个futrue的结果，而不是future本身&lt;/p&gt;
&lt;p&gt;关于future.as_completed函数的使用，这里我们用了两个循环，一个用于创建并排定future,另外一个用于获取future的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; concurrent &lt;span&gt;import&lt;/span&gt;&lt;span&gt; futures
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flags &lt;span&gt;import&lt;/span&gt;&lt;span&gt; save_flag, get_flag, show, main
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; MAX_WORKERS = 20
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; download_one(cc):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     image =&lt;span&gt; get_flag(cc)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    show(cc)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     save_flag(image, cc.lower()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cc
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; download_many(cc_list):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     cc_list = cc_list[:5&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     with futures.ThreadPoolExecutor(max_workers=3&lt;span&gt;) as executor:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         to_do =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; cc &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sorted(cc_list):
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             future =&lt;span&gt; executor.submit(download_one,cc)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            to_do.append(future)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             msg = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Secheduled for {}:{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg.format(cc,future))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         results =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; future &lt;span&gt;in&lt;/span&gt;&lt;span&gt; futures.as_completed(to_do):
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             res =&lt;span&gt; future.result()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             msg = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}result:{!r}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg.format(future,res))
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            results.append(res)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; len(results)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     main(download_many)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/997599/201710/997599-20171016232748740-283326519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：Python代码是无法控制GIL，标准库中所有执行阻塞型IO操作的函数，在等待操作系统返回结果时都会释放GIL.运行其他线程执行，也正是因为这样，Python线程可以在IO密集型应用中发挥作用&lt;/p&gt;
&lt;p&gt;以上都是concurrent.futures启动线程，下面通过它启动进程&lt;/p&gt;
&lt;h2 id=&quot;toc_3&quot;&gt;concurrent.futures启动进程&lt;/h2&gt;
&lt;p&gt;concurrent.futures中的ProcessPoolExecutor类把工作分配给多个Python进程处理，因此，如果需要做CPU密集型处理，使用这个模块能绕开GIL，利用所有的CPU核心。&lt;br/&gt;其原理是一个ProcessPoolExecutor创建了N个独立的Python解释器，N是系统上面可用的CPU核数。&lt;br/&gt;使用方法和ThreadPoolExecutor方法一样&lt;/p&gt;

</description>
<pubDate>Mon, 16 Oct 2017 15:28:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/7679529.html</dc:identifier>
</item>
<item>
<title>编程思想与生活经验 - 与你在巅峰相会</title>
<link>http://www.cnblogs.com/bfwbfw/p/7679485.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bfwbfw/p/7679485.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1，内聚&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序=数据+操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       =数据结构+算法（PASCAL之父Nicklaus Wirth）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       =对象+消息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对象是什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对象就是保管好自己的东西，做好自己的事情的程序模块--------这就是内聚&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个对象往往需要跟其他对象打交道，既包括获取依赖于另一对象，也包括仰赖其他对象的行为，一旦发生便称为该对象依赖另一对象。只要有一个依赖另一个的现象发生，则这两者之间存在耦合，比如妈妈和婴儿。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，耦合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;耦合的程度就是耦合度，也就是双方依赖的程度，妈妈和婴儿之间是强耦合，而我们与快递小哥之间为弱耦合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4，依赖倒置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;高层模块不应该依赖底层模块，都依赖与抽象。抽象不应该依赖于细节，细节应该依赖抽象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;举一个例子：&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;假设你要买一个IPhone，卖IPhone的老板让你拿一头猪跟他换，可是你并没有养猪，你只会编程。所以你找到一位养猪户，说给他做一个养猪的APP来换他一头猪，他说换猪可以，但是得用一条金项链来换——所以这里就出现了一连串的对象依赖，从而造成了严重的耦合灾难。解决这个问题的最好的办法就是，买卖双发都依赖于抽象——也就是货币——来进行交换，这样一来耦合度就大为降低了。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;5，控制反转&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们要区分两个角色，server 跟 Client，也就是服务方和客户方。提供服务端的一方称为服务方，请求服务的一方称为客户方。&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;12.084103512015&quot;&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;当我们使用开发框架时，开发框架就是作为服务方，而我们自己编写的业务应用就是客户方。当Client调用server时，这个叫做一般的控制；而当server调用Client时，就是我们所说的控制反转，同时我们也将这个调用称为“回调”。控制反转跟依赖倒置都是一种编程思想，依赖倒置着眼于调用的形式，而控制反转则着眼于程序流程的控制权。一般来说，程序的控制权属于server，而一旦控制权交到Client，就叫控制反转。比如你去下馆子，你是Client餐馆是server。你点菜，餐馆负责做菜，程序流程的控制权属于server；而如果你去自助餐厅，程序流程的控制权就转到Client了，也就是控制反转。&lt;/span&gt;&lt;/p&gt;

&lt;span&gt;总结出开发框架与类库的区别：使用开发框架时，框架掌握程序流程的控制权，而使用类库时，则是应用程序掌握程序流程的控制权。或者说，使用框架时，程序的主循环位于框架中，而使用类库时，程序的主循环位于应用程序之中。框架会回调应用程序，而类库则不会回调应用程序。&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6，依赖注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A对象依赖于B对象，等价于A对象内部存在对B对象的“调用”，而前提是A对象内部拿到了B对象的引用。B对象的引用的来源无非有以下几种：A对象内部创建（无论是作为字段还是作为临时变量）、构造器注入、属性注入、方法注入。后面三种方式统称为“依赖注入”。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

</description>
<pubDate>Mon, 16 Oct 2017 15:26:00 +0000</pubDate>
<dc:creator>与你在巅峰相会</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bfwbfw/p/7679485.html</dc:identifier>
</item>
<item>
<title>3.ElasticSearch的倒排索引 - 刘耀</title>
<link>http://www.cnblogs.com/liu-yao/p/3ElasticSearch-de-dao-pai-suo-yin.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liu-yao/p/3ElasticSearch-de-dao-pai-suo-yin.html</guid>
<description>&lt;p&gt;常规的索引建立方式&lt;br/&gt;文档---&amp;gt; 关键词的映射过程（正向索引）&lt;/p&gt;
&lt;p&gt;比如: 我有很多个文章，如果想查询其中几个文章是否含有刘耀这个关键词，那么我就需要打开所以文章，找到里面含义刘耀的文章.这就是正向索引&lt;/p&gt;
&lt;p&gt;在搜索引擎中每个文件都对应一个文件ID，文件内容被表示为一系列关键词的集合（实际上在搜索引擎索引库中，关键词也已经转换为关键词ID）。例如“文档1”经过分词，提取了20个关键词，每个关键词都会记录它在文档中的出现次数和出现位置。（来自百度）&lt;/p&gt;
&lt;p&gt;得到正向索引的结构如下：&lt;/p&gt;
&lt;p&gt;“文档1”的ID &amp;gt; 单词1：出现次数，出现位置列表；单词2：出现次数，出现位置列表；…………。&lt;/p&gt;

&lt;p&gt;倒排方向建立索引&lt;/p&gt;
&lt;p&gt;关键词---&amp;gt; 文档的映射&lt;br/&gt;把正向索引的结果重新构造成倒排索引（反向索引）&lt;/p&gt;
&lt;p&gt;如图:&lt;/p&gt;
&lt;p&gt;图1:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;刘耀&lt;/td&gt;
&lt;td&gt;(1,&amp;lt;3,11&amp;gt;),(2,&amp;lt;7&amp;gt;),(3,&amp;lt;9&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;9&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;(1,&amp;lt;6&amp;gt;), (2,&amp;lt;1&amp;gt;), (3,&amp;lt;3&amp;gt;), (4,&amp;lt;9&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;(3,&amp;lt;2&amp;gt;), (5, &amp;lt;6&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;td&gt;(3, &amp;lt;1,12&amp;gt;), (3,&amp;lt;3,4&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;js&lt;/td&gt;
&lt;td&gt;(1, &amp;lt;1,16&amp;gt;), (5, &amp;lt;1&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;图2:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;20&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;10&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;刘耀&lt;/td&gt;
&lt;td&gt;(1,&amp;lt;3,11&amp;gt;,2),(2,&amp;lt;7&amp;gt;),(3,&amp;lt;9&amp;gt;,2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;13&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;(1,&amp;lt;6&amp;gt;,10), (2,&amp;lt;1&amp;gt;,2), (3,&amp;lt;3&amp;gt;,22), (4,&amp;lt;9&amp;gt;,12)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;(3,&amp;lt;2&amp;gt;,12), (5, &amp;lt;6&amp;gt;,2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;9&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;td&gt;(3, &amp;lt;1,12&amp;gt;,2), (3,&amp;lt;3,4&amp;gt;,2)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;js&lt;/td&gt;
&lt;td&gt;(1, &amp;lt;1, 16&amp;gt;,2), (5, &amp;lt;1&amp;gt;,2)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;把文档和单词进行组合运算&lt;br/&gt;TF代表频率的意思&lt;/p&gt;
&lt;p&gt;把每个出现关键词的文档都记录该文档的ID，&amp;lt;&amp;gt;括号里面的是这个关键词出现的位置,最后一位数字是出现的频率。&lt;/p&gt;
&lt;p&gt;当我根据关键词查找 例如查找刘耀，就可以直接搜到对应文档的ID&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:18:00 +0000</pubDate>
<dc:creator>刘耀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liu-yao/p/3ElasticSearch-de-dao-pai-suo-yin.html</dc:identifier>
</item>
<item>
<title>TypeScript中的怪语法 - SNYang</title>
<link>http://www.cnblogs.com/steven-yang/p/7679494.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/steven-yang/p/7679494.html</guid>
<description>&lt;h2 id=&quot;如何处理undefined-和-null&quot;&gt;如何处理undefined 和 null&lt;/h2&gt;
&lt;p&gt;undefined的含义是：一个变量没有初始化。&lt;br/&gt;null的含义是：一个变量的值是空。&lt;/p&gt;
&lt;h3 id=&quot;undefined-和-null-的最佳实践&quot;&gt;undefined 和 null 的最佳实践&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;核心思想: 避免null pointer错误。&lt;br/&gt;&lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/tips/null.html&quot;&gt;null is bad&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要避免这个问题，我们需要做到：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;对于不可能是null的变量：
&lt;ul&gt;&lt;li&gt;声明不能为 null 和 undefined。&lt;/li&gt;
&lt;li&gt;提示编译错误：当使用一个没有初始化的变量，而这个变量不能为undefined的时候。&lt;/li&gt;
&lt;li&gt;提示编译错误：当给一个不能为 null 和 undefined 的变量，赋值 null 和 undefined 的时候。&lt;br/&gt;如果使用了&quot;strictNullChecks&quot; 编译选项，TypeScript编译器默认任何变量都不能为 undefined 和 null。除非显式声明。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;var name: string;   // cannot be null and undefined.

name = undefined;    // Error: [ts] Type 'undefined' is not assignable to type 'string'.
name = null;         // Error: [ts] Type 'null' is not assignable to type 'string'.
console.log(name);   // Error: [ts] Variable 'address' is used before being assigned.&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;对于可能是undefined的变量:
&lt;ul&gt;&lt;li&gt;使用显式声明&lt;/li&gt;
&lt;li&gt;提示编译错误：当使用一个可能为null的变量的时候。&lt;/li&gt;
&lt;li&gt;使用前，需要确定不是undefined.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;var address: string | undefined; // can be undefined

class Person {
    name: string;               // cannot be null and undefined
    address?: string;           // can be undefined
}

var person : Person = {name: &quot;Joe&quot;};

console.log(person.address.toString()); // Error: [ts] Object is possibly 'undefined'.

if (person.address != undefined) {
    console.log(person.address.toString()); //Ok. as we checked the type
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;index-type-query---keyof&quot;&gt;Index Type Query - keyof&lt;/h2&gt;
&lt;p&gt;keyof 定义了一个Type, 这个Type的值来自于指定的类。&lt;/p&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;class Person {
    id: number;
    name: string;
    birthday: Date;
}

type personPropKeys = keyof Person; // same as: type personPropKeys = &quot;id&quot; | &quot;name&quot; | &quot;birthday&quot;

var propKey : personPropKeys;
propKey = &quot;id&quot;;     // OK
propKey = &quot;name&quot;;   // OK
propKey = &quot;age&quot;;    // Error: [ts] Type '&quot;age&quot;' is not assignable to type '&quot;id&quot; | &quot;name&quot; | &quot;birthday&quot;'.&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;用途 - 生成类的映射类型 - Mapped Types&lt;br/&gt;keyof的用途是很有趣的。比如：我们希望一个ReadOnlyPerson类，这个类和类Person的属性相同，不过其中每个属性都是只读的。&lt;br/&gt;TypeScript使用了keyof提供了下面的类:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;// Keep types the same, but make each property to be read-only.
type Readonly&amp;lt;T&amp;gt; = {
    readonly [P in keyof T]: T[P];
};

// Same property names, but make the value a promise instead of a concrete one
type Deferred&amp;lt;T&amp;gt; = {
    [P in keyof T]: Promise&amp;lt;T[P]&amp;gt;;
};

// Wrap proxies around properties of T
type Proxify&amp;lt;T&amp;gt; = {
    [P in keyof T]: { get(): T[P]; set(v: T[P]): void }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;类的参数属性---parameter-properties&quot;&gt;类的参数属性 - parameter properties&lt;/h2&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;class Person {
    // same as to define instance fields: id, name, age
    constructor(private id: number, public name: string, readonly age: number) {
    }

    get Id() : number {
        return this.id;
    }
}

var person = new Person(1, &quot;Mary&quot;, 14);
console.log(person.name);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;type-new-t&quot;&gt;Type: {new(): T}&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{new(): T}&lt;/code&gt; 的主要功能是让通用方法可以创建通用类型的对象。&lt;/p&gt;
&lt;p&gt;但是，这个故事有点长。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现方法1：通过一个方法。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;
// This is a generic method to create an object
function createObject&amp;lt;T&amp;gt;(name:string, creator: (arg: string) =&amp;gt; T) : T {
    return creator(name);
}

// now we have a class Person, we want to create it via function createObject
class Person {
    public constructor(name: string) {
        this.name = name;
    }

    name: string;
}

// we have to define a creator function
function createPerson(name: string): Person {
    return new Person(name);
}

// at end, we can create a person
var person = createObject&amp;lt;Person&amp;gt;(&quot;Kate&quot;, createPerson);
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;
// This is a generic method to create an object
function createObject&amp;lt;T&amp;gt;(name:string) : T {
    return new T(name);     // Error: [ts] 'T' only refers to a type, but is being used as a value here.
}

// now we have a class Person, we want to create it via function createObject
class Person {
    public constructor(name: string) {
        this.name = name;
    }

    name: string;
}

// at end, we can create a person
var person = createObject&amp;lt;Person&amp;gt;(&quot;Kate&quot;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;实现方法3：使用构造方法类型。&lt;br/&gt;结合以上的方法，TypeScript提供了一个新的方式。&lt;br/&gt;```ts&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;// This is a generic method to create an object&lt;br/&gt;function createObject(name:string, creator: {new(name: string): T}) : T {&lt;br/&gt;return new creator(name);&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;// now we have a class Person, we want to create it via function createObject&lt;br/&gt;class Person {&lt;br/&gt;public constructor(name: string) {&lt;br/&gt;this.name = name;&lt;br/&gt;}&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name: string;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;// at end, we can create a person&lt;br/&gt;var person = createObject(&quot;Kate&quot;, Person);&lt;/p&gt;
&lt;p&gt;console.log(person);&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3 id=&quot;更多的解释&quot;&gt;更多的解释&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{new(): T}&lt;/code&gt;的类型是一个 Type，因此可以用于定义变量和参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new()&lt;/code&gt;是描述构造函数的签名。所以在&lt;code&gt;new()&lt;/code&gt;中，也定义参数。比如：&lt;code&gt;{new(name: string): T}&lt;/code&gt;。&lt;br/&gt;&lt;code&gt;{new(): T}&lt;/code&gt;&lt;strong&gt;定义了一个返回类型为 T 的构造函数的Type&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;type NewObject&amp;lt;T&amp;gt; = {new(name: string): T};     // type NewPersonType = new (name: string) =&amp;gt; Person
var newPersonType: NewObject&amp;lt;Person&amp;gt; = Person;
var person2 = new newPersonType(&quot;Joe&quot;);

// we also can write like this, as {} is the root class of object type.
type ObjectEmpty = {new(): {}};     // type ObjectEmpty = new () =&amp;gt; {}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;剩余语法&quot;&gt;剩余语法&lt;/h2&gt;
&lt;h3 id=&quot;剩余参数---rest-parameters&quot;&gt;剩余参数 - Rest parameters&lt;/h3&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;function restFunction(first: string, second: string, ...args: string[]): void {
    console.log(args);      // [ 'three', 'four' ]
}

restFunction(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;对象传播---object-spread-and-rest&quot;&gt;对象传播 - Object Spread and Rest&lt;/h3&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;// shadow copy
var objCopy: any = {...obj};
console.log(objCopy);       // { x: 1, y: 'name', z: 2 }
console.log(objCopy === obj);   // false

// copy and change
var obj2 = {a: &quot;age&quot;};
objCopy = {...obj, z: &quot;zoo&quot;};
console.log(objCopy);       // { x: 1, y: 'name', z: 'zoo' }

// merge
var obj2 = {a: &quot;age&quot;};
objCopy = {...obj, ...obj2};
console.log(objCopy);       // { x: 1, y: 'name', z: 2, a: 'age' }

// copy and remove
let {z, ...objCopy2} = obj
console.log(objCopy2);      // { x: 1, y: 'name' }&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 16 Oct 2017 15:18:00 +0000</pubDate>
<dc:creator>SNYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/steven-yang/p/7679494.html</dc:identifier>
</item>
<item>
<title>JAVA基础总结2 - MengLvXing</title>
<link>http://www.cnblogs.com/lingf/p/7671023.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lingf/p/7671023.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 关键字&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　常用的关键字主要包括如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015130217590-763773073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 标识符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　简单而言标识符它其实就是用于标识某些东西的符号。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015130337980-100206976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 注释的应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　注释说明&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015143015480-1238634909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注释的作用：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015140009543-996459524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注释的应用：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015142638824-1374435932.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.4 常量和变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　常量的定义与分类&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015143125824-1515194130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　进制的由来&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015144035043-1576317134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　注意：byte 是1个字节 = 8个二进制位， 1K = 1024。&lt;/p&gt;

&lt;p&gt;　　进制的基本转换介绍&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015215725527-1141517315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015215350105-1885341298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　负数的进制&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015215940887-393112202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　变量的介绍&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015220038824-158533406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　JAVA的数据类型主要包含引用类型和基本数据类型，其中有8种基本数据类型&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015232257090-1733228673.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　变量的基本演示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015221531590-495397196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　类型提升与强制转换说明&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015232441168-2028137604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果分别是97与98，其实就是二进制和生活中文字对应的关系表，即ASCII编码表，反之：System.out.println(char('a' + 1))， 输出结果等于b， 其中b对应的编码表里面的数字是98。&lt;/p&gt;

&lt;p&gt;　　类型运算细节&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoTest20171015
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        int x = 3;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        byte b = 5;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        x = x + b;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;x=:&quot; + x); 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        byte b = 3;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        b = (byte)(b + 200);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;b=:&quot; + b); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为-53， 强制类型转换
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println('你' + 0); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为20320，即unicode国际编码表对应的关系&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;byte&lt;/span&gt; b = 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        b = 3+7;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;b=:&quot; + b); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为10
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        byte b1 = 3;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        byte b2 = 7;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        b = b1 + b2;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;b=:&quot; + b); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译报错，说int转换byte可能损失精度，原因是b1和b2是变量，其中它们的值是变化的，无法判断；
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;而上面b = 3+7是属于固定的常量，可以判断，所以输出结果等于10.&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x1 = 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x2 = 98&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             x = x1 +&lt;span&gt; x2;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         System.out.println(&quot;x=:&quot; + x); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为108，因为x1和x2默认都是int类型，所以最终运算结果还是为整型，即int类型。&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.5 运算符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　JAVA中主要包含以下6种运算符：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171015231444855-1158059057.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　算术运算符&lt;/p&gt;
&lt;p&gt;　　说明：算术运算符主要包含：+ - * /  %（取余，模运算） ++(自增：在原有数据基础之上+1，再赋给原有数据)  --&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016133532162-1183354110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　练习：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  　　&lt;span&gt;int&lt;/span&gt; x = 6370&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt;   　　x = x / 1000 * 1000
&lt;span&gt; 4&lt;/span&gt;  
&lt;span&gt; 5&lt;/span&gt;  　　System.out.println(x); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出结果为6000&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   
&lt;span&gt; 7&lt;/span&gt;   　　System.out.println(5 % 2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为1&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   
&lt;span&gt; 9&lt;/span&gt;  　　System.out.println(2 % 5); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为2&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;  　　System.out.println(3 % 5); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为3&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt;  　　System.out.println(-5 % 2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为-1&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 　　System.out.println(5%-2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为1&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;  
&lt;span&gt;17&lt;/span&gt;  　　System.out.println(5%5); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为0&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;  
&lt;span&gt;19&lt;/span&gt;   　　注意：任何数字和字符串相连接，其结果为字符串，如：System.out.println(&quot;ab&quot; + 5 + 5); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为ab55&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;  　　&lt;span&gt;int&lt;/span&gt; a = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  
&lt;span&gt;23&lt;/span&gt;  　　a++; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;a= a+1;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;  
&lt;span&gt;25&lt;/span&gt; 　　System.out.println(a); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为4&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;  
&lt;span&gt;27&lt;/span&gt; 　　&lt;span&gt;int&lt;/span&gt; a =3&lt;span&gt;,b;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;  　  b = a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;  
&lt;span&gt;31&lt;/span&gt;  　 System.out.println(&quot;a=&quot; + a + &quot;, b=&quot; + b); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果a=4, b=3&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;  
&lt;span&gt;33&lt;/span&gt;  　　&lt;span&gt;int&lt;/span&gt; a =3&lt;span&gt;,b;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;  
&lt;span&gt;35&lt;/span&gt;  　　b = ++&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;  
&lt;span&gt;37&lt;/span&gt;  　　System.out.println(&quot;a=&quot; + a + &quot;, b=&quot; + b); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果a=4, b=4&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;  
&lt;span&gt;39&lt;/span&gt;  　　&lt;span&gt;int&lt;/span&gt; i = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;  
&lt;span&gt;41&lt;/span&gt;  　　i = i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;  
&lt;span&gt;43&lt;/span&gt;  　　System.out.println(i) ;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016132114427-659946078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　赋值运算符&lt;/p&gt;
&lt;p&gt;　　说明：主要包含： =  +=  -=  /=  *=  %=&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 　&lt;span&gt;int&lt;/span&gt; a = 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; 　　a+=2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a = a + 2;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; 　　&lt;span&gt;short&lt;/span&gt; s = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; 　　s+= 4;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出结果为7
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 
&lt;span&gt;9&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; s = s+4; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;运行编译报错，有可能损失精度，原因是没有做强转，而s+=4可以自动做转换&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　比较运算符&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016133750115-1437409775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　逻辑运算符&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016133907084-999120797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　思考：逻辑运算符有什么用呢？&lt;/p&gt;
&lt;p&gt;　　用于连接两个boolean类型的表达式，如：2＜x &amp;lt; 5, x &amp;gt; 2 &amp;amp; x &amp;lt; 5;&lt;/p&gt;

&lt;p&gt;　　&amp;amp;符号的运算特点：&lt;/p&gt;
&lt;p&gt;　　true &amp;amp; true = true;&lt;/p&gt;
&lt;p&gt;　　true &amp;amp; false = false;&lt;/p&gt;
&lt;p&gt;　　false &amp;amp; true = false;&lt;/p&gt;
&lt;p&gt;　　false &amp;amp; false = false;&lt;/p&gt;
&lt;p&gt;　　&amp;amp;符号的运算规律：&lt;/p&gt;
&lt;p&gt;　　&amp;amp;运算符两边只有一个是false，结果肯定是false；只有两边都是true，结果才是true&lt;/p&gt;

&lt;p&gt;　　|符号的运算特点：&lt;/p&gt;
&lt;p&gt;　　true | true = true&lt;/p&gt;
&lt;p&gt;　　false | true = true&lt;/p&gt;
&lt;p&gt;　　true | false  = true&lt;/p&gt;
&lt;p&gt;　　false  | false = false&lt;/p&gt;
&lt;p&gt;　　|符号的运算规律&lt;/p&gt;
&lt;p&gt;　　|运算符 的两边只要有一个是true，结果肯定是true；只有两边都是false，结果才是false&lt;/p&gt;

&lt;p&gt;　　^：异或符号的运算特点：&lt;/p&gt;
&lt;p&gt;　　true ^ true = false&lt;/p&gt;
&lt;p&gt;　　false ^ true = true&lt;/p&gt;
&lt;p&gt;　　true ^ false  = true&lt;/p&gt;
&lt;p&gt;　　false  ^ false = false&lt;/p&gt;

&lt;p&gt;　　^符号的运算规律：&lt;/p&gt;
&lt;p&gt;　　^符号的两边结果如果相同，结果是false；两边的结果不同，结果是true。&lt;/p&gt;

&lt;p&gt;　　!：非运算符，判断事物的另一面&lt;/p&gt;
&lt;p&gt;　　!true = false;&lt;/p&gt;
&lt;p&gt;　　!false  = true;&lt;/p&gt;
&lt;p&gt;　　!!true = true;&lt;/p&gt;

&lt;p&gt;　　&amp;amp;&amp;amp;符号的运算特点：&lt;/p&gt;
&lt;p&gt;　　和&amp;amp;运算的结果是一样的，但是运算过程有点小区别。&lt;/p&gt;
&lt;p&gt;　　&amp;amp;符号无论左边的运算结果是什么，右边都参与运算；&amp;amp;&amp;amp;当左边为false时，右边不参与运算。　　&lt;/p&gt;

&lt;p&gt;　　||符号的运算特点：&lt;/p&gt;
&lt;p&gt;　　和|运算结果是一样的，但是运算过程有点小区别。&lt;/p&gt;
&lt;p&gt;　　|符号无论左边的运算结果是什么，右边都参与运算；||当左边是true时，右边不参与运算。&lt;/p&gt;

&lt;p&gt;　　位运算符&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016142823927-2053637627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;lt;&amp;lt; 相当于乘以2的倍数&lt;/p&gt;
&lt;p&gt;　　&amp;gt;&amp;gt; 相当于除以2的倍数&lt;/p&gt;
&lt;p&gt;　　移n位，就是对乘以或者除以2的n次幂。&lt;/p&gt;
&lt;p&gt; 　　图解&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016145632443-787857096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016220023834-1336239555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016221422162-1599033405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　三元运算符&lt;/p&gt;
&lt;p&gt;　　定义：简单而言就是三个元素参与运算的符号。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016225518537-507594345.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　演示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OperateDemo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[])
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; x = 0&lt;span&gt;, y;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             y = (x &amp;gt; 1)?100:200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             System.out.println(y); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出结果为200
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取两个整数中的较大的整数&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; a,b;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; max = (a&amp;gt;b)?&lt;span&gt;a:b;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取三个整数中的较大的整数&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; o,p,q;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp = (o&amp;gt;p)?&lt;span&gt;o:p;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; max2 = (temp&amp;gt;q)?&lt;span&gt;temp:q;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　练习：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016221611349-427059135.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1、 直接操作二进制位，或使用移位运算（2&amp;lt;&amp;lt;3）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/963729/201710/963729-20171016222405365-1087819239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2、&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OperateTest 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最有效率的方式算出2乘以8等于几&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         System.out.println(2&amp;lt;&amp;lt;3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对两个整型变量的值进行互换（不需要第三方变量）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; a = 3, b = 5&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         System.out.println(&quot;a=&quot;+a+&quot;,b=&quot;+&lt;span&gt;b);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开发时使用，使用第三方变量的形式，因为阅读性强
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        int c;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        c = a;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        a = b;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        b = c;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;a=&quot;+a+&quot;,b=&quot;+b);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这种方式最好不要用，如果两个整数的数值过大，会超出int范围，会强制转换，数值会变化。
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        a = a+b;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a = 3+5 = 8;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        b = a-b;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;b = 3+5-5 = 3;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        a = a-b;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a = 3+5-3 = 5;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(&quot;a=&quot;+a+&quot;,b=&quot;+b);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;面试时使用&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         a = a^b;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a = 3^5;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         b = a^b;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;b = (3^5)^5; b=3;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         a = a^b;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a = (3^5)^3; a=5;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         System.out.println(&quot;a=&quot;+a+&quot;,b=&quot;+&lt;span&gt;b);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.6 语句&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.7 函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.8 数组&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 15:00:00 +0000</pubDate>
<dc:creator>MengLvXing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lingf/p/7671023.html</dc:identifier>
</item>
<item>
<title>jquery事件使用方法总结 - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/7668940.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/7668940.html</guid>
<description>&lt;p&gt;jquery提供了许多的事件处理函数，学习前端一段时间了，下面对其总结一下，梳理一下知识点。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一鼠标事件&quot;&gt;一、鼠标事件&lt;/h2&gt;
&lt;h4 id=&quot;click鼠标单击事件&quot;&gt;1. click()：鼠标单击事件&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
$div.click(data,function (event) { //点击盒子变蓝
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    }); 
    console.log(event);
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数function：匿名函数有且只有一个默认的参数event，event输出事件相关的信息；&lt;strong&gt;不允许有其他的参数，可以不写&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;参数data：有时候需要传递额外的数据给函数，data可以是一个数组，&lt;strong&gt;不需要可以省略&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;扩展：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//event参数可以获取事件的各种属性，有几个常用

event.target:  获取触发事件的元素

$div.click(function (event) {
            $(event.target).css({
                    &quot;background&quot;: &quot;blue&quot;,
                });
    })
    
event.data: 获取事件传入的参数数据。
event.pageX: 获取鼠标光标点击距离文档左边left的距离；
event.pageY: 获取鼠标光标点击距离文档上边top的距离；

event.offsetX: 获取鼠标光标点击距离元素左边left的距离；
event.offssetY: 获取鼠标光标点击距离元素上边top的距离；

event.screenX: 获取鼠标光标点击距离屏幕left的距离；
event.screenY: 获取鼠标光标点击距离屏幕top的距离；&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;dblclick鼠标双击事件&quot;&gt;2. dblclick()：鼠标双击事件&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
$div.dblclick()(function (event) { //双击盒子变蓝
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });               
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数和click的用法完全一样，event同样可以获取众多的属性。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;鼠标进入和离开进入子元素也触发&quot;&gt;3. 鼠标进入和离开（进入子元素也触发）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;mouseover()：进入&lt;/li&gt;
&lt;li&gt;mouseout()：离开&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
$div.mouseover(function (event) { 
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });               
})
$div.mouseout(function (event) { 
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });               
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同上，绑定后鼠标进入元素的子元素会再次触发。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;鼠标进入和离开进入子元素不触发&quot;&gt;4. 鼠标进入和离开（进入子元素不触发）&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;mouseenter() 鼠标进入&lt;/li&gt;
&lt;li&gt;mouseleave() 鼠标离开&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
$div.mouseenter(function (event) { 
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });               
})
$div.mouseleave(function (event) { 
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });               
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同上，绑定后鼠标进入和离开子元素不会再次触发。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;hover同时为mouseenter和mouseleave事件指定处理函数&quot;&gt;5. hover():同时为mouseenter和mouseleave事件指定处理函数&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
// 鼠标进入和移出事件
    $div.hover(function (event) {
        $div.css({
            &quot;background&quot;: &quot;blue&quot;,
        })

    },function (event) {
        $div.css({
            &quot;background&quot;: &quot;red&quot;, 
        });
    })&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;hover可以同时加入两个function，第一个是鼠标进入触发，第二个是移出触发。&lt;/li&gt;
&lt;li&gt;前面不可以添加data参数，否则报错。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;鼠标按下和松开&quot;&gt;6. 鼠标按下和松开&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;mouseup() 松开鼠标&lt;/li&gt;
&lt;li&gt;mousedown() 按下鼠标&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$div = $(&quot;div&quot;)
$div.mousedown(function (event) {
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    console.log(event);
})

$div.mouseup(function (event) {
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    console.log(event);
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同click，和点击事件click不同的是，click在鼠标点击（包括按下和松开）后才触发事件，这里是按下或松开就会触发。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;mousemove-鼠标在元素内部移动&quot;&gt;7. mousemove() 鼠标在元素内部移动&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;同法和参数同上。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二键盘事件&quot;&gt;二、键盘事件&lt;/h2&gt;
&lt;h4 id=&quot;keypress按下键盘指的是按下&quot;&gt;*keypress()：按下键盘（指的是按下）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt; $(window).keypress([20],function (event) {
        $div.css({
            &quot;background&quot;: &quot;blue&quot;,
        });
    console.log(event.which);            
    })&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数：同鼠标事件，第一个参数传递数据，function默认参数event值按下键盘事件。&lt;/li&gt;
&lt;li&gt;键盘事件需要绑定可获得焦点的元素，如：input，body，html，一般绑定窗口：window。&lt;/li&gt;
&lt;li&gt;如果需要具体判断按下了那个按键，使用event.which,返回键盘字母的ascii码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;注意：如果按下不放开，事件会连续触发。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;按下和松开&quot;&gt;*按下和松开&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;keydown() 按下键盘&lt;/li&gt;
&lt;li&gt;keyup() 松开键盘&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$(window).keydown([20],function (event) {
    $div.css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    console.log(event);
})

$(window).keyup([20],function (event) {
    $div.css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    console.log(event);
})

&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同上。&lt;/li&gt;
&lt;li&gt;keydown和keypress方法区别在于，keypress事件不会触发所有的按键，比如 ALT、CTRL、SHIFT、ESC等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;三焦点事件&quot;&gt;三、焦点事件&lt;/h2&gt;
&lt;h4 id=&quot;元素获取和失去焦点&quot;&gt;* 元素获取和失去焦点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;blur() 元素失去焦点&lt;/li&gt;
&lt;li&gt;focus() 元素获得焦点&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$put = $(&quot;input&quot;);
$put.focus():元素自动获取焦点

$put.focus(function (event) {
    console.log(event);
        $div.css({
        &quot;background&quot;: &quot;blue&quot;,
            })
})//获取焦点后触发事件

$put.blur(function (event) {
    console.log(event);
        $div.css({
        &quot;background&quot;: &quot;blue&quot;,
            })
})//失去焦点后触发事件
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同click；&lt;/li&gt;
&lt;li&gt;焦点事件一般使用在input标签上，其他的标签一般得不到焦点。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;四表单事件&quot;&gt;四、表单事件&lt;/h2&gt;
&lt;h4 id=&quot;submit-用户递交表单&quot;&gt;* submit()： 用户递交表单&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(&quot;.form&quot;).submit(function (event) {
    alert(&quot;提交事件&quot;);
    console.log(event);
    //阻止系统默认事件
    event.defaultPrevented();
    return false;
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;submit事件绑定在form表单上，点击提交按钮时触发该事件，可以对系统默认的提交进行拦截。&lt;/li&gt;
&lt;li&gt;event.defaultPrevented();//阻止系统提交数据&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;五其他事件&quot;&gt;五、其他事件&lt;/h2&gt;
&lt;h4 id=&quot;readydom加载完成后执行&quot;&gt;* ready()：DOM加载完成后执行&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;这个事件用来防止js报错，每次引入js都要使用，不在赘述。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;resize浏览器窗口的大小发生改变触发事件&quot;&gt;* resize()：浏览器窗口的大小发生改变触发事件&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(window).resize(function () {
    console.log($(window).width());
   })
   &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同click,这个事件需要绑定在window上才会生效，用于监控窗口的变化。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;scroll滚动条的位置发生变化&quot;&gt;* scroll()：滚动条的位置发生变化&lt;/h4&gt;
&lt;h4 id=&quot;change-表单元素的值发生变化&quot;&gt;* change()： 表单元素的值发生变化&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$put.change(function () {
    $div.css({
        &quot;background&quot;: &quot;blue&quot;,
    });
                
})&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;当表单元素如单选框、多选框、文本框等值发生变化时触发。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;unload-用户离开页面&quot;&gt;* unload() ：用户离开页面&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(document).unload(function () {
    $div.css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    console.log(&quot;likai&quot;);
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;六通用的绑定事件和解绑方法&quot;&gt;六、通用的绑定事件和解绑方法&lt;/h2&gt;
&lt;h4 id=&quot;bind绑定&quot;&gt;* bind()：绑定&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(function(){
    $('div').bind('mouseover click', function(event) {
        alert($(this).html());
    });
});
   &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数：第一个参数为需要绑定的事件的名字，可以绑定多个事件，之间用空格隔开；第二个参数是处理函数。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;unbind解绑&quot;&gt;* unbind():解绑&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(function(){
    $('#div1').bind('mouseover click', function(event) {
        // $(this).unbind();解绑所有事件
        $(this).unbind('mouseover');解绑指定事件
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数同bind。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;on绑定和委托都可用的方法&quot;&gt;* on():绑定和委托都可用的方法&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(&quot;div&quot;).on(event,childSelector,data,function);
//四个参数

$(function(){
    $('div').on('mouseover click', function(event) {
        $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
        });
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;参数&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;event,需要绑定的事件，多个事件用空格隔开；&lt;/li&gt;
&lt;li&gt;function：事件的处理方法。&lt;/li&gt;
&lt;li&gt;childSelector：选择需要委托的元素，用于委托事件。&lt;/li&gt;
&lt;li&gt;data：额外的传参。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;off解绑&quot;&gt;* off():解绑&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$(function(){
    $('#div1').on('mouseover click', function(event) {
        // $(this).off();解绑所有事件
        $(this).off('mouseover');解绑指定事件
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;one绑定一次自动解绑&quot;&gt;* one():绑定一次自动解绑&lt;/h4&gt;
&lt;p&gt;如果需要触发事件一次后就自动失效，比如：按钮点击一次后 就失效使用这个方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$(function(){
    $('div').one('mouseover click', function(event) {
        $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
        });
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;注意：当一次性绑定多个事件时，多个事件相互是独立的，即如果有一个事件被触发，那么这个事件解绑，对另外没有被触发的事件没有影响。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;七自定义和主动触发事件&quot;&gt;七、自定义和主动触发事件&lt;/h2&gt;
&lt;p&gt;说明：对于系统没有提供的事件，可以自己定义并主动触发。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$div.bind(&quot;abc&quot;,function () {
    $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
    });
    
})
$div.trigger(&quot;abc&quot;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;trigger():触发事件的方法；这种方式类似协程。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;八事件的两大特征运用&quot;&gt;八、事件的两大特征运用：&lt;/h2&gt;
&lt;h3 id=&quot;事件的冒泡&quot;&gt;1. 事件的冒泡：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;定义：一个元素标签如div,在上面触发某种事件，如单击；如果div上没有定义单击事件或者定义了单击事件，但返回值不是false，即没有阻止冒泡；那么事件会向父级传递，每一个定义了单击事件的父级都会被触发事件，直到到达document或window。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;注意冒泡是事件的固有属性自定义不适用适合所有的系统事件&quot;&gt;注意：冒泡是事件的固有属性（自定义不适用），适合所有的系统事件。&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;作用： 允许多个事件被击中到父级处理，减少绑定次数，提高性能。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$(function(){
    var $box1 = $('.father');
    var $box2 = $('.son');
    var $box3 = $('.grandson');
    $box1.click(function() {
        alert('father');
    });
    $box2.click(function() {
        alert('son');
    });
    $box3.click(function(event) {
        alert('grandson');
       // event.stopPropagation();阻止冒泡

    });
    $(document).click(function(event) {
        alert('grandfather');
    });
})

......

&amp;lt;div class=&quot;father&quot;&amp;gt;
    &amp;lt;div class=&quot;son&quot;&amp;gt;
        &amp;lt;div class=&quot;grandson&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;说明：上面代码界面，单击“grandson”的div，所有事件都会被触发；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果要阻止事件冒泡，使用stopPropagation()&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;扩展：合并阻止操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;event.stopPropagation();//阻止冒泡
event.preventDefault();//阻止默认行为

// 合并写法：
return false;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;实际开发中，一般把阻止冒泡和阻止默认行为合并起来写。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;事件委托&quot;&gt;2. 事件委托&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;delegate():&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;$(function(){
    $list = $('list');
    $list.delegate('li', 'click', function(event) {
        $(this).css({background:'red'});
    });
})//给列表下面的每个li元素的事件委托给list列表。&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;参数：第一个参数是需要委托的元素，采用css选择器的写法，默认从一级子元素开始；第二个参数时要委托的事件，可以是多个，之间用空格隔开，第三个参数是处理函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;event指触发事件的那个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;on():&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;$(function(){
    $list = $('list');
    $list.on('click', 'li', function(event) {
        $(this).css({background:'red'});
    });
})//给列表下面的每个li元素的事件委托给list列表。&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;参数：
&lt;ul&gt;&lt;li&gt;第一个是需要委托的事件，多个用空格隔开；&lt;/li&gt;
&lt;li&gt;第二个是需要委托事件的子元素；&lt;/li&gt;
&lt;li&gt;第三个是触发处理函数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;one():委托触发一次自动取消委托&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;$(function(){
    $('div').one('click',&quot;li&quot; function(event) {
        $(this).css({
        &quot;background&quot;: &quot;blue&quot;,
        });
    });
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;undelegate():&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;$list.undelegate();//选择器找到委托对象取消委托&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;使用undelegate（）方法取消委托，所有的子元素的委托都将被取消。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;
&lt;p&gt;off():&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$list.off(&quot;click&quot;,&quot;li&quot;);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;总结&quot;&gt;总结：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;每一个事件相当于一个协程，异步操作；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有的事件并列处理，事件不要嵌套事件，否则会出现重复绑定。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以进行事件委托尽量使用委托，减少系统资源消耗。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 16 Oct 2017 14:55:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/7668940.html</dc:identifier>
</item>
</channel>
</rss>