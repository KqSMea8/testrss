<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>FastDFS 集群 安装 配置 - 纯洁的微笑</title>
<link>http://www.cnblogs.com/ityouknow/p/7769142.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ityouknow/p/7769142.html</guid>
<description>&lt;p&gt;这篇文章介绍如何搭建FastDFS 集群&lt;/p&gt;
&lt;p&gt;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。&lt;/p&gt;
&lt;p&gt;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;
&lt;p&gt;系统系统 centos6.5&lt;br/&gt;六台服务器：192.168.53.85/86/90&lt;br/&gt;192.168.54.73/74/75&lt;br/&gt;安装包：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;fastdfs-5.05.tar.gz&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;libfastcommon-1.0.36.zip&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx-1.7.9.tar.gz&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务器规划&lt;/p&gt;
&lt;p&gt;tracker服务器：192.168.53.85/86&lt;br/&gt;storage服务器：192.168.53.90&lt;br/&gt;192.168.54.73/74/75&lt;/p&gt;
&lt;h2 id=&quot;安装fastdfs全部&quot;&gt;安装Fastdfs(全部)&lt;/h2&gt;
&lt;p&gt;安装依赖包&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：FastDFS 5.x 取消了对 libevent 的依赖，添加了对 libfastcommon 的依赖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;在安装FastDFS和Nginx之前，需确保gcc、gcc-c++、 libstdc++-devel、make等依赖库和工具已经安装&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;#安装依赖软件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;yum&lt;/span&gt; -y install gcc gcc-c++ libstdc++-devel pcre-devel zlib-devel wget make
&lt;span class=&quot;kw&quot;&gt;yum&lt;/span&gt; -y groupinstall &lt;span class=&quot;st&quot;&gt;'Development Tools'&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装libfastcommon类库&lt;/p&gt;
&lt;p&gt;安装FastDFS必须先安装libfastcommon类库，否则会导致报错，安装直接根据如下几个步骤即可~&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;unzip&lt;/span&gt; libfastcommon-1.0.36.zip  -d /usr/local

&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/local/libfastcommon-1.0.36
&lt;span class=&quot;kw&quot;&gt;./make.sh&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;./make.sh&lt;/span&gt; install&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装FastDFS&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; -xvzf fastdfs-5.05.tar.gz -C /usr/local

&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/local/fastdfs-5.05
&lt;span class=&quot;kw&quot;&gt;./make.sh&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;./make.sh&lt;/span&gt; install&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装好之后，在/usr/bin目录下，可以看fdfs开头的命令工具&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;FastDFS安装完成之后，所有配置文件在/etc/fdfs目录下，tracker需要tracker.conf配置文件，storage需要storage.conf配置文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装tracker8586&quot;&gt;安装tracker（85/86）&lt;/h2&gt;
&lt;p&gt;将tracker.conf.sample文件重命名为tracker.conf，然后修改配置文件/etc/fdfs/tracker.conf&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 存储日志和数据的根目录&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;mkdir&lt;/span&gt; /root/fastdfs

&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /etc/fdfs
&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; tracker.conf.sample tracker.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只需要修改 base_pash路径（文件存储路径）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vi&lt;/span&gt; tracker.conf
&lt;span class=&quot;ot&quot;&gt;base_path=&lt;/span&gt;/root/fastdfs&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置文件中有这几个参数需要注意：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;#启用配置文件&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;disabled=&lt;/span&gt;false
&lt;span class=&quot;co&quot;&gt;#设置tracker的端口号&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;port=&lt;/span&gt;22122
&lt;span class=&quot;co&quot;&gt;#设置tracker的数据文件和日志目录（需手动创建）&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;base_path=&lt;/span&gt;/root/fastdfs
&lt;span class=&quot;co&quot;&gt;#设置http端口号&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;http.server_port&lt;/span&gt;=9090&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start&lt;/code&gt;尝试启动tracker&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# fdfs_trackerd /etc/fdfs/tracker.conf restart
[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没有报错，查看端口22122是否开始监听，确认启动是否成功。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# ps -ef&lt;span class=&quot;kw&quot;&gt;|grep&lt;/span&gt; fdfs
&lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt;      6078     1  0 11:59 ?        00:00:00 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start
&lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt;      6101  6054  0 12:01 pts/2    00:00:00 grep fdfs
[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# netstat -unltp &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; fdfs
&lt;span class=&quot;kw&quot;&gt;tcp&lt;/span&gt;        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      6078/fdfs_trackerd  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以查看tracker的日志是否启动成功&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# cat /root/fastdfs/logs/trackerd.log 
[&lt;span class=&quot;kw&quot;&gt;2017-10-09&lt;/span&gt; 11:59:12] INFO - FastDFS v5.05, base_path=/root/fastdfs, run_by ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，一个简单的的tracker配置就完成了，Tracker也成功启动~， 接下来要做的就是完成Storage的配置~&lt;/p&gt;

&lt;h2 id=&quot;安装storage90737475&quot;&gt;安装storage（90/73/74/75）&lt;/h2&gt;
&lt;p&gt;将存储节点分为两个组，其中group1 （72、73）、group2 （74、75）。&lt;/p&gt;
&lt;p&gt;创建存储目录和配置文件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mkdir&lt;/span&gt; /root/fastdfs

&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /etc/fdfs
&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; storage.conf.sample storage.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置&lt;/p&gt;
&lt;p&gt;storage主要完成base_path，store_path以及tracker的连接地址以及storage的http服务端口配置等。&lt;/p&gt;
&lt;p&gt;主要有如下几个参数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vi&lt;/span&gt; /etc/fdfs/storage.conf
&lt;span class=&quot;co&quot;&gt;# 内容&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;group_name=&lt;/span&gt;group1                   &lt;span class=&quot;co&quot;&gt;# 组名（第一组为group1，第二组为group2，依次类推...）&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;base_path=&lt;/span&gt;/root/fastdfs             &lt;span class=&quot;co&quot;&gt;# 数据和日志文件存储根目录&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;store_path0=&lt;/span&gt;/root/fastdfs           &lt;span class=&quot;co&quot;&gt;#第一个存储目录，第二个存储目录起名为：store_path1=xxx，其它存储目录名依次类推...&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;store_path_count=&lt;/span&gt;1                  &lt;span class=&quot;co&quot;&gt;# 存储路径个数，需要和store_path个数匹配&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.85:22122          &lt;span class=&quot;co&quot;&gt;# tracker服务器IP和端口&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.86:22122          &lt;span class=&quot;co&quot;&gt;# tracker服务器IP和端口&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动Storage&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;启动storage，会根据配置文件的设置自动创建多级存储目录，查看端口23000是否开始监听，确认启动是否成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; fdfs]# fdfs_storaged /etc/fdfs/storage.conf restart
[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; fdfs]# netstat -unltp &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; fdfs
&lt;span class=&quot;kw&quot;&gt;tcp&lt;/span&gt;        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      5551/fdfs_storaged  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以查看storage的日志是否启动成功。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; logs]# cat /root/fastdfs/logs/storaged.log 
[&lt;span class=&quot;kw&quot;&gt;2017-10-09&lt;/span&gt; 15:39:12] INFO - FastDFS v5.05, base_path=/root/fastdfs, store_path_count=1 ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证storage是否登记到tracker服务器&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;fdfs_monitor /etc/fdfs/storage.conf&lt;/code&gt;，运行fdfs_monitor查看storage服务器是否已经登记到tracker服务器。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;可以在任一存储节点上使用如下命令查看集群的状态信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;fdfs_monitor&lt;/span&gt; /etc/fdfs/storage.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果出现ip_addr = Active, 则表明storage服务器已经登记到tracker服务器，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Storage&lt;/span&gt; 1:
        &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; = 192.168.53.90
        &lt;span class=&quot;kw&quot;&gt;ip_addr&lt;/span&gt; = 192.168.53.90 (localhost)  &lt;span class=&quot;kw&quot;&gt;ACTIVE&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，tracker、storage等配置都完成并成功启动&lt;/p&gt;
&lt;p&gt;接下来，继续完成Nginx和fastdfs-nginx-module的安装和配置&lt;/p&gt;

&lt;h2 id=&quot;在storage上安装nginx&quot;&gt;在storage上安装nginx&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：fastdfs-nginx-module模块只需要安装到storage上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;解压安装包&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; -xvzf fastdfs-nginx-module_v1.16.tar.gz -C /usr/local
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; -zvxf nginx-1.7.9.tar.gz  -C /usr/local&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要先配置软链接:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/include/fastcommon /usr/local/include/fastcommon 
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/include/fastdfs /usr/local/include/fastdfs 
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;安装nginx的时候，添加 fastdfs-nginx-module-master模块，如：&lt;br/&gt;&lt;code&gt;./configure --add-module=../fastdfs-nginx-module/src/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/local/nginx-1.7.9
&lt;span class=&quot;kw&quot;&gt;./configure&lt;/span&gt; --prefix=/usr/local/nginx --add-module=/usr/local/fastdfs-nginx-module/src&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;configure 成功输出结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;checking&lt;/span&gt; for OS
 &lt;span class=&quot;kw&quot;&gt;+&lt;/span&gt; Linux 2.6.32-431.el6.x86_64 x86_64
&lt;span class=&quot;kw&quot;&gt;checking&lt;/span&gt; for C compiler ... found
 &lt;span class=&quot;kw&quot;&gt;+&lt;/span&gt; using GNU C compiler
 &lt;span class=&quot;kw&quot;&gt;+&lt;/span&gt; gcc version: 4.4.7 20120313 (Red Hat 4.4.7-18) &lt;span class=&quot;kw&quot;&gt;(GCC)&lt;/span&gt; 
&lt;span class=&quot;kw&quot;&gt;checking&lt;/span&gt; for gcc -pipe switch ... found

&lt;span class=&quot;kw&quot;&gt;......&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http access log file: &lt;span class=&quot;st&quot;&gt;&quot;/usr/local/nginx/logs/access.log&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http client request body temporary files: &lt;span class=&quot;st&quot;&gt;&quot;client_body_temp&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http proxy temporary files: &lt;span class=&quot;st&quot;&gt;&quot;proxy_temp&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http fastcgi temporary files: &lt;span class=&quot;st&quot;&gt;&quot;fastcgi_temp&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http uwsgi temporary files: &lt;span class=&quot;st&quot;&gt;&quot;uwsgi_temp&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;nginx&lt;/span&gt; http scgi temporary files: &lt;span class=&quot;st&quot;&gt;&quot;scgi_temp&quot;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;configure成功了&lt;/p&gt;
&lt;p&gt;接下来执行make和make install&lt;/p&gt;

&lt;p&gt;确定编译没有出错，再进行install&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt; install &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装成功，查看版本信息&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;/usr/local/nginx/sbin/nginx&lt;/span&gt; -V&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;配置fastdfs-nginx-module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入fastdfs-nginx-module的src目录，将md_fastdfs.conf配置文件拷贝到/etc/fdfs/目录中&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/local/fastdfs-nginx-module/src
&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; mod_fastdfs.conf /etc/fdfs/&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置 mod_fastdfs.conf&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /etc/fdfs/mod_fastdfs.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;一般只需改动以下几个参数即可：
&lt;span class=&quot;ot&quot;&gt;base_path=&lt;/span&gt;/root/fastdfs           &lt;span class=&quot;co&quot;&gt;#保存日志目录&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.85:22122
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.86:22122 
&lt;span class=&quot;ot&quot;&gt;storage_server_port=&lt;/span&gt;23000         &lt;span class=&quot;co&quot;&gt;#storage服务器的端口号&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;group_name=&lt;/span&gt;group1                 &lt;span class=&quot;co&quot;&gt;#当前服务器的group名&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;url_have_group_name&lt;/span&gt; = true        &lt;span class=&quot;co&quot;&gt;#文件url中是否有group名&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;store_path_count=&lt;/span&gt;1                &lt;span class=&quot;co&quot;&gt;#存储路径个数，需要和store_path个数匹配&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;store_path0=&lt;/span&gt;/root/fastdfs         &lt;span class=&quot;co&quot;&gt;#存储路径&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;group_count&lt;/span&gt; = 2                   &lt;span class=&quot;co&quot;&gt;#设置组的个数&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在末尾增加3个组的具体信息：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;group1&lt;/span&gt;]
&lt;span class=&quot;ot&quot;&gt;group_name=&lt;/span&gt;group1
&lt;span class=&quot;ot&quot;&gt;storage_server_port=&lt;/span&gt;23000
&lt;span class=&quot;ot&quot;&gt;store_path_count=&lt;/span&gt;1
&lt;span class=&quot;ot&quot;&gt;store_path0=&lt;/span&gt;/root/fastdfs

[&lt;span class=&quot;kw&quot;&gt;group2&lt;/span&gt;]
&lt;span class=&quot;ot&quot;&gt;group_name=&lt;/span&gt;group2
&lt;span class=&quot;ot&quot;&gt;storage_server_port=&lt;/span&gt;23000
&lt;span class=&quot;ot&quot;&gt;store_path_count=&lt;/span&gt;1
&lt;span class=&quot;ot&quot;&gt;store_path0=&lt;/span&gt;/root/fastdfs&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立M00至存储目录的符号连接。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -s /root/fastdfs/data /root/fastdfs/data/M00
&lt;span class=&quot;kw&quot;&gt;ll&lt;/span&gt; /root/fastdfs/data/M00&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;配置nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;配置文件目录下的nginx.conf，设置添加storage信息并保存。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /usr/local/nginx/conf/nginx.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将server段中的listen端口号改为8080，启动用户使用root。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;user&lt;/span&gt; root
&lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt;       8080&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在server段中添加：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~/group[1-2]/M00 {
    &lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt; /root/fastdfs/data&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;ngx_fastdfs_module;&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制fastdfs中的http.conf、mime.types文件到/etc/fdfs&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; /usr/local/fastdfs-5.05/conf/http.conf /usr/local/fastdfs-5.05/conf/mime.types  /etc/fdfs&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，nginx以及FastDFS插件模块设置完成。&lt;/p&gt;
&lt;h3 id=&quot;运行&quot;&gt;运行&lt;/h3&gt;
&lt;p&gt;运行nginx之前，先要把防火墙中对应的端口打开（本例中为8080）。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; -I INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
&lt;span class=&quot;kw&quot;&gt;/etc/init.d/iptables&lt;/span&gt; save&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动nginx，确认启动是否成功。（查看是否对应端口8080是否开始监听）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# /usr/local/nginx/sbin/nginx
&lt;span class=&quot;kw&quot;&gt;ngx_http_fastdfs_set&lt;/span&gt; pid=12768
[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# netstat -unltp &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; nginx
&lt;span class=&quot;kw&quot;&gt;tcp&lt;/span&gt;        0      0 0.0.0.0:8080                0.0.0.0:*                   LISTEN      12769/nginx  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可查看nginx的日志是否启动成功或是否有错误。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt; /usr/local/nginx/logs/error.log&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在error.log中没有错误，既启动成功。可以打开浏览器，直接访问http://192.168.53.90:8080，查看是否弹出nginx欢迎页面。&lt;/p&gt;
&lt;p&gt;查看到欢迎页则说明，nginx运行成功。之后依次在其它storage上全部安装上nginx并确认运行正常。&lt;/p&gt;
&lt;p&gt;将nginx设置为开机启动：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /etc/rc.d/rc.local&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将运行命令行添加进文件：&lt;code&gt;/usr/local/nginx/sbin/nginx&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;在tracker上安装nginx&quot;&gt;在tracker上安装nginx&lt;/h2&gt;
&lt;p&gt;在tracker上安装的nginx主要为了提供http访问的反向代理、负载均衡以及缓存服务。&lt;/p&gt;
&lt;h3 id=&quot;安装-1&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; -zvxf nginx-1.7.9.tar.gz  -C /usr/local&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行./configure进行安装前的设置，主要设置安装路径&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/local/nginx-1.7.9
&lt;span class=&quot;kw&quot;&gt;./configure&lt;/span&gt; --prefix=/usr/local/nginx&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行make进行编译，确保编译成功。&lt;/p&gt;

&lt;p&gt;运行make install进行安装。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt; install&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置-1&quot;&gt;配置&lt;/h3&gt;
&lt;p&gt;编辑/usr/local/nginx/conf配置文件目录下的nginx.conf，设置负载均衡&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /usr/local/nginx/conf/nginx.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置信息&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;worker_processes&lt;/span&gt;  4&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;#根据CPU核心数而定&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;events&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;worker_connections&lt;/span&gt;  65535&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;co&quot;&gt;#最大链接数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;use&lt;/span&gt; epoll&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;                        &lt;span class=&quot;co&quot;&gt;#新版本的Linux可使用epoll加快处理性能&lt;/span&gt;
}
&lt;span class=&quot;kw&quot;&gt;http&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;#设置group1的服务器&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;upstream&lt;/span&gt; fdfs_group1 {
        &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; 192.168.53.90:8080 weight=1 max_fails=2 fail_timeout=30s&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; 192.168.54.229:8080 weight=1 max_fails=2 fail_timeout=30s&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    }
    &lt;span class=&quot;co&quot;&gt;#设置group2的服务器&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;upstream&lt;/span&gt; fdfs_group2 {
        &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; 192.168.54.233:8080 weight=1 max_fails=2 fail_timeout=30s&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; 192.168.54.234:8080 weight=1 max_fails=2 fail_timeout=30s&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    }

   &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; {
       &lt;span class=&quot;co&quot;&gt;#设置服务器端口&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt;       8080&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;co&quot;&gt;#设置group1的负载均衡参数&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; /group1/M00 {
            &lt;span class=&quot;kw&quot;&gt;proxy_pass&lt;/span&gt; http://fdfs_group1&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
        &lt;span class=&quot;co&quot;&gt;#设置group2的负载均衡参数&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; /group2/M00 {
            &lt;span class=&quot;kw&quot;&gt;proxy_pass&lt;/span&gt; http://fdfs_group2&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
      }

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，nginx设置完成。&lt;/p&gt;
&lt;h3 id=&quot;运行-1&quot;&gt;运行&lt;/h3&gt;
&lt;p&gt;运行nginx之前，先要把防火墙中对应的端口打开（本例中为8080）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; -I INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
&lt;span class=&quot;kw&quot;&gt;/etc/init.d/iptables&lt;/span&gt; save&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动nginx，确认启动是否成功。（查看是否对应端口8080是否开始监听）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# /usr/local/nginx/sbin/nginx
&lt;span class=&quot;kw&quot;&gt;ngx_http_fastdfs_set&lt;/span&gt; pid=12768
[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; ~]# netstat -unltp &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; nginx
&lt;span class=&quot;kw&quot;&gt;tcp&lt;/span&gt;        0      0 0.0.0.0:8080                0.0.0.0:*                   LISTEN      12769/nginx  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可查看nginx的日志是否启动成功或是否有错误。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt; /usr/local/nginx/logs/error.log&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尝试上传一个文件到FastDFS，然后访问试试。先配置client.conf文件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; client.conf.sample  client.conf
&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /etc/fdfs/client.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改以下参数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;base_path=&lt;/span&gt;/root/fastdfs                   &lt;span class=&quot;co&quot;&gt;#日志存放路径&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.85:22122         
&lt;span class=&quot;ot&quot;&gt;tracker_server=&lt;/span&gt;192.168.53.86:22122 
&lt;span class=&quot;kw&quot;&gt;http.tracker_server_port&lt;/span&gt;=8080&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用/usr/local/bin/fdfs_upload_file上传一个文件，程序会自动返回文件的URL。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; fdfs]# fdfs_upload_file /etc/fdfs/client.conf /root/test.jpg
&lt;span class=&quot;kw&quot;&gt;group2/M00/00/00/wKg26VncfamAEqZ0AAu-4Kcs3QI677.jpg&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后使用浏览器访问:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;http&lt;/span&gt;://192.168.53.85:8080/group2/M00/00/00/wKg26VncfamAEqZ0AAu-4Kcs3QI677.jpg&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看有查看到图片,说明集群搭建成功！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ityouknow.com/assets/images/neo.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;生产中可以将：&lt;code&gt;/root/fastdfs&lt;/code&gt; 替换为：&lt;code&gt;/fdfs/storage&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;报错&quot;&gt;报错&lt;/h2&gt;
&lt;h3 id=&quot;编译nginx的时候报错&quot;&gt;编译nginx的时候报错&lt;/h3&gt;
&lt;p&gt;在nginx目录下，执行configure之后，进行make编译报错，报错内容如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;s&lt;/span&gt; -I src/mail \
                -o objs/addon/src/ngx_http_fastdfs_module.o \
                /usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c
&lt;span class=&quot;kw&quot;&gt;In&lt;/span&gt; file included from /usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c:6:
&lt;span class=&quot;kw&quot;&gt;/usr/local/fastdfs-nginx-module/src&lt;/span&gt;/common.c:&lt;span class=&quot;kw&quot;&gt;21&lt;/span&gt;:25: error: fdfs_define.h: No such file or directory

&lt;span class=&quot;kw&quot;&gt;......&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;/usr/local/fastdfs-nginx-module/src&lt;/span&gt;/ngx_http_fastdfs_module.c:&lt;span class=&quot;kw&quot;&gt;933&lt;/span&gt;: error: ‘true’ undeclared (first use in this function)
&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt;[1]: *** [objs/addon/src/ngx_http_fastdfs_module.o] Error 1
&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt;[1]: Leaving directory &lt;span class=&quot;kw&quot;&gt;`/usr/local/nginx-1.7.9&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;make: *** [build] Error 2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做以下修改&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /usr/local/fastdfs-nginx-module/src/config&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将、&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;CORE_INCS=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$CORE_INCS&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;CORE_INCS=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$CORE_INCS&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; /usr/include/fastdfs /usr/local/include/fastcommon/&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实就是改动了fastdfs的路径，没改之前直接访问&lt;code&gt;cd /usr/local/include/fastdfs&lt;/code&gt;为空目录。&lt;/p&gt;
&lt;p&gt;或者设置对应的软连接也可以。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/include/fastcommon /usr/local/include/fastcommon 
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/include/fastdfs /usr/local/include/fastdfs 
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -sv /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改完成之后在nginx目录，重新configure和make就好了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;./configure&lt;/span&gt; --prefix=/usr/local/nginx --add-module=/usr/local/fastdfs-nginx-module/src
&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;启动nginx报错&quot;&gt;启动nginx报错&lt;/h3&gt;
&lt;p&gt;在在storage上配置nginx相关信息后启动nginx，查看日志发现报错：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt; /usr/local/nginx/logs/error.log
&lt;span class=&quot;kw&quot;&gt;ngx_http_fastdfs_process_init&lt;/span&gt; pid=12770
[&lt;span class=&quot;kw&quot;&gt;2017-10-10&lt;/span&gt; 13:41:44] ERROR - file: ini_file_reader.c, line: 631, include file &lt;span class=&quot;st&quot;&gt;&quot;http.conf&quot;&lt;/span&gt; not exists, line: &lt;span class=&quot;st&quot;&gt;&quot;#include http.conf&quot;&lt;/span&gt;
[&lt;span class=&quot;kw&quot;&gt;2017-10-10&lt;/span&gt; 13:41:44] ERROR - file: /usr/local/fastdfs-nginx-module/src/common.c, line: 155, load conf file &lt;span class=&quot;st&quot;&gt;&quot;/etc/fdfs/mod_fastdfs.conf&quot;&lt;/span&gt; fail, ret code: 2
&lt;span class=&quot;kw&quot;&gt;2017/10/10&lt;/span&gt; 13:41:44 [alert] 12769#0: worker process 12770 exited with fatal code 2 and cannot be respawned&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;复制fastdfs中的http.conf、mime.types文件到/etc/fdfs&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cp&lt;/span&gt; /usr/local/fastdfs-5.05/conf/http.conf /usr/local/fastdfs-5.05/conf/mime.types  /etc/fdfs&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重启nginx&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;killall&lt;/span&gt; nginx
&lt;span class=&quot;kw&quot;&gt;/usr/local/nginx/sbin/nginx&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看日志，还报错：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@localhost&lt;/span&gt; logs]# cat /usr/local/nginx/logs/error.log
&lt;span class=&quot;kw&quot;&gt;ngx_http_fastdfs_process_init&lt;/span&gt; pid=12813
[&lt;span class=&quot;kw&quot;&gt;2017-10-10&lt;/span&gt; 14:05:33] ERROR - file: /usr/local/fastdfs-nginx-module/src/common.c, line: 180, config file: /etc/fdfs/mod_fastdfs.conf, you must set url_have_group_name to true to support multi-group!
&lt;span class=&quot;kw&quot;&gt;2017/10/10&lt;/span&gt; 14:05:33 [alert] 12812#0: worker process 12813 exited with fatal code 2 and cannot be respawned&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt;  /etc/fdfs/mod_fastdfs.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;url_have_group_name=&lt;/span&gt;false&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;url_have_group_name=&lt;/span&gt;true &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启正常&lt;/p&gt;

&lt;h3 id=&quot;测试图片无法访问&quot;&gt;测试图片无法访问&lt;/h3&gt;
&lt;p&gt;搭建完成之后，访问&lt;code&gt;http://192.168.53.85:8080/group2/M00/00/00/wKg26VncfamAEqZ0AAu-4Kcs3QI677.jpg&lt;/code&gt;&lt;br/&gt;地址图片总是报404无法找到，跟踪到storage服务器，查看nginx的error日志发现如下；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ERROR&lt;/span&gt; - file: /usr/local/fastdfs-nginx-module/src/common.c, line: 877, stat file: /root/fastdfs/data/00/00/wKg1Wlnchn2AOo0kAAu-4Kcs3QI239.jpg fail, errno: 13, error info: Permission denied&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因是nginx启动的时候默认会以nobody用户来启动，这样的话就权限访问&lt;code&gt;/root/fastdfs/data&lt;/code&gt;的权限&lt;/p&gt;
&lt;p&gt;修改这个问题有两个版本，第一个方案设置nginx以root身份启动，或者设置nobody用户权限可以访问&lt;code&gt;/root/fastdfs/data&lt;/code&gt;地址。这里只展示第一种方案的修改&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;vim&lt;/span&gt; /usr/local/nginx/conf/nginx.conf
&lt;span class=&quot;co&quot;&gt;# 修改nobody为root&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;user&lt;/span&gt; root&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启nginx后问题解决&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里有一个网友整理的word版本的安装配置文档，包括缓存各方面的内容比较全面，需要的朋友在公众号回复：“fastdfs”&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/wangmengjun/blog/1142982&quot;&gt;CentOS上安装分布式文件系统FastDFS &amp;amp; 配置和问题&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 01 Nov 2017 15:35:00 +0000</pubDate>
<dc:creator>纯洁的微笑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ityouknow/p/7769142.html</dc:identifier>
</item>
<item>
<title>PHP使用header方式实现文件下载 - 踏雪无痕SS</title>
<link>http://www.cnblogs.com/chenpingzhao/p/7768584.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenpingzhao/p/7768584.html</guid>
<description>&lt;p&gt;&lt;span&gt;php文件下载可以使用http的请求头加上php的IO可以实现，很久之前写过这么一个功能，后来代码没了，今天记录一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、先看一下一个正常的http请求&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;HTTP/1.1 200 OK
Server: Tengine
Content-Type: application/octet-stream
Content-Length: 5050697
Connection: keep-alive
Date: Thu, 12 Oct 2017 11:24:46 GMT
Accept-Ranges: bytes
Content-Disposition: attachment; filename=down/20170928/zjbb_2.9.5.apk
Expires: Thu, 12 Oct 2017 11:25:46 GMT
Cache-Control: max-age=60
Via: cache25.l2eu6-1[0,200-0,H], cache16.l2eu6-1[16,0], cache8.cn891[0,200-0,H], cache8.cn891[1,0]
Age: 1733678
X-Cache: HIT TCP_MEM_HIT dirn:6:277104755 mlen:-1
X-Swift-SaveTime: Sat, 14 Oct 2017 00:50:47 GMT
X-Swift-CacheTime: 93312000
Timing-Allow-Origin: *
EagleId: b73d0e1c15095411645886178e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、一些常见的header功能&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
header('HTTP/1.1 200 OK'); // ok 正常访问
header('HTTP/1.1 404 Not Found'); //通知浏览器 页面不存在
header('HTTP/1.1 301 Moved Permanently'); //设置地址被永久的重定向 301
header('Location: http://www.test.con/'); //跳转到一个新的地址
header('Refresh: 10; url=http://www.test.con/'); //延迟转向 也就是隔几秒跳转
header('X-Powered-By: PHP/7.0.0'); //修改 X-Powered-By信息
header('Content-language: en'); //文档语言
header('Content-Length: 1234'); //设置内容长度
header('Last-Modified: '.gmdate('D, d M Y H:i:s', $time).' GMT'); //告诉浏览器最后一次修改时间
header('HTTP/1.1 304 Not Modified'); //告诉浏览器文档内容没有发生改变
 
###内容类型###
header('Content-Type: text/html; charset=utf-8'); //网页编码
header('Content-Type: text/plain'); //纯文本格式
header('Content-Type: image/jpeg'); //JPG、JPEG 
header('Content-Type: application/zip'); // ZIP文件
header('Content-Type: application/pdf'); // PDF文件
header('Content-Type: audio/mpeg'); // 音频文件 
header('Content-type: text/css'); //css文件
header('Content-type: text/javascript'); //js文件
header('Content-type: application/json'); //json
header('Content-type: application/pdf'); //pdf
header('Content-type: text/xml'); //xml
header('Content-Type: application/x-shockw**e-flash'); //Flash动画
 
######
 
###声明一个下载的文件###
header('Content-Type: application/octet-stream');
header('Content-Disposition: attachment; filename=&quot;ITblog.zip&quot;');
header('Content-Transfer-Encoding: binary');
readfile('test.zip');
######
 
###对当前文档禁用缓存###
header('Cache-Control: no-cache, no-store, max-age=0, must-revalidate');
header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
######
 
###显示一个需要验证的登陆对话框### 
header('HTTP/1.1 401 Unauthorized'); 
header('WWW-Authenticate: Basic realm=&quot;Top Secret&quot;'); 
######
 
 
###声明一个需要下载的xls文件###
header('Content-Disposition: attachment; filename=abc.xlsx');
header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
header('Content-Length: '.filesize('./test.xls')); 
header('Content-Transfer-Encoding: binary'); 
header('Cache-Control: must-revalidate'); 
header('Pragma: public'); 
readfile('./test.xls'); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3、看下下载所要用的的请求头&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt; header(&quot;Content-type:application/octet-stream&quot;);
 header(&quot;Accept-Ranges:bytes&quot;);
 header(&quot;Accept-Length:&quot;.$file_Size);
 header(&quot;Content-Disposition: attachment; filename=&quot;.$filename);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;content-type：文件类型&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;Accept-Ranges：表示接收数据的类型或者范围，图片属于二进制的东西所以需要使用字节的方式传输&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;Accept-Length：表示接收的文件大小，php文件下载需要告诉浏览器下载的文件有多大&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;Content-Disposition：附件只需要把文件名给过去就可以，这个名称就是下载时显示的文件名称&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;4、php的文件操作出现的比较早，文件名是中文的时候需要注意转码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;$filename=iconv(&quot;UTF-8&quot;,&quot;GB2312&quot;,$filename);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5、php的文件下载机制是首先nginx把文件信息读入服务器内存，然后使用请求头把文件二进制信息通过浏览器传给客户端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;feof用来判断文件是否已经读到了末尾，fread用来把文件读入缓冲区，缓冲区的大小是1024，一边读取一边把数据输出到浏览器。为了下载的安全性每次读数据都进行字节的计数。文件读取完毕后关闭输入流&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;a、如果运行的过程中出现问题，可以&lt;span class=&quot;dc-title&quot;&gt;清空（擦掉）输出缓冲区，使用下面的代码即可&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
ob_clean();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;b、很多人喜欢用readfile，如果是大文件，可能会有问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;完整代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&amp;lt;?php
    ob_clean();
    $action = $_GET['action'];
    $filename = base64_decode($action);//传的参数encode了
    $filepath = '/data/www/www.test.com/'.$filename;

    if(!file_exists($filepath)){
        exit;
    }

    $fp=fopen($filepath,&quot;r&quot;);
    $filesize=filesize($filepath);

    header(&quot;Content-type:application/octet-stream&quot;);
    header(&quot;Accept-Ranges:bytes&quot;);
    header(&quot;Accept-Length:&quot;.$filesize);
    header(&quot;Content-Disposition: attachment; filename=&quot;.$filename);

    $buffer=1024;
    $buffer_count=0;
    while(!feof($fp)&amp;amp;&amp;amp;$file_Size-$buffer_count&amp;gt;0){
    $data=fread($fp,$buffer);
    $buffer_count+=$buffer;
        echo $data;
    }
    fclose($fp);

?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Wed, 01 Nov 2017 15:31:00 +0000</pubDate>
<dc:creator>踏雪无痕SS</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenpingzhao/p/7768584.html</dc:identifier>
</item>
<item>
<title>Java中Double保留后小数位的几种方法 - 的川</title>
<link>http://www.cnblogs.com/dichuan/p/7769098.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dichuan/p/7769098.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近做个小实验，其中一部分要求将表单提交的数据转换为double，这个功能其实很简单直接一句Double.parseDouble(request.getParameter(&quot;chinese&quot;).trim())就可以实现，但因为是统计成绩，所以需要保留小数点后两位，所以各种百度发现了很多解决方法，这里特意总结下，万一以后又用上了呢？&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;返回double型的&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1.能四舍五入&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; d = 114.145&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; d = (&lt;span&gt;double&lt;/span&gt;) Math.round(d * 100) / 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; System.out.println(d);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2. BigDecimal.ROUND_HALF_UP表示四舍五入，BigDecimal.ROUND_HALF_DOWN也是五舍六入，BigDecimal.ROUND_UP表示进位处理（就是直接加1），BigDecimal.ROUND_DOWN表示直接去掉尾数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; d = 114.145&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; BigDecimal b = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BigDecimal(d);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; d = b.setScale(2&lt;span&gt;, BigDecimal.ROUND_HALF_UP).doubleValue();        
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(d);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;返回String型的&lt;/h2&gt;
&lt;p&gt;1.#.00表示保留后两位，它的处理方式是直接截掉不要的尾数，不四舍五入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; d = 114.145&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; DecimalFormat df = &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#.00&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; String str =&lt;span&gt; df.format(d);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(str);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.%.2f表示保留后两位，它的处理方式也是直接截掉不要的尾数，不四舍五入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; d = 114.145&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; String.format(&quot;%.2f&quot;, d);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;RoundingMode.HALF_DOWN表示 五舍六入，负数先取绝对值再五舍六入再负数，RoundingMode.HALF_UP:表示四舍五入，负数先取绝对值再五舍六入再负数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; d = 114.145
&lt;span&gt;2&lt;/span&gt; NumberFormat nf =&lt;span&gt; NumberFormat.getNumberInstance();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保留两位小数&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; nf.setMaximumFractionDigits(2&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不需要四舍五入，可以使用RoundingMode.DOWN&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;nf.setRoundingMode(RoundingMode.UP);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; System.out.println(nf.format(d));
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 01 Nov 2017 15:25:00 +0000</pubDate>
<dc:creator>的川</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dichuan/p/7769098.html</dc:identifier>
</item>
<item>
<title>[译]你真的了解外边距折叠吗 - 闲鱼~</title>
<link>http://www.cnblogs.com/Ghunter/p/7766003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Ghunter/p/7766003.html</guid>
<description>&lt;blockquote readability=&quot;1.6666666666667&quot;&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://www.sitepoint.com/collapsing-margins/&quot; title=&quot;https://www.sitepoint.com/collapsing-margins/&quot;&gt;Collapsing Margins&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;外边距折叠是CSS布局中很小的一个知识点，但是却能够对我们的页面布局产生很大的影响。这篇文章详细介绍了外边距折叠的情况及如何避免，希望能够帮助大家加深理解。水平有限，翻译不当还请指正。&lt;br/&gt;~文章内容略显啰嗦，可以重点关注代码部分~&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;让我们来探究一下外边距折叠的结果是什么，它将怎样影响页面上的元素。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/CSS21/box.html#collapsing-margins&quot;&gt;W3C规范&lt;/a&gt;是这样定义外边距折叠的：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;In this specification, the expression collapsing margins means that adjoining margins (no non-empty content, padding, or border areas, or clearance separate them) of two or more boxes (which may be next to one another or nested) combine to form a single margin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单说，这个定义表明当垂直方向两个元素的外边距（&lt;em&gt;译&lt;/em&gt;：即&lt;code&gt;margin&lt;/code&gt;）相接触时，只有&lt;code&gt;margin&lt;/code&gt;值较大的会被选用，而&lt;code&gt;margin&lt;/code&gt;较小的元素的外边距会被折叠为0。在其中一个元素的&lt;code&gt;margin&lt;/code&gt;为负值的情况下，两元素的外边距是两者求和。如果两个元素的外边距都是负值，那么取较小的负值作为最终外边距（如-3px,-5px,取-5px）。这个定义适用于相邻或嵌套的元素上。&lt;br/&gt;在一些情况下元素的外边距不会折叠：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;浮动元素&lt;/li&gt;
&lt;li&gt;绝对定位元素&lt;/li&gt;
&lt;li&gt;行内块元素&lt;/li&gt;
&lt;li&gt;设置了&lt;code&gt;overflow&lt;/code&gt;不为&lt;code&gt;visible&lt;/code&gt;的元素（不会与其子元素发生外边距折叠）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cleared&lt;/code&gt;元素（上外边距不会与其父块的下外边距折叠。&lt;em&gt;译&lt;/em&gt;：此处不太理解，原文是They do not collapse their top margins with their parent block’s bottom margin.）&lt;/li&gt;
&lt;li&gt;根元素&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这是一个很难理解的概念，让我们来看一些例子。&lt;/p&gt;
&lt;h2 id=&quot;相邻元素间的外边界折叠&quot;&gt;相邻元素间的外边界折叠&lt;/h2&gt;
&lt;p&gt;相邻元素的外边距折叠。简言之，就是文档流（&lt;em&gt;译&lt;/em&gt;：normal document flow，国内常译为文档流）中垂直方向相邻的块级元素，只有&lt;code&gt;margin&lt;/code&gt;值最大的元素的外边距会被采用，而&lt;code&gt;margin&lt;/code&gt;较小的元素的外边距会被折叠为0。例如，如果一个元素的&lt;code&gt;margin-bottom&lt;/code&gt;为&lt;code&gt;25px&lt;/code&gt;，在其下方相邻的元素的&lt;code&gt;margin-top&lt;/code&gt;为&lt;code&gt;20px&lt;/code&gt;，那么只有&lt;code&gt;25px&lt;/code&gt;的下外边距会被应用，即两元素间的距离为&lt;code&gt;25px&lt;/code&gt;，而不是&lt;code&gt;45px&lt;/code&gt;（25+20）。&lt;br/&gt;这个行为最好通过一个简短的例子说明，请看下面的代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;h1 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cfc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cf9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/o_1398314844css-box-model_collapsing-margins.png&quot; alt=&quot;相邻元素间的外边距折叠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图1所示，两个元素间的间隙只有&lt;code&gt;25px&lt;/code&gt;，较小的外边距被折叠为0。如果上述例子中元素的外边距相等（如，都是20像素），那么两元素间的距离就只是&lt;code&gt;20px&lt;/code&gt;。&lt;br/&gt;有一种情况下会发生轻微的偏差：如果其中一个元素的上或下外边距为负数，那么最终的元素间距为正数与负数的和。下面这个示例展示了这一点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;h1 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cfc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cf9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;元素的下外边距是一个正数（&lt;code&gt;25px&lt;/code&gt;），&lt;code&gt;p&lt;/code&gt;元素的上外边距是一个负数（&lt;code&gt;-20px&lt;/code&gt;），在这种情况下，这两个值将进行求和计算得到最终的间距：&lt;code&gt;25px&lt;/code&gt; + (&lt;code&gt;-20px&lt;/code&gt;) = &lt;code&gt;5px&lt;/code&gt;。&lt;br/&gt;如果计算的结果是一个负数，将会导致一个元素覆盖另外一个元素。你可能会说负的外边距使元素在相反的方向上生成正的外边距，关于负的外边距的更多信息请查阅外边距。（&lt;em&gt;译&lt;/em&gt;：这句话翻译起来实在别扭，自行理解吧，也欢迎你在评论里给出自己的见解）&lt;/p&gt;
&lt;h2 id=&quot;父子元素间的外边距折叠&quot;&gt;父子元素间的外边距折叠&lt;/h2&gt;
&lt;p&gt;目前为止，我们只讨论了相邻元素间的外边距折叠，但同样的情况适用于外边界接触的父子元素间。这里的接触是指在相邻的&lt;code&gt;margin&lt;/code&gt;之间没有&lt;code&gt;padding&lt;/code&gt;，&lt;code&gt;border&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;。在下面的例子中，一个父元素包含了一个被设置了上外边距的子元素：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;h1 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cfc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cf9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上边的样式表中，为&lt;code&gt;p&lt;/code&gt;元素声明了一个上外边距，在下边的代码中可以看到&lt;code&gt;p&lt;/code&gt;元素是&lt;code&gt;div&lt;/code&gt;元素的子元素。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading Content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Paragraph content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图2中可以看到这段代码的结果：&lt;br/&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/t_1398314904css-box-model_collapsing-margins2.png&quot; alt=&quot;父子元素间的外边距折叠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你可能会认为&lt;code&gt;p&lt;/code&gt;元素和&lt;code&gt;h1&lt;/code&gt;元素的间距为&lt;code&gt;60px&lt;/code&gt;，因为&lt;code&gt;div&lt;/code&gt;元素的&lt;code&gt;margin-top&lt;/code&gt;是&lt;code&gt;40px&lt;/code&gt;，并且&lt;code&gt;p&lt;/code&gt;元素的&lt;code&gt;margin-top&lt;/code&gt;为&lt;code&gt;20px&lt;/code&gt;。你或许也会认为在&lt;code&gt;p&lt;/code&gt;元素的上方会有&lt;code&gt;20px&lt;/code&gt;的范围展示&lt;code&gt;div&lt;/code&gt;元素的背景色。但是如图所示，并非如此，因为发生了外边距折叠，导致只有最大的外边距被应用（和相邻块一样）。&lt;br/&gt;事实上如果&lt;code&gt;div&lt;/code&gt;元素没有上外边距（&lt;em&gt;译&lt;/em&gt;：即&lt;code&gt;margin-top&lt;/code&gt;为0）并且&lt;code&gt;p&lt;/code&gt;元素的&lt;code&gt;margin-top&lt;/code&gt;为&lt;code&gt;40px&lt;/code&gt;我们会得到相同的结果。&lt;code&gt;p&lt;/code&gt;元素的&lt;code&gt;40px&lt;/code&gt;上外边距转化成&lt;code&gt;div&lt;/code&gt;元素的上外边距，将&lt;code&gt;div&lt;/code&gt;元素下移&lt;code&gt;40px&lt;/code&gt;，并使&lt;code&gt;p&lt;/code&gt;元素紧贴&lt;code&gt;div&lt;/code&gt;顶部。在&lt;code&gt;div&lt;/code&gt;元素内&lt;code&gt;p&lt;/code&gt;元素的上方不会有背景色展示。&lt;br/&gt;为了使两个元素的外边距都展示，并且使&lt;code&gt;div&lt;/code&gt;的背景色展示在&lt;code&gt;p&lt;/code&gt;元素的上方，这里需要设置一个&lt;code&gt;border&lt;/code&gt;或者&lt;code&gt;padding&lt;/code&gt;去阻止外边距折叠。我们简单的为&lt;code&gt;div&lt;/code&gt;元素添加一个上边框，就可以得到最初期待的效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;h1 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cfc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
p &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#cf9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在图3中，我们可以看到&lt;code&gt;div&lt;/code&gt;元素与&lt;code&gt;h1&lt;/code&gt;元素的距离依旧是&lt;code&gt;40px&lt;/code&gt;，但是&lt;code&gt;p&lt;/code&gt;元素被下移了&lt;code&gt;20px&lt;/code&gt;的距离，因此显示了&lt;code&gt;20px&lt;/code&gt;范围的&lt;code&gt;div&lt;/code&gt;背景色（通过设置外边框）。&lt;br/&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/t_1398314949css-box-model_collapsing-margins3.png&quot; alt=&quot;设置border消除外边界折叠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们不希望在设计上展示可见的上边框，&lt;code&gt;1px&lt;/code&gt;的上内边距会产生同样的效果。记住&lt;code&gt;border&lt;/code&gt;和&lt;code&gt;padding&lt;/code&gt;应该应用在父&lt;code&gt;div&lt;/code&gt;上，在&lt;code&gt;p&lt;/code&gt;元素上不会阻止外边距折叠，因为&lt;code&gt;p&lt;/code&gt;元素的&lt;code&gt;margin&lt;/code&gt;在&lt;code&gt;border&lt;/code&gt;的外面。&lt;br/&gt;上述示例只讨论了单个父元素和单个子元素外边距接触的情况，同样的处理方式也适用于多重子孙元素（即，嵌套的元素。&lt;em&gt;译&lt;/em&gt;：原文是several children，字面意思是多个子元素，但实际指多重嵌套的子孙元素）均含有垂直相邻外边距的情况：即所有的外边距会折叠为一个单独的外边距。虽然上面的示例只提到了上外边距，但同样的效果作用于下外边距，下文会看到。&lt;br/&gt;在下面的示例中，我们嵌套了四层&lt;code&gt;div&lt;/code&gt;元素，每一个都设置了&lt;code&gt;10px&lt;/code&gt;的外边距。每个&lt;code&gt;div&lt;/code&gt;都设置了不同的背景色，所以我们可以清楚的看到外边距折叠的效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.a&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#777&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.b&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#999&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.c&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#bbb&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.e&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图4展示了上述 CSS 的结果。&lt;br/&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/t_1398314988css-box-model_collapsing-margins4.png&quot; alt=&quot;多层嵌套外边距折叠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正如这个例子所示，这段CSS的效果是引人注目的：所有的垂直方向外边距折叠为一个单独的，&lt;code&gt;10px&lt;/code&gt;的外边距。不同于水平方向所示的每个外边距都可见，虽然我们为每个元素设置了不同的背景色，但垂直方向并没有展示类似的颜色。整个块将会被放置在距文档流中其他元素&lt;code&gt;10px&lt;/code&gt;的位置上，所有嵌套的块的外边距将会折叠成一个。&lt;br/&gt;如上所述，阻止外边界折叠最简单的方法是为每个元素添加内边距或边框。如果我们希望每个元素间的外边距是&lt;code&gt;10px&lt;/code&gt;，可以通过简单的设置一个&lt;code&gt;9px&lt;/code&gt;的&lt;code&gt;margin&lt;/code&gt;和&lt;code&gt;1px&lt;/code&gt;的&lt;code&gt;padding&lt;/code&gt;来实现：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;9px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;微小的改动会阻止垂直方向上的外边距折叠，效果图5所示。&lt;br/&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/t_1398315046css-box-model_collapsing-margins5.png&quot; alt=&quot;阻止外边距折叠&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，考虑IE的兼容性是很重要的。第一个例子（图4）中的元素在IE中会直接展示位图5的效果。另外值得一提的是在IE之外的其他浏览器中，设置&lt;code&gt;overflow&lt;/code&gt;为不等于&lt;code&gt;visible&lt;/code&gt;的其他值时会产生同样的效果。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;尽管外边距折叠给人的第一印象不够直观，但它确实使得多层元素嵌套的情况更加简单，也更令人满意。如果有需要你也可以使用上述简单方式阻止外边距折叠。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;那么，现在你真的读懂外边距折叠了吗？不如我们来做个小小的测试吧。对A,B,C三个块级元素分别设置&lt;code&gt;margin&lt;/code&gt;如下图所示，请问：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;把B和C同时放到A中，BC间距是多少？&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;基于问题1，把B的&lt;code&gt;margin&lt;/code&gt;改为&lt;code&gt;-30px&lt;/code&gt;呢？&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;基于问题1，把BC的&lt;code&gt;margin&lt;/code&gt;均取负数呢？&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;把B放入A内，C放入B内时，ABC的位置是怎样的？&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;基于问题4，B的&lt;code&gt;margin&lt;/code&gt;为&lt;code&gt;-30px&lt;/code&gt;呢？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/Ghunter/1107122/o_QQ%E6%88%AA%E5%9B%BE20171101224413.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实践出真知，不确定答案的同学还是亲自动手试试吧:)&lt;/p&gt;
</description>
<pubDate>Wed, 01 Nov 2017 15:09:00 +0000</pubDate>
<dc:creator>闲鱼~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Ghunter/p/7766003.html</dc:identifier>
</item>
<item>
<title>IDEA 护眼色设置 背景行颜色取消等设置 - Dearzh</title>
<link>http://www.cnblogs.com/zh94/p/7769036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zh94/p/7769036.html</guid>
<description>
&lt;p&gt;首先做一些简答的记录，护眼色 等等的设置很久以前机器上已经设置过了，今天偶尔要在其他机器上重新做一些设置反而忘记了很多步骤，&lt;/p&gt;
&lt;p&gt;设置后的HTML页面如何所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1104472/201711/1104472-20171101220559701-153700740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，当只是设置General通用的颜色为护眼色时，那么对于html等页面的标签色背景色等等仍然还是灰色等默认颜色，于背景色相对于及其难看，所以在此记录一下如何设置通用颜色为背景色，并且针对特定的文本格式如html，java等格式，修改所对应的tag，attribute属性等的颜色设置。等等。。。&lt;/p&gt;
&lt;p&gt;OK,，开始：&lt;/p&gt;
&lt;p&gt;首先设置通用的背景颜色设置；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1104472/201711/1104472-20171101221949732-25302858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Setting设置中，找到Color Scheme（颜色方案设置）选择General，再选择所对应的颜色设置即可，&lt;/p&gt;
&lt;p&gt;在这里IDEA有一个很有意思，也或者说很简单的功能，他会在设置上方显示出所对应的属性等等，在方案下方则会显示所对应的例子介绍等：如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1104472/201711/1104472-20171101222230404-1074728368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在此时如果你想修改所对应的 //TODO：Visit Jb Web resources: 也就是所对应的注释的颜色显示，或者所对应的背景色时，&lt;/p&gt;
&lt;p&gt; 只需鼠标点击选中所对应的 行数据即可，或者点击空白地方则将会默认选中Default Text属性，然后设置该属性背景色即可喽。&lt;/p&gt;
&lt;p&gt;默认护眼色的RGB已经在第一个图片中显示出来了，直接按照所对应的RGB值，填写一下即可了，&lt;/p&gt;
&lt;p&gt;按照上述所给出的方法，当需要设置不同的 属性或标签的背景色时候，只需要通过鼠标单击下方的例子测试，多点击几下测试一下即可喽。&lt;/p&gt;
&lt;p&gt;给出一个简答的小例子：，假设此时需要修改HTML 页面类型的标签名字的颜色，但是却不知道标签名字是对应的哪一个属性设置：那么&lt;/p&gt;
&lt;p&gt;此时只需要选中任意一个标签的名称，IDEA便会自动选中所对应的属性设置，然后再设置所对应的字体颜色，背景颜色了等等都是可以的：如下图喽：&lt;/p&gt;
&lt;p&gt;次数选中的是&amp;lt;title&amp;gt;标签中的title这几个字，便会进行自动的匹配所对应的属性，如下图1和下图2，分别表示未选择前和选择后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1104472/201711/1104472-20171101230135060-1186034696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Titile后，则此时便会直接选中 tag name该标签，OK，不再多做解释啦~~~，有点废话太多了~~~，（担心某某人不太理解，哈哈，）OK如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1104472/201711/1104472-20171101230243498-1755729941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;；结束：&lt;/p&gt;
&lt;p&gt;后续有时间将会记录一些常用的， 如，jdk，tomcat，生成 war包，git，maven等 常用的一些配置，担心一次配置，多年不动，哈哈，把这些简单的配置再给忘却了，&lt;/p&gt;
&lt;p&gt;后续再翻看各种资料，简直悲催了的~~没谁啦，~~~~~~~ 所以说有时间养成记录的好习惯还是好的了，~ ，晚安&lt;/p&gt;
</description>
<pubDate>Wed, 01 Nov 2017 15:06:00 +0000</pubDate>
<dc:creator>Dearzh</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zh94/p/7769036.html</dc:identifier>
</item>
<item>
<title>五、在IDEA中使用GIt版本控制并将本地代码上传至Github - 纯新手</title>
<link>http://www.cnblogs.com/alone-striver/p/7745744.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alone-striver/p/7745744.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　    Git工具下载：https://git-scm.com/downloads 从官网下载。安装很简单，基本都是下一步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　安装完的第一件事情就是创建一个Git用户：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;git config --global user.email &quot;you@example.com&quot;&lt;br/&gt;git config --global user.name &quot;Your Name&quot;&lt;/p&gt;
&lt;p&gt;    还有一个比较重要的命令就是帮助命令：&lt;/p&gt;
&lt;p&gt;$ help help&lt;br/&gt;help: help [-dms] [pattern ...]&lt;br/&gt;Display information about builtin commands.&lt;/p&gt;
&lt;p&gt;Displays brief summaries of builtin commands. If PATTERN is&lt;br/&gt;specified, gives detailed help on all commands matching PATTERN,&lt;br/&gt;otherwise the list of help topics is printed.&lt;/p&gt;
&lt;p&gt;Options:&lt;br/&gt;-d output short description for each topic&lt;br/&gt;-m display usage in pseudo-manpage format&lt;br/&gt;-s output only a short usage synopsis for each topic matching&lt;br/&gt;PATTERN&lt;/p&gt;
&lt;p&gt;Arguments:&lt;br/&gt;PATTERN Pattern specifiying a help topic&lt;/p&gt;
&lt;p&gt;Exit Status:&lt;br/&gt;Returns success unless PATTERN is not found or an invalid option is given.&lt;/p&gt;
&lt;p&gt;  其它也有很多很常用很重要的命令，但我们要在使用的过程中去记忆比较好。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          gitHub是一个面向开源及私有&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053&quot; target=&quot;_blank&quot; data-lemmaid=&quot;12053&quot;&gt;软件&lt;/a&gt;项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。官方网站：https://github.com/ &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　没有账号的话，根据填写相应的注册信息，便可以申请一个账号。对于程序员来说github是一个比较好的工具和网站。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;          打开IDEA后 请按照步骤    File -》Settings -》Version Control -》Git -》 Path to Git executable 接下来的看截图吧！&lt;br/&gt;          &lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201710/762751-20171028002921992-1829054735.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       引入Git的路径之后，点击Test，如果可用会弹出如上窗口。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　打开IDEA工程项目后， 在菜单栏 VCS-》import  into Version Control -》Create Git Repository -》你的工程目录。 这样我们就把idea工程创建了一个Git Repository了，在工程文件目录下就会多了一个&lt;br/&gt;.git文件夹。这时项目中的文件会变成红色，表示文件提交到了本地git仓库当中。&lt;br/&gt;　　然后呢？&lt;br/&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201710/762751-20171028004035148-396246330.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下，创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，&lt;/p&gt;
&lt;p&gt;     有就跳到下一步，没有就通过下面命令创建：&lt;/p&gt;
&lt;p&gt;　　 &lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;ssh-keygen -t rsa -&lt;span class=&quot;constant&quot;&gt;C &lt;span class=&quot;string&quot;&gt;&quot;youremail@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171101221404935-772241884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，&lt;/p&gt;
&lt;p&gt;　　最后点击Add SSH key，这样就完成了SSH Key的加密。具体步骤也可看下面：&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://img.blog.csdn.net/20170414204647937&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170414204707499&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://img.blog.csdn.net/20170414204739187&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;http://img.blog.csdn.net/20170414204816539&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后自己创建一个仓库，使用下面红色字的命令，就可以把本地的库上传到github。&lt;/p&gt;
&lt;div class=&quot;Box-row&quot; readability=&quot;6.5&quot;&gt;
&lt;h3&gt;…or create a new repository on the command line&lt;/h3&gt;
&lt;div class=&quot;copyable-terminal js-zeroclipboard-container&quot; readability=&quot;8&quot;&gt;

&lt;pre class=&quot;f5 js-zeroclipboard-target&quot;&gt;
&lt;span class=&quot;user-select-contain&quot;&gt;echo &quot;# C-&quot; &amp;gt;&amp;gt; README.md
&lt;span class=&quot;user-select-contain&quot;&gt;git init
&lt;span class=&quot;user-select-contain&quot;&gt;git add README.md
&lt;span class=&quot;user-select-contain&quot;&gt;git commit -m &quot;first commit&quot;
&lt;span class=&quot;user-select-contain&quot;&gt;git remote add origin &lt;span class=&quot;js-git-clone-help-text&quot;&gt;https://github.com/zhuguangjin/C-.git
&lt;span class=&quot;user-select-contain mb-0&quot;&gt;git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Box-row&quot; readability=&quot;6&quot;&gt;
&lt;h3&gt;…or push an existing repository from the command line&lt;/h3&gt;
&lt;div class=&quot;copyable-terminal js-zeroclipboard-container&quot; readability=&quot;7&quot;&gt;

&lt;pre class=&quot;f5 js-zeroclipboard-target&quot;&gt;
&lt;span class=&quot;user-select-contain&quot;&gt;git remote add origin &lt;span class=&quot;js-git-clone-help-text&quot;&gt;https://github.com/zhuguangjin/C-.git
&lt;span class=&quot;user-select-contain&quot;&gt;git push -u origin master&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Box-row&quot; readability=&quot;9&quot;&gt;
&lt;h3&gt;…or import code from another repository&lt;/h3&gt;
&lt;p&gt;You can initialize this repository with code from a Subversion, Mercurial, or TFS project.&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Wed, 01 Nov 2017 14:43:00 +0000</pubDate>
<dc:creator>纯新手</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alone-striver/p/7745744.html</dc:identifier>
</item>
<item>
<title>数据分析与展示——NumPy库入门 - Python学习者</title>
<link>http://www.cnblogs.com/yan-lei/p/7768851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yan-lei/p/7768851.html</guid>
<description>&lt;p&gt;这是我学习北京理工大学嵩天老师的《Python数据分析与展示》课程的笔记。嵩老师的课程重点突出、层次分明，在这里特别感谢嵩老师的精彩讲解。&lt;/p&gt;

&lt;h2&gt;数据的维度&lt;/h2&gt;
&lt;p&gt;维度是一组数据的组织形式。数据维度就是在数据之间形成特定关系表达多种含义的一个概念。&lt;/p&gt;
&lt;h4&gt;一维数据:&lt;/h4&gt;
&lt;p&gt;一维数据由对等关系的有序或无序数据构成，采用线性方式组织。对应列表、数组和集合等概念。&lt;/p&gt;
&lt;p&gt;列表和数组：一组数据的有序结构。&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;p&gt;  列表：数据类型可以不同&lt;/p&gt;
&lt;p&gt;  数组：数据类型相同&lt;/p&gt;
&lt;h4&gt;二维数据：&lt;/h4&gt;
&lt;p&gt;二维数据由多个一维数据构成，是一维数据的组合形式。&lt;/p&gt;
&lt;p&gt;表格是典型的二维数据。其中，表头是二维数据的一部分&lt;/p&gt;
&lt;h4&gt;多维数据：&lt;/h4&gt;
&lt;p&gt;多维数据由一维或二维数据在新维度上扩展形成。例如增加时间维度的表格&lt;/p&gt;
&lt;h4&gt;高维数据：&lt;/h4&gt;
&lt;p&gt;高维数据仅利用最基本的二元关系展示数据间的复杂结构。利用键值对将数据组织起来的形成的数据关系。&lt;/p&gt;
&lt;h4&gt;数据维度的Python表示&lt;/h4&gt;
&lt;p&gt;一维数据：列表（有序）和集合（无序）类型&lt;/p&gt;
&lt;p&gt;二维数据：列表类型&lt;/p&gt;
&lt;p&gt;多维数据：列表类型&lt;/p&gt;
&lt;p&gt;高维数据：字典类型或数据表示格式（JSON、XML、YAML）&lt;/p&gt;
&lt;h2&gt;NumPy的数组对象：ndarray&lt;/h2&gt;
&lt;p&gt;NumPy是一个开源的Python科学计算基础库。NumPy提供了一个强大的N维数组对象ndarray，广播功能函数，整合C/C++/Fortran代码的工具，线性代数、傅里叶变换、随机数生成等功能。NumPy是SciPy、Pandas等数据处理或科学计算库的基础。&lt;/p&gt;
&lt;h4&gt;Numpy引用：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; numpy as np
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尽管别名可以省略或更改，建议使用上述约定的别名&lt;/p&gt;
&lt;h4&gt;引入ndarray的好处：&lt;/h4&gt;
&lt;p&gt;范例：计算A&lt;sup&gt;2&lt;/sup&gt; + B&lt;sup&gt;3&lt;/sup&gt; ，其中，A和B是一维数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; pySum():
    a &lt;/span&gt;= [0,1,2,3,4&lt;span&gt;]
    b &lt;/span&gt;= [9,8,7,6,5&lt;span&gt;]
    c &lt;/span&gt;=&lt;span&gt; []

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(a)):
        c.append(a[i]&lt;/span&gt;**2 + b[i]**3&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; c

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pySum())
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; npSum():
    a &lt;/span&gt;= np.array([0,1,2,3,4&lt;span&gt;])
    b &lt;/span&gt;= np.array([9,8,7,6,5&lt;span&gt;])

    c &lt;/span&gt;= a**2 + b**3

    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; c

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(npSum())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组对象可以去掉元素间运算所需要的循环，使一维向量更像单个数据。设置专门的数组对象，经过优化，可以提升这类应用的运算速度。&lt;/p&gt;
&lt;p&gt;观察：科学计算中，一个维度所有数据的类型往往相同。&lt;/p&gt;
&lt;p&gt;数组对象采用相同的数据类型，有助于节省运算和存储空间。&lt;/p&gt;
&lt;h4&gt;N维数组对象：ndarray&lt;/h4&gt;
&lt;p&gt;ndarray是一个多维数组对象，由两部分构成：实际的数据、描述这些数据的元数据（数据维度、数据类型等）。ndarray数组一般要求所有元素类型相同（同质），数组下标从0开始。&lt;/p&gt;
&lt;p&gt;使用np.array()生成一个ndarray数组（ndarray在程序中的别名是：array），np.array()输出成 [] 形式，元素由空格分割。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;轴（axis）：保存数据的维度&lt;/li&gt;
&lt;li&gt;秩（rank）：轴的数量&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;范例：生成一个ndarray数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
In [1]: &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np

In [&lt;/span&gt;2]: a = np.array([[0,1,2,3,4&lt;span&gt;],
   ...:             [&lt;/span&gt;9,8,7,6,5&lt;span&gt;]])
   ...:             

In [&lt;/span&gt;3&lt;span&gt;]: a
Out[&lt;/span&gt;3&lt;span&gt;]: 
array([[0, &lt;/span&gt;1, 2, 3, 4&lt;span&gt;],
       [&lt;/span&gt;9, 8, 7, 6, 5&lt;span&gt;]])

In [&lt;/span&gt;4]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a)
    [[0 &lt;/span&gt;1 2 3 4&lt;span&gt;]
    [&lt;/span&gt;9 8 7 6 5]]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;ndarray对象的属性&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.ndim&lt;/td&gt;
&lt;td&gt;秩，即轴的数量或维度的数量&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.shape&lt;/td&gt;
&lt;td&gt;ndarray 对象的尺寸，对于矩阵，n行m列&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.size&lt;/td&gt;
&lt;td&gt;ndarray对象元素的个数，相当于.shape中的n*m的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.dtype&lt;/td&gt;
&lt;td&gt;ndarray对象元素类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.itemsize&lt;/td&gt;
&lt;td&gt;ndarray对象中每个元素的大小，以字节为单位&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;范例：测试ndarray的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
In [5&lt;span&gt;]: a.ndim
Out[&lt;/span&gt;5]: 2&lt;span&gt;

In [&lt;/span&gt;6&lt;span&gt;]: a.shape
Out[&lt;/span&gt;6]: (2, 5&lt;span&gt;)

In [&lt;/span&gt;7&lt;span&gt;]: a.dtype
Out[&lt;/span&gt;7]: dtype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;int32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;8&lt;span&gt;]: a.itemsize
Out[&lt;/span&gt;8]: 4
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;ndarray的元素类型&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;22&quot;&gt;&lt;tr&gt;&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;布尔类型，True或False&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;intc&lt;/td&gt;
&lt;td&gt;与C语言中的int类型一致，一般是int32或int64&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;intp&lt;/td&gt;
&lt;td&gt;用于索引的整数，与C语言sszie_t一致，int32或int64&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;字节长度的整数，取值：[-128,127]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;16位长度的整数，取值：[-32768,32767]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;32位长度的整数，取值：[-2&lt;sup&gt;31&lt;/sup&gt;,2&lt;sup&gt;31&lt;/sup&gt;-1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;64位长度的整数，取值：[-2&lt;sup&gt;63&lt;/sup&gt;,2&lt;sup&gt;63&lt;/sup&gt;-1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;8位无符号整数，取值：[0,255]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;16位无符号整数，取值：[0,255]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;32位无符号整数，取值：[0,2&lt;sup&gt;32&lt;/sup&gt;-1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;64位无符号整数，取值：[0,2&lt;sup&gt;64&lt;/sup&gt;-1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;float16&lt;/td&gt;
&lt;td&gt;16位半精度浮点数：1位符号位，5位指数，10位尾数（(符号)尾数*10&lt;sup&gt;指数&lt;/sup&gt;）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;32位半精度浮点数：1位符号位，5位指数，23位尾数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;64位半精度浮点数：1位符号位，11位指数，23位尾数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;64位半精度浮点数：1位符号位，11位指数，52位尾数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td colspan=&quot;2&quot;&gt;复数：实部（.real） + j虚部（.imag）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;复数类型，实部和虚部都是32位浮点数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;complex128&lt;/td&gt;
&lt;td&gt;复数类型，实部和虚部都是64位浮点数&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;对比：Python语法仅支持整数、浮点数和复数3种类型。ndarray支持多种元素类型的原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;科学计算涉及数据较多，对存储和性能都有较高要求。&lt;/li&gt;
&lt;li&gt;对元素类型精细定义，有助于Numpy合理使用存储空间并优化性能。&lt;/li&gt;
&lt;li&gt;对元素类型精细定义，有助于程序员对程序规模有合理评估。&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;非同质的ndarray对象&lt;/h4&gt;
&lt;p&gt;ndarray数组可以由非同质对象构成。非同质ndarray元素为对象类型，无法有效发挥Numpy优势，尽量避免使用。&lt;/p&gt;
&lt;p&gt;范例：非同质的ndarray对象的类型为Object&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
In [9]: x = np.array([[0,1,2,3,4&lt;span&gt;],
   ...:             [&lt;/span&gt;9,8,7,6&lt;span&gt;] ])
   ...:             

In [&lt;/span&gt;10&lt;span&gt;]: x.shape
Out[&lt;/span&gt;10]: (2&lt;span&gt;,)

In [&lt;/span&gt;11&lt;span&gt;]: x.dtype
Out[&lt;/span&gt;11]: dtype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

In [&lt;/span&gt;12&lt;span&gt;]: x
Out[&lt;/span&gt;12]: array([list([0, 1, 2, 3, 4]), list([9, 8, 7, 6])], dtype=&lt;span&gt;object)

In [&lt;/span&gt;13&lt;span&gt;]: x.itemsize
Out[&lt;/span&gt;13]: 8&lt;span&gt;

In [&lt;/span&gt;14&lt;span&gt;]: x.size
Out[&lt;/span&gt;14]: 2
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ndarray数组的创建和变换&lt;/h2&gt;
&lt;h3&gt;ndarray数组的创建方法&lt;/h3&gt;
&lt;h4&gt;（1）从Pyhton中的列表、元祖等类型创建ndarray数组。&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
x = np.array(list/&lt;span&gt;tuple)
x &lt;/span&gt;= np.array(list/tuple,dtype=np.float32)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当np.array()不指定dtype时，NumPy将根据数据情况关联一个dtype类型。&lt;/p&gt;
&lt;p&gt;范例：创建ndarray数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
In [15]: x = np.array([0,1,2,3])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从列表类型创建&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;16]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
[0 &lt;/span&gt;1 2 3&lt;span&gt;]

In [&lt;/span&gt;17]: x = np.array((4,5,6,7))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从元组类型创建&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;18]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x) 
[&lt;/span&gt;4 5 6 7&lt;span&gt;]

In [&lt;/span&gt;19]: x = np.array([[1,2],[9,8],(0.1, 0.2)])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从列表和元组混合类型创建&lt;/span&gt;
&lt;span&gt;
In [&lt;/span&gt;20]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
[[ &lt;/span&gt;1.   2&lt;span&gt;. ]
 [ &lt;/span&gt;9.   8&lt;span&gt;. ]
 [ &lt;/span&gt;0.1  0.2]]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;（2）使用Numpy中函数创建ndarray数组，如：arange，ones，zeros等。&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.arange(n)&lt;/td&gt;
&lt;td&gt;类似range()函数，返回ndarray类型，元素从0到n-1&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.ones(shape)&lt;/td&gt;
&lt;td&gt;根据shape生成一个全1数组，shape是元组类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.zeros(shape)&lt;/td&gt;
&lt;td&gt;根据shape生成一个全0数组，shape是元组类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.full(shape,val)&lt;/td&gt;
&lt;td&gt;g根据shape生成一个数组，每个元素值都是val&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.eye(n)&lt;/td&gt;
&lt;td&gt;创建一个正方形的n*n单位矩阵，对角线为1，其余为0&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.ones_like(a)&lt;/td&gt;
&lt;td&gt;根据数组a的形状生成一个全1数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.zeros_like(a)&lt;/td&gt;
&lt;td&gt;根据数组a的形状生成一个全0数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.full_like(a,val)&lt;/td&gt;
&lt;td&gt;根据数组a形状生成一个数组，每个元素值都是val&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td colspan=&quot;2&quot;&gt;使用Numpy中其他函数创建ndarray数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.linspace()&lt;/td&gt;
&lt;td&gt;根据起止数据等间距地填充数据，形成数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.concatenate()&lt;/td&gt;
&lt;td&gt;将两个或多个数组合并成一个新的数组&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;范例：创建ndarray数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;128&quot;&gt;
&lt;pre&gt;
In [21]: np.arange(10&lt;span&gt;)
Out[&lt;/span&gt;21]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;span&gt;])

In [&lt;/span&gt;22]: np.ones((3,6&lt;span&gt;))
Out[&lt;/span&gt;22&lt;span&gt;]: 
array([[ &lt;/span&gt;1.,  1.,  1.,  1.,  1.,  1&lt;span&gt;.],
       [ &lt;/span&gt;1.,  1.,  1.,  1.,  1.,  1&lt;span&gt;.],
       [ &lt;/span&gt;1.,  1.,  1.,  1.,  1.,  1&lt;span&gt;.]])

In [&lt;/span&gt;23]: np.zeros((3,6),dtype=&lt;span&gt;np.int32)
Out[&lt;/span&gt;23&lt;span&gt;]: 
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0]])

In [&lt;/span&gt;24]: np.eye(5&lt;span&gt;)
Out[&lt;/span&gt;24&lt;span&gt;]: 
array([[ &lt;/span&gt;1&lt;span&gt;.,  0.,  0.,  0.,  0.],
       [ 0.,  &lt;/span&gt;1&lt;span&gt;.,  0.,  0.,  0.],
       [ 0.,  0.,  &lt;/span&gt;1&lt;span&gt;.,  0.,  0.],
       [ 0.,  0.,  0.,  &lt;/span&gt;1&lt;span&gt;.,  0.],
       [ 0.,  0.,  0.,  0.,  &lt;/span&gt;1&lt;span&gt;.]])

In [&lt;/span&gt;25]: x = np.ones((2,3,4&lt;span&gt;))

In [&lt;/span&gt;26]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
[[[ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]
  [ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]
  [ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]]

 [[ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]
  [ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]
  [ &lt;/span&gt;1.  1.  1.  1&lt;span&gt;.]]]

In [&lt;/span&gt;27&lt;span&gt;]: x.shape
Out[&lt;/span&gt;27]: (2, 3, 4&lt;span&gt;)

In [&lt;/span&gt;28]: a = np.linspace(1, 10, 4&lt;span&gt;)

In [&lt;/span&gt;29&lt;span&gt;]: a
Out[&lt;/span&gt;29]: array([  1.,   4.,   7.,  10&lt;span&gt;.])

In [&lt;/span&gt;30]: b = np.linspace(1, 10, 4, endpoint=&lt;span&gt;False)

In [&lt;/span&gt;31&lt;span&gt;]: b
Out[&lt;/span&gt;31]: array([ 1.  ,  3.25,  5.5 ,  7.75&lt;span&gt;])

In [&lt;/span&gt;32]: c =&lt;span&gt; np.concatenate((a,b))

In [&lt;/span&gt;33&lt;span&gt;]: c
Out[&lt;/span&gt;33]: array([  1.  ,   4.  ,   7.  ,  10.  ,   1.  ,   3.25,   5.5 ,   7.75])
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;（3）从字节流（raw bytes）中创建ndarray数组。&lt;/h4&gt;
&lt;h4&gt;（4）从文件中读取特定格式，创建ndarray数组。&lt;/h4&gt;
&lt;h3&gt;ndarray数组的变换&lt;/h3&gt;
&lt;p&gt;对于创建后的ndarray数组，可以对其进行维度变换和元素类型变换。&lt;/p&gt;
&lt;h4&gt;ndarray数组的维度变换&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.reshape(shape)&lt;/td&gt;
&lt;td&gt;不改变数组元素，返回一个shape形状的数组，原数组不变&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.resize(shape)&lt;/td&gt;
&lt;td&gt;与.reshape()功能一致，但修改原数组&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.swapaxes(ax1,ax2)&lt;/td&gt;
&lt;td&gt;将数组n个维度中两个维度进行调换&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;.flatten()&lt;/td&gt;
&lt;td&gt;对数组进行降维，返回折叠后的一维数组，原数组不变&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;181&quot;&gt;
&lt;pre&gt;
&lt;br/&gt;In [34]: a = np.ones((2,3,4), dtype=&lt;span&gt;np.int32)

In [&lt;/span&gt;35]: a.reshape((3,8&lt;span&gt;))
Out[&lt;/span&gt;35&lt;span&gt;]: 
array([[&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;],
       [&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;],
       [&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;]])

In [&lt;/span&gt;36&lt;span&gt;]: a
Out[&lt;/span&gt;36&lt;span&gt;]: 
array([[[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]],

       [[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]]])

In [&lt;/span&gt;37]: a.resize((3,8&lt;span&gt;))

In [&lt;/span&gt;38&lt;span&gt;]: a
Out[&lt;/span&gt;38&lt;span&gt;]: 
array([[&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;],
       [&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;],
       [&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;]])

In [&lt;/span&gt;39]: a = np.ones((2,3,4), dtype=&lt;span&gt;np.int32)

In [&lt;/span&gt;40&lt;span&gt;]: a.flatten()
Out[&lt;/span&gt;40&lt;span&gt;]: 
array([&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1&lt;span&gt;])

In [&lt;/span&gt;41&lt;span&gt;]: a
Out[&lt;/span&gt;41&lt;span&gt;]: 
array([[[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]],

       [[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]]])

In [&lt;/span&gt;42]: b =&lt;span&gt; a.flatten()

In [&lt;/span&gt;43&lt;span&gt;]: b
Out[&lt;/span&gt;43&lt;span&gt;]: 
array([&lt;/span&gt;1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;ndarray数组的类型变换&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
new_a = a.astype(new_type)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;范例：数组类型变换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
In [44]: a = np.ones((2,3,4), dtype=&lt;span&gt;np.int)

In [&lt;/span&gt;45&lt;span&gt;]: a
Out[&lt;/span&gt;45&lt;span&gt;]: 
array([[[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]],

       [[&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;],
        [&lt;/span&gt;1, 1, 1, 1&lt;span&gt;]]])

In [&lt;/span&gt;46]: b =&lt;span&gt; a.astype(np.float)

In [&lt;/span&gt;47&lt;span&gt;]: b
Out[&lt;/span&gt;47&lt;span&gt;]: 
array([[[ &lt;/span&gt;1.,  1.,  1.,  1&lt;span&gt;.],
        [ &lt;/span&gt;1.,  1.,  1.,  1&lt;span&gt;.],
        [ &lt;/span&gt;1.,  1.,  1.,  1&lt;span&gt;.]],

       [[ &lt;/span&gt;1.,  1.,  1.,  1&lt;span&gt;.],
        [ &lt;/span&gt;1.,  1.,  1.,  1&lt;span&gt;.],
        [ &lt;/span&gt;1.,  1.,  1.,  1.]]])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;astype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致。&lt;/p&gt;
&lt;h4&gt;ndarray数组向列表的转换&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ls = a.tolist()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;范例：ndarray数组向列表的转换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
In [48]: a = np.full((2,3,4), 25, dtype=&lt;span&gt;np.int32)

In [&lt;/span&gt;49&lt;span&gt;]: a
Out[&lt;/span&gt;49&lt;span&gt;]: 
array([[[&lt;/span&gt;25, 25, 25, 25&lt;span&gt;],
        [&lt;/span&gt;25, 25, 25, 25&lt;span&gt;],
        [&lt;/span&gt;25, 25, 25, 25&lt;span&gt;]],

       [[&lt;/span&gt;25, 25, 25, 25&lt;span&gt;],
        [&lt;/span&gt;25, 25, 25, 25&lt;span&gt;],
        [&lt;/span&gt;25, 25, 25, 25&lt;span&gt;]]])

In [&lt;/span&gt;50&lt;span&gt;]: a.tolist()
Out[&lt;/span&gt;50&lt;span&gt;]: 
[[[&lt;/span&gt;25, 25, 25, 25], [25, 25, 25, 25], [25, 25, 25, 25&lt;span&gt;]],
 [[&lt;/span&gt;25, 25, 25, 25], [25, 25, 25, 25], [25, 25, 25, 25]]]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ndarray数组的操作&lt;/h2&gt;
&lt;h4&gt;数组的索引和切片&lt;/h4&gt;
&lt;p&gt;索引：获取数组中特定位置元素的过程&lt;/p&gt;
&lt;p&gt;切片：获取数组元素子集的过程&lt;/p&gt;
&lt;p&gt;一维数组的索引和切片：与Python的列表类似&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
In [51]: a = np.array([9,8,7,6,5&lt;span&gt;])

In [&lt;/span&gt;52]: a[2&lt;span&gt;]
Out[&lt;/span&gt;52]: 7&lt;span&gt;

In [&lt;/span&gt;53]: a[1:4:2]     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 起始编号 : 终止编号（不含） : 步长（3元素冒号分割），编号0开始从左递增，或-1开始从右递减&lt;/span&gt;
Out[53]: array([8, 6])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多维数组的索引：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
In [54]: &lt;span&gt;a = np.arange(24).reshape((2,3,4&lt;/span&gt;&lt;span&gt;&lt;span&gt;))&lt;/span&gt;

In [&lt;/span&gt;55&lt;span&gt;]: a
Out[&lt;/span&gt;55&lt;span&gt;]: 
array([[[ 0,  &lt;/span&gt;1,  2,  3&lt;span&gt;],
        [ &lt;/span&gt;4,  5,  6,  7&lt;span&gt;],
        [ &lt;/span&gt;8,  9, 10, 11&lt;span&gt;]],

       [[&lt;/span&gt;12, 13, 14, 15&lt;span&gt;],
        [&lt;/span&gt;16, 17, 18, 19&lt;span&gt;],
        [&lt;/span&gt;20, 21, 22, 23&lt;span&gt;]]])

In [&lt;/span&gt;56]: a[1,2,3]         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每个维度一个索引值，逗号分割&lt;/span&gt;
Out[56]: 23&lt;span&gt;

In [&lt;/span&gt;57]: a[0,1,2&lt;span&gt;]
Out[&lt;/span&gt;57]: 6&lt;span&gt;

In [&lt;/span&gt;58]: a[-1,-2,-3&lt;span&gt;] 
Out[&lt;/span&gt;58]: 17
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;多维数组的切片：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
In [59]: a[: , 1, -3]         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 选取一个维度用&lt;/span&gt;
Out[59]: array([ 5, 17&lt;span&gt;])

In [&lt;/span&gt;60]: a[: , 1:3, :]         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每个维度切片方法与一维数组相同&lt;/span&gt;
Out[60&lt;span&gt;]: 
array([[[ &lt;/span&gt;4,  5,  6,  7&lt;span&gt;],
        [ &lt;/span&gt;8,  9, 10, 11&lt;span&gt;]],

       [[&lt;/span&gt;16, 17, 18, 19&lt;span&gt;],
        [&lt;/span&gt;20, 21, 22, 23&lt;span&gt;]]])

In [&lt;/span&gt;61]: a[: , :, ::2]         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每个维度可以使用步长跳跃切片&lt;/span&gt;
Out[61&lt;span&gt;]: 
array([[[ 0,  &lt;/span&gt;2&lt;span&gt;],
        [ &lt;/span&gt;4,  6&lt;span&gt;],
        [ &lt;/span&gt;8, 10&lt;span&gt;]],

       [[&lt;/span&gt;12, 14&lt;span&gt;],
        [&lt;/span&gt;16, 18&lt;span&gt;],
        [&lt;/span&gt;20, 22]]])
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ndarray数组的运算&lt;/h2&gt;
&lt;h4&gt;数组与标量之间的运算&lt;/h4&gt;
&lt;p&gt;数组与标量之间的运算作用于数组的每一个元素&lt;/p&gt;
&lt;p&gt;范例：计算a与元素平均值的商&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
In [62&lt;span&gt;]: a.mean()
Out[&lt;/span&gt;62]: 11.5&lt;span&gt;

In [&lt;/span&gt;63]: a = a/&lt;span&gt;a.mean()

In [&lt;/span&gt;64&lt;span&gt;]: a
Out[&lt;/span&gt;64&lt;span&gt;]: 
array([[[ 0.        ,  &lt;/span&gt;0.08695652,  0.17391304,  0.26086957&lt;span&gt;],
        [ &lt;/span&gt;0.34782609,  0.43478261,  0.52173913,  0.60869565&lt;span&gt;],
        [ &lt;/span&gt;0.69565217,  0.7826087 ,  0.86956522,  0.95652174&lt;span&gt;]],

       [[ &lt;/span&gt;1.04347826,  1.13043478,  1.2173913 ,  1.30434783&lt;span&gt;],
        [ &lt;/span&gt;1.39130435,  1.47826087,  1.56521739,  1.65217391&lt;span&gt;],
        [ &lt;/span&gt;1.73913043,  1.82608696,  1.91304348,  2.        ]]])
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Numpy一元函数&lt;/h4&gt;
&lt;p&gt;对ndarray中的数据执行元素级运算的函数&lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.abs(x) np.fabs(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的绝对值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.sqrt(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的平方根&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.square(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的平方&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;np.log(x) np.log10(x) np.log2(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的自然对数、10底对数和2底对数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.ceil(x) np.floor(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的ceiling值或floor值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.rint(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的四舍五入值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.modf(x)&lt;/td&gt;
&lt;td&gt;将数组各元素的小数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;np.cos(x) np.cosh(x)&lt;br/&gt;np.sin(x) np.sinh(x)&lt;br/&gt;np.tan(x) np.tanh(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的普通型和双曲型三角函数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.exp(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的指数值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;np.sign(x)&lt;/td&gt;
&lt;td&gt;计算数组各元素的符号值，1(+),0,-1(-)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;范例：一元函数实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;131&quot;&gt;
&lt;pre&gt;
In [65]: a = np.arange(24).reshape((2,3,4&lt;span&gt;))

In [&lt;/span&gt;66&lt;span&gt;]: np.square(a)
Out[&lt;/span&gt;66&lt;span&gt;]: 
array([[[  0,   &lt;/span&gt;1,   4,   9&lt;span&gt;],
        [ &lt;/span&gt;16,  25,  36,  49&lt;span&gt;],
        [ &lt;/span&gt;64,  81, 100, 121&lt;span&gt;]],

       [[&lt;/span&gt;144, 169, 196, 225&lt;span&gt;],
        [&lt;/span&gt;256, 289, 324, 361&lt;span&gt;],
        [&lt;/span&gt;400, 441, 484, 529]]], dtype=&lt;span&gt;int32)

In [&lt;/span&gt;67]: a =&lt;span&gt; np.sqrt(a)

In [&lt;/span&gt;68&lt;span&gt;]: a
Out[&lt;/span&gt;68&lt;span&gt;]: 
array([[[ 0.        ,  &lt;/span&gt;1.        ,  1.41421356,  1.73205081&lt;span&gt;],
        [ &lt;/span&gt;2.        ,  2.23606798,  2.44948974,  2.64575131&lt;span&gt;],
        [ &lt;/span&gt;2.82842712,  3.        ,  3.16227766,  3.31662479&lt;span&gt;]],

       [[ &lt;/span&gt;3.46410162,  3.60555128,  3.74165739,  3.87298335&lt;span&gt;],
        [ &lt;/span&gt;4.        ,  4.12310563,  4.24264069,  4.35889894&lt;span&gt;],
        [ &lt;/span&gt;4.47213595,  4.58257569,  4.69041576,  4.79583152&lt;span&gt;]]])

In [&lt;/span&gt;69&lt;span&gt;]: np.modf(a)
Out[&lt;/span&gt;69&lt;span&gt;]: 
(array([[[ 0.        ,  0.        ,  &lt;/span&gt;0.41421356,  0.73205081&lt;span&gt;],
         [ 0.        ,  &lt;/span&gt;0.23606798,  0.44948974,  0.64575131&lt;span&gt;],
         [ &lt;/span&gt;0.82842712,  0.        ,  0.16227766,  0.31662479&lt;span&gt;]],
 
        [[ &lt;/span&gt;0.46410162,  0.60555128,  0.74165739,  0.87298335&lt;span&gt;],
         [ 0.        ,  &lt;/span&gt;0.12310563,  0.24264069,  0.35889894&lt;span&gt;],
         [ &lt;/span&gt;0.47213595,  0.58257569,  0.69041576,  0.79583152&lt;span&gt;]]]),
 array([[[ 0.,  &lt;/span&gt;1.,  1.,  1&lt;span&gt;.],
         [ &lt;/span&gt;2.,  2.,  2.,  2&lt;span&gt;.],
         [ &lt;/span&gt;2.,  3.,  3.,  3&lt;span&gt;.]],
 
        [[ &lt;/span&gt;3.,  3.,  3.,  3&lt;span&gt;.],
         [ &lt;/span&gt;4.,  4.,  4.,  4&lt;span&gt;.],
         [ &lt;/span&gt;4.,  4.,  4.,  4.]]]))
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;NumPy二元函数&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;+ - * / **&lt;/td&gt;
&lt;td&gt;两个数组各元素进行对应运算&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;np.maximum(x,y) np.fmax()&lt;br/&gt;np.minimum(x,y) np.fmin()&lt;/td&gt;
&lt;td&gt;元素级的最大值/最小值计算&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;np.mod(x,y)&lt;/td&gt;
&lt;td&gt;元素级的模运算&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;np.copysign(x,y)&lt;/td&gt;
&lt;td&gt;将数组y中各元素值的符号赋值给数组x对应元素&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&amp;gt; &amp;lt; &amp;gt;= &amp;lt;= == !=&lt;/td&gt;
&lt;td&gt;算术比较，产生布尔型数组&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;范例：NumPy二元函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;131&quot;&gt;
&lt;pre&gt;
In [70]: a = np.arange(24).reshape((2,3,4&lt;span&gt;))

In [&lt;/span&gt;71]: b =&lt;span&gt; np.sqrt(a)

In [&lt;/span&gt;72&lt;span&gt;]: a
Out[&lt;/span&gt;72&lt;span&gt;]: 
array([[[ 0,  &lt;/span&gt;1,  2,  3&lt;span&gt;],
        [ &lt;/span&gt;4,  5,  6,  7&lt;span&gt;],
        [ &lt;/span&gt;8,  9, 10, 11&lt;span&gt;]],

       [[&lt;/span&gt;12, 13, 14, 15&lt;span&gt;],
        [&lt;/span&gt;16, 17, 18, 19&lt;span&gt;],
        [&lt;/span&gt;20, 21, 22, 23&lt;span&gt;]]])

In [&lt;/span&gt;73&lt;span&gt;]: b
Out[&lt;/span&gt;73&lt;span&gt;]: 
array([[[ 0.        ,  &lt;/span&gt;1.        ,  1.41421356,  1.73205081&lt;span&gt;],
        [ &lt;/span&gt;2.        ,  2.23606798,  2.44948974,  2.64575131&lt;span&gt;],
        [ &lt;/span&gt;2.82842712,  3.        ,  3.16227766,  3.31662479&lt;span&gt;]],

       [[ &lt;/span&gt;3.46410162,  3.60555128,  3.74165739,  3.87298335&lt;span&gt;],
        [ &lt;/span&gt;4.        ,  4.12310563,  4.24264069,  4.35889894&lt;span&gt;],
        [ &lt;/span&gt;4.47213595,  4.58257569,  4.69041576,  4.79583152&lt;span&gt;]]])

In [&lt;/span&gt;74&lt;span&gt;]: np.maximum(a,b)
Out[&lt;/span&gt;74&lt;span&gt;]: 
array([[[  0.,   &lt;/span&gt;1.,   2.,   3&lt;span&gt;.],
        [  &lt;/span&gt;4.,   5.,   6.,   7&lt;span&gt;.],
        [  &lt;/span&gt;8.,   9.,  10.,  11&lt;span&gt;.]],

       [[ &lt;/span&gt;12.,  13.,  14.,  15&lt;span&gt;.],
        [ &lt;/span&gt;16.,  17.,  18.,  19&lt;span&gt;.],
        [ &lt;/span&gt;20.,  21.,  22.,  23&lt;span&gt;.]]])

In [&lt;/span&gt;75]: a &amp;gt;&lt;span&gt; b
Out[&lt;/span&gt;75&lt;span&gt;]: 
array([[[False, False,  True,  True],
        [ True,  True,  True,  True],
        [ True,  True,  True,  True]],

       [[ True,  True,  True,  True],
        [ True,  True,  True,  True],
        [ True,  True,  True,  True]]], dtype&lt;/span&gt;=bool)
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 01 Nov 2017 14:43:00 +0000</pubDate>
<dc:creator>Python学习者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yan-lei/p/7768851.html</dc:identifier>
</item>
<item>
<title>Vue源码学习02 初始化模块init.js - 上云之木</title>
<link>http://www.cnblogs.com/Nutrient-rich/p/7768912.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Nutrient-rich/p/7768912.html</guid>
<description>&lt;p&gt;接上篇，我们看到了VUE分了很多模块（initMixin()stateMixin()eventsMixin()lifecycleMixin()renderMixin()），通过使用Mixin模式，都是使用了JavaScript原型继承的原理，在Vue的原型上面增加属性和方法。我们继续跟着this._init(options)走，这个一点击进去就知道了是进入了init.js文件是在initMixin函数里面给Vue原型添加的_init方法。首先来从宏观看看这个init文件，可以看出主要是导出了两个函数：initMixin和resolveConstructorOptions，具体作用我们一步步来讨论。咋的一看这个文件，可能有些童鞋会看不明白函数参数括号里面写的是什么鬼，这个其实是应用了flow的类型检查，具体flow的使用这里就不介绍了，有兴趣的请移步：&lt;a href=&quot;https://flow.org/en/&quot; class=&quot;uri&quot; title=&quot;flow传送门&quot;&gt;https://flow.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;我们现在来看第一个函数initmixinvue实例在初始化的时候就调用了这个函数&quot;&gt;我们现在来看第一个函数initMixin，Vue实例在初始化的时候就调用了这个函数，&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;let uid = 0

export function initMixin (Vue: Class&amp;lt;Component&amp;gt;) {
  Vue.prototype._init = function (options?: Object) {
    const vm: Component = this
    // a uid
    vm._uid = uid++

    let startTag, endTag
    /* istanbul ignore if */    【**注：istanbul 是代码覆盖率检测工具，此注释为代码测试用**】
    if (process.env.NODE_ENV !== 'production' &amp;amp;&amp;amp; config.performance &amp;amp;&amp;amp; mark) {
      startTag = `vue-perf-init:${vm._uid}`
      endTag = `vue-perf-end:${vm._uid}`
      mark(startTag)
    }

    // a flag to avoid this being observed
    vm._isVue = true
    // merge options
    if (options &amp;amp;&amp;amp; options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options)
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      )
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm)
    } else {
      vm._renderProxy = vm
    }
    // expose real self
    vm._self = vm
    initLifecycle(vm)
    initEvents(vm)
    initRender(vm)
    callHook(vm, 'beforeCreate')
    initInjections(vm) // resolve injections before data/props
    initState(vm)
    initProvide(vm) // resolve provide after data/props
    callHook(vm, 'created')

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' &amp;amp;&amp;amp; config.performance &amp;amp;&amp;amp; mark) {
      vm._name = formatComponentName(vm, false)
      mark(endTag)
      measure(`${vm._name} init`, startTag, endTag)
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el)
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们本着宏观简化原则，这个函数里面前面有三个if判断工作我们可以先不细化讨论【有兴趣可移步：&lt;a href=&quot;http://www.cnblogs.com/QH-Jimmy/p/6862539.html&quot; class=&quot;uri&quot; title=&quot;if方法分析传送门&quot;&gt;http://www.cnblogs.com/QH-Jimmy/p/6862539.html&lt;/a&gt;】，大致第一个是用performance做性能监测，第二个合并option，第三个是做代理拦截，是ES6新特性，可参考阮一峰大神关于proxy的介绍【&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/proxy&quot; class=&quot;uri&quot; title=&quot;proxy&quot;&gt;http://es6.ruanyifeng.com/#docs/proxy&lt;/a&gt;】。那么就进入了初始化函数主要点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;initLifecycle(vm)  //生命周期变量初始化
initEvents(vm)  //事件监听初始化
initRender(vm)  //初始化渲染
callHook(vm, 'beforeCreate')    //回调钩子beforeCreate
initInjections(vm)  //初始化注入
initState(vm)   // prop/data/computed/method/watch状态初始化
initProvide(vm)     // resolve provide after data/props
callHook(vm, 'created')     //回调钩子created
/* istanbul ignore if */
if (process.env.NODE_ENV !== 'production' &amp;amp;&amp;amp; config.performance &amp;amp;&amp;amp; mark) {
  vm._name = formatComponentName(vm, false)
  mark(endTag)
  measure(`${vm._name} init`, startTag, endTag)
}

if (vm.$options.el) {
  vm.$mount(vm.$options.el)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;这里来一个插曲start&quot;&gt;这里来一个插曲start&lt;/h4&gt;
&lt;p&gt;V2.1.8及以前的版本】这里比较方便理解在生命周期created之后再做render，那么在created之前就无法获取DOM。这也是在有些源码解析文章里面很容易见到的分析，也是正确的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;initLifecycle(vm)
initEvents(vm)
callHook(vm, 'beforeCreate')
initState(vm)
callHook(vm, 'created')
initRender(vm)  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;v2.1.9及以后的版本】但到这里一开始就懵逼了很久render提到beforeCreate之前去了，那岂不是DOM在beforeCreate之前就能获取到了？显然不对了，请注意render虽然提前了，但是后面多了一个if这个if里面才获取DOM的关键，这个if在2.1.8版本之前是在render函数里面的，在2.1.9之后被提出来，然后render函数提前了，至于为何提前暂未了解，此处只是踩了一个看其他源码解析不同版本带来的坑！&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;initLifecycle(vm)
initEvents(vm)
initRender(vm)
callHook(vm, 'beforeCreate')
initState(vm)
callHook(vm, 'created')
if (vm.$options.el) {
  vm.$mount(vm.$options.el)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;插曲end继续&quot;&gt;插曲end，继续&lt;/h4&gt;
&lt;h4 id=&quot;initlifecycle&quot;&gt;1.initLifecycle&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initLifecycle (vm: Component) {
  const options = vm.$options

  // locate first non-abstract parent
  let parent = options.parent   //我理解为父实例或者父组件
  if (parent &amp;amp;&amp;amp; !options.abstract) {    //例子中没有parent，断点代码的时候自动跳过
    while (parent.$options.abstract &amp;amp;&amp;amp; parent.$parent) {
      parent = parent.$parent
    }
    parent.$children.push(vm)
  }

  vm.$parent = parent
  vm.$root = parent ? parent.$root : vm

  vm.$children = []
  vm.$refs = {}

  vm._watcher = null
  vm._inactive = null
  vm._directInactive = false
  vm._isMounted = false
  vm._isDestroyed = false
  vm._isBeingDestroyed = false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数主要是有父实例的情况下处理vm.$parent和vm.$children这俩个实例属性,我此处没有就跳过，其他的就是新增了一些实例属性&lt;/p&gt;
&lt;h4 id=&quot;initevents&quot;&gt;2.initEvents&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initEvents (vm: Component) {
  vm._events = Object.create(null)
  vm._hasHookEvent = false
  // init parent attached events
  const listeners = vm.$options._parentListeners
  if (listeners) {
    updateComponentListeners(vm, listeners)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;又新增两个属性，后面那个if条件里面是有父组件的事件时初始化，估计就是props和events父子组件通信的事件内容。&lt;/p&gt;
&lt;h4 id=&quot;initrender&quot;&gt;3.initRender&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initRender (vm: Component) {
  vm._vnode = null // the root of the child tree
  vm._staticTrees = null
  const parentVnode = vm.$vnode = vm.$options._parentVnode
  const renderContext = parentVnode &amp;amp;&amp;amp; parentVnode.context
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)
  vm.$scopedSlots = emptyObject  
  vm._c = (a, b, c, d) =&amp;gt; createElement(vm, a, b, c, d, false)   
  vm.$createElement = (a, b, c, d) =&amp;gt; createElement(vm, a, b, c, d, true)
  const parentData = parentVnode &amp;amp;&amp;amp; parentVnode.data    
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive(vm, '$attrs', parentData &amp;amp;&amp;amp; parentData.attrs, () =&amp;gt; {
      !isUpdatingChildComponent &amp;amp;&amp;amp; warn(`$attrs is readonly.`, vm)
    }, true)
    defineReactive(vm, '$listeners', vm.$options._parentListeners, () =&amp;gt; {
      !isUpdatingChildComponent &amp;amp;&amp;amp; warn(`$listeners is readonly.`, vm)
    }, true)
  } else {
    defineReactive(vm, '$attrs', parentData &amp;amp;&amp;amp; parentData.attrs, null, true)
    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此函数也是初始化了节点属性信息，绑定createElement函数到实例【并未挂载】，接下来调用beforeCreate回调钩子；——TODO1：后续专题分析VUE渲染逻辑&lt;/p&gt;
&lt;h4 id=&quot;initinjections&quot;&gt;4.initInjections&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initInjections (vm: Component) {
  const result = resolveInject(vm.$options.inject, vm)
  if (result) {
    observerState.shouldConvert = false
    Object.keys(result).forEach(key =&amp;gt; {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive(vm, key, result[key], () =&amp;gt; {
          warn(
            `Avoid mutating an injected value directly since the changes will be ` +
            `overwritten whenever the provided component re-renders. ` +
            `injection being mutated: &quot;${key}&quot;`,
            vm
          )
        })
      } else {
        defineReactive(vm, key, result[key])
      }
    })
    observerState.shouldConvert = true
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此函数也是当有inject属性时做处理，源码例子无inject断点跑暂时跳过&lt;/p&gt;
&lt;h4 id=&quot;initstate&quot;&gt;5.initState&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  if (opts.props) initProps(vm, opts.props)
  if (opts.methods) initMethods(vm, opts.methods)
  if (opts.data) {
    initData(vm)
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  if (opts.computed) initComputed(vm, opts.computed)
  if (opts.watch &amp;amp;&amp;amp; opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出此处是对options传入的props/methods/data/computed/watch属性做初始化————TODO2：分析每个属性的初始化&lt;/p&gt;
&lt;h4 id=&quot;initprovide&quot;&gt;6.initProvide&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;function initProvide (vm: Component) {
  const provide = vm.$options.provide
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数跟4.initInjections在同一个inject.js中，也是在传入参数有provide属性时做处理，暂时跳过，然后就到了created回调钩子，最后的vm.$mount接入TODO1；&lt;/p&gt;
&lt;h4 id=&quot;今天initmixin到此结束下篇继续todo1&quot;&gt;今天initMixin到此结束，下篇继续TODO1~&lt;/h4&gt;
</description>
<pubDate>Wed, 01 Nov 2017 14:32:00 +0000</pubDate>
<dc:creator>上云之木</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Nutrient-rich/p/7768912.html</dc:identifier>
</item>
<item>
<title>平台框架-101 - kid551</title>
<link>http://www.cnblogs.com/kid551/p/7768720.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kid551/p/7768720.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/672506/201711/672506-20171101215043529-31373015.jpg&quot; alt=&quot;&quot; width=&quot;859&quot; height=&quot;644&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;原文首发于我的微信公众号：GeekArtT .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将源代码编译，加载进入内存，相应的构建于程序员脑海中的程序便在计算机上跑(run)起来了。这看似简单的步骤背后，却是一个从无到有的施展魔法的过程。&lt;/p&gt;
&lt;p&gt;初学programming的时候，不太能够分清楚手写的源代码和在内存中运行的机器代码（运行时代码）的区别。一直被教育，机器代码是通过源代码的编译生成的。机器代码所做的事情，会完全依赖于源代码所表达的意图。或者可以被通俗地理解为：因为源代码是人可以识别的语言，机器代码是机器可以识别的语言，而编译，便是将两者做了一个翻译而建立起来的桥梁。&lt;/p&gt;
&lt;p&gt;如此，在我脑海中建立起来的两者关系便是，这两者就是完全等价的一回事。你想要机器做什么，那么只要在源代码里体现就好了。这一说法的直接推论便是：&lt;strong&gt;如果我在运行的程序中发现缺少了什么功能，那么直接在源代码里增加修改就好了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而这其实是一句表面上政治正确，却在细节上会造成完全不同理解的模糊说法。而如果你恰好在细节上将差别弄错，那么你对整个程序编写的认识、对软件工程存在的意义以及API框架设计的好坏标准，将会形成完全错误的理解（事实上，曾经的我，正是在这些方面陷入过深坑）。&lt;/p&gt;
&lt;p&gt;编译前的源代码和运行起来的机器代码，表面上是一个一一对应的关系，但实际上已经是两个不同的时空世界。虽然运行起来的代码是&lt;strong&gt;完全根据&lt;/strong&gt;源代码指定的规则和意图来做事情。可一旦机器代码运行起来，源代码将对运行时的代码毫无办法，产生不了一点影响。你&lt;strong&gt;不能够&lt;/strong&gt;通过&lt;strong&gt;临时增加一些源代码&lt;/strong&gt;的方式，来为运行时的程序增添一些功能或者feature。你只能老老实实地利用好当前运行着的程序为你提供的现成功能。&lt;/p&gt;
&lt;p&gt;这里的trick是，运行时的代码已经不是代码了，它已经是运转起来的机器，或者说机器状态。而源代码提供的是让计算机如何运行的步骤指令，你可以把它理解为一份分步骤操作的菜谱。而处在运行时的程序，它已经是一套按照源代码的指令转动起来的机器。在这个程序中，它有且只能做之前源代码规定好的事情。如果要想让计算机产生别的行为，那就不得不让计算机停止当前的运转，然后重新塞给它一份执行步骤的说明书，然后重新开始运转。&lt;/p&gt;
&lt;p&gt;所以，通过修改源代码，你确实可以为程序增加新的功能，但你不得不把当前的程序停止掉，然后重新构建计算机运行的状态。&lt;/p&gt;
&lt;p&gt;如果用相对粗糙的比喻可以理解为：如果把程序员看作是能够施展法术，让微观的&lt;strong&gt;原子&lt;/strong&gt;形成现实宏观世界的&lt;strong&gt;物体&lt;/strong&gt;的魔法师（请脑补SICP的封面图案），那么这些原子便是源代码，而运行时的机器代码便是相应物理世界的物体。一旦物体形成，你便只有使用物体的能力，却没有再次更改物体性质的能力。也就是，你没有办法通过操作原子的排列方式，将手中的一把大刀，变成一杆长枪。&lt;/p&gt;
&lt;p&gt;从这个角度讲，编译前的源代码和运行时的代码，是处在两个不同时空的存在。一旦机器运行起来，你便&lt;strong&gt;只能够&lt;/strong&gt;使用当前运行着的程序所提供的功能去做动态操作（也就是对运行的计算机做操作），你不能够通过增添源代码的方式为当前的程序制作新的功能。&lt;/p&gt;
&lt;p&gt;于是，程序在运行状态时所提供的这些功能，便是一切的关键。因为它们是构成你将来一切操作的原始操作（元操作）。这便是程序所提供的API了。&lt;/p&gt;
&lt;p&gt;一套程序提供API的意义，并不是它能够以多么不同的方式对计算机做影响，而是它能够对它所形成的“它的世界”做多少影响。举个例子，一款游戏程序的计算方式、调用CPU的方式、让显示器呈现图像的方式并不会有多么的独特和不同。关键在于游戏里提供的操作方式（可理解为终端用户的API），是你唯一可以运用的、拿去攻击boss并对boss产生影响的方式。你无法通过计算机上一般性的“减法操作”，来减少boss的血槽值。&lt;/p&gt;
&lt;p&gt;既然对你建造的这个MyApp的程序世界的所有影响，都要由这些基础的API来构成。那么如何设计这些API，让它们足够少、却又能够提供足够多的组合方式，去满足你对MyApp世界的各种需求，就成为了关键。&lt;/p&gt;
&lt;p&gt;一个极好的API设计案例，当然是数学领域的几何学。通过《几何原本》上描绘的几条基本定理，便将欧式几何世界的性质、操作和需求全部囊括。而仅仅是改变第五公设的论述，又形成了另一套几何世界——非欧几何。并且也是这么几条基本公理（API），便将非欧几何的需求、操作全部囊括。&lt;/p&gt;
&lt;p&gt;从这个角度来讲，某一个程序的一组精挑细选的API，便可以看作是数学领域中一个分支的公理假设集。而每一套这样的API，便构成了一个独有的世界。所以，这套精简的API便是支撑整个你创造的世界的&lt;strong&gt;骨架&lt;/strong&gt;，也就是通常所说的&lt;strong&gt;框架&lt;/strong&gt;了。而这套框架，事实上形成了一组构建世界的工具箱，或者是工作坊，也可以叫做工作平台（platform）。因为在这个平台上，你可以建造、加工你所处的MyApp世界。那它当然是最核心也最富有潜力、想象的基建设施平台了。&lt;/p&gt;
&lt;p&gt;那么，一套程序（产品）是否具备平台意识，其实决定了它未来的想象。例如，如果你的程序只能够做规定它做的事情，没有任何开放给开发者的API，那它就只是个固定的东西，而不是一套可以完善、成长的生态系统。例如，一款俄罗斯方块游戏，你能做的，便是按照规则去玩，不能够再添加别的新鲜想法。而反观Apple 处理自己App的方式，它不是说给你一个固定不变的App，而是给你提供一套可以建造App的工具/平台/框架，让你可以按照自己的想法去做各种不同的App，去构建你脑海中不同的世界。又或是Facebook这款社交软件，它并没有选择成为一款静态的产品，而是提供足够多的API，让作为开发者的你去完善它，去为Facebook的成长贡献一份力量。&lt;/p&gt;
&lt;p&gt;所以，对于一个特定程序之外的开发者来说，ta并不是万能的 。而这个特定程序的构建者，才是那个上帝。如果这款程序的构建者，不提供对外开放的API，那么外来者便没有办法去对这个特定的程序世界做修改。另一方面，如果一款产品不提供对外的API，也就是不具备平台思维，那么它也将失去世界上其他程序员为它带来的生长养分。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;近期回顾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484021&amp;amp;idx=1&amp;amp;sn=61327099a99e1a0ffa2361bc9a25e723&amp;amp;chksm=ec20e5c9db576cdf4b4c06b50dd52de580cdf79bde5389e66af1a3334a7b37d4fe0554565cd0&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;新入手MacBook Pro环境搭建&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484008&amp;amp;idx=1&amp;amp;sn=8d1e6de98b5ac438a8923283ead216c4&amp;amp;chksm=ec20e5d4db576cc2a4366966dc105d7ec237e98538ea6fee6c9b7cc688e3bf6884ac619b6fa7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;做一名「技术掮客」去变现自己的技术&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247483998&amp;amp;idx=1&amp;amp;sn=acb416bb9f336d7cea1e66c7ba86d260&amp;amp;chksm=ec20e5e2db576cf4ddf72e51c295e562a1a0d62389c1ce157a60d093828fb32255a58a80cc0b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;「极客时间」带来的社区价值思考&lt;/a&gt;》&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果你喜欢我的文章或分享，请长按下面的二维码关注我的微信公众号，谢谢！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxPlOTGK4uYCNPSK7ADI9xNIfB1ic7Cpmen9fZvzt1ZoBdoiapSQV0fHAHvahBiaO6R2k0OH1Jyx2bHuA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; width=&quot;auto&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxPlOTGK4uYCNPSK7ADI9xNIfB1ic7Cpmen9fZvzt1ZoBdoiapSQV0fHAHvahBiaO6R2k0OH1Jyx2bHuA/0?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1240&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VIP赞赏专区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxPlOTGK4uYCNPSK7ADI9xNI0nibuKnVBZ8XYPvYggVcaRMJuRwiaiaR1ZAhTcYic1gia9ibgJywZG2NxrJg/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; width=&quot;252&quot; height=&quot;252&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxPlOTGK4uYCNPSK7ADI9xNI0nibuKnVBZ8XYPvYggVcaRMJuRwiaiaR1ZAhTcYic1gia9ibgJywZG2NxrJg/0?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1152&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 01 Nov 2017 13:52:00 +0000</pubDate>
<dc:creator>kid551</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kid551/p/7768720.html</dc:identifier>
</item>
<item>
<title>话说LightningChart是最快最美的图表控件，到底先进在哪里？ - LightningChart</title>
<link>http://www.cnblogs.com/lightningchart/p/7768617.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lightningchart/p/7768617.html</guid>
<description>&lt;p&gt;LightningChart Ultimate v.8.2 最新版本新特征告诉你它先进在哪里！&lt;/p&gt;

&lt;p&gt;1. Headless 模式&lt;/p&gt;
&lt;p&gt;headless模式允许在没有GUI的情况下使用LC。例如，在Windows Service和控制台应用程序中。以下示例是为报告或网页生成的图表。 &lt;/p&gt;
&lt;p&gt;在headless模式下，图表框被捕获为图像。可以通过利用以下方法来获取位图，例如 &lt;/p&gt;
&lt;p&gt;• OutputStream 属性&lt;/p&gt;
&lt;p&gt;• SaveToStream 方法&lt;/p&gt;
&lt;p&gt;• CopyToClipboard 方法&lt;/p&gt;
&lt;p&gt;• CaptureToByArray 方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212418248-240862411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该服务可以设置为在本地网络服务器运行或在云端的Windows Server运行。 &lt;/p&gt;
&lt;p&gt;在Windows Application和Windows Service之间的进程间通信中，例如，可以使用Named管道或Socket I / O通信。&lt;/p&gt;
&lt;p&gt;SDK中包含一个新的Headless模式演示解决方案。它在本地计算机上使用Windows服务器。WPF应用程序使用Named Pipes连接到它，并显示服务器发送的图像流。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212713076-59816817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212722810-839902624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解释了带有命名管道和后台线程的 Headless演示解决方案的内部操作消。 &lt;/p&gt;


&lt;p&gt;2. ViewXY BarSeries中的BaseLevel&lt;/p&gt;
&lt;p&gt;BarSeries中添加的BaseLevel属性是所有系列值的一个系列最小值，并指示条的起始位置。在堆叠视图中，它将增加（如果为正）或减小（如果为负）条的大小。如果是StackedToSum，则条尺寸是相对的，并且像Stacked一样计算。&lt;/p&gt;
&lt;p&gt;BaseLevel设置为100。条值为10,20,35,50,65,45,30,25,20,5。&lt;/p&gt;
&lt;p&gt;在之前的LightningChart版本中，像BaseLevel一样的条形图设置为0。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212755076-1749013849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;BaseLevel设置为100。条值为10,20,35,50,65,45,30,25,20,5。&lt;/p&gt;
&lt;p&gt;在之前的LightningChart版本中，像BaseLevel一样的条形图设置为0。 &lt;/p&gt;


&lt;p&gt;3. MeshModel程序化构建&lt;/p&gt;
&lt;p&gt;MeshModel支持以编程方式构建MeshModel几何。它允许可视化由于计算而产生的对象和形状。&lt;/p&gt;
&lt;p&gt;以下创建方法可用 &lt;/p&gt;
&lt;p&gt;•创建（位置、颜色、索引）&lt;/p&gt;
&lt;p&gt;•创建（位置、颜色、法线、索引）&lt;/p&gt;
&lt;p&gt;•创建（位置、纹理坐标、位图、textureWrapMode、索引）&lt;/p&gt;
&lt;p&gt;•创建（位置、法线、纹理坐标、位图、textureWrapMode、索引） &lt;/p&gt;
&lt;p&gt;索引数组（索引）参数对于所有方法都是可选的。如果提供它们将定义从给定的阵列使用哪些顶点、颜色、光线法线和纹理坐标。当多个三角形之间共享相同的顶点时，使用索引会节省资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212844357-312835581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由代码构造的MeshModels。 &lt;/p&gt;
&lt;p&gt;旋转、缩放和定位属性等以及事件也适用于从顶点以编程方式创建的MeshModel，它们的工作方式类似于从顶点以编程方式加载，与处理加载对象方式相同。&lt;/p&gt;


&lt;p&gt;4. 3D中单维缩放&lt;/p&gt;
&lt;p&gt;只能使用鼠标拖动来缩放一个维度。&lt;/p&gt;
&lt;p&gt;ZoomPanOptions下添加了用于控制单维缩放的新选项。&lt;/p&gt;
&lt;p&gt;LeftMouseButtonAction，RightMouseButtonAction和MiddleMouseButtonAction属性现在有ZoomX，ZoomY和ZoomZ的新选项。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101212939732-537607756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;5. ViewXY中的图例框，对齐&lt;/p&gt;
&lt;p&gt;AlignmentInVerticalMargin属性添加了左/右/中心选项，到ViewXY的LegendBox。该属性控制图例框的水平定位设置为相同的垂直边距。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101213037701-981382862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;AlignmentInVerticalMargin控制水平定位&lt;/p&gt;


&lt;p&gt;6.控制图例框中的“强度”和“表面”系列调色板的可视性。&lt;/p&gt;
&lt;p&gt;通过设置LegendBox.IntensityScales.Visible可以隐藏调色板比例为“False”（in ViewXY）和LegendBox.SurfaceScales.Visible为“False”（在View3D中）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1124004/201711/1124004-20171101213100310-150089026.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 01 Nov 2017 13:35:00 +0000</pubDate>
<dc:creator>LightningChart</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lightningchart/p/7768617.html</dc:identifier>
</item>
</channel>
</rss>