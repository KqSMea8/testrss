<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python数据分析(二): Numpy技巧 (4/4) - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/7632935.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/7632935.html</guid>
<description>&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;numpy&lt;/strong&gt;、pandas、matplotlib（+seaborn）是python数据分析/机器学习的基本工具。&lt;/p&gt;
&lt;p&gt;numpy的内容特别丰富，我这里只能介绍一下比较常见的方法和属性。&lt;/p&gt;

&lt;/div&gt;



&lt;p&gt;这是最后一部分：由于直接再这里添加jupyter notebook源码的话变形比较厉害，所以还是直接上图吧，请看：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171006211844677-834975200.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 06 Oct 2017 20:29:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/7632935.html</dc:identifier>
</item>
<item>
<title>Java并发（一、概述） - ZhouZe</title>
<link>http://www.cnblogs.com/sally-zhou/p/7634034.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sally-zhou/p/7634034.html</guid>
<description>&lt;p&gt;离上次写博客又隔了很久，心中有愧。在我不断使用Java的过程中，几乎都是拿来就用，就Java并发这块我还没有系统的梳理过，趁着国庆有空余时间，把它梳理一遍。以下部分内容参考相关书籍，以作学习之用，特此说明。&lt;/p&gt;
&lt;h2 id=&quot;并行定律&quot;&gt;1.并行定律&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;随着科技的发展，集成电路上的晶体管数量也达到了物理极限，摩尔定律也随之不再那么有效，例如Amdahl定律和Gustafson定律代替它成为计算机性能发展的源动力。从这个演变也可以看出，计算机的性能发展也不得不从追求处理器频率到多核并行处理的发展过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义&quot;&gt;1.1.定义&lt;/h3&gt;
&lt;p&gt;　　所谓阿姆达尔（Amdahl）定律，它定义了串行系统并行化后的加速比的计算公式和理论上限。&lt;/p&gt;
&lt;h3 id=&quot;公式&quot;&gt;1.2.公式&lt;/h3&gt;
&lt;p&gt;　　就是其公式就是：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034202458-965872284.png&quot;/&gt;&lt;br/&gt;　　其中Sp就是加速比，T1是优化前系统耗时，Tp是优化之后系统耗时，p就是处理器个数。那么这个公式意义就是 加速比 = 优化前系统耗时 / 优化后系统耗时。&lt;br/&gt;　　我们逐步看一下它的公式推导：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034228021-165381550.png&quot;/&gt;&lt;br/&gt;　　其中，p为处理器个数，F为串行比率，那么1-F就是并行的比例了。这个公式就是计算优化后的耗时公式，将这个公式代入加速比公式我们就可以得出CPU的处理器数量越多，那么加速比与系统的串行率就成反比：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034257240-2045650116.png&quot;/&gt;&lt;br/&gt;　　我们不妨看个例子，假设现在有个系统是按如下方式串行运行的：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034359818-162927668.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个系统有三步，其中第一步和第三步都是100ms，第二步是200ms，整个串行的运行时间是400ms。那我们现在可能要对这个系统做个优化，已知这个系统是两个核心，那么如果Step2的操作内部由串行改为并行，那么理想情况可能是这样的：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034419240-1022028403.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们看到Step2分解成并行的操作，那么代入公式得到最终它的加速比为1.2。我们不妨推算一下，假设处理器的个数为无穷大，那么Step2的操作耗时无限趋近于0，那么对于这个系统而言，它的加速比（300ms/200ms）最大也不过是1.5。也就是说，P越趋近于无穷大，那么Sp=1/F。&lt;br/&gt;　　加速比越高，表明优化效果越好。根据Amdahl定律，使用多核的CPU对系统优化，优化的效果取决于CPU的数量和系统串行化程序的比重，如果仅仅提升Cpu数量，而不降低程序的串行比重，也是无法提高系统性能的。所以，我们要根本上去改变程序的串行行为，合理的并行与增加处理器数量，才能获得更大的性能提升。&lt;/p&gt;
&lt;h3 id=&quot;gustafson定律&quot;&gt;1.3.Gustafson定律&lt;/h3&gt;
&lt;p&gt;　　 Gustafson定律只是从不同的角度去阐述处理器个数、串行比例和加速比之间的关系。所以这里不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;java内存模型&quot;&gt;2.Java内存模型&lt;/h2&gt;
&lt;h3 id=&quot;处理器高速缓存主存交互&quot;&gt;2.1.处理器、高速缓存、主存交互&lt;/h3&gt;
&lt;p&gt;　　 提高计算机的性能并不是让计算机同时处理多个任务那样简单，处理器需要和内存交互，例如读取数据、存储运算结果，因为现代计算机的处理器能力太强，存储设备的读写速度与之相差太大，所以在存储设备和处理器之间加上高速缓存来作为处理器和内存之间的缓冲。这样的话CPU就不需要等待相对而言缓慢的内存读写了。&lt;br/&gt;　　 当高速缓存作为一种解决处理器与内存读写速度矛盾的手段时，带来了新的问题，那就是缓存一致性。处理器有对应的高速缓存，而它们又对应同一块主内存。当多个处理器的运算都涉及到同一个主内存时，该如何保证数据的一致性？所以为了解决一致性，又在处理器访问缓存时候遵循一些协议。&lt;br/&gt;　　 那么诸如Java虚拟机的内存模型之类就可以理解成，在特定的操作协议下，对特定的内存或者高速缓存进行读写的过程抽象。&lt;br/&gt;　　 除了高速缓存之外，处理器也会对输入代码乱序执行优化（Out-Of-Order Execution）优化，这种优化并不能保证处理器的执行顺序会和输入代码的顺序一致，但会保证最终输入的结果是一致的。与之相对应的，Java也存在着一套类似的机制，就是指令重排（Instruction Reorder）优化。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034511943-1522464400.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;java内存模型jmm&quot;&gt;2.2.Java内存模型（JMM）&lt;/h3&gt;
&lt;p&gt;　　 Java虚拟机定义了一套内存模型来屏蔽各种硬件和操作系统带来的内存访问差异，实现Java程序在各平台下达到一致的内存访问结果。&lt;br/&gt;　　 JMM主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储、取出的底层细节。这里的变量包括实例字段、静态字段和构成数组对象的元素，但不包括局部变量和方法参数，因为这些是线程私有的，不会被共享。&lt;br/&gt;　　 Java内存模型规定所有变量都存在主内存，每条线程都有自己的工作内存，线程所有对变量的操作都必须在工作内存中执行，线程的工作内存保存了被该线程使用到的变量主内存拷贝，不能直接读写主内存中的变量，线程之间变量值传递需要通过主内存完成。线程、主内存、工作内存交互如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034523349-1135583046.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;内存间的交互操作&quot;&gt;2.3.内存间的交互操作&lt;/h3&gt;
&lt;p&gt;　　 在主内存和工作内存之间的交互协议的具体细节，Java内存模型定义了8个操作来完成，虚拟机来保证这8个操作都是原子的。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;lock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;锁定&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个变量标识为一条线程独占的状态&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;center&quot;&gt;unlock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;解锁&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个标记为锁定状态的变量解锁,以便其它线程使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;read&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;读取&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个变量的值从主内存传输到线程的工作内存中，以便load操作使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;load&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;载入&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将read操作读取过来的值放入工作内存的变量副本中&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;use&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;使用&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将工作内存的值传递给执行引擎，虚拟机遇到一个需要使用变量的字节码指令就会这么做&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;assign&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;赋值&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，从执行引擎接受到的值赋给工作内存的变量，虚拟机遇到一个给变量赋值的字节码指令就会这么做&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;store&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存储&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将工作内存的变量的值传递给主内存中，以便write操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;write&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;写入&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，它把store操作从工作内存中得到的变量赋值放入主内存的变量中&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　 Java内存模型只要求两个操作必须按顺序执行，而没有保证是连续执行，也就是说两个指令之间是可以有其它指令的。Java内存模型还规定可在执行上述8种基本操作时必须满足以下的规则：&lt;br/&gt;　　 * 不允许read和load、store和write操作之一单独出现；&lt;br/&gt;　　 * 不允许一个线程丢弃它最近的assign操作，即assign操作之后必须将值同步给主内存；&lt;br/&gt;　　 * 不允许一个线程没发生过assign就把数据同步给主内存；&lt;br/&gt;　　 * 一个新的变量只能诞生在主内存，不允许工作内存直接使用一个未被（load和assign）的变量；&lt;br/&gt;　　 * 一个线程在同一时刻只允许同一条线程对其进行lock操作；&lt;br/&gt;　　 * 如果对一个变量执行lock，那么将清空这个变量在工作内存的此变量的值，在执行引擎使用这个变量之前，重新执行load和assign操作初始化工作内存的值；&lt;br/&gt;　　 * 如果一个变量事先没有被lock操作锁定，就允许对其或其它线程进行unlock操作；&lt;br/&gt;　　 * 对一个变量执行unlock操作之前，必须先同不会主内存；&lt;/p&gt;
&lt;h3 id=&quot;原子性atomicity可见性visibility有序性ordering&quot;&gt;2.4.原子性（Atomicity）、可见性（Visibility）、有序性（Ordering）&lt;/h3&gt;
&lt;p&gt;　　 原子性（Atomicity）：原子性是指一个操作是不可中断的，一旦一个操作开始，就不会被其它线程干扰。Java内存模型来直接保证原子性变量的操作包括read、load、assign、use、store和write，基本可以认为基本数据类型的读写是原子性的，但是double、long类型例外，这是它们的非原子性协定决定的。当然，Java内存模型还提供了lock和unlock来满足更大范围的原子性操作，这两个操作反映到字节码指令就是monitorenter和monitorexit隐式的操作，反映到代码上就是synchronized关键字。&lt;br/&gt;　　 可见性（Visibility）：可见性是指一个线程修改了共享变量的值，其它线程能立即得知这个更改。Java内存模型是通过变量修改后将新值同步给主内存，在变量读取前从主内存刷新变量值依赖主内存作为传递媒介的方式来实现可见性的，无论这个变量是否被volatile修饰，但它们的区别是volatile变量的特殊规则能立即同步到主内存，以及每次使用前从主内存刷新，而普通变量不行。当然，除了volatile能实现可见性之外，synchronized和final同样可以。synchronized的可见性是通过“对一个变量执行unlock操作之前，必须把此变量同步回主内存中”这条规则获得的；而final的可见性是指，被final修饰的字段在构造器一旦初始化完成，并且构造器没把this的引用传递出去，那么在其它线程就能看见final字段的值。&lt;br/&gt;　　 有序性（Ordering）：前面也提到，java会指令重排，代码顺序未必和指令执行顺序一致。Java提供了volatile和synchronized来保证线程之间操作的有序性。volatile关键字本身就禁止质量重排，而synchronized是由“一个变量在同一时刻只允许一条线程对其lock操作”这条规则获得。&lt;/p&gt;
&lt;h3 id=&quot;happen-before原则&quot;&gt;2.5.Happen-Before原则&lt;/h3&gt;
&lt;p&gt;　　 Java里的有序性除了靠volatile和synchronized两个关键字完成，其实还隐藏着先行发生（Happen-Before）原则，通过这个原则和之前的规则基本能解决并发环境下两个操作之间的冲突问题。&lt;br/&gt;　　 * 程序次序原则（Program Order Rule）：一个行程内保证语义的串行；&lt;br/&gt;　　 * 管程锁定原则（Monitor Lock Rule）：unlock操作必定在之后的同一个锁的lock操作之前；&lt;br/&gt;　　 * volatile规则（Volatile Variable Rule）：volatile变量的写操作先行发生于后面这个变量的读操作；&lt;br/&gt;　　 * 线程启动规则（Thread Start Rule）：线程的start（）方法先于该线程其它的每一个动作；&lt;br/&gt;　　 * 线程终止规则（Thread Termination Rule）：线程的所有操作都先于该线程的终结（Thread.join（））；&lt;br/&gt;　　 * 线程中断规则（Thread Interruption Rule）：线程的interrupt（）方法调用先行发生于被中断线程的代码检测到中断事件的发生；&lt;br/&gt;　　 * 对象终结规则（Finalizer Rule）：一个对象的初始化完成先行与它的finalize（）方法的开始；&lt;br/&gt;　　 * 传递性 （Transitivity）：如果A操作先于B操作，B操作先于C操作，那么A必定先于C；&lt;/p&gt;
&lt;h2 id=&quot;volatile&quot;&gt;3.volatile&lt;/h2&gt;
&lt;h3 id=&quot;语义&quot;&gt;3.1.语义&lt;/h3&gt;
&lt;p&gt;　　 Java内存模型基本是围绕原子性、有序性、可见性展开，而volatile关键字的语义，一是保证此变量对所有线程的可见性，二是禁止指令重排。可以看出，volatile不能保证原子性，这个需要通过加锁或者一些原子类来实现。&lt;br/&gt;　　 举个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class VolatileTest {

    public static volatile int i = 0;

    public static void increase() {
        i++;
    }

    public static class IncreaseTask implements Runnable{
        public void run() {
            for (int y = 0; y &amp;lt; 10000; y++) {
                increase();
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Thread[] threads = new Thread[10];
        for (int i = 0; i &amp;lt; 10; i++) {
            threads[i] = new Thread(new IncreaseTask());
            threads[i].start();
        }
        for (int i = 0; i &amp;lt; 10; i++) {
            threads[i].join();
        }
        System.out.println(i);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　 在上面这段代码中，变量i用volatile修饰，循环10个线程，每个线程内部对i递增10000次，如果这段代码并发成功的话，预期的结果应该是100000。但是运行结果可见，每次的结果值都小于100000。&lt;br/&gt;　　 这个正是因为increase（）方法内部对i递增的处理，也就是 i++ 这一段代码不是原子的，代码虽然只有一行，但是编译出来的字节码指令却有多个指令，而且每个指令本身未必就是原子的，因为这些指令还会转化成若干个本地机器码指令。不难分析出，每个线程取到i的值那一刻，volatile保证了这一刻取到的是正确的数据，但是继续往下执行的时候，这个值就可能已经被其它线程修改了，而此时的数据就变成过期的数据，同步到主内存中的数据就可能是一个较小的数据。&lt;br/&gt;　　 除了在操作递增时候加锁之外，使用AtomicInteger原子类代替int一样可以得到预期的结果。&lt;/p&gt;
&lt;h3 id=&quot;volatile的可见性和指令重排&quot;&gt;3.2.volatile的可见性和指令重排&lt;/h3&gt;
&lt;p&gt;　　 volatile修饰的变量，赋值后的指令会多出一个内存屏障，这个内存屏障会杜绝后面的指令排到前面去。这种内存屏障其实就是一个空操作，这个空操作指令是lock前缀，它的作用就是使得本CPU的Cache写入内存（write和store操作），该写入动作使得其它CPU或者别的内核无效化其Cache，所以通过这样的一个空操作，让volatile修饰的变量对其它CPU立即可见。也因此，这个空操作指令在同步到内存时，意味着所有的操作都已经执行完成，这样就形成了“指令排序无法越过屏障”的效果。&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 19:34:00 +0000</pubDate>
<dc:creator>ZhouZe</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sally-zhou/p/7634034.html</dc:identifier>
</item>
<item>
<title>用ESP8266+android,制作自己的WIFI小车(Android 软件) - 杨奉武</title>
<link>http://www.cnblogs.com/yangfengwu/p/7633980.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfengwu/p/7633980.html</guid>
<description>&lt;p&gt;&lt;span&gt;先说一下这篇文章里面的内容:TCP 客户端, 自定义对话框, 自定义按钮, ProgressBar竖直显示, 重力感应传感器,手机返回键&lt;span class=&quot;tcnt&quot;&gt;新开启界面的问题(返回上次的界面),数据保存&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;tcnt&quot;&gt;软件的通信是配合&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;tcnt&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/7625608.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yangfengwu/p/7625608.html&lt;/a&gt;       &lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/yangfengwu/p/7625608.html&quot;&gt;用ESP8266+android,制作自己的WIFI小车(ESP8266篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;软件的第一个界面就一个按钮&lt;/span&gt;  &lt;/span&gt;       &lt;span&gt;点击按钮弹出一个自定义的对话框&lt;/span&gt;         &lt;span&gt;&lt;span&gt;连接的时候&lt;/span&gt;                              连接上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004172038880-2004786376.png&quot; alt=&quot;&quot; width=&quot;197&quot; height=&quot;421&quot;/&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004172104599-1786229965.png&quot; alt=&quot;&quot; width=&quot;186&quot; height=&quot;422&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004172313208-1694641750.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;424&quot;/&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004172449740-106309249.png&quot; alt=&quot;&quot; width=&quot;415&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实一开始想多加一些功能,,不过后来想了想复杂了反而不利于学习.........我会从一开始做到结束都写清楚,如果有大神看到哪地方不合理请指教哈,,,,,&lt;/p&gt;
&lt;p&gt;好现在开始做APP&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004172919599-1287064418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004173113021-494744870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一路Next就行...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171004173201193-271241062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 您会发现自己的按钮是圆边的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005140220646-1869511658.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实是自己自定义了一些参数&lt;/p&gt;
&lt;p&gt;新建一个文件夹存储咱们自定义的一些东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005140346661-1845772672.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005140457693-1636237049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005140855286-1572875364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005141237865-1770782989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005141927771-224060140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005142156490-1192742867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005142258302-1210400573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对了为什么名字是drawable&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实是官方提供的,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.android-doc.com/guide/topics/resources/drawable-resource.html#StateList&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.android-doc.com/guide/topics/resources/drawable-resource.html#StateList&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005145841677-2014120309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后呢各个参数后面都有具体解释&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005145951521-1643374920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有些小伙伴一看....英文的............大哥下一个有道翻译或者别的翻译软件翻译一下...................&lt;/p&gt;
&lt;p&gt;可以自己搜索自己想要的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005150725661-830002337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好像这些外形啦背景什么的都在&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005151222849-859645883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005151240724-832537077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005151313318-2025831474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005151331786-530015078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;授人予鱼,也要授人予渔;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先定义一下外形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方形&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154748677-1239607439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后呢描一下边框,,,显得是一个按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005153023740-2032743211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154846021-1682390137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其实可以官方解释&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005153146318-306847231.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后定义一下按钮现在显示的颜色&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154911286-1415526348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好现在让它的四个角变成圆角,,,对于我这个学机械的而言在solidworks里面应该叫做倒角,,,,有没有学机械的看到这篇文章哈...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;记得曾经遇到一个人和我正好相反,,我是报的机械专业,自学的电气,,,,,,而另一个人是报的电气却喜欢机械........兴趣.........&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005153427521-1837688204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154043333-379440584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154931083-790083820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好啦&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拖一个按钮过来,放到中心.....您也可以在布局文件里面自己写哈......我是怎样方便怎样弄,,我用的是相对布局&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154216974-267046097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005154431646-726439297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005155148052-1296507359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存一下现在看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005155223349-213827447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好现在再定义一个按钮按下时的外表文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005155402521-760449128.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005155551146-280707837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005160655099-929875242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161112896-787941328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;

import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Button;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {

    Button buttonconnect1;
    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        buttonconnect1 &lt;/span&gt;= (Button) findViewById(R.id.button11);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取按钮&lt;/span&gt;
&lt;span&gt;        
        buttonconnect1.setOnTouchListener(buttonconnect1Touch);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮的触摸事件&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    
    
    
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean onCreateOptionsMenu(Menu menu) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Inflate the menu; this adds items to the action bar if it is present.&lt;/span&gt;
&lt;span&gt;        getMenuInflater().inflate(R.menu.main, menu);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean onOptionsItemSelected(MenuItem item) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Handle action bar item clicks here. The action bar will
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; automatically handle clicks on the Home/Up button, so long
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; as you specify a parent activity in AndroidManifest.xml.&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; id =&lt;span&gt; item.getItemId();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id ==&lt;span&gt; R.id.action_settings) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; super.onOptionsItemSelected(item);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161228740-318335782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在编译一下运行到手机看一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161346583-1076452862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161406911-376609681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我是直接用的自己的手机,,没有仿真,,现在我的电脑用仿真可是不得了......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;平时的状态                          按下后&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161716427-596747999.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005161736380-1287361131.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;自己看着改改大小和显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005162249958-786338476.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005162300786-496387455.png&quot; alt=&quot;&quot; width=&quot;326&quot; height=&quot;273&quot;/&gt;&lt;/p&gt;
&lt;p&gt;咱们现在要做的是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005162435958-93041697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实这个是自己自定义的一个界面&lt;/p&gt;
&lt;p&gt;对了设置一下主题风格...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005163703365-1826074949.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;感觉这种风格挺好的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005163816068-749166972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005163922708-274749041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005164129380-816264378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图片可以在我源码里面找,也可以自己弄自己的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005164950458-1692706718.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005165004724-2017158679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对了,,,,位置还有名字什么的自己看着修改哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005170446818-466983862.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005170500865-989461718.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005170734411-1205227212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005171340302-2052457711.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 整体界面呢,,,&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005171700990-1965588017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2dip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageView21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;15dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
         android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_toRightOf&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageView21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:textAppearance&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?android:attr/textAppearanceLarge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:textColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;23dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IP地址:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;EditText
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignBaseline&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignBottom&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:ems&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.4.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;ImageView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageView21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;14dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/image1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView24&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignBaseline&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignBottom&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;端口号:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;EditText
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:ems&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;Button
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/button21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;40dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/editText22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/butonup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;Button
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/Button22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;40dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignBottom&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/button21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/button21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/butonup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;取消&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;ProgressBar
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/progressBar21&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerHorizontal&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了现在点击主界面的按钮把这个界面当做提示框显示出来&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005180805536-1410867415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;

import android.app.Activity;
import android.app.AlertDialog;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {

    Button buttonconnect1;
    AlertDialog AlertDialog21;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个提示框&lt;/span&gt;
    View View1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个view用来获取咱们自定义的界面&lt;/span&gt;
    Button connectbutton21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器&lt;/span&gt;
    Button cancelbutton22;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
    ProgressBar progressBar21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    EditText iPEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
    EditText portEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
    TextView titleEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.activity_main);
        
        buttonconnect1 &lt;/span&gt;= (Button) findViewById(R.id.button11);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取按钮&lt;/span&gt;
&lt;span&gt;        
        buttonconnect1.setOnTouchListener(buttonconnect1Touch);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮的触摸事件&lt;/span&gt;
        
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*对话框相关*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        AlertDialog21 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; AlertDialog.Builder (MainActivity.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).create(); 
        View1 &lt;/span&gt;= View.inflate(MainActivity.&lt;span&gt;this&lt;/span&gt;, R.layout.dialog, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        AlertDialog21.setView(View1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置显示内容为自定义的界面&lt;/span&gt;
        connectbutton21 = (Button) View1.findViewById(R.id.button21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器按钮&lt;/span&gt;
        cancelbutton22 = (Button) View1.findViewById(R.id.Button22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
        progressBar21 = (ProgressBar) View1.findViewById(R.id.progressBar21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
        progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条不显示&lt;/span&gt;
        iPEditText = (EditText)View1.findViewById(R.id.editText21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
        portEditText = (EditText)View1.findViewById(R.id.editText22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
        titleEditText = (TextView) View1.findViewById(R.id.textView21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主界面连接服务器按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在呢就缺少显示了...&lt;/p&gt;
&lt;p&gt;我们在主按钮的点击事件中调用显示函数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005182041130-880497159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;

import android.app.Activity;
import android.app.AlertDialog;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {

    Button buttonconnect1;
    AlertDialog AlertDialog21;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个提示框&lt;/span&gt;
    View View1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个view用来获取咱们自定义的界面&lt;/span&gt;
    Button connectbutton21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器&lt;/span&gt;
    Button cancelbutton22;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
    ProgressBar progressBar21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    EditText iPEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
    EditText portEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
    TextView titleEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.activity_main);
        
        buttonconnect1 &lt;/span&gt;= (Button) findViewById(R.id.button11);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取按钮&lt;/span&gt;
        buttonconnect1.setOnClickListener(buttonconnect1Click);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮点击事件&lt;/span&gt;
        buttonconnect1.setOnTouchListener(buttonconnect1Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮的触摸事件&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*对话框相关*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        AlertDialog21 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; AlertDialog.Builder (MainActivity.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).create(); 
        View1 &lt;/span&gt;= View.inflate(MainActivity.&lt;span&gt;this&lt;/span&gt;, R.layout.dialog, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        AlertDialog21.setView(View1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置显示内容为自定义的界面&lt;/span&gt;
        connectbutton21 = (Button) View1.findViewById(R.id.button21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器按钮&lt;/span&gt;
        cancelbutton22 = (Button) View1.findViewById(R.id.Button22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
        progressBar21 = (ProgressBar) View1.findViewById(R.id.progressBar21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
        progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条不显示&lt;/span&gt;
        iPEditText = (EditText)View1.findViewById(R.id.editText21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
        portEditText = (EditText)View1.findViewById(R.id.editText22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
        titleEditText = (TextView) View1.findViewById(R.id.textView21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主按钮点击事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener buttonconnect1Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;            AlertDialog21.show();
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主界面连接服务器按钮背景改变
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 现在安装到手机上看一下---界面还可以&lt;/p&gt;
&lt;p&gt;                                                           做这个简单的取消事件&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005182214161-716012585.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005182606693-1286089347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005183049177-925821855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;连接按钮呢!!我先说一下思路,,,按下连接按钮是启动一个连接任务,然后呢还要启动一个倒计时器(3S),,,控制这个连接任务执行的时间,还要显示进度条,,如果3S内连接上了,,那么在连接的后面关掉进度条,结束这个连接任务,取消定时器,关闭对话框,然后进入控制界面,,如果3S内没有连接上,也关闭连接任务,关掉进度条,同时显示连接失败.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005184220724-734101296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 现在的&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

import android.app.Activity;
import android.app.AlertDialog;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.renderscript.Mesh.Primitive;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {

    Button buttonconnect1;
    AlertDialog AlertDialog21;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个提示框&lt;/span&gt;
    View View1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个view用来获取咱们自定义的界面&lt;/span&gt;
    Button connectbutton21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器&lt;/span&gt;
    Button cancelbutton22;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
    ProgressBar progressBar21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    EditText iPEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
    EditText portEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
    TextView titleEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    
    String Ipstring&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录IP地址&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; portint=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录端口号&lt;/span&gt;
    boolean ConnectFlage=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ShowPointSum=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示点的数量,连接中.....(后面的点)&lt;/span&gt;
    Socket socket = &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义socket&lt;/span&gt;
&lt;span&gt;    InetAddress ipAddress;
    OutputStream outputStream&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义输出流&lt;/span&gt;
    InputStream inputStream=&lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义输入流&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.activity_main);
        
        buttonconnect1 &lt;/span&gt;= (Button) findViewById(R.id.button11);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取按钮&lt;/span&gt;
        buttonconnect1.setOnClickListener(buttonconnect1Click);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮点击事件&lt;/span&gt;
        buttonconnect1.setOnTouchListener(buttonconnect1Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮的触摸事件&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*对话框相关*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        AlertDialog21 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; AlertDialog.Builder (MainActivity.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).create(); 
        View1 &lt;/span&gt;= View.inflate(MainActivity.&lt;span&gt;this&lt;/span&gt;, R.layout.dialog, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        AlertDialog21.setView(View1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置显示内容为自定义的界面&lt;/span&gt;
        connectbutton21 = (Button) View1.findViewById(R.id.button21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器按钮&lt;/span&gt;
        cancelbutton22 = (Button) View1.findViewById(R.id.Button22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
        progressBar21 = (ProgressBar) View1.findViewById(R.id.progressBar21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
        progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条不显示&lt;/span&gt;
        iPEditText = (EditText)View1.findViewById(R.id.editText21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
        portEditText = (EditText)View1.findViewById(R.id.editText22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
        titleEditText = (TextView) View1.findViewById(R.id.textView21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;        
        cancelbutton22.setOnClickListener(cancelbutton22Click);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对话框取消事件&lt;/span&gt;
        connectbutton21.setOnClickListener(connectbutton21Click);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对话框连接按钮点击事件&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 对话框连接按钮点击事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener connectbutton21Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            Ipstring = iPEditText.getText().toString().replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
            portint &lt;/span&gt;= Integer.valueOf(portEditText.getText().toString().replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));
            progressBar21.setVisibility(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示进度条&lt;/span&gt;
&lt;span&gt;            tcpClientCountDownTimer.cancel();
            tcpClientCountDownTimer.start();
            ConnectFlage &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            ShowPointSum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            ConnectSeverThread connectSeverThread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectSeverThread();
            connectSeverThread.start();
        }
    };
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 
     * @author 连接服务器任务
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnectSeverThread extends Thread
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
        {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(ConnectFlage)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
                {
                    ipAddress &lt;/span&gt;=&lt;span&gt; InetAddress.getByName(Ipstring);
                    socket &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Socket(ipAddress, portint);
                    ConnectFlage &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    tcpClientCountDownTimer.cancel();
                    runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable()
                    {
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                        {    
                            progressBar21.setVisibility(&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
                            AlertDialog21.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭提示框&lt;/span&gt;
&lt;span&gt;                        }                        
                    });
                    inputStream &lt;/span&gt;= socket.getInputStream();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取输入流&lt;/span&gt;
&lt;span&gt;                
                } 
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                    
                }
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 对话框取消按钮事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener cancelbutton22Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            ConnectFlage = &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消连接任务&lt;/span&gt;
            tcpClientCountDownTimer.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束定时器&lt;/span&gt;
            progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
            AlertDialog21.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭对话框&lt;/span&gt;
&lt;span&gt;        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 延时3s的定时器
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; CountDownTimer tcpClientCountDownTimer = &lt;span&gt;new&lt;/span&gt; CountDownTimer(&lt;span&gt;3000&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;&lt;span&gt;) {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onTick(&lt;span&gt;long&lt;/span&gt; millisUntilFinished) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每隔200ms进入&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ConnectFlage) 
            {    ShowPointSum &lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt; (ShowPointSum%&lt;span&gt;9&lt;/span&gt;&lt;span&gt;) 
                {   &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中........&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onFinish() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3s后进入(没有取消定时器的情况下)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ConnectFlage) 
            {    ConnectFlage &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                progressBar21.setVisibility(&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
                titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接服务器失败!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            tcpClientCountDownTimer.cancel();
        }
    }; 
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主按钮点击事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener buttonconnect1Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            AlertDialog21.show();
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主界面连接服务器按钮背景改变
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005190719833-2138484926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005191035943-1451231187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005191508880-1229668087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005191741099-1067050649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005191905740-1698530847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 现在加上权限然后连接WIFI模块测试一下哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193452865-447397473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.READ_PHONE_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;  
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.INTERNET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.ACCESS_WIFI_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.WAKE_LOCK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.CHANGE_WIFI_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.VIBRATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 连接模块的无线&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193617130-2122916164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193719568-36571132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193907599-90221737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193932536-1976675694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后会发现&lt;/p&gt;
&lt;p&gt;对话框消失了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005194011490-699701053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为咱们自己设置的消失&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005200546802-470312822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在让它连接后打开控制界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005201207411-919446228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还是先把IP和端口号的信息做成能够保存的吧&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 咱们就用  &lt;span&gt;SharedPreferences&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看一下这篇文章的介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/baidu_31093133/article/details/51476726##1&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://blog.csdn.net/baidu_31093133/article/details/51476726##1&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005203432068-1289186819.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;h4 id=&quot;1得到sharedpreferences对象&quot;&gt;得到SharedPreferences对象&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005203550818-286849935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005203825068-1961874312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005203906083-256334163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么一开始运行就要检测是不是记录了,,如果记录了就取出来记录的数据然后显示在对应的文本框中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005204049052-952073242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整体的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.preference.PreferenceManager;
import android.renderscript.Mesh.Primitive;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {

    Button buttonconnect1;
    AlertDialog AlertDialog21;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个提示框&lt;/span&gt;
    View View1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个view用来获取咱们自定义的界面&lt;/span&gt;
    Button connectbutton21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器&lt;/span&gt;
    Button cancelbutton22;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
    ProgressBar progressBar21;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    EditText iPEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
    EditText portEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
    TextView titleEditText;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;    
    String Ipstring&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录IP地址&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; portint=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录端口号&lt;/span&gt;
    boolean ConnectFlage=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ShowPointSum=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示点的数量,连接中.....(后面的点)&lt;/span&gt;
    Socket socket = &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义socket&lt;/span&gt;
&lt;span&gt;    InetAddress ipAddress;
    OutputStream outputStream&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义输出流&lt;/span&gt;
    InputStream inputStream=&lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义输入流&lt;/span&gt;
    
    &lt;span&gt;private&lt;/span&gt; SharedPreferences sharedPreferences;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储数据&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; SharedPreferences.Editor editor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储数据&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.activity_main);
        
        buttonconnect1 &lt;/span&gt;= (Button) findViewById(R.id.button11);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取按钮&lt;/span&gt;
        buttonconnect1.setOnClickListener(buttonconnect1Click);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮点击事件&lt;/span&gt;
        buttonconnect1.setOnTouchListener(buttonconnect1Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮的触摸事件&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*对话框相关*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        AlertDialog21 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; AlertDialog.Builder (MainActivity.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).create(); 
        View1 &lt;/span&gt;= View.inflate(MainActivity.&lt;span&gt;this&lt;/span&gt;, R.layout.dialog, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        AlertDialog21.setView(View1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置显示内容为自定义的界面&lt;/span&gt;
        connectbutton21 = (Button) View1.findViewById(R.id.button21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器按钮&lt;/span&gt;
        cancelbutton22 = (Button) View1.findViewById(R.id.Button22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消按钮&lt;/span&gt;
        progressBar21 = (ProgressBar) View1.findViewById(R.id.progressBar21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
        progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条不显示&lt;/span&gt;
        iPEditText = (EditText)View1.findViewById(R.id.editText21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;
        portEditText = (EditText)View1.findViewById(R.id.editText22);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口号&lt;/span&gt;
        titleEditText = (TextView) View1.findViewById(R.id.textView21);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;连接&quot;&lt;/span&gt;
&lt;span&gt;        
        cancelbutton22.setOnClickListener(cancelbutton22Click);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对话框取消事件&lt;/span&gt;
        connectbutton21.setOnClickListener(connectbutton21Click);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对话框连接按钮点击事件&lt;/span&gt;
&lt;span&gt;        
        sharedPreferences &lt;/span&gt;= PreferenceManager.getDefaultSharedPreferences(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        
        boolean issave &lt;/span&gt;= sharedPreferences.getBoolean(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到save文件存的值，得不到会返回false&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (issave) 
        {
            String Ipstring &lt;/span&gt;= sharedPreferences.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ipstring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.4.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出ip,不存在返回192.168.4.1&lt;/span&gt;
            String portint = sharedPreferences.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;portint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出端口号,不存在返回8080&lt;/span&gt;
&lt;span&gt;            iPEditText.setText(Ipstring);
            portEditText.setText(portint);
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 对话框连接按钮点击事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener connectbutton21Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            Ipstring = iPEditText.getText().toString().replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
            portint &lt;/span&gt;= Integer.valueOf(portEditText.getText().toString().replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));
            progressBar21.setVisibility(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示进度条&lt;/span&gt;
&lt;span&gt;            tcpClientCountDownTimer.cancel();
            tcpClientCountDownTimer.start();
            ConnectFlage &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            ShowPointSum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            ConnectSeverThread connectSeverThread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConnectSeverThread();
            connectSeverThread.start();
            
            editor &lt;/span&gt;=&lt;span&gt; sharedPreferences.edit();
            editor.putString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ipstring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Ipstring);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录ip&lt;/span&gt;
            editor.putString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;portint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, portEditText.getText().toString());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录端口号&lt;/span&gt;
            editor.putBoolean(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入记录标志&lt;/span&gt;
&lt;span&gt;            editor.commit();
        }
    };
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 
     * @author 连接服务器任务
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnectSeverThread extends Thread
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
        {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(ConnectFlage)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
                {
                    ipAddress &lt;/span&gt;=&lt;span&gt; InetAddress.getByName(Ipstring);
                    socket &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Socket(ipAddress, portint);
                    ConnectFlage &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    tcpClientCountDownTimer.cancel();
                    runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable()
                    {
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                        {    
                            progressBar21.setVisibility(&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
                            AlertDialog21.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭提示框&lt;/span&gt;
&lt;span&gt;                        }                        
                    });
                    inputStream &lt;/span&gt;= socket.getInputStream();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取输入流&lt;/span&gt;
&lt;span&gt;                
                } 
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                    
                }
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 对话框取消按钮事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener cancelbutton22Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            ConnectFlage = &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消连接任务&lt;/span&gt;
            tcpClientCountDownTimer.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束定时器&lt;/span&gt;
            progressBar21.setVisibility(-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
            AlertDialog21.cancel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭对话框&lt;/span&gt;
&lt;span&gt;        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 延时3s的定时器
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; CountDownTimer tcpClientCountDownTimer = &lt;span&gt;new&lt;/span&gt; CountDownTimer(&lt;span&gt;3000&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;&lt;span&gt;) {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onTick(&lt;span&gt;long&lt;/span&gt; millisUntilFinished) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每隔200ms进入&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ConnectFlage) 
            {    ShowPointSum &lt;/span&gt;++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt; (ShowPointSum%&lt;span&gt;9&lt;/span&gt;&lt;span&gt;) 
                {   &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中.......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;:titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中........&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onFinish() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3s后进入(没有取消定时器的情况下)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ConnectFlage) 
            {    ConnectFlage &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                progressBar21.setVisibility(&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭滚动条&lt;/span&gt;
                titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接服务器失败!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            tcpClientCountDownTimer.cancel();
        }
    }; 
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主按钮点击事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnClickListener buttonconnect1Click = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            titleEditText.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            AlertDialog21.show();
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 主界面连接服务器按钮背景改变
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener buttonconnect1Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                buttonconnect1.setBackgroundResource(R.drawable.buttondown);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                buttonconnect1.setBackgroundResource(R.drawable.butonup);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在做控制界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205133255-1047479103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205311224-1448507964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205332990-1488801779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205508115-1371993050.png&quot; alt=&quot;&quot; width=&quot;1067&quot; height=&quot;643&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205611021-1257528223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005205818193-1745725176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005211107036-534526403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005211141896-767535281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005211402849-1890260315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005212058333-1652869383.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005212410365-205615935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/background_dark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginBottom&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_above&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;35dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/qianjin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton32&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/houtui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/youzhuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton34&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_toLeftOf&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/zuozhuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;CheckBox
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/checkBox31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerHorizontal&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开重感&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005223104208-2146316964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个ProgressBar默认是,,水平的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005223205052-610318861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要改成竖直的其实就是自己写一个外观和变化的文件,然后调用,,,,,就像咱们自定义按钮样式一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005234809646-574985177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005234956333-22022098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005235355224-754769632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后呢在里面加上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;layer-list xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;
    &amp;lt;item android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:id/background&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;shape&amp;gt;
            &amp;lt;corners android:radius=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5dip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
            &amp;lt;&lt;span&gt;gradient
                    android:startColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ff9d9e9d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    android:centerColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ff5a5d5a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    android:centerY&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.75&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    android:endColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ff747674&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    android:angle&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            /&amp;gt;
        &amp;lt;/shape&amp;gt;
    &amp;lt;/item&amp;gt;
    
    &amp;lt;item android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:id/progress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span&gt;clip
                android:clipOrientation&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vertical&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
                android:gravity &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &amp;gt;
               
            &amp;lt;shape&amp;gt;
                &amp;lt;corners android:radius=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5dip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
                &amp;lt;&lt;span&gt;gradient
                        android:startColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ffffd300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        android:centerColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ffffb600&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        android:centerX&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.75&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        android:endColor&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ffffcb00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        android:angle&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                /&amp;gt;
            &amp;lt;/shape&amp;gt;
        &amp;lt;/clip&amp;gt;
    &amp;lt;/item&amp;gt;

&amp;lt;/layer-list&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;要问我你怎么知道这样写..百度的,然后从源码里面copy 过来的.........亲们也可以百度哈,,,,,现在我也只是个入门的,只不过善于去用别人的东西,,不过后期我肯定会去学习这些东西代表的含义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005235650974-591270777.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006001605724-1713293817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在的控制的界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006001657536-871847496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;布局文件&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginBottom&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_above&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;35dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/qianjin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton32&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/houtui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/youzhuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;ImageButton
        android:background&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@android:color/transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton34&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginRight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_toLeftOf&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/imageButton33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:src&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/zuozhuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    
    &amp;lt;&lt;span&gt;CheckBox
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/checkBox31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerHorizontal&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerVertical&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开重感&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView32&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignParentTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerHorizontal&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;速度&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;ProgressBar
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/progressBar31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?android:attr/progressBarStyleHorizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:progressDrawable&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/progress_vertical&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_above&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/checkBox31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView32&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerHorizontal&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/progressBar31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_toRightOf&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/progressBar31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;高&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView34&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_above&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/checkBox31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_alignLeft&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;低&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

    &amp;lt;&lt;span&gt;TextView
        android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView35&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_below&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/textView33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_marginTop&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_toRightOf&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/progressBar31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;现在连接上以后跳转到这个界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006122248318-1700798892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置在连接上以后,跳转&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006122328115-1315963644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 对了要在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006122700427-1313693410.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006122604177-150741724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 现在可以试一试&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193617130-2122916164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171005193907599-90221737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006124127490-320620564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;整体还好啦.....只不过中间的那个textview太明显了.....咱在代码中把他设置成透明的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006133924552-1791922239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006134020677-457768011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面开始做控制的代码,那些一看就懂的咱就稍微一说哈,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在看重力传感器,,还是先看,这个,,因为重力传感器的数据要用这个ProgressBar显示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006134302802-672215353.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006135011396-208145173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以下载进去看一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006134733708-618428205.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;先把这个也做上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006140708396-1781236578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006141243865-456292656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在把手机的传感器弄上来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006144900865-1508086429.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006145032536-1136058868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006144920068-230284237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006145109193-1893081078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006144940990-2095168402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;这是一个人介绍的感觉挺好的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://blog.csdn.net/wll995806658/article/details/53993356&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/wll995806658/article/details/53993356&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在的程序&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;



import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ProgressBar;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Control extends MainActivity {
    
    ProgressBar progressBar31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    CheckBox  checkBox31;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开重力传感器&lt;/span&gt;
&lt;span&gt;    
    SensorManager sensorManager;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建sensor的管理器&lt;/span&gt;
    Sensor sensor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传感器&lt;/span&gt;
    &lt;span&gt;float&lt;/span&gt; X_lateral;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;X方向角度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; Speed=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度&lt;/span&gt;
    TextView textView35;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示速度值&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.control);
        
        progressBar31 &lt;/span&gt;=&lt;span&gt; (ProgressBar) findViewById(R.id.progressBar31);
        progressBar31.setProgress(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示到一半&lt;/span&gt;
&lt;span&gt;        
        checkBox31 &lt;/span&gt;=&lt;span&gt; (CheckBox) findViewById(R.id.checkBox31);
        checkBox31.setOnCheckedChangeListener(checkBox31Check);
        
        textView35 &lt;/span&gt;= (TextView) findViewById(R.id.textView35);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度显示&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 单选框事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnCheckedChangeListener checkBox31Check = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnCheckedChangeListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isChecked) 
            {
                sensorManager &lt;/span&gt;= (SensorManager) getSystemService(SENSOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取手机里面的传感器  &lt;/span&gt;
                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择获取重力传感器
                                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听函数                        重力传感器对象              工作频率&lt;/span&gt;
                sensorManager.registerListener(mySensorEventListener, sensor,  SensorManager.SENSOR_DELAY_NORMAL);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SENSOR_DELAY_GAME  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
            {
                sensorManager.unregisterListener(mySensorEventListener);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放传感器&lt;/span&gt;
&lt;span&gt;            }
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 重力传感器监听事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    SensorEventListener mySensorEventListener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SensorEventListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSensorChanged(SensorEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;.sensor.getType() ==&lt;span&gt; Sensor.TYPE_ACCELEROMETER)
            { &lt;/span&gt;
                X_lateral = &lt;span&gt;event&lt;/span&gt;.values[&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;10&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把-10到10的数据变为0-20  &lt;/span&gt;
                Speed = (&lt;span&gt;int&lt;/span&gt;)((&lt;span&gt;100&lt;/span&gt;-(X_lateral*&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;))*&lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变为0-200&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Speed&amp;gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
                    Speed &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                }
                textView35.setText(String.valueOf(Speed));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(controlcar.this, Y_longitudinal+&quot;&quot;, 500).show();&lt;/span&gt;
                runOnUiThread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        progressBar31.setProgress(Speed);
                    }
                });
            }  
        }
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onAccuracyChanged(Sensor sensor, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; accuracy) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;            
        }
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;直接加了一些程序下载到手机旋转手机可以看出效果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006150346333-348444417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006151107974-24363358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006150454005-1027596811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 对了,,一定要加一个关掉传感器的操作.....因为一旦打开,,您不主动关掉,它就一直运行,,,,,,耗电哈,,耗电,,耗电,,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006151745255-798391244.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {
        super.onPause();
        sensorManager.unregisterListener(mySensorEventListener);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;



import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ProgressBar;
import android.widget.Toast;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Control extends MainActivity {
    
    ProgressBar progressBar31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    CheckBox  checkBox31;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开重力传感器&lt;/span&gt;
&lt;span&gt;    
    SensorManager sensorManager;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建sensor的管理器&lt;/span&gt;
    Sensor sensor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传感器&lt;/span&gt;
    &lt;span&gt;float&lt;/span&gt; X_lateral;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;X方向角度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; Speed=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度&lt;/span&gt;
    TextView textView35;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示速度值&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.control);
        
        progressBar31 &lt;/span&gt;=&lt;span&gt; (ProgressBar) findViewById(R.id.progressBar31);
        progressBar31.setProgress(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示到一半&lt;/span&gt;
&lt;span&gt;        
        checkBox31 &lt;/span&gt;=&lt;span&gt; (CheckBox) findViewById(R.id.checkBox31);
        checkBox31.setOnCheckedChangeListener(checkBox31Check);
        
        textView35 &lt;/span&gt;= (TextView) findViewById(R.id.textView35);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度显示&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 单选框事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnCheckedChangeListener checkBox31Check = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnCheckedChangeListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isChecked) 
            {
                sensorManager &lt;/span&gt;= (SensorManager) getSystemService(SENSOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取手机里面的传感器  &lt;/span&gt;
                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择获取重力传感器
                                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听函数                        重力传感器对象              工作频率&lt;/span&gt;
                sensorManager.registerListener(mySensorEventListener, sensor,  SensorManager.SENSOR_DELAY_NORMAL);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SENSOR_DELAY_GAME  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
            {
                sensorManager.unregisterListener(mySensorEventListener);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放传感器&lt;/span&gt;
&lt;span&gt;            }
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 重力传感器监听事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    SensorEventListener mySensorEventListener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SensorEventListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSensorChanged(SensorEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;.sensor.getType() ==&lt;span&gt; Sensor.TYPE_ACCELEROMETER)
            {  &lt;/span&gt;
                X_lateral = &lt;span&gt;event&lt;/span&gt;.values[&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;10&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把-10到10的数据变为0-20  &lt;/span&gt;
                Speed = (&lt;span&gt;int&lt;/span&gt;)((&lt;span&gt;100&lt;/span&gt;-(X_lateral*&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;))*&lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变为0-200&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Speed&amp;gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
                    Speed &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                }
                textView35.setText(String.valueOf(Speed));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(controlcar.this, Y_longitudinal+&quot;&quot;, 500).show();&lt;/span&gt;
                runOnUiThread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        progressBar31.setProgress(Speed);
                    }
                });
            } 
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                sensorManager.unregisterListener(mySensorEventListener);
                runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        checkBox31.setChecked(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                        Toast.makeText(Control.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传感器不存在!!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            }
        }
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onAccuracyChanged(Sensor sensor, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; accuracy) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;            
        }
    };
    
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {
        super.onPause();
        sensorManager.unregisterListener(mySensorEventListener);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;现在把按键的事件做上,,,按下咱做成震动一下,,当然也可以自己做成播放声音的&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;


import android.app.Service;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ProgressBar;
import android.widget.Toast;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Control extends MainActivity {
    
    ProgressBar progressBar31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    CheckBox  checkBox31;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开重力传感器&lt;/span&gt;
    SensorManager sensorManager;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建sensor的管理器&lt;/span&gt;
    Sensor sensor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传感器&lt;/span&gt;
    &lt;span&gt;float&lt;/span&gt; X_lateral;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;X方向角度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; Speed=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度&lt;/span&gt;
    TextView textView35;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示速度值&lt;/span&gt;
&lt;span&gt;    
    ImageButton imageButton31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
    ImageButton imageButton32;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
    ImageButton imageButton33;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
    ImageButton imageButton34;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;    
    boolean forward &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean back &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean right &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean left &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    
    Vibrator vibrator;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮按下震动&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.control);
        
        progressBar31 &lt;/span&gt;=&lt;span&gt; (ProgressBar) findViewById(R.id.progressBar31);
        progressBar31.setProgress(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示到一半&lt;/span&gt;
&lt;span&gt;        
        checkBox31 &lt;/span&gt;=&lt;span&gt; (CheckBox) findViewById(R.id.checkBox31);
        checkBox31.setOnCheckedChangeListener(checkBox31Check);
        
        textView35 &lt;/span&gt;= (TextView) findViewById(R.id.textView35);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度显示&lt;/span&gt;
&lt;span&gt;        
        imageButton31 &lt;/span&gt;= (ImageButton) findViewById(R.id.imageButton31);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
        imageButton32 = (ImageButton) findViewById(R.id.imageButton32);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
        imageButton33 = (ImageButton) findViewById(R.id.imageButton33);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
        imageButton34 = (ImageButton) findViewById(R.id.imageButton34);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;        
        imageButton31.setOnTouchListener(imageButton31Touch);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
        imageButton32.setOnTouchListener(imageButton32Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
        imageButton33.setOnTouchListener(imageButton33Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
        imageButton34.setOnTouchListener(imageButton34Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;        
        vibrator&lt;/span&gt;=(Vibrator)getSystemService(Service.VIBRATOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 前进按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton31Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                forward &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                back&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton31.setImageResource(R.drawable.qianjindown);
                
                vibrator.vibrate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                forward &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton31.setImageResource(R.drawable.qianjin);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 后退按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton32Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                back&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                forward&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton32.setImageResource(R.drawable.houtuidown);
                vibrator.vibrate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                back&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton32.setImageResource(R.drawable.houtui);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 右转按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton33Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                right&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                left&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton33.setImageResource(R.drawable.youzhuandown);
                vibrator.vibrate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                right&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton33.setImageResource(R.drawable.youzhuan);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 左转按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton34Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                left&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                right&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton34.setImageResource(R.drawable.zuozhuandown);
                vibrator.vibrate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                left&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton34.setImageResource(R.drawable.zuozhuan);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 单选框事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnCheckedChangeListener checkBox31Check = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnCheckedChangeListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isChecked) 
            {
                sensorManager &lt;/span&gt;= (SensorManager) getSystemService(SENSOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取手机里面的传感器  &lt;/span&gt;
                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择获取重力传感器
                                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听函数                        重力传感器对象              工作频率&lt;/span&gt;
                sensorManager.registerListener(mySensorEventListener, sensor,  SensorManager.SENSOR_DELAY_NORMAL);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SENSOR_DELAY_GAME  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
            {
                sensorManager.unregisterListener(mySensorEventListener);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放传感器&lt;/span&gt;
&lt;span&gt;            }
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 重力传感器监听事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    SensorEventListener mySensorEventListener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SensorEventListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSensorChanged(SensorEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;.sensor.getType() ==&lt;span&gt; Sensor.TYPE_ACCELEROMETER)
            {  
                X_lateral &lt;/span&gt;= &lt;span&gt;event&lt;/span&gt;.values[&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;10&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把-10到10的数据变为0-20  &lt;/span&gt;
                Speed = (&lt;span&gt;int&lt;/span&gt;)((&lt;span&gt;100&lt;/span&gt;-(X_lateral*&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;))*&lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变为0-200&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Speed&amp;gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
                    Speed &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                }
                textView35.setText(String.valueOf(Speed));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(controlcar.this, Y_longitudinal+&quot;&quot;, 500).show();&lt;/span&gt;
                runOnUiThread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        progressBar31.setProgress(Speed);
                    }
                });
            } 
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                sensorManager.unregisterListener(mySensorEventListener);
                runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        checkBox31.setChecked(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                        Toast.makeText(Control.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传感器不存在!!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            }
        }
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onAccuracyChanged(Sensor sensor, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; accuracy) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;            
        }
    };
    
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {
        super.onPause();
        sensorManager.unregisterListener(mySensorEventListener);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在呢建一个发送任务开始发送数据了......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在前一篇的关于8266的设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;规定的协议&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006155756380-347176188.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;看一下现在的代码&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.wificardemo;


import java.io.IOException;
import java.nio.ByteBuffer;



import android.app.Service;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ProgressBar;
import android.widget.Toast;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Control extends MainActivity {
    
    ProgressBar progressBar31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进度条&lt;/span&gt;
    CheckBox  checkBox31;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开重力传感器&lt;/span&gt;
    SensorManager sensorManager;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建sensor的管理器&lt;/span&gt;
    Sensor sensor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传感器&lt;/span&gt;
    &lt;span&gt;float&lt;/span&gt; X_lateral;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;X方向角度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; Speed=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度&lt;/span&gt;
    TextView textView35;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示速度值&lt;/span&gt;
&lt;span&gt;    
    ImageButton imageButton31;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
    ImageButton imageButton32;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
    ImageButton imageButton33;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
    ImageButton imageButton34;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;    
    boolean forward &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean back &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean right &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    boolean left &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    
    Vibrator vibrator;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮按下震动&lt;/span&gt;
    
    
    &lt;span&gt;byte&lt;/span&gt;[] sendbyte = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;4&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送的数据缓存&lt;/span&gt;
    boolean SendDataFlag = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送数据任务控制&lt;/span&gt;
    SendMsgThread sendMsgThread;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送数据任务&lt;/span&gt;
    boolean stopcar = &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行一次发送停车数据&lt;/span&gt;
    Intent intentmain = &lt;span&gt;new&lt;/span&gt; Intent(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;界面跳转--主界面&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置主题风格&lt;/span&gt;
&lt;span&gt;        setContentView(R.layout.control);
        
        progressBar31 &lt;/span&gt;=&lt;span&gt; (ProgressBar) findViewById(R.id.progressBar31);
        progressBar31.setProgress(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示到一半&lt;/span&gt;
&lt;span&gt;        
        checkBox31 &lt;/span&gt;=&lt;span&gt; (CheckBox) findViewById(R.id.checkBox31);
        checkBox31.setOnCheckedChangeListener(checkBox31Check);
        
        textView35 &lt;/span&gt;= (TextView) findViewById(R.id.textView35);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;速度显示&lt;/span&gt;
&lt;span&gt;        
        imageButton31 &lt;/span&gt;= (ImageButton) findViewById(R.id.imageButton31);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
        imageButton32 = (ImageButton) findViewById(R.id.imageButton32);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
        imageButton33 = (ImageButton) findViewById(R.id.imageButton33);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
        imageButton34 = (ImageButton) findViewById(R.id.imageButton34);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;        
        imageButton31.setOnTouchListener(imageButton31Touch);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
        imageButton32.setOnTouchListener(imageButton32Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
        imageButton33.setOnTouchListener(imageButton33Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
        imageButton34.setOnTouchListener(imageButton34Touch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
&lt;span&gt;        
        vibrator&lt;/span&gt;=(Vibrator)getSystemService(Service.VIBRATOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动&lt;/span&gt;
&lt;span&gt;        
        sendMsgThread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SendMsgThread();
        sendMsgThread.start();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动发送数据任务&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 前进按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton31Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                forward &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                back&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton31.setImageResource(R.drawable.qianjindown);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
&lt;span&gt;                
                vibrator.vibrate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                forward &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton31.setImageResource(R.drawable.qianjin);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 后退按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton32Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                back&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                forward&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton32.setImageResource(R.drawable.houtuidown);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
                vibrator.vibrate(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动   &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                back&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton32.setImageResource(R.drawable.houtui);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 右转按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton33Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                right&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                left&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton33.setImageResource(R.drawable.youzhuandown);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
                vibrator.vibrate(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                right&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton33.setImageResource(R.drawable.youzhuan);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 左转按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener imageButton34Touch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_DOWN) {
                left&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                right&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton34.setImageResource(R.drawable.zuozhuandown);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
                vibrator.vibrate(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;[]{&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;}, -&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;震动   &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction()==&lt;span&gt;MotionEvent.ACTION_UP) {
                left&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                imageButton34.setImageResource(R.drawable.zuozhuan);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变背景&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     *左转大于右转大于后退大于前进
     *(单个按钮)谁按下执行谁
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SendMsgThread extends Thread
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
        {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(SendDataFlag)
            {
                sendbyte[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0xaa&lt;/span&gt;&lt;span&gt;;
                sendbyte[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x55&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!checkBox31.isChecked()) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有打开重力传感器速度默认50&lt;/span&gt;
                    sendbyte[&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (forward) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前进&lt;/span&gt;
                    sendbyte[&lt;span&gt;2&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (back) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后退&lt;/span&gt;
                    sendbyte[&lt;span&gt;2&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x02&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (right) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右转&lt;/span&gt;
                    sendbyte[&lt;span&gt;2&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (left) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左转&lt;/span&gt;
                    sendbyte[&lt;span&gt;2&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x04&lt;/span&gt;&lt;span&gt;;
                }
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (forward || back || right || left) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有按下的按钮&lt;/span&gt;
&lt;span&gt;                {
                    stopcar &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有过按钮操作&lt;/span&gt;
&lt;span&gt;                    netSend(sendbyte);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有按下的按钮发送一次停车指令&lt;/span&gt;
&lt;span&gt;                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (stopcar) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有过按钮操作&lt;/span&gt;
&lt;span&gt;                    {
                        stopcar &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                        sendbyte[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x05&lt;/span&gt;&lt;span&gt;;
                        sendbyte[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
                        netSend(sendbyte);
                    }
                }
                
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;延时100ms&lt;/span&gt;
                } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                }
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 发送数据
     * @param byt
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; netSend(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] byt)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; crc = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        ByteBuffer Crcbyte &lt;/span&gt;= ByteBuffer.allocate(&lt;span&gt;4&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建4个字节的  ByteBuffer&lt;/span&gt;
        
        &lt;span&gt;byte&lt;/span&gt;[] sendbyte = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[byt.length + &lt;span&gt;2&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后面加2是原来存储CRC&lt;/span&gt;

        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; byt.length; i++)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;copy数据&lt;/span&gt;
&lt;span&gt;        {
            sendbyte[i] &lt;/span&gt;=&lt;span&gt; byt[i];
        }

        crc &lt;/span&gt;= crc16_modbus(byt, byt.length);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算CRC&lt;/span&gt;
        Crcbyte.putInt(crc);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把int转成byte--默认是转成4个字节的,,所以上面定义了4个字节的↑↑&lt;/span&gt;
&lt;span&gt;
        sendbyte[sendbyte.length &lt;/span&gt;- &lt;span&gt;2&lt;/span&gt;] = Crcbyte.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;低位在前----java看来默认的大端模式存储数据&lt;/span&gt;
        sendbyte[sendbyte.length - &lt;span&gt;1&lt;/span&gt;] = Crcbyte.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;高位在后&lt;/span&gt;
        
        
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
        {
            outputStream &lt;/span&gt;=&lt;span&gt; socket.getOutputStream();
            outputStream.write(sendbyte);
        } 
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
        {
            SendDataFlag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            socket &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                @Override
                &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
                    Toast.makeText(Control.&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;与服务器断开连接,请重新连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                }
            });
            intentmain.setClass(Control.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, MainActivity.&lt;span&gt;class&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有错误跳转到主界面重新连接&lt;/span&gt;
                Control.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.startActivity(intentmain);
            
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 单选框事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnCheckedChangeListener checkBox31Check = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnCheckedChangeListener() {
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isChecked) 
            {
                sensorManager &lt;/span&gt;= (SensorManager) getSystemService(SENSOR_SERVICE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取手机里面的传感器  &lt;/span&gt;
                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择获取重力传感器
                                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听函数                        重力传感器对象              工作频率&lt;/span&gt;
                sensorManager.registerListener(mySensorEventListener, sensor,  SensorManager.SENSOR_DELAY_NORMAL);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SENSOR_DELAY_GAME  &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
            {
                sensorManager.unregisterListener(mySensorEventListener);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放传感器&lt;/span&gt;
&lt;span&gt;            }
        }
    };
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 重力传感器监听事件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    SensorEventListener mySensorEventListener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SensorEventListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSensorChanged(SensorEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;.sensor.getType() ==&lt;span&gt; Sensor.TYPE_ACCELEROMETER)
            {  
                X_lateral &lt;/span&gt;= &lt;span&gt;event&lt;/span&gt;.values[&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;10&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把-10到10的数据变为0-20  &lt;/span&gt;
                Speed = (&lt;span&gt;int&lt;/span&gt;)((&lt;span&gt;100&lt;/span&gt;-(X_lateral*&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;2&lt;/span&gt;))*&lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变为0-200&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Speed&amp;gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
                    Speed &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                }
                sendbyte[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = (&lt;span&gt;byte&lt;/span&gt;)Speed;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到速度变量&lt;/span&gt;
&lt;span&gt;                textView35.setText(String.valueOf(Speed));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(controlcar.this, Y_longitudinal+&quot;&quot;, 500).show();&lt;/span&gt;
                runOnUiThread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        progressBar31.setProgress(Speed);
                    }
                });
            } 
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                sensorManager.unregisterListener(mySensorEventListener);
                runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() 
                    {
                        checkBox31.setChecked(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                        Toast.makeText(Control.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传感器不存在!!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            }
        }
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onAccuracyChanged(Sensor sensor, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; accuracy) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;            
        }
    };
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * CRC检验值
     * @param modbusdata
     * @param length
     * @return CRC检验值
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; crc16_modbus(&lt;span&gt;byte&lt;/span&gt;[] modbusdata, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length)
     {
         &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;, j=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

         &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; crc = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

         &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
         {
             &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;)
             {
                 crc &lt;/span&gt;^= (modbusdata[i]&amp;amp;(&lt;span&gt;0xff&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意这里要&amp;amp;0xff&lt;/span&gt;
                 &lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; &lt;span&gt;8&lt;/span&gt;; j++&lt;span&gt;)
                 {
                     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((crc &amp;amp; &lt;span&gt;0x01&lt;/span&gt;) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                     {
                         crc &lt;/span&gt;= (crc &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) ;
                         crc &lt;/span&gt;= crc ^ &lt;span&gt;0xa001&lt;/span&gt;&lt;span&gt;;
                     }
                     &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                     {
                         crc &lt;/span&gt;&amp;gt;&amp;gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                     }
                 }
             }
         }
         &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
         {

         }

         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; crc;
     }
    
     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
      * CRC校验正确标志
      * @param modbusdata
      * @param length
      * @return 0-failed 1-success 
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; crc16_flage(&lt;span&gt;byte&lt;/span&gt;[] modbusdata, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length)
     {
         &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Receive_CRC = &lt;span&gt;0&lt;/span&gt;, calculation = &lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收到的CRC,计算的CRC&lt;/span&gt;
&lt;span&gt;
         Receive_CRC &lt;/span&gt;=&lt;span&gt; crc16_modbus(modbusdata, length);
         calculation &lt;/span&gt;= modbusdata[length + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
         calculation &lt;/span&gt;&amp;lt;&amp;lt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
         calculation &lt;/span&gt;+=&lt;span&gt; modbusdata[length];
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (calculation !=&lt;span&gt; Receive_CRC)
         {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
     }
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {&lt;br/&gt;　　　　 SendDataFlag = false;
        sensorManager.unregisterListener(mySensorEventListener);&lt;/span&gt;　　　　super.onPause();
&lt;/pre&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;} &lt;br/&gt;}&lt;/span&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;代码越来越多,,有什么办法把以前的折叠&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整体就是程序一开始启动发送数据任务,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006161504990-340534958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发送数据的方式可以轻松的看出来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006161754724-1381645822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;关于为什么需要&amp;amp;0xff,可以看这篇文章&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bbs.csdn.net/topics/260061974&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://bbs.csdn.net/topics/260061974&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在呢!!把MainActivity的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006162342865-830404362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;改为静态的,,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为换到了其它界面,,,所以在其它界面这个socket是null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;静态的可以避免啦..............&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然也可以在跳转界面的时候想办法把socket传过去.............&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在可以终于可以控制车了.....................&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算了不演示了,,一口气写完&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在在控制界面实现这个功能,按一次提示返回主界面,,2S内连续按就返回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006163546130-1342398939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006163629052-2024841996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006163736693-574311571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; boolean onKeyDown(&lt;span&gt;int&lt;/span&gt; keyCode,KeyEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;)
     {
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (keyCode ==&lt;span&gt; KeyEvent.KEYCODE_BACK
                    &lt;/span&gt;&amp;amp;&amp;amp; &lt;span&gt;event&lt;/span&gt;.getAction() ==&lt;span&gt; KeyEvent.ACTION_DOWN) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断间隔时间 大于2秒就退出应用&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; ((System.currentTimeMillis() - exitTime) &amp;gt; &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;) {
                    Toast.makeText(getApplicationContext(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;再按一次返回连接界面&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                            Toast.LENGTH_SHORT).show();
                    exitTime &lt;/span&gt;=&lt;span&gt; System.currentTimeMillis();
                } 
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
                {
                    intentmain.setClass(Control.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, MainActivity.&lt;span&gt;class&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转到控制界面&lt;/span&gt;
                    Control.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.startActivity(intentmain);
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;主界面呢按返回键&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006174316943-2075375306.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171006174351271-1976155412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 手机返回按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; boolean onKeyDown(&lt;span&gt;int&lt;/span&gt; keyCode,KeyEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;)
     {
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (keyCode == KeyEvent.KEYCODE_BACK &amp;amp;&amp;amp; &lt;span&gt;event&lt;/span&gt;.getAction() ==&lt;span&gt; KeyEvent.ACTION_DOWN) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断间隔时间 大于2秒就退出应用&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; ((System.currentTimeMillis() - exitTime) &amp;gt; &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;) 
                {
                    Toast.makeText(getApplicationContext(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;再按一次退出程序&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Toast.LENGTH_SHORT).show();
                    exitTime &lt;/span&gt;=&lt;span&gt; System.currentTimeMillis();
                } 
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
                {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;{socket.close();} &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {e.printStackTrace();}
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;{outputStream.close();} &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {e.printStackTrace();}
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;{inputStream.close();} &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {e.printStackTrace();}
                    MainActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finish();
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
     }
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {
        super.onPause();
        MainActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finish();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;虽然实现了,但是自己还是有疑问,,,这里就不说了,,等着再整理成一篇文章(关于Activity加载问题)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在呢还需要加一个功能,,判断Socket是否断开,,,控制界面跳转到连接界面后,,点击主界面的主按钮如果判断socket还在连接着,就直接跳转到控制界面,,,咱们是利用的接收数据判断&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己看的这篇文章&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/HelloMyPeople/article/details/51906460?locationNum=11&amp;amp;fps=1&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://blog.csdn.net/HelloMyPeople/article/details/51906460?locationNum=11&amp;amp;fps=1&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改一下程序,........说一下自己遇到的问题以及解决方法(关于Activity加载问题,还有一下细节问题)---上面的程序有bug.....每次都是重新点击连接.....因为&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007010118427-1781718682.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;否则可以看一看打印的日志&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007010656490-1005310341.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007010509833-695975337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以导致了每回连接的时候,即使一开始连接上了还是会重新连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;改成这样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007010623865-2083435670.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007010822380-1834298786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了......关于现在的错误搜索了一下没得到想要的结果,,有人说是Android本身的.....&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了不出现意外我在所有的sensorManager.unregisterListener(mySensorEventListener);都加了先判断sensorManager是不是null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有下面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007011651458-2000824471.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;下面说一下&lt;span&gt;activity的launchMode     加载模式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007011819130-1134685984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家有没有遇到过,多个界面的时候退出的时候不是返回到以前的界面就是又重新加载现在的界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在说一下问题所在&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;界面加载的时候默认&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007013748568-1816177561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就咱现在的而言不设置加载方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先是A打开B,,,因为B是standard模式,,,所以现在是    AB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后从B加载A因为A是standard模式 所以现在是  ABA,,,,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设没有错误令&lt;span&gt;AB&lt;/span&gt;A前头的AB销毁的话,,那么按下手机的返回键 会依次显示B,,然后 A,然后才退出程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我现在想&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先是A打开B,,,因为B是standard模式,,,所以现在是    AB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后从B加载A因为A是standard模式 所以现在是  ABA&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我想在A按返回键的时候退出程序那么可以选择一种方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把A设置成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007014424958-2063768821.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果A是这种模式咱在走一走&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A打开B           AB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B打开A           因为B在A前头所以把B给销毁了,这种方式不会创建新的实例,,,所以只剩下A&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后按下返回键----注销A  程序会退出&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;网上呢!还有一些方式,,比如存储所有的Activity,退出的时候把所有的Activity销毁,,然后退出,,,,,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;感觉还是知道为什么会这样自己才会有更好的理解,,才会想出自己的办法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;感谢这位博主..写出这篇这么好的文章&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;a href=&quot;http://blog.163.com/w_z_w_z_w/blog/static/21995700720139131355207/&quot; target=&quot;_blank&quot;&gt;http://blog.163.com/w_z_w_z_w/blog/static/21995700720139131355207/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 所以呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007015208115-1701332838.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;自己还修改了一些地方&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**
     * 手机返回按钮
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; boolean onKeyDown(&lt;span&gt;int&lt;/span&gt; keyCode,KeyEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;)
     {
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (keyCode == KeyEvent.KEYCODE_BACK &amp;amp;&amp;amp; &lt;span&gt;event&lt;/span&gt;.getAction() ==&lt;span&gt; KeyEvent.ACTION_DOWN) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断间隔时间 大于2秒就退出应用&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; ((System.currentTimeMillis() - exitTime) &amp;gt; &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;) 
                {
                    Toast.makeText(getApplicationContext(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;再按一次退出程序&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Toast.LENGTH_SHORT).show();
                    exitTime &lt;/span&gt;=&lt;span&gt; System.currentTimeMillis();
                } 
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
                {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (socket!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;) 
                        {
                            socket.close();
                        }
                    } 
                    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
                    {
                        e.printStackTrace();
                    }
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (outputStream!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;) 
                        {
                            outputStream.close();
                        }
                    } 
                    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
                    {
                        e.printStackTrace();
                    }
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (inputStream!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;) 
                        {
                            inputStream.close();
                        }
                    } 
                    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) 
                    {
                        e.printStackTrace();
                    }
                    MainActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finish();
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;都判断了一下是不是空,,,其实对于退出而言感觉没有必要判断了,,,,,反正都需要注销,,但是呢我想让打印的日志把错误降到自己感觉&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以的程度..............&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个启动退出..............&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819239/201710/819239-20171007015455505-1316316633.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 好了源码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接：&lt;a href=&quot;http://pan.baidu.com/s/1nuFGdlv&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1nuFGdlv&lt;/a&gt; 密码：rq9g&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 06 Oct 2017 18:11:00 +0000</pubDate>
<dc:creator>杨奉武</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfengwu/p/7633980.html</dc:identifier>
</item>
<item>
<title>【JAVA零基础入门系列】Day2 Java集成开发环境IDEA - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7633784.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7633784.html</guid>
<description>&lt;p&gt;开发环境搭建好之后，还需要一个集成开发环境也就是IDE来进行编程。这里推荐的IDE是IDEA，那个老掉牙的Eclipse还是先放一边吧，（手动滑稽）。&lt;/p&gt;
&lt;p&gt;IDEA的下载地址：http://www.jetbrains.com/idea/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007011054302-452764107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007011101943-1807598377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下载的时候，可以选ultimate版，也可以选community版，建议选择ultimate版，下载好以后安装，激活码地址：http://idea.lanyus.com/ 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中，然后输入激活码就能成功激活了。&lt;/p&gt;
&lt;p&gt;安装好以后，所有的都按默认选项进行安装即可。&lt;/p&gt;
&lt;p&gt;然后开始创建第一个项目，HelloWorld&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007011552208-1542698251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007011602724-1533963904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007011638240-476766734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建好以后，右键src文件夹，添加package，然后在package里添加HelloWorld类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007012731490-1581182099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007012743005-207318865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007012748161-2041165652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在文件里放上代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; HelloWorld;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.System;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloWorld {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        System.out.println(&lt;/span&gt;&quot;Hello World!&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击Run，运行程序，选择HelloWorld，代码就跑起来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007012927521-2085674008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，IDE设置完成，我们的第一个项目也完工。&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 17:31:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7633784.html</dc:identifier>
</item>
<item>
<title>uva 1382 Distant Galaxy - qrfkickit</title>
<link>http://www.cnblogs.com/kickit/p/7632963.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kickit/p/7632963.html</guid>
<description>&lt;p&gt;https://vjudge.net/problem/UVA-1382&lt;/p&gt;
&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给出平面上的n个点，找出一个矩形，使得边界上包含尽量多的点。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;参考训练指南。&lt;/p&gt;
&lt;p&gt;首先如果枚举起起点，终点，再进行统计的话，复杂度显然太大了，因为坐标的范围是10的9次方级别的。&lt;/p&gt;
&lt;p&gt;所以，又想到扫描线的方法。&lt;/p&gt;
&lt;p&gt;我们首先对数组排个序，枚举上下边界，之后，用三个数组，left[i]表示i这条线左边（不包括这条线）的在上下边界的点的数量，on[i]表示在i这条线上的位于上下边界之间的点的数量（不包括上下边界），on2[i]表示，&lt;/p&gt;
&lt;p&gt;在i这条线上的位于上下边界之间的点的数量（包括上下边界），我们从左往右扫一遍，维护这三个数组的信息。&lt;/p&gt;
&lt;p&gt;left[i] = left[i-1] + on2[i] - on[i-1],在i-1这条边的左边的在上下边界上的点的数量等于它上一条边的左边的在上下边界上的点的数量加上上一条边的在上下边界上的点的数量，on2[i-1] - on[i-1]就是位于上下边界的点的数量。&lt;/p&gt;
&lt;p&gt;ans = max(left[i] + on2[i]+on[k] - left[k])(k &amp;lt; i)，我们要维护的就是on[k] - left[k]的最大值，在从左往右扫的时候维护。&lt;/p&gt;
&lt;p&gt;一些细节的处理需要注意，比如点都在一条边或者两条边上。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; node
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,y;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; } a[&lt;span&gt;105&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; y[&lt;span&gt;105&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; left[&lt;span&gt;105&lt;/span&gt;],on[&lt;span&gt;105&lt;/span&gt;],on2[&lt;span&gt;105&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; cmp(node aa,node bb)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; aa.x &amp;lt;&lt;span&gt; bb.x;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; solve(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     sort(a,a+&lt;span&gt;n,cmp);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; ans = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     sort(y,y+&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     m = unique(y,y+n) -&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (m &amp;lt;= &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; m;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt;;j &amp;lt; m;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ymin = y[i],ymax =&lt;span&gt; y[j];
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; num = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;;k &amp;lt; n;k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (k == &lt;span&gt;0&lt;/span&gt; || a[k].x != a[k-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].x)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 num++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;                 on[num] = on2[num] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;                 left[num] = num == &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;0&lt;/span&gt; : left[num-&lt;span&gt;1&lt;/span&gt;] + on2[num-&lt;span&gt;1&lt;/span&gt;] - on[num-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a[k].y &amp;gt; ymin &amp;amp;&amp;amp; a[k].y &amp;lt; ymax) on[num]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a[k].y &amp;gt;= ymin &amp;amp;&amp;amp; a[k].y &amp;lt;= ymax) on2[num]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (num &amp;lt;= &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; M = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;1&lt;/span&gt;;k &amp;lt;= num;k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             ans = max(ans,M + left[k] +&lt;span&gt; on2[k]);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             M = max(M,on[k] -&lt;span&gt; left[k]);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; kase = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n) !=&lt;span&gt; EOF)
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!n) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;a[i].x,&amp;amp;&lt;span&gt;a[i].y);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;             y[i] =&lt;span&gt; a[i].y;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ans =&lt;span&gt; solve();
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; 
&lt;span&gt;87&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Case %d: %d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,++&lt;span&gt;kase,ans);
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; 
&lt;span&gt;90&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 06 Oct 2017 15:58:00 +0000</pubDate>
<dc:creator>qrfkickit</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kickit/p/7632963.html</dc:identifier>
</item>
<item>
<title>JavaWeb（一）Servlet中乱码解决与转发和重定向的区别 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7632531.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7632531.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　前面其实已经把Servlet中所有的内容都介绍完了，这篇讲补充一点乱码和重定向与转发之间的区别！&lt;/p&gt;

&lt;h2&gt;1.1、get请求&lt;/h2&gt;
&lt;p&gt;　　1）乱码示例&lt;/p&gt;
&lt;p&gt;　　get请求的参数是在url后面提交过来的，也就是在请求行中。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006220448318-1028632254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006220515630-1985251316.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006221830474-216860706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　Servlet_demo_0040是一个普通的Servlet，浏览器访问它时，使用get请求方式提交了一个username=小明的参数值，在doGet中获取该参数值，并且打印到控制台，发现出现乱码&lt;/p&gt;
&lt;p&gt;　　2）出现乱码原因&lt;/p&gt;
&lt;p&gt;　　　　前期知识：&lt;/p&gt;
&lt;p&gt;　　　　　　码表：&lt;span&gt;是一种规则，用来让我们看得懂的语言转换为电脑能够认识的语言的一种规则&lt;/span&gt;，有很多中码表，IS0-8859-1,GBK,UTF-8,UTF-16等一系列码表，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　比如GBK,UTF-8,UTF-16都可以标识一个汉字，而如果要标识英文，就可以用IS0-8859-1等别的码表。&lt;/p&gt;
&lt;p&gt;　　　　　　编码：将&lt;span&gt;我们看得懂的语言转换为电脑能够认识的语言&lt;/span&gt;。这个过程就是编码的作用。&lt;/p&gt;
&lt;p&gt;　　　　　　解码：将&lt;span&gt;电脑认识的语言转换为我们能看得懂得语言&lt;/span&gt;。这个过程就是解码的作用&lt;/p&gt;
&lt;p&gt;　　　　这里只能够代表经过一次编码例子，有些程序中，会将一个汉字或者一个字母用不同的码表连续编码几次，那么第一次编码还是上面所说的作用，第二次编码的话，&lt;/p&gt;
&lt;p&gt;　　　　就是将电脑能够认识的语言转换为电脑能够认识的语言(转换规则不同)，那么该解码过程，就必须要经过两次解码，也就是编码的逆过程，下面这个例子就很好的说明了这个问题：&lt;/p&gt;
&lt;p&gt;　　　　浏览器使用的是UTF-8码表，通过http协议传输，http协议只支持IS0-8859-1，到了服务器，默认也是使用的是IS0-8859-1的码表，看图：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006181230458-601493351.png&quot; alt=&quot;&quot; width=&quot;914&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　从上面的图中可以看出，就是三个过程，经历了两次编码，所以就需要进行两次解码：&lt;/p&gt;
&lt;p&gt;　　　　　　1）浏览器将&quot;小明&quot;使用UTF-8码表进行编码(因为小明这个是汉字，所以使用能标识中文的码表，这也是我们可以在浏览器上可以手动设置的，如果使用了不能标识中文的码表，那么就将会出现乱码，&lt;/p&gt;
&lt;p&gt;　　　　　　　　因为码表中找不到中文对应的计算机符号，就可能会用？？等其他符号表示)，编码后得到的为 1234 ，将其通过http协议传输。&lt;/p&gt;
&lt;p&gt;　　　　　　2）在&lt;span&gt;http协议传输，只能用ISO-8859-1码表中所代表的符号，所以会将我们原先的1234再次进行一次编码&lt;/span&gt;，这次使用的是ISO-8859-1，得到的为 ???? ，然后传输到服务器。&lt;/p&gt;
&lt;p&gt;　　　　　　3）服务器获取到该数据是经过了两次编码后得到的数据，所以必须跟原先编码的过程逆过来解码，先是UTF-8编码，然后在ISO-8859-1编码，那么解码的过程，就必须是先ISO-8859-1解码，然后在用UTF-8解码，&lt;/p&gt;
&lt;p&gt;　　　　　　　　这样就能够得到正确的数据。????.getBytes(&quot;ISO-8859-1&quot;);//第一次解码，转换为电脑能够识别的语言， new String(1234,&quot;UTF-8&quot;);//第二次解码，转换为我们认识的语言&lt;/p&gt;
&lt;p&gt;　　3）解决方法&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006221722036-1886855070.png&quot; alt=&quot;&quot; width=&quot;709&quot; height=&quot;229&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006221801630-1974917291.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2、post请求&lt;/h2&gt;
&lt;p&gt;　　post请求方式的参数是&lt;span&gt;在请求体中&lt;/span&gt;，相对于get请求简单很多，没有经过http协议这一步的编码过程，所&lt;span&gt;以只需要在服务器端，设置服务器解码的码表跟浏览器编码的码表是一样的就行&lt;/span&gt;了，&lt;/p&gt;
&lt;p&gt;　　在这里浏览器使用的是UTF-8码表编码，那么服务器端就设置解码所用码表也为UTF-8就OK了。&lt;/p&gt;
&lt;p&gt;　　设置服务器端使用UTF-8码表解码：&lt;/p&gt;
&lt;p&gt;　　　　request.setCharacterEncoding(&quot;UTF-8&quot;);　　//命令Tomcat使用UTF-8码表解码，而不用默认的ISO-8859-1了。&lt;/p&gt;
&lt;p&gt;　　所以在很多时候，在&lt;span&gt;doPost方法的第一句，就是这句代码，防止获取请求参数时乱码&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;总结请求参数乱码问题：&lt;/p&gt;
&lt;p&gt;　　get请求和post请求方式的中文乱码问题处理方式不同&lt;/p&gt;
&lt;p&gt;　　get:请求参数在请求行中，涉及了http协议，手动解决乱码问题，知道出现乱码的根本原因，对症下药，其原理就是进行两次编码，两次解码的过程&lt;/p&gt;
&lt;p&gt;　　　　new String(xxx.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);&lt;/p&gt;
&lt;p&gt;　　post：请求参数在请求体中，使用servlet API解决乱码问题，其原理就是一次编码一次解码，命令tomcat使用特定的码表解码。&lt;/p&gt;
&lt;p&gt;　　　　request.setCharaterEncoding(&quot;UTF-8&quot;);&lt;/p&gt;

&lt;p&gt;　　首先介绍一下，response对象是如何向浏览器发送数据的。两种方法，一种getOutputStream，一种getWrite：　　&lt;/p&gt;
&lt;p&gt;　　　　ServletOutputStream getOutputStream();　　//获取输出字节流，提供write() 和 print() 两个输出方法。&lt;/p&gt;
&lt;p&gt;　　　　PrintWriter getWrite();　　//获取输出字符流，提供write() 和 print()两个输出方法。&lt;/p&gt;
&lt;p&gt;　　print()方法底层都是&lt;span&gt;使用write()方法的，相当于print()方法就是将write()方法进行了封装&lt;/span&gt;，使开发者更方便快捷的使用，想输出什么，就直接选择合适的print()方法，而不用考虑如何转换字节。　　&lt;/p&gt;
&lt;h2&gt;2.1、ServeltOutputStream getOutputStream();　&lt;/h2&gt;
&lt;p&gt;　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006222601021-200694531.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果:不能直接输出中文，直接输出中文会报异常　　　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006222702177-1400173931.png&quot; alt=&quot;&quot; width=&quot;695&quot; height=&quot;94&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　报异常的源码分析：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006222812380-1018770976.png&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　解决方法：&lt;/p&gt;
&lt;p&gt;　　　　resp.getoutputStream().write(&quot;哈哈哈，我要输出到浏览器&quot;.getBytes(&quot;UTF-8&quot;));&lt;/p&gt;
&lt;p&gt;　　　　将要输出的汉字&lt;span&gt;先用UTF-8进行编码，而不用让tomcat来进行编码&lt;/span&gt;，这样如果浏览器用的是UTF-8码表进行解码的话，那么就会正确输出，如果浏览器用的不是UTF-8，那么还是会出现乱码，&lt;/p&gt;
&lt;p&gt;　　　　所以说&lt;span&gt;这个关键要看浏览器用的什么码表，这个就不太好，这里还要注意一点，就是使用的是write(byte)方法，因为print()方法没有输出byte类型的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　测试：因为我用的是谷歌浏览器它默认使用的是GB2312所以这里使用的是GB2312&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006223229958-1306594035.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006223310599-499040237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、PrintWriter getWrite();&lt;/h2&gt;
&lt;p&gt;　　直接输出中文，不会报异常，但是肯定会报异常，因为用ISO-8859-1的码表不能标识中文，一开始就是错的，怎么解码编码读没用了。&lt;/p&gt;
&lt;p&gt;　　有三种方法来让其正确输出中文：&lt;/p&gt;
&lt;p&gt;　　1）使用Servlet API  response.setCharacterEncoding()&lt;/p&gt;
&lt;p&gt;　　　　response.setCharacterEncoding(&quot;UTF-8&quot;);　　//让tomcat将我们要&lt;span&gt;响应到浏览器的中文用UTF-8进行编码，而不使用默认的ISO-8859-1了，这个还是要取决于浏览器是不是用的UTF-8的码表&lt;/span&gt;，跟上面的一样有缺陷。&lt;/p&gt;
&lt;p&gt;　　　　测试：因为我用的是谷歌浏览器它默认使用的是GB2312所以这里使用的是GB2312&lt;/p&gt;
&lt;p&gt;　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006223955427-1253910861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）通知tomcat和浏览器都使用同一张码表&lt;/p&gt;
&lt;p&gt;　　　　response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=uft-8&quot;);　　//手动设置响应内容，通知tomcat和浏览器使用utf-8来进行编码和解码。　　&lt;/p&gt;
&lt;p&gt;　　　　　　charset=uft-8就相当于response.setCharacterEncoding(&quot;UTF-8&quot;);//通知tomcat使用utf-8进行编码&lt;/p&gt;
&lt;p&gt;　　　　　　response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=uft-8&quot;);//合起来，就是既通知tomcat用utf-8编码，又通知浏览器用UTF-8进行解码。&lt;/p&gt;
&lt;p&gt;　　　　response.setContentType(&quot;text/html;charset=uft-8&quot;);　　//&lt;span&gt;使用Servlet API 来通知tomcat和强制浏览器使用UTF-8来进行编码解码，这个的底层代码就是上一行的代码，进行了简单的封装而己&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006224855458-1431592456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）通知tomcat，在使用html&amp;lt;meta&amp;gt;通知浏览器 (html源码)，注意：&amp;lt;meta&amp;gt;建议浏览器应该使用编码，不能强制要求&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006224921396-975514403.png&quot; alt=&quot;&quot; width=&quot;805&quot; height=&quot;126&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　所以response在响应时，只要通知tomcat和浏览器使用同一张码表，一般使用第二种方法，那么就可以解决响应的乱码问题了&lt;/p&gt;

&lt;h2&gt;3.1、请求乱码　&lt;/h2&gt;
&lt;p&gt;　　get请求：&lt;/p&gt;
&lt;p&gt;　　　　经过了两次编码，所以就要两次解码&lt;/p&gt;
&lt;p&gt;　　　　　　第一次解码：xxx.getBytes(&quot;ISO-8859-1&quot;);得到yyy&lt;/p&gt;
&lt;p&gt;　　　　　　第二次解码：new String(yyy,&quot;utf-8&quot;);&lt;/p&gt;
&lt;p&gt;　　　　连续写：new String(xxx.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);&lt;/p&gt;
&lt;p&gt;　　post请求：&lt;/p&gt;
&lt;p&gt;　　　　只经过一次编码，所以也就只要一次解码,使用Servlet API　request.setCharacterEncoding();&lt;/p&gt;
&lt;p&gt;　　　　request.setCharacterEncoding(&quot;UTF-8&quot;);　　//不一定解决，取决于浏览器是用什么码表来编码，浏览器用UTF-8，那么这里就写UTF-8。&lt;/p&gt;
&lt;h2&gt;3.2、响应乱码&lt;/h2&gt;
&lt;p&gt;　　getOutputStream();：&lt;/p&gt;
&lt;p&gt;　　　　使用该字节输出流，不能直接输出中文，会出异常，要想输出中文，解决方法如下&lt;/p&gt;
&lt;p&gt;　　　　解决：getOutputStream().write(xxx.getBytes(&quot;UTF-8&quot;));　　//手动将中文用UTF-8码表编码，变成字节传输，变成字节后，就不会报异常，并且tomcat也不会在编码，因为已经编码过了，所以到浏览器后，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　如果浏览器使用的是UTF-8码表解码，那么就不会出现中文乱码，反之则出现中文乱码，所以这个方法，不能完全保证中文不乱码&lt;/p&gt;
&lt;p&gt;　　getWrite();：&lt;/p&gt;
&lt;p&gt;　　　　使用字符输出流，能直接输出中文，不会出异常，但是会出现乱码。能用三种方法解决，一直使用第二种方法&lt;/p&gt;
&lt;p&gt;　　　　解决：通知tomcat和浏览器使用同一张码表。&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;　response.setContentType(&quot;text/html;charset=utf-8&quot;);　　//通知浏览器使用UTF-8解码 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　通知tomcat和浏览器使用UTF-8编码和解码。这个方法的底层原理是这句话：response.setHeader(&quot;contentType&quot;,&quot;text/html;charset=utf-8&quot;); &lt;/p&gt;
&lt;p&gt;　　注意：&lt;span&gt;getOutputStream()和getWrite() 这两个方法不能够同时使用，一次只能使用一个，否则报异常　&lt;/span&gt;　　　　&lt;/p&gt;

&lt;h2&gt; 4.1、使用方式　&lt;/h2&gt;
&lt;p&gt;　　1）在servlet中调用转发、重定向的语句如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
request.getRequestDispatcher(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;new.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).forward(request, response); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转发到new.jsp&lt;/span&gt;
response.sendRedirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;new.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重定向到new.jsp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）在jsp页面中你也会看到通过下面的方式实现转发：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;jsp:forward page=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apage.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当然也可以在jsp页面中实现重定向：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;%response.sendRedirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;new.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); %&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重定向到new.jsp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取username信息&lt;/span&gt;
String username=request.getParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转发与重定向&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt;(username.equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)){
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提示用户已存在，不能注册&lt;/span&gt;
  request.setAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;该用户已存在，不能注册&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加提示信息，需要在userCreate.jsp页面中进行提示信息展示&lt;/span&gt;
  request.getRequestDispatcher(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userCreate.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).forward(request, response);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转法&lt;/span&gt;
 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提示注册成功&lt;/span&gt;
  request.setAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;注册成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  response.sendRedirect(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indext.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重定向&lt;/span&gt;
 }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.2、区别：重定向和转发的工作流程&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006232746552-2032731940.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;438&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1）转发的工作流程‘&lt;/p&gt;
&lt;p&gt;　　　　第一步：客户浏览器发送http请求&lt;br/&gt;　　　　第二步：web服务器接受此请求　　　　&lt;br/&gt;　　　　第三步：调用内部的一个方法在容器内部完成请求处理和转发动作　　&lt;br/&gt;　　　　第四步：将目标资源发送给客户；在这里，&lt;span&gt;转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request&lt;/span&gt;。在客户浏览器路径栏显示的仍然是其第一次访问的路径，&lt;br/&gt;　　　　　　　　也就是说&lt;span&gt;客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求&lt;/span&gt;。　&lt;/p&gt;
&lt;p&gt;　　2）重定向的工作流程&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006232620349-2123311538.png&quot; alt=&quot;&quot; width=&quot;517&quot; height=&quot;202&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　第一步：客户浏览器发送http请求&lt;br/&gt;　　　　第二步：web服务器接受后&lt;span&gt;发送302状态码响应及对应新的location&lt;/span&gt;给客户浏览器&lt;br/&gt;　　　　第三步：客户浏览器&lt;span&gt;发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址&lt;/span&gt;&lt;br/&gt;　　　　第四步：服务器根据&lt;span&gt;此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　总结：一句话，&lt;span&gt;转发是服务器行为，重定向是客户端行为&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;4.3、区别：请求次数&lt;/h2&gt;
&lt;p&gt;　　1）重定向&lt;/p&gt;
&lt;p&gt;　　　　重定向，其实是两次request&lt;/p&gt;
&lt;p&gt;　　　　第一次，客户端request   A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。&lt;span&gt;在重定向的过程中，传输的信息会被丢失&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　举例：　　　　　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　response.sendRedirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginsuccess.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）转发&lt;/p&gt;
&lt;p&gt;　　　　转发是一次request　　&lt;/p&gt;
&lt;p&gt;　　　　请求转发是&lt;span&gt;服务器内部把对一个request/response的处理权，移交给另外一个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　对于客户端而言，它&lt;span&gt;只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。传输的信息不会丢失&lt;/span&gt;。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 　　　　RequestDispatcher dis=&lt;span&gt;request.getRequestDispatcher(“loginsuccess.jsp”);
       dis.forward(request,response);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 4.4、生活中的例子说明区别&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171006232903536-1254055552.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;380&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　假设你去办理某个执照&lt;br/&gt;　　重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。&lt;br/&gt;　　转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。&lt;/p&gt;

&lt;p&gt;　　1）重定向的执行过程：Web服务器向浏览器发送一个http响应--》浏览器接受此响应后再发送一个新的http请求到服务器--》服务器&lt;span&gt;根据此请求寻找资源并发送给浏览器。它可以重定向到任意URL，不能共享request范围内的数据&lt;/span&gt;。&lt;br/&gt;　　2）重定向是在&lt;span&gt;客户端发挥作用，通过新的地址实现页面转向&lt;/span&gt;。&lt;br/&gt;　　3）重定向是通&lt;span&gt;过浏览器重新请求地址，在地址栏中可以显示转向后的地址&lt;/span&gt;。&lt;br/&gt;　　4）转发过程：Web服务器&lt;span&gt;调用内部方法在容器内部完成请求和转发动作-&lt;/span&gt;-》将&lt;span&gt;目标资源发送给浏览器，它只能在同一个Web应用中使用，可以共享request范围内的数据&lt;/span&gt;。&lt;br/&gt;　　5）转发是在&lt;span&gt;服务器端发挥作用，通过forward()方法将提交信息在多个页面间进行传递&lt;/span&gt;。&lt;br/&gt;　　6）转发是在服&lt;span&gt;务器内部控制权的转移，客户端浏览器的地址栏不会显示出转向后的地址。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就点个“推荐”哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 15:37:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7632531.html</dc:identifier>
</item>
<item>
<title>css常见布局方式 - unclekeith</title>
<link>http://www.cnblogs.com/unclekeith/p/7633239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/unclekeith/p/7633239.html</guid>
<description>&lt;h2 id=&quot;css常见布局方式&quot;&gt;CSS常见布局方式&lt;/h2&gt;
&lt;p&gt;以下总结一下CSS中常见的布局方式。本人才疏学浅，如有错误，请留言指出。&lt;/p&gt;
&lt;p&gt;如需转载，请注明出处：&lt;a href=&quot;http://www.cnblogs.com/unclekeith/p/7633239.html&quot;&gt;CSS常见布局方式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用BFC隐藏属性&lt;/li&gt;
&lt;li&gt;float + margin&lt;/li&gt;
&lt;li&gt;absolute + margin&lt;/li&gt;
&lt;li&gt;圣杯布局&lt;/li&gt;
&lt;li&gt;双飞翼布局&lt;/li&gt;
&lt;li&gt;flex布局&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;以上5种方式都可以实现两栏或三栏布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果对BFC(块级格式化上下文)概念不熟悉的朋友，可以先看看这篇文章。&lt;a href=&quot;http://www.cnblogs.com/unclekeith/p/6158136.html&quot;&gt;BFC深入理解&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用bfc隐藏属性&quot;&gt;使用BFC隐藏属性&lt;/h3&gt;
&lt;p&gt;在对需要自适应的元素BFC化，可以实现两栏或三栏布局&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;两栏布局
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;

// 左边固定宽度，右边自适应
.aside1 {
  float: left;
  margin-right: 10px;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
.main {
  overflow: hidden;
  height: 100vh;
  background-color: lightpink;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要让两栏之间有空隙，可以给浮动元素设置&lt;code&gt;margin-right&lt;/code&gt;值，也可以给自适应的主内容设置&lt;code&gt;margin-left&lt;/code&gt;值。但设置&lt;code&gt;margin-left&lt;/code&gt;时，需要考虑到aside的宽度。实现三栏布局也是如此，给浮动元素设置&lt;code&gt;margin&lt;/code&gt;值会方便一些。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;三栏布局
// 这里要注意DOM的书写顺序问题。
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;aside class=&quot;aside2&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;

// 固定宽度
.aside1 {
  float: left;
  margin-right: 10px;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
// 固定宽度
.aside2 {
  float: right;
  margin-left: 10px;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
// BFC化自适应宽度
.main {
  overflow: hidden;
  height: 100vh;
  background-color: lightpink;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用BFC实现三栏布局时需要注意的是DOM的书写顺序问题。如果将aside2与article交换位置，那么aside2元素会被挤到article元素之下，无法实现三栏自适应布局。缺点：宽度小于aside宽度时，由于宽度不足的原因，三栏布局时会使元素出现掉下去的现象。&lt;/p&gt;
&lt;h3 id=&quot;float-margin&quot;&gt;float + margin&lt;/h3&gt;
&lt;p&gt;在自适应宽度的元素上设置margin值，margin的值大于或等于固定宽度的值即可。实现思路与&lt;strong&gt;使用BFC隐藏属性&lt;/strong&gt;差不多。缺点：宽度小于aside宽度时，由于宽度不足的原因，三栏布局时会使元素出现掉下去的现象。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;两栏布局
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;

.aside1 {
  float: left;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
.main {
  margin-left: 110px;
  height: 100vh;
  background-color: lightpink;
}

三栏布局
// 注意，DOM顺序不可改变
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;aside class=&quot;aside2&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;

.aside1 {
  float: left;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}

.main {
  margin-left: 110px;
  margin-right: 110px;
  height: 100vh;
  background-color: lightpink;
}

.aside2 {
  float: right;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;absolute-margin&quot;&gt;absolute + margin&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;// 使用position: absolute时，DOM元素顺序并不重要。给左右两栏定宽，主内容自适应宽度。缺点：侧边栏元素脱离文档流。优点：article元素可先加载。
&amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;aside class=&quot;aside2&quot;&amp;gt;&amp;lt;/aside&amp;gt;

.aside1 {
  position: absolute;
  left: 0;
  top: 0;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
.aside2 {
  position: absolute;
  right: 0;
  top: 0;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}
.main {
  margin: 0 110px;
  height: 100vh;
  background-color: lightpink;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用absolute + margin实现两栏布局时，只需要删除对应的栏目即可。&lt;/p&gt;
&lt;h3 id=&quot;圣杯布局&quot;&gt;圣杯布局&lt;/h3&gt;
&lt;p&gt;圣杯布局，为什么叫圣杯布局...其实我觉得很奇怪，倒不如叫float + 负margin + relative更贴切一下。实现思路如下&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;两栏和自适应元素都设置同一方向的浮动(如float: left)&lt;/li&gt;
&lt;li&gt;父元素设置左右padding为左右边栏的宽度。&lt;/li&gt;
&lt;li&gt;自适应元素设置宽度为100%&lt;/li&gt;
&lt;li&gt;左边栏margin-left为负100%，再设置relative，最后通过left属性偏移负的自身宽度。&lt;/li&gt;
&lt;li&gt;右边栏margin-left为负自身宽度，再设置relative，最后通过right属性偏移负的自身宽度。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;// 与其他布局不同，此布局需要父元素
&amp;lt;div class=&quot;parent&quot;&amp;gt;
  &amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;
  &amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
  &amp;lt;aside class=&quot;aside2&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;/div&amp;gt;

.parent {
  padding: 0 100px;
  // 左右边栏的宽度，可适当缩小以增加每栏之间的距离
}
.main {
  float: left;
  width: 100%;
  height: 100vh;
  background-color: lightpink;
}
.aside1 {
  float: left;
  position: relative;
  left: -100px;
  margin-left: -100%;
  width: 100px;
  height: 100vh;
  background-color: lightseagreen;
}
.aside2 {
  float: left;
  margin-left: -100px;
  position: relative;
  right: -100px;
  width: 100px;
  height: 100vh;
  background-color: lightsalmon;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然了，缺点也是有的。就是在宽度小于两栏宽度时，元素会因为宽度不足而掉下去。&lt;/p&gt;
&lt;h3 id=&quot;双飞翼布局&quot;&gt;双飞翼布局&lt;/h3&gt;
&lt;p&gt;双飞翼布局与圣杯布局相似。只不过少了relative与left, right的步骤和共同父元素，主内容元素多了层父元素。实现思路如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;两栏和自适应元素都设置同一方向的浮动(如float: left)&lt;/li&gt;
&lt;li&gt;main元素设置左右margin值，值为左右两栏的宽度。main父元素设置宽度为100%&lt;/li&gt;
&lt;li&gt;左边栏margin-left为负100%&lt;/li&gt;
&lt;li&gt;右边栏margin-left为负自身宽度&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;div class=&quot;main-wrap&quot;&amp;gt;
  &amp;lt;article class=&quot;main&quot;&amp;gt;&amp;lt;/article&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;aside class=&quot;aside1&quot;&amp;gt;&amp;lt;/aside&amp;gt;
&amp;lt;aside class=&quot;aside2&quot;&amp;gt;&amp;lt;/aside&amp;gt;

// 以下包含部分sass语法
.main {
  margin: 0 100px;
  height: 100vh;
  background-color: lightpink;
  &amp;amp;-wrap {
    float: left;
    width: 100%;
  }
}
.aside1 {
  float: left;
  width: 100px;
  margin-left: -100%;
  height: 100vh;
  background-color: lightseagreen;
}
.aside2 {
  float: left;
  width: 100px;
  margin-left: -100px;
  height: 100vh;
  background-color: lightsalmon;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;flex布局&quot;&gt;flex布局&lt;/h3&gt;
&lt;p&gt;flex布局新出现的概念较多，有兴趣的朋友可以到以下博客看更为详细的教程。使用flex来实现布局，我个人认为是最简单的方式。在移动端上，Android 4.4+以上、IOS 7.0+以上都支持flex布局。而在PC端上，使用flex布局时还是需要考虑一下的，因为到目前为止，IE11仍然只有部分属性支持。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 15:19:00 +0000</pubDate>
<dc:creator>unclekeith</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/unclekeith/p/7633239.html</dc:identifier>
</item>
<item>
<title>实数系与实数定理（下） - 黑山雁</title>
<link>http://www.cnblogs.com/xjtu-blacksmith/p/7625717.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjtu-blacksmith/p/7625717.html</guid>
<description>&lt;p&gt;　　在上一篇中，我们细说了实数集的有关特性，以及数学家为了认识清楚实数集而做的种种努力。在这一篇中，则将主要介绍有关于实数定理的内容。数学分析课程中一般都会对实数定理进行详细的介绍，但是关于这些定理从哪里来，代表着什么，如何在数学理论中发挥作用，我所见过的数学教材中往往含糊其辞，没有说清。这里，让我们结合之前对于实数集这个数学系统的讨论，来展开对于传说中的“N大”实数定理的介绍。&lt;/p&gt;
&lt;p&gt;　　这里先将我们下面将要介绍的几条实数定理的相关链接列出来，以供参考：&lt;a title=&quot;戴德金定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E6%88%B4%E5%BE%B7%E9%87%91%E5%AE%9A%E7%90%86/18882347&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Dedekind&lt;/em&gt;定理&lt;/a&gt;、&lt;a title=&quot;确界原理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E7%A1%AE%E7%95%8C%E5%8E%9F%E7%90%86/3198655?fr=aladdin&quot; target=&quot;_blank&quot;&gt;确界原理&lt;/a&gt;、&lt;a title=&quot;闭区间套定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E9%97%AD%E5%8C%BA%E9%97%B4%E5%A5%97%E5%AE%9A%E7%90%86&quot; target=&quot;_blank&quot;&gt;闭区间套定理&lt;/a&gt;、&lt;a title=&quot;单调有界定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E5%8D%95%E8%B0%83%E6%9C%89%E7%95%8C%E5%AE%9A%E7%90%86&quot; target=&quot;_blank&quot;&gt;单调有界定理&lt;/a&gt;、上下极限定理、&lt;a title=&quot;柯西极限存在准则-百度百科&quot; href=&quot;http://www.cnblogs.com/xjtu-blacksmith/p/baike.baidu.com/item/柯西极限存在准则&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Cauchy&lt;/em&gt;收敛准则&lt;/a&gt;、&lt;a title=&quot;波尔查诺-维尔斯特拉斯定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E6%B3%A2%E5%B0%94%E6%9F%A5%E8%AF%BA-%E7%BB%B4%E5%B0%94%E6%96%AF%E7%89%B9%E6%8B%89%E6%96%AF%E5%AE%9A%E7%90%86&quot; target=&quot;_blank&quot;&gt;列紧性定理&lt;/a&gt;、&lt;a title=&quot;有限覆盖定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E6%9C%89%E9%99%90%E8%A6%86%E7%9B%96%E5%AE%9A%E7%90%86&quot; target=&quot;_blank&quot;&gt;有限覆盖定理&lt;/a&gt;、&lt;a title=&quot;聚点定理-百度百科&quot; href=&quot;https://baike.baidu.com/item/%E8%81%9A%E7%82%B9%E5%AE%9A%E7%90%86&quot; target=&quot;_blank&quot;&gt;聚点定理&lt;/a&gt;、完备性公理。其中上下极限定理的说法不太常见，所以没有找到相关链接，将在下面进一步说明。完备性公理在上一篇博客中已经讨论过，因此不再重复给出。&lt;/p&gt;
&lt;h2&gt;3 有关实数定理的深度思考&lt;/h2&gt;
&lt;h3&gt;3.1 连续性和完备性的关系&lt;/h3&gt;
&lt;p&gt;　　还记得我们曾经归纳出来的实数集的三条特性吗？它们是&lt;strong&gt;不可数性&lt;/strong&gt;、&lt;strong&gt;连续性&lt;/strong&gt;、&lt;strong&gt;完备性&lt;/strong&gt;。其中，不可数性代表了实数集的“多少”，但是它反映了是实数集的一种&lt;strong&gt;内蕴&lt;/strong&gt;特征（或者说&lt;strong&gt;微观&lt;/strong&gt;特征）——例如，我们把实数轴割成两半，那么其中的每一段上的数，仍然是不可数的。因而不可数性，反映的是实数集带有的一种“&lt;strong&gt;结构特征&lt;/strong&gt;”，它对组成实数系的一些“单元”也成立。连续性表明了实数集合的一种&lt;strong&gt;形式&lt;/strong&gt;上的性质，它表明实数集合中没有空隙，不会再因为任何原因而从中出现像有理数集中的“\(\sqrt{2}\)”那样的“网眼”，连续性使人知道实数是一个&lt;strong&gt;看起来&lt;/strong&gt;完美的集合（实际上也很完美）。而实数集的完备性，则体现出实数集的&lt;strong&gt;本质&lt;/strong&gt;：它已经将所有应该收纳的内容囊括其中，不能再添加新的元素了。它是我们生活中所能接触到的一切数的总集合。相比于前两条性质，完备性才是说明实数之所以被人们成为实数的原因，也告诉数学家什么样的集合才是实数集。因此，完备性这条性质，可以说是实数集的核心性质。&lt;/p&gt;
&lt;p&gt;　　那么，连续性和完备性之间有没有什么关系呢？这就值得我们好好思考了。回想一下，连续性说的是实数没有空隙的性质，而完备性说的是实数集容纳一切的性质；那么，我把所有的空隙填上，不就等于让新的集合容纳一切了吗？这样看起来，似乎连续性和完备性，说的就是同一件事情。&lt;/p&gt;
&lt;p&gt;　　和完备性不同，连续性似乎没有一个能够比较容易说清楚的方式。关于完备性，我想前文提到的&lt;em&gt;Hilbert&lt;/em&gt;形式的完备性公理，应该已经非常简单明白了：它的意思就是说，实数集就是所有具有阿基米德性质的有序域中最大的一个，不能再大了，所以我们说它&lt;strong&gt;完备&lt;/strong&gt;了。连续性能不能也像这样比较简单而又完整的表述出来呢？连续性说的是，“实数集中没有空隙”，也就是说如果我们&lt;strong&gt;不限定用数学语言&lt;/strong&gt;描述，那就是&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;连续性公理&lt;/strong&gt;：实数集\(R\)没有空隙。（？？？）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们在前文中也提过，&lt;em&gt;Dedekind&lt;/em&gt;分割是定义这种“空隙”的最好的方法。分割理论中，所谓的“空隙”，就是将数集分为有大有小的两部分后，出现的不属于该数集的分界点。因此，借用之前我们对有理数集所定义的分割，我们可以将其推广到实数集上，并通过分割的性质来表述没有空隙的意义：&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;strong&gt;分割&lt;/strong&gt;（有理数集分割的推广）：&lt;/p&gt;
&lt;p&gt;　　设\(A\)是任意一个有序集，我们称\(A\)的两个非空子集\(\alpha,\beta\)为一组&lt;strong&gt;分割&lt;/strong&gt;，当且仅当它们满足以下条件：&lt;/p&gt;
&lt;p&gt;　　（1）\(\alpha \bigcup \beta=A,\alpha \bigcap \beta=\varnothing\)；（\(\alpha,\beta\)刚好是\(A\)的两个部分）&lt;/p&gt;
&lt;p&gt;　　（2）\(\forall x\in \alpha,\forall y\in \beta\)，都有\(x&amp;lt;y\)；（\(\alpha,\beta\)是\(A\)的“左半边”和“右半边”）&lt;/p&gt;
&lt;p&gt;　　（3）\(\beta\)中没有最小元。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;连续性公理&lt;/strong&gt;（&lt;em&gt;Dedekind&lt;/em&gt;定理）：设\(R\)是实数集，则对\(R\)上的任意一组分割\((\alpha,\beta\))，\(\alpha\)必有最大元。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样，我们就实现了对“没有空隙”这一性质的数学描述：任意在实数集上“切一刀”，“刀口”都是实数集中的元素——也就是\(\alpha\)中的最大元。&lt;/p&gt;
&lt;p&gt;　　现在，我们来看看，能不能说明连续性公理和完备性公理是等价的。说明它们之间等价的最简明的方法就是证明逆否命题：如果这两个命题中任何一个的不成立，都会导致另外一个命题也不能成立，就说明这两个命题是等价的。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;连续性公理\(\Leftrightarrow\)完备性公理&lt;/strong&gt;&lt;em&gt;的逆否命题&lt;/em&gt;：设&lt;span&gt;\(R\)是一个&lt;span&gt;具有阿基米德性质的有序域&lt;/span&gt;（这里没有说\(R\)是实数集），则\(R\)不满足连续性公理\(\Leftrightarrow\)\(R\)不满足完备性公理。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;证明如下：&lt;/p&gt;
&lt;p&gt;　　（\(\Rightarrow\)）如果\(R\)不满足连续性公理，那么就存在着\(R\)上的一组分割\((\alpha,\beta)\)，使得\(\alpha\)中没有最大元，\(\beta\)中也没有最小元。从这两点出发，我们可以分别在\(\alpha\)和\(\beta\)中取一个递增数列\(\{a_{n}\}\)和一个递减数列\(\{b_{n}\}\)&lt;span&gt;，并且我们还可以使它们满足以下两点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1.\(\{a_{n}\}\)和\(\{b_n\}\)都是基本数列；（这个时候由于我们不能确定它们有没有一个收敛在\(R\)中的极限，所以不能说它们是收敛的）&lt;/p&gt;
&lt;p&gt;　　2.数列\(\{a_n-b_n\}\)是一个收敛到0的数列。（由于\(R\)是一个域，故必有\(0\in R\)）&lt;/p&gt;
&lt;p&gt;　　现在，我们看到，由于\(\{a_n\}\)和\(\{b_n\}\)都是基本数列，因而它们都应该有一个确定的极限；同时，又由于\(\lim_{n\to\infty}(a_n-b_n)=0\)，因而只要这两个数列的极限都存在（这里的存在是说它们收敛到一个\(R\)中的数），那么它们的极限一定相等，不妨记之为\(c\)。但是，由于\(\alpha\)中没有最大元，所以一定有\(c\notin \alpha\)——否则，\(\alpha\)中一定有比\(c\)还大的数\(c_1\)，而根据我们上面对数列的要求2，就将有\[\lim_{n\to\infty}a_n=c=\lim_{n\to\infty}b_n&amp;lt;c_1\]由\(\lim_{n\to\infty}b_n&amp;lt;c_1\)我们可以知道一定存在着\(b_k&amp;lt;c_1\)，也就是说有一个在右分割\(\beta\)中的数竟然小于在左分割\(\alpha\)中的数，这是不可能的。由此知道，只能有\(c\notin \alpha\)。同样的道理，由于\(\beta\)中没有最小元，因此也就一定有\(c\notin \beta\)，这样的结论就是\(c\notin R\)，从而说明\(R\)也不满足完备性公理——我们找到了至少两个不收敛于\(R\)中的基本数列。&lt;/p&gt;
&lt;p&gt;　　（\(\Leftarrow\)）如果\(R\)不满完备性公理，那么就存在至少一个不收敛在\(R\)中的基本数列；而且这样的基本数列一定不止一个，因为我们任何一个基本数列中的有限项，都不会改变这个基本数列的极限，因而我们一定可以找到一个严格单增且不收敛于\(R\)中任何一个数的基本数列\(\{a_n\}\)。现在，让我们在\(R\)中构造这样两个集合：\[\left\{\begin{matrix}\alpha=\{r\in R:\exists k\in N s.t. r&amp;lt;a_k\};\\ \beta=\{r\in R:\forall k\in N, r&amp;gt;a_k\} \end{matrix}\right.\]首先，我们需要说明这样的\((\alpha,\beta)\)确实构成一组分割。现在来分别验证\(\alpha\)和\(\beta\)是否满足分割的定义：&lt;/p&gt;
&lt;p&gt;　　（1）对任何一个不在数列\(\{a_n\}\)中的数，其要么比所有的数列项都大，要么就比该数列中的某一项要小，因而其一定在\(\alpha\)或者\(\beta\)中。而对于\(\{a_n\}\)中的任意一项，都有\(a_k&amp;lt;a_k+1\)，从而根据\(\alpha\)的定义，\(\{a_n\}\)中的所有元素都在\(\alpha\)中。由此说明\(\alpha\bigcup\beta=R\)；而\(\alpha\)与\(\beta\)没有交集是显然的。&lt;/p&gt;
&lt;p&gt;　　（2）任取\(x\in \alpha,y\in\beta\)，那么根据\(\alpha\)的定义，存在\(\{a_n\}\)中的一项\(a_k\)使得\(x&amp;lt;a_k\)，又根据\(\beta\)的定义有\(y&amp;gt;a_k\)，故\(x&amp;lt;y\)总是成立的。&lt;/p&gt;
&lt;p&gt;　　（3）现在我们假设\(\beta\)中有一个最小元\(y_0\)，那么\(y_0\)将大于数列\(\{a_n\}\)中的所有项，而且只要\(y_0\)再减少任何一个正数\(\varepsilon &amp;gt;0\)，都会使得有一个数列中的项比\(y_0-\varepsilon\)大。这意味着什么？这意味着\(y_0\)就是\(\{a_n\}\)的极限啊！不妨比对一下下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006220910771-482614773.gif&quot; alt=&quot;&quot; width=&quot;334&quot; height=&quot;126&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;（后面将会说到，这就是确界的概念）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;证明这样的\(y_0\)确实就是基本数列\(\{a_n\}\)的极限，需要进行一些比较乏味的说明（需要说明为什么这样子的\(y_0\)可以使得\(|a_n-y_0|\)任意小）。在此我不想把这个过程罗列出来，你可以自己尝试一下（数学证明题中的家常便饭）。总之，我们的确可以证明\(y_0\)确实就是数列\(\{a_n\}\)的极限，但是根据我们的假设，\(R\)不满足完备性公理，因而\(\{a_n\}\)不可能有一个\(R\)中的极限。而\(y_0\in \beta \subset R\)，从而这样的\(y_0\)是不存在的。以上说明，\(\beta\)不可能有最小元。&lt;/p&gt;
&lt;p&gt;　　根据以上三点&lt;span&gt;极其乏味的&lt;/span&gt;证明，我们验证了\((\alpha,\beta)\)确实是\(R\)上的一组分割。现在，我们马上就可以说明，\(R\)一定不满足连续性公理！也就是说，\(\alpha\)一定没有最大元！原因在于，如果我假设\(x_0\)是\(\alpha\)中的最大元，那么我们用类似的方法也可以证明\(x_0\)将是\(\{a_n\}\)的极限，而\(x_0\)却在\(R\)中，因而这样的\(x_0\)也是不存在的。总之，\(R\)一定无法满足连续性公理。▌&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;　　以上我们证明了连续性公理和完备性公理这两个命题，对于一个&lt;strong&gt;具有阿基米德性质的有序域&lt;/strong&gt;而言是两条等价的性质。这说明，连续性和完备性，说的就是同一件事情：实数系已经“尽善尽美”，没有遗漏。&lt;/p&gt;
&lt;p&gt;　　但是注意我们的前提：连续性和完备性等价，是对于&lt;strong&gt;具有阿基米德性质的有序域&lt;/strong&gt;而言。那么，如果是一个不具有阿基米德性质的有序域，连续性和完备性是否还等价呢？这个时候的答案却是否定的。这也就是为什么在实数公理中，我们要单独的列出来阿基米德性质这样一条看起来十分多余的命题作为公理，并与完备性公理并列的原因。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;有序域中连续性与完备性的关系&lt;/strong&gt;：设\(Q\)是任意一个&lt;span&gt;有序域&lt;/span&gt;，则\(Q\)满足连续性公理\(\Leftrightarrow\)\(Q\)同时满足阿基米德公理和完备性公理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　是不是有点出乎你的意料？这其中的关键原因，是看起来十分显然的“阿基米德性质”并不是一个对所有有序域都成立的性质。事实上，在数学理论研究中，有一些不满足阿基米德公理的有序域，其中比较著名的就是利用数论中的p进赋值函数对有理数集重新进行定义的&lt;a title=&quot;p进数-百度百科&quot; href=&quot;https://baike.baidu.com/item/p%E8%BF%9B%E6%95%B0/681684?fr=aladdin&quot; target=&quot;_blank&quot;&gt;p-adic集&lt;/a&gt;（\(Q_p\)）；这里我不想对其做任何更加详细的介绍，因为这一部分内容属于理论价值大于实际意义的知识；但是可以说明的是，在\(Q_p\)这个数集中，由于对序关系、两个数之间的“距离”（在一般的数集中距离就是绝对值，在\(Q_p\)中则用另外一种方式定义）等联系有理数的结构重新进行了定义——相当于重新把有理数排了个序，因而使得在这种序关系下组织起来的有理数集竟然具有了&lt;strong&gt;完备性&lt;/strong&gt;，但同时又是一个不满足阿基米德性质的集合。证明连续性等价于阿基米德性加上完备性的工作超出了我希望讨论的范围，因而在此，为了让读者对这个说法更加信服，我只证其中的一个小部分：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;命题：设\(Q\)是任意一个有序域，则\(Q\)满足连续性公理\(\Rightarrow\)\(Q\)具有阿基米德性质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;p&gt;证明如下：&lt;/p&gt;
&lt;p&gt;　　我们来证它的逆否命题，也就是说当\(Q\)不满足阿基米德性质时，其一定不具有连续性。&lt;/p&gt;
&lt;p&gt;　　为此。我们假设\(Q\)不具有阿基米德性质。那么根据阿基米德公理的说法，我们就可以找到一个正数\(a_0\)，使得任意的\(b&amp;gt;0\)（其中要求\(b\)不是\(a_0\)的整数倍）和任意的正整数\(n\)，都有\(na_0\leqslant b\)；换句话说，\(Q\)有一个不是0的无穷小量\(a_0\)。现在我们在\(Q\)上取两个子集\[\alpha=\{r\in Q:\exists k\in N使得r&amp;lt;ka_0\},\beta=Q\setminus \alpha\]不用说，首先需要验证这样的\(\alpha,\beta\)确实构成了\(Q\)上的一组分割，这里我就不再细说了，总之可以证明这样的\((\alpha,\beta)\)确实构成了一组分割；而这个时候，我们可以看到\(\alpha\)中必然没有最大元，因为对于任意的\(n\in N\)，都有\(na_0\in \alpha\)。这样，就说明\(Q\)是不满足连续性公理的。▌&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;　　以上的这个证明非常的滥竽充数，另外也不太严谨——如果你能指正这个证明中的问题，或者有更好的证法，欢迎在评论区中留言。总之，只要认识到连续性就是阿基米德性质和完备性的综合，就已经足够了；事实上，我们在下面更多讨论的，是连续性和完备性，而且我们也不会碰到不满足阿基米德性质的集合，因此只要在阿基米德有序域中这两条性质是等价的，就无所谓了。以下部分中，我们将把完备性和连续性看成等价的概念。&lt;/p&gt;
&lt;p&gt;　　有兴趣了解更深的同学，不妨在网上搜一搜有关于p-adic数集（或者说p-进数）的内容，了解有关这方面的书籍或者其他相关内容（本人了解很少，不知道有哪些），仔细研读，会对上面我含糊其辞的部分有更深的体会。&lt;/p&gt;
&lt;p&gt;　　（补充说明：从某种意义上来说，阿基米德性质反映的是一个集合的形态应当与直线上的点的形态相似，它们可以按顺序排开，并且既没有最大元有没有最小元——有理数集和实数集都可以做到；而完备性则是反映一个集合的没有空隙——有理数集做不到，而实数集能够做到。总体概括起来，就是反映出一个集合能够与直线上的点一一对应起来，这也正是连续性的最简单的解释。）&lt;/p&gt;

&lt;h3&gt;3.2 实数定理是从哪里来的&lt;/h3&gt;
&lt;p&gt;　　现在开始，主要介绍本篇的核心内容——实数定理。&lt;/p&gt;
&lt;p&gt;　　我相信，各位对实数定理有所了解的朋友，你们第一次接触这一部分内容基本上都是在学习数学分析或者类似课程的开始阶段。实数定理（有时候也包括实数构造理论）往往作为数学分析这门课程的“逻辑基础”，在课程刚开始的内容中加以讲述。但是你知道实数定理究竟有什么用吗？&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;如果一个有关于实数集的命题能够反映实数集的连续性或者完备性，那么我们就将这个命题称为&lt;strong&gt;实数定理&lt;/strong&gt;。也就是说，每条实数定理都是实数公理系统中的完备性公理或者连续性公理的等价形式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实数定理能够反映实数集的核心性质——连续性（完备性），因而我们可以给它们直接冠以“实数”的名号；实数定理就是实数集的一个标识符。那么为什么会有那么多条实数定理呢？国内的有些数学教材中，会列出六条、七条乃至八条实数定理，并采用“论证环”的方法证明它们是等价的（有的则是两两等价证明），这一部分内容可以说让一般的学生都大伤脑筋，比起极限理论中的“\(\varepsilon-\delta\)语言”来有过之而无不及。这样多的等价形式，都是怎么来的？为什么一定要把它们都罗列出来？&lt;/p&gt;
&lt;p&gt;　　其实总体说来，实数定理并不都出自于对实数理论的研究。例如，单调有界定理和&lt;em&gt;Cauchy&lt;/em&gt;收敛准则，主要关注的是数列的性质，是从算术方面来考虑的，属于极限理论发展时期（约十九世纪中叶）的产物；有关于点集的有限覆盖定理、聚点定理等，其用“数”来表示的形式出现的比较早，但其变为今天我们看到的形式，则是在点集拓扑学科发展起来以后（约二十世纪初）才有的事情；至于我们前面说到的&lt;em&gt;Dedekind&lt;/em&gt;定理（连续性公理）、完备性公理等等，则是实数理论的产物。它们的来源各异，描述的事情、方法和对象也有所不同，然而最终却能够证明它们相互等价，对于我们这些还没有接触到广阔数学世界的人而言，实在是一种不可想象的事情。&lt;/p&gt;
&lt;p&gt;　　从某种意义上来说，所谓的“N大”实数定理，其实来源各异，不必一起给出；若一定要都顾及到，则有必要将它们看待实数集的角度说清楚，是把实数集看成一个点集？还是看成一个算术范围？还是看成极限理论的背景和载体？有些教材在这些方面写得不是很好，不过似乎这几年来新出版的数学分析教材中，都加强了与其他课程内容的融合，比如说先讲一点点点集拓扑的内容，这样就能够让读者理会为什么这些命题也能够描绘实数集的特性。&lt;/p&gt;
&lt;p&gt;　　絮叨这么多，总之想说明的就是：实数定理可以具有很多种形式，但它们说的都是一个问题、一个现象。将其中任意一个作为实数公理中的一部分，都可以构建出合乎要求的实数系，而其它的命题则相当于是推论。这就是利用公理来构建实数集合的精妙之处。之所以要给出这么多定理，其实从某种意义上来说，是因为它们各有长短，在实际应用中各有方便之处；请容我一个个来分析。&lt;/p&gt;

&lt;h3&gt;3.3 实数定理之间的关系与异同&lt;/h3&gt;
&lt;p&gt;　　以下，我将根据命题所描述的特征，将它们分为三组：有关于序关系的分为一组，有关于点集特征的分为一组，&lt;em&gt;Cauchy&lt;/em&gt;收敛准则、&lt;em&gt;Hilbert&lt;/em&gt;形式的完备性公理和&lt;em&gt;Dedekind&lt;/em&gt;定理则单独列一组。&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;3.3.1 序关系：确界原理，&lt;/span&gt;&lt;span&gt;上下极限定理，&lt;/span&gt;&lt;span&gt;单调有界定理，闭区间套定理&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;确界的定义：设\(A\subset R\)为实数集的一个子集。如果\(a\in R\)&lt;strong&gt;大于等于&lt;/strong&gt;\(A\)中所有的数，并且\(a\)是满足这种性质的最小的数（也就是说任何比\(a\)小的数都不可能大于等于\(A\)中所有的数），则称\(a\in R\)为\(A\)的上确界，记作\(a=\sup A\)。同样的，我们也定义&lt;strong&gt;小于等于&lt;/strong&gt;\(A\)中所有数的那些数中最大的数\(b\)为\(A\)的下确界，记作\(b=\inf A\)。&lt;/p&gt;
&lt;p&gt;（换句话说，如果\(a=\sup A\)，则对\(\forall\varepsilon&amp;gt;0\)，都存在着\(a_x\in A\)，使得\(a-\varepsilon&amp;lt;a_x\)。或者说，\(\sup a\)就是\(A\)的最小上界。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确界原理&lt;/strong&gt;：设非空的\(A\subset R\)，则\(A\)有上界\(\Leftrightarrow\)\(A\)有上确界，\(A\)有下界\(\Leftrightarrow\)\(A\)有下确界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;上下极限定义：设\(\{a_n\}\)为一个\(R\)中的数列，若其有收敛到\(R\)中的子列\(\{a_{n_k}\}\)，则称这个子列的极限\(c\in R\)为\(\{a_n\}\)的极限点。令集合\(E\)表示\(\{a_n\}\)所有的极限点构成的集合，若\(\sup E\)和\(\inf E\)均存在，则称它们分别为\(\{a_n\}\)的上极限和下极限，记作\(\limsup_{n\to\infty}a_n\)和\(\liminf_{n\to\infty}a_n\)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上下极限定理&lt;/strong&gt;：若\(\{a_n\}\)为\(R\)中的有界数列，则其上极限和下极限一定都存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;单调有界定理&lt;/strong&gt;：\(R\)中任意有上界的单增数列或有下界的单减数列必定收敛在\(R\)中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;闭区间套定理&lt;/strong&gt;：设\([a_1,b_1]\supset[a_2,b_2]\supset…\supset[a_n,b_n]\supset…\)为\(R\)中一组存在着包含关系的区间套，且满足\(\lim_{n\to\infty}(b_n-a_n)=0\)，则必存在唯一的\(\xi\in R\)使得其满足\[\{\xi\}=\bigcap_{n=1}^{\infty}[a_n,b_n]\]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 　　以上四个实数定理，都与序关系密切相关；其中，确界原理和上下极限原理都依赖于一个关键概念——&lt;strong&gt;确界&lt;/strong&gt;的性质。因此，我们可以先来分析一下，确界究竟是什么东西。&lt;/p&gt;
&lt;p&gt;　　根据定义，确界指的是一个数集（或者说存在序关系的点集）之“上界的最小元”或者“下界的最大元”，也就是“最小上界”或者“最小下界”。这个概念是非常有用的；仔细想想，我们想描述一个数集的边界，光用“上界”“下界”是不够的；一个数集的上、下界只是指的一个比这个数集中所有元素都大或者都小的数，但是它可以特别大，也可以特别小，不能真实反映我们想要的那个“边界”的意义。只有限定是“最小上界”和“最大下界”，才能找到一个能把数集的分布范围框死的量。就像对于函数而言，只有“最小正周期”才是一个关键的概念，你可以说\(4\pi\)是正弦函数的周期，你甚至可以说\(-2147183648\pi\)是正弦函数的周期，但是只有最小正周期\(2\pi\)才是我们关心的那个量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006221342911-1477036208.gif&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;108&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;上确界——最小上界；下确界——最大下界&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　现在需要注意一个问题：一个数集的上确界是不是一定在这个数集中？换句话说，是不是一个数集的上确界就是这个数集中的最大元？想当然的说，那还用问？一个数集的最大元肯定是它的上确界（最小上界）啊！没错，如果一个数集有最大元，显然根据定义这个最大元就是其上确界；但是如果这个数集没有最大元——这对于无穷集合来说是一件很容易做到的事情（比如说让边界上的点无穷逼近但不到达某个数），那么它的上确界是什么呢？&lt;/p&gt;
&lt;p&gt;　　回想之前我们所涉及到的一些概念：分割的分界点，基本数列的极限，“渔网”上的线和洞……其实，所谓的确界，正是这样一个概念。对于一个没有最大元或者最小元的数集而言，它反映的就是这个集合与它的所有上界构成的集合之间的那个分界点，或者说是这些数的某种意义上的“极限”。&lt;/p&gt;
&lt;p&gt;\[A=\bigcup_{n=1}^{\infty}[1,2-\frac{1}{n});\]\[sup A=2\notin A.\]&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;没有最大元的数集的上确界——不在该数集中&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　一个集合的上确界可以在其中，也可以不在其中；如果上确界在该集合中，那么其就是这个集合的最大元；如果上确界不在该集合中，那么一方面这个集合一定没有最大元，另一方面上确界就是这个集合和它“右边”的点的分界点。这就是上确界这个概念之意义所在。我们可以想象一下，在具有连续性的实数集中，确界原理应该成立；否则，如果确界原理不成立，就意味着有一个\(R\)中的数集，不仅它自己没有最大元，而且它的上界集合也没有最小元——这不正是说\(R\)中出现了一个空隙吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006222023052-1569253244.gif&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;113&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;没有确界——有空隙&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　以上分析告诉我们，确界是又一种用来表述一个集合中的“空隙”的绝妙方法。既然如此，确界原理和连续性公理等价，原理上应该基本上是可行的。当然我们在这里先不严格证明这一点，只是先从直觉上来说明这两个命题说的应该是同一件事情。&lt;/p&gt;
&lt;p&gt;　　另一个和确界相关的定理是上下极限定理。所谓上下极限，指的是一个数列的所有收敛子列之极限构成的集合的上确界和下确界，这一概念显然比数列极限的概念要宽泛，因为一个数列不一定有极限，但当其是一个有界数列时，其一定有收敛子列，因而也就一定有极限点（这本来是下面一个实数定理的推断，但是我们可以从心理认可这一点；如果你觉得这样不好，那就当我对上下极限什么都没说）。比如说，数列\(\{b_n\}=(1,-1,1,-1,…,(-1)^{n+1},…)\)显然不收敛，但是其确有收敛子列，其极限或为1，或者为-1。因此根据上下极限的定义，就有\(\limsup b_n=1,\liminf b_n=-1\)。另外，我们可以知道若\(\{a_n\}\)是一个收敛数列，那么显然有\(\limsup a_n=\liminf a_n=\lim a_n\)，因为\(\{a_n\}\)的任何一个子列都收敛到同一个极限。&lt;/p&gt;
&lt;p&gt;　　由于上下极限的概念依赖于确界的概念，因而说明上下确界定理成立\(\Leftrightarrow\)是一件比较容易的事情。不过在我所见到的教材中，一般都把上下极限定理作为上、下极限的一个很普通的性质来叙述，很少有编者在书中强调，这样一条简单的命题也是实数连续性的一种等价描述；因此，在这里我对这个结论多费一点文字，来说明其与确界原理的等价性。如果你对这一点不太感兴趣，&lt;a href=&quot;http://www.cnblogs.com/xjtu-blacksmith/p/7625717.html#ending&quot; target=&quot;_blank&quot;&gt;点击这里&lt;/a&gt;跳过这一部分冗长而抽象的数学证明。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;证明：在\(R\)上，确界定理\(\Leftrightarrow\)上下极限定理：&lt;/p&gt;
&lt;p&gt;　　（\(\Leftarrow\)）证逆否命题。如果上下极限定理对\(R\)不成立，说明\(R\)中存在着这样一个有界数列，其非空的极限点集合\(E\subset R\)没有上确界或者下确界。既然\(E\subset R\)，那么相当于\(R\)中就有一个没有上确界或者下确界的集合，确界原理当然不成立。&lt;/p&gt;
&lt;p&gt;　　（\(\Rightarrow\)）同样证逆否命题。如果\(R\)不满足确界原理，那么就存在着一个集合\(A\subset R\)没有确界（不妨设其没有上确界）。我们从其中一个一个取点，总能取出一个可列的点集\(A_0\subset A\)，同样没有上确界——这件事情并不太显然，但是要想证明这样做的合理性需要进行一些抽象的数学描述，意义不大，这里我们暂且当其为一件总是能够做到的事情。&lt;/p&gt;
&lt;p&gt;　　现在，对于可列的点集\(A_0\)，我们可以对其中的点按大小排序并编号，也即\[A_0=(a_1,a_2,a_3,…,a_n,…)\]既然我们想要证明在确界原理不成立的情况下上下极限定理也不成立，那么我们只要构造这样一个数列\(\{c_n\}\)，使得其极限点集\(E_c=A_0\)就可以了。为了做到这点，我们可以这样来构造\(c_n\)以达成要求：&lt;/p&gt;
&lt;p&gt;　　首先，我们对于(\A_0\)中的每一个数\(a_k\)，总能够构造一个以\(a_k\)为极限的收敛数列。那么，我们就可以对\(A_0\)中的任何一个数\(a_m\)构造一个与之对应的收敛数列\(\{{b_n}^{(m)}\}\)，使得\[\lim_{n\to\infty}{b_n}^{(m)}=a_m\]。你可能会说，既然(\A_0\)中有无穷多个点，怎么可能都构造出来都写出来？事实上我们不需要真的把与每个\(a_m\)对应的数列\(\{{b_n}^{(m)}\}\)的每一项都写出来，我们只要知道如何写出这样的数列——也就是构造的法则，保证我能写出任意一个\(\{{b_n}^{(m)}\}\)中的任意一项\({b_k}^{(m)}\)就足够了。&lt;/p&gt;
&lt;p&gt;　　现在，我们可以按照确定的构造法则，绘制一张数表，其中第i行第j列上的数就是\({b_i}^{(j)}\)，也就是与\(a_j\)对应着的那个数列中的第\(i\)个数。然后，我们按照“蛇形取数法”来构造一个新的数列\(\{c_n\}\)，具体方法请看下图所示；显然任意的\({b_i}^{(j)}\)都将出现在这个数列中，而且根据集合势理论，这个\(\{c_n\}\)确实是一个可列点集（\(N\sim N\times N\)），所以\(\{c_n\}\)确实是一个数列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006223457474-2039196350.gif&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;蛇形取数法&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　现在我们一眼就可以看出这个\(\{c_n\}\)的极限点集\(E_c=A_0\)，原因是它包含了收敛到任何一个\(a_k\in A_0\)的子列。（同时，也可以证明\(c_n\)中也只有这些点。这不算一件太难的事，在这里就不做了）。那么，由于\(E_c\)没有上确界，因而\(\{c_n\}\)也就没有上极限，从而上下极限定理不成立。▌&lt;/p&gt;
&lt;p&gt;　　【附注：这个证明是比较糟糕的——很繁琐，但也有点无可奈何，原因是在数学领域中你很难碰到一个极限点集是无穷集的数列——一般的数列至多也就只有几个极限点而已。因此，不得不采取一种很繁琐的方法来构造这样的有无穷多个极限点的数列。显然，只有无穷集才有可能出现没有上极限的情况，因为任意的有限集合，其最大元就是上确界。】&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;　　总之，上下极限定理和确界原理确实是等价的。上、下极限是一个有用的数学工具，不过在数学分析课程中使用不多，因为数学分析中一般只限于研究收敛数列的问题或者数列单纯的敛散性。在更上层的课程（比如说实变函数论）中，上、下极限这个概念能够显示出其有用和方便之处（上下极限这个概念还可以推广到函数列和集合列上去）。&lt;/p&gt;
&lt;p&gt;　　接下来还有两个命题，分别是单调有界定理和闭区间套定理。这两个命题是实数定理中最容易理解的两个，联系实轴上的图像，你会觉得这两个命题所描述的现象对于实数集而言是显然的。事实上，我们也可以把这两个命题与之前重点讨论的确界原理联系起来。在此之前，仍然假设我们对这两个命题的正确性一无所知。&lt;/p&gt;
&lt;p&gt;　　对于\(R\)上的一个单增有上界的数列\(\{a_n\}\)而言，我们可以说明，如果它是收敛的，那么一定有\[\lim_{n\to\infty}a_n=sup\{a_n\}\]（关于这一点，你可以尝试着在草稿纸上用“\(\varepsilon-\delta\)”语言来证明一下），而且只要\(sup\{a_n\}\)是存在的，那么\(\{a_n\}\)就是收敛到这个数的数列。这一点其实不难理解：既然\(sup\{a_n\}\)是单调递增数列的上确界，意味着在这个上确界的任意小领域都必然积聚着无穷多个数列\(\{a_n\}\)中的点——否则，如果这无穷多项的积聚范围不在\(sup\{a_n\}\)边，那么\(\{a_n\}\)就不可能是单增的，这一点甚至通过画图就可以验证。既然如此，那么单调有界数列的收敛性就和确界的存在型紧密挂钩了，“一荣俱荣，一辱俱辱”。（其实我在这里没有讲反过来是否成立，就是会不会出现确界原理不成立而单调有界数列仍然收敛的情况；我认为这个问题的思路和我上面证明确界原理\(\Leftrightarrow\)上下极限定理的第二部分证明思路是相似的，应该也是可以讲清楚的事情。）&lt;/p&gt;
&lt;p&gt;　　而对于\(R\)中逐渐收紧的区间套\(\bigcup_{n=1}^{\infty}[a_n,b_n]\)而言，我们可以把它们的两端端点列\(\{a_n\},\{b_n\}\)分别看成两个单调有界的递增和递减数列，其中单增的\(\{a_n\}\)的上界&lt;strong&gt;至少&lt;/strong&gt;是\(b_1\)，而单减的\(\{b_n\}\)的下界&lt;strong&gt;至少&lt;/strong&gt;是\(a_1\)——说“至少”，意思是在我们继续分析两个数列之前就可以一眼看出来这两个很“松”的上下界。由于要求\(\lim_{n\to\infty}(b_n-a_n)=0\)，因而只要这两个数列都收敛，那么它们必然有一个相等的极限\(\xi\)，这也就是\(\{\xi\}=\bigcup_{n=1}^{\infty}\)的原因。从而到这里就可以看到，闭区间套定理的成立依赖于单调有界定理——反过来，由于我们可以用两个单调数列任意构造区间套，因而我们可以看到，单调有界定理和闭区间套定理应该是等价的。严格证明不再给出，你自己就可以很轻松的证明在\(R\)上这两个命题的等价性。从这个角度讲，闭区间套能够以单调有界数列的形式，和确界的概念产生联系。&lt;/p&gt;
&lt;p&gt;　　总之，以上我们或证明或说明了确界原理、上下极限定理、单调有界定理和闭区间套定理是四个等价命题。有关于这四个命题最核心的概念就是确界的概念，它反映了一个完备的有序集合上应该具有的性质，即每个有界点集的“边界”都应该在实数集中，而不会产生“时空裂隙”，产生一个不在实数集合中的边界点。这一概念与&lt;em&gt;Dedekind&lt;/em&gt;分割理论中的分界点（“刀口”），或者&lt;em&gt;Cantor&lt;/em&gt;基本数列理论中的极限，有着异曲同工之妙。&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;3.3.2 点集特征：列紧性定理、聚点定理、有限覆盖定理&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;列紧性定理&lt;/strong&gt;（&lt;em&gt;Bolzano&lt;/em&gt;-&lt;em&gt;Weierstrass&lt;/em&gt;定理）：有界点列必有收敛子点列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;聚点定义：设\(A\subset R\)为一个点集，\(a\in R\)是\(R\)中的一个点（不一定有\(a\in A\)）。若在\(a\)的任意一个邻域内，都有\(A\)中的点（不包括\(a\)自己），那么称\(a\)为\(R\)的一个聚点（或极限点）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚点定理&lt;/strong&gt;：设\(A\subset R\)是一个有界无穷点列（有无穷多个点），则\(A\)必有聚点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;20&quot;&gt;
&lt;p&gt;开覆盖定义：设\(A\subset R\)为一个点集，\(\Gamma=\{E_\lambda, \lambda\in \Lambda\}\)为一个开集族（也就是说，\(\Gamma\)中的每个元素\(E_{\lambda}\)都是一个开区间）。如果\(\Gamma\)中所有开区间的并集\(\bigcup_{\lambda\in\Lambda}E_\lambda\)能够包含点集\(A\)，即\[A\subset\bigcup_{\lambda\in\Lambda}E_\lambda\]那么我们称开集族\(\Gamma\)覆盖了\(A\)，并称\(\Gamma\)是\(A\)的一个开覆盖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有限覆盖定理&lt;/strong&gt;（&lt;em&gt;Heine-Borel&lt;/em&gt;定理）：对于\(R\)上的任意一个闭区间\([a,b]\)，其任意一个确定的开覆盖一定有有限的子覆盖。也就是说，若\(\Gamma\)能够覆盖\([a,b]\)，无论\(\Gamma\)中有多少个开区间，必然存在着\(\Gamma\)中的有限个开区间\(E_1,E_2,…,E_n\)，使得\([a,b]\subset\bigcup_{k=1}^{n}E_k\)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　以上三个命题，反映的都是实数集作为一个“点集”的特征——这一部分内容，其实放在点集拓扑的课程中来讲更合适，但是由于它们在数学分析课程中也可以发挥作用，所以一般将其作为实数集连续性的等价命题列入“N大”实数定理当中。&lt;/p&gt;
&lt;p&gt;　　列紧性定理看起来说的是一件很简单的事情：如果一个点列有界，那么其一定有收敛的子点列。在实数集中，点就是数，因而这个命题也就是说，有界数列必有收敛子列——从直观方面考虑，是比较好理解的。聚点定理，则说的是一个有界的无穷点集必然有聚点，其实只要你想清楚了聚点的含义，马上就可以知道，这两个命题说的完全就是同一件事情。&lt;/p&gt;
&lt;p&gt;　　如果实轴上有无穷多个点（并且还是可列个，否则就不能被称为点列了）构成点集\(A\)，它们被限定在一个范围内，那么我们给定下面这样一个量\[d=\inf_{x,y\in A}|x-y|\]我们可以知道一定有\(d=0\)，因为只要\(d\)是一个大于0的量就意味着\(A\)中任意两个点的距离都大于\(d\)，那么我们所能得到的结果就是\(A\)无界，和我们的要求矛盾（你可以说这是阿基米德性质的一种体现）。既然d=0，我们马上可以推断出有无穷多个点积聚在实轴上一些点的周围——这些点就是所谓的聚点，从而我们在这里说明了聚点定理的意义。同时，如果我以\(A\)的任意一个聚点\(a_0\)为中心，取一列半径逐渐减小的邻域\(B_{r_k}(a_0)\)，并在每个邻域的范围内任取一个点，那么我就可以取到一个与\(a_0\)的距离逐渐减小的点列\(\{a_k\}\)，它一定收敛于\(a_0\)。从而这里说明，只要聚点定理成立，我们就可以在任何一个有界数列中获得一个收敛于其聚点的子列；也就是说，聚点定理\(\Rightarrow\)列紧性定理。&lt;/p&gt;
&lt;p&gt;　　这里需要特别注意，聚点定理和列紧性定理的描述对象还是有所不同的：列紧性定理描述的对象是一个有界的数列，因而其元素的个数必须是可数个；而聚点定理则对\(R\)中所有的有界无穷点集生效，这样的点集既可以是可数的，也可以是不可数的。因此，聚点定理似乎比列紧性定理概括的内容更加普遍。不过即便如此，我们也可以很轻松地证明列紧性定理\(\Rightarrow\)聚点定理，原因是无论有界无穷点集\(A\)是可数集还是不可数集，我们都能取出\(A\)的一个可数子集\(A_0\)（此时\(A_0\)可被看作点列，因而一定有收敛子列，也就一定有聚点），而\(A_0\)有聚点\(\Leftrightarrow\)\(A\)有聚点是显然的。&lt;/p&gt;
&lt;p&gt;　　总之，聚点定理可以用一句话来概括：“&lt;span&gt;&lt;em&gt;一抔之沙，渺若星辰；或遍于一片，或集为一体。&lt;/em&gt;&lt;/span&gt;”无穷点集，不是无界的，就是有界而且有聚点的——聚点定理说的正是这一点。&lt;/p&gt;
&lt;p&gt;　　现在让我们来看一看有限覆盖定理，这个命题可以说是所有实数定理中最抽象和晦涩的一个。应该说，这个定理一点也不直观，很难将其表述成一种容易理解的形式；但是，我们可以先尝试着探索有限覆盖定理和其他实数定理的关系，也许可以从其中发现什么有用的东西。为此，先来看看能不能证明聚点定理和有限覆盖定理说的是同一件事情。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 证明：聚点定理\(\Leftrightarrow\)有限覆盖定理&lt;/p&gt;
&lt;p&gt;　　（\(\Leftarrow\)）如果聚点定理不成立，那么我们就可以在\(R\)上找到一个没有聚点的有界无穷点集\(A\)，并且其处于闭区间\([a,b]\)之间。由此我们知道，一定存在着一个正数\(\varepsilon&amp;gt;0\)使得任何一个长度小于等于\(\varepsilon\)的开区间中都只有有限个（或者没有）\(A\)中的点——因为如果没有这样的\(\varepsilon\)，就肯定有\(A\)的聚点存在了。由于我们可以很轻松的构造出一个\(A\)的开覆盖\(\Gamma\)使得其中所有的开区间长度都小等于\(\varepsilon\)——比如对\(A\)中的每一个点都取它们的半径为\(\varepsilon\)的邻域再并起来，因而根据这一点，我们知道\(\Gamma\)对\(A\)一定没有有限子覆盖，否则这个有限子覆盖所覆盖的\(A\)将是一个有限集。既然\(\Gamma\)对\(A\)都没有有限子覆盖，自然对包含\(A\)的闭区间\([a,b]\)也不可能存在有限子覆盖。由此说明，在聚点定理不成立的情况下，有限覆盖定理也不成立。从而知道有限覆盖定理成立时，必然有聚点定理成立。（这里证的是逆否命题，当然也可以采用反证方法来证）&lt;/p&gt;
&lt;p&gt;　　（\(\Rightarrow\)）现在我们设聚点定理成立，要来说明有限覆盖定理也成立。设\(\Gamma\)是\(R\)上一个闭区间\([a,b]\)的一个开覆盖，现在我们要证明，存在着一个正数\(\delta&amp;gt;0\)，使得以\([a,b]\)中任何一个点\(x\)为中心，以\(\delta\)为半径的邻域\((x-\delta,x+\delta)\)，都能够被\(\Gamma\)中的某个开区间覆盖。&lt;/p&gt;
&lt;p&gt;　　如果这一点不成立，那么就对于每一个正数\(m&amp;gt;0\)，总能够在被\(\Gamma\)覆盖的闭区间\([a,b]\)中找到一个与之对应的点\(a_m\)，使得该点以\(m\)为半径的邻域不被\(\Gamma\)中任意一个开区间所包含，即\[(a_m-m,a_m+m)\nsubseteq (p,q), \forall (p,q)\in\Gamma\]根据以上论证，我们就可以取一个开区间\((0,m_0)\)（其中\(m_0&amp;gt;0\)）为我们的半径集，并对\((0,m_0)\)中的每一个数\(m\)取一个对应的闭区间\([a,b]\)上的点\(a_m\)，使得\(a_m\)的以\(m\)为半径的邻域不能被开集族\(\Gamma\)中的任何一个开区间所覆盖。记所有这样的\(a_m\)构成的点集为\(A\)，那么\(A\)可以被表示为\[A=\{a_m\in [a,b]:不存在\Gamma中的开区间覆盖(a_m-m,a_m+m),m\in R\}\]&lt;/p&gt;
&lt;p&gt;　　如果\(A\)是一个有限集，说明只有有限个点的邻域不能被\([a,b]\)中的开区间覆盖，但我们知道这些点本身至少都在开集族\(\Gamma\)的某个开区间以内，那么只要我们缩小这些点的邻域半径到某一个很小的正数\(\delta\)，它们也就可以被\(\Gamma\)中的开区间覆盖，从而所有的点的\(\delta-\)邻域都能被\(\Gamma\)中的某个区间覆盖。这样我们就找到了我们所需要的那个\(\delta&amp;gt;0\)。如果\(A\)是一个无穷集，根据聚点定理，\(A\)理所当然的有至少一个聚点\(a\)。注意，\(a\)这一个单独的点显然能够被\(\Gamma\)中的某个开区间所覆盖，设这个开区间为\((p_0,q_0)\)。而由于\(a\)是聚点，在其任意小的邻域内都有\(A\)中的点，那么肯定存在着一个\(a_{r_0}\in A\cup(p_0,q_0) \)，一方面其以\(r_0\)为半径的邻域不能被\(\Gamma\)的任何一个开区间覆盖，另一方面这个邻域又已经被那个覆盖了聚点\(a\)的开区间盖住，从而便产生了矛盾。这说明\(A\)不可能是无穷集。&lt;/p&gt;
&lt;p&gt;　　这样，我们便说明对于闭区间\([a,b]\)而言，存在着这样一个“安全半径”\(\delta\)，使得其上任意一个点的\(\delta-\)邻域都可以被\(\Gamma\)中的某一个开区间覆盖。这样，我们只要在\([a,b]\)上取若干个点，使得覆盖它们每个点的那个开区间刚好能够覆盖整个\([a,b]\)就足够了。这样的若干个点可以按照安全半径\(\delta\)的大小来取；但总之，所取的点的个数自然是有限个，因而对应的开区间数目也是有限个。由此，我们找到了\(\Gamma\)对于闭区间\([a,b]\)的一个有限子覆盖。以上说明了，聚点定理成立必然导致有限覆盖定理成立。▌&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;　　你可能会说，这又是一个极为糟糕的证明，主要的原因不在于其冗长和繁杂，而在于这个证明好像不是构造性质的，没有描绘出来所谓的“有限覆盖”究竟是什么样的事物。这个可能得归罪于有限覆盖定理本身就是一个非构造性质的工具，因为其任意性太大（任意多个开区间构成的开集族都可以组成开覆盖），因而想给其做一个直观的描述，实在有些困难。不过不必着急，下面我们还会在适当的地方，再对这个抽象性很高的定理作更多的探讨。总之这里，我们说明了，这三个有关点击特征的实数定理确实是等价的。&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;3.3.3 Cauchy收敛准则、Hilbert形式完备性公理和连续性公理&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cauchy&lt;/em&gt;收敛准则&lt;/strong&gt;：一个数列\(\{a_{n}\}\)收敛到\(R\)中，当且仅当\(\{a_{n}\}\)是一个&lt;strong&gt;基本数列&lt;/strong&gt;，也就是说这个数列的任意相邻两项\(a_{n}\)与\(a_{n+1}\)的距离\(|a_{n}-a_{n+1}|\)会随着\(n\)的增大可以不断减小，并且可以小于任何正数\(\varepsilon&amp;gt;0\)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hilbert&lt;/em&gt;形式的完备性公理&lt;/strong&gt;：如果在实数集\(R\)中添加任何一个新的元素，不管我们如何定义这个元素与其他元素之间的加减乘除关系和运算关系，都会导致实数公理系统中的（I）域公理、（II）序公理和（III）阿基米德公理中的某一条不能被满足。也就是说，\(R\)是能够满足公理（I）（II）（III）的最大的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;连续性公理&lt;/strong&gt;（&lt;em&gt;Dedekind&lt;/em&gt;定理）：设\(R\)是实数集，则对\(R\)上的任意一组分割\((\alpha,\beta\))，\(\alpha\)必有最大元。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 　　这三条命题，我想应该不需要再多做解释了，这些都是我们之前着重讨论过的命题，也是我们主要用来构建实数系统的依据。其实Cauchy收敛准则在这里，就是我们之前所给出的所谓“完备性公理”——其最大意义，就是给出了一种在&lt;span&gt;不需要考虑数列的极限究竟是什么“数”的情况下确定其能否收敛&lt;/span&gt;的描述方式，这样我们才能区分“收敛在\(R\)中”和“收敛但不收敛于\(R\)“。&lt;/p&gt;
&lt;p&gt;　　关于Hilbert形式的完备性公理和Cauchy收敛准则之间的等价性，我在上一篇末留作疑问；这里我想给出一种直观上考虑的方式。Hilbert形式的完备性公理所要说明的，就是一件简单的事情：实数集中已经很完美，不需要再新加东西了。想要验证实数集是不是完美了，意义不大，原因是我们其实是按照“实数是一个完美集合”来定义的，实数集就是我们所要的那个完美的集合。不过反过来，从另一个角度看，只要说明了这样一件事情就可以找到Hilbert形式的完备性公理和Cauchy收敛准则之间等价的依据：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;命题：\(R\)中还可以再添加一个\(a\notin R\)\(\Leftrightarrow\)可以在\(R\)中构造一个收敛到\(a\notin R\)的基本数列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006223756536-1942155530.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;“还有空，快来！”&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 　　这个命题就是两种完备性公理等价的逆反命题，而这个命题的证明思路是比较容易想到的，只不过说明起来所用的数学语言会稍微繁杂一些。在此就不再深入讨论了。&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;3.3.4 各组定理间的等价性&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　现在要到最艰难的时刻了——我们应该证明这“N大”实数定理互相等价。不过，作为一篇博客，我当然不会在其中鼓捣太多晦涩不明的数学证明，这些数学证明可以在网上搜到（你可以在网上搜到那种包含了\(\N(N-1)\)个证明的文章——你一定知道这个数怎么算出来的），并不需要我来抄写一遍。在前面三个小节中，我已经说明了三组定理各自都应该是等价的，虽然未必给出了严格的证明，但是至少从道理上比较明白的讲清楚了；现在，我只需要说明和序关系有关的定理组、和点集特征有关系的定理组都和包含连续性公理在内的第三组定理等价，那么我们就可以说，这”N大“定理确实都能够反映实数集的连续性。&lt;/p&gt;
&lt;p&gt;　　在第一组序关系相关的命题中，我们已经讨论过确界原理和连续性公理应该是等价的，原因是确界这个概念同样能够反映数集里有没有“空隙”，一个数集中的有界无确界点集一定对应着数集中的“不连续点”。除开这一点，确界原理和完备性公理的关系也可以很容易的看出：如果一个基本数列是单调的，那么其极限和其某一端的确界就是完全等同的概念。确界这个概念相比于极限，有更大的优势——其中不涉及点集的变化过程，它就是一个“钉死”的量，就是“最大下界”和“最小上界”；而极限这个量与过程有关，不易把控。同时，确界是一个对任何形式的无穷点集都适用的概念，而极限仅限于数列——也就是可列点集，并且还受到点的顺序的制约。因此，确界在很多分析命题的证明中，是一个非常有用的工具。&lt;/p&gt;
&lt;p&gt;　　在第二组点集特征相关的命题中，我们可以说明聚点定理和完备性公理的关系，选聚点定理主要是因为这个命题比另外两个更直观更好理解。我们可以想象一下，对于一个基本数列而言，其极限所对应的点必然是唯一的聚点；反过来，如果一个有界数列只有一个聚点，那么这个点一定就是这个数列的极限（相应的这个数列也必然收敛）。聚点的“任意大小邻域内均有点集中点”的特性，恰好与极限的定义是一致的（不断缩小聚点的邻域半径，就相当于数列向极限靠拢），唯一的不同是聚点的概念比极限的概念更加普遍使用——其对于一个不能被看成数列的点集（不可数集）——也同样适用，这和确界有点相像。不过聚点在分析课程中作为工具用来证明命题的时候不多（事实上除了用来证明其他的实数定理，我还没有见过别的⊙︿⊙），因为聚点只是反映有无限个点在其周围，其本身并不具有什么特征，只能依靠其周围的无穷多个点来帮助证明；而相比之下，一个点集的确界和这个点集的性质密切相关，其自身又具有“上（下）界”和“最小（大）”的双重特征，因而使用起来方便。总之，聚点定理和完备性公理的等价性，应该是比较容易就能说清楚的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006224129271-1709328652.gif&quot; alt=&quot;&quot; width=&quot;314&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;极限、确界与聚点&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　除了聚点定理，我还想讨论一下之前被搁置的有限覆盖定理和完备性公理的关系。在知乎上看到一位网友（匿名）的回答，对我非常有启发（&lt;a title=&quot;怎样直观的理解有限覆盖定理？-知乎&quot; href=&quot;https://www.zhihu.com/question/26376319/answer/35297983&quot; target=&quot;_blank&quot;&gt;原回答见此&lt;/a&gt;），以下就用他的一些想法来讨论问题。首先，我要给出一些&lt;em&gt;非现成&lt;/em&gt;&lt;span&gt;（瞎编）&lt;/span&gt;的定义，它们将有助于直观理解有限覆盖定理：&lt;/p&gt;
&lt;blockquote readability=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;有限连通&lt;/strong&gt;：设开集族\(\Gamma\)是闭区间\([a,b]\)的一个开覆盖，\((p_0,q_0),(p,q)\)为\(\Gamma\)中的两个开区间。如果\(\alpha\in(p_0,q_0),\beta\in(p,q)\)，并且\((p_0,q_0)\cap (p,q)\neq\varnothing\)，则称\(\alpha\)在\(\Gamma\)下通过开区间\((p,q)\)与\(\beta\)连通。又设\([a,b]\)中的\(m\)在\(\Gamma\)下能够通过有限个开区间与\(n\)连通，则称\(m,n\)在\(\Gamma\)下有限连通。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有限连通定理&lt;/strong&gt;：对于\(R\)上的任意一个闭区间\([a,b]\)，若其有一个开覆盖\(\Gamma\)，则区间端点\(a,b\)在\(\Gamma\)下一定有限连通。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　所谓的有限连通，就是说两个点能通过开集族\(\Gamma\)下的有限个开区间之并集相连起来，就像下面所展示的这样。上面提出&lt;span&gt;（编造）&lt;/span&gt;的“有限连通定理”与有限覆盖定理，很显然是等价的，这里就不证了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006224729349-1333156513.gif&quot; alt=&quot;&quot; width=&quot;297&quot; height=&quot;115&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006224926427-1558808753.gif&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;112&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;有限连通和有限覆盖本质上是一样的（画风清奇๑乛v乛๑）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　现在我们来说明一下有限连通定理和确界原理的等价性质。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;证明：有限连通定理\(\Leftrightarrow\)确界原理&lt;/p&gt;
&lt;p&gt;　　（\(\Leftarrow\)）假设确界原理成立。设[a,b]是\(R\)上的一个闭区间，\(\Gamma\)是\([a,b]\)的一个开覆盖。定义一个集合\(A\)，其满足\[A=\{c\in [a,b]:a,c在\Gamma下有限连通\}\]显然，\(A\)是一个非空有界的集合，因而\(A\)有上确界\(\sup A\)，记之为\(t\)。可以说明，事实上一定有\(t=b\)；否则，\(t\)将是一个\((a,b)\)间的数。由于\(a,t\)是有限连通的，因而相应的有一个开区间来覆盖\(t\)，那么\(a\)与这个开区间中除了\(t\)外的其他点也是有限连通的（它们都可以通过有限个区间连起来）；但是很显然\(t\)不是这个开区间中最大的数（事实上开区间中既没有最大元也没有最小元），所以一定有比\(t\)更大的数也和\(a\)有限连通，故任意一个\((a,b)\)中的数都不是\(A\)的上确界。由于限定了\(A\)是\([a,b]\)的子集，故最后只能有\(A=[a,b]\)，从而\(\sup A=\max A=b\)，\(b\)必然在集合\(a\)中，从而\(a,b\)在\(\Gamma\)下是有限连通的。以上说明确界原理\(\Rightarrow\)有限连通定理。&lt;/p&gt;
&lt;p&gt;　　（\(\Rightarrow\)）以下说明，当确界原理不成立时，有限连通定理也不成立。这里我们为了简单明了，偷换一下概念：确界原理能够反映实数集的连续性，所以如果在实数集中确界原理不成立，相当于实数集不具有连续性或者完备性。那么，就可以在实轴上找到一个空隙\(a_0\)（我们假设只有这样一个空隙），它是\(R\)上某个基本数列的极限，但\(a_0\notin R\)。现有一个\(R\)上的闭区间\([a,b]\)使得\(a&amp;lt;a_0&amp;lt;b\)——注意由于\(a_0\notin R\)，因而尽管它按照序关系在\(a,b\)之间，但是其不算在\(R\)上的闭区间内。同时，我们可以找到两个收敛到\(a_0\)的数列\(\{a_n\}\)和\(\{b_n\}\)，它们分别单增和单减的从两侧收敛到\(a_0\)，并且它们的所有项都在区间\([a,b]\)以内。&lt;/p&gt;
&lt;p&gt;　　现在构造一个开集族\[\Gamma=\{(a,a_n)\cup(b_n,b):n\in N\}\]也就是说\(\Gamma\)相当于是两列逐渐靠向\(a_0\)的“开集套”。我们可以证明\(\Gamma\)确为闭区间\([a,b]\)的开覆盖，因为\(a,b\)之间除了不在\(R\)中的\(a_0\)以外其他所有的点都将被\((a,a_n)\)和\((b_n,b)\)中的某一个覆盖，只要n足够大。但在\(\Gamma\)下我们知道\(a,b\)不可能有限连通，因为\(\Gamma\)中的两列“开集套”没有交集。由此，我们知道在不具备完备性的实数集（准确的说，是一个不具备完备性的具有阿基米德性质的有序域）上有限连通定理不成立，因而当确界原理不成立时，有限连通定理也不能成立。反过来，当有限连通定理成立时，确界原理一定成立。▌&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006225245880-672547140.gif&quot; alt=&quot;&quot; width=&quot;265&quot; height=&quot;183&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;一个特殊的开覆盖&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 　　通过上面的这个例子，你是不是能够理解玄之又玄的“开覆盖”和实数集的连续性之间的一点联系了呢？假如实数集上的闭区间中有空隙的，其可以具有一个“中断”（即可以将开集族分为两个没有交集的部分）的开覆盖，而在完备的、没有空隙的实数集中“中断”的开集族是不可能覆盖整个闭区间的。这就是开覆盖有关于连续性的体现，同时也是开区间与闭区间这两种特殊的拓扑结构之特点的体现——开区间没有端点，因而没有最大元和最小元；而闭区间既有最大元，又有最小元。（从另外一个角度来讲，实数集上出现空隙\(a_0\)，相当于把其所在的那个闭区间\([a,b]\)分成了\(R\)上的两个半开半闭区间\([a,a_0)\)和\((a_0,b]\)，在开的一端有限覆盖定理自然就不能成立了）&lt;/p&gt;
&lt;p&gt;　　其实回看上面我所制造出来的这个等价命题“有限连通定理”，实际上是把有限覆盖定理中的开区间数目有限，换成了其所覆盖的闭区间端点的路径有限。这从某一个角度上来说，也可以反映连续性（“连通”）和有限覆盖存在这两点之间的关系。在数学分析课程中，有限覆盖定理虽然十分抽象，但由于其能够将无限化为有限，便于证明中的讨论或者反证，因而是一个十分常用的工具。特别是有关于有界闭区间上连续函数的一些性质定理（&lt;em&gt;Cantor&lt;/em&gt;定理、介值定理、有界定理等），都非常适合用有限覆盖定理来证明。&lt;/p&gt;
&lt;p&gt;　　总而言之，以上我们粗略的说明了以确界原理为代表的序关系类实数定理、以聚点定理为代表的点集特征类实数定理和连续性公理所在的一组实数定理都是等价的。因而，我们可以说，这些命题都可以反映实数集上的连续性质，都具有着非比寻常的意义；同时，它们也自然可以在实数集上，作为有利的数学工具使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.3.5 更高观点下的视角&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;由于实数集能和直线上的点一一对应，因而实数集的连续性，其实反映的是一维空间中的一种特性。那么，在二维、三维乃至更高维或者更加特别（……准确的说是更加一般）的一些理论空间中，连续性和完备性有没有什么体现呢？由于我们主要讨论的是和数学分析课程有关的实数理论内容，所以在这里不必讲太多以外的内容。不过，还是稍微说一说实数集上的这两种性质（对于具有阿基米德性质的有序域而言它们是等价的）在描述更加抽象的数学对象的理论中的体现。&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）连续性\(\rightarrow\)连通性&lt;/p&gt;
&lt;p&gt;　　回想一下“连续性”这个词的来历，其实它反映了我们对直线以及“应该”与之一一对应的实数集的一种直观印象——直线应该是“连续的”，应该是没有空隙的。在更加抽象的空间中，这种性质被抽象成了另一种说法——&lt;strong&gt;连通性&lt;/strong&gt;。一般情况下，如果在某个空间中一个点集（我们还是假设这个空间里面的元素可以看成点）可以任意地被分成两部分，其中的一个部分总是包含着另外一个部分的边界点或者聚点，那么就称这个点集是这个空间中的一个&lt;strong&gt;连通集&lt;/strong&gt;，其具有&lt;strong&gt;连通性&lt;/strong&gt;。一般来说，连通性反映的就是一个集合是“一体”的，没有被分成若干孤立的部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1245670/201710/1245670-20171006225544677-305138246.gif&quot; alt=&quot;&quot; width=&quot;308&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;典型的连通集和典型的非连通集&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　例如，在实轴上，连通集显然就是所有形式的区间（包括单独的点），并且没有其他的形式，这一点利用点集拓扑的相关理论可以证明。反之，比如点集\[(0,1)\cup(1,2)\]就不是一个连通集，原因是在1处将其分开，\((0,1)\)不包含\((1,2)\)的聚点和边界点1，反过来也不成立。（把聚点和边界点分开列，是因为这些概念在更一般的拓扑空间中推广以后，代表的是两个不同的概念。）这种将点集分为两半以验证有无空隙的方法，从某种意义上来说其实和&lt;em&gt;Dedekind&lt;/em&gt;分割理论中通过分隔数集验证是否有空隙的思想是完全一致的——至于有没有什么启发和传承关系，我就不太清楚了。实数公理系统中的连续性公理（&lt;em&gt;Dedekind&lt;/em&gt;定理），实际上说的就是“\(R\)是一个连通集”。因此，所谓“实数集的连续性”和连通性，一个是&lt;strong&gt;整体&lt;/strong&gt;性质，一个是&lt;strong&gt;局部&lt;/strong&gt;性质。&lt;/p&gt;
&lt;p&gt;　　最后要说的是，连通性是一种&lt;strong&gt;拓扑性质&lt;/strong&gt;——也就是说，把点集的形状变一变，或者对其中的点做一些合乎要求的变换，都不会改变连通性的成立与否。所以连通性对于一个点集而言，是一个很关键的概念。当然，这都属于别的课程中的内容，在这里就不讨论了。&lt;/p&gt;
&lt;p&gt;（2）完备性&lt;/p&gt;
&lt;p&gt;　　应该说，完备性这个概念，在更加抽象的空间中，其形式与实数集合中的完备性是相同的，即依赖于一个空间中是否能够保证所有的基本点列（我们把空间中的元素都看成点）都收敛于该空间内。&lt;/p&gt;
&lt;p&gt;　　一般来说，完备性只能在&lt;strong&gt;度量空间&lt;/strong&gt;上讨论，所谓的度量空间就是说这个空间中的任意两个点之间都定义了一个“距离函数”。在实数集上，两个点之间的距离就是它们差的绝对值；在二维、三维（乃至更高维）的欧式空间中，两个点之间的距离就是它们之间的线段长度——比如二维空间\(R^2\)中的两个点\((x_1,y_1)\)和\((x_2,y_2)\)之间的距离为\[d=\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}\]甚至，我们可以对\(R\)上的某个闭区间\([a,b]\)中所有的连续函数建立一个空间，一般记为\(C[a,b]\)，那么这个空间中的每个“点”就是\([a,b]\)上的一个连续函数，而且显然这个空间中的每个函数都是有界函数——因而我们就可以把这个空间上的距离定义为两个“点”，也就是两个函数之间的差异，比如说积分值的差异，比如说他们在\([a,b]\)的最大值和最小值的差异，等等。总之，度量空间就是一个在其上定义了距离这个概念的空间（集合）。&lt;/p&gt;
&lt;p&gt;　　假设我们在一个空间\(A\)上对其中的所有元素之间都定义了距离函数\(d\)，那么我们就构造了一个&lt;strong&gt;度量空间&lt;/strong&gt;，记为\((A,d)\)。我们把空间中的任何一个元素都看成点，那么度量空间上的完备性就可以表述为：&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;度量空间上的&lt;strong&gt;基本列&lt;/strong&gt;：设\((A,d)\)为一个度量空间，\(\{x_n\}\)为\(A\)上的一个点列。若对任意的\(\varepsilon&amp;gt;0\)，存在着\(n\in N\)，当\(n_1,n_2&amp;gt;n\)时，就有\(d(x_{n_1},x_{n_2})&amp;lt;\varepsilon\)，那么称\(\{x_n\}\)为\(A\)上的一个&lt;strong&gt;基本列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;度量空间的&lt;strong&gt;完备性&lt;/strong&gt;：若度量空间\((A,d)\)中的任意一个基本列均有一个\(A\)中的聚点，那么称\((A,d)\)具有&lt;strong&gt;完备性&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　事实上，上面所说的“聚点”就是基本列的极限，不过由于我们没有定义度量空间中的极限，因而暂且这样描述，毕竟前面已经说过一个基本点列只有一个聚点，那个聚点就是其极限。总之，以上有关于基本列和完备性的描述和在实数集上的是完全一样的，只不过把距离函数改为任意的了。因此，一个空间是否完备，很大程度上取决于这个空间的距离函数的定义。我们先前所举的那个不具有阿基米德性质的p-adic集\(Q_p\)，就是通过修改距离的定义，而使得原来按照差的绝对值定义距离的情况下不完备的有理数集，构成了一个完备的度量空间。度量空间是一个很重要的概念，不过在这里我们只是稍稍提一下，也就不扯远了。&lt;/p&gt;
&lt;p&gt;　　最后，还想絮叨几句有关于实数定理的话。前面我们所提到的实数定理中，有下面几条可以推广到由实数集衍生定义的n维欧式空间\(R^n\)上去（平面直角坐标系下就是一个\(R^2\)空间，而立体直角坐标系下就是一个\(R^3\)空间，以此类推）：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;列紧性原理&lt;/strong&gt;、&lt;strong&gt;聚点定理&lt;/strong&gt;、&lt;strong&gt;有限覆盖定理&lt;/strong&gt;、&lt;strong&gt;闭区间套定理&lt;/strong&gt;、&lt;strong&gt;Cauchy收敛准则&lt;/strong&gt;、&lt;strong&gt;连续性公理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　其中，前三个都是和点、点列、点集相关的量，很容易推广到\(R^n\)的任意点上（有限覆盖定理中的开区间，需要被推广为&lt;strong&gt;开集&lt;/strong&gt;的概念）；闭区间套定理所在的序关系类公理组，几乎都无法推广到\(R^n\)空间上，原因是我们一般不会（事实上也不能）在这类空间上定义任意两个点之间的“大小”，至多也只能定义它们的距离。闭区间套定理是一个例外，原因是闭区间这个概念可以在拓扑空间上推广为&lt;strong&gt;闭集&lt;/strong&gt;的概念，这个概念不需要序关系的定义。&lt;em&gt;Cauchy&lt;/em&gt;收敛准则的推广也就是上面所说的度量空间中的完备性定义，连续性公理的推广也就是之前所说的拓扑空间中的连通集定义。这些命题被作为定义使用，从某种意义上来说反映了抽象空间内的连续性和完备性概念，其根源仍然出自于数学家们对于实数集合深入的研究所受到的启发。毕竟，拓扑学的发展与繁荣，在实数理论发展起来以后。&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;4 实数集的性质：“数”的意义何在？&lt;/h3&gt;
&lt;p&gt;　　下半篇也接近尾声了，这里考虑到自己是在一个为开发者设计的博客平台上写和程序开发几乎没什么关系的文章，多少有点于心不安（？？？），所以还是想搞一点形式主义，说说这么理论化和抽象化的实数理论究竟能和计算机科学扯上几毛钱的关系。&lt;/p&gt;
&lt;p&gt;　　数这个概念脱胎于真实世界，又远远的超出和远离了真实世界——数学的发展给人一种感觉，仿佛数学世界的扩张和人类所处的现实世界的发展变化完全处于两个平行运转、互不干扰的时空之中，数学家只不过是从现实世界中点亮数学世界中黑暗角落的那些人。因此，数学给人的一种印象，是一个“发明”与“发现”交织的学科——就像物理学家们探索真实存在的宇宙和微观世界中的黑暗角落一样，数学家用新的描述和新的命题来开拓数学世界中未知的片区。&lt;/p&gt;
&lt;p&gt;　　其实我们讨论了这么多和实数有关的事情，最终无非弄明白了一件事：实数就是那个我们心目中尽善尽美，可以表示任何度量数据的数集，所谓的实数构造理论和实数公理，不过是把这种“完美性”用数学的语言表现了出来。例如所谓的“构造实数”，我们真的是在“造”实数吗？其实所谓的“分割”、“基本有理数列”等概念，它们就在那里，也就是说实数集本来一直都在，所谓的构造不过是将它们从有理数集这个复杂的结构里挖了出来，让所有人都能看到。&lt;/p&gt;
&lt;p&gt;　　同样的，所谓的“无限不循环”的无理数，其实一直都在；既然我们定义了有限的和无限循环的小数，由于总是可以用这两类数来逼近无理数（或者说，只用有限小数就足够了），因而“无限不循环”小数是否存在，是否有意义，它究竟是真实存在还是永远是一个过程量，其实对于实在世界而言（对于理论领域当然十分要紧），真的无关紧要——我们总是能离这个概念特别的近，虽然我们永远到不了哪儿。事实上我们只知道一件事情：我们所能够&lt;strong&gt;实现&lt;/strong&gt;的数，其实也就是有理数。&lt;/p&gt;
&lt;p&gt;　　一台计算机可以表述任何一个有理数，只要给其以足够的内存（当这个有理数有小数点后许多位时是必须的）；但计算机难以表述无理数。我们当然可以给计算机中写入一个表述\(\sqrt{2}\)的结构，让其满足\(\sqrt{2} \cdot \sqrt{2}=2\)，参与运算，这些都可以实现；我们也可以在内存足够的情况下，计算出\(\sqrt{2}\)的小数点后任意一位。但是即便如此，我们也不能把\(\sqrt{2}\)真正的制造出来，它要么是一个满足运算律的符号——就像你在做作业时对它的处理方式一样，要么就是一个足够精确的近似值用以计算相关的数据，但不会出现一个具有完整和真实性质的\(\sqrt{2}\)。唯一的可能，是你有一支可以画出宽度无穷小的直线的笔，画出一个边长准确相等的正方形，连接其对角线，这个对角线的长度就是其边长的\(\sqrt{2}\)倍——这个时候，我们才可以说，\(\sqrt{2}\)真实的存在于这个世界上了。&lt;/p&gt;
&lt;p&gt;　　有理数和无理数的差异，反映了我们的理想认知和我们的客观条件的差异；我们可以把实数集的理论发展的这么深邃和有趣，但是我们的测量水平只能停留在有理数的领域以内。同样的，计算机可以利用符号法则处理整个实数系上的问题，但是那些都是依据于严格的符号法则；当理论无法给出符号法则（也就是所谓的解析解）的时候，计算机也只能和人一样，求近似解——计算机不过是比人求解数值的能力强大而已。总体说来，所谓的数学理论，既可以看作是比现实世界精细的——其超出了我们在客观世界中所能达到的观测水平，又可以看作是比现实粗糙的——数学理论中从来就没有什么精细结构，数学理论的研究方法已经限制了其无法研究过于特殊的问题，只能研究一般理论，而我们所处的世界，实际上每一处都是特殊情况，一个物体的长度也许“比无理数还无理数”。（这里我想说的意思是，由于我们只能观测到有理数，我们无法测准一个物体，无理数便可以理解为我们的观测水平达到一种极限情况的&lt;strong&gt;推断&lt;/strong&gt;，也就是说当我们可以测得小数点后无穷多位的数据时，我们就得到了无理数；但是既然我们达到不了这样的极限情况，谁知道最后的那个可能的终点是“不如无理数无理数”呢还是“比无理数还无理数”呢？我们可没有关于这方面的&lt;em&gt;Cauchy&lt;/em&gt;收敛准则。）这正是数学理论发展过程中与现实世界之间体现出来一种双重矛盾性，它反映出来我们对于“数”这个概念的认识，也许真的还有待提高。&lt;/p&gt;

&lt;p&gt;【后记：这两篇博客，原来是计划用文档的形式写出来，分享给16级少班的学弟学妹们的，那个时候我还没有考虑要写这么多内容，只希望讨论一点点有关于实数定理之实际应用的内容。因为去年在学习这一块东西的时候遇到很大阻力，后来课下做了很多功课才逐渐理解，受到的启发也很大，希望能够自己撰写一点像经验集一样的东西，让以后的人少走一点弯路，甚至有一些自己想到的新理解、新方法。九月份因为一些杂事，没有来得及写，加上后来又偶发奇想在博客园开了一个小站，所以决定把这一部分内容改在博客上完成。撰写这篇博客的过程中，各种新的想法新的理解如泉涌出，同时在过程中也发现自己原来有一些理解有偏差，因而总体说来篇幅加长了许多，多叙述了一些原来没有讨论的内容。撰写这两篇博客，没有什么功利的目的，只是希望能够对关于这方面知识有一定了解，但又觉得自己的理解不够深入或者不够形象的朋友以一点帮助，分享我有关于这些内容的一点多少算是有点片面的理解；另外一方面，也算是锻炼锻炼自己的打字能力 (-ロ-)&lt;img src=&quot;file:///C:/PROGRA~2/Baidu/BAIDUP~1/503900~1.0/dict/EMOTIO~1/AF389F~1.PNG&quot; alt=&quot;&quot;/&gt;，打发漫长而无聊的国庆中秋长假。行文十分仓促，一些部分其实自己也觉得写的不太好，详略安排也有点不太合理，希望读者能就我在博客园发的第一篇文章以一些有益的建议，本人感激不尽。】&lt;/p&gt;
&lt;p&gt; 【又后记：本文中涉及的证明过程由于比较多而繁杂，没有经过特别严密的检查，因而如果你发现有误，请在评论中指出，非常感谢。】&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 15:03:00 +0000</pubDate>
<dc:creator>黑山雁</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjtu-blacksmith/p/7625717.html</dc:identifier>
</item>
<item>
<title>张高兴的 Windows 10 IoT 开发笔记：使用 Lightning 中的软件 PWM 驱动 RGB LED - 张高兴</title>
<link>http://www.cnblogs.com/zhanggaoxing/p/7633176.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanggaoxing/p/7633176.html</guid>
<description>&lt;p&gt;　　感觉又帮 Windows 10 IoT 开荒了，所以呢，正儿八经的写篇博客吧。其实大概半年前就想写的，那时候想做个基于 Windows 10 IoT 的小车，但树莓派原生不支持 PWM 啊。百度也搜不到，上 GitHub 转了一圈，在 @ms-iot 那发现了 Lightning ，再看最后的更新时间，还是2016中旬……Windows 10 IoT 在国内真惨，这么长时间都没人写个教程……不说废话了……&lt;/p&gt;
&lt;p&gt;　　本文示例地址：&lt;a href=&quot;https://github.com/ZhangGaoxing/windows-iot-demo/tree/master/RgbLed&quot; target=&quot;_blank&quot;&gt;https://github.com/ZhangGaoxing/windows-iot-demo/tree/master/RgbLed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　Lightning 项目地址：&lt;a href=&quot;https://github.com/ms-iot/lightning&quot; target=&quot;_blank&quot;&gt;https://github.com/ms-iot/lightning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1085877/201710/1085877-20171006215617490-761751986.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;一、 更改默认控制器驱动&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　打开树莓派的 &lt;span id=&quot;wdp-titlelabel&quot;&gt;Windows Device Portal ，在 Devices 菜单中的 Default Controller Driver 选项，将默认的 Inbox Driver 更改为 Direct Memory Mapped Driver ，重启。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1085877/201710/1085877-20171006220239365-1269419112.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;二、更改 Package.appxmanifest 配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　新建一个 UWP 项目，本文这里叫“RgbLedDemo”。以“查看代码”的形式打开 Package.appxmanifest 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1085877/201710/1085877-20171006220530208-1913070582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在 Package 标签下添加一个命名空间，并更改 IgnorableNamespaces 属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;xmlns:iot=&quot;http://schemas.microsoft.com/appx/manifest/iot/windows10&quot;
IgnorableNamespaces=&quot;uap mp iot&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在 Capabilities 添加如下内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iot:Capability &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;lowLevelDevices&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DeviceCapability &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;109b86ad-f53d-4b76-aa5f-821e2ddf2141&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;三、引用 Microsoft.Iot.Lightning&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在 NuGet 包管理器下搜索 Lightning 即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1085877/201710/1085877-20171006221032615-776746998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　还有 Windows IoT Extensions for the UWP&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1085877/201710/1085877-20171006224344630-1584576885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;四、使用 Lightning&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　注意引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.Devices.Pwm;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; Microsoft.IoT.Lightning.Providers;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;1. 判断 Lightning 的启用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　这一步是必要的，因为使用 Lightning 必须关闭系统默认的控制器驱动，没启用的话抛出个异常就好了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;LightningProvider.IsLightningEnabled)
{
    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullReferenceException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lightning isn't enabled !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;2. 获取软件 PWM 控制器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一切正常的情况下就该获取 Lightning 中的软件 PWM 控制器了。Lightning 中也集成了其他硬件 PWM 的控制器，因此在调用 PwmController.GetControllersAsync() 时返回的是一个集合，其中第二项是我们需要的软件 PWM 控制器。得到控制器后还需要设置 PWM 的频率，这个软件 PWM 控制器的频率范围在 40 - 1000 Hz 之间（低的可怜……），不在这个范围内的数字会抛出异常。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
PwmController controller = (&lt;span&gt;await&lt;/span&gt; PwmController.GetControllersAsync(LightningPwmProvider.GetPwmProvider()))[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
controller.SetDesiredFrequency(1000);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;3. 设置 PWM 引脚&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　以 Red 引脚为例。首先通过控制器来打开引脚，这里为 GPIO 17 位置的引脚。然后需要设置 Duty Cycle Percentage ，通俗点就是电压的占比，0 - 1 之间的小数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
PwmPin redPin = controller.OpenPin(&lt;span&gt;17&lt;/span&gt;&lt;span&gt;);
redPin.SetActiveDutyCyclePercentage(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
redPin.Start(); &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　之后要改变 LED 的亮度还是要改变 SetActiveDutyCyclePercentage(value) 的 value 值。&lt;/p&gt;
&lt;p&gt;　　释放的话要先关闭 PWM。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;redPin.Stop();
redPin.Dispose();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;五、注意&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　使用 Lightning 后，之前基于默认控制器驱动编写的I2C，SPI代码会报错。但 Lightning 中集成了 I2C、SPI、GPIO 等的控制器，将其替换一下即可。&lt;/p&gt;

&lt;p&gt;　　本文的项目解析部分就结束了。下面给一个呼吸灯的测试代码，我用的是共阴极 RGB LED 。代码在 GitHub 的项目中有。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; Breathing LED
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;delay&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Delay Time&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task BreathingAsync(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; delay)
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; red = &lt;span&gt;255&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; green = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; blue = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (red != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; green != &lt;span&gt;255&lt;/span&gt;&lt;span&gt;)
    {
        redPin.SetActiveDutyCyclePercentage(red &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);
        greenPin.SetActiveDutyCyclePercentage(green &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);

        red&lt;/span&gt;--&lt;span&gt;;
        green&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; Task.Delay(delay);
    }

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (green != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; blue != &lt;span&gt;255&lt;/span&gt;&lt;span&gt;)
    {
        greenPin.SetActiveDutyCyclePercentage(green &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);
        bluePin.SetActiveDutyCyclePercentage(blue &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);

        green&lt;/span&gt;--&lt;span&gt;;
        blue&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; Task.Delay(delay);
    }

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (blue != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; red != &lt;span&gt;255&lt;/span&gt;&lt;span&gt;)
    {
        bluePin.SetActiveDutyCyclePercentage(blue &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);
        redPin.SetActiveDutyCyclePercentage(red &lt;/span&gt;/ &lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;);

        blue&lt;/span&gt;--&lt;span&gt;;
        red&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; Task.Delay(delay);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 06 Oct 2017 14:41:00 +0000</pubDate>
<dc:creator>张高兴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanggaoxing/p/7633176.html</dc:identifier>
</item>
<item>
<title>cs224d 自然语言处理作业 problem set3 (一) 实现Recursive Nerual Net Work 递归神经网络 - 香港胖仔</title>
<link>http://www.cnblogs.com/weizhen/p/7633167.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weizhen/p/7633167.html</guid>
<description>&lt;p&gt;1、Recursive Nerual Networks能够更好地体现每个词与词之间语法上的联系&lt;br/&gt;这里我们选取的损失函数仍然是交叉熵函数&lt;/p&gt;&lt;p&gt;每个参数的更新时的梯队值如何计算,稍后再给大家计算相应的数学公式&lt;/p&gt;&lt;p&gt;1、即假设将一句话中的词先两个合并，并通过神经网络计算出合并后的得分情况&lt;/p&gt;&lt;p&gt;2、然后找出合并后得分最高的两个词进行真正的合并，得到新的节点，其余节点不合并&lt;/p&gt;&lt;p&gt;3、将得到的新节点加入到下一轮两两合并的计算过程中，直至得到最终节点&lt;/p&gt;&lt;div readability=&quot;128&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
Created on 2017年10月5日

@author: weizhen
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个简单的递归神经网络的实现，有着一个ReLU层和一个softmax层&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; TODO : 必须要更新前向和后向传递函数&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 你可以通过执行 python rnn.py 方法来执行一个梯度检验&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 插入pdb.set_trace()  在你不确定将会发生什么的地方&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; collections
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pdb
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tree as treeM
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; RNN:
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, wvecDim, outputDim, numWords, mbSize=30, rho=1e-4&lt;span&gt;):
        self.wvecDim &lt;/span&gt;=&lt;span&gt; wvecDim
        self.outputDim &lt;/span&gt;=&lt;span&gt; outputDim
        self.numWords &lt;/span&gt;=&lt;span&gt; numWords
        self.mbSize &lt;/span&gt;=&lt;span&gt; mbSize
        self.defaultVec &lt;/span&gt;= &lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; : np.zeros((wvecDim,))
        self.rho &lt;/span&gt;=&lt;span&gt; rho
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; initParams(self):
        np.random.seed(&lt;/span&gt;12341&lt;span&gt;)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Word vectors&lt;/span&gt;
        self.L = 0.01 *&lt;span&gt; np.random.randn(self.wvecDim, self.numWords)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Hidden layer parameters&lt;/span&gt;
        self.W = 0.01 * np.random.randn(self.wvecDim, 2 *&lt;span&gt; self.wvecDim)
        self.b &lt;/span&gt;=&lt;span&gt; np.zeros((self.wvecDim))
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Softmax weights&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; note this is &quot; U &quot;in the notes and the handout...&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; there is a reason for the change in notation&lt;/span&gt;
        self.Ws = 0.01 *&lt;span&gt; np.random.randn(self.outputDim, self.wvecDim)
        self.bs &lt;/span&gt;=&lt;span&gt; np.zeros((self.outputDim))
        
        self.stack &lt;/span&gt;=&lt;span&gt; [self.L, self.W, self.b, self.Ws, self.bs]
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Gradients&lt;/span&gt;
        self.dW =&lt;span&gt; np.empty(self.W.shape)
        self.db &lt;/span&gt;=&lt;span&gt; np.empty((self.wvecDim))
        self.dWs &lt;/span&gt;=&lt;span&gt; np.empty(self.Ws.shape)
        self.dbs &lt;/span&gt;=&lt;span&gt; np.empty((self.outputDim))
        
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; costAndGrad(self, mbdata, test=&lt;span&gt;False):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    每一个datum在minibatch里边都是一个树
                    前向计算每一个树,反向传播到每一个树
                    返回值:
            cost:
                                    梯度：w.r.t W,Ws,b,bs
                                    以上变量的梯度都是在稀疏形式存储的
                                    或者是以测试状态下的
            Returns:
                cost,correctArray,guessArray,total
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        cost &lt;/span&gt;= 0.0&lt;span&gt;
        correct &lt;/span&gt;=&lt;span&gt; []
        guess &lt;/span&gt;=&lt;span&gt; []
        total &lt;/span&gt;= 0.0&lt;span&gt;
        
        self.L, self.W, self.b, self.Ws, self.bs &lt;/span&gt;=&lt;span&gt; self.stack
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化所有梯度都是0&lt;/span&gt;
        self.dW[:] =&lt;span&gt; 0
        self.db[:] &lt;/span&gt;=&lt;span&gt; 0
        self.dWs[:] &lt;/span&gt;=&lt;span&gt; 0
        self.dbs[:] &lt;/span&gt;=&lt;span&gt; 0
        self.dL &lt;/span&gt;=&lt;span&gt; collections.defaultdict(self.defaultVec)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在每一个batch中前向计算每一个tree&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; tree &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mbdata:
            c, tot &lt;/span&gt;=&lt;span&gt; self.forwardProp(tree.root, correct, guess)
            cost &lt;/span&gt;+=&lt;span&gt; c
            total &lt;/span&gt;+=&lt;span&gt; tot
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; test:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (1. / len(mbdata)) *&lt;span&gt; cost, correct, guess, total
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在每一个batch上进行反向传播&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; tree &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mbdata:
            self.backProp(tree.root)
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过mb的大小来计算损失和梯度&lt;/span&gt;
        scale = (1. /&lt;span&gt; self.mbSize)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.dL.values():
            v &lt;/span&gt;*=&lt;span&gt; scale
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加L2正则化项&lt;/span&gt;
        cost += (self.rho / 2) * np.sum(self.W ** 2&lt;span&gt;)
        cost &lt;/span&gt;+= (self.rho / 2) * np.sum(self.Ws ** 2&lt;span&gt;)
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; scale * cost, [self.dL, scale * (self.dW + self.rho * self.W), scale * self.db, scale * (self.dWs + self.rho * self.Ws), scale *&lt;span&gt; self.dbs]
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; forwardProp(self, node, correct=[], guess=&lt;span&gt;[]):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;损失应该是一个不断更新的变量，总损失是我们需要用在准确率报告里边的数据&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        cost &lt;/span&gt;= total = 0.0
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下面实现递归神经网络前向传播的函数&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 你应该更新 node.probs, node.hActsl,node.fprop,and cost&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; node :你当前节点是在语法树上的&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; correct : 这是一个不断更新的标记真值的列表&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; guess: 这是一个不断更新的猜测我们的模型会预测为哪一个结果的列表&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;       (我们会同时使用正确的和猜测的值来构造我们的混淆矩阵)&lt;/span&gt;
        L =&lt;span&gt; self.L
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 隐藏层的参数&lt;/span&gt;
        W =&lt;span&gt; self.W
        b &lt;/span&gt;=&lt;span&gt; self.b
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Softmax 权重&lt;/span&gt;
        Ws =&lt;span&gt; self.Ws
        bs &lt;/span&gt;=&lt;span&gt; self.bs
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; node.isLeaf:
            node.hActsl &lt;/span&gt;=&lt;span&gt; L[:, node.word]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; node.left.fprop:
                cost_left, total_left &lt;/span&gt;=&lt;span&gt; self.forwardProp(node.left, correct, guess)
                cost &lt;/span&gt;+=&lt;span&gt; cost_left
                total &lt;/span&gt;+=&lt;span&gt; total_left
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; node.right.fprop:
                cost_right, total_right &lt;/span&gt;=&lt;span&gt; self.forwardProp(node.right, correct, guess)
                cost &lt;/span&gt;+=&lt;span&gt; cost_right
                total &lt;/span&gt;+=&lt;span&gt; total_right
            
            node.hActsl &lt;/span&gt;= W.dot(np.hstack((node.left.hActsl, node.right.hActsl))) +&lt;span&gt; b
            node.hActsl[node.hActsl &lt;/span&gt;&amp;lt; 0] =&lt;span&gt; 0
        
        x &lt;/span&gt;= Ws.dot(node.hActsl) +&lt;span&gt; bs
        x &lt;/span&gt;-=&lt;span&gt; np.max(x)
        node.probs &lt;/span&gt;= np.exp(x) /&lt;span&gt; np.sum(np.exp(x))
        
        correct &lt;/span&gt;+=&lt;span&gt; [node.label]
        guess &lt;/span&gt;+=&lt;span&gt; [np.argmax(node.probs)]
        
        cost &lt;/span&gt;-=&lt;span&gt; np.log(node.probs[node.label])
        
        node.fprop &lt;/span&gt;=&lt;span&gt; True
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; cost, total + 1
    
    &lt;span&gt;def&lt;/span&gt; backProp(self, node, error=&lt;span&gt;None):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    实现递归神经网络的反向传播函数
                    应该更新 self.dWs, self.dbs, self.dW, self.db, and self.dL[node.word] 相关地
        node:你在语法树种的当前节点
        error:误差从之前一个迭代过程中传递进来的
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 清空节点&lt;/span&gt;
        node.fprop =&lt;span&gt; False
        
        L &lt;/span&gt;=&lt;span&gt; self.L
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 隐藏节点的参数&lt;/span&gt;
        W =&lt;span&gt; self.W
        b &lt;/span&gt;=&lt;span&gt; self.b
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Softmax层的权重&lt;/span&gt;
        Ws =&lt;span&gt; self.Ws
        bs &lt;/span&gt;=&lt;span&gt; self.bs
        
        error_this &lt;/span&gt;=&lt;span&gt; node.probs
        error_this[node.label] &lt;/span&gt;-= 1.0&lt;span&gt;
        delta &lt;/span&gt;=&lt;span&gt; Ws.T.dot(error_this)
        
        self.dWs &lt;/span&gt;+=&lt;span&gt; np.outer(error_this, node.hActsl)
        self.dbs &lt;/span&gt;+=&lt;span&gt; error_this
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; error &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
            delta &lt;/span&gt;+=&lt;span&gt; error
        
        delta[node.hActsl &lt;/span&gt;== 0] =&lt;span&gt; 0
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; node.isLeaf:
            self.dL[node.word] &lt;/span&gt;+=&lt;span&gt; delta
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.dW &lt;/span&gt;+=&lt;span&gt; np.outer(delta, np.hstack([node.left.hActsl, node.right.hActsl]))
            self.db &lt;/span&gt;+=&lt;span&gt; delta
            
            delta &lt;/span&gt;=&lt;span&gt; np.dot(self.W.T, delta)
            self.backProp(node.left, delta[:self.wvecDim])
            self.backProp(node.right, delta[self.wvecDim:])
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; updateParams(self, scale, update, log=&lt;span&gt;False):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    如下这样更新参数
                    p:=p-scale*update
                    如果log是真的，输出根节点的均方误差，并且更新根节点的值
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; log:
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; P, dP &lt;span&gt;in&lt;/span&gt; zip(self.stack[1:], update[1&lt;span&gt;:]):
                pRMS &lt;/span&gt;= np.sqrt(np.mean(P ** 2&lt;span&gt;))
                dpRMS &lt;/span&gt;= np.sqrt(np.mean((scale * dP) ** 2&lt;span&gt;))
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;weight rms=%f -- update rms=%f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (pRMS, dpRMS))
        self.stack[&lt;/span&gt;1:] = [P + scale * dP &lt;span&gt;for&lt;/span&gt; P, dP &lt;span&gt;in&lt;/span&gt; zip(self.stack[1:], update[1&lt;span&gt;:])]
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解决词典并且进行稀疏的更新&lt;/span&gt;
        dL =&lt;span&gt; update[0]
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dL.iterkeys():
            self.L[:, j] &lt;/span&gt;+=&lt;span&gt; scale.dL[j]
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; toFile(self, fid):
        pickle.dump(self.stack, fid)
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; fromFile(self, fid):
        self.stack &lt;/span&gt;=&lt;span&gt; pickle.load(fid)
    
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; check_grad(self, data, epsilon=1e-6&lt;span&gt;):
        cost, grad &lt;/span&gt;=&lt;span&gt; self.costAndGrad(data)
        
        err1 &lt;/span&gt;= 0.0&lt;span&gt;
        count &lt;/span&gt;= 0.0
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Checking dW...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; W, dW &lt;span&gt;in&lt;/span&gt; zip(self.stack[1:], grad[1&lt;span&gt;:]):
            W &lt;/span&gt;=&lt;span&gt; W[..., None]
            dW &lt;/span&gt;=&lt;span&gt; dW[..., None]
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(W.shape[0]):
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(W.shape[1&lt;span&gt;]):
                    W[i, j] &lt;/span&gt;+=&lt;span&gt; epsilon
                    costP, _ &lt;/span&gt;=&lt;span&gt; self.costAndGrad(data)
                    W[i, j] &lt;/span&gt;-=&lt;span&gt; epsilon
                    numGrad &lt;/span&gt;= (costP - cost) /&lt;span&gt; epsilon
                    err &lt;/span&gt;= np.abs(dW[i, j] -&lt;span&gt; numGrad)
                    err1 &lt;/span&gt;+=&lt;span&gt; err
                    count &lt;/span&gt;+= 1
        &lt;span&gt;if&lt;/span&gt; 0.001 &amp;gt; err1 /&lt;span&gt; count:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grad Check Passed for dW&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grad Check Failed for dW:Sum of Error=%.9f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (err1 /&lt;span&gt; count))
        
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; check dL separately since dict&lt;/span&gt;
        dL =&lt;span&gt; grad[0]
        L &lt;/span&gt;=&lt;span&gt; self.stack[0]
        err2 &lt;/span&gt;= 0.0&lt;span&gt;
        count &lt;/span&gt;= 0.0
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Checking dL...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dL.keys():
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(L.shape[0]):
                L[i, j] &lt;/span&gt;+=&lt;span&gt; epsilon
                costP, _ &lt;/span&gt;=&lt;span&gt; self.costAndGrad(data)
                L[i, j] &lt;/span&gt;-=&lt;span&gt; epsilon
                numGrad &lt;/span&gt;= (costP - cost) /&lt;span&gt; epsilon
                err &lt;/span&gt;= np.abs(dL[j][i] -&lt;span&gt; numGrad)
                err2 &lt;/span&gt;+=&lt;span&gt; err
                count &lt;/span&gt;+= 1
        &lt;span&gt;if&lt;/span&gt; 0.001 &amp;gt; err2 /&lt;span&gt; count:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grad Check Passed for dL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Grad Check Failed for dL: Sum of Error = %.9f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (err2 /&lt;span&gt; count))

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:

    train &lt;/span&gt;=&lt;span&gt; treeM.loadTrees()
    numW &lt;/span&gt;=&lt;span&gt; len(treeM.loadWordMap())
    
    wvecDim &lt;/span&gt;= 10&lt;span&gt;
    outputDim &lt;/span&gt;= 5&lt;span&gt;
    
    rnn &lt;/span&gt;= RNN(wvecDim, outputDim, numW, mbSize=4&lt;span&gt;)
    rnn.initParams()
    
    mbData &lt;/span&gt;= train[:4&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Numerical gradient check...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    rnn.check_grad(mbData)
        &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在进行计算时需要先运行tree.py文件进行tree结构的生成，然后进行合并计算&lt;/p&gt;&lt;div readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; collections
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle
UNK &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UNK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; This file contains the dataset in a useful way. We populate a list of Trees to train/test our Neural Nets such that each Tree contains any number of Node objects.&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; The best way to get a feel for how these objects are used in the program is to drop pdb.set_trace() in a few places throughout the codebase&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; to see how the trees are used.. look where loadtrees() is called etc..&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt; Node: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a node in the tree&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self,label,word=&lt;span&gt;None):
        self.label &lt;/span&gt;=&lt;span&gt; label 
        self.word &lt;/span&gt;= word &lt;span&gt;#&lt;/span&gt;&lt;span&gt; NOT a word vector, but index into L.. i.e. wvec = L[:,node.word]&lt;/span&gt;
        self.parent = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reference to parent&lt;/span&gt;
        self.left = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reference to left child&lt;/span&gt;
        self.right = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reference to right child&lt;/span&gt;
        self.isLeaf = False &lt;span&gt;#&lt;/span&gt;&lt;span&gt; true if I am a leaf (could have probably derived this from if I have a word)&lt;/span&gt;
        self.fprop = False &lt;span&gt;#&lt;/span&gt;&lt;span&gt; true if we have finished performing fowardprop on this node (note, there are many ways to implement the recursion.. some might not require this flag)&lt;/span&gt;
        self.hActs1 = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; h1 from the handout&lt;/span&gt;
        self.hActs2 = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; h2 from the handout (only used for RNN2)&lt;/span&gt;
        self.probs = None &lt;span&gt;#&lt;/span&gt;&lt;span&gt; yhat&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tree:

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self,treeString,openChar=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,closeChar=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        tokens &lt;/span&gt;=&lt;span&gt; []
        self.open &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        self.close &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; toks &lt;span&gt;in&lt;/span&gt;&lt;span&gt; treeString.strip().split():
            tokens &lt;/span&gt;+=&lt;span&gt; list(toks)
        self.root &lt;/span&gt;=&lt;span&gt; self.parse(tokens)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; parse(self, tokens, parent=&lt;span&gt;None):
        &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt; tokens[0] == self.open, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Malformed tree&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; tokens[-1] == self.close, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Malformed tree&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

        split &lt;/span&gt;= 2 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; position after open and label&lt;/span&gt;
        countOpen = countClose =&lt;span&gt; 0

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; tokens[split] ==&lt;span&gt; self.open: 
            countOpen &lt;/span&gt;+= 1&lt;span&gt;
            split &lt;/span&gt;+= 1
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Find where left child and right child split&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; countOpen !=&lt;span&gt; countClose:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; tokens[split] ==&lt;span&gt; self.open:
                countOpen &lt;/span&gt;+= 1
            &lt;span&gt;if&lt;/span&gt; tokens[split] ==&lt;span&gt; self.close:
                countClose &lt;/span&gt;+= 1&lt;span&gt;
            split &lt;/span&gt;+= 1

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; New node&lt;/span&gt;
        node = Node(int(tokens[1])) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zero index labels&lt;/span&gt;
&lt;span&gt;
        node.parent &lt;/span&gt;=&lt;span&gt; parent 

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; leaf Node&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; countOpen ==&lt;span&gt; 0:
            node.word &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;.join(tokens[2:-1]).lower() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; lower case?&lt;/span&gt;
            node.isLeaf =&lt;span&gt; True
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node

        node.left &lt;/span&gt;= self.parse(tokens[2:split],parent=&lt;span&gt;node)
        node.right &lt;/span&gt;= self.parse(tokens[split:-1],parent=&lt;span&gt;node)

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node

        

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; leftTraverse(root,nodeFn=None,args=&lt;span&gt;None):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    Recursive function traverses tree
    from left to right. 
    Calls nodeFn at each node
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nodeFn(root,args)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; root.left &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
        leftTraverse(root.left,nodeFn,args)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; root.right &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
        leftTraverse(root.right,nodeFn,args)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; countWords(node,words):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; node.isLeaf:
        words[node.word] &lt;/span&gt;+= 1

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; clearFprop(node,words):
    node.fprop &lt;/span&gt;=&lt;span&gt; False

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; mapWords(node,wordMap):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; node.isLeaf:
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; node.word &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; wordMap:
            node.word &lt;/span&gt;=&lt;span&gt; wordMap[UNK]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            node.word &lt;/span&gt;=&lt;span&gt; wordMap[node.word]
    

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; loadWordMap():
    with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wordMap.bin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fid:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pickle.load(fid)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; buildWordMap():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    Builds map of all words in training set
    to integer values.
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;


    file &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;trees/train.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Reading trees to build word map..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    with open(file,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fid:
        trees &lt;/span&gt;= [Tree(l) &lt;span&gt;for&lt;/span&gt; l &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fid.readlines()]

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Counting words to give each word an index..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    
    words &lt;/span&gt;=&lt;span&gt; collections.defaultdict(int)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; tree &lt;span&gt;in&lt;/span&gt;&lt;span&gt; trees:
        leftTraverse(tree.root,nodeFn&lt;/span&gt;=countWords,args=&lt;span&gt;words)
    
    wordMap &lt;/span&gt;=&lt;span&gt; dict(zip(words.keys(),range(len(words))))
    wordMap[UNK] &lt;/span&gt;= len(words) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Add unknown as word&lt;/span&gt;
    
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Saving wordMap to wordMap.bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wordMap.bin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fid:
        pickle.dump(wordMap,fid)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; loadTrees(dataSet=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    Loads training trees. Maps leaf node words to word ids.
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    wordMap &lt;/span&gt;=&lt;span&gt; loadWordMap()
    file &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;trees/%s.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;dataSet
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Loading %sing trees..&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;dataSet)
    with open(file,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as fid:
        trees &lt;/span&gt;= [Tree(l) &lt;span&gt;for&lt;/span&gt; l &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fid.readlines()]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; tree &lt;span&gt;in&lt;/span&gt;&lt;span&gt; trees:
        leftTraverse(tree.root,nodeFn&lt;/span&gt;=mapWords,args=&lt;span&gt;wordMap)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; trees
      
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    buildWordMap()
    
    train &lt;/span&gt;=&lt;span&gt; loadTrees()

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Now you can do something with this list of trees!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Fri, 06 Oct 2017 14:37:00 +0000</pubDate>
<dc:creator>香港胖仔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/weizhen/p/7633167.html</dc:identifier>
</item>
</channel>
</rss>