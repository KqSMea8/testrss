<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MYSQL 5.7 MHA(GTID+ROW)部署及failover，online_change实战演练 - 翰墨文海（胡磊）</title>
<link>http://www.cnblogs.com/hmwh/p/9263547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hmwh/p/9263547.html</guid>
<description>&lt;p&gt;文章结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704152825497-737538570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;1、MHA简介&lt;/h2&gt;
&lt;p&gt;Masterhigh availability manager and toolsfor mysql,是日本的一位mysql专家采用perl语言编写的一个脚本管理工具，该工具进适用于msql replication环境。目的在于维持master主库的高可用性，MHA是自动的master故障转移和slave提升的软件包，基于标准的MYSQL复制（异步/半同步）。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;p&gt;https://github.com/yoshinorim/mha4mysql-manager/releases &lt;a href=&quot;https://github.com/yoshinorim/mha4mysql-node/releases&quot;&gt;https://github.com/yoshinorim/mha4mysql-node/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他需要下载的包地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rpm.pbone.net/index.php3?stat=3&amp;amp;limit=5&amp;amp;srodzaj=1&amp;amp;dl=40&amp;amp;search=perl-Module-Install&amp;amp;field&quot;&gt;http://rpm.pbone.net/index.php3?stat=3&amp;amp;limit=5&amp;amp;srodzaj=1&amp;amp;dl=40&amp;amp;search=perl-Module-Install&amp;amp;field&lt;/a&gt;=&lt;/p&gt;

&lt;h2&gt;2、MHA原理&lt;/h2&gt;
&lt;p&gt;MHA的目的在于维持MYSQL Replication 中master库的高可用性，其最大特点是可以修复多个slave之间的差异日志，最终使所有slave保持一致，然后从中选择一个充当新的master,并将其他slave指向它。当master出现故障时，可以通过对比slave之间的I/O thread读取主库binlog的position号，选取最接近的slave 作为备选主库，其他的从库可以通过与备库主库对比生成差异的中继日志，在备选主库上应用从原来master保存的binlog,同时将备选主库提升为master，最后在其他slave上应用相应的差异中继日志并从新的master开始复制。&lt;/p&gt;

&lt;h2&gt;3、MHA优缺点&lt;/h2&gt;
&lt;h3&gt;3.1.    优点&lt;/h3&gt;
&lt;p&gt;1、 故障切换时，可以自行判断从哪个库与主库的数据最接近，然后切换到上面，可以减少数据的丢失，保证数据的一致性。&lt;/p&gt;
&lt;p&gt;2、 支持binlog server，可以提高binlog的传送效率，进一步减少数据丢失的风险。&lt;/p&gt;
&lt;p&gt;3、 结合MYSQL5.7的增强半同步功能，确保故障切换时数据不丢失。&lt;/p&gt;
&lt;h3&gt;3.2.    缺点&lt;/h3&gt;
&lt;p&gt;1、自动切换的脚本太简单了，而且比较老化，建议后期逐渐完善&lt;/p&gt;
&lt;p&gt;2、搭建,MHA架构需要开启LINUX系统互信协议，所以对于系统安全性来说是个不小的考验。&lt;/p&gt;

&lt;h2&gt;4、MHA工具包的功能&lt;/h2&gt;
&lt;p&gt;1、manager管理工具&lt;/p&gt;
&lt;p&gt;masterha_check_ssh：检查MHA的ssh配置。&lt;/p&gt;
&lt;p&gt;masterha_check_repl:检查MYSQL数据库的主从复制功能。&lt;/p&gt;
&lt;p&gt;masterha_manager：启动MHA服务。&lt;/p&gt;
&lt;p&gt;masterha_check_status：检查当前MHA运行状态。&lt;/p&gt;
&lt;p&gt;masterha_master_monitor：监测Master是否宕机。&lt;/p&gt;
&lt;p&gt;masterha_master_switch：控制故障转移（手动或者自动）。&lt;/p&gt;
&lt;p&gt;masterha_conf_host：添加或删除配置的server信息。&lt;/p&gt;
&lt;p&gt;2、node 数据节点工具&lt;/p&gt;
&lt;p&gt;save_binary_logs：保存和复制master的二进制日志。&lt;/p&gt;
&lt;p&gt;apply_diff_relay_logs：识别差异的中继日志时间并应用于其他slave。&lt;/p&gt;
&lt;p&gt;filter_mysqlbinlog:去除不必要的rollback事件（MHA已不再使用这个工具）。&lt;/p&gt;
&lt;p&gt;purge_relay_logs：清除中继日志（不会阻塞SQL线程）。&lt;/p&gt;

&lt;h2&gt;5、MYSQL MHA安装以及演练&lt;/h2&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;IP&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;主机名&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;作用&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;数据库版本&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;139&quot;&gt;
&lt;p align=&quot;center&quot;&gt;操作系统版本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;172.16.10.22&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;rac2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;master node&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Mysql5.7.20&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;139&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Redhat6.7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;172.16.10.61&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;racdg1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;slave node1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Mysql5.7.20&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;139&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Redhat6.7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;172.16.10.62&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Racdg2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;slave node2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Mysql5.7.20&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;139&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Redhat6.7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;172.16.10.30&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt;VIP&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;143&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;139&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153023506-60379272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;5.1.     配置互信&lt;/h3&gt;
&lt;p&gt;配置三台机器的互信：&lt;/p&gt;
&lt;p&gt;cd&lt;/p&gt;
&lt;p&gt;mkdir ~/.ssh&lt;/p&gt;
&lt;p&gt;cd /root/.ssh/&lt;/p&gt;
&lt;p&gt;ssh-keygen -t dsa -P '' -f id_dsa&lt;/p&gt;

&lt;p&gt;id_dsa.pub为公钥，id_dsa为私钥，紧接着将公钥文件复制authorized_keys文件，过程：&lt;/p&gt;
&lt;p&gt;cat id_dsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;
&lt;p&gt;从库1执行：&lt;/p&gt;
&lt;p&gt;ssh-keygen -t dsa -P '' -f id_dsa&lt;/p&gt;
&lt;p&gt;cat id_dsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;
&lt;p&gt;从库2执行：&lt;/p&gt;
&lt;p&gt;ssh-keygen -t dsa -P '' -f id_dsa&lt;/p&gt;
&lt;p&gt;cat id_dsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;

&lt;p&gt;在把秘钥的传到主库过程：&lt;/p&gt;
&lt;p&gt;scp /root/.ssh/id_dsa.pub 172.16.10.22:/root/.ssh/id_dsa.pub.61&lt;/p&gt;
&lt;p&gt;scp /root/.ssh/id_dsa.pub 172.16.10.22:/root/.ssh/id_dsa.pub.62&lt;/p&gt;

&lt;p&gt;查看主库秘钥：&lt;/p&gt;

&lt;p&gt;接收完成后执行合并秘钥：&lt;/p&gt;
&lt;p&gt;cat id_dsa.pub.61 &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;
&lt;p&gt;cat id_dsa.pub.62 &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;
&lt;p&gt;scp /root/.ssh/authorized_keys 172.16.10.61:/root/.ssh/&lt;/p&gt;
&lt;p&gt;scp /root/.ssh/authorized_keys 172.16.10.62:/root/.ssh/&lt;/p&gt;


&lt;p&gt;然后三台服务器添加域名解析：&lt;/p&gt;
&lt;p&gt;vi /etc/hosts&lt;/p&gt;
&lt;p&gt;172.16.10.22  rac2&lt;/p&gt;
&lt;p&gt;172.16.10.61   racdg1&lt;/p&gt;
&lt;p&gt;172.16.10.62   racdg2&lt;/p&gt;
&lt;p&gt;验证互信：&lt;/p&gt;
&lt;p&gt;主执行：&lt;/p&gt;
&lt;p&gt;ssh racdg1 date&lt;/p&gt;
&lt;p&gt;ssh racdg2 date&lt;/p&gt;

&lt;p&gt;Slave1执行：&lt;/p&gt;
&lt;p&gt;ssh rac2 date&lt;/p&gt;
&lt;p&gt;ssh racdg2 date&lt;/p&gt;

&lt;p&gt;Slave2执行：&lt;/p&gt;
&lt;p&gt;ssh rac2 date&lt;/p&gt;
&lt;p&gt;ssh racdg1 date&lt;/p&gt;

&lt;h3&gt;5.2.     搭建一主两从&lt;/h3&gt;
&lt;p&gt;搭建主从环境，使用的是5.7版本，基于GTID+ROW模式进行搭建。&lt;/p&gt;
&lt;p&gt;所以机器执行创建复制账号步骤：&lt;/p&gt;
&lt;p&gt;create user 'rep'@'172.16.10.%' identified by 'mysql';&lt;/p&gt;
&lt;p&gt;grant replication slave on *.* to 'rep'@'172.16.10.%';&lt;/p&gt;
&lt;p&gt;flush privileges;&lt;/p&gt;
&lt;p&gt;show grants for 'rep'@'172.16.10.%';&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153117263-1982138900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所有主机创建管理账号：&lt;/p&gt;
&lt;p&gt;create user 'zs'@'172.16.10.%' identified by '123456';&lt;/p&gt;
&lt;p&gt;grant all privileges on *.* to 'zs'@'172.16.10.%';&lt;/p&gt;
&lt;p&gt;flush privileges;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153130746-999632398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;配置主从命令并且开启主从同步：&lt;/p&gt;
&lt;p&gt;初始化：&lt;/p&gt;
&lt;p&gt;/usr/local/mysql5.7/bin/mysqldump -S /tmp/mysql3307.sock --single-transaction -uroot -pmysql --master-data=2 -A &amp;gt; slave.sql&lt;/p&gt;
&lt;p&gt;注意：必须加参数 –master-data=2,让备份出来的文件中记录备份这一刻binlog文件与position号，为搭建主从环境做准备。查看备份文件中记录的当前binlog文件和position号。&lt;/p&gt;

&lt;p&gt;scp slave.sql 172.16.10.61:/root&lt;/p&gt;
&lt;p&gt;scp slave.sql 172.16.10.62:/root&lt;/p&gt;
&lt;p&gt;注意，如果主从GTID不一样，数据一致可以：&lt;/p&gt;
&lt;p&gt;set global gtid_purged='*******';&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主库需要以下配置：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gtid_mode=on&lt;/p&gt;
&lt;p&gt;enforce_gtid_consistency=on&lt;/p&gt;
&lt;p&gt;log_bin=on&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从库需要以下配置：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;servier-id 主从库不能一样。&lt;/p&gt;
&lt;p&gt;gtid_mode=on&lt;/p&gt;
&lt;p&gt;enforce_gtid_consistency=on&lt;/p&gt;
&lt;p&gt;log_slave_updates=1&lt;/p&gt;

&lt;p&gt;mysql -S /tmp/mysql3307.sock -uroot -pmysql &amp;lt; slave.sql&lt;/p&gt;
&lt;p&gt;从库执行：&lt;/p&gt;
&lt;p&gt;change master to master_host='172.16.10.22',master_port=3307,master_user='rep',master_password='mysql',master_auto_position=1;&lt;/p&gt;
&lt;p&gt;start slave;&lt;/p&gt;
&lt;p&gt;show slave status\G;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153144667-1514909793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.3.     安装MHA节点&lt;/h3&gt;
&lt;p&gt;所有MHA服务器安装Perl环境&lt;/p&gt;
&lt;p&gt;yum install perl-DBD-MySQL&lt;/p&gt;
&lt;p&gt;注意最新的为0.58版本，但是对应的是centos7/redhat7,如果是低版本，建议用0.57（本人已经踩过这个坑）&lt;/p&gt;
&lt;h4&gt;a)     安装MHA-NODE节点&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;所有节点上执行以下&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;tar -zxvf mha4mysql-node-0.57.tar.gz&lt;/p&gt;
&lt;p&gt;yum install perl-CPAN*&lt;/p&gt;
&lt;p&gt;cd mha4mysql-node-0.57&lt;/p&gt;
&lt;p&gt;perl Makefile.PL&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153159468-1467251616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;make &amp;amp;&amp;amp; make install&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153212097-1348887516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ls -lh /usr/local/bin/&lt;/p&gt;
&lt;p&gt;查看生成的文件：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153222121-221606887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h4&gt;b)    安装配置MHA-manager管理节点&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在salve2&lt;/strong&gt;&lt;strong&gt;执行以下操作：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装管理节点，先安装介质包：&lt;/p&gt;
&lt;p&gt;yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes –y&lt;/p&gt;
&lt;p&gt;yum -y install perl*&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153234231-590539241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;查看，并下载需要安装的依赖包：&lt;/p&gt;
&lt;p&gt;先检查：&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Config-Tiny&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Email-Date-Format&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Log-Dispatch&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Mail-Sender&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Mail-Sendmail&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-MIME-Lite&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Time-HiRes&lt;/p&gt;
&lt;p&gt;rpm -qa|grep perl-Parallel-ForkManager&lt;/p&gt;
&lt;p&gt;后安装：&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Config-Tiny-2.12-1.el6.rfx.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Email-Date-Format-1.002-1.el6.rfx.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Parallel-ForkManager-0.7.9-1.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Mail-Sendmail-0.79_16-4.2.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Mail-Sender-0.8.16-3.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-MIME-Lite-3.029-1.el6.rfx.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Parallel-ForkManager-0.7.9-1.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt;rpm -ivh perl-Log-Dispatch-2.27-1.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153245676-1662976446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后安装管理节点：&lt;/p&gt;
&lt;p&gt;tar -zxvf mha4mysql-manager-0.57.tar.gz&lt;/p&gt;
&lt;p&gt;cd mha4mysql-manager-0.57&lt;/p&gt;
&lt;p&gt;perl Makefile.PL&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153259880-179071494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;make&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153307416-1460469778.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;make install&lt;/p&gt;
&lt;p&gt;ls -lh /usr/local/bin&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153316568-2101358341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;进行管理节点MHA的配置过程。&lt;/p&gt;
&lt;p&gt;slave2执行：&lt;/p&gt;
&lt;p&gt;mkdir -p /usr/local/mha&lt;/p&gt;
&lt;p&gt;mkdir -p /etc/mha&lt;/p&gt;
&lt;p&gt;cd /etc/mha/&lt;/p&gt;
&lt;p&gt;vim mha.conf&lt;/p&gt;

&lt;p&gt;[server default]&lt;/p&gt;
&lt;p&gt;user=zs&lt;/p&gt;
&lt;p&gt;password=123456&lt;/p&gt;
&lt;p&gt;manager_workdir=/usr/local/mha    &lt;/p&gt;
&lt;p&gt;manager_log=/usr/local/mha/manager.log&lt;/p&gt;
&lt;p&gt;remote_workdir=/usr/local/mha&lt;/p&gt;
&lt;p&gt;ssh_user=root&lt;/p&gt;
&lt;p&gt;repl_user=rep&lt;/p&gt;
&lt;p&gt;repl_password=mysql&lt;/p&gt;
&lt;p&gt;ping_interval=1        &lt;/p&gt;
&lt;p&gt;master_ip_failover_script=/usr/local/scripts/master_ip_failover   &lt;/p&gt;
&lt;p&gt;master_ip_online_change_script=/usr/local/scripts/master_ip_online_change &lt;/p&gt;

&lt;p&gt;[server1]&lt;/p&gt;
&lt;p&gt;hostname=172.16.10.22&lt;/p&gt;
&lt;p&gt;ssh_port=22&lt;/p&gt;
&lt;p&gt;master_binlog_dir=/mydata/mysql/mysql3307/logs/&lt;/p&gt;
&lt;p&gt;candidate_master=1&lt;/p&gt;
&lt;p&gt;port=3307&lt;/p&gt;

&lt;p&gt;[server2]&lt;/p&gt;
&lt;p&gt;hostname=172.16.10.61&lt;/p&gt;
&lt;p&gt;ssh_port=22&lt;/p&gt;
&lt;p&gt;master_binlog_dir=/mydata/mysql/mysql3307/logs/&lt;/p&gt;
&lt;p&gt;candidate_master=1&lt;/p&gt;
&lt;p&gt;port=3307&lt;/p&gt;

&lt;p&gt;[server3]&lt;/p&gt;
&lt;p&gt;hostname=172.16.10.62&lt;/p&gt;
&lt;p&gt;ssh_port=22&lt;/p&gt;
&lt;p&gt;master_binlog_dir=/mydata/mysql/mysql3307/logs/&lt;/p&gt;
&lt;p&gt;no_master=1&lt;/p&gt;
&lt;p&gt;port=3307&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;manager_workdir=/usr/local/mha              //设置manager的工作目录manager_log=/usr/local/mhamanager.log          //设置manager的日志&lt;/p&gt;
&lt;p&gt;ping_interval=1         //设置监控主库，发送ping包的时间间隔，默认是3秒，尝试三次没有回应的时候自动进行failover&lt;/p&gt;
&lt;p&gt;master_ip_failover_script=/usr/local/scripts/master_ip_failover    //设置自动failover时候的切换脚本&lt;/p&gt;
&lt;p&gt;master_ip_online_change_script= /usr/local/scripts/master_ip_online_change  //设置手动切换时候的切换脚本&lt;/p&gt;
&lt;p&gt;candidate_master=1   //设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave&lt;/p&gt;
&lt;p&gt;check_repl_delay=0   //默认情况下如果一个slave落后master 100M的relay logs的话，MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master&lt;/p&gt;
&lt;p&gt;no_master=1 //意味着这个server从来不会成为新的master,这个参数用来标记从来不用成为新主的服务器。&lt;/p&gt;

&lt;p&gt;编辑failover切换脚本：&lt;/p&gt;
&lt;p&gt;mkdir -p /usr/local/scripts&lt;/p&gt;
&lt;p&gt;cd /usr/local/scripts&lt;/p&gt;
&lt;p&gt;vim master_ip_failover&lt;/p&gt;
&lt;p&gt;脚本内容如下：&lt;/p&gt;
&lt;p&gt;#!/usr/bin/env perl&lt;/p&gt;

&lt;p&gt;#use strict;&lt;/p&gt;
&lt;p&gt;use warnings FATAL =&amp;gt; 'all';&lt;/p&gt;

&lt;p&gt;use Getopt::Long;&lt;/p&gt;

&lt;p&gt;use Net::Ping;&lt;/p&gt;
&lt;p&gt;use Switch;&lt;/p&gt;

&lt;p&gt;use DBI;&lt;/p&gt;

&lt;p&gt;my ($command, $ssh_user, $orig_master_host, $orig_master_ip, $orig_master_port, $orig_master_ssh_port, $new_master_host, $new_master_ip, $new_master_port, $new_master_user, $new_master_password, $new_master_ssh_port);&lt;/p&gt;

&lt;p&gt;$orig_master_ssh_port = 22;&lt;/p&gt;
&lt;p&gt;GetOptions(&lt;/p&gt;
&lt;p&gt;  'command=s'             =&amp;gt; \$command,&lt;/p&gt;
&lt;p&gt;  'ssh_user=s'            =&amp;gt; \$ssh_user,&lt;/p&gt;
&lt;p&gt;  'orig_master_host=s'    =&amp;gt; \$orig_master_host,&lt;/p&gt;
&lt;p&gt;  'orig_master_ip=s'      =&amp;gt; \$orig_master_ip,&lt;/p&gt;
&lt;p&gt;  'orig_master_port=i'    =&amp;gt; \$orig_master_port,&lt;/p&gt;
&lt;p&gt;  'orig_master_ssh_port=i' =&amp;gt; \$orig_master_ssh_port,&lt;/p&gt;
&lt;p&gt;  'new_master_host=s'     =&amp;gt; \$new_master_host,&lt;/p&gt;
&lt;p&gt;  'new_master_ip=s'       =&amp;gt; \$new_master_ip,&lt;/p&gt;
&lt;p&gt;  'new_master_port=i'     =&amp;gt; \$new_master_port,&lt;/p&gt;
&lt;p&gt;  'new_master_user=s'     =&amp;gt; \$new_master_user,&lt;/p&gt;
&lt;p&gt;  'new_master_password=s' =&amp;gt; \$new_master_password,&lt;/p&gt;
&lt;p&gt;  'new_master_ssh_port=i'  =&amp;gt; \$new_master_ssh_port,&lt;/p&gt;
&lt;p&gt;);&lt;/p&gt;


&lt;p&gt;my $vip = '172.16.10.30';  # Virtual IP&lt;/p&gt;
&lt;p&gt;my $timeout = 5;&lt;/p&gt;
&lt;p&gt;my $key = &quot;2&quot;;&lt;/p&gt;
&lt;p&gt;my $getway = &quot;172.16.10.1&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_start_vip = &quot;/sbin/ifconfig eth0:$key $vip&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_stop_vip = &quot;/sbin/ifconfig eth0:$key down&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_arping_vip = &quot;/sbin/arping -U $vip -I eth0 -c 3&quot;;&lt;/p&gt;

&lt;p&gt;exit &amp;amp;main();&lt;/p&gt;

&lt;p&gt;sub main {&lt;/p&gt;

&lt;p&gt;print &quot;\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n&quot;;&lt;/p&gt;


&lt;p&gt;if ( $command eq &quot;stop&quot; || $command eq &quot;stopssh&quot; ) {&lt;/p&gt;

&lt;p&gt;    # $orig_master_host, $orig_master_ip, $orig_master_port are passed.&lt;/p&gt;
&lt;p&gt;    # If you manage master ip address at global catalog database,&lt;/p&gt;
&lt;p&gt;    # invalidate orig_master_ip here.&lt;/p&gt;
&lt;p&gt;    my $exit_code = 1;&lt;/p&gt;
&lt;p&gt;    eval {&lt;/p&gt;
&lt;p&gt;        print &quot;Disabling the VIP on old master if the server is still UP: $orig_master_host \n&quot;;&lt;/p&gt;
&lt;p&gt;        sleep(30);&lt;/p&gt;
&lt;p&gt;        my $p=Net::Ping-&amp;gt;new('icmp');&lt;/p&gt;
&lt;p&gt;        $syn=Net::Ping-&amp;gt;new(&quot;syn&quot;);&lt;/p&gt;
&lt;p&gt;        $syn-&amp;gt;port_number($orig_master_ssh_port);&lt;/p&gt;
&lt;p&gt;        $syn-&amp;gt;ping($master_srv);&lt;/p&gt;
&lt;p&gt;        &amp;amp;stop_vip() if $p-&amp;gt;ping($master_srv, $timeout) &amp;amp;&amp;amp; $syn-&amp;gt;ack;&lt;/p&gt;
&lt;p&gt;        $p-&amp;gt;close();&lt;/p&gt;
&lt;p&gt;        $syn-&amp;gt;close();&lt;/p&gt;
&lt;p&gt;        $exit_code = 0;&lt;/p&gt;
&lt;p&gt;    };&lt;/p&gt;
&lt;p&gt;    if ($@) {&lt;/p&gt;
&lt;p&gt;        warn &quot;Got Error: $@\n&quot;;&lt;/p&gt;
&lt;p&gt;        exit $exit_code;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    exit $exit_code;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;elsif ( $command eq &quot;start&quot; ) {&lt;/p&gt;

&lt;p&gt;    # all arguments are passed.&lt;/p&gt;
&lt;p&gt;    # If you manage master ip address at global catalog database,&lt;/p&gt;
&lt;p&gt;    # activate new_master_ip here.&lt;/p&gt;
&lt;p&gt;    # You can also grant write access (create user, set read_only=0, etc) here.&lt;/p&gt;
&lt;p&gt;my $exit_code = 10;&lt;/p&gt;
&lt;p&gt;    eval {&lt;/p&gt;
&lt;p&gt;        print &quot;Enabling the VIP - $vip on the new master - $new_master_host \n&quot;;&lt;/p&gt;
&lt;p&gt;        &amp;amp;start_vip();&lt;/p&gt;
&lt;p&gt;        $exit_code = 0;&lt;/p&gt;
&lt;p&gt;    };&lt;/p&gt;
&lt;p&gt;    if ($@) {&lt;/p&gt;
&lt;p&gt;        warn $@;&lt;/p&gt;
&lt;p&gt;        exit $exit_code;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    exit $exit_code;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;elsif ( $command eq &quot;status&quot; ) {&lt;/p&gt;
&lt;p&gt;    print &quot;Checking the Status of the script.. OK \n&quot;;&lt;/p&gt;
&lt;p&gt;    #`ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;    exit 0;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;else {&lt;/p&gt;
&lt;p&gt;    &amp;amp;usage();&lt;/p&gt;
&lt;p&gt;    exit 1;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;# A simple system call that enable the VIP on the new master&lt;/p&gt;
&lt;p&gt;sub start_vip() {&lt;/p&gt;
&lt;p&gt;my $new_master_status = `mysql -u$new_master_user -h$new_master_host -P$new_master_port -p$new_master_password --execute=\&quot;show master status;\&quot;`;&lt;/p&gt;
&lt;p&gt;`ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;`ssh $ssh_user\@$new_master_host \&quot; $ssh_arping_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;#`/sbin/ifconfig eth0:$key $vip`;&lt;/p&gt;
&lt;p&gt;print &quot;\n\nNEW MASTER STATUS \n\n  $new_master_status&quot;;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;# A simple system call that disable the VIP on the old_master&lt;/p&gt;
&lt;p&gt;sub stop_vip() {&lt;/p&gt;
&lt;p&gt;`ssh $ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub usage {&lt;/p&gt;
&lt;p&gt;print&lt;/p&gt;
&lt;p&gt;&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;chmod +x master_ip_failover&lt;/p&gt;

&lt;p&gt;vi master_ip_online_change&lt;/p&gt;
&lt;p&gt;脚本内容如下：&lt;/p&gt;
&lt;p&gt;#!/usr/bin/env perl&lt;/p&gt;

&lt;p&gt;#  Copyright (C) 2011 DeNA Co.,Ltd.&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;#  This program is free software; you can redistribute it and/or modify&lt;/p&gt;
&lt;p&gt;#  it under the terms of the GNU General Public License as published by&lt;/p&gt;
&lt;p&gt;#  the Free Software Foundation; either version 2 of the License, or&lt;/p&gt;
&lt;p&gt;#  (at your option) any later version.&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;#  This program is distributed in the hope that it will be useful,&lt;/p&gt;
&lt;p&gt;#  but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p&gt;
&lt;p&gt;#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/p&gt;
&lt;p&gt;#  GNU General Public License for more details.&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;#  You should have received a copy of the GNU General Public License&lt;/p&gt;
&lt;p&gt;#   along with this program; if not, write to the Free Software&lt;/p&gt;
&lt;p&gt;#  Foundation, Inc.,&lt;/p&gt;
&lt;p&gt;#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA&lt;/p&gt;

&lt;p&gt;## Note: This is a sample script and is not complete. Modify the script based on your environment.&lt;/p&gt;

&lt;p&gt;use strict;&lt;/p&gt;
&lt;p&gt;use warnings FATAL =&amp;gt; 'all';&lt;/p&gt;

&lt;p&gt;use Getopt::Long;&lt;/p&gt;
&lt;p&gt;use MHA::DBHelper;&lt;/p&gt;
&lt;p&gt;use MHA::NodeUtil;&lt;/p&gt;
&lt;p&gt;use Time::HiRes qw( sleep gettimeofday tv_interval );&lt;/p&gt;
&lt;p&gt;use Data::Dumper;&lt;/p&gt;

&lt;p&gt;my $_tstart;&lt;/p&gt;
&lt;p&gt;my $_running_interval = 0.1;&lt;/p&gt;

&lt;p&gt;my $vip = '172.16.10.30';&lt;/p&gt;
&lt;p&gt;my $key = &quot;2&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_start_vip = &quot;/sbin/ifconfig eth0:$key $vip&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_stop_vip = &quot;/sbin/ifconfig eth0:$key down&quot;;&lt;/p&gt;
&lt;p&gt;my $ssh_send_garp = &quot;/sbin/arping -U $vip -I eth0 -c 1&quot;;&lt;/p&gt;

&lt;p&gt;my (&lt;/p&gt;
&lt;p&gt;  $command,              $orig_master_is_new_slave, $orig_master_host,&lt;/p&gt;
&lt;p&gt;  $orig_master_ip,       $orig_master_port,         $orig_master_user,&lt;/p&gt;
&lt;p&gt;  $orig_master_password, $orig_master_ssh_user,     $new_master_host,&lt;/p&gt;
&lt;p&gt;  $new_master_ip,        $new_master_port,          $new_master_user,&lt;/p&gt;
&lt;p&gt;  $new_master_password,  $new_master_ssh_user,&lt;/p&gt;
&lt;p&gt;);&lt;/p&gt;
&lt;p&gt;GetOptions(&lt;/p&gt;
&lt;p&gt;  'command=s'                =&amp;gt; \$command,&lt;/p&gt;
&lt;p&gt;  'orig_master_is_new_slave' =&amp;gt; \$orig_master_is_new_slave,&lt;/p&gt;
&lt;p&gt;  'orig_master_host=s'       =&amp;gt; \$orig_master_host,&lt;/p&gt;
&lt;p&gt;  'orig_master_ip=s'         =&amp;gt; \$orig_master_ip,&lt;/p&gt;
&lt;p&gt;  'orig_master_port=i'       =&amp;gt; \$orig_master_port,&lt;/p&gt;
&lt;p&gt;  'orig_master_user=s'       =&amp;gt; \$orig_master_user,&lt;/p&gt;
&lt;p&gt;  'orig_master_password=s'   =&amp;gt; \$orig_master_password,&lt;/p&gt;
&lt;p&gt;  'orig_master_ssh_user=s'   =&amp;gt; \$orig_master_ssh_user,&lt;/p&gt;
&lt;p&gt;  'new_master_host=s'        =&amp;gt; \$new_master_host,&lt;/p&gt;
&lt;p&gt;  'new_master_ip=s'          =&amp;gt; \$new_master_ip,&lt;/p&gt;
&lt;p&gt;  'new_master_port=i'        =&amp;gt; \$new_master_port,&lt;/p&gt;
&lt;p&gt;  'new_master_user=s'        =&amp;gt; \$new_master_user,&lt;/p&gt;
&lt;p&gt;  'new_master_password=s'    =&amp;gt; \$new_master_password,&lt;/p&gt;
&lt;p&gt;  'new_master_ssh_user=s'    =&amp;gt; \$new_master_ssh_user,&lt;/p&gt;
&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;exit &amp;amp;main();&lt;/p&gt;

&lt;p&gt;sub start_vip(){&lt;/p&gt;
&lt;p&gt;    `ssh $new_master_ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;    `ssh $new_master_ssh_user\@$new_master_host \&quot; $ssh_send_garp \&quot;`;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub stop_vip(){&lt;/p&gt;
&lt;p&gt;    `ssh $orig_master_ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;sub current_time_us {&lt;/p&gt;
&lt;p&gt;  my ( $sec, $microsec ) = gettimeofday();&lt;/p&gt;
&lt;p&gt;  my $curdate = localtime($sec);&lt;/p&gt;
&lt;p&gt;  return $curdate . &quot; &quot; . sprintf( &quot;%06d&quot;, $microsec );&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub sleep_until {&lt;/p&gt;
&lt;p&gt;  my $elapsed = tv_interval($_tstart);&lt;/p&gt;
&lt;p&gt;  if ( $_running_interval &amp;gt; $elapsed ) {&lt;/p&gt;
&lt;p&gt;    sleep( $_running_interval - $elapsed );&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub get_threads_util {&lt;/p&gt;
&lt;p&gt;  my $dbh                    = shift;&lt;/p&gt;
&lt;p&gt;  my $my_connection_id       = shift;&lt;/p&gt;
&lt;p&gt;  my $running_time_threshold = shift;&lt;/p&gt;
&lt;p&gt;  my $type                   = shift;&lt;/p&gt;
&lt;p&gt;  $running_time_threshold = 0 unless ($running_time_threshold);&lt;/p&gt;
&lt;p&gt;  $type                   = 0 unless ($type);&lt;/p&gt;
&lt;p&gt;  my @threads;&lt;/p&gt;

&lt;p&gt;  my $sth = $dbh-&amp;gt;prepare(&quot;SHOW PROCESSLIST&quot;);&lt;/p&gt;
&lt;p&gt;  $sth-&amp;gt;execute();&lt;/p&gt;

&lt;p&gt;  while ( my $ref = $sth-&amp;gt;fetchrow_hashref() ) {&lt;/p&gt;
&lt;p&gt;    my $id         = $ref-&amp;gt;{Id};&lt;/p&gt;
&lt;p&gt;    my $user       = $ref-&amp;gt;{User};&lt;/p&gt;
&lt;p&gt;    my $host       = $ref-&amp;gt;{Host};&lt;/p&gt;
&lt;p&gt;    my $command    = $ref-&amp;gt;{Command};&lt;/p&gt;
&lt;p&gt;    my $state      = $ref-&amp;gt;{State};&lt;/p&gt;
&lt;p&gt;    my $query_time = $ref-&amp;gt;{Time};&lt;/p&gt;
&lt;p&gt;    my $info       = $ref-&amp;gt;{Info};&lt;/p&gt;
&lt;p&gt;    $info =~ s/^\s*(.*?)\s*$/$1/ if defined($info);&lt;/p&gt;
&lt;p&gt;    next if ( $my_connection_id == $id );&lt;/p&gt;
&lt;p&gt;    next if ( defined($query_time) &amp;amp;&amp;amp; $query_time &amp;lt; $running_time_threshold );&lt;/p&gt;
&lt;p&gt;    next if ( defined($command)    &amp;amp;&amp;amp; $command eq &quot;Binlog Dump&quot; );&lt;/p&gt;
&lt;p&gt;    next if ( defined($user)       &amp;amp;&amp;amp; $user eq &quot;system user&quot; );&lt;/p&gt;
&lt;p&gt;    next&lt;/p&gt;
&lt;p&gt;      if ( defined($command)&lt;/p&gt;
&lt;p&gt;      &amp;amp;&amp;amp; $command eq &quot;Sleep&quot;&lt;/p&gt;
&lt;p&gt;      &amp;amp;&amp;amp; defined($query_time)&lt;/p&gt;
&lt;p&gt;      &amp;amp;&amp;amp; $query_time &amp;gt;= 1 );&lt;/p&gt;

&lt;p&gt;    if ( $type &amp;gt;= 1 ) {&lt;/p&gt;
&lt;p&gt;      next if ( defined($command) &amp;amp;&amp;amp; $command eq &quot;Sleep&quot; );&lt;/p&gt;
&lt;p&gt;      next if ( defined($command) &amp;amp;&amp;amp; $command eq &quot;Connect&quot; );&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    if ( $type &amp;gt;= 2 ) {&lt;/p&gt;
&lt;p&gt;      next if ( defined($info) &amp;amp;&amp;amp; $info =~ m/^select/i );&lt;/p&gt;
&lt;p&gt;      next if ( defined($info) &amp;amp;&amp;amp; $info =~ m/^show/i );&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    push @threads, $ref;&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  return @threads;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub main {&lt;/p&gt;
&lt;p&gt;  if ( $command eq &quot;stop&quot; ) {&lt;/p&gt;
&lt;p&gt;    ## Gracefully killing connections on the current master&lt;/p&gt;
&lt;p&gt;    # 1. Set read_only= 1 on the new master&lt;/p&gt;
&lt;p&gt;    # 2. DROP USER so that no app user can establish new connections&lt;/p&gt;
&lt;p&gt;    # 3. Set read_only= 1 on the current master&lt;/p&gt;
&lt;p&gt;    # 4. Kill current queries&lt;/p&gt;
&lt;p&gt;    # * Any database access failure will result in script die.&lt;/p&gt;
&lt;p&gt;    my $exit_code = 1;&lt;/p&gt;
&lt;p&gt;    eval {&lt;/p&gt;
&lt;p&gt;      ## Setting read_only=1 on the new master (to avoid accident)&lt;/p&gt;
&lt;p&gt;      my $new_master_handler = new MHA::DBHelper();&lt;/p&gt;

&lt;p&gt;      # args: hostname, port, user, password, raise_error(die_on_error)_or_not&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;connect( $new_master_ip, $new_master_port,&lt;/p&gt;
&lt;p&gt;        $new_master_user, $new_master_password, 1 );&lt;/p&gt;
&lt;p&gt;      print current_time_us() . &quot; Set read_only on the new master.. &quot;;&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;enable_read_only();&lt;/p&gt;
&lt;p&gt;      if ( $new_master_handler-&amp;gt;is_read_only() ) {&lt;/p&gt;
&lt;p&gt;        print &quot;ok.\n&quot;;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;
&lt;p&gt;      else {&lt;/p&gt;
&lt;p&gt;        die &quot;Failed!\n&quot;;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;disconnect();&lt;/p&gt;

&lt;p&gt;      # Connecting to the orig master, die if any database error happens&lt;/p&gt;
&lt;p&gt;      my $orig_master_handler = new MHA::DBHelper();&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;connect( $orig_master_ip, $orig_master_port,&lt;/p&gt;
&lt;p&gt;        $orig_master_user, $orig_master_password, 1 );&lt;/p&gt;

&lt;p&gt;      ## Drop application user so that nobody can connect. Disabling per-session binlog beforehand&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;disable_log_bin_local();&lt;/p&gt;
&lt;p&gt;      # print current_time_us() . &quot; Drpping app user on the orig master..\n&quot;;&lt;/p&gt;
&lt;p&gt;      #drop_app_user($orig_master_handler);&lt;/p&gt;

&lt;p&gt;      ## Waiting for N * 100 milliseconds so that current connections can exit&lt;/p&gt;
&lt;p&gt;      my $time_until_read_only = 15;&lt;/p&gt;
&lt;p&gt;      $_tstart = [gettimeofday];&lt;/p&gt;
&lt;p&gt;      my @threads = get_threads_util( $orig_master_handler-&amp;gt;{dbh},&lt;/p&gt;
&lt;p&gt;        $orig_master_handler-&amp;gt;{connection_id} );&lt;/p&gt;
&lt;p&gt;      while ( $time_until_read_only &amp;gt; 0 &amp;amp;&amp;amp; $#threads &amp;gt;= 0 ) {&lt;/p&gt;
&lt;p&gt;        if ( $time_until_read_only % 5 == 0 ) {&lt;/p&gt;
&lt;p&gt;          printf&lt;/p&gt;
&lt;p&gt;&quot;%s Waiting all running %d threads are disconnected.. (max %d milliseconds)\n&quot;,&lt;/p&gt;
&lt;p&gt;            current_time_us(), $#threads + 1, $time_until_read_only * 100;&lt;/p&gt;
&lt;p&gt;          if ( $#threads &amp;lt; 5 ) {&lt;/p&gt;
&lt;p&gt;            print Data::Dumper-&amp;gt;new( [$_] )-&amp;gt;Indent(0)-&amp;gt;Terse(1)-&amp;gt;Dump . &quot;\n&quot;&lt;/p&gt;
&lt;p&gt;              foreach (@threads);&lt;/p&gt;
&lt;p&gt;          }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        sleep_until();&lt;/p&gt;
&lt;p&gt;        $_tstart = [gettimeofday];&lt;/p&gt;
&lt;p&gt;        $time_until_read_only--;&lt;/p&gt;
&lt;p&gt;        @threads = get_threads_util( $orig_master_handler-&amp;gt;{dbh},&lt;/p&gt;
&lt;p&gt;          $orig_master_handler-&amp;gt;{connection_id} );&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;

&lt;p&gt;      ## Setting read_only=1 on the current master so that nobody(except SUPER) can write&lt;/p&gt;
&lt;p&gt;      print current_time_us() . &quot; Set read_only=1 on the orig master.. &quot;;&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;enable_read_only();&lt;/p&gt;
&lt;p&gt;      if ( $orig_master_handler-&amp;gt;is_read_only() ) {&lt;/p&gt;
&lt;p&gt;        print &quot;ok.\n&quot;;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;
&lt;p&gt;      else {&lt;/p&gt;
&lt;p&gt;        die &quot;Failed!\n&quot;;&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;

&lt;p&gt;      ## Waiting for M * 100 milliseconds so that current update queries can complete&lt;/p&gt;
&lt;p&gt;      my $time_until_kill_threads = 5;&lt;/p&gt;
&lt;p&gt;      @threads = get_threads_util( $orig_master_handler-&amp;gt;{dbh},&lt;/p&gt;
&lt;p&gt;        $orig_master_handler-&amp;gt;{connection_id} );&lt;/p&gt;
&lt;p&gt;      while ( $time_until_kill_threads &amp;gt; 0 &amp;amp;&amp;amp; $#threads &amp;gt;= 0 ) {&lt;/p&gt;
&lt;p&gt;        if ( $time_until_kill_threads % 5 == 0 ) {&lt;/p&gt;
&lt;p&gt;          printf&lt;/p&gt;
&lt;p&gt;&quot;%s Waiting all running %d queries are disconnected.. (max %d milliseconds)\n&quot;,&lt;/p&gt;
&lt;p&gt;            current_time_us(), $#threads + 1, $time_until_kill_threads * 100;&lt;/p&gt;
&lt;p&gt;          if ( $#threads &amp;lt; 5 ) {&lt;/p&gt;
&lt;p&gt;            print Data::Dumper-&amp;gt;new( [$_] )-&amp;gt;Indent(0)-&amp;gt;Terse(1)-&amp;gt;Dump . &quot;\n&quot;&lt;/p&gt;
&lt;p&gt;              foreach (@threads);&lt;/p&gt;
&lt;p&gt;          }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        sleep_until();&lt;/p&gt;
&lt;p&gt;        $_tstart = [gettimeofday];&lt;/p&gt;
&lt;p&gt;        $time_until_kill_threads--;&lt;/p&gt;
&lt;p&gt;        @threads = get_threads_util( $orig_master_handler-&amp;gt;{dbh},&lt;/p&gt;
&lt;p&gt;          $orig_master_handler-&amp;gt;{connection_id} );&lt;/p&gt;
&lt;p&gt;      }&lt;/p&gt;

&lt;p&gt;      ## Terminating all threads&lt;/p&gt;
&lt;p&gt;      print current_time_us() . &quot; Killing all application threads..\n&quot;;&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;kill_threads(@threads) if ( $#threads &amp;gt;= 0 );&lt;/p&gt;
&lt;p&gt;      print current_time_us() . &quot; done.\n&quot;;&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;enable_log_bin_local();&lt;/p&gt;
&lt;p&gt;      $orig_master_handler-&amp;gt;disconnect();&lt;/p&gt;

&lt;p&gt;      ## Droping the VIP    &lt;/p&gt;
&lt;p&gt;      print &quot;Disabling the VIP an old master: $orig_master_host \n&quot;;&lt;/p&gt;
&lt;p&gt;      &amp;amp;stop_vip();&lt;/p&gt;

&lt;p&gt;      ## After finishing the script, MHA executes FLUSH TABLES WITH READ LOCK&lt;/p&gt;
&lt;p&gt;      $exit_code = 0;&lt;/p&gt;
&lt;p&gt;    };&lt;/p&gt;
&lt;p&gt;    if ($@) {&lt;/p&gt;
&lt;p&gt;      warn &quot;Got Error: $@\n&quot;;&lt;/p&gt;
&lt;p&gt;      exit $exit_code;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    exit $exit_code;&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  elsif ( $command eq &quot;start&quot; ) {&lt;/p&gt;
&lt;p&gt;    ## Activating master ip on the new master&lt;/p&gt;
&lt;p&gt;    # 1. Create app user with write privileges&lt;/p&gt;
&lt;p&gt;    # 2. Moving backup script if needed&lt;/p&gt;
&lt;p&gt;    # 3. Register new master's ip to the catalog database&lt;/p&gt;

&lt;p&gt;# We don't return error even though activating updatable accounts/ip failed so that we don't interrupt slaves' recovery.&lt;/p&gt;
&lt;p&gt;# If exit code is 0 or 10, MHA does not abort&lt;/p&gt;
&lt;p&gt;    my $exit_code = 10;&lt;/p&gt;
&lt;p&gt;    eval {&lt;/p&gt;
&lt;p&gt;      my $new_master_handler = new MHA::DBHelper();&lt;/p&gt;

&lt;p&gt;      # args: hostname, port, user, password, raise_error_or_not&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;connect( $new_master_ip, $new_master_port,&lt;/p&gt;
&lt;p&gt;        $new_master_user, $new_master_password, 1 );&lt;/p&gt;

&lt;p&gt;      ## Set read_only=0 on the new master&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;disable_log_bin_local();&lt;/p&gt;
&lt;p&gt;      print current_time_us() . &quot; Set read_only=0 on the new master.\n&quot;;&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;disable_read_only();&lt;/p&gt;

&lt;p&gt;      ## Creating an app user on the new master&lt;/p&gt;
&lt;p&gt;      #print current_time_us() . &quot; Creating app user on the new master..\n&quot;;&lt;/p&gt;
&lt;p&gt;      # create_app_user($new_master_handler);&lt;/p&gt;
&lt;p&gt;      print &quot;Enabling the VIP $vip on the new master: $new_master_host \n&quot;;&lt;/p&gt;
&lt;p&gt;      &amp;amp;start_vip();&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;enable_log_bin_local();&lt;/p&gt;
&lt;p&gt;      $new_master_handler-&amp;gt;disconnect();&lt;/p&gt;

&lt;p&gt;      ## Update master ip on the catalog database, etc&lt;/p&gt;
&lt;p&gt;      $exit_code = 0;&lt;/p&gt;
&lt;p&gt;    };&lt;/p&gt;
&lt;p&gt;    if ($@) {&lt;/p&gt;
&lt;p&gt;      warn &quot;Got Error: $@\n&quot;;&lt;/p&gt;
&lt;p&gt;      exit $exit_code;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    exit $exit_code;&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  elsif ( $command eq &quot;status&quot; ) {&lt;/p&gt;

&lt;p&gt;    # do nothing&lt;/p&gt;
&lt;p&gt;    exit 0;&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  else {&lt;/p&gt;
&lt;p&gt;    &amp;amp;usage();&lt;/p&gt;
&lt;p&gt;    exit 1;&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;sub usage {&lt;/p&gt;
&lt;p&gt;  print&lt;/p&gt;
&lt;p&gt;&quot;Usage: master_ip_online_change --command=start|stop|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;;&lt;/p&gt;
&lt;p&gt;  die;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;chmod +x master_ip_online_change&lt;/p&gt;

&lt;p&gt;利用MHA工具检测SSH。&lt;/p&gt;
&lt;p&gt;安装需要的环境包：&lt;/p&gt;
&lt;p&gt;yum -y install perl-Time-HiRes&lt;/p&gt;
&lt;p&gt;执行检测命令：&lt;/p&gt;
&lt;p&gt;/usr/local/bin/masterha_check_ssh --conf=/etc/mha/mha.conf&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153419066-1122462020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;结果全是OK代表着SSH检测成功。&lt;/p&gt;
&lt;p&gt;检测整个主从结构：&lt;/p&gt;
&lt;p&gt;/usr/local/bin/masterha_check_repl --conf=/etc/mha/mha.conf&lt;/p&gt;
&lt;p&gt;这个容易报错：&lt;/p&gt;
&lt;p&gt;注意：update mysql.user set Host='%' where User='root'; （需要主从root 互相登陆）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153429950-895722051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.4.     添加VIP&lt;/h3&gt;
&lt;p&gt;在主库（172.16.10.22）上执行添加VIP的过程（第一次手动添加）&lt;/p&gt;
&lt;p&gt;ip addr add 172.16.10.30/24 dev eth0:1&lt;/p&gt;
&lt;p&gt;ip addr show&lt;/p&gt;

&lt;p&gt;删除的话：ip addr del 172.16.10.30/24 dev eth0&lt;/p&gt;
&lt;h3&gt;5.5.     启动MHA服务&lt;/h3&gt;
&lt;p&gt;在管理节点（172.16.10.62）slave2上执行MHA的启动：&lt;/p&gt;
&lt;p&gt;nohup /usr/local/bin/masterha_manager --conf=/etc/mha/mha.conf &amp;gt; /tmp/mha_manager.log &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;p&gt;注意：如果做过一次FAILOVER测试,启动MHA 建议如下启动：&lt;/p&gt;
&lt;p&gt;nohup /usr/local/bin/masterha_manager --conf=/etc/mha/mha.conf --ignore_last_failover &amp;gt; /tmp/mha_manager.log &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153448559-152117801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;验证启动成功命令并且查看显示状态：&lt;/p&gt;
&lt;p&gt;/usr/local/bin/masterha_check_status --conf=/etc/mha/mha.conf&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153455851-1938952237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.6.     故障转移演练&lt;/h3&gt;
&lt;p&gt;模拟主库（172.16.10.22）宕机，即停止MySQL服务。&lt;/p&gt;
&lt;p&gt;mysqladmin -S /tmp/mysql3307.sock -uroot -pmysql shutdown&lt;/p&gt;
&lt;p&gt;原salve1自动获得VIP 172.16.10.30，如下图：&lt;/p&gt;
&lt;p&gt;ip addr&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153512592-1015129290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;即salve1转换成新的主库。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153522688-1078970984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Slave2指向新的主库，如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153534880-792739177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;且管理节点即（172.16.10.62）上MHA进程自动停止，如下图：&lt;/p&gt;
&lt;p&gt;ps -ef |grep MHA&lt;/p&gt;
&lt;p&gt;root     11998  5673  0 09:01 pts/1    00:00:00 grep MHA&lt;/p&gt;
&lt;p&gt;/usr/local/bin/masterha_check_status --conf=/etc/mha/mha.conf&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153546515-352762084.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.7.     恢复原master&lt;/h3&gt;
&lt;p&gt;启动原master&lt;/p&gt;
&lt;p&gt;mysqld_safe --defaults-file=/etc/my3307.cnf &amp;amp;&lt;/p&gt;
&lt;p&gt;重新配置主从：&lt;/p&gt;
&lt;p&gt;当然，数据要一致是前提（生产上数据不一致，要备份恢复），配置新主从如下：&lt;/p&gt;
&lt;p&gt;即原master变成新的从库：&lt;/p&gt;
&lt;p&gt;新一主两从结构如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153601390-313205011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;change master to master_host='172.16.10.61',master_port=3307,master_user='rep',master_password='mysql',master_auto_position=1;&lt;/p&gt;
&lt;p&gt;手动在线切换：&lt;/p&gt;
&lt;p&gt;我的测试环境执行下面一句：&lt;/p&gt;

&lt;p&gt;/usr/local/bin/masterha_master_switch --conf=/etc/mha/mha.conf --master_state=alive --new_master_host=172.16.10.22 --new_master_port=3307 --orig_master_is_new_slave --running_updates_limit=10000&lt;/p&gt;

&lt;p&gt;注意：回切可以不用启动monitor进程。&lt;/p&gt;
&lt;p&gt;中间提示输入YES.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201807/1339563-20180704153618746-316490274.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;原salve1（现为master）需要switch&lt;/p&gt;
&lt;p&gt;查看VIP&lt;/p&gt;
&lt;p&gt;VIP漂过来了。回切成功。&lt;/p&gt;
&lt;p&gt;后成功后启动MHA：&lt;/p&gt;
&lt;p&gt;nohup /usr/local/bin/masterha_manager --conf=/etc/mha/mha.conf --ignore_last_failover &amp;gt; /tmp/mha_manager.log &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;

&lt;h3&gt;5.8.     总结&lt;/h3&gt;
&lt;p&gt;本地实验能够做好MHA，但是美中不足之处在于：&lt;/p&gt;
&lt;p&gt;1、做过一次failover后，回切需要以下启动MHA&lt;/p&gt;
&lt;p&gt;/usr/local/bin/masterha_master_switch --conf=/etc/mha/mha.conf --master_state=alive --new_master_host=172.16.10.22 --new_master_port=3307 --orig_master_is_new_slave --running_updates_limit=10000&lt;/p&gt;
&lt;p&gt;2、测试被DOWN掉的MASTER，虽然做了failover,但是原master服务器还有VIP，只能手动把原master上的VIP删除；新MASTER 也有VIP，连接测试还是用的新master VIP；&lt;/p&gt;
&lt;p&gt;3、online change之后，原master服务器还有VIP，只能手动把原master上的VIP删除；新MASTER 也有VIP，连接测试还是用的新master VIP；&lt;/p&gt;

</description>
<pubDate>Wed, 04 Jul 2018 07:37:00 +0000</pubDate>
<dc:creator>翰墨文海（胡磊）</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hmwh/p/9263547.html</dc:identifier>
</item>
<item>
<title>5. 双向链表 - 博观&amp;约取</title>
<link>http://www.cnblogs.com/si-lei/p/9263544.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/si-lei/p/9263544.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;（1）双向链表定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;　一种更复杂的链表是“双向链表”或“双面链表”。每个节点有两个链接：一个指向前一个节点，当此节点为第一个节点时，指向空值；而另一个指向下一个节点，当此节点为最后一个节点时，指向空值。&lt;/strong&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1429856/201807/1429856-20180704115303400-1300862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（2）操作：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;is_empty()&lt;/span&gt;:           链表是否为空&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;length(&lt;/span&gt;):               链表长度&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;travel()&lt;/span&gt;:                 遍历链表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;add(item&lt;/span&gt;):             链表头部添加&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;append(item)&lt;/span&gt;:      链表尾部添加&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;insert(pos, item)&lt;/span&gt;: 指定位置添加&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;remove(item)&lt;/span&gt;:      删除节点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;search(item)&lt;/span&gt;:       查找节点是否存在&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（3）实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node(object):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;节点&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, item):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.elem =&lt;span&gt; item
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.next = None    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 后继&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         self.prev = None    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 前驱&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DoubleLinkList(object):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;双向链表&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, node=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         self.&lt;span&gt;__head&lt;/span&gt; =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; is_empty(self):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;判断链表是否为空&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; self.&lt;span&gt;__head&lt;/span&gt; ==&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; length(self):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;返回链表的长度&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         cur = self.&lt;span&gt;__head&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         count =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; cur !=&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             count += 1
&lt;span&gt;23&lt;/span&gt;             cur =&lt;span&gt; cur.next
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; count
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; travel(self):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;遍历链表&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         cur = self.&lt;span&gt;__head&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; cur !=&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(cur.elem, end=&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             cur =&lt;span&gt; cur.next
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add(self, item):
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;链表头部添加元素，头插法&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         node =&lt;span&gt; Node(item)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; self.is_empty():
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是空链表，将_head指向node&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             self.&lt;span&gt;__head&lt;/span&gt; =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将node的next指向_head的头节点&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             node.next = self.&lt;span&gt;__head&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将_head 指向node&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             self.&lt;span&gt;__head&lt;/span&gt; =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将_head的头节点的prev指向node&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;             node.next.prev =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; append(self, item):
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;链表尾部添加元素，尾插法&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         node =&lt;span&gt; Node(item)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; self.is_empty():
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是空链表，将_head指向node&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;             self.&lt;span&gt;__head&lt;/span&gt; =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 移动到链表尾部&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;             cur = self.&lt;span&gt;__head&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; cur.next !=&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 cur =&lt;span&gt; cur.next
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将尾节点cur的next指向node&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;             cur.next =&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将node的prev指向cur&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;             node.prev =&lt;span&gt; cur
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; search(self, item):
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;查找元素是否存在&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;         cur = self.&lt;span&gt;__head&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; cur !=&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; cur.item ==&lt;span&gt; item:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             cur =&lt;span&gt; cur.next
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（4）指定位置插入节点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1429856/201807/1429856-20180704152946812-362942212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; insert(self, pos, item):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;在指定位置添加节点&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; pos &amp;lt;=&lt;span&gt; 0:
            self.add(item)
        &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; pos &amp;gt; (self.length()-1&lt;span&gt;):
            self.append(item)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            cur &lt;/span&gt;= self.&lt;span&gt;__head&lt;/span&gt;&lt;span&gt;
            count &lt;/span&gt;=&lt;span&gt; 0
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 移动到指定位置的前一个位置&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; count &amp;lt;&lt;span&gt; pos:
                count &lt;/span&gt;+= 1&lt;span&gt;
                cur &lt;/span&gt;=&lt;span&gt; cur.next
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当循环退出后，cur指向pos位置&lt;/span&gt;
            node =&lt;span&gt; Node(item)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将node的next指向cur&lt;/span&gt;
            node.next =&lt;span&gt; cur
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将node的prev指向cur的prev&lt;/span&gt;
            node.prev =&lt;span&gt; cur.prev
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将cur的前一个节点的next指向node&lt;/span&gt;
            cur.prev.next =&lt;span&gt; node
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将cur的prev指向node&lt;/span&gt;
            cur.prev = node
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（5）删除元素：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1429856/201807/1429856-20180704153128886-531117259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; remove(self, item):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;&quot;删除节点&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        cur &lt;/span&gt;= self.&lt;span&gt;__head&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; cur !=&lt;span&gt; None:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; cur.elem ==&lt;span&gt; item:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先判断此节点是否是头结点&lt;/span&gt;
                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 头结点&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; cur == self.&lt;span&gt;__head&lt;/span&gt;&lt;span&gt;:
                    self.&lt;/span&gt;&lt;span&gt;__head&lt;/span&gt; =&lt;span&gt; cur.next
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; cur.next:
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断链表是否只有一个节点&lt;/span&gt;
                        cur.next.prev =&lt;span&gt; None
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                    cur.prev.next &lt;/span&gt;=&lt;span&gt; cur.next
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; cur.next:
                        cur.next.prev &lt;/span&gt;=&lt;span&gt; cur.prev
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                cur &lt;/span&gt;= cur.next
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（6）测试代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    dll &lt;/span&gt;=&lt;span&gt; DoubleLinkList()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(dll.is_empty())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; True&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(dll.length())    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;    
    dll.append(&lt;/span&gt;1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(dll.is_empty())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; False&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(dll.length())    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;    
    dll.append(&lt;/span&gt;2&lt;span&gt;)
    dll.add(&lt;/span&gt;8&lt;span&gt;)
    dll.append(&lt;/span&gt;3&lt;span&gt;)
    dll.append(&lt;/span&gt;4&lt;span&gt;)
    dll.append(&lt;/span&gt;5&lt;span&gt;)
    dll.append(&lt;/span&gt;6&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 8 1 2 3 4 5 6&lt;/span&gt;
&lt;span&gt;    
    dll.insert(&lt;/span&gt;-1, 9&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 9 8 1 2 3 4 5 6&lt;/span&gt;
    dll.insert(3, 100&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 9 8 1 100 2 3 4 5 6&lt;/span&gt;
    dll.insert(10, 200&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 9 8 1 100 2 3 4 5 6 200&lt;/span&gt;
    dll.remove(100&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 9 8 1 2 3 4 5 6 200&lt;/span&gt;
    dll.remove(9&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 8 1 2 3 4 5 6 200&lt;/span&gt;
    dll.remove(200&lt;span&gt;)
    dll.travel()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 8 1 2 3 4 5 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（7）运行结果（只需将以上代码组合在一起运行即可）：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1429856/201807/1429856-20180704153338353-1264441551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 07:36:00 +0000</pubDate>
<dc:creator>博观&amp;amp;约取</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/si-lei/p/9263544.html</dc:identifier>
</item>
<item>
<title>SQL Server FOR XML PATH 和 STUFF函数的用法 - 漠北的苍鹰</title>
<link>http://www.cnblogs.com/liuchenxing/p/9253897.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuchenxing/p/9253897.html</guid>
<description>&lt;p&gt;　　　&lt;span&gt;FOR XML PATH ，其实它就是将查询结果集以XML形式展现，将多行的结果，展示在同一行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　下面我们来写一个例子：&lt;/p&gt;
&lt;p&gt;　　　　　　　　假设我们有个工作流程表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73.5&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_244f1bc5-08ca-41ca-b9b4-0d6d7a393f38&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_244f1bc5-08ca-41ca-b9b4-0d6d7a393f38&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_244f1bc5-08ca-41ca-b9b4-0d6d7a393f38&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;142&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;
)

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;material-price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核通过&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;material-price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核驳回&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;material-price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;executing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;执行价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;material-price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;non-executing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;不执行价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;oa-meeting-apply&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核通过&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;oa-meeting-apply&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核驳回&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;oa-officialSeal-apply&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核通过&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;oa-officialSeal-apply&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核驳回&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;oa-officialSeal-apply&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returned&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;归还公章&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交审核&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;采购驳回&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核通过&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;order&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;采购下单&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;recommit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;重新提交审核&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;part-consignment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;部分收货&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consignment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;完成收货&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase-request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交审核&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase-request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;审核通过&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase-request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;申请驳回&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; (&lt;span&gt;[&lt;/span&gt;&lt;span&gt;WorkflowSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionSchema&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;[&lt;/span&gt;&lt;span&gt;ActionName&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purchase-request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;recommit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;重新提交审核&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;数据表和数据&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704135700877-1134112833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　一、简单介绍&lt;/p&gt;
&lt;p&gt;　　　　　　接下来，我们用这个方法查询这个表的数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　  select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; xml path&lt;br/&gt;　　　　　　它可以将查询结果转换为一段XML格式的代码
&lt;/pre&gt;
　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704140013506-314257825.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　--&lt;/span&gt;&lt;span&gt;for xml path 后面可以写东西，for xml path(Schema)，这样写的话，可以将节点&amp;lt;row&amp;gt;变成&amp;lt;Schema&amp;gt;&lt;/span&gt;
　　  &lt;span&gt;select&lt;/span&gt; WorkflowSchema &lt;span&gt;as&lt;/span&gt; WS,ActionSchema &lt;span&gt;as&lt;/span&gt; SC,ActionName &lt;span&gt;as&lt;/span&gt; AN &lt;span&gt;from&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; xml path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Schema&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;
       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704142646177-1493714112.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　  --&lt;/span&gt;&lt;span&gt;我们还可以单独输出某一个字段的值&lt;/span&gt;
　　  &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[ &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;ActionName&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;FOR&lt;/span&gt; XML PATH(&lt;span&gt;''&lt;/span&gt;)
&lt;/pre&gt;
　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704142738744-1907838459.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;　　　　二、实际应用　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　  --&lt;/span&gt;&lt;span&gt;我们看看一个操作对应的而多格流程&lt;/span&gt;&lt;span&gt;
　　  --&lt;/span&gt;&lt;span&gt;一共是两层，里面一层查出单独的ActionName，拼成一行，然后使用where条件连接外层&lt;/span&gt;
　　  &lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; WorkflowSchema,
　　    (&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; ActionName&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; 
  　　　　&lt;span&gt;WHERE&lt;/span&gt; WorkflowSchema&lt;span&gt;=&lt;/span&gt;&lt;span&gt;A.WorkflowSchema    &lt;strong&gt;&lt;span&gt;--必须加的条件&lt;/span&gt;&lt;/strong&gt;
  　　　　&lt;/span&gt;&lt;span&gt;FOR&lt;/span&gt; XML PATH(&lt;span&gt;''&lt;/span&gt;)) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; ActionList
　　  &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; A 
　　  &lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; WorkflowSchema&lt;br/&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704150656900-985426598.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　  &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;where 连接条件必须要，如果去掉，就会查出所有的ActionName，如同上面示例一样&lt;br/&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704150705925-1950250602.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　  --&lt;/span&gt;&lt;span&gt;现在我们优化一下格式，会发现最后多了一个‘,’符号，用LEFT函数去掉他，继续在外面接一层查询&lt;/span&gt;
　　  &lt;span&gt;select&lt;/span&gt; B.WorkflowSchema,&lt;br/&gt;&lt;span&gt;　　　　　　　 LEFT&lt;/span&gt;(B.ActionList,&lt;span&gt;LEN&lt;/span&gt;(B.ActionList)&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; ActionList &lt;br/&gt;&lt;span&gt;　　　　　　　　　　 from&lt;/span&gt;&lt;span&gt; (
　　     　　　　　　　　　　&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; WorkflowSchema,
　　　　　　　　　　　　　　　　　　　(&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; ActionName&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; 
  　　　　　　　　　　　　　　　　    &lt;span&gt;WHERE&lt;/span&gt; WorkflowSchema&lt;span&gt;=&lt;/span&gt;&lt;span&gt;A.WorkflowSchema 
  　　　　　　　　　　　　　　　　　　 &lt;/span&gt;&lt;span&gt;FOR&lt;/span&gt; XML PATH(&lt;span&gt;''&lt;/span&gt;)) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; ActionList
　　　　  　　　　　　　　　　&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; A 
　　　　&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; WorkflowSchema) &lt;span&gt;as&lt;/span&gt; B
&lt;/pre&gt;
　　　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704151032284-956646288.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt; 　　&lt;span&gt;接下来，我们再讲一个其他的函数，实现同样的效果，STUFF函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　sql stuff函数用于删除指定长度的字符，并可以在制定的起点处插入另一组字符。sql stuff函数中如果开始位置或长度值是负数，或者如果开始位置大于第一个字符串的长度，将返回空字符串。如果要删除的长度大于第一个字符串的长度，将删除到第一个字符串中的第一个字符。&lt;/p&gt;
&lt;p&gt;　　　　一、作用&lt;/p&gt;
&lt;p&gt;　　　　　　删除指定长度的字符，并在指定的起点处插入另一组字符。&lt;/p&gt;
&lt;p&gt;　　　　二、语法&lt;/p&gt;
&lt;p&gt;　　　　　　STUFF ( character_expression , start , length ,character_expression )&lt;/p&gt;
&lt;p&gt;　　　　　　　　参数&lt;/p&gt;
&lt;p&gt;　　　　　　　　character_expression　　一个字符数据表达式。character_expression 可以是常量、变量，也可以是字符列或二进制数据列。&lt;/p&gt;
&lt;p&gt;　　　　　　　　start　　　一个整数值，指定删除和插入的开始位置。如果 start 或 length 为负，则返回空字符串。如果 start 比第一个 character_expression 长，则返回空字符串。start 可以是 bigint 类型。&lt;/p&gt;
&lt;p&gt;　　　　　　　　length　　一个整数，指定要删除的字符数。如果 length 比第一个 character_expression 长，则最多删除到最后一个 character_expression 中的最后一个字符。length 可以是 bigint 类型。&lt;/p&gt;
&lt;p&gt;　　　　　　　　返回类型　　&lt;/p&gt;
&lt;p&gt;　　　　　　　　如果 character_expression 是受支持的字符数据类型，则返回字符数据。如果 character_expression 是一个受支持的 binary 数据类型，则返回二进制数据。&lt;/p&gt;
&lt;p&gt;　　　　三、备注&lt;/p&gt;
&lt;p&gt;　　　　　　1、如果开始位置或长度值是负数，或者如果开始位置大于第一个字符串的长度，将返回空字符串。如果要删除的长度大于第一个字符串的长度，将删除到第一个字符串中的第一个字符。&lt;/p&gt;
&lt;p&gt;　　　　　　2、如果结果值大于返回类型支持的最大值，则产生错误。&lt;/p&gt;
&lt;p&gt;　　　　四、sql stuff函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　 --&lt;/span&gt;&lt;span&gt;实例一&lt;/span&gt;
　　   &lt;span&gt;select&lt;/span&gt; &lt;span&gt;STUFF&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;结果为'1234abcdefg'&lt;/span&gt;
　　   &lt;span&gt;select&lt;/span&gt; &lt;span&gt;STUFF&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;结果为'1234bcdefg'&lt;/span&gt;
　　   &lt;span&gt;select&lt;/span&gt; &lt;span&gt;STUFF&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;结果为'a1234cdefg'&lt;/span&gt;
　　   &lt;span&gt;select&lt;/span&gt; &lt;span&gt;STUFF&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;结果为'a1234defg'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　--&lt;/span&gt;&lt;span&gt;实例二、SQL 将列转成字符串并用逗号分隔&lt;/span&gt;&lt;span&gt;
　　　　--&lt;/span&gt;&lt;span&gt;同样的，我们也用到了for xml path这个方法&lt;/span&gt;
　　　　&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;STUFF&lt;/span&gt;((&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; ActionName &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;FOR&lt;/span&gt; XML PATH(&lt;span&gt;''&lt;/span&gt;)),&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; WA
&lt;/pre&gt;
　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704152431899-1454854839.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　--&lt;/span&gt;&lt;span&gt;实例三、最后我们实现，上面for xml path的功能&lt;/span&gt;&lt;span&gt;
　　　　--&lt;/span&gt;&lt;span&gt;先查出两个字段，然后对ActionName这个字段进行转化，where条件记得加上，不加就会显示出所有的ActionName&lt;/span&gt;
　　　　&lt;span&gt;select&lt;/span&gt;&lt;span&gt; WorkflowSchema,
       　　　　ActionName&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;(&lt;span&gt;STUFF&lt;/span&gt;((&lt;span&gt;select&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; ActionName 
                          　　　　&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; a 
                          　　　　&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; a.WorkflowSchema&lt;span&gt;=&lt;/span&gt;b.WorkflowSchema &lt;span&gt;for&lt;/span&gt; xml path(&lt;span&gt;''&lt;/span&gt;)),&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;))    &lt;strong&gt;&lt;span&gt;--where条件必须加上 &lt;/span&gt;&lt;/strong&gt;
　　　　&lt;span&gt;from&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Workflow_Action&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; b &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; WorkflowSchema
&lt;/pre&gt;
　　　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1056716/201807/1056716-20180704152957187-1074975736.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;　　　　对比以上两种做法，可以自行比较哪种方式更加简便。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 07:34:00 +0000</pubDate>
<dc:creator>漠北的苍鹰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuchenxing/p/9253897.html</dc:identifier>
</item>
<item>
<title>JavaCV 学习(二)：使用 JavaCV + FFmpeg 制作拉流播放器 - 灰色飘零</title>
<link>http://www.cnblogs.com/renhui/p/9259448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renhui/p/9259448.html</guid>
<description>&lt;p&gt;　　在 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/renhui/p/7452572.html&quot;&gt;Android 音视频开发学习思路&lt;/a&gt; 中，我们不断的学习和了解音视频相关的知识，随着知识点不断的学习，我们现在应该做的事情，就是将知识点不断的串联起来。这样才能得到更深层次的领悟。通过整理 &lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/renhui/p/7456956.html&quot;&gt;Android 音视频开发(一) : 通过三种方式绘制图片&lt;/a&gt; 我们知道可以使用ImageView和SurfaceView甚至是View来展示图片，通过整理 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/renhui/p/7463287.html&quot;&gt;Android 音视频开发(三)：使用 AudioTrack 播放PCM&lt;/a&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/renhui/p/7463287.html&quot;&gt;音频&lt;/a&gt; 我们知道如何播放音频原始数据了。那么可不可以定义为，我们找到了如何播放音视频的最基本的方式呢？答，当然是的！在 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/renhui/p/7327614.html&quot;&gt;JavaCV 学习(一)：JavaCV 初体验&lt;/a&gt; 里，我们接触了一次JavaCV，发现里面提供的API相当丰富，尤其是图形图像处理方面，那么下面我们就基于JavaCV加上它提供的ffmpegAPi工具，来完成一个基本的拉流播放器的制作，鉴于起名很难，我们先把名字起好：NBPlayer。&lt;/p&gt;

&lt;p&gt;我们要做的是一个简单的拉流播放器，需要具备以下功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将直播流拉取到设备上并展现出来；&lt;/li&gt;
&lt;li&gt;保证播放当前直播流的音视频是同步的；&lt;/li&gt;
&lt;li&gt;播放视频时可以切换全屏幕与非全屏；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在定义播放器的生命周期们需要做到以下两步：1. 先定义一下播放器的事件   2. 定义播放器展示的控件&lt;/p&gt;
&lt;h3&gt;1. 定义播放器事件&lt;/h3&gt;
&lt;p&gt;因为我们要做的就是一个播放器，所以就需要定义出来相应的播放器的事件，最基本的播放器的操作就是：播放、暂停、停止。示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 播放器抽象类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Player {

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; play = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; play() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.play = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; pause() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.play = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stop() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.play = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 定义播放器展示的控件 - SurfaceView&lt;/h3&gt;
&lt;p&gt;为什么定义完播放器的操作事件之后，就去定义播放器展示的控件呢？&lt;/p&gt;
&lt;p&gt;答：主要是因为我们做的播放器在展示控件方面的思路上和Android原生的MediaPlayer及Ijkplayer是一样的，都是监听Surface的状态来控制播放器什么时候创建，什么时候暂停，什么时候停止并release。&lt;/p&gt;
&lt;p&gt;这里我们使用的控件是SurfaceView，创建一个VideoSurfaceView继承SurfaceView，并实现SurfaceHolder.Callback接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; surfaceCreated(SurfaceHolder holder) {
    initLayout(mPlayer.getWidth(), mPlayer.getHeight());
    play();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (onPreparedListener != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) onPreparedListener.onPrepared();
}

@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; surfaceChanged(SurfaceHolder holder, &lt;span&gt;int&lt;/span&gt; format, &lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; height) {
    Log.v(TAG, &lt;/span&gt;&quot;surfaceChanged...&quot;&lt;span&gt;);
}

@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; surfaceDestroyed(SurfaceHolder holder) {
    mPlayer.pause();
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; releasePlayer() {
    mPlayer.stop();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码可以看到我们把基本的播放器的生命周期的控制部分完成了，后续的工作就是完成基本的音视频数据的获取和播放了。&lt;/p&gt;

&lt;p&gt;我们使用的是 JavaCV + FFmpeg的API，关于JavaCV的基本的介绍在上一篇文章 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/renhui/p/7327614.html&quot;&gt;JavaCV 学习(一)：JavaCV 初体验&lt;/a&gt; 里面已经做了，下面一边介绍使用到的核心类一边说明音视频播放的流程：&lt;/p&gt;
&lt;h3&gt;1. FFmpegFrameGrabber&lt;/h3&gt;
&lt;p&gt;所在package包为：org.bytedeco.javacv，完整类名为：org.bytedeco.javacv.FFmpegFrameGrabber&lt;/p&gt;
&lt;p&gt;FFmpegFrameGrabber可以理解为解码器，也可以理解为帧收集器，主要作用就是将视频流以帧的形式拉去到手机设备上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mFrameGrabber = FFmpegFrameGrabber.createDefault(path);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码就是创建FFmpegFrameGrabber的方式，path就是要拉取流的地址。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mFrameGrabber.setPixelFormat(AV_PIX_FMT_RGBA);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置帧收集时的像素格式，这块设置AV_PIX_FMT_RGBA的原因主要是，我们展示画面的时候是转换为Bitmap格式的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mFrameGrabber.setOption(&quot;fflags&quot;, &quot;nobuffer&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码表示我们可以像ijkplayer一样，设置一些参数，这些参数格式我们可以参考ijkplayer也可以去ffmpeg命令行的一些设置参数文档里面去查找，这里就不多赘述了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mFrameGrabber.start();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码就是让帧收集器启动，这样就开始拉流了。&lt;/p&gt;
&lt;h3&gt;2. Frame&lt;/h3&gt;
&lt;p&gt;所在package包为：org.bytedeco.javacv，完整类名为：org.bytedeco.javacv.Frame&lt;/p&gt;
&lt;p&gt;Frame 是一个用于管理音频和视频帧数据的类。 在CanvasFrame、FrameGrabber、FrameRecorder及他们的子类里面都有用到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Frame grabframe = mFrameGrabber.grab(); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码表示从帧收集器里面抓去最新的帧：&lt;/p&gt;
&lt;p&gt;播放音频：grabframe.samples里面获取到的就是原始的pcm音频数据，交给AudioTrack处理就ok了。&lt;/p&gt;
&lt;p&gt;播放视频：首先需要将Frame图像转换为Bitmap，AndroidFrameConverter.convert(frame)就可以转换，但是在这之前需要使用OpenCVFrameConverter.ToIplImage将抓出来的Frame转换一下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
Canvas canvas =&lt;span&gt; mHolder.lockCanvas();&lt;/span&gt;&lt;span&gt;
canvas.drawBitmap(bmp, &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; Rect(0, 0, canvas.getWidth(), frame.imageHeight * canvas.getWidth() / frame.imageWidth), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
mHolder.unlockCanvasAndPost(canvas);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码表示将获取到的位图绘制到SurfaceHolder里面去，这里建议启动线程去绘制，这样效率会高很多。And 别问为啥子能在线程里面绘制画面，自己学习SurfaceView去。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1. 针对此播放器实现的功能的说明：&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;只实现了拉取直播RTMP流并播放的功能，只能播放不带B帧的直播流，因为B帧解析出来全是带方向的箭头（双向预测帧），所以这个播放器也就顺势起名叫做NBPlayer。&lt;/li&gt;
&lt;li&gt;有关&lt;span&gt;&lt;span&gt;于I帧、B帧、P帧这方面的内容的可以参考本人之前写的 &lt;/span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/renhui/p/6405999.html&quot;&gt;&lt;span&gt;视频直播技术——帧概念&lt;/span&gt;&lt;/a&gt; 了解一下，当然也可以自行百度，有很多大神的文章。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;2. 针对此播放器的Demo示例：&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;3. 针对此播放器实现时本人的一些感悟：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;做技术嘛，感觉更多的是对一些知识的理解和整合，其实能做出来这个播放器，成就感也是不小的。&lt;/li&gt;
&lt;li&gt;如果没有之前的一些知识储备和技术铺垫，也是没办法实现的，做出来了，对音视频的一些理解，也变得更加清晰了。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;4. 针对此播放器的一些功能拓展的想法：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;展示的内容为RGB的，如果需要是可以转换为YUV格式的，这个在实际项目中可能会使用到。&lt;/li&gt;
&lt;li&gt;我们能拿到直播的画面和声音数据，当然可以实时的保存这些数据了，这也就为录制成文件做好了铺垫了。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 04 Jul 2018 07:32:00 +0000</pubDate>
<dc:creator>灰色飘零</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renhui/p/9259448.html</dc:identifier>
</item>
<item>
<title>scala知识体系04_泛型 - molyeo</title>
<link>http://www.cnblogs.com/molyeo/p/9263479.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/molyeo/p/9263479.html</guid>
<description>&lt;p&gt;本文主要讲解泛型、类型边界、协变、逆变的基础概念和应用。&lt;/p&gt;
&lt;h2 id=&quot;泛型定义和调用&quot;&gt;泛型定义和调用&lt;/h2&gt;
&lt;p&gt;泛型是值定义以类型为参数的类，在&lt;code&gt;scala&lt;/code&gt;源码中对泛型的使用相当广泛。&lt;br/&gt;一般使用字母&lt;code&gt;A&lt;/code&gt;作为类型参数标识符，并放在方括号&lt;code&gt;[]&lt;/code&gt;中。如果有多个类型参数，则可以依次用A,B,C等参数名称，如&lt;code&gt;scala.collection.immutable&lt;/code&gt;包中特征&lt;code&gt;Map&lt;/code&gt;中定义如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;trait Map[A, +B] extends Iterable[(A, B)]
                    with scala.collection.Map[A, B]
                    with MapLike[A, B, Map[A, B]] { self =&amp;gt;

  override def empty: Map[A, B] = Map.empty

  override def toMap[T, U](implicit ev: (A, B) &amp;lt;:&amp;lt; (T, U)): immutable.Map[T, U] =
    self.asInstanceOf[immutable.Map[T, U]]

  override def seq: Map[A, B] = this

  def withDefault[B1 &amp;gt;: B](d: A =&amp;gt; B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, d)


  def withDefaultValue[B1 &amp;gt;: B](d: B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, x =&amp;gt; d)


  override def updated [B1 &amp;gt;: B](key: A, value: B1): Map[A, B1]
  def + [B1 &amp;gt;: B](kv: (A, B1)): Map[A, B1]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下我们自定义泛型类MyStack:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  class MyStack[A] {
    private var elements: List[A] = Nil
    def push(x: A) { elements = x :: elements }
    def peek: A = elements.head
    def pop(): A = {
      val currentTop = peek
      elements = elements.tail
      currentTop
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;MyStack&lt;/code&gt;类的实现将任何类型A作为参数。这意味着&lt;br/&gt;底层列表&lt;code&gt;var elements: List[A] = Nil&lt;/code&gt;只能存储类型的元素A。&lt;br/&gt;该程序方法&lt;code&gt;push&lt;/code&gt;只接受类型的对象A。&lt;br/&gt;泛型类的调用和一般类的调用一致，只不过使用前先指定具体的数据类型即可，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;object GenericClassDemo {

  class MyStack[A] {
    private var elements: List[A] = Nil

    def push(x: A) {
      elements = x :: elements
    }

    def peek: A = elements.head

    def pop(): A = {
      val currentTop = peek
      elements = elements.tail
      currentTop
    }

    def length(): Int = {
      elements.size
    }
  }

  abstract class Fruit {
    def name:String
  }

  case class Apple(name: String) extends Fruit

  case class Banana(name: String) extends Fruit

  def main(args: Array[String]) {
    val stack = new MyStack[Fruit]
    val apple = new Apple(&quot;Gala&quot;)
    val banana = new Banana(&quot;Cactus&quot;)
    stack.push(apple)
    stack.push(banana)
    println(stack.length)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们向类型参数为&lt;code&gt;Fruit&lt;/code&gt;实例&lt;code&gt;stack&lt;/code&gt;,并&lt;code&gt;push&lt;/code&gt;一个&lt;code&gt;apple&lt;/code&gt;和&lt;code&gt;banana&lt;/code&gt;,最后打印了堆栈的长度。&lt;br/&gt;可以看到由于&lt;code&gt;apple&lt;/code&gt;和&lt;code&gt;banana&lt;/code&gt;均是&lt;code&gt;Fruit&lt;/code&gt;的子类型，能&lt;code&gt;push&lt;/code&gt;到&lt;code&gt;stack&lt;/code&gt;中，但如果&lt;code&gt;push&lt;/code&gt;其他类型的实例肯定会编译不通过。此外，为控制泛型类型的子类型的行为，&lt;code&gt;scala&lt;/code&gt;采用了类型参数变型机制，主要包括协变、逆变和非变。&lt;/p&gt;
&lt;h2 id=&quot;参数类型的边界&quot;&gt;参数类型的边界&lt;/h2&gt;
&lt;p&gt;scala中，类型参数和抽象类型受到类型绑定的约束，类型边界约束了类型变量的具体值。&lt;br/&gt;讨论变型前，先看看类型的上界和下界的定义。&lt;br/&gt;&lt;strong&gt;上界&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;B &amp;lt;: A&lt;/code&gt; 声明类型变量B是类型A的子类型。&lt;br/&gt;&lt;strong&gt;下界&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;B &amp;gt;: A&lt;/code&gt; 声明参数类型或者抽象类型B是类型A的超类型。大多数场合下，A是类的类型参数，B是函数的类型参数。&lt;/p&gt;
&lt;h2 id=&quot;协变&quot;&gt;协变&lt;/h2&gt;
&lt;p&gt;通过注释&lt;code&gt;+A&lt;/code&gt;可以使泛型类的参数A变为协变类型。&lt;br/&gt;如果类F的类型参数是协变类型，对于两种类型A和B,如果B是A的子类型(B&amp;lt;:A),则F[B]也是F[A]的子类型(F[B]&amp;lt;:F[A])。&lt;br/&gt;如scala源码中scala.collection.immutable.List类的类型参数是协变类型， 定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sealed abstract class List[+A] extends AbstractSeq[A]
                                  with LinearSeq[A]
                                  with Product
                                  with GenericTraversableTemplate[A, List]
                                  with LinearSeqOptimized[A, List[A]]
                                  with Serializable {
  def tail: List[A]

  override def drop(n: Int): List[A] = {
    var these = this
    var count = n
    while (!these.isEmpty &amp;amp;&amp;amp; count &amp;gt; 0) {
      these = these.tail
      count -= 1
    }
    these
  }
    // something else
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在如下的代码示例中，&lt;code&gt;printFruitName&lt;/code&gt;方法输入参数为&lt;code&gt;List[Fruit]&lt;/code&gt;，由于&lt;code&gt;List&lt;/code&gt;是协变的，因而输入&lt;code&gt;List[Fruit]&lt;/code&gt;的子类型&lt;code&gt;List[Apple]&lt;/code&gt;和&lt;code&gt;List[Banana]&lt;/code&gt;也是允许的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;object CovarianceDemo {

  abstract class Fruit {
    def name:String
  }

  case class Apple(name: String) extends Fruit

  case class Banana(name: String) extends Fruit

  def printFruitName(fruits: List[Fruit]): Unit = {

    fruits.foreach(fruit =&amp;gt; println(fruit.name))
  }

  def main(args: Array[String]) {
    val apples: List[Apple] = List(new Apple(&quot;Gala Apple&quot;), new Apple(&quot;Flowercow Apple&quot;))
    val bananas: List[Banana] = List(new Banana(&quot;Banana A&quot;), new Banana(&quot;Banana B&quot;))
    printFruitName(apples)
    printFruitName(bananas)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Gala Apple
Flowercow Apple
Banana A
Banana B&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;逆变&quot;&gt;逆变&lt;/h2&gt;
&lt;p&gt;通过注释&lt;code&gt;-A&lt;/code&gt;可以使泛型类的参数A变为逆变类型。&lt;br/&gt;如果类F的类型参数是逆变类型，对于两种类型A和B,如果B是A的子类型(&lt;code&gt;B&amp;lt;:A&lt;/code&gt;),则&lt;code&gt;F[A]&lt;/code&gt;是&lt;code&gt;F[B]&lt;/code&gt;的子类型(&lt;code&gt;F[A]&amp;lt;:F[B]&lt;/code&gt;)。&lt;br/&gt;如下的代码示例中，看我们定义&lt;code&gt;Printer&lt;/code&gt;类，其参数为逆变类型，由于&lt;code&gt;Apple&lt;/code&gt;是&lt;code&gt;Fruit&lt;/code&gt;的子类型，我们可以知道&lt;code&gt;Printer[Fruit]&lt;/code&gt;是&lt;code&gt;Printer[Apple]&lt;/code&gt;的子类型，这可以从函数&lt;code&gt;printFruitName&lt;/code&gt;得到印证。我们要求的输入参数是&lt;code&gt;Printer[Apple]&lt;/code&gt;类型，而实际输入&lt;code&gt;Printer[Fruit]&lt;/code&gt;和&lt;code&gt;Printer[Apple]&lt;/code&gt;都能正常输出结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;object ContravarianceDemo {

  abstract class Fruit {
    def name: String
  }

  case class Apple(name: String) extends Fruit

  case class Banana(name: String) extends Fruit

  abstract class Printer[-A] {
    def print(a: A): Unit
  }

  class FruitPrinter extends Printer[Fruit] {
    override def print(fruit: Fruit): Unit = {
      println(s&quot;fruit name is ${fruit.name}&quot;)
    }
  }

  class ApplePrinter extends Printer[Apple] {
    override def print(apple: Apple): Unit = {
      println(s&quot;apple name is ${apple.name}&quot;)
    }
  }

  def main(args: Array[String]) {
    val apple: Apple = new Apple(&quot;Gala Apple&quot;)
    val fruitPrinter: Printer[Fruit] = new FruitPrinter
    val applePrinter: Printer[Apple] = new ApplePrinter
    def printFruitName(printer: Printer[Apple]): Unit = {
      printer.print(apple)
    }
    printFruitName(fruitPrinter)
    printFruitName(applePrinter)
  }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fruit name is Gala Apple
apple name is Gala Apple&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;非变&quot;&gt;非变&lt;/h2&gt;
&lt;p&gt;默认情况下，出于安全考虑，泛型类的参数类型是非变的，即不是协变的，也不是逆变的。&lt;br/&gt;这种情况在scala源码中应用比较广泛，比如Array类，不再赘述。&lt;/p&gt;
&lt;p&gt;本文参考内容如下：&lt;br/&gt;&lt;a href=&quot;https://docs.scala-lang.org/&quot; class=&quot;uri&quot;&gt;https://docs.scala-lang.org/&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.scala-lang.org/api/current/&quot; class=&quot;uri&quot;&gt;https://www.scala-lang.org/api/current/&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://twitter.github.io/scala_school/zh_cn/index.html&quot; class=&quot;uri&quot;&gt;http://twitter.github.io/scala_school/zh_cn/index.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://twitter.github.io/effectivescala/index-cn.html&quot; class=&quot;uri&quot;&gt;http://twitter.github.io/effectivescala/index-cn.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 07:27:00 +0000</pubDate>
<dc:creator>molyeo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/molyeo/p/9263479.html</dc:identifier>
</item>
<item>
<title>【源码】进入ASP.NET MVC流程的大门 - UrlRoutingModule - 悠扬的牧笛</title>
<link>http://www.cnblogs.com/xhb-bky-blog/p/9235086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhb-bky-blog/p/9235086.html</guid>
<description>&lt;h3&gt;UrlRoutingModule的功能&lt;/h3&gt;
&lt;p&gt;在ASP.NET MVC的请求过程中，&lt;code&gt;UrlRoutingModule&lt;/code&gt;的作用是拦截当前的请求URL，通过URL来解析出&lt;code&gt;RouteData&lt;/code&gt;，为后续的一系列流程提供所需的数据，比如&lt;code&gt;Controller&lt;/code&gt;、&lt;code&gt;Action&lt;/code&gt;等等。其实，&lt;code&gt;UrlRoutingModule&lt;/code&gt;和我们自定义的&lt;code&gt;HttpModule&lt;/code&gt;都是实现了&lt;code&gt;IHttpModule&lt;/code&gt;接口的两个核心方法，&lt;code&gt;Init&lt;/code&gt;方法和&lt;code&gt;Dispose&lt;/code&gt;方法。下面是MVC中实现&lt;code&gt;UrlRoutingModule&lt;/code&gt;代码。首先，在初始化的方法中检查该Module是否被加入到了当前请求的请求管道，然后注册了管道事件中的&lt;code&gt;PostResolveRequestCache&lt;/code&gt;事件。其实最理想的注册事件应该是&lt;code&gt;MapRequestHandler&lt;/code&gt;事件，但是为了考虑到兼容性(IIS 6 和 IIS 7 ISAPI模式下不可用)，微软选择了紧邻&lt;code&gt;MapRequestHandler&lt;/code&gt;事件之前的&lt;code&gt;PostResolveRequestCache&lt;/code&gt;事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Init(HttpApplication application)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查 UrlRoutingModule 是否已经被加入到请求管道中&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (application.Context.Items[_contextKey] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已经添加到请求管道则直接返回&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     application.Context.Items[_contextKey] =&lt;span&gt; _contextKey;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 理想情况下， 我们应该注册 MapRequestHandler 事件。但是，MapRequestHandler事件在
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; II6 或 IIS7 ISAPI 模式下是不可用的，所以我们注册在 MapRequestHandler 之前执行的事件，
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该事件适用于所有的IIS版本。&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     application.PostResolveRequestCache +=&lt;span&gt; OnApplicationPostResolveRequestCache;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在注册事件中，将&lt;code&gt;HttpApplication&lt;/code&gt;的请求上下文&lt;code&gt;HttpContext&lt;/code&gt;做了一个封装，因为&lt;code&gt;HttpContext&lt;/code&gt;是没有基类的，也不是Virtual的，所以没办法做单元测试，也就是不可Mock的，所以针对&lt;code&gt;HttpContext&lt;/code&gt;做了一个封装。&lt;code&gt;HttpContextBase&lt;/code&gt;是&lt;code&gt;HttpContextWrapper&lt;/code&gt;的基类，真正封装&lt;code&gt;HttpContext&lt;/code&gt;的就是&lt;code&gt;HttpContextWrapper&lt;/code&gt;，所以三者之间的关系就是这样的。完成封装以后开始执行&lt;code&gt;PostResolveRequestCache&lt;/code&gt;方法，并将封装好的请求上下文作为参数传入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnApplicationPostResolveRequestCache(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;HttpContextWrapper继承自HttpContextBase，用于替换HttpContext以实现可测试的接口&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     HttpApplication app =&lt;span&gt; (HttpApplication)sender;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     HttpContextBase context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpContextWrapper(app.Context);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    PostResolveRequestCache(context);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入&lt;code&gt;PostResolveRequestCache&lt;/code&gt;事件后，&lt;code&gt;UrlRoutingModule&lt;/code&gt;开始真正的工作，该方法是处理URL的核心方法。根据当前请求的上下文，去匹配路由表是否存在与之匹配的URL，如果匹配则从路由信息中获取&lt;code&gt;RouteData&lt;/code&gt;，以及&lt;code&gt;IRouteHandler&lt;/code&gt;。拿到&lt;code&gt;IRouteHandler&lt;/code&gt;后，要进行一些列的判断，比如要判断是否是&lt;code&gt;StopRoutingHandler&lt;/code&gt;，在Global.asax文件中有一段&lt;code&gt;RouteConfig.RegisterRoutes(RouteTable.Routes);&lt;/code&gt;代码，在这个&lt;code&gt;RegisterRoutes&lt;/code&gt;方法中有一句&lt;code&gt;routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);&lt;/code&gt;表示需要过滤掉的路由，而这个&lt;code&gt;IgnoreRoute&lt;/code&gt;路由的Handler就是&lt;code&gt;StopRoutingHandler&lt;/code&gt;，所以在这里做了判断，Handler是&lt;code&gt;StopRoutingHandler&lt;/code&gt;则不往下执行，直接return，不再处理这条请求，如果是则路由模块会停止继续处理请求，如果不是则继续处理，并根据&lt;code&gt;RequestContext&lt;/code&gt;来获取&lt;code&gt;IHttpHandler&lt;/code&gt;，拿到&lt;code&gt;IHttpHandler&lt;/code&gt;后还要继续验证是不是&lt;code&gt;UrlAuthFailureHandler&lt;/code&gt;，&lt;code&gt;UrlAuthFailureHandler&lt;/code&gt;也实现了&lt;code&gt;IHttpHandler&lt;/code&gt;，当当前请求无权限时，用于返回401错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PostResolveRequestCache(HttpContextBase context)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匹配传入的URL，检查路由表中是否存在与之匹配的URL&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     RouteData routeData =&lt;span&gt; RouteCollection.GetRouteData(context);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有找到匹配的路由信息，直接返回&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (routeData == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果找到的匹配的路由，则从路由信息的RouteHandler中获取IHttpHandler&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     IRouteHandler routeHandler =&lt;span&gt; routeData.RouteHandler;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (routeHandler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(String.Format(CultureInfo.CurrentCulture, SR.GetString(SR.UrlRoutingModule_NoRouteHandler)));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果该IRouteHandler是StopRoutingHandler，路由模块会停止继续处理该请求
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; routes and to let the fallback handler handle the request.&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (routeHandler &lt;span&gt;is&lt;/span&gt;&lt;span&gt; StopRoutingHandler)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     RequestContext requestContext = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext(context, routeData);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将路由信息添加到请求上下文&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     context.Request.RequestContext =&lt;span&gt; requestContext;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     IHttpHandler httpHandler =&lt;span&gt; routeHandler.GetHttpHandler(requestContext);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (httpHandler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(String.Format(CultureInfo.CurrentUICulture, SR.GetString(SR.UrlRoutingModule_NoHttpHandler), routeHandler.GetType()));
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果该IHttpHandler是认证失败的IHttpHandler，返回401权限不足错误&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (httpHandler &lt;span&gt;is&lt;/span&gt;&lt;span&gt; UrlAuthFailureHandler)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (FormsAuthenticationModule.FormsAuthRequired)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             UrlAuthorizationModule.ReportUrlAuthorizationFailure(HttpContext.Current, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpException(&lt;span&gt;401&lt;/span&gt;&lt;span&gt;, SR.GetString(SR.Assess_Denied_Description3));
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Remap IIS7 to our handler&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    context.RemapHandler(httpHandler);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果请求认证失败，返回401错误，并且调用&lt;code&gt;CompleteRequest&lt;/code&gt;方法，显式地完成当前请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReportUrlAuthorizationFailure(HttpContext context, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; webEventSource) 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拒绝访问&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     context.Response.StatusCode = &lt;span&gt;401&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    WriteErrorMessage(context);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (context.User != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; context.User.Identity.IsAuthenticated) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里AuditUrlAuthorizationFailure指示在Web请求过程中URL授权失败的事件代码&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        WebBaseEvent.RaiseSystemEvent(webEventSource, WebEventCodes.AuditUrlAuthorizationFailure);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    context.ApplicationInstance.CompleteRequest();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法&lt;code&gt;GetRouteData&lt;/code&gt;的作用是根据当前请求的上下文来获取路由数据，在匹配&lt;code&gt;RouteCollection&lt;/code&gt;集合之前，会检查当前的请求是否是静态文件，如果请求的是存在于服务器上的静态文件则直接返回，否则继续处理当前请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RouteData GetRouteData(HttpContextBase httpContext) 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (httpContext == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpContext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (httpContext.Request == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(SR.GetString(SR.RouteTable_ContextMissingRequest), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpContext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Optimize performance when the route collection is empty.当路由集合是空的的时候优化性能.  The main improvement is that we avoid taking
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a read lock when the collection is empty.主要的改进是当集合为空的时候避免添加只读锁。  Without this check, the UrlRoutingModule causes a 25%-50%
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有这个检查的话，UrlRoutingModule 性能会因为锁的缘故而下降25%-50%
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; regression in HelloWorld RPS due to lock contention.  The UrlRoutingModule is now in the root web.config,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; UrlRoutingModule目前被配置在根目录的web.config
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; so we need to ensure the module is performant, especially when you are not using routing.
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以我们应该确认下这个module是否是高效的，尤其是当没有使用路由的时候。
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This check does introduce a slight bug, in that if a writer clears the collection as part of a write
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; transaction, a reader may see the collection when it's empty, which the read lock is supposed to prevent.
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; We will investigate a better fix in Dev10 Beta2.  The Beta1 bug is Dev10 652986.&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; isRouteToExistingFile = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里只检查一次&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; doneRouteCheck = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;RouteExistingFiles) 
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         isRouteToExistingFile =&lt;span&gt; IsRouteToExistingFile(httpContext);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         doneRouteCheck = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isRouteToExistingFile) 
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If we're not routing existing files and the file exists, we stop processing routes
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果文件存在，但是路由并没有匹配上，则停止继续处理当前请求。&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Go through all the configured routes and find the first one that returns a match
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有已配置的路由并且返回第一个与之匹配的&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;using&lt;/span&gt;&lt;span&gt; (GetReadLock())
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;foreach&lt;/span&gt; (RouteBase route &lt;span&gt;in&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             RouteData routeData =&lt;span&gt; route.GetRouteData(httpContext);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routeData != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If we're not routing existing files on this route and the file exists, we also stop processing routes&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;route.RouteExistingFiles)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;doneRouteCheck)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                         isRouteToExistingFile =&lt;span&gt; IsRouteToExistingFile(httpContext);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                         doneRouteCheck = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isRouteToExistingFile)
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; routeData;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面这段代码就是获取相对路径来检测文件夹和文件是否存在，存在返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果当前请求的是一个存在的文件，则返回true&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsRouteToExistingFile(HttpContextBase httpContext)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;string&lt;/span&gt; requestPath =&lt;span&gt; httpContext.Request.AppRelativeCurrentExecutionFilePath;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; ((requestPath != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &amp;amp;&amp;amp;
&lt;span&gt;6&lt;/span&gt;         (VPP != &lt;span&gt;null&lt;/span&gt;) &amp;amp;&amp;amp;
&lt;span&gt;7&lt;/span&gt;         (VPP.FileExists(requestPath) ||
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        VPP.DirectoryExists(requestPath)));
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果文中有表述不正确或有疑问的可以在评论中指出，一起学习一起进步！！&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 07:18:00 +0000</pubDate>
<dc:creator>悠扬的牧笛</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xhb-bky-blog/p/9235086.html</dc:identifier>
</item>
<item>
<title>如何写出没有BUG的代码? - sherrywasp</title>
<link>http://www.cnblogs.com/sherrywasp/p/9262877.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sherrywasp/p/9262877.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201807/788453-20180704144931184-870738478.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1947年9月9日，美国海军准将 &lt;strong&gt;Grace Hopper&lt;/strong&gt; 在哈佛学院计算机实验室里使用 Mark II 和 Mark III 计算机进行研究工作。她的团队跟踪到 Mark II 上的一个错误，操作人员发现是由于一只飞蛾钻到了 Mark II 的继电器里导致的。团队清除了这只飞蛾，一切恢复正常。当时的工作人员记录了这样一句日志：&quot; &lt;strong&gt;&lt;span&gt;First actual case of bug being found.&lt;/span&gt;&lt;/strong&gt; &quot;  这次著名的事件，犹如潘多拉打开了魔盒，从此，程序员的世界里，bug 满天飞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201807/788453-20180704141521851-1267604373.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;世界上第一个 bug&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在我所担任过的角色中，有一个岗位叫做 Development Manager，通常简称 DM. 记得在一次基于一款平台的二次开发项目中，因为 bug 实在太多，我们几乎拿出了一整个里程碑的周期来 debug，于是我这个DM有了新的解释：Debug Man.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　没有人喜欢 bug，bug 意味着错误、不确定性、加班、交付风险，等等…… 负面的词语怎么堆砌都不冗余。随便找个有过一、两个项目经验的开发者，问问他 debug 的回忆，那气氛就跟上坟一样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于 bug，开发者的神经往往也很敏感。有个段子很有趣 —— 说的是“应该如何向程序员反馈一个 bug ” ——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　你不能直接跟他说：“这里不对啊，是不是你程序有 bug 啊？”，要这么说的话，会直接被怼回来：“你丫的自己不会用吧！”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　你可以换个说法：“咦，这里好像不对，是我操作错了吗？”，这时程序员心里就一咯噔：“Shit.. 不会是我代码有 bug 吧？”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从业多年，发现有个现象还蛮有趣的：有时候，当某个 bug 被发现时，犯下这个错误的始作俑者会开玩笑地为自己解脱：“谁没写过 bug 啊，Windows 还有 bug 呢。” 这句托词我也用过，感觉挺好用的，就好比：梅西都能罚丢点球，我空门没进，也是可以理解的嘛。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但其实吧…… 这逻辑经不起推敲的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Windows 操作系统，一款长达30多年，装机量估计都超过了地球人口数量的巨型工程，复杂度基本只能靠猜。以微软公布的资料来看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Windows 95 代码量约 1500 万行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Windows XP 代码量约 4500 万行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Windows Vista 代码量约 5000 万行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Windows 7 代码量 5000+ 万行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以 Windows 7 为例，超5000万的代码量，23个小组，共1000多人的开发团队。如此规模下产生的bug，和一个在办公室里上了1天班，写了200行代码，就闹出一堆bug，搞得项目乱七八糟的，能同日而语吗？最后再轻描淡写地来句 “微软也有 bug ”，不害臊？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以我后来不用这句了，如此开脱，水平太low。其替代方案容我稍后再讲。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201807/788453-20180704141912620-976779412.jpg&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　为了对抗 bug，人们发明了各种各样的工具和手段，上至方法论，下至生产工具。越来越先进的 IDE, 复杂的代码审查制度，从单元测试到集成联调，再配上 beta 版，试用，公测，等等。凡此种种，其目标无一不是消灭 bug 。可这些琳琅满目的解决方案的存在，反倒证明了一个悲剧：人类，实在是太容易犯错了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果说凡事都有正反两面的意义，那么 bug 的正能量就是硬生生造就了大量就业机会，进而维护了社会稳定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么，为什么我们总是无法避免 bug 的产生？我们能不能杜绝 bug ？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　答案当然是不可能了。因为那样一来，程序员的日子岂不是太舒服了？不符合苦逼的定位。而且，我们所处的这个世界，但凡越是高呼要消灭的东西，越是会普遍地存在。就像苍蝇、蚊虫、污染、犯罪、战争，不一而足。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　按照常识，经验越丰富的老手写出来的代码，一次通过的几率更高，比如他们思考得会更周全，对异常的判断和处理更老练，边界条件把握得更精确，等等。所以我们可能会幻想：是不是只要我们足够仔细，并努力磨练技艺，通过让一部分码农先老练起来，然后实现共同老练，最终就可以达到全世界开发者联合起来消灭bug的大解放了？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很遗憾，这只是一个治标不治本的思路，因为bug是有阶级的。老手们的bug相对少，只是低级错误少，他们也会遇到bug，而他们的bug，往往都是一眼蒙逼的难度系数N.x的难题，不发生在代码层面，大多在业务层面，甚至需求设计层面，或者直接是一些不可抗拒因素（做过政府项目吗？）。总之，萌新有萌新们的秀逗，大叔有大叔们的短路，老杆也会有自己的滑铁卢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　bug 这个概念的起源，就预示着它的不可避免性。世界上第一个 bug 是一只飞蛾，这剧本，谁能料到？某种意义上说，bug 就是不可预见的错误，能被预估并且提前做好准备的，那叫 exception， try catch 是他们的朋友。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于为什么会产生 bug 的原因，著名的荷兰计算机科学家 &lt;strong&gt;Edsger W. Dijkstra&lt;/strong&gt; 有过一句经典名言：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;If debugging is the process of removing software bugs, then programming must be the process of putting them in.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　这就是上文提到的那句托词 “ Windows 也有 bug. ” 的替代方案。&lt;strong&gt;:)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　设想一下，当你从无到有的写下一句句代码时，中间的任意一个时刻，你的程序都是运行不起来的，至少也是达不到目标效果的。从效用上完全等效于充满 bug 的一堆代码。你可能会辩解，程序还没写完呢，只是功能还没实现，并没有 bug 。事实上，换位思考一下，缺失某个功能和包含一个有故障的功能，对于用户而言，都是无用的。一个处于开发阶段尚没写完的代码和开发结束但写得有缺陷的代码，是一回事。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由此可以引申出了一个著名的命题：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://blog.codinghorror.com/thats-not-a-bug-its-a-feature-request&quot; target=&quot;_blank&quot;&gt;That's not a bug, it's a feature request.&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　有时候，我们很难分清楚一个问题到底属于 bug 还是 feature request . 文中作者抛出了一个案例：用 Visual Studio 构建一个 Windows GUI 程序时没有采用系统默认字体。这个算不算一个 bug 呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不好说。毕竟，随着软件应用越来越普及、越来越追求所谓人性化的趋势，传统意义上的只要程序能运行就不算 bug 的观点，也在慢慢发生改变。对于一个强迫癌用户来说，UI 上有缺陷，那基本上整个软件就不能用了。事实上，在当今各类 app 竞争白热化、同质化的时代，用户体验上的问题，往往是致命的。以前大家没得选，所以没那么挑剔，只要程序能干活就行了。如今的计算机用户已经被宠坏了，在这样的时代下，bug 早已悄悄地泛化了。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201807/788453-20180704142055181-1988591594.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以，到底如何才能写出没有 bug 的代码呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　答案: &lt;span&gt;&lt;strong&gt;不写代码&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一个悲观又绝望却正确的唯一解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　试着在这绝望里挖掘一点希望吧。这个答案隐含了一个方法论: 尽可能少写代码。因为 Dijkstra 大师已经说得很清楚了，编程就是制造 bug 的过程。那么，代码写的越少，犯错的几率就越小，这个道理显而易见。维护一段300行的代码，我们很容易有信心；接手一段3000行的代码，什么反应就看各人素质了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　现代的开发方式也都包含有这个思路，从 IDE 的智能提示，代码补全功能，到每门语言都会有的各种“21天从入门到精通”的开发框架，以及很多实战层面的约定俗成，都是在帮助开发者减少不必要的编码。框架化、规范化思维能降低出错的可能性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　事实上，就连编程语言本身的历史发展都是按照这个思路在进行。从底层的汇编语言，到C/C++，再到Java/C#/Python……等各种高级语言，语言演化的目的之一就是为了把程序员从脏活、累活的工作中解放出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　“不要重复造轮子”的精神，一方面是在指导我们提高效率，不要重复劳动成本，另一方面也是减少重复犯错的几率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当代 Web 开发中的各种包管理概念正在深刻地践行着这条精神，以至于在2016年3月爆发了著名的 &lt;strong&gt;NPM &amp;amp; left-pad&lt;/strong&gt; 事件: 一段区区11行的字符串填充函数模块，被全世界依赖，结果作者 Azer 下架模块包的那一天，全球前端大崩溃，受波及的产品和团队当中，甚至包含著名的 React ！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个事件让人们开始反思：&lt;a href=&quot;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;我们是不是忘了该如何编程了？&lt;/span&gt;&lt;/a&gt; 一个功能简单到人人都会写的函数，却都不约而同地选择引入，而不是自己实现。最终，过犹不及。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　写代码，真的很难。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;NO CODE , NO BUG .&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201807/788453-20180704135053069-941062181.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可是，如果真的只能不写代码了，那么本身就已经没有女朋友的程序员们，现在连代码也没有了，这还让不让人活了？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不能这样把程序员们给逼死了，要讲人权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有时候，当答案实在不可接受的时候，我们就该思考是不是问题问错了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以，换个角度，为什么要追求无 bug 呢？也许我们根本就没必要害怕 bug.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有 bug 的地方就有麻烦，有麻烦就有解决麻烦的需要，客户就是给那些能解决麻烦事的人支付报酬的。只处理简单的问题，是没有价值的，市场只认可那些面对困难能提供解决方案的人。简单来讲，想赚钱，就别怕麻烦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于客户来说，不管是 bug 或是 feature request，都是一个需要解决的问题。一个优秀的PM，可以把客户反馈的 bug，包装成 feature request，返回一套解决方案。然后，优秀的商务代表出马，签订补充协议。恭喜，你们的项目经费增加了一点点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　英格兰有句谚语：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;Where there's muck, there's brass.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如此看来，“ 如何写出没有BUG的代码？” 这问题，恐怕确实问错了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 07:17:00 +0000</pubDate>
<dc:creator>sherrywasp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sherrywasp/p/9262877.html</dc:identifier>
</item>
<item>
<title>php源码建博客3--区分平台的MVC结构 - young67</title>
<link>http://www.cnblogs.com/yangp67/p/9261971.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangp67/p/9261971.html</guid>
<description>&lt;p&gt;主要：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;模型单例工厂&lt;/li&gt;
&lt;li&gt;目录结构优化&lt;/li&gt;
&lt;li&gt;区分平台（前台，后台....）&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
--------------&lt;span&gt;&lt;strong&gt;文件结构&lt;/strong&gt;&lt;/span&gt;：--------------------------------------
blog&lt;br/&gt;├─App&lt;br/&gt;│  ├─Model 模型&lt;br/&gt;│  │  └─UserModel.class.php 用户模型类    &lt;br/&gt;│  ├─View 视图&lt;br/&gt;│  │  ├─Back后台&lt;br/&gt;│  │  │  └─Index&lt;br/&gt;│  │  │          └─index.html  后台首页面&lt;br/&gt;│  │  └─Home前台&lt;br/&gt;│  │      └─User 用户视图目录&lt;br/&gt;│  │             └─login.html  登录表单页面&lt;br/&gt;│  ├─Controller 控制器&lt;br/&gt;│  │  ├─Back后台&lt;br/&gt;│  │  │  └─IndexController.class.php 后台首页控制器&lt;br/&gt;│  │  └─Home前台&lt;br/&gt;│  │      └─UserController.class.php 用户控制器&lt;br/&gt;├─Public   静态公共文件（js,css,images）&lt;br/&gt;│  ├─Plugins 插件&lt;br/&gt;│  │  └─layui 前端框架插件&lt;br/&gt;│  ├─Back后台&lt;br/&gt;│  │    ├─js/   js文件&lt;br/&gt;│  │    ├─css/  css样式文件&lt;br/&gt;│  │    └─image img图片 &lt;br/&gt;│  └─Home前台&lt;br/&gt;│      ├─js/   js文件&lt;br/&gt;│      ├─css/  css样式文件&lt;br/&gt;│      └─image img图片 &lt;br/&gt;├─Frame 公共使用的类&lt;br/&gt;│   ├─BaseModel.class.php 数据库连接类&lt;br/&gt;│   ├─BaseController.class.php 控制器公共操作（设置编码，信息跳转）&lt;br/&gt;│   ├─FactoryModel.class.php  模型工厂类&lt;br/&gt;│   └─MySQLDB.class.php 数据库操作工具类&lt;br/&gt;└─index.php  入口文件
----------------------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt; 下载查看该项目源码： &lt;a title=&quot;下载或查看源码&quot; href=&quot;https://gitee.com/NewbiesYang/young_blog&quot; target=&quot;_blank&quot;&gt;https://gitee.com/NewbiesYang/young_blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;模型单例工厂&lt;/h2&gt;
&lt;p&gt;准备： 创建分支&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$ git checkout master
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; $ git checkout -b &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;folder-model-app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;　　1）程序中3行 。。。 表示省略的代码。从前面或源码中可查看&lt;/p&gt;
&lt;p&gt;　　2） 【XXX/XXX】表示项目文件相对路径&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　思路：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　问题： 项目中模型操作数据表，一个动作可能就要操作一次数据库，一次请求多个动作，每个动作都需要去实例化对应模型&lt;/p&gt;
&lt;p&gt;　　解决想法： 创建一个模型类单例工厂&lt;br/&gt;       实现： 创建单例的模型类  FactoryModel.class.php&lt;br/&gt;        　　属性$model=array()； 存储模型类实例&lt;br/&gt;        　　方法： M($cmodelName, array $conf=null) 实例化模型类&lt;br/&gt;      使用： 控制器中使用模型类实例：$model=FactoryModel::M('模型名称')&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1) 创建模型单例工厂 【Frame/FactoryModel.class.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 单例模型工厂类
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * User: young
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FactoryModel
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$model&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储模型类实例&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 构造方法
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;  __construct()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * 传递一个模型类的类名，就返回该类的一个单例实例对象
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    *@param string $modelName  模型类的类名
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    *@param array  $conf  数据库配置信息
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    *@return object 传入模型类的实例（单例）
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; M(&lt;span&gt;$modelName&lt;/span&gt;, &lt;span&gt;array&lt;/span&gt; &lt;span&gt;$conf&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;$modelName&lt;/span&gt; = &lt;span&gt;$modelName&lt;/span&gt;.'Model'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;static&lt;/span&gt;::&lt;span&gt;$model&lt;/span&gt;[&lt;span&gt;$modelName&lt;/span&gt;]) || !(&lt;span&gt;static&lt;/span&gt;::&lt;span&gt;$model&lt;/span&gt;[&lt;span&gt;$modelName&lt;/span&gt;] instanceof &lt;span&gt;$modelName&lt;/span&gt;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;static&lt;/span&gt;::&lt;span&gt;$model&lt;/span&gt;[&lt;span&gt;$modelName&lt;/span&gt;] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;$modelName&lt;/span&gt;(&lt;span&gt;$conf&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;::&lt;span&gt;$model&lt;/span&gt;[&lt;span&gt;$modelName&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) 引入该类文件 【index.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('60bf6ea6-28ca-4bef-8cb8-fadd2f4a33ec')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_60bf6ea6-28ca-4bef-8cb8-fadd2f4a33ec&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_60bf6ea6-28ca-4bef-8cb8-fadd2f4a33ec&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('60bf6ea6-28ca-4bef-8cb8-fadd2f4a33ec',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_60bf6ea6-28ca-4bef-8cb8-fadd2f4a33ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 入口文件
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/Db.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库操作类&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/BaseModel.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基础模型类&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt;('Model/UserModel.class.php'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/FactoryModel.class.php';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模型工厂类&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 。。。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;入口文件引入工厂模型类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3) 应用： 控制器中使用，如用户控制器UserController中 登录操作【Controller/UserController.class.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * UserController.class.php 用户控制器
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController  &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;  BaseController{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    。。。
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    。。。
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    。。。
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 登录操作： 校验登录信息
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; dlogin()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收登录信息&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt;['username'] = &lt;span&gt;trim&lt;/span&gt;(&lt;span&gt;$_POST&lt;/span&gt;['username'&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt;['pwd'] = &lt;span&gt;trim&lt;/span&gt;(&lt;span&gt;$_POST&lt;/span&gt;['pwd'&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化模型，调用模型方法
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        //$model = new UserModel();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        //$result = $model-&amp;gt;checkLoginInfo($data);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        //替换上面两行&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;$result&lt;/span&gt; = FactoryModel::M('User')-&amp;gt;checkLoginInfo(&lt;span&gt;$data&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转提示&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;msg('登录成功！', '?a=index',3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;msg('用户名或密码不正确！！'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4） 测试程序运行，&lt;a title=&quot;测试&quot; href=&quot;http://www.test.com/blog/index.php&quot; target=&quot;_blank&quot;&gt;http://www.test.com/blog/index.php&lt;/a&gt;  登录测试结果与前面一致。暂时先提交代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; git add -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; git commit -m &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;完成模型工厂类&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;目录结构优化&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt; 　　思路&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　多个平台(模块)：前后，后台&lt;br/&gt;        MVC结构分平台&lt;br/&gt;            C：  Controllers/Home      Controllers/Admin  .....&lt;br/&gt;            V：  Views/Home                Views/Admin  .....&lt;br/&gt;            M:   操作数据表一般模块共用&lt;br/&gt;        公共资源目录Public： Public/Home  Public/Admin  .....&lt;br/&gt;    　目录结构变化，所有载入类，视图的路径做相应变化　&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1）操作步骤&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9351fa11-d015-4c0b-a478-a6b86671fe33')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_9351fa11-d015-4c0b-a478-a6b86671fe33&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9351fa11-d015-4c0b-a478-a6b86671fe33&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9351fa11-d015-4c0b-a478-a6b86671fe33',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9351fa11-d015-4c0b-a478-a6b86671fe33&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
1）目录构建: 
step 1: 根目录下创建目录App, 将Model目录，View目录，Controller目录放大App目录下
        既根目录只有： App/ Public/ Frame/  index.php

step 2: 在Controller目录中，创建Back目录和Home目录。将UserController控制器类文件放入Home目录中

step 3: 在View目录中，创建Back目录和Home目录。将login.html文件放入Home目录中

step 4: 在Public目录中，创建Back目录，Home目录，Plugins目录。将js,images,css目录放入Home目录中，公共插件放入对应的Plugins目录中

2）文件引入修改：
step 5: index.php入口文件对UserCotroller类的引入路径修改

step 6：UserController类中对视图login.html的include路径的修改

step 7: 视图login.html中对css和js路径的引入
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;操作步骤思路&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2） 具体代码修改操作&lt;/p&gt;
&lt;p&gt;　　入口文件引入类路径修改【index.php】 主要是用户模型类和用户控制器类路径引入修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2a0e59d5-30a5-45ca-b061-0c2f8f50b892')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2a0e59d5-30a5-45ca-b061-0c2f8f50b892&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2a0e59d5-30a5-45ca-b061-0c2f8f50b892&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2a0e59d5-30a5-45ca-b061-0c2f8f50b892',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2a0e59d5-30a5-45ca-b061-0c2f8f50b892&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 入口文件
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/Db.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库操作类&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/BaseModel.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基础模型类&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'App/Model/UserModel.class.php'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/FactoryModel.class.php';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模型工厂类&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'Frame/BaseController.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基础控制器类&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;require_once&lt;/span&gt; 'App/Controller/Home/UserController.class.php'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化控制器&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;$userCtr&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserController();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;$a&lt;/span&gt; = !&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$_GET&lt;/span&gt;['a']) ? &lt;span&gt;$_GET&lt;/span&gt;['a'] : 'login'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;$userCtr&lt;/span&gt; -&amp;gt; &lt;span&gt;$a&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;入口文件引入类的修改&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　用户控制器类对登录表单视图路径引入的修改 【App/Controller/Home/UserController.class.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4b67ee5a-4c21-427a-9686-37da24c0926f')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_4b67ee5a-4c21-427a-9686-37da24c0926f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b67ee5a-4c21-427a-9686-37da24c0926f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4b67ee5a-4c21-427a-9686-37da24c0926f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b67ee5a-4c21-427a-9686-37da24c0926f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * UserController.class.php 用户控制器
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController  &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;  BaseController{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     * 展示登录界面
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * @access public
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; login()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;include&lt;/span&gt; &quot;App/View/Home/User/login.html&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 。。。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;用户控制器展示登录界面修改&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　登录表单视图 【App/View/Home/User/login.html】 对静态资源路径的修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f6a7cad9-dac3-4731-9d5a-b1f56853d56e')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_f6a7cad9-dac3-4731-9d5a-b1f56853d56e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f6a7cad9-dac3-4731-9d5a-b1f56853d56e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f6a7cad9-dac3-4731-9d5a-b1f56853d56e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f6a7cad9-dac3-4731-9d5a-b1f56853d56e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-CN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;public/plugins/layui/css/layui.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;public/Home/css/style.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;public/plugins/layui/layui.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    layui.use(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; form &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; layui.form;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;登录表单视图&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　效果及提交代码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180704114557577-1651344285.png&quot; alt=&quot;&quot; width=&quot;387&quot; height=&quot;215&quot;/&gt;提交保存代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; git add -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; git commit -m &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;目录结构优化&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;区分平台（前台，后台....）&lt;/h2&gt;
&lt;h3&gt; &lt;span&gt;　　思路&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　实现根据平台的不同进行不同的操作&lt;/p&gt;
&lt;p&gt;　　用户点击页面请求，随着url发送3个参数： p=平台&amp;amp;c=控制器&amp;amp;a=动作&lt;br/&gt;       入口文件接收get数据就可以知道：  平台， 控制器， 动作&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1） 操作步骤：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('dbcb9d76-e033-45b6-bd10-bf9274095254')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_dbcb9d76-e033-45b6-bd10-bf9274095254&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbcb9d76-e033-45b6-bd10-bf9274095254&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('dbcb9d76-e033-45b6-bd10-bf9274095254',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbcb9d76-e033-45b6-bd10-bf9274095254&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
1）入口文件平台区分：
    step 1:  入口-登录页面提交的action=&quot;?p=Home&amp;amp;c=User&amp;amp;a=dlogin&quot;

    step 2:  入口文件index.php  接收$_GET

    step 3:  登录判断成功跳转地址： $this-&amp;gt;msg('登录成功！', '?p=Admin&amp;amp;c=Index&amp;amp;a=index',3);
        
2) 后台首页：
     step 1:   静态css,js,img文件放置 Public/Admin/

     step 2:   创建后台首页控制器类，
                        index() 载入后台首页视图文件

     step 3:  View/Admin/Index/index.html 修正css等静态文件路
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;操作步骤思路&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2）登录表单提交action=“?p=Home&amp;amp;c=User&amp;amp;a=dlogin”    【App/View/Home/User/login.html】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('80d27ae6-fd96-416b-91d4-8b98049eefe6')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_80d27ae6-fd96-416b-91d4-8b98049eefe6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_80d27ae6-fd96-416b-91d4-8b98049eefe6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('80d27ae6-fd96-416b-91d4-8b98049eefe6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_80d27ae6-fd96-416b-91d4-8b98049eefe6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-CN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;public/plugins/layui/css/layui.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;public/Home/css/style.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;?p=Home&amp;amp;c=User&amp;amp;a=dlogin&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;layui-form&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 。。。。。。。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;登录表单form提交action修改&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3） 入口文件区分平台 【index.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 入口文件
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;$p&lt;/span&gt; = !&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$_GET&lt;/span&gt;['p']) ? &lt;span&gt;$_GET&lt;/span&gt;['p'] : 'Home';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平台&lt;/span&gt;
&lt;span&gt;$c&lt;/span&gt; = !&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$_GET&lt;/span&gt;['c']) ? &lt;span&gt;$_GET&lt;/span&gt;['c'] : 'User';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;控制器&lt;/span&gt;
&lt;span&gt;$a&lt;/span&gt; = !&lt;span&gt;empty&lt;/span&gt;(&lt;span&gt;$_GET&lt;/span&gt;['a']) ? &lt;span&gt;$_GET&lt;/span&gt;['a'] : 'login'; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动作&lt;/span&gt;

&lt;span&gt;require_once&lt;/span&gt; 'Frame/Db.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库操作类&lt;/span&gt;
&lt;span&gt;require_once&lt;/span&gt; 'Frame/BaseModel.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基础模型类&lt;/span&gt;
&lt;span&gt;require_once&lt;/span&gt; 'App/Model/UserModel.class.php'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;require_once&lt;/span&gt; 'Frame/FactoryModel.class.php';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模型工厂类&lt;/span&gt;

&lt;span&gt;require_once&lt;/span&gt; 'Frame/BaseController.class.php';  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基础控制器类&lt;/span&gt;
&lt;span&gt;require_once&lt;/span&gt; 'App/Controller/'.&lt;span&gt;$p&lt;/span&gt;.'/'.&lt;span&gt;$c&lt;/span&gt;.'Controller.class.php'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;$ctr&lt;/span&gt; = &lt;span&gt;$c&lt;/span&gt;.&quot;Controller&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化控制器&lt;/span&gt;
&lt;span&gt;$userCtr&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;$ctr&lt;/span&gt;&lt;span&gt;();

&lt;/span&gt;&lt;span&gt;$userCtr&lt;/span&gt; -&amp;gt; &lt;span&gt;$a&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用户控制器登录操作，登录成功跳转到后台首页 【App/Controller/Home/UserController.class.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('410e2064-e417-4a24-aea0-059690e974ab')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_410e2064-e417-4a24-aea0-059690e974ab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_410e2064-e417-4a24-aea0-059690e974ab&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('410e2064-e417-4a24-aea0-059690e974ab',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_410e2064-e417-4a24-aea0-059690e974ab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * UserController.class.php 用户控制器
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController  &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;  BaseController{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * 登录操作： 校验登录信息
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; dlogin()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收登录信息&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt;['username'] = &lt;span&gt;trim&lt;/span&gt;(&lt;span&gt;$_POST&lt;/span&gt;['username'&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;$data&lt;/span&gt;['pwd'] = &lt;span&gt;trim&lt;/span&gt;(&lt;span&gt;$_POST&lt;/span&gt;['pwd'&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化模型，调用模型方法&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;$result&lt;/span&gt; = FactoryModel::M('User')-&amp;gt;checkLoginInfo(&lt;span&gt;$data&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转提示&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;msg('登录成功！', '?p=Admin&amp;amp;c=Index&amp;amp;a=index',3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;$this&lt;/span&gt;-&amp;gt;msg('用户名或密码不正确！！'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;登录操作成功后跳转路径修改&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　测试&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　1）模板准备： &lt;/p&gt;
&lt;p&gt;　　　　　 准备后台视图模板程序。可以自己写前端视图模板程序，也可以到网上下载别人写好的前端模板，如到 模板之家  选择所需求的 前台，后台模板 &lt;/p&gt;
&lt;p&gt;　　　　　　寻找模板： &lt;a href=&quot;http://www.mycodes.net&quot; target=&quot;_blank&quot;&gt; www.mycodes.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   2） 将后台模板视图的静态资源文件（如 js, css,image）拷贝到 【Public/admin/】目录下&lt;/p&gt;
&lt;p&gt;   3） 创建后台首页控制器 【App/Controller/Admin/IndexController.class.php】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * IndexController控制器类
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 后台相关操作
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * User: young
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; IndexController &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; BaseController
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;展示后台首页&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; index()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;include&lt;/span&gt; 'App/View/Admin/Index/index.html'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4) 创建后台首页视图 【App/View/Admin/Index/index.html】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('19f15da6-a5cd-45f2-8db6-f8ddb46766e8')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_19f15da6-a5cd-45f2-8db6-f8ddb46766e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19f15da6-a5cd-45f2-8db6-f8ddb46766e8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('19f15da6-a5cd-45f2-8db6-f8ddb46766e8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_19f15da6-a5cd-45f2-8db6-f8ddb46766e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;doctype html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;后台管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;./Public/Admin/css/common.css&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;./Public/Admin/css/main.css&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./Public/Admin/js/libs/modernizr.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./Public//home/js/jquery1.42.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;topbar-wrap white&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;topbar-inner clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;topbar-logo-wrap clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;topbar-logo none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;index.html&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;navbar-brand&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;后台管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;navbar-list clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;on&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;?p=back&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;首页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;./&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;_blank&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;网站首页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;top-info-wrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;top-info-list clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;user1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;?p=back&amp;amp;c=Index&amp;amp;a=ChangePswd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;修改密码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;?c=User&amp;amp;a=Logout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;退出&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;左侧菜单栏&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;左侧菜单栏 begin&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sidebar-wrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sidebar-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;菜单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sidebar-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sidebar-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe003;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;常用操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sub-menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe008;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;分类管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe005;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;博文管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe012;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;评论管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe052;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;友情链接&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe018;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;系统管理&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sub-menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe017;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;系统设置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe046;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数据备份&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe045;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数据还原&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;左侧菜单栏 begin&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;右侧主操作区&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;main-wrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;crumb-wrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;crumb-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;icon-font&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;amp;#xe06b;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;欢迎使用博客后台管理系统。&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;result-wrap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;result-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;系统基本信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;result-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;sys-info-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作系统&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;WINNT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;运行环境&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Apache/2.2.21 (Win64) PHP/5.3.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PHP运行方式&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;apache2handler&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;模板版本&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;v-0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;上传附件限制&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2M&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;北京时间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;='nowtime'&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;php echo date('Y年m月d日 H:i:s',time()); &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-lab&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;服务器域名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;res-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;host&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;localhost&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;/main&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#nowtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).css({color:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(location.host);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            window.setInterval(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ShowTime()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ShowTime(){
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; t &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; str &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; t.getFullYear() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;年&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; t.getMonth()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;月&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; t.getDate()&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;日 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; t.getHours() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; t.getMinutes() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; t.getSeconds() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#nowtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(str);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;后台首页视图&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　效果及提交代码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180704122302075-75527285.png','后台首页','resizable=yes,width=500,height=400,left='+(screen.availWidth/2-250)+',top='+(screen.availHeight/2-200)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180704122302075-75527285.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180704122302075-75527285.png&quot; alt=&quot;&quot; width=&quot;832&quot; height=&quot;416&quot;/&gt;&lt;/a&gt;　　代码提交，推送&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; $  git add -&lt;span&gt;A
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; $  git commit -m &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;区分平台，实现后台首页&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;$  git checkout master
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; $  git merge &lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder-model-app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; $  git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;小结： 根据平台进一步优化目录结构，制作模型的单例工厂，实现后台首页&lt;/p&gt;
&lt;h2&gt;提出问题&lt;/h2&gt;
&lt;p&gt;　　1. 项目中可以看到 include或require的文件路径很长，容易出错，也不便于使用  ==&amp;gt; 如何更加简单引入且不易出错&lt;/p&gt;
&lt;p&gt;　    2. 写一个类，就要到入口文件引入一次， 比较麻烦  ==&amp;gt;  如何实现自动加载类&lt;/p&gt;
&lt;p&gt;　　3. 随着类的引入增加，入口文件代码量会越来越大  ==&amp;gt;  如何 封装，简化入口文件&lt;/p&gt;
&lt;p&gt;　　4. 现在项目中任何一个目录，都可以随意访问  ==&amp;gt; 如何加强安全访问，限制目录的访问&lt;/p&gt;
&lt;p&gt;下一步：常量使用，自动加载类实现，入口封装，限制目录访问&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 06:27:00 +0000</pubDate>
<dc:creator>young67</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangp67/p/9261971.html</dc:identifier>
</item>
<item>
<title>Java设计模式学习记录-原型模式 - 纪莫</title>
<link>http://www.cnblogs.com/jimoer/p/9263038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimoer/p/9263038.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近一直在面试，也没时间写博客了，感觉已经积攒了好多知识想要记录下来了，因为在面试中遇到的没答出来的问题，这就是自己不足的地方，然后就要去学习这部分内容，虽然说自己不足的地方学习了，但是没有应用到具体实际的地方，过段时间也还是会忘，所以我的办法是用博客记录下来。&lt;/p&gt;
&lt;p&gt;俗话说“好记性不如烂笔头”，在我这里是“好记性不如烂博客”😂。&lt;/p&gt;
&lt;p&gt;今天要介绍的原型模式也是创建型模式中的一种，感觉叫复制方法模式或许更接地气一些，我的理解就是用一个对象复制出另一对象。例如《西游记》中孙悟空拔几根猴毛就能变出好几个一样的孙猴子来。其中孙悟空就是一个原型，创建孙猴子的过程就是实现原型模式的过程。&lt;/p&gt;
&lt;h2&gt;原型模式&lt;/h2&gt;
&lt;h3&gt;原型模式介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原型模式是指使用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用原型模式时，我们需要首先创建一个原型对象，再通过复制这个原型对象，来创建更多的同类型的对象。&lt;/p&gt;
&lt;h3&gt;如何实现复制&lt;/h3&gt;
&lt;p&gt;原型模式中到底是如何实现复制的呢？下面介绍两种实现方式。&lt;/p&gt;
&lt;h4&gt;1、通用的方式&lt;/h4&gt;
&lt;p&gt;通用的方式是在具体的原型类的复制方法中，实例化一个与自身类型一样的对象，传入相同的属性值，然后将其返回。&lt;/p&gt;
&lt;p&gt;如下代码方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PrototypeTest {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性变量&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 复制方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; PrototypeTest clone()  {

        PrototypeTest prototypeTest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrototypeTest();
        prototypeTest.setName(name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; prototypeTest;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 测试
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        PrototypeTest prototypeTest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrototypeTest();
        prototypeTest.setName(&lt;/span&gt;&quot;第三&quot;&lt;span&gt;);&lt;br/&gt;　　　　//复制原型
        PrototypeTest cloneObject &lt;/span&gt;=&lt;span&gt; prototypeTest.clone();

        System.out.println(Objects.toString(prototypeTest));
        System.out.println(Objects.toString(cloneObject));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出的结果是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
PrototypeTest(name=&lt;span&gt;第三)
PrototypeTest(name&lt;/span&gt;=第三)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式通用性很高，并且与编程语言特性无关，任何一种面向对象的语言都可以使用这种形式来实现对原型的复制。&lt;/p&gt;
&lt;h4&gt;2、Java中的Object的clone()方法&lt;/h4&gt;
&lt;p&gt;因为在Java中所有的Java类都继承自java.lang.Object。而Object的类中提供一个默认的clone()方法，可以将一个Java对象复制一份。因此在Java中可以直接使用Object提供的clone()方法来实现对象的复制，这样实现原型模式就比较简单了。&lt;/p&gt;
&lt;p&gt;需要注意的是，能够调用clone()实现拷贝的Java类，必须实现一个标识接口Cloneable，表示这个Java类支持被复制，为什么说是标识接口呢，因为这个接口里面没有定义任何方法，只是用了标识可以执行某些操作。如果一个类没有实现这个接口但是调用了clone()方法，Java编译器将抛出一个&lt;strong&gt;CloneNotSupportedExecption&lt;/strong&gt;异常。&lt;/p&gt;
&lt;p&gt;如下代码方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PrototypeMain &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Cloneable{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 重写Object的clone方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; PrototypeMain clone() {
        PrototypeMain prototypeMain &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
             prototypeMain &lt;/span&gt;= (PrototypeMain)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.clone();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (CloneNotSupportedException e){
            System.err.println(&lt;/span&gt;&quot;Not Support Cloneable&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; prototypeMain;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;PrototypeMain{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                '}'&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        PrototypeMain prototypeMain &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrototypeMain();
        prototypeMain.setName(&lt;/span&gt;&quot;小花&quot;&lt;span&gt;);
        prototypeMain.setAge(&lt;/span&gt;19&lt;span&gt;);
        PrototypeMain cloneObject &lt;/span&gt;=&lt;span&gt; prototypeMain.clone();

        System.out.println(Objects.toString(cloneObject));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
PrototypeMain{name='小花', age=19}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时Object类可以理解为抽象原型类，而实现了Cloneable接口的类相当于具体原型类。&lt;/p&gt;
&lt;p&gt;通过复制方法所创建的对象是全新的对象，它们在内存中拥有全新的地址，通常对复制所产生的对象进行修改时，对原型对象不会造成任何影响，每一个拷贝对象都是相互独立的。通过不同的方式修改，可以得到一系列相似但不完全相同的对象。&lt;/p&gt;
&lt;p&gt;原型模式的结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772743/201807/772743-20180704130041468-218806483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在原型模式结构图中包含如下3个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prototype(抽象原型类)：&lt;/strong&gt;这是声明复制方法的接口，是所有具体原型类的公共父类，可以是抽象类，也可以是接口，甚至可以是实现类。在上面介绍的实现复制的第二种方法里面的java.lang.Object类就是担当的这个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConcretePrototype(具体原型类)：&lt;/strong&gt;实现抽象原型类中声明的复制方法，在复制方法中返回一个与自己同类的复制对象。在上面介绍的实现复制的第二种方法里面的PrototypeMain类就是担当的这个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client(客户类)：&lt;/strong&gt;让一个原型对象复制自身，从而创建一个新的的对象。在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的复制方法，就可以得到多个相同的对象了。在上面介绍的实现复制的第二种方法里面，我将main方法写在了具体原型类中国，如果将main方法提出到一个新的的使用类中，那么这个使用类就是客户类。&lt;/p&gt;
&lt;h3&gt;深Copy与浅Copy&lt;/h3&gt;
&lt;p&gt;浅Copy是指被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都指向原来的对象。简单点说就是，只复制了引用，而没有复制真正的对象内容。&lt;/p&gt;
&lt;p&gt;深Copy是指被复制的对象的所有变量都含有与原来对象相同的值，属性中的对象都指向被复制过的新对象中属性，而不再是原型对象中的属性。简单点说，就是深Copy把所有的对象的引用以及对象都复制了一遍，在堆中是存在两个相互独立的对象，以及属性中的对象也是相互独立的。&lt;/p&gt;
&lt;p&gt;我们还是举例来说明吧：&lt;/p&gt;
&lt;p&gt;如下代码，创建一个原型类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ShallowCopy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Cloneable {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象属性&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; nameList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 复制方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ShallowCopy clone() {

        ShallowCopy shallowCopy &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            shallowCopy &lt;/span&gt;= (ShallowCopy)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.clone();

        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (CloneNotSupportedException e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shallowCopy;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得属性
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt; getNameList() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nameList;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 填充属性值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setNameList(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.nameList.add(name);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在客户类种使用，进行复制。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientTest {

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个对象&lt;/span&gt;
        ShallowCopy shallowCopy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShallowCopy();
        shallowCopy.setNameList(&lt;/span&gt;&quot;小红&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;复制一个新对象&lt;/span&gt;
        ShallowCopy newObject =&lt;span&gt; shallowCopy.clone();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给新对象的属性赋值&lt;/span&gt;
        newObject.setNameList(&quot;大黄&quot;&lt;span&gt;);

        System.out.println(shallowCopy.getNameList());
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预想的结果应该是：小红，实际输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
[小红, 大黄]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;产生这种结果的原因是因为Object类的clone()方法导致的，clone()方法在复制对象时，只是复制本对象的引用，对其内部的数组、引用对象等都不复制，还是指向原生对象的内部元素地址，这种复制方式就是浅Copy。在实际项目中使用这种方式的还是比较少的。一般内部的数组和引用对象才不复制，其他的原始类型int、long、double等类型是会被复制的。另外String类型也是会被复制的，String类里是没有clone()的。&lt;/p&gt;
&lt;p&gt;那么如何实现深Copy呢？&lt;/p&gt;
&lt;p&gt;将上面的复制方法的代码改造一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;   /**&lt;/span&gt;&lt;span&gt;
     * 复制方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ShallowCopy clone() {

        ShallowCopy shallowCopy &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            shallowCopy &lt;/span&gt;= (ShallowCopy)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.clone();
            shallowCopy.nameList &lt;/span&gt;= (ArrayList&amp;lt;String&amp;gt;) &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.nameList.clone();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (CloneNotSupportedException e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shallowCopy;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他内容不变，得到的输出结果是：&lt;/p&gt;

&lt;p&gt;通过上述改造，我们实现了深Copy，这样复制出来的新对象和原型对象之间没有任何瓜葛了。实现了互相操作互不影响的效果，其实深Copy还有一种实现方式，那就是通过自己来写二进制流来操作对象，然后实现对象的深Copy。&lt;/p&gt;
&lt;p&gt;使用二进制流实现深Copy&lt;/p&gt;
&lt;p&gt;将上面的深Copy代码进行改造，改造后的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ShallowCopy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象属性&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; nameList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 复制方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ShallowCopy clone() {

        ShallowCopy shallowCopy &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入当前对象的二进制流&lt;/span&gt;
            ByteArrayOutputStream baos = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayOutputStream();
            ObjectOutputStream oos &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectOutputStream(baos);
            oos.writeObject(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读出二进制流产生新的对象&lt;/span&gt;
            ByteArrayInputStream bais = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectInputStream(bais);

            shallowCopy &lt;/span&gt;=&lt;span&gt; (ShallowCopy)ois.readObject();

        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (IOException|&lt;span&gt;ClassNotFoundException e){
            e.printStackTrace();
        }


        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shallowCopy;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得属性
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt; getNameList() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nameList;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 填充属性值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setNameList(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.nameList.add(name);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户使用类内容不变。运行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是通过这种方式来进行深Copy时，原型类必须实现Serializable接口，这样才能将执行序列化将对象转为二进制数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深Copy还有另一点需要注意的是，如果原型类中的属性是一个引用类型的对象，这个属性是不能用final修饰的，如果被final修饰后会编译出错。final修饰的属性是不允许被重新赋值的。所以要使用深Copy时，在成员属性上不要使用final.&lt;/p&gt;


</description>
<pubDate>Wed, 04 Jul 2018 06:24:00 +0000</pubDate>
<dc:creator>纪莫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimoer/p/9263038.html</dc:identifier>
</item>
<item>
<title>由Oracle 11g SYSAUX 和 SYSTEM 表空间回收引发的联想 - Acdante</title>
<link>http://www.cnblogs.com/acdante/p/9228457.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/acdante/p/9228457.html</guid>
<description>&lt;p&gt;0x00--目的&lt;/p&gt;
&lt;p&gt;整理一下以前一个SYSTEM表空间和SYSAUX表空间使用率达到99%上限的处理思路和相关知识点，好记性不如烂笔头&lt;/p&gt;
&lt;p&gt;0x01--表空间使用率现状&lt;/p&gt;
&lt;p&gt;通过查询可得知目前表空间使用情况如下图：可看到SYSAUX表空间和SYSTEM表空间使用率都已经高达99%，SYSAUX表空间甚至只剩下6.19MB的空间空间。&lt;/p&gt;
&lt;p&gt;可看出两张系统关键表空间的使用率已经不容乐观。急需找出占用空间的幕后凶手！并将之绳之以法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1425423/201806/1425423-20180626114639670-1874639521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;0x02--AWRINFO脚本初步诊断&lt;/p&gt;
&lt;p&gt;通过Oracle数据库自带的awrinfo脚本进行初步诊断，下边截取关键内容，可得到如下信息，快照过期信息是占用SYSAUX的元凶&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1425423/201807/1425423-20180704104658023-545461581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;0x03--v$sysaux_occupants视图查询明细&lt;/p&gt;
&lt;p&gt;进一步查询SYSAUX表空间使用详细情况：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; owner,segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; dba_segments &lt;span&gt;where&lt;/span&gt; tablespace_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYSAUX&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; order by &lt;span&gt;4&lt;/span&gt;&lt;span&gt; desc where rownum &amp;lt;=20;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; OWNER                   SEGMENT_NAME                                     PARTITION_NAME         BYTES/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; ------------------------------ --------------------------------------------------------------------------------- ------------------------------ ---------------
&lt;span&gt; 5&lt;/span&gt; SYS                   WRH$_ACTIVE_SESSION_HISTORY                             WRH$_ACTIVE_1404287032_0           &lt;span&gt;7907&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; SYS                   WRH$_EVENT_HISTOGRAM_PK                                 WRH$_EVENT__1404287032_0           &lt;span&gt;3627&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; SYS                   WRH$_EVENT_HISTOGRAM                                 WRH$_EVENT__1404287032_0           &lt;span&gt;2560&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; SYS                   WRH$_LATCH                                     WRH$_LATCH_1404287032_0           &lt;span&gt;1600&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; SYS                   WRH$_SYSSTAT_PK                                     WRH$_SYSSTA_1404287032_0           &lt;span&gt;1472&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; SYS                   WRH$_LATCH_MISSES_SUMMARY_PK                             WRH$_LATCH__1404287032_0           &lt;span&gt;1408&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; SYS                   WRH$_SQLSTAT                                     WRH$_SQLSTA_1404287032_0           &lt;span&gt;1344&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; SYS                   WRH$_LATCH_PK                                     WRH$_LATCH_1404287032_0           &lt;span&gt;1216&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; SYS                   WRH$_LATCH_MISSES_SUMMARY                             WRH$_LATCH__1404287032_0           &lt;span&gt;1152&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; SYS                   WRH$_SYSSTAT                                     WRH$_SYSSTA_1404287032_0           &lt;span&gt;1088&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; SYS                   WRH$_ACTIVE_SESSION_HISTORY_PK                             WRH$_ACTIVE_1404287032_0            &lt;span&gt;935&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; SYS                   WRH$_PARAMETER_PK                                 WRH$_PARAME_1404287032_0            &lt;span&gt;896&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; SYS                   WRH$_PARAMETER                                     WRH$_PARAME_1404287032_0            &lt;span&gt;759&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; SYS                   WRH$_SEG_STAT                                     WRH$_SEG_ST_1404287032_0            &lt;span&gt;712&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; SYS                   WRH$_SYSTEM_EVENT                                 WRH$_SYSTEM_1404287032_0            &lt;span&gt;688&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; SYS                   WRH$_SYSTEM_EVENT_PK                                 WRH$_SYSTEM_1404287032_0            &lt;span&gt;504&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; SYS                   WRH$_SERVICE_STAT_PK                                 WRH$_SERVIC_1404287032_0            &lt;span&gt;408&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; SYS                   WRH$_SQLSTAT_PK                                     WRH$_SQLSTA_1404287032_0            &lt;span&gt;352&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; SYS                   WRH$_DLM_MISC                                     WRH$_DLM_MI_1404287032_0            &lt;span&gt;320&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; SYS                   WRH$_DLM_MISC_PK                                  WRH$_DLM_MI_1404287032_0            &lt;span&gt;280&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; SYS                   WRH$_SEG_STAT_PK                                  WRH$_SEG_ST_1404287032_0            &lt;span&gt;256&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询v$sysaux_occupants视图，我们可以确定占用SYSAUX表空间过多的大部分都是AWR的基表，所以，根据实际业务需求，删除部分AWR数据理论上就可以回收一部分SYSAUX表空间，在Oracle中，通常AWR信息都会设置保留期限，Oracle 10g版本默认保留7天，Oracle 11g版本默认保留8天，可以通过dba_hist_wr_control视图来查看保留期限。也可以手动更改AWR保留时间，设置AWR基线。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; dba_hist_wr_control;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;0x04-顺带AWR讲解&lt;/p&gt;
&lt;p&gt;既然说到这里，就顺带一下AWR的日常操作：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
AWR (Automatic Workload Repository)
  一堆历史性能数据，放在SYSAUX表空间上， AWR和SYSAUX都是10g出现的，是Oracle调优的关键特性； 大约1999年左右开始开发，已经有约20年历史
 主要是MMON(Manageability Monitor Process)和它的小工进程(m00x)来维护AWR。&lt;/pre&gt;&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;##手动执行一个快照：
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Exec dbms_workload_repository.create_snapshot; 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;##创建一个AWR基线 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Exec DBMS_WORKLOAD_REPOSITORY.CREATE_BASELINE(start_snap_id，end_snap_id ,baseline_name);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;##单节点AWR报告
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; @?/rdbms/&lt;span&gt;awrrpt.sql
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;##AWR比对报告 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; @?/rdbms/admin/&lt;span&gt;awrddrpt 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;##RAC 全局AWR
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; @?/rdbms/admin/&lt;span&gt;awrgrpt
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;##RAC中可选择节点生成AWR报告
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; @?/rdbms/admin/awrrpti
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;0x05--AWR过期快照信息清理&lt;/p&gt;
&lt;p&gt;在本博文的案例中，Oracle版本为11.2.0.4.0，AWR默认保留期限8天。但是为什么会占用这么多SYSAUX表空间呢？首先，要明确AWR快照信息的删除方式：AWR报告默认是采取DELETE&lt;br/&gt;的方式进行过期信息删除的，相比TRUNCATE而言，就会产生大量的碎片，对于开启了自动扩展数据文件的表空间而言，碎片的现会象更加严重。再有一点，ASH的信息在有可能不受AWR快照&lt;br/&gt;保留策略的控制。从如下SQL查询可得知，从SNAP_ID为1的快照到目前为止的所有快照都还在数据库中保存着，导致WRH$_ACTIVE_SESSION_HISTORY表很大，使用&lt;br/&gt;DBMS_WORKLOAD_REPOSITORY包清理过期或者不需要的AWR数据，可以回收这部分空间。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; min(snap_id),max(snap_id) from  wrh$_active_session_history;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;&lt;span&gt; MIN(SNAP_ID) MAX(SNAP_ID)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; ------------ ------------
&lt;span&gt;5&lt;/span&gt;        &lt;span&gt;1&lt;/span&gt;        &lt;span&gt;25444&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过DBMS_WORKLOAD_REPOSITORY包清理快照信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; exec DBMS_WORKLOAD_REPOSITORY.DROP_SNAPSHOT_RANGE (low_snap_id =&amp;gt;&lt;span&gt;1&lt;/span&gt;,high_snap_id =&amp;gt; &lt;span&gt;18000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;
2 PL/SQL procedure successfully completed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，通过这种方式清理的AWR信息，再次查看SYSAUX表空间的空间，发现空间并没有被回收，使用率还和之前一样，这是因为清理AWR操作是通过DELETE操作实现的，表的水位线并没有下降导致的。但是通过再次查询WRH$_ACTIVE_SESSION_HISTORY可发现表记录已经少了。但是表大小还是没有变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1425423/201807/1425423-20180704124346518-1940393879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;0x06--对分区进行MOVE操作，回收表空间&lt;/p&gt;
&lt;p&gt;通过上边查询出来的SYSAUX表空间占用分布情况，将占用空间较大的对象进行MOVE操作，回收表空间。&lt;/p&gt;
&lt;p&gt;   ①首先查看表的分区情况以及大小&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  ②对分区表进行MOVE操作，回收空间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; alter table WRH$_EVENT_HISTOGRAM move partition WRH$_EVENT__1404287032_0;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2&lt;/span&gt; alter table WRH$_EVENT_HISTOGRAM move partition WRH$_EVENT_HISTO_MXDB_MXSN;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   ③MOVE后，重建分区表索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;##查看分区表索引信息
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; index_name from dba_indexes where table_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;##重建分区表索引
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; index_name from dba_indexes where table_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;INDEX_NAME
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; ------------------------------
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;WRH$_EVENT_HISTOGRAM_PK&lt;br/&gt;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_EVENT_HISTOGRAM_PK rebuild partition WRH$_EVENT__1404287032_0;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; SQL&amp;gt; alter index WRH$_EVENT_HISTOGRAM_PK rebuild partition WRH$_EVENT_HISTO_MXDB_MXSN;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以下是操作参考：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt;  4&lt;/span&gt; WRH$_EVENT_HISTOGRAM                                  WRH$_EVENT__1404287032_0        &lt;span&gt;2.5&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; WRH$_EVENT_HISTOGRAM                                  WRH$_EVENT_HISTO_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_EVENT_HISTOGRAM move partition WRH$_EVENT__1404287032_0;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_EVENT_HISTOGRAM move partition WRH$_EVENT_HISTO_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; index_name from dba_indexes where table_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;INDEX_NAME
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; ------------------------------
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;WRH$_EVENT_HISTOGRAM_PK
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_EVENT_HISTOGRAM_PK rebuild partition WRH$_EVENT__1404287032_0;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_EVENT_HISTOGRAM_PK rebuild partition WRH$_EVENT_HISTO_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(bytes)/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_EVENT_HISTOGRAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; SUM(BYTES)/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; --------------------
&lt;span&gt; 31&lt;/span&gt;         .&lt;span&gt;125&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt; 37&lt;/span&gt; WRH$_LATCH                                      WRH$_LATCH_MXDB_MXSN         .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; WRH$_LATCH                                      WRH$_LATCH_1404287032_0         &lt;span&gt;1.5625&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_LATCH move partition WRH$_LATCH_1404287032_0;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_LATCH move partition WRH$_LATCH_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; index_name from dba_indexes where table_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;INDEX_NAME
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; ------------------------------
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;WRH$_LATCH_PK
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_LATCH_PK rebuild partition WRH$_LATCH_1404287032_0;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_LATCH_PK rebuild partition WRH$_LATCH_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; SQL&amp;gt;  &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt; 66&lt;/span&gt; WRH$_LATCH                                      WRH$_LATCH_MXDB_MXSN         .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; WRH$_LATCH                                      WRH$_LATCH_1404287032_0     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_SYSSTAT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt; 73&lt;/span&gt; WRH$_SYSSTAT                                      WRH$_SYSSTA_1404287032_0         &lt;span&gt;1.0625&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; WRH$_SYSSTAT                                      WRH$_SYSSTAT_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_SYSSTAT move partition WRH$_SYSSTA_1404287032_0;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_SYSSTAT move partition WRH$_SYSSTAT_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; index_name from dba_indexes where table_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_SYSSTAT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;INDEX_NAME
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; ------------------------------
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;WRH$_SYSSTAT_PK
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; 
&lt;span&gt; 90&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_SYSSTAT_PK rebuild partition WRH$_LATCH_1404287032_0;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;alter index WRH$_SYSSTAT_PK rebuild partition WRH$_LATCH_1404287032_0
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                                               *
&lt;span&gt; 93&lt;/span&gt; ERROR at line &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; ORA-&lt;span&gt;02149&lt;/span&gt;&lt;span&gt;: Specified partition does not exist
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_SYSSTAT_PK rebuild partition WRH$_SYSSTA_1404287032_0;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_SYSSTAT_PK rebuild partition WRH$_SYSSTAT_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_SYSSTAT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt;109&lt;/span&gt; WRH$_SYSSTAT                                      WRH$_SYSSTA_1404287032_0     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; WRH$_SYSSTAT                                      WRH$_SYSSTAT_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH_MISSES_SUMMARY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt;116&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH__1404287032_0          &lt;span&gt;1.125&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH_MISSE_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_LATCH_MISSES_SUMMARY_PK rebuild partition WRH$_LATCH__1404287032_0;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH_MISSES_SUMMARY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt;127&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH__1404287032_0          &lt;span&gt;1.125&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH_MISSE_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_LATCH_MISSES_SUMMARY move partition WRH$_LATCH__1404287032_0;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter table WRH$_LATCH_MISSES_SUMMARY move partition WRH$_LATCH_MISSE_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;Table altered.
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; 
&lt;span&gt;138&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_LATCH_MISSES_SUMMARY_PK rebuild partition WRH$_LATCH__1404287032_0;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; 
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; SQL&amp;gt;&lt;span&gt; alter index WRH$_LATCH_MISSES_SUMMARY_PK rebuild partition WRH$_LATCH_MISSE_MXDB_MXSN;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;Index altered.
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; SQL&amp;gt; &lt;span&gt;select&lt;/span&gt; segment_name,partition_name,bytes/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;1024&lt;/span&gt; gb from dba_segments where segment_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WRH$_LATCH_MISSES_SUMMARY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;SEGMENT_NAME                                      PARTITION_NAME             GB
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; --------------------------------------------------------------------------------- ------------------------------ ----------
&lt;span&gt;150&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH__1404287032_0     .&lt;span&gt;000061035&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; WRH$_LATCH_MISSES_SUMMARY                              WRH$_LATCH_MISSE_MXDB_MXSN     .&lt;span&gt;000061035&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;0x07--SYSTEM表空间回收&lt;/p&gt;
&lt;p&gt;查询得知，SYSTEM表空间大多被AUD$占用，即Oracle数据库审计信息，对于审计信息，如无特殊需求，可以直接通过truncate即可回收SYSTEM表空间。相比SYSAUX而言，是不是简单很多。要注意，SYSTEM表空间的日常备份，以及空间预警。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; TRUNCATE TABLE AUD$;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;0x08--扩展点--High Water Mark 水位线&lt;/p&gt;
&lt;p&gt;      在清理SYSAUX表空间时，发现通过DBMS_WORKLOAD_REPOSITORY包清理快照信息时，SYSAUX表空间并未释放，这里涉及到一个Oracle数据库中一个关于Segment（段）的关键概念---HWM（High Water Mark），段中用于表示已使用和未使用空间的边界。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;##Oracle官方文档给出的简要解释
&lt;/span&gt;&lt;span&gt;high water mark (HWM)
&lt;/span&gt;The boundary between used and unused space &lt;span&gt;in&lt;/span&gt; a segment.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         那么，在Oracle数据库中，Segment是什么呢？Segment是占用磁盘空间的一个对象，比如我们常见的Table（表）、表分区、Cluster（聚簇）、Index索引、索引分区、LOB分区、嵌套表、回滚段等，都是不同类型的Segment（段）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;##Oracle官方定义的Segment概念
&lt;/span&gt;&lt;span&gt;segment
&lt;/span&gt;A set of extents allocated &lt;span&gt;for&lt;/span&gt; a specific database &lt;span&gt;object&lt;/span&gt; such as a table, index, or table cluster. User segments, undo segments, and temporary segments are all types of segments.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       在Oracle9i之前，Oracle数据库中，段空间的管理方式是MSSM--manual segment space management，手动段空间管理，段空间的观念里和分配需要调整很多参数进行管理，非常之繁琐。比如FREELISTS等参数，关键是这些参数配置正确合理与否，对Oracle数据库的性能影响非常之大。表的剩余空间的管理与分配都是由链接列表freelist来完成的，因为freelist存在串行的问题因此容易引起往往容易引起段头的争用与空间的浪费，最主要的还是因为需要人为的&lt;span class=&quot;Apple-converted-space&quot;&gt; 花费大量的精力和时间去管理这些争用并监控表的空间利用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    从Oracle9i开始，Oracle数据库推出了ASSM，详见&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/cncpt/logical-storage-structures.html#GUID-4AF2D61A-8675-4D48-97A4-B20F401ADA16&quot; target=&quot;_blank&quot;&gt;ASSM官网说明&lt;/a&gt;，automatic segment space management，自动段空间管理。ASSM，链接列表freelist被位图所取代，它是一个二进制的数组，能够效地管理存储扩展和剩余区块（free block）。&lt;/p&gt;
&lt;p&gt;   高水位线就是数据块在一个段内历史周期内达到的最大的位置，高水位线只增不减，只升不降，直到这个segment对象被truncate，才会降低。这里这个高水位线对数据库性能的影响还是有的。为什么不会释放呢？&lt;/p&gt;
&lt;p&gt;     ①空间利用率：&lt;/p&gt;
&lt;p&gt;上述文中，如果不对表分区进行MOVE，那个高水位线是不会降低的，删除的数据本质上是通过DELETE语句去删除的，但是这部分的空间（EXTEND）还是属于它原有的段（Segment），不能被其他对象所使用，在表空间无法自动扩展或者未开启自动扩展的情况下，这些空间（EXTEND）只能是原来所属表新增数据进行使用；如果在开启了自动扩展的表空间下，且未达到上限的表空间中，这部分的空间将被“遗忘”，无法被再次利用，这就会导致碎片化，DELETE后的空间是无法被其他对象使用的。&lt;/p&gt;
&lt;p&gt;     ②性能影响：&lt;/p&gt;
&lt;p&gt;在Oracle数据库中，全表扫描时，会对HWM高水位线以下的所有数据块进行扫描，虽然数据块中没有任何数据，但是也会一一进行扫描，这对资源是一种不必要的消耗，而且会对数据库的性能产生影响。&lt;/p&gt;
&lt;p&gt;再下去就要说说行迁移、行链接以及ASSM相关参数，PCTFREE，PCTUSED，BUFFER_POOL等等，之后再详细记录吧。&lt;/p&gt;

</description>
<pubDate>Wed, 04 Jul 2018 06:22:00 +0000</pubDate>
<dc:creator>Acdante</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/acdante/p/9228457.html</dc:identifier>
</item>
</channel>
</rss>