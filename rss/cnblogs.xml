<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用 Moq 测试.NET Core - Why Moq? - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9294431.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9294431.html</guid>
<description>&lt;p&gt;当对代码进行测试的时候, 我们经常需要用到一些模拟(mock)技术.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711160224524-1883855191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;绿色&lt;/strong&gt;&lt;/span&gt;的是需要被测试的类, &lt;/em&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;黄色&lt;/span&gt;&lt;/strong&gt;是它的依赖项, &lt;/em&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;灰色&lt;/span&gt;&lt;/strong&gt;的无关的类&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在一个项目里, 我们经常需要把某一部分程序独立出来以便我们可以对这部分进行测试. 这就要求我们不要考虑项目其余部分的复杂性, 我们只想关注需要被测试的那部分. 这里就需要用到模拟(Mock)技术.&lt;/p&gt;
&lt;p&gt;因为, 请仔细看. 我们想要隔离测试的这部分代码对外部有一个或者多个依赖. 所以编写测试代码的时候, 我们需要提供这些依赖. 而针对隔离测试, 并不应该使用生产时用的依赖项, 所以我们使用模拟版本的依赖项, 这些模拟版依赖项只能用于测试时, 它们会使隔离更加容易.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711160423444-549906338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;绿色&lt;/strong&gt;&lt;/span&gt;的是需要被测试的类, &lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;黄色&lt;/strong&gt;&lt;/span&gt;是&lt;strong&gt;Mock&lt;/strong&gt;的依赖项&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Mock技术带来的优点&lt;/h2&gt;
&lt;p&gt;使用Mock技术, 可以有如下的优点:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;提高测试运行速度&lt;/strong&gt;, 例如可以模拟DB, Web Service等比较慢的服务, 以及算法等.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持并行开发&lt;/strong&gt;, 例如实际的依赖项还没有完成开发, 或者等待其他团队开发依赖项.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高测试可靠性&lt;/strong&gt;, 例如有时这个依赖项的bug太多了, 经常由于依赖项的原因导致测试失败, 那么就应该使用mock版本来验证我们自己写的代码.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少开发/测试成本&lt;/strong&gt;, 有时程序可能依赖一些云服务, 这些服务是按调用次数收费的, 那么就可以使用Mock版本来节省这方面的开资, 当然了最后还是需要使用真正的服务测试才行; 有时候组建依赖项太费劲了, 就用mock版本吧, 省时省力.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在有不确定性依赖项的情况下进行测试&lt;/strong&gt;, 有些依赖项有不确定性, 可能无理由的造成测试失败, 这时候就应该使用mock版本的依赖.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;单元测试&lt;/h2&gt;
&lt;p&gt;Mock技术通常在单元测试中使用, 可以使用xUnit来为.NET Core应用做单元测试, 这里有介绍xUnit的文章: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9178672.html#xunit&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9178672.html#xunit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么什么是一个单元? &lt;/p&gt;
&lt;p&gt;这个通常是由团队对系统的理解决定, 可以针对一个类, 也可以针对多个类.&lt;/p&gt;
&lt;p&gt;单元测试通常具有以下特点:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;低级别&lt;/li&gt;
&lt;li&gt;高聚焦&lt;/li&gt;
&lt;li&gt;执行速度快&lt;/li&gt;
&lt;li&gt;容易测试所有执行路径上的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;术语&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Test Double&lt;/strong&gt;&lt;/span&gt; (我认为可以翻译为测试替身), 是所有非真实依赖项的总称.
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;Fake&lt;/span&gt;&lt;/strong&gt;, Fake是那种可以正常工作的实现, 尽管可以正常工作, 但是它们不可以用于生产环境, 例如EFCore里的内存数据库提供商.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;Dummy&lt;/strong&gt;&lt;/span&gt;, 有时候, 被测试方法需要一些参数, 但是这些参数实际上并没有用到, 这时就可以创建dummy, 它们的存在只是为了满足调用方法的参数要求.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;Stub&lt;/strong&gt;&lt;/span&gt;, (&lt;strong&gt;状态测试&lt;/strong&gt;). 它可以使用很直接的方式模拟依赖项的行为. 例如我们可以使用Stub把相关数据放到内存里查询而不是查询真实的数据库; 如果某个测试类需要依赖项的某个Property的值, 那么stub就设定这个值就行.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;Mock&lt;/strong&gt;&lt;/span&gt;, (&lt;strong&gt;行为/交互测试&lt;/strong&gt;). &lt;strong&gt;与Stub不同的是, Mock期待的不是返回值, Mock期待的是动作的执行&lt;/strong&gt;. 它是依赖项的动态包装, 它可以对&lt;strong&gt;哪个方法以什么样的顺序被待测试系统(SUT)调用&lt;/strong&gt;的这个期待行为进行预编程. 也就是说被测试的系统只有按照特定的顺序调用mock依赖项的特定方法, 那么该系统才算测试通过.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;还有其它的一些术语就不介绍了, 主要是这四个.&lt;/p&gt;
&lt;p&gt;对于Stub 和 Mock ,可以看下面两张图例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711155155535-168702297.png&quot; alt=&quot;&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711155205238-1947904830.png&quot; alt=&quot;&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;


&lt;p&gt;官网: &lt;a href=&quot;https://github.com/moq/moq4&quot; target=&quot;_blank&quot;&gt;https://github.com/moq/moq4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moq框架可以用来创建dummy, stub 和 mock. 在本文里把这三个东西都叫做mock对象吧.&lt;/p&gt;
&lt;p&gt;Moq使用一套API来创建stub和mock对象.&lt;/p&gt;


&lt;p&gt;一个简单的.NET Core控制台项目: &lt;a href=&quot;https://github.com/solenovex/Moq-Tutorial-Code&quot; target=&quot;_blank&quot;&gt;https://github.com/solenovex/Moq-Tutorial-Code&lt;/a&gt;, 代码是里面的01 before.&lt;/p&gt;
&lt;p&gt;该项目非常简单, 是关于球员转会业务, 它目前只有三个类. &lt;/p&gt;
&lt;p&gt;TransferApplication, 球员转会申请类:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711163523372-1565995813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;TransferResult, 转会审批结果枚举:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711163632816-380035570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;还有TransferApproval, 转会审批类:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711163703282-291949848.png&quot; alt=&quot;&quot;/&gt;'&lt;/p&gt;
&lt;p&gt;当前的逻辑是, 发起球员转会申请后, 进行审批: 如果总费用大于预算, 那么就直接拒绝; 如果总费用不超标, 并且球员小于30岁, 那么就批准; 但如果球员大于30岁, 并且是超级巨星的话, 这将由老板决定.&lt;/p&gt;

&lt;h2&gt;建立单元测试项目&lt;/h2&gt;
&lt;p&gt;在解决方案里建立一个xUnit类型的项目:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711190413099-441579314.png&quot; alt=&quot;&quot; width=&quot;428&quot; height=&quot;285&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后要保证该项目所用到的库都保持最新:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711190600500-230433918.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后别忘了添加对FootballManager项目的引用:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711190643853-548922551.png&quot; alt=&quot;&quot; width=&quot;304&quot; height=&quot;202&quot;/&gt;&lt;/p&gt;

&lt;p&gt;打开Text Explorer, 可以看到里面有一个待测的单元测试:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711190815368-126863297.png&quot; alt=&quot;&quot; width=&quot;906&quot; height=&quot;486&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;做一个简单的单元测试&lt;/h2&gt;
&lt;p&gt;把UnitTest1改成下面这个简单的单元测试:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711192212226-999938966.png&quot; alt=&quot;&quot; width=&quot;514&quot; height=&quot;465&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重新Build后, 可以看到单元测试的名称更新了.&lt;/p&gt;

&lt;p&gt;点击Run All, 运行单元测试, 结果成功:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711192330010-700197325.png&quot; alt=&quot;&quot; width=&quot;826&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;

&lt;p&gt;随后再添加一个简单的单元测试:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711192811553-199684505.png&quot; alt=&quot;&quot; width=&quot;480&quot; height=&quot;357&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Build, 后就会出现这个测试:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711192906635-50710085.png&quot; alt=&quot;&quot; width=&quot;472&quot; height=&quot;119&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Run All, 测试也会成功:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711192944309-1040477809.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;112&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;添加依赖&lt;/h2&gt;
&lt;p&gt;这时, 有一些需求的变化, 球员转会审批前, 需要通过体检.&lt;/p&gt;
&lt;p&gt;首先在转会申请类里面添加两个球员的属性:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711193731361-2030604252.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;249&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后添加一个体检的接口:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711193918427-1537507919.png&quot; alt=&quot;&quot; width=&quot;575&quot; height=&quot;130&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两个方法的作用是一样的, 但是调用方法略有不同.&lt;/p&gt;

&lt;p&gt;但是此时, 该接口的实现类还没有开发完毕:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711194038218-437436629.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;254&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在转会审批类里面, 需要添加这个依赖, 使用的是接口:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711194532211-878042043.png&quot; alt=&quot;&quot; width=&quot;799&quot; height=&quot;476&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在单元测试类里面, 我为转会球员添加了这两个属性, 但是审批类会报错, 因为没有加入依赖项:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711194815213-2055704361.png&quot; alt=&quot;&quot; width=&quot;461&quot; height=&quot;333&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以测试的时候需要注入这个依赖项IPhysicalExamination, 但是PhysicalExamination类还没有做完(里面的方法都没有实现), 所以我们无法new出来这个类.&lt;/p&gt;
&lt;p&gt;这时, 我们也许可以传null进去?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711195222797-452714737.png&quot; alt=&quot;&quot; width=&quot;380&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这时, 项目是不报错了.&lt;/p&gt;
&lt;p&gt;跑单元测试, Run All:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711195332605-1167109656.png&quot; alt=&quot;&quot; width=&quot;754&quot; height=&quot;145&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试失败, 抛出NullReferenceException. 而这个异常导致了测试无法正常进行.&lt;/p&gt;

&lt;p&gt;所以, 我们需要&lt;span&gt;&lt;strong&gt;Moq&lt;/strong&gt;&lt;/span&gt;, 它可以提供一个Mock(模拟)版本的IPhysicalExamination, 并把它传递到审批类的构造函数里.&lt;/p&gt;

&lt;h2&gt;安装Moq&lt;/h2&gt;
&lt;p&gt;在单元测试项目添加Moq:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180711195843625-1259081880.png&quot; alt=&quot;&quot; width=&quot;318&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Moq的第一篇先到这.&lt;/p&gt;

</description>
<pubDate>Wed, 11 Jul 2018 22:41:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9294431.html</dc:identifier>
</item>
<item>
<title>Java并发编程之Timer源码分析 - 狂小白</title>
<link>http://www.cnblogs.com/huangjuncong/p/9296897.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/9296897.html</guid>
<description>&lt;p&gt;&lt;strong&gt;timer在JDK里面，是很早的一个API了。具有延时的，并具有周期性的任务，在newScheduledThreadPool出来之前我们一般会用Timer和TimerTask来做，但是Timer存在一些缺陷，为什么这么说呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Timer只创建唯一的线程来执行所有Timer任务。如果一个timer任务的执行很耗时，会导致其他TimerTask的时效准确性出问题。例如一个TimerTask每10秒执行一次，而另外一个TimerTask每40ms执行一次，重复出现的任务会在后来的任务完成后快速连续的被调用4次，要么完全“丢失”4次调用。Timer的另外一个问题在于，如果TimerTask抛出未检查的异常会终止timer线程。这种情况下，Timer也不会重新回复线程的执行了；它错误的认为整个Timer都被取消了。此时已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这里做了一个小的 demo 来复现问题，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.hjc;

import java.util.Timer;
import java.util.TimerTask;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/7/12.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TimerTest {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建定时器对象&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; Timer timer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Timer();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加任务1,延迟500ms执行&lt;/span&gt;
        timer.schedule(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimerTask() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---one Task---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    e.printStackTrace();
                }
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }, &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加任务2，延迟1000ms执行&lt;/span&gt;
        timer.schedule(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimerTask() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
                    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---two Task---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                        e.printStackTrace();
                    }
                }
            }
        }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;如上代码先添加了一个任务在 500ms 后执行，然后添加了第二个任务在 1s 后执行，我们期望的是当第一个任务输出 ---one Task--- 后等待 1s 后第二个任务会输出 ---two Task---，&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;但是执行完毕代码后输出结果如下所示：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180711215530964-401715310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;例子2，&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Shedule {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; start;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        TimerTask task &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimerTask() {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(System.currentTimeMillis()-&lt;span&gt;start);
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;);
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e){
                    e.printStackTrace();
                }
            }
        };

        TimerTask task1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TimerTask() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(System.currentTimeMillis()-&lt;span&gt;start);
            }
        };

        Timer timer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Timer();
        start &lt;/span&gt;=&lt;span&gt; System.currentTimeMillis();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动一个调度任务，1S钟后执行&lt;/span&gt;
        timer.schedule(task,&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动一个调度任务，3S钟后执行&lt;/span&gt;
        timer.schedule(task1,&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;);


    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面程序我们预想是第一个任务执行后，第二个任务3S后执行的，即输出一个1000，一个3000.&lt;/p&gt;
&lt;p&gt;实际运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180712012328610-403515547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实际运行结果并不如我们所愿。世界结果，是过了4S后才输出第二个任务，即4001约等于4秒。那部分时间时间到哪里去了呢？那个时间是被我们第一个任务的sleep所占用了。&lt;/p&gt;
&lt;p&gt;现在我们在第一个任务中去掉Thread.sleep（）；这一行代码，运行是否正确了呢？运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180712012414708-1088968560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到确实是第一个任务过了1S后执行，第二个任务在第一个任务执行完后过3S执行了。&lt;/p&gt;
&lt;p&gt;这就说明了&lt;strong&gt;Timer只创建唯一的线程来执行所有Timer任务。如果一个timer任务的执行很耗时，会导致其他TimerTask的时效准确性出问题&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;Timer 实现原理分析&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;下面简单介绍下 Timer 的原理，如下图是 Timer 的原理模型介绍：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180712014111978-1455613185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.其中 TaskQueue 是一个平衡二叉树堆实现的优先级队列，每个 Timer 对象内部有唯一一个 TaskQueue 队列。用户线程调用 timer 的 schedule 方法就是把 TimerTask 任务添加到 TaskQueue 队列，在调用 schedule 的方法时候 long delay 参数用来说明该任务延迟多少时间执行。&lt;/p&gt;
&lt;p&gt;2.TimerThread 是具体执行任务的线程，它从 TaskQueue 队列里面获取优先级最小的任务进行执行，需要注意的是只有执行完了当前的任务才会从队列里面获取下一个任务而不管队列里面是否有已经到了设置的 delay 时间，一个 Timer 只有一个 TimerThread 线程，所以可知 Timer 的内部实现是一个多生产者单消费者模型。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;从实现模型可以知道要探究上面的问题只需看 TimerThread 的实现就可以了，TimerThread 的 run 方法主要逻辑源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
   &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
       mainLoop();
   } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有人杀死了这个线程，表现得好像Timer已取消&lt;/span&gt;
&lt;span&gt;       synchronized(queue) {
           newTasksMayBeScheduled &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
           queue.clear();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 消除过时的引用&lt;/span&gt;
&lt;span&gt;       }
   }
}
 &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; mainLoop() {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                TimerTask task;
                boolean taskFired;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从队列里面获取任务时候要加锁&lt;/span&gt;
&lt;span&gt;                synchronized(queue) {
                    ......
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (taskFired)  
                    task.run();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行任务&lt;/span&gt;
            } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(InterruptedException e) {
            }
        }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可知当任务执行过程中抛出了除 InterruptedException 之外的异常后，唯一的消费线程就会因为抛出异常而终止，那么队列里面的其他待执行的任务就会被清除。所以 TimerTask 的 run 方法内最好使用 try-catch 结构 catch 主可能的异常，不要把异常抛出到 run 方法外。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;其实要实现类似 Timer 的功能使用 ScheduledThreadPoolExecutor 的 schedule 是比较好的选择。ScheduledThreadPoolExecutor 中的一个任务抛出了异常，其他任务不受影响的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;ScheduledThreadPoolExecutor 例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/7/12.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ScheduledThreadPoolExecutorTest {
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = &lt;span&gt;new&lt;/span&gt; ScheduledThreadPoolExecutor(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        scheduledThreadPoolExecutor.schedule(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()  {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---one Task---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    e.printStackTrace();
                }
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

        }, &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;, TimeUnit.MICROSECONDS);

        scheduledThreadPoolExecutor.schedule(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;5&lt;/span&gt;;++&lt;span&gt;i) {
                    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---two Task---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

            }

        }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;, TimeUnit.MICROSECONDS);

        scheduledThreadPoolExecutor.shutdown();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180712014547157-1060917296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之所以 ScheduledThreadPoolExecutor 的其他任务不受抛出异常的任务的影响是因为 ScheduledThreadPoolExecutor 中的 ScheduledFutureTask 任务中 catch 掉了异常，但是在线程池任务的 run 方法内使用 catch 捕获异常并打印日志是最佳实践。&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 17:47:00 +0000</pubDate>
<dc:creator>狂小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/9296897.html</dc:identifier>
</item>
<item>
<title>一个“Hello World”理解JVM运行时数据区 - ntchan</title>
<link>http://www.cnblogs.com/JunFengChan/p/9250585.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JunFengChan/p/9250585.html</guid>
<description>&lt;p&gt;先上一张JVM体系结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435918/201807/435918-20180701233830808-854564995.png&quot; alt=&quot;&quot; width=&quot;1040&quot; height=&quot;601&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1）运行时数据区：经过编译生成的字节码文件（class文件），由class loader(类加载子系统)加载后交给执行引擎执行。在执行引擎执行的过程中产生的数据会存储在一块内存区域。这块内存区域就是运行时区域&lt;/p&gt;
&lt;p&gt;2）程序计数器：用于记录当前线程的正在执行的字节码指令位置。由于虚拟机的多线程是切换线程并分配cpu执行时间的方式实现的，不同线程的执行位置都需要记录下来，因此程序计数器是线程私有的&lt;/p&gt;
&lt;p&gt;3）虚拟机栈：虚拟机栈是java方法执行的内存结构，虚拟机会在每个java方法执行时创建一个“栈桢”，用于存储局部变量表,操作数栈，动态链接，方法出口等信息。当方法执行完毕时，该栈桢会从虚拟机栈中出栈。其中局部变量表包含基本数据类型和对象引用；&lt;/p&gt;
&lt;p&gt;　  在java虚拟机规范中，对这个区域规定了两种异常状态：如果线程请求的栈的深度大于虚拟机允许的深度，将抛出StackOverFlowError异常（栈溢出），如果虚拟机栈可以动态扩展（现在大部分java虚拟机都可以动态扩展，只不过java虚拟机规范中也允许固定长度的java虚拟机栈），如果扩展时无法申请到足够的内存空间，就会抛出OutOfmMemoryError异常（没有足够的内存）&lt;/p&gt;
&lt;p&gt;4）本地方法栈：类似java方法的执行有虚拟机栈，本地方法的执行则对应有本地方法栈&lt;/p&gt;
&lt;p&gt;5）方法区：用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。线程共享（看存储的数据就知道了）&lt;/p&gt;
&lt;p&gt;     java虚拟机规范对方法区的限制非常宽松，除了和java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样永久存在了。这区域的内存回收目标重要是针对常量池的回收和类型的卸载，一般来说这个内存区域的回收‘成绩’比较难以令人满意。尤其是类型的卸载条件非常苛刻，但是这部分的回收确实是必要的。在sun公司的bug列表中，曾出现过的若干个严重的bug就是由于低版本的HotSpot虚拟机对此区域未完成回收导致的内存溢出。&lt;/p&gt;
&lt;p&gt;6）java堆（java Heap）：堆的主要作用是存放程序运行过程中创建的对象实例，因为要存放的对象实例有可能会极多，因此也是虚拟机内存管理中最大的一块。并且由于硬件条件有限，所以需要不断回收已“无用”的实例对象来腾出空间给新生成的实例对象；因此java的垃圾回收主要是针对堆进行回收的（还有方法区的常量池），java堆很多时候也被称为GC堆（Garbage Collected Heap）。&lt;/p&gt;
&lt;p&gt;7）类加载机制（Class Loader）：类加载子系统是根据一个类的全限定名来加载该类的二进制流到内存中，在JVM中将形成一份描述Class结构的元信息对象(方法区)，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好！说了这么多关键字，再拿例子来讲解一下这些关键字：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A.图1是我们写的HelloWorld.java，通过IDE或命令：javac HelloWorld 编译生成16进制的HelloWorld.class(字节码文件，见图3)，想读懂16进制字节可参考：&lt;a href=&quot;http://www.importnew.com/24088.html&quot; target=&quot;_blank&quot;&gt;一文让你明白java字节码&lt;/a&gt; ；但一般IDE会自动转译成图2的指令；或者通过命令：javap -verbose HelloWorld 进行转译。&lt;/p&gt;
&lt;p&gt;（图1）HelloWorld.java&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435918/201807/435918-20180711224513729-1500152073.png&quot; alt=&quot;&quot; width=&quot;560&quot; height=&quot;206&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图2）HelloWorld.class&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435918/201807/435918-20180711225256301-1931047864.png&quot; alt=&quot;&quot; width=&quot;560&quot; height=&quot;634&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图3）16进制的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435918/201807/435918-20180711224903654-256203708.png&quot; alt=&quot;&quot; width=&quot;558&quot; height=&quot;444&quot;/&gt;&lt;/p&gt;
&lt;p&gt;B.接着，当我们通过IDE或者命令：java HelloWorld 运行这个class文件时，字节码文件（class文件）通过&lt;strong&gt;类加载机制&lt;/strong&gt;加载完毕交付给执行引擎执行；类加载机制把HelloWrold类的信息、静态变量（例子中没加）、常量（例子中没加，&lt;strong&gt;常量会加载到方法区的常量池，这和静态变量不一样&lt;/strong&gt;）等加载到方法区中，接下来如果需要创建该类的对象，需要通过new后面带的参数到方法区进行查找类相关信息。&lt;/p&gt;
&lt;p&gt;C.类加载完后，虚拟机会检查程序的入口，虚拟机中程序的执行入口为main函数，如HelloWorld.class中，，&lt;strong&gt;执行引擎&lt;/strong&gt;找到main函数开始执行指令，并生成一个“桢栈”入栈至&lt;strong&gt;虚拟机栈&lt;/strong&gt;的栈顶；我们可以看到（图2）在main方法下面的命令：&lt;span&gt;0  new java.lang.StringBuilder [16] &lt;/span&gt; 表示创建一个String对象，创建的String对象实例会在&lt;strong&gt;java堆（Heap）&lt;/strong&gt;中分配内存存储，并把该指令位置“0”记录到当前线程的&lt;strong&gt;程序计数器&lt;/strong&gt;中；&lt;span&gt;3  dup &lt;/span&gt;然后把该对象的引用压入&lt;strong&gt;虚拟机栈&lt;/strong&gt;中，并把该指令位置“3”记录到当前线程的&lt;strong&gt;程序计数器&lt;/strong&gt;中；4  &lt;span&gt;ldc &amp;lt;String &quot;Hello&quot;&amp;gt; [18]&lt;/span&gt; 从&lt;strong&gt;字符串常量池&lt;/strong&gt;(从jdk1.7开始，字符串常量池被移动到&lt;strong&gt;java堆&lt;/strong&gt;)加载字符串常量Hello，并更新指令位置到&lt;strong&gt;程序计数器；...&lt;/strong&gt;如果执行过程中有本地方法的指令，则会在&lt;strong&gt;本地方法栈&lt;/strong&gt;中进行出入栈；这里有个点注意一下，请看main函数指令16的位置：&lt;span&gt; 16  new java.lang.StringBuilder [31]&lt;/span&gt; 这里创建了一个StringBuilder对象，自jdk5开始已对这种类型的字符串拼接进行了优化，具体自行谷歌补充。&lt;/p&gt;
&lt;p&gt;D.&lt;strong&gt;执行引擎&lt;/strong&gt;执行指令过程中，按需调用&lt;strong&gt;本地库接口&lt;/strong&gt;以执行&lt;strong&gt;本地库&lt;/strong&gt;方法，如new指令、输出屏幕等操作&lt;/p&gt;

&lt;p&gt;以上就是一个HelloWorld执行过程在JVM中发生的事情。&lt;/p&gt;

&lt;p&gt; 参考：&lt;/p&gt;
&lt;p&gt;《深入理解Java虚拟机:JVM高级特性与最佳实践》一书&lt;/p&gt;
&lt;p&gt;  https://www.cnblogs.com/IUbanana/p/7067362.html &lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 16:51:00 +0000</pubDate>
<dc:creator>ntchan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JunFengChan/p/9250585.html</dc:identifier>
</item>
<item>
<title>.NetCore2.1 WebAPI 根据swagger.json自动生成客户端代码 - 长沙大鹏</title>
<link>http://www.cnblogs.com/hunanzp/p/9297361.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hunanzp/p/9297361.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上一篇博客中我们可以得知通过Swagger插件可以很方便的提供给接口开发者在线调试，但是实际上Swagger附带的功能还有很多，&lt;/p&gt;
&lt;p&gt;比如使用NSwag生成客户端调用代码，进一步解放接口开发者。&lt;/p&gt;

&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-103&quot;&gt;NSwag是一个发布在GitHub上的开源项目，它可以根据Swagger说明页上的swagger.json文件生成C#、TypeScript客户端代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-103&quot;&gt;NSwag的项目地址:&lt;a title=&quot;NSwag&quot; href=&quot;https://github.com/RSuter/NSwag&quot; target=&quot;_blank&quot;&gt;https://github.com/RSuter/NSwag&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-103&quot;&gt;Nswag提供4种代码生成方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-111&quot;&gt;1、使用 NSwagStudio，这是一款 Windows 桌面应用，用于在 C# 和 TypeScript 中为 API 生成客户端代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-112&quot;&gt;2、使用 NSwag.CodeGeneration.CSharp 或 NSwag.CodeGeneration.TypeScript NuGet 包在项目中执行代码生成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-113&quot;&gt;3、使用命令行中的 NSwag。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-114&quot;&gt;4、使用 NSwag.MSBuild NuGet 包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;e015e-114&quot;&gt;这里推荐使用NSwagStudio，可以从GitHub上下载该工具，地址:&lt;a href=&quot;https://github.com/RSuter/NSwag/wiki/NSwagStudio&quot; target=&quot;_blank&quot;&gt;https://github.com/RSuter/NSwag/wiki/NSwagStudio&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载后开始安装，安装完毕后打开NSwagStudio，如下图，在左侧选择Tab页菜单里选择Documents&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349354/201807/349354-20180711230501231-189032239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图框框选中的几点，我们需要留意。其中Swagger Specification URL就是我们WebAPI的swagger.json的&lt;strong&gt;在线地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果点击【Create local Copy 】按钮时你的WebAPI未在线则代码生成工具会弹出错误对话框，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349354/201807/349354-20180711230834185-917628132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 所以采取读取Swagger Specification URL 方式进行生成代码的前提条件是你必须保证swagger.json文件能在线读取！&lt;/p&gt;
&lt;p&gt; 其次你可以选择RunTime（运行时），这里应该是服务端WebAPI的运行时(毕竟TypeScript是不关心你服务端是.NET Core还是.NET Framework).&lt;/p&gt;
&lt;p&gt;因为我的环境是.NET Core2.1，所以这里选择NET Core21。&lt;/p&gt;
&lt;p&gt;接下来，点击【Create local Copy】按钮，点击后NSwagStudio会与WebAPI服务端进行交互，成功后会将swagger.json文件格式化到左边的文本编辑器中，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349354/201807/349354-20180711231802205-2076056979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此时，你可以在右侧的Outputs中勾选你需要输出的文件格式，这里我选择TypeScript和CSharp Client，&lt;/p&gt;
&lt;p&gt;这个地方有个C# WebAPI Controller，我有点纳闷，我都有swagger.json文件了绝壁是已经存在webapi了，&lt;/p&gt;
&lt;p&gt;没有必要反向再去生成一遍webapi的控制器啦。 不懂，反正只管生成客户端代码就好。&lt;/p&gt;
&lt;p&gt;我们勾选好后下面就会出现相应的输出配合页面，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349354/201807/349354-20180711232222400-1851122296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 我们选择CSharp Client页面，该页面左侧分为Setting和Output两个页面，Setting页可以对输出的cs文件进行配置，如命名空间、类名称、输出文件路径等等(很多配置我也不会....)&lt;/p&gt;
&lt;p&gt;我们点击【Generate Outputs】后NSwagStudio会根据配置生成客户端操作类，在Output页面即可检查，检查无误后再点击【Generate Files】可将类文件导出到配置的输出目录。&lt;/p&gt;
&lt;p&gt;TypeScript亦是如此，同时NSwagStudio也可支持加载DLL反射生成，具体方法可根据官网操作(毕竟可以直接使用json文件在线生成没必要再自己手工选择dll..)&lt;/p&gt;

&lt;p&gt;这里截图看SwagerUI页和NSwagStudio生成后的客户端cs文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349354/201807/349354-20180711234612056-790062482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成的客户端C#代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;164&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//----------------------
// &amp;lt;auto-generated&amp;gt;
//     Generated using the NSwag toolchain v11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// &amp;lt;/auto-generated&amp;gt;
//----------------------

namespace Test
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode(&quot;NSwag&quot;, &quot;11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))&quot;)]
    public  partial class Client 
    {
        private string _baseUrl = &quot;http://localhost:58985&quot;;
        private System.Lazy&amp;lt;Newtonsoft.Json.JsonSerializerSettings&amp;gt; _settings;
    
        public Client()
        {
            _settings = new System.Lazy&amp;lt;Newtonsoft.Json.JsonSerializerSettings&amp;gt;(() =&amp;gt; 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// &amp;lt;summary&amp;gt;巴拉巴拉&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        public System.Threading.Tasks.Task ApiTestGetAsync()
        {
            return ApiTestGetAsync(System.Threading.CancellationToken.None);
        }
    
        /// &amp;lt;summary&amp;gt;巴拉巴拉&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        /// &amp;lt;param name=&quot;cancellationToken&quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
        public async System.Threading.Tasks.Task ApiTestGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : &quot;&quot;).Append(&quot;/api/Test&quot;);
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod(&quot;GET&quot;);
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ =&amp;gt; h_.Key, h_ =&amp;gt; h_.Value);
                        if (response_.Content != null &amp;amp;&amp;amp; response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == &quot;200&quot;) 
                        {
                            return;
                        }
                        else
                        if (status_ != &quot;200&quot; &amp;amp;&amp;amp; status_ != &quot;204&quot;)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException(&quot;The HTTP status code of the response was not expected (&quot; + (int)response_.StatusCode + &quot;).&quot;, (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        public System.Threading.Tasks.Task ApiTestPostAsync(string value)
        {
            return ApiTestPostAsync(value, System.Threading.CancellationToken.None);
        }
    
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        /// &amp;lt;param name=&quot;cancellationToken&quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
        public async System.Threading.Tasks.Task ApiTestPostAsync(string value, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : &quot;&quot;).Append(&quot;/api/Test&quot;);
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(value, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(&quot;multipart/form-data&quot;);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod(&quot;POST&quot;);
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ =&amp;gt; h_.Key, h_ =&amp;gt; h_.Value);
                        if (response_.Content != null &amp;amp;&amp;amp; response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == &quot;200&quot;) 
                        {
                            return;
                        }
                        else
                        if (status_ != &quot;200&quot; &amp;amp;&amp;amp; status_ != &quot;204&quot;)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException(&quot;The HTTP status code of the response was not expected (&quot; + (int)response_.StatusCode + &quot;).&quot;, (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// &amp;lt;summary&amp;gt;我是get测试&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        public System.Threading.Tasks.Task&amp;lt;string&amp;gt; ApiTestByIdGetAsync(int id)
        {
            return ApiTestByIdGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// &amp;lt;summary&amp;gt;我是get测试&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        /// &amp;lt;param name=&quot;cancellationToken&quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
        public async System.Threading.Tasks.Task&amp;lt;string&amp;gt; ApiTestByIdGetAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException(&quot;id&quot;);
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : &quot;&quot;).Append(&quot;/api/Test/{id}&quot;);
            urlBuilder_.Replace(&quot;{id}&quot;, System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod(&quot;GET&quot;);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(&quot;application/json&quot;));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ =&amp;gt; h_.Key, h_ =&amp;gt; h_.Value);
                        if (response_.Content != null &amp;amp;&amp;amp; response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == &quot;200&quot;) 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject&amp;lt;string&amp;gt;(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException(&quot;Could not deserialize the response body.&quot;, (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != &quot;200&quot; &amp;amp;&amp;amp; status_ != &quot;204&quot;)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException(&quot;The HTTP status code of the response was not expected (&quot; + (int)response_.StatusCode + &quot;).&quot;, (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        public System.Threading.Tasks.Task ApiTestByIdPutAsync(int id, string value)
        {
            return ApiTestByIdPutAsync(id, value, System.Threading.CancellationToken.None);
        }
    
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        /// &amp;lt;param name=&quot;cancellationToken&quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
        public async System.Threading.Tasks.Task ApiTestByIdPutAsync(int id, string value, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException(&quot;id&quot;);
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : &quot;&quot;).Append(&quot;/api/Test/{id}&quot;);
            urlBuilder_.Replace(&quot;{id}&quot;, System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(value, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(&quot;multipart/form-data&quot;);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod(&quot;PUT&quot;);
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ =&amp;gt; h_.Key, h_ =&amp;gt; h_.Value);
                        if (response_.Content != null &amp;amp;&amp;amp; response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == &quot;200&quot;) 
                        {
                            return;
                        }
                        else
                        if (status_ != &quot;200&quot; &amp;amp;&amp;amp; status_ != &quot;204&quot;)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException(&quot;The HTTP status code of the response was not expected (&quot; + (int)response_.StatusCode + &quot;).&quot;, (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// &amp;lt;summary&amp;gt;小魔仙&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        public System.Threading.Tasks.Task ApiTestByIdDeleteAsync(int id)
        {
            return ApiTestByIdDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// &amp;lt;summary&amp;gt;小魔仙&amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Success&amp;lt;/returns&amp;gt;
        /// &amp;lt;exception cref=&quot;SwaggerException&quot;&amp;gt;A server side error occurred.&amp;lt;/exception&amp;gt;
        /// &amp;lt;param name=&quot;cancellationToken&quot;&amp;gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&amp;lt;/param&amp;gt;
        public async System.Threading.Tasks.Task ApiTestByIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException(&quot;id&quot;);
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : &quot;&quot;).Append(&quot;/api/Test/{id}&quot;);
            urlBuilder_.Replace(&quot;{id}&quot;, System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod(&quot;DELETE&quot;);
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ =&amp;gt; h_.Key, h_ =&amp;gt; h_.Value);
                        if (response_.Content != null &amp;amp;&amp;amp; response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == &quot;200&quot;) 
                        {
                            return;
                        }
                        else
                        if (status_ != &quot;200&quot; &amp;amp;&amp;amp; status_ != &quot;204&quot;)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException(&quot;The HTTP status code of the response was not expected (&quot; + (int)response_.StatusCode + &quot;).&quot;, (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null &amp;amp;&amp;amp; value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType&amp;lt;object&amp;gt;((System.Array) value);
                return string.Join(&quot;,&quot;, System.Linq.Enumerable.Select(array, o =&amp;gt; ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    

    [System.CodeDom.Compiler.GeneratedCode(&quot;NSwag&quot;, &quot;11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))&quot;)]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary&amp;lt;string, System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt;&amp;gt; Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary&amp;lt;string, System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt;&amp;gt; headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format(&quot;HTTP Response: \n\n{0}\n\n{1}&quot;, Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode(&quot;NSwag&quot;, &quot;11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))&quot;)]
    public partial class SwaggerException&amp;lt;TResult&amp;gt; : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary&amp;lt;string, System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt;&amp;gt; headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;不得不赞叹Swagger的强大，它的出现解放了多少程序员啊，后续但凡有客户端码农说不会调用哥的API，哥都可以直接给他代码生成器生成的代码，一个字：&lt;strong&gt;爽。&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 11 Jul 2018 15:52:00 +0000</pubDate>
<dc:creator>长沙大鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hunanzp/p/9297361.html</dc:identifier>
</item>
<item>
<title>数字信号处理、数学形态学、MATLAB GUI实现简单找茬软件 - 维轲Vitcou</title>
<link>http://www.cnblogs.com/vitcou/p/9283041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vitcou/p/9283041.html</guid>
<description>&lt;h3&gt;0、简介&lt;/h3&gt;
&lt;p&gt;　　这个小作品是我的数字图像处理课程设计，应用基本的图像处理知识与MATLAB的基本脚本编程，实现一个简单的找茬软件。软件实现过程中使用到的找茬游戏图片来源有“梦幻找茬”、“图图找茬”。如有兴趣的人可以亲自玩下这两个游戏。本程序主要目的是练习数字图像处理的基本知识、数学形态学以及MATLAB语言。由于时间与能力的有限，并没有做的很好，各位大神小踩，谢谢。&lt;/p&gt;
&lt;h3&gt;1、所需知识&lt;/h3&gt;
&lt;p&gt;　　matlab基本语言；&lt;/p&gt;
&lt;p&gt;　　matlab GUI实现；&lt;/p&gt;
&lt;p&gt;　　数字图像处理基本知识；&lt;/p&gt;
&lt;p&gt;　　数学形态学基本知识；&lt;/p&gt;
&lt;h3&gt; 2、算法函数实现过程&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180710234224608-1969377541.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　1）图像获取分割&lt;/p&gt;
&lt;p&gt;　　　　原本的课程设计要求就是要求使用的是游戏界面截图，使用的图片就是存在两边的图，两边的图是存在差异区域的，首先要做的就是将图像简单进行竖直平分分割。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180710234314384-93759706.png&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;307&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180710235310480-517128347.png&quot; alt=&quot;&quot; width=&quot;335&quot; height=&quot;306&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2）计算图像偏移裁剪&lt;/p&gt;
&lt;p&gt;　　　　由于一般的截图左右两边的图并不能保证对称，所以我们需要计算利用图片的25%中心区域来计算左右两边图的偏移量，再使用这偏移量来裁剪使得两边的图片尽可能重合。这样查找差异区域的时候就不会出现额外因偏移出现的错误标定。由于我测试的图像使用的是800*500的图，逐个像素点计算，共需要比较的像素点个数大概是800*500*0.25*20=2000 000次，所以一般的电脑都需要3分钟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711224058845-69209491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3）三通道不相同区域提取&lt;/p&gt;
&lt;p&gt;　　　　原本课程设计的要求是用彩色转灰度后再提取出不同的区域，但是转换得到的灰度的茬的差异有些存在的不明显，所以最后我选择使用红蓝绿三通道来分离出茬的区域。利用原有的颜色差异来分离出茬的区域成效明显好于灰度图像提取。我这里是直接使用MATLAB内置有的imabsdiff()函数来直接获取各个通道不同的区域。然后将各个通道不同的区域相加起来，再使用imopen()，imclose()函数进行开闭运算。实际的图像看起来是一致的颜色，其实存在有一定的差值，甚至是较大的毛刺，所以必须是使用开闭运算来消除毛刺与噪声。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711224129078-1821151119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4）矩形框标定显示&lt;/p&gt;
&lt;p&gt;　　　　为了更明显的显示出茬的位置，最后使用一个矩形标定的函数来绘制出茬的区域。首先是使用MATLAB自带的工具函数bwlabel()获取茬区域的连通区域，获得到数据有标定标定好的连通区域与连通区域个数。 再用regionprops()获取连通区域信息，得到的信息有面积&quot;area&quot;、矩形框位置&quot;boundingbox&quot;、连通区域中心&quot;central&quot;。得到这些数据，就可以很好的使用矩形框定函数框定茬的位置。&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711230419996-1930184768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5）MATLAB GUI实现&lt;/p&gt;
&lt;p&gt;　　　　MATLAB的GUI还是比较简单的，初学者需要注意的就只有&lt;/p&gt;
&lt;p&gt;　　　　　　a.初始化函数&lt;/p&gt;
&lt;p&gt;　　　　　　b.使用句柄传参、或者设置全局变量传参&lt;/p&gt;
&lt;p&gt;　　　　　　c.按键响应事件，实际就是调用的函数&lt;/p&gt;
&lt;p&gt;　　　　　MATLAB的所有显示都可以是控件显示的，如 ：set(handles.radiobutton1,'visible','off');  就是设置单选框的隐藏不显示，涉及到的参数键与值都可以在GUI绘制的界面的属性中找到。最后一件事情就是MATLAB的GUI实现之后可以打包成可执行文件，但是需要使用的电脑需要安装编译电脑上的MCRInstaller.exe程序。所以MATLAB的GUI程序几乎是不可能脱离MATLAB运行，因为GUI打包几乎都涉及到MATLAB内置的画图函数，所以目的主机必须要拥有MATLAB整个运行库才可以运行GUI。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711231932179-1500256562.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711231943330-1335787349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711232233739-90136051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/837605/201807/837605-20180711232315733-1794797655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、找茬算法源码&lt;/h3&gt;
&lt;p&gt;主文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;161&quot;&gt;
&lt;pre class=&quot;brush:matlab;gutter:true;&quot;&gt;
clear
close all;
%%读取图片，并显示
fileName = 'test14.png';
img = imread(fileName);
% figure();imshow(img);title('原图');

%获取图片信息  
[image_h,image_w,image_c] = size(img);

image_w2 = ceil(image_w/2);

%获取灰度图像
img_gray = rgb2gray(img);





%%对源图片对半竖直分割
img_M1 = zeros(image_h,image_w2,3);
img_M2 = zeros(image_h,image_w2,3);

img_M1 = imcrop(img,[0,0,image_w2,image_h]);
img_M1 = uint8(img_M1);
img_M1_gray = rgb2gray(img_M1);
figure(); imshow(img_M1);title('原左图');

img_M2 = imcrop(img,[image_w2+1,0,image_w2,image_h]);
img_M2 = uint8(img_M2);
img_M2_gray = rgb2gray(img_M2);
 figure(); imshow(img_M2);title('原右图');


%%判断是否需要一键找茬
% yijian_flag = 0;
% char = input('是否一键找茬，y/n：','s');
% if char=='y'
%     yijian_flag = 1;
% end
% num_fine = 0;
% %输入偏移量
% if yijian_flag == 0
%     while(~num_fine)
%         pic = input('请确定要偏移的图，l/r：','s');
%         pic_dx = input('请输入竖直偏移量（0~8）：');
%         pic_dy = input('请输入竖直偏移量（0~8）：');
%         
%         if( ((pic=='l')| (pic=='r'))&amp;amp;(pic_dx&amp;gt;=0)&amp;amp; (pic_dx&amp;lt;=8)&amp;amp;(pic_dy&amp;gt;=0)&amp;amp; (pic_dy&amp;lt;=8) )
%             num_fine = 1;
%         else
%              fprintf('输入错误，请重新输入!!!\n');
%         end
%     end
% else
%     pic = 'l';
%     pic_dx = 0;
%     pic_dy = 0;
% end


%针对test01.jpg默认值
pic = 'l';
pic_dx = 0;
pic_dy = 0;

%%进行图片偏移
img_M1_O = zeros(image_h+pic_dx,image_w2+pic_dy,3);
img_M2_O = zeros(image_h+pic_dx,image_w2+pic_dy,3); 
img_M1_O = uint8(img_M1_O);
img_M2_O = uint8(img_M2_O);
img_M1_O(:,:,:) = 255;
img_M2_O(:,:,:) = 255;

    
    
if pic==1
    for i = 1:image_h
        for  j = 1:image_w2
            img_M1_O(i+pic_dx,j+pic_dy,:) = img_M1(i,j,:);
        end
    end
    
    for i = 1:image_h
        for  j = 1:image_w2
            img_M2_O(i,j,:) = img_M2(i,j,:);
        end
    end
    
else
    for i = 1:image_h
       for  j = 1:image_w2
            img_M2_O(i+pic_dx,j+pic_dy,:) = img_M2(i,j,:);
        end
    end
    
    for i = 1:image_h
        for  j = 1:image_w2
            img_M1_O(i,j,:) = img_M1(i,j,:);
        end
    end
    
end
figure();imshow(img_M1_O);title('左图偏移后');
figure();imshow(img_M2_O);title('右图偏移后');


%%计算出左右图片偏差值
img_M1_gray = rgb2gray(img_M1_O);
img_M2_gray = rgb2gray(img_M2_O);

% 根据图片中心锁定图片中心
image_h41 = ceil(image_h/4);
image_w41 = ceil(image_w2/4);

image_h43 = image_h41*3;
image_w43 = image_w41*3;

differ = 255*200*200;
differ = uint32(differ);
dx_min = 0;
dy_min = 0;

tmp = 0;
count = 0;
count = uint32(count);
qiuhe = zeros(600);
qiuhe = uint32(qiuhe);
z = 1;
for dx=-(10+pic_dx):10+pic_dx
    for dy=-(10+pic_dy):10+pic_dy
        
        for i=image_h41:image_h43
            for j=image_w41:image_w43
                tmp = uint32(abs(img_M1_gray(i,j)-img_M2_gray(i+dx,j+dy)));
                count = count + tmp;
            end
        end
        qiuhe(z) = count;
        z = z+1;
                
        if count&amp;lt;differ
            differ = count
            dx_min = dx
            dy_min = dy
        end
        count = 0; %count计数清零       
    end
end

% %针对test01.jpg默认值
% dx_min = 0
% dy_min = 1


%%根据偏移量裁剪左右图
image_Nh = image_h-abs(dx_min);
image_Nw = image_w2-abs(dy_min);
img_N1 = zeros(image_Nh,image_Nw);
img_N2 = img_N1;

%判断裁剪所需值
if dx_min&amp;lt;=0
    dx1 = -dx_min;
    dx2 = 0;
else
    dx2 = dx_min;
    dx1 = 0;
end

if dy_min&amp;lt;=0
    dy1 = -dy_min;
    dy2 = 0;
else
    dy2 = dy_min;
    dy1 = 0;
end


img_N1 = zeros(image_Nh,image_Nw,3);
img_N2 = img_N1;
for i=1:image_Nh
    for j=1:image_Nw
            img_N1(i,j,:) = img_M1_O(i+dx1,j+dy1,:);
    end
end
img_N1 = uint8(img_N1);
figure(); imshow(img_N1);title('裁剪好后的左图');



for i=1:image_Nh
    for j=1:image_Nw
        img_N2(i,j,:) = img_M2_O(i+dx2,j+dy2,:);
    end
end
img_N2 = uint8(img_N2);
figure(); imshow(img_N2);title('裁剪好后的右图');


%%通过三个通道分别找茬后再综合
img_N2_R = img_N2(:,:,1);
img_N2_G = img_N2(:,:,2);
img_N2_B = img_N2(:,:,3);
% figure(); imshow(img_N2_R); title('红色通道');

img_N1_R = img_N1(:,:,1);
img_N1_G = img_N1(:,:,2);
img_N1_B = img_N1(:,:,3);
% figure(); imshow(img_N2_R); title('红色通道');

%获取各个通道的不同区域
img_T_R = imabsdiff(img_N2_R,img_N1_R);
T1 = graythresh(img_T_R);
img_D_R = im2bw(img_T_R,T1);%Otus阈值进行分割

img_T_G = imabsdiff(img_N2_G,img_N1_G);
T2 = graythresh(img_T_G);
img_D_G =  im2bw(img_T_G,T2);


img_T_B = imabsdiff(img_N2_B,img_N1_B);
T3 = graythresh(img_T_B);
img_D_B =  im2bw(img_T_B,T3);


img_D = img_D_R + img_D_G  +img_D_B;

se1=strel('disk',1);
se2=strel('disk',3);%disk其实就是一个八边形
img_N5=imclose(img_D,se2);%经过闭运算
img_N5=imopen(img_D,se1);%经过开运算
K=imclose(img_N5,se2); %获取到茬所在区域
figure(); imshow(K);title('获取茬区域块');



%%绘制标定茬的对比图
[L, n]=bwlabel(K,8);   %获取茬连通区域
img_reg = regionprops(L,'area','boundingbox');
areas = [img_reg.Area];
rects = cat(1,img_reg.BoundingBox);
rects = round(rects);

img_L1_T = img_N1;
img_L2_T = img_N2;



%输出判定图框，并在图框上绘制茬的矩形
%标定左图茬
for i=1:size(rects,1);
    [state_L1,img_L1_T] = draw_rect(img_L1_T,[rects(i,2),rects(i,1)],[rects(i,3),rects(i,4)]);
end
img_L1 = img_L1_T;


for i=1:size(rects,1);
    [state_L2,img_L2_T] = draw_rect(img_L2_T,[rects(i,2),rects(i,1)],[rects(i,3),rects(i,4)]);
end
img_L2 = img_L2_T;

figure(); imshow(img_L1);
figure(); imshow(img_L2);



% figure('visible','off'); imshow(img_L1_T);
% for i=1:size(rects,1);
%     rectangle('position',rects(i,:),'EdgeColor','r','linewidth',2);
% end
% frame1=getframe(gcf);
% img_L1=frame2im(frame1);
% imwrite(img_L1,'L1.png','png');%可以修改保存的格式
% 
% 
% figure('visible','off'); imshow(img_L2_T);
% for i=1:size(rects,1);
%     rectangle('position',rects(i,:),'EdgeColor','r','linewidth',2);
% end
% frame2=getframe(gcf);
% img_L2=frame2im(frame2);
% imwrite(img_L2,'L2.png','png');%可以修改保存的格式
% figure(); imshow(img_L1);
% figure(); imshow(img_L2);



if n&amp;gt;0
    str = sprintf('有茬，茬个数：%d',n);
    title(str, 'Color', 'r'); 
else
     str = sprintf('没有茬');
     title(str, 'Color', 'g'); 
end
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　标定矩形框：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;145&quot;&gt;
&lt;pre class=&quot;brush:matlab;gutter:true;&quot;&gt;
function [state,result]=draw_rect(data,pointAll,windSize,showOrNot)  
% 函数调用：[state,result]=draw_rect(data,pointAll,windSize,showOrNot)  
% 函数功能：在图像画个长方形框  
% 函数输入：data为原始的大图，可为灰度图，可为彩色图  
%          pointAll 框的左上角在大图中的坐标(每行代表一个坐标)，  
%           注意：在图中的坐标系为第一列为y,第二列为x(很奇怪的)  
%          windSize 框的大小 分别表示长宽  
%          showOrNot 是否要显示,默认为显示出来  
% 函数输出：state -- 表示程序结果状态  
%          result - 结果图像数据   

  
if nargin &amp;lt; 4  
    showOrNot = 0;  
end  
  
rgb = [255 0 0];                                 % 边框颜色  
lineSize = 2;                                      % 边框大小，取1，2，3  
  
windSize(1,1)=windSize(1,1);  
windSize(1,2) = windSize(1,2);  
if windSize(1,1) &amp;gt; size(data,1) ||...  
        windSize(1,2) &amp;gt; size(data,2)  
    state = -1;                                     % 说明窗口太大，图像太小，没必要获取  
    disp('the window size is larger then image...');  
    return;  
end  
  
result = data;  
if size(data,3) == 3 
    for k=1:3  
        for i=1:size(pointAll,1)   %画边框顺序为：上右下左的原则  
            result(pointAll(i,1),pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);     
            result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2)+windSize(i,1),k) = rgb(1,k);  
            result(pointAll(i,1)+windSize(i,2),pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);    
            result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2),k) = rgb(1,k);    
            if lineSize == 2 || lineSize == 3  
                result(pointAll(i,1)+1,pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);    
                result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2)+windSize(i,1)-1,k) = rgb(1,k);  
                result(pointAll(i,1)+windSize(i,2)-1,pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);  
                result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2)+1,k) = rgb(1,k);  
                if lineSize == 3  
                    result(pointAll(i,1)+1,pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);     
                    result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2)+windSize(i,1)+1,k) = rgb(1,k);  
                    result(pointAll(i,1)+windSize(i,2)+1,pointAll(i,2):pointAll(i,2)+windSize(i,1),k) = rgb(1,k);  
                    result(pointAll(i,1):pointAll(i,1)+windSize(i,2),pointAll(i,2)+1,k) = rgb(1,k);  
                end  
            end  
        end  
    end  
end  
  
state = 1;  
  
if showOrNot == 1  
    figure;  
    imshow(result);  
end  

%%这个我是直接使用了网上大神写好的代码修改一下适应找茬实现
%https://blog.csdn.net/loveaborn/article/details/8545809
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由于GUI的代码、GUI界面以及源文件过大，我无法直接使用博客园分享，所以稍后给出其他方式分享：&lt;/p&gt;

&lt;p&gt;　　最后我推荐一下博客园里面非常好的数字图像处理的数学形态学处理算法基础的帖子：&lt;/p&gt;
&lt;p&gt;　　http://www.cnblogs.com/tornadomeet/archive/2012/03/20/2408086.html&lt;/p&gt;
&lt;p&gt;　　最后，本人初次写博客，不妥之处望指出，谢谢！&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 15:49:00 +0000</pubDate>
<dc:creator>维轲Vitcou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vitcou/p/9283041.html</dc:identifier>
</item>
<item>
<title>git多个远程仓库 - 铁芒箕</title>
<link>http://www.cnblogs.com/bwar/p/9297343.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bwar/p/9297343.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;1. 前言&lt;/h3&gt;
&lt;p&gt;  用GitHub管理自己的开源项目有几年了，最近一年更新得比较多，仓库也越来越多越来越大。有时候感觉GitHub太慢，尤其是最近感觉更为明显，于是萌生了再找个国内类似GitHub的代码托管平台的想法，同时我也还想持续更新GitHub上的仓库，于是需要一个本地仓库（我自己的开发机）多个远程仓库（Github、码云、coding）。&lt;/p&gt;
&lt;h3 id=&quot;一个远程仓库的git-config&quot;&gt;2. 一个远程仓库的git config&lt;/h3&gt;
&lt;p&gt;  我的重量级开源项目&lt;a href=&quot;https://github.com/Bwar/Nebula&quot;&gt;Nebula&lt;/a&gt;一个基于事件驱动的高性能TCP网络框架的git配置文件.git/config如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote &quot;origin&quot;]
        url = https://github.com/Bwar/Nebula.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
        remote = origin
        merge = refs/heads/master&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;用git命令行添加多个远程仓库&quot;&gt;3. 用git命令行添加多个远程仓库&lt;/h3&gt;
&lt;p&gt;  添加一个名为“mirror”的远程仓库：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git remote add mirror https://gitee.com/Bwar/Nebula.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  执行完这条命令后.git/config文件内容变成了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote &quot;origin&quot;]
        url = https://github.com/Bwar/Nebula.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
        remote = origin
        merge = refs/heads/master
[remote &quot;mirror&quot;]
    url = https://gitee.com/Bwar/Nebula.git
    fetch = +refs/heads/*:refs/remotes/mirror/*&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  此时已经是一个本地仓库，两个远程仓库。使用下面的命令可以分别从两个远程仓库拉取和推送到两个远程仓库。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git pull origin master 
git pull mirror master
git push origin master 
git push mirror master&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;一条命令同时更新多个远程仓库&quot;&gt;4. 一条命令同时更新多个远程仓库&lt;/h3&gt;
&lt;p&gt;  目前我的开源项目只有我一个contributor（计划2018年12月开始引入其他contributor），主要push比较少pull，输入多条命令我都觉得麻烦，一条命令将当前分支同时更新到两个远程仓库才能让我满意。于是改变一下，不用上面的mirror做法，直接在origin中添加一个url来实现一个本地仓库多个远程仓库。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git remote set-url --add origin https://gitee.com/Bwar/Nebula.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  执行这条命令后.git/config内容变成：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote &quot;origin&quot;]
        url = https://github.com/Bwar/Nebula.git
        url = https://gitee.com/Bwar/Nebula.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
        remote = origin
        merge = refs/heads/master
[remote &quot;mirror&quot;]
    url = https://gitee.com/Bwar/Nebula.git
    fetch = +refs/heads/*:refs/remotes/mirror/*&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  之前添加的“mirror”留着或删掉都没关系，这时候我们一条命令即可更新两个远程仓库：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git push origin master&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;免输入密码操作远程仓库&quot;&gt;5. 免输入密码操作远程仓库&lt;/h3&gt;
&lt;p&gt;  执行远程仓库操作需要输入密码是件比较麻烦的事情，在配置文件的url里配上用户名和密码即可免掉这样的麻烦，提高操作效率。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;url = https://${user}:${password}@github.com/Bwar/Nebula.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  把上面配置中的“${user}”和“${password}”用你的远程仓库用户名和密码代入即可。&lt;/p&gt;
&lt;h3 id=&quot;直接修改git配置文件实现多个远程仓库&quot;&gt;6. 直接修改git配置文件实现多个远程仓库&lt;/h3&gt;
&lt;p&gt;  上面通过git remote命令完成一个本地仓库多个远程仓库配置，这些命令实际上都是通过修改.git/config实现的，其实直接修改配置文件可能会更快，我就是直接修改配置文件完成。最后我的多个远程仓库配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote &quot;origin&quot;]
        url = https://${user}:${password}@github.com/Bwar/Nebula.git
        url = https://${user}:${password}@gitee.com/Bwar/Nebula.git
        url = https://${user}:${password}@git.coding.net/Bwar/NebulaBootstrap.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
        remote = origin
        merge = refs/heads/master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  完毕，如果觉得这篇文章对你有用，如果你还不急着去吃午饭，并且觉得Nebula开源网络框架还行，到&lt;a href=&quot;https://github.com/Bwar/Nebula&quot;&gt;Nebula&lt;/a&gt;加个星吧。&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 15:43:00 +0000</pubDate>
<dc:creator>铁芒箕</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bwar/p/9297343.html</dc:identifier>
</item>
<item>
<title>Python学习：15.Python面向对象（二、继承的各种情况） - BD-ld-2017</title>
<link>http://www.cnblogs.com/liudi2017/p/9297336.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liudi2017/p/9297336.html</guid>
<description>&lt;p&gt;&lt;span&gt;一、什么是继承&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;继承是一种创建类的方法，在python中，一个类可以继承来自一个或多个父。原始类称为基类或超类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建父类&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Parent1:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Parent2:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 继承父类，单继承&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Obj1(Parent1):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;继承父类，多继承&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Obj2(Parent1,Parent2):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;二、什么时候使用继承&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在已经创建的几个类中，这几哥类中的方法和变量有相同的，这种时候我们就可以使用类的继承，将其它类中已有的方法和变量通过继承的方式，在新创建的类中，使用正常的方式就可以调用父类中的方法。剩下自己特有的方法只要在自己类中定义就可以。&lt;/p&gt;
&lt;p&gt;　　举个列子：人都会吃，喝，玩，小明也是一个人，所以小明也会，所以小明继承了人的属性，特别的是小明还会背古诗，就基于以上的说法写一个类的继承。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Man:

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; eat(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;吃&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; drink(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;喝&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; play(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;玩&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; XiaoMing(Man):

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; recite(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;背古诗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

xm &lt;/span&gt;=&lt;span&gt; XiaoMing()
xm.eat()
xm.recite()


输出结果：
吃
背古诗&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、单继承与多继承&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单继承：仅仅继承一个父类，当查找方法的时候，首先在自己里面查找，然后到父类里面查找。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Biology:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; split(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; accrue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Animal(Biology):&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在类后面加括号加上所要继承类的名字，继承的是类的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; GoWhoring(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i like go whoring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; eat(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; eat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; superman:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; gamble(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gamble is interesting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; GoWhoring(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beautiful whoring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat(Animal):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; GoWhoring(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i don't like go whoring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
        self.name &lt;/span&gt;=&lt;span&gt; name
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cry(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 喵&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                                                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;优先级：自己，父类（左边，右边）&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Dog(Animal，superman):&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在继承多个父类时，在两个父类都有同一个名字的方法时，优先选择括号左边的父类的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
        self.name &lt;/span&gt;=&lt;span&gt; name
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cry(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 汪&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

mimi &lt;/span&gt;= Cat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mimi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
mimi.eat()
mimi.cry()                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;当基类里方法存在，派生类里也存在同名方法，优先找派生类里的方法&lt;/span&gt;
mimi.GoWhoring() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当父类里有一个方法自己也有一个同名的方法时，默认使用自己的方法&lt;/span&gt;
husike = Dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;erha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;虽然Dog里没有eat和split但是由于Dog继承了Animal和的方法，而Animal继承了Biology的方法&lt;/span&gt;
husike.eat()            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;所以Dog可以使用Biology的方法    &lt;/span&gt;
husike.cry()            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;父类有一个名字叫&quot;基类&quot;  子类有一个名字叫&quot;派生类&quot;&lt;/span&gt;
&lt;span&gt;husike.split()
husike.GoWhoring()
faker &lt;/span&gt;=&lt;span&gt; Animal()
faker.GoWhoring()&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;优先使用自己的方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;派生类可以继承基类里的所有功能。&lt;br/&gt;当基类里方法存在，派生类里也存在同名方法，派生类优先找派生类里的方法（意思是优先找自己的）。&lt;br/&gt;在Java、C#里面一个子类只能继承一个父类，多了报错，但是在python里可以继承多个父类&lt;/p&gt;
&lt;p&gt;在经典类中，继承是以深度优先，在新式类中，继承是以广度优先。&lt;/p&gt;
&lt;p&gt;Python 2.x中默认都是经典类，只有显式继承了object才是新式类。&lt;/p&gt;
&lt;p&gt;python 3.x中默认都是新式类,经典类被移除，不必显式的继承object。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深度优先：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A():
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is from A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(A):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is from C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(B,C):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;

fun &lt;/span&gt;=&lt;span&gt;  D()
fun.save()

输出结果：
This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; A&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;深度优先的时候就是一条道走到黑，从左向右找，先把左边的一个里面的全部找完在找右边的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 广度优先：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A():
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is from A&lt;/span&gt;&lt;span&gt;&quot;)&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(A):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save(self):
        &lt;/span&gt;&lt;span&gt;print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is from C&lt;/span&gt;&lt;span&gt;&quot;)&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(B,C):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;

fun &lt;/span&gt;=&lt;span&gt;  D()
fun.save()

输出结果：
This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; C
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先在左边的上一层父类中寻找，如果没有就到右边一个父类中寻找，没有就到左边父类的父类中寻找。&lt;/p&gt;
&lt;p&gt;广度优先多种情况解析&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;情况一&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;有A、B、C、D、E几个类，A为B的父类，B为C的父类，E为D的父类，D为C的父类 现在C需要使用一个方法，只有在A，E里有，第一次C先去B中寻找没有找到 然后就会去A里面找，A里没有就去D里面找，然后再去E里找。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; E:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(E):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(B, D):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; Sb(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am sb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

faker &lt;/span&gt;=&lt;span&gt; C()
faker.function()

输出结果：
are you OK?A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1205099/201807/1205099-20180711200832745-1151191511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;括号里为查找顺序。&lt;/p&gt;
&lt;h3&gt;情况二&lt;/h3&gt;
&lt;p&gt;它会先把没有共同的父类寻找玩，然后再找共同的父类，因为在这种情况下它想找到和自己关系最近的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; S:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;are you Ok?S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A(S):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; E(S):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(E):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(B, D):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; Sb(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am sb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

faker &lt;/span&gt;=&lt;span&gt; C()
faker.function()

输出结果：
are you OK？E&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1205099/201807/1205099-20180711201022382-809772864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;情况三&lt;/h3&gt;
&lt;p&gt;当A、B、D、E、都没有C所要找的函数时才会找右边的F（括号右边）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; F():
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?F&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; E:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A,F):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(E):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_fake(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;are you OK?D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(B, D):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; Sb(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am sb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


faker &lt;/span&gt;=&lt;span&gt; C()
faker.function()


输出结果：
are you OK?F&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1205099/201807/1205099-20180711202003196-761852079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;情况四&lt;/h3&gt;
&lt;p&gt;首先面执行一个 c1 = C()；c1.xxx() ，xxx在D里面而且xxx又执行了self.ooo() 而ooo在BDE里都有它会执行哪个？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; ooo(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; E:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; ooo(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(E):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xxx(self):
        self.ooo()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; ooo(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(B, D):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;


c1 &lt;/span&gt;=&lt;span&gt; C()
c1.xxx()

输出结果：
B&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解析：首先找到c1.xxx在D里面，在D里面又执行了self.ooo(),这个self代指c1，而c1为C类的对象，意思还是c1.ooo，所以寻找ooo时还是从C开始，因为先找左边的所以，找到了B的ooo 以后找是谁执行的函数要看准self到底是谁的从self下手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1205099/201807/1205099-20180711203417945-1224820423.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红色为第二次寻找路径（寻找ooo方法的次序）&lt;/p&gt;
&lt;p&gt;今天的类的继承主要是多继承的时候父类中方法选择的。&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 15:41:00 +0000</pubDate>
<dc:creator>BD-ld-2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liudi2017/p/9297336.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——Runtime IDentifier - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9297120.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9297120.html</guid>
<description>&lt;p&gt;.NET Core对于传统.NET开发人员而言是既熟悉又陌生的新平台，所以有时遇上出乎意料的事情也纯属正常情况。这时只需点耐心，多查查资料，努力找到原因，也未尝不是件有意义的体验。&lt;/p&gt;
&lt;p&gt;比如当建完一个最简单的控制台应用程序：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet new console -o helloRID&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并完成编译后：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet build&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你在bin目录下会发现生成的程序集是dll文件，而非之前经验里的exe文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180711225105405-580422756.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再查下工程文件，输出类型确实是Exe。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180711225212637-1363211635.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是感到很意外？&lt;/p&gt;
&lt;p&gt;固然，我们也可以使用&lt;code&gt;dotnet run&lt;/code&gt;的方式获得程序运行的结果，但这样的文件格式绝不是用户所希望的，他们没有办法直接运行该文件。&lt;/p&gt;
&lt;p&gt;问题的缘由很容易借由搜索引擎找到——在编译的时候需要额外指定Runtime IDentifier(运行时标识)。&lt;/p&gt;
&lt;p&gt;Runtime IDentifier的作用是指定应用程序运行时的目标平台。这样就很容易理解了，因为.NET Core支持跨平台，所以在编译时编译器默认并不知道你所想生成的可执行文件是需要在哪个平台上运行的，只有你主动告诉它，才能得到你想要的结果。&lt;/p&gt;
&lt;p&gt;于是运行&lt;code&gt;dotnet build -r osx-x64&lt;/code&gt;(假设你像我一样在macOS系统上运行程序)，可执行文件如预期般出现在bin目录的osx-64文件夹下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180711231623817-813711746.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果是Windows 10系统，则运行&lt;code&gt;dotnet build -r win10-x64&lt;/code&gt;。熟悉的exe文件再次出现。&lt;/p&gt;
&lt;p&gt;更多的Runtime IDentifier可以在微软&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog&quot;&gt;官网&lt;/a&gt;上找到，这里需要夸一下微软，改进后的官方文档现在越来越好用了。&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 15:25:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9297120.html</dc:identifier>
</item>
<item>
<title>JAVAEE——ssm综合练习：CRM系统（包含ssm整合） - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/9297264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/9297264.html</guid>
<description>&lt;div class=&quot;Section0&quot;&gt;

&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221704854-307195269.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;IDE&lt;span&gt;：&lt;/span&gt; Eclipse Mars2 &lt;/p&gt;
&lt;p&gt;Jdk: 1.7&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库&lt;/span&gt;: MySQL&lt;/p&gt;

&lt;p&gt;&lt;span&gt;数据库&lt;/span&gt;sql&lt;span&gt;文件位置如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221821970-324115874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;创建&lt;/span&gt;crm&lt;span&gt;数据库，执行&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221825674-1199181439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;效果如下图：&lt;/p&gt;



&lt;p&gt;&lt;span&gt;使用的&lt;/span&gt;Bootstrap&lt;span&gt;前端框架&lt;/span&gt;,&lt;span&gt;官方网站&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;http://www.bootcss.com/&lt;/p&gt;

&lt;p&gt;&lt;span&gt;工程使用&lt;/span&gt;Springmvc&lt;span&gt;、&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;框架整合完成。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.1. &lt;strong&gt;&lt;span&gt;需要的&lt;/span&gt;jar&lt;span&gt;包&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;spring&lt;span&gt;（包括&lt;/span&gt;&lt;span&gt;springmvc&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;mybatis&lt;/li&gt;
&lt;li&gt;mybatis-spring&lt;span&gt;整合包&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;数据库驱动&lt;/li&gt;
&lt;li&gt;第三方连接池。&lt;/li&gt;
&lt;li&gt;Json&lt;span&gt;依赖包&lt;/span&gt;Jackson&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jar&lt;span&gt;包位置如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221839191-1705767332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.2. &lt;strong&gt;整合思路&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Dao&lt;span&gt;层：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、SqlMapConfig.xml&lt;span&gt;，空文件即可，但是需要文件头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、applicationContext-dao.xml&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;数据库连接&lt;/span&gt;Druid&lt;/p&gt;
&lt;p&gt;b) SqlSessionFactory&lt;span&gt;对象，需要&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;整合包下的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;c) &lt;span&gt;配置&lt;/span&gt;mapper&lt;span&gt;文件扫描器。&lt;/span&gt;&lt;span&gt;Mapper&lt;/span&gt;&lt;span&gt;动态代理开发 增强版&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Service&lt;span&gt;层：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、applicationContext-service.xml&lt;span&gt;包扫描器，扫描&lt;/span&gt;&lt;span&gt;@service&lt;/span&gt;&lt;span&gt;注解的类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、applicationContext-trans.xml&lt;span&gt;配置事务。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Controller&lt;span&gt;层：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、Springmvc.xml&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;包扫描器，扫描&lt;/span&gt;@Controller&lt;span&gt;注解的类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) 配置注解驱动&lt;/p&gt;
&lt;p&gt;c) 配置视图解析器&lt;/p&gt;

&lt;p&gt;Web.xml&lt;span&gt;文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;配置&lt;/span&gt;spring&lt;span&gt;监听器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、配置前端控制器。&lt;/p&gt;

&lt;h2&gt;3.3. &lt;strong&gt;创建工程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;创建动态&lt;/span&gt;web&lt;span&gt;工程，步骤如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221925274-1635262555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;创建&lt;/span&gt;boot-crm&lt;span&gt;，如下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711221930647-529344978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;3.4. &lt;strong&gt;&lt;span&gt;加入&lt;/span&gt;jar&lt;span&gt;包&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;加入课前资料中的&lt;/span&gt;jar&lt;span&gt;包&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.5. &lt;strong&gt;加入配置文件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;创建&lt;/span&gt;config&lt;span&gt;资源文件夹，在里面创建&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;文件夹&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.5.1. &lt;strong&gt;SqlMapConfig.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;空文件即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然也可以加上包别名，在后面的Mapper xml文件中可以不用写全类名&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.xyp.crm.entity&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.5.2. &lt;strong&gt;applicationContext-dao.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;需要配置：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;加载&lt;/span&gt;properties&lt;span&gt;文件，数据源，&lt;/span&gt;&lt;span&gt;SqlSessionFactory&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Mapper&lt;/span&gt;&lt;span&gt;扫描&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置 读取properties文件 jdbc.properties &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:jdbc.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置 数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClassName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置SqlSessionFactory &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置MyBatis核心配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;configLocation&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;classpath:mybatis/SqlMapConfig.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置Mapper扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置Mapper扫描包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;basePackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.mapper&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.3. &lt;strong&gt;j&lt;/strong&gt;&lt;strong&gt;dbc.properties&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;配置数据库信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/crm?characterEncoding=utf-8
jdbc.username=root
jdbc.password=root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.4. &lt;strong&gt;log4j.properties&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;配置日志信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Global logging configuration
log4j.rootLogger=DEBUG, stdout
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.5. &lt;strong&gt;applicationContext-service.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;配置&lt;/span&gt;service&lt;span&gt;扫描&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置Service扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.service&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.6. &lt;strong&gt;applicationContext-trans.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;配置事务管理：事务管理器、通知、切面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt;    class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:advice &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;txAdvice&quot;&lt;/span&gt;&lt;span&gt; transaction-manager&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:attributes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 传播行为 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;save*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;insert*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;add*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;create*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;delete*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;update*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;find*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;select*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;get*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;query*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tx:attributes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tx:advice&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 切面 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:advisor &lt;/span&gt;&lt;span&gt;advice-ref&lt;/span&gt;&lt;span&gt;=&quot;txAdvice&quot;&lt;/span&gt;&lt;span&gt;
            pointcut&lt;/span&gt;&lt;span&gt;=&quot;execution(* cn.itcast.crm.service.*.*(..))&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.7. &lt;strong&gt;Springmvc.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;配置&lt;/span&gt;SpringMVC&lt;span&gt;表现层：&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;扫描、注解驱动、视图解析器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置Controller扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.controller&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置注解驱动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置视图解析器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 前缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/jsp/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 后缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.5.8. &lt;strong&gt;Web.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;配置&lt;/span&gt;Spring&lt;span&gt;、&lt;/span&gt;&lt;span&gt;SpringMVC&lt;/span&gt;&lt;span&gt;、解决&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;乱码问题&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;&lt;span&gt;=&quot;WebApp_ID&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;2.5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;boot-crm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置spring &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring/applicationContext-*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置监听器加载spring &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置过滤器，解决post的乱码问题 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;utf-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置SpringMVC &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;boot-crm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring/springmvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置springmvc什么时候启动，参数必须为整数 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果为0或者大于0，则springMVC随着容器启动而启动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果小于0，则在第一次请求进来的时候启动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;boot-crm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 所有的请求都进入springMVC &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3.6. &lt;strong&gt;加入静态资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;最终效果如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711222344582-2094297253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;4.1. &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;编写&lt;/span&gt;CustomerController &lt;span&gt;显示用户列表&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;customer&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerController {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 显示用户列表
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String queryCustomerList() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;customer&quot;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4.2. &lt;strong&gt;页面显示问题&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;访问页面，发现不能正常显示&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711222410308-609505819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;打开开发者工具，选择&lt;/span&gt;Network&lt;span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发现&lt;/span&gt;css&lt;span&gt;、&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;等资源文件无法加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711222417337-1691219457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;原因：&lt;/span&gt;web.xml&lt;span&gt;配置时，是设置所有的请求都进入&lt;/span&gt;&lt;span&gt;SpringMVC&lt;/span&gt;&lt;span&gt;。但是&lt;/span&gt;&lt;span&gt;SpringMVC&lt;/span&gt;    &lt;span&gt;无法处理&lt;/span&gt;css&lt;span&gt;、&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;等静态资源，所以无法正常显示&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;方法一：通过&lt;/span&gt;mvc:resources&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对静态资源进行放行 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/css/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/css/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/fonts/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/fonts/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/js/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/js/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;方法二：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;springmvc.xml&lt;span&gt;中配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 解决静态资源无法被springMVC处理的问题 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:default-servlet-handler &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 方法三：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改&lt;/span&gt;web.xml&lt;span&gt;，让所有以&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;结尾的请求都进入&lt;/span&gt;&lt;span&gt;SpringMVC&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;boot-crm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 所有的请求都进入springMVC &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.action&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决后的效果如下图，可以正常显示页面样式：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711222941157-723673276.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;我们使用第二种方式解决，因为此项目中的页面的请求都是以&lt;/span&gt;action&lt;span&gt;结尾的，所以使用第二种方式，在&lt;/span&gt;&lt;span&gt;web.xml&lt;/span&gt;&lt;span&gt;里面进行相应的配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;boot-crm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 所有以action结尾的请求都进入springMVC &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.action&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;5.1. &lt;strong&gt;需求分析&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711223004372-2056867604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;页面效果如上图，在查询客户的时候，可以选择客户来源&lt;/span&gt;,&lt;span&gt;所属行业&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;客户级别信息&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;页面加载时需要&lt;/span&gt;初始化查询条件下拉列表。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;前端&lt;/span&gt;jsp&lt;span&gt;逻辑&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-inline&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;${pageContext.request.contextPath }/customer/list.action&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;get&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;customerName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;customerName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${custName }&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;custName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;customerFrom&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户来源&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;customerFrom&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;客户来源&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;custSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;--请选择--&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${fromType}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id}&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;c:if test&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id == custSource}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; selected&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;gt;${item.dict_item_name }&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;custIndustry&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;所属行业&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;custIndustry&quot;&lt;/span&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;=&quot;custIndustry&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;--请选择--&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${industryType}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id}&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;c:if test&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id == custIndustry}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; selected&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;gt;${item.dict_item_name }&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;custLevel&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户级别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;custLevel&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;custLevel&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;--请选择--&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${levelType}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id}&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;c:if test&lt;/span&gt;&lt;span&gt;=&quot;${item.dict_id == custLevel}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; selected&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;gt;${item.dict_item_name }&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查询&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;按照&lt;/span&gt;jsp&lt;span&gt;的要求&lt;/span&gt;,&lt;span&gt;把对应的数据查询出来&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;放到模型中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据存放在&lt;/span&gt;base_dict&lt;span&gt;表，可以使用&lt;/span&gt;dict_type_code&lt;span&gt;类别代码进行查询&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用需要获取的数据如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711223039195-321666579.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;使用的&lt;/span&gt;sql:&lt;/p&gt;
&lt;p&gt;SELECT * FROM base_dict WHERE dict_type_code = '001'&lt;/p&gt;

&lt;h2&gt;5.2. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;DAO&lt;span&gt;开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;5.2.1. &lt;strong&gt;pojo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;因为页面显示的名字是下划线方式，和数据库表列名一样，根据页面的样式，编写&lt;/span&gt;pojo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseDict {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_type_code;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_type_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_item_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_item_code;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer dict_sort;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_enable;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String dict_memo;
get&lt;/span&gt;/&lt;span&gt;set。。。。。。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5.2.2. &lt;strong&gt;Mapper&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;编写BaseDictMapper&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; BaseDictMapper {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据类别代码查询数据
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; dictTypeCode
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;BaseDict&amp;gt;&lt;span&gt; queryBaseDictByDictTypeCode(String dictTypeCode);
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5.2.3. &lt;strong&gt;Mapper.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编写&lt;/span&gt;BaseDictMapper.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.mapper.BaseDictMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据类别代码查询数据 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryBaseDictByDictTypeCode&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt;
        resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.BaseDict&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM base_dict WHERE dict_type_code =
        #{dict_type_code}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5.3. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;Service&lt;span&gt;开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;5.3.1. &lt;strong&gt;BaseDictService&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; BaseDictService {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据类别代码查询
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; dictTypeCode
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;BaseDict&amp;gt;&lt;span&gt; queryBaseDictByDictTypeCode(String dictTypeCode);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5.3.2. &lt;strong&gt;BaseDictServiceImpl&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;实现类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BaseDictServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; BaseDictService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BaseDictMapper baseDictMapper;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;BaseDict&amp;gt;&lt;span&gt; queryBaseDictByDictTypeCode(String dictTypeCode) {

        List&lt;/span&gt;&amp;lt;BaseDict&amp;gt; list = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseDictMapper.queryBaseDictByDictTypeCode(dictTypeCode);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5.4. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;Controller&lt;span&gt;开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;5.4.1. &lt;strong&gt;&lt;span&gt;修改之前编写的&lt;/span&gt;controller&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;customer&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BaseDictService baseDictService;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 显示客户列表
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String queryCustomerList(Model model) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户来源&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; fromType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&quot;002&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所属行业&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; industryType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&quot;001&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户级别&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; levelType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&quot;006&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把前端页面需要显示的数据放到模型中&lt;/span&gt;
        model.addAttribute(&quot;fromType&quot;&lt;span&gt;, fromType);
        model.addAttribute(&lt;/span&gt;&quot;industryType&quot;&lt;span&gt;, industryType);
        model.addAttribute(&lt;/span&gt;&quot;levelType&quot;&lt;span&gt;, levelType);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;customer&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5.4.2. &lt;strong&gt;效果&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现效果如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711223347273-489295861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.4.3. &lt;strong&gt;硬编码问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这里是根据dict_type_code&lt;span&gt;类别代码查询数据，这里的查询条件是写死的，有硬编码问题。可以把类别代码提取到配置文件中，再使用&lt;/span&gt;@value&lt;span&gt;注解进行加载。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;5.4.3.1. &lt;strong&gt;&lt;span&gt;添加&lt;/span&gt;env.properties&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;添加&lt;/span&gt;env.properties&lt;span&gt;配置文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#客户来源
CUSTOMER_FROM_TYPE&lt;/span&gt;=002&lt;span&gt;
#客户行业
CUSTOMER_INDUSTRY_TYPE&lt;/span&gt;=001&lt;span&gt;
#客户级别
CUSTOMER_LEVEL_TYPE&lt;/span&gt;=006
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;5.4.3.2. &lt;strong&gt;&lt;span&gt;修改&lt;/span&gt;springmvc.xml&lt;span&gt;配置文件&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;springmvc.xml&lt;span&gt;中加载&lt;/span&gt;&lt;span&gt;env.properties&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载controller需要的配置信息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:env.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;:Controller&lt;span&gt;需要的配置文件信息必须添加到&lt;/span&gt;&lt;span&gt;springmvc&lt;/span&gt;&lt;span&gt;的配置文件中&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;5.4.3.3. &lt;strong&gt;&lt;span&gt;修改&lt;/span&gt;Controller&lt;span&gt;方法&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;customer&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerController {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户来源&lt;/span&gt;
    @Value(&quot;${CUSTOMER_FROM_TYPE}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CUSTOMER_FROM_TYPE;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户行业&lt;/span&gt;
    @Value(&quot;${CUSTOMER_INDUSTRY_TYPE}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CUSTOMER_INDUSTRY_TYPE;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户级别&lt;/span&gt;
    @Value(&quot;${CUSTOMER_LEVEL_TYPE}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CUSTOMER_LEVEL_TYPE;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BaseDictService baseDictService;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 显示客户列表
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String queryCustomerList(Model model) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户来源&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; fromType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_FROM_TYPE);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所属行业&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; industryType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_INDUSTRY_TYPE);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户级别&lt;/span&gt;
        List&amp;lt;BaseDict&amp;gt; levelType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_LEVEL_TYPE);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把前端页面需要显示的数据放到模型中&lt;/span&gt;
        model.addAttribute(&quot;fromType&quot;&lt;span&gt;, fromType);
        model.addAttribute(&lt;/span&gt;&quot;industryType&quot;&lt;span&gt;, industryType);
        model.addAttribute(&lt;/span&gt;&quot;levelType&quot;&lt;span&gt;, levelType);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;customer&quot;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6.1. &lt;strong&gt;需求&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;展示客户列表，并且可以根据查询条件过滤查询结果，并且实现分页。&lt;/p&gt;
&lt;p&gt;效果如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711224802532-453621966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;页面代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户信息列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; /.panel-heading &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table table-bordered table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ID&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户来源&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户所属行业&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;客户级别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;固定电话&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;手机&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${page.rows}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_id}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_name}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_source}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_industry}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_level}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_phone}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${row.cust_mobile}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary btn-xs&quot;&lt;/span&gt;&lt;span&gt; data-toggle&lt;/span&gt;&lt;span&gt;=&quot;modal&quot;&lt;/span&gt;&lt;span&gt; data-target&lt;/span&gt;&lt;span&gt;=&quot;#customerEditDialog&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;editCustomer(${row.cust_id})&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;修改&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-danger btn-xs&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;deleteCustomer(${row.cust_id})&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;删除&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;分析我们需要根据四个条件进行查询，返回数据是分页对象&lt;/span&gt;Page&lt;/p&gt;

&lt;p&gt;Sql&lt;span&gt;语句&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt;
    a.cust_id,
    a.cust_name,
    a.cust_user_id,
    a.cust_create_id,
    b.dict_item_name cust_source,
    c.dict_item_name cust_industry,
    d.dict_item_name cust_level,
    a.cust_linkman,
    a.cust_phone,
    a.cust_mobile,
    a.cust_zipcode,
    a.cust_address,
    a.cust_createtime
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt;
    customer a
&lt;/span&gt;&lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; base_dict b &lt;span&gt;ON&lt;/span&gt; a.cust_source &lt;span&gt;=&lt;/span&gt;&lt;span&gt; b.dict_id
&lt;/span&gt;&lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; base_dict c &lt;span&gt;ON&lt;/span&gt; a.cust_industry &lt;span&gt;=&lt;/span&gt;&lt;span&gt; c.dict_id
&lt;/span&gt;&lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; base_dict d &lt;span&gt;ON&lt;/span&gt; a.cust_level &lt;span&gt;=&lt;/span&gt;&lt;span&gt; d.dict_id
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt;&lt;span&gt;
    a.cust_name &lt;/span&gt;&lt;span&gt;LIKE&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%马%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;AND&lt;/span&gt; a.cust_source &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;AND&lt;/span&gt; a.cust_industry &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;AND&lt;/span&gt; a.cust_level &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
LIMIT &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6.2. &lt;strong&gt;&lt;span&gt;创建&lt;/span&gt;pojo&lt;span&gt;开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long cust_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long cust_user_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long cust_create_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_source;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_industry;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_level;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_linkman;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_mobile;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_zipcode;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_address;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date cust_createtime;
get&lt;/span&gt;/&lt;span&gt;set。。。。。。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6.3. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;DAO&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;前台发起请求&lt;/span&gt;,&lt;span&gt;需要接收请求过来的查询条件数据，可以使用&lt;/span&gt;&lt;span&gt;pojo&lt;/span&gt;&lt;span&gt;接收数据。需要依此编写查询逻辑。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;前台&lt;/span&gt;需要&lt;span&gt;分页显示&lt;/span&gt;&lt;span&gt;，根据准备好的分页实现，应该返回分页类&lt;/span&gt;Page&lt;span&gt;，而创建&lt;/span&gt;&lt;span&gt;Page&lt;/span&gt;&lt;span&gt;分页类需要数据总条数，所以也需要查询数据总条数的逻辑。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;根据分析，&lt;/span&gt;DAO&lt;span&gt;需要编写两个方法&lt;/span&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;需要根据条件分页查询客户信息&lt;/li&gt;
&lt;li&gt;需要根据条件查询数据总条数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;6.3.1. &lt;strong&gt;&lt;span&gt;创建&lt;/span&gt;QueryVo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;需要编写&lt;/span&gt;QueryVo，里面&lt;span&gt;包含查询条件属性&lt;/span&gt;和分页数据。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建接受请求参数的&lt;/span&gt;QueryVo&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryVo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String custName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String custSource;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String custIndustry;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String custLevel;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前页码数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Integer page = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库从哪一条数据开始查&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer start;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每页显示数据条数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Integer rows = 10&lt;span&gt;;
get&lt;/span&gt;/&lt;span&gt;set。。。。。。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6.3.2. &lt;strong&gt;Mapper&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;创建CustomerMapper 接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; CustomerMapper {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据queryVo分页查询数据
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; queryVo
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;Customer&amp;gt;&lt;span&gt; queryCustomerByQueryVo(QueryVo queryVo);

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据queryVo查询数据条数
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; queryVo
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; queryCountByQueryVo(QueryVo queryVo);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6.3.3. &lt;strong&gt;Mapper.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;创建CustomerMapper.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.mapper.CustomerMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sql &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;customerQueryVo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;custName != null and custName != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND a.cust_name LIKE '%${custName}%'
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;custSource != null and custSource != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND a.cust_source = #{custSource}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;custIndustry != null and custIndustry != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND a.cust_industry = #{custIndustry}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;custLevel != null and custLevel != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND a.cust_level = #{custLevel}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据queryVo分页查询数据 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryCustomerByQueryVo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.QueryVo&quot;&lt;/span&gt;&lt;span&gt;
        resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.Customer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      SELECT
        a.cust_id,
        a.cust_name,
        a.cust_user_id,
        a.cust_create_id,
        b.dict_item_name cust_source,
        c.dict_item_name cust_industry,
        d.dict_item_name cust_level,
        a.cust_linkman,
        a.cust_phone,
        a.cust_mobile,
        a.cust_zipcode,
        a.cust_address,
        a.cust_createtime
      FROM
        customer a
        LEFT JOIN base_dict b ON a.cust_source = b.dict_id
        LEFT JOIN base_dict c ON a.cust_industry = c.dict_id
        LEFT JOIN base_dict d ON a.cust_level = d.dict_id
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;customerQueryVo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;start != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            LIMIT #{start}, #{rows}
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据queryVo查询数据条数 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryCountByQueryVo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.QueryVo&quot;&lt;/span&gt;&lt;span&gt;
        resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT count(1) FROM customer a
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;customerQueryVo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6.4. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;service&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;6.4.1. &lt;strong&gt;&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编写接口&lt;/span&gt;CustomerService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; CustomerService {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据条件分页查询客户
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; queryVo
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    Page&lt;/span&gt;&amp;lt;Customer&amp;gt;&lt;span&gt; queryCustomerByQueryVo(QueryVo queryVo);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6.4.2. &lt;strong&gt;&lt;span&gt;实现类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编写接口实现类&lt;/span&gt;CustomerServiceImpl&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomerServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; CustomerService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomerMapper customerMapper;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Page&amp;lt;Customer&amp;gt;&lt;span&gt; queryCustomerByQueryVo(QueryVo queryVo) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置查询条件,从哪一条数据开始查&lt;/span&gt;
        queryVo.setStart((queryVo.getPage() - 1) *&lt;span&gt; queryVo.getRows());

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询数据结果集&lt;/span&gt;
        List&amp;lt;Customer&amp;gt; list = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerMapper.queryCustomerByQueryVo(queryVo);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询到的数据总条数&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; total = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerMapper.queryCountByQueryVo(queryVo);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 封装返回的page对象&lt;/span&gt;
        Page&amp;lt;Customer&amp;gt; page = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;&amp;gt;&lt;span&gt;(total, queryVo.getPage(), queryVo.getRows(), list);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; page;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6.5. &lt;strong&gt;&lt;span&gt;实现&lt;/span&gt;Controller&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;改造&lt;/span&gt;Controller&lt;span&gt;的方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;list&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String queryCustomerList(QueryVo queryVo, Model model) {

    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解决get请求乱码问题&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(queryVo.getCustName())) {
            queryVo.setCustName(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; String(queryVo.getCustName().getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;&lt;span&gt;));
        }
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
        e.printStackTrace();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户来源&lt;/span&gt;
    List&amp;lt;BaseDict&amp;gt; fromType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_FROM_TYPE);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所属行业&lt;/span&gt;
    List&amp;lt;BaseDict&amp;gt; industryType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_INDUSTRY_TYPE);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户级别&lt;/span&gt;
    List&amp;lt;BaseDict&amp;gt; levelType = &lt;span&gt;this&lt;/span&gt;.baseDictService.queryBaseDictByDictTypeCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CUSTOMER_LEVEL_TYPE);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把前端页面需要显示的数据放到模型中&lt;/span&gt;
    model.addAttribute(&quot;fromType&quot;&lt;span&gt;, fromType);
    model.addAttribute(&lt;/span&gt;&quot;industryType&quot;&lt;span&gt;, industryType);
    model.addAttribute(&lt;/span&gt;&quot;levelType&quot;&lt;span&gt;, levelType);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分页查询数据&lt;/span&gt;
    Page&amp;lt;Customer&amp;gt; page = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerService.queryCustomerByQueryVo(queryVo);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把分页查询的结果放到模型中&lt;/span&gt;
    model.addAttribute(&quot;page&quot;&lt;span&gt;, page);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据回显&lt;/span&gt;
    model.addAttribute(&quot;custName&quot;&lt;span&gt;, queryVo.getCustName());
    model.addAttribute(&lt;/span&gt;&quot;custSource&quot;&lt;span&gt;, queryVo.getCustSource());
    model.addAttribute(&lt;/span&gt;&quot;custIndustry&quot;&lt;span&gt;, queryVo.getCustIndustry());
    model.addAttribute(&lt;/span&gt;&quot;custLevel&quot;&lt;span&gt;, queryVo.getCustLevel());

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;customer&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;7.1. &lt;strong&gt;需求&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;页面效果如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225121066-429490299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1、&lt;span&gt;客户列表中点击&lt;/span&gt;“修改”按钮弹出客户信息修改窗，并初始化客户信息&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;点击&lt;/span&gt;“保存修改”按钮将修改后的结果保存到数据库中&lt;/p&gt;




&lt;h2&gt;7.2. &lt;strong&gt;实现编辑数据回显&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在客户列表显示中，可以点击修改按钮，弹出修改界面，打开浏览器的开发者工具，发现当点击修改按钮，会发起一个请求&lt;/p&gt;
&lt;p&gt;如下图方式进行查看&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225134604-1499686198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225145742-1417422344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;分析这里应该是发起请求到后台，获取该用户的详细信息，在页面上可以回显&lt;/p&gt;

&lt;p&gt;&lt;span&gt;复制请求路径中的&lt;/span&gt;edit.action&lt;span&gt;，在&lt;/span&gt;&lt;span&gt;customer.jsp&lt;/span&gt;&lt;span&gt;页面中搜索，找到请求逻辑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;找到的代码如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225156493-504280199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;发现这里是一个&lt;/span&gt;Ajax&lt;span&gt;请求，根据这个请求我们可以开发后台逻辑，提供给前端页面进行调用&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;7.3. &lt;strong&gt;回显功能实现&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;7.3.1. &lt;strong&gt;Mapper&lt;/strong&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper&lt;span&gt;添加方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id查询客户
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Customer queryCustomerById(Long id);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.3.2. &lt;strong&gt;Mapper.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper.xml&lt;span&gt;编写&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据id查询用户 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryCustomerById&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.Customer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    SELECT * FROM customer WHERE cust_id = #{id}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.3.3. &lt;strong&gt;Service&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编写&lt;/span&gt;CustomerService.&lt;span&gt;接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id查询数据
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Customer queryCustomerById(Long id);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.3.4. &lt;strong&gt;Service&lt;span&gt;接口实现类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerServiceImpl&lt;span&gt;实现接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer queryCustomerById(Long id) {
    Customer customer &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerMapper.queryCustomerById(id);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; customer;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;7.3.5. &lt;strong&gt;Controller&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerController&lt;span&gt;编写方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id查询用户,返回json格式数据
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;edit&quot;&lt;span&gt;)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer queryCustomerById(Long id) {
    Customer customer &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerService.queryCustomerById(id);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; customer;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7.4. &lt;strong&gt;实现编辑客户数据&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在编辑框，点击保存修改按钮，应该进行数据保存，如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225429533-1375392787.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;发起请求如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225434351-149280406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在页面找到的请求逻辑是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function updateCustomer() {
    $.post(&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;basePath&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;&lt;span&gt;customer/update.action&quot;,$(&quot;#edit_customer_form&quot;).serialize(),function(data){
        alert(&quot;客户信息更新成功！&quot;);
        window.location.reload();
    });
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7.5. &lt;strong&gt;编辑功能实现&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;7.5.1. &lt;strong&gt;Mapper&lt;/strong&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper&lt;span&gt;添加方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id编辑客户
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; customer
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; updateCustomerById(Customer customer);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.5.2. &lt;strong&gt;Mapper.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper.xml&lt;span&gt;编写&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateCustomerById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.crm.pojo.Customer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    UPDATE `customer`
    SET
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_name !=null and cust_name != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_name` = #{cust_name},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_user_id !=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_user_id` = #{cust_user_id},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_create_id !=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_create_id` = #{cust_create_id},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_source !=null and cust_source != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_source` = #{cust_source},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_industry !=null and cust_industry != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_industry` = #{cust_industry},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_level !=null and cust_level != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_level` = #{cust_level},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_linkman !=null and cust_linkman != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_linkman` = #{cust_linkman},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_phone !=null and cust_phone != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_phone` = #{cust_phone},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_mobile !=null and cust_mobile != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_mobile` = #{cust_mobile},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_zipcode !=null and cust_zipcode != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_zipcode` = #{cust_zipcode},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cust_address !=null and cust_address != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        `cust_address` = #{cust_address},
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    `cust_createtime` = NOW()
    WHERE
    (`cust_id` = #{cust_id});
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.5.3. &lt;strong&gt;Service&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编写&lt;/span&gt;CustomerService.&lt;span&gt;接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id编辑客户数据
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; customer
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; updateCustomerById(Customer customer);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.5.4. &lt;strong&gt;Service&lt;span&gt;接口实现类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerServiceImpl&lt;span&gt;实现接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateCustomerById(Customer customer) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerMapper.updateCustomerById(customer);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7.5.5. &lt;strong&gt;Controller&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerController&lt;span&gt;编写方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;需要正确的响应，要告诉前端更新成功。返回值有没有都可以。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里需要加&lt;/span&gt;@ResponseBody&lt;span&gt;注解，使其不走视图解析器。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id查询用户,返回更新后客户的json格式数据
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;update&quot;&lt;span&gt;)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String updateCustomerById(Customer customer) {
    Customer result &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerService.updateCustomerById(customer);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;OK&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;8.1. &lt;strong&gt;需求分析&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;点击客户列表中的删除按钮，提示&lt;/span&gt;“警告信息”，如下图&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225647996-1863492468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;如下图，点击确定后删除用户信息，并刷新页面。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225654275-1436158936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;发起的请求如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180711225659226-1832555067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;搜索前端&lt;/span&gt;jsp&lt;span&gt;页面逻辑找到如下代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function deleteCustomer(id) {
    if(confirm('确实要删除该客户吗?')) {
        $.post(&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;basePath&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;&lt;span&gt;customer/delete.action&quot;,{&quot;id&quot;:id},function(data){
            alert(&quot;客户删除更新成功！&quot;);
            window.location.reload();
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;8.2. &lt;strong&gt;功能&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;8.2.1. &lt;strong&gt;Mapper&lt;/strong&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper&lt;span&gt;添加方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id删除用户
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; deleteCustomerById(Long id);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;8.2.2. &lt;strong&gt;Mapper.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerMapper.xml&lt;span&gt;编写&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 根据id删除客户 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteCustomerById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;long&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    DELETE FROM
    customer WHERE cust_id = #{id}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;8.2.3. &lt;strong&gt;S&lt;/strong&gt;&lt;strong&gt;ervice&lt;/strong&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerService&lt;span&gt;编写接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 根据id删除客户
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; deleteCustomerById(Long id);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;8.2.4. &lt;strong&gt;Service&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;实现类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerServiceImpl&lt;span&gt;实现接口方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteCustomerById(Long id) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerMapper.deleteCustomerById(id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;8.2.5. &lt;strong&gt;Controller&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;CustomerController&lt;span&gt;编写方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 删除用户
 * 
 * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
 * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;delete&quot;&lt;span&gt;)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String deleteCustomerById(Long id) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.customerService.deleteCustomerById(id);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;ok&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 11 Jul 2018 15:22:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/9297264.html</dc:identifier>
</item>
<item>
<title>Jenkins 集群搭建 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/9297260.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/9297260.html</guid>
<description>&lt;h2 id=&quot;一.前言&quot;&gt;一.前言&lt;/h2&gt;
&lt;p&gt;Jenkins是当下比较流行的一款功能强大的持续集成工具，它支持搭建集群，来提高多项目的构建速度，模式为主从模式，master会将任务分配到各个从节点进行并发构建，从而提高速度，下面介绍一下如何搭建Jenkins集群。&lt;/p&gt;
&lt;h2 id=&quot;二.环境介绍&quot;&gt;二.环境介绍&lt;/h2&gt;
&lt;p&gt;系统环境：CentOS 7.2&lt;/p&gt;
&lt;p&gt;Jenkins版本：2.121.1 长期支持版&lt;/p&gt;
&lt;p&gt;两台服务器,一台作为master，一台作为slave，设A为master，设B为slave。&lt;/p&gt;
&lt;p&gt;关于Jenkins的安装，根据个人使用过一段时间来说，不推荐使用docker来安装，推荐直接安装。Jenkins只需要装在master即可。Jenkins的安装教程：https://www.cnblogs.com/stulzq/p/9291237.html&lt;/p&gt;
&lt;h2 id=&quot;三.从节点的环境准备&quot;&gt;三.从节点的环境准备&lt;/h2&gt;
&lt;p&gt;根据你是用的源代码管理工具git或者svn来安装对于的工具，还有需要安装可能会构建的项目所需的环境，比如.NET Core 项目就需要安装 .NET Core SDK，JAVA项目就需要安装JAVA环境。&lt;strong&gt;从节点无需安装Jenkins&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1.确保Master和Slave之间能相互通信。&lt;/p&gt;
&lt;p&gt;2.master执行以下shell命令，确保master能通过ssh登录slave&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;#生成秘钥 生成以后我这里保存在 /root/.ssh/id_rsa 记住这个位置
ssh-keygen
#将秘钥发送到slave 此过程会输入slave密码
ssh-copy-id &amp;lt;从节点用户一般为root&amp;gt;@&amp;lt;从节点ip&amp;gt;
#执行ssh命令进行登录
ssh &amp;lt;从节点用户一般为root&amp;gt;@&amp;lt;从节点ip&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四.建立结点&quot;&gt;四.建立结点&lt;/h2&gt;
&lt;p&gt;打开Jenkins -&amp;gt; 系统管理 -&amp;gt; 管理节点 -&amp;gt; 新建节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231908197-128509807.png&quot; alt=&quot;1531320204719&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按图中标记的顺序来操作，输入结点名称，选择固定结点类型，然后点击OK按钮。&lt;/p&gt;
&lt;h2 id=&quot;五.配置节点&quot;&gt;五.配置节点&lt;/h2&gt;
&lt;p&gt;结点名称：随意填&lt;/p&gt;
&lt;p&gt;描述：随意填&lt;/p&gt;
&lt;p&gt;并发构建数：同时进行构建的最大数量，我这里设置为2&lt;/p&gt;
&lt;p&gt;工作目录：从节点上的jenkins工作目录，权限要给足。&lt;/p&gt;
&lt;p&gt;标签：随意填，我们将项目关联到节点时，可以根据标签来。&lt;/p&gt;
&lt;p&gt;用法：选择“尽可能的使用这个节点”，相当于设置结点优先级。&lt;/p&gt;
&lt;p&gt;启动方式：“Launch slave agent via SSH”，使用SSH由master连接到slave来执行任务&lt;/p&gt;
&lt;p&gt;主机：slave的ip&lt;/p&gt;
&lt;p&gt;Credentials：见后文&lt;/p&gt;
&lt;p&gt;Host Key Verification Strategy ：Manually trusted key Verification Strategy&lt;/p&gt;
&lt;p&gt;Require manual verification of initial connection ：选中&lt;/p&gt;
&lt;p&gt;可用性：尽量保持在线&lt;/p&gt;
&lt;p&gt;工具位置：不设置&lt;/p&gt;
&lt;p&gt;环境变量：不设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231907790-106226018.png&quot; alt=&quot;1531320455275&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;credentials-的设置&quot;&gt;Credentials 的设置&lt;/h3&gt;
&lt;p&gt;点击“Add&quot;按钮，选择&quot;Jenkins&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231907359-1290323834.png&quot; alt=&quot;1531321510872&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照上图进行设置，设置以后，在界面上选择你刚刚设置的凭据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231906963-321822470.png&quot; alt=&quot;1531321564125&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后点击“添加”按钮，便完成了对slave的添加。&lt;/p&gt;
&lt;h2 id=&quot;六.验证连接从节点&quot;&gt;六.验证连接从节点&lt;/h2&gt;
&lt;p&gt;由于上面我们使用了“Manually Trusted Key Verification Strategy”策略，所以，这里我们需要手动验证一下从节点的身份。&lt;/p&gt;
&lt;p&gt;点击我们刚刚新建的从节点 -&amp;gt; 点击【Trust SSH Host Key】,点击【是】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231906661-1292251016.png&quot; alt=&quot;1531321887392&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击【Launch agent】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231906209-1088325438.png&quot; alt=&quot;1531321935987&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置完成的节点列表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231905850-961909766.png&quot; alt=&quot;1531322007850&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在左侧会显示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231905306-1119105314.png&quot; alt=&quot;1531322038785&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;七.job和slave的关联&quot;&gt;七.Job和slave的关联&lt;/h2&gt;
&lt;p&gt;在Job配置，进行如何设置即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201807/668104-20180711231904844-524831950.png&quot; alt=&quot;1531322143615&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;https://blog.csdn.net/ruangong1203/article/details/78687450&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 15:20:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/9297260.html</dc:identifier>
</item>
</channel>
</rss>