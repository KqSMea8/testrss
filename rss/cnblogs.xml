<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>dotnet core Linux下图片验证码解决方案 - 晓风.NET</title>
<link>http://www.cnblogs.com/xxff/p/9363477.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xxff/p/9363477.html</guid>
<description>&lt;p&gt;方案来源：https://github.com/zkweb-framework/zkweb.system.drawing&lt;/p&gt;
&lt;p&gt;百度大多都是安装&lt;code&gt;libgdiplus&lt;/code&gt;方法 不说了&lt;/p&gt;
&lt;p&gt;然后验证码乱码问题在上面地址中找到答案&lt;/p&gt;
&lt;p&gt;从3.0开始命名空间要改成 &lt;code&gt;System.DrawingCore （用&lt;/code&gt;System.Drawing会乱码）&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 15:58:00 +0000</pubDate>
<dc:creator>晓风.NET</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xxff/p/9363477.html</dc:identifier>
</item>
<item>
<title>ABP  开发（一） - 清风笑</title>
<link>http://www.cnblogs.com/KevinMO/p/9363466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/KevinMO/p/9363466.html</guid>
<description>
&lt;p&gt;rh &lt;/p&gt;




&lt;p&gt;    最近搞Angular ,使用Abp+Angular建项目，遇到部分问题，记录一下，以备查：&lt;/p&gt;
&lt;p&gt;一、Abp官网： https://aspnetboilerplate.com/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180722184037577-1747139456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点Get started 转到生成模块页：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180722184233521-618514026.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择Angular &lt;/p&gt;
&lt;p&gt;勾选： Include login ,register,user,role and tenant management pages。&lt;/p&gt;
&lt;p&gt;输入验证码。&lt;/p&gt;
&lt;p&gt;输入项目名称，点击Create my project! 就可以建立项目模板了&lt;/p&gt;
&lt;p&gt;我建的时候，APB版本是：3.9.0&lt;/p&gt;
&lt;p&gt;二、解压文件，得到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180723001355887-1647125352.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; angular 就是Angular 前端项目&lt;/p&gt;
&lt;p&gt;aspnet-core 就是API 后台项目&lt;/p&gt;

&lt;p&gt;三、打开aspnet-core 找到解决方案，解决方案的名称，就是刚开建模块时输入的项目名。&lt;/p&gt;
&lt;p&gt;四、编译解决方案，&lt;/p&gt;
&lt;p&gt;五、还原数据库：（注意：数据库版本：sql 2008不行，因为abp.dll 使用了下面这样的分页，2008不支持：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; sp_executesql N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SELECT [x].[Id], [x].[AccessFailedCount], [x].[AuthenticationSource], [x].[ConcurrencyStamp], [x].[CreationTime], [x].[CreatorUserId], [x].[DeleterUserId], [x].[DeletionTime], [x].[EmailAddress], [x].[EmailConfirmationCode], [x].[IsActive], [x].[IsDeleted], [x].[IsEmailConfirmed], [x].[IsLockoutEnabled], [x].[IsPhoneNumberConfirmed], [x].[IsTwoFactorEnabled], [x].[LastLoginTime], [x].[LastModificationTime], [x].[LastModifierUserId], [x].[LockoutEndDateUtc], [x].[Name], [x].[NormalizedEmailAddress], [x].[NormalizedUserName], [x].[Password], [x].[PasswordResetCode], [x].[PhoneNumber], [x].[SecurityStamp], [x].[Surname], [x].[TenantId], [x].[UserName]
FROM [AbpUsers] AS [x]
WHERE (([x].[IsDeleted] = 0) OR ([x].[IsDeleted] &amp;lt;&amp;gt; @__ef_filter__IsSoftDeleteFilterEnabled_0)) AND ([x].[TenantId] IS NULL OR (CASE
    WHEN [x].[TenantId] IS NULL
    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)
END = @__ef_filter__IsMayHaveTenantFilterEnabled_3))
ORDER BY [x].[UserName], [x].[Id]
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;@__ef_filter__IsSoftDeleteFilterEnabled_0 bit,@__ef_filter__IsMayHaveTenantFilterEnabled_3 bit,@__p&lt;br/&gt;_0 int,@__p_1 int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;@__ef_filter__IsSoftDeleteFilterEnabled_0&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;@__ef_filter__IsMayHaveTenantFilterEnabled_3&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;@__p_0&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;@__p_1&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我使用的是：sql 2014&lt;/p&gt;
&lt;p&gt;（再次说明，必须是项目编译通过之后，把MyHotelApp.Web.Host设为启动项目）&lt;/p&gt;
&lt;p&gt;在VS打开，程序包管理器控制台，并设：EntityFrameworkCore为默认项目，在命令行，输入:update-database  ,并回车，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180724011436929-467601799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt; 这里，点运行：等待程序运行，将会在浏览器出现下面界面：表示成功，就可以测试各API是否正常：&lt;/p&gt;
&lt;p&gt;登录：admin&lt;/p&gt;
&lt;p&gt;密码：123qwe&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180724234122277-152966493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;六、Angular项目使用VSCode打开，并在控制台运行：&lt;/p&gt;
&lt;p&gt;npm install &lt;/p&gt;
&lt;p&gt;（还原程序依赖包）&lt;/p&gt;
&lt;p&gt;成功后再运行：&lt;/p&gt;
&lt;p&gt;npm start&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180724234159284-487969987.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 看到以上界面表示启动Angular成功。&lt;/p&gt;

&lt;p&gt;这时打开浏览器：在地址输入：localhost:4200&lt;/p&gt;
&lt;p&gt;即可看到界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/32982/201807/32982-20180724234543958-708433918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户名：admin&lt;/p&gt;
&lt;p&gt;密码：123qwe&lt;/p&gt;

&lt;p&gt;至此已完成环境搭建。&lt;/p&gt;

&lt;p&gt;六、以下说一下配置：&lt;/p&gt;
&lt;p&gt;1、Angular&lt;/p&gt;
&lt;p&gt;   在 文件夹：angular\src\assets  中有一个appconfig.json, 内容如下：&lt;/p&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&quot;remoteServiceBaseUrl&quot;: &quot;http://localhost:21021&quot;,&lt;/p&gt;
&lt;p&gt;&quot;appBaseUrl&quot;: &quot;http://localhost:4200&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&quot;remoteServiceBaseUrl&quot;: &quot;http://localhost:21021&quot;,   这个就是配黑齿这套代码的：API访问的地址&lt;/p&gt;

&lt;p&gt;2、网站：在XXX.Web.Host 配置的参数（开发可以用默），文件名：appsettings.json中&lt;/p&gt;

&lt;div readability=&quot;19&quot;&gt;
&lt;p&gt;{&lt;br/&gt;&quot;ConnectionStrings&quot;: {&lt;br/&gt;&quot;Default&quot;: &quot;Server=localhost\\sql2014; Database=MyHotelAppDb; Trusted_Connection=True;&quot;&lt;br/&gt;},&lt;br/&gt;&quot;App&quot;: {&lt;br/&gt;&quot;ServerRootAddress&quot;: &quot;http://localhost:21021/&quot;,&lt;br/&gt;&quot;ClientRootAddress&quot;: &quot;http://localhost:4200/&quot;,&lt;br/&gt;&quot;CorsOrigins&quot;: &quot;http://localhost:4200,http://localhost:8080,http://localhost:8081&quot;&lt;br/&gt;},&lt;br/&gt;&quot;Authentication&quot;: {&lt;br/&gt;&quot;JwtBearer&quot;: {&lt;br/&gt;&quot;IsEnabled&quot;: &quot;true&quot;,&lt;br/&gt;&quot;SecurityKey&quot;: &quot;MyHotelApp_C421AAEE0D114E9C&quot;,&lt;br/&gt;&quot;Issuer&quot;: &quot;MyHotelApp&quot;,&lt;br/&gt;&quot;Audience&quot;: &quot;MyHotelApp&quot;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;返回有点像这个。&lt;/p&gt;
&lt;p&gt;暂时写这么多&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

</description>
<pubDate>Tue, 24 Jul 2018 15:54:00 +0000</pubDate>
<dc:creator>清风笑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/KevinMO/p/9363466.html</dc:identifier>
</item>
<item>
<title>从windows10迁移到Linux Deepin - qingshanli</title>
<link>http://www.cnblogs.com/qingshanli/p/9361840.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qingshanli/p/9361840.html</guid>
<description>&lt;p&gt;如题, 这几天从windows系统迁移到deepin的linux系统花了很多时间, 以致最近都没时间来博客园。现在将这几天的成果分享出来, 顺便也做个记录。先不多说, 上一张新系统界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278884/201807/1278884-20180724180004748-50331983.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实在装deepin之前, 我是装的&lt;a href=&quot;https://www.manjaro.cn&quot; target=&quot;_blank&quot;&gt;基于Arch Linux的Manjaro&lt;/a&gt;, 先是参照&lt;a href=&quot;https://www.cnblogs.com/demonxian3/p/9259912.html&quot; target=&quot;_blank&quot;&gt;完美脱离Windows!! Linux发行版第一系统 Manjaro 开箱教程&lt;/a&gt;装了Manjaro Deepin社区版, 发现系统在我电脑上很不稳定, 经常卡死机, 然后就去官方下载了 &lt;a href=&quot;https://www.manjaro.cn/153&quot; target=&quot;_blank&quot;&gt;稳定版Manjaro XFCE&lt;/a&gt;重装, 却又发现XFCE界面和windows相似, 非常不美观。到此我已对Manjaro失去耐心, 不想再浪费时间，就转投了Deepin的怀抱。此次换系统可谓是一波三折, 中间遇到的问题如果网上已经有解决方案, 我会直接贴出亲测过的有用链接, 不再重复造轮子。&lt;/p&gt;
&lt;p&gt;换系统之前, 首先对windows10系统进行磁盘清理:  &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/beatkirito/p/4986979.html&quot;&gt;释放你的硬盘空间！——Windows 磁盘清理技巧&lt;/a&gt;   &lt;a href=&quot;https://blog.csdn.net/yy763496668/article/details/71773584&quot; target=&quot;_blank&quot;&gt;清理C盘空间，给Win7释放更多C盘容量&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果装的是Manjaro, 可以参考: &lt;a href=&quot;https://www.cnblogs.com/demonxian3/p/9259912.html&quot; target=&quot;_blank&quot;&gt;完美脱离Windows!! Linux发行版第一系统 Manjaro 开箱教程&lt;/a&gt;         &lt;a href=&quot;https://blog.csdn.net/daerzei/article/details/79501000&quot; target=&quot;_blank&quot;&gt;VMware虚拟机下Manjaro17.1.6安装详细教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果装的是Deepin, 可以参考: &lt;a href=&quot;https://www.deepin.org/installation/&quot; target=&quot;_blank&quot;&gt;如何安装&lt;/a&gt;             &lt;a href=&quot;https://wiki.deepin.org&quot; target=&quot;_blank&quot;&gt;深度百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有个好处就是, 如果你安装的是Deepin, 在安装过程中以及装好后如有遇到解决不了的问题, 可以去 &lt;a href=&quot;https://bbs.deepin.org&quot; target=&quot;_blank&quot;&gt;深度社区&lt;/a&gt; 提问, 会有热心人解答。当然了Manjaro也有自己的社区, 但是在国内没有Deepin活跃........&lt;/p&gt;
&lt;p&gt;装好deepin之后, 好多软件都是给我们预装好的, 但是有些windows平台的软件没有linux版本, 这就用到了 Deepin商店的 &lt;a href=&quot;https://baike.baidu.com/item/crossover/7672017&quot; target=&quot;_blank&quot;&gt;CrossOver&lt;/a&gt; , CrossOver能帮我们将一些windows平台的软件移植到linux平台上运行, 但不是所有的多能移植, 这个得自己去尝试。&lt;/p&gt;
&lt;p&gt;之后就是开发工具 &lt;span&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/previous.html&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA&lt;/a&gt; &lt;/span&gt; 的安装和配置转移了, Idea的linux版本分为不带JDK的运行环境和自带JDK的运行环境两个选项可供下载:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278884/201807/1278884-20180724213956828-1941988929.png&quot; alt=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重点来了! 重要的事情说三遍! 说三遍! 说三遍!  &lt;strong&gt;不要下载 &lt;span&gt;不带JDK&lt;/span&gt; 的IDEA, 不然后面会遇到很多麻烦&lt;/strong&gt;。我一开始是下载的 不带JDK 的IDEA, 且本地使用的jdk1.7, 这时启动 IDEA 启动不起来, 报异常显示 当前的jdk环境不能编译 类版本号为52 的类(jdk1.7对应类版本为51, jdk1.8对应类版本为52), 这是因为 IDEA  从2016年后面的版本都需要 jdk1.8 的运行环境支撑才能运行, 所以需要另外给 IDEA 配置 JDK1.8 的运行环境。&lt;/p&gt;
&lt;p&gt;另外 不带JDK 的IDEA, 比自带JDK 的IDEA少了一个&lt;span&gt;jre64&lt;/span&gt;目录, 并且linux的IDEA比windows平台上少了好多字体, 比如我们常用的等宽字体 &lt;span&gt;consolas&lt;/span&gt; 和 &lt;span&gt;courier new&lt;/span&gt; 字体就没有, 而后面我们添加新字体都要在下图中的 &lt;span&gt;jre64\lib\fonts&lt;/span&gt; 目录下操作, 所以这里建议直接下载 自带JDK 的IDEA, 少折腾浪费时间多敲代码赚钱。。。。&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278884/201807/1278884-20180724220339864-1694431385.png&quot; alt=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装IDEA的破解教程请看这里:   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.igs.cc/03/30/593/&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 软件离线破解教程（转）已更新到2018.1.6版本&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/shengshengshiwo/article/details/79599761&quot; target=&quot;_blank&quot;&gt;Intellij IDEA的激活（使用破解补丁永久激活）&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;补丁请去下载最新的2.9版本, 低版本补丁已失效, 使用低版本注册激活码会报 invalid key 错误。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;一切就绪后, 可以按照 &lt;a href=&quot;https://blog.csdn.net/dancing_power/article/details/62949737&quot; target=&quot;_blank&quot;&gt;linux 下创建idea的桌面快捷方式&lt;/a&gt; 为我们的IDEA创建桌面快捷方式。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;为IDEA安装热部署插件Jrebel, 按照 &lt;a href=&quot;https://blog.csdn.net/cjwcjwwjcwjc/article/details/80050633&quot; target=&quot;_blank&quot;&gt;Jrebel 激活服务&lt;/a&gt; 破解插件。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;按照  &lt;a href=&quot;https://blog.csdn.net/u012078554/article/details/80675729&quot; target=&quot;_blank&quot;&gt;Linux IntelliJ IDEA 2018 版本 SVN配置&lt;/a&gt; 为IDEA集成 SVN版本控制， 命令：&lt;span&gt; sudo apt install subversion&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;在IDEA中添加&lt;span&gt;consolas&lt;/span&gt; 和 &lt;span&gt;courier new &lt;span&gt;字体: 首先在 &lt;a href=&quot;https://linux.linuxidc.com/index.php?folder=MjAxM8Tq18rBzy8xMdTCLzExyNUvSW50ZWxsaUogSURFQSDX1szlw8C7ryhhbnRpLWFsaWFzZWQpus3X1szlzO280w==&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 字体美化(anti-aliased)和字体添加&lt;/a&gt; 中下载 这两种字体, 解压后将字体文件复制到你自己的IDEA安装目录下的对应子目录中, 下面是我复制的字体:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278884/201807/1278884-20180724223623015-83282240.png&quot; alt=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;这里其实我们刚复制进来时, 文件是没有读取权限的 , 所以启动IDEA后是读取不到这几个新添加的字体的。还需要用命令: &lt;span&gt; sudo chmod 644 consola* cour* &lt;/span&gt; 给这几个文件添加读的权限, 添加权限后,  IDEA设置出现新的字体: &lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278884/201807/1278884-20180724224825659-1083723831.png&quot; alt=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;另外字体还可以参照 &lt;a href=&quot;https://www.v2ex.com/t/176310&quot; target=&quot;_blank&quot;&gt;以前你们说 Jetbrains 在 Linux 下字体差，我以为是真的&lt;/a&gt; 修改抗锯齿效果, 让字体更加美观。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;IDEA配置好tomcat、maven后, 启动项目时报类似 Error running Tomcat 8.5.31: Error copying configuration files from /usr/local/apache-tomcat-8.5.3/conf to /Users/zhouyuchen/Library/Caches/IntelliJIdea2016.1/tomcat/Tomcat_8_5_31_ttt/conf: Directory is invalid /usr/local/apache-tomcat-8.5.3/conf/Catalina 的异常, 参照 &lt;a href=&quot;https://blog.csdn.net/sunshinegirl168660/article/details/72674305&quot; target=&quot;_blank&quot;&gt;Ubuntu 系统中运行idea出现error running问题&lt;/a&gt; , 修改tomcat主目录权限, 命令: &lt;span&gt;chmod -R 755 tomcat主目录&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;span&gt;&lt;span&gt;上面问题解决后, 启动项目报 org.springframework.jndi.JndiLookupFailureException: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NameNotFoundException: Name [XXXXX] is not bound in this Context. Unable to find [jboss] 异常, 按网上普遍方案在项目中的web.xml下添加几行配置还是报错, 后面是将本地的tomcat8.0.53换成低版本的 tomcat8.0.47 就解决异常了......&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;span&gt;&lt;span&gt;上面一切完成后, IDEA才算是基本的配置好, 可以再讲我们之前的 IDEA 的&lt;strong&gt;个性化配置目录&lt;/strong&gt;(这个目录主要记录了：IDE 主要配置功能、自定义的代码模板、自定义的文件模板、自定义的快捷键、Project 的 tasks 记录等等个性化的设置)拷贝到我们新的IDEA开发环境中, 具体该目录的位置及功能介绍参照:   &lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/master/installation-directory-introduce.md&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 相关核心文件和目录介绍&lt;/a&gt; 。另外, 如果需要重新对IDEA进行个性化设置, 可以参照  &lt;a href=&quot;https://github.com/judasn/IntelliJ-IDEA-Tutorial&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 简体中文专题教程&lt;/a&gt; 。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;linux下命令参考: &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/wangkongming/p/4531341.html&quot;&gt;Linux查看系统信息的一些命令及查看已安装软件包的命令&lt;/a&gt;    &lt;a href=&quot;https://blog.csdn.net/a8039974/article/details/76977278/&quot; target=&quot;_blank&quot;&gt;整理了一下linux/ubuntu里面卸载软件的方法&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;因为linux下svn图形界面客户端都不怎么好用, 试了好几种直接转命令行了:   &lt;a href=&quot;https://blog.csdn.net/prettyshuang/article/details/38421205&quot; target=&quot;_blank&quot;&gt;svn常用命令详解（很全，很实用）&lt;/a&gt;      &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/lushilin/p/6100997.html&quot;&gt;linux下svn命令使用大全&lt;/a&gt;  &lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;安装包时可能会遇到  &lt;span&gt;apt-get install XXX: 无法定位软件包 &lt;/span&gt;问题, 参考  &lt;a href=&quot;https://blog.csdn.net/printwsl/article/details/80454285&quot; target=&quot;_blank&quot;&gt;telnet服务器与客户端配置（以及常见问题） &lt;/a&gt;    &lt;a href=&quot;http://www.baiyuxiong.com/?p=529&quot; target=&quot;_blank&quot;&gt;ubuntu sudo update与upgrade的作用及区别&lt;/a&gt;    &lt;a href=&quot;https://opsx.alibaba.com/mirror?lang=zh-cn&quot; target=&quot;_blank&quot;&gt;linux软件包镜像源&lt;/a&gt; , 在 /etc/apt/sources.list 中添加镜像源, 然后命令  &lt;span&gt;sudo apt-get update &lt;/span&gt; 更新软件包列表即可。&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;span&gt;..............................................................................................................未完待续, 后面遇到的问题会陆续完善到本篇文章中, 如有错误欢迎指正。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title-article&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 15:44:00 +0000</pubDate>
<dc:creator>qingshanli</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qingshanli/p/9361840.html</dc:identifier>
</item>
<item>
<title>nagios钉钉报警与邮件报警 - 说什么好呢</title>
<link>http://www.cnblogs.com/xuxiongbing/p/9362161.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuxiongbing/p/9362161.html</guid>
<description>
&lt;p&gt;由于公司需求，要有一个监控，并且可以钉钉、邮件报警，我就做了。虽然，我是tester，因为公司暂时没运维，我兼职了。&lt;/p&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;p&gt;* 已经装好naigos，但没配置报警&lt;/p&gt;
&lt;p&gt;* 需要linux下有python环境，并且安装requests第三方库&lt;/p&gt;


&lt;p&gt;首先，我先感概一下这nagios的配置真有点麻烦，而且没有说明文档参考，靠自己慢慢摸索，当时是搞了很久。不过，挺强大的，这个工具，什么命令都可以自己配置。&lt;/p&gt;
&lt;p&gt;1、在commands.cfg文件，配置一下报警命令&lt;/p&gt;
&lt;pre&gt;
python /usr/local/nagios/etc/objects/police_host.py &quot;$NOTIFICATIONTYPE$&quot; &quot;$HOSTADDRESS$&quot; &quot;$HOSTNAME$&quot; &quot;$SERVICEDISPLAYNAME$&quot; &quot;$SERVICEDESC$&quot; &quot;$LONGDATETIME$&quot; &quot;$SERVICEOUTPUT$&quot;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724162233578-23912317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、把dindin-bj-host这个命令加到联系人和联系人组中去（即contacts.cfg和contactgroups.cfg)&lt;/p&gt;
&lt;p&gt;修改contacts.cfg&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724162821167-332422866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改contactgroups.cfg&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724163104620-1065311194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、然后传入报警参数（nagios可用宏），自定义报警函数再调用即可，在police-service.py文件中&lt;/p&gt;
&lt;p&gt;自定义报警函数：&lt;/p&gt;
&lt;p&gt;dindin-对应钉钉&lt;/p&gt;
&lt;p&gt;SendTextMailParameterization-对应邮件报警，后面我会补充一下为什么不能sendEmail（一个邮件发送程序）发送邮件，而是自己写。&lt;/p&gt;
&lt;p&gt;3.1 传入报警参数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724164447229-398911852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.2 自定义报警函数-钉钉报警&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724164956062-2102228917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.3 自定义报警函数-邮件报警&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724165354620-2084066745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.4 导入基础包，代码部分到这里基本完成了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724165544222-1236201417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、开始执行代码，先测试一下  python   目录/police_host.py  11 22 33 44 55 66 77&lt;/p&gt;
&lt;p&gt;执行代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724165733323-96095550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;钉钉报警内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724165745402-1611124725.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;邮件报警内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724193713608-579787077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;5、因为，我是在window上写代码的，而监控主机在linux。还的迁移一下到服务器，并测试一下。同样的测试命令执行，结果为下图1，不要怀疑。这是对的。因为那个时间nagios并不会报警，nagios报警是有个时间段，每隔多少分钟&lt;/p&gt;
&lt;p&gt;才会报警，所以，那个时间的报警参数（nagios可用宏）就不会有。那么就等待15分钟把（我设置的是15分钟发送一次报警信息），就会有结果了，参考下图2和3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724170012605-1925374996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724231300032-1371517324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724231204315-61293371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;补充1   &lt;/p&gt;
&lt;p&gt;钉钉报警webhook在群机器人管理那添加，然后点击设置就有了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724225515981-554162375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;补充2     &lt;/p&gt;
&lt;p&gt;为什么不用sendEmail发送邮件呢？&lt;/p&gt;
&lt;p&gt;其实，我刚开始装nagios，也是百度，百度说邮件报警可以用这个。但我发现，阿里云服务器禁用了25端口，连接时总会提示超时。然后用我994端口，也是提示超时。&lt;span&gt;所以，就得找原因。一般连接超时，都是出外网有问题。所有就&lt;/span&gt;&lt;span&gt;ping smtphm.qiye.163.com,&lt;/span&gt;&lt;span&gt;可以通。再&lt;/span&gt;&lt;span&gt;telnet&lt;/span&gt;&lt;span&gt;一下端口，发现只有&lt;/span&gt;&lt;span&gt;994&lt;/span&gt;&lt;span&gt;端口可用，&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;端口被阿里云禁用了。&lt;/span&gt;&lt;span&gt;根据我几个月写小代码的经验，这个&lt;/span&gt;994&lt;span&gt;是加密端口，必须使用&lt;/span&gt;&lt;span&gt;ssl&lt;/span&gt;&lt;span&gt;。所以，我就&lt;/span&gt;&lt;span&gt;sendEmail&lt;/span&gt;&lt;span&gt;中搜索一下&lt;/span&gt;&lt;span&gt;ssl&lt;/span&gt;&lt;span&gt;，看一下是否支持，然后发现可用&lt;/span&gt;&lt;span&gt;-0 tls=yes&lt;/span&gt;&lt;span&gt;，但最终还是不行&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;说当前系统不支持。&lt;/span&gt;所以，我最终自己写个邮件程序，来发送。&lt;/p&gt;
&lt;p&gt;Sendmail&lt;span&gt;发送邮件提示超时&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724224554905-1429723191.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;sendEmail发送加密提示不支持，需要安装xxx&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/937391/201807/937391-20180724225033320-258990086.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 24 Jul 2018 15:19:00 +0000</pubDate>
<dc:creator>说什么好呢</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuxiongbing/p/9362161.html</dc:identifier>
</item>
<item>
<title>模型构建:不平衡样本集的处理 - hbsygfz</title>
<link>http://www.cnblogs.com/hbsygfz/p/9363257.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hbsygfz/p/9363257.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;分类预测建模都有一个基本的假设，即样本集中不同类别的样本个数基本相同，但是在实际任务中，经常会出现各类样本个数差别较大的情况，这样的样本集就是不平衡样本集，它对学习建模的性能会带来很大的影响，因此必须掌握常用的处理方法，本文针对这一点进行总结梳理。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是不平衡样本集&quot;&gt;1.什么是不平衡样本集？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;不平衡样本集（class-imbalance dataset）&lt;/strong&gt;是指分类预测任务中不同类别的训练样本的数量差别较大的数据集。&lt;br/&gt;举例：比如一个样本集中正例10例，反例990例，正例占比仅为1%，是一个严重的不平衡样本集。&lt;br/&gt;理想情况下，总希望训练集中各类样本分布均匀，但在实际情况中，样本集不平衡就是一个实实在在的现实而且合理的问题。比如流失预警模型中，真正流失的用户相对未流失的用户比例就是极小的；信用卡欺诈模型中，发生信用欺诈的用户也是极少的。&lt;/p&gt;
&lt;h2 id=&quot;不平衡样本集带来的影响&quot;&gt;2.不平衡样本集带来的影响？&lt;/h2&gt;
&lt;p&gt;样本集不平衡会导致模型很难从样本量较少的一方中提取到有用的规律，使得模型的学习结果偏向于样本量较多的一方。比如上面这个例子，正例10例，反例990例，即使一个模型将全部样例预测为反例，正确率也可以达到99%，但是对于我们想找到的正例这一目标来说，这个模型是无效的。&lt;br/&gt;一般地，对于一个二分类问题，正反例比例在1：5以内是可以不处理的，超过1：5就需要考虑处理这个问题。&lt;/p&gt;
&lt;h2 id=&quot;不平衡样本集的处理方法&quot;&gt;3.不平衡样本集的处理方法&lt;/h2&gt;
&lt;p&gt;以二分类任务为例，介绍不平衡样本集的处理方法。主要分为三种处理方法：&lt;/p&gt;
&lt;h3 id=&quot;对正例过抽样&quot;&gt;3.1 对正例过抽样&lt;/h3&gt;
&lt;p&gt;对训练集中的正例进行&lt;strong&gt;过抽样（oversampling&lt;/strong&gt;），即增加一些正例，使得正反例数目相接近。最简单的做法是直接复制正例的样本使样本数翻倍，但是这种方法带来的问题是，样本数的增加并没有带来新的特征，容易使模型产生较严重的过拟合。&lt;br/&gt;一种改进的做法是&lt;strong&gt;SMOTE（Synthetic Minority Over-sampling Technique）算法&lt;/strong&gt;，它是通过在正例中加入随机噪声、干扰数据或者一定规则来产生新的合成样本。&lt;/p&gt;
&lt;h3 id=&quot;对反例欠抽样&quot;&gt;3.2 对反例欠抽样&lt;/h3&gt;
&lt;p&gt;对训练集中的反例进行&lt;strong&gt;欠抽样（undersampling）&lt;/strong&gt;，即减少一些反例，使得正反例数目相接近。最直接的做法是直接随机提出到一些反例来减少反例的规模，但是这种方法带来的问题是，会丢失反例的一些重要信息。&lt;br/&gt;一种改进的做法是&lt;strong&gt;EasyEnsemble算法&lt;/strong&gt;，它是利用集成学习的思路，将反例划分成若干个子集，将各个子集分别与正例组合成均衡的训练集，进行学习产生多个模型，每个模型相当于都进行了欠抽样，但整体上又没有丢失反例的重要信息。&lt;/p&gt;
&lt;h3 id=&quot;阈值移动&quot;&gt;3.3 阈值移动&lt;/h3&gt;
&lt;p&gt;一般地，分类预测模型都会产生一个实值或者概率值，同时需要设定一个&lt;strong&gt;阈值（threshold）&lt;/strong&gt;，将模型的预测值与这个阈值进行比较，来判定预测结果是正例还是反例。默认情况下，这个阈值会设为0.50。为什么是0.50？是因为上文中提到的一个基本假设，假定训练集中的正反样例个数基本相同。但是实际情况中，正反例并不都是0.50，所以此时如果仍然将阈值设定为0.50就显得不太合适，应该认为，只要模型预测的概率大于随机抽取的概率（即训练集中正例的占比）都应该被判定为正例。&lt;br/&gt;按照这一思想，就产生了一种针对不平衡样本集的处理方法，即&lt;strong&gt;阈值移动（threshold-moving）&lt;/strong&gt;。&lt;br/&gt;它是指，直接使用原始训练集进行学习，但是在用这个学习到的模型进行预测时，要将原始的正例比例考虑到正例识别的阈值设定中。&lt;/p&gt;

&lt;h2 id=&quot;参考与感谢&quot;&gt;4.参考与感谢&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://book.douban.com/subject/26708119/&quot;&gt;机器学习&lt;/a&gt;&lt;br/&gt;[2] &lt;a href=&quot;https://book.douban.com/subject/27608466/&quot;&gt;Python数据分析与数据化运营&lt;/a&gt;&lt;br/&gt;[3] &lt;a href=&quot;https://blog.csdn.net/heyongluoyao8/article/details/49408131&quot;&gt;在分类中如何处理训练集中不平衡问题&lt;/a&gt;&lt;br/&gt;[4] &lt;a href=&quot;https://blog.csdn.net/login_sonata/article/details/54290402&quot;&gt;如何处理分类中的训练数据集不均衡问题&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 15:12:00 +0000</pubDate>
<dc:creator>hbsygfz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hbsygfz/p/9363257.html</dc:identifier>
</item>
<item>
<title>Java进阶篇设计模式之二 ----- 工厂模式 - 虚无境</title>
<link>http://www.cnblogs.com/xuwujing/p/9363142.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuwujing/p/9363142.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.cnblogs.com/xuwujing/p/9277266.html&quot;&gt;上一篇&lt;/a&gt;中我们学习了单例模式，介绍了单例模式创建的几种方法以及最优的方法。本篇则介绍设计模式中的工厂模式，主要分为简单工厂模式、工厂方法和抽象工厂模式。&lt;/p&gt;
&lt;h2 id=&quot;简单工厂模式&quot;&gt;简单工厂模式&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;简单工厂模式是属于创建型模式，又叫做静态工厂方法模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。调用只需要告诉工厂类所需要的类型，工厂类就会返回需要的产品类工厂的子类。 可以说是工厂模式中最简单的一种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打个比方，我们在电脑经常玩游戏，我们只需要告诉电脑我们要玩什么游戏，电脑就会打开这个游戏，我们并不需要关心游戏是怎么运作的。&lt;br/&gt;我们可以在以下的代码中进行相应的说明。&lt;/p&gt;
&lt;p&gt;我们首先创建一个游戏总类接口，包含一个玩游戏的方法； 然后再由各自的游戏类继承该类并实现该类的方法，最后在创建一个工程类根据不同的游戏进行创建对象。&lt;br/&gt;那么实现的代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
    private static final String LOL=&quot;LOL&quot;; 
    private static final String DNF=&quot;DNF&quot;; 
    
    public static void main(String[] args) {
        Game game= ComputerFactory.playGame(LOL);
        Game game2= ComputerFactory.playGame(DNF);
        game.play();
        game2.play();
    }
}

interface Game{
    void play();
}

class LOL implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩LOL...&quot;);
    }   
}

class DNF implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩DNF...&quot;);
    }   
}


class ComputerFactory{
    private static final String LOL=&quot;LOL&quot;; 
    private static final String DNF=&quot;DNF&quot;; 
     public static Game playGame(String game){
         if(LOL.equalsIgnoreCase(game)){
             return new LOL();
         }else if(DNF.equalsIgnoreCase(game)){
             return new DNF();
         }
         return null;
     }  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出结果：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;正在玩LOL...
正在玩DNF...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在使用简单工厂模式进行实现该功能之后，会发现我们将游戏类的实例化放到了工厂类中实现，隐藏了对象创建的细节，并且不需要知道是怎么玩的，只需要知道调用该工厂类就行了。而且方便切换，因为只需更改工厂类传递的类型值就行了。&lt;br/&gt;但是我们也发现一个问题，如果我们需要新增一个游戏类，那么需要新定义一个接口，然后还要在工厂类中添加一个判断分支，如果少量的话还好，但是大量的话就比较麻烦了，并且这也违背了开放-封闭原则。&lt;/p&gt;
&lt;h2 id=&quot;工厂方法模式&quot;&gt;工厂方法模式&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;工厂方法模式是 Java 中最常用的设计模式之一，属于创建型模式。定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在简单工厂模式中，我们发现在添加子类的时候，相应的也需要在工厂类中添加一个判断分支，是违背了开放-封闭原则的。而工厂方法模式就是主要解决这个问题的。&lt;/p&gt;
&lt;p&gt;这里还是用上述的玩游戏示例，只不过这里每个游戏都是由各自的游戏工厂类实现。主要区别就是由一个 工厂类变成了多个了，降低了耦合度。如果新增一个游戏类，相应的也只需在新增一个工厂类而已， 并且完美的遵循了开放-封闭原则。&lt;/p&gt;
&lt;p&gt;将上述代码更改之后，相应的代码实现如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private static final String LOL=&quot;LOL&quot;; 
    private static final String DNF=&quot;DNF&quot;; 
    private static final String WOW=&quot;WOW&quot;; 

    public static void main(String[] args) {

        Game game3=new LOLFactory().playGame(LOL);
        Game game4=new DNFFactory().playGame(DNF);
        Game game5=new WOWFactory().playGame(WOW);
        game3.play();
        game4.play();
        game5.play();       
    }
    
interface Game{
    void play();
}


class LOL implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩LOL...&quot;);
    }   
}

class DNF implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩DNF...&quot;);
    }   
}

class WOW  implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩WOW...&quot;);
    }   
}


interface ComputerFactory2{
    Game playGame(String game);
}

class LOLFactory implements ComputerFactory2{
    @Override
    public Game playGame(String game) {
        return new LOL();
    }
}

class DNFFactory implements ComputerFactory2{
    @Override
    public Game playGame(String game) {
        return new DNF();
    }
}

class WOWFactory implements ComputerFactory2{
    @Override
    public Game playGame(String game) {
        return new WOW();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;正在玩LOL...
正在玩DNF...
正在玩WOW...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到使用工厂方法模式之后，我们的代码更加清晰了，扩展性也变高了，如果想增加一个产品，只要扩展一个工厂类就可以。但是随之而来的是在系统中增加了复杂度，每增加一个产品时，都需要增加一个具体类和对象实现工厂类。&lt;br/&gt;所以在是否使用该模式需注意。&lt;br/&gt;使用该模式比较经典的使用案例是大名鼎鼎的&lt;strong&gt;hibernate&lt;/strong&gt;框架在选择数据库方言这块。但是如果直接简单的new一个对象的话，则不必使用了，若使用反而会增加系统的复杂度。&lt;/p&gt;
&lt;h2 id=&quot;抽象工厂模式&quot;&gt;抽象工厂模式&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;抽象工厂模式是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。也就是提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抽象工厂模式相比工厂方法模式来说更加复杂，也更难理解，但是更容易扩展。&lt;br/&gt;抽象工厂模式就将同一类的产品子类归为一类，让他们继承同一个抽象子类，然后把它们当作一组，然后再把多个组组成一个族。&lt;br/&gt;打个比方，还是上述的玩游戏，我们可以把&lt;strong&gt;LOL&lt;/strong&gt;和&lt;strong&gt;WOW&lt;/strong&gt;当作&lt;strong&gt;PVP&lt;/strong&gt;类型的游戏，也可以把&lt;strong&gt;DNF&lt;/strong&gt;和&lt;strong&gt;WOW&lt;/strong&gt;当作&lt;strong&gt;PVE&lt;/strong&gt;类型的游戏。&lt;/p&gt;
&lt;p&gt;那么相应更改的代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private static final String LOL=&quot;LOL&quot;; 
    private static final String DNF=&quot;DNF&quot;; 
    private static final String WOW=&quot;WOW&quot;; 
    
    public static void main(String[] args) {

        ComputerFactory3 cf3=new PVPFactory();
        cf3.playGame().play();
        cf3.playGame2().play();
        ComputerFactory3 cf4=new PVEFactory();
        cf4.playGame().play();
        cf4.playGame2().play();         
    }       
}


interface Game{
    void play();
}


class LOL implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩LOL...&quot;);
    }   
}

class DNF implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩DNF...&quot;);
    }   
}

class WOW  implements Game{
    @Override
    public void play() {
        System.out.println(&quot;正在玩WOW...&quot;);
    }   
}


interface ComputerFactory3{
     Game playGame();
     Game playGame2();
}

class PVPFactory implements ComputerFactory3{

    @Override
    public Game playGame() {
        return new LOL();
    }

    @Override
    public Game playGame2() {
        return new WOW();
    }   
}

class PVEFactory implements ComputerFactory3{

    @Override
    public Game playGame() {
        return new DNF();
    }

    @Override
    public Game playGame2() {
        return new WOW();
    }
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出结果：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;正在玩LOL...
正在玩WOW...
正在玩DNF...
正在玩WOW...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在抽象工厂模式中，可以在不需要知道产品是怎么样的，只需知道是哪个工厂类就行了。我们也可以根据子类的共同的特性而将它们设计在一起，组成一个相同类型组，可以很方便的直接调用。但是相对的，产品族比较难以扩展，增加一个产品，需要增加相应的接口和实现类。例如某个品牌的手机，有不同系列，每个系列有不同的型号，如果只是增加型号的话，比较容易，但是相对的，增加某个系列就比较麻烦了。&lt;br/&gt;所以我们在使用抽象工厂模式，也需要相应的结合实际场景来使用。&lt;/p&gt;
&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;
&lt;h3 id=&quot;音乐推荐&quot;&gt;音乐推荐&lt;/h3&gt;
&lt;p&gt;在这浮躁的社会，也会受其影响，从而无法静下心来。因此出门走走，静静的听下音乐，会感觉心情慢慢的舒缓起来，整个人也会轻松不少。于是便分享一首纯音乐，希望能够给读者带来轻松和微笑。&lt;/p&gt;

&lt;p&gt;原创不易，如果感觉不错，希望给个推荐！您的支持是我写作的最大动力！&lt;br/&gt;版权声明:&lt;br/&gt;作者：虚无境&lt;br/&gt;博客园出处：http://www.cnblogs.com/xuwujing&lt;br/&gt;CSDN出处：http://blog.csdn.net/qazwsxpcm　　　　&lt;br/&gt;个人博客出处：http://www.panchengming.com&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 14:42:00 +0000</pubDate>
<dc:creator>虚无境</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuwujing/p/9363142.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——WCF Client - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9362763.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9362763.html</guid>
<description>&lt;p&gt;WCF作为.NET Framework3.0就被引入的用于构建面向服务的框架在众多项目中发挥着重大作用。时至今日，虽然已有更新的技术可以替代它，但对于那些既存项目或产品，使用新框架重构的代价未必能找到人愿意买单。&lt;/p&gt;
&lt;p&gt;而在.NET Core平台环境中，WCF也并没有被完全列入迁移目标。WCF的服务端被搁置一旁，只有客户端已被移植入.NET Core之中。&lt;/p&gt;
&lt;p&gt;这意味着，如果有需求在.NET Core中，尤其是非Windows系统环境，调用现有的WCF服务，也并非一件不可能的事情。&lt;/p&gt;
&lt;p&gt;以一个实验来证明，先建一个解决方案工程，再加入两个类库项目及一个控制台应用程序。&lt;/p&gt;
&lt;p&gt;WcfService.Contract项目，这是WCF服务的接口，即服务契约。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;namespace WcfService.Contract
{
    [ServiceContract]
    public interface ICommunication
    {
        [OperationContract]
        string Ping(string msg);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WcfService项目，是对服务的实现。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;namespace WcfService
{
    public class Communication : ICommunication
    {
        public string Ping(string msg)
        {
            return string.Format(&quot;Pong: {0}&quot;, msg);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WcfService.Host项目，实现对服务的托管。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;namespace WcfService.Host
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var host = new ServiceHost(typeof(Communication)))
            {
                host.AddServiceEndpoint(typeof(ICommunication), new BasicHttpBinding(), new Uri(&quot;http://192.168.1.2:6666&quot;));

                host.Open();

                Console.WriteLine(&quot;Service is being hosted...&quot;);
                Console.Read();
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上三个项目皆使用.NET framework 4.5.2作为目标框架。&lt;/p&gt;
&lt;p&gt;通过运行WcfService.Host应用程序，可以将WCF服务端启动起来。当然此服务端只能运行在Windows系统环境之上。(为了实验，建议将系统的防火墙暂时关闭，以免无法连通)&lt;/p&gt;
&lt;p&gt;再找一个非Windows系统的环境，比如我使用的Mac Air。再创建一个控制台应用程序。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;dotnet new console -o WcfClientApp&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用Visual Studio Code打开工程，建议安装Nuget Package Manager插件，因为这里需要引入System.ServiceModel.Http类库。&lt;/p&gt;
&lt;p&gt;使用快捷键Ctrl(Command)+p，输入&amp;gt;nuget，选中Nuget Package Manager: Add Package，输入System.ServiceModel.Http，再选取最新版本的安装选项，对应的类库便会自动下载下来。&lt;/p&gt;
&lt;p&gt;除了这个类库之外，还需要使用之前创建的WcfService.Contract的dll文件。将其复制到某个目录下，并在csproj文件指明其具体位置即可。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&quot;System.ServiceModel.Http&quot; Version=&quot;4.5.3&quot;/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Reference Include=&quot;WcfService.Contract&quot;&amp;gt;
      &amp;lt;HintPath&amp;gt;bin\Debug\netcoreapp2.1\WcfService.Contract.dll&amp;lt;/HintPath&amp;gt;
    &amp;lt;/Reference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WCF客户端的代码如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using System;
using System.ServiceModel;
using WcfService.Contract;

namespace WcfClientApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var factory = new ChannelFactory&amp;lt;ICommunication&amp;gt;(
                new BasicHttpBinding(), 
                new EndpointAddress(new Uri(&quot;http://192.168.1.2:6666&quot;)));
            var channel = factory.CreateChannel();
            Console.WriteLine(&quot;Ping...&quot;);
            var result = channel.Ping(&quot;Hi&quot;);
            Console.WriteLine(result);
            ((ICommunicationObject)channel).Close();
            Console.Read();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将此客户端运行起来，可以看到这个实验成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180724215552201-2073294673.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然WCF Client在.NET Core上的使用一定是有限制，其仅支持HTTP与TCP两种通信协议，如NamedPipe(命名管道)，MSMQ这种Windows平台特有的通信协议，肯定是不被支持的。不过一般最常用的也就是这两种，所以大多数应用场景下也是够用了。&lt;/p&gt;
&lt;p&gt;上面提到了WCF服务端不被.NET Core所支持，但如果只是想建一个SOAP的服务，还是有解决方案的。&lt;/p&gt;
&lt;p&gt;同样是在macOS系统上，新建一个Web应用程序。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;dotnet new web -o SOAPApp&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过Nuget Package Manager安装SoapCore类库，并将WcfService.dll与WcfService.Contract.dll一并引入。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Folder Include=&quot;wwwroot\&quot;/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&quot;Microsoft.AspNetCore.App&quot;/&amp;gt;
    &amp;lt;PackageReference Include=&quot;SoapCore&quot; Version=&quot;0.9.8.1&quot;/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Reference Include=&quot;WcfService&quot;&amp;gt;
      &amp;lt;HintPath&amp;gt;bin\Debug\netcoreapp2.1\WcfService.dll&amp;lt;/HintPath&amp;gt;
    &amp;lt;/Reference&amp;gt;
    &amp;lt;Reference Include=&quot;WcfService.Contract&quot;&amp;gt;
      &amp;lt;HintPath&amp;gt;bin\Debug\netcoreapp2.1\WcfService.Contract.dll&amp;lt;/HintPath&amp;gt;
    &amp;lt;/Reference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在Startup文件中注入所需的服务，并增加SOAP服务的端点。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;namespace SOAPApp
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton(new Communication());
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseSoapEndpoint&amp;lt;Communication&amp;gt;(&quot;/Communication.svc&quot;, new BasicHttpBinding());
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行此Web应用程序，注意将默认的local地址改成实际的Url。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180724222535161-948863144.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再在Windows系统环境下建立一个控制台应用程序作为客户端用于检测。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;namespace WcfService.Client
{
    class Program
    {
        static void Main(string[] args)
        {
            var factory = new ChannelFactory&amp;lt;ICommunication&amp;gt;(new BasicHttpBinding(), 
                new EndpointAddress(new Uri(&quot;http://192.168.1.6:5000/Communication.svc&quot;)));
            var channel = factory.CreateChannel();
            Console.WriteLine(&quot;Ping...&quot;);
            var result = channel.Ping(&quot;Hi&quot;);
            Console.WriteLine(result);
            ((ICommunicationObject)channel).Close();
            Console.Read();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果，同样正常，这次的的尝试完美结尾。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180724222835977-2115094222.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 14:35:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9362763.html</dc:identifier>
</item>
<item>
<title>吴恩达《深度学习》第五门课（3）序列模型和注意力机制 - ysyouaremyall</title>
<link>http://www.cnblogs.com/ys99/p/9362629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ys99/p/9362629.html</guid>
<description>&lt;h2&gt;3.1序列结构的各种序列&lt;/h2&gt;
&lt;p&gt;（1）seq2seq：如机器翻译，从法文翻译成英文，将会是下面这样的结构，包括编码网络和解码网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724191651712-2134951822.png&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）image to sequence：比如给一幅图像添加描述，如下图中的“一只猫站在椅子上”。同样包括编码网络和解码网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724191835289-1600842005.png&quot; alt=&quot;&quot; width=&quot;433&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2选择最可能的句子&lt;/h2&gt;
&lt;p&gt;（1）机器翻译的本质就是一个条件语言模型，在给定输入的条件下输出最有可能的句子。&lt;/p&gt;
&lt;p&gt;（2）这里的条件语言模型与第一周讲的语言模型的区别在于，前者是有输入的，而后者是没有输入直接随机生成一个句子。&lt;/p&gt;
&lt;p&gt;（3）将使用束搜索的方法来寻找概率最高的句子，之所以不用贪心搜索是因为，每一次都选择概率最大的词组成的句子未必是概率最大的。&lt;/p&gt;
&lt;h2&gt;3.3集束搜索&lt;/h2&gt;
&lt;p&gt;（1）假设词汇量是10000，集束宽是3.&lt;/p&gt;
&lt;p&gt;（2）首先选出3个概率最大的作为第一个词。&lt;/p&gt;
&lt;p&gt;（2）然后3个词分别于10000个词总共组成30000个组，同样选出三个最大的概率。&lt;strong&gt;注意p(y&lt;sub&gt;1&lt;/sub&gt;,y&lt;sub&gt;2&lt;/sub&gt;|X)=p(y&lt;sub&gt;1&lt;/sub&gt;|X)p(y&lt;sub&gt;2&lt;/sub&gt;|y&lt;sub&gt;1&lt;/sub&gt;,X).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（3）上面选出来的3个两个词组成的词语又与10000个词组合成30000个组，选出最大的3个概率的词组，以此类推直到出现结束符。最后选出概率最大的句子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724195042978-1544155941.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;281&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4改进集束搜索&lt;/h2&gt;
&lt;p&gt;（1）由于每一项的值都是概率，小于1，所以很多项相乘时会越来越小，甚至出现下溢（电脑无法用浮点数精确表示）。所以对每个概率取对数，因为对数是单调递增，所以不会影响最终输出。&lt;/p&gt;
&lt;p&gt;（2）由于各项都是非常小的值，所以网络会偏向于输出很短的句子，为了避免这种情况，添加归一化项，将上面算出来的结果除以Ty&lt;sup&gt;α&lt;/sup&gt;，其中T&lt;sub&gt;y&lt;/sub&gt;是每个句子单词数，α取值为0-1，为0时即不归一化，为1时表示完全用长度归一化，可以取中间的值。&lt;sup&gt;&lt;br/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;（3）经过改进之后的目标函数叫归一化的对数似然目标函数。&lt;/p&gt;
&lt;h2&gt;3.5集束搜索的误差分析&lt;/h2&gt;
&lt;p&gt;（1）使用开发集，找出翻译错误的句子，用来做误差分析。人工翻译的句子记做y*,网络得到的结果记做ý，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724202038941-980159125.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;278&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）出错的原因只要分为两个原因，要么是RNN网络（包括编码和解码部分）出错，要么是使用的集束搜索算法有问题。&lt;/p&gt;
&lt;p&gt;（3）当p(y*|x)&amp;gt;y(ý|x)时说明集束搜索不能够给你一个概率更大的句子，所以是集束搜索出了问题，可以改变集束宽。&lt;/p&gt;
&lt;p&gt;（4）当p(y*|x)&amp;lt;y(ý|x)时说明RNN网络出问题了，网络本身没法让最好的翻译的概率最大。&lt;/p&gt;
&lt;h2&gt;3.6Bleu得分&lt;/h2&gt;
&lt;p&gt;（1）Bleu代表bilingual evaluation understudy（双语评估替补）。&lt;/p&gt;
&lt;p&gt;（2）比如说参考的标准翻译有“The cat is on the mat”和“There is a cat on the mat”都是非常好的翻译，同理还有其他很好的类似的句子，那么该怎么评估好坏呢？&lt;/p&gt;
&lt;p&gt;（3）上面的句子中the出现最多的次数是2，所以按照占比2/7，如果翻译出来的句子也有the，比如说翻译出来6个是the一个cat，其得分为2/7加上1/7.这是按照单词来计算了，分数的分子最大值是词汇在参考句子中占比的上限。&lt;/p&gt;
&lt;p&gt;（3）所有的参考翻译中相连的两词汇也可以组成一个词组，翻译的结果（相同的算一个）同样进行比对按照上面的方式来计算得分。三元词，四元词同样如此。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724210709768-295607261.png&quot; alt=&quot;&quot; width=&quot;386&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）最后按照下面式子翻译的计算精确度：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724210801587-807071633.png&quot; alt=&quot;&quot; width=&quot;507&quot; height=&quot;176&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 3.7注意力模型的直观理解&lt;/h2&gt;
&lt;p&gt;（1）当翻译一个特别长的句子时，如果将整个句子输入进去再进行翻译，网络是很难记住那么长的句子的，就跟人一样，人习惯看一点翻译一点，注意力集中在某一部分，注意力模型也是如此，如下图所示，首先是双向循环神经网络，这时不直接输出结果，而是利用一个注意力权重，再输入到一个RNN中之后在进行输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724212929291-620738750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724212945230-1395633813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.8注意力模型&lt;/h2&gt;
&lt;p&gt;（1）直接看上面的结构图。&lt;/p&gt;
&lt;h2&gt;3.9语音识别&lt;/h2&gt;
&lt;p&gt;（1）语音识别有两种主要的系统，一个是前面提到的注意力模型，还有一种叫做CTC（connectionist temporal classification）的系统。&lt;/p&gt;
&lt;p&gt;（2）由于在语音识别中，比如10s时长，采样频率是100，那么10秒钟将会有1000个输入，显然输出不可能有那么长的结果，这时让输出的长度与输入相等，输出可以用重复的字符和特殊的空白符（注意不是空格，空格的输出就是空格），如下图所示,这时将空白符所分割的重复字符折叠起来，最终生成正确的输出“the q”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724220029821-1173129791.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724220044055-1274418694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.10触发字检测&lt;/h2&gt;
&lt;p&gt;（1）下面是一个简单的触发字的示意图，当没有听到触发字时输出0，当听到关键字时输出1，由于正负样本严重失衡，所以可以在听到触发字之后一段时间都输出1来解决。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180724220804888-209079315.png&quot; alt=&quot;&quot; width=&quot;354&quot; height=&quot;143&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.11总结和致谢&lt;/h2&gt;
&lt;p&gt;（1）用深度学习这个强大的武器，去做你觉得可以让世界变得更加美好的事。&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 14:14:00 +0000</pubDate>
<dc:creator>ysyouaremyall</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ys99/p/9362629.html</dc:identifier>
</item>
<item>
<title>分布式事务1 - 烦嚣的人</title>
<link>http://www.cnblogs.com/wuyoucao/p/9362974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyoucao/p/9362974.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;  分布式事务是企业集成中的一个技术难点，也是每一个分布式系统架构中都会涉及到的一个东西，特别是在微服务架构中，几乎是无法避免的。&lt;/p&gt;
&lt;h2 id=&quot;一从单机事务到分布式&quot;&gt;一、从单机事务到分布式&lt;/h2&gt;
&lt;h3 id=&quot;数据库事务&quot;&gt;1.数据库事务&lt;/h3&gt;
&lt;p&gt;​ 我们都知道数据库事务的四个特性：原子性、一致性、隔离性和持久性，数据库事务由数据库软件自身来完成。假如数据库在提交事务的时候突然断电，数据库可以在日志记录中找到上一次事务操作然后根据当前数据库的情况进行undo回滚或者是redo前滚（基于某时刻的完整备份然后执行从该时刻到崩溃时间所有增删改查操作，使数据库恢复到崩溃前的状态）。在分布式环境中可能遇到的问题就更多了，例如机器宕机、网络异常、消息乱序、数据错误、存储数据丢失等等，数据库自身并没有比较好的解决方案（下文会提到一种数据库支持的解决方法）。&lt;/p&gt;
&lt;h3 id=&quot;分布式理论&quot;&gt;2.分布式理论&lt;/h3&gt;
&lt;p&gt;  当单个数据库的性能产生瓶颈的时候，我们可能会对数据库进行分区，这里分区指的是物理分区，分区后不同的库可能就在不同的服务器上了，这个时候单个数据库的ACID已经不能适应这种情况了，在集群情况下想保证集群的ACID是很困难的，即使能够达到，效率和性能也会大幅下降，而且难以拓展。这就需要一个新的理论&lt;strong&gt;CAP原则&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;  CAP是加州大学伯克利分校Eric Brewer教授提出的，他指出WEB服务无法同时满足以下3个属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一致性（Consistency):客户端发起的一系列操作都会同时生效&lt;/li&gt;
&lt;li&gt;可用性（Availability）：每个操作必须以可预期的响应结束&lt;/li&gt;
&lt;li&gt;分区容错性（Partition Tolerance）：即使单个组件无法使用，操作任然可以完成&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体的说在分布式系统中，任何数据库至多只能同时支持上面的两个属性，但是任何横向拓展策略都要依赖数据分区。因此，设计人员必须在一致性与可用性中作出选择。在此基础上后面又提出了另外一个理论，&lt;strong&gt;BASE&lt;/strong&gt;理论，用于对CAP原则进一步扩充。BASE理论指的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基本可用（Basically Available）&lt;/li&gt;
&lt;li&gt;软状态（Soft State）&lt;/li&gt;
&lt;li&gt;最终一致性（Eventually Consistent)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：&lt;strong&gt;我们没法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;二解决方案&quot;&gt;二、解决方案&lt;/h2&gt;
&lt;h3 id=&quot;两阶段提交2pc&quot;&gt;1.两阶段提交（2PC）&lt;/h3&gt;
&lt;p&gt;​ 主流关系型数据库大都支持，又叫&lt;strong&gt;XA Transactions(XAT)&lt;/strong&gt;。其中XA是一个两阶段提交协议，该协议分为以下两个阶段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一阶段：事务协调器要求每个涉及到事务的数据库预提交（precommit）此操作，并反映是否可以提交&lt;/li&gt;
&lt;li&gt;第二阶段：事务协调器要求每个数据库提交数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中，在第一阶段如果有任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此次事务中的那部分信息。通俗的说在进行一次事务操作时，事务管理器会先询问每个用到的数据库能不能操作成功（数据库进行一次预操作看能否成功），如果任意一个说操作失败，所有的数据库都回滚预操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：尽量保证了数据的强一致&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：实现复杂，可用性降低，同时对性能影响很大&lt;/p&gt;
&lt;h3 id=&quot;补偿事务tcc&quot;&gt;2.补偿事务（TCC）&lt;/h3&gt;
&lt;p&gt;​ 核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Try阶段主要对业务系统做检测及资源预留&lt;/li&gt;
&lt;li&gt;Confirm阶段主要对业务系统做确认提交，Try阶段执行成功然后开始执行Confirm阶段时，默认Confirm阶段是不会出错的。也就是只要Try成功，Confirm一定成功。&lt;/li&gt;
&lt;li&gt;Cancel阶段主要在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：跟2PC比起来，实现以及流程相对简单了点，但是数据的一致性也差一点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：在第二阶段、第三阶段都由可能失败。对业务代码入侵比较严重，需要在实现的时候多写很多补偿代码。&lt;/p&gt;
&lt;h3 id=&quot;本地消息表异步补偿&quot;&gt;3.本地消息表（异步补偿）&lt;/h3&gt;
&lt;p&gt;​ 本地消息应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路来源于ebay。&lt;/p&gt;
&lt;p&gt;​ 基本思路如下：&lt;/p&gt;
&lt;p&gt;​ 每个分布式节点都需要额外建一个消息表。&lt;/p&gt;
&lt;p&gt;​ 消息生产方，记录消息发送状态。消息表和业务数据放在一个事物里提交，然后消息经过MQ发送到消息的消费方，如果消息发送失败，进行重新发送。&lt;/p&gt;
&lt;p&gt;​ 消息消费方，需要处理这个消息，并完成自己的业务逻辑，同上也要将消息记录到消息表中，此时如果本地事务处理成功，将消息通过MQ发送给下一个消费方，知道所有事物执行完毕，如果事物处理失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作,生产方再向上传递，直到回到初始状态。&lt;/p&gt;
&lt;p&gt;​ 生产方和消费方定时扫描本地消息表，把还没处理玩的消息或失败消息再次发送一遍，这需要一个靠谱的自动对账补账逻辑。&lt;/p&gt;
&lt;p&gt;​ 这种方案遵循BASE理论，采用最终一致性，实现较为简单，性能也不错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：一种非常经典的实现，避免了分布式事务，实现了最终一致性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：消息表耦合到了业务系统中。&lt;/p&gt;
</description>
<pubDate>Tue, 24 Jul 2018 14:08:00 +0000</pubDate>
<dc:creator>烦嚣的人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyoucao/p/9362974.html</dc:identifier>
</item>
<item>
<title>SpringBoot_总结_01_配置详解 - shirayner</title>
<link>http://www.cnblogs.com/shirui/p/9359773.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shirui/p/9359773.html</guid>
<description>&lt;h2&gt;一、入口类和@SpringBootApplication&lt;/h2&gt;
&lt;p&gt;SpringBoot项目通常有一个名为*Application的入口类，入口方法为此类的main方法。&lt;/p&gt;

&lt;h3&gt;1. @SpringBootApplication&lt;/h3&gt;
&lt;p&gt;@SpringBootApplication注解是一个组合注解，主要组合了一下注解：&lt;/p&gt;
&lt;p&gt;（1）@Configuration : 声明当前类是一个配置类，相当于一个Spring配置的xml文件。意味着这个类里可能有0个或者多个@Bean注解。&lt;/p&gt;
&lt;p&gt;（2）@EnableAutoConfiguration : 让SpringBoot根据类路径中的jar包依赖为当前项目进行自动配置。&lt;/p&gt;
&lt;p&gt;（3）@ComponentScan:设置bean扫描的包。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
&lt;span&gt;@SpringBootConfiguration
@EnableAutoConfiguration&lt;/span&gt;
@&lt;span&gt;ComponentScan&lt;/span&gt;(excludeFilters &lt;/span&gt;=&lt;span&gt; {
        @Filter(type &lt;/span&gt;= FilterType.CUSTOM, classes = TypeExcludeFilter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;),
        @Filter(type &lt;/span&gt;= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;) })
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; SpringBootApplication &lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@&lt;span&gt;Configuration
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; SpringBootConfiguration
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此，若不使用@SpringBoot注解，则可以在入口类上直接使用这个三个注解。&lt;/p&gt;
&lt;p&gt;SpringBoot会自动扫描入口类所在的同级包以及下级包里的bean。&lt;/p&gt;

&lt;h3&gt;2.关闭特定的自动配置&lt;/h3&gt;
&lt;p&gt;通过@SpringBootApplication注解的参数exclude参数实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.&lt;span&gt;class&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.定制Banner&lt;/h3&gt;
&lt;p&gt;在SpringBoot启动时会有一个默认启动图案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/748623/201807/748623-20180724140849978-500019269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （1）修改Banner&lt;/p&gt;
&lt;p&gt;在src/main/resources 下新建一个banner.txt&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('04387550-147f-40c9-a61b-5007b73d7195')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_04387550-147f-40c9-a61b-5007b73d7195&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_04387550-147f-40c9-a61b-5007b73d7195&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('04387550-147f-40c9-a61b-5007b73d7195',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_04387550-147f-40c9-a61b-5007b73d7195&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;////////////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                          _ooOoo_                               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                         o8888888o                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                         88&quot; . &quot;88                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                         (| ^_^ |)                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                         O\  =  /O                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                      ____/`---'\____                           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                    .'  \\|     |&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  `.                         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                   /  \\|||  :  |||&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  \                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                  /  _||||| -:- |||||-  \                       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                  |   | \\\  -  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;/ |   |                       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                  | \_|  ''\---/''  |   |                       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                  \  .-\__  `-`  ___/-. /                       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                ___`. .'  /--.--\  `. . ___                     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;              .&quot;&quot; '&amp;lt;  `.___\_&amp;lt;|&amp;gt;_/___.'  &amp;gt;'&quot;&quot;.                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            \  \ `-.   \_ __\ /__ _/   .-` /  /                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;      ========`-.____`-.___\_____/___.-`____.-'========         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                           `=---='                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            佛祖保佑       永不宕机     永无BUG                    &lt;/span&gt;&lt;span&gt;//
////////////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;也可以去 &lt;a href=&quot;http://patorjk.com/software/taag/&quot; target=&quot;_blank&quot;&gt;http://patorjk.com/software/taag/&lt;/a&gt; 在线生成字符，然后将生成的字符复制到banner.txt文件中即可。&lt;/p&gt;

&lt;p&gt; （2）关闭Banner&lt;/p&gt;
&lt;p&gt;在入口文件Application.java的main方法中，修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e034a4f3-cf87-478b-8717-bcefcb27a346')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_e034a4f3-cf87-478b-8717-bcefcb27a346&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e034a4f3-cf87-478b-8717-bcefcb27a346&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e034a4f3-cf87-478b-8717-bcefcb27a346',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e034a4f3-cf87-478b-8717-bcefcb27a346&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
        SpringApplication application = &lt;span&gt;new&lt;/span&gt; SpringApplication(Application.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        application.setBannerMode(Banner.Mode.OFF);
        application.run(args);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;4.使用xml配置&lt;/h3&gt;
&lt;p&gt;SpringBoot提倡零配置，即无XML配置，但实际上有些特殊的配置需要使用XML配置。我们可以通过Spring提供的@ImportResource来加载XML配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@ImportResource({&quot;classpath:some-context.xml&quot;,&quot;classpath:another-context.xml&quot;})
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 二、基本配置&lt;/h2&gt;
&lt;h3&gt;1.默认配置文件&lt;/h3&gt;
&lt;p&gt;SpringBoot默认的配置文件名称为 application.properties，&lt;/p&gt;
&lt;p&gt;默认搜索路径为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;file:./                     // &lt;/span&gt;当前目录下的/config子目录，
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;file:./config/              // 当前目录&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
classpath:/                 // classpath根路径&lt;br/&gt;&lt;span&gt;
classpath:&lt;/span&gt;/config/          //classpath下的/config目录&lt;span&gt;
&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加载顺序按优先级排序的（列表中位置高的将覆盖位置低的）。&lt;/p&gt;
&lt;p&gt;注：Spring-boot配置文件的加载，&lt;/p&gt;
&lt;p&gt;先在与jar同级下查找，&lt;/p&gt;
&lt;p&gt;如果没有就去同级的config下查找；&lt;/p&gt;
&lt;p&gt;如果再没有，就在jar包中去查找相应的配置文件，&lt;/p&gt;
&lt;p&gt;如果再没有，就去jar包中的config下去查找。当查找到对应配置片段时，采用增量替换的方式来进行替换。&lt;/p&gt;


&lt;p&gt;具体可见源码 ConfigFileApplicationListener ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/748623/201807/748623-20180724142920912-1252509915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;2.profile&lt;/h3&gt;
&lt;p&gt;Profile为在不同环境下使用不同的配置提供了支持（如开发环境和生成环境下数据库的配置）&lt;/p&gt;
&lt;p&gt; 若启用dev开发环境配置，则需要在application.properties配置文件中，配置以下属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
spring.profiles.active=dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则，SpringBoot除了加载application.properties配置文件外，还会加载开发环境的application-dev.properties配置文件，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Mysql 注意替换相应配置
spring.datasource.driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-name=&lt;span&gt;com.mysql.jdbc.Driver
spring.datasource.url&lt;/span&gt;=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:3306/smart-blog&lt;/span&gt;
spring.datasource.username=&lt;span&gt;root
spring.datasource.password&lt;/span&gt;=root
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.server&lt;/h3&gt;
&lt;p&gt;（1）端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
server.port=9090
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）应用名&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
server.servlet.context-path=/weixin-service。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;三、外部配置&lt;/h2&gt;
&lt;h3&gt;1.命令行参数配置&lt;/h3&gt;
&lt;p&gt;SpringBoot可以基于jar包运行，打成jar包的程序可以直接通过下面的命令行运行，并修改Tomcat端口号：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
java -jar xx.jar --server.port=9090
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.常规属性配置&lt;/h3&gt;
&lt;p&gt;即@Value方式&lt;/p&gt;
&lt;p&gt;（1）在application.properties中增加属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　　book.author=wangyun&lt;span&gt;fei

　　　　　　book.name&lt;/span&gt;=Spring.boot
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）在需要使用属性的类中，如入口类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('10cb257c-b603-47ad-aaef-03d771ab2824')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_10cb257c-b603-47ad-aaef-03d771ab2824&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_10cb257c-b603-47ad-aaef-03d771ab2824&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('10cb257c-b603-47ad-aaef-03d771ab2824',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_10cb257c-b603-47ad-aaef-03d771ab2824&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@SpringBootApplication(exclude &lt;/span&gt;= {DataSourceAutoConfiguration.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Application {

    @Value(&lt;/span&gt;&quot;${book.author}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String bookAuthor;

    @Value(&lt;/span&gt;&quot;${book.name}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String bookName;

    @RequestMapping(&lt;/span&gt;&quot;/&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;book author is:&quot; +  bookAuthor+ &quot;  and book name is:   &quot; +&lt;span&gt; bookName ;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(Application.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;3.类型安全的配置&lt;/h3&gt;
&lt;p&gt;即基于properties&lt;/p&gt;
&lt;p&gt;@Value需要将属性一个一个的注入，当属性较多时，会比较麻烦。这时就可以通过 @ConfigurationProperties将properties 属性和一个Bean及其属性关联，从而实现安全配置。&lt;/p&gt;
&lt;p&gt;（1）application.properties配置文件&lt;/p&gt;
&lt;p&gt;在application.yml上添加（这里以yml格式为例），：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#微信公众平台配置
weixin:
    qy:
       corpId: ww92f5da92234696e
       agentSecret: I73733ve233s6H_ijPvIjYD4Rese5UlbYhhQOEE1&lt;/span&gt;-&lt;span&gt;I
       contactsSecret: 1m_9XP62YrXjSiYtL5Th323rqaExKfr_5eAL09w
       agentId: &lt;/span&gt;1000002&lt;span&gt;
       token: ray
       encodingAesKey: z2W9lyOAR1XjY8m2323qib0TlBZzCFiCLp6IdS2Iv
       state: hec4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也可以新建一个yml文件，这时我们需要使用@PropertiesSource将添加的文件的位置指定。&lt;/p&gt;

&lt;p&gt;（2）配置类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('400a1941-4f92-4690-8c35-12ea81fe1da2')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_400a1941-4f92-4690-8c35-12ea81fe1da2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_400a1941-4f92-4690-8c35-12ea81fe1da2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('400a1941-4f92-4690-8c35-12ea81fe1da2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_400a1941-4f92-4690-8c35-12ea81fe1da2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.ray.weixin.qy.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; : shira
 * @date : 2018/4/17
 * @time : 22:33
 * @desc :
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Data
@Component
@ConfigurationProperties(prefix &lt;/span&gt;= &quot;weixin.qy&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeiXinAuthConfig {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String corpId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String agentSecret;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String contactsSecret;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; agentId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String token;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String encodingAesKey;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String state;


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;通过 @ConfigurationProperties 加载文件内的配置，通过prefix属性指定properties的配置的前缀。&lt;/p&gt;

&lt;p&gt;然后在需要用的配置信息的时候，直接注入这个类就可以了。&lt;/p&gt;



&lt;h2&gt;四、参考资料&lt;/h2&gt;
&lt;p&gt;1.《Java EE 开发的颠覆者—SpringBoot 实战》，汪云飞&lt;/p&gt;

</description>
<pubDate>Tue, 24 Jul 2018 13:42:00 +0000</pubDate>
<dc:creator>shirayner</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shirui/p/9359773.html</dc:identifier>
</item>
</channel>
</rss>