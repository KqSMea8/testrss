<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>swagger上传文件并支持jwt认证 - Chaunce</title>
<link>http://www.cnblogs.com/xiaoliangge/p/9036247.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoliangge/p/9036247.html</guid>
<description>&lt;p&gt;　　由于swagger不仅提供了自动实现接口文档的说明而且支持页面调试，告别postman等工具，无需开发人员手动写api文档，缩减开发成本得到大家广泛认可&lt;/p&gt;
&lt;p&gt;但是由于swagger没有提供上传文件的支持，所以只能靠开发人员自己实现。今天就来看看如何扩展swagger达到上传文件的需求&lt;/p&gt;

&lt;h2&gt; 1安装swagger&lt;/h2&gt;
&lt;p&gt;nuget安装Swashbuckle.AspNetCore.Swagger组件&lt;/p&gt;
&lt;h2&gt;2设置生成xml&lt;/h2&gt;
&lt;p&gt;右键项目&amp;gt;属性&amp;gt;生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514143819498-420385282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相应的把其他需要生成文档说明的项目也按上步骤进行设置xml&lt;/p&gt;
&lt;p&gt;关键swagger代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.PlatformAbstractions;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Swashbuckle.AspNetCore.Swagger;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Chaunce.Api.App_Start
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SwaggerConfig
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SwaggerConfig
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; InitSwagger
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;services&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitSwagger(IServiceCollection services)
        {
            services.AddSwaggerGen(c &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                c.OperationFilter&lt;/span&gt;&amp;lt;&lt;span&gt;SwaggerFileUploadFilter&lt;/span&gt;&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件过滤处理
                &lt;/span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; security = new Dictionary&amp;lt;string, IEnumerable&amp;lt;string&amp;gt;&amp;gt; { { &lt;span&gt;&quot;Bearer&quot;&lt;/span&gt;, new string[] { } }, };
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;c.AddSecurityRequirement(security);&lt;span&gt;//添加一个必须的全局安全信息，和AddSecurityDefinition方法指定的方案名称要一致，这里是Bearer。&lt;/span&gt;&lt;/span&gt;

                &lt;span&gt;var&lt;/span&gt; basePath = PlatformServices.Default.Application.ApplicationBasePath;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取到应用程序的根路径&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; xmlApiPath = Path.Combine(basePath, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chaunce.Api.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;api文件xml(在以上步骤2设置生成xml的路径)&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; xmlModelPath = Path.Combine(basePath, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chaunce.ViewModels.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求modelxml&lt;/span&gt;
&lt;span&gt;                c.IncludeXmlComments(xmlApiPath);
                c.IncludeXmlComments(xmlModelPath);
                c.SwaggerDoc(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Info
                {
                    Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chaunce数据接口&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Version &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Description &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是一个webapi接口文档说明&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    TermsOfService &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Contact &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Contact { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chaunce官网&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Email = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info@Chaunce.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://blog.Chaunce.top/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                    License &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; License
                    {
                        Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Swagger官网&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        Url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://swagger.io/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    }
                });

                c.IgnoreObsoleteActions();
                c.AddSecurityDefinition(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bearer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ApiKeyScheme
                {
                    Description &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;权限认证(数据将在请求头中进行传输) 参数结构: \&quot;Authorization: Bearer {token}\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Authorization&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,//jwt默认的参数名称
                    In &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,//jwt默认存放Authorization信息的位置(请求头中)
                    Type &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apiKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                });//Authorization的设置
            });
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ConfigureSwagger
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;app&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureSwagger(IApplicationBuilder app)
        {
            app.UseSwagger();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), specifying the Swagger JSON endpoint.&lt;/span&gt;
            app.UseSwagger(c =&amp;gt;&lt;span&gt;
            {
                c.RouteTemplate &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docs/{documentName}/docs.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使中间件服务生成Swagger作为JSON端点(此处设置是生成接口文档信息，可以理解为老技术中的webservice的soap协议的信息，暴露出接口信息的地方)&lt;/span&gt;
                c.PreSerializeFilters.Add((swaggerDoc, httpReq) =&amp;gt; swaggerDoc.Info.Description = httpReq.Path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求过滤处理&lt;/span&gt;
&lt;span&gt;            });

            app.UseSwaggerUI(c &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                c.RoutePrefix &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置文档首页根路径&lt;/span&gt;
                c.SwaggerEndpoint(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/docs/v1/docs.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;V1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处配置要和UseSwagger的RouteTemplate匹配
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;V1&quot;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认终结点&lt;/span&gt;
                c.InjectStylesheet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/swagger-ui/custom.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注入style文件&lt;/span&gt;
&lt;span&gt;            });
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;swagger过滤器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Http;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Swashbuckle.AspNetCore.Swagger;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Swashbuckle.AspNetCore.SwaggerGen;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Chaunce.Api.Help
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; swagger文件过滤器
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SwaggerFileUploadFilter : IOperationFilter
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; swagger过滤器（此处的Apply会被swagger的每个接口都调用生成文档说明，所以在此处可以对每一个接口进行过滤操作）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;operation&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Apply(Operation operation, OperationFilterContext context)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!context.ApiDescription.HttpMethod.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, StringComparison.OrdinalIgnoreCase) &amp;amp;&amp;amp;
           !context.ApiDescription.HttpMethod.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PUT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; apiDescription =&lt;span&gt; context.ApiDescription;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameters = context.ApiDescription.ParameterDescriptions.Where(n =&amp;gt; n.Type == &lt;span&gt;typeof&lt;/span&gt;(IFormFileCollection) || n.Type == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IFormFile)).ToList();&lt;span&gt;//parameterDescriptions包含了每个接口所带所有参数信息
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parameters.Count() &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            operation.Consumes.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multipart/form-data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; fileParameter &lt;span&gt;in&lt;/span&gt;&lt;span&gt; parameters)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameter = operation.Parameters.Single(n =&amp;gt; n.Name ==&lt;span&gt; fileParameter.Name);
                operation.Parameters.Remove(parameter);
                operation.Parameters.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; NonBodyParameter
                {
                    Name &lt;/span&gt;=&lt;span&gt; parameter.Name,
                    In &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;formData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Description &lt;/span&gt;=&lt;span&gt; parameter.Description,
                    Required &lt;/span&gt;=&lt;span&gt; parameter.Required,
                    Type &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CollectionFormat = &quot;multi&quot;&lt;/span&gt;
&lt;span&gt;                });
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514145210423-906417390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514145314906-592771660.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开浏览器http://localhost:8532/docs/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514145459055-919002439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514145554092-2025470476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还没有结束，我们看看如何让Jwt的认证信息自动存在请求头免去每次手动塞&lt;/p&gt;
&lt;p&gt;点击&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514145710312-45411782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514151420074-807366219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（实际情况是填写的信息格式是:Bearer *************(Bearer与后面信息有一个空格)）&lt;/p&gt;
&lt;p&gt; 此时随意访问任何api，都会将以上信息自动塞入header中进行请求，如下验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/578477/201805/578477-20180514151455459-1553051126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 至此目的都达到了&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/Erik_Xu/p/8904854.html#3961244&lt;/p&gt;
&lt;p&gt;https://github.com/domaindrivendev/Swashbuckle&lt;/p&gt;

</description>
<pubDate>Mon, 14 May 2018 07:23:00 +0000</pubDate>
<dc:creator>Chaunce</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoliangge/p/9036247.html</dc:identifier>
</item>
<item>
<title>Scrapy爬虫框架第四讲(Linux环境）【Selector的使用】 - 疾风_lu</title>
<link>http://www.cnblogs.com/518894-lu/p/9032577.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/518894-lu/p/9032577.html</guid>
<description>&lt;p&gt;&lt;span&gt;下面我们来学习Selector的具体使用：&lt;/span&gt;（参考文档：http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/selectors.html）&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;Selector简介：Scrapy框架提供了自己的一套数据提取方法即Selector（选择器），它是基于lxml构建的，支持xpath、css、正则表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们主要介绍Selector与scrapy shell(scrapy中的交互模式)并结合xpath 、css 、 正则表达式的使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）、启动终端并激活虚拟环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）、使用scrapy shell 下载网站例子这里我已百度阅读畅销榜为例进行分析（scrapy shell https://yuedu.baidu.com/rank/hotsale?pn=0---爬取该网站，再使用fetch（‘https://yuedu.baidu.com/ebook/09075cc5a1116c175f0e7cd184254b35effd1a77?fr=bookrank’）下载具体一本书的页面）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
(course-python3.5-env) bourne@bourne-vm:~/example/example$ scrapy shell https://yuedu.baidu.com/rank/hotsale?pn=&lt;span&gt;0
&lt;/span&gt;2018-05-14 10:56:08 [scrapy.utils.log] INFO: Scrapy 1.5&lt;span&gt;.0 started (bot: example)
&lt;/span&gt;2018-05-14 10:56:08 [scrapy.utils.log] INFO: Versions: lxml 4.2.1.0, libxml2 2.9.8, cssselect 1.0.3, parsel 1.4.0, w3lib 1.19.0, Twisted 18.4.0, Python 3.5.2 (default, Nov 23 2017, 16:37:01) - [GCC 5.4.0 20160609], pyOpenSSL 17.5.0 (OpenSSL 1.1.0h  27 Mar 2018), cryptography 2.2.2, Platform Linux-4.13.0-36-generic-x86_64-with-Ubuntu-16.04-&lt;span&gt;xenial
&lt;/span&gt;2018-05-14 10:56:08 [scrapy.crawler] INFO: Overridden settings: {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BOT_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;example&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOGSTATS_INTERVAL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DUPEFILTER_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.dupefilters.BaseDupeFilter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER_AGENT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BaiduSpider&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ROBOTSTXT_OBEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: True, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SPIDER_MODULES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example.spiders&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NEWSPIDER_MODULE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;example.spiders&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;2018-05-14 10:56:08&lt;span&gt; [scrapy.middleware] INFO: Enabled extensions:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.extensions.memusage.MemoryUsage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.extensions.corestats.CoreStats&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.extensions.telnet.TelnetConsole&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;2018-05-14 10:56:08&lt;span&gt; [scrapy.middleware] INFO: Enabled downloader middlewares:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.retry.RetryMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.downloadermiddlewares.stats.DownloaderStats&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;2018-05-14 10:56:08&lt;span&gt; [scrapy.middleware] INFO: Enabled spider middlewares:
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.spidermiddlewares.referer.RefererMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy.spidermiddlewares.depth.DepthMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;2018-05-14 10:56:08&lt;span&gt; [scrapy.middleware] INFO: Enabled item pipelines:
[]
&lt;/span&gt;2018-05-14 10:56:08 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023
2018-05-14 10:56:08&lt;span&gt; [scrapy.core.engine] INFO: Spider opened
&lt;/span&gt;2018-05-14 10:56:08 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET https://yuedu.baidu.com/robots.txt&amp;gt;&lt;span&gt; (referer: None)
&lt;/span&gt;2018-05-14 10:56:09 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET https://yuedu.baidu.com/rank/hotsale?pn=0&amp;gt;&lt;span&gt; (referer: None)
[s] Available Scrapy objects:
[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)
[s]   crawler    &lt;/span&gt;&amp;lt;scrapy.crawler.Crawler object at 0x7f603750edd8&amp;gt;&lt;span&gt;
[s]   item       {}
[s]   request    &lt;/span&gt;&amp;lt;GET https://yuedu.baidu.com/rank/hotsale?pn=0&amp;gt;&lt;span&gt;
[s]   response   &lt;/span&gt;&amp;lt;200 https://yuedu.baidu.com/rank/hotsale?pn=0&amp;gt;&lt;span&gt;
[s]   settings   &lt;/span&gt;&amp;lt;scrapy.settings.Settings object at 0x7f603750eb38&amp;gt;&lt;span&gt;
[s]   spider     &lt;/span&gt;&amp;lt;DefaultSpider &lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; at 0x7f60370a54a8&amp;gt;&lt;span&gt;
[s] Useful shortcuts:
[s]   fetch(url[, redirect&lt;/span&gt;=True]) Fetch URL &lt;span&gt;and&lt;/span&gt;&lt;span&gt; update local objects (by default, redirects are followed)
[s]   fetch(req)                  Fetch a scrapy.Request &lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt; update local objects 
[s]   shelp()           Shell help (&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; this help)
[s]   view(response)    View response &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; a browser
In [&lt;/span&gt;1]: fetch(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://yuedu.baidu.com/ebook/09075cc5a1116c175f0e7cd184254b35effd1a77?fr=b&lt;/span&gt;
   ...: ookrank&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
2018-05-14 10:56:34 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET https://yuedu.baidu.com/ebook/09075cc5a1116c175f0e7cd184254b35effd1a77?fr=bookrank&amp;gt; (referer: None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面开始我们的实验：&lt;/p&gt;
&lt;p&gt;Selector与Css、Xpath 、正则表达式结合使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514110226022-964335138.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如我要提取书名，怎么办呢？（这里向小伙伴们说明一点爬取网页后会返回一个response 对象，下面我们使用css）&lt;/p&gt;
&lt;p&gt;答：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514110947035-1834690462.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析：这里我们先选中了class=&quot;content-block&quot;并构造了一个le对象--接着我们选取了le对象下的h1标签下的class=&quot;book-title&quot;的title属性--最后我们使用了restrict_first()（脱壳）提取了第一个结过并返回给我们一个字符串图书名&lt;/p&gt;
&lt;p&gt;CSS语法如下（具体请参见http://www.w3school.com.cn/cssref/css_selectors.asp）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514120125169-673251273.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514120140295-1313623142.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514120155791-1992838995.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们再使用xpath语法实现同样的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514122316432-23779910.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;xpath语法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514122457470-644395215.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;小伙伴们如需进一步了解请参考：http://www.w3school.com.cn/xpath/xpath_syntax.asp&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;我们再看一例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514121947245-1220310853.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514122002346-780760648.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析：我们先选中了ul 下的li 标签，接着我们使用嵌套选择使用xpath语法选择包好版权方字样的span，再选中它的父标签下的a标签下的文本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180514134810597-358947341.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;分析：这里我们同样使用了嵌套选择，首先选中了li的class为doc-info-tags标签下的 div的class为content的标签，再使用xpaht选择器选取了其下的文本，由于格式问题我们最后选用了re模块进行选择其中的文本并返回一个列表（正则表达式的用法请小伙伴们参考文档）&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;下面我们介绍下4个方法(我喜欢叫它们为脱壳方法)&lt;/p&gt;
&lt;p&gt;（1）extract_first()----返回第一个文本并以字符串形式返回&lt;/p&gt;
&lt;p&gt;（2）extract()---返回一个文本字符串列表&lt;/p&gt;
&lt;p&gt;（3）re()---返回一个列表的值&lt;/p&gt;
&lt;p&gt;（4）re_first()--返回第一个值&lt;/p&gt;
&lt;p&gt;其中：（3）（4）针对一些提取需要特殊处理的数据如上例&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;总结：以上我们分析了Selector与xpath\css\正则的结合使用，建议小伙伴们先学习后三者的基本语法，再多加练习即可，掌握方法即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img1.imgtn.bdimg.com/it/u=3988529316,4072912421&amp;amp;fm=214&amp;amp;gp=0.jpg&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;191&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 14 May 2018 06:08:00 +0000</pubDate>
<dc:creator>疾风_lu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/518894-lu/p/9032577.html</dc:identifier>
</item>
<item>
<title>R语言学习 第十二篇：因子 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4911110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4911110.html</guid>
<description>&lt;p&gt;因子（&lt;strong&gt;factor&lt;/strong&gt;)是R语言中比较特殊的一个数据类型， 它是一个用于存储&lt;span&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/span&gt;的类型，举个例子，从性别上，可以把人分为：男人和女人，从年龄上划分，又可以把人分为：未成年人（&amp;lt;18岁），成年人（&amp;gt;=18）。R把表示分类的数据称为因子，因子的行为有时像字符串，有时像整数。因子是一个向量，通常情况下，每个元素都是字符类型，也有其他数据类型的元素。因子具有因子水平（Levels），用于限制因子的元素的取值范围，R强制：因子水平是字符类型，因子的元素只能从因子水平中取值，这意味着，因子的每个元素要么是因子水平中的字符（或转换为其他数据类型），要么是缺失值，这是因子的约束，是语法上的规则。&lt;/p&gt;
&lt;h2&gt;一，创建因子&lt;/h2&gt;
&lt;p&gt;通常情况下，在创建数据框变量时，R隐式把数据类型为字符的列创建为因子，这是因为R会把文本类型默认为类别数据，并自动转换为因子。&lt;/p&gt;
&lt;p&gt;例如，创建一个数据框变量，通过class()函数检查gender列的类，结果是因子类型，而不是字符向量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
heights &amp;lt;-&lt;span&gt; data.frame(
  height_cm&lt;/span&gt;=c(&lt;span&gt;156&lt;/span&gt;,&lt;span&gt;182&lt;/span&gt;,&lt;span&gt;170&lt;/span&gt;&lt;span&gt;),
  gender&lt;/span&gt;=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
)
&lt;/span&gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;(heights$gender)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;factor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过factor()函数创建因子，&lt;strong&gt;factor()函数的第一个参数必须是字符向量&lt;/strong&gt;，通过&lt;strong&gt;levels&lt;/strong&gt;参数显式设置因子水平，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
factor(x = character(), levels, labels =&lt;span&gt; levels,
       exclude &lt;/span&gt;= NA, ordered = &lt;span&gt;is&lt;/span&gt;.ordered(x), nmax = NA)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;：是向量，通常是由少量唯一值的字符向量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;levels&lt;/strong&gt;：水平，字符类型，用于设置x可能包含的唯一值，默认值是x的所有唯一值。如果x不是字符向量，那么使用as.character(x)把x转换为字符向量，然后获取x向量的水平。x向量的取值跟levels有关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;labels&lt;/strong&gt;：是水平的标签，字符类型，用于对水平添加标签，相当于对因子水平重命名；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exclude&lt;/strong&gt;：排除的字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ordered&lt;/strong&gt;：逻辑值，用于指定水平是否有序；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nmax&lt;/strong&gt;：水平的上限数量&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，因子sex的值是向量c('f','m','f','f','m')，因子水平是c('f','m')：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt; sex &amp;lt;- factor(c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),levels=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&amp;gt;&lt;span&gt; sex
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] f m f f m
Levels: f m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;二，因子水平&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因子水平规定了因子取值的范围，每一个因子，都包含因子水平的信息，例如，打印gender列，可以看到因子的元素和水平：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; heights$gender
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] f m f
Levels: f m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该因子中的每个值都是一个字符串，它们被限制为“f”、“m”和缺失值（NA）。如果把其他字符串添加到gender列中，R会抛出警告消息，并把错误赋值的元素设置为NA，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt; heights$gender[&lt;span&gt;1&lt;/span&gt;]&amp;lt;-&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Warning message:
In `[&lt;/span&gt;&amp;lt;-.factor`(`*tmp*`, &lt;span&gt;1&lt;/span&gt;, value = c(NA, &lt;span&gt;2L&lt;/span&gt;, &lt;span&gt;1L&lt;/span&gt;&lt;span&gt;)) :
  invalid factor level, NA generated&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1，查看因子水平&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因子水平，可以通过函数levels(factor)来查看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; levels(heights$gender)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;水平的级数，相当于level的长度，可以由nlevels函数查询到：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; nlevels(heights$gender)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，因子水平的标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用factor函数创建因子，可以使用&lt;strong&gt;labels&lt;/strong&gt;参数为每个因子水平添加标签，&lt;strong&gt;labels&lt;/strong&gt;参数的字符顺序，要和&lt;strong&gt;levels&lt;/strong&gt;参数的字符顺序保持一致，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt; sex=factor(c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),levels=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),labels=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),ordered=&lt;span&gt;TRUE)
&lt;/span&gt;&amp;gt;&lt;span&gt; sex
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] female male   female female male  
Levels: female &lt;/span&gt;&amp;lt; male
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三，有序因子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，因子一般是无序的，这可以通过is.ordered()函数来验证：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt;.ordered(sex)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] FALSE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在特殊情况下，有些因子的水平在语义上大于或小于其他水平，R支持按顺序排列的因子，使用ordered函数，或通过给factor函数传入order=TRUE参数，把因子转换为有序的因子。&lt;/p&gt;
&lt;p&gt;例如，通过ordered函数把sex因子转换为有序的因子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; ordered(sex)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] f m f f m
Levels: f &lt;/span&gt;&amp;lt; m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者，通过factor函数创建有序因子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;gt; sex=factor(c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),levels=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),ordered=&lt;span&gt;TRUE)
&lt;/span&gt;&amp;gt;&lt;span&gt; sex
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] f m f f m
Levels: f &lt;/span&gt;&amp;lt; m
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四，删除因子水平&lt;/h2&gt;
&lt;p&gt;在数据清理时，可能需要去掉与因子水平对应的数据，通常情况下，需要删除未使用的因子水平，可以使用droplevels函数，它接受因子或是数据框作为参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
## S3 method &lt;span&gt;for&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;factor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
droplevels(x, exclude &lt;/span&gt;= &lt;span&gt;if&lt;/span&gt;(anyNA(levels(x))) NULL &lt;span&gt;else&lt;/span&gt;&lt;span&gt; NA, ...)
## S3 method &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;data.frame&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
droplevels(x, except, exclude, ...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果x是数据框，那么把数据框中未使用的因子删除。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
heights$gender &amp;lt;- droplevels(gender)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;五，把因子水平转换为字符串&lt;/h2&gt;
&lt;p&gt;在数据清理中，有时需要把因子转换为字符，通常情况下，使用as.character()函数，把因子转换为字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt;.character(heights$gender)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] NA  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者使用其他类型转换函数，把因子转换为特定的数据类型。&lt;/p&gt;
&lt;h2&gt;六，把连续变量分割为类别&lt;/h2&gt;
&lt;p&gt;函数cut()能够把数值变量切成不同的块，然后返回一个因子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
cut(x, breaks, labels =&lt;span&gt; NULL&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;：数值变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;breaks&lt;/strong&gt;：切割点向量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;labels&lt;/strong&gt;：每一个分组的标签&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，把身高数据，按照指定的切割点向量分割：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
cut(heights$height_cm,c(&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;170&lt;/span&gt;,&lt;span&gt;190&lt;/span&gt;&lt;span&gt;))
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] (&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;170&lt;/span&gt;] (&lt;span&gt;170&lt;/span&gt;,&lt;span&gt;190&lt;/span&gt;] (&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;170&lt;/span&gt;&lt;span&gt;]
Levels: (&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;170&lt;/span&gt;] (&lt;span&gt;170&lt;/span&gt;,&lt;span&gt;190&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/48472404/answer/164790545&quot; target=&quot;_blank&quot;&gt;如何理解R中因子(factor)的概念?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 05:15:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4911110.html</dc:identifier>
</item>
<item>
<title>Python并发编程之线程消息通信机制任务协调（四） - 站在两个世界的边缘</title>
<link>http://www.cnblogs.com/wongbingming/p/9035579.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wongbingming/p/9035579.html</guid>
<description>&lt;p&gt;大家好，&lt;code&gt;并发编程&lt;/code&gt; 进入第四篇。&lt;/p&gt;
&lt;h2 id=&quot;h&quot;&gt;&lt;span&gt;本文目录&lt;/span&gt;&lt;/h2&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Event事件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Condition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Queue队列&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;前面我已经向大家介绍了，如何使用创建线程，启动线程。相信大家都会有这样一个想法，线程无非就是创建一下，然后再&lt;code&gt;start()&lt;/code&gt;下，实在是太简单了。&lt;/p&gt;
&lt;p&gt;可是要知道，在真实的项目中，实际场景可要我们举的例子要复杂的多得多，不同线程的执行可能是有顺序的，或者说他们的执行是有条件的，是要受控制的。如果仅仅依靠前面学的那点浅薄的知识，是远远不够的。&lt;/p&gt;
&lt;p&gt;那今天，我们就来探讨一下如何控制线程的触发执行。&lt;/p&gt;
&lt;p&gt;要实现对多个线程进行控制，其实本质上就是消息通信机制在起作用，利用这个机制发送指令，告诉线程，什么时候可以执行，什么时候不可以执行，执行什么内容。&lt;/p&gt;
&lt;p&gt;经过我的总结，线程中通信方法大致有如下三种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;threading.Event&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;threading.Condition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;queue.Queue&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;先抛出结论，接下来我们来一一探讨下。&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;hevent&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; Event事件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Python提供了非常简单的通信机制 &lt;code&gt;Threading.Event&lt;/code&gt;，通用的条件变量。多个线程可以&lt;code&gt;等待某个事件的发生&lt;/code&gt;，在事件发生后，&lt;code&gt;所有的线程&lt;/code&gt;都会被&lt;code&gt;激活&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于Event的使用也超级简单，就三个函数&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;event = threading.Event()&lt;p&gt;&lt;br/&gt;event.clear()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;event.wait()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;event.set()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;举个例子来看下。&lt;/p&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;python language-python hljs&quot; readability=&quot;22&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; threading&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(threading.Thread)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, name, event)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;super().__init__()&lt;br/&gt;self.name = name&lt;br/&gt;self.event = event&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'Thread: {} start at {}'&lt;/span&gt;.format(self.name, time.ctime(time.time())))&lt;br/&gt;self.event.wait()&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'Thread: {} finish at {}'&lt;/span&gt;.format(self.name, time.ctime(time.time())))&lt;/p&gt;&lt;p&gt;threads = []&lt;br/&gt;event = threading.Event()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;[threads.append(MyThread(str(i), event)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]&lt;/p&gt;&lt;p&gt;&lt;br/&gt;event.clear()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;[t.start() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; threads]&lt;/p&gt;&lt;p&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'等待5s...'&lt;/span&gt;)&lt;br/&gt;time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'唤醒所有线程...'&lt;/span&gt;)&lt;br/&gt;event.set()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行一下，看看结果&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;python language-python hljs&quot; readability=&quot;3&quot;&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; start at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; start at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; start at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; start at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;p&gt;等待&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;s...&lt;/p&gt;&lt;p&gt;唤醒所有线程...&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; finish at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; finish at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; finish at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;Thread: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; finish at Sun May &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见在所有线程都启动（&lt;code&gt;start()&lt;/code&gt;）后，并不会执行完，而是都在&lt;code&gt;self.event.wait()&lt;/code&gt;止住了，需要我们通过&lt;code&gt;event.set()&lt;/code&gt;来给所有线程发送执行指令才能往下执行。&lt;/p&gt;
&lt;h3 id=&quot;hcondition&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; Condition&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Condition和Event 是类似的，并没有多大区别。&lt;/p&gt;
&lt;p&gt;同样，Condition也只需要掌握几个函数即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;cond = threading.Condition()&lt;p&gt;&lt;br/&gt;cond.acquire()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;cond.release()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;cond.wait()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;cond.notify()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;举个网上一个比较趣的捉迷藏的例子来看看&lt;/p&gt;
&lt;pre readability=&quot;17&quot;&gt;
&lt;code class=&quot;python language-python hljs&quot; readability=&quot;28&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; threading, time&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Hider&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(threading.Thread)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, cond, name)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;super(Hider, self).__init__()&lt;br/&gt;self.cond = cond&lt;br/&gt;self.name = name&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)  &lt;br/&gt;self.cond.acquire()&lt;/p&gt;&lt;p&gt;print(self.name + &lt;span class=&quot;hljs-string&quot;&gt;': 我已经把眼睛蒙上了'&lt;/span&gt;)&lt;br/&gt;self.cond.notify()&lt;br/&gt;self.cond.wait()&lt;br/&gt;print(self.name + &lt;span class=&quot;hljs-string&quot;&gt;': 我找到你了哦 ~_~'&lt;/span&gt;)&lt;br/&gt;self.cond.notify() &lt;/p&gt;&lt;p&gt;self.cond.release()&lt;br/&gt;print(self.name + &lt;span class=&quot;hljs-string&quot;&gt;': 我赢了'&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Seeker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(threading.Thread)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, cond, name)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;super(Seeker, self).__init__()&lt;br/&gt;self.cond = cond&lt;br/&gt;self.name = name&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;self.cond.acquire()&lt;br/&gt;self.cond.wait()&lt;br/&gt;print(self.name + &lt;span class=&quot;hljs-string&quot;&gt;': 我已经藏好了，你快来找我吧'&lt;/span&gt;)&lt;br/&gt;self.cond.notify()&lt;br/&gt;self.cond.wait()&lt;br/&gt;self.cond.release()&lt;br/&gt;print(self.name + &lt;span class=&quot;hljs-string&quot;&gt;': 被你找到了，哎~~~'&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;cond = threading.Condition()&lt;br/&gt;seeker = Seeker(cond, &lt;span class=&quot;hljs-string&quot;&gt;'seeker'&lt;/span&gt;)&lt;br/&gt;hider = Hider(cond, &lt;span class=&quot;hljs-string&quot;&gt;'hider'&lt;/span&gt;)&lt;br/&gt;seeker.start()&lt;br/&gt;hider.start()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过cond来通信，阻塞自己，并使对方执行。从而，达到有顺序的执行。&lt;br/&gt;看下结果&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;hider:   我已经把眼睛蒙上了&lt;br/&gt;seeker:  我已经藏好了，你快来找我吧&lt;br/&gt;hider:   我找到你了 ~_~&lt;br/&gt;hider:   我赢了&lt;br/&gt;seeker:  被你找到了，哎~~~&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hqueue&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; Queue队列&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;终于到了我们今天的主角了。&lt;/p&gt;
&lt;p&gt;从一个线程向另一个线程发送数据最安全的方式可能就是使用 queue 库中的队列了。创建一个被多个线程共享的 Queue 对象，这些线程通过使用&lt;code&gt;put()&lt;/code&gt; 和 &lt;code&gt;get()&lt;/code&gt; 操作来向队列中添加或者删除元素。&lt;/p&gt;
&lt;p&gt;同样，对于Queue，我们也只需要掌握几个函数即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; queue &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Queue&lt;br/&gt;q = Queue(maxsize=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;p&gt;&lt;br/&gt;q.get()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.get(timeout=&lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.put()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.join()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.qsize()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.empty()&lt;/p&gt;&lt;p&gt;&lt;br/&gt;q.full()&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数会比之前的多一些，同时也从另一方面说明了其功能更加丰富。&lt;/p&gt;
&lt;p&gt;我来举个老师点名的例子。&lt;/p&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;python language-python hljs&quot; readability=&quot;22&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; queue &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Queue&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Thread&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Thread)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, name, queue)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;super().__init__()&lt;br/&gt;self.name = name&lt;br/&gt;self.queue = queue&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;:&lt;br/&gt;msg = self.queue.get()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; msg == self.name:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{}：到！&quot;&lt;/span&gt;.format(self.name))&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Teacher&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, queue)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;self.queue=queue&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, student_name)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;老师：{}来了没？&quot;&lt;/span&gt;.format(student_name))&lt;br/&gt;self.queue.put(student_name)&lt;/p&gt;&lt;p&gt;queue = Queue()&lt;br/&gt;teacher = Teacher(queue=queue)&lt;br/&gt;s1 = Student(name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;小明&quot;&lt;/span&gt;, queue=queue)&lt;br/&gt;s2 = Student(name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;小亮&quot;&lt;/span&gt;, queue=queue)&lt;br/&gt;s1.start()&lt;br/&gt;s2.start()&lt;/p&gt;&lt;p&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'开始点名~'&lt;/span&gt;)&lt;br/&gt;teacher.call(&lt;span class=&quot;hljs-string&quot;&gt;'小明'&lt;/span&gt;)&lt;br/&gt;time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;teacher.call(&lt;span class=&quot;hljs-string&quot;&gt;'小亮'&lt;/span&gt;)&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;开始点名~&lt;br/&gt;老师：小明来了没？&lt;br/&gt;小明：到！&lt;br/&gt;老师：小亮来了没？&lt;br/&gt;小亮：到！&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;学习了以上三种通信方法，我们很容易就能发现&lt;code&gt;Event&lt;/code&gt; 和 &lt;code&gt;Condition&lt;/code&gt; 是threading模块原生提供的模块，原理简单，功能单一，它能发送 &lt;code&gt;True&lt;/code&gt; 和 &lt;code&gt;False&lt;/code&gt; 的指令，所以只能适用于某些简单的场景中。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;Queue&lt;/code&gt;则是比较高级的模块，它可能发送任何类型的消息，包括字符串、字典等。其内部实现其实也引用了&lt;code&gt;Condition&lt;/code&gt;模块（譬如&lt;code&gt;put&lt;/code&gt;和&lt;code&gt;get&lt;/code&gt;函数的阻塞），正是其对&lt;code&gt;Condition&lt;/code&gt;进行了功能扩展，所以功能更加丰富，更能满足实际应用。&lt;/p&gt;
&lt;hr/&gt;&lt;img src=&quot;https://i.loli.net/2018/04/30/5ae6ce87421aa.jpg&quot; alt=&quot;关注公众号，获取最新文章&quot; title=&quot;关注公众号，获取最新文章&quot;/&gt;关注公众号，获取最新文章</description>
<pubDate>Mon, 14 May 2018 05:03:00 +0000</pubDate>
<dc:creator>站在两个世界的边缘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wongbingming/p/9035579.html</dc:identifier>
</item>
<item>
<title>DDD实战进阶第一波(十)：开发一般业务的大健康行业直销系统（实现经销商登录仓储与逻辑） - 曹剑</title>
<link>http://www.cnblogs.com/malaoko/p/9035353.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/malaoko/p/9035353.html</guid>
<description>&lt;p&gt;上一篇文章主要讲了经销商注册的仓储和领域逻辑的实现，我们先把应用服务协调完成经销商注册这部分暂停一下，后面文章统一讲。&lt;/p&gt;
&lt;p&gt;这篇文章主要讲讲经销商登录的仓储和相关逻辑的实现。&lt;/p&gt;
&lt;p&gt;在现代应用程序前后端分离的实现中，通常不是将用户登录的信息存储在服务器端Session，因为会存在服务器Session无法传递的情况，也存在WebApi调用时&lt;/p&gt;
&lt;p&gt;无法通过Authorize Attribute判断用户是否已经登录并获取用户身份信息的问题。所以现代应用程序都是由服务器后端返回Token给客户端，客户端将Token存储在客户端&lt;/p&gt;
&lt;p&gt;Session中，客户端在请求后端接口时，带上Token，服务器端就能够识别客户端是否经过身份验证，而且可以直接拿到客户端的身份。&lt;/p&gt;
&lt;p&gt;要实现经销商的登录，主要由以下几个步骤组成。&lt;/p&gt;
&lt;p&gt;1.实现经销商登录时信息查询的仓储。&lt;/p&gt;
&lt;p&gt;2.在应用服务中，单独建立一个查询文件夹放置经销商登录的查询逻辑。&lt;/p&gt;
&lt;p&gt;3.在登录WebApi中，调用应用服务的查询逻辑并分发Token。&lt;/p&gt;

&lt;p&gt;1.实现经销商登录时信息查询的仓储：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ILoginRepository
    {
            Guid UserLogin(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; tel, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; password);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginEFCoreRepository : ILoginRepository
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; DbContext context;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoginEFCoreRepository(DbContext context)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.context =&lt;span&gt; context;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Guid UserLogin(&lt;span&gt;string&lt;/span&gt; tel, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; password)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dealercontext = &lt;span&gt;this&lt;/span&gt;.context &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DealerEFCoreContext;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; enpassword =&lt;span&gt; MD5Encrption.GetMd5Str(password);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; logindealer=&lt;span&gt;
                dealercontext.Login.Where(p &lt;/span&gt;=&amp;gt; p.Code == tel &amp;amp;&amp;amp; p.Password ==&lt;span&gt; enpassword).FirstOrDefault();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (logindealer != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; logindealer.DealerId;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Guid.Empty;
        }

          }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.应用服务中调用仓储完成用户登录的查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserLoginQuery:BaseAppSrv
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IRepository irepository;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ILoginRepository iloginrepository;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserLoginQuery(IRepository irepository, ILoginRepository iloginrepository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iloginrepository =&lt;span&gt; iloginrepository;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.irepository =&lt;span&gt; irepository;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Guid Login(UserLoginDTO userlogindto)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; (irepository)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; iloginrepository.UserLogin(userlogindto.Telphone, userlogindto.Password);
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception error)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; error;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在登录WebApi中调用应用服务，并分发令牌&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[AllowAnonymous]
        [HttpPost]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserLogin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResultEntity&amp;lt;UserLoginResultDTO&amp;gt;&lt;span&gt; UserLogin([FromBody] UserLoginDTO userlogindto)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; ResultEntity&amp;lt;UserLoginResultDTO&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; idealercontext = servicelocator.GetService&amp;lt;IDealerContext&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; irepository =&lt;span&gt;
                servicelocator.GetService&lt;/span&gt;&amp;lt;IRepository&amp;gt;(&lt;span&gt;new&lt;/span&gt; ParameterOverrides { { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, idealercontext } });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iloginrepository = servicelocator.GetService&amp;lt;ILoginRepository&amp;gt;(&lt;span&gt;new&lt;/span&gt; ParameterOverrides { { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, idealercontext } });
            UserLoginQuery userloginquery &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserLoginQuery(irepository, iloginrepository);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dealerid =&lt;span&gt; userloginquery.Login(userlogindto);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (dealerid !=&lt;span&gt; Guid.Empty)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; token = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JwtTokenBuilder()
                        .AddSecurityKey(JwtSecurityKey.Create(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msshcjsecretmsshcjsecret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                        .AddSubject(userlogindto.Telphone)
                        .AddIssuer(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DDD1ZXSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                        .AddAudience(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DDD1ZXSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                        .AddClaim(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NormalUser&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)                        
                        .AddExpiry(&lt;/span&gt;&lt;span&gt;600&lt;/span&gt;&lt;span&gt;)
                        .Build();

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userloginresultdto = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserLoginResultDTO();
                    userloginresultdto.Tel &lt;/span&gt;=&lt;span&gt; userlogindto.Telphone;
                    userloginresultdto.DealerId &lt;/span&gt;=&lt;span&gt; dealerid;
                    userloginresultdto.Token &lt;/span&gt;=&lt;span&gt; token.Value;

                    result.IsSuccess &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    result.Data &lt;/span&gt;=&lt;span&gt; userloginresultdto;
                    result.Msg &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录成功!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    result.ErrorCode &lt;/span&gt;= &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
                    result.Msg &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }

            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception error)
            {
                result.ErrorCode &lt;/span&gt;= &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
                result.Msg &lt;/span&gt;=&lt;span&gt; error.Message;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这里的UserLoginDTO定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserLoginDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Telphone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的UserLoginResultDTO定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserLoginResultDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Tel { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Guid DealerId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Token { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的JwtTokenBuilder定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JwtTokenBuilder
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; SecurityKey securityKey = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; subject = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; issuer = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; audience = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; claims = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; expiryInMinutes = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JwtTokenBuilder AddSecurityKey(SecurityKey securityKey)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.securityKey =&lt;span&gt; securityKey;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JwtTokenBuilder AddSubject(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; subject)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.subject =&lt;span&gt; subject;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JwtTokenBuilder AddIssuer(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; issuer)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.issuer =&lt;span&gt; issuer;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JwtTokenBuilder AddAudience(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; audience)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.audience =&lt;span&gt; audience;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JwtTokenBuilder AddClaim(&lt;span&gt;string&lt;/span&gt; type,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.claims.Add(type, value);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JwtTokenBuilder AddExpiry(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; expiryInMinutes)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.expiryInMinutes =&lt;span&gt; expiryInMinutes;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JwtToken Build()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; claims = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Claim&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.Sub,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subject),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString())

            }.Union(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.claims.Select(item =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(item.Key, item.Value)));

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; token = &lt;span&gt;new&lt;/span&gt; JwtSecurityToken(issuer: &lt;span&gt;this&lt;/span&gt;.issuer, audience: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.audience, claims: claims,
                expires: DateTime.UtcNow.AddMinutes(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.expiryInMinutes), signingCredentials:
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SigningCredentials(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.securityKey, SecurityAlgorithms.HmacSha256));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JwtToken(token);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的BearerUserInfo定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BearerUserInfo:Controller
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetUserName()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; principal = HttpContext.User &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ClaimsPrincipal;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (principal != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; claim &lt;span&gt;in&lt;/span&gt;&lt;span&gt; principal.Claims)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (claim.Subject != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subjectclaims = claim.Subject.Claims &lt;span&gt;as&lt;/span&gt; List&amp;lt;Claim&amp;gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; subjectclaims[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Value;
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的JwtSecurityKey定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JwtSecurityKey
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; SymmetricSecurityKey Create(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; secret)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的JwtToken定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JwtToken
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JwtSecurityToken token;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JwtToken(JwtSecurityToken token)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.token =&lt;span&gt; token;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ValidTo =&amp;gt;&lt;span&gt; token.ValidTo;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Value =&amp;gt; &lt;span&gt;new&lt;/span&gt; JwtSecurityTokenHandler().WriteToken(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.token);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上采用了.net core中关于OWIN的使用，具体不清楚的属性和方法，可以参考OWIN中.net core的实现标准，这里就不累述了，具体可以参考微信公众号中的视频讲解。&lt;/p&gt;
&lt;p&gt;QQ讨论群：309287205&lt;/p&gt;
&lt;p&gt;DDD实战进阶视频请关注微信公众号：&lt;img src=&quot;https://images2018.cnblogs.com/blog/56104/201805/56104-20180514115703841-1039033186.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 14 May 2018 03:58:00 +0000</pubDate>
<dc:creator>曹剑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/malaoko/p/9035353.html</dc:identifier>
</item>
<item>
<title>物联网：数据淘金——从数据中挖掘有效信息 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9035414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9035414.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如今是信息时代，得数据者得天下。然而，只是“有”数据还不够，数据的“准确性”和数据的“分析”也是至关重要的。爱因斯坦也说过：“能用的不一定有用，有用的也不一定能用。”&lt;/p&gt;
&lt;p&gt;“数据”和“信息”不是一码事。“数据”说的是一堆未经处理的原始测量结果，我们要分析它，取其精华去其糟粕，以用于获得有用的信息。所以咱们常说的“信息过载”其实不对，“数据”可能会过载，但“信息”越多越好。数据本身不一定有用，因为如果没有经过适当的筛选，数据可能像假新闻一样，使我们误入歧途。&lt;/p&gt;
&lt;p&gt;过去十年间，我们的数据量实现了爆炸式增长。《纽约时报》报道，2005年全球数据总量达到1300亿GB。现在的公司经常要处理数以PB记的数据。随着数据源的飞速增长，数据的获取速度也越来越快。科技进步如此迅速，转眼已是沧海桑田。据@HistoricalPics推特所述，1956年一个5MB硬盘要超过2000磅重，IBM要用一架飞机才能运输！低头看看巴掌大的手机，不由得心生感慨。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/1050107/ne9qgj2dqx.jpeg?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;随着对人们活动和传感器的测量，数据类型也在不断增加。而我们要记住：数据，只有经过了分析，变成了信息才有用。&lt;/p&gt;
&lt;p&gt;物联网的优势在于它能实时获取、组织数据。如果架构正确，物联网可以把数据变成有用的信息，用来决定下一步怎么办。&lt;/p&gt;
&lt;p&gt;Kristian J. Hammond在《哈佛商业评论》中曾掷地有声地说：“大多数时候，我们都知道我们想从数据中得到什么：我们知道需要分析什么东西、需要寻找什么相关性、需要怎么比较。我们可以把数据交给一个可以胜任这些工作的机器，然后让它用人类的方式、用自然语言告诉我们结果。这样，我们就能稳定、迅速地从数据中提取到大量有用信息——但如今还没有实现。通过辅以机器的力量，我们可以全自动地从数据中淘金，让冰冷的数字变成感性的认知。“&lt;/p&gt;

&lt;p&gt;物联网之前，分析传感器各式各样的海量数据非常困难。通过物联网技术，我们可以把机器得到的数据放入数据池自动分析，以决定下一步需要对数据和程序做些什么。物联网不仅收集、分析数据，它还会自我提升。&lt;/p&gt;
&lt;p&gt;在介绍具体步骤前，我们先明确两个在讨论数据传输时常用的术语：“北向(northbound)”和“南向(southbound)”。“北向数据”是指从设备发出，通过网关，送至云端的数据，一般是遥测数据，也可能是命令和控制请求。“南向数据”则是从云发至网关，或者从云通过网关发至设备，一般是命令和控制信息（如软件的更新，请求、更改配置参数等）。&lt;/p&gt;
&lt;p&gt;以下是利用南、北行信道，从探测数据中找到有用信息的方法：&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;&lt;strong&gt;第一步&lt;/strong&gt;：传感器发出北向遥测数据。根据架构的不同，这些数据会被预处理，然后发送到位于传感器附近的数据存储器（比如一个网关）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二步&lt;/strong&gt;：在网关这个临时节点上对数据进行一定量的分析，你可以在这处理数据（例如汇总数据，或者转换数据，为数据中心或云深入分析做好准备）。然后，把在网关上处理的信息和之前的精确结果比对，就是在历史信息中进行相关性匹配。发现的模式可以作为我们行动的依据。但除了发现已知模式，你也想找到你不知道的东西，想发现新的相关性和结论。例如，你可能不知道当气温降到10℃以下时，医生开出的抗流感处方会增加30％，而同时鸡汤、纸巾的销售额也会10天内上升。你以前可能没注意到这些关联，但现在有了物联网，你就可以用这些做出新的商业决策。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三步&lt;/strong&gt;：利用新的信息，您就可以建立一个规则。例如，当传感器发现温度已经降到10℃以下时，就让仓库把鸡汤和纸巾运到码头附近。这样，你就把信息变成了可监控、管理、执行的行事规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四步&lt;/strong&gt;：最后把制定好的规则付诸实践。就是如图所示的迭代过程。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1050107/7qh20ufcge.jpg?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;开源软件项目提供了标准化的工具包（例如Camel、Drools），你可以用它处理、操作数据。Apache Camel是一种基于Java规则的路由和中介引擎，具有可以处理数据的企业集成模式。它通过“开箱即用”(out-of-the-box)的信息中介、路由、数据转换，可以联网解决方案的开发。我认为最好通过Eclipse IoT工作组项目（如Eclipse Kapua、Kura）在IoT中使用Apache Camel。&lt;/p&gt;
&lt;p&gt;JBoss社区的Drools是一个内置了规则模板的业务规则管理系统，你可以用它规定在什么情况下应该采取什么措施。Drools通过定义明确的DSL（域特定语言）来实现物联网所需的规则和优化规则引擎所需的可扩展性。它还附带一个名为Workbench的GUI，可以让开发者非常简单地创建、编辑规则。&lt;/p&gt;
&lt;p&gt;把数据转化为有用的信息是所有物联网工作的核心，而通过开源软件可以实现这一目标，这有助于加速将物联网付诸实践。&lt;/p&gt;

&lt;blockquote readability=&quot;1.1447963800905&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;ask-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/55447?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;基于云计算的物联网应用场景有哪些？&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;ask-title&quot;&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1113956?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;对大数据和物联网环境中数据科学自动化的见解&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1106060?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;机器学习，流式IoT和医疗设备互联&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1116696?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;使用技术拯救自然：物联网版&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;col-article-title&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/developer/article/1100141?fromSource=waitui&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201803/1112679-20180330104936874-1573429539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/55447&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 03:58:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9035414.html</dc:identifier>
</item>
<item>
<title>【ASP.NET Core】JSON Patch 使用简述 - 东邪独孤</title>
<link>http://www.cnblogs.com/tcjiaan/p/9034869.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tcjiaan/p/9034869.html</guid>
<description>&lt;p&gt;JSON Patch 是啥玩意儿？不知道，直接翻译吧，就叫它“Json 补丁”吧。干吗用的呢？当然是用来修改 JSON 文档的了。那咋修改呢？比较常见有四大操作：AMRR。&lt;/p&gt;
&lt;p&gt;咋解释呢？&lt;/p&gt;
&lt;p&gt;A—— Add；&lt;/p&gt;
&lt;p&gt;M—— Move；&lt;/p&gt;
&lt;p&gt;R—— Replace；&lt;/p&gt;
&lt;p&gt;R—— Remove。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Add 就是向 JSON 对象中添加一对 key - value，或者向 Json Array 中加个元素。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Move 就是把某个节点从一个地方移到另一个地方。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Replace 就是替换，比如把 city 的值从“广州”改为“珠海”。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Remove 就是删除 JSON 对象中的某对 key - value，或者从 Json Array 中删除一个元素。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;除了上述四大美女外，还有 copy，就是把某个节点复制到另一个地方；test 这个嘛，在修改 JSON 文档之前验证某个值，如果值正确了就进行更新，如果值不对就“呵呵“，比如，可以 test 一下 age 属性是否为 25，如果是就更新 SON 文档，如果不是就算了吧。&lt;/p&gt;
&lt;p&gt;这个 JSON Patch 也不是很复杂，你可以参考主页上的说明，主页地址：&lt;a href=&quot;http://jsonpatch.com/&quot; target=&quot;_blank&quot;&gt;http://jsonpatch.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个 JSON Patch 有什么用呢？有用得很！尤其是现在很多数据都是通过网络来传输的，而且许多数据也喜欢用 JSON 格式（貌似是比 XML 简单一些）。如果 JSON 文档比较长，客户端获取了数据后，然后可能会对数据进行更新，然后更新时又把整个 JSON 文档提交回服务器。虽然这一来一回，所产生的流量远不如你打《王者农药》所产生的流量，但是，如果传输频繁，这个流量消耗也是不小的，毕竟各大运营商是增不降费的。按照现在各种破 App 内含数不胜数的虚假广告和一些无用的图片信息，刷几条微博就刷掉 5-6 M 的流量了。&lt;/p&gt;
&lt;p&gt;所以说，尽量减少传输量是很有必要的。JSON Patch 不必把整个 JSON 文档都提交回服务器，而仅告诉服务器你要更新哪个地方就好了。比如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[
   { &lt;/span&gt;&quot;op&quot; : &quot;add&quot;, &quot;path&quot; : &quot;/age&quot;, &quot;value&quot; : &quot;150&quot;&lt;span&gt; },
   { &lt;/span&gt;&quot;op&quot; : &quot;replace&quot;, &quot;path&quot; : &quot;/name&quot;, &quot;value&quot; : &quot;老鬼&quot;&lt;span&gt; }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，JSON Patch 本质上也是一个 JSON 文档。在写的时候，要记得最外面有一层中括号，为啥？你都看到了，是个数组。因为你可以同时把多个操作组合在一起提交。就像上面的，add 和 replace 操作就一起提交了。&lt;/p&gt;

&lt;p&gt;当然了，老周本文重点是介绍如何在 ASP.NET Core 中使用 JSON Patch 的，所以，下面咱们切入正题，不说 F 话了。&lt;/p&gt;
&lt;p&gt;ASP.NET Core 的 API 自身也有与 JSON Patch 相关的实现，所以，用起来还是挺省心的。这些 API 都分布在 Microsoft.AspNetCore.JsonPatch.* 命名空间中。&lt;/p&gt;
&lt;p&gt;相当核心的一个类就是 JsonPatchDocument&amp;lt;TModel&amp;gt;，TModel 是指你要用来生成 JSON 文档的模型类。当客户端提交 JSON Patch 上来后，会自动包含在该对象上，然后你只要调用一下 AppliyTo 方法就可以对模型对象进行更新了。&lt;/p&gt;
&lt;p&gt;非常简单的，下面老周就给你演示一下。这里我用的 Web API ，因为这一情形是最为常用的。模型对象是一个字典实例—— IDictionary&amp;lt;string, object&amp;gt;，之所以用字典，是因为字典比较好添加属性。&lt;/p&gt;
&lt;p&gt;添加一个 API 控制器类，然后初始化一个字典实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoController : Controller
    {
        IDictionary&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;
        {
            [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;非洲黑鹿&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;35&lt;/span&gt;&lt;span&gt;,
            [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19929939900&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        };
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了可以获取数据，可以定义一个 HTTP-GET 方法访问的方法，并将字典以 JSON 文档返回。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        [HttpGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pick&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult PickData()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Json(dic);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面来重点了，为了能够使用 JSON Patch 来更新字典对象，还要弄一个以 HTTP-POST 方法提交的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        [HttpPost(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IActionResult SetData([FromBody]JsonPatchDocument&amp;lt;IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;,&lt;span&gt;object&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; body)
        {
            body.ApplyTo(dic);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Json(dic);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请严重注意：&lt;/p&gt;
&lt;p&gt;1、方法参数的类型是 JsonPatchDocument&amp;lt;TModel&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;，这样服务器收到客户端提交的 JSON Patch 文档后会自动创建 JsonPatchDocument 实例并传递给 body 参数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;2、在参数上要应用 FromBodyAttribute （特性），因为你得告诉运行时，客户端 POST 上来的整个数据正文将用于生成 JSON Patch 文档。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;3、更新字典实例很简单，直接调用 JSON Patch 文档的 ApplyTo 方法就完事了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;好了，就是这么简单，这个演示的例子就完工了。不过得打开 Program.cs 文件，配置一下 Host。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            WebHostBuilder bd &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebHostBuilder();
            bd.UseContentRoot(Directory.GetCurrentDirectory())
                .UseStartup&lt;/span&gt;&amp;lt;Startup&amp;gt;&lt;span&gt;()
                .UseUrls(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://*:6000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                .UseKestrel();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; host =&lt;span&gt; bd.Build();
            host.Run();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;http://*:6000 表示应用程序的 URL 在 6000 端口上侦听连接，* 表示绑定给本机的任意主机名。比如 localhost。&lt;/p&gt;

&lt;p&gt;在 Startup 类中，还要配置 MVC 的内容，Web API 其实也是 MVC 的一种，只是它不返回 HTML 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app)
        {
            app.UseMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于刚才在 DemoController 控制器中已经用了路由特性指定了路由规则，那么这里就不用再配置全局路由规则了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
   [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好，现在我们来测试一下。测试 API 可以用 Postman 大叔，因为它比较牛。&lt;/p&gt;
&lt;p&gt;首先，输入 URL http://localhost:6000/api/demo/pick，方式为 GET。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514112302716-815125761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后返回以下数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514112336950-443109852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在，我们把里面的 name 属性改为“巴西龟”。输入 URL  http://localhost:6000/api/demo/set，提交方式为 POST。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514112458607-1251962808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择 “body” ，格式选 raw，Content Type 选 JSON ( application / json )。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514112810407-674503895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后输入以下 JSON 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[
 { &lt;/span&gt;&quot;op&quot; : &quot;replace&quot;&lt;span&gt;,
   &lt;/span&gt;&quot;path&quot; : &quot;/name&quot;&lt;span&gt;, 
   &lt;/span&gt;&quot;value&quot; : &quot;巴西龟&quot;&lt;span&gt; 
 }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提交之后，得到更新后的字典数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514112946426-754891005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们还可以进行多个操作，除了修改 name 的值，还可以考虑添加一个项。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[
 { &lt;/span&gt;&quot;op&quot; : &quot;replace&quot;&lt;span&gt;,
   &lt;/span&gt;&quot;path&quot; : &quot;/name&quot;&lt;span&gt;, 
   &lt;/span&gt;&quot;value&quot; : &quot;巴西龟&quot;&lt;span&gt; 
 },
 {
   &lt;/span&gt;&quot;op&quot; : &quot;add&quot;&lt;span&gt;,
   &lt;/span&gt;&quot;path&quot; : &quot;/email&quot;&lt;span&gt;,
   &lt;/span&gt;&quot;value&quot; : &quot;small-pig@163.com&quot;&lt;span&gt;
 }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;向字典添加一个 email 字段。&lt;/p&gt;
&lt;p&gt;发送请求后，返回字典数据的最新内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367389/201805/367389-20180514113333053-1134410672.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了，简单的演示就结束了。&lt;/p&gt;
&lt;p&gt;最后，老周还要强调一点，就是如果你的 JSON Patch 文档的 TModel 是一个类，由于 .NET 是面向对象的，你不能随便向一个类添加属性，因此，add 操作对于类是不可行的，但你可以进行 replace 操作。&lt;/p&gt;

&lt;p&gt;=============================&lt;/p&gt;
&lt;p&gt;前两天，也就是上个星期六，由于张老鬼找老周有点事情研究，所以【闲聊 ASP.NET Core】的直播暂停一次。这个星期可以补上，周六周日都行，到时候老周会在微博上发一下时间，因为这个周末，女朋友所在的公司组织全体员工去长途旅游，所以这个周末老周就可以自由了，爱干吗就干吗。&lt;/p&gt;
&lt;p&gt;我们俩都是穷人家的孩子，双方都没有车，距离又有点远，每次见面都要滴滴打车，所以一个月也只能见两三次面。这个五月她那边比较忙，只见了一次面。没办法，想天天去浪是不可能的了。这就是咱们平头百姓的生活。&lt;/p&gt;

</description>
<pubDate>Mon, 14 May 2018 03:46:00 +0000</pubDate>
<dc:creator>东邪独孤</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tcjiaan/p/9034869.html</dc:identifier>
</item>
<item>
<title>django+appium实现UI自动化测试平台---构思版 - 北漂的雷子</title>
<link>http://www.cnblogs.com/leiziv5/p/9035324.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leiziv5/p/9035324.html</guid>
<description>&lt;p&gt;&lt;strong&gt;        &lt;span&gt; &lt;span&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　UI自动化，在进行的过程中，难免会遇到平台化，&lt;/p&gt;
&lt;p&gt;　　在实际的工作中，有的领导也会想要实现自动化测试的平台化。自动化平台化后，有了更为实际的成果，&lt;/p&gt;
&lt;p&gt;       在做UI自动化，很想吧现在的自动化的框架进行平台化，完成更多的移植。&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;设想&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;        其实平台化也是不难的，也是简单的，前提你也有思路，我在前面的&lt;a href=&quot;http://www.cnblogs.com/leiziv5/p/7890022.html&quot; target=&quot;_blank&quot;&gt;接口平台&lt;/a&gt;的时候的构思就是吧所有的都集中到一个平台。但是在UI自动化测试的平台，我选择了另外的一个思路   平台端+客户端&lt;/p&gt;
&lt;p&gt;　　客户端保持执行测试用例，平台端进行测试用例的管理，两者相辅相成。缺一不可。&lt;/p&gt;
&lt;p&gt;       平台作为测试服务端，客户端作为测试执行端，服务端的改变对客户端减少变动，客户端对服务端负责，服务端对客户端提供依赖。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;span&gt;原理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　利用平台——客户端的构思，平台端侧重用管理，对数据的管理，对用例的管理，对任务的管理，对测试报告的管理，客户端负责：获取相应的项目或者任务详情，执行测试用例，手机测试结果，对测试结果进行反馈给平台端，&lt;/p&gt;

&lt;p&gt;      &lt;strong&gt; 客户端调用，平台端管理       &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　客户端执行，平台端展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       客户端收集，平台端汇总。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       客户端依赖，平台端支持。    &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      客户端持续集成，平台端持续收集。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      客户端不限制，平台端能兼容。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;       有了这样的构想，下面要做的就是对产品的需求的分析，对现有的设想进行细分，对现有的原则进行合理化解。&lt;/p&gt;
&lt;p&gt;     去分析需求，去总结需求，去对现有的需求进行细分拆分。&lt;/p&gt;
&lt;p&gt;　　我们可以看到，这样的两段，我们可以用思维导图去细化分析我们的需求。&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2018.cnblogs.com/blog/920110/201805/920110-20180514105303798-367139005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;   整体的需求其实就是这么多，那么我们去来细化我们的需求，针对pc端和手机端分别进行需求的分析&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/920110/201805/920110-20180514105451635-132589350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    那么我们的客户端也教pc端需要什么样的东西呢&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/920110/201805/920110-20180514105550281-356624119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    这样我们的大概的思路有了，大概的功能需求分析点有了，&lt;/p&gt;
&lt;p&gt;     我们就开始我们的技术选型，根据你的学习的进度还有你的想法去选择，我选择的是django，这里是因为好久不用了，巩固下django相关的知识，&lt;/p&gt;

&lt;p&gt;     在选择使用的框架的时候，注意下面几个方面：&lt;/p&gt;
&lt;p&gt;　　1.自己对框架的掌握度&lt;/p&gt;
&lt;p&gt;      2.实现难易程度，&lt;/p&gt;
&lt;p&gt;      3.与项目相匹配度。&lt;/p&gt;
&lt;p&gt;     4.成本的大小，&lt;/p&gt;
&lt;p&gt;    5.经验的多少&lt;/p&gt;
&lt;p&gt;    6.学习的难易程度，&lt;/p&gt;
&lt;p&gt;    7.部署测试的成本，调试的代价等&lt;/p&gt;

&lt;p&gt;    一般来说选择自己熟悉的来做最好，但是一般还要看项目适合什么样的，资料的多少，因为开发过程难免会遇到很多的问题，&lt;/p&gt;

&lt;p&gt;     接下来就是正式的开发了，&lt;/p&gt;

&lt;p&gt;     开发的过程不是那么简单的，也不是那么复杂的，但是也不是那么一帆风顺的，遇事会google，会百度，可谓是良师益友。善于利用开源的东西&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;    写在最后，最原始的最美好，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     一切源于应用，一切回归应用，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     一切服务于应用，一切简单化，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     一切合理化。一切可操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     回归本质，最初的美好。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;                    ---雷子&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;　　有问题可以联系我：QQ:952943386 email:leileili126@163.com  qq群：194704520  新群：683894834&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       现有开源地址：https://github.com/liwanlei&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 14 May 2018 03:43:00 +0000</pubDate>
<dc:creator>北漂的雷子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leiziv5/p/9035324.html</dc:identifier>
</item>
<item>
<title>Python：怎样用线程将任务并行化？ - astropeak</title>
<link>http://www.cnblogs.com/astropeak/p/9035300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/astropeak/p/9035300.html</guid>
<description>&lt;p&gt;即预先创建一定数目的线程，形成一个线程池。每个线程持续处理多个子任务（而不是处理一个就退出）。这样做的好处是：创建的线程数目会比较固定。&lt;/p&gt;
&lt;p&gt;那么，每个线程处理哪些子任务呢？一种方法为：预先将所有子任务均分给每个线程。如下所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;This is just a stub that simulate a dir operation&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'searching pattern &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; in dir &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a/b/c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a/b/d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b/c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d/f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;   &lt;span class=&quot;numberCircle unselectable&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threadsPool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;   &lt;span class=&quot;numberCircle unselectable&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadsPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;numberCircle unselectable&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadsPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Main thread end here'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; ：这个函数能够处理多个dir，将作为线程的target函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt; ：创建一个有2个线程的线程池。并事先分配子任务给每个线程。线程1处理前两个dir，线程2处理后两个dir&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3&lt;/strong&gt; ：启动线程池中所有线程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;程序的输出结果为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
searching pattern hello in dir a/b/csearching pattern hello in dir b/c

searching pattern hello in dir d/f
 searching pattern hello in dir a/b/d
Main thread end here
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方法存在以下问题：&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;子任务分配可能不均。导致每个线程运行时间差别可能较大，则整体运行时长可能被拖长&lt;/li&gt;
&lt;li&gt;只能处理所有子任务都预先知道的情况，无法处理子任务实时出现的情况&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如果有一种方法，能够让线程知道当前所有的待处理子任务，线程一旦空闲，便可以从中获取一个任务进行处理，则以上问题都可以解决。任务队列便是解决方案。&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 03:42:00 +0000</pubDate>
<dc:creator>astropeak</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/astropeak/p/9035300.html</dc:identifier>
</item>
<item>
<title>如何在自定义组件中使用v-model - fe_bean</title>
<link>http://www.cnblogs.com/ufex/p/9035269.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ufex/p/9035269.html</guid>
<description>&lt;p&gt;文章属于速记，有错误欢迎指出。风格什么的不喜勿喷。&lt;/p&gt;
&lt;h3 id=&quot;先来一个组件不用vue-model正常父子通信&quot;&gt;先来一个组件，不用vue-model，正常父子通信&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- parent --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是父亲, 对儿子说： {{sthGiveChild}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Child&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@returnBack&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;turnBack&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :give=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;sthGiveChild&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/Child&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Child &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./Child.vue'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;sthGiveChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'给你100块'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        Child
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;turnBack&lt;/span&gt;(val) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sthGiveChild&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- child --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是儿子，父亲对我说： {{give}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;returnBackFn&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;回应&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;give&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; String
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;returnBackFn&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$emit&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'returnBack'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'还你200块'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击回应后，父亲对儿子说的话变成了儿子的回应。儿子收到的信息也变了，实现通信。&lt;/p&gt;
&lt;h3 id=&quot;改用v-model&quot;&gt;改用v-model&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- parent --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是父亲, 对儿子说： {{sthGiveChild}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Child&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-model=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;sthGiveChild&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/Child&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Child &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./Child.vue'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;sthGiveChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'给你100块'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        Child
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- child --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是儿子，父亲对我说： {{give}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;returnBackFn&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;回应&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;give&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; String
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'give'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'returnBack'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;returnBackFn&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$emit&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'returnBack'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'还你200块'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文案虽有不同，但是效果最终是一致的。&lt;/p&gt;
&lt;h3 id=&quot;看看官方自定义组件的v-model&quot;&gt;看看官方自定义组件的v-model&lt;/h3&gt;
&lt;p&gt;官方例子&lt;a href=&quot;https://vuefe.cn/v2/api/#model&quot; class=&quot;uri&quot;&gt;https://vuefe.cn/v2/api/#model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有这么一句话： &lt;code&gt;默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event。&lt;/code&gt;&lt;br/&gt;尝试把上边子组件的例子改一下，也是跑的通的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- child --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;我是儿子，父亲对我说： {{value}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;returnBackFn&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;回应&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; String
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;returnBackFn&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$emit&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'还你200块'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;做一下总结&quot;&gt;做一下总结：&lt;/h3&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;如果你懒，不想自己去处理事件，那就用默认的 'value' &amp;amp;&amp;amp; 'input' 事件去处理，如果用原生事件的，甚至连model属性也可以省去。&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;如果你想自己的代码比较明确，区分出自定义事件，那么下面的组合才是你的菜。&lt;br/&gt;prop和event看你自己心情定义，当然要知名见意【尽量避开关键字】&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;model: {
prop: 'someProp', // 注意，是prop，不带s。我在写这个速记的时候，多写了一个s，调试到怀疑人生
event: 'someEvent'
}
this.$emit('someProp', [returnValueToParent])&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 14 May 2018 03:34:00 +0000</pubDate>
<dc:creator>fe_bean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ufex/p/9035269.html</dc:identifier>
</item>
</channel>
</rss>