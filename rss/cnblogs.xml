<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>基于多因素的搭配推荐模型 - 笨兔勿应</title>
<link>http://www.cnblogs.com/bentuwuying/p/9348458.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bentuwuying/p/9348458.html</guid>
<description>&lt;p&gt;之所以起这个名字是因为对应之前的搭配推荐模型，如之前的博客 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/bentuwuying/p/8318267.html&quot;&gt;基于图像信息的搭配商品推荐&lt;/a&gt; 中所述，可以看做是基于单因素对搭配进行建模，即认为搭配的商品应该在单因素--风格上相似，然后在对商品映射后的latent space即风格空间中，搭配的商品的距离会更接近。&lt;/p&gt;
&lt;p&gt;然后更进一步很自然的想法就是：&lt;/p&gt;
&lt;p&gt;1）相互搭配的商品是可以在多个因素上近似的，比如款式、材质、印花、颜色等，而用风格这一个概念来概括就显得有些粗糙。&lt;/p&gt;
&lt;p&gt;2）可以与一个主商品进行搭配的pair商品也可以是多种风格的，比如一件T恤可以跟不同风格的下装搭配，搭出运动、休闲、淑女等不同的风格。&lt;/p&gt;
&lt;p&gt;基于这两种不同的思路，可以采用不同的两种方式进行建模。&lt;/p&gt;
&lt;h3&gt;1. Learning Compatibility Across Categories for Heterogeneous Item Recommendation&lt;/h3&gt;
&lt;p&gt;这篇paper提出一种方法：&lt;span class=&quot;Apple-converted-space&quot;&gt;Mixtures of Non-Metric &lt;/span&gt;Embeddings for Recommendation, 简称&lt;span class=&quot;Apple-converted-space&quot;&gt;Monomer，是为了对multiple localized notions of relatedness进行建模，即搭配的商品pair之间是可以有多种方面的因素的，而之前的搭配建模方式是只能学习到global notion of relatedness，这也是这种方法能够产出多样性搭配推荐结果的关键点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;建模方式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;1）&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Low-rank Mahalanobis Metric&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;将E看作是商品原始向量到latent space向量的映射关系，则映射后商品pair之间的距离是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721231648088-561562646.png&quot; alt=&quot;&quot; width=&quot;325&quot; height=&quot;22&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）&lt;span class=&quot;Apple-converted-space&quot;&gt;Multiple, Non-Metric Embeddings&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;因为考虑到相互搭配的商品是可以在多个因素上近似的，比如款式、材质、印花、颜色等，而用风格这一个概念来概括就显得有些粗糙。所以可以有多个E，即用E&lt;sub&gt;k&lt;/sub&gt;来表示，每个E&lt;sub&gt;k&lt;/sub&gt;可以看作是一种特征提取的方式。其中第k种映射空间上，商品pair之间的距离为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721234624305-863084329.png&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;58&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3）&lt;span class=&quot;Apple-converted-space&quot;&gt;Probabilistic Mixtures of Embeddings&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;将N种映射方式上的预测距离加权求和，那么权重如何确定呢？考虑到非对称的设定，应该主要与主商品的特征相关。如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721235022425-1391436010.png&quot; alt=&quot;&quot; width=&quot;235&quot; height=&quot;55&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;where U&lt;span class=&quot;Apple-converted-space&quot;&gt;  is a newly-introduced F*&lt;span class=&quot;Apple-converted-space&quot;&gt;N&lt;span class=&quot;Apple-converted-space&quot;&gt;  parameter matrix &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;with U&lt;span class=&quot;s1&quot;&gt;&lt;sub&gt;:;k&lt;/sub&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;being its k -th column.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;最终，商品pair的距离为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721235336698-1974852374.png&quot; alt=&quot;&quot; width=&quot;223&quot; height=&quot;46&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模型训练：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用最大似然估计的方式计算loss并进行模型训练。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721235438465-596352049.png&quot; alt=&quot;&quot; width=&quot;336&quot; height=&quot;40&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180721235538726-1588738995.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;78&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2. Compatibility Family Learning for Item Recommendation and Generation&lt;/h3&gt;
&lt;p&gt;这篇paper同样是基于多因素进行搭配关系的建模，但与上一篇paper不同的是，主要假设是：可以与一个主商品进行搭配的pair商品可以是多种风格的。&lt;/p&gt;
&lt;p&gt;paper提出了一种end-to-end的模型，将每个item映射到latent space上的K+1的向量，其中1个向量代表该item，另外K个向量代表该item的K个compatible prototypes，这些prototypes反应了搭配建模中的多样性，即可以与一个主商品进行搭配的pair商品可以是多种风格的。这K+1个向量即是该item的 compatibility family。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建模方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;1）&lt;/span&gt;Projected Compatibility Distance&lt;/p&gt;
&lt;p&gt;PCD是用于衡量两个商品之间的搭配关系的。&lt;/p&gt;
&lt;p&gt;每个item可以被E&lt;sub&gt;0&lt;/sub&gt;映射为一个向量；另外还可以被E&lt;sub&gt;k&lt;/sub&gt;(k=1,2,...,K)映射为K个向量，每个向量都靠近与其搭配的商品所组成的cluster。PCD的计算方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180722011624862-784582598.png&quot; alt=&quot;&quot; width=&quot;288&quot; height=&quot;105&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用图来表示的话：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180722011847247-1284461408.png&quot; alt=&quot;&quot; width=&quot;301&quot; height=&quot;197&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）最大似然估计&lt;/p&gt;
&lt;p&gt;E&lt;sub&gt;k&lt;/sub&gt;(k=1,2,...,K)的大多数网络层参数都是共享的，只有最后一层参数是独立训练的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180722011819114-1130486532.png&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用最大似然估计进行建模：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180722012110226-1411635794.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;41&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模型训练：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/995611/201807/995611-20180722012252511-9548375.png&quot; alt=&quot;&quot; width=&quot;339&quot; height=&quot;149&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 21 Jul 2018 17:24:00 +0000</pubDate>
<dc:creator>笨兔勿应</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bentuwuying/p/9348458.html</dc:identifier>
</item>
<item>
<title>.NET Core微服务之基于MassTransit实现数据最终一致性（Part 2） - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/dnc_microservice_masstransit_foundation_part2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/dnc_microservice_masstransit_foundation_part2.html</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;/em&gt;此篇已加入&lt;a title=&quot;find more ?&quot; href=&quot;https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index.html&quot; target=&quot;_blank&quot;&gt;.NET Core微服务基础系列文章索引&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　在&lt;a title=&quot;part 1&quot; href=&quot;https://www.cnblogs.com/edisonchou/p/dnc_microservice_masstransit_foundation_part1.html&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;中，我们了解了MassTransit这个开源组件的基本用法，这一篇我们结合一个小案例来了解在ASP.NET Core中如何借助MassTransit+Quartz.Net来实现数据的最终一致性。当然，实现数据的最终一致性有很多方案，这里只是举一种我所学到的比较简单易于学习的实现方式而已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180721232255253-1064401450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　假设我们有一个XX保险微信商城（WechatShop，简称WS）系统，根据服务的划分，针对下订单的这个场景，我们划分了四个微服务，他们分别是订单服务（OrderService），库存服务（StorageService）、配送服务（DeliveryService）以及一个只用于后台监控事件消息的事件后台服务（EventService）。&lt;/p&gt;
&lt;p&gt;　　我们来看看这个场景下的一些基本业务逻辑流程（&lt;span&gt;&lt;strong&gt;可能并不一定正确或者覆盖全面&lt;/strong&gt;&lt;/span&gt;）：&lt;/p&gt;
&lt;p&gt;　　（1）当终端User在微信商城中看中一个保单产品，并且下单之后，订单服务会接收订单信息并更新订单数据库（这里假设只更新一张订单表）。&lt;/p&gt;
&lt;p&gt;　　（2）然后事件后台服务会定期（比如每隔30秒）检查订单数据库的事件状态表（比如一张单独的Events表，里面有某个订单的2行记录，每行记录分别代表与订单相关的服务（这里就是库存和配送服务）的处理状态），如果发现相关服务的事件状态为未处理，则会向事件总线（假设这里基于RabbitMQ）发送消息告知对应订阅者要处理这个订单。&lt;/p&gt;
&lt;p&gt;　　（3）这里对应的订阅者就是库存服务和配送服务，他们收到消息之后，会进行各自的业务逻辑处理。比如，库存服务会根据订单信息去更新库存数据库并做一些逻辑处理比如更新保单促销活动的记录，配送服务会根据订单信息更新配送数据库并做一些逻辑处理比如打印纸质保单并进行物流预约登记，当他们各自处理完成之后便会向事件总线发送一个处理完毕的消息。&lt;/p&gt;
&lt;p&gt;　　（4）事件后台服务也会作为订阅者，接收库存和配送服务发送过来的消息，如果接收到某个服务的处理完毕消息，便会根据接收到的消息去更新前面事件状态表中的对应的事件记录记录行。比如：接收到库存服务发送的消息，会更新时间状态表中这个OrderID相关的库存事件状态的那一行记录的状态为已处理。&lt;/p&gt;
&lt;p&gt;　　（5）事件后台服务的定时任务中（这里假设每隔30秒一次），会Check事件是否还有未处理完毕的事件消息，如果没有则休眠，否则会检查其创建记录的时间与现在的系统时间的间隔是否超过了最大容忍值（这里假设1小时），如果没有超过则继续向事件总线发送消息，如果超过了则进行一些事务回滚逆操作和向管理员发送一些警告信息以便进行人工干预等操作。&lt;/p&gt;
&lt;p&gt;　　Talk is cheap, Show me the code。下面我们来看看如何实现，由于篇幅原因可能只会列出关键性代码，详细代码请自行去GitHub上下载或Clone。&lt;/p&gt;
&lt;p&gt;　　下面是这次实验的项目结构，需要准备如下五个项目（四个ASP.NET Core WebAPI和一个.NET Core类库）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180721234340686-667250189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　数据库这里实验采用的是MSSQL，只创建了一个Order数据库，两张表的数据如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180721235152410-2070726076.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，在Events表的设计中，通过EventType来区分事件类型，这里是订单创建（CreateOrder）这个事件的两个具体消息（StorageService和DeliveryService），状态（StatusValue）为1代表未处理，为2则代表已处理。&lt;/p&gt;

&lt;h2&gt;2.1 准备工作&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180721234533164-1617873698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中，Controllers中主要用于与终端用户（比如WebForm、MVC、SPA等）交互，Models下主要用于定义DTO、EF DbContext与Entity，Repositories目录下主要用于定义Repository与数据库进行交互。&lt;/p&gt;
&lt;h2&gt;2.2 具体实现&lt;/h2&gt;
&lt;p&gt;　　（1）OrderController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/Order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController : Controller
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IOrderRepository OrderRepository { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OrderController(IOrderRepository OrderRepository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.OrderRepository =&lt;span&gt; OrderRepository;
        }

        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Post([FromBody]OrderDTO orderDTO)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; OrderRepository.CreateOrder(orderDTO).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; result ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Post Success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Post Failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里就是简单的调用OrderRepository进行订单的创建操作。&lt;/p&gt;
&lt;p&gt;　　（2）OrderRepository&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderRepository : IOrderRepository
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderDbContext OrderContext { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OrderRepository(OrderDbContext OrderContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.OrderContext =&lt;span&gt; OrderContext;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt; CreateOrder(IOrder order)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orderEntity = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order()
            {
                ID &lt;/span&gt;=&lt;span&gt; GenerateOrderID(),
                OrderUserID &lt;/span&gt;=&lt;span&gt; order.OrderUserID,
                OrderTime &lt;/span&gt;=&lt;span&gt; order.OrderTime,
                OrderItems &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            };

            OrderContext.Orders.Add(orderEntity);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; patch data&lt;/span&gt;
            order.ID =&lt;span&gt; orderEntity.ID;
            order.StatusKey &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_STORAGE;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; eventEntityA = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Event()
            {
                ID &lt;/span&gt;=&lt;span&gt; GenerateEventID(),
                OrderID &lt;/span&gt;=&lt;span&gt; orderEntity.ID,
                Type &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                StatusKey &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_STORAGE,
                StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.UNHANDLE,
                CreatedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                EntityJson &lt;/span&gt;=&lt;span&gt; JsonHelper.SerializeObject(order)
            };

            order.StatusKey &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_DELIVERY;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; eventEntityB = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Event()
            {
                ID &lt;/span&gt;=&lt;span&gt; GenerateEventID(),
                OrderID &lt;/span&gt;=&lt;span&gt; orderEntity.ID,
                Type &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                StatusKey &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_DELIVERY,
                StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.UNHANDLE,
                CreatedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                EntityJson &lt;/span&gt;=&lt;span&gt; JsonHelper.SerializeObject(order)
            };

            OrderContext.Events.Add(eventEntityA);
            OrderContext.Events.Add(eventEntityB);

            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; OrderContext.SaveChangesAsync();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GenerateOrderID()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: Some business logic to generate Order ID&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Guid.NewGuid().ToString();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GenerateEventID()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: Some business logic to generate Order ID&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Guid.NewGuid().ToString();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里主要是通过EF Core向订单数据库中的Orders表和Events表添加数据。可以看到，这里向Events表中添加了两个记录，分别通过StatusKey进行区分。这里的StatusKey其实是一个冗余字段，只是为了后面在不同的服务之间区分是否是自己需要处理的消息。&lt;/p&gt;

&lt;h2&gt;3.1 StorageService的实现&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180721235712999-1582060498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（1）通过NuGet安装MassTransit、MassTransit.RabbitMQ、MassTransit.Extensions.DependencyInjection&lt;/p&gt;
&lt;p&gt;　　（2）在StartUp类中注入MassTransit的IBusControl实例，加入了熔断、重试与限流，具体看注释&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        ......

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            ......

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; EFCore&lt;/span&gt;
            services.AddDbContextPool&amp;lt;OrderDbContext&amp;gt;&lt;span&gt;(
                options &lt;/span&gt;=&amp;gt; options.UseSqlServer(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DB:OrderDB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Repository&lt;/span&gt;
            services.AddScoped&amp;lt;IStorageRepository, StorageRepsitory&amp;gt;&lt;span&gt;();
            services.AddScoped&lt;/span&gt;&amp;lt;StoreageOrderEventHandler&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; MassTransit&lt;/span&gt;
            services.AddMassTransit(c =&amp;gt;&lt;span&gt;
            {
                c.AddConsumer&lt;/span&gt;&amp;lt;StoreageOrderEventHandler&amp;gt;&lt;span&gt;();
            });
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IBusControl BusControl { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IServiceProvider serviceProvider, IHostingEnvironment env, IApplicationLifetime lifetime)
        {
            ......

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register Bus&lt;/span&gt;
            BusControl = Bus.Factory.CreateUsingRabbitMq(cfg =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; host = cfg.Host(&lt;span&gt;new&lt;/span&gt; Uri(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]), hst =&amp;gt;&lt;span&gt;
                {
                    hst.Username(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
                    hst.Password(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
                });

                cfg.ReceiveEndpoint(host, Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Queues:Storage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], e =&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Retry&lt;/span&gt;
                    e.UseRetry(ret =&amp;gt;&lt;span&gt;
                    {
                        ret.Interval(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每隔10s重试一次，最多重试3次&lt;/span&gt;
&lt;span&gt;                    });

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; RateLimit&lt;/span&gt;
                    e.UseRateLimit(&lt;span&gt;1000&lt;/span&gt;, TimeSpan.FromSeconds(&lt;span&gt;100&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 100s内限1000次访问请求

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; CircuitBreaker&lt;/span&gt;
                    e.UseCircuitBreaker(cb =&amp;gt;&lt;span&gt;
                    {
                        cb.TrackingPeriod &lt;/span&gt;= TimeSpan.FromMinutes(&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跟踪周期：1min&lt;/span&gt;
                        cb.TripThreshold = &lt;span&gt;15&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 失败比例达到15%后才会打开熔断器&lt;/span&gt;
                        cb.ActiveThreshold = &lt;span&gt;5&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 至少发生5次请求后才会打开熔断器&lt;/span&gt;
                        cb.ResetInterval = TimeSpan.FromMinutes(&lt;span&gt;5&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 熔断时间间隔：5mins&lt;/span&gt;
&lt;span&gt;                    });

                    e.LoadFrom(serviceProvider);
                });
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register Start &amp;amp; Stop for Bus&lt;/span&gt;
&lt;span&gt;            lifetime.ApplicationStarted.Register(BusControl.Start);
            lifetime.ApplicationStarted.Register(BusControl.Stop);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里需要注意的就是，在注入时我们指定了接收消息所要进行处理的类对象：StorageOrderEventHandler。&lt;/p&gt;
&lt;p&gt;　　（3）StorageOrderEventHandler&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StoreageOrderEventHandler : IConsumer&amp;lt;IOrder&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IStorageRepository StorageRepository { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IBusControl EventBus { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StoreageOrderEventHandler(IStorageRepository StorageRepository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.StorageRepository =&lt;span&gt; StorageRepository;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.EventBus =&lt;span&gt; Startup.BusControl;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task Consume(ConsumeContext&amp;lt;IOrder&amp;gt;&lt;span&gt; context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; order =&lt;span&gt; context.Message;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (order.StatusKey !=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_STORAGE)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是StorageService要处理的Event则忽略该消息&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; StorageRepository.CreateStorage(order).GetAwaiter().GetResult();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result)
            {
                IOrderEventEntity orderEventEntity &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderEventEntity
                {
                    OrderID &lt;/span&gt;=&lt;span&gt; order.ID,
                    EventType &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                    StatusKey &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_STORAGE,
                    StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.HANDLED
                };

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; EventBus.Publish(orderEventEntity);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里首先判断接收到的消息是否是需要自己处理的，不是则忽略，是则调用StorageRepository进行库存记录的更新及其他业务逻辑（与DB有关的）操作，处理完毕后向事件总线发送一个消息，这里主要是告知哪个OrderID的哪个事件类型（EventType）的哪个具体服务（StatusKey）要更新到哪个状态（StatusValue）。&lt;/p&gt;
&lt;p&gt;　　（4）StorageRepository：假装自己是一个真实的仓储&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StorageRepsitory : IStorageRepository
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderDbContext  OrderContext{ &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StorageRepsitory(OrderDbContext OrderContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.OrderContext =&lt;span&gt; OrderContext;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt; CreateStorage(IOrder order)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; eventList = &lt;span&gt;await&lt;/span&gt; OrderContext.Events.Where(e =&amp;gt; e.OrderID ==&lt;span&gt; order.ID 
                &lt;/span&gt;&amp;amp;&amp;amp; e.Type ==&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER
                &lt;/span&gt;&amp;amp;&amp;amp; e.StatusKey ==&lt;span&gt; EventConstants.EVENT_STATUS_KEY_STORAGE).ToListAsync();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (eventList == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; eventItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; eventList)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO : Add record to Storage DB&lt;/span&gt;
                    Console.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Add one record to Storage DB : { JsonHelper.SerializeObject(order) }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO : Exception log&lt;/span&gt;
                    Console.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exception: {ex.Message}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里假设会做一些业务处理，比如向库存数据库添加一条记录等。由于时间和精力，这里我只向控制台输出一条消息已进行验证。&lt;/p&gt;
&lt;h2&gt;3.2 DeliveryService的实现&lt;/h2&gt;
&lt;p&gt;　　与StorageService高度类似，篇幅关系，不再赘述，请自行浏览示例源代码。这里之展示一下DeliveryOrderEventHandler类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DeliveryOrderEventHandler : IConsumer&amp;lt;IOrder&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IDeliveryRepository DeliveryRepository { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IBusControl EventBus { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DeliveryOrderEventHandler(IDeliveryRepository StorageRepository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.DeliveryRepository =&lt;span&gt; StorageRepository;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.EventBus =&lt;span&gt; Startup.BusControl;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task Consume(ConsumeContext&amp;lt;IOrder&amp;gt;&lt;span&gt; context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; order =&lt;span&gt; context.Message;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (order.StatusKey !=&lt;span&gt; EventConstants.EVENT_STATUS_KEY_DELIVERY)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是DeliveryService要处理的Event则忽略该消息&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; DeliveryRepository.CreateDelivery(order).GetAwaiter().GetResult();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result)
            {
                IOrderEventEntity orderEventEntity &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderEventEntity
                {
                    OrderID &lt;/span&gt;=&lt;span&gt; order.ID,
                    EventType &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                    StatusKey &lt;/span&gt;=&lt;span&gt;&lt;strong&gt; EventConstants.EVENT_STATUS_KEY_DELIVERY&lt;/strong&gt;,
                    StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.HANDLED
                };

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; EventBus.Publish(orderEventEntity);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看出，这里的业务逻辑和StorageService一样，只是StatusKey不同而已。&lt;/p&gt;

&lt;h2&gt;4.1 项目结构&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722001314897-2030365171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在EventService中，除了安装MassTransit相关的package之外，还要安装Quartz.Net的package。&lt;/p&gt;
&lt;h2&gt;4.2 StartUp类&lt;/h2&gt;
&lt;p&gt;　　（1）ConfigureService方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;services.AddMvc();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; EFCore&lt;/span&gt;
        services.AddDbContextPool&amp;lt;OrderDbContext&amp;gt;&lt;span&gt;(
            options &lt;/span&gt;=&amp;gt; options.UseSqlServer(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DB:OrderDB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Dapper-ConnString&lt;/span&gt;
        services.AddSingleton(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DB:OrderDB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Repository&lt;/span&gt;
        services.AddSingleton&amp;lt;IEventRepository&amp;lt;IOrderEventEntity&amp;gt;, OrderEventDapperRepository&amp;gt;&lt;span&gt;();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Quartz&lt;/span&gt;
        services.UseQuartz(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(OrderEventJob));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; MassTransit&lt;/span&gt;
        services.AddMassTransit(c =&amp;gt;&lt;span&gt;
        {
            c.AddConsumer&lt;/span&gt;&amp;lt;OrderEventHandler&amp;gt;&lt;span&gt;();
        });
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里指定了Quartz.Net要处理的定时任务（通过自定义的扩展方法）以及MassTransit要处理的事件处理程序。有关Quartz.Net的内容不在本篇的重点，下面看看OrderEventHandler类，它主要就是根据收到的消息去更新某个类别某个项的事件状态记录。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderEventHandler : IConsumer&amp;lt;IOrderEventEntity&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEventRepository&amp;lt;IOrderEventEntity&amp;gt; EventRepository { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderEventHandler(IEventRepository&amp;lt;IOrderEventEntity&amp;gt;&lt;span&gt; EventRepository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.EventRepository =&lt;span&gt; EventRepository;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task Consume(ConsumeContext&amp;lt;IOrderEventEntity&amp;gt;&lt;span&gt; context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; eventResult = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; EventRepository.UpdateEventStatus(EventConstants.EVENT_TYPE_CREATE_ORDER, context.Message);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在EventRepository具体类中，这里主要是通过Dapper去操作数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderEventDapperRepository : IEventRepository&amp;lt;IOrderEventEntity&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; connStr;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderEventDapperRepository(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; connStr)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.connStr =&lt;span&gt; connStr;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;IOrderEventEntity&amp;gt;&amp;gt; GetEvents(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; eventType)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(connStr))
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; sqlCommand = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;SELECT [EventID],
                                                        [EventType],
                                                        [OrderID],
                                                        [CreatedTime],
                                                        [StatusKey],
                                                        [StatusValue],
                                                        [EntityJson]
                                                        FROM [dbo].[Events]
                                                        WHERE EventType = @EventType 
                                                            AND StatusValue = @StatusValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt; conn.QueryAsync&amp;lt;OrderEventEntity&amp;gt;(sqlCommand, param: &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
                {
                    EventType &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                    StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.UNHANDLE
                });

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; UpdateEventStatus(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; eventType, IOrderEventEntity orderEvent)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(connStr))
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; sqlCommand = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;UPDATE [dbo].[Events]
                                                            SET StatusValue = @StatusValue
                                                            WHERE OrderID = @OrderID
                                                                AND EventType = @EventType
                                                                AND StatusKey = @StatusKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt; conn.ExecuteAsync(sqlCommand, param: &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
                {
                    OrderID &lt;/span&gt;=&lt;span&gt; orderEvent.OrderID,
                    EventType &lt;/span&gt;=&lt;span&gt; EventConstants.EVENT_TYPE_CREATE_ORDER,
                    StatusKey &lt;/span&gt;=&lt;span&gt; orderEvent.StatusKey,
                    StatusValue &lt;/span&gt;=&lt;span&gt; EventStatusEnum.HANDLED
                });

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; result &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;em&gt;&lt;strong&gt;*Problem:&lt;/strong&gt;&lt;/em&gt; 在coding过程中，本来想用EF的，结果发现DbContext默认注入的周期是Scoped，而我们的定时Job又是Singleton的，无法正常使用，所以就改用了Dapper。在这个类中，未完成的方法是进行事务回滚逆操作的一系列方法。&lt;/p&gt;
&lt;p&gt;　　（2）Configure方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IBusControl BusControl { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IServiceProvider serviceProvider, IHostingEnvironment env, IApplicationLifetime lifetime, IScheduler scheduler)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;app.UseMvc();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register EventBus&lt;/span&gt;
        BusControl = Bus.Factory.CreateUsingRabbitMq(cfg =&amp;gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; host = cfg.Host(&lt;span&gt;new&lt;/span&gt; Uri(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]), hst =&amp;gt;&lt;span&gt;
            {
                hst.Username(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
                hst.Password(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Retry&lt;/span&gt;
            cfg.UseRetry(ret =&amp;gt;&lt;span&gt;
            {
                ret.Interval(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;, TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每隔10s重试一次，最多重试3次&lt;/span&gt;
&lt;span&gt;            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; RateLimit&lt;/span&gt;
            cfg.UseRateLimit(&lt;span&gt;1000&lt;/span&gt;, TimeSpan.FromSeconds(&lt;span&gt;100&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 100s内限1000次访问请求

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; CircuitBreaker&lt;/span&gt;
            cfg.UseCircuitBreaker(cb =&amp;gt;&lt;span&gt;
            {
                cb.TrackingPeriod &lt;/span&gt;= TimeSpan.FromMinutes(&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跟踪周期：1min&lt;/span&gt;
                cb.TripThreshold = &lt;span&gt;15&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 失败比例达到15%后才会打开熔断器&lt;/span&gt;
                cb.ActiveThreshold = &lt;span&gt;5&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 至少发生5次请求后才会打开熔断器&lt;/span&gt;
                cb.ResetInterval = TimeSpan.FromMinutes(&lt;span&gt;5&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 熔断时间间隔：5mins&lt;/span&gt;
&lt;span&gt;            });

            cfg.ReceiveEndpoint(host, Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Queues:Order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], e =&amp;gt;&lt;span&gt; 
            {
                e.LoadFrom(serviceProvider);
            });
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register Start &amp;amp; Stop for Bus&lt;/span&gt;
&lt;span&gt;        lifetime.ApplicationStarted.Register(BusControl.Start);
        lifetime.ApplicationStarted.Register(BusControl.Stop);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Scheduler Job&lt;/span&gt;
        QuartzServiceUtil.StartJob&amp;lt;OrderEventJob&amp;gt;(scheduler, TimeSpan.FromSeconds(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由于无法在ConfigureService方法中正常的注入MassTransit，所以采用了一个折中的方式：静态变量，还好我们只需要一个单例的BusControl即可。这里我们在启动时，开启了一个定时任务，这个定时任务的逻辑如下，它每隔30s执行一次。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderEventJob: IJob
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEventRepository&amp;lt;IOrderEventEntity&amp;gt; OrderEventRepository { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IBusControl EventBus { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; MaxHours;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderEventJob(IEventRepository&amp;lt;IOrderEventEntity&amp;gt;&lt;span&gt; OrderEventRepository, IConfiguration configuration)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.OrderEventRepository =&lt;span&gt; OrderEventRepository;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.EventBus =&lt;span&gt; Startup.BusControl;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.MaxHours = Convert.ToInt32(configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Service:MaxHours&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Execute(IJobExecutionContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; events =&lt;span&gt; OrderEventRepository.GetEvents(EventConstants.EVENT_TYPE_CREATE_ORDER).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (events == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; Console.Out.WriteLineAsync($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[Tip] There's no pending to process Order events.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; eventItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; events)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GetDifferenceInHours(eventItem.CreatedTime) &amp;gt;=&lt;span&gt; MaxHours)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.Rollback previous transaction by send rollback message
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.Send Email/Messages to administrator
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ......&lt;/span&gt;

                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }

                IOrder order &lt;/span&gt;= JsonHelper.DeserializeJsonToObject&amp;lt;Order&amp;gt;&lt;span&gt;(eventItem.EntityJson);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; EventBus.Publish(order);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetDifferenceInHours(DateTime createdTime)
        {
            DateTime currentTime &lt;/span&gt;=&lt;span&gt; DateTime.Now;
            TimeSpan ts &lt;/span&gt;=&lt;span&gt; currentTime.Subtract(createdTime);
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; differenceInDays =&lt;span&gt; ts.TotalHours;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; differenceInDays;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里的MaxHours（最大容忍小时）在配置文件中设置的是1，即1小时。在每个定时任务中，系统会去首先check未处理的事件消息的创建时间和现在系统时间的间隔时间是否超过了1小时，超过了则会进行一系列的回滚逆操作和发送邮件/短信等操作告知人工干预，这一部分由于时间和精力未实现，有兴趣的可以自己去实现。如果没超过，则会将事件状态表记录行中的EntityJson（这里主要是订单表的序列化后的JSON字符串）反序列化并作为消息进行发送给事件总线从而通知订阅者。&lt;/p&gt;

&lt;h2&gt;5.1 向OrderService发送一个订单请求&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003022886-394292113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　首先，清空测试的订单数据库表，此时无一条记录。&lt;/p&gt;
&lt;p&gt;　　然后，通过PostMan工具向OrderService发送一条订单请求（前提是你得同时把这四个服务一起启动起来）：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003418300-1275799348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.2 Check此时的订单数据库&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003529496-985356133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此时已经有了对应的数据，可以看到DeliveryService和StorageService的两个事件状态记录行的状态是1（代表待处理）&lt;/p&gt;
&lt;h2&gt;5.3 一定时间后的订单数据库&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003619636-763938918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　经过两个服务的处理之后，状态变为了2（代表已处理），再看看两个服务的控制台信息，分别在处理事件消息时输出了一行记录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003733353-1341399897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180722003746235-980167718.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在标准情况下，当所有相关的事件消息状态都变成已处理时，这时数据就达到了最终一致性。当然，还有一些重试的补偿和事务的回滚逆操作，没有做演示，有兴趣可以自行研究。&lt;/p&gt;

&lt;p&gt;　　本篇主要基于一个小案例（订单业务处理场景），首先介绍了其业务场景与基本业务流程，然后通过介绍相关的每个服务的代码实现，最后通过一个快速的测试演示了数据如何达到最终一致性。当然，这个小案例并不完整，没有对重试的补偿机制以及失败后的回滚机制进行演示和测试，不过有兴趣的朋友可以自行改代码实现。最后，再次强调实现数据的最终一致性有很多方案，这里只是举一种我从桂素伟老师那里所学到的比较简单易于学习的实现方式而已。对MassTransit感兴趣想应用于生产环境的朋友，可以去了解了解saga，建议看看这篇文章：《&lt;a href=&quot;http://www.cnblogs.com/qkbao/p/6952654.html&quot; target=&quot;_blank&quot;&gt;MassTransit&amp;amp;Sage分布式服务开发PPT分享&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;　　Click Here =&amp;gt; &lt;a title=&quot;github&quot; href=&quot;https://github.com/EdisonChou/EDC.MassTransit.OrderDemo&quot; target=&quot;_blank&quot;&gt;点我下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（1）桂素伟，《&lt;a href=&quot;http://edu.51cto.com/course/13342.html&quot; target=&quot;_blank&quot;&gt;基于.NET Core的微服务架构&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;（2）richieyangs（张阳），《&lt;a href=&quot;https://www.cnblogs.com/richieyang/p/5492432.html&quot;&gt;如何优雅的使用RabbitMQ&lt;/a&gt;》，《&lt;a href=&quot;https://www.cnblogs.com/richieyang/p/5730785.html&quot;&gt;使用Masstransit开发基于消息传递的分布式应用&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;（3）青客宝团队，《&lt;a href=&quot;https://www.cnblogs.com/qkbao/p/6952654.html&quot;&gt;MassTransit&amp;amp;Sagas分布式服务开发ppt分享&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;（4）成天，《&lt;a href=&quot;https://www.cnblogs.com/chengtian/p/9068079.html&quot; target=&quot;_blank&quot;&gt;MassTransit实现应用程序间的交互&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;（5）娃娃都会打酱油了，《&lt;a href=&quot;https://blog.csdn.net/starfd/article/details/50973124&quot; target=&quot;_blank&quot;&gt;MassTransit学习记录&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;（6）MassTransit 官方文档，&lt;a href=&quot;http://masstransit-project.com/MassTransit/&quot; target=&quot;_blank&quot;&gt;http://masstransit-project.com/MassTransit/&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 21 Jul 2018 17:00:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/dnc_microservice_masstransit_foundation_part2.html</dc:identifier>
</item>
<item>
<title>Jmter接口网站压力测试工具使用记录 - YanBigFeg</title>
<link>http://www.cnblogs.com/yanbigfeg/p/9341531.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanbigfeg/p/9341531.html</guid>
<description>&lt;h2&gt;1.首先下载Jmeter&lt;/h2&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145835847-1876335985.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/19f73eb9ba8544a4b30539478977e45b/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4456A55374E04A88940123B23A0A90EF&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/19f73eb9ba8544a4b30539478977e45b/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4456A55374E04A88940123B23A0A90EF&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/19f73eb9ba8544a4b30539478977e45b/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4456A55374E04A88940123B23A0A90EF&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/19f73eb9ba8544a4b30539478977e45b/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4456A55374E04A88940123B23A0A90EF&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;2.安装Jmeter&lt;/h2&gt;
&lt;p&gt;把下载的文件进行解压，产生如下目录：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145848292-611759393.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/1e029f9f6b7e4c73976bb63aa46be946/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4DC456140765466F9FD2DC1D1BE18874&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/1e029f9f6b7e4c73976bb63aa46be946/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4DC456140765466F9FD2DC1D1BE18874&quot;/&gt;&lt;/div&gt;
&lt;p&gt;打开bin文件夹下的jmeter.bat文件及进入程序的主界面窗体jmeter.log是日志文件。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145913325-414285018.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/75b28537186145f19d4e84cfc9a1b723/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;5F8513C4A2DF48B4A338FA8AD0973C28&quot;/&gt;&lt;/div&gt;
&lt;p&gt;主意：需要配置java环境。&lt;/p&gt;
&lt;h2&gt;3.jmter创建一个基本的测试&lt;/h2&gt;
&lt;p&gt;首先选中测试计划=》右键=》添加=》Threades（user）=》线程组，如图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145932121-1210182742.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/66d29c5a8122431aa97a3f7de4f77b9b/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;FC086ED3697C4B579B6A04D2471C42A3&quot;/&gt;&lt;/div&gt;
&lt;p&gt;选中之后会出现线程的设置界面，设置名字，线程数，启动时间，循环此说等。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145944011-1957064691.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/eadccff999574befb9f62b2933393099/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;9C0CC7F90B4546E6BFCBC94B7A7A3168&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;4.创建请求&lt;/h2&gt;
&lt;p&gt;创建完线程组后再线程组中点击右键=》添加=》Sampler=&amp;gt;HTTP请求创建请求地址&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720145957517-2036962068.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/a575e85de2b24743bc7dd827b9be42f9/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;EAA06CF769F94FA8BE3FBA50AF27317D&quot;/&gt;&lt;/div&gt;
&lt;p&gt;在http请求页面需要配置请求地址，请求路径（路径为当前ip下的路由地址），以及请求所携带的参数（此项没有可以不填写）&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150034585-1822961045.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/1da51f01ef074f8ebf543dbfcac67700/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;C03F78A73DB34273AA627D1295FCBD43&quot;/&gt;&lt;/div&gt;
&lt;p&gt;这个时候我们就创建了一个基本的测试，但是现在我们运行起来还不能查看结果。&lt;/p&gt;
&lt;h2&gt;5.添加结果查看器&lt;/h2&gt;
&lt;p&gt;结果查看器的添加方法为：选中线程或者http请求两者任意一个都可以右键=》添加=》监听器=聚合报告。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150057783-379757726.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/38adb5321dbb4874bb63d77e3ea629a4/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;252628CEE10B49DF9AC0AC9FCF117C16&quot;/&gt;&lt;/div&gt;
&lt;p&gt;注意：监听器分为好多种例如：&lt;/p&gt;
&lt;p&gt;图形结果：以图表的形式展示。&lt;/p&gt;
&lt;p&gt;察看结果树：每一个请求的具体url，相应数据等&lt;/p&gt;
&lt;p&gt;表格查看结果：以表格的形式统计每一个请求的吞吐量，实例数，相应时间等。&lt;/p&gt;
&lt;p&gt;以上就是一个基本的创建测试线程。但是对于同时多个接口可以手工录入。&lt;/p&gt;
&lt;h2&gt;6.多个请求随机&lt;/h2&gt;
&lt;p&gt;在惨淡选项栏=》选项=&amp;gt;函数对话框出现如下界面&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150111497-877338087.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/526b98fda9144c8ca8ab7ff8f5738132/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;35A65B7101A540BC8CAA3EEB82893A9C&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后选择_stringfromt&lt;/p&gt;
&lt;p&gt;然后创建一个text文件在里面输入多个url地址换行输入，然后点击添加在值的位置输入text的路径点击生成，在拷贝并粘贴函数字符串位置生成如下字符：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150128865-2019434645.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/f71455fd7c8f42d78efc6a792b908e42/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;BF5D50038EC2475A8D02FDD26241F17F&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后把内容粘贴到http请求的路径里即可。&lt;/p&gt;
&lt;h2&gt;7.录制功能&lt;/h2&gt;
&lt;p&gt;对于整个网站的复杂请求url可以使用录制功能。&lt;/p&gt;
&lt;p&gt;创建一个线程之后再线程里添加配置原件=http请求默认值。在http请求默认值页面只需配置请求ip&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150142002-363944647.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/07810a9b21724ebda210ba3206910283/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;E2E08A6D577B4B9A969C4B9BEF482442&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后点击工作台=》右键=》添加=&amp;gt;非测试原件=》http代理，需要配置端口号，目标录制控制器。排除模式以及分组可以选择设置与不设置（防止干扰）。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/4c6414ec21e44070b4231045f0cab577/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;D0CA1568CD6B409E8F06762FD2B52A4E&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150204959-140256104.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;配置完成之后点击启动。这个时候录制启动，但是检测不到因为代理没有设置。&lt;/p&gt;
&lt;p&gt;设置代理：&lt;/p&gt;
&lt;p&gt;打开ie=&amp;gt;设置=&amp;gt;internet选项=&amp;gt;链接=&amp;gt;局域网设置，选中红线内容并配置，注意端口号要与jmeter设置的一样不然检测不到。保存设置。这个时候在ie浏览器对需要测试的网站进行打开，并所做的操作都会检测记录到jmetr中。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150216154-607757621.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/28cc684d46764ed2afa854f4a28b34ad/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;E00ADBF7A5F64D31B0754329ECAC97C3&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;8.名词解释&lt;/h2&gt;
&lt;p&gt;Sample:本次测试场景共运行多少线程；&lt;/p&gt;
&lt;p&gt; Average:平均响应时间； &lt;/p&gt;
&lt;p&gt; Median:统计意义上的响应时间中值；&lt;/p&gt;
&lt;p&gt;  90% line:所有线程中90%的线程响应时间都小于xx的值;&lt;/p&gt;
&lt;p&gt;  Min:响应最小时间；&lt;/p&gt;
&lt;p&gt; Max:响应最大时间；&lt;/p&gt;
&lt;p&gt; Error:出错率；&lt;/p&gt;
&lt;p&gt;Throughput - 吞吐量以“requests/second、requests /minute、 requests /hour”来衡量&lt;/p&gt;

&lt;h2&gt;9.远程空值操作&lt;/h2&gt;
&lt;p&gt;jmter有时候会内存溢出，虽然可以通过jmeter。bat里面的参数来设置，但是有时候也是不行的，所有可以使用分布的方式多台电脑控制式测压。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150235245-1024142725.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/b1200b5b24c14d3f915d8137b3d1b14e/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4A9EEAF45FC149DA8572EA2D3BD8A895&quot;/&gt;&lt;/div&gt;
&lt;p&gt;首先要配置jmeter.properties的文件修改配置添加远程调用的ip地址：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150250259-375801698.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/275fc5b667ea4124b2ed490da395556d/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;139B2BA2C5994C0F8C9DC219B041B26E&quot;/&gt;&lt;/div&gt;
&lt;p&gt;设置完成之后重新启动即可，这是在运行，启动里面的远程运行会有一个刚才添加的ip主机。&lt;/p&gt;
&lt;p&gt;注意：需要被控制机运行jmeter-server.bat.被控制端弹出如下效果即被控端服务开启成功。主控端就可以在次机器上运行测试线程。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201807/809005-20180720150302485-543164206.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;c:/Users/寒风凌云/AppData/Local/YNote/data/641637285@qq.com/dfe19c843b424d19a517e6008416527c/clipboard.png&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;4DBFE889269A4CB09D7314105F76E883&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 21 Jul 2018 16:55:00 +0000</pubDate>
<dc:creator>YanBigFeg</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanbigfeg/p/9341531.html</dc:identifier>
</item>
<item>
<title>nginx平滑升级的过程 - 谭普利特</title>
<link>http://www.cnblogs.com/Template/p/9348623.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Template/p/9348623.html</guid>
<description>&lt;p&gt;1、开始之前首先查看当前的使用版本以及编译时的参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;[root@www ~]# /usr/local/nginx/sbin/nginx -V&lt;br/&gt;nginx version: nginx/1.12.2&lt;br/&gt;built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC)&lt;br/&gt;built with OpenSSL 1.0.1e-fips 11 Feb 2013&lt;br/&gt;TLS SNI support enabled&lt;br/&gt;configure arguments: --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将编译参数复制出来，编译新版本的时候会用到。&lt;/p&gt;
&lt;p&gt;2、下载新版本：http://nginx.org/en/download.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd nginx-&lt;span&gt;1.14&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;

.&lt;/span&gt;/configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-&lt;span&gt;http_ssl_module

&lt;/span&gt;&lt;span&gt;make&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、执行完成之后，不需要make install ，备份原来的二进制启动文件，然后将新版的启动文件拷贝过去&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; mv&lt;/span&gt; /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak&lt;br/&gt;[root@www nginx-1.14.0]# cp objs/nginx /usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、测试一下复制过来的文件是否生效：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@www nginx-&lt;span&gt;1.14&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;]# /usr/local/nginx/sbin/nginx -&lt;span&gt;t
nginx: the configuration &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; /usr/local/nginx/conf/&lt;span&gt;nginx.conf syntax is ok
nginx: configuration &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; /usr/local/nginx/conf/nginx.conf test is successful
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、发送USR2信号给nginx master 进程（nginx服务接收到USR2信号后，首先会将旧的nginx.pid文件添加后缀.oldbin，变为nginx.pid.oldbin,然后执行新版本的二进制文件启动服务，如果新的服务启动成功，系统中将有新旧两个Nginx服务共同提供web服务）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kill&lt;/span&gt; -USR2 `&lt;span&gt;cat&lt;/span&gt; /usr/local/nginx/logs/nginx.pid`&lt;/pre&gt;
&lt;p&gt;[root@www nginx-1.14.0]# ps -ef | grep nginx&lt;br/&gt;root 22644 1 0 23:30 ? 00:00:00 nginx: master process /usr/local/nginx/sbin/nginx&lt;br/&gt;www 22648 22644 0 23:30 ? 00:00:00 nginx: worker process&lt;br/&gt;root 25784 22644 0 23:47 ? 00:00:00 nginx: master process /usr/local/nginx/sbin/nginx&lt;br/&gt;www 25789 25784 0 23:47 ? 00:00:00 nginx: worker process&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;6、通过发送WINCH信号（平缓停止worker process）和QUIT信号（平缓停止Nginx服务）停止旧的Nginx服务进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;kill&lt;/span&gt; -WINCH `&lt;span&gt;cat&lt;/span&gt; /usr/local/nginx/logs/&lt;span&gt;nginx.pid.oldbin`  
&lt;/span&gt;&lt;span&gt;kill&lt;/span&gt; -QUIT `&lt;span&gt;cat&lt;/span&gt; /usr/local/nginx/logs/nginx.pid.oldbin`   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7、升级完成，最后看一下nginx版本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/usr/local/nginx/sbin/nginx -&lt;span&gt;v
nginx version: nginx&lt;/span&gt;/&lt;span&gt;1.14&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 21 Jul 2018 15:58:00 +0000</pubDate>
<dc:creator>谭普利特</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Template/p/9348623.html</dc:identifier>
</item>
<item>
<title>《我不是药神》 观影有感——为自己挣命 - 执迷于沿途风景的旅人</title>
<link>http://www.cnblogs.com/traveller-ly/p/9348557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/traveller-ly/p/9348557.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　单从电影的角度看，这确实是一部很好的电影。我一直觉得，电影就是讲故事，剧本是故事的框架，而演员是故事的血肉。无疑，这部电影骨架坚实，血肉丰满。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;但我今天不想谈这部电影的好与坏，只就故事的些许片段进行讨论。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;电影中有这样一幕，黄毛引开警察后被车撞死，在医院程勇质问警官“他只是想活着，有罪吗？”有罪吗？没有。但从某种程度上来说把他逼死的警官有罪吗？没有。我想起以前看过的一本小说，里面有过这样一句话，人的命，是靠自己挣的。黄毛为自己挣命，他无罪。那些警察也无罪，他们也在为自己挣命——那是他们的工作。那么，这里又有一个问题，他们，就该死吗？不该死。因为人有活着的权利，谁也没办法剥夺。他们不该死吗？他们为了活着去支持盗版，仿制品，给药品研发的公司带来了经济损害。这么一看后者好像根本没有道理，因为生命无价。但换个角度想， 他们某种程度上打击的药品研发公司的积极性，也就是说，客观上他们对药品研发造成了阻碍。因为，这种特效药的研发成本肯定不低，如果研究成果被简单的复制，那么研发还有什么进行的必要？或许有人会说，“那家公司为什么不在收回成本之后就降价呢？”因为那是一家公司而非慈善机构，收回成本后就降价，一样会打击生产积极性，之所以他们愿意花大成本来研制这种药，说白了，是为了钱，想要钱的欲望，贪念推动了这种药的产生——事实上，我认为人类社会的进步，科学的进步，都源自人类的欲望和需求。当需求被压缩，农耕社会夜很令人满足。回到那个问题，如果收回成本就降价，那和直接降价有区别吗？没有的。那么购买支持仿制药的人，有错吗，没有的。所以，那些要仿制药停产，追查仿制药的人——这些客观上逼死那些病人的人，也无错。双方不过都是在为自己挣命罢了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　或许很久很久以后，人类文明还没有毁灭，生产力达到了一个空前的高度，使得那些只存在于理论中的社会，能够实现，那时或许会有那时的各种问题，今天的问题，或许就不是问题了。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Jul 2018 15:39:00 +0000</pubDate>
<dc:creator>执迷于沿途风景的旅人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/traveller-ly/p/9348557.html</dc:identifier>
</item>
<item>
<title>TypeScript在node项目中的实践 - 贾顺名</title>
<link>http://www.cnblogs.com/jiasm/p/9348539.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiasm/p/9348539.html</guid>
<description>&lt;p&gt;TypeScript可以理解为是JavaScript的一个超集，也就是说涵盖了所有JavaScript的功能，并在之上有着自己独特的语法。&lt;br/&gt;最近的一个新项目开始了TS的踩坑之旅，现分享一些可以借鉴的套路给大家。&lt;/p&gt;
&lt;h2 id=&quot;为什么选择TS&quot;&gt;为什么选择TS&lt;/h2&gt;
&lt;p&gt;作为巨硬公司出品的一个静态强类型编译型语言，该语言已经出现了几年的时间了，相信在社区的维护下，已经是一门很稳定的语言。&lt;br/&gt;我们知道，JavaScript是一门动态弱类型解释型脚本语言，动态带来了很多的便利，我们可以在代码运行中随意的修改变量类型以达到预期目的。&lt;br/&gt;但同时，这是一把双刃剑，当一个庞大的项目出现在你的面前，面对无比复杂的逻辑，你很难通过代码看出某个变量是什么类型，这个变量要做什么，很可能一不小心就会踩到坑。&lt;/p&gt;
&lt;p&gt;而静态强类型编译能够带来很多的好处，其中最重要的一点就是可以帮助开发人员杜绝一些马虎大意的问题：&lt;br/&gt;&lt;img src=&quot;http://newimg88.b0.upaiyun.com/newimg88/2018/02/javascript-error-graph.png&quot; alt=&quot;image&quot; width=&quot;841&quot; height=&quot;521&quot;/&gt;&lt;br/&gt;&lt;em&gt;图为rollbar统计的数千个项目中数量最多的前十个异常&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不难看出，因为类型不匹配、变量为空导致的异常比你敢承认的次数要多。&lt;br/&gt;譬如&lt;br/&gt;&lt;img src=&quot;https://os4ty6tab.qnssl.com/cblued/static/sample-error-code.1ci4jfvvt2t4ojs.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;而这一点在TS中得到了很好的改善，任何一个变量的引用，都需要指定自己的类型，而你下边在代码中可以用什么，支持什么方法，都需要在上边进行定义：&lt;br/&gt;&lt;img src=&quot;https://os4ty6tab.qnssl.com/cblued/static/typescript-example.1ciuh4eh1v1sum.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;这个提示会在开发、编译期来提示给开发者，避免了上线以后发现有问题，再去修改。&lt;/p&gt;
&lt;p&gt;另外一个由静态编译类型带来的好处，就是函数签名。&lt;br/&gt;还是就像上边所说的，因为是一个动态的脚本语言，所以很难有编辑器能够在开发期间正确地告诉你所要调用的一个函数需要传递什么参数，函数会返回什么类型的返回值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os4ty6tab.qnssl.com/cblued/static/js-function-call.1ci4kli9ou37kr.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而在TS中，对于一个函数，首先你需要定义所有参数的类型，以及返回值的类型。&lt;br/&gt;这样在函数被调用时，我们就可以很清晰的看到这个函数的效果：&lt;br/&gt;&lt;img src=&quot;https://os4ty6tab.qnssl.com/cblued/static/ts-function-call.1ciuh6bsp2ujs1q.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是最基础的、能够让程序更加稳定的两个特性，当然，还有更多的功能在TS中的：&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;TypeScript | Handbook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TypeScript在node中的应用&quot;&gt;TypeScript在node中的应用&lt;/h2&gt;
&lt;p&gt;在TS的官网中，有着大量的&lt;a href=&quot;https://www.typescriptlang.org/samples/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;示例&lt;/a&gt;，其中就找到了&lt;a href=&quot;https://github.com/Microsoft/TypeScript-Node-Starter#typescript-node-starter&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Express&lt;/a&gt;版本的例子，针对这个稍作修饰，应用在了一个 koa 项目中。&lt;/p&gt;
&lt;h3 id=&quot;环境依赖&quot;&gt;环境依赖&lt;/h3&gt;
&lt;p&gt;在使用TS之前，需要先准备这些东西：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;VS code&lt;/strong&gt;，同为巨硬公司出品，本身就是TS开发的，遂该编辑器是目前对TS支持度最高的一个&lt;/li&gt;
&lt;li&gt;Node.js 推荐8.11版本以上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i -g typescript&lt;/code&gt;，全局安装TS，编译所使用的tsc命令在这里&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i -g nodemon&lt;/code&gt;，全局安装nodemon，在tsc编译后自动刷新服务器程序&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以项目中使用的一些核心依赖：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;reflect-metadata&lt;/code&gt;： 大量装饰器的包都会依赖的一个基础包，用于注入数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routing-controllers&lt;/code&gt;： 使用装饰器的方式来进行koa-router的开发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequelize&lt;/code&gt;： 抽象化的数据库操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequelize-typescript&lt;/code&gt;： 上述插件的装饰器版本，定义实体时使用&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;项目结构&quot;&gt;项目结构&lt;/h3&gt;
&lt;p&gt;首先，放出目前项目的结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── README.md
├── copy&lt;/span&gt;-static-&lt;span&gt;assets.ts
├── nodemon.json
├── package&lt;/span&gt;-&lt;span&gt;lock.json
├── package.json
├── dist
├── src
│   ├── config
│   ├── controllers
│   ├── entity
│   ├── models
│   ├── middleware
│   ├── public
│   ├── app.ts
│   ├── server.ts
│   ├── types
│   └── utils
├── tsconfig.json
└── tslint.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;src&lt;/code&gt;为主要开发目录，所有的TS代码都在这里边，在经过编译过后，会生成一个与&lt;code&gt;src&lt;/code&gt;同级的&lt;code&gt;dist&lt;/code&gt;文件夹，这个文件夹是&lt;code&gt;node&lt;/code&gt;引擎实际运行的代码。&lt;br/&gt;在&lt;code&gt;src&lt;/code&gt;下，主要代码分为了如下结构（依据自己项目的实际情况进行增删）：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;folder&lt;/th&gt;
&lt;th&gt;desc&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;controllers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于处理接口请求，原&lt;code&gt;apps&lt;/code&gt;、&lt;code&gt;routes&lt;/code&gt;文件夹。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;middleware&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;存放了各种中间件、全局 or 自定义的中间件&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各种配置项的位置，包括端口、&lt;code&gt;log&lt;/code&gt;路径、各种巴拉巴拉的常量定义。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;entity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这里存放的是所有的实体定义（使用了sequelize进行数据库操作）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;models&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用来自&lt;code&gt;entity&lt;/code&gt;中的实体进行&lt;code&gt;sequelize&lt;/code&gt;来完成初始化的操作，并将&lt;code&gt;sequelize&lt;/code&gt;对象抛出。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;存放的各种日常开发中提炼出来的公共函数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;code&gt;types&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;存放了各种客制化的复合类型的定义，各种结构、属性、方法返回值的定义（目前包括常用的Promise版redis与qconf）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;controllers&quot;&gt;controllers&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;controllers只负责处理逻辑，通过操作model对象，而不是数据库来进行数据的增删改查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;鉴于公司绝大部分的Node项目版本都已经升级到了&lt;code&gt;Node 8.11&lt;/code&gt;，理所应当的，我们会尝试新的语法。&lt;br/&gt;也就是说我们会抛弃&lt;code&gt;Generator&lt;/code&gt;，拥抱&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Koa&lt;/code&gt;、&lt;code&gt;Express&lt;/code&gt;写过接口的童鞋应该都知道，当一个项目变得庞大，实际上会产生很多重复的非逻辑代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
router.get('/', ctx =&amp;gt;&lt;span&gt; {})
router.get(&lt;/span&gt;'/page1', ctx =&amp;gt;&lt;span&gt; {})
router.get(&lt;/span&gt;'/page2', ctx =&amp;gt;&lt;span&gt; {})
router.get(&lt;/span&gt;'/page3', ctx =&amp;gt;&lt;span&gt; {})
router.get(&lt;/span&gt;'/pageN', ctx =&amp;gt; {})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而在每个路由监听中，又做着大量重复的工作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
router.get('/', ctx =&amp;gt;&lt;span&gt; {
  let uid &lt;/span&gt;= Number(ctx.cookies.get('uid'&lt;span&gt;))
  let device &lt;/span&gt;= ctx.headers['device'] || 'ios'&lt;span&gt;
  let { tel, name } &lt;/span&gt;=&lt;span&gt; ctx.query
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;几乎每一个路由的头部都是在做着获取参数的工作，而参数很可能来自&lt;code&gt;header&lt;/code&gt;、&lt;code&gt;body&lt;/code&gt;甚至是&lt;code&gt;cookie&lt;/code&gt;及&lt;code&gt;query&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以，我们对原来koa的使用方法进行了一个较大的改动，并使用&lt;a href=&quot;https://github.com/typestack/routing-controllers&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;routing-controllers&lt;/a&gt;大量的应用装饰器来帮助我们处理大部分的非逻辑代码。&lt;/p&gt;
&lt;p&gt;原有router的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
module.exports = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (router) {
  router.get(&lt;/span&gt;'/', &lt;span&gt;function&lt;/span&gt;*&lt;span&gt; (next) {
    let uid &lt;/span&gt;= Number(&lt;span&gt;this&lt;/span&gt;.cookies.get('uid'&lt;span&gt;))
    let device &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.headers['device'&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.body =&lt;span&gt; {
      code: &lt;/span&gt;200&lt;span&gt;
    }
  })
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用了TypeScript与装饰器的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class {
  @Get(&lt;/span&gt;'/'&lt;span&gt;)
  async index (
    @CookieParam(&lt;/span&gt;'uid'&lt;span&gt;) uid: number,
    @HeaderParam(&lt;/span&gt;'device'&lt;span&gt;) device: string
  ) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      code: &lt;/span&gt;200&lt;span&gt;
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了使接口更易于检索、更清晰，所以我们抛弃了原有的&lt;code&gt;bd-router&lt;/code&gt;的功能（依据文件路径作为接口路径、TS中的文件路径仅用于文件分层）。&lt;br/&gt;直接在&lt;code&gt;controllers&lt;/code&gt;下的文件中声明对应的接口进行监听。&lt;/p&gt;
&lt;h3 id=&quot;middleware&quot;&gt;middleware&lt;/h3&gt;
&lt;p&gt;如果是全局的中间件，则直接在class上添加&lt;code&gt;@Middleware&lt;/code&gt;装饰器，并设置&lt;code&gt;type: 'after|before'&lt;/code&gt;即可。&lt;br/&gt;如果是特定的一些中间件，则创建一个普通的class即可，然后在需要使用的&lt;code&gt;controller&lt;/code&gt;对象上指定&lt;code&gt;@UseBefore&lt;/code&gt;/&lt;code&gt;@UseAfter&lt;/code&gt;（可以写在class上，也可以写在method上）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的中间件都需要继承对应的MiddlewareInterface接口，并需要实现&lt;code&gt;use&lt;/code&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; middleware/xxx.ts&lt;/span&gt;
import {ExpressMiddlewareInterface} from &quot;../../src/driver/express/ExpressMiddlewareInterface&quot;&lt;span&gt;

export class CompressionMiddleware implements KoaMiddlewareInterface {
  use(request: any, response: any, next&lt;/span&gt;?&lt;span&gt;: Function): any {
    console.log(&lt;/span&gt;&quot;hello compression ...&quot;&lt;span&gt;)
    next()
  }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; controllers/xxx.ts&lt;/span&gt;
&lt;span&gt;@UseBefore(CompressionMiddleware)
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; class { }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;entity&quot;&gt;entity&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文件只负责定义数据模型，不做任何逻辑操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样的使用了sequelize+装饰器的方式，entity只是用来建立与数据库之间通讯的数据模型。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
import { Model, Table, Column } from 'sequelize-typescript'&lt;span&gt;

@Table({
  tableName: &lt;/span&gt;'user_info_test'&lt;span&gt;
})
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; class UserInfo extends Model&amp;lt;UserInfo&amp;gt;&lt;span&gt; {
  @Column({
    comment: &lt;/span&gt;'自增ID'&lt;span&gt;,
    autoIncrement: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    primaryKey: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  })
  uid: number

  @Column({
    comment: &lt;/span&gt;'姓名'&lt;span&gt;
  })
  name: string

  @Column({
    comment: &lt;/span&gt;'年龄'&lt;span&gt;,
    defaultValue: &lt;/span&gt;0&lt;span&gt;
  })
  age: number

  @Column({
    comment: &lt;/span&gt;'性别'&lt;span&gt;
  })
  gender: number
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;因为sequelize建立连接也是需要对应的数据库地址、账户、密码、database等信息、所以推荐将同一个数据库的所有实体放在一个目录下，方便sequelize加载对应的模型&lt;/strong&gt;&lt;br/&gt;同步的推荐在config下创建对应的配置信息，并添加一列用于存放实体的key。&lt;br/&gt;这样在建立数据库链接，加载数据模型时就可以动态的导入该路径下的所有实体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; config.ts&lt;/span&gt;
export const config =&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;  mysql1: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... config&lt;/span&gt;
+   entity: 'entity1' &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加一列用来标识是什么实体的key&lt;/span&gt;
&lt;span&gt;  },
  mysql2: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... config&lt;/span&gt;
+   entity: 'entity2' &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加一列用来标识是什么实体的key&lt;/span&gt;
&lt;span&gt;  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; utils/mysql.ts&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sequelize({
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
  modelPath: [path.reolve(__dirname, `../entity/&lt;span&gt;${config.mysql1.entity}`)]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;model&quot;&gt;model&lt;/h3&gt;
&lt;p&gt;model的定位在于根据对应的实体创建抽象化的数据库对象，因为使用了sequelize，所以该目录下的文件会变得非常简洁。&lt;br/&gt;基本就是初始化sequelize对象，并在加载模型后将其抛出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sequelize({
  host: &lt;/span&gt;'127.0.0.1'&lt;span&gt;,
  database: &lt;/span&gt;'database'&lt;span&gt;,
  username: &lt;/span&gt;'user'&lt;span&gt;,
  password: &lt;/span&gt;'password'&lt;span&gt;,
  dialect: &lt;/span&gt;'mysql', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者一些其他的数据库&lt;/span&gt;
  modelPaths: [path.resolve(__dirname, `../entity/${configs.mysql1.entity}`)], &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载我们的实体&lt;/span&gt;
  pool: { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 连接池的一些相关配置&lt;/span&gt;
    max: 5&lt;span&gt;,
    min: &lt;/span&gt;0&lt;span&gt;,
    acquire: &lt;/span&gt;30000&lt;span&gt;,
    idle: &lt;/span&gt;10000&lt;span&gt;
  },
  operatorsAliases: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
  logging: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true会在控制台打印每次sequelize操作时对应的SQL命令&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;utils&quot;&gt;utils&lt;/h3&gt;
&lt;p&gt;所有的公共函数，都放在这里。&lt;br/&gt;同时推荐编写对应的索引文件(index.ts)，大致的格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; utils/get-uid.ts&lt;/span&gt;
export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (): number {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 123&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; utils/number-comma.ts&lt;/span&gt;
export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(): string {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; '1,234'&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; utils/index.ts&lt;/span&gt;
export {&lt;span&gt;default&lt;/span&gt; as getUid} from './get-uid'&lt;span&gt;
export {&lt;/span&gt;&lt;span&gt;default&lt;/span&gt; as numberComma} from './number-comma'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每添加一个新的&lt;code&gt;util&lt;/code&gt;，就去&lt;code&gt;index&lt;/code&gt;中添加对应的索引，这样带来的好处就是可以通过一行来引入所有想引入的&lt;code&gt;utils&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import {getUid, numberComma} from './utils'
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configs&quot;&gt;configs&lt;/h3&gt;
&lt;p&gt;configs下边存储的就是各种配置信息了，包括一些第三方接口URL、数据库配置、日志路径。&lt;br/&gt;各种balabala的静态数据。&lt;br/&gt;如果配置文件多的话，建议拆分为多个文件，然后按照&lt;code&gt;utils&lt;/code&gt;的方式编写索引文件。&lt;/p&gt;
&lt;h3 id=&quot;types&quot;&gt;types&lt;/h3&gt;
&lt;p&gt;这里存放的是所有的自定义的类型定义，一些开源社区没有提供的，但是我们用到的第三方插件，需要在这里进行定义，一般来说常用的都会有，但是一些小众的包可能确实没有TS的支持，例如我们有使用的一个&lt;code&gt;node-qconf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; types/node-qconf.d.ts&lt;/span&gt;
export &lt;span&gt;function&lt;/span&gt; getConf(path: string): string | &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; getBatchKeys(path: string): string[] | &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; getBatchConf(path: string): string | &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; getAllHost(path: string): string[] | &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; getHost(path: string): string | &lt;span&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;类型定义的文件规定后缀为 .d.ts&lt;/em&gt;&lt;br/&gt;types下边的所有文件可以直接引用，而不用关心相对路径的问题（其他普通的model则需要写相对路径，这是一个很尴尬的问题）。&lt;/p&gt;
&lt;h3 id=&quot;目前使用TS中的一些问题&quot;&gt;目前使用TS中的一些问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://os4ty6tab.qnssl.com/cblued/static/issues.1ci8qk2dr12l4sc.png&quot; alt=&quot;&quot; width=&quot;803&quot; height=&quot;327&quot;/&gt;&lt;br/&gt;当前GitHub仓库中，有2600+的开启状态的issues，筛选bug标签后，依然有900+的存在。&lt;br/&gt;所以很难保证在使用的过程中不会踩坑，但是一个项目拥有这么多活跃的issues，也能从侧面说明这个项目的受欢迎程度。&lt;/p&gt;
&lt;p&gt;目前遇到的唯一一个比较尴尬的问题就是：&lt;br/&gt;&lt;strong&gt;引用文件路径一定要写全。。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import module from '../../../../f**k-module'
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;初次尝试TypeScript，深深的喜欢上了这个语言，虽说也会有一些小小的问题，但还是能客服的:)。&lt;br/&gt;使用一门静态强类型编译语言，能够将很多bug都消灭在开发期间。&lt;/p&gt;
&lt;p&gt;基于上述描述的一个简单示例：&lt;a href=&quot;https://github.com/Jiasm/typescript-example&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;代码仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望大家玩得开心，如有任何TS相关的问题，欢迎来骚扰。&lt;code&gt;NPM loves U.&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;TypeScript在node项目中的实践&lt;/p&gt;
</description>
<pubDate>Sat, 21 Jul 2018 15:33:00 +0000</pubDate>
<dc:creator>贾顺名</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiasm/p/9348539.html</dc:identifier>
</item>
<item>
<title>Angular中sweetalert弹框的使用详解 - 半指温柔乐</title>
<link>http://www.cnblogs.com/le220/p/9348337.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/le220/p/9348337.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近太忙了，项目中使用的弹框老板嫌太丑，让我们优化一下，我在网上找了一下，找到了sweetalert弹框，算是比较好看的弹框了。所以我就想办法将sweetalert用到项目中，在项目中引入sweetalert时，遇到诸多问题，但最终在我不懈坚持下，都解决了，实现了效果。具体用法请看下文。写的有问题的地方欢迎留言，我会及时更改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、下载文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;npm install &lt;span&gt;&lt;strong&gt;angular-sweetalert&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;npm install &lt;span&gt;&lt;strong&gt;sweetalert&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当&lt;/span&gt;npm &lt;span&gt;下载&lt;/span&gt;&lt;span&gt;angular-sweetalert&lt;/span&gt;&lt;span&gt;时，会附带下载&lt;/span&gt;&lt;span&gt;sweetalert&lt;/span&gt;&lt;span&gt;，但是只能用&lt;/span&gt;&lt;span&gt;sweetalert&lt;/span&gt;&lt;span&gt;中的&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;必须通过&lt;/span&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt;下载&lt;/span&gt;&lt;span&gt;sweetalert&lt;/span&gt;&lt;span&gt;，引入下载的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;sweetalert.min.js&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、版本说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Angular V1.2.30&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Angular-sweetalert V1.0.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sweetalert V2.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因为我们项目使用的&lt;/span&gt;angular&lt;span&gt;版本较低，所以相对应下载的&lt;/span&gt;&lt;span&gt;angular-sweetalert&lt;/span&gt;&lt;span&gt;版本也低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一定要注意版本，如果&lt;/span&gt;angular-sweetalert&lt;span&gt;版本过高，所依赖的文件&lt;/span&gt;&lt;span&gt;angular&lt;/span&gt;&lt;span&gt;版本过低，会导致引入报错。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;三、引入文件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;sweetalert/sweetalert.min.css&lt;/li&gt;
&lt;li&gt;angular/angular.min.js&lt;/li&gt;
&lt;li&gt;angular-sweetalert/SweetAlert.min.js&lt;/li&gt;
&lt;li&gt;sweetalert/sweetalert.min.js&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注意:在&lt;/span&gt;app&lt;span&gt;中添加依赖模块‘&lt;/span&gt;&lt;span&gt;&lt;strong&gt;oitozero.ngSweetAlert&lt;/strong&gt;&lt;/span&gt;’&lt;/p&gt;
&lt;h2&gt;四、使用方法&lt;/h2&gt;
&lt;h3&gt;1&lt;span&gt;、基础用法&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;(&quot;请选中数据再进行操作&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223223016-1920212006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2&lt;span&gt;、确认提示框&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             title: &quot;提交&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             text: &quot;确定提交吗&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;&lt;strong&gt;icon&lt;/strong&gt;&lt;/span&gt;: '&lt;span&gt;&lt;strong&gt;info&lt;/strong&gt;&lt;/span&gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;            buttons&lt;/strong&gt;&lt;/span&gt;: {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                 cancel: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;                 confirm: &quot;Confirm&quot;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;         })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223245789-324966729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3&lt;span&gt;、成功信息提示&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;(&quot;提交&quot;, &quot;提交成功成功&quot;, '&lt;span&gt;&lt;strong&gt;success&lt;/strong&gt;&lt;/span&gt;');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223313829-301920426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;4&lt;span&gt;、错误信息提示&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;(&quot;删除&quot;, &quot;删除成功&quot;, '&lt;span&gt;&lt;strong&gt;error&lt;/strong&gt;&lt;/span&gt;');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223326459-1051060114.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5&lt;span&gt;、&lt;/span&gt;&lt;span&gt;警告信息弹窗，&lt;/span&gt;“&lt;span&gt;确认&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;按钮带有一个函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 效果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;    title: &quot;审批&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;    text: &quot;确定通过审批吗&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;    &lt;span&gt;&lt;strong&gt;icon&lt;/strong&gt;&lt;/span&gt;: 'warning'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;   buttons&lt;/strong&gt;&lt;/span&gt;: {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;       cancel: &quot;取消&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;       confirm: &quot;确定&quot;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; }).&lt;span&gt;&lt;strong&gt;then&lt;/strong&gt;&lt;/span&gt;(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(isConfirm){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isConfirm){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;       httpService.post('/bill/add'&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;         billNo: $scope.content.statementBillno,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;          systemNo: 'clearingservice'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;          approvalNo: 'cs001'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;         userId: username,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;         shopNo: $scope.content.storeId
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;       }, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             commonService.state.go(&quot;clearingservice.statements.list&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;      }, config.systemInfo.approval);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;    }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;       &lt;span&gt;&lt;strong&gt;swal&lt;/strong&gt;&lt;/span&gt;(&quot;取消&quot;,&quot;没有审批&quot;,'error'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223407909-807626200.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;点击取消执行else&lt;span&gt;中的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223430037-1861746586.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;点击确定直接执行函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217233/201807/1217233-20180721223457633-759281281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;五、相关问题&lt;/h2&gt;
&lt;h3&gt;1&lt;span&gt;、传函数错误&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Swal(“确定提交吗”,  function(){}, ‘error’ );  //&lt;span&gt;这种写法在我用的这个版本中是错误的，我的这个版本支持&lt;/span&gt;&lt;span&gt;&lt;strong&gt;then()&lt;/strong&gt;,&lt;/span&gt; &lt;span&gt;不支持直接在参数中写方法&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2、API&lt;span&gt;问题&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在这个版本中以下写法只能实现&lt;/span&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;span&gt;和&lt;/span&gt;&lt;strong&gt;&lt;span&gt;text&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的效果，其他属性都不起作用&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;swal({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       title: &quot;确定删除吗？&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;       text: &quot;你将无法恢复该虚拟文件！&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       type: &quot;warning&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;       showCancelButton: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;       confirmButtonColor: &quot;#DD6B55&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;       confirmButtonText: &quot;确定删除！&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;       closeOnConfirm: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;    &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;       swal(&quot;删除！&quot;, &quot;你的虚拟文件已经被删除。&quot;, &quot;success&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;    });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个版本中只能按照我最上面所列举的去实现，那是我在官方英文文档中发现的，中文文档太坑了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;官方文档：&lt;/span&gt;https://sweetalert.js.org/docs/&lt;/p&gt;

</description>
<pubDate>Sat, 21 Jul 2018 15:09:00 +0000</pubDate>
<dc:creator>半指温柔乐</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/le220/p/9348337.html</dc:identifier>
</item>
<item>
<title>spring集成cxf实现webservice接口功能 - 架构师小跟班</title>
<link>http://www.cnblogs.com/xyhero/p/9348469.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xyhero/p/9348469.html</guid>
<description>&lt;p&gt;由于cxf的web项目已经集成了Spring，所以cxf的服务类都是在spring的配置文件中完成的。以下是步骤：&lt;br/&gt;第一步：建立一个web项目。&lt;br/&gt;第二步：准备所有jar包。将cxf_home\lib项目下的所有jar包全部copy到新项目的lib目录下，里面已经包含了spring3.0的jar包。&lt;br/&gt;第三步：在web.xml中配置cxf的核心servlet，CXFServlet。&lt;br/&gt;第四步：创建(最好是Copy)cxf-servlet.xml文件。这是一个spring的配置文件。&lt;/p&gt;
&lt;p&gt;1、web.xml中配置servlet&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1158160/201807/1158160-20180721225943546-741287538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如果没有提供给cxf默认的/WEB-INF/cxf-servlet.xml配置文件，则必须要在spring的配置文件中配置以下三行配置（import）。否则将不能加载名称为cxf的bean.从而启动失败。&lt;/p&gt;
&lt;p&gt;2、applicationContext.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;spring发布webservice服务配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf-extension-soap.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入webservice服务 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 统一工号管理接口 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;UnifiedNoServiceBean&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.webservice.unifiedno.service.impl.UnifiedNoServiceImpl&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:server &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;UnifiedNoService&quot;&lt;/span&gt;&lt;span&gt; serviceClass&lt;/span&gt;&lt;span&gt;=&quot;com.webservice.unifiedno.service.UnifiedNoService&quot;&lt;/span&gt;&lt;span&gt; address&lt;/span&gt;&lt;span&gt;=&quot;/unifiedNoService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:serviceBean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;UnifiedNoServiceBean&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:serviceBean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、&amp;lt;import&amp;gt;的三个文件是否需要全部引入根据cxf框架版本不同而不同&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、address的值为webservice注解的值：@WebService(serviceName = &quot;unifiedNoService&quot;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3、必须要在声明为serviceClass的接口上声明@WebSerive注解，因为，要使用了接口，在接口上添加的注解才会有效。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4、serviceClass：必须为一个接口，并在接口上必须使用@WebService注解否则调用时会抛出异常&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5、serviceBean:是实际服务的类，必须是serviceClass的子类，此类上面即可以使用@WebService注解，也可以不使用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;6、address：访问地址，省去前面的ip:port，注意在此注册的类，必须要添加@WebService的注解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、写接口及实现类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1158160/201807/1158160-20180721230006979-1891959196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动项目，测试cxf是否配置成功：&lt;br/&gt;访问：http://localhost:8080/ins/services，会列出所有已经发布的webservice接口服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1158160/201807/1158160-20180721230027849-2105721379.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;316&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、测试&lt;br/&gt;http://localhost:8080/ins/services/unifiedNoService?wsdl&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1158160/201807/1158160-20180721230104087-623198198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Java项目代码调用服务：&lt;/p&gt;
&lt;p&gt;使用纯Java项目调用&lt;br/&gt;1、根据客户端生成的代码来调用。（优选这种方式）&lt;br/&gt;请先生成然后在任意的Java项目中调用 。&lt;br/&gt;2、客户端只拥有一个接口，使用JaxWsProxyFactoryBean来调用。&lt;br/&gt;因为以下使用了JaxWsProxyFactoryBean,所以，仍然需要CXF的环境，而使用此环境就会造成Jar文件的大量冗余，所以大家要谨慎选择。&lt;/p&gt;
&lt;p&gt;1、注意，此处所说的是在Java项目中调用Spring的服务，并不是在JavaEE项目中调用。后期将会讲到如何在JavaEE项目中调用。&lt;br/&gt;2、建议从wsdl地址获取接口文件，也仅需要接口文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
JaxWsProxyFactoryBean client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JaxWsProxyFactoryBean();
client.setAddress(&lt;/span&gt;&quot;http://localhost:7777/xcxf2_web/ws/one&quot;&lt;span&gt;);
client.setServiceClass(IOneService.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
IOneService one &lt;/span&gt;= client.create(IOneService.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
String ss &lt;/span&gt;= one.sayHi(&quot;OK你好&quot;&lt;span&gt;);
System.err.println(ss);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Spring项目中，通过配置文件调用：&lt;/p&gt;
&lt;p&gt;以下是使用Spring的配置文件调用：&lt;br/&gt;新建立一个Java项目，并加载cxf的所有包。&lt;br/&gt;只需要生成的接口文件。&lt;br/&gt;在classpath下新建立一个ClientBeans.xml文件.&lt;/p&gt;
&lt;p&gt;优点与缺点：&lt;br/&gt;此种情况，适合于一个Javaweb项目已经集成了Spring。并希望通过CXF配置的方式调用Web服务。&lt;br/&gt;此种情况，仍然需要导入CXF的大量jar包。&lt;br/&gt;这种情况也存在一定人优点，如可以将外部的Web服务通过配置文件注入(DI)到Action类中。&lt;/p&gt;
&lt;p&gt;说明：&lt;br/&gt;通过&amp;lt;jaxws:client/&amp;gt;来获取WebService，id就不用说了吧。&lt;br/&gt;address是不包含?wsdl的服务地址。&lt;br/&gt;serviceClass是本地的接口名，与服务接口名保持相同才可以。&lt;/p&gt;
&lt;p&gt;1、以下是ClientBeans.xml的文件的源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:jaxws&lt;/span&gt;&lt;span&gt;=&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:jaxrs&lt;/span&gt;&lt;span&gt;=&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:cxf&lt;/span&gt;&lt;span&gt;=&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
                              http://www.springframework.org/schema/beans/spring-beans.xsd
            http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:client &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;helloClient&quot;&lt;/span&gt;&lt;span&gt;
                   address&lt;/span&gt;&lt;span&gt;=&quot;http://127.0.0.1:9999/cxf2.4_spring_web/ws/helloworld&quot;&lt;/span&gt;&lt;span&gt;
                   serviceClass&lt;/span&gt;&lt;span&gt;=&quot;com.itcast.cxf.first.IHelloWorld&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1、以下是CxfJavaClient.java的源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.itcast.cxfweb.java.client;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.itcast.cxf.first.IHelloWorld;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Java项目的客户端
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; wangjianme
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CxfJavaClient {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取配置文件&lt;/span&gt;
        ApplicationContext ctx = 
            &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;ClientBeans.xml&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get到接口类型并调用&lt;/span&gt;
        IHelloWorld hello = (IHelloWorld)ctx.getBean(&quot;helloClient&quot;&lt;span&gt;);
        String str &lt;/span&gt;= hello.sayHello(&quot;WJ&quot;&lt;span&gt;);
        System.err.println(str);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在本域使用jquery访问： －－查询所有用户：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
      $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
          $(&lt;/span&gt;&quot;#btn1&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url = &quot;http://localhost:7777/ws2/ws/user&quot;&lt;span&gt;;
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; soap = '&amp;lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; '+
                         'xmlns:q0=&quot;http://service.ws2.itcast.cn/&quot; '+
                         'xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; '+
                         'xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;'+
                         '&amp;lt;soapenv:Body&amp;gt;&amp;lt;q0:getUsers/&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;'&lt;span&gt;;
              $.ajax({
                  url:url,&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问的url&lt;/span&gt;
                  dataType:'xml',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回的数据类型&lt;/span&gt;
                  type:'post',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求方式&lt;/span&gt;
                  contentType:'application/soap+xml;charset=UTF-8'&lt;span&gt;,
                  data:soap,&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;
                  success:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data,status,xhr){
                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对返回后的数据进行解析&lt;/span&gt;
                      $(data).find(&quot;return&quot;).each(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nm = $(&lt;span&gt;this&lt;/span&gt;).find(&quot;name&quot;&lt;span&gt;).text();
                          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; age = $(&lt;span&gt;this&lt;/span&gt;).find(&quot;age&quot;&lt;span&gt;).text();
                          alert(nm&lt;/span&gt;+&quot;,&quot;+&lt;span&gt;age);
                      });
                  },
                  error:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(xhr,status){
                      alert(&lt;/span&gt;&quot;出错了:&quot;+&lt;span&gt;status);
                  }
              });
          });
      });
  &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;向服务器保存用户：&lt;/p&gt;
&lt;p&gt;以下是jsclient.jsp的源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&amp;gt;
&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;script type=&quot;text/javascript&quot;&lt;span&gt; 
              src&lt;/span&gt;=&quot;&amp;lt;c:url value='/js/jquery-1.5.js'/&amp;gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
        &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&quot;name&quot;&amp;gt;姓名：&amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;/&amp;gt;
        &amp;lt;br/&amp;gt;
        &amp;lt;a href=&quot;#&quot; id=&quot;ok&quot;&amp;gt;确定&amp;lt;/a&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
      $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        $(&lt;/span&gt;&quot;#ok&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; val = $(&quot;#name&quot;&lt;span&gt;).val();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(val)==&quot;&quot;&lt;span&gt;){
                alert(&lt;/span&gt;&quot;请输入名称&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = '&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;'+
                      '&amp;lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;'+
                      '&amp;lt;soap:Body&amp;gt;&amp;lt;ns2:sayHello xmlns:ns2=&quot;http://first.cxf.itcast.com/&quot;&amp;gt;'+
                      '&amp;lt;arg0&amp;gt;'+val+'&amp;lt;/arg0&amp;gt;'+
                      '&amp;lt;/ns2:sayHello&amp;gt;&amp;lt;/soap:Body&amp;gt;&amp;lt;/soap:Envelope&amp;gt;'&lt;span&gt;;
            $.ajax({
                contentType:&lt;/span&gt;'application/xml;charset=&quot;UTF-8&quot;'&lt;span&gt;,
                dataType:&lt;/span&gt;'xml'&lt;span&gt;,
                type:&lt;/span&gt;'post'&lt;span&gt;,
                url:&lt;/span&gt;'http://localhost:9999/cxf2.4_spring_web/ws/helloworld',        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接发向这个地址&lt;/span&gt;
&lt;span&gt;                data:str,
                success:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(data).find(&quot;return&quot;).each(function(){&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    alert($(this).text());&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;});                    //使用上面的方法也是可以的&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; ss = $(data).find(&quot;return&quot;&lt;span&gt;).first().text();
                    $(&lt;/span&gt;&quot;&amp;lt;div&amp;gt;&quot;&lt;span&gt;).html(ss)
                        .css(&lt;/span&gt;&quot;border&quot;,&quot;1px solid blue&quot;&lt;span&gt;)
                        .css({width:&lt;/span&gt;'50%'&lt;span&gt;}).
                        appendTo($(&lt;/span&gt;&quot;body&quot;&lt;span&gt;));
                    $(&lt;/span&gt;&quot;#name&quot;).val(&quot;&quot;&lt;span&gt;);
                }
            },&lt;/span&gt;&quot;xml&quot;&lt;span&gt;);
        });
      });
  &lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 21 Jul 2018 15:07:00 +0000</pubDate>
<dc:creator>架构师小跟班</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xyhero/p/9348469.html</dc:identifier>
</item>
<item>
<title>多进程（multiprocessing module） - Hme</title>
<link>http://www.cnblogs.com/horror/p/9348285.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/horror/p/9348285.html</guid>
<description>&lt;h2&gt;1.1 多进程的概念&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;由于GIL的存在，python中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。Python提供了非常好用的多进程包multiprocessing，只需要定义一个函数，Python会完成其他所有事情。借助这个包，可以轻松完成从单进程到&lt;strong&gt;并发执行&lt;/strong&gt;的转换。multiprocessing支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　multiprocessing包是Python中的多进程管理包。与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。该进程可以运行在Python程序内部编写的函数。该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。此外multiprocessing包中也有Lock/Event/Semaphore/Condition类 (这些对象可以像多线程那样，通过参数传递给各个进程)，用以同步进程，其用法与threading包中的同名类一致。所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但在使用这些共享API的时候，我们要注意以下几点:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　a、在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。对于多线程来说，由于只有一个进程，所以不存在此必要性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　b、Windows系统下，需要注意的是要想启动一个子进程，必须加上 if __name__ == &quot;__main__&quot;，进程相关的要写在这句下面。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.2 创建进程的两种方式&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;直接创建：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_b60b9dde-fa55-44aa-a60f-0e348cb76619&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b60b9dde-fa55-44aa-a60f-0e348cb76619&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b60b9dde-fa55-44aa-a60f-0e348cb76619&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(name):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, name,time.ctime())
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     p_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         p = Process(target=f, args=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alvin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        p_list.append(p)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        p.start()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p_list:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        p.join()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo1&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;类式调用：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_869b5133-b71a-4272-bd5c-dca3e244f9d3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_869b5133-b71a-4272-bd5c-dca3e244f9d3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_869b5133-b71a-4272-bd5c-dca3e244f9d3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyProcess(Process):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         super(MyProcess, self).&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;self.name = name&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, self.name,time.ctime())
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     p_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         p =&lt;span&gt; MyProcess()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        p.start()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        p_list.append(p)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p_list:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        p.join()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo2&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;2.1 构造方法&lt;/h2&gt;
&lt;p&gt;　&lt;span&gt;　 Process([group [, target [, name [, args [, kwargs]]]]])&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　group: 线程组，目前还没有实现，库引用中提示必须是None； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　target: 要执行的方法； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　name: 进程名； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　args/kwargs: 要传入方法的参数。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.2 实例方法&lt;/h2&gt;
&lt;p&gt;　&lt;span&gt;　 is_alive()：返回进程是否在运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　start()：进程准备就绪，等待CPU调度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　terminate()：不管任务是否完成，立即停止工作进程&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.3 属性&lt;/h2&gt;
&lt;p&gt;　  　&lt;span&gt;authkey&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　daemon：和线程的setDeamon功能一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　exitcode(进程在运行时为None、如果为–N，表示被信号N结束）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　name：进程名字。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　pid：进程号。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_f2b42030-67af-43df-a2f5-f1f36eb49d6b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f2b42030-67af-43df-a2f5-f1f36eb49d6b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f2b42030-67af-43df-a2f5-f1f36eb49d6b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;  multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; foo(i):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt; (p.is_alive(),i,p.pid)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     p_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         p = Process(target=foo, args=&lt;span&gt;(i,))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;p.daemon=True&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        p_list.append(p)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p_list:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        p.start()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; for p in p_list:&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     p.join()&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;main process end&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;不同进程间内存是不共享的，要想实现两个进程间的数据交换，可以用以下方法：&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3.1 Queues 使用方法跟threading里的queue类似 --&amp;gt; 将q作为参数传递给子进程。&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_f6f3ef4a-ee2c-4152-95a5-edf2bbb0f788&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f6f3ef4a-ee2c-4152-95a5-edf2bbb0f788&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f6f3ef4a-ee2c-4152-95a5-edf2bbb0f788&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Queue
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(q,n):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     q.put([42, n, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     q =&lt;span&gt; Queue()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     p_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         p = Process(target=f, args=&lt;span&gt;(q,i))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        p_list.append(p)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        p.start()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p_list:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             i.join()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo1&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.2 Pipes --&amp;gt; 通过管道Pipe实现。&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_0bc8617b-7193-4ea0-9ff1-c45d6b143069&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0bc8617b-7193-4ea0-9ff1-c45d6b143069&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0bc8617b-7193-4ea0-9ff1-c45d6b143069&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Pipe
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(conn):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     conn.send([42, None, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    conn.close()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     parent_conn, child_conn =&lt;span&gt; Pipe()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     p = Process(target=f, args=&lt;span&gt;(child_conn,))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    p.start()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(parent_conn.recv())   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; prints &quot;[42, None, 'hello']&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     p.join()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo2&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.3 数据共享（Manager）&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Manager（）返回的管理器对象控制一个服务器进程，该进程保存Python对象并允许其他进程使用代理操作它们。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b9adb0d2-1559-4dbe-97b0-cfd18838942a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b9adb0d2-1559-4dbe-97b0-cfd18838942a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b9adb0d2-1559-4dbe-97b0-cfd18838942a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Manager
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(d, l,n):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     d[n] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     d[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 2
&lt;span&gt; 6&lt;/span&gt;     d[0.25] =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    l.append(n)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    with Manager() as manager:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         d =&lt;span&gt; manager.dict()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         l = manager.list(range(5&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         p_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             p = Process(target=f, args=&lt;span&gt;(d, l,i))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            p.start()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            p_list.append(p)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; res &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p_list:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            res.join()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(d)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(l)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Demo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.4 进程同步&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Without using the lock output from the different processes is liable to get all mixed up.　　如果不使用来自不同进程的锁定输出，则可能会混淆不清。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Lock
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(l, i):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    l.acquire()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, i)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;finally&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        l.release()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     lock =&lt;span&gt; Lock()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; num &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         Process(target=f, args=(lock, num)).start()
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.5 进程池&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程池中有两个方法：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;apply&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;apply_async&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;  multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process,Pool
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; Foo(i):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; i+100
&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; Bar(arg):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--&amp;gt;exec done:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,arg)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt; pool = Pool(5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     pool.apply_async(func=Foo, args=(i,),callback=&lt;span&gt;Bar)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pool.apply(func=Foo, args=(i,))&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;  
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;pool.close()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; pool.join()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;协程，又称微线程，纤程。英文名Coroutine。一句话说明什么是线程：&lt;strong&gt;协程是一种用户态的轻量级线程&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;协程能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处逻辑流的位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;协程的好处：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;无需线程上下文切换的开销&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;无需原子操作锁定及同步的开销&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&quot;原子操作(atomic operation)是不需要synchronized&quot;，所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。原子操作可以是一个步骤，也可以是多个操作步骤，但是其顺序是不可以被打乱，或者切割掉只执行部分。视作整体是原子性的核心。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;方便切换控制流，简化编程模型&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;高并发+高扩展性+低成本：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;无法利用多核资源：&lt;strong&gt;协程的本质是个单线程&lt;/strong&gt;,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;4.1 使用yield实现协程操作&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt; 1 import&lt;span&gt; time&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;em id=&quot;__mceDel&quot;&gt; 2 import&lt;span&gt; queue&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; consumer(name):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;starting eating baozi...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         new_baozi = &lt;span&gt;yield&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[%s] is eating baozi %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (name,new_baozi))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;time.sleep(1)&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;  
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; producer():
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt;     r = con.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     r = con2.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     n =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; n &amp;lt; 5&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         n +=1
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        con.send(n)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        con2.send(n)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\033[32;1m[producer]\033[0m is making baozi %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;n )
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;  
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     con = consumer(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)　　　　# 创建生成器对象
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     con2 = consumer(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)　　　 # 创建生成器对象
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     p = producer()　　　　　　　　# 执行producer函数&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;协程标准定义，即符合什么条件就能称之为协程：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;必须在只有一个单线程里实现并发&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;修改共享数据不需加锁&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;用户程序里自己保存多个控制流的上下文栈&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;一个协程遇到IO操作自动切换到其它协程&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;基于上面这4点定义，我们刚才用yield实现的程并不能算是合格的线程，因为它有一点功能没实现。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4.2 Greenlet&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;greenlet是一个用C实现的协程模块，相比与python自带的yield，它可以使你在任意函数之间随意切换，而不需把这个函数先声明为generator&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; greenlet &lt;span&gt;import&lt;/span&gt;&lt;span&gt; greenlet
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test1():
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(12&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    gr2.switch()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(34&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    gr2.switch()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test2():
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(56&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    gr1.switch()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(78&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  
&lt;span&gt;17&lt;/span&gt; gr1 =&lt;span&gt; greenlet(test1)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; gr2 =&lt;span&gt; greenlet(test2)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; gr1.switch()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;感觉确实用着比generator还简单了，但好像还没有解决一个问题，就是遇到IO操作，自动切换，并不对。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4.3 Gevent &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是&lt;strong&gt;Greenlet&lt;/strong&gt;, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; gevent
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func1():
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\033[31;1m李闯在跟海涛搞...\033[0m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     gevent.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\033[31;1m李闯又回去跟继续跟海涛搞...\033[0m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func2():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\033[32;1m李闯切换到了跟海龙搞...\033[0m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     gevent.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\033[32;1m李闯搞完了海涛，回来继续跟海龙搞...\033[0m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;gevent.joinall([
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    gevent.spawn(func1),
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    gevent.spawn(func2),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;gevent.spawn(func3),&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; ])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李闯在跟海涛搞...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;李闯切换到了跟海龙搞...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;李闯搞完了海涛，回来继续跟海龙搞...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;李闯又回去跟继续跟海涛搞...&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;5.1 &lt;strong&gt;同步与异步的性能区别&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; gevent
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; task(pid):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    Some non-deterministic task
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     gevent.sleep(0.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Task %s done&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; pid)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; synchronous():
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1,10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        task(i)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; asynchronous():
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     threads = [gevent.spawn(task, i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    gevent.joinall(threads)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Synchronous:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;synchronous()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Asynchronous:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; asynchronous()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面程序的重要部分是将task函数封装到Greenlet内部线程的&lt;code&gt;gevent.spawn&lt;/code&gt;。 初始化的greenlet列表存放在数组&lt;code&gt;threads&lt;/code&gt;中，此数组被传给&lt;code&gt;gevent.joinall&lt;/code&gt; 函数，后者阻塞当前流程，并执行所有给定的greenlet。执行流程只会在 所有greenlet执行完后才会继续向下走。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;5.2 &lt;strong&gt;遇到IO阻塞时会自动切换任务（gevent 库中的 monkey 方法）--&amp;gt; 补丁&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　&lt;span&gt;　-------&amp;gt;能够最大程度监听IO阻塞，提高效率。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; gevent &lt;span&gt;import&lt;/span&gt;&lt;span&gt; monkey
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;monkey.patch_all()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; gevent
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;  urllib.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; urlopen
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(url):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET: %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; url)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     resp =&lt;span&gt; urlopen(url)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     data =&lt;span&gt; resp.read()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%d bytes received from %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (len(data), url))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;gevent.joinall([
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         gevent.spawn(f, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.python.org/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         gevent.spawn(f, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.yahoo.com/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         gevent.spawn(f, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://github.com/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; ])
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 21 Jul 2018 14:13:00 +0000</pubDate>
<dc:creator>Hme</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/horror/p/9348285.html</dc:identifier>
</item>
<item>
<title>golang - gob与rpc - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/9348267.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/9348267.html</guid>
<description>&lt;p&gt;　　今天和大家聊聊golang中怎么使用rpc，rpc数据传输会涉及到gob编码，所以先讲讲gob，别担心，就算你完全没有接触过gob与rpc，只要知道rpc的中文是远程过程调用，剩下的我都能给你讲明白（带你入门不包你精通）！&lt;/p&gt;

&lt;p&gt;　　gob全称为：Go binary&lt;/p&gt;
&lt;p&gt;　　Golang自带的一个数据结构序列化编码/解码工具，也就是说gob可以讲go中的一个数据结构序列化成某种东西，还能反序列化！序列化成啥我们后面来看，不管是变成一个字符串，变成二进制流，变成啥先不管，反正作用就是序列化。&lt;/p&gt;
&lt;p&gt;　　Gob使用时我们需要关注Encoder和Decoder对象，顾名思义，一个是编码的时候用的，一个是解码的时候用的，我们看一下怎么获取这两个对象先：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaKNpZ2OF7t7XK7RjEwUeaRjG5TAYP0766JeoiaXXwFrBffMukiaMEfNwuRCblWSiaTG87Z2tEtW2jpg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.3472041612483745&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;769&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaKNpZ2OF7t7XK7RjEwUeaR53TmcgWic8Xebg3yJLtET2uBn9HDkpyhWz7FjYuiaPlR9kvicbFTXo57Q/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.43159203980099503&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　所以很明确，需要调用这两个函数来获取Encoder和Decoder对象。注意这里的参数是io.Writer和io.Reader接口类型，我们在上一讲介绍过这两个接口，所以这里需要的参数分别是实现了io.Writer和io.Reader接口类型的对象即可。&lt;/p&gt;
&lt;p&gt;　　Encoder和Decoder分别有一个主要的方法是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaKNpZ2OF7t7XK7RjEwUeaR8Lvs5sjBOc40B3iaYrNu9ElR7HQxqaibYic425UnLILp5eQiciaKibeCTQAA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.13597430406852248&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaKNpZ2OF7t7XK7RjEwUeaRVlgYk3vJtZ37Q7x71zWEdp3emPca5UjTpueicIxR2Qo49lqM2fub8dQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.3190376569037657&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;956&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看到这里我们已经可以得到如下结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　Gob 使用 io.Writer 接口，通过 NewEncoder() 函数创建 Encoder 对象通过调用 Encode()方法实现编码操作；使用 io.Reader 接口，通过 NewDecoder() 函数创建 Decoder 对象并调用 Decode()方法完成解码操作！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　接下来我们试着用一下这个Encoder和Decoder，就轻轻松松入门gob了，来看第一个例子&lt;/p&gt;
&lt;p&gt;　　例1：数据结构与bytes.Buffer之间的转换（编码成字节切片）&lt;/p&gt;
&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;20&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;go language-go hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;encoding/gob&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; P &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    X, Y, Z &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;    Name    &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Q &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    X, Y *&lt;span class=&quot;hljs-keyword&quot;&gt;int32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    Name &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;    data := P{&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CloudGeek&quot;&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    buf := encode(data)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q *Q&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;    q = decode(buf)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;    fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%q: {%d,%d}\n&quot;&lt;/span&gt;, q.Name, *q.X, *q.Y)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;bytes&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; buf bytes.Buffer&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;    enc := gob.NewEncoder(&amp;amp;buf)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;    enc.Encode(data)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;buf&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;Q&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;    d := data.(io.Reader)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;    dec := gob.NewDecoder(d)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q Q&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;    dec.Decode(&amp;amp;q)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;q&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;55&lt;/span&gt;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　例2：数据结构到文件的序列化和反序列化&lt;/p&gt;
&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;go language-go hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;encoding/gob&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Address &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    City    &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    Country &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; filePath &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    filePath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;./address.gob&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;    encode()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;    pa := decode()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;    fmt.Println(*pa) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    pa := &amp;amp;Address{&lt;span class=&quot;hljs-string&quot;&gt;&quot;Chengdu&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;China&quot;&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    file, _ := os.OpenFile(filePath, os.O_CREATE|os.O_WRONLY, &lt;span class=&quot;hljs-number&quot;&gt;0666&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;    enc := gob.NewEncoder(file)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;    enc.Encode(pa)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;Address&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;    file, _ := os.Open(filePath)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pa Address&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;    dec := gob.NewDecoder(file)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;    dec.Decode(&amp;amp;pa)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;pa&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面2个例子都不难，我去掉了错误处理之类的代码，尽量注释了每块代码，耐心看完这2个例子应该就能体会gob的encode和decode精髓了。&lt;/p&gt;
&lt;p&gt;理解gob是什么的基础上，如果你需要使用gob开发，建议详细看一下官方文档，了解一下更多的细节：https://golang.org/pkg/encoding/gob/&lt;/p&gt;


&lt;p&gt;　　如果你之前没有做过基于rpc通信的开发工作，直接去网上查rpc相关的知识点的时候很可能会一脸蒙圈，rest api咋就那么好理解，一个http请求过去就行了，rpc咋个回事，看不懂呀。。。&lt;/p&gt;
&lt;p&gt;　　所以我不会和多数教程一样为了追求详细或者展示自己技术多牛而去写很长的例子，扯一堆专业的概念，我们先最快的方式体验一下rpc调用的感觉！&lt;/p&gt;
&lt;p&gt;　　rpc服务端&lt;/p&gt;
&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;go language-go hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/rpc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Args &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    A, B &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Arith &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(t *Arith)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Multiply&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(args *Args, reply *&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    *reply = args.A * args.B&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;    arith := &lt;span class=&quot;hljs-built_in&quot;&gt;new&lt;/span&gt;(Arith)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    rpc.Register(arith)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    rpc.HandleHTTP()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;    l, _ := net.Listen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;:1234&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;    http.Serve(l, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　rpc客户端&lt;/p&gt;
&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;go language-go hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/rpc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Args &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    A, B &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    client, _ := rpc.DialHTTP(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1:1234&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    args := &amp;amp;Args{&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reply &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    client.Call(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Arith.Multiply&quot;&lt;/span&gt;, args, &amp;amp;reply)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;    fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Arith: %d*%d=%d\n&quot;&lt;/span&gt;, args.A, args.B, reply)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面2段程序很简短，可能你现在还不能理解其中的细节，但也请耐心看完，这个时候你应该能够心里有个rpc调用的概念了，客户端直接调用了服务器端的一个函数传递过去参数列表和接收返回值的对象，获得调用结果。&lt;/p&gt;


&lt;p&gt;　　下面我们再来看一些rpc相关的细节&lt;/p&gt;
&lt;p&gt;　　首先能够被rpc调用的方法应该看起来像这样：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;func (t *T) MethodName(argType T1, replyType *T2) error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　大概解释一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;函数必须是可导出的(首字母大写)&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li class=&quot;_mce_tagged_br&quot;&gt;必须有两个导出类型的参数，第一个参数用来接收参数，第二个参数是返回给客户端的结果参数，第二个参数必须是指针类型的&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li class=&quot;_mce_tagged_br&quot;&gt;函数还要有一个返回值error&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li class=&quot;_mce_tagged_br&quot;&gt;T1、T2能够被encoding/gob编码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　看到这里你应该对于rpc的作用有了一定的认识，go中rpc包的用法简单来看就是准备一个类型，绑定一堆符合规范的方法，然后注册给rpc服务，监听客户端连接，客户端通过rpc包提供的Call方法可以调用到server注册好的方法。更多细节可以看一下官方文档：https://golang.org/pkg/net/rpc/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AicibUllQlLBhswTCFkibyAypNSFPngT4GjYsiclgvW6fHuqvtcgGZFwhSx3mA12pcsPmEgBKl8cO9MnQuCAkl39qA/640?wx_fmt=gif&quot; alt=&quot;&quot; data-ratio=&quot;0.7326565143824028&quot; data-type=&quot;gif&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Jul 2018 14:09:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/9348267.html</dc:identifier>
</item>
</channel>
</rss>