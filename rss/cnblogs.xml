<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>初识 vue —— 最简单的前后端交互示例 - 长河渐落晓星沉</title>
<link>http://www.cnblogs.com/chjlxxc/p/frontend001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chjlxxc/p/frontend001.html</guid>
<description>&lt;h2 id=&quot;一学习-vue-面临的问题&quot;&gt;一、学习 vue 面临的问题&lt;/h2&gt;
&lt;p&gt;最近想学一门前端技术防身，看到博客园中写 vue 的多，那就 vue 吧。都说 vue 的官方教程写得好，所以我就从官方教程开始学习。官方教程说“Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。”但是这个概念是个什么鬼？还是让人一头雾水嘛。而且我一开始也没有搞清楚 vue 的定位，只知道它是一个前端库，但是确实不知道它的优势是什么，还以为它是一个学会就能一劳永逸的万能的框架呢。官方教程一开始就讲怎么绑定页面上的元素和 JavaScript 中的数据，而且是双向绑定，自动更新，功能确实很强大。但是迟迟没有讲怎么和服务器端进行交互，怎么获取服务器端的数据。（后来经过反复阅读教程，才发现其实它一开始就说了“Vue 的核心库只关注视图层”，是我自己忽略了。）&lt;/p&gt;
&lt;h2 id=&quot;二最简单的前后段交互示例&quot;&gt;二、最简单的前后段交互示例&lt;/h2&gt;
&lt;p&gt;吹再多的口水，也不如一个能运行的示例来得实在。这个例子也是从 vue 的官方教程中抄来的。首先，先建立一个 &lt;code&gt;index.html&lt;/code&gt;文件，编辑其内容，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My first Vue app&amp;lt;/title&amp;gt;
  &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;watch-example&quot;&amp;gt;
    &amp;lt;p&amp;gt;
      Ask a yes/no question:
      &amp;lt;input v-model=&quot;question&quot;&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;{{ answer }}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    var watchExampleVM = new Vue({
      el: '#watch-example',
      data: {
        question: '',
        answer: 'I cannot give you an answer until you ask a question!'
      },
      watch: {
        // 如果 question  发生改变，这个函数就会运行
        question: function (newQuestion, oldQuestion) {
          this.answer = 'Waiting for you to stop typing...'
          this.debouncedGetAnswer()
        }
      },
      created: function () {
        // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。
        // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
        // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于
        // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，
        // 请参考：https://lodash.com/docs#debounce
        this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
      },
      methods: {
        getAnswer: function () {
          if (this.question.indexOf('?') === -1) {
            this.answer = 'Questions usually contain a question mark. ;-)'
            return
          }
          this.answer = 'Thinking...'
          var vm = this
          axios.get('https://yesno.wtf/api')
            .then(function (response) {
              vm.answer = _.capitalize(response.data.answer)
            })
            .catch(function (error) {
              vm.answer = 'Error! Could not reach the API. ' + error
            })
        }
      }
    })
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后使用 chromium 浏览器打开这个文件。下面是运行效果：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1503584/201810/1503584-20181009220216570-717266427.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里访问的后端是 &lt;a href=&quot;https://yesno.wtf/api&quot; class=&quot;uri&quot;&gt;https://yesno.wtf/api&lt;/a&gt;，它传回的数据时 json 格式的，如果直接访问它，得到的结果如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1503584/201810/1503584-20181009221218679-392476366.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://yesno.wtf/&quot; class=&quot;uri&quot;&gt;https://yesno.wtf&lt;/a&gt; 这是一个神奇的网站，当你对某件事拿不定注意，需要别人推你一把时，可以访问它，它会随机返回一个 gif 动画，点头表示 yes，摇头表示 no，帮你做这个艰难的决定。直接访问 &lt;a href=&quot;https://yesno.wtf/&quot; class=&quot;uri&quot;&gt;https://yesno.wtf&lt;/a&gt;，注意在地址栏中不带 api 字样，可以得到这样的结果：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1503584/201810/1503584-20181009221344972-2099439720.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;三从这个示例我学到了什么&quot;&gt;三、从这个示例，我学到了什么&lt;/h2&gt;
&lt;p&gt;首先，解答了我前面的疑惑，那就是怎么和后端交互。在这个示例中，它使用 axios 库从 &lt;a href=&quot;https://yesno.wtf/api&quot; class=&quot;uri&quot;&gt;https://yesno.wtf/api&lt;/a&gt; 获取数据。同时，在这个例子中，它还使用 lodash 限制刷新频率。&lt;/p&gt;
&lt;p&gt;其次，这个示例只有一个 html 文件，在这个文件中，使用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;引入需要的 vue.js、 axios.js 和 lodash.js，不需要下载安装一些有的没的东西，不需要学习在服务器端运行 JavaScript 的任何知识。本来嘛，我是准备学 .netcore 的，再让我学个 nodejs 我也觉得不科学嘛。&lt;/p&gt;
&lt;p&gt;最后，我知道了学习 vue 不是单纯学习 vue，还要学习 axios.js 和服务器交互，真的要写个产品，还少不了漂亮的 UI 界面啥的，所以还要学习和 vue 配套的 UI 框架，看来学习的路还很长。&lt;/p&gt;
&lt;p&gt;共勉！&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 22:23:00 +0000</pubDate>
<dc:creator>长河渐落晓星沉</dc:creator>
<og:description>刚接触 vue 的一点困惑，一个例子就搞定了。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chjlxxc/p/frontend001.html</dc:identifier>
</item>
<item>
<title>一起学Hive——总结各种Join连接的用法 - summer哥</title>
<link>http://www.cnblogs.com/airnew/p/9770345.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/airnew/p/9770345.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Wed, 10 Oct 2018 22:09:00 +0000</pubDate>
<dc:creator>summer哥</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=https%3A%2F%2Fwww.cnblogs.com%2Fairnew%2Fp%2F9770345.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>Webpack编译结果浅析 - -渔人码头-</title>
<link>http://www.cnblogs.com/imwtr/p/9770135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imwtr/p/9770135.html</guid>
<description>&lt;p&gt;如今&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot;&gt;Webpack&lt;/a&gt;已经是一个不可或缺的前端构建工具，借助这个构建工具，我们可以使用比较新的技术（浏览器不能直接支持）来开发。&lt;/p&gt;
&lt;p&gt;你是否好奇你写的代码经过Webpack构建之后会生成什么东西？是否有时调试遇到莫名其妙的问题？&lt;/p&gt;
&lt;p&gt;本文不讲&lt;a href=&quot;https://www.cnblogs.com/imwtr/p/9189670.html&quot; target=&quot;_blank&quot;&gt;如何进行配置&lt;/a&gt;，只是基于几个基础的例子，简要分析一下 webpack@4.20.2 构建后的代码结构，当然了，并不全面，时间问题能力问题还不能理解到位。&lt;/p&gt;
&lt;p&gt;代码比较长，生成的代码也比较晦涩比较绕，也可能条理不顺，客官坐好咧~&lt;/p&gt;



&lt;h2&gt;&lt;span&gt;一、Webpack的运行机制&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Webpack的运行过程实际上可以归纳为这个步骤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读取配置参数 -&amp;gt; 相关事件绑定（插件参与） -&amp;gt;  识别各入口Entry模块 -&amp;gt; 编译文件（loader参与）-&amp;gt; 生成文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先读取我们的配置文件如 webpack.config.js，然后事件流就参与进来绑定相关的事件，Webpack中的事件使用 &lt;a href=&quot;https://github.com/webpack/tapable&quot; target=&quot;_blank&quot;&gt;Tapable&lt;/a&gt; 来管理，在这一阶段，除了绑定webpack内置的一大堆事件之外，还支持自定义的一些事件处理。&lt;/p&gt;
&lt;p&gt;配置中的 plugins部分，实际上也可以看作是一些自定义的事件处理，因为插件将在定义的”相关时刻“插入到编译过程中处理资源，这里的”相关时刻“指的就是 &lt;strong&gt;订阅-发布 模式&lt;/strong&gt;中的发布环节&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010210419272-650614288.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;webpack支持多个入口模块，所以还需要进行各入口模块的分析（这里的入口模块只能为JS模块），比如以下两个入口模块&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010210956402-565253466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析完入口模块，接下来分析该模块的依赖，并使用相关loader进行编译（如果需要loader的话），真正的编译环节是在这里。&lt;/p&gt;
&lt;p&gt;期间会使用AST抽象语法树来分析语法，直到编译完成，输出到相应的文件中&lt;/p&gt;
&lt;p&gt;可以来看看这篇文章 &lt;a href=&quot;https://juejin.im/post/5badd0c5e51d450e4437f07a&quot; target=&quot;_blank&quot;&gt;Webpack运行机制&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、Webpack编译结果&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;由最简单的例子开始&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.1 无依赖的单个模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
console.log('main');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./webpack.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
module.exports =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; entry: './main',&lt;/span&gt;
&lt;span&gt;    entry: {
        main: &lt;/span&gt;'./main'&lt;span&gt;
    },

    mode: &lt;/span&gt;'none'&lt;span&gt;,

    output: {
        path: path.resolve(__dirname, &lt;/span&gt;'dist'&lt;span&gt;),
        filename: &lt;/span&gt;'[name].js'&lt;span&gt;
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，在webpack4中默认的mode对 development和production进行了一些特殊配置，为了简化，这里就设置成none&lt;/p&gt;
&lt;p&gt;编译一个文件，将在dist目录中生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010215744569-961191180.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;(modules) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpackBootstrap&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The module cache&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedModules =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedModules[moduleId]) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             i: moduleId,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             l: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             exports: {}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         };
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         module.l = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.exports;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.m =&lt;span&gt; modules;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.c =&lt;span&gt; installedModules;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define getter function for harmony exports&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.d = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports, name, getter) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;__webpack_require__.o(exports, name)) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, name, { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, get: getter });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define __esModule on exports&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.r = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; Symbol !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; Symbol.toStringTag) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module'&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(exports, '__esModule', { value: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a fake namespace object&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 1: value is a module id, require it&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 2: merge all properties of value into the ns&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 4: return value when already ns object&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 8|1: behave like require&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.t = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, mode) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 1) value =&lt;span&gt; __webpack_require__(value);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 8) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((mode &amp;amp; 4) &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object' &amp;amp;&amp;amp; value &amp;amp;&amp;amp; value.__esModule) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ns = Object.create(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         __webpack_require__.r(ns);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(ns, 'default', { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, value: value });
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 2 &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value != 'string') &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; value) __webpack_require__.d(ns, key, &lt;span&gt;function&lt;/span&gt;(key) { &lt;span&gt;return&lt;/span&gt; value[key]; }.bind(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, key));
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ns;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getDefaultExport function for compatibility with non-harmony modules&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.n = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module) {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; getter = module &amp;amp;&amp;amp; module.__esModule ?
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getDefault() { &lt;span&gt;return&lt;/span&gt; module['default'&lt;span&gt;]; } :
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getModuleExports() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module; };
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         __webpack_require__.d(getter, 'a'&lt;span&gt;, getter);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getter;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.o = &lt;span&gt;function&lt;/span&gt;(object, property) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call(object, property); };
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Load entry module and return exports&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; __webpack_require__(__webpack_require__.s = 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;89&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; 
&lt;span&gt;91&lt;/span&gt; 
&lt;span&gt;92&lt;/span&gt; console.log('main'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; 
&lt;span&gt;94&lt;/span&gt; 
&lt;span&gt;95&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到首先是一个匿名函数，在87行时自执行传入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {


console.log(&lt;/span&gt;'main'&lt;span&gt;);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是modules，表示有一个模块需要加载&lt;/p&gt;
&lt;p&gt;第3行使用 installedModules 来缓存已经加载的模块&lt;/p&gt;
&lt;p&gt;webpack由最初支持 commonjs模块规范，到后来要支持es6的模块等，为了兼容不同的模块机制，定义了一个 __webpack_require__ 函数作为webpack内部的require&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果模块已经加载则直接使用&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedModules[moduleId]) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             i: moduleId, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模块ID&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             l: &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模块是否已加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             exports: {} &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模块的导出项&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         module.l = &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标记已经加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; module.exports; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回模块的导出项目&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，这个调用非常重要&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结合匿名函数传入的参数来看，modules[moduleId] 其实就是这个&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {


console.log(&lt;/span&gt;'main'&lt;span&gt;);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个参数 module.exports 实际上就是上面模块的导出项，是为了保证this能正确地指向module，第二第三个参数按着顺序来，第四个参数一般用于依赖&lt;/p&gt;
&lt;p&gt;因为这里 main.js没有依赖其他模块，所以没有传进来&lt;/p&gt;
&lt;p&gt;最后 return module.exports; 实际上就是返回了模块的导出项，在上面的84行中，入口模块被引入 。&lt;strong&gt;从而自动地加载第一个模块并执行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt; __webpack_require__(__webpack_require__.s = 0); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_require__.s为入口文件，此处引用模块ID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外再看其它代码，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.m = modules; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将模块存起来&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.c = installedModules; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将已经加载的模块存起来&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置的 publicPath&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里没什么可说的，这里的publicPath对应于 output中的配置，如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;output: {
        publicPath: &lt;/span&gt;'./dist/'&lt;span&gt;,
        path: path.resolve(__dirname, &lt;/span&gt;'dist'&lt;span&gt;),
        filename: &lt;/span&gt;'[name].js'&lt;span&gt;
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define getter function for harmony exports&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.d = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports, name, getter) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;__webpack_require__.o(exports, name)) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, name, { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, get: getter });
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define __esModule on exports&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.r = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; Symbol !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; Symbol.toStringTag) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module'&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(exports, '__esModule', { value: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.o = &lt;span&gt;function&lt;/span&gt;(object, property) { &lt;span&gt;return&lt;/span&gt; Object.prototype.hasOwnProperty.call(object, property); };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 __webpack_require__.o 这里只是hasOwnProperty的包装&lt;/p&gt;
&lt;p&gt;__webpack_require__.d 这里是对exports定义一个属性（当前模块未用到，暂且如此，理解不到位）&lt;/p&gt;
&lt;p&gt;__webpack_require__.r 这里是对es6模块中的export的支持（当前模块未用到，暂且如此，理解不到位）&lt;/p&gt;
&lt;p&gt;还有这个，这个就更难理解了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a fake namespace object&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 1: value is a module id, require it&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 2: merge all properties of value into the ns&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 4: return value when already ns object&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 8|1: behave like require&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.t = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, mode) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 1) value =&lt;span&gt; __webpack_require__(value);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 8) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((mode &amp;amp; 4) &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object' &amp;amp;&amp;amp; value &amp;amp;&amp;amp; value.__esModule) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ns = Object.create(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         __webpack_require__.r(ns);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(ns, 'default', { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, value: value });
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 2 &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value != 'string') &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; value) __webpack_require__.d(ns, key, &lt;span&gt;function&lt;/span&gt;(key) { &lt;span&gt;return&lt;/span&gt; value[key]; }.bind(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, key));
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ns;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getDefaultExport function for compatibility with non-harmony modules&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.n = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; getter = module &amp;amp;&amp;amp; module.__esModule ?
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getDefault() { &lt;span&gt;return&lt;/span&gt; module['default'&lt;span&gt;]; } :
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getModuleExports() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module; };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         __webpack_require__.d(getter, 'a'&lt;span&gt;, getter);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getter;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;__webpack_require__.t 暂时不说明了，还看不懂怎么调用的..&lt;/p&gt;
&lt;p&gt;__webpack_require__.n 这个主要也是为 es6模块服务的，也没能理解好，知道的可以在评论区留言哈~&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2. 有依赖的单个模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;先使用最基础的commonjs模块规范  require, exports ，module.exports 有助于理解上面那个模块的导出项目&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let number = require('./number'&lt;span&gt;);

console.log(&lt;/span&gt;'main', number);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;./number.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let n = 10&lt;span&gt;;

exports.n &lt;/span&gt;= n;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后，生成的文件变化的只是匿名函数传入的部分&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010220002395-1638952123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 省略&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports, __webpack_require__) {


let number &lt;/span&gt;= __webpack_require__(1&lt;span&gt;);

console.log(&lt;/span&gt;'main'&lt;span&gt;, number);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {


let n &lt;/span&gt;= 10&lt;span&gt;;

exports.n &lt;/span&gt;=&lt;span&gt; n;


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到前面的数字即是模块的ID,也可图中的一致&lt;/p&gt;
&lt;p&gt;这里__webpack_require__参数被传进来，main.js中引入number这个模块 __webpack_require__(1);&lt;/p&gt;
&lt;p&gt;number模块中 exports.n = n，注意这里的 exports即是调用时的第二个参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以此时 n属性被存入module的export导出项中，从而__webpack_require__(1) 就能获取这个导出项&lt;/p&gt;

&lt;p&gt;换种方式，使用es6的模块导出&lt;/p&gt;
&lt;p&gt;更改 ./number.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let n = 10&lt;span&gt;;

export {
    n
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后 ./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports, __webpack_require__) {


let number &lt;/span&gt;= __webpack_require__(1&lt;span&gt;);

console.log(&lt;/span&gt;'main'&lt;span&gt;, number);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;n&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n; });

let n &lt;/span&gt;= 10&lt;span&gt;;




&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到模块1变了，为了兼容 export ，使用 __webpack_require__.r 定义了它为es6模块，再使用__webpack_require__.d 将 n保存到模块的导出项中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010221155444-1057823132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;__webpack_require__.d 函数中的 getter即为 这里的 function() { return n; }，通过设置为对象的get属性，可以获取到 n这个返回值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; o =&lt;span&gt; {};

Object.defineProperty(o, &lt;/span&gt;'abc'&lt;span&gt;, {
    get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 123&lt;span&gt;;
    }
});

console.log(o.abc); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以将 let n = 10 定义在后面也是没问题的，因为getter是在number模块被调用返回之后才使用的&lt;/p&gt;

&lt;p&gt;接着，我们把引入依赖文件改为import&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import {n} from './number'&lt;span&gt;;

console.log(&lt;/span&gt;'main', n);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后 ./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);



console.log(&lt;/span&gt;'main', _number__WEBPACK_IMPORTED_MODULE_0__[&quot;n&quot;&lt;span&gt;]);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;n&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n; });

let n &lt;/span&gt;= 10&lt;span&gt;;




&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，这时main模块用到了es6的模块引入方式，所以 __webpack_require__.r(__webpack_exports__);&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个 __webpack_require__(1) 实际上就是 number模块的模块导出项，自然就能取到属性 n 了&lt;/p&gt;

&lt;p&gt;接下来，着眼那个 default字眼，继续更换模块的导入导出方式&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import n from './number'&lt;span&gt;;

console.log(&lt;/span&gt;'main', n);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./number.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let n = 10&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; n;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);



console.log(&lt;/span&gt;'main', _number__WEBPACK_IMPORTED_MODULE_0__[&quot;default&quot;&lt;span&gt;]);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);

let n &lt;/span&gt;= 10&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony default export &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_exports__[&quot;default&quot;] =&lt;span&gt; (n);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，变化只是属性变成了default&lt;/p&gt;

&lt;p&gt;再来一种 es6的方式&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import n from './number'&lt;span&gt;;

console.log(&lt;/span&gt;'main', n);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;./number.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import {str as n} from './str'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; n;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;./str.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;var&lt;/span&gt; str = 10;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010223957284-1144492620.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);



console.log(&lt;/span&gt;'main', _number__WEBPACK_IMPORTED_MODULE_0__[&quot;default&quot;&lt;span&gt;]);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _str__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2&lt;span&gt;);



&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony default export &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_exports__[&quot;default&quot;] = (_str__WEBPACK_IMPORTED_MODULE_0__[&quot;str&quot;&lt;span&gt;]);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;str&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str; });
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = 10&lt;span&gt;;


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 {str as n} 也是没什么影响的，通过上面的例子应该基本能理解模块的依赖了&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3. 多个入口模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;如果不提取多模块之间的公共部分，多个入口模块和单个的不同之处就是多了一个文件而已，它们是独立的。&lt;/p&gt;
&lt;p&gt;所以这里就不多说了&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4. 异步加载模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;webpack支持使用require.ensure来异步加载模块&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
console.log('main'&lt;span&gt;);

setTimeout(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    require([], (require) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        let number &lt;/span&gt;= require('./number'&lt;span&gt;);

        console.log(number.n);
    });
}, &lt;/span&gt;1000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;./number.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let n = 10&lt;span&gt;;

export {
    n
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webpack.config.js中要加上 publicPath，防止异步模块加载路径出错&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;output: {
        publicPath: &lt;/span&gt;'./dist/'&lt;span&gt;,
        path: path.resolve(__dirname, &lt;/span&gt;'dist'&lt;span&gt;),
        filename: &lt;/span&gt;'[name].js'&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后，生成的 1.js即为异步的模块number&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010225432861-1609038998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;./dist/1.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[1&lt;span&gt;],[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;n&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n; });


let n &lt;/span&gt;= 10&lt;span&gt;;




&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
]]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，这里首先获取 (window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || [])， 再调用 push 传入模块及其依赖&lt;/p&gt;
&lt;p&gt;jsonp类似我们跨域中的动态插入脚本，这里也是一样，动态插入一个script标签，把src设置好就加载这个异步模块了&lt;/p&gt;
&lt;p&gt;push参数中第一个为当前异步模块&lt;/p&gt;

&lt;p&gt;看看 ./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;(modules) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpackBootstrap&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; install a JSONP callback for chunk loading&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; webpackJsonpCallback(data) {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; chunkIds = data[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moreModules = data[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add &quot;moreModules&quot; to the modules object,&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; then flag all &quot;chunkIds&quot; as loaded and fire callback&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moduleId, chunkId, i = 0, resolves =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(;i &amp;lt; chunkIds.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             chunkId =&lt;span&gt; chunkIds[i];
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunks[chunkId]) {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 resolves.push(installedChunks[chunkId][0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             installedChunks[chunkId] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(moduleId &lt;span&gt;in&lt;/span&gt;&lt;span&gt; moreModules) {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 modules[moduleId] =&lt;span&gt; moreModules[moduleId];
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(parentJsonpFunction) parentJsonpFunction(data);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(resolves.length) {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             resolves.shift()();
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The module cache&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedModules =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; object to store loaded and loading chunks&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined = chunk not loaded, null = chunk preloaded/prefetched&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Promise = chunk loading, 0 = chunk loaded&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedChunks =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         0: 0
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; script path function&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; jsonpScriptSrc(chunkId) {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; __webpack_require__.p + &quot;&quot; + ({}[chunkId]||chunkId) + &quot;.js&quot;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedModules[moduleId]) {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             i: moduleId,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             l: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             exports: {}
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         };
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         module.l = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.exports;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This file contains only the entry chunk.&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The chunk loading function for additional chunks&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.e = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; requireEnsure(chunkId) {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; promises =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSONP chunk loading for javascript&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; installedChunkData =&lt;span&gt; installedChunks[chunkId];
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(installedChunkData !== 0) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 means &quot;already installed&quot;.&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a Promise means &quot;currently loading&quot;.&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunkData) {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 promises.push(installedChunkData[2&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; setup Promise in chunk cache&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; promise = &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(resolve, reject) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     installedChunkData = installedChunks[chunkId] =&lt;span&gt; [resolve, reject];
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 });
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 promises.push(installedChunkData[2] =&lt;span&gt; promise);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; start chunk loading&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; head = document.getElementsByTagName('head')[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; script = document.createElement('script'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; onScriptComplete;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.charset = 'utf-8'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.timeout = 120&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (__webpack_require__.nc) {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     script.setAttribute(&quot;nonce&quot;&lt;span&gt;, __webpack_require__.nc);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.src =&lt;span&gt; jsonpScriptSrc(chunkId);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 onScriptComplete = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid mem leaks in IE.&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     script.onerror = script.onload = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                     clearTimeout(timeout);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; chunk =&lt;span&gt; installedChunks[chunkId];
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(chunk !== 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(chunk) {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; errorType = event &amp;amp;&amp;amp; (event.type === 'load' ? 'missing'&lt;span&gt; : event.type);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; realSrc = event &amp;amp;&amp;amp; event.target &amp;amp;&amp;amp;&lt;span&gt; event.target.src;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; error = &lt;span&gt;new&lt;/span&gt; Error('Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             error.type =&lt;span&gt; errorType;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             error.request =&lt;span&gt; realSrc;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             chunk[1&lt;span&gt;](error);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                         }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                         installedChunks[chunkId] =&lt;span&gt; undefined;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                     }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 };
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; timeout = setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     onScriptComplete({ type: 'timeout'&lt;span&gt;, target: script });
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 }, 120000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.onerror = script.onload =&lt;span&gt; onScriptComplete;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 head.appendChild(script);
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.all(promises);
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.m =&lt;span&gt; modules;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.c =&lt;span&gt; installedModules;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define getter function for harmony exports&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.d = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports, name, getter) {
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;__webpack_require__.o(exports, name)) {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, name, { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, get: getter });
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define __esModule on exports&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.r = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports) {
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; Symbol !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; Symbol.toStringTag) {
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module'&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(exports, '__esModule', { value: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a fake namespace object&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 1: value is a module id, require it&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 2: merge all properties of value into the ns&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 4: return value when already ns object&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 8|1: behave like require&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.t = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, mode) {
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 1) value =&lt;span&gt; __webpack_require__(value);
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 8) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((mode &amp;amp; 4) &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object' &amp;amp;&amp;amp; value &amp;amp;&amp;amp; value.__esModule) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ns = Object.create(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         __webpack_require__.r(ns);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(ns, 'default', { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, value: value });
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 2 &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value != 'string') &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; value) __webpack_require__.d(ns, key, &lt;span&gt;function&lt;/span&gt;(key) { &lt;span&gt;return&lt;/span&gt; value[key]; }.bind(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, key));
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ns;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getDefaultExport function for compatibility with non-harmony modules&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.n = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module) {
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; getter = module &amp;amp;&amp;amp; module.__esModule ?
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getDefault() { &lt;span&gt;return&lt;/span&gt; module['default'&lt;span&gt;]; } :
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getModuleExports() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module; };
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         __webpack_require__.d(getter, 'a'&lt;span&gt;, getter);
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getter;
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.o = &lt;span&gt;function&lt;/span&gt;(object, property) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call(object, property); };
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;./dist/&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; on error function for async loading&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.oe = &lt;span&gt;function&lt;/span&gt;(err) { console.error(err); &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err; };
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; jsonpArray = window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] ||&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oldJsonpFunction =&lt;span&gt; jsonpArray.push.bind(jsonpArray);
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray.push =&lt;span&gt; webpackJsonpCallback;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray =&lt;span&gt; jsonpArray.slice();
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; jsonpArray.length; i++&lt;span&gt;) webpackJsonpCallback(jsonpArray[i]);
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; parentJsonpFunction =&lt;span&gt; oldJsonpFunction;
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Load entry module and return exports&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; __webpack_require__(__webpack_require__.s = 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports, __webpack_require__) {
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; 
&lt;span&gt;204&lt;/span&gt; 
&lt;span&gt;205&lt;/span&gt; 
&lt;span&gt;206&lt;/span&gt; console.log('main'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt; setTimeout(() =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;     __webpack_require__.e(&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; AMD require &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 1).then(&lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;var&lt;/span&gt; __WEBPACK_AMD_REQUIRE_ARRAY__ = []; ((require) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;         let number = __webpack_require__(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; 
&lt;span&gt;212&lt;/span&gt; &lt;span&gt;        console.log(number.n);
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;     }).apply(&lt;span&gt;null&lt;/span&gt;, __WEBPACK_AMD_REQUIRE_ARRAY__);}).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(__webpack_require__.oe);
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; }, 1000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; 
&lt;span&gt;216&lt;/span&gt; 
&lt;span&gt;217&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这下蹦出了许多代码，从这里开始会比较绕，需要有耐心！&lt;/p&gt;
&lt;p&gt;按照代码执行顺序来分析，思路就清晰了&lt;/p&gt;
&lt;p&gt;38行中定义了installedChunks这个新变量，它指代依赖模块（不仅包括此处的异步模块，也包括后续会说到的公共模块，runtime模块等），而上面installedModules指的是所有的模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; object to store loaded and loading chunks&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined = chunk not loaded, null = chunk preloaded/prefetched&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Promise = chunk loading, 0 = chunk loaded&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedChunks =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         0: 0
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面的0表示模块ID,在这里指的就是 ./main.js这个入口模块了，它初始的状态就被webpack设置成已加载&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; script path function&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; jsonpScriptSrc(chunkId) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; __webpack_require__.p + &quot;&quot; + ({}[chunkId]||chunkId) + &quot;.js&quot;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就是异步模块的路径了，({}[chunkId]||chunkId) 这个只是为了防止出错做的处理&lt;/p&gt;
&lt;p&gt;__webpack_require__ 函数的内容没变&lt;/p&gt;
&lt;p&gt;75行多了一个 __webpack_require__.e 用来加载异步模块，这个稍后再讲&lt;/p&gt;
&lt;p&gt;继续到182行开始&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;./dist/&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; on error function for async loading&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.oe = &lt;span&gt;function&lt;/span&gt;(err) { console.error(err); &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err; };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; jsonpArray = window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] ||&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oldJsonpFunction =&lt;span&gt; jsonpArray.push.bind(jsonpArray);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray.push =&lt;span&gt; webpackJsonpCallback;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray =&lt;span&gt; jsonpArray.slice();
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; jsonpArray.length; i++&lt;span&gt;) webpackJsonpCallback(jsonpArray[i]);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; parentJsonpFunction =&lt;span&gt; oldJsonpFunction;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Load entry module and return exports&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; __webpack_require__(__webpack_require__.s = 0);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的publicPath就是我们刚刚设置的&lt;/p&gt;
&lt;p&gt;__webpack_require__.oe 只是用于处理错误&lt;/p&gt;
&lt;p&gt;初始会判断是否有window[&quot;webpackJsonp&quot;]存在，有的话就缓存起来，并将this的指向设置好 jsonpArray.push.bind(jsonpArray)&lt;/p&gt;
&lt;p&gt;要理清楚 jsonpArray.push ，它不是简单的数组，所以有些绕，它指向了第3行webpackJsonpCallback这个函数&lt;/p&gt;
&lt;p&gt;如果初始已经有待加载的依赖模块，则在for循环中直接加载。此处初始阶段是没有值的，所以可以直接略过&lt;/p&gt;
&lt;p&gt;要看明白webpackJsonpCallback这个函数，得从调用它的地方开始，在216行中开始调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
setTimeout(() =&amp;gt;&lt;span&gt; {
    __webpack_require__.e(&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; AMD require &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 1).then(&lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;var&lt;/span&gt; __WEBPACK_AMD_REQUIRE_ARRAY__ = []; ((require) =&amp;gt;&lt;span&gt; {
        let number &lt;/span&gt;= __webpack_require__(1&lt;span&gt;);

        console.log(number.n);
    }).apply(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, __WEBPACK_AMD_REQUIRE_ARRAY__);}).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(__webpack_require__.oe);
}, &lt;/span&gt;1000);
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This file contains only the entry chunk.&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The chunk loading function for additional chunks&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.e = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; requireEnsure(chunkId) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; promises = []; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; promise队列，支持模块加载完成后多个异步回调&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSONP chunk loading for javascript&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; installedChunkData =&lt;span&gt; installedChunks[chunkId];
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 未加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(installedChunkData !== 0) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 means &quot;already installed&quot;.&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a Promise means &quot;currently loading&quot;.&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载中，则支持下一个回调加入&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunkData) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 promises.push(installedChunkData[2&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化一个promise来加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; setup Promise in chunk cache&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; promise = &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(resolve, reject) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将resolve和reject存入模块中，方便其他地方调用&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     installedChunkData = installedChunks[chunkId] =&lt;span&gt; [resolve, reject];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 });
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; installedChunkData的第三项即为一个promise对象，并存入promises队列中&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 promises.push(installedChunkData[2] =&lt;span&gt; promise);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; start chunk loading&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; head = document.getElementsByTagName('head')[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; script = document.createElement('script'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; onScriptComplete;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.charset = 'utf-8'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.timeout = 120&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (__webpack_require__.nc) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     script.setAttribute(&quot;nonce&quot;&lt;span&gt;, __webpack_require__.nc);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 }
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置异步模块的路径&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.src =&lt;span&gt; jsonpScriptSrc(chunkId);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 onScriptComplete = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid mem leaks in IE.&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     script.onerror = script.onload = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                     clearTimeout(timeout);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; chunk =&lt;span&gt; installedChunks[chunkId];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(chunk !== 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(chunk) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; errorType = event &amp;amp;&amp;amp; (event.type === 'load' ? 'missing'&lt;span&gt; : event.type);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; realSrc = event &amp;amp;&amp;amp; event.target &amp;amp;&amp;amp;&lt;span&gt; event.target.src;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; error = &lt;span&gt;new&lt;/span&gt; Error('Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             error.type =&lt;span&gt; errorType;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             error.request =&lt;span&gt; realSrc;
                                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用reject&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                             chunk[1&lt;span&gt;](error);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                         installedChunks[chunkId] =&lt;span&gt; undefined;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                     }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 };
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; timeout = setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                     onScriptComplete({ type: 'timeout'&lt;span&gt;, target: script });
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 }, 120000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 script.onerror = script.onload =&lt;span&gt; onScriptComplete;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在head标签中插入脚本&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;                 head.appendChild(script);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.all(promises);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     };
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一秒钟后加载这个异步模块 ./1.js ，该模块加载完成后就开始执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[1&lt;span&gt;],[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;n&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n; });


let n &lt;/span&gt;= 10&lt;span&gt;;




&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
]]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时的 window[&quot;webpackJsonp&quot;] 已经被这句代码影响，jsonpArray.push = webpackJsonpCallback; 所以push实际上调用的是 webpackJsonpCallback函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; install a JSONP callback for chunk loading&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; webpackJsonpCallback(data) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; chunkIds = data[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依赖的模块ID，此时是[1]&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moreModules = data[1]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依赖的模块内容&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add &quot;moreModules&quot; to the modules object,&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; then flag all &quot;chunkIds&quot; as loaded and fire callback&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moduleId, chunkId, i = 0, resolves =&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历依赖的模块进行加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(;i &amp;lt; chunkIds.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             chunkId =&lt;span&gt; chunkIds[i];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunks[chunkId]) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 resolves.push(installedChunks[chunkId][0]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存储将要执行的resolve&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             installedChunks[chunkId] = 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标记已加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(moduleId &lt;span&gt;in&lt;/span&gt;&lt;span&gt; moreModules) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 modules[moduleId] = moreModules[moduleId]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更新模块组&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(parentJsonpFunction) parentJsonpFunction(data);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(resolves.length) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             resolves.shift()(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行所有resolve&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果多依赖一个呢&lt;/p&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
console.log('main'&lt;span&gt;);

setTimeout(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    require([&lt;/span&gt;'./str'], (require) =&amp;gt;&lt;span&gt; {
        let number &lt;/span&gt;= require('./number'&lt;span&gt;);

        console.log(number.n);
    });
}, &lt;/span&gt;1000);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时只有 ./1.js改变了，差不不大，一样的道理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[1&lt;span&gt;],[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;str&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str; });
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = 10&lt;span&gt;;


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony export (binding) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; __webpack_require__.d(__webpack_exports__, &quot;n&quot;, &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; n; });


let n &lt;/span&gt;= 10&lt;span&gt;;




&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
]]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;5. 提取公共模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;./webpack.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;entry: {
        main: &lt;/span&gt;'./main'&lt;span&gt;,
        test: &lt;/span&gt;'./test'&lt;span&gt;
    },

optimization: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取公共部分为common.js，使劲地提取吧.. &lt;/span&gt;
&lt;span&gt;        splitChunks: {
            name: &lt;/span&gt;'common'&lt;span&gt;,
            chunks: &lt;/span&gt;'all'&lt;span&gt;,
            minSize: &lt;/span&gt;1&lt;span&gt;
        }
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import './chunk'&lt;span&gt;;

import {n} from &lt;/span&gt;'./number'&lt;span&gt;;

console.log(&lt;/span&gt;'main', n);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;./test.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import './chunk'&lt;span&gt;;

console.log(&lt;/span&gt;'test');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181010234430362-156323952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;./dist/common.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[1&lt;span&gt;],[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {

console.log(&lt;/span&gt;'chunk'&lt;span&gt;);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
]]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 chunk模块（ID为1）被共用，被提取出来&lt;/p&gt;
&lt;p&gt;再看看 ./dist/test.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;(modules) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpackBootstrap&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; install a JSONP callback for chunk loading&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; webpackJsonpCallback(data) {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; chunkIds = data[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moreModules = data[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; executeModules = data[2&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add &quot;moreModules&quot; to the modules object,&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; then flag all &quot;chunkIds&quot; as loaded and fire callback&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moduleId, chunkId, i = 0, resolves =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(;i &amp;lt; chunkIds.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             chunkId =&lt;span&gt; chunkIds[i];
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunks[chunkId]) {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 resolves.push(installedChunks[chunkId][0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             installedChunks[chunkId] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(moduleId &lt;span&gt;in&lt;/span&gt;&lt;span&gt; moreModules) {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 modules[moduleId] =&lt;span&gt; moreModules[moduleId];
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(parentJsonpFunction) parentJsonpFunction(data);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(resolves.length) {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             resolves.shift()();
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry modules from loaded chunk to deferred list&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         deferredModules.push.apply(deferredModules, executeModules ||&lt;span&gt; []);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when all chunks ready&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; checkDeferredModules();
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkDeferredModules() {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; deferredModules.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; deferredModule =&lt;span&gt; deferredModules[i];
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; fulfilled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = 1; j &amp;lt; deferredModule.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; depId =&lt;span&gt; deferredModule[j];
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(installedChunks[depId] !== 0) fulfilled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(fulfilled) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 deferredModules.splice(i--, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 result = __webpack_require__(__webpack_require__.s = deferredModule[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The module cache&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedModules =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; object to store loaded and loading chunks&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined = chunk not loaded, null = chunk preloaded/prefetched&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Promise = chunk loading, 0 = chunk loaded&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedChunks =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         2: 0
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; deferredModules =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedModules[moduleId]) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             i: moduleId,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             l: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             exports: {}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         };
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         module.l = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.exports;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.m =&lt;span&gt; modules;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.c =&lt;span&gt; installedModules;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define getter function for harmony exports&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.d = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports, name, getter) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;__webpack_require__.o(exports, name)) {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, name, { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, get: getter });
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define __esModule on exports&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.r = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports) {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; Symbol !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; Symbol.toStringTag) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module'&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(exports, '__esModule', { value: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a fake namespace object&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 1: value is a module id, require it&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 2: merge all properties of value into the ns&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 4: return value when already ns object&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 8|1: behave like require&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.t = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, mode) {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 1) value =&lt;span&gt; __webpack_require__(value);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 8) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((mode &amp;amp; 4) &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object' &amp;amp;&amp;amp; value &amp;amp;&amp;amp; value.__esModule) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ns = Object.create(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         __webpack_require__.r(ns);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(ns, 'default', { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, value: value });
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 2 &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value != 'string') &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; value) __webpack_require__.d(ns, key, &lt;span&gt;function&lt;/span&gt;(key) { &lt;span&gt;return&lt;/span&gt; value[key]; }.bind(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, key));
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ns;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getDefaultExport function for compatibility with non-harmony modules&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.n = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module) {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; getter = module &amp;amp;&amp;amp; module.__esModule ?
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getDefault() { &lt;span&gt;return&lt;/span&gt; module['default'&lt;span&gt;]; } :
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getModuleExports() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module; };
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         __webpack_require__.d(getter, 'a'&lt;span&gt;, getter);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getter;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.o = &lt;span&gt;function&lt;/span&gt;(object, property) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call(object, property); };
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;./dist/&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; jsonpArray = window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] ||&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oldJsonpFunction =&lt;span&gt; jsonpArray.push.bind(jsonpArray);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray.push =&lt;span&gt; webpackJsonpCallback;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray =&lt;span&gt; jsonpArray.slice();
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; jsonpArray.length; i++&lt;span&gt;) webpackJsonpCallback(jsonpArray[i]);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; parentJsonpFunction =&lt;span&gt; oldJsonpFunction;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry module to deferred list&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     deferredModules.push([3,1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when ready&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; checkDeferredModules();
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ({
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 3&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; 
&lt;span&gt;160&lt;/span&gt; &quot;use strict&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _chunk__WEBPACK_IMPORTED_MODULE_0___default = &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;#__PURE__&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;__webpack_require__.n(_chunk__WEBPACK_IMPORTED_MODULE_0__);
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; 
&lt;span&gt;165&lt;/span&gt; 
&lt;span&gt;166&lt;/span&gt; 
&lt;span&gt;167&lt;/span&gt; console.log('test'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; 
&lt;span&gt;169&lt;/span&gt; 
&lt;span&gt;170&lt;/span&gt; 
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; 
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先看150行，初始不再马上加载入口模块，而是先将入口模块和其依赖的公共模块保存起来，再进行处理加载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry module to deferred list&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     deferredModules.push([3,1]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里的3为test模块，1为chunk公共模块&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when ready&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; checkDeferredModules();
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkDeferredModules() {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; result;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; deferredModules的结构长这样 [[3,1]]，对每一项进行处理&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; deferredModules.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; deferredModule =&lt;span&gt; deferredModules[i];
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; fulfilled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从第二项开始，为依赖的模块&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = 1; j &amp;lt; deferredModule.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; depId =&lt;span&gt; deferredModule[j];
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依赖的模块未加载&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(installedChunks[depId] !== 0) fulfilled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已经加载，则清除，并开始加载入口模块，deferredModule的第一项即为这里的test入口模块&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(fulfilled) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 deferredModules.splice(i--, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 result = __webpack_require__(__webpack_require__.s = deferredModule[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意到这里也有 webpackJsonpCallback 函数，不过它的参数数组中有三项，第三项 var executeModules = data[2]; 暂时还没用到，先略过&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry modules from loaded chunk to deferred list&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         deferredModules.push.apply(deferredModules, executeModules ||&lt;span&gt; []);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when all chunks ready&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; checkDeferredModules();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这个，主要是为了兼容公共模块和入口模块的兼容顺序，什么意思呢？&lt;/p&gt;
&lt;p&gt;假如没有这段代码，那么这样是可行的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./dist/common.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./dist/main.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但common放后面就不行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./dist/main.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;./dist/common.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;common放在后面会导致初始调用checkDeferredModules时 公共模块的fulfilled为false,此时将无法加载入口模块&lt;/p&gt;
&lt;p&gt;所以需要在webpackJsonpCallback中再判断处理一次&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;6. 提取runtime运行时模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;上面代码中，./dist/main.js 和 ./dist/test.js 都有很多运行时的代码，我们可以将其提取出来，一并放到 common.js中&lt;/p&gt;
&lt;p&gt;./webpack.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;optimization: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取runtime代码到common.js文件中&lt;/span&gt;
&lt;span&gt;        runtimeChunk: {
            name: &lt;/span&gt;'common'&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取公共部分为common.js，使劲地提取吧..&lt;/span&gt;
&lt;span&gt;        splitChunks: {
            name: &lt;/span&gt;'common'&lt;span&gt;,
            chunks: &lt;/span&gt;'all'&lt;span&gt;,
            minSize: &lt;/span&gt;1&lt;span&gt;
        }
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译后，看看 ./dist/test.js 干净了许多&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[2&lt;span&gt;],{

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 3&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _chunk__WEBPACK_IMPORTED_MODULE_0___default = &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;#__PURE__&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;__webpack_require__.n(_chunk__WEBPACK_IMPORTED_MODULE_0__);



console.log(&lt;/span&gt;'test'&lt;span&gt;);



&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })

},[[&lt;/span&gt;3,1]]]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过，注意到这里push的参数多了第三项 [[3,1]]，根据上面的分析，这个1应该就是公共模块了&lt;/p&gt;
&lt;p&gt;来看看 ./dist/common.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;(modules) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpackBootstrap&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; install a JSONP callback for chunk loading&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; webpackJsonpCallback(data) {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; chunkIds = data[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moreModules = data[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; executeModules = data[2&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add &quot;moreModules&quot; to the modules object,&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; then flag all &quot;chunkIds&quot; as loaded and fire callback&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; moduleId, chunkId, i = 0, resolves =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(;i &amp;lt; chunkIds.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             chunkId =&lt;span&gt; chunkIds[i];
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedChunks[chunkId]) {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 resolves.push(installedChunks[chunkId][0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             installedChunks[chunkId] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(moduleId &lt;span&gt;in&lt;/span&gt;&lt;span&gt; moreModules) {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 modules[moduleId] =&lt;span&gt; moreModules[moduleId];
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(parentJsonpFunction) parentJsonpFunction(data);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(resolves.length) {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             resolves.shift()();
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry modules from loaded chunk to deferred list&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         deferredModules.push.apply(deferredModules, executeModules ||&lt;span&gt; []);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when all chunks ready&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; checkDeferredModules();
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkDeferredModules() {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; deferredModules.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; deferredModule =&lt;span&gt; deferredModules[i];
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; fulfilled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = 1; j &amp;lt; deferredModule.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; depId =&lt;span&gt; deferredModule[j];
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(installedChunks[depId] !== 0) fulfilled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(fulfilled) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 deferredModules.splice(i--, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                 result = __webpack_require__(__webpack_require__.s = deferredModule[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The module cache&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedModules =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; object to store loaded and loading chunks&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined = chunk not loaded, null = chunk preloaded/prefetched&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Promise = chunk loading, 0 = chunk loaded&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedChunks =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         1: 0
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; deferredModules =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(installedModules[moduleId]) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             i: moduleId,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             l: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;             exports: {}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         };
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         module.l = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.exports;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.m =&lt;span&gt; modules;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.c =&lt;span&gt; installedModules;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define getter function for harmony exports&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.d = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports, name, getter) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;__webpack_require__.o(exports, name)) {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, name, { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, get: getter });
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; define __esModule on exports&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.r = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(exports) {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; Symbol !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; Symbol.toStringTag) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module'&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(exports, '__esModule', { value: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a fake namespace object&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 1: value is a module id, require it&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 2: merge all properties of value into the ns&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 4: return value when already ns object&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mode &amp;amp; 8|1: behave like require&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.t = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, mode) {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 1) value =&lt;span&gt; __webpack_require__(value);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 8) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((mode &amp;amp; 4) &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object' &amp;amp;&amp;amp; value &amp;amp;&amp;amp; value.__esModule) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ns = Object.create(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;         __webpack_require__.r(ns);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         Object.defineProperty(ns, 'default', { enumerable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, value: value });
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(mode &amp;amp; 2 &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value != 'string') &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; value) __webpack_require__.d(ns, key, &lt;span&gt;function&lt;/span&gt;(key) { &lt;span&gt;return&lt;/span&gt; value[key]; }.bind(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, key));
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ns;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; getDefaultExport function for compatibility with non-harmony modules&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.n = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module) {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; getter = module &amp;amp;&amp;amp; module.__esModule ?
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getDefault() { &lt;span&gt;return&lt;/span&gt; module['default'&lt;span&gt;]; } :
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;             &lt;span&gt;function&lt;/span&gt; getModuleExports() { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module; };
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         __webpack_require__.d(getter, 'a'&lt;span&gt;, getter);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getter;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     };
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.o = &lt;span&gt;function&lt;/span&gt;(object, property) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.prototype.hasOwnProperty.call(object, property); };
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     __webpack_require__.p = &quot;./dist/&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; jsonpArray = window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] ||&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oldJsonpFunction =&lt;span&gt; jsonpArray.push.bind(jsonpArray);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray.push =&lt;span&gt; webpackJsonpCallback;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     jsonpArray =&lt;span&gt; jsonpArray.slice();
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; jsonpArray.length; i++&lt;span&gt;) webpackJsonpCallback(jsonpArray[i]);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; parentJsonpFunction =&lt;span&gt; oldJsonpFunction;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules from other chunks&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     checkDeferredModules();
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; ([
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt; console.log('chunk'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; 
&lt;span&gt;160&lt;/span&gt; 
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;58行直接将 chunk模块设置为已加载了，因为它现在处于common模块中，初始就是已加载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; installedChunks =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         1: 0
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而150行上面不再出现 deferredModules的赋值，它由 ./dist/test.js 的第三个参数传入来更新&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; executeModules = data[2&lt;span&gt;];
.
.
.
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add entry modules from loaded chunk to deferred list&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         deferredModules.push.apply(deferredModules, executeModules ||&lt;span&gt; []);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; run deferred modules when all chunks ready&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; checkDeferredModules();
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;7. 开发一个loader，加载模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;loader会参与到模块的编译中，并输出到生成的文件里。这里用个例子来说明一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.docschina.org/contribute/writing-a-loader/&quot; target=&quot;_blank&quot;&gt;开发一个loader&lt;/a&gt;，原理很简单，其实就是传入参数，就可以自行处理了&lt;/p&gt;
&lt;p&gt;./loader.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
const loaderUtils = require('loader-utils'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 简单的loader
 * @param  {[type]} content [description]
 * @return {[type]}         [description]
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
module.exports &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(content) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取loader的参数&lt;/span&gt;
    let options = loaderUtils.getOptions(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);

    console.log(&lt;/span&gt;'loader-options'&lt;span&gt;, options);
    console.log(content.split(&lt;/span&gt;/\r\n|\r|\n/&lt;span&gt;g));

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 做一些处理，并返回即可&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.callback(&lt;span&gt;null&lt;/span&gt;, JSON.stringify(content.split(/\r\n|\r|\n/&lt;span&gt;g)));
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./webpack.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
module: {
        rules: [{
            test: &lt;/span&gt;/\.css$/&lt;span&gt;,
            loaders: [{
                loader: path.resolve(&lt;/span&gt;'./loader.js'&lt;span&gt;),
                options: {
                    css: &lt;/span&gt;123&lt;span&gt;
                }
            }]
        }]
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./test.css&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.home &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 100px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 200px&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import './test.css'&lt;span&gt;;

console.log(&lt;/span&gt;'main');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181011003650029-907566521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;./dist/main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[1&lt;span&gt;],[
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, __webpack_exports__, __webpack_require__) {

&lt;/span&gt;&quot;use strict&quot;&lt;span&gt;;
__webpack_require__.r(__webpack_exports__);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _test_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; harmony import &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; _test_css__WEBPACK_IMPORTED_MODULE_0___default = &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;#__PURE__&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;__webpack_require__.n(_test_css__WEBPACK_IMPORTED_MODULE_0__);



console.log(&lt;/span&gt;'main'&lt;span&gt;);


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(module, exports) {

[&lt;/span&gt;&quot;&quot;,&quot;.home {&quot;,&quot;    width: 100px;&quot;,&quot;    height: 200px;&quot;,&quot;}&quot;,&quot;&quot;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; })
],[[&lt;/span&gt;0,0]]]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的模块0其实就是 ./main.js了，模块1是 test.css，可以看到 css经过loader解析之后，内容是会扔到生成的文件里面的&lt;/p&gt;
&lt;p&gt;[[0,0]] 是webpack初始化生成的，这里不必理会&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;8. 开发一个插件plugin，加载模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;使用一个插件，看看插件是怎么和编译过程结合起来的&lt;/p&gt;
&lt;p&gt;为了简便，这里就自行开发一个简单的插件&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.docschina.org/contribute/writing-a-plugin/&quot; target=&quot;_blank&quot;&gt;开发插件&lt;/a&gt;可以类似webpack那样，基于 tapable进行开发，使用 订阅-发布 模式&lt;/p&gt;
&lt;p&gt;先配置一些 ./webpack.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
const webpack = require('webpack'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);

const todayPlugin &lt;/span&gt;= require('./todayPlugin.js'&lt;span&gt;);

module.exports &lt;/span&gt;=&lt;span&gt; {
    
    ...

    plugins: [
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; todayPlugin({
            test: &lt;/span&gt;123&lt;span&gt;
        })
    ]
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;./todayPlugin.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用SyncHook&lt;/span&gt;
const {SyncHook} = require('tapable'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 自定义的插件
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
class todayPlugin {
    constructor(options) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取插件的参数&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.options =&lt;span&gt; options;

        console.log(&lt;/span&gt;'plugin-options', &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.options);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 提供webpack对插件进行调用
     * @param  {[type]} compiler [description]
     * @return {[type]}          [description]
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    apply(compiler) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化，创建一个hook&lt;/span&gt;
        compiler.hooks.todayHook = &lt;span&gt;new&lt;/span&gt; SyncHook(['day'&lt;span&gt;]);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 事件订阅，这里的day参数需要和实例化时传递的参数一致&lt;/span&gt;
        compiler.hooks.todayHook.tap('logToday', (day) =&amp;gt;&lt;span&gt; {
            console.log(&lt;/span&gt;'today'&lt;span&gt;, day);
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选择在webpack的compiler done触发时做处理&lt;/span&gt;
        compiler.hooks.done.tap('setToday', () =&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发我们的事件（即事件发布）&lt;/span&gt;
            compiler.hooks.todayHook.call(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date);
        });
    }
}

module.exports &lt;/span&gt;= todayPlugin;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181011004658103-1411789702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在生成的文件中，并没有看到踪迹&lt;/p&gt;
&lt;p&gt;当然了，也不能由此就得出结论插件不会影响到生成的文件，只是看起来如此&lt;/p&gt;
&lt;p&gt;编译结果就分析到这里了，说实话，非常乱 .......&lt;/p&gt;
&lt;p&gt;具体到底是由源码里面哪段代码控制的，就不得而知了，源码实在是庞大，目前定位到两个比较关键的文件，脑壳不疼的时候再看吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181011010343107-853281388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688270/201810/688270-20181011010319774-2068643780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 10 Oct 2018 17:05:00 +0000</pubDate>
<dc:creator>-渔人码头-</dc:creator>
<og:description>如今Webpack已经是一个不可或缺的前端构建工具，借助这个构建工具，我们可以使用比较新的技术（浏览器不能直接支持）来开发。 你是否好奇你写的代码经过Webpack构建之后会生成什么东西？是否有时调试</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imwtr/p/9770135.html</dc:identifier>
</item>
<item>
<title>彻底搞懂 SQLAlchemy中的 backref - 暮良文王</title>
<link>http://www.cnblogs.com/liangmingshen/p/9769975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liangmingshen/p/9769975.html</guid>
<description>&lt;p&gt;&lt;span&gt;教程源码截取：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id &lt;/span&gt;= Column(Integer, primary_key=&lt;span&gt;True)
    name &lt;/span&gt;=&lt;span&gt; Column(String)

    addresses &lt;/span&gt;= relationship(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, backref=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Address(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id &lt;/span&gt;= Column(Integer, primary_key=&lt;span&gt;True)
    email &lt;/span&gt;=&lt;span&gt; Column(String)
    user_id &lt;/span&gt;= Column(Integer, ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;简单来说, relationship函数是sqlalchemy对关系之间提供的一种便利的调用方式, backref参数则对关系提供反向引用的声明。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;假如没有relationship，我们只能像下面这样调用关系数据：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span&gt;＃&lt;span&gt;给定参数&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&lt;span&gt;&lt;span&gt;获取&lt;/span&gt;该&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&lt;span&gt;的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt;addresses&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt;&lt;span&gt; get_addresses_from_user&lt;/span&gt;(user_name):
    user &lt;/span&gt;= session.query(&lt;span&gt;User&lt;/span&gt;).filter_by(name=&lt;span&gt;&lt;span&gt;user_name&lt;/span&gt;).first()
    addresses &lt;/span&gt;= session.query(&lt;span&gt;Address&lt;/span&gt;).filter_by(user_id=&lt;span&gt;&lt;span&gt;user.id&lt;/span&gt;).all()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; addresses&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt; 如果在User中使用relationship定义addresses属性的话，&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;addresses = relationship(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt; &lt;span&gt;则我们可以直接在User对象中通过addresses属性获得指定用户的所有地址。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt;&lt;span&gt; get_addresses_from_user&lt;/span&gt;(user_name):
    user &lt;/span&gt;= session.query(User).filter_by(name=&lt;span&gt;user_name).first()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; user.addresses&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt; 注意，在上面的addresses属性中我们并没有定义backref属性,&lt;br/&gt;所以我们可以通过User对象获取所拥有的地址，但是不能通过Address对象获取到所属的用户.&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; u =&lt;span&gt; User()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; u.addresses
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a =&lt;span&gt; Address()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; a.user
Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;input&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
AttributeError: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; object has no attribute &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;err&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span&gt; 但是当我们有从Address对象获取所属用户的需求时，backref参数就派上用场了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;addresses = relationship(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, backref=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; a =&lt;span&gt; Address()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a.user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;大致原理应该就是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sqlalchemy在运行时&lt;span&gt;对Address对象&lt;/span&gt;动态的&lt;span&gt;设置&lt;/span&gt;了一个指向所属&lt;span&gt;User对象的属性&lt;/span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样就能在实际开发中使逻辑关系更加清晰，代码更加简洁了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一言以蔽之: &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;backref&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;用于&lt;span&gt;在关系另一端的类中&lt;/span&gt;快捷地&lt;span&gt;创建一个指向当前类对象的属性&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt; 补充：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;db.backref()&lt;/code&gt;是你需要对放置 &lt;code&gt;backref&lt;/code&gt;的那一边的参数，&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(在上例中为 &lt;code&gt;Address&lt;/code&gt;类的 &lt;code&gt;.user&lt;/code&gt;属性)&lt;strong&gt;指定参数时, 使用 &lt;code&gt;backref()&lt;/code&gt;函数代替字符串&lt;/strong&gt;, 常见的有 &lt;code&gt;lazy='dynamic'&lt;/code&gt;(禁止自动查询, 用于添加过滤器)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;code&gt;backref&lt;/code&gt;用于在关系另一端的类中快捷地创建一个指向当前类对象的属性, 而当需要对那个属性指定参数时使用 &lt;code&gt;db.backref()。&lt;/code&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Wed, 10 Oct 2018 15:45:00 +0000</pubDate>
<dc:creator>暮良文王</dc:creator>
<og:description>教程源码截取： 简单来说, relationship函数是sqlalchemy对关系之间提供的一种便利的调用方式, backref参数则对关系提供反向引用的声明。假如没有relationsh</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liangmingshen/p/9769975.html</dc:identifier>
</item>
<item>
<title>SpringBoot(十四)_springboot使用内置定时任务的使用 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9769886.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9769886.html</guid>
<description>&lt;h3 id=&quot;为什么使用定时&quot;&gt;为什么使用定时？&lt;/h3&gt;
&lt;p&gt;日常工作中，经常会用到定时任务，比如各种统计，并不要求实时性。此时可以通过提前设置定时任务先把数据跑出来，后续处理起来更方便. 本篇文章主要介绍 springboot内置定时任务。&lt;/p&gt;
&lt;h3 id=&quot;实战演示&quot;&gt;实战演示&lt;/h3&gt;
&lt;h4 id=&quot;pom文件&quot;&gt;1、pom文件&lt;/h4&gt;
&lt;p&gt;pom 包里面只需要引入 Spring Boot Starter 包即可，Spring Boot Starter 包中已经内置了定时的方法。我这里方便演示，增加了lombok&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.16.20&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;启动类开启定时&quot;&gt;2、启动类开启定时&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;@SpringBootApplication
@EnableScheduling
public class ScheduledApplication {

    public static void main(String[] args) {
        SpringApplication.run(ScheduledApplication.class, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;创建定时任务实现类&quot;&gt;3、创建定时任务实现类&lt;/h4&gt;
&lt;p&gt;这里并没有直接在类中写cron语句，而是写到了配置文件中。一般实际项目中这样写。&lt;/p&gt;
&lt;h5 id=&quot;scheduledtask-类&quot;&gt;3.1、ScheduledTask 类&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * @author: curry
 * @Date: 2018/10/10
 */
@Component
@Slf4j
public class ScheduledTask {
    @Scheduled(cron = &quot;${job.schedule}&quot;)
    private void process1() {
        log.info(&quot;start&quot;);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;application.properties&quot;&gt;3.2 application.properties&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;job.schedule = */5 * * * * ? &lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;执行结果&quot;&gt;4、执行结果&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;2018-10-10 22:48:55.001  [pool-1-thread-1] demo.ScheduledTask     : start
2018-10-10 22:49:00.001  [pool-1-thread-1] demo.ScheduledTask     : start
2018-10-10 22:49:05.001  [pool-1-thread-1] demo.ScheduledTask     : start
2018-10-10 22:49:10.001  [pool-1-thread-1] demo.ScheduledTask     : start
2018-10-10 22:49:15.001  [pool-1-thread-1] demo.ScheduledTask     : start&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;corn-语法说明&quot;&gt;corn 语法说明&lt;/h3&gt;
&lt;h4 id=&quot;cron-每位的含义&quot;&gt;cron 每位的含义&lt;/h4&gt;
&lt;p&gt;cron 一共有 7 位，最后一位是年，Spring Boot 定时方案中只需要设置 6 位即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- 第一位，表示秒，取值 0-59；
- 第二位，表示分，取值 0-59；
- 第三位，表示小时，取值 0-23；
- 第四位，日期天/日，取值 1-31；
- 第五位，日期月份，取值 1-12；
- 第六位，星期，取值 1-7，星期一、星期二…；
注：不是第1周、第2周的意思，另外：1表示星期天，2表示星期一。
- 第七位，年份，可以留空，取值 1970-2099。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;cron-符号含义&quot;&gt;cron 符号含义&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;（*）星号：可以理解为每的意思，每秒、每分、每天、每月、每年……。
（?）问号：问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天 12 点执行，所以第六位星期的位置是不需要关注的，就是不确定的值。同时，日期和星期是两个相互排斥的元素，通过问号来表明不指定值。
（-）减号：表达一个范围，如在小时字段中使用“10-12”，则表示从 10~12 点，即 10、11、12。
（,）逗号：表达一个列表值，如在星期字段中使用“1、2、4”，则表示星期一、星期二、星期四。
（/）斜杠：如 x/y，x 是开始值，y 是步长，比如在第一位（秒） 0/15 就是，从 0 秒开始，每 15 秒，最后就是 0、15、30、45、60，另 */y，等同于 0/y。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;举个栗子&quot;&gt;举个栗子&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;0 0 1 * * ?     每天 1 点执行。
0 5 1 * * ?     每天 1 点 5 分执行。
0-5 * * * * ?   每分钟的0/1/2/3/4/5 秒执行
0 5/10 1 * * ?  每天 1 点的 5 分、15 分、25 分、35 分、45 分、55 分这几个时间点执行。
0 5 1 ? * 1     每周星期天，1点5分 执行，注：1 表示星期天。  
0 10 3 ? * 1#3  每个月的第 三 个星期，星期天执行，# 号只能出现在星期的位置。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;fixedrate-说明&quot;&gt;fixedRate 说明&lt;/h3&gt;
&lt;p&gt;这个日常工作中很少用到，这里不做详细介绍&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Scheduled(fixedRate = 6000) ：上一次开始执行时间点之后 6 秒再执行。
@Scheduled(fixedDelay = 6000) ：上一次执行完毕时间点之后 6 秒再执行。
@Scheduled(initialDelay=1000, fixedRate=6000) ：第一次延迟 1 秒后执行，之后按 fixedRate 的规则每 6 秒执行一次。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;其实，使用内置的定时任务还是很方便的，但是，如果复杂的情况一般使用Quartz 。大家工作中一般都会见过这个东西。下篇文章一块学习一下这个东西。&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 15:12:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>为什么使用定时？ 日常工作中，经常会用到定时任务，比如各种统计，并不要求实时性。此时可以通过提前设置定时任务先把数据跑出来，后续处理起来更方便. 本篇文章主要介绍 springboot内置定时任务。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9769886.html</dc:identifier>
</item>
<item>
<title>深入研究.NET Core的本地化机制 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/9764243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/9764243.html</guid>
<description>&lt;p&gt;ASP.NET Core中提供了一些本地化服务和中间件，可将网站本地化为不同的语言文化。&lt;/p&gt;
&lt;p&gt;ASP.NET Core中我们可以使用&lt;strong&gt;Microsoft.AspNetCore.Localization&lt;/strong&gt;库来实现本地化。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在.NET Core 2.0以上版本, &lt;strong&gt;Microsoft.AspNetCore.Localization&lt;/strong&gt;已经包含在了&lt;strong&gt;Microsoft.AspNetCore.All&lt;/strong&gt;中，所以我们并不需要手动引入其他的类库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了测试ASP.NET Core的本地化，我们首先在Visual Studio 2017中创建一个MVC项目LocalizationSample。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224323685-2094522523.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ASP.NET Core中，如果希望启动本地化，首先需要在&lt;code&gt;Startup&lt;/code&gt;类的&lt;code&gt;ConfigureServices&lt;/code&gt;方法中使用&lt;code&gt;services.AddLocalization&lt;/code&gt;添加本地化服务。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddLocalization(o =&amp;gt;
    {
        o.ResourcesPath = &quot;Resources&quot;;
    });
    
    services.AddMvc();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这个方法中，我们指定了文件夹Resources作为存放翻译文件的目录。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注： 如果不指定存放翻译文件的目录, ASP.NET Core会默认从网站根目录下读取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我们需要在&lt;code&gt;Configure&lt;/code&gt;方法中添加本地化中间件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.UseStaticFiles();

    IList&amp;lt;CultureInfo&amp;gt; supportedCultures = new List&amp;lt;CultureInfo&amp;gt;
    {
        new CultureInfo(&quot;en-US&quot;),
        new CultureInfo(&quot;zh-CN&quot;),
    };
    app.UseRequestLocalization(new RequestLocalizationOptions
    {
        DefaultRequestCulture = new RequestCulture(&quot;en-US&quot;),
        SupportedCultures = supportedCultures,
        SupportedUICultures = supportedCultures
    });

    app.UseMvc(routes =&amp;gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;app.UseRequestLocalization&lt;/code&gt;必须放置&lt;code&gt;app.UseMvc&lt;/code&gt;之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultRequestCulture&lt;/code&gt;参数指定了默认的语言文化，即用户不指定任何文化时的默认语言文化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SupportedCultures&lt;/code&gt;和&lt;code&gt;SupportedUICultures&lt;/code&gt;是指定当前应用支持的所有语言文化&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注: &lt;code&gt;SupportedCultures&lt;/code&gt;指定的是数字和日期格式, &lt;code&gt;SupportedUICultures&lt;/code&gt;指定的翻译文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们尝试添加一个资源文件&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先我们创建一个Resources文件夹，这就是我们在前面&lt;code&gt;Startup&lt;/code&gt;类中配置的目录名。&lt;/li&gt;
&lt;li&gt;然后我们在Resource文件夹中添加一个资源文件，并命名为Controllers.HomeController.zh-CN.resx。&lt;/li&gt;
&lt;li&gt;在这个资源文件中，添加一个字段Hello, 并设置其值为“你好”。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224333898-126807198.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在我们打开默认生成的&lt;code&gt;HomeController&lt;/code&gt;, 清空里面所有的action, 并添加一个新的action, 代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class HomeController : Controller
{
    public HomeController()
    {
       
    }

    public IActionResult Hello()
    {
        return Content(&quot;Hello&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动项目之后访问/Home/Hello, 结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224340550-223008827.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们修改HomeController的代码, 来引入本地化字符串访问器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class HomeController : Controller
{
    private readonly IStringLocalizer&amp;lt;HomeController&amp;gt; _localizer;

    public HomeController(IStringLocalizer&amp;lt;HomeController&amp;gt; localizer)
    {
        _localizer = localizer;
    }

    public IActionResult Hello()
    {
        return Content(_localizer[&quot;Hello&quot;]);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码解释&quot;&gt;代码解释&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;IStringLocalizer&lt;/code&gt;是一个本地化字符串访问器的泛型接口，这里我们通过依赖注入的方式在&lt;code&gt;HomeController&lt;/code&gt;的构造函数中将其注入&lt;/li&gt;
&lt;li&gt;我们可以通过IStringLocalizer的属性访问器获取到对应字段在不同语言下的文本。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;最终效果&quot;&gt;最终效果&lt;/h2&gt;
&lt;p&gt;现在我们启动程序, 重新访问/Home/Hello, 结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224347658-1718278968.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你会发现结果没有变化，这是因为默认我们设置的语言文化是en-US, 但是我们之前没有添加en-US的资源文件，所以程序就直接将访问的字段名输出了。&lt;/p&gt;
&lt;p&gt;现在我们修改URL, 访问/Home/Hello?ui-culture=zh-CN, 结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224354626-1234754283.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们期望的“你好”被正确输出了，这说明ASP.NET Core默认支持在Url中以culture参数的形式设置当前网站使用的语言文化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么我们之前添加了一个名为Controllers.HomeController.zh-CN.resx的资源文件，本地化字符串访问器&lt;code&gt;IStringLocalizer&lt;/code&gt;就能定位到这个文件并读取其中的字段属性呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是由ASP.NET Core资源文件的命名约定决定的。&lt;/p&gt;
&lt;p&gt;ASP.NET Core资源文件的名称由2部分组成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;去掉程序集名称的完整类名&lt;/li&gt;
&lt;li&gt;语言文化名称&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以前面的例子为例：&lt;br/&gt;我们创建了一个本地化字符串访问器接口，它的泛型类型是&lt;code&gt;HomeController&lt;/code&gt;, 其完整类名是&lt;code&gt;LocalizationSample.Controllers.HomeController&lt;/code&gt;, 当前程序集的名称是&lt;code&gt;LocalizationSample&lt;/code&gt;, 所以去掉程序集名称之后，剩余部分是&lt;code&gt;Controllers.HomeController&lt;/code&gt;。当我们设置culture参数是zh-CN时, ASP.NET Core查找的资源文件名是Controllers.HomeController.zh-CN.resx, 这正是我们前面添加的中文语言文化资源文件名。&lt;/p&gt;
&lt;p&gt;如果你不喜欢这种方式，ASP.NET Core还提供了另外一种资源文件的组织方式&lt;/p&gt;
&lt;p&gt;你可以Resources目录下创建以下目录结构&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Resources
&lt;ul&gt;&lt;li&gt;Controllers
&lt;ul&gt;&lt;li&gt;HomeController.zh-CN.resx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本地化字符串访问器也能自动定位到这个文件。&lt;/p&gt;

&lt;p&gt;ASP.NET Core的本地化中间件默认支持3种语言文化提供器&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;URL中的查询字符串&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;请求头&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;url中的查询字符串&quot;&gt;URL中的查询字符串&lt;/h2&gt;
&lt;p&gt;ASP.NET Core会从URL中的culture参数中获取当前应用使用的语言文化，这就是前面例子中，“你好”能正确输出的原因&lt;/p&gt;
&lt;p&gt;除了指定ui-culture参数，你还可以使用culture参数指定当前格式化时间，数字等所使用的语言文化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;?culture=zh-CN&amp;amp;ui-culture=zh-CN

?culture=zh-CN

?ui-culture=zh-CN&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Tips: 当只指定culture或ui-culture参数时，ASP.NET Core会自动将culture和ui-culture设置成一样的。即?culture=zh-CN等同于?culture=zh-CN&amp;amp;ui-culture=zh-CN&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;cookie&quot;&gt;Cookie&lt;/h2&gt;
&lt;p&gt;ASP.NET Core中还支持使用Cookie的方式设置当前应用使用的语言文化。默认使用的Cookie名称是.AspNetCore.Culture。&lt;/p&gt;
&lt;p&gt;.AspNetCore.Culture的值格式如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;c=zh-CN|uic=zh-CN

c=zh-CN

uic=zh-CN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中c表示culture, uic表示ui-culture。&lt;/p&gt;
&lt;p&gt;下面我们使用Chrome的开发者工具, 为当前网页添加语言文化Cookie&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224406134-530666650.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们访问/Home/Hello, &quot;你好&quot;也被正确的输出了&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224413378-1328995945.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这说明ASP.NET Core从Cookie中读取到了语言文化配置&lt;/p&gt;
&lt;h2 id=&quot;请求头&quot;&gt;请求头&lt;/h2&gt;
&lt;p&gt;除了URL查询字符串和Cookie, ASP.NET Core还支持在请求头中指定语言文化。请求头中语言文化字段名称是 Accept-Language。&lt;/p&gt;
&lt;p&gt;Accept-Language的文档，参见&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language&quot; class=&quot;uri&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里我们使用Postman来测试一下，我们设置Accept-Language为zh-CN, zh;q=0.9, 结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224421218-1345176118.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;除了Controller, 我们更多的是在View中使用本地化。&lt;br/&gt;如果希望在View中使用本地化，首先需要在&lt;code&gt;Startup&lt;/code&gt;类的&lt;code&gt;ConfigureServices&lt;/code&gt;方法中启用View本地化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc()
        .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里&lt;code&gt;LanguageViewLocationExpanderFormat&lt;/code&gt;支持2种方式,这个和前面Controller的本地化文件名称约定类似&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Suffix, 例/Resources/Home/Hello.zh-CN.resx&lt;/li&gt;
&lt;li&gt;Path, 例/Resources/Home/zh-CN/Hello.resx&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们修改HomeController的代码，&lt;code&gt;Hello&lt;/code&gt;方法将返回一个View&lt;/p&gt;
&lt;p&gt;HomeController&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public IActionResult Hello()
{
    //return Content(_localizer[&quot;Hello&quot;]);
    return View();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Hello.cshtml&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@{
    ViewData[&quot;Title&quot;] = &quot;Hello&quot;;
}

&amp;lt;h2&amp;gt;Good Bye&amp;lt;/h2&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们创建如下图的目录结构, 并创建资源文件Hello.zh-CN.resx, 并添加GoodBye字段,其值为&quot;再见&quot;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224431474-421681496.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224435482-1860497761.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用viewlocalizer&quot;&gt;使用ViewLocalizer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ViewLocalizer&lt;/code&gt;类可以帮助我们在Razor视图中使用本地化文本。现在我们来修改Hello.cshtml, 在文件添加本地化引用，并注入一个ViewLocalizer对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer
@{
    ViewData[&quot;Title&quot;] = &quot;Hello&quot;;
}

&amp;lt;h2&amp;gt;@Localizer[&quot;GoodBye&quot;]&amp;lt;/h2&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们使用ViewLocalizer读取了本地化文本，它的用法和&lt;code&gt;IStringLocalier&lt;/code&gt;一样，都是通过属性访问器访问对应字段的本地化文本。&lt;/p&gt;
&lt;h2 id=&quot;最终效果-1&quot;&gt;最终效果&lt;/h2&gt;
&lt;p&gt;现在我们运行程序并访问/Home/Hello, 结果如下&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224441178-1571653967.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们继续访问/Home/Hello?ui-culture=zh-CN, 结果如下&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181010224445246-1360950409.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本地化字符串读取成功&lt;/p&gt;
&lt;p&gt;本篇源代码 &lt;a href=&quot;https://github.com/lamondlu/aspnetcore_localizationsample&quot; class=&quot;uri&quot;&gt;https://github.com/lamondlu/aspnetcore_localizationsample&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 15:12:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>ASP.NET Core中提供了一些本地化服务和中间件，可将网站本地化为不同的语言文化。 ASP.NET Core中我们可以使用 Microsoft.AspNetCore.Localization 库</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/9764243.html</dc:identifier>
</item>
<item>
<title>分布式Dubbo快速入门 - Miya。</title>
<link>http://www.cnblogs.com/SimpleWu/p/9769797.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SimpleWu/p/9769797.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;h4 id=&quot;editorsimplewu&quot;&gt;Editor：SimpleWu&lt;/h4&gt;
&lt;p&gt;Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224439377-1704936075.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;单一应用架构&quot;&gt;单一应用架构&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;垂直应用架构&quot;&gt;垂直应用架构&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;分布式服务架构&quot;&gt;分布式服务架构&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;流动计算架构&quot;&gt;流动计算架构&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。&lt;/p&gt;
&lt;h2 id=&quot;zookeeper安装&quot;&gt;zookeeper安装&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方网站&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;http://zookeeper.apache.org/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;http://mirrors.hust.edu.cn/apache/zookeeper/&lt;/p&gt;
&lt;p&gt;下载好我们解压出来直接启动bin目录下zkServer.bat是不行的，我们暂时将zoo_sample.cfg改成zoo.cfg然后就可以正常启动了，启动后我们可以看到默认的端口&lt;strong&gt;2181&lt;/strong&gt;到时候我们的Dubbo就调用这个端口&lt;/p&gt;
&lt;h2 id=&quot;发布dubbo服务&quot;&gt;发布Dubbo服务&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dubbo下载地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://github.com/apache/incubator-dubbo&lt;/p&gt;
&lt;p&gt;下载后我们参照里面的Demo先来搞一个provider。（dubbo-provider）&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;打开eclipse新建一个maven工程先配置个阿里云镜像否则本地没有超级慢&quot;&gt;1.打开eclipse新建一个maven工程（先配置个阿里云镜像，否则本地没有超级慢）&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;!--  配置阿里云  --&amp;gt;
&amp;lt;mirror&amp;gt;
    &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt;
    &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
    &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt;
    &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt;
 &amp;lt;/mirror&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;pom.xml中添加依赖&quot;&gt;2.POM.XML中添加依赖&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.101tec&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;zkclient&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;0.10&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2.46&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.4&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.0.35.Final&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;3.添加服务接口，实现服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.miya.dubbo.service;
/**
 * 服务提供者接口
 * @author SimpleWu
 *
 */
public interface MyProviderService {
    public String sayHello(String name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现接口&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.miya.dubbo.service.impl;
import com.miya.dubbo.service.MyProviderService;
/**
 * 服务提供者接口实现类
 * @author SimpleWu
 *
 */
public class MyProviderServiceImpl implements MyProviderService {

    @Override
    public String sayHello(String name) {
        return &quot;服务1 ： MyProviderServiceImpl 。。 sayHello &quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;4.在resources资源文件夹中添加dubbo-provider.xml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;
       xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&amp;gt;
    &amp;lt;!-- 提供方应用名称，用于计算依赖关系 --&amp;gt;
    &amp;lt;dubbo:application name=&quot;demo-provider&quot; /&amp;gt;
    
    &amp;lt;!-- 使用zookeeper注册中心暴露服务地址 --&amp;gt;
    &amp;lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&amp;gt;
    
    &amp;lt;!-- 使用dubbo协议，在20880端口暴露服务 --&amp;gt;
    &amp;lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&amp;gt;
    
    &amp;lt;!-- service实现类作为本地的一个bean --&amp;gt;
    &amp;lt;bean id=&quot;myProviderService&quot; class=&quot;com.miya.dubbo.service.impl.MyProviderServiceImpl&quot;/&amp;gt;
    
    &amp;lt;!-- 声明需要暴露的服务接口 --&amp;gt;
    &amp;lt;dubbo:service interface=&quot;com.miya.dubbo.service.MyProviderService&quot; ref=&quot;myProviderService&quot;/&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;创建测试类发布服务&quot;&gt;5.创建测试类发布服务&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;发布服务之前需要先启动zookeeper，启动后图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224506121-1668573951.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建测试类发布服务&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void main(String[] args){
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[] { &quot;dubbo-provider.xml&quot; });
        context.start();
        System.out.println(&quot;服务提供者向zookeeper中心注册服务成功 暴露的端口为：20880&quot;);
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发布后图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224520674-1648724876.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果看到我们的服务接口后就说明服务发布成功！&lt;/p&gt;
&lt;h2 id=&quot;dubbo-admin管理&quot;&gt;Dubbo Admin管理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;首先在dubbo目录里面找到dubbo-admin将他打成war包不能带项目路径&quot;&gt;1.首先在Dubbo目录里面找到dubbo-admin将他打成WAR包不能带项目路径&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224542671-1417970124.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们需要将WAR包发布到Tomcat里面最好独立运行，我们将Tomcat wepapps下的ROOT全部删掉将WAR包解压到里面，然后启动Tomcat（必须先开启我们的zookeeper），我们直接访问localhost:8080会弹出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224554258-611944141.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;默认的账号root密码root登陆&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到这个页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224603214-644615085.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以在这里管理我们的服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224613612-402317683.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前我们点击服务是没有查询到服务的，我们将我们之前的那个服务运行发布上去可以看到&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224623385-790400336.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以点击服务名进去管理我们的服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224635779-298071446.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里可以对应的去操作我们的服务，注意我们的服务就是在20880端口暴露的，这里我们的服务也是20880说明我们的服务成功发布。&lt;/p&gt;
&lt;h2 id=&quot;消费dubbo服务&quot;&gt;消费Dubbo服务&lt;/h2&gt;
&lt;p&gt;创建一个maven项目(dubbo-consumer)开启消费者：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;pom.xml导入依赖&quot;&gt;1.POM.XML导入依赖&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.101tec&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;zkclient&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.10&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.46&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.0.35.Final&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;创建消费者接口&quot;&gt;2.创建消费者接口&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.miya.dubbo.service;
/**
 * 服务提供者接口
 * @author SimpleWu
 *
 */
public interface MyProviderService {
    public String sayHello(String name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;在resources下创建消费者配置文件dubbo-consumer.xml&quot;&gt;3.在resources下创建消费者配置文件(dubbo-consumer.xml)&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;
       xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&amp;gt;

    &amp;lt;!-- 消费方应用名称，用于计算依赖关系，不是匹配条件，不要与提供方名称一样  --&amp;gt;
    &amp;lt;dubbo:application name=&quot;demo-consumer&quot;/&amp;gt;

    &amp;lt;!-- 使用zookeeper注册中心暴露服务地址 --&amp;gt;
    &amp;lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&amp;gt;

    &amp;lt;!-- 生成远程服务代理，可以与本地bean一样使用  check属性，启动时候是否检查 一般设置成false 启动时候不检查 --&amp;gt;
    &amp;lt;dubbo:reference id=&quot;myProviderService&quot; check=&quot;false&quot; interface=&quot;com.miya.dubbo.service.MyProviderService&quot;/&amp;gt;

&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;创建消费者测试类&quot;&gt;4.创建消费者测试类&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.miya.dubbo.test;

import java.io.IOException;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import com.miya.dubbo.service.MyProviderService;

public class ConsumerTest {
    public static void main(String[] args) {
        //读取消费者配置文件
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{&quot;dubbo-consumer.xml&quot;});
        context.start();
        //获取消费实例
        MyProviderService demoProviderService=(MyProviderService) context.getBean(&quot;myProviderService&quot;);
        String result=demoProviderService.sayHello(&quot;Miya&quot;);
        System.out.println(&quot;远程调用的结果：&quot;+result);
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
        context.close();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;开始消费&quot;&gt;5.开始消费&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开zookeeper--&amp;gt;Tomcat发布Dubbo Admin管理中心--&amp;gt;启动消费者测试程序&lt;/p&gt;
&lt;p&gt;我们可以看到消费者已经有了，图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1462123/201810/1462123-20181010224652203-468682488.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;抽取与依赖版本管理&quot;&gt;抽取与依赖版本管理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;抽取&quot;&gt;抽取&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;在前面两个项目中我们会发现两个项目中有两个相同的接口（MyProviderServiceImpl.java），这样是不好的，我们现在参照官方demo来创建一个maven工程（dubbo-api）&lt;/p&gt;
&lt;p&gt;我们将接口我们将这个接口放到api这个项目中去，然后将dubbo-consumer,dubbo-provider这两个工程中的接口删掉，这个时候我们这两个项目会报错因为找不到这个接口，我们可以将这两个项目添加依赖：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.miya&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;dubbo-api&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们只要依赖dubbo-api就可以获取到了吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;依赖版本统一管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在dubbo-consumer,dubbo-provider这两个工程中会发现POM.xml中的版本号，如果我们需要修改版本要一个一个去修改有两个工程不是要改两次？那夸张以点，一万不是得改半条命？&lt;/p&gt;
&lt;p&gt;这个时候我们还是创建一个maven工程（dubbo-parent），这个工程Packaging我们选择POM，这个项目负责版本统一。首先我们抽取相同的依赖，然后给他们定义统一的版本管理方式。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;com.miya&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;dubbo-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    &amp;lt;!-- 依赖版本管理 --&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;dubbo-api.version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/dubbo-api.version&amp;gt;
        &amp;lt;dubbo.version&amp;gt;2.6.0&amp;lt;/dubbo.version&amp;gt;
        &amp;lt;zkclient.version&amp;gt;0.10&amp;lt;/zkclient.version&amp;gt;
        &amp;lt;curator-framework.version&amp;gt;4.0.1&amp;lt;/curator-framework.version&amp;gt;
        &amp;lt;fastjson.version&amp;gt;1.2.46&amp;lt;/fastjson.version&amp;gt;
        &amp;lt;log4j.version&amp;gt;1.2.17&amp;lt;/log4j.version&amp;gt;
        &amp;lt;slf4j-api.version&amp;gt;1.7.25&amp;lt;/slf4j-api.version&amp;gt;
        &amp;lt;commons-lang3.version&amp;gt;3.4&amp;lt;/commons-lang3.version&amp;gt;
        &amp;lt;netty-all.version&amp;gt;4.0.35.Final&amp;lt;/netty-all.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;!--依赖管理 --&amp;gt;
    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;com.miya&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;dubbo-api&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${dubbo-api.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${dubbo.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;com.101tec&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;zkclient&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${zkclient.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${curator-framework.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${fastjson.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${slf4j-api.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${commons-lang3.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${netty-all.version}&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 10 Oct 2018 14:52:00 +0000</pubDate>
<dc:creator>Miya。</dc:creator>
<og:description>[TOC] Dubbo入门 Editor：SimpleWu Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SimpleWu/p/9769797.html</dc:identifier>
</item>
<item>
<title>Java基础教程(5)--变量 - maconn</title>
<link>http://www.cnblogs.com/maconn/p/9763751.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maconn/p/9763751.html</guid>
<description>&lt;h2 id=&quot;一.变量&quot;&gt;一.变量&lt;/h2&gt;
&lt;h3 id=&quot;变量的定义&quot;&gt;1.变量的定义&lt;/h3&gt;
&lt;p&gt;  正如上一篇教程&lt;a href=&quot;https://www.cnblogs.com/maconn/p/9757729.html&quot;&gt;《Java基础教程(4)--面向对象概念》&lt;/a&gt;中介绍的那样，对象将它的状态存在域中。但是你可能仍然有一些疑问，例如：命名一个域的规则和惯例是什么？除了int还有其他的类型吗？域在声明的时候必须初始化吗？如果域没有显示地初始化会被赋予一个默认值吗？在本文中我们将一一讨论这些问题，但是在开始之前，需要对几个概念进行介绍。在Java中，“域”和“变量”术语都会使用，对于初学者来说这可能有一点困惑，因为它们看起来好像说的是同一个东西。&lt;br/&gt;  Java语言定义了以下几种类型的变量：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实例变量（非静态域）：从技术层面来说，对象将它们各自的状态存在“非静态域”中，也就是没有使用static关键字修饰的域。非静态域也被称为实例变量，因为对于类的每个实例（换句话说，就是每个对象）来说，它们的值都是独立的。例如，每个自行车的当前速度相对于其他自行车来说都是独立的。&lt;/li&gt;
&lt;li&gt;类变量（静态域）：类变量是使用static关键字修饰的域。这告诉编译器无论这个类有多少个实例，这个变量只有一个副本。对于一种特定的自行车来说，它的齿轮数可以被标记为static，因为这个值适用于它的每一个实例。代码static int numGears = 6;将会创建一个静态域。此外，可以使用关键字final来修饰这个域来保证它的值不会改变。&lt;/li&gt;
&lt;li&gt;局部变量：类似于对象在域中存储其状态，方法通常会将其临时状态存储在局部变量中。声明局部变量的语法与声明域类似（例如，int count = 0;）。没有特殊的关键字将变量标记为局部变量，这完全取决于声明变量的位置——它位于方法的两个大括号之间。因此，局部变量只对声明它们的方法可见，对于类的其他部分来说它们是不可见的。&lt;/li&gt;
&lt;li&gt;参数：你已经在HelloWorld的main方法和Bicycle类中看到过参数的应用。回想一下main方法的签名——public static void main(String[] args)。这里，args变量是方法的参数。需要记住的是参数属于“变量”而不是“域”。这也适用于其他接受参数的结构（例如构造函数和异常处理），我们将陆续在后面的教程中见到它们。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  在理解了这几个概念后，相信你对变量和域的关系有了进一步的认识。变量分为实例变量、类变量、局部变量和参数，而只有实例变量和类变量属于域的概念。你也可能偶尔也会看到“成员”一词，类的域，方法和嵌套类型统称为其成员。&lt;/p&gt;
&lt;h3 id=&quot;命名&quot;&gt;2.命名&lt;/h3&gt;
&lt;p&gt;  变量名是标识符的一种，它满足标识符的规则。标识符用来给程序中需要自定义名称的某个实体命名，例如变量、方法、类、参数等。所有的标识符都需要满足以下的规则或惯例：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;标识符必须是由字母、数字、下划线（_）、美元符号（$）等Java允许作为标识符中一部分的字符组成。可以使用Character.isJavaIdentifierPart()来检测一个字符是否被允许作为Java标识符的一部分。&lt;/li&gt;
&lt;li&gt;标识符不能以数字或其他不允许作为出现在标识符起始位置的字符开头。可以使用Character.isJavaIdentifierStart()来检测一个字符是否被允许作为Java标识符的第一个字符。&lt;/li&gt;
&lt;li&gt;标识符不能是关键字、null、true或false。&lt;/li&gt;
&lt;li&gt;标识符不限制长度。&lt;/li&gt;
&lt;li&gt;标识符应该尽可能地表达出它的作用或意义以提高程序的可读性。建议使用驼峰法（第一个单词首字母小写，其余单词首字母大写）来为设计标识符。如果是常量（使用final修饰的变量），那么规则稍有变化，将每个字母大写并用下划线（_）分隔每个单词。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  上面提到了关键字。关键字是编程语言中事先定义的，有特别意义的单词。下面是Java中的关键字：&lt;br/&gt;&lt;img src=&quot;http://maconn.oss-cn-beijing.aliyuncs.com/18-10-10/91059650.jpg&quot;/&gt;&lt;br/&gt;  其中，const和goto关键字虽然已经不再使用，但是它们还是被保留了下来。&lt;strong&gt;true、false和null虽然被很多人误认为是关键字，但实际上它们只是字面量而已&lt;/strong&gt;。&lt;br/&gt;  &lt;/p&gt;
&lt;h2 id=&quot;二.基本数据类型&quot;&gt;二.基本数据类型&lt;/h2&gt;
&lt;h3 id=&quot;八种基本数据类型&quot;&gt;1.八种基本数据类型&lt;/h3&gt;
&lt;p&gt;  Java是一门静态语言，这意味着所有的变量在使用前必须先进行声明。考虑以下代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;int gear = 6;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  上面的代码声明了一个名为gear的变量，它是整数类型，并且有一个初始值1。变量的类型决定了它所能存储的数据的类型。除int之外，Java编程语言还支持其他七种基本数据类型。Java中的八种原始数据类型是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;byte：byte数据类型是8位有符号整数。它的最小值为-128（-2&lt;sup&gt;7&lt;/sup&gt;），最大值为127(2&lt;sup&gt;7&lt;/sup&gt;-1)。&lt;/li&gt;
&lt;li&gt;short：short数据类型是16位有符号整数。它的最小值为-32768（-2&lt;sup&gt;15&lt;/sup&gt;），最大值为32767（2&lt;sup&gt;15&lt;/sup&gt;-1）。&lt;/li&gt;
&lt;li&gt;int：int数据类型是32位有符号整数。它的最小值为-2&lt;sup&gt;31&lt;/sup&gt;，最大值为2&lt;sup&gt;31&lt;/sup&gt;-1。&lt;/li&gt;
&lt;li&gt;long：long数据类型是64位有符号整数。它的最小值为-2&lt;sup&gt;63&lt;/sup&gt;，最大值为2&lt;sup&gt;63&lt;/sup&gt;-1。&lt;/li&gt;
&lt;li&gt;float：float数据类型是单精度32位IEEE754浮点数（如果对浮点数的概念不了解，可以简单地将它理解为小数）。它的有效位数为6~7位，不要使用它去存储对精度要求较高的数据。&lt;/li&gt;
&lt;li&gt;double：double数据类型是双精度64位IEEE754浮点数。它的有效位数为15位。在保存浮点数时，绝大部分情况下都应该使用double类型。&lt;/li&gt;
&lt;li&gt;boolean：boolean数据类型只有两个可能的值：true和false。它一般用来表示条件的真或假。在Java中，boolean数据类型不能与其他数据类型进行相互转换。&lt;/li&gt;
&lt;li&gt;char：char数据类型是单个16位Unicode字符。它的最小值为'\u0000'，最大值为'\uffff'。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;char类型扩展&quot;&gt;char类型扩展&lt;/h4&gt;
&lt;p&gt;  要想弄清楚char类型，就必须了解Unicode编码机制。Unicode打破了传统字符编码机制的限制。在Unicode出现之前，已经有许多不同的标准：美国的ASCII、西欧语言中的ISO8859-1、俄罗斯的KOI-8、我国的GB2312等。这样就产生了下面两个问题：一是对于任意给定的编码值，在不同的编码方案下有可能对应不同的字母；二是采用大字符集的语言其编码长度可能不同。例如，有些常用的字符采用单字节编码，而另一些字符则需要两个或更多字节。&lt;br/&gt;  设计Unicode编码的目的就是要解决这些问题。在20世纪80年代开始启动设计工作时，人们认为两个字节的代码宽度足以对世界上各种语言的所有字符进行编码，并有足够的空间留给未来扩展。在1991年发布了Unicode 1.0，当时仅占用65536个代码值中不到一半的部分。在设计Java时决定采用16位的字符集，这样会比使用8位字符集的程序设计语言有很大的改进。&lt;br/&gt;  十分遗憾，经过一段时间，不可避免的事情发生了。由于增加了大量的汉语、日语和韩语中的文字，Unicode字符超过了65536个，16位的char类型已经不能满足描述所有Unicode字符的需要了。&lt;br/&gt;  从JavaSE 5.0开始，码点（code point）是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，码点采用十六进制书写，并加上前缀U+，例如U+0041就是拉丁字母A的码点。Unicode的码点可以分成17个平面。第一个代码级别称为基本多语言平面，码点从U+0000到U+FFFF；其余的16个平面码点从U+10000到U+10FFFF，其中包括一些辅助字符（supplementary character）。&lt;br/&gt;  下面来介绍UTF-16。UTF-16是Unicode码的一种编码格式。也就是说，Unicode决定了每个字符所对应的编码的值，而UTF-16是Unicode编码的一种书写格式，与其类似的还有UTF-8和UTF-32。虽然这些格式的表现形式不尽相同，但他们表示的编码是一致的，那就是Unicode编码。UTF-16采用不同长度的编码表示所有Unicode码点。在Unicode中，特定长度的比特序列称为代码单元。例如，UTF-8的一个代码单元的长度为8。UTF-16中16位表示一个代码单元。UTF-16编码的规则如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;U+0000到U+D7FF以及U+E000到U+FFFF（基本多语言平面）&lt;br/&gt;这个区间称为基本多语言平面，包含了最常见的字符。每个字符对应的码点使用一个代码单元就可以表示。&lt;/li&gt;
&lt;li&gt;U+D800到U+DFFF（代理区）&lt;br/&gt;因为除基本多语言平面外，其他16个平面的码点无法用2个字节表示，所以Unicode标准规定，基本多语言平面内的U+D800到U+DFFF的码点不对应于任何字符，称为代理区。因此，UTF-16利用保留下来的0xD800-0xDFFF区段的码位来对辅助平面的字符的码位进行编码。&lt;/li&gt;
&lt;li&gt;U+10000到U+10FFFF（辅助平面）&lt;br/&gt;辅助平面中的码点都大于U+FFFF，无法用16位来表示，因此采用一对连续的代码单元来进行编码。具体步骤如下：&lt;br/&gt;  a.码点减去0x10000，得到的结果范围在0x00000到0xFFFFF，使用二进制表示为yyyy yyyy yyxx xxxx xxxx；&lt;br/&gt;  b.高10位的值（范围为0x000到0x3FF），加上0xD800，得到的结果范围在0xD800到0xDBFF，称为高位代理，作为第一个代码单元；&lt;br/&gt;  c.低10位的值（范围也是0x000到0x3FF），加上0xDC00，得到的结果范围在0xDC00到0xDFFF，称为地位代理，作为第二个代码单元；&lt;br/&gt;  d.最终的UTF-16编码用二进制表示就是：1101 10yy yyyy yyyy 1101 11xx xxxx xxxx。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;  在Java中，char类型描述了UTF-16编码中的一个代码单元。建议不要在程序中使用char类型，除非确实需要处理UTF-16代码单元。&lt;/p&gt;
&lt;h3 id=&quot;默认值&quot;&gt;2.默认值&lt;/h3&gt;
&lt;p&gt;  在声明一个域时，如果不对它赋值，编译器将赋予它一个默认值。下面是这8种基本数据类型的默认值：&lt;br/&gt;&lt;img src=&quot;http://maconn.oss-cn-beijing.aliyuncs.com/18-10-10/89192501.jpg&quot;/&gt;&lt;br/&gt;  局部变量则略有不同，编译器永远不会为未初始化的局部变量分配默认值。如果没有初始化局部变量，请保证在使用它之前为其赋值。访问未初始化的局部变量将导致编译时错误。&lt;/p&gt;
&lt;h3 id=&quot;字面量&quot;&gt;3.字面量&lt;/h3&gt;
&lt;p&gt;  你可能已经注意到在初始化基本数据类型的变量时不使用new关键字。基本数据类型是语言中内置的特殊数据类型，它们不是从类创建的对象。字面量（literal）是用于表达源代码中一个固定值的表示方法。如下所示，可以将字面量分配给基本数据类型的变量：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;boolean result = true;
char capitalC = 'C';
byte b = 100;
short s = 10000;
int i = 100000;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;整型字面量&quot;&gt;(1)整型字面量&lt;/h4&gt;
&lt;p&gt;  整型字面量默认为int类型。可以在整数后面加上后缀L或l来表示long类型字面量。可以使用前缀0x来表示十六进制，0来表示八进制，0b来表示二进制：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// The number 26, in decimal
int decVal = 26;
// The number 26, in hexadecimal
int hexVal = 0x1a;
// The number 26, in octal
int octVal = 032;
// The number 26, in binary
int binVal = 0b11010;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;浮点型字面量&quot;&gt;(2)浮点型字面量&lt;/h4&gt;
&lt;p&gt;  浮点型字面量默认为double类型（也可以加上D或d，不过一般省略）。可以在浮点数后面加上后缀F或f来表示float类型字面量。&lt;br/&gt;  可以使用科学计数法来表示浮点数字面量。例如，1.2345*10&lt;sup&gt;4&lt;/sup&gt;可以表示为1.2345E4，1.2345*10&lt;sup&gt;-4&lt;/sup&gt;可以表示为1.2345E-4。E后面的数字表示10的指数，也可以使用小写字母e。也可以使用十六进制表示浮点数。例如，3.875=(11.111)&lt;sub&gt;2&lt;/sub&gt;=(3.e)&lt;sub&gt;16&lt;/sub&gt;=(3e)&lt;sub&gt;16&lt;/sub&gt;*2&lt;sup&gt;-4&lt;/sup&gt;，那么3.875可以表示成0x3.ep0或0x3ep-4（因为e和十六进制的15重复，所以这里使用p表示指数）。注意，尾数采用十六进制，指数采用十进制。指数的基数是2，而不是10。&lt;/p&gt;
&lt;h4 id=&quot;字符型字面量&quot;&gt;(3)字符型字面量&lt;/h4&gt;
&lt;p&gt;  char类型的字面量值要用单引号括起来。例如，'B'是编码值为66所对应的字符常量。它与&quot;B&quot;不同，&quot;B&quot;是一个包含字符B的字符串。char类型的值可以表示为十六进制值，但需要加上前缀\u，其范围从\u0000~\uFFFF。例如，\u03C0表示圆周率符号π。&lt;br/&gt;  除了转义序列\u外，还有一些用于表示特殊字符的转义序列，如下表：&lt;br/&gt;&lt;img src=&quot;http://maconn.oss-cn-beijing.aliyuncs.com/18-10-10/27423393.jpg&quot;/&gt;&lt;br/&gt;  所有这些转义序列都可以出现在字符字面量或字符串中。例如'\u2018'或&quot;Hello\n&quot;。转义序列\u还可以出现在字符字面量或字符串之外，而其他转义序列就不可以。例如&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void main(String\u005B\u005D args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就完全符合语法，\u005B和\u005D是[和]的编码。但要注意的是，转义序列\u会在编译代码前得到处理。例如，&quot;\u0022+\u0022&quot;并不是一个由双引号包围加号组成的字符串。实际上，\u0022会在编译代码之前替换为&quot;，这个字符串会变成&quot;&quot;+&quot;&quot;，也就是一个空串。更隐蔽的，一定要注意注释中的\u，注释&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// Unicode \u000A is a new line&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会产生一个语法错误，因为\u000A会被替换成换行符，也就是说，上面的注释会变成下面这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// Unicode 
is a new line&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;类似地，下面的注释也会产生语法错误：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// Look inside c:\users&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为\u后面并没有跟着一个十六进制数。&lt;/p&gt;
&lt;h4 id=&quot;在数字字面量中使用下划线&quot;&gt;(4)在数字字面量中使用下划线&lt;/h4&gt;
&lt;p&gt;  在JavaSE7及之后的版本中，任意个数的下划线（_）可以出现在数字字面量中的任意两个数字之间。这个功能可以提高数字字面量的可读性，类似于使用逗号或空格等标点符号将每三个数字分为一组的形式。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;long creditCardNumber = 1234_5678_9012_3456L; 
long socialSecurityNumber = 999_99_9999L; 
float pi = 3.14_15F; 
long hexBytes = 0xFF_EC_DE_5E; 
long hexWords = 0xCAFE_BABE; 
long maxLong = 0x7fff_ffff_ffff_ffffL; 
byte nybbles = 0b0010_0101; 
long bytes = 0b11010010_01101001_10010100_10010010;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 10 Oct 2018 14:50:00 +0000</pubDate>
<dc:creator>maconn</dc:creator>
<og:description>经过上一篇教程的学习，我们知道对象将它的状态存在域中。然而，Java中也使用了“变量”这个术语。在这一篇教程中，我们将会讨论它们之间的关系，以及变量命名的规则和惯例，基本数据类型以及它们的默认值和字面</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maconn/p/9763751.html</dc:identifier>
</item>
<item>
<title>简述RPC原理实现 - 三升水</title>
<link>http://www.cnblogs.com/sanshengshui/p/9769517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sanshengshui/p/9769517.html</guid>
<description>&lt;pre class=&quot;md-meta-block md-end-block&quot;&gt;
 
&lt;/pre&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;RPC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/summer.jpg&quot;&gt;&lt;img alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497594/201810/1497594-20181010221237977-1832141277.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;架构的改变，往往是因为业务规模的扩张。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block md-focus&quot;&gt;&lt;span&gt;随着业务规模的扩张，为了满足业务对技术的要求，技术架构需要从单体应用架构升级到分布式服务架构，来降低公司的技术成本，更好的适应业务的发展。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;分布式服务架构的诸多优势，这里就不一一列举了，今天围绕的话题是服务框架，为了推行服务化，必然需要一套易用的服务框架，来支撑业务技术架构升级。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务架构的核心是&lt;span&gt;&lt;strong&gt;服务调用&lt;/strong&gt;&lt;span&gt;，分布式服务架构中的服务分布在不同主机的不同进程上，服务的调用跟单体应用进程内方法调用的本质区别就是需要借助网络来进行通信。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;RPC Demo实现思路&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;原作者梁飞，在此记录下他非常简洁的rpc实现思路。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;核心框架类&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
   * Copyright 2011 Alibaba.com All right reserved. This software is the
   * confidential and proprietary information of Alibaba.com (&quot;Confidential
   * Information&quot;). You shall not disclose such Confidential Information and shall
   * use it only in accordance with the terms of the license agreement you entered
   * into with Alibaba.com.
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.framework;
  ​
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ObjectInputStream;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ObjectOutputStream;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationHandler;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Proxy;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.ServerSocket;
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;
  ​
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * RpcFramework
   * 
   * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; william.liangf
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RpcFramework {
  ​
      &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
       * 暴露服务
       * 
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; service 服务实现
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; port 服务端口
       * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
       &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; export(&lt;span&gt;final&lt;/span&gt; Object service, &lt;span&gt;int&lt;/span&gt; port) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (service == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;service instance == null&quot;&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (port &amp;lt;= 0 || port &amp;gt; 65535&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Invalid port &quot; +&lt;span&gt; port);
          System.out.println(&lt;/span&gt;&quot;Export service &quot; + service.getClass().getName() + &quot; on port &quot; +&lt;span&gt; port);
          ServerSocket server &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServerSocket(port);
          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(;;) {
              &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                  &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Socket socket =&lt;span&gt; server.accept();
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                      @Override
                      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                          &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                              &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                                  ObjectInputStream input &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectInputStream(socket.getInputStream());
                                  &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                                      String methodName &lt;/span&gt;=&lt;span&gt; input.readUTF();
                                      Class&lt;/span&gt;&amp;lt;?&amp;gt;[] parameterTypes = (Class&amp;lt;?&amp;gt;&lt;span&gt;[])input.readObject();
                                      Object[] arguments &lt;/span&gt;=&lt;span&gt; (Object[])input.readObject();
                                      ObjectOutputStream output &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectOutputStream(socket.getOutputStream());
                                      &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                                          Method method &lt;/span&gt;=&lt;span&gt; service.getClass().getMethod(methodName, parameterTypes);
                                          Object result &lt;/span&gt;=&lt;span&gt; method.invoke(service, arguments);
                                          output.writeObject(result);
                                      } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable t) {
                                          output.writeObject(t);
                                      } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                                          output.close();
                                      }
                                  } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                                      input.close();
                                  }
                              } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                                  socket.close();
                              }
                          } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                              e.printStackTrace();
                          }
                      }
                  }).start();
              } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                  e.printStackTrace();
              }
          }
      }
  ​
      &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
       * 引用服务
       * 
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt; 接口泛型
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; interfaceClass 接口类型
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; host 服务器主机名
       * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; port 服务器端口
       * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 远程服务
       * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
       &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
      @SuppressWarnings(&lt;/span&gt;&quot;unchecked&quot;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T refer(&lt;span&gt;final&lt;/span&gt; Class&amp;lt;T&amp;gt; interfaceClass, &lt;span&gt;final&lt;/span&gt; String host, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; port) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (interfaceClass == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Interface class == null&quot;&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt; interfaceClass.isInterface())
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;The &quot; + interfaceClass.getName() + &quot; must be interface class!&quot;&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (host == &lt;span&gt;null&lt;/span&gt; || host.length() == 0&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Host == null!&quot;&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (port &amp;lt;= 0 || port &amp;gt; 65535&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Invalid port &quot; +&lt;span&gt; port);
          System.out.println(&lt;/span&gt;&quot;Get remote service &quot; + interfaceClass.getName() + &quot; from server &quot; + host + &quot;:&quot; +&lt;span&gt; port);
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), &lt;span&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[] {interfaceClass}, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvocationHandler() {
              &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] arguments) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
                  Socket socket &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Socket(host, port);
                  &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                      ObjectOutputStream output &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectOutputStream(socket.getOutputStream());
                      &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                          output.writeUTF(method.getName());
                          output.writeObject(method.getParameterTypes());
                          output.writeObject(arguments);
                          ObjectInputStream input &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectInputStream(socket.getInputStream());
                          &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                              Object result &lt;/span&gt;=&lt;span&gt; input.readObject();
                              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Throwable) {
                                  &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; (Throwable) result;
                              }
                              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
                          } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                              input.close();
                          }
                      } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                          output.close();
                      }
                  } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                      socket.close();  
                }  
            }  
        });  
    }  
​  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;定义服务接口&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
   * Copyright 2011 Alibaba.com All right reserved. This software is the
   * confidential and proprietary information of Alibaba.com (&quot;Confidential
   * Information&quot;). You shall not disclose such Confidential Information and shall
   * use it only in accordance with the terms of the license agreement you entered
   * into with Alibaba.com.
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.test;
  ​
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * HelloService
   * 
   * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; william.liangf
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; HelloService {
  ​
      String hello(String name);
  ​
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;实现服务&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;   * Copyright 2011 Alibaba.com All right reserved. This software is the
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;   * confidential and proprietary information of Alibaba.com (&quot;Confidential
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;   * Information&quot;). You shall not disclose such Confidential Information and shall
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;   * use it only in accordance with the terms of the license agreement you entered
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;   * into with Alibaba.com.
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.test;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  ​
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;   * HelloServiceImpl
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   * 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;   * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; william.liangf
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;    &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HelloService {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  ​
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;       &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(String name) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;           &lt;span&gt;return&lt;/span&gt; &quot;Hello &quot; +&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  ​
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;暴露服务&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
   * Copyright 2011 Alibaba.com All right reserved. This software is the
   * confidential and proprietary information of Alibaba.com (&quot;Confidential
   * Information&quot;). You shall not disclose such Confidential Information and shall
   * use it only in accordance with the terms of the license agreement you entered
   * into with Alibaba.com.
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.test;
  ​
  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.framework.RpcFramework;
  ​
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * RpcProvider
   * 
   * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; william.liangf
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RpcProvider {
  ​
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
          HelloService service &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloServiceImpl();
          RpcFramework.export(service, &lt;/span&gt;1234&lt;span&gt;);
      }
  ​
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;引用服务&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;   * Copyright 2011 Alibaba.com All right reserved. This software is the
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;   * confidential and proprietary information of Alibaba.com (&quot;Confidential
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;   * Information&quot;). You shall not disclose such Confidential Information and shall
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;   * use it only in accordance with the terms of the license agreement you entered
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;   * into with Alibaba.com.
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.test;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  ​
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.study.rpc.framework.RpcFramework;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  ​
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;   * RpcConsumer
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;   * 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;   * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; william.liangf
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;    &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RpcConsumer {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;       
&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;           HelloService service = RpcFramework.refer(HelloService.&lt;span&gt;class&lt;/span&gt;, &quot;127.0.0.1&quot;, 1234&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;           &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; Integer.MAX_VALUE; i ++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;               String hello = service.hello(&quot;World&quot; +&lt;span&gt; i);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;              System.out.println(hello);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;               Thread.sleep(1000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;       
&lt;span&gt;28&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;em&gt;梁飞大大的博客使用原生的jdk api就展现给各位读者一个生动形象的rpc demo，实在是强。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;这个简单的例子的实现思路是:&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;使用阻塞的&lt;span&gt;&lt;strong&gt;socket IO流&lt;/strong&gt;&lt;span&gt;来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;方法的远程调用使用的是&lt;span&gt;&lt;strong&gt;jdk的动态代理&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;参数的序列化也是使用的最简单的&lt;span&gt;&lt;strong&gt;objectStream&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务框架&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务框架的核心是服务调用，分布式服务架构中的服务分布在不同主机的不同进程上，服务的调用跟单体应用进程内方法调用的本质区别就是需要借助网络来进行通信。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;下图是服务框架的架构图，主流的服务框架的实现都是这套架构，如 &lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-dubbo&quot;&gt;&lt;span&gt;Dubbo&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、SpringCloud 等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;span class=&quot; md-link&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497594/201810/1497594-20181010221055328-2087560284.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;RPC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/arch.jpg&quot;&gt;&lt;img alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;1&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Invoker 是服务的调用方&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Provider 是服务的提供方&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Registry 是服务的注册中心&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Monitor 是服务的监控模块&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Invoker 和 Provider 分别作为服务的调用和被调用方，这点很明确。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;但是仅有这两者还是不够的，因为作为调用方需要知道服务部署在哪，去哪调用服务，所以有了 Registry 模块，它的功能是给服务提供方注册服务，给服务调用方发现服务。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Monitor 作为服务的监控模块，负责服务的调用统计以及链路分析功能，也是服务治理重要的一环。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;核心模块&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;下图是服务框架的流程图，我们分服务注册、发现、调用三个方面来进行流程分解。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497594/201810/1497594-20181010221034847-987887310.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;RPC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/process.jpg&quot;&gt;&lt;img alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务注册是服务提供方向注册中心注册服务信息；当提供服务应用下线时，负责将服务注册信息从注册中心删去。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务发现是服务调用方从注册中心订阅服务，获取服务提供方的相关信息；当服务注册信息有变更时，注册中心负责通知到服务调用方。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务调用是服务调用方通过从注册中心拿到服务提供方的信息，向服务提供方发起服务调用，获取调用结果。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;对照上述流程图，我们按照请求的具体过程进行分析。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;作为服务调用方 Invoker 的具体流程是：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;4&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Request 从下往上，由于服务调用方只能拿到服务提供方提供的 API 接口或者 API 接口的 JAR 包，所以服务调用方需要经过一层代理 Proxy 来伪装服务的实现；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;经过代理 Proxy 之后，会经过路由 Router、负载均衡 LoadBalance 模块，目的是从一堆从注册中心拿到的服务提供方信息中选出最合适的服务提供方机器进行调用。另外，还会经过 Monitor 监控等模块；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;接着会经过服务编码 Codec 模块，这个模块的目的是因为请求在网络传输前需要按照通信协议以及对象的序列化方式，对传输的请求进行编解码；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;最终会经过网络通信 Transporter 模块，这个模块将 Codec 编码好的请求进行传输。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;作为服务提供方 Provider 的具体流程是：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;2&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Request 从上往下，经过网络通信 Transporter 模块，获取到的是由调用方发送的Request字节数组。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;接着经过服务编码 Codec 模块，根据通信协议解出一个完整的请求包，然后使用具体的序列化方式反序列化成请求对象。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;紧接着会经过监控、限流、鉴权等模块。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;最终会执行服务的真正业务实现 ServiceImpl，执行完后，结果按原路返回。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;按照上述流程分解一个服务框架的相关工作，再去看一些开源的服务框架也就不难理解了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;一般服务框架的核心模块应该有注册中心、网络通信、服务编码（通信协议、序列化）、服务路由、负载均衡，服务鉴权，可用性保障（服务降级、服务限流、服务隔离）、服务监控（Metrics、Trace）、配置中心、服务治理平台等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;注册中心&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;注册中心是用来注册和发现服务的，需要具备的基本功能有注册服务、下线服务、发现服务、通知服务变更等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;当前使用比较多的开源注册中心有 &lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/apache/zookeeper&quot;&gt;&lt;span&gt;Zookeeper&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;&lt;span&gt;ETCD&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/Netflix/eureka&quot;&gt;&lt;span&gt;Eureka&lt;/span&gt;&lt;/a&gt; &lt;span&gt;等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Zookeeper 与 ETCD 在整体架构上都比较类似，使用方式非常便捷，应用比较广泛。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;这两套系统按照 CAP 理论，属于 CP 系统，可用性会差一点，但是作为中小规模服务注册中心，还是游刃有余，并没有某些人说的那么差劲。 Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，很不幸的是 Eureka 2.0 开源工作宣告停止。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;网络通信&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务的调用方和提供方都来自不同的主机的不同的进程，所以要进行调用，必然少不了网络通信。可以说网络通信是分布式系统的重中之重，网络通信框架的好坏直接影响服务框架的性能。从零实现一套性能高，稳定性强的通信框架还是非常难的，好在目前已经有很多开源的高性能的网络通信框架。 针对 Java 生态有 Mina、&lt;span class=&quot; md-link&quot;&gt;&lt;a href=&quot;https://github.com/netty/netty&quot;&gt;&lt;span&gt;Netty&lt;/span&gt;&lt;/a&gt; &lt;span&gt;等，目前使用最广泛的也当属 Netty。Netty 使用的是 per thread one eventloop 线程模型，这点与 Nginx 等其他高性能网络框架类似。另外，Netty 非常易用，所以网络通信选择 Netty 框架自然是毫无疑问的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Netty实践学习案例，是Netty初学者及核心技术巩固的最佳实践。
可以见我的netty学习工程:
https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/sanshengshui/netty-learning-example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务编码&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;内存对象要经过网络传输前需要做两件事：第一是确定好通信协议，第二序列化。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;通信协议&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;通信协议说白了在发送数据前按照一定的格式来处理数据，然后进行发送，保证接收方拿到数据知道按照什么样的格式进行处理。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;有些同学可能不理解，为什么需要通信协议，不是有 TCP、UDP 协议了吗？这里说的不是传输层的通信协议，应该是应用层的协议类似 HTTP。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;因为的 TCP 协议虽然已经保证了可靠有序的传输，但是如果没有一套应用层的协议，就不知道发过来的字节数据是不是一个完整的数据请求，或者说是多个请求的字节数据都在一起，无法拆分，这就是是所谓的粘包，需要按照协议进行拆包，拆成一个个完整的请求包进行处理。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;协议的实现上一般大厂或者开源的服务框架选择自建协议，更偏向服务领域。如 Dubbo，当然也有些框架直接使用 HTTP，HTTP/2，比如 GRPC 使用的就是 HTTP/2。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;序列化&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;由于向网络层发送的数据必须是字节数据，不可能直接将一个对象发送到网络，所以在发送对象数据前，一般需要将对象序列化成字节数据，然后进行传输。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在服务方收到网络的字节数据时，需要经过反序列化拿到相关的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;序列化的实现目前现成比较多，如 Hessian、JSON、Thrift、ProtoBuf 等。Thrift 和 ProtoBuf 能支持跨语言，性能比较好，不过使用时需要编写 IDL 文件，有点麻烦。Hessian、JSON 使用起来比较友好，但是性能会差一点。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务路由&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务路由指的是向服务提供方发起调用时，需要根据一定的算法从注册中心拿到的服务方地址信息中选择其中的一批机器进行调用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;路由的算法一般是根据场景来进行选择的，比如有些公司实施两地三中心这种高可用部署，但是由于两地的网络延时比较大，那这时就可以实施同地区路由策略，比如上海的调用方请求会优先选择上海的服务进行调用，来降低网络延时导致的服务端到端的调用耗时。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;还有些框架支持脚本配置来进行定向路由策略。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;负载均衡&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;负载均衡是紧接着服务路由的模块，负载均衡负责将发送请求均匀合理的发送到服务提供方的节点上，而备选机器，一般就是经过路由模块选择出来的。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;负载均衡的算法有很多，如 RoundRobin、Random、LeastActive、ConsistentHash 等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;而且这些算法一般都是基于权重的增强版本，因为需要根据权重来调节每台服务节点的流量。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务鉴权&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务鉴权是服务安全调用的基础，虽然绝大部分服务都是公司内部服务，但是对于敏感度较高的数据还是需要进行鉴权的。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;鉴权的服务需要对服务的调用方进行授权，未经授权的调用方是不能够调用该服务的。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;关于服务鉴权的实现大都是基于 token 的认证方案，如 JWT（JSON Web Token） 认证。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;可用性保障&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;可用性保障模块是服务高可用的一个重要保证。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务在交互中主要分成调用方和提供方两种角色，作为服务调用方，可以通过服务降级提升可用性。作为服务提供方，可以通过服务限流、服务隔离来保证可用性。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务降级&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务降级指的是当依赖的服务不可用时，使用预设的值来替代服务调用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;试想一下，假设调用一个非关键路径上的服务（也就是说该调用获取的结果是否实时，是否正确不是特别重要）出现问题，导致调用超时、失败等，在没有降级措施的情况下，会直接应用服务调用方业务。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;因此，有些非关键路径上服务调用，可以通过服务降级实现有损服务，柔性可用。 开源的降级组件有 Netflix 的 Hystrix，Hystrix 使用比较广泛。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务限流&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务降级保护的是服务的调用方，也就是服务的依赖方。而服务的提供方呢，如何保证服务的可用性呢？ 服务限流指的是对服务调用流量的限制，限制其调用频次，来保护服务。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;在高并发的场景中，很容易出现流量过高，导致服务被打垮。这里就需要限流来保证服务自身的稳定运行。 Hystrix 也是可以用来限流的，但是用的比较多的有 guava 的 RateLimiter，其使用的是令牌桶算法，能够保证平滑限流。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务隔离&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;除了服务限流对服务提供方进行保护，就够了吗？ 可能还不够，考虑一下这样的场景，假设某一个有问题的方法出现问题，处理非常耗时，这样会堵住整个服务处理线程，导致正常的服务方法也不能够正常调用。因此还需要服务隔离。 服务隔离指的是对服务执行的方法进行线程池隔离，保证异常耗时方法不会对正常的方法调用产生干扰，进而保护服务的稳定运行，提升可用性。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;服务监控&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务监控是高可用系统不可或缺的重要支撑。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;服务监控不仅包括服务调用等业务统计信息 Metrics，还包括分布式链路追踪 Trace。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;分布式系统监控比单体应用要复杂的多，需要将大量的监控信息进行聚合展示，尤其是在分布式链路追踪方面，由于服务调用过程中涉及到多个分布在不同机器上的服务，需要一个调用链路展示系统方便查看调用链路中耗时和出问题的环节。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;Metrics&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Metrics 监控主要是服务调用的一些统计报表，包括服务调用次数、成功数、失败数，以及服务方法的调用耗时，如平均耗时，耗时99线，999线等。全方位展示服务的可用性以及性能等信息。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;目前开源的 Metrics 监控有美团点评的 Cat、SoundCloud 的 Prometheus 以及基于 OpenTracking 的 SkyWalking。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;Trace 监控是对分布式服务调用过程中的整体链路展示和分析。方便查看链路上各个环境的性能问题。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;分布式链路追踪的原理大都是基于 Google 的论文 Dapper, a Large-Scale Distributed Systems Tracing Infrastructure。 开源的分布式链路追踪系统有美团点评的 Cat，基于 OpenTracking 的SkyWalking、Twitter 的 ZipKin。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;配置中心&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;配置中心不光是常见的系统需要，服务框架也需要，它能够对系统中使用的配置进行管理，也能够针对修改配置动态通知到应用系统。 一套完善的服务框架，必然少不了配置，如一些动态开关、降级配置、限流配置、鉴权配置等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;开源的配置中心有阿里的 Diamond，携程的 Apollo。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;md-end-block&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;治理平台&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;治理平台指的是对服务进行管理的平台。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;微服务微了之后，必然会导致服务数量的上升，如果没有一个完善的治理平台，服务规模扩大之后，很难去维护，也必然导致故障频频，并且极度影响开发效率。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;治理平台主要是服务功能的相关操作平台，包括服务权重修改、服务下线、鉴权降级等配置修改等。 治理平台跟服务框架的耦合比较强，所以开源的比较少。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 10 Oct 2018 14:16:00 +0000</pubDate>
<dc:creator>三升水</dc:creator>
<og:description>前言 架构的改变，往往是因为业务规模的扩张。 随着业务规模的扩张，为了满足业务对技术的要求，技术架构需要从单体应用架构升级到分布式服务架构，来降低公司的技术成本，更好的适应业务的发展。 分布式服务架构</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sanshengshui/p/9769517.html</dc:identifier>
</item>
<item>
<title>页面间大量数据参数传递 - 如是说</title>
<link>http://www.cnblogs.com/lishanlei/p/9769507.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lishanlei/p/9769507.html</guid>
<description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;我们在开发项目中经常会遇到一种问题，就是在前端页面跳转时传递某些参数，通常我们是通过路由传递的，但是如果数据量很多的情况下，会造成路由非常的长，如果在大的话甚至会超出地址栏URL的最大限度，这就狗带了．最近手头上一个项目的前端刚好遇到这个问题，该项目前端用的是vue2.x．不是什么大问题，但是之前没有认真想过解决办法，于是将解决思路记录下来了．&lt;/p&gt;

&lt;h3&gt;地址栏URL最大限度&lt;/h3&gt;
&lt;p&gt;首先我查了不同浏览器地址栏URL的最大限度．&lt;/p&gt;
&lt;p&gt;虽然HTTP协议的&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot; data-cke-saved-href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot;&gt;RFC规范&lt;/a&gt;并没有详细规定URL的最大字符长度限制，但实际上，在浏览器或者服务器中总会存在限制的。这里所说的字符是指ASCII字符。HTTP RFC2616协议没有规定URL的最大长度，规定服务器如果不能处理太长的URL，就得返回414状态码（Request-URI Too Long）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微软 Internet Explorer：&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;http://support.microsoft.com/kb/q208427/&quot; data-cke-saved-href=&quot;http://support.microsoft.com/kb/q208427/&quot;&gt;微软帮助网站&lt;/a&gt;上说IE7之前（包括IE7）的浏览器，对URL的最大长度限制是2,083个字符。&lt;br/&gt;&lt;strong&gt;Firefox：&lt;/strong&gt;&lt;br/&gt;对于Firefox1.5.x，地址栏能显示的URL最大长度是65,536个字符，但实际上有效的URL最大长度不少于100,000个字符。&lt;br/&gt;对于Firefox 3.0.5，&lt;a href=&quot;http://support.mozilla.com/tiki-view_forum_thread.php?locale=zh-CN&amp;amp;comments_parentId=153230&amp;amp;forumId=1&quot; data-cke-saved-href=&quot;http://support.mozilla.com/tiki-view_forum_thread.php?locale=zh-CN&amp;amp;comments_parentId=153230&amp;amp;forumId=1&quot;&gt;mozilla官方论坛&lt;/a&gt;上有人测试其URL长度限制为65,000个字符。&lt;br/&gt;也有人说Firefox可以支持URL高达2Gbyte的长度（&lt;a href=&quot;http://forums.mozillazine.org/viewtopic.php?f=7&amp;amp;t=322458&amp;amp;start=0&amp;amp;st=0&amp;amp;sk=t&amp;amp;sd=a&quot; data-cke-saved-href=&quot;http://forums.mozillazine.org/viewtopic.php?f=7&amp;amp;t=322458&amp;amp;start=0&amp;amp;st=0&amp;amp;sk=t&amp;amp;sd=a&quot;&gt;参考&lt;/a&gt;），在data URL中可以运用到这样大数据量的URL。dataURL是一种URL本身包含了实际数据的URL，比如一个图片、一个HTML网页或者全部的数据、代码等等。仅有Firefox支持dataURL。&lt;br/&gt;&lt;strong&gt;Safari：&lt;/strong&gt;&lt;br/&gt;Safari最少支持80,000个字符长度的URL。&lt;br/&gt;&lt;strong&gt;Opera：&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;http://www.opera.com/support/kb/view/387/&quot; data-cke-saved-href=&quot;http://www.opera.com/support/kb/view/387/&quot;&gt;Opera官方网站&lt;/a&gt;上说，Opera并没有强制限制URL的长度。&lt;br/&gt;网友测试Opera 9支持最少190,000个字都长度的URL，并且Opera9的地址栏可以显示、编辑、复制和粘贴完整的URL串。&lt;/p&gt;
&lt;p&gt;综上，又在网上找了一个附表：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;IE&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;URL最大限制是2083个字节，Path长度最大是2048字节（Get请求）。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Firefox&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;65536&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Safari&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;80000以上&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Opera&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;190000字节以上&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Chrome&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;8182字节&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Apache Server&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;8192字节&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;IIS&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;16384字节&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Perl HTTP::Daemon&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;至少8000字节&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;我的思路&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;思路一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的第一个想法就是通过缓存进行解决----cookie/localStorage/sessionStorage．通过在服务器或客户端进行数据缓存以供页面进行读取．但是在后续的思考中我想到首先cookie缓存量很小，同时session/cookie对与网站所有页面是透明的，我只是想实现指定页面间进行参数传递，其他页面应该不知情，考虑到保密性，我放弃了这个想法．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路二&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的第二个思路还是通过缓存来实现，但是是通过application cache(共享本地缓存)，具体的介绍就不在这里说了．但是我考虑到application cache具有缓存时间，而我想要的是在页面跳转后缓存的参数数据被销毁，也就是类似闪存的机制．同时application cache缓存页面需要的资源，那么其他页面所需要的资源也同时被缓存下来，这样做得不偿失．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路三&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过js的全局变量．这个没什么介绍的，将参数保存在全局变量中，那么在页面声明周期内所有页面都可以使用．但是还是那个问题，在使用全局变量的时候，其他页面也能够获得．所以pass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路四&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我找到利用原生很不错的方法，那就是通过模态窗口来实现页面间的参数传递．以下是对showModalDialog(模态窗口)的简单介绍：&lt;/p&gt;
&lt;p&gt;基本介绍：&lt;/p&gt;




&lt;p&gt;通过vArguments来进行传递的。类型不限制，对于字符串类型，最大为4096个字符。也可以传递对象，如下：&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;怎样才让在showModalDialog和showModelessDialog的超连接不弹出新窗口？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在被打开的网页里加上：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;怎样才刷新showModalDialog和showModelessDialog里的内容？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在showModalDialog和showModelessDialog里是不能按F5刷新的，又不能弹出菜单。这个只能依靠javascript了，以下是相关代码：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;如何用javascript关掉showModalDialog(或showModelessDialog)打开的窗口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也要配合&amp;lt;base target=&quot;_self&quot;&amp;gt;，不然会打开一个新的IE窗口，然后再关掉的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Math.random与showModalDialog。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当你设置的弹出网页固定时（如上面的&quot;modal.htm&quot;页面），ie很可能到临时文件区，下载上次产生的该页面(openPage.html),而没有重新加载，对于动态加载的页面来说，这样往往产生误会，如没有及时更新数据，也就更不利于开发者测试。所以，你可以采用如下方式：      &lt;/p&gt;

&lt;p&gt;这样每次产生的strPage是不一样的．&lt;/p&gt;
&lt;p&gt;但是最后我还是放弃了，因为首先我用的是vue框架，写原生太不优雅；其次如上所示，使用模态窗口的局限性太大．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路五&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;俗话说：解铃还须系铃人&lt;/p&gt;
&lt;p&gt;在一筹莫展之际，我想到了vue-router中的params．上代码：&lt;/p&gt;

&lt;p&gt;query传递参数：&lt;/p&gt;

&lt;p&gt;注意：无论是params还是query进行参数传递，传参是this.$router,接收参数是this.$route,一定要细心．&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;p&gt;1．当使用query进行参数传递时，参数会跟在路径后面．我们可以在地址栏看到后面跟的参数，而params不会在地址栏显示．直白的说query相当于get请求，而params相当于post请求．&lt;/p&gt;
&lt;p&gt;2．params传参，push里面只能是 name:'xxxx',不能是path:'/xxx',因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined．&lt;/p&gt;


&lt;p&gt;果然．．．&lt;strong&gt;自己挖的坑还要自己填&lt;/strong&gt;．．．&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 14:14:00 +0000</pubDate>
<dc:creator>如是说</dc:creator>
<og:description>前言 我们在开发项目中经常会遇到一种问题，就是在前端页面跳转时传递某些参数，通常我们是通过路由传递的，但是如果数据量很多的情况下，会造成路由非常的长，如果在大的话甚至会超出地址栏URL的最大限度，这就</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lishanlei/p/9769507.html</dc:identifier>
</item>
</channel>
</rss>