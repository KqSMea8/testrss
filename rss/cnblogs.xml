<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>职场篇:失败之后 - 范存威</title>
<link>http://www.cnblogs.com/fancunwei/p/9684039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9684039.html</guid>
<description>&lt;p&gt;&lt;span&gt;当我写下这个题目之后，我想到了一首歌词&quot;长大以后，我只能奔跑，我多害怕 黑暗中跌倒 &quot;，我不由得哼起这首歌，一种心痛孜然而生。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我也想到了一本小说《飞升之后》，讲述主人公飞升后，见证了太古人族苦难奋斗史，&quot;一念轮回君千殇&quot;，多少悲歌如泣史诗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;各种各样的压力让我们每天都面临着抉择，面临着不断失败。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;编程问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了追求所谓的进步，我们不断的尝试各种新技术，踩了各种各样的坑，耗费了大量时间。组件依赖，版本地狱，令人防不胜防。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就比如今天的一个例子:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我用restsharp请求了一个webapi，提示未识别的类型。我用postman又能测试通过。这大概猜测是restsharp哪里设置不对。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是用我的Csharpfandemo之前建好的webapi调试，正好我之前写过一篇.netcore webapi接收原始参数正文。调试发现contenttype是text/xml，我重新看了下restsharp的AddBody方法，介绍说默认是xml类型，这就坑了。于是使用了AddJsonBody后功能正常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就这么简单的一个问题，耽搁了我两个小时，真是浪费时间，不过最终也解决了。最让我觉得坑的是header里加了json，调用addbody还会覆盖掉type，也真是厉害了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;沟通问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当我拿这个分享给同事时，他说这很明显啊，type是服务端决定的，客户端有addjsonbody肯定用这个啊。哎，我分享的心情瞬间没有了，好像我犯了个很愚蠢的错误一样，就没有继续聊了。调用addbody，却自动覆盖掉header信息，这合理么？也许是不熟造成的误解吧！我本来还打算整理一番，写一篇博文出来，经此沟通，我取消了计划。换个方法就搞定的事，真的需要再浪费一堆时间去整理么？&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;曾经的找工作问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;每个人都会找工作，也总会面试好多家。失败的那些家，也许给你造成了忧伤，造成了打击。不过还好，知道补充所短，再下一家继续面试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以前面试中听过几个有意思的话语:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一，做销售，是销售自己。产品都是一样的，只有你表现的好，让客户信任你，产品就成功了一半。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二，平台的重要性。有的人全能的制造了一把步枪，有的合伙制作了手榴弹，有的人基于平台制作了导弹。也许他们耗的时间相同，但导弹的威力更大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;失败的面试也能获取一堆段子手。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我们未达成预定目标失败了，情绪必然低落。这时候不要心灰意冷，换个方向，你可能重焕新春，不信你瞧！&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;韬光养晦&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;失败了有可能是积累或见识不足，调整思绪，继续充实，韬光养晦，以期未来再度杨帆。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;探索经验&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;失败了有可能是你在探索新的方向，旺盛的精力，不知疲倦。这时候可以稍微停下脚步，总结下经验，做适度调整，再以饱满的热情出发。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;及时止损&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有些失败可能已经消耗了你大量的时间与金钱以及社会人脉，又不见任何收益，未来也看不到希望。这时候需要考虑止损了，防止拖下泥潭。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;求其上得其中&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;目标是远大的，现实是残酷的，能完成目标的一大半，有时也是一个良好的结果。不要妄自菲薄。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我已经错过写这篇文章的最佳时刻，文为心声，时机是非常非常重要！可惜被各种事情耽误，现在才来补写，达不到我顺畅的感觉，有点为赋新词强说愁的感觉。我个人十分不满意！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇到此结束，感谢观看。&lt;/span&gt;&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Thu, 20 Sep 2018 15:40:00 +0000</pubDate>
<dc:creator>范存威</dc:creator>
<og:description>前言 当我写下这个题目之后，我想到了一首歌词&quot;长大以后，我只能奔跑，我多害怕 黑暗中跌倒 &quot;，我不由得哼起这首歌，一种心痛孜然而生。 我也想到了一本小说《飞升之后》，讲述主人公飞升</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9684039.html</dc:identifier>
</item>
<item>
<title>call和apply方法的异同 - Pearl_Ran</title>
<link>http://www.cnblogs.com/PearlRan/p/9684024.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PearlRan/p/9684024.html</guid>
<description>&lt;p&gt;&lt;strong&gt;基本作用&lt;/strong&gt;：改变对象的执行上下文。&lt;/p&gt;
&lt;p&gt;this指向执行上下文。（执行环境）&lt;/p&gt;
&lt;p&gt;this指向的永远是调用该方法的对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function func(){
     this.a=1;
     console.log(this.a);    
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;代码中方法执行后控制台输出&lt;code&gt;1&lt;/code&gt;，由于&lt;code&gt;func&lt;/code&gt;是全局对象&lt;code&gt;window&lt;/code&gt;下的一个方法，那么调用该方法的对象就应该是全局对象&lt;code&gt;window&lt;/code&gt;，所以&lt;code&gt;this&lt;/code&gt;理论上指向的对象就应该是&lt;code&gt;window&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果理论成立，而&lt;code&gt;this.a==1&lt;/code&gt;，也就是说变量&lt;code&gt;a&lt;/code&gt;是一个全局变量。在控制台上直接输入&lt;code&gt;a&lt;/code&gt;或&lt;code&gt;window.a&lt;/code&gt;后回车，会发现输出了&lt;code&gt;1&lt;/code&gt;，所以在&lt;code&gt;func&lt;/code&gt;这个方法中，&lt;code&gt;this&lt;/code&gt;的指向就是&lt;code&gt;window。&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
eg:
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var person = {
    name: 'xiao ming',
    age: 18,
    who: function () {
        console.log( 'my name is ' + this.name + ' , ' + this.age + ' years old' );
        console.log( person === this);
    }
}

person.who();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段代码中&lt;code&gt;who&lt;/code&gt;方法是&lt;code&gt;person&lt;/code&gt;对象的一个属性，被&lt;code&gt;person&lt;/code&gt;对象调用，所以&lt;code&gt;this&lt;/code&gt;的指向也就是&lt;code&gt;person。&lt;/code&gt;&lt;/p&gt;
&lt;strong&gt;call和apply的基本使用&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;call()&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function.call(obj, args1,args2,...)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;调用&lt;code&gt;call&lt;/code&gt;的对象必须是个函数function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt;的第一个参数将会是function改变上下文后指向的对象,如果不传，默认为全局对象window&lt;/li&gt;
&lt;li&gt;第二个参数开始可以接收任意个参数，这些参数将会作为function的参数传入function&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;call&lt;/code&gt;的方法会立即执行&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;apply()&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function.apply(obj,args[...])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　只接收两个参数，其中第二个参数必须是一个数组或者类数组，这也是这两个方法很重要的一个区别&lt;/p&gt;
&lt;div readability=&quot;20.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;数组与类数组小科普&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组我们都知道是什么，它的特征都有哪些呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可以通过角标调用，如 &lt;code&gt;array[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;具有长度属性&lt;code&gt;length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以通过 for 循环和&lt;code&gt;forEach&lt;/code&gt;方法进行遍历&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;类数组顾名思义，具备的特征应该与数组基本相同，那么可以知道，一个形如下面这个对象的对象就是一个类数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var arrayLike = {
    0: 'item1',
    1: 'item2',
    2: 'item3',
    length: 3
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　类数组&lt;code&gt;arrayLike&lt;/code&gt;可以通过角标进行调用，具有&lt;code&gt;length&lt;/code&gt;属性，同时也可以通过 for 循环进行遍历&lt;/p&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;我们经常使用的获取dom节点的方法返回的就是一个类数组，在一个方法中使用 &lt;code&gt;arguments&lt;/code&gt;关键字获取到的该方法的所有参数也是一个类数组&lt;/p&gt;
&lt;p&gt;但是类数组却不能通过&lt;code&gt;forEach&lt;/code&gt;进行遍历，因为&lt;code&gt;forEach&lt;/code&gt;是数组原型链上的方法，类数组毕竟不是数组，所以无法使用。&lt;/p&gt;
&lt;div readability=&quot;39.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;h3&gt;异同&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;都能够改变方法的执行上下文（执行环境），将一个对象的方法交给另一个对象来执行，并且是立即执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call&lt;/code&gt;方法从第二个参数开始可以接收任意个参数，每个参数会映射到相应位置的func的参数上，可以通过参数名调用，但是如果将所有的参数作为数组传入，它们会作为一个整体映射到func对应的第一个参数上，之后参数都为空&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function func (a,b,c) {}

func.call(obj, 1,2,3)
// function接收到的参数实际上是 1,2,3

func.call(obj, [1,2,3])
// function接收到的参数实际上是 [1,2,3],undefined,undefined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;code&gt;apply&lt;/code&gt;方法最多只有两个参数，第二个参数接收数组或者类数组，但是都会被转换成类数组传入func中，并且会被映射到func对应的参数上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
func.apply(obj, [1,2,3])
// function接收到的参数实际上是 1,2,3

func.apply(obj, {
    0: 1,
    1: 2,
    2: 3,
    length: 3
})
// function接收到的参数实际上是 1,2,3
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;两个方法该如何选择？&lt;/h3&gt;
&lt;p&gt;跟简单，根据你要传入的参数来做选择，不需要传参或者只有1个参数的时候，用&lt;code&gt;call&lt;/code&gt;，当要传入多个对象时，用&lt;code&gt;apply&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者，如果需要传入的参数已经是一个数组或者类数组了，就用&lt;code&gt;apply&lt;/code&gt;，如果还是单独的需要逐个传入的，可以考虑使用&lt;code&gt;call&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;【其他用途——对象继承】&lt;/h2&gt;
&lt;p&gt;由于可以改变&lt;code&gt;this&lt;/code&gt;的指向，所以也就可以实现对象的继承。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function superClass () {
    this.a = 1;
    this.print = function () {
        console.log(this.a);
    }
}

function subClass () {
    superClass.call(this);
    this.print();
}

subClass();
// 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;code&gt;subClass&lt;/code&gt;通过&lt;code&gt;call&lt;/code&gt;方法，继承了&lt;code&gt;superClass&lt;/code&gt;的&lt;code&gt;print&lt;/code&gt;方法和&lt;code&gt;a&lt;/code&gt;变量，同时&lt;code&gt;subClass&lt;/code&gt;还可以扩展自己的其他方法。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:34:00 +0000</pubDate>
<dc:creator>Pearl_Ran</dc:creator>
<og:description>基本作用：改变对象的执行上下文。 this指向执行上下文。（执行环境） this指向的永远是调用该方法的对象 代码中方法执行后控制台输出1，由于func是全局对象window下的一个方法，那么调用该方</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PearlRan/p/9684024.html</dc:identifier>
</item>
<item>
<title>高并发第八弹:J.U.C起航(java.util.concurrent) - 爱呼吸的鱼</title>
<link>http://www.cnblogs.com/aihuxi/p/9683805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aihuxi/p/9683805.html</guid>
<description>&lt;p&gt;&lt;span&gt;java.util.concurrent是JDK自带的一个并发的包主要分为&lt;/span&gt;以下5部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;并发工具类(tools)&lt;/li&gt;
&lt;li&gt;显示锁(locks)&lt;/li&gt;
&lt;li&gt;原子变量类(aotmic)&lt;/li&gt;
&lt;li&gt;并发集合(collections)&lt;/li&gt;
&lt;li&gt;Executor线程执行器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们今天就说说 &lt;span&gt;并发集合,&lt;span&gt;除开 Queue,放在线程池的时候讲&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170511224224443?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGFuZ3hpbWluZzEyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;379&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先介绍以下 CopyOnWrite:&lt;/p&gt;
&lt;p&gt;Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到 .&lt;/p&gt;
&lt;p&gt;CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CopyOnWriteArrayList&amp;lt;E&amp;gt;
    &lt;span&gt;implements&lt;/span&gt; List&amp;lt;E&amp;gt;&lt;span&gt;, RandomAccess, Cloneable, java.io.Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 8673264195747942595L&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; The lock protecting all mutators &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; ReentrantLock lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; The array, accessed only via getArray/setArray. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Object[] array;

............................&lt;br/&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lock;
        lock.lock();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Object[] elements &lt;/span&gt;=&lt;span&gt; getArray();//获取当前数组数据
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; elements.length;
            Object[] newElements &lt;/span&gt;= Arrays.copyOf(elements, len + 1&lt;span&gt;); //复制当前数组并且扩容+1
            newElements[len] &lt;/span&gt;=&lt;span&gt; e;
            setArray(newElements);//将原来的数组指向新的数组
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            lock.unlock();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面这篇文章验证了CopyOnWriteArrayList和同步容器的性能：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://blog.csdn.net/wind5shy/article/details/5396887&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/wind5shy/article/details/5396887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　下面这篇文章简单描述了CopyOnWriteArrayList的使用：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://blog.csdn.net/imzoer/article/details/9751591&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/imzoer/article/details/9751591&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为 网友总结的优缺点是:&lt;/p&gt;
&lt;div&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;缺点： &lt;br/&gt;1.写操作时复制消耗内存，如果元素比较多时候，容易导致young gc 和full gc。 &lt;br/&gt;2.不能用于实时读的场景.由于复制和add操作等需要时间，故读取时可能读到旧值。 &lt;br/&gt;能做到最终一致性，但无法满足实时性的要求，更适合读多写少的场景。 &lt;br/&gt;如果无法知道数组有多大，或者add,set操作有多少，慎用此类,在大量的复制副本的过程中很容易出错。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;设计思想： &lt;br/&gt;1.读写分离 &lt;br/&gt;2.最终一致性 &lt;br/&gt;3.使用时另外开辟空间，防止并发冲突&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;这个还真是主要是针对 读多的条件.毕竟写一个就要开辟一个空间.太耗资源了.其实还是建议用手动的方式来控制集合的并发.&lt;/p&gt;
&lt;h4&gt;1. ArrayList –&amp;gt; CopyOnWriteArrayList&lt;/h4&gt;
&lt;p&gt;它相当于线程安全的&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3308556.html&quot;&gt;ArrayList&lt;/a&gt;。和ArrayList一样，它是个可变数组；但是和ArrayList不同的时，它具有以下特性：&lt;br/&gt;1. 它最适合于具有以下特征的应用程序：List 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。&lt;br/&gt;2. 它是线程安全的。&lt;br/&gt;3. 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大。&lt;br/&gt;4. 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等操作。&lt;br/&gt;5. 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。&lt;/p&gt;
&lt;h4&gt; 2. HashSet –&amp;gt; CopyOnWriteArraySet&lt;/h4&gt;
&lt;p&gt;它是线程安全的无序的集合，可以将它理解成线程安全的&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3311252.html&quot;&gt;HashSet&lt;/a&gt;。有意思的是，CopyOnWriteArraySet和HashSet虽然都继承于共同的父类AbstractSet；但是，HashSet是通过&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3310835.html&quot;&gt;“散列表&lt;/a&gt;(HashMap)”实现的，而CopyOnWriteArraySet则是通过“&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3498483.html&quot;&gt;动态数组(CopyOnWriteArrayList)&lt;/a&gt;”实现的，并不是散列表。&lt;br/&gt;和CopyOnWriteArrayList类似，CopyOnWriteArraySet具有以下特性：&lt;br/&gt;1. 它最适合于具有以下特征的应用程序：Set 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。&lt;br/&gt;2. 它是线程安全的。&lt;br/&gt;3. 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大。&lt;br/&gt;4. 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等 操作。&lt;br/&gt;5. 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。&lt;/p&gt;

&lt;h3&gt;SkipList 跳表:先介绍这个吧&lt;/h3&gt;
&lt;p&gt;介绍的很详细 &lt;a href=&quot;https://blog.csdn.net/sunxianghuang/article/details/52221913&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/sunxianghuang/article/details/52221913&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更优秀的 :&lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498556.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/skywang12345/p/3498556.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总结起来就是:&lt;/p&gt;
&lt;p&gt;　　传统意义的单链表是一个线性结构，向有序的链表中插入一个节点需要O(n)的时间，查找操作需要O(n)的时间&lt;/p&gt;
&lt;p&gt;　　跳表查找的复杂度为O(n/2)。跳跃表其实也是一种通过“空间来换取时间”的一个算法，通过在每个节点中增加了向前的指针，从而提升查找的效率。&lt;/p&gt;

&lt;p&gt;先以数据“7,14,21,32,37,71,85”序列为例，来对跳表进行简单说明。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳表分为许多层(level)，每一层都可以看作是数据的索引，这些索引的意义就是加快跳表查找数据速度。每一层的数据都是有序的，上一层数据是下一层数据的子集，并且第一层(level 1)包含了全部的数据；层次越高，跳跃性越大，包含的数据越少。&lt;br/&gt;跳表包含一个表头，它查找数据时，是从上往下，从左往右进行查找。现在“需要找出值为32的节点”为例，来对比说明跳表和普遍的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况1：链表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-02所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;24&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要4步(红色部分表示路径)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况2：跳表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-03所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;忽略索引垂直线路上路径的情况下，只需要2步(红色部分表示路径)。&lt;/p&gt;
&lt;p&gt;先以数据“7,14,21,32,37,71,85”序列为例，来对跳表进行简单说明。&lt;/p&gt;
&lt;p&gt;跳表分为许多层(level)，每一层都可以看作是数据的索引，这些索引的意义就是加快跳表查找数据速度。每一层的数据都是有序的，上一层数据是下一层数据的子集，并且第一层(level 1)包含了全部的数据；层次越高，跳跃性越大，包含的数据越少。&lt;br/&gt;跳表包含一个表头，它查找数据时，是从上往下，从左往右进行查找。现在“需要找出值为32的节点”为例，来对比说明跳表和普遍的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况1：链表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-02所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;24&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要4步(红色部分表示路径)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况2：跳表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-03所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;忽略索引垂直线路上路径的情况下，只需要2步(红色部分表示路径)。&lt;/p&gt;
&lt;h4&gt;3. TreeMap –&amp;gt; ConcurrentSkipListMap&lt;/h4&gt;
&lt;p&gt;下面说说Java中ConcurrentSkipListMap的数据结构。&lt;br/&gt;(01) ConcurrentSkipListMap继承于AbstractMap类，也就意味着它是一个哈希表。&lt;br/&gt;(02) Index是ConcurrentSkipListMap的内部类，它与“跳表中的索引相对应”。HeadIndex继承于Index，ConcurrentSkipListMap中含有一个HeadIndex的对象head，head是“跳表的表头”。&lt;br/&gt;(03) Index是跳表中的索引，它包含“右索引的指针(right)”，“下索引的指针(down)”和“哈希表节点node”。node是Node的对象，Node也是ConcurrentSkipListMap中的内部类。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Special value used to identify base-level header
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object BASE_HEADER = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 跳表的最顶层索引
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; HeadIndex&amp;lt;K,V&amp;gt;&lt;span&gt; head;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 
      * 比较器用于维护此映射中的顺序，或者如果使用自然排序，则为空。（非私有的，以
      * 简化嵌套类中的访问）。
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Comparator&amp;lt;? &lt;span&gt;super&lt;/span&gt; K&amp;gt;&lt;span&gt; comparator;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized key set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;懒惰初始化密钥集&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; KeySet&amp;lt;K&amp;gt;&lt;span&gt; keySet;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized entry set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; EntrySet&amp;lt;K,V&amp;gt;&lt;span&gt; entrySet;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized values collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Values&amp;lt;V&amp;gt;&lt;span&gt; values;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized descending key set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码我也没精力去详勘了.就总结一下&lt;/p&gt;

&lt;h4&gt;4. TreeSet –&amp;gt; ConcurrentSkipListSet&lt;/h4&gt;
&lt;p&gt;(01) ConcurrentSkipListSet继承于AbstractSet。因此，它本质上是一个集合。&lt;br/&gt;(02) ConcurrentSkipListSet实现了NavigableSet接口。因此，ConcurrentSkipListSet是一个有序的集合。&lt;br/&gt;(03) ConcurrentSkipListSet是通过ConcurrentSkipListMap实现的。它包含一个ConcurrentNavigableMap对象m，而m对象实际上是ConcurrentNavigableMap的实现类ConcurrentSkipListMap的实例。ConcurrentSkipListMap中的元素是key-value键值对；而ConcurrentSkipListSet是集合，它只用到了ConcurrentSkipListMap中的key！&lt;/p&gt;
&lt;p&gt;(4)同其他set集合，是基于map集合的（基于ConcurrentSkipListMap），在多线程环境下，里面的contains、add、remove操作都是线程安全的。&lt;/p&gt;
&lt;p&gt; (5)多个线程可以安全的并发的执行插入、移除、和访问操作。但是对于批量操作addAll、removeAll、retainAll和containsAll并不能保证以原子方式执行，原因是addAll、removeAll、retainAll底层调用的还是　 contains、add、remove方法，只能保证每一次的执行是原子性的，代表在单一执行操纵时不会被打断，但是不能保证每一次批量操作都不会被打断。在使用批量操作时，还是需要手动加上同步操作的。&lt;/p&gt;
&lt;p&gt;(6)不允许使用null元素的，它无法可靠的将参数及返回值与不存在的元素区分开来。&lt;/p&gt;

&lt;h4&gt;5.  HashMap –&amp;gt; ConcurrentHashMap&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;不允许空值，在实际的应用中除了少数的插入操作和删除操作外，绝大多数我们使用map都是读取操作。而且读操作大多数都是成功的。基于这个前提，它针对读操作做了大量的优化。因此这个类在高并发环境下有特别好的表现。&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap作为Concurrent一族，其有着高效地并发操作，相比Hashtable的笨重，ConcurrentHashMap则更胜一筹了。&lt;/li&gt;
&lt;li&gt;在1.8版本以前，ConcurrentHashMap采用分段锁的概念，使锁更加细化，但是1.8已经改变了这种思路，而是利用CAS+Synchronized来保证并发更新的安全，当然底层采用数组+链表+红黑树的存储结构。&lt;/li&gt;
&lt;li&gt;源码分析：推荐参考chenssy的博文：&lt;a href=&quot;https://blog.csdn.net/chenssy/article/details/73521950&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;J.U.C之Java并发容器：ConcurrentHashMap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;安全共享对象策略&quot;&gt;安全共享对象策略&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改&lt;/li&gt;
&lt;li&gt;共享只读：一个共享只读的U帝乡，在没有额外同步的情况下，可以被多个线程并发访问，但是任何线程都不能修改它&lt;/li&gt;
&lt;li&gt;线程安全对象：一个线程安全的对象或者容器，在内部通过同步机制来保障线程安全，多以其他线程无需额外的同步就可以通过公共接口随意访问他&lt;/li&gt;
&lt;li&gt;被守护对象：被守护对象只能通过获取特定的锁来访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好意思 虎头蛇尾了.实在扛不住了&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:33:00 +0000</pubDate>
<dc:creator>爱呼吸的鱼</dc:creator>
<og:description>java.util.concurrent是JDK自带的一个并发的包主要分为以下5部分： 并发工具类(tools) 显示锁(locks) 原子变量类(aotmic) 并发集合(collections)</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aihuxi/p/9683805.html</dc:identifier>
</item>
<item>
<title>java之常量折叠 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9683990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9683990.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;为什么会写着篇博客，因为昨天看了关于final关键字的解析。但是有个问题始终没有得到解决，于是请教了我qq上之前添加的知乎大神。他给我回复的第一条消息：&lt;strong&gt;常量折叠&lt;/strong&gt;。身为渣渣猿的我立马查询了这个概念。这是第一次知道这个概念。知乎大神还给我讲了好多。让我终于明白了这个常量折叠的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例解析&quot;&gt;实例解析&lt;/h3&gt;
&lt;p&gt;昨天，让我迷惑的代码是下面这段代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {

        String a = &quot;hello2&quot;;
        final String b = &quot;hello&quot;;
        String d = &quot;hello&quot;;
        String c = b + 2;
        String e = d + 2;
        System.out.println((a == c));
        System.out.println((a == e));

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段的执行结果是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;true
false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我就是不明白为什么第一个返回&lt;code&gt;true&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;留着这个疑问，我们先了解下常量折叠的概念。来更好的理解上面的代码&lt;/p&gt;
&lt;h3 id=&quot;常量折叠&quot;&gt;常量折叠&lt;/h3&gt;
&lt;h4 id=&quot;常量折叠的概念&quot;&gt;常量折叠的概念&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;常量折叠是一种&lt;code&gt;编译器优化&lt;/code&gt;技术。&lt;/li&gt;
&lt;li&gt;常量折叠主要指的是&lt;code&gt;编译期常量&lt;/code&gt;加减乘除的运算过程会被折叠&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于 String s1 = &quot;1&quot; + &quot;2&quot;;&lt;br/&gt;编译器会给你优化成 String s1 = &quot;12&quot;;&lt;br/&gt;在生成的字节码中，根本看不到 &quot;1&quot; &quot;2&quot; 这两个东西。&lt;/p&gt;
&lt;p&gt;我们通过idea进行验证下&lt;/p&gt;
&lt;p&gt;1、源码文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1 = &quot;1&quot;+&quot;2&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、运行后，idea有个out文件夹，找到上面文件的class文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1 = &quot;12&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确实如上面所说，编译器会给你进行优化&lt;/p&gt;
&lt;h4 id=&quot;常量折叠发生的条件&quot;&gt;常量折叠发生的条件&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;必须是&lt;strong&gt;编译期常量之间&lt;/strong&gt;进行运算才会进行常量折叠。&lt;/li&gt;
&lt;li&gt;编译期常量就是&lt;strong&gt;“编译的时候就可以确定其值的常量”&lt;/strong&gt;，
&lt;ul&gt;&lt;li&gt;首先：字面量是&lt;code&gt;编译期常量&lt;/code&gt;。（数字字面量，字符串字面量等）&lt;/li&gt;
&lt;li&gt;其次：编译期常量进行&lt;code&gt;简单运算的结果&lt;/code&gt;也是&lt;code&gt;编译期常量&lt;/code&gt;，如1+2，&quot;a&quot;+&quot;b&quot;。&lt;/li&gt;
&lt;li&gt;最后：被编译器常量&lt;code&gt;赋值的 final 的基本类型和字符串变量&lt;/code&gt;也是编译期常量。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;举个栗子&quot;&gt;举个栗子&lt;/h4&gt;
&lt;p&gt;1.第一个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1=&quot;a&quot;+&quot;bc&quot;;
        String s2=&quot;ab&quot;+&quot;c&quot;;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相信大家都知道了，输出为&lt;code&gt;true&lt;/code&gt;&lt;br/&gt;并且只创建了一个 &quot;abc&quot; 字符串对象，且位于字符串常量池中。&lt;/p&gt;
&lt;p&gt;2、第二个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String a = &quot;a&quot;;
        String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个结果呢？&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;s1 是字符串字面量相加，但是 s2 却是两个非 final 的变量相加，所以不会进行常量折叠。&lt;/p&gt;
&lt;p&gt;而是根据 String 类特有的 + 运算符重载，变成类似这样的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String s2 = new StringBuffer(a).append(b).toString(); &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里toString()会生成新的String变量，显然用 == 运算符比较是会返回 false。&lt;/p&gt;
&lt;p&gt;3、第三个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        final String a = &quot;a&quot;;
        final String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的结果就是&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为 &lt;strong&gt;被编译器常量赋值的 final 的基本类型和字符串变量也是编译期常量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、第四个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String x =&quot;a&quot;;
        final String a = x;
        final String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的结果是&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是：final的变量，不是被编译期常量初始化的也不是编译器常量&lt;/p&gt;
&lt;p&gt;这里的a 就不是编译器常量&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;现在看完，是不是对上面打印的结果为什么是true 知道了呢？&lt;br/&gt;所以。只要牢记&lt;strong&gt;常量折叠主要指的是&lt;code&gt;编译期常量&lt;/code&gt;加减乘除的运算过程会被折叠&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:23:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>为什么会写着篇博客，因为昨天看了关于final关键字的解析。但是有个问题始终没有得到解决，于是请教了我qq上之前添加的知乎大神。他给我回复的第一条消息： 常量折叠 。身为渣渣猿的我立马查询了这个概念。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9683990.html</dc:identifier>
</item>
<item>
<title>算法_递归（正整数的幂次方表示） - yaoone</title>
<link>http://www.cnblogs.com/yaoone/p/9683893.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaoone/p/9683893.html</guid>
<description>&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;一、概念&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;函数调用自身。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;注意：递归程序可能更加简洁，但是不一定节省时间。&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;二、案例&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;案例网址：http://cxsjsxmooc.openjudge.cn/2018t2fallw2/2/&lt;/p&gt;
&lt;dl class=&quot;problem-params&quot;&gt;&lt;dt&gt;总时间限制: &lt;/dt&gt;
&lt;dd&gt;1000ms&lt;/dd&gt;
&lt;dt&gt; &lt;/dt&gt;
&lt;dt&gt;内存限制: &lt;/dt&gt;
&lt;dd&gt;65536kB&lt;/dd&gt;
&lt;/dl&gt;&lt;dl class=&quot;problem-content&quot; readability=&quot;31&quot;&gt;&lt;dt&gt;描述&lt;/dt&gt;
&lt;dd readability=&quot;13&quot;&gt;
&lt;p&gt;任何一个正整数都可以用2的幂次方表示。例如：&lt;/p&gt;
&lt;p&gt;    137=2&lt;sup&gt;7&lt;/sup&gt;+2&lt;sup&gt;3&lt;/sup&gt;+2&lt;sup&gt;0&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;同时约定方次用括号来表示，即a&lt;sup&gt;b&lt;/sup&gt;可表示为a(b)。由此可知，137可表示为：&lt;/p&gt;
&lt;p&gt;    2(7)+2(3)+2(0)&lt;/p&gt;
&lt;p&gt;进一步：7=2&lt;sup&gt;2&lt;/sup&gt;+2+2&lt;sup&gt;0&lt;/sup&gt;（2&lt;sup&gt;1&lt;/sup&gt;用2表示）&lt;/p&gt;
&lt;p&gt;        3=2+2&lt;sup&gt;0&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;所以最后137可表示为：&lt;/p&gt;
&lt;p&gt;    2(2(2)+2+2(0))+2(2+2(0))+2(0)&lt;/p&gt;
&lt;p&gt;又如：&lt;/p&gt;
&lt;p&gt;    1315=2&lt;sup&gt;10&lt;/sup&gt;+2&lt;sup&gt;8&lt;/sup&gt;+2&lt;sup&gt;5&lt;/sup&gt;+2+1&lt;/p&gt;
&lt;p&gt;所以1315最后可表示为：&lt;/p&gt;
&lt;p&gt;    2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;输入&lt;/dt&gt;
&lt;dd&gt;一个正整数n（n≤20000）。&lt;/dd&gt;
&lt;dt&gt;输出&lt;/dt&gt;
&lt;dd&gt;一行，符合约定的n的0，2表示（在表示中不能有空格）。&lt;/dd&gt;
&lt;dt&gt;样例输入&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;
137
&lt;/pre&gt;&lt;/dd&gt;
&lt;dt&gt;样例输出&lt;/dt&gt;
&lt;dd readability=&quot;-1&quot;&gt;
&lt;pre&gt;
2(2(2)+2+2(0))+2(2+2(0))+2(0)
&lt;/pre&gt;&lt;/dd&gt;
&lt;dt&gt;来源&lt;/dt&gt;
&lt;dd&gt;NOIP1998复赛 普及组 第一题&lt;/dd&gt;
&lt;/dl&gt;&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;三、案例解析&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;1.任何一个正整数都可以用2的幂次方的和表示，幂次是二进制表示中非0的位置数（右起记为0）。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2.二进制表示时，第0位为1表示为2（0），第1位为1表示为2，其余位为1递归处理，直至可以用2（0）、2进行表示。&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;四、源代码&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GetBin(&lt;span&gt;int&lt;/span&gt; n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{&lt;br/&gt;　　　　// 取n的第i位
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; ((n &amp;gt;&amp;gt; i) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; } 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt; fun(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;int&lt;/span&gt; add_flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;15&lt;/span&gt;; i &amp;gt;= &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(GetBin(n, i) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(add_flag == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 add_flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(i == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)　　//二进制表示时，第0位为1
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2(0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;             } 
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)　　//第1位为1
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                fun(i);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }      
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     cin &amp;gt;&amp;gt;&lt;span&gt; n; 
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    fun(n);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:12:00 +0000</pubDate>
<dc:creator>yaoone</dc:creator>
<og:description>递归 一、概念 函数调用自身。 注意：递归程序可能更加简洁，但是不一定节省时间。 二、案例 案例网址：http://cxsjsxmooc.openjudge.cn/2018t2fallw2/2/ 任何</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaoone/p/9683893.html</dc:identifier>
</item>
<item>
<title>如何打造亚秒级加载的网页1——前端性能 - .智子</title>
<link>http://www.cnblogs.com/mlw1814011067/p/9683919.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mlw1814011067/p/9683919.html</guid>
<description>&lt;p&gt;对于我们前端来说，页面的加载速度是直接影响到用户的体验度&lt;/p&gt;
&lt;p&gt;用户体验度是能直接决定最终的销售额的&lt;/p&gt;
&lt;p&gt;每增加延迟一秒，页面访问量降低11%，转化率降低7%&lt;/p&gt;
&lt;p&gt;如何提高页面的加载速度是前端工程师们必然要懂的&lt;/p&gt;
&lt;p&gt;那么我就来讲解一下可以从哪些方面来提高页面&lt;span&gt;的加载速&lt;/span&gt;度：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;页面加载速度影响因素——前端性能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;前端性能关键呈现路径所涉及的步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　1 .  DOM：浏览器在解析HTML时，会以递增的方式为HTML标记生成一种名为文档对象模型（DOM）的树状模型，&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　该模型描述了网页中包含的内容&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　2 . CSSOM：浏览器收到所有CSS后，会对其中包含的标记和类生成一种名为CSS对象模型的树状模型，并将样式信息附加在节点上。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　这个树描述了网页中所包含内容需要应用的样式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　3 . 呈现树（Render Tree）：通过将DOM与CSSOM结合在一起，浏览器可以构造出呈现树，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　其中包含了页面内容以及所要应用的样式信息&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　4 . 布局（Layout）：布局这一步中需要计算网页内容在屏幕上的实际位置和大小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　5 . 绘制（Paint）：最后一步将使用布局信息在屏幕上绘制像素&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;当然对此我们也是有办法应付的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面列出了各个方面处理性能的方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1）网页内容 ——  减少HTTP请求次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少DNS查询次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 避免页面跳转&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 缓冲ajax&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 延迟加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 提前加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少DOM元素数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 根据域名划分内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少iframe数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 避免404&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）服务器 —— 使用CDN&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　添加Expires 或 Cache-Control 报文头&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　Gzip 压缩传输文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　配置ETags&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　尽早flush输出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　使用GET Ajax请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　避免空的图片src&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　Cookie&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　减少cookie大小&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　页面内容使用无cookie域名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3） CSS —— 将样式表置顶&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 避免CSS表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 用&amp;lt;link&amp;gt;代替@import&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 避免使用Filters&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（4） JavaScript —— 将脚本置底&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　使用外部Javascript 和 Css文件&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　精简Javescript和Css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　去除重复脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　减少DOM访问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　使用智能事件处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（5） 图片 —— 优化图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 优化CSS Sprite&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 不要在HTML中缩放图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 使用小且可缓存的favicon.ico&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 移动客户端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 保持单个内容小于25KB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 打包组建成符合文档&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;这就是从前端方面来提高页面的加载速度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然  影响页面加载速度的并不只有前端性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还会有网络性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下次更新再来写网络性能了&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:06:00 +0000</pubDate>
<dc:creator>.智子</dc:creator>
<og:description>对于我们前端来说，页面的加载速度是直接影响到用户的体验度 用户体验度是能直接决定最终的销售额的 每增加延迟一秒，页面访问量降低11%，转化率降低7% 如何提高页面的加载速度是前端工程师们必然要懂的 那</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mlw1814011067/p/9683919.html</dc:identifier>
</item>
<item>
<title>夯实基础系列二：网络知识总结 - 花永伦</title>
<link>http://www.cnblogs.com/huayonglun/p/9683910.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huayonglun/p/9683910.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;无论是 C/S 开发还是 B/S 开发，无论是前端开发还是后台开发，网络总是无法避免的，数据如何传输，如何保证正确性和可靠性，如何提高传输效率，如何解决会话管理问题，如何在网络拥堵环境下采取措施。这些都是需要了解的。&lt;/p&gt;
&lt;p&gt;今天总结下与网络相关的知识，不是那么详细，但是包含了我认为重要的所有点。如果想深入了解的可以参考《图解HTTP[上野 宣]》、《图解TCP／IP（第5版）[竹下隆史]》以及计算机网络相关教材。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;p&gt;网络知识我做了 8 个方面的总结，包括DNS协议，HTTP协议，HTTPS协议，TCP协议，IP协议，TCP/IP，Web攻击，其他协议。以下对这些内容做一些简单的总结，同时我也有完整的思维导图，博客上不方便展示，若有需要，&lt;a href=&quot;http://huayonglun.com/about/&quot;&gt;联系我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/13458955-ca4330c1514c37c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;网络知识大纲&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;细节&quot;&gt;细节&lt;/h2&gt;
&lt;h3 id=&quot;dns-协议&quot;&gt;1. DNS 协议&lt;/h3&gt;
&lt;p&gt;作用：提供域名到IP地址之间的解析服务。或逆向从IP地址反查域名的服务&lt;/p&gt;
&lt;h3 id=&quot;http协议&quot;&gt;2. HTTP协议&lt;/h3&gt;
&lt;h5 id=&quot;特点&quot;&gt;2.1 特点&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;无状态&lt;/li&gt;
&lt;li&gt;使用URI定义互联网资源&lt;/li&gt;
&lt;li&gt;HTTP方法
&lt;ul&gt;&lt;li&gt;GET：获取资源&lt;/li&gt;
&lt;li&gt;POST:传输实体主体&lt;/li&gt;
&lt;li&gt;PUT：传输文件&lt;/li&gt;
&lt;li&gt;HEAD：获得报文首部&lt;/li&gt;
&lt;li&gt;DELETE：删除文件&lt;/li&gt;
&lt;li&gt;OPTIONS：询问支持的方法&lt;/li&gt;
&lt;li&gt;TRACE：追踪路径&lt;/li&gt;
&lt;li&gt;CONNECT：要求用隧道协议连接代理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;持久连接节省通信量&lt;/li&gt;
&lt;li&gt;管线化实现并行发送多个请求，而不需要一个接一个等响应&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;http-报文&quot;&gt;2.2 HTTP 报文&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;用于HTTP协议交互的信息称为HTTP报文&lt;/li&gt;
&lt;li&gt;请求报文
&lt;ul&gt;&lt;li&gt;报文首部
&lt;ul&gt;&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;请求首部字段&lt;/li&gt;
&lt;li&gt;通用首部字段&lt;/li&gt;
&lt;li&gt;实体首部字段&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;报文主体&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;响应报文
&lt;ul&gt;&lt;li&gt;报文首部
&lt;ul&gt;&lt;li&gt;状态行&lt;/li&gt;
&lt;li&gt;响应首部字段&lt;/li&gt;
&lt;li&gt;通用首部字段&lt;/li&gt;
&lt;li&gt;实体首部字段&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;报文主体&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;发送多种数据的多部分对象集合
&lt;ul&gt;&lt;li&gt;MIME&lt;/li&gt;
&lt;li&gt;multipart/form-data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内容协商
&lt;ul&gt;&lt;li&gt;服务器驱动协商&lt;/li&gt;
&lt;li&gt;客户端驱动协商&lt;/li&gt;
&lt;li&gt;透明协商&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;http状态码&quot;&gt;2.3 HTTP状态码&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;1XX：接收的请求正在处理&lt;/li&gt;
&lt;li&gt;2XX：请求正常处理完毕
&lt;ul&gt;&lt;li&gt;200 OK&lt;/li&gt;
&lt;li&gt;204 NoContent&lt;/li&gt;
&lt;li&gt;206 Partial Content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3XX：需要进行附加操作以完成请求
&lt;ul&gt;&lt;li&gt;301 Moved Permanenetly&lt;/li&gt;
&lt;li&gt;302 Found&lt;/li&gt;
&lt;li&gt;303 See Other&lt;/li&gt;
&lt;li&gt;304 Not Modified&lt;/li&gt;
&lt;li&gt;307 Temporary Redirect&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4XX：服务器无法处理请求
&lt;ul&gt;&lt;li&gt;400 Bad Request&lt;/li&gt;
&lt;li&gt;401 Unauthorized&lt;/li&gt;
&lt;li&gt;403 Forbidden&lt;/li&gt;
&lt;li&gt;404 Not Found&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5XX：服务器处理请求出错
&lt;ul&gt;&lt;li&gt;500 Internal Server Error&lt;/li&gt;
&lt;li&gt;503 Service Unavailable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;http1.1-和http1.0的区别&quot;&gt;2.4 HTTP1.1 和HTTP1.0的区别&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;可扩展性：定义Via头域，增加版本号的支持&lt;/li&gt;
&lt;li&gt;缓存
&lt;ul&gt;&lt;li&gt;增加对缓存的重激活机制：使用ETag头域描述一个资源&lt;/li&gt;
&lt;li&gt;增加Cache-Control头域支持可扩展的指令集&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;带宽优化：允许请求资源的某部分，而不是整个资源&lt;/li&gt;
&lt;li&gt;长连接
&lt;ul&gt;&lt;li&gt;HTTP/1.0只支持浏览器与服务器保持短暂的连接，浏览器的每次请求都要建立一个新的连接。&lt;/li&gt;
&lt;li&gt;而HTTP/1.1允许在一个TCP连接上可以传送多个HTTP请求和响应。HTTP/1.1协议的持续连接有两种方式，即非流水线方式和流水线方式。
&lt;ul&gt;&lt;li&gt;非流水线方式的特点是，客户在收到前一个响应后才能发出下一个请求；&lt;/li&gt;
&lt;li&gt;流水线方式的特点是，客户在收到HTTP的响应报文之前就能接着发送新的请求报文&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;cookie与session的区别&quot;&gt;2.5 Cookie与Session的区别&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;存取方式的不同
&lt;ul&gt;&lt;li&gt;Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比较艰难的。&lt;/li&gt;
&lt;li&gt;Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;隐私策略的不同
&lt;ul&gt;&lt;li&gt;Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。&lt;/li&gt;
&lt;li&gt;Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有效期上的不同
&lt;ul&gt;&lt;li&gt;Cookie的过期时间指定&lt;/li&gt;
&lt;li&gt;Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了浏览器该Session就会失效，因而Session不能完成信息永世有效的效果。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务器压力的不同
&lt;ul&gt;&lt;li&gt;Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。&lt;/li&gt;
&lt;li&gt;Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;浏览器支持的不同
&lt;ul&gt;&lt;li&gt;Cookie是需要客户端浏览器支持的。&lt;/li&gt;
&lt;li&gt;假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;跨域支持上的不同
&lt;ul&gt;&lt;li&gt;Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。&lt;/li&gt;
&lt;li&gt;Session则不会支持跨域名访问。Session仅在他所在的域名内有效。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;电脑访问网页的过程&quot;&gt;2.6 电脑访问网页的过程&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;用到的协议：DNS、HTTP、OSPF、IP、ARP&lt;/li&gt;
&lt;li&gt;过程描述
&lt;ol&gt;&lt;li&gt;DNS把域名解析成对应的IP&lt;/li&gt;
&lt;li&gt;发送一次请求，服务器返回一个永久重定向响应，这样浏览器就知道要访问的正确网址&lt;/li&gt;
&lt;li&gt;发送请求html的请求，这个连接过程基于TCP/IP三次握手四次挥手的，建立连接&lt;/li&gt;
&lt;li&gt;服务器返回一个html响应&lt;/li&gt;
&lt;li&gt;浏览器根据渲染引擎解析返回的html响应，呈现内容&lt;/li&gt;
&lt;li&gt;继续发送内嵌在html文件其他资源的请求，比如css、js、图片资源等&lt;/li&gt;
&lt;li&gt;加载整个页面&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;ping&quot;&gt;2.7 Ping&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;同网段
&lt;ol&gt;&lt;li&gt;主机A要去Ping主机B， 主机A会封装两层报文，主机A先检查自己MAC地址中是否有B的MAC地址，如果没有就向外发送一个ARP广播包&lt;/li&gt;
&lt;li&gt;交换机收到这个ARP后，会检查在交换机中是否包含B的MAC地址，如果有就直接返回给A；如果没有就向所有端口发送ARP，该网段的主机的MAC如果与B的MAC地址不同就丢弃，如果主机B收到了该ARP就马上返回相同格式的ARP&lt;/li&gt;
&lt;li&gt;这时主机A已经有了B的MAC地址，就把B的MAC地址封装到ICMP报中，向主机B发送一个回显请求&lt;/li&gt;
&lt;li&gt;主机B收到该报文后，知道是主机A的一个回显请求，就会返回一个相同格式的报文。这样就完成了同一个网段的Ping的过程&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;不同网段
&lt;ol&gt;&lt;li&gt;主机A要去Ping一个不同网段的主机C，主机A会去找网关转发&lt;/li&gt;
&lt;li&gt;如果主机A不知道网关的MAC地址，就会发送一个ARP广播一下，这样就知道了网关的MAC地址&lt;/li&gt;
&lt;li&gt;网关收到主机A的ICMP报文，根据上面的目的IP，会去查找路由表，找到一个出口指针，给主机C发送一个ICMP报文&lt;/li&gt;
&lt;li&gt;如果网关不知道主机C的MAC地址，就会给网关内所有的主机发送一个ARP，从而找到主机C的MAC地址&lt;/li&gt;
&lt;li&gt;主机C收到主机A的报文就会给主机A发送一个回显请求。这样就完成了不同网段的Ping的请求&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;路由器与交换机的区别&quot;&gt;2.8 路由器与交换机的区别&lt;/h5&gt;
&lt;p&gt;路由器包含了交换机的功能，交换机主要的作用是扩展接口&lt;/p&gt;
&lt;h5 id=&quot;确认访问用户身份的认证&quot;&gt;2.9 确认访问用户身份的认证&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;basic认证&lt;/li&gt;
&lt;li&gt;digest认证&lt;/li&gt;
&lt;li&gt;ssl客户端认证&lt;/li&gt;
&lt;li&gt;基于表单认证
&lt;ul&gt;&lt;li&gt;认证多半为基于表单认证&lt;/li&gt;
&lt;li&gt;session管理及cookie应用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;websocket&quot;&gt;2.10 websocket&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;全双工通信&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;&lt;li&gt;推送功能：支持服务器向客户端推送数据的推送功能&lt;/li&gt;
&lt;li&gt;减少通信量：一直保持连接&lt;/li&gt;
&lt;li&gt;HTTP连接建立后，需要完成一次握手动作
&lt;ul&gt;&lt;li&gt;握手---请求：用到HTTP的upgrade字段告知服务器通信协议发生变化&lt;/li&gt;
&lt;li&gt;握手---响应：对于之前的请求返回状态码101 switching protocols&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;成功握手确立WebSocket连接之后，通信不再使用HTTP的数据帧，而采用WebSocket独立的数据帧&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;https协议&quot;&gt;3. HTTPS协议&lt;/h3&gt;
&lt;h5 id=&quot;http缺点&quot;&gt;3.1 HTTP缺点&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;通信使用明文可能会被窃听
&lt;ul&gt;&lt;li&gt;解决方式
&lt;ul&gt;&lt;li&gt;通信加密。SSL和TLS组合使用&lt;/li&gt;
&lt;li&gt;内容加密&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不验证通信方身份就可能遭遇伪装
&lt;ul&gt;&lt;li&gt;解决方式：查明对手的证书&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无法证明报文完整性，可能已遭篡改
&lt;ul&gt;&lt;li&gt;数字签名，MD5并不可靠，应用HTTPS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;http加密认证完整性保护https&quot;&gt;3.2 HTTP+加密+认证+完整性保护=HTTPS&lt;/h5&gt;
&lt;h5 id=&quot;https是身披ssl外壳的http&quot;&gt;3.3 HTTPS是身披SSL外壳的HTTP&lt;/h5&gt;
&lt;h5 id=&quot;http采用混合加密机制&quot;&gt;3.4 HTTP采用混合加密机制&lt;/h5&gt;
&lt;h5 id=&quot;证明公开密钥正确性的证书&quot;&gt;3.5 证明公开密钥正确性的证书&lt;/h5&gt;
&lt;h5 id=&quot;ssl协议&quot;&gt;3.6 SSL协议&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;慢
&lt;ul&gt;&lt;li&gt;通信慢&lt;/li&gt;
&lt;li&gt;由于大量消耗CPU及内存等资源，导致处理速度变慢&lt;/li&gt;
&lt;li&gt;SSL必须进行加密处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;tcp协议&quot;&gt;4. TCP协议&lt;/h3&gt;
&lt;h5 id=&quot;传输层&quot;&gt;4.1 传输层&lt;/h5&gt;
&lt;h5 id=&quot;作用&quot;&gt;4.2 作用&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;提供可靠的字节流服务&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;大块数据分割成报文段segment&quot;&gt;4.3 大块数据分割成报文段(segment)&lt;/h5&gt;
&lt;h5 id=&quot;三次握手&quot;&gt;4.4 三次握手&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;发送端发带SYN标志的数据包给对方。&lt;/li&gt;
&lt;li&gt;接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。&lt;/li&gt;
&lt;li&gt;最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;握手某个阶段中断，TCP会以相同的顺序发送相同的数据包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;四次挥手&quot;&gt;4.5 四次挥手&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。&lt;/li&gt;
&lt;li&gt;服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。&lt;/li&gt;
&lt;li&gt;服务器B关闭与客户端A的连接，发送一个FIN给客户端A。&lt;/li&gt;
&lt;li&gt;客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;流量控制&quot;&gt;4.6 流量控制&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;TCP接收端对发送端发送多少字节的数据进行控制，防止接收端处理不及而丢失数据&lt;/li&gt;
&lt;li&gt;发送窗口的大小是受到接收窗口的控制的。&lt;/li&gt;
&lt;li&gt;发送窗口必须根据接收端的大小及时调整发送窗口的大小，这个机制保证了每次TCP传输的数据量都是接收端可以及时处理的。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;差错控制&quot;&gt;4.7 差错控制&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;保证接收端接收的数据是完整未受损伤的，是可靠性的重要保证。&lt;/li&gt;
&lt;li&gt;主要使用校验和、确认、超时重传这三个工具进行差错控制。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;拥塞控制&quot;&gt;4.8 拥塞控制&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;拥塞窗口
&lt;ul&gt;&lt;li&gt;发送方的窗口大小是接收窗口与拥塞窗口中的较小值。&lt;/li&gt;
&lt;li&gt;拥塞窗口的大小又取决于网络的拥塞状况。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拥塞策略
&lt;ul&gt;&lt;li&gt;慢开始&lt;/li&gt;
&lt;li&gt;拥塞避免&lt;/li&gt;
&lt;li&gt;拥塞检测&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拥塞控制流程
&lt;ol&gt;&lt;li&gt;由于刚开始不清楚网络的拥塞情况，所以会首先采用慢开始算法，开始阶段，窗口大小由1指数增大，直到窗口大小到达门限值。&lt;/li&gt;
&lt;li&gt;窗口大小到达门限值后，就开始执行拥塞避免算法，之后窗口值按照线性规律增大，直到出现超时或者到达最大的窗口大小值。&lt;/li&gt;
&lt;li&gt;这个时候，会开始执行拥塞检测算法，也就是把门限值变为窗口大小的一半，之后继续执行拥塞避免算法，窗口大小按照线性规律增大。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ip协议&quot;&gt;5. IP协议&lt;/h3&gt;
&lt;h5 id=&quot;网络层&quot;&gt;5.1 网络层&lt;/h5&gt;
&lt;h5 id=&quot;作用-1&quot;&gt;5.2 作用&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;把数据包传送给对方&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;条件&quot;&gt;5.3 条件&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;IP地址和MAC地址&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;使用arp协议凭借mac地址进行通信&quot;&gt;5.4 使用ARP协议凭借MAC地址进行通信&lt;/h5&gt;
&lt;h5 id=&quot;路由选择&quot;&gt;5.5 路由选择&lt;/h5&gt;
&lt;h3 id=&quot;tcpip&quot;&gt;6. TCP/IP&lt;/h3&gt;
&lt;h5 id=&quot;协议族&quot;&gt;6.1 协议族&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;IP、ICMP、DNS、TCP、FTP、HTTP、SNMP&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;分层管理&quot;&gt;6.2 分层管理&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;应用层
&lt;ul&gt;&lt;li&gt;决定向用户提供应用服务时通信的活动。FTP、HTTP、DNS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;传输层
&lt;ul&gt;&lt;li&gt;对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。TCP、UDP&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;网络层
&lt;ul&gt;&lt;li&gt;处理网络上流动的数据包&lt;/li&gt;
&lt;li&gt;规定了通过怎样的路径到达对方计算机，并把数据包传送给对方&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数据链路层
&lt;ul&gt;&lt;li&gt;处理连接网络的硬件部分&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;通信传输流&quot;&gt;6.3 通信传输流&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;发送端层与层之间传输数据，每经过一层时必定会被打上一个该层所属的首部信息&lt;/li&gt;
&lt;li&gt;接收端在层与层传输数据时，每经过一层时会把对应的首部消去。&lt;/li&gt;
&lt;li&gt;这种把数据信息包装起来的做法称为封装&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;web攻击&quot;&gt;7. Web攻击&lt;/h3&gt;
&lt;h5 id=&quot;因输出值转移不完全引发的安全漏洞&quot;&gt;7.1 因输出值转移不完全引发的安全漏洞&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;跨站脚本攻击XSS&lt;/li&gt;
&lt;li&gt;SQL注入攻击&lt;/li&gt;
&lt;li&gt;OS命令注入攻击&lt;/li&gt;
&lt;li&gt;HTTP首部注入攻击&lt;/li&gt;
&lt;li&gt;邮件首部注入攻击&lt;/li&gt;
&lt;li&gt;目录遍历攻击&lt;/li&gt;
&lt;li&gt;远程文件包含漏洞&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;因设置或设计上的缺陷引发的安全漏洞&quot;&gt;7.2 因设置或设计上的缺陷引发的安全漏洞&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;强制浏览&lt;/li&gt;
&lt;li&gt;不正确的错误消息处理&lt;/li&gt;
&lt;li&gt;开放重定向&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;因会话管理疏忽引发的安全漏洞&quot;&gt;7.3 因会话管理疏忽引发的安全漏洞&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;会话劫持&lt;/li&gt;
&lt;li&gt;会话固定攻击&lt;/li&gt;
&lt;li&gt;跨站点请求伪造(CSRF)&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;其他安全漏洞&quot;&gt;7.4 其他安全漏洞&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;密码破解&lt;/li&gt;
&lt;li&gt;点击劫持&lt;/li&gt;
&lt;li&gt;dos攻击&lt;/li&gt;
&lt;li&gt;后门程序&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;其他协议&quot;&gt;8. 其他协议&lt;/h3&gt;
&lt;h5 id=&quot;igmp协议&quot;&gt;8.1 IGMP协议&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;组管理协议，它帮助多播路由器创建以及更新与每一个路由接口相连的忠实成员列表（就是与该路由接口连接频率较高）。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;icmp协议&quot;&gt;8.2 ICMP协议&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;差错控制协议，弥补了IP协议没有差错纠正机制以及差错报告的缺憾。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;arp协议&quot;&gt;8.3 ARP协议&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;地址映射协议，可以把一个IP地址映射为MAC地址。&lt;/li&gt;
&lt;li&gt;把IP数据报封装成帧（以太网上对01串的分组定义）后才能通过物理网络，这时就需要目的主机的MAC地址&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 20 Sep 2018 15:04:00 +0000</pubDate>
<dc:creator>花永伦</dc:creator>
<og:description>前言 无论是 C/S 开发还是 B/S 开发，无论是前端开发还是后台开发，网络总是无法避免的，数据如何传输，如何保证正确性和可靠性，如何提高传输效率，如何解决会话管理问题，如何在网络拥堵环境下采取措施</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huayonglun/p/9683910.html</dc:identifier>
</item>
<item>
<title>CSS 小结笔记之伸缩布局（flex） - Assist</title>
<link>http://www.cnblogs.com/Assist/p/9682076.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Assist/p/9682076.html</guid>
<description>&lt;p&gt;之前块级元素布局在同一行，可以通过display或position或float来实现，而本篇介绍一个新的方法——flex（弹性布局）。&lt;/p&gt;
&lt;p&gt;flex 为和模型布局提供了极大地灵活性，所谓弹性布局即可根据大小判定自动伸缩。&lt;/p&gt;
&lt;p&gt;flex相关的各个属性如下：&lt;/p&gt;
&lt;p&gt;1、&lt;em&gt;&lt;strong&gt;display：flex；&lt;/strong&gt;&lt;/em&gt;在父盒子定义flex，子盒子才能使用flex属性&lt;/p&gt;
&lt;p&gt;2、&lt;em&gt;&lt;strong&gt;flex：none |&lt;a&gt;flex-grow &lt;/a&gt; &lt;a&gt;flex-shrink&lt;/a&gt;  &lt;a&gt;flex-basis&lt;/a&gt; &lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;设置子盒子的缩放比例，可以一起指定也可以单独指定。（均不可为负数）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;（1）none 相当于 flex： 0 0 auto；&lt;/p&gt;
&lt;p&gt;　　（2）flex-grow 用来规定盒子的扩展比率，即盒子相对于其他盒子能够分配到的空间的比值，没有指定flex的不参与分配。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son4 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920110548851-582996588.png&quot; alt=&quot;&quot; width=&quot;270&quot; height=&quot;148&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上面图中子盒子所占大小的计算方法为：&lt;/p&gt;
&lt;p&gt;　　　　a、.son1 没有指定flex 因此不参与分配大小为固定的200px；&lt;/p&gt;
&lt;p&gt;　　　　b、剩下的空间需要减去盒子固有的宽度来继续分配，即可分配空间为&lt;/p&gt;
&lt;p&gt;　　　　　　600-50-30-80=440px&lt;/p&gt;
&lt;p&gt;　　　　c、指定分配的比率为1:2:3 所以各自能分配到的大小为440*（1/6），440*（2/6），440*（3/6）&lt;/p&gt;
&lt;p&gt;　　　　d、最后可得出各个盒子的大小&lt;/p&gt;
&lt;p&gt;　　　　　　.son2: 440*（1/6）+50=123.3px&lt;/p&gt;
&lt;p&gt;　　　　　　.son3: 440*（2/6）+30=176.7px&lt;/p&gt;
&lt;p&gt;　　　　　　.son4: 440*（3/6）+80=300px&lt;/p&gt;
&lt;p&gt;　　（3）、flex-shrink 规定盒子收缩率，一般是在子盒子总体大小超过父盒子情况下，确定各个盒子的缩小比例。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920112137446-50730071.png&quot; alt=&quot;&quot; width=&quot;299&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上面图中子盒子所占大小的计算方法为：&lt;/p&gt;
&lt;p&gt;　　　　a、子盒子总体宽度大小为：100+200+300=600px&lt;/p&gt;
&lt;p&gt;　　　　b、超过父盒子 600-400=200px&lt;/p&gt;
&lt;p&gt;　　　　c、收缩比率为：1:2:3 ，则对收缩大小进行加权求值,求出收缩大小&lt;/p&gt;
&lt;p&gt;　　　　　　.son1:  200*[100*1/（1*100+2*200+3*300）]=14px&lt;/p&gt;
&lt;p&gt;　　　　　　.son2:  200*[200*2/（1*100+2*200+3*300）]=57px&lt;/p&gt;
&lt;p&gt;　　　　　 　.son1:  200*[300*3/（1*100+2*200+3*300）]=129px&lt;/p&gt;
&lt;p&gt;　　　　d、最终各个盒子大小为&lt;/p&gt;
&lt;p&gt;　　　　　　.son1: 100-14=86px；&lt;/p&gt;
&lt;p&gt;　　　　　　.son2: 200-57=143px；&lt;/p&gt;
&lt;p&gt;　　　　　　.son3: 300-129=171px；&lt;/p&gt;
&lt;p&gt;　　（4）、flex-basis：长度 |百分比&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 超过按照比例划分 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 35%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920113547357-1537211384.png&quot; alt=&quot;&quot; width=&quot;137&quot; height=&quot;138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　一般设置不超过盒子大小或者不超过100%，超过100%则按比例分配空间。&lt;/p&gt;
&lt;p&gt;　　　　如上图按7:6:10 来分配，设置为auto，则以自身大小来分配。&lt;/p&gt;
&lt;p&gt;　　（5）、常用复合属性&lt;/p&gt;
&lt;p&gt;　　　　　　flex：1相当于 flex：1 1 0%；&lt;/p&gt;
&lt;p&gt;　　　　　　flex：auto 相当于 flex：1 1 auto；&lt;/p&gt;
&lt;p&gt; 　　　　　　flex：none 相当于 flex：0 0 auto；&lt;/p&gt;
&lt;p&gt;　　　　　　 flex：0 none 或flex：initial  相当于 flex：0 1 auto；&lt;/p&gt;
&lt;p&gt;3、&lt;em&gt;&lt;strong&gt;flex-direction：row | row-reverse | column | column-reverse&lt;/strong&gt; &lt;/em&gt;调整株洲方向，即合适是水平分布还是垂直分布的，默认是水平方向。&lt;/p&gt;
&lt;p&gt;　　上面四个值分别是，水平| 水平反向| 垂直| 垂直反向 &lt;/p&gt;
&lt;p&gt;　　反向的意思是，盒子顺序是相反的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; column-reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920114849375-1871635353.png&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;em&gt;&lt;strong&gt;justify-content: flex-start | flex-end | center | space-between | space-around &lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;子盒子在父盒子中的水平对齐方式。　　　&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;　　flex-start ：默认值，项目向容器起始位置对齐（靠左对齐）&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　接下来只将justify-content 值改变，就不重复写代码了，只给出结果图&lt;/p&gt;
　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154557235-1702762149.png&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;108&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;　　flex-end：项目向容器结束位置对齐。（靠右对齐）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154636877-1122512237.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;117&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;39.5&quot;&gt;
&lt;p&gt;　　center：项目位于容器的中间。（水平居中）　　&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154723047-1251922394.png&quot; alt=&quot;&quot; width=&quot;202&quot; height=&quot;117&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;　　space-between：各个项目中间有空隙，但是开头和结尾紧贴容器（父盒子）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154816301-1030694346.png&quot; alt=&quot;&quot; width=&quot;206&quot; height=&quot;118&quot;/&gt;&lt;/div&gt;
&lt;p&gt;space-around：各个项目中间有空隙，且空隙距离相同（相当于每个盒子左右给了一个相同的margin值）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154913554-1770659470.png&quot; alt=&quot;&quot; width=&quot;213&quot; height=&quot;118&quot;/&gt;&lt;/div&gt;
&lt;p&gt;5、&lt;em&gt;&lt;strong&gt;align-items：flex-start | flex-end | center | baseline | stretch &lt;/strong&gt;&lt;/em&gt; 子盒子在父盒子中的垂直对齐方式&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; stretch&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162328762-650384822.png&quot; alt=&quot;&quot; width=&quot;144&quot; height=&quot;137&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　同样接下来几种只给出效果图&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　flex-start：上对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162454545-264395622.png&quot; alt=&quot;&quot; width=&quot;185&quot; height=&quot;158&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　flex-end ：下对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162548516-1324242970.png&quot; alt=&quot;&quot; width=&quot;160&quot; height=&quot;140&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　center：垂直居中对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162828357-1199846396.png&quot; alt=&quot;&quot; width=&quot;157&quot; height=&quot;125&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　baseline：与项目的第一行文字的基线对齐，因此当基线在同一条线上时，与flex-start一致&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162941952-1228370258.png&quot; alt=&quot;&quot; width=&quot;199&quot; height=&quot;197&quot;/&gt;&lt;/div&gt;
&lt;p&gt;6、&lt;strong&gt;flex-wrap：nowrap | wrap | wrap-reverse&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt; 当子盒子大小超过父盒子是是否换行&lt;/p&gt;
&lt;p&gt;　　nowrap：默认值，不换行。强行在一行显示，因此每个盒子的大小都会减少。&lt;/p&gt;
&lt;div readability=&quot;33&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; baseline&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nowrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920163852701-1065269145.png&quot; alt=&quot;&quot; width=&quot;136&quot; height=&quot;135&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　wrap：换行显示。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920164117427-1358510395.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;127&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　wrap-reverse：换行且倒着显示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920164201586-2095506863.png&quot; alt=&quot;&quot; width=&quot;121&quot; height=&quot;123&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;strong&gt;&lt;em&gt;flex-flow: flex-direction  flex-wrap; &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;  &lt;/em&gt;flex-flow 是flex-direction 和 flex-wrap 的简写，默认值是flex-flow： row wrap&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;align-content：flex-start | flex-end | center | space-between | space-around | stretch  &lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; wrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; stretch&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; width: 50px; &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165532048-531428214.png&quot; alt=&quot;&quot; width=&quot;116&quot; height=&quot;116&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　flex-start：上对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165705490-491690849.png&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　flex-end：下对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165756308-1400276262.png&quot; alt=&quot;&quot; width=&quot;131&quot; height=&quot;119&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　center：居中对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170105613-970952327.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;132&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　space-between ：与justify-content中的 space-between类似 最上一行 顶对齐，最下一行 底对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170342621-1855498015.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;118&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　space-around：与justify-content中的 space-around类似 各个行上下有空隙，且空隙距离相同（相当于每行上下给了一个相同的margin值）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170744294-72114019.png&quot; alt=&quot;&quot; width=&quot;136&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;em&gt;&lt;strong&gt;order&lt;/strong&gt;&lt;/em&gt;：设置子盒子显示顺序。值取整数，可以为负数，数值越小的排列方向越靠前。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; wrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-between&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; width: 50px; &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920171148784-951732357.png&quot; alt=&quot;&quot; width=&quot;122&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上述的9个属性，其中1、3、4、5、6、7、8是放在容器（父盒子）的属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而2、9是项目(子盒子)的属性&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;





</description>
<pubDate>Thu, 20 Sep 2018 14:19:00 +0000</pubDate>
<dc:creator>Assist</dc:creator>
<og:description>之前块级元素布局在同一行，可以通过display或position或float来实现，而本篇介绍一个新的方法——flex（弹性布局）。 flex 为和模型布局提供了极大地灵活性，所谓弹性布局即可根据大</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Assist/p/9682076.html</dc:identifier>
</item>
<item>
<title>复习面向对象 -- 继承 - 热爱前端的17号诶</title>
<link>http://www.cnblogs.com/sqh17/p/9664882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sqh17/p/9664882.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;本文是面向对象第三部分--继承，相对于前两个，篇幅过长，理解稍微难点，不过多思考多敲敲，会一下子茅塞顿开，就懂了，不太懂面向对象-创建对象的，可以看这篇文章，&lt;a href=&quot;https://www.cnblogs.com/sqh17/p/9664858.html&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;，不太懂面向对象-原型与原型链的，可以看这篇文章，&lt;a href=&quot;https://www.cnblogs.com/sqh17/p/9664878.html&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;面向对象继承&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;许多语言都支持两种继承方式：&lt;strong&gt;接口继承&lt;/strong&gt;和&lt;strong&gt;实现继承&lt;/strong&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;接口继承只继承方法签名&lt;/strong&gt;（方法签名由方法名称和一个参数列表（方法的参数的顺序和类型）组成，java所属）。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　而js中的函数没有签名，所以无法实现接口继承，只能实现实现继承，而&lt;strong&gt;实现继承主要依靠原型以及原型链实现的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　高程中写到：&lt;strong&gt;假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条&lt;/strong&gt;。这就是所谓原型链的基本概念&lt;/p&gt;
&lt;p&gt;　　js的继承是依据原型以及原型链来实现的，回顾前几节的知识，可以得知，&lt;span&gt;一个构造函数创建出来的实例，都可以访问到该构造函数的的属性，方法，还有构造函数的原型的属性以及方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先 先了解构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。&lt;/span&gt;&lt;span&gt;通俗的说：&lt;strong&gt;实例通过内部指针可以访问到原型对象，原型对象通过constructor指针，找到其构造函数。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;那么js中的继承的基本思路就是&lt;/span&gt;&lt;span&gt;&lt;span&gt;利用原型以及原型链的特性，改变内部指针的指向，进而实现继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;span&gt;原型链继承：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;js所有继承都基于原型链继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
console.log(tom.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'animal'&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'animal'    &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个例子中有创建了两个构造函数，Animal构造函数有一个type属性和feature方法。Cat构造函数有两个属性：name和color。实例化了一个Animal对象，并且挂载到了Cat函数的原型上，相当于重写了Cat的原型，所以Cat函数拥有Animal函数的所有属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　然后又Cat函数new出一个tom对象，tom对象拥有Cat函数的属性和方法，因此也拥有Animal的属性和方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　通过上面的例子，可以总结：&lt;strong&gt;通过改变构造函数的原型，进而实现继承。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　ps:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1 如果在继承原型对象之前，产生的实例，其内部指针还是只想最初的原型对象。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}
Cat.prototype.type &lt;/span&gt;= 'cat'&lt;span&gt;;
Cat.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}    
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先实例化对象，再重写原型,结果指针还是指向最初的原型&lt;/span&gt;
console.log(tom.name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'  ----- 是最初的type&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　从打印结果来看：new出来的tom对象，在Cat.prototype重写原型之后，依然还是指向没重写的原型上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2 在通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = 'small'&lt;span&gt;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用字面量添加新方法，会导致上一行代码无效&lt;/span&gt;
Cat.prototype =&lt;span&gt; {
    type:&lt;/span&gt;'cat'&lt;span&gt;,
    feature:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type)
    }
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
console.log(tom.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'  &lt;/span&gt;
console.log(tom.size)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined   ----- tom拿不到size属性&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由打印结果可知：tom这个对象拿不到将继承的size属性，所以用字面量添加属性或方法，会切断将继承的与实例之间的联系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　原型链继承并不是完美的，用原型链实现继承，&lt;strong&gt;有一定的问题存在&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1 首先 值类型与引用类型在参数传递时，方式是不一样的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　值类型 将值本身拷贝一份赋值给其他变量，若该值发生变化，也不会影响到其他变量。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　引用类型 将指针（内存中的地址）拷贝一份 赋值给其他变量；若内存中的地址内容发生改变，其他变量内的内容也会发生变化。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; a = 11&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a;

console.log(a,b) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11 11&lt;/span&gt;
b = 22&lt;span&gt;;
console.log(a,b) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11 22&lt;/span&gt;


&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt;{
    name:&lt;/span&gt;'peter'&lt;span&gt;,
    age:&lt;/span&gt;18&lt;span&gt;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; m =&lt;span&gt; obj;
console.log(m) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, age: 18}&lt;/span&gt;
m.name = 'tom'&lt;span&gt;;
m.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(obj) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, age: 22}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　同样的道理，&lt;strong&gt;在原型链继承中，包含引用类型值的原型属性会被所有实例共享&lt;/strong&gt;，如果某一个实例更改了属性或方法，会影响到原型属性，进而影响所有的实例。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = ['large','small'&lt;span&gt;];
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter','yellow'&lt;span&gt;)
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
tom.size.push('middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(tom.size);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　通过打印结果可知，在一个实例添加一个颜色时，同时也影响了其他实例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2 在高程上说还有个问题，在创建子类型（Cat）的实例时，不能向超类型（Animal）的构造函数中传递参数。意思就是&lt;strong&gt;没有办法在不影响所有对象实例的情况下，给超类型（Animal）的构造函数传递参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(type){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type =&lt;span&gt; type;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = ['large','small'&lt;span&gt;];
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(type,name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('animal','tom','blue'&lt;span&gt;);
console.log(tom.type); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　当给被继承的构造函数传参数时，发现为undefined，所以原型链继承无法传参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因此原型链继承有这两个问题，所以在实践中很少使用原型链继承。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　借用构造函数继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　借用构造函数继承的基本思想：就是在子类型构造函数的内部使用 apply() 和 call() 方法调用超类型构造函数里的属性或方法。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;ps：函数只不过是在特定环境中执行代码的对象&lt;/span&gt;&lt;span&gt;，因此通过使用 apply() 和 call() 方法也可以在（将来）新创建的对象上执行构造函数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter',22&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, size: Array[2], age: 18};&lt;/span&gt;
console.log(peter); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, size: Array[2], age: 22};&lt;/span&gt;
&lt;span&gt;
tom.size.push(&lt;/span&gt;'middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(peter.size); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
&lt;span&gt;
tom.say();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Uncaught TypeError: tom.say is not a function&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述打印的结果，我们可以得出以下结论：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;strong&gt;1&lt;/strong&gt; 可以往超类型（Animal）传参数，Animal可以接受一个参数，将参数赋值给一个属性，所以在Cat构造函数内部调用Animal时，就是给Cat的实例设置该属性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;ps：为了确保Animal 构造函数不会重写Cat的属性，可以在调用超类型构造函数后，再添加应该在子类型中。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = 'jerry'; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果该属性写在Animal.call(this,name);之前的话，没有作用，还是被调用的给覆盖了&lt;/span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2&lt;/strong&gt; 因为是子类型调用超类型，所以每个子类型调用的都是超类型的初始化的属性或内部方法。每个实例都互不影响。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;3&lt;/strong&gt; 超类型的原型上的方法对子类型不可见，不可被调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　借用构造函数继承最主要的就是子类型利用call或apply调用超类型的方式去使用该方法或属性。&lt;span&gt;但是很显然也有缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　1 由于每个子类型声明自己属性或方法，而且别人不能使用，所以不能复用。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2 无法调用超类型的原型上的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　组合继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　组合继承是采用了原型链继承和借用构造函数继承的方式。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　其基本思想就是：&lt;strong&gt;原型链继承实现对原型属性和方法的继承，借用构造函数继承实现对实例属性的继承。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;,name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Animal的属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal(name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Ainaml的原型上的方法。&lt;/span&gt;
Cat.prototype.constructor = Cat;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保证Cat的原型上的构造器对象还是指向Cat。&lt;/span&gt;
Cat.prototype.skill = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;'running'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter',22&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, size: Array[2], age: 18};&lt;/span&gt;
console.log(peter); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, size: Array[2], age: 22};&lt;/span&gt;
&lt;span&gt;
tom.size.push(&lt;/span&gt;'middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(peter.size); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
&lt;span&gt;
tom.say(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
peter.say(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面的例子：在Cat构造函数里使用call调用Animal里属性，并且在Cat的原型上实例化Animal，进而调用Animal原型上的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　ps:子类型扩展方法时要放在原型链继承之后，因为原型链继承后，重写了其constructor属性，导致没继承前的属性或方法失效。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Cat.prototype = &lt;span&gt;new&lt;/span&gt; Animal(name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Ainaml的原型上的方法。&lt;/span&gt;
Cat.prototype.constructor = Cat;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保证Cat的原型上的构造器对象还是指向Cat。&lt;/span&gt;
Cat.prototype.skill = &lt;span&gt;function&lt;/span&gt;(){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该一步要放在调用Animal原型方法之后，如果放在前面，会导致其skill方法失效。&lt;/span&gt;
    alert('running'&lt;span&gt;);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;这样融合两者的优点，摒弃了缺点。成为最常用的继承方式。&lt;/span&gt;&lt;span&gt;但是也有&lt;strong&gt;一个不足&lt;/strong&gt;：无论什么情况下都会调用两次超类型构造函数：1 在创建子类型原型的时候，2 在子类型构造函数内部。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　原型式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　原型式继承是道格拉斯.克罗克福德提出的继承方式，其基本思想是：&lt;strong&gt;借助原型可以基于已有的对象创建新对象，同时不必因此创建自定义类型&lt;/strong&gt;。主要函数如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; object(o){
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; F(){};
    F.prototype &lt;/span&gt;=&lt;span&gt; o;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F();
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个函数主要是在内部创建了一个构造函数，该构造函数的原型就是传来的对象（继承），并且返回这个构造函数的实例。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这种方式的&lt;strong&gt;要求&lt;/strong&gt;是必须有一个对象，作为另一个对象的基础，通过对象的浅拷贝的方式，创建这个对象的副本作为新对象使用，在该基础上进行修改。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; peter =&lt;span&gt; {
    name:&lt;/span&gt;'peter'&lt;span&gt;,
    age:&lt;/span&gt;18&lt;span&gt;,
    say:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
    }
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom =&lt;span&gt; object(peter);
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;
&lt;span&gt;
tom.name &lt;/span&gt;= 'tom'&lt;span&gt;;
tom.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {name: &quot;tom&quot;, age: 22}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述结果可知，新创建的对象，返回的是对象，但是打印tom.say()，出现的是peter，说明新对象调用了原型上的属性和方法。随后在修改后新对象的属性时，会返回新的属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　但是显然易见：此模式就是新对象是利用原要继承的对象挂载到原型上的原理，去使用原型上的属性和方法，然后修改其属性和方法。同样如果不修改属性值，会被所有实例共享。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;主要适用于：在没必要兴师动众的创建构造函数，而只想让一个对象与另一个对象保持类似的情况下，可以使用原型式继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在es5出来一个新方法，可以替代克罗克福德创建的函数: &lt;span&gt;Object.create()&lt;/span&gt;，前提条件只传一个参数情况下。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; tom =&lt;span&gt; Object.create(peter);
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;
&lt;span&gt;
tom.name &lt;/span&gt;= 'tom'&lt;span&gt;;
tom.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {name: &quot;tom&quot;, age: 22}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;tip:&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Object.create()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　接受两个参数：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　1.必需。 要用作原型的对象。可以为 null。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2.可选。 包含一个或多个属性描述符的 JavaScript 对象。“数据属性”是可获取且可设置值的属性。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　数据属性描述符包含 value 特性，以及 writable、enumerable 和 configurable 特性。如果未指定最后三个特性，则它们默认为 false。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　返回值：一个具有指定的内部原型且包含指定的属性（如果有的话）的新对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄生式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　寄生式继承也是克罗克福德提出的，并在原型式继承上进行推广的。其基本思想就是：&lt;strong&gt;即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回这个对象。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　该继承方式最大的特点就是&lt;strong&gt;封装成一个函数，在内部扩展对象的属性或方法&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inherit(o){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clone = Object.create(o);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过调用函数创建一个对象&lt;/span&gt;
    clone.type = 'people';    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩展对象属性或方法&lt;/span&gt;
    clone.say=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; clone;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter =&lt;span&gt; {
    name:&lt;/span&gt;'peter'&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; perterSon =&lt;span&gt; inherit(peter);
console.log(perterSon.type);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; people&lt;/span&gt;
perterSon.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　inherit函数中返回一个新创建的对象，这个对象有扩展的方法和属性，另一个对象在调用这个方法时会继承扩展属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　由此可见，扩展方法已经写死了，所以不能不复用，进而降低效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;使用情况：在主要考虑对象而不是自定义类型和构造函数的情况下，可以采用寄生式继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　寄生组合式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在组合继承的方式中，有一个不足，就是多次调用超类型构造函数，为了避免这个情况，寄生组合式继承就出现了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　其基本思路是：通过借用构造函数来继承属性，用原型链的混成形式来继承方法。不必为了指定子类型的原型而调用超类型的构造函数。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　最简单的说法：&lt;strong&gt;使用寄生式继承来继承超类型的原型，然后将结果指定给子类型的原型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inheritPrototype(sub,supers){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clone =&lt;span&gt; Object.create(supers.prototype);
    clone.constructor &lt;/span&gt;=&lt;span&gt; sub;
    sub.prototype &lt;/span&gt;=&lt;span&gt; clone;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个函数实现了三个步骤：（先传两个参数，一个子类型构造函数sub，一个超类型构造函数super。）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　1 创建超类型原型的一个副本。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2 为创建的副本添加constructor属性，从而弥补重写原型而失去的默认的constructor属性。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　3 将新创建的对象（副本）赋值给子类型的原型。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name); 
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
inheritPrototype(Cat,Animal);
Cat.prototype.skill &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;'running'&lt;span&gt;)
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cat {name: &quot;tom&quot;, size: Array(2), age: 18}&lt;/span&gt;
tom.say();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
tom.skill();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; running&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述可以得知：也能实现组合继承所实现的方案，只不过只调用了一次超类型构造函数，提高了效率，同时原型链也能保持不变，能够使用instanceof和isPrototypeOf()方法,组合继承也是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;console.log(tom &lt;span&gt;instanceof&lt;/span&gt; Cat) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true;&lt;/span&gt;
console.log(tom &lt;span&gt;instanceof&lt;/span&gt; Animal) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　tip：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;1 instanceof&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。返回值是一个bool。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;obj &lt;span&gt;instanceof&lt;/span&gt; Object &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例obj在不在Object构造函数中&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　　意思就是：检测Object.prototype是否存在于参数obj的原型链上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2 isPrototypeOf()&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该函数用于指示对象是否存在于另一个对象的原型链中。如果存在，返回true，否则返回false。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该方法属于Object对象，由于所有的对象都&quot;继承&quot;了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;10.312087912088&quot;&gt;
&lt;p&gt;后记：&lt;/p&gt;

&lt;p&gt;　　文章有不对或者不理解的地方，请私信或者评论，一起讨论进步。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;　　javascript高级程序设计（第三版）&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Thu, 20 Sep 2018 14:09:00 +0000</pubDate>
<dc:creator>热爱前端的17号诶</dc:creator>
<og:description>本文是面向对象第三部分--继承，相对于前两个，篇幅过长，理解稍微难点，不过多思考多敲敲，会一下子茅塞顿开，就懂了，不太懂面向对象-创建对象的，可以看这篇文章，传送门，不太懂面向对象-原型与原型链的，可</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sqh17/p/9664882.html</dc:identifier>
</item>
<item>
<title>给信息安全爱好者的一封信 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</guid>
<description>&lt;h2 id=&quot;学习信息安全的心路历程&quot;&gt;学习信息安全的心路历程&lt;/h2&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;我从华为回来以后，陆续收到了很多封来信，其中提到最多的就是该如何学习信息安全这一领域的东西。我相信很多朋友无非就是对电影里面的黑客几行代码入侵政府网站的场景十分的敬佩与仰慕，当然我也不例外。作为一个正义的白帽子，我多啰嗦几句，我们必须贯彻落实网络安全基本法，学技术并不是为了去犯罪，我希望从此文章中受益的朋友们能够热爱开源，有无私奉献的精神，能够在不久的将来为国家网络安全事业尽自己的一点绵薄之力。作为一个过来人，我结合自己坎坷的学习历程谈谈我学习信息安全这一领域的心路历程吧。&lt;/p&gt;
&lt;h3 id=&quot;认清方位&quot;&gt;认清方位&lt;/h3&gt;
&lt;p&gt;有些朋友曾经和我畅谈心扉，初高中的厌学，让他早早地对学习丧失了兴趣，高考没考上本科，顺应家里人的要求，选择了一个专科院校，我曾实地勘测过专科院校，有些学校占地面积还没我曾经高中上的学校大，一个学校学生总共几百人，学费可能要好几万，倘若家庭条件不太好，这无疑就是给家里带来了很大的经济负担，再者还有一群这样的人，他们平常成绩还不错，但高考那一会儿，由于某种缘故考试失利了，这对很多人来讲无疑是痛苦的，挫败感油然而生。这一类的同学有部分同学回去复读了，更多的人可能连复读的机会都没有，直接选择一所差一点的学校学着自己不感兴趣的专业。&lt;/p&gt;
&lt;p&gt;永远记住，高考的失利绝不影响你未来的发展，一切都取决于你对生活的态度。虽然你起点比人家低，但只要不自甘堕落，在大学里面完全可以重新开始，一切还来得及。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命运给你一个比别人低的起点，是想告诉你，让你用你的一生去奋斗出一个绝地反击的故事。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;把握机遇&quot;&gt;把握机遇&lt;/h3&gt;
&lt;p&gt;在大学里面，有很多东西值得你去学习，有很多东西值得你去做。在我看来，大学是一个开放、包容的大集体，又不乏是一个小社会。我曾出席过我爸的同学聚会，感悟很深刻。当年明明都是同一个大学毕业的学生，短短二十年之久，你会发现，人与人之间的差距竟会如此之大。有些同学家里几套别墅，开着豪车，而有些同学却只能每月领着微薄的工资，过着十分平淡的生活。&lt;/p&gt;
&lt;p&gt;大学以前，你可能会因为成绩不好，遭到老师和同学们的排挤，上了大学以后，你大可不必担心这个问题。大学是一个展现自我的舞台。在这里，你可以尽情地发挥自己的才能，积极地去参加各种竞赛和活动就好了。因为在这里，大家都是在同一起跑线上。&lt;/p&gt;
&lt;p&gt;我不是个擅长交往的人，所以我更加不希望我一直都是这样子，不知道是从哪里寻来的这股子儿劲，参加了各种活动和竞赛，参加学生会，唱歌，跳舞，弹吉他，写新闻稿，做主持人，做后期影楼剪辑，乒乓球，网球，排球，羽毛球，篮球，双截棍，ACM，机器学习，数据挖掘，人工智能，前端，后端，信息安全等等，后来我还当了一个公益社团的副社长，只要有机会，我就去尝试，去学习。虽然这一切过的并不是那么顺利，我也遇到了许多前所未有的问题，各种的无奈与辛酸，但是回想起那些日子的点点滴滴，你会发现，你做的这一切都是值得的，即便是你不喜欢的，至少你曾经经历过，你通过这样不断地尝试与探索以后，你会更加地清楚，你真正想要的是什么。这个世界不缺少展现自我的舞台，就看你愿不愿意去抓住这个机会了。&lt;/p&gt;
&lt;p&gt;学生会是个真正锻炼你综合技能的地方，虽然学长学姐们会跟你们说，学生会里面有多么多么黑暗，我不否认，因为我曾经也是学生会的一份子，为了争夺学生会主席，部长之类的，可能会闹出很大的动静，但你不能因为里面黑暗就去远离它，这样只会让里面的风气变得越来越糟糕。你觉得不好，你可以试图去改变，去提出你的观点，不要总是一味的去逃避责任，既然你是其中的一员，你就有义务站出来。站出来是一种勇气，可以树立你的威信。假使你无法改变环境，但是我们可以改变自己。我们不是来适应这个社会的，我们是来改变社会的。你不努力坚持到最后，你永远不知道是不是能改变什么。&lt;/p&gt;
&lt;h3 id=&quot;志存高远心无旁骛&quot;&gt;志存高远，心无旁骛&lt;/h3&gt;
&lt;p&gt;从大一开始到现在，我也陆续收到了不少于十份的企业内推，有推荐我做前端的，也有做后端开发的，有做.net的，也有做量化投资的，甚至还有目前非常热门的大数据，人工智能的，企业有小到前两年刚创办成立的，也有大到作为一线码农向往的BAT企业。别人总是这么问我，你有这么好的机会为啥不现在就去呢，其实我想说的是，有些东西是虚浮的，它会干扰你的正常作息，不要因为BAT现在向你投橄榄枝，你就已经达到了它们企业的要求了，也许人家只是认为你有潜力，希望你再接再厉，把自己的能力历练到极致而已，将来有机会为企业为国家献出自己的一份力量而已。所以我经常是笑而不语，也许这才是作为一个读书人应该要有的心态。&lt;/p&gt;
&lt;p&gt;我也坚持写博客已经一年零七个月了，想想今年2月份写年终总结的时候，当时我才263个粉丝，短短五个月，我粉丝增加了700多个，这一切离不开我对开源的热爱，我会继续坚持创作，也希望有一天我能成为博客园的推荐博客。&lt;/p&gt;
&lt;p&gt;无论是在职场还是在学校，作为一个白帽子，我们应该始终秉承着无私奉献的精神，你做的一切总有一天一定会有人看到。&lt;/p&gt;
&lt;p&gt;我们要把目标定的长远一些，不要为了眼前的蝇头小利，而放弃了本该属于你的东西。要相信，你的人生不能止步于此，有大好的未来在等待着你去探索，去追寻。&lt;/p&gt;
&lt;h3 id=&quot;没有环境就创造环境&quot;&gt;没有环境就创造环境&lt;/h3&gt;
&lt;p&gt;作为一个过来人，我总是以浅显易懂的方式讲述着我所学到的一切知识，我曾经是吃过这样的亏。&lt;/p&gt;
&lt;p&gt;我学信息安全这块的时候，最开始接触到的是CTF，我在i春秋上也看了入门的教程，并且把它总结成了&lt;a href=&quot;https://www.cnblogs.com/ECJTUACM-873284962/p/6691817.html&quot;&gt;文章&lt;/a&gt;。可能你看到这里的时候会有点懵，要学这么多东西嘛？我目前是学web方向的，二进制方面略懂，在web方向这块，我最开始也是很懵逼，但是没办法，我就照着这种想法学呗，国内对信息安全这块的资源实在是太少了，所以想自学入门这块真的很难很难(亲身经历)，然后我在短短地半年时间自学了十几门语言，刷了一堆水题(很大一部分都是看题解学套路)，基本上没什么提高，可能仅仅只是知道有这个套路。当时我的想法就是读研的时候学信息安全方向就好了。努力的孩子运气不会太差，后来我有幸参加南开大学的夏令营，在那里遇到了一群志同道合的伙伴，每天我们在激烈的学习和讨论中度过，那段时间真的很快乐。得益于那短短地十天学习生涯，我对学信息安全这块不能说学的很好，至少不会变的很迷茫，至少知道自己要做什么。&lt;/p&gt;
&lt;p&gt;在大学里，很多时候你在学校可能很难找到一群志同道合的人，或是在学校里可能没有很浓烈的学习氛围，你可以考虑建立一个兴趣小组，多去闲逛你想学的那个方向的论坛或者博客，在网上结交一些和你有着相同兴趣爱好的小白一起努力。你需要明确你想学哪个方向，目前主流的是二进制、 &lt;code&gt;Web&lt;/code&gt; 和密码学。Web对知识面的要求是很广的，常用的语言比如Python，Java，PHP以及他们涉及到的一些框架，如Flask，Spring，ThinkPHP，还有常见的服务器及数据库等等我们都必须非常的熟悉，所以自古有句话，懂开发才能懂安全。所以我的建议是先去好好做开发，做五年开发以后再回来学安全，你会更加的得心应手。我不建议没有开发经验的小伙伴们学安全，这样学下去会走很多弯路。&lt;/p&gt;
&lt;p&gt;我贴一张学习路线图，仅供参考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1100338/201809/1100338-20180920212749440-1160227265.png&quot; alt=&quot;CTF-Learning&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;向比你优秀的人学习&quot;&gt;向比你优秀的人学习&lt;/h3&gt;
&lt;p&gt;向比你优秀的人看齐，站在比你优秀的人一边，自然而然你也会变得更加优秀。&lt;/p&gt;
&lt;p&gt;我在南开大学学习的那些日子，我真正意义上体会到了这句话的含义：比你优秀的人比你还努力。成功来之不易，即使是天才都需要不断地学习去充实自我。&lt;/p&gt;
&lt;h3 id=&quot;贵在坚持永不言弃&quot;&gt;贵在坚持，永不言弃&lt;/h3&gt;
&lt;p&gt;我相信大家坚持到现在做过最久的一件事就是读书，其实你想想看，读书应该是最难的一件事，你从3岁就开始上幼儿园，一直念到本科毕业，硕士毕业，甚至博士毕业，这么长的时间你都能坚持下来，你还有什么事情做不到呢？&lt;/p&gt;
&lt;p&gt;坚持是一种态度，源自内心的驱动力，兴趣才是最好的导师，选一个你感兴趣的方向坚持下来，不久的将来你一定会取得属于你的一番事业。&lt;/p&gt;
&lt;h3 id=&quot;靠别人不如靠自己&quot;&gt;靠别人不如靠自己&lt;/h3&gt;
&lt;p&gt;不要总想着把希望给予在别人身上，你能够依赖的只有你自己。别人的时间也是时间，别人也没有义务帮你做任何事情，帮人是情分，不帮是本分。况且现在的互联网发展太迅猛了，你想找的知识几乎都能通过Google找到，所以自己多花一点时间找一下，这样也可以节约大家的时间。&lt;/p&gt;
&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;说了这么多，无非就是几个方面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;认清自己的方位&lt;/li&gt;
&lt;li&gt;把握机遇&lt;/li&gt;
&lt;li&gt;做最适合自己的选择&lt;/li&gt;
&lt;li&gt;向优秀的人靠齐&lt;/li&gt;
&lt;li&gt;多一些坚持，少一些惰性&lt;/li&gt;
&lt;li&gt;多去承担一些责任&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上这些都是结合我这些年的经历，我希望写了这么多，能够真心的帮助到看完此文的所有小伙伴们。&lt;/p&gt;
&lt;p&gt;作为一个还在为学业奔波的学生，我也希望你们能关注支持推荐下博主，博主因为有你们的支持，才能创作出更多优秀的作品，对于每一个支持我的粉丝们，我也在这里对你们说一声由衷的感谢。&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 13:31:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<og:description>学习信息安全的心路历程 前言 我从华为回来以后，陆续收到了很多封来信，其中提到最多的就是该如何学习信息安全这一领域的东西。我相信很多朋友无非就是对电影里面的黑客几行代码入侵政府网站的场景十分的敬佩与仰</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</dc:identifier>
</item>
</channel>
</rss>