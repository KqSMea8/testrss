<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>深入学习使用ocr算法识别图片中文字的方法 - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/9428909.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/9428909.html</guid>
<description>&lt;p&gt;　　公司有个需求，简单点说需要从一张图片中识别出中文，通过python来实现，当然其他程序也行，只要能实现，而小编主要学习python，所以就提了python。一个小白在网上遨游了一天，终于找到一丝丝思绪，特意在此分享，希望大神提出宝贵的意见。&lt;/p&gt;
&lt;p&gt;　　今天还是在学习OCR算法中，但是好像自己摸索确实比较难一点，而且python实现图片中文识别的方法还是不多，所以我打算记录一下自己学习的过程。今天看到一个菜鸟都可以用的开源项目，那就是OCR开源项目tesseract，可能对于还是菜鸟的我来说，最好不过了，可以试试此项目，还可以看看源码，何乐而不为呢！&lt;/p&gt;
&lt;p&gt;　　OCR开源项目很多，给大家一个链接，这个链接列出了现有的比较出名的OCR开源项目，链接如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　从上面的排名可以看到，Tesseract是排在第一名的！所以下面就认真学习一下Tesseract。首先介绍一下Tesseract，然后安装，测试，了解其不足等等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
     Tesseract的OCR引擎目前已作为开源项目发布在Google Project，
其项目主页在这里查看https://github.com/tesseract-ocr， 

    它支持中文OCR，并提供了一个命令行工具。python中对应的包是
pytesseract. 通过这个工具我们可以识别图片上的文字。
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;一    Tesseract的安装测试使用&lt;/h2&gt;
&lt;h3&gt;1.1   小编的开发环境如下：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;windows 7 &lt;/li&gt;
&lt;li&gt;python 3.6&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;1.2   下载安装包&lt;/h3&gt;
&lt;p&gt;　　首先下载Tesseract在Windows下的安装版。(因为在国外访问不了谷歌，所以别人FQ下载了下来，这里给大家百度网盘链接)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1i56Uxlr&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1i56Uxlr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　根据https://github.com/tesseract-ocr/tesseract/wiki，找到非官方的安装包，好像只看到64位的安装包　　　　http://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe，下载后直接安装即可，但是要记得你的安装目录，我们等会配置环境变量要用。&lt;/p&gt;
&lt;p&gt;　　如果不是做英文的图文识别，还需要下载其他语言的识别包https://github.com/tesseract-ocr/tesseract/wiki/Data-Files。&lt;/p&gt;
&lt;p&gt;　　简体字识别包：https://raw.githubusercontent.com/tesseract-ocr/tessdata/4.00/chi_sim.traineddata&lt;/p&gt;
&lt;p&gt;　　繁体字识别包：https://github.com/tesseract-ocr/tessdata/raw/4.0/chi_tra.traineddata&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装python对应的包：pytesseract&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
pip install pytesseract
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.3    安装Tesseract&lt;/h3&gt;
&lt;p&gt;　　下载下来之后一路Next安装好，然后在开始菜单找到其控制台引导程序，如下图所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
使用Tesseract ocr有两种方式：
    动态库方式 libtesseract和执行程序方式 tesseract.exe

    小编使用的是第二个方式，也方便Python调用（主要是小编比较菜）。
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808095145983-539063564.png&quot; alt=&quot;&quot;/&gt;&lt;/h3&gt;
&lt;h3&gt; 1.4   测试英文字符识别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　上面的安装包里自带了已经训练好的英文-拉丁文识别数据~所以我们先来测试一下英文字符的识别吧~识别图像如下：&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;1.4.1 &lt;strong&gt;把上面的图片放到Tesseract的安装目录下，如下图所示：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808100258431-966210938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;1.4.2  &lt;strong&gt;打开上面提到的控制台窗口，如下图所示：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808095850403-1081388779.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;1.4.3  &lt;strong&gt;在窗口中输入命令：“tesseract.exe 0.jpg 1”，并回车，如下图所示：&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
01.jpg代表待识别的源文件，1代表输出文件名，默认输出格式是txt文件格式！

注意，上面的 lang之前是-l 而不是-1！
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808102045455-180046884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;1.4.4 &lt;strong&gt;让我们先查看一下01.jpg照片，如下图：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808100238499-752517504.png&quot; alt=&quot;&quot; width=&quot;508&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;1.4.5  &lt;strong&gt;在安装目录下生成了1.txt文件，识别结果如下图所示：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808102153249-795133949.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　既然安装好了，测试也可以了，我们就进行实战，做图像识别。&lt;/p&gt;
&lt;h2&gt;二   python用tesseract-ocr做图像识别&lt;/h2&gt;
&lt;p&gt;　　虽然说一行代码可以搞定识别图片，但是我们需要导入两个库，这是别人写好的封装好的库文件。只有导入人家库，我们才能识别一行代码实现图片文字。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这里我们需要用到两个库：pytesseract和PIL&lt;/li&gt;
&lt;li&gt;同时我们还需要安装识别引擎tesseract-ocr&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2.1   pytesseract和PIL的安装&lt;/h3&gt;
&lt;p&gt;　　安装这两个包可以借助pip &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
- 1，命令行安装 
pip install PIL 
pip install pytesseract 

- 2，如果你用的pycharm编辑器，就可以直接借助pycharm实现快速安装。 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;2.2  大概介绍下相关模块的概念&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;　　Python-tesseract 是光学字符识别Tesseract OCR引擎的Python封装类。能够读取任何常规的图片文件(JPG, GIF ,PNG , TIFF等)并解码成可读的语言。在OCR处理期间不会创建任何临文件&lt;/p&gt;
&lt;p&gt;　　PIL （Python Imaging Library）是 Python 中最常用的图像处理库，目前版本为 1.1.7，我们可以 &lt;a href=&quot;http://www.pythonware.com/products/pil/index.htm&quot;&gt;在这里&lt;/a&gt; 下载学习和查找资料。&lt;/p&gt;
&lt;p&gt;　　Image 类是 PIL 库中一个非常重要的类，通过这个类来创建实例可以有直接载入图像文件，读取处理过的图像和通过抓取的方法得到的图像这三种方法。&lt;/p&gt;
&lt;p&gt;　　python对图像的处理比较常见的是用pytesseract识别验证码，要安装pytesseract库，必须先安装其依赖的PIL及tesseract-ocr，其中PIL为图像处理库，而后面的tesseract-ocr则为google的ocr识别引擎。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
    下载链接：http://www.waitalone.cn/python-php-ocr.html   

    该链接文档描述了如何配置相关环境，以及识别验证码的python代码，
总结起来就三步：    安装PIL.exe；
                           安装tesseract-ocr-setup.exe;
                           安装pip install pytesseract    
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.3   解决python2.X中PIL在Python3.X中不能使用&lt;/h3&gt;
&lt;p&gt; 　　目前PIL的官方最新版本为1.1.7，支持的版本为python 2.5, 2.6, 2.7，并不支持python3，经查询python3.X用pillow代替，进入DOS命令行窗口，敲入以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
pip install pillow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　提示安装成功，再运行程序没有问题。&lt;/p&gt;
&lt;h3&gt; 2.4 正式识别图片中的文字（包括简单的英文和复杂的英文）&lt;/h3&gt;
&lt;h4&gt;2.4.1 &lt;strong&gt;下面进入正题，我们识别下面的东西，看图（两种情况）：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808150614171-645532159.png&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;526&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808153752935-1760771928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2.4.2  python&lt;strong&gt;代码如下：　　&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import pytesseract
from PIL import Image

#打开验证码图片
image = Image.open('02.jpg')
#加载一下图片防止报错，此处可以省略
image.load()
#调用show来展示图片，调试用此处可以省略
image.show()
text = pytesseract.image_to_string(Image.open('02.jpg'))
print(text)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;2.4.3  查看运行结果，运行后，结果如下：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808150731557-1096163265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226410/201808/1226410-20180808153821499-1832501032.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2.4.5 总结&lt;/h4&gt;
&lt;p&gt;　　从上面我们可以发现，运行代码后的结果， 简单的图片识别率还是可以的，但是复杂的话 就...，所以希望自己继续学习，继续寻找有用的库。&lt;/p&gt;
&lt;h2&gt;三   Image模块的用法介绍（转）&lt;/h2&gt;
&lt;h3&gt;3.1  简介&lt;/h3&gt;
&lt;p&gt;    图像处理是一门应用非常广的技术，而拥有非常丰富第三方扩展库的 Python 当然不会错过这一门盛宴。PIL （Python Imaging Library）是 Python 中最常用的图像处理库，目前版本为 1.1.7，我们可以 &lt;a href=&quot;http://www.pythonware.com/products/pil/index.htm&quot;&gt;在这里&lt;/a&gt; 下载学习和查找资料。&lt;/p&gt;
&lt;p&gt;    Image 类是 PIL 库中一个非常重要的类，通过这个类来创建实例可以有直接载入图像文件，读取处理过的图像和通过抓取的方法得到的图像这三种方法。&lt;/p&gt;
&lt;h3&gt;3.2  使用&lt;/h3&gt;
&lt;p&gt;    导入 Image 模块。然后通过 Image 类中的 open 方法即可载入一个图像文件。如果载入文件失败，则会引起一个 IOError ；若无返回错误，则 open 函数返回一个 Image 对象。现在，我们可以通过一些对象属性来检查文件内容，即：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
1 &amp;gt;&amp;gt;&amp;gt; import Image
2  &amp;gt;&amp;gt;&amp;gt; im = Image.open(&quot;j.jpg&quot;)
3  &amp;gt;&amp;gt;&amp;gt; print im.format, im.size, im.mode
4 JPEG (440, 330) RGB
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里有三个属性，我们逐一了解。&lt;/p&gt;
&lt;p&gt;        format : 识别图像的源格式，如果该文件不是从文件中读取的，则被置为 None 值。&lt;/p&gt;
&lt;p&gt;        size : 返回的一个元组，有两个元素，其值为象素意义上的宽和高。&lt;/p&gt;
&lt;p&gt;        mode : RGB（true color image），此外还有，L（luminance），CMTK（pre-press image）。&lt;/p&gt;
&lt;h3&gt;3.3 简单的几何变化&lt;/h3&gt;
&lt;p&gt;  色彩空间变换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
convert() : 该函数可以用来将图像转换为不同色彩模式。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   图像增强。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
 Filters : 在 ImageFilter 模块中可以使用 filter 函数来使用模块中
一系列预定义的增强滤镜。
&lt;/pre&gt;

&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt;out = im.resize((128, 128))                     

 &amp;gt;&amp;gt;&amp;gt;out = im.rotate(45)                             #逆时针旋转 45 度角。

 &amp;gt;&amp;gt;&amp;gt;out = im.transpose(Image.FLIP_LEFT_RIGHT)       #左右对换。

 &amp;gt;&amp;gt;&amp;gt;out = im.transpose(Image.FLIP_TOP_BOTTOM)       #上下对换。

 &amp;gt;&amp;gt;&amp;gt;out = im.transpose(Image.ROTATE_90)             #旋转 90 度角。

 &amp;gt;&amp;gt;&amp;gt;out = im.transpose(Image.ROTATE_180)            #旋转 180 度角。

&amp;gt;&amp;gt;&amp;gt;out = im.transpose(Image.ROTATE_270)            #旋转 270 度角。
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 08 Aug 2018 07:54:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/9428909.html</dc:identifier>
</item>
<item>
<title>蜂巢（已更名为网易云计算基础服务）计费系统架构升级之路 - 网易云</title>
<link>http://www.cnblogs.com/163yun/p/9443301.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/163yun/p/9443301.html</guid>
<description>&lt;p&gt;本文来自&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//sq.163yun.com/blog&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;网易云社区&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;项目背景&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;蜂巢计费系统为&lt;span&gt;&lt;strong&gt;&lt;a class=&quot; wrap external&quot; href=&quot;https://www.163yun.com/product-cloudcompute?tag=M_cnblogs_9443301&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;网易云计算基础服务&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;（网易蜂巢）提供整体的计费服务，业务范围涵盖完整的产品售卖流程，包含定价、订单、支付、计费、结算、优惠、账单等主体功能，支持十几种不同产品的售卖，产品形态上贯穿了IaaS、PaaS和SaaS类别。同时，计费方式还提供了了按量、包年包月、资源包等多种方式。该项目的业务范围之广，玩法种类之多，数据要求之严注定了它将成为一个烫手的山芋，而且还是一个吃力不讨好的工作。&lt;/p&gt;

&lt;p&gt;该项目在人员上已经几经易手，就我所知，已经换过两拨完整的开发和测试团队了，而且已经全部离职。不得不说，该项目已经变得令人谈之色变，让人敬而远之。在这样的背景下，后期接手的开发和QA不得不硬着头皮上，踩着雷过河，小心翼翼的应对着不断涌来的业务需求。随之而来的是高居不下的bug率，越来越难以维护的代码，无法扩展的架构问题，我们开始意识到这样下去是不行的。于是我们从8月份开始了漫漫的架构升级之路。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;重新出发&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在我们开始优化架构之前，我们重新梳理了计费系统完整的业务，得到了如下图所示的业务领域：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-33b281132947ea6cc4d0ad656da98884_hd.jpg&quot; alt=&quot;&quot; width=&quot;697&quot; data-caption=&quot;&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;697&quot; data-original=&quot;https://pic1.zhimg.com/v2-33b281132947ea6cc4d0ad656da98884_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-33b281132947ea6cc4d0ad656da98884_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;p&gt;梳理以后发现，计费系统承载了太多非计费的业务，包含订单、账单、结算和代金券等，这些业务代码散落在各处，没有严格地业务边界划分，而是“奇迹般”的融合在了一个工程里面。造成这个局面的原因在于计费系统初版设计时，根本没有考虑到这些问题，当然也不可能考虑到，而在后面逐步地迭代过程中，也未能去及时地调整架构，架构腐化不是一天内完成的。当然，这方面有部分技术的原因，也有部分人为的原因所在，因为当时负责计费系统的开发就只有一人，还是刚毕业的同学。目前看来，也是难为这位同学了。&lt;/p&gt;

&lt;p&gt;技术债务的问题不是小事，千里之堤毁于蚁穴。既然我们找到了问题的症结所在，那么解决的方式也就显而易见了，一个字：拆！我们分析了所有的业务，订单是最大也是最复杂的一个业务，而结算和账单考虑到后期有可能迁移到云支付团队，我们决定优先把订单系统拆分出去！&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;拆分的阵痛&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;订单拆分说起来容易，做起来难。套用一句业界常说的话，就是开着飞机换轮胎。因为在我们拆分的同时，不断地有新的业务需求进来，还有一些bug需要处理，所以不太可能让我们专门进行拆分的工作。因此，为了不影响正常的业务迭代，我们决定拉出独立分支进行开发。我们分出两人专门处理拆分的工作。&lt;/p&gt;

&lt;p&gt;为了最小化风险，订单拆分我们分了两步进行：一，模块独立；二：系统独立。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;模块独立&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;模块独立是将订单的代码首先在工程内部独立出来，我们采用独立Module的形式，将订单独立成了一个Order的模块。它拥有完全独立的服务层、业务层以及持久化层。其他模块可以依赖Order，而Order不能依赖除公共模块外的其他业务模块。整体的模块划分如下图所示。模块的拆分过程中我们也发现了原先很多不合理的地方，例如：其他服务直接操作订单的持久化层(DAO)、模块直接依赖关系混乱、Service所在的Pacakge不合理、存在大量无用的代码和逻辑、随意的命名等。我们边拆分边重构，虽然进度比预期要缓慢一些，但整体上在向着合理的方向进行。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-513665a79aa180635757678d74811292_hd.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; data-caption=&quot;&quot; data-rawwidth=&quot;940&quot; data-rawheight=&quot;587&quot; data-original=&quot;https://pic2.zhimg.com/v2-513665a79aa180635757678d74811292_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-513665a79aa180635757678d74811292_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模块独立的过程中我们遇到了业务层级关系的问题。由于订单模块不再依赖于其他业务模块，而又有一些业务逻辑是由订单触发的，需要在计费模块完成，我们又不能直接调用计费模块的Service。针对这个问题，我们采用了&lt;code&gt;领域事件&lt;/code&gt;的方式来解耦，简单来说就是订单通过发布事件的方式来与其他模块进行通信，当时实现的代码其实也相当简单。&lt;/p&gt;

&lt;p&gt;我们并没有独立拆分web层，因为系统还没有独立，web层作为统一的打包入口也承载着订单的流量。而且，Controller层的逻辑相对比较简单，完全可以在系统独立时再做。通过大家的努力，8月底订单已独立模块的方式上线了，一切正常。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;系统独立&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;模块拆分完成后，仅接着就是系统独立，此时我们需要将订单系统独立部署。这里一个关键的问题是，独立部署意味着单独提供服务，而依赖订单系统的业务方非常之多，包含前端、主站、大部分的PaaS业务和计费，都有需要直接依赖订单接口的地方，冒然独立风险很大。针对这个问题，我们采用使用haproxy七层转发代理来将流量分发到不同的vip来解决。虽然，在上线过程中遇到了一些坎坷，但最终还是成功了。现在看来这个选择是非常对的，因为这样可以在业务方无感知的情况下平滑升级。但长远来看，最终我们还是以独立的vip对外保留服务。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-1d7e345ea842987a1ee363e385b23597_hd.jpg&quot; alt=&quot;&quot; width=&quot;968&quot; data-caption=&quot;&quot; data-rawwidth=&quot;968&quot; data-rawheight=&quot;418&quot; data-original=&quot;https://pic2.zhimg.com/v2-1d7e345ea842987a1ee363e385b23597_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1d7e345ea842987a1ee363e385b23597_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;p&gt;订单和计费直接我们采用RabbitMQ来完成主体通信，关于采用MQ还是HTTP调用我们内部还进行了一番争论。之所以最终还是采用MQ来进行通信，是因为我们发现很多业务流程并不需要计费系统立即响应（大部分流程都是订单触发的），也就是我们常说的弱依赖。另外，职责上计费系统的响应的质量也不应影响到订单的主体流程，举个例子：用户支付了一个云主机的订单，如果计费系统此时无法响应，业务上相对来说可以接受过一小会儿计费再处理，而不是把订单直接退款给用户。MQ的引入在技术和职责层面都将订单和计费分的更开了。当然，强依赖的服务是我们无法避免的，其中之一就是结算模块还留在计费中，订单需要通过接口调用结算服务来完成支付。&lt;/p&gt;

&lt;p&gt;前期，我们在模块独立时采用事件解耦的方式，在此时也获得了收获。我们通过一个统一的转化层，将那些事件直接转化层RabbitMQ可以识别的消息，这样代码的改造工作就大大减少了。&lt;/p&gt;

&lt;p&gt;系统独立后一个直接的表象就是每个系统的代码行数大大降低了。独立前，整体的代码行数已经达到了12W行以上（包含配置文件），独立后，计费系统降低到了10W以下，订单维持在4W以下。代码行数的降低将直接提高系统的可维护性。个人认为如果一个工程里的代码超过10W行，那么维护性将大大降低，除非是那些有着严格自律意识的团队，否则，我建议还是尽量降低代码行数。&lt;/p&gt;

&lt;p&gt;经过大家一个月的努力，订单系统终于已独立的姿态提供服务了。过程很艰辛，但是收获良多。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;拆分的收获&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;订单独立后，一个直接的好处就是我们能独立的思考问题了，这在以前是很难做到的一件事情，因为大家不得不小心翼翼的处理那些依赖，做事会畏手畏脚的。另外一个好处就是，我们的工作可以有侧重点的进行了。订单业务可以说是产品最为关注的业务，也是计费对外暴露的主要入口。 下图就是我们在拆分后规划订单的业务架构，大家对后期的订单规划充满期待。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-a2d68946480c279143a137fe2ec9b6fb_hd.jpg&quot; alt=&quot;&quot; width=&quot;980&quot; data-caption=&quot;&quot; data-rawwidth=&quot;980&quot; data-rawheight=&quot;735&quot; data-original=&quot;https://pic3.zhimg.com/v2-a2d68946480c279143a137fe2ec9b6fb_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a2d68946480c279143a137fe2ec9b6fb_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;多Region的挑战&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;公有云产商面临的一大挑战就是多Region环境的支持。普通的互联网行业出于高可用的考虑，往往会把核心系统部署到多个机房，然后根据自己的实际应用场景选择冷备、双活甚至三活。我们经常听到的“两地三中心”、“三地五中心”等等高大上的名词就是代多机房高可用的缩影。这些行业做多机房部署的主要目的是为了提高系统的可用性，不是其业务的必须属性。换句话说，他们不做多机房部署也可以，做了当然更好。而公有云产商不一样，多Region部署就是其行业属性之一。如果哪个云产商不提供多region产品的支持，那么它肯定是不完整的。不得不承认，我们在这方面的经验是比较欠缺的，在多Region的支持上走了一些弯路。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;摸着石头过河&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;今年上半年的时候，蜂巢开始计划启动北京Region，预计年中交付，当时对我们横向业务提出了很大地技术挑战。一是在于横向系统设计之初并没有考虑到对Region环境的支持，我们很被动；二是我们并没有跨Region系统设计的经验，我们很着急。计费系统面临的问题更加严重，因为它对数据的一致性要求更高，而且出错地影响范围也更大。而且当时计费的技术债务已经很高了，产品的需求列表也拍了很长，套用一句很形象的话说，“留给我们的时间不多了”。&lt;/p&gt;

&lt;p&gt;在这种情况下，我们“胆战心惊”的给出了第一版的多Region设计方案，主体架构如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-a0a4a3c73a2491808889f09a04c62856_hd.jpg&quot; alt=&quot;&quot; width=&quot;980&quot; data-caption=&quot;&quot; data-rawwidth=&quot;980&quot; data-rawheight=&quot;693&quot; data-original=&quot;https://pic2.zhimg.com/v2-a0a4a3c73a2491808889f09a04c62856_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a0a4a3c73a2491808889f09a04c62856_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;p&gt;因为当时计费系统还没有拆分，所有的业务都在一个系统中完成的，就是我们常说的“大泥球”系统。这种情况下我们很难做到多Region部署，订单和账单其实只有在一个Region部署就可以了，而计费的数据采集和请求分发是要下沉到各个Region的，而计算过程可以集中完成。采用&quot;双主&quot;同步复制的方案实则是无奈之举。数据库的同步只能基于实例级别，而无法细分到表，我们各Region中计费数据库中存在资源的计量表，这个数据需要同步到杭州Region来完成。为了避免“脑裂”的问题，我们特别将该表的主键采用UUID的形式。存量表因为无法做大规模修改，我们通过限制北京MySQL用户的权限来避免写入和修改全局表。&lt;/p&gt;

&lt;p&gt;这个设计很糟糕，但是当时的条件限制，我们也拿不出更好的设计了。虽然上线的过程有些曲折，当这个架构还是成功运行了，这是令我们最为欣慰的事情。因为为了适配这个架构，团队的小伙伴做了很多工作。不可否认，这个架构存在诸多弊端，其中最大的隐患就在于数据库的“双主”同步，这就像一颗随时会爆的炸弹萦绕在我们心头。当时专线还没有搭建好，所有的流量均通过外网隧道代理，糟糕的网络质量无疑放大了这个风险。为此，DBA们向我们吐槽了好久，幸好我们抗打击能力很强。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;涅槃重生&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在做完双Region的支持以后，计费团队就继续做产品需求了，因为架构调整导致需求列表已经很长了。而且当时也说的是，短期内（至少今年）不会再有第三个Region了，我们也想着快点做完，多花点精力投入到重构中。但是计划赶不上变化，9月底我们被通知到第三个Region来了，而且已经被提高到第一优先级支持了。&lt;/p&gt;

&lt;p&gt;有了第一版双Region的经验，这一次我们淡定了很多。当然，我们不可能在沿用第一版的设计了，因为DBA就会跟我们拼命的。回过头来梳理多Region支持面临的问题时，我发现一开始我们就自己给自己挖了一个坑，然后往里面跳。横向支撑系统显然都需要对所有Region提供支持，但这并不代表其需要在各个Region内部署(我还与团队其他的小伙伴分享了这方面的想法，网上应该还能找到这一次分享的ppt——《跨Region实践初探》)。因为公有云产商经常会提供多个Region的服务，有得甚至达到几十个Region，如果横向支持系统每个Region都要全量部署的话，那么我们花在运维上的精力就可以拖垮我们，更不要说还有最为困难的数据的一致性问题。&lt;/p&gt;

&lt;p&gt;其实多Region的支持的问题我们总结出主要表现在一下两个方面，一是应用层面的接口互通；二是底层数据库的同步。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-8b5470e96a031d7fb46c8ccf413eda46_hd.jpg&quot; alt=&quot;&quot; width=&quot;719&quot; data-caption=&quot;&quot; data-rawwidth=&quot;719&quot; data-rawheight=&quot;440&quot; data-original=&quot;https://pic1.zhimg.com/v2-8b5470e96a031d7fb46c8ccf413eda46_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8b5470e96a031d7fb46c8ccf413eda46_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们先说底层数据库的同步，对计费系统而言，数据的一致性是至关重要的，但多机房部署是在挑战CAP定律。是不是就没有了这样的数据库方案了呢，有，那就是Google的Spanner，号称可以在全球做到强一致的数据库。但是我们没有这样的数据库。其实我们也考虑使用NoSQL数据库——Cassandra，但是这个数据库运维起来太复杂，我们也没有这方面的经验，也就放弃了。还是回归到MySQL，受限于传统关系型数据库在扩展性方面的问题，我们不可能把整个库在各个Region都同步一份。但是计费原始数据又必须在各个Region内收集，于是我们决定——拆，把计费拆层两个部分，分为bill-agent(数据采集)和bill-central(数据计算)两个部分。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-d3b68b430c1d7596a8063e5ae64b4880_hd.jpg&quot; alt=&quot;&quot; width=&quot;691&quot; data-caption=&quot;&quot; data-rawwidth=&quot;691&quot; data-rawheight=&quot;446&quot; data-original=&quot;https://pic1.zhimg.com/v2-d3b68b430c1d7596a8063e5ae64b4880_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d3b68b430c1d7596a8063e5ae64b4880_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Bill-Agent负责Region内日志的收集和简单聚合。&lt;/li&gt;
&lt;li&gt;Bill-Central负责日志收集外的全局事务处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这样的拆分，架构就清晰多了。再多加Region，我们只需要部署Bill-Agent就可以了。Bill-Agent将处理过的计费数据写入本地库的一张资源表，利用NDC（马进在网上分享过关于这个中间件的介绍）将资源表单向同步到Bill-Central的中央库，然后Bill-Central统一在对计费数据进行处理。有意思的是，这张资源表就是我们在第一版设计中新建的资源表，因为我们将主键修改为UUID，所有使用NDC同步表的方案是相当顺利的。当然，NDC在我们其他项目的跨Region支持上也发挥了重要作用，比如：跨机房缓存更新的问题。这一版的数据库方案在技术评审时大家都比较满意，DBA也肯定了我们的方案。&lt;/p&gt;

&lt;p&gt;现在再来看跨Region调用的问题。在多Region的横向系统中，我们发现或多或少的存在着机房间的接口调用问题。这些问题有可能是某些Region的库不能写需要路由到主库来写导致的，也有可能是全局缓存的问题，还有就是Global业务向Region内服务发送指令。计费属于最后一种场景，我们有一些业务场景需要由杭州Region触发，然后调用各个Region内的服务的接口。在第一版的实现中，计费系统自己实现了跨Region代理部分，但是实现的不是很好，代码的可维护性比较差，加重了调试的难度。这一版的设计中，我们决定把跨Region接口代理单独拿出来重新做，结合多Region的应用场景，然后封装一些非功能性的特性，这就成了后面我们很重要的一个组件——RegionProxy。&lt;/p&gt;

&lt;p&gt;RegionProxy最开始是为了解决跨Region调用的非功能性问题，简化应用系统处理的成本。但是设计上经历了比较大的调整。最开始的设计我们是希望Region内所有跨Region的HTTP调用都能通过RegionProxy来代理，RegionProxy之间能够发现对方并且相互通信，那么Region内的应用系统就只需要与本Region的RegionProxy通信就可以调到任意一个Region的应用系统了。但是在方案评审的过程中，我们发现如果都用RegionProxy代理，可能会导致跨Region调用多出一跳或者两跳，调试可能会比较困难。后来，我们放弃了这个方案。再后来，我们发现ServiceMesh的方案和我们最初RegionProxy的方案是十分相似的。&lt;/p&gt;

&lt;p&gt;在RegionProxy的设计上我们进行了简化处理，我们将所有Region的业务系统录入到一个全局的配置中心(我们自己开发的ConfigCenter)中，然后通过一个自己开发的一个HttpProxy的Java库来与ConfigCenter通信来完成跨Region的调用。这样做的好处就是使用方用起来比较轻量，但是在网络连通性方面我们需要与所有Region的系统做到互通。在开发Proxy库的时候，我们不仅对跨Region的HTTP调用进行了封装，而且对普通的HTTP调用也加入了非功能性的封装，这样系统可以通过Proxy库完成所有的HTTP调用请求，极大的简化了代码的维护成本。后面，我们使用RegionProxy来代理请求后，确实删除了很多以前的无用代码，整体流程上也清晰了许多。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;多Region的感悟&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;经过两版多Region的改造，我们确实收货了很多宝贵的经验，非常难得。实际上，在多Region的支持上，大家需要清晰地认识到为什么要支持多Region，以何种方式去支持多Region，多Region支持与高可用的关系等基本问题。如果这些问题回到不好，或者不清楚，那么很容易就会掉到陷阱中去。另外一个感悟就是结合业务的实际场景，第二版的多Region架构我们之所以能够这么设计，就在于计费系统不需要实时出账，我们完全可以把数据保存下来，离线计算以后再出账，这是可以接受的。但这并不适用与所用情况，有些性能要求很高的横向业务就不适合这种场景。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;拿来主义&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;前面提过几次技术债务的问题，有些问题是可以通过工具来解决了，有些只能通过内部重构来解决。左耳朵耗子曾经说过一句话对我感触很大，大意是说有些公司在解决问题时偏流程，有些公司偏技术。我想我们既然是技术团队，在解决问题时能通过技术方式解决的就应该尽量用技术解决，流程和人都是不可靠的。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;难以管理的配置文件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;计费项目面临的诸多问题之一就有配置文件的管理，因为业务流程的原因，计费系统有着大量的各种各样的配置。以前我们把配置文件放到工程里面，通过自动化部署平台来指定使用不同的配置文件。这样做的一个显著问题就是代码和配置耦合起来了，每次修改什么配置都得提交代码，而我们提交又有着一套严格地流程，导致整体效率不高。另外一个问题就是可视化的问题。往往QA在线下环境测试都是通过的，而上线以后出了问题，基本上都是配置导致的问题。针对这几个的问题，我们决定使用&lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ctripcorp/apollo&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;Apollo&lt;/a&gt;&lt;/span&gt;来管理我们的配置，通过整合Apollo，我们的两个项目（订单和计费）都做到了工程零配置，所有的配置都放到Apollo上进行管理，好处良多。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-4cef3f88b846680084905972025a14b7_hd.jpg&quot; alt=&quot;&quot; width=&quot;980&quot; data-caption=&quot;&quot; data-rawwidth=&quot;980&quot; data-rawheight=&quot;289&quot; data-original=&quot;https://pic4.zhimg.com/v2-4cef3f88b846680084905972025a14b7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4cef3f88b846680084905972025a14b7_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;替换定时任务框架&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;计费系统严重依赖于定时任务，有许多流程需要通过定时任务来推动。以前我们使用QUARTZ+MYSQL来作为我们分布式定时任务框架，但是这种做法的可维护性太差，而且对数据库侵入很高，对测试也不友好。在QA的不断吐槽中，我们决定替换掉现有的定时任务框架。在调研开源的定时任务框架后我们决定使用&lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//github.com/elasticjob/elastic-job&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;Elastic-Job&lt;/a&gt;&lt;/span&gt;来作为我们的分布式定时任务框架。目前，我们的两个项目的所有定时任务（除bill-agent外)都已迁移到Elastic-Job上来了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-6b53b652f3741176fb217430bfc12706_hd.jpg&quot; alt=&quot;&quot; width=&quot;980&quot; data-caption=&quot;&quot; data-rawwidth=&quot;980&quot; data-rawheight=&quot;160&quot; data-original=&quot;https://pic3.zhimg.com/v2-6b53b652f3741176fb217430bfc12706_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6b53b652f3741176fb217430bfc12706_b.jpg&quot; data-size=&quot;normal&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;抽象化设计&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你要问我做蜂巢计费最困难的地方是什么？我的回答肯定是业务太复杂了。这种复杂性不是因为我们架构设计的不好导致的复杂，而是业务本身就是十分复杂的。现在计费系统需要支持十几种产品的售卖形式，涵盖IaaS、PaaS和SaaS的绝大部分产品，同时各个产品的售卖和计费模式都存在或多或少的差异，这让我们很难通过一个统一的模型就涵盖所有的场景。我们找到了一条缓解这个问题的方式——抽象化。&lt;/p&gt;
&lt;p&gt;横向系统或者支持系统如果需要服务多个产品，那么抽象化设计是不可或缺的一个缓解。如果越早进行抽象化，那么后期对接和维护的成本也就会越低，还能把系统的边界划分得更清晰。计费系统早期的设计在抽象化方面没有过多的规划，在后期的对接方面又处于比较弱势的一方，导致计费系统出现了大量的特化代码。这些特化代码对一个服务十几个产品的支持系统无疑是伤害巨大的。现在我们已经意识到了问题的严重性，也着手在做这方面的重构工作了。但是挑战依然很大，因为业务的复杂性是无法通过技术手段就能降低的，这方面我们只有和产品、运营和销售各方面一起努力，打造一个合理、灵活、稳定的新计费。&lt;/p&gt;
&lt;p&gt;抽象化设计因为我们还在进行中，后期有机会再分享。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;从八月底加入计费团队以来，收获良多，无论是在技术上，还是在对业务的理解上，都有了许多新的认识。最为给力的还是团队的小伙伴们，因为计费本身的需求非常多，处理这些需求的人都只刚刚够。后来我们又做了两版跨Region改造、订单拆分、框架替换、抽象化等优化工作，迭代周期从两周一次压缩到了一周一次，开发和QA的小伙伴也都是任劳任怨。当然，大家能在这个过程中有所收获才是最关键的。&lt;/p&gt;
&lt;p&gt;计费系统可以说是我接触过的最为复杂的一个系统，越是复杂的系统越需要清晰的头脑和良好的设计。云计算产商的博弈已经到了白热化阶段了，大家拼的不光光是每个产品的质量和体验，还有整个云平台的内功。公有云平台本身就是一个庞大、复杂的系统，如何把这个系统建设好，用户体验做好、服务质量提高、稳定性得到保障，这本身就是极为有难度的一件事情。计费系统作为公有云平台一个重要的组成部分，可以说扮演着一个极为关键的角色。做得好可以对整个平台提供助力，而做的差则会拖慢整体的发展进程。我们已经找到了适合自己的一条道路，相信会走上正轨！&lt;/p&gt;


&lt;p&gt;网易&lt;strong&gt;&lt;a class=&quot; wrap external&quot; href=&quot;https://www.163yun.com/product-cloudcompute?tag=M_cnblogs_9443301&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;云计算基础服务&lt;/a&gt;&lt;/strong&gt;深度整合了 IaaS、PaaS 及容器技术，提供弹性计算、DevOps 工具链及微服务基础设施等服务，帮助企业解决 IT、架构及运维等问题，使企业更聚焦于业务，是新一代的云计算平台。&lt;/p&gt;

&lt;p&gt;本文来自网易云社区，经作者蒋文康授权发布。&lt;/p&gt;

&lt;p&gt;原文：&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//sq.163yun.com/blog/article/168481946234458112&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;蜂巢计费系统架构升级之路&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 07:52:00 +0000</pubDate>
<dc:creator>网易云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/163yun/p/9443301.html</dc:identifier>
</item>
<item>
<title>ES的Query、Filter、Metric、Bucketing使用详解 - sunsky303</title>
<link>http://www.cnblogs.com/sunsky303/p/9443013.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunsky303/p/9443013.html</guid>
<description>&lt;p&gt;ES提供的聚合功能可以用来进行简单的数据分析。本文仍然以上一篇提供的数据为例来讲解。数据如下：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;studentNo&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;name&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;male&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;age&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;birthday&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;classNo&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;address&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;isLeader&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;刘备&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;24&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1985-02-03&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;湖南省长沙市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关羽&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;22&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1987-08-23&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;四川省成都市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;糜夫人&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;女&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;19&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1990-06-12&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;上海市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;张飞&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1989-07-30&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;北京市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;诸葛亮&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;18&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1992-04-27&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;江苏省南京市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;孙尚香&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;女&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1994-05-21&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt; &lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;马超&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;19&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1991-10-20&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;黑龙江省哈尔滨市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;赵云&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;男&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;23&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1986-10-26&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;浙江省杭州市&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;本文的主要内容有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;metric API的使用&lt;/li&gt;
&lt;li&gt;bucketing API的使用&lt;/li&gt;
&lt;li&gt;两类API的嵌套使用&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;1-聚合api&quot;&gt;1. 聚合API&lt;/h3&gt;
&lt;p&gt;ES中的Aggregations API是从&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-facets.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Facets&lt;/a&gt;功能基础上发展而来，官网正在进行替换计划，建议用户使用Aggregations API，而不是Facets API。ES中的聚合上可以分为下面两类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;metric（度量）聚合：度量类型聚合主要针对的number类型的数据，需要ES做比较多的计算工作&lt;/li&gt;
&lt;li&gt;bucketing（桶）聚合：划分不同的“桶”，将数据分配到不同的“桶”里。非常类似sql中的group语句的含义。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;metric既可以作用在整个数据集上，也可以作为bucketing的子聚合作用在每一个“桶”中的数据集上。当然，我们可以把整个数据集合看做一个大“桶”，所有的数据都分配到这个大“桶”中。&lt;/p&gt;
&lt;p&gt;ES中的聚合API的调用格式如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs r has-numbering&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;aggregations&quot; : {                  // 表示聚合操作，可以使用aggs替代
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;aggregation_name&amp;gt;&quot; : {        // 聚合名，可以是任意的字符串。用做响应的key，便于快速取得正确的响应数据。
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;aggregation_type&amp;gt;&quot; : {    // 聚合类别，就是各种类型的聚合，如min等
            &amp;lt;aggregation_body&amp;gt;      // 聚合体，不同的聚合有不同的body
        }
        [,&lt;span class=&quot;hljs-string&quot;&gt;&quot;aggregations&quot; : { [&amp;lt;sub_aggregation&amp;gt;]+ } ]? // 嵌套的子聚合，可以有&lt;span class=&quot;hljs-number&quot;&gt;0或多个
    }
    [,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;aggregation_name_2&amp;gt;&quot; : { &lt;span class=&quot;hljs-keyword&quot;&gt;... } ]* // 另外的聚合，可以有&lt;span class=&quot;hljs-number&quot;&gt;0或多个
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;11-度量类型metric聚合&quot;&gt;1.1 度量类型（metric）聚合&lt;/h4&gt;
&lt;p&gt;（1）Min Aggregation&lt;/p&gt;
&lt;p&gt;最小值查询，作用于number类型字段上。查询2班最小的年龄值。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;query&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {         // 可以先使用query查询得到需要的数据集
    &quot;term&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;classNo&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;span class=&quot;hljs-string&quot;&gt;&quot;
    }
  },
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;min_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;查询结果为：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-javascript hljs has-numbering&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;took&quot;: &lt;span class=&quot;hljs-number&quot;&gt;19,                     &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上面的聚合查询有两个要注意的点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可以通过query先过滤数据&lt;/li&gt;
&lt;li&gt;返回的结果会包含聚合操作所作用的数据全集&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;有时候我们对作用的数据全集并不太敢兴趣，我们仅仅需要最终的聚合结果。可以通过查询类型（search_type）参数来实现这个需求。下面查询出来的数据量会大大减少，ES内部也会在查询时减少一些耗时的步骤，所以查询效率会提高。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d     &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;本次的查询结果为：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs r has-numbering&quot;&gt;{
&lt;span class=&quot;hljs-keyword&quot;&gt;...

&lt;span class=&quot;hljs-string&quot;&gt;&quot;aggregations&quot;: {                    // 聚合结果
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;min_age&quot;: {                       // 前面输入的聚合名
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;: &lt;span class=&quot;hljs-number&quot;&gt;18,                     // 聚合后的数据
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;value_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;18.0&quot;
    }
  }
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;（2）Max Aggregation&lt;/p&gt;
&lt;p&gt;最大值查询。下面查询2班最大的年龄值，查询结果为23。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;query&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;term&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;classNo&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;span class=&quot;hljs-string&quot;&gt;&quot;
    }
  },
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;max_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;max&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;（3）Sum Aggregation&lt;/p&gt;
&lt;p&gt;数值求和。下面统计查询2班的年龄总和，查询结果为63。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;query&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;term&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;classNo&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;span class=&quot;hljs-string&quot;&gt;&quot;
    }
  },
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;sum_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;（4）Avg Aggregation&lt;/p&gt;
&lt;p&gt;计算平均值。下面计算查询2班的年龄平均值，结果为21。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;query&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;term&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;classNo&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;span class=&quot;hljs-string&quot;&gt;&quot;
    }
  },
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;avg_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;avg&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;（5）Stats Aggregation&lt;/p&gt;
&lt;p&gt;统计查询，一次性统计出某个字段上的常用统计值。下面对整个学校的学生进行简单地统计。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;stats_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;stats&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;查询结果为：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-javascript hljs has-numbering&quot;&gt;{
  ...                     &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;（6）Top hits Aggregation&lt;/p&gt;
&lt;p&gt;取符合条件的前n条数据记录。下面查询全校年龄排在前2位的学生，仅需返回学生姓名和年龄。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs cs has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;top_age&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;top_hits&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;sort&quot;: [               &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;返回结果为：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-javascript hljs has-numbering&quot;&gt;{
  ...

  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggregations&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;top_age&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;hits&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;total&quot;: &lt;span class=&quot;hljs-number&quot;&gt;9,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;max_score&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;null,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;hits&quot;: [
          {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_index&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;student&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_type&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;student&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_id&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_score&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;null,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_source&quot;: {
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;刘备&quot;,
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;24&quot;
            },
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;sort&quot;: [
              &lt;span class=&quot;hljs-number&quot;&gt;24
            ]
          },
          {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_index&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;student&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_type&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;student&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_id&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_score&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;null,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;_source&quot;: {
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;赵云&quot;,
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;23&quot;
            },
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;sort&quot;: [
              &lt;span class=&quot;hljs-number&quot;&gt;23
            ]
          }
        ]
      }
    }
  }
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;1.2 桶类型（bucketing）聚合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）Terms Aggregation&lt;/p&gt;
&lt;p&gt;按照指定的1或多个字段将数据划分成若干个小的区间，计算落在每一个区间上记录数量，并按指定顺序进行排序。下面统计每个班的学生数，并按学生数从大到小排序，取学生数靠前的2个班级。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs fsharp has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
'
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms_classNo&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;classNo&quot;,            &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;值得注意的，取得的前2名的学生数实际上是一个近似值，ES的实现方式参见&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。如果想要取得精确值，可以不指定size值，使其进行一次全排序，然后在程序中自行去取前2条记录。当然，这样做会使得ES做大量的排序运算工作，效率比较差。&lt;/p&gt;
&lt;p&gt;（2）Range Aggregation&lt;/p&gt;
&lt;p&gt;自定义区间范围的聚合，我们可以自己手动地划分区间，ES会根据划分出来的区间将数据分配不同的区间上去。下面将全校学生按照年龄划分为5个区间段：16岁以下、16~18、19~21、22~24、24岁以上，要求统计每一个年龄段内的学生数。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;range_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;range&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;age&lt;span class=&quot;hljs-string&quot;&gt;&quot;,
        &quot;ranges&lt;span class=&quot;hljs-string&quot;&gt;&quot;: [
          {
            &quot;to&lt;span class=&quot;hljs-string&quot;&gt;&quot;: 15
          },
          {
            &quot;from&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;span class=&quot;hljs-string&quot;&gt;&quot;,
            &quot;to&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;18&lt;span class=&quot;hljs-string&quot;&gt;&quot;
          },
          {
            &quot;from&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;19&lt;span class=&quot;hljs-string&quot;&gt;&quot;,
            &quot;to&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;21&lt;span class=&quot;hljs-string&quot;&gt;&quot;
          },

          {
            &quot;from&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;22&lt;span class=&quot;hljs-string&quot;&gt;&quot;,
            &quot;to&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;span class=&quot;hljs-string&quot;&gt;&quot;
          },
          {
            &quot;from&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;span class=&quot;hljs-number&quot;&gt;25&lt;span class=&quot;hljs-string&quot;&gt;&quot;
          }
        ]
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）Date Range Aggregation&lt;/p&gt;
&lt;p&gt;时间区间聚合专门针对date类型的字段，它与Range Aggregation的主要区别是其可以使用时间运算表达式。主要包括+（加法）运算、-（减法）运算和/（四舍五入）运算，每种运算都可以作用在不同的时间域上面，下面是一些时间运算表达式示例。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;now+10y：表示从现在开始的第10年。&lt;/li&gt;
&lt;li&gt;now+10M：表示从现在开始的第10个月。&lt;/li&gt;
&lt;li&gt;1990-01-10||+20y：表示从1990-01-01开始后的第20年，即2010-01-01。&lt;/li&gt;
&lt;li&gt;now/y：表示在年位上做舍入运算。今天是2015-09-06，则这个表达式计算结果为：2015-01-01。说好的rounding运算呢？结果是做的flooring运算，不知道为啥，估计是我理解错了-_-!!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面查询25年前及更早出生的学生数。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;range_age&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;date_range&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;birthday&lt;span class=&quot;hljs-string&quot;&gt;&quot;,
        &quot;ranges&lt;span class=&quot;hljs-string&quot;&gt;&quot;: [
          {
            &quot;to&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;now-&lt;span class=&quot;hljs-number&quot;&gt;25y&lt;span class=&quot;hljs-string&quot;&gt;&quot;
          }
        ]
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;（4）Histogram Aggregation&lt;/p&gt;
&lt;p&gt;直方图聚合，它将某个number类型字段等分成n份，统计落在每一个区间内的记录数。它与前面介绍的Range聚合非常像，只不过Range可以任意划分区间，而Histogram做等间距划分。既然是等间距划分，那么参数里面必然有距离参数，就是interval参数。下面按学生年龄统计各个年龄段内的学生数量，分隔距离为2岁。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs fsharp has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
'
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;histogram_age&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;histogram&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;interval&quot;: &lt;span class=&quot;hljs-number&quot;&gt;2,               &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）Date Histogram Aggregation&lt;/p&gt;
&lt;p&gt;时间直方图聚合，专门对时间类型的字段做直方图聚合。这种需求是比较常用见得的，我们在统计时，通常就会按照固定的时间断（1个月或1年等）来做统计。下面统计学校中同一年出生的学生数。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs fsharp has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
'
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;data_histogram_birthday&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;date_histogram&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;interval&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;year&quot;,              &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;返回结果如下，可以看到由于上面的”format”: “yyyy”，所以返回的key_as_string只返回年的信息。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-javascript hljs has-numbering&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;buckets&quot;: [
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1985&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;473385600000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1986&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;504921600000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1987&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;536457600000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1989&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;599616000000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1990&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;631152000000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1991&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;662688000000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1992&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;694224000000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    },
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key_as_string&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1994&quot;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-number&quot;&gt;757382400000,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1
    }
  ]
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;（6）Missing Aggregation&lt;/p&gt;
&lt;p&gt;值缺损聚合，它是一类单桶聚合，也就是最终只会产生一个“桶”。下面统计学生信息中地址栏缺损的记录数量。由于只有学号为6的孙尚香的地址缺损，所以统计值为1。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-shell hljs scilab has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d 
&lt;span class=&quot;hljs-string&quot;&gt;'
{
  &quot;aggs&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
    &quot;missing_address&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
      &quot;missing&lt;span class=&quot;hljs-string&quot;&gt;&quot;: {
        &quot;field&lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;address&lt;span class=&quot;hljs-string&quot;&gt;&quot;
      }
    }
  }
}
'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;h4 id=&quot;13-嵌套使用&quot;&gt;1.3 嵌套使用&lt;/h4&gt;
&lt;p&gt;前面已经说过，聚合操作是可以嵌套使用的。通过嵌套，可以使得metric类型的聚合操作作用在每一“桶”上。我们可以使用ES的嵌套聚合操作来完成稍微复杂一点的统计功能。下面统计每一个班里最大的年龄值。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs fsharp has-numbering&quot;&gt;curl -XPOST &lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.1.101:9200/student/student/_search?search_type=count&quot; -d
'
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;missing_address&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;classNo&quot;
      },
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {                 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;返回结果如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;language-javascript hljs has-numbering&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;buckets&quot;: [
    {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;,               &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;2-总结&quot;&gt;2. 总结&lt;/h3&gt;
&lt;p&gt;本文介绍了ES中的一些常用的聚合API的使用，包括metric、bucketing以及它们的嵌套使用方法。掌握了这些API就可以完成简单的数据统计功能，更多的API详见&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 07:22:00 +0000</pubDate>
<dc:creator>sunsky303</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunsky303/p/9443013.html</dc:identifier>
</item>
<item>
<title>微信小程序swiper高度自适应，swiper的子元素高度不固定 - 清风白水</title>
<link>http://www.cnblogs.com/luxiaoyao/p/9442926.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luxiaoyao/p/9442926.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;小程序 &lt;strong&gt;swiper&lt;/strong&gt; 组件默认高度150px，并且如果子元素过高，swiper不会自适应高度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决方案一-总体来说不够完美适合满屏滑动&quot;&gt;解决方案一： （总体来说不够完美，适合满屏滑动）&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果不是满屏的状态，用scroll-view IOS滑动兼容性不好，在IOS会有无法滑动的情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;swiper class=&quot;content&quot;
 style=&quot;height:{{height}}px&quot;
 bindchange=&quot;change&quot;
 current-item-id=&quot;{{docid}}&quot;
 duration=&quot;100&quot;
 &amp;gt;  
  &amp;lt;swiper-item data-key=&quot;{{item.id}}&quot;
  wx:for=&quot;{{title}}&quot;
  wx:key=&quot;index&quot;
   item-id=&quot;{{item.id}}&quot;
 &amp;gt;
    &amp;lt;scroll-view 
    data-id=&quot;{{item.id}}&quot;
    style='height:100%;' 
    scroll-y 
    bindscrolltolower=&quot;scrolltolower&quot; 
    data-left=&quot;51&quot;
    scroll-top=&quot;{{top}}&quot;
    bindscroll=&quot;scroll&quot;
    &amp;gt;
      &amp;lt;!--单条新闻start  --&amp;gt;
      &amp;lt;navigator url=&quot;/pages/detail/detail?id={{item.docid}}&quot; class=&quot;item&quot; wx:for=&quot;{{item.id==docid?news:''}}&quot; wx:key=&quot;index&quot;&amp;gt;
        
      &amp;lt;/navigator&amp;gt;
      &amp;lt;!--单条新闻end  --&amp;gt;
       &amp;lt;view class='loading'&amp;gt;加载中...&amp;lt;/view&amp;gt; 
    &amp;lt;/scroll-view&amp;gt;
  &amp;lt;/swiper-item&amp;gt;
&amp;lt;/swiper&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;适应场景：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/833699/201808/833699-20180808150636195-366355222.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;适合这种满屏滑动的，嵌套 &lt;strong&gt;scroll-view&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;​ 横向滑动 scroll-x white-space:nowrap;&lt;/p&gt;
&lt;h3 id=&quot;解决方案二-适应子元素高度也不一致&quot;&gt;解决方案二： （适应子元素高度也不一致）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/833699/201808/833699-20180808150647127-1362381317.png&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;效果图是这样的：然后在上滑过程中，导航栏还需要吸顶，然后滑动下方tab栏的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/833699/201808/833699-20180808150815648-599266070.png&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;其实如果不是基于小程序，我们可以很直接用swiper插件，操作起来简直方便，小程序由于 swiper 高的限制，真是走了不少弯路，如果下面的列表高度一样，我们便可以算出一个的高度，然后乘以个数即可，但是这样只能求出每一个个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;index .wxml&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;swiper current=&quot;{{current}}&quot; bindchange=&quot;change&quot; duration=&quot;300&quot; style=&quot;height:{{swiper_height + 80}}px;min-height:50%vh;&quot;&amp;gt;
    &amp;lt;swiper-item class=&quot;swiper-item&quot; wx:for=&quot;{{channel_list}}&quot; wx:key=&quot;{{item.id}}&quot;&amp;gt;
        &amp;lt;!-- navigator 的类名很重要，虽然一个循环用统一样式，但是我们基于不同的tab 取了不用的类名  ，因为小程序无法操作DOM元素，虽然封装的API 可以获取，但是只能获取第一个和所有，我们每个tab的内容个数不一样，所以需要基于每个tab栏求，item.channelId  是图2标注吸顶效果的channelId, --&amp;gt;
        &amp;lt;navigator class=&quot;column-list column-list{{item.channelId}}&quot; url=&quot;&quot; wx:for=&quot;{{item.viewLessonList}}&quot; wx:for-item=&quot;lesson&quot; wx:key=&quot;{{index}}&quot; wx:key-item=&quot;lesson-item&quot;&amp;gt;
            这里面便是一个一个不同高度的列表
        &amp;lt;/navigator&amp;gt;
        &amp;lt;!-- 这下面就是weui的一个加载样式，基于分页加载做的不同样式 --&amp;gt;
        &amp;lt;view class=&quot;weui-loadmore&quot; hidden=&quot;{{is_loadmore}}&quot;&amp;gt;
            &amp;lt;view class=&quot;weui-loading&quot;&amp;gt;&amp;lt;/view&amp;gt;
            &amp;lt;view class=&quot;weui-loadmore__tips&quot;&amp;gt;正在加载&amp;lt;/view&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view class=&quot;weui-loadmore weui-loadmore_line&quot; hidden=&quot;{{!is_loadmore}}&quot;&amp;gt;
            &amp;lt;text class=&quot;weui-loadmore__tips&quot;&amp;gt;左右滑动，查看更多&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
&amp;lt;/swiper&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/833699/201808/833699-20180808150853671-2071605398.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// 获取wxml的节点信息
function get_wxml(className, callback) {
    wx.createSelectorQuery().selectAll(className).boundingClientRect(callback).exec()
} 
onReady: function() {
    let column_all = that.data.column_list[that.data.current].viewLessonList, // 这个是基于java端返回的tab栏的接口，大致样式如上图，也就是每个列表，
        channel_id = that.data.column_list[that.data.current].channelId // 我们这个就是求出目前的channelId，好区分不同的类名

    that.setData({
        swiper_length: column_all.length // 算出当前tab栏有多少个列表
    })
    get_wxml(`.column-list${channel_id}`, (rects) =&amp;gt; {
        let sum_heigth = 0
    
        for (let i = 0; i &amp;lt; that.data.swiper_length; i++) {
            sum_heigth += rects[i].height
        }
        that.setData({
            swiper_height: sum_heigth
        })
        // 就是循环相加每个列表的高度，然后赋值给swiper_height,便可以求出当前tab栏的高度，赋值给swiper 便可以swiper高度自适应
    })
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 08 Aug 2018 07:10:00 +0000</pubDate>
<dc:creator>清风白水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luxiaoyao/p/9442926.html</dc:identifier>
</item>
<item>
<title>C# 操作Excel图形——绘制、读取、隐藏、删除图形 - E-iceblue</title>
<link>http://www.cnblogs.com/Yesi/p/9442627.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Yesi/p/9442627.html</guid>
<description>&lt;p&gt;本篇文章将介绍C# 如何处理Excel图形相关的问题，包括以下内容要点：&lt;/p&gt;
&lt;p&gt;1.绘制图形&lt;/p&gt;
&lt;p&gt;   1.1 绘制图形并添加文本到图形&lt;/p&gt;
&lt;p&gt;   1.2 添加图片到图形&lt;/p&gt;
&lt;p&gt;   1.3 设置图形阴影效果&lt;/p&gt;
&lt;p&gt;2. 提取图形中的文本、图片&lt;/p&gt;
&lt;p&gt;3. 设置图形的显示、隐藏&lt;/p&gt;
&lt;p&gt;4. 删除图形&lt;/p&gt;
&lt;p&gt;   4.1删除指定图形&lt;/p&gt;
&lt;p&gt;   4.2 删除所有图形&lt;/p&gt;

&lt;p&gt;PS： 下载安装该类库后，注意在项目程序中添加引用Spire.Xls.dll文件（dll文件可在安装路径下的Bin文件夹中获取）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808141519254-1161716563.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注：Spire.xls能支持的图形种类很多，常见的Office Excel中的图形，这个类库也都能实现，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808141542330-540480711.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;绘制图形&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;【C#】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Add_shapes_to_Excel
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实例&lt;/span&gt;
            Workbook workbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Workbook();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个工作表&lt;/span&gt;
            Worksheet sheet = workbook.Worksheets[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加“太阳”形状的图形，并填充颜色&lt;/span&gt;
            IPrstGeomShape Triangle = sheet.PrstGeomShapes.AddPrstGeomShape(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;170&lt;/span&gt;, &lt;span&gt;160&lt;/span&gt;&lt;span&gt;, PrstGeomShapeType.Sun);
            Triangle.Fill.ForeColor &lt;/span&gt;=&lt;span&gt; Color.Orange;
            Triangle.Fill.FillType &lt;/span&gt;=&lt;span&gt; ShapeFillType.SolidColor;            
            Triangle.Text &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IT'S A SUNNY DAY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加文本

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加“禁止”标志的图形，并填充渐变颜色&lt;/span&gt;
            IPrstGeomShape heart = sheet.PrstGeomShapes.AddPrstGeomShape(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;140&lt;/span&gt;, &lt;span&gt;140&lt;/span&gt;&lt;span&gt;, PrstGeomShapeType.NoSmoking);
            heart.Fill.ForeColor &lt;/span&gt;=&lt;span&gt; Color.Red;
            heart.Fill.FillType &lt;/span&gt;=&lt;span&gt; ShapeFillType.Gradient;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加云朵形状的图形&lt;/span&gt;
            IPrstGeomShape Cloud = sheet.PrstGeomShapes.AddPrstGeomShape(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;160&lt;/span&gt;, &lt;span&gt;160&lt;/span&gt;&lt;span&gt;, PrstGeomShapeType.Cloud);           
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置图形阴影效果&lt;/span&gt;
            Cloud.Shadow.Angle = &lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
            Cloud.Shadow.Distance &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
            Cloud.Shadow.Size &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
            Cloud.Shadow.Color &lt;/span&gt;=&lt;span&gt; Color.SteelBlue;
            Cloud.Shadow.Blur &lt;/span&gt;= &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
            Cloud.Shadow.Transparency &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            Cloud.Shadow.HasCustomStyle &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加五角星形状的图形，并加载图片来填充图形&lt;/span&gt;
            IPrstGeomShape cloud = sheet.PrstGeomShapes.AddPrstGeomShape(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;160&lt;/span&gt;, &lt;span&gt;160&lt;/span&gt;&lt;span&gt;, PrstGeomShapeType.Star5);
            cloud.Fill.CustomPicture(Image.FromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sm.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sm.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            cloud.Fill.FillType &lt;/span&gt;=&lt;span&gt; ShapeFillType.Picture;
         
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存并打开文档&lt;/span&gt;
            workbook.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AddShapes.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ExcelVersion.Version2013);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AddShapes.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图形插入效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808141905552-541770404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;提取图形中的文本和图片&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;【C#】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing.Imaging;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Extract_text_and_image_from_Excel_shape
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实例，加载Excel工作表&lt;/span&gt;
            Workbook workbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Workbook();
            workbook.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个工作表&lt;/span&gt;
            Worksheet sheet = workbook.Worksheets[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提取指定形状中的文本内容，并将提取到的文本保存到指定文档&lt;/span&gt;
            IPrstGeomShape shape1 = sheet.PrstGeomShapes[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; s =&lt;span&gt; shape1.Text;
            StringBuilder sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            sb.AppendLine(s);
            File.WriteAllText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtractText.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sb.ToString());
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtractText.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提取指定图形中的图片，并保存图片到指定文件&lt;/span&gt;
            IPrstGeomShape shape2 = sheet.PrstGeomShapes[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;];
            Image image &lt;/span&gt;=&lt;span&gt; shape2.Fill.Picture;
            image.Save(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ShapeImage.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ImageFormat.Png);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ShapeImage.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808141942703-1136616497.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;设置图形的隐藏、显示&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;【C#】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; HideShapes_XLS
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实例，加载Excel文档&lt;/span&gt;
            Workbook workbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Workbook();
            workbook.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个工作表&lt;/span&gt;
            Worksheet sheet = workbook.Worksheets[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏第3个图形&lt;/span&gt;
            sheet.PrstGeomShapes[&lt;span&gt;2&lt;/span&gt;].Visible = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示图形
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sheet.PrstGeomShapes[1].Visible = true;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存并打开文档&lt;/span&gt;
            workbook.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HideShape.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ExcelVersion.Version2013);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HideShape.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808142603705-857925514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;删除&lt;/strong&gt;&lt;strong&gt;Excel&lt;/strong&gt;&lt;strong&gt;图形&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;【C#】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Xls;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; RemoveShapes_XLS
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Workbook类对象，加载Excel文件&lt;/span&gt;
            Workbook workbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Workbook();
            workbook.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个工作表&lt;/span&gt;
            Worksheet sheet = workbook.Worksheets[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除第一个图形&lt;/span&gt;
            sheet.PrstGeomShapes[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Remove();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除所有图形
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;for (int i = sheet.PrstGeomShapes.Count-1; i &amp;gt;= 0; i--)
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    sheet.PrstGeomShapes[i].Remove();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存并打开文件&lt;/span&gt;
            workbook.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeleteShape.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ExcelVersion.Version2013);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeleteShape.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图形删除效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201808/706090-20180808142641667-1840101437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上是关于“C#操作Excel中图形”的介绍，如需转载，请注明出处。&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 06:35:00 +0000</pubDate>
<dc:creator>E-iceblue</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Yesi/p/9442627.html</dc:identifier>
</item>
<item>
<title>【Orleans开胃菜系列2】连接Connect源码简易分析 - 临渊闲鱼</title>
<link>http://www.cnblogs.com/fancunwei/p/9442469.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9442469.html</guid>
<description>&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;

 &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StartClientWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                   
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;从方法看，只是一个简单允许重试的启动客户端。追踪进去会发现关于重试逻辑的实践，Socket编程的实践，基于内存的消息队列的实践，依赖注入。再看源码的基础上，最好能配合一些理论书籍来看。理论指导实践，实践反馈理论，才是技术成长的步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这篇文章只涉及Connect所引用方法的部分说明，一步一步来加深理解。&lt;br/&gt;本来我是打算把orleans研究透之后再来写一篇，但看了一周之后，发下connect里面调用了很多类，每个类又有很多方法，这样下去没有尽头，到最终估计什么也写不成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;分析源码本来就是循环渐进的过程，也是一个熟悉框架/原理/实践的过程。直接跳过这个步骤，必然损失良多。所以这部分就叫开胃菜吧。在查看connect过程，会越来越接触到各种知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本篇暂不涉及数据持久化，主要依赖.netcore内置方法操纵内存实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;扩展知识之Timer&amp;amp;TimerQueue&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.timers.timer.aspx&quot;&gt;Timer&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
Timer
在设置的间隔后生成事件，并提供生成重复事件的选项

TimerQueue
时间队列
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之信号量&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.semaphoreslim.aspx&quot;&gt;SemaphoreSlim&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/majiang/p/7894539.html&quot;&gt;SemaphoreSlim 实现&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;

SemaphoreSlim
表示Semaphore的轻量级替代，它限制了可以同时访问资源或资源池的线程数
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Release 释放
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; Wait 等待。

信号量有两种类型：本地信号量和命名系统信号量。前者是应用程序的本地。后者在整个操作系统中是可见的，并且适用于进程间同步。该SemaphoreSlim是一个轻量级替代信号量不使用Windows内核中的信号类。与Semaphore类不同，SemaphoreSlim类不支持命名系统信号量。您只能将其用作本地信号量。所述SemaphoreSlim类为单一的应用程序内的同步推荐的信号量。
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之BlockingCollection&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/standard/collections/thread-safe/blockingcollection-overview&quot;&gt;BlockingCollection介绍&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/mldcy/p/8331619.html&quot;&gt;利用BlockingCollection实现生产者和消费者队列&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
BlockingCollection
为实现 IProducerConsumerCollection&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; 的线程安全集合提供阻塞和限制功能。
  &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; Take
  &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; Add
  有这个类型，
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之Interlocked&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.interlocked(v=vs.110).aspx&quot;&gt;Interlocked&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
Interlocked为多个线程共享的变量提供原子操作。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Add
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Decrement以原子操作的形式递减指定变量的值并存储结果。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Increment以原子操作的形式递增指定变量的值并存储结果
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Exchange
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;CompareExchange 
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Read
个人想法：和Redis的Increment&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Decrement类似，部分情况下可以取代Redis的increment&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;decrement，提高速度。
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之SpinWait&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.spinwait.aspx&quot;&gt;SpinWait&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation&quot;&gt;两阶段提交&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.monitor.aspx&quot;&gt;Monitor&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
SpinWait
为基于旋转的等待提供支持。
SpinWait是一种值类型，这意味着低级代码可以使用SpinWait而不必担心不必要的分配开销。SpinWait通常不适用于普通应用程序。在大多数情况下，您应该使用&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NET&lt;/span&gt; Framework提供的同步类，例如Monitor
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; SpinOnce
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之Queue&amp;amp;Stack&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/7977ey2c(v=vs.110).aspx&quot;&gt;Queue&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/3278tedw(v=vs.110).aspx&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
Queue&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
表示先进先出的对象集合&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;此类将通用队列实现为循环数组。存储在队列&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;中的对象在一端插入并从另一端移除。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Enqueue
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Dequeue
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Peek&lt;/span&gt;

Stack&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
表示具有相同指定类型的实例的可变大小后进先出（LIFO）集合。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Push
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Pop
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PeeK&lt;/span&gt;

ConcurrentQueue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
表示线程安全的先进先出的对象集合
ConcurrentStack &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; 
表示线程安全的后进先出（LIFO）集合

如果需要以与存储在集合中的顺序相同的顺序访问信息，请使用Queue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;。如果需要以相反的顺序访问信息，请使用Stack &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;。使用ConcurrentQueue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;或ConcurrentStack &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; 如果您需要同时从多个线程访问该集合。

&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之Task&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://technet.microsoft.com/zh-cn/library/dd449174(v=vs.110).aspx&quot;&gt;TaskCompletionSource&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/farb/p/4851349.html&quot;&gt;基于Task的异步模式--全面介绍&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
TaskCompletionSource表示未绑定到委托的Task &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TResult&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;的生产者端，通过Task属性提供对使用者端的访问。
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之线程安全的集合&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.collections.concurrent(v=vs.110).aspx&quot;&gt;System.Collections.Concurrent&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd287191.aspx&quot;&gt;ConcurrentDictionary&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.tuicool.com/articles/vaeiie&quot;&gt;ConcurrentDictionary 对决 Dictionary+Locking&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Concurrent提供了应在的地方对应的类型在使用几个线程安全的集合类System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections中和System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Generic命名空间，只要多线程并发访问的集合。
但是，通过当前集合实现的其中一个接口访问的成员（包括扩展方法）不保证是线程安全的，并且可能需要由调用者同步。

ConcurrentDictionary&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;表示可以由多个线程同时访问的键&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;值对的线程安全集合
对于ConcurrentDictionary &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TKey，TValue&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;类上的所有其他操作，所有这些操作都是原子操作并且是线程安全的。唯一的例外是接受委托的方法，即AddOrUpdate和GetOrAdd。对于字典的修改和写入操作，ConcurrentDictionary &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TKey，TValue&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;使用细粒度锁定来确保线程安全。（对字典的读取操作是以无锁方式执行的。）但是，这些方法的委托在锁外部调用，以避免在锁定下执行未知代码时可能出现的问题。因此，这些代理执行的代码不受操作的原子性影响。
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之网络编程&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket(v=vs.110).aspx&quot;&gt;Socket微软官方文档&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/zengzy/p/5107516.html&quot;&gt;Socket博客园&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
Socket 类提供一组丰富的方法和属性进行网络通信
TCP协议
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginConnect
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;EndConnect
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginSend
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;EndSend
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginReceive
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;EndReceive
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginAccept
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EndAccept&lt;/span&gt;
UDP协议
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginSendTo
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;EndSendTo
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;BeginReceiveFromandEndReceiveFrom
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之线程通知：&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.autoresetevent.aspx&quot;&gt;AutoResetEvent&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.manualresetevent(v=vs.110).aspx&quot;&gt;ManualResetEvent&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.manualreseteventslim.aspx&quot;&gt;ManualResetEventSlim&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
AutoResetEvent允许线程通过信令相互通信。通常，当线程需要对资源的独占访问时，可以使用此类。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Set释放线程
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;WaitOne等待线程

ManualResetEvent
通知一个或多个等待线程发生了事件

ManualResetEventSlim
当等待时间预期非常短，并且事件未跨越进程边界时，您可以使用此类以获得比ManualResetEvent更好的性能
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;扩展知识之依赖注入：&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection&quot;&gt;ActivatorUtilities&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt707534.aspx&quot;&gt;扩展.net-使用.netcore进行依赖注入&lt;/a&gt;&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
服务可以通过两种机制来解析：
&lt;span class=&quot;token class-name&quot;&gt;IServiceProvider&lt;/span&gt;
ActivatorUtilities – 允许在依赖关系注入容器中创建没有服务注册的对象。 ActivatorUtilities 用于面向用户的抽象，例如标记帮助器、MVC 控制器、SignalR 集线器和模型绑定器。
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;ActivatorUtilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CreateInstance
&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;ActivatorUtilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetServiceOrCreateInstance
&lt;/pre&gt;

&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;

 &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StartClientWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoClientWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;UseLocalhostClustering 用来配置连接参数：端口/ClusterId/ServiceId等。 配置一个连接本地silo的客户端，也有其他类型的如： UseServiceProviderFactory，UseStaticClustering&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1.4782608695652&quot;&gt;
&lt;blockquote readability=&quot;3.695652173913&quot;&gt;
&lt;p&gt;ConfigureLogging配置日志参数&lt;a href=&quot;https://msdn.microsoft.com/magazine/mt694089&quot;&gt;扩展阅读&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Build用来注册默认服务和构建容器,扩展了解依赖注入知识。微软自带Microsoft.Extensions.DependencyInjection库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; Task&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IClusterClient&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StartClientWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            attempt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;IClusterClient&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClientBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseLocalhostClustering&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClusterOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ClusterId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ServiceId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HelloWorldApp&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureLogging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logging &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;RetryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Client successfully connect to silo host&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里的LockAsync，内部用了SemaphoreSlim.Wait需要扩展了解下。和lock的区别。信号量本地信号量和系统信号量。&lt;br/&gt;这里用state来维护生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Exception&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Task&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; retryFilter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ThrowIfDisposedOrAlreadyInitialized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LockAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ThrowIfDisposedOrAlreadyInitialized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; LifecycleState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Starting&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A prior connection attempt failed. This instance must be disposed.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LifecycleState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Starting&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;runtimeClient &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OutsideRuntimeClient&lt;/span&gt; orc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; orc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clusterClientLifecycle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnStart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LifecycleState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Started&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Exception&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Task&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; retryFilter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            
            
            &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StartInternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_StartDone&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;{0} Started OutsideRuntimeClient with Global Client ID: {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; BARS&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CurrentActivationAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;, client GUID ID: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; handshakeClientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;gateways获取网关列表&lt;br/&gt;transport用来维护客户端消息管理。&lt;br/&gt;RunClientMessagePump用来处理接收分发消息。&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StartInternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Exception&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Task&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            
            
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; initializedGatewayProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;initializedGatewayProvider&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gatewayListProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;InitializeGatewayListProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        initializedGatewayProvider&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gateways &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gatewayListProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetGateways&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gateways&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Count &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gatewayProviderType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gatewayListProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetParseableName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $&lt;span class=&quot;token string&quot;&gt;&quot;Could not find any gateway in {gatewayProviderType}. Orleans client cannot initialize.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GatewayManager_NoGateways&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SiloUnavailableException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; generation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SiloAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AllocateNewGeneration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
            transport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActivatorUtilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClientMessageCenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ServiceProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; localAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; generation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handshakeClientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            CurrentActivationAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActivationAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewActivationAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MyAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handshakeClientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            listeningCts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationTokenSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; listeningCts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Token&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            listenForMessages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            
            Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listenForMessages &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ct&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCancellationRequested&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token function&quot;&gt;RunClientMessagePump&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; exc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Runtime_Error_100326&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;RunClientMessagePump has thrown exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Ignore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GrainTypeResolver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetGrainTypeResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InternalGrainFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;typeMapRefreshTimer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AsyncTaskSafeTimer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                RefreshGrainTypeResolver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;typeMapRefreshInterval&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;typeMapRefreshInterval&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            ClientStatistics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transport&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StreamingInitialize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; retryFilter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteWithRetries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Task&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Exception&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Task&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; shouldRetry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; exception&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shouldRetry &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; retry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shouldRetry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;retry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;用来处理消息分发等，也涉及网关部分调用。&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ClientMessageCenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            IOptions&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;GatewayOptions&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; gatewayOptions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            IOptions&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ClientMessagingOptions&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; clientMessagingOptions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;IPAddress&lt;/span&gt; localAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; gen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;GrainId&lt;/span&gt; clientId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;IGatewayListProvider&lt;/span&gt; gatewayListProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;SerializationManager&lt;/span&gt; serializationManager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;IRuntimeClient&lt;/span&gt; runtimeClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;MessageFactory&lt;/span&gt; messageFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;IClusterConnectionStatusListener&lt;/span&gt; connectionStatusListener&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ILoggerFactory&lt;/span&gt; loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            IOptions&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NetworkingOptions&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; networkingOptions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            IOptions&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StatisticsOptions&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; statisticsOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggerFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;openConnectionTimeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; networkingOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OpenConnectionTimeout&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SerializationManager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; serializationManager&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; executorService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            lockable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            MyAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SiloAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IPEndPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gen&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            ClientId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clientId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RuntimeClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; runtimeClient&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; messageFactory&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connectionStatusListener &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; connectionStatusListener&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            Running &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            GatewayManager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GatewayManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gatewayOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gatewayListProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            PendingInboundMessages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;BlockingCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            gatewayConnections &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GatewayConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            numMessages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            grainBuckets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;clientMessagingOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ClientSenderBuckets&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClientMessageCenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Proxy grain client constructed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            IntValueStatistic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FindOrCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                StatisticNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CLIENT_CONNECTED_GATEWAY_COUNT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;conn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; conn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            statisticsLevel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; statisticsOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CollectionLevel&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;statisticsLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CollectQueueStats&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                queueTracking &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueueTrackingStatistic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ClientReceiver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; statisticsOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;WaitMessage里面利用了&lt;strong&gt;BlockingCollection.Take&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RunClientMessagePump&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            incomingMessagesThreadTimeTracking&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnStartExecution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listenForMessages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WaitMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Application&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                
                
                
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;firstMessageReceived&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    firstMessageReceived &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;handshakeClientId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        clientId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateClientId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        CurrentActivationAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActivationAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MyAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clientId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CurrentActivationAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Activation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        clientId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handshakeClientId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Direction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Response&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token function&quot;&gt;ReceiveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OneWay&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Request&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localObjects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                        logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Runtime_Error_100327&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $&lt;span class=&quot;token string&quot;&gt;&quot;Message not supported: {message}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            incomingMessagesThreadTimeTracking&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnStopExecution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;这里主要是对response做一些判断处理。&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ReceiveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Received {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Result &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ResponseTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Rejection &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RejectionType &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RejectionTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DuplicateRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;CallbackData&lt;/span&gt; callbackData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; callbacks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; callbackData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;found&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                
                
                
                callbackData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Runtime_Error_100011&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No callback for response message: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCompleted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; requestStatistics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shared&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RequestStatistics&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCompleted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Result &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ResponseTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Rejection &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RejectionType &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RejectionTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transient&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shared&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldResend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCompleted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestStatistics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CollectApplicationRequestsStats&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stopwatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shared&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unregister&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestStatistics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CollectApplicationRequestsStats&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                requestStatistics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnAppRequestsEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stopwatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Elapsed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shared&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ResponseCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        

&lt;/pre&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这里面用ConcurrentDictionary&amp;lt;GuidId, LocalObjectData&amp;gt;来判断ObserverId是否存在，不存在移除。&lt;br/&gt;如果存在,利用Queue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果启动成功，异步调用LocalObjectMessagePumpAsync，然后利用Queue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LocalObjectMessagePumpAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalObjectData&lt;/span&gt; objectData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Messages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Count &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Running &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ExpireMessageIfExpired&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MessagingStatisticsGroup&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Phase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Invoke&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                    RequestContextExtensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RequestContextData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;InvokeMethodRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetDeserializedBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serializationManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; targetOb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IAddressable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LocalObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; resultObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; caught &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        
                        
                        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Invoker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetOb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultPromise &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            resultObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; resultPromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; exc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        
                        caught &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; exc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;caught &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReportException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; caught&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Direction &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OneWay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SendResponseAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resultObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;SendResponseAsync经过序列化，DeepCopy，赋值各种请求参数等各种操作以后，来到最关键的部分&lt;br/&gt;transport.SendMessage&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;第一步先获取活动的网关(silo),如没有则建立GatewayConnection&lt;br/&gt;第二步启动Connection&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Connect--调用socket创建连接&lt;br/&gt;Start--GatewayClientReceiver间接调用Socket来接收消息，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;GatewayConnection&lt;/span&gt; gatewayConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; startRequired &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;Running&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_MsgCtrNotRunning&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $&lt;span class=&quot;token string&quot;&gt;&quot;Ignoring {msg} because the Client message center is not running&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetSilo &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetLiveGateways&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetSilo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToGatewayUri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Uri&lt;/span&gt; addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetSilo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToGatewayUri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        gatewayConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GatewayConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; executorService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;openConnectionTimeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Creating gateway to {0} for pre-addressed message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; addr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        startRequired &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsSystemTarget &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsUnordered&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                
                
                
                
                
                
                &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; msgNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numMessages&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    numMessages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unchecked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numMessages &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    IList&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Uri&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; gatewayNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetLiveGateways&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; numGateways &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numGateways &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token function&quot;&gt;RejectMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No gateways available&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_CannotSend&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Unable to send message {0}; gateway manager state is {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token class-name&quot;&gt;Uri&lt;/span&gt; addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayNames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;msgNumber &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; numGateways&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        gatewayConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GatewayConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;executorService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;openConnectionTimeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_CreatedGatewayUnordered&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Creating gateway to {0} for unordered message to grain {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        startRequired &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHashCode_Modulo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;grainBuckets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    
                    
                    
                    
                    
                    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; weakRef &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; grainBuckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;weakRef &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; weakRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsAlive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        gatewayConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; weakRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; GatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gatewayConnection &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetLiveGateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token function&quot;&gt;RejectMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No gateways available&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_CannotSend_NoGateway&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Unable to send message {0}; gateway manager state is {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_NewBucketIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Starting new bucket index {0} for ordered messages to grain {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            gatewayConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GatewayConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;executorService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggerFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;openConnectionTimeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            gatewayConnections&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_CreatedGatewayToGrain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Creating gateway to {0} for message to grain {1}, bucket {2}, grain id hash code {3}X&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                               msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TargetGrain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            startRequired &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        grainBuckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startRequired&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    
                    &lt;span class=&quot;token function&quot;&gt;RejectOrResend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;QueueRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_QueueRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sending message {0} via gateway {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Address&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                
                
                &lt;span class=&quot;token function&quot;&gt;RejectOrResend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;MsgCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Running&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_MsgCtrNotRunning&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ignoring connection attempt to gateway {0} because the proxy message center is not running&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            
            
            
            
            &lt;span class=&quot;token keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Lockable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;IsLive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_DeadGateway&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ignoring connection attempt to gateway {0} because this gateway connection is already marked as non live&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; ClientMessageCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CONNECT_RETRY_COUNT&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Connected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                            &lt;span class=&quot;token function&quot;&gt;MarkAsDisconnected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastConnect &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            
                            
                            
                            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;MsgCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GatewayManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetLiveGateways&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Address&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                            
                            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; millisecondsSinceLastAttempt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lastConnect&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecondsSinceLastAttempt &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; ClientMessageCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MINIMUM_INTERCONNECT_DELAY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; wait &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ClientMessageCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MINIMUM_INTERCONNECT_DELAY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; millisecondsSinceLastAttempt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Debug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_PauseBeforeRetry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pausing for {0} before trying to connect to gateway {1} on trial {2}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wait&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                                Thread&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wait&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                        lastConnect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        Socket &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Silo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Endpoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddressFamily&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SocketType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ProtocolType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tcp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        Socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EnableFastpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        SocketManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Silo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Endpoint&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;openConnectionTimeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        NetworkingStatisticsGroup&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnOpenedGatewayDuplexSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        MsgCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnGatewayConnectionOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        SocketManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteConnectionPreamble&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MsgCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ClientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
                        Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_Connected&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Connected to gateway at address {0} on trial {1}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClient_CannotConnect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $&lt;span class=&quot;token string&quot;&gt;&quot;Unable to connect to gateway at address {Address} on trial {i} (Exception: {ex.Message})&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token function&quot;&gt;MarkAsDisconnected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Socket&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                
                &lt;span class=&quot;token function&quot;&gt;MarkAsDead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;GatewayConnection的Start会调用到GatewayClientReceiver的Run方法,利用BlockingCollection&lt;/p&gt;
&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;csharp&quot; class=&quot;language-csharp&quot;&gt;
 &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;Cts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCancellationRequested&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; bytesRead &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FillBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BuildReceiveBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytesRead &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateReceivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytesRead&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryDecodeMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MsgCenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;QueueIncomingMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trace&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Received a message from gateway {0}: {1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gatewayConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Address&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProxyClientUnhandledExceptionWhileReceiving&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $&lt;span class=&quot;token string&quot;&gt;&quot;Unexpected/unhandled exception while receiving: {ex}. Restarting gateway receiver for {gatewayConnection.Address}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Orleans用于处理定时或延时回调作业。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;创建一个简单的connect,里面有这么多沟沟渠渠，但本质上来说，最底层是利用Socket套接字机制来实施机制。在Socket的基础之上，又封装维护了一层GatewayConnection和GatewayClientReceiver来实现网关(Silo)的操作，比如重试/监控/熔断等，再结合Timer,Queue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果您完全熟悉异步编程，并行编程，Socket网络编程。又对分布式/微服务理论有较深的理解，那么orleans实现机制，对您来说可能是相对容易。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本期结束，下期更精彩！&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 06:19:00 +0000</pubDate>
<dc:creator>临渊闲鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9442469.html</dc:identifier>
</item>
<item>
<title>翻译 真正的异步不会创建新的线程 - 编程梦</title>
<link>http://www.cnblogs.com/LiangSW/p/9442354.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiangSW/p/9442354.html</guid>
<description>&lt;p&gt;本文翻译自 Stephen Cleary 的 [There is No Thread] 原文地址 &lt;a href=&quot;https://blog.stephencleary.com/2013/11/there-is-no-thread.html&quot; class=&quot;uri&quot;&gt;https://blog.stephencleary.com/2013/11/there-is-no-thread.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是异步编程最基本的事实 : &lt;strong&gt;异步不会创建新的线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反对这个事实的人很多,他们对此的看法是 &quot;如果我await一个操作,那么一定会有一个线程正在等待，它可能是一个线程池的线程,或者是操作系统线程,或者是某个设备的驱动程序&quot;&lt;/p&gt;
&lt;p&gt;不用关注这些看法, 只需要记住如果异步操作是纯粹的(方法全是async),那么就不会产生新的线程&lt;/p&gt;
&lt;p&gt;不过这么一个简单的结论显然并不能够让他们信服,下面就看看异步到底发生了什么&lt;/p&gt;
&lt;p&gt;让我们跟踪一个异步操作直到硬件层面,注：Net部分和设备驱动部分将被简化描述 (因为细节太多了)&lt;/p&gt;
&lt;p&gt;下面是一个通用的写入操作 (例如 文件、网络、USB面包机等等)&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private async void Button_Click(object sender, RoutedEventArgs e)
{
  byte[] data = ...
  await myDevice.WriteAsync(data, 0, data.Length);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们已经知道在await的时候UI线程不会被阻塞，那么问题来了: 是否是UI线程创建了另外一个线程杀了祭天换来了自己的自由....&lt;/p&gt;
&lt;p&gt;关于UI线程是否犯下这一恶行,让我们深入推断一下&lt;/p&gt;
&lt;p&gt;首先 ： 看看类库 (BCL的代码) 假设 &lt;strong&gt;WriteAsync&lt;/strong&gt; 是使用&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.overlapped.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;.Net中标准的异步方式平台调用(P/Invoke)I/O系统&lt;/a&gt;,这是一个基于异步方式的I/O，所以这会在设备的底层上启动一个win32异步方式I/O操作句柄&lt;/p&gt;
&lt;p&gt;然后操作系统会告诉设备驱动程序进行写操作,代码实现是构造出表示写请求的对象,这个对象称为I/O请求包(IRP)&lt;/p&gt;
&lt;p&gt;设备驱动程序接收到IRP后会向设备发出一个命令来写出数据,如果这个设备支持直接内存存取技术(DMA),只需将缓冲区地址写入设备寄存器即可,设备驱动程序能做到将IRP标记为 &quot;pending&quot; 后交把控制权交还操作系统&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/832799/201808/832799-20180808135659046-1369102890.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里发现了真相的核心所在 : 在处理IRP时,设备驱动是不允许阻塞的。这意味着如果IRP不能立即完成,那么它必须异步处理,即使对于同步的api也是如此！在设备驱动级别,所有(有意义)的请求都是异步的&lt;/p&gt;
&lt;p&gt;引用&lt;a href=&quot;https://www.amazon.com/gp/product/0735665877/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735665877&amp;amp;linkCode=as2&amp;amp;tag=stepheclearys-20&quot;&gt;书籍&lt;/a&gt;里的&lt;a href=&quot;https://www.amazon.com/gp/product/0735648735/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735648735&amp;amp;linkCode=as2&amp;amp;tag=stepheclearys-20&quot;&gt;知识&lt;/a&gt; &quot;无论是什么类型的I/O请求,应用程序向驱动程序发出的I/O操作都是异步执行的&quot;&lt;/p&gt;
&lt;p&gt;在IRP为 &quot;pending&quot; 时,操作系统返回到类库,类库将未完成的任务返回到应用程序的按钮单击事件方法,该方法挂起async方法,UI线程继续执行&lt;/p&gt;
&lt;p&gt;我们已经跟踪请求到系统的尽头 直到物理设备&lt;/p&gt;
&lt;p&gt;现在写入操作正在飞快的进行中,有多少个线程正在处理它?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是没有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有设备驱动程序线程、操作系统线程、BCL线程或者写在处理写操作的线程池线程(🙂) 这里没有创建任何新的线程&lt;/p&gt;
&lt;p&gt;现在,让我们跟踪内核守护进程的响应回到正常的人类世界(被大神虐了)&lt;/p&gt;
&lt;p&gt;写入请求开始后的某个时间,设备完成了写入操作。它会举手报告中断一下CPU&lt;/p&gt;
&lt;p&gt;设备驱动程序的中断服务程序 (ISR) 对中断操作出响应,中断是CPU级事件,它会临时从正在运行的线程中夺取CPU的控制权。可以将ISR看作 &quot;借用&quot; 当前正在运行的线程,但我(原作者)更倾向于认为ISR非常低的级别上运行，以至于 &quot;线程&quot; 的概念还不存在 - 因此可以这么说，它们在线程的下方出现(在线程之前就有了ISR)&lt;/p&gt;
&lt;p&gt;无论如何,ISR是正确的,因此它所做的就是告诉设备“谢谢您的中断”，并对延迟过程调用（DPC）进行排队&lt;/p&gt;
&lt;p&gt;当CPU成功被中断吸引注意力时,它会到DPCs(注: Distributed Process Control System 分布式处理控制系统),DPCs也是在一非常低的级别中运行(非常底层),说是它是&quot;线程&quot;并不完全正确,与ISR一样,DPCs直接在CPU上运行,在线程系统的&quot;下方&quot;&lt;/p&gt;
&lt;p&gt;DPC会把表示写请求的IRP标记为 &quot;complete&quot; ,但是 &quot;completion&quot;状态仅存在于操作系统级别,进程有自己的内存空间所以我们必须通知到它,因此操作系统将一个特殊内核态的异步过程调用(Asyncroneus Procedure Call 简称 APC) 排队到拥有句柄的线程&lt;/p&gt;
&lt;p&gt;由于类库/BCL使用了标准的异步方式平台调用(P/Invoke)系统，所以它已经&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.threadpool.bindhandle.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;注册了带有I/O输出完成端口(ICOP 注:I/Q Completion Port)的句柄&lt;/a&gt;,IOCP是线程池的一部分,因此简单的借用I/O线程池线程来执行APC,APC通知Task已经完成&lt;/p&gt;
&lt;p&gt;该Task已捕获UI上下文,因此它不会直接在线程池线程上恢复异步方法,相反，它将该方法排队到UI上下文中,UI线程会恢复执行该方法&lt;/p&gt;
&lt;p&gt;因此,我们看到在请求在被处理时没有创建新的线程,当请求完成后,各种线程被&quot;借用&quot;，或者有一些处理被简单的排队等候,这个处理通常是在毫秒级时间内完成 (例如 在线程池中运行的APC),甚至到微秒级(例如 ISR)，但是没有线程被阻塞,只是等待该请求完成&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/832799/201808/832799-20180808135714272-532507082.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们在上面的样例中使用了被简化后最标准的方式,在实际开发中会比这个样例复杂很多,但是核心的事实是一样的&lt;/p&gt;
&lt;p&gt;&quot;必须有一个处理异步操作的线程&quot; 并不是事实&lt;/p&gt;
&lt;p&gt;打破常规,不要识图去找到这个 &quot;异步线程&quot;,这是不可能的。相反，要去寻找真相:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有线程&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 05:58:00 +0000</pubDate>
<dc:creator>编程梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiangSW/p/9442354.html</dc:identifier>
</item>
<item>
<title>程序员找工作那些事（一）幸存者偏差 - 自由飞</title>
<link>http://www.cnblogs.com/freeflying/p/9442123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freeflying/p/9442123.html</guid>
<description>&lt;p&gt;这篇博客，早就想写了。一是这个问题飞哥被问得最多（可能仅次于“该不该转行”），二是看到太多太多“自以为是”的回答，以及半途而废的遗憾，好多话憋在心里不吐不快。&lt;/p&gt;

&lt;p&gt;首先，很多人没有明白的一点，也是至关重要的一点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找工作主要靠运气。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找工作主要靠运气。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找工作主要靠运气。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重要的事说三遍。因为很多人肯定不服气，怎么能靠运气呢？尤其是马上要毕业求职的同学，学校可能还专门有老师要给你们做就业培训，怎么做简历怎么面试……你飞哥给我说“主要靠运气”？！&lt;/p&gt;

&lt;p&gt;你不信？好，我问一个最简单的问题：面试的时候，是穿正式一点好呢，还是休闲一点好？&lt;/p&gt;
&lt;p&gt;很多人会觉得当然是要正式一点，但你知不知道你西装革履的样子像个卖保险的？而且你的着装一定会影响你的发挥，平时没穿惯西服的人，偶尔穿一次，尤其是加上衬衣领带的话，会浑身不得劲，很容易给人别扭感觉。但面试官不知道你是因为西服的原因啊，他会想你是不是实力不够，所以不够自信，甚至在撒谎……&lt;/p&gt;
&lt;p&gt;你说那好，我就T恤牛仔裤……好，第一关HR就把你Pass了，这明显的没把我们公司当回事嘛！&lt;/p&gt;
&lt;p&gt;为什么我说主要看运气，关键就看你遇到什么人。有的面试官，比如飞哥我了，就不会介意你穿着西服时别扭的样子，都这样过来的，我懂；有点面试官，反而喜欢休闲一点的着装，甚至邋邋遢遢的都无所谓，这才是“极客”范嘛!&lt;/p&gt;
&lt;p&gt;当决定权在别人手里的时候，对你而言，这事成与不成，不靠运气靠什么呢？&lt;/p&gt;
&lt;p&gt;着装，是一个最简单的例子。举一反三，什么自信啊微笑啊不卑不亢啊，都一样。你的自信，可能被人认为是“狂”，你的微笑可能被认为“实力不够”，你的不卑不亢可能被认为“不好驾驭”……你不知道面试官想要的是一个什么样的人，你的全部表演就是一个“撞大运”！&lt;/p&gt;
&lt;p&gt;所以我看到那些说什么面试技巧一二三的文章，都笑而不语。&lt;/p&gt;

&lt;p&gt;就程序员这个圈子，还有一些流传甚广的说法。比如说“把数据结构和算法好好看一看”“新技术一定要跟上”……有没有用呢？&lt;/p&gt;
&lt;p&gt;我只能说“靠运气”了。如果你面试的公司，问了数据结构和算法，那就有用；否则就没用。谁规定了面试一定要问数据结构和算法的呢？飞哥就不会问，或者就算问一下，也只是为了装装逼。既然大家都认为这玩意逼格满满，我也不能弱了气势，是不是？但最终的录用标准，是看你的技术是不是能够最大程度的契合公司现有项目需要，以及你对这些技术的广度和深度，等等。新技术？新技术辣么多，对不起，公司项目没有使用的技术我都不care……&lt;/p&gt;
&lt;p&gt;“飞哥，你不能这样啊！我们还是要讲概率的。”可能你还会私下里嘀咕一句，“像你这样的奇葩，我大概率是碰不到的，嘿嘿……”&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;&quot; src=&quot;http://res03.meng2u.com/deduct_attachment/program/a103/73/77/lAxwQxRF0UIbvp2H.jpg&quot; alt=&quot;http://res03.meng2u.com/deduct_attachment/program/a103/73/77/lAxwQxRF0UIbvp2H.jpg&quot; data-original-title=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好吧，我承认，我的脑回路确实那么一点点清奇。但你怎么保证不碰到像我这样奇葩呢？这是不是还是一个“运气”的问题？&lt;/p&gt;

&lt;p&gt;说到概率，我想说的话就更多了。&lt;/p&gt;


&lt;p&gt;这段时间特别流行“大概率小概率”以及什么“幸存者偏差”之类的观点。&lt;/p&gt;
&lt;p&gt;比如你说没有学历也可以做程序员，给他举个了例子。这事搁以前，同样没有学历的这位同学就打了鸡血一样，努力拼搏天天向上了嘛。但现在，这一套不管用了。旁边一个理中客会问：“但是你知道没有学历，成为程序员的概率是多少吗？”如果有数据，他就会用数据教育你，这是一个多么“小概率”的事件，你觉得你会有这个运气碰到吗？如果没有数据，没关系，他还会告诉你有一种东西叫“幸存者偏差”，从一架战斗机开始讲起……总而言之言而总之，你说的那是特例，你就看到了人家成功的，没看到人家失败的，那是尸横遍野相当的惨啊！&lt;/p&gt;
&lt;p&gt;最后，扔给你一句：还是要多读书。&lt;/p&gt;
&lt;p&gt;说实话，一开始我也被唬住了！真特么有道理，是吧？&lt;/p&gt;

&lt;p&gt;然而，感谢我爸我妈，给了我一颗能思考能质疑的脑袋。所以虽然我书读得少，你也骗不了我。&lt;/p&gt;

&lt;p&gt;一次偶然的机会，我读到了这么一段话，大意是：&lt;/p&gt;
&lt;p&gt;再小概率的事件，对于个体而言，都只有50%的概率。要么降临到你头上，要么没有，仅此而已。哪怕是0.0000001%概率的事情，一旦降临到你的头上，那就是100%，你就得承担它的全部。&lt;/p&gt;
&lt;p&gt;这段话说的应该是一些不好的事情，比如患病啊意外啊啥的。但它如洪钟大吕，振聋发聩，让我不断的思考，最终看穿“概率论”的谬误。借这个机会，和大家分享一二吧！&lt;/p&gt;

&lt;p&gt;其实很简单。只要当你明白：&lt;strong&gt;一个人成就的高低，就在于他做成的事，成功的概率有多低&lt;/strong&gt;。大概率成功的事件，是不会给人成就感的。比如考试，99%的同学都会过，我也过了，有意义吗？比如一份工作，录取率是90%，我也被录取了，你会非常开心灰常有成就感吗？谁都知道拿奥运会金牌的几率有多低，那大家干脆都“重在参与”，不要去争金牌，就往中等偏上这个“大概率”的成绩上靠就是了，好不好？&lt;/p&gt;
&lt;p&gt;有这么一个经典的问题，“你是什么时候开始变得平庸的？”什么叫做平庸？做大家都做的事，走大家都走的路，什么事情都“随大流”，这就是平庸。&lt;/p&gt;
&lt;p&gt;你可能会说，我可以“在平凡的工作中做出不平凡的成绩出来”。但是，你凭什么“做出不平凡的成绩”出来？而且，“做出不平凡的成绩出来”也一定是一个“小概率”的事件啊！按“概率论”的说法，既然那是一个小概率成功的事情，你就不应该去做呀？&lt;/p&gt;
&lt;p&gt;我知道，很多人（其实包括我自己），都喜欢自己能走在一条通往成功殿堂的康庄大道上。这条路笔直宽敞，可以一马平川。然而，可能么？&lt;/p&gt;
&lt;p&gt;夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉……&lt;/p&gt;
&lt;p&gt;—— 王安石 《游褒禅山记》&lt;/p&gt;


&lt;p&gt;关注我的同学，可能大多都是&lt;a href=&quot;http://17bang.ren/Article/119&quot; target=&quot;_blank&quot;&gt;野生程序员&lt;/a&gt;。其实在你决定转行的那一天起，你就选择了一条和别人不一样的道路，而且这条路注定更加的曲折蜿蜒。你没有学历，没有老师没有同学没有人脉，受人白眼，前路晦暗……很多同学在犹豫要不要转行的时候，都会问我IT行业前景如何，做程序员工资待遇如何，但现在我觉得，先别看得那么远，先看看脚下的路。&lt;/p&gt;
&lt;p&gt;还要问一问自己的本心：你究竟向往一种什么样的生活？&lt;/p&gt;
&lt;p&gt;臭不要脸的，还是用飞哥自己做个例子吧。我有时候会想，假如我一直做律师，做到今天；或者是计算机专业毕业，毕业就进一家软件公司上班，涨经验熬资历，熬到今天，没有那些乱七八糟的“弯路”，我是不是过得更好，更加的成功？我不知道，真不知道。可能收入会高一点？但我那些同学，毕业了按部就班法院银行混日子的，“大概率”上也和我差不多。当然这些年我要辛苦很多很多，毕竟经历了这么多风风雨雨，都是自己“作”的。大概，像歌里面唱的那样，“算人生，成败相当”吧。&lt;/p&gt;
&lt;p&gt;但我可以肯定一点，如果按部就班的那条路，我是一定不会有这么多粉丝的！要知道&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;&quot; src=&quot;http://17bang.ren/Images/Summary/2018/8/7/1/%E8%82%A5%E8%9C%A5%E8%9C%B4%20-%20%E5%89%AF%E6%9C%AC%20(2).jpg&quot; alt=&quot;&quot; data-original-title=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;为什么会有粉丝？我想，是因为我做成的是一件“小概率”的事，我看到了一般人没有看到的风光，我给了给他们一种“榜样的力量”。每一个人，从骨子里，都是拒绝庸碌的，都是渴望一种成就的。&lt;/p&gt;
&lt;p&gt;当然，天下没有免费的午餐，想要成就，一定是要付出代价的。&lt;/p&gt;
&lt;p&gt;怎么选，在你。&lt;/p&gt;

&lt;p&gt;嗯，是的，跑题了。&lt;/p&gt;
&lt;p&gt;太晚了，明天，我们明天接着聊。&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 04:51:00 +0000</pubDate>
<dc:creator>自由飞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/freeflying/p/9442123.html</dc:identifier>
</item>
<item>
<title>彼之蜜糖，吾之砒霜——聊聊软件开发中的最佳实践 - sherrywasp</title>
<link>http://www.cnblogs.com/sherrywasp/p/9436623.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sherrywasp/p/9436623.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201808/788453-20180808092434358-5431827.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;“描述一个事物，唯有一个名词定义它的概念，唯有一个动词揭露它的行为，唯有一个形容词表现它的特征。要做的，就是用心去寻找那个名词、那个动词、那个形容词……”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;—— 福楼拜 (&lt;span&gt;Gustave Flaubert&lt;/span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我想讲个故事。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;很久很久以前（一般讲故事都是这样开头吧）， 两个老工程师在一起聊天，谈各自生涯中最自豪的工程。其中一个先讲述了他的杰作：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt;　“ &lt;/span&gt;&lt;span&gt;我们建造的桥，横跨一个峡谷，峡谷很宽很深。我们花了两年时间研究地质，选择材料。聘请了最好的工程师团队来设计方案，而这又花了五年时间。 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;我们签下了最大的工程队，委托他们建造基础结构、塔墩、收费亭，以及用于连接桥梁和高速公路的道路。桥面下层是铁路，我们甚至还修了自行车道。 &lt;/span&gt;&lt;span&gt;那座桥花费了我数年的心血。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　另外一个听完之后，陷入了沉思，过了一会儿，说到：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　“ &lt;/span&gt;&lt;span&gt;有一天晚上，我和一个朋友喝了点伏特加，然后我俩扔了一根绳子，越过一个河谷。呃…… 就是一根绳子，两头系在两颗树上。 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;河谷两边各有一个村庄，起初，有人加了个滑轮，用来传递包裹。然后，有人拉起了第二根绳子，勉强可以走走，虽然很危险，但小伙子们很喜欢。 &lt;/span&gt;&lt;span&gt;后来，一群人重新修建了一下，使得更牢固。于是，女人们也开始从上面走，每天带着她们的农产品过桥。 &lt;/span&gt;&lt;span&gt;就这样，在桥的另一边形成了一个市场。因为地方开阔，造了很多房子，慢慢地发展成了一个镇子。 &lt;/span&gt;&lt;span&gt;绳索桥被木桥替代，这样就可以走马车了。 &lt;/span&gt;&lt;span&gt;后来，镇上的人们修了一座真正的石桥。再然后，人们又把石料改成了钢材。 &lt;/span&gt;&lt;span&gt;如今，那座钢构悬索桥依然伫立在那里。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;前一个工程师沉默良久，说到：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;“ 有意思。我那座桥建成大约十年后，被拆除了。事实证明我们选错了地点，建好的桥没人用。据说有几个野路子的家伙，在下游几英里处，拉了一根绳子，所有人都从那走。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201808/788453-20180807215447630-1521857919.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;金门大桥（旧金山）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我很喜欢这个故事。故事的出处，在一款消息队列产品—— ZeroMQ 的&lt;a href=&quot;http://zguide.zeromq.org/page:all#header-167&quot; target=&quot;_blank&quot;&gt;官方指南第6章&lt;/a&gt;里。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;说完故事，我想聊聊软件开发中，常常可以听到的一个概念 —— &lt;strong&gt;Best Practice&lt;/strong&gt; ：&lt;strong&gt;最佳实践&lt;/strong&gt;。Wikipedia 上对其解释为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;A best practice is a method or technique that has been generally accepted as superior to any alternatives because it produces results that are superior to those achieved by other means or because it has become a standard way of doing things.&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(最佳实践是一种：因其产生的结果优于其它选择下的结果，或其已经成为一种做事的标准，从而被普遍认可优于任何替代方案的方法或技术。)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个概念源于管理学，然后在 IT 界泛滥。简而言之，就是所谓“正确的做法”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最佳实践本身是美好的存在，犹如夜空中的一轮明月，照亮黑暗中的方向，指引着摸索前行的凡人。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但凡事有度，子曰：“过犹不及。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我今天想说的，就是这&lt;strong&gt;月亮的背面&lt;/strong&gt;。（传说中，月球背面隐藏着…… 嘘~）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201808/788453-20180808095513935-46597575.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;潮汐锁定导致月球永远以同一面朝向地球&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　首先，&lt;strong&gt;最佳实践容易带来思想包袱，让人无法专注于解决问题本身。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　总是希望采用最好的技术方法，不愿意在不正确的做法上浪费时间，导致瞻前顾后，甚至裹足不前。此时的最佳实践，已然成为了一种毒药，一旦偏离了问题本身这个出发点，就会不知不觉走进“宏大构想”的思维陷阱。把简单的问题复杂化，阻碍了迈出第一步，产生拖延症，直到能规划出“包罗万象”的解决方案后才肯动手，而这完全没有必要。58同城的架构师沈剑曾说过，好的架构是进化而来的，不是设计出来的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其次，&lt;strong&gt;对最佳实践的执念容易让人钻牛角尖，将目标的重心带偏。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　过度关注实施过程是否符合标准化，忽视了项目中其它重要的东西，比如用户体验，比如实际需求。就像故事里讲的那样：第一座大桥，几乎是教科书般的标准化路数，可产品落地后和客户需求却差了好几英里；第二个看上去很野路子，但精准地解决了痛点，从始自终都是紧紧围绕实际需求迭代，每一次的进步都可以产生效用，这才叫杀手级应用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这让我想起了 &lt;strong&gt;Plan-9&lt;/strong&gt; 的传说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　你听说过 Plan-9 OS 吗？ 一款由贝尔实验室的极客们打造的用于完善 UNIX 不足的操作系统。什么不足？在 UNIX 的哲学中，有一条叫做 “一切皆文件” ，但实际上UNIX本身并没有严格遵从这一条。于是，Plan-9 OS 完美实现了这一点。然后呢……？ 没有然后了。它从没进过市场，所以如果你没听说过它，一点也不奇怪。Plan-9 OS 没有解决任何现实问题，没人在乎 “一切皆不皆文件”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　这种执念的另一种表现就是&lt;strong&gt;工程师思维，沉迷于奇技淫巧中无法自拔，&lt;/strong&gt;程序员尤其容易中招。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　比如性能优化。“优秀的程序员应该榨干每一字节内存”，听起来很熟悉，不是吗？但经济学上来讲，边际效应决定了一次项目中，越优化性价比越低。有一个很容易被忽略的事实：&lt;strong&gt;硬件其实比程序员要便宜&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　再比如对设计模式的崇拜。设计模式当然是好东西，但如果像强迫症一样使用它们，坚持用上它们才是正确的编程，就会导致按图索骥，强行让问题去适应设计模式，而不是让解决方案针对问题，这就本末倒置了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　我有个基友，C++ 极客。毕业后入了腾讯，积累了巨额财富后，自己创业了。当然，当老板可比写 C++ 难多了。于是现在又去积累巨额财富了。想当年和那厮聊天，言必出设计模式，没事侃正则，再没事就研究 GC 策略 (好像玩 C++ 的普遍这德性) 。前不久看他代码，差点没认出来，这家伙画风一转，现在连接口都懒得多用（估计看到这，某些狂热分子肯定在破口大骂：你什么意思，你说你没用面向接口编程？）那位兄台甚至都懒得多聊，轻描淡写来一句，“没心思，以后有需要再加。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　顺便扯一句，那哥们最近负责开发一款手游，他跟老板汇报的时候，预估的研发周期要12个月，然后老板跟他说：“好，12月出公测。” (哈~ 估计他肯定舌头打结把“12个月”说成了“12月”)。看到这的你，是否回忆起了你的老板？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这也是我接下来想说的关于最佳实践的另一个问题：&lt;strong&gt;项目实施。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　工作数年，大小项目经历若干，慢慢体会到，一个项目的开发顺利与否，并不在于技术选型是否为最佳实践，更多的时候，取决于开发方案和技术储备之间的平衡。&lt;strong&gt;做项目毕竟是要讲方案落地的&lt;/strong&gt;，如果最佳实践中的技术成本，超出了开发者的落实能力，那就是坑，这时盲从最佳实践无异于挖坟。如果是一个人的项目，抽时间恶补一通，兴许能填填坑，这取决于IQ。但要是一个团队，那就不是什么 IQ，EQ，QQ 的问题了，&lt;/span&gt;&lt;span&gt;这中间产生的学习成本，集体培训成本，反复沟通成本，大量的初级错误，千奇百怪的代码，互相冲突引发的焦躁情绪，等等。这些负面的东西如果不能妥善的处理，足以抵消掉最佳实践带来的好处。别忘了，deadline 正在迫近。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我自己曾经在一个项目组里，强行推行 &lt;strong&gt;Git&lt;/strong&gt; 做源代码管理，当时组里共9人，有7人只会 SVN，但我坚持 Git 是 “最佳实践”。要不说年少无知少不更事呢，罢了，后来的事情我不想回忆了…… 那次项目之后，我再也不在一群只会 SVN 的队伍里提 Git 了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;一个人做软件已经很难，比这更难的，是一群人做软件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当尘埃落定，蓦然回首，最佳实践很可能&lt;strong&gt;没你想象中那么重要&lt;/strong&gt;。它更多的是一种精神层面的求道，并非物质世界的必要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　扎克伯格 ( Mark Zuckerberg ) 于2004年在哈佛柯克兰公寓 ( Kirkland House ) 里写出 &lt;strong&gt;TheFacebook&lt;/strong&gt; 的时候 ( 次年更名为Facebook ) ，用的是 “世界上最好的编程语言” PHP。这门可能是业界被吐槽次数最多的语言一直支撑着FB帝国的诞生，直到席卷全球。&lt;strong&gt;Stack Overflow&lt;/strong&gt; 的联合创始人 Jeff Atwood 曾公开揶揄 Facebook 是一家 “召集全球顶级程序员在 Windows XP 上写 PHP ” 的公司。但这无所谓，24年前的马克也不纠结。一直等到需要的时候 (2010年)，Facebook自己动手研发了一个编程语言 —— Hack，来解决 PHP 带来的危机。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201808/788453-20180808102959568-1249875340.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;《社交网络》&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最佳实践，关键在时机（Timing）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果说用 Facebook 这个 “根本不存在” 的网站来举例，纯属虚构的话，那我们来说点真实的例子，Web 技术的基石——&lt;strong&gt;HTML&lt;/strong&gt;。由20世纪最重要的100人之一的 &lt;strong&gt;Tim Berners-Lee&lt;/strong&gt; 创造的 HTML，其发明之伟大，足以单独开篇博文来赞美了，这里就不赘述了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;&lt;span&gt;这&lt;/span&gt;&lt;span&gt;样一个造福全人类的神作，本身的设计结构绝非完美，甚至可以用混乱不堪来形容。没有严格统一的约束，形同虚设的规范，标准化进程的难产。以至于在很长一段时间内，连自身元素的定义，都可以向浏览器厂商妥协。但是，种种被人诟病的存在，丝毫不影响 HTML 改变世界的脚步。你我今天能相会于园，皆仰赖它的诞生。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　同样的例子还发生在 Web 世界另一个巨擎上——&lt;strong&gt;JavaScript&lt;/strong&gt;。当今世界，Web 前端技术已经水银泻地般肆虐整个开发界，前端框架百花齐放、JS 衍生品鳞次栉比。所有这一切的背后，全都源于上世纪90年代横空出世的 JavaScript。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么，JavaScript是最佳实践吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　别逗了，如果有什么语言可以和刚才说到的 PHP 竞争一下谁被骂的次数更多，那非 JavaScript 莫属。这个仅花了十天设计出来的语言，打一出身就被贴上了怪胎的标签。混乱的标准，多样的实现，安全漏洞，语法随意，反人类…… 总之，JavaScript 和最佳实践半毛钱关系都扯不上。但它却是撑起当今互联网半壁江山的擎天柱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以，用最接地气地话来说，不管黑猫白猫，逮着耗子就是最佳实践猫。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;彼之蜜糖，&lt;/span&gt;&lt;span&gt;吾之砒霜。&lt;/span&gt;&lt;/strong&gt;所谓最佳实践，其定义本身往往也是分歧的源头。什么是最佳？这个最佳是独一无二的吗？世界上有很多很多现实问题，可能根本就没有所谓的最佳实践。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　请听题，世界上最好的编程语言是哪个？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二题，世界上最好的文本编辑器是哪个？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　朋友，这天还聊得下去吗……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最后，说一个我自己的故事。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很久很久以前，为了找一款满意的文本编辑器，我干了一件可能是前无古人，后不知道有没有来者的蠢事 —— 我打开 Wikipedia，搜索 “ text editor ” ，然后转到一个叫做 “ List of text editors ” 的页面，接下来的一个月，我几乎把当时那个页面上，所有我能下载安装的文本编辑器，全部试用了一遍……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　嗯？你问我为什么这么做？呵呵，不把全世界的文本编辑器遍历一遍，我怎么知道哪个是最好的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这事细节我不想再提了，我也不想回忆了。要不说年少无知少不更事呢，时至今日，我想不出比这更愚蠢的事了。WTF~~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/788453/201808/788453-20180807222234285-1892228947.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当年这个页面上的表格行数还没有今天这么多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　如今，再有人问我最好的编程语言或者最好的文本编辑器的问题的话，我会说：&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　“朋友，要打架吗？”&lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这两个问题的最佳实践，唯有&lt;span&gt;暴力&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 04:03:00 +0000</pubDate>
<dc:creator>sherrywasp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sherrywasp/p/9436623.html</dc:identifier>
</item>
<item>
<title>.NET Core 2.1中的分层编译（预览） - Chaunce</title>
<link>http://www.cnblogs.com/xiaoliangge/p/9441988.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoliangge/p/9441988.html</guid>
<description>&lt;p&gt;&lt;span&gt;如果您是.NET性能的粉丝，最近有很多好消息，例如&lt;/span&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;.NET Core 2.1中的性能改进&lt;/a&gt;&lt;span&gt;和&lt;/span&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;宣布.NET Core 2.1&lt;/a&gt;&lt;span&gt;&lt;span&gt;，但我们还有更多的好消息。&lt;/span&gt;&lt;span&gt;分层编译是一项重要的新特性功能，我们可以作为预览供任何人试用，从.NET Core 2.1开始。&lt;/span&gt;&lt;span&gt;在我们测试的许多场景中，应用程序启动更快，并且在稳定状态下运行得更快。&lt;/span&gt;&lt;span&gt;一个在.NET Core 2.1上运行的项目，以及对环境变量或项目文件进行微不足道的更改以启用它。&lt;/span&gt;&lt;span&gt;在本文的其余部分，我们将介绍它是什么，如何使用它，以及为什么它是2.1版本的隐藏技能！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;什么是分层编译？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;从.NET Framework开始，代码中的每个方法通常都编译一次。&lt;/span&gt;&lt;span&gt;但是，在决定如何进行会影响应用程序性能的编译时，需要进行权衡。&lt;/span&gt;&lt;span&gt;例如，JIT可以进行非常积极的优化并获得很好的稳定性能，但是优化代码并不是一件容易的事情，因此您的应用程序启动速度非常慢。&lt;/span&gt;&lt;span&gt;或者JIT可以使用非常简单的编译算法，这些算法可以快速运行，因此您的应用程序可以快速启动，但代码质量会更差，并且应用程序吞吐量会受到影响。&lt;/span&gt;&lt;span&gt;.NET一直试图采用一种平衡的方法，在启动和稳定性能方面做得很合理，但使用单一编译意味着需要妥协。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;分层编译功能通过允许运行时热交换技术对.NET进行多次编译同一个方法改变了以上前提。&lt;/span&gt;&lt;span&gt;两套机制的分离以便我们可以选择最适合启动的技术，选择最稳定状态并且在两者上都表现出更好性能的第二种技术(分层编译)。&lt;/span&gt;&lt;span&gt;在.NET Core 2.1中，这就是Tiered Compilation旨在为您的应用程序做的事情：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;更快的应用程序启动时间&lt;/strong&gt;&lt;span&gt;&lt;span&gt; - 当应用程序启动时，它会等待一些MSIL代码到JIT。&lt;/span&gt;&lt;span&gt;分层编译要求JIT快速生成初始编译，如果需要，牺牲代码质量优化。&lt;/span&gt;&lt;span&gt;之后，如果频繁调用该方法，则在后台线程上生成更优化的代码，并替换初始代码以保持应用程序的稳定性能。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更快的稳定状态下的性能&lt;/strong&gt;&lt;span&gt; - 对于典型的.NET Core应用程序，大多数框架代码将从预编译（&lt;/span&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md&quot;&gt;ReadyToRun&lt;/a&gt;&lt;span&gt;&lt;span&gt;）映像&lt;/span&gt;&lt;span&gt;加载&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;这对于启动非常有用，但预编译的映像具有版本控制约束和禁止某些类型优化的CPU指令约束。&lt;/span&gt;&lt;span&gt;对于经常调用的这些镜像中的任何方法，分层编译请求JIT在后台线程上创建优化代码，以替换预编译版本。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;更快？到底有&lt;/span&gt;&lt;span&gt;多快？&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们将此作为预览版发布的部分原因是要了解它对您的应用程序的执行情况，但以下是我们对其进行测试的一些示例。虽然非常依赖于场景，但我们希望这些结果是您在类似工作场景上的典型代表，并且随着功能的成熟，结果将继续改进。基准测试是在默认配置下运行的.NET Core 2.1 RTM，并且所有数字都经过缩放，因此基准始终为1.0。在第一组中，我们有几个Tech Empower测试和&lt;a href=&quot;https://github.com/aspnet/musicstore&quot; target=&quot;_blank&quot;&gt;MusicStore（&lt;/a&gt;用来专门测试的项目）&lt;/span&gt;&lt;span&gt;，这是我们常用的ASP.NET应用示例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-18565&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/asp_net_startup.png&quot; alt=&quot;&quot; width=&quot;1302&quot; height=&quot;622&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-18575&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/asp_net_steady_state.png&quot; alt=&quot;&quot; width=&quot;1302&quot; height=&quot;624&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;虽然我们的一些ASP.NET基准测试得益于特别好（MvcPlaintext RPS超过60％ - 哇！），但分层编译并不特定于ASP.NET。&lt;/span&gt;&lt;span&gt;以下是您在日常开发中可能遇到的一些示例.NET Core命令行应用程序：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-18585&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/console_app_performance.png&quot; alt=&quot;&quot; width=&quot;1301&quot; height=&quot;620&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;你的应用程序将如何运作？&lt;/span&gt;&lt;span&gt;测量比预测要容易得多，但我们可以提供一些广泛的经验法则。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;启动改进主要适用于减少管理托管代码的时间。&lt;/span&gt;&lt;span&gt;您可以使用&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;PerfView&lt;/a&gt;&lt;span&gt;&lt;span&gt;等&lt;/span&gt;&lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;&lt;span&gt;工具&lt;/span&gt;&lt;/a&gt;&lt;span&gt;来确定您的应用花费多少时间。&lt;/span&gt;&lt;span&gt;在我们的测试中，jitting花费的时间通常会减少约35％。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;稳定状态的改进主要适用于CPU绑定的应用程序，其中一些热代码来自.NET或ASP.NET预编译库。例如&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;PerfView&lt;/a&gt;&lt;span&gt;可以帮助您确定您的应用程序是这一类。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;尝试一下&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;一个小免责声明，该功能仍然是一个预览。&lt;/span&gt;&lt;span&gt;我们已对其进行了大量测试，但默认情况下未启用此功能，因为我们希望收集反馈并继续进行调整。&lt;/span&gt;&lt;span&gt;打开它可能不会使你的应用程序更快，或者你可能遇到我们没有覆盖到的地方。&lt;/span&gt;&lt;span&gt;如果遇到问题，微软随时为您提供帮助，您可以随时轻松将其禁用。&lt;/span&gt;&lt;span&gt;如果您愿意，可以在生产中启用此功能，但我们强烈建议您事先进行测试。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有几种方式可以选择加入此功能，所有这些方法都具有相同的效果：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;如果使用.NET 2.1 SDK &lt;/span&gt;&lt;strong&gt;自行&lt;/strong&gt;&lt;span&gt;&lt;span&gt;构建应用程序 - 将MSBuild属性&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;TieredCompilation&amp;gt; true &amp;lt;/ TieredCompilation&amp;gt;添加&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;到项目文件中的默认属性组。&lt;/span&gt;&lt;span&gt;例如：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;此&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 链接可找到以下代码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Project &lt;/span&gt;&lt;span&gt;Sdk&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.NET.Sdk&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;OutputType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Exe&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;OutputType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netcoreapp2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TieredCompilation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TieredCompilation&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;如果运行已构建的应用程序，请编辑runtimeconfig.json以将&lt;/span&gt;&lt;strong&gt;System.Runtime.TieredCompilation = true&lt;/strong&gt;&lt;span&gt;&lt;span&gt;添加&lt;/span&gt;&lt;span&gt;到configProperties。&lt;/span&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runtimeOptions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;configProperties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Runtime.TieredCompilation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        }
      },
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;framework&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        ...
      }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;如果您想运行应用程序但不想修改任何文件，请设置环境变量&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
COMPlus_TieredCompilation=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有关尝试和测量性能的更多详细信息，请查看&lt;a href=&quot;https://github.com/aspnet/JitBench/blob/tiered_compilation_demo/README.md&quot;&gt;分层编译演示&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;获得这个技术&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;好奇它是如何工作的？&lt;/span&gt;&lt;span&gt;不要害怕，理解这些内部细节不是使用分层编译所必需的，如果您愿意，可以跳过本节。&lt;/span&gt;&lt;span&gt;一目了然，该功能可分为四个不同的部分：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;JIT编译器可以配置为生成不同质量的汇编代码 - 令许多人惊讶的是，到目前为止，这还不是该功能的重点。&lt;/span&gt;&lt;span&gt;回到.NET的起始，JIT支持默认编译模式和用于调试的无优化编译模式。&lt;/span&gt;&lt;span&gt;正常模式产生更好的代码质量并且编译需要更长时间，而“无优化”模式则相反。&lt;/span&gt;&lt;span&gt;对于分层编译，我们创建了新的配置名称“Tier0”和“Tier1”，但这些配置生成的代码与我们一直使用的“无优化”和“正常”模式大致相同。&lt;/span&gt;&lt;span&gt;到目前为止，大多数JIT更改都涉及在请求“Tier0”代码时使JIT生成代码更快。&lt;/span&gt;&lt;span&gt;我们希望将来继续提高Tier0编译速度，&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;CodeVersionManager(代码版本管理)跟踪同一方法的不同代码编译（版本） - 最基本的是一个大内存字典，它存储应用程序中.NET方法之间的映射和不同程序集实现的列表运行时可以使用它来执行该方法。&lt;/span&gt;&lt;span&gt;我们使用一些技巧来优化这种数据结构，但如果你想深入研究项目的这个方面，可以参考我们提供的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning.md&quot;&gt;&lt;span&gt;非常好的规范&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;相同方法的不同汇编代码汇编之间，在运行时状态下热更新的机制， - 当方法A调用方法B时，调用将依赖于jmp指令。通过调整运行时的jmp指令&lt;/span&gt;&lt;span&gt;可以控制执行B的哪个实现。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;决定要创建哪些代码版本以及何时在它们之间切换的策略 - 运行时始终首先创建Tier0，这是从ReadyToRun映像加载的代码，或者是使用最小化优化的代码。&lt;/span&gt;&lt;span&gt;呼叫计数器用于确定频繁运行哪些方法，并使用计时器来避免在启动期间过早创建Tier1的工作。&lt;/span&gt;&lt;span&gt;一旦计数器和计时器都满足，该方法就会排队，后台线程会编译Tier1版本。&lt;/span&gt;&lt;span&gt;有关详细信息，请查看&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/tiered-compilation.md&quot;&gt;规范&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;我们从哪里开始？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;分层编译创造了各种可能性，我们可以继续充分利用未来的时间。&lt;/span&gt;&lt;span&gt;既然运行时可以利用更极端的情况，那我们就有了扩展边界的动力和动力，既可以加快编译速度，又可以生成更高质量的代码。&lt;/span&gt;&lt;span&gt;通过代码的运行时热更新，.NET可以进行更详细的分析，然后使用运行时反馈来进行更好的优化（配置文件引导优化）。&lt;/span&gt;&lt;span&gt;这些技术可以允许代码生成器甚至超出无法访问配置文件数据的最佳静态优化器。&lt;/span&gt;&lt;span&gt;或者还有其他选项，例如用于更好诊断的动态去优化，用于减少内存使用的可收集代码，以及用于性能检测或服务的热补丁。&lt;/span&gt;&lt;span&gt;目前，我们最直接的目标仍然接近实际 - 确保预览中的功能运行良好，响应您的反馈，并完成工作的第一次迭代。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我们希望Tiered Compilation为您的应用程序提供与我们的基准测试相同的重大改进，并且我们知道还有更多尚未开发的潜力。&lt;/span&gt;&lt;span&gt;请&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/aspnet/JitBench/blob/tiered_compilation_demo/README.md&quot;&gt;试一试&lt;/a&gt;&lt;span&gt;，然后&lt;/span&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4331&quot;&gt;访问github&lt;/a&gt;&lt;span&gt;&lt;span&gt;，向我们提供反馈，讨论，提问，甚至可以贡献一些自己的代码。&lt;/span&gt;&lt;span&gt;谢谢！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;原文：&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/#comment-640375&quot; target=&quot;_blank&quot;&gt;.NET Core 2.1中的分层编译&lt;/a&gt;(预览)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 08 Aug 2018 03:57:00 +0000</pubDate>
<dc:creator>Chaunce</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoliangge/p/9441988.html</dc:identifier>
</item>
</channel>
</rss>