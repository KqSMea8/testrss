<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>python高级编程读书笔记（一） - python学习中</title>
<link>http://www.cnblogs.com/c-x-a/p/9919751.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/c-x-a/p/9919751.html</guid>
<description>&lt;p&gt;python高级编程读书笔记（一）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;python 高级编程读书笔记，记录一下基础和高级用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;hpython2python3&quot;&gt;&lt;span&gt;python2和python3兼容处理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;使用sys模块使程序python2和python3兼容&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs python&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys&lt;p&gt;ver=sys.version_info&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ver&amp;lt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; urllib &lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hpython&quot;&gt;&lt;span&gt;获取当前环境所用的python包&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;pip&lt;/span&gt; freeze&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会发现输出的所有的python包，包括python标准库的，所以独立的python运行环境很重要，使用virtualenv或者pipenv建立独立的python环境很重要。&lt;br/&gt;之后复制所有使用的模块到requirements.txt文件里。&lt;/p&gt;
&lt;h3 id=&quot;hrequirementstxt&quot;&gt;&lt;span&gt;requirements.txt 的用法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个文件含有当前项目使用的python包为了避免一个一个安装项目中缺失的包我们一般用。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.txt&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即可安装当前项目使用的包。&lt;/p&gt;
&lt;h3 id=&quot;hpdb&quot;&gt;&lt;span&gt;使用pdb模块交互式调试&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pdb&lt;br/&gt;pdb.set_trance()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;命令 n：执行下一步，其他的命令可以通过&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt; pdb &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进行获取。&lt;/p&gt;
&lt;h3 id=&quot;hzip&quot;&gt;&lt;span&gt;zip均匀分配迭代对象&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; zip([&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sex&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&quot;张三&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;男&quot;&lt;/span&gt;,25]):&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'name'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'张三'&lt;/span&gt;)&lt;br/&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'sex'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'男'&lt;/span&gt;)&lt;br/&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'age'&lt;/span&gt;, 25)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h&quot;&gt;&lt;span&gt;两个列表转化为字典的形式&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dict(zip([&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sex&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&quot;张三&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;男&quot;&lt;/span&gt;,25])))&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'张三'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'sex'&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'男'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'age'&lt;/span&gt;: 25}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;序列解包&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;a,b,c=(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;seq&quot;&lt;/span&gt;)&lt;br/&gt;a1,*b1,c1=(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;seq&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'tuple'&lt;/span&gt;)&lt;br/&gt;a2,b2,*c2=(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;seq&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'tuple'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b1)&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c2)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;&lt;br/&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'is'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'seq'&lt;/span&gt;]&lt;br/&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'seq'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'tuple'&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;字典推导式&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs dart&quot;&gt;d={f&lt;span class=&quot;hljs-string&quot;&gt;&quot;num{num}&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)}&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(d)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;'num0'&lt;/span&gt;: 0, &lt;span class=&quot;hljs-string&quot;&gt;'num1'&lt;/span&gt;: 1, &lt;span class=&quot;hljs-string&quot;&gt;'num2'&lt;/span&gt;: 4, &lt;span class=&quot;hljs-string&quot;&gt;'num3'&lt;/span&gt;: 9, &lt;span class=&quot;hljs-string&quot;&gt;'num4'&lt;/span&gt;: 16, &lt;span class=&quot;hljs-string&quot;&gt;'num5'&lt;/span&gt;: 25, &lt;span class=&quot;hljs-string&quot;&gt;'num6'&lt;/span&gt;: 36, &lt;span class=&quot;hljs-string&quot;&gt;'num7'&lt;/span&gt;: 49, &lt;span class=&quot;hljs-string&quot;&gt;'num8'&lt;/span&gt;: 64, &lt;span class=&quot;hljs-string&quot;&gt;'num9'&lt;/span&gt;: 81}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hforelse&quot;&gt;&lt;span&gt;for….else语句&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在for后面加else的语句，表示是for循环自然结束的而不是因为break结束的。&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs python&quot; readability=&quot;6&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;  i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i==&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;跳出循环&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;  i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i==&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;自然循环结束&quot;&lt;/span&gt;) &lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;自然循环结束&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-3&quot;&gt;&lt;span&gt;函数注解&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(num:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; and &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;-&amp;gt;(6666):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;print(foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数的冒号后计算注解值的表达式，-&amp;gt;填入返回值类型&lt;br/&gt;以上这种注解只会让人糊涂没什么卵用。&lt;/p&gt;
&lt;h3 id=&quot;h-4&quot;&gt;&lt;span&gt;描述符&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;10.5&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;15&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RevealAcess&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, initval=None, name=&lt;span class=&quot;hljs-string&quot;&gt;'var'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.val = initval&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.name = name&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, obj, objtype)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Retrieving&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.name)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.val&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, obj, val)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;updating&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.name)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.val = val&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br/&gt;x = RevealAcess(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'var &quot;x&quot;'&lt;/span&gt;)&lt;br/&gt;y = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name_&lt;span class=&quot;hljs-number&quot;&gt;_&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;br/&gt;m = MyClass()&lt;br/&gt;print(m.x)&lt;br/&gt;m.x = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;m.x&lt;br/&gt;print(m.y)&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;Retrieving &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;updating &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;br/&gt;Retrieving &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果一个类的某个属性有数据描述符(含有__get__,&lt;br/&gt;__set__方法的类称之为数据描述符),&lt;br/&gt;通过上述的例子可以知道，每次读取属性的时候会调用 __get__方法&lt;br/&gt;每次对属性赋值的时候调用__set__方法，只实现了__get__的称之为非数据描述符。&lt;/p&gt;
&lt;h3 id=&quot;h-5&quot;&gt;&lt;span&gt;延迟求值属性&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;8&quot;&gt;
&lt;code class=&quot;hljs python&quot; readability=&quot;10&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pymongo&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;self._client = &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, instance, owner)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._client &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;创建mongodb连接&quot;&lt;/span&gt;)&lt;br/&gt;self._client = pymongo.MongoClient(host=&lt;span class=&quot;hljs-string&quot;&gt;'127.0.0.1'&lt;/span&gt;,port=&lt;span class=&quot;hljs-number&quot;&gt;27017&lt;/span&gt;,maxPoolSize=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'使用存在连接!'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self._client&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;db=A()&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;'__main__'&lt;/span&gt;:&lt;br/&gt;m=B()&lt;br/&gt;print(m.db)&lt;br/&gt;print(m.db)&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果mongodb的连接已经建立就不重新创建了。单例模式的一种。实例之间共享属性达到节省资源的目的。&lt;/p&gt;
&lt;h3 id=&quot;hproperty&quot;&gt;&lt;span&gt;property的使用&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;16&quot;&gt;from requests_html import HTMLSession&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Spider&lt;/span&gt;():&lt;/span&gt;&lt;br/&gt;__slots_&lt;span class=&quot;hljs-number&quot;&gt;_&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;'url'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'new_url'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'session'&lt;/span&gt;]  &lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://www.baidu.com&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.new_url = None&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.session = HTMLSession()&lt;/p&gt;&lt;p&gt;@property&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_url&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.url&lt;/p&gt;&lt;p&gt;@get_url.setter&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_url&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, key)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.url = f&lt;span class=&quot;hljs-string&quot;&gt;'{self.url}/s?wd={key}'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_html&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;req = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.session.get(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.url)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; req.status_code == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; req.text&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name_&lt;span class=&quot;hljs-number&quot;&gt;_&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;'__main__'&lt;/span&gt;:&lt;br/&gt;s = Spider()&lt;br/&gt;s.get_url = &lt;span class=&quot;hljs-string&quot;&gt;'python'&lt;/span&gt;&lt;br/&gt;print(s.get_html())&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用property装饰器修饰函数get_url,在调用的时候就可以当属性直接调用，&lt;br/&gt;然后在此基础上定义同名函数，使用同名函数装饰器的setter方法修饰函数，可以实现赋值的功能。&lt;/p&gt;
&lt;p&gt;更多工具使用以及python技巧，请关注公众号：python学习开发。&lt;/p&gt;
&lt;p&gt;如果您喜欢我的文章不防动动小手转发一波，谢谢。&lt;br/&gt;点击阅读原文进入我的博客园，看代码更方便。由于人数超过100所以需要添加我微信:&lt;strong&gt;italocxa&lt;/strong&gt;，然后拉您入群。&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 15:44:00 +0000</pubDate>
<dc:creator>python学习中</dc:creator>
<og:description>python高级编程读书笔记（一） python 高级编程读书笔记，记录一下基础和高级用法 python2和python3兼容处理 使用sys模块使程序python2和python3兼容 import</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/c-x-a/p/9919751.html</dc:identifier>
</item>
<item>
<title>使用SpringBoot整合ssm项目 - 彳亍风</title>
<link>http://www.cnblogs.com/lmqblogs/p/9919736.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lmqblogs/p/9919736.html</guid>
<description>&lt;h2&gt;SpringBoot是什么？&lt;/h2&gt;
&lt;p&gt;　　Spring Boot&lt;span&gt;是由&lt;/span&gt;&lt;span&gt;Pivotal&lt;/span&gt;&lt;span&gt;团队提供的全新框架，其设计目的是用来简化新&lt;/span&gt;&lt;span&gt;Spring&lt;/span&gt;&lt;span&gt;应用的初始搭建以及开发过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Spring Boot&lt;/span&gt; &lt;span&gt;现在已经成为&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt; &lt;span&gt;开发领域的一颗璀璨明珠，它本身是包容万象的，可以跟各种技术集成。成为&lt;/span&gt;&lt;span&gt;SpringBoot&lt;/span&gt;&lt;span&gt;全家桶，成为一把万能钥匙。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;SpringBoot的特点&lt;/span&gt;&lt;/h2&gt;

&lt;p class=&quot;17&quot;&gt;&lt;span&gt;　　1.创建独立的&lt;/span&gt;Spring&lt;span&gt;应用程序&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;&lt;span&gt;　　2.嵌入的&lt;/span&gt;Tomcat&lt;span&gt;，无需部署&lt;/span&gt;&lt;span&gt;WAR&lt;/span&gt;&lt;span&gt;文件&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;&lt;span&gt;　　3.简化&lt;/span&gt;Maven&lt;span&gt;配置&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;&lt;span&gt;　　4.自动配置&lt;/span&gt;Spring&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;　　5.提供生产就绪型功能，如指标，健康检查和外部配置&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt; &lt;/p&gt;
&lt;p&gt;Spring&lt;span&gt;官方支持&lt;/span&gt;&lt;span&gt;SpringBoot&lt;/span&gt;&lt;span&gt;提供的项目框架生成页面&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;https://start.spring.io/&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181106230011768-439776209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在eclipse上创建springboot工程&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（&lt;/span&gt;jdk&lt;span&gt;版本必须&lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;以上，&lt;/span&gt;&lt;span&gt;springboot&lt;/span&gt;&lt;span&gt;基本上废除了&lt;/span&gt;&lt;span&gt;1.6&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;1.7）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;eclipse版本也有要求，版本过低，创建的工程会报错或者可以使用springboot低版本。也可以使用STS或IDEA，版本支持较好，下面演示用的是eclipse&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;简单的使用springboot整合ssm&lt;/h2&gt;

&lt;p&gt; 1.&lt;span&gt;创建&lt;/span&gt;Maven&lt;span&gt;工程，创建&lt;/span&gt;&lt;span&gt;simple project&lt;/span&gt;&lt;span&gt;，类型为&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181106231821788-2145583396.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;pom.xml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;额外需要的&lt;/span&gt;jar&lt;span&gt;，还得自己依赖，例如：&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;驱动包，阿里的数据源&lt;/span&gt;&lt;span&gt;druid&lt;/span&gt;&lt;span&gt;包&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.5.4.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;relativePath /&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.3.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;创建&lt;/span&gt;pojo&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    @DateTimeFormat(pattern&lt;/span&gt;=&quot;yyyy-MM-dd&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date birthday;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getBirthday() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; birthday;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setBirthday(Date birthday) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.birthday =&lt;span&gt; birthday;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, name=&quot; + name + &quot;, birthday=&quot; + birthday + &quot;, address=&quot; + address + &quot;]&quot;&lt;span&gt;;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建 UserMapper.xml&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!&lt;span&gt;DOCTYPE mapper
    PUBLIC &lt;/span&gt;&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;

&amp;lt;!-- namespace命名空间，唯一特性 --&amp;gt;
&amp;lt;mapper namespace=&quot;com.lmq.mapper.UserMapper&quot;&amp;gt;
    &amp;lt;select id=&quot;find&quot; resultType=&quot;User&quot;&amp;gt;&lt;span&gt;
        select id,name,birthday,address from user
    &lt;/span&gt;&amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建UserMapper&lt;span&gt;接口&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserMapper {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用xml方式&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; find();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用注解方式&lt;/span&gt;
    @Select(&quot;select * from user where id=#{id}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User get(@Param(&quot;id&quot;&lt;span&gt;) Integer id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建UserService接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserService {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; find();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User get(Integer id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建UserServiceImpl接口实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserMapper userMapper;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; find() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMapper.find();
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User get(Integer id){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMapper.get(id);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建UserController类&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;@RestController&lt;span&gt;替代&lt;/span&gt;&lt;span&gt;@Controller&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;@ResponseBody&lt;/span&gt;&lt;span&gt;（返回&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;串）&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@RequestMapping(value &lt;/span&gt;= &quot;/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;

    @RequestMapping(&lt;/span&gt;&quot;/find&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; find() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userService.find();
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/get/{id}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User get(@PathVariable Integer id){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userService.get(id);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建application.yml&lt;/p&gt;
&lt;p&gt;&lt;span&gt;全局配置文件，&lt;/span&gt;yml&lt;span&gt;为新的配置文件方式，注意其中格式为空格，不能有&lt;/span&gt;&lt;span&gt;tab&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置端口，配置数据源，配置&lt;/span&gt;mybatis&lt;span&gt;全局配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：如果端口，启动时日志显示&lt;/span&gt;8080&lt;span&gt;，说明此文件未加载。检查原因一般是文件名或者路径不正确。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;8080&lt;span&gt;

spring:
    datasource:
        type: com.alibaba.druid.pool.DruidDataSource
        driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name: com.mysql.jdbc.Driver
        url: jdbc:mysql:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:3306/mybatisdb&lt;/span&gt;
&lt;span&gt;        username: root
        password: root

mybatis:
  typeAliasesPackage: com.lmq.pojo
  mapperLocations: classpath:mappers&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.xml

logging:
  level: 
    com.lmq.mapper: debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建RunApplication.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@MapperScan(&lt;/span&gt;&quot;cn.lmq.mapper&quot;)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;扫描Mybatis接口文件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(RunApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初步整合完毕，比三大框架ssm好用太多了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;传统构建&lt;/span&gt;Maven&lt;span&gt;项目，&lt;/span&gt;&lt;span&gt;pom&lt;/span&gt;&lt;span&gt;中的依赖包繁多，升级一个&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;版本时，会引发新的冲突，调试许久。而&lt;/span&gt;&lt;span&gt;SpringBoot&lt;/span&gt;&lt;span&gt;接管了&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;的版本，它构建好一套，这套中各&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;的版本已经测试好，开发者再无需去关注每个依赖包的版本及冲突问题，从而简化开发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再者，它启动也非常快，直接运行一个类，使用&lt;/span&gt;tomcat&lt;span&gt;的&lt;/span&gt;&lt;span&gt;maven&lt;/span&gt;&lt;span&gt;插件。开发调试时效率提高。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;热部署支持&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;配置pom.xml&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 热部署支持 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 06 Nov 2018 15:41:00 +0000</pubDate>
<dc:creator>彳亍风</dc:creator>
<og:description>SpringBoot是什么？ Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。 Spring Boot 现在已经成为Java</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lmqblogs/p/9919736.html</dc:identifier>
</item>
<item>
<title>网络编程(一) - Thales5</title>
<link>http://www.cnblogs.com/zuanzuan/p/9919731.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuanzuan/p/9919731.html</guid>
<description>&lt;h2 id=&quot;section&quot;&gt;一 客户端/服务端架构&lt;/h2&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li&gt;
&lt;p&gt;硬件 C/S 架构&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;软件 C/S 架构&lt;/p&gt;
&lt;p&gt;互联网处处是 C/S 架构的&lt;/p&gt;
&lt;p&gt;如一个网站就是服务端,浏览器是客户端( B/S 架构)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务端需要遵循的原则:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;服务端与客户端都需要有惟一的地址,但是服务端的地址必须固定/绑定&lt;/li&gt;
&lt;li&gt;对外一直提供服务,需要稳定运行&lt;/li&gt;
&lt;li&gt;服务端需要支持并发&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;网络&lt;/p&gt;
&lt;p&gt;网络建立的目的是为了数据交互(通信)&lt;/p&gt;
&lt;p&gt;如何实现通信:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;建立好底层的物理连接介质&lt;/li&gt;
&lt;li&gt;有一套统一的通信标准,称之为互联网协议&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;互联网协议:就是计算机界的标准语言&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;section-1&quot;&gt;二 七层模型总览&lt;/h2&gt;
&lt;p&gt;互联网的实现,总共可以分为七层.每一层都靠下一层的支持.用户接触的是第七层,也就是应用层.想要理解互联网协议,必须从最下层开始,自下而上理解每一层的功能.&lt;/p&gt;
&lt;p&gt;OSI 模型可以分为七层,五层,四层,其实都是一个道理,只不过合并了几层而已.从下而上分别为:物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fwyjnukpjqj30ke09ojsr.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每层运行常见的物理设备:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwyjp5g9n1j30ik04vgmf.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;tcpip&quot;&gt;三 tcp/IP 五层模型理解&lt;/h2&gt;
&lt;p&gt;一般讲应用层,表示层,会话层并做应用层,从 tcp/IP 五层协议的角度来阐述每层的由来和功能,搞清楚了每层的主要协议也就理解了互联网通信的原理.&lt;/p&gt;
&lt;p&gt;每层都运行特定的协议,越往上越靠近用户,越往下越靠近硬件.&lt;/p&gt;
&lt;h3 id=&quot;section-2&quot;&gt;一 物理层&lt;/h3&gt;
&lt;p&gt;物理层也可以称之为实体层.电脑想要互相通信,第一件事先要把电脑连起来,可以用光缆,电缆等方式实现通信.这就叫&lt;strong&gt;实体层&lt;/strong&gt;,它就是把电脑连接起来的物理手段.它主要规定了网络的一些电器特性.它的功能室基于电器特性发送高低电压(电信号),高电压对应数字1,低电压对应数字0.&lt;/p&gt;
&lt;h3 id=&quot;section-3&quot;&gt;二 数据链路层&lt;/h3&gt;
&lt;p&gt;物理层单纯的传输电信号0和1没有任何意义,必须规定电信号多少位一组,每组什么意思.&lt;/p&gt;
&lt;p&gt;数据链路层的功能:定义了电信号的分组方式,这就是数据链路层的功能,它在物理层的上方,确定了0和1的分组方式.&lt;/p&gt;
&lt;h4 id=&quot;section-4&quot;&gt;1 以太网协议&lt;/h4&gt;
&lt;p&gt;早期的时候各个公司都有自己的分组方式,后来形成了统一的标准,即以太网协议 Ethernet.&lt;/p&gt;
&lt;p&gt;Ethernet 规定&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一组电信号构成一个数据包,也叫数据帧&lt;/li&gt;
&lt;li&gt;每一组数据帧分成:报头 head 和数据 data 两部分&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwyk0i1snvj30i2034jrh.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;报头包含数据包的一些说明项,比如发送者的源地址,接受者的源地址以及数据类型等等.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;发送者/源地址: 6个字节&lt;/li&gt;
&lt;li&gt;接受者/目标地址: 6个字节&lt;/li&gt;
&lt;li&gt;数据类型: 6个字节&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数据则是数据包的具体内容&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据包最短为46字节,最长为1500字节&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以一个数据帧的长度最短为64字节,最长1518字节,超过最大限制就分片发送.&lt;/p&gt;
&lt;h4 id=&quot;mac&quot;&gt;2 mac 地址&lt;/h4&gt;
&lt;p&gt;head 中包含的源地址和目标地址的由来: Ethernet 规定接入 Internet 的设备都必须具备网卡,发送端和接收端的地址便是指网卡的地址,即MAC 地址.&lt;/p&gt;
&lt;p&gt;mac 地址:每块网卡出厂时都被烧制上世界上一个惟一的MAC 地址,长度为48位2进制,通常由12位16进制数表示(前六位是厂商编号,后六位是流水线号)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fwykh847llj31101akdwu.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;装了好多次虚拟机,我现在也不知道那个是我的了...&lt;/p&gt;
&lt;h4 id=&quot;section-5&quot;&gt;3 广播&lt;/h4&gt;
&lt;p&gt;定义MAC 地址只是第一步,在一部电脑第一次接入局域网的时候,是怎么知道它的MAC 地址的呢.在局域网内通信都是通过MAC 地址来发包收包的,只要知道了对方的MAC 地址才可以互相通信.这就要靠ARP(addres resolution protocol) 协议来获取MAC 地址了,那么 arp 协议是如何解析出对方的MAC 地址呢?&lt;/p&gt;
&lt;p&gt;这里等到了网络层再来解释.&lt;/p&gt;
&lt;p&gt;注意:以太网数据包必须知道接收方的MAC 地址,才能发包.&lt;/p&gt;
&lt;p&gt;那么在同一个局域网内,知道了对方的MAC 地址,系统怎样才能把数据包准确送到接收方呢?&lt;/p&gt;
&lt;p&gt;以太网采用了一种很'原始'的方式,它并不是直接把数据包发到接收方,而是向局域网内所有的计算机发送,让每台计算机自己拆包后判断自己是否为接收方(前提知道对方MAC 地址)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwykr499haj30jg0ergn0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中,1号计算机向2号计算机发送一个数据包,局域网内其他的计算机都会收到这个包.他们读取数据包的报头,找到接收方得MAC 地址,然后与自身的MAC 地址相比较,如果两者相同,就接收这个包,做进一步的处理,不相同的话就丢弃这个数据包.这种发送方式叫'广播'.&lt;/p&gt;
&lt;p&gt;有了数据包的定义,网卡的MAC 地址,广播的发送方式,数据链路层就可以在同一局域网内的计算机之间传送数据了.&lt;/p&gt;
&lt;h3 id=&quot;section-6&quot;&gt;三 网络层&lt;/h3&gt;
&lt;h4 id=&quot;section-7&quot;&gt;1 网络层的由来&lt;/h4&gt;
&lt;p&gt;以太网协议,依靠MAC 地址发送数据,但这仅仅只能在同一个局域网内发送数据.理论上,依靠MAC 地址,是可以和全球任何一个MAC 地址发送数据的,因为MAC 地址是惟一的.但是这样做有一个致命的缺陷.&lt;/p&gt;
&lt;p&gt;以太网依靠广播方式发送数据包,而广播就意味着每个人都要发送一份,那么全球这么多的计算机,在找到对方的MAC 地址之前都要发一份无疑会造成巨大的浪费,而且效率极低,而且局限在发送者的局域网.也就是说,如果两台计算机不在同一个局域网,广播是传不过去的.这种设计是合理的,否则的话互联网上每一台计算机都会收到所有包,那会引起灾难.&lt;/p&gt;
&lt;p&gt;互联网可以想象成由无数个局域网组成的一个巨型网络,如果想要跨局域网通信必须找到另一种方式,能够区分哪些MAC 地址属于同一个局域网,哪些不属于同一个局域网.如果是同一个局域网的话,就采用广播发送(如何知道对方的MAC 地址),否则就采用'路由'的方式发送.('路由'的意思,就是指如何向不同局域网发送数据包)&lt;/p&gt;
&lt;p&gt;这就导致了'网络层'的诞生.它的作用是引进一套新的地址,使得我们能够区分不同的计算机是否属于同一个局域网.这套地址叫做'网络地址',简称'网址'.&lt;/p&gt;
&lt;p&gt;于是,网络层出现以后,每台计算机有了两种地址,一种是MAC 地址,另一种是网络地址.两种地址之间没有任何联系,MAC 地址是绑定到网卡上的,网络地址则是由MAC 服务器分配的,当一台计算机第一次联网时,会向MAC 服务器发送一个包,然后MAC 服务器会分配好网络地址.&lt;/p&gt;
&lt;p&gt;网络地址帮助我们确定计算机所在的局域网,MAC 地址则将数据包发送到该局域网中的目标MAC 地址.因此从逻辑上判断,必定是先处理网络地址,然后处理MAC 地址.&lt;/p&gt;
&lt;p&gt;可以这样理解,互联网中的通信都是MAC 地址互相发送数据包,而网络地址是为了帮我们确认需要往哪个局域网里面的目标MAC 地址发送数据包,两者缺一不可.&lt;/p&gt;
&lt;h4 id=&quot;ip&quot;&gt;2 IP 协议&lt;/h4&gt;
&lt;p&gt;规定网络地址的协议,叫做 IP 协议.它定义的地址,称为 IP 地址.&lt;/p&gt;
&lt;p&gt;目前,广泛采用的是 IP 协议第四版,简称 IPV4.这个版本规定,网络地址由32个二进制位组成.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwyls7jodaj312y088425.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出我的 IP 地址为192.168.11.95,习惯上,用四段的十进制数表示 IP 地址,从0.0.0.0到255.255.255.255.&lt;/p&gt;
&lt;p&gt;IP 地址一般分为5类:A,B,C,D,E 类, D 和E 类为其他用途的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwym12dookj30z809ggmu.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看粗来 IP 地址是有限的,而且现在的 IPV4 地址已经分完了,以后使用的就是 IPV6了,据说世界上的每一粒沙子都有一个惟一的 IP 地址.&lt;/p&gt;
&lt;p&gt;互联网上的每一台计算机,都会分配到一个 IP 地址.这个地址分为两部分,前一部分代表网络,后一部分代表主机.比如, 我的 IP 地址192.168.11.95,这是一个32位的地址,我的网络部分是前面24位192.168.11,那么主机号就是后8位.处于同一个局域网的电脑,它们 IP 地址的网络部分必定是相通的,也就是说192.168.11.95与192.168.11.49处于同一个局域网.&lt;/p&gt;
&lt;p&gt;但是我们单纯从 IP 地址是无法判断网络部分的,我为什么知道我的 IP 地址的网络号?其实没有另外一个地址的话我也不知道的.&lt;/p&gt;
&lt;p&gt;那么怎样从 IP 地址来判断计算机是否处于同一个局域网呢?这就是另外一个地址的作用了,也就是子网掩码.&lt;/p&gt;
&lt;p&gt;所谓子网掩码,就是表示子网络特征的一个参数.它在形式上等同于 IP 地址,也是一个32位二进制数字,它的网络部分全为1,主机部分全部为0.比如我的 IP192.168.11.95,因为我的网络部分为前24位,那么我的子网掩码就是255.255.255.0.&lt;/p&gt;
&lt;p&gt;知道了子网掩码,就可以判断,任意两个 IP 地址是否处于同一个局域网.方法是将两个 IP 地址与子网掩码分别进行 AND 运算(两个数位都为1,则为1,否则为0),然后比较结果是或否相同,如果相同,就表明处在同一个局域网,否则就不是,就需要通过路由协议发送数据包.&lt;/p&gt;
&lt;p&gt;IP 协议的作用主要有两个:一个是为每一台计算机分配 IP 地址,另一个是和子网掩码结合确定元 IP 与目标 IP 是否处于同一个局域网.&lt;/p&gt;
&lt;h4 id=&quot;ip-1&quot;&gt;3 IP 数据包&lt;/h4&gt;
&lt;p&gt;根据 IP 协议发送的数据,叫做 IP 数据包,不难想象,其中必定包括 IP 地址信息.&lt;/p&gt;
&lt;p&gt;但是前面说过.以太网数据包只包含MAC 地址,并没有 IP 地址的位置.那么是否需要修改数据定义在添加一个位置呢?&lt;/p&gt;
&lt;p&gt;我们可以直接把 IP 数据包放进以太网数据包的数据部分,因此完全不用修改以太网的规格.这就是互联网分层结构的好处:上层的变动完全不涉及下层的结构.&lt;/p&gt;
&lt;p&gt;具体来说, IP 数据包也分为报头和数据两个部分&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fwymqivhr5j30i203ot8t.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;报头部分主要包括版本,长度, IP 地址等信息,数据部分则是 IP 数据包的具体内容.它放进以太网数据包后,以太网数据包就拥有了两个报头.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwymrrfhyyj30i703t3yo.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IP 数据包的报头部分的长度为20到60个字节,整个数据包的总长度最大为65535字节.因此,理论上,一个 IP 数据包的数据部分,最长为65515字节,前面说过,以太网数据包的数据部分,最长为1500字节.因此,如果 IP 数据包超过了1500字节,它就需要分割成几个以太网数据包,分开发送.&lt;/p&gt;
&lt;h4 id=&quot;arp&quot;&gt;4 ARP 协议&lt;/h4&gt;
&lt;p&gt;从数据链路层和网络层我们知道,想要发送一个数据包,必须知道两个地址,一个是对方的 MAC 地址,另一个是对方的 IP 地址.通常情况下,对方的 IP 地址是已知的,但是不知道对方的 MAC 地址.&lt;/p&gt;
&lt;p&gt;所以需要一种机制能够从 IP 地址得到 MAC 地址.&lt;/p&gt;
&lt;p&gt;这里可以分为两种情况:第一种情况,如果两台主机不在同一个局域网,那么事实上没办法得到对方的 MAC 地址,只能把数据包传送到两个局域网连接处的网关' gateway',让网关去处理.&lt;/p&gt;
&lt;p&gt;第二种情况,如果两台主机在同一个局域网,那么可以使用 ARP 协议,得到对方的 MAC 地址. ARP 协议也是发送一个数据包(包含在以太网数据包中),其中包含它索要查询主机的IP 地址,在对方 MAC 地址这个位置,填的是 FF:FF:FF:FF:FF:FF,表示这是一个广播地址.它所在局域网的每一台计算机都会收到这个数据包,从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。&lt;/p&gt;
&lt;p&gt;总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。&lt;/p&gt;
&lt;h3 id=&quot;section-8&quot;&gt;四 传输层&lt;/h3&gt;
&lt;h4 id=&quot;section-9&quot;&gt;1 传输层的由来&lt;/h4&gt;
&lt;p&gt;有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。&lt;/p&gt;
&lt;p&gt;接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？&lt;/p&gt;
&lt;p&gt;也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做&quot;端口&quot;（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。&lt;/p&gt;
&lt;p&gt;&quot;端口&quot;是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。&lt;/p&gt;
&lt;p&gt;**&quot;传输层&quot;的功能，就是建立&quot;端口到端口&quot;的通信。相比之下，&quot;网络层&quot;的功能是建立&quot;主机到主机&quot;的通信。只要确定主机和端口，我们就能实现程序之间的交流。**因此，Unix系统就把主机+端口，叫做&quot;套接字&quot;（socket）。有了它，就可以进行网络应用程序开发了。&lt;/p&gt;
&lt;h4 id=&quot;udp&quot;&gt;2 UDP 协议&lt;/h4&gt;
&lt;p&gt;现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。&lt;/p&gt;
&lt;p&gt;UDP数据包，也是由&quot;报头&quot;和&quot;数据&quot;两部分组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fwyn9g4puyj30ii042wel.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&quot;报头&quot;部分主要定义了发出端口和接收端口，&quot;数据&quot;部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的&quot;数据&quot;部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fwyn9ycqwhj30ha03fwen.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;tcp&quot;&gt;3 TCP 协议&lt;/h4&gt;
&lt;p&gt;UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。&lt;/p&gt;
&lt;p&gt;因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。&lt;/p&gt;
&lt;p&gt;TCP数据包和UDP数据包一样，都是内嵌在IP数据包的&quot;数据&quot;部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。&lt;/p&gt;
&lt;h3 id=&quot;section-10&quot;&gt;五 应用层&lt;/h3&gt;
&lt;p&gt;应用程序收到&quot;传输层&quot;的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;应用层&quot;的作用，就是规定应用程序的数据格式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了&quot;应用层&quot;。&lt;/p&gt;
&lt;p&gt;这是最高的一层，直接面对用户。它的数据就放在TCP数据包的&quot;数据&quot;部分。因此，现在的以太网的数据包就变成下面这样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwynjcrt45j30kp072mxv.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的.&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 15:40:00 +0000</pubDate>
<dc:creator>Thales5</dc:creator>
<og:description>一 客户端/服务端架构 1. 硬件 C/S 架构 2. 软件 C/S 架构 互联网处处是 C/S 架构的 如一个网站就是服务端,浏览器是客户端( B/S 架构) 1. 服务端需要遵循的原则: 1. 服</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuanzuan/p/9919731.html</dc:identifier>
</item>
<item>
<title>Sentry部署 - 梁伟雄的博客</title>
<link>http://www.cnblogs.com/liangweixiong/p/9919725.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liangweixiong/p/9919725.html</guid>
<description>&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;前期准备&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# uname -r&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;3.10.0-327.el7.x86_64&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# uname -a&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Linux Aaron 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# python -V&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Python 2.7.5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# pip -V&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;pip 9.0.1 from /usr/lib/python2.7/site-packages (python 2.7)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;创建虚拟环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# pip install -U virtualenv&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# virtualenv /www/sentry/&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron ~]# source /www/sentry/bin/activate&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]#&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;安装sentry&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;这里sentry官网推荐postgres，因为我之前没使用过postgres，折腾了一会，感觉非常难受，所以最终选择mysql5.7，用哪个数据库都一样，只要在sentry.conf.py文件配置好就行。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;安装redis&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# yum install redis&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# systemctl start redis&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# systemctl status redis&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;安装mysql&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# yum install mysql-devel&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# pip install mysqlclient&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# wget -i -c &lt;a href=&quot;http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm&quot;&gt;http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# yum -y install mysql57-community-release-el7-10.noarch.rpm&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# yum -y install mysql-community-server&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# systemctl start&lt;span class=&quot;Apple-converted-space&quot;&gt;  mysqld.service&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# systemctl status mysqld.service&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;● mysqld.service - MySQL Server&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; Active: active (running) since 二 2018-11-06 10:47:51 CST; 6s ago&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     Docs: man:mysqld(8)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;           http://dev.mysql.com/doc/refman/en/using-systemd.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Process: 4775 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Process: 4698 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; Main PID: 4779 (mysqld)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   CGroup: /system.slice/mysqld.service&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;           └─4779 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;11月 06 10:47:47 Aaron systemd[1]: Starting MySQL Server...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;11月 06 10:47:51 Aaron systemd[1]: Started MySQL Server.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# grep &quot;password&quot; /var/log/mysqld.log&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;2018-11-06T02:47:48.394158Z 1 [Note] A temporary password is generated for root@localhost: wbP&amp;amp;Wms*p0y9&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# mysql -uroot -p&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;mysql&amp;gt; ALTER USER 'root'@'localhost' IDENTIFIED BY ‘Root.123456';&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;这里我就顺便把sentry数据库给创建了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;mysql&amp;gt; create database sentry;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Query OK, 1 row affected (0.00 sec)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;我这里图方便，直接yum安装了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;没有安装redis执行pip install -U sentry会报错&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;redis-py-cluster 1.3.5 has requirement redis&amp;gt;=2.10.6, but you'll have redis 2.10.5 which is incompatible.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;一定要先安装好redis和mysql，并且启动redis和mysql&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# yum install -y python-devel&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# pip install -U sentry&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;如果觉得慢，使用豆瓣源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;pip install -i &lt;a href=&quot;https://pypi.douban.com/simple/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;https://pypi.douban.com/simple/&lt;/span&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;  sentry&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# mkdir $HOME/sentry/&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# echo &quot;export SENTRY_CONF=$HOME/sentry/&quot; &amp;gt;&amp;gt; ~/.bash_profile&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# source ~/.bash_profile&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# sentry init $HOME/sentry/&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron ~]# cd ~/sentry/&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# ls&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;config.yml&lt;span class=&quot;Apple-converted-space&quot;&gt;  sentry.conf.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;修改config.yml&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron sentry]# cat config.yml|grep -v &quot;^#&quot;| grep -v &quot;^$&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;mail.backend: 'dummy'&lt;span class=&quot;Apple-converted-space&quot;&gt;  # Use dummy if you want to disable email entirely&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;system.secret-key: '(tn%ksnk&amp;amp;(%uxcsh_=3(wf%0upe)w(b0o02morvw)nvoj@6e#0'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;redis.clusters:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  default:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    hosts:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      0:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        host: 127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        port: 6379&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;filestore.backend: 'filesystem'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;filestore.options:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  location: '/tmp/sentry-files'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;修改sentry.conf.py&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[root@Aaron sentry]# cat sentry.conf.py|grep -v &quot;^#&quot;| grep -v &quot;^$&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;from sentry.conf.server import *&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;import os.path&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;CONF_ROOT = os.path.dirname(__file__)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;DATABASES = {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    'default': {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'ENGINE': 'django.db.backends.mysql',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'NAME': 'sentry',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'USER': 'root',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'PASSWORD': 'Root.123456',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'HOST': 'localhost',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'PORT': '3306',&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'AUTOCOMMIT': True,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        'ATOMIC_REQUESTS': False,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_USE_BIG_INTS = True&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_SINGLE_ORGANIZATION = True&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;DEBUG = False&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_CACHE = 'sentry.cache.redis.RedisCache'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;BROKER_URL = 'redis://localhost:6379'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_WEB_HOST = '0.0.0.0'&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_WEB_PORT = 9000&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;SENTRY_WEB_OPTIONS = {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    # 'workers': 3,&lt;span class=&quot;Apple-converted-space&quot;&gt;  # the number of web workers&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    # 'protocol': 'uwsgi',&lt;span class=&quot;Apple-converted-space&quot;&gt;  # Enable uwsgi protocol instead of http&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# sentry upgrade&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(sentry) [root@Aaron sentry]# sentry run web&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;然后访问ip:9000&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 15:38:00 +0000</pubDate>
<dc:creator>梁伟雄的博客</dc:creator>
<og:description>前期准备 [root@Aaron ~]# uname -r 3.10.0-327.el7.x86_64 [root@Aaron ~]# uname -a Linux Aaron 3.10.0-327.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liangweixiong/p/9919725.html</dc:identifier>
</item>
<item>
<title>【Docker】(5)---springCloud注册中心打包Docker镜像 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9919496.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9919496.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;上一篇文章讲了将镜像推送到远处私有仓库，然后再从私有仓库拉取该镜像的过程。而这里的镜像是直接从Docker拉取的。&lt;br/&gt;所以这篇要讲的就是将本地项目打包成Docker镜像的过程。&lt;/p&gt;
&lt;p&gt;先说明： &lt;code&gt;操作系统:mac&lt;/code&gt;,&lt;code&gt;JDK版本:1.8&lt;/code&gt;,&lt;code&gt;Maven版本:3.5.4&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;一mac安装docker&quot;&gt;&lt;span&gt;一、Mac安装Docker&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、下载 &lt;a href=&quot;https://link.jianshu.com/?t=https://download.docker.com/mac/stable/Docker.dmg&quot;&gt;docker.dmg&lt;/a&gt;文件，然后点击下一步，安装完成。&lt;/p&gt;
&lt;p&gt;2、下载好后，点击启动Docker,之后在命令行输入:&lt;code&gt;docker version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201811/1090617-20181106230325747-1087212197.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明本地安装Docker已经成功&lt;/p&gt;

&lt;h2 id=&quot;二创建注册中心服务项目&quot;&gt;&lt;span&gt;二、创建注册中心服务项目&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;application.yml&quot;&gt;&lt;span&gt;1、application.yml&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;server:
  port: 7001
  
eureka:
  instance:
    hostname: localhost
  client:
  #声明自己是个服务端
    registerWithEureka: false    #false表示不向注册中心注册自己
    fetchRegistry: false         #false表示自己就是注册中心，职责是维护实例，不参加检索
    serviceUrl:                  #设置eureka server的交互地址，即对外暴露的地址
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;启动类&quot;&gt;&lt;span&gt;2、启动类&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@SpringBootApplication
@EnableEurekaServer
@RestController
public class EurekaserverApplication {

    public static void main(String[] args) {
        SpringApplication.run(EurekaserverApplication.class, args);
    }

    //用来测试 是否镜像容器是否成功
    @RequestMapping(&quot;/user&quot;)
    public Object findUser(){
        Map&amp;lt;String, String &amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(&quot;name&quot;, &quot;xuxiaoxiao&quot;);
        map.put(&quot;age&quot;,&quot;2&quot;);
        return map;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有关pom的配置，在之前写springcloud中有展示。&lt;/p&gt;
&lt;h2 id=&quot;三配置docker的maven插件&quot;&gt;&lt;span&gt;三、配置Docker的maven插件&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;dockerfile-maven-plugin插件&quot;&gt;&lt;span&gt;1、dockerfile-maven-plugin插件&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;       &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;com.spotify&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;dockerfile-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;1.4.7&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;!--打包镜像名称 docker.image.prefix是在上面properties中设置的--&amp;gt;
                    &amp;lt;!--&amp;lt;docker.image.prefix&amp;gt;xdclass&amp;lt;/docker.image.prefix&amp;gt;--&amp;gt;
                    &amp;lt;repository&amp;gt;${docker.image.prefix}/${project.artifactId}&amp;lt;/repository&amp;gt;
                    &amp;lt;buildArgs&amp;gt;
                        &amp;lt;JAR_FILE&amp;gt;target/${project.build.finalName}.jar&amp;lt;/JAR_FILE&amp;gt;
                    &amp;lt;/buildArgs&amp;gt;
                &amp;lt;/configuration&amp;gt;
       &amp;lt;/plugin&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;配置dockerfile&quot;&gt;&lt;span&gt;2、配置Dockerfile&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG JAR_FILE
COPY ${JAR_FILE} app.jar
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;执行打包命令&quot;&gt;&lt;span&gt;3、执行打包命令&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;执行命令：&lt;code&gt;mvn clean package dockerfile:build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;说明：之前这边配置的&lt;code&gt;&amp;lt;version&amp;gt;1.3.6&amp;lt;/version&amp;gt;&lt;/code&gt;执行上面命令一直报错,之后在&lt;a href=&quot;https://stackoverflow.com/questions/52933220/failed-to-execute-goal-com-spotifydockerfile-maven-plugin1-3-6build-on-projec/&quot;&gt;STACK OVERFLOW&lt;/a&gt;找到原因，因为插件本身版本问题，后面改成1.4.7版本就不报这个错了。&lt;/p&gt;
&lt;p&gt;运行成功如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201811/1090617-20181106230344301-1903355741.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看本地镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201811/1090617-20181106230357210-174052915.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动镜像容器:&lt;code&gt;docker run -d --name &quot;start&quot; -p 9999:7001 ffff160672d1&lt;/code&gt;&lt;br/&gt;页面访问9999端口，看容器是否启动成功。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1090617/201811/1090617-20181106230540388-232331314.jpg&quot;/&gt;&lt;br/&gt;成功！&lt;/p&gt;
&lt;p&gt;有关&lt;code&gt;dockerfile-maven-plugin&lt;/code&gt;插件和&lt;code&gt;Dockerfile&lt;/code&gt;文件，在接下来博客中会深入了解。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;如果一个人充满快乐，正面的思想，那么好的人事物就会和他共鸣，而且被他吸引过来。同样，一个人老带悲伤，倒霉的事情也会跟过来。

                                                  ——在自己心情低落的时候，告诫自己不要把负能量带给别人。（大校7）
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 06 Nov 2018 15:17:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>【Docker】(5) springCloud注册中心打包Docker镜像 上一篇文章讲了将镜像推送到远处私有仓库，然后再从私有仓库拉取该镜像的过程。而这里的镜像是直接从Docker拉取的。 所以这篇</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9919496.html</dc:identifier>
</item>
<item>
<title>使用java api 创建excel内容并发送邮件 - 千狼</title>
<link>http://www.cnblogs.com/auguszero/p/9919601.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/auguszero/p/9919601.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;p&gt;简述：&lt;br/&gt;最近使用 github 在归类自己平时使用的工具类 github 地址:&lt;br/&gt;https://github.com/auguszero/javaToolRepsitory&lt;/p&gt;

&lt;h2 id=&quot;主要实现功能&quot;&gt;主要实现功能:&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;1.通过配置文件设置发送邮件发送方，接收方，抄送方 
2.目前实现了 自定义发送内容
3.实现了excel 邮件发送内容 &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;核心代码-sendmailmanager&quot;&gt;核心代码 (SendMailManager ) :&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package com.javatool.email.proxy;
import com.javatool.configer.DefaultConfigerContext;
import com.javatool.email.model.MailAuthenticator;
import com.javatool.email.model.SendMailConfigModel;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.util.Date;
import java.util.List;
import java.util.Properties;

/**
 * @author haisong
 * @create 2018/09/13 14:21
 */
public class SendMailManager {


    /**
     * 发送邮件
     * @param subject 邮件主题
     * @param content 邮件内容
     * @return success 发送成功 failure 发送失败
     * @throws Exception
     */
    public static String sendMail( String subject, String content)
            throws Exception {
        SendMailConfigModel sendMailConfigModel  = DefaultConfigerContext.getInstance().getModelFromProperties(SendMailConfigModel.class);
        String to = sendMailConfigModel.getTo();
        if (to != null){
              Properties props = System.getProperties();
            props.put(&quot;mail.smtp.host&quot;, sendMailConfigModel.getMail_smtp_host());
            props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
            props.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);
            MailAuthenticator auth = new MailAuthenticator();
            Session session = Session.getInstance(props, auth);
            session.setDebug(true);
            try {
                MimeMessage message = new MimeMessage(session);
                message.setFrom(new InternetAddress(sendMailConfigModel.getFrom()));
                if (!to.trim().equals(&quot;&quot;)) {
                    message.addRecipient(Message.RecipientType.TO,
                            new InternetAddress(to.trim()));
                }
                List&amp;lt;String&amp;gt; copyToList = sendMailConfigModel.getCopyToList();
                if(copyToList!=null&amp;amp;&amp;amp;copyToList.size()&amp;gt;0) {
                    Address[] addresses = new Address[copyToList.size()];
                    int i = 0;
                    for (String copy : copyToList) {
                        addresses[i] = new InternetAddress(copy);
                        i++;
                    }
                    message.addRecipients(Message.RecipientType.CC, addresses);
                }
                message.setSubject(subject);
                MimeBodyPart mbp1 = new MimeBodyPart(); // 正文
                mbp1.setContent(content, &quot;text/html;charset=utf-8&quot;);
                Multipart mp = new MimeMultipart(); // 整个邮件：正文+附件
                mp.addBodyPart(mbp1);
                message.setContent(mp);
                message.setSentDate(new Date());
                message.saveChanges();
                Transport trans = session.getTransport(&quot;smtp&quot;);
//                trans.connect(&quot;smtp.163.com&quot;, sendMailConfigModel.getUser(), sendMailConfigModel.getPassword());
                trans.send(message);
                System.out.println(message.toString());
            } catch (Exception e){
                e.printStackTrace();
                return &quot;failure&quot;;
            }
            return &quot;success&quot;;
        }else{
            return &quot;failure&quot;;
        }
    }



    public static String SendExcelMail(String  subject,List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; conteList) throws Exception {
        String htmlStr =&quot;&quot;;
        for(int i=0;i&amp;lt;conteList.size();i++){
            htmlStr = createHTML(htmlStr,conteList.get(i),i==0?true:false,i==conteList.size()-1?true:false);
        }
       String result =  sendMail(subject,htmlStr);
        return result;
    }



    private static String createHTML(String originHtml, List&amp;lt;String&amp;gt; data,boolean headFlage,boolean endFlage) {
        String html_msg=&quot;&quot;;
        if(headFlage){
            html_msg = &quot;&amp;lt;table border=\&quot;1\&quot; width='80%' height='80'&amp;gt;&quot;;
            html_msg = html_msg+&quot;&amp;lt;tr bgcolor='#B6DDE6'&amp;gt;&quot;;
            for(int column=0;column&amp;lt;data.size();column++){
                html_msg = html_msg +&quot;&amp;lt;td width='12%'&amp;gt;&quot;+data.get(column)+&quot;&amp;lt;/td&amp;gt;&quot;;
            }
            html_msg = html_msg+&quot;&amp;lt;/tr&amp;gt;&quot;;
        }else{
            html_msg = html_msg+&quot;&amp;lt;tr&amp;gt;&quot;;
            for(int column=0;column&amp;lt;data.size();column++){
                html_msg = html_msg +&quot;&amp;lt;td&amp;gt;&quot;+data.get(column)+&quot;&amp;lt;/td&amp;gt;&quot;;
            }
            html_msg = html_msg+&quot;&amp;lt;/tr&amp;gt;&quot;;
        }
        if(endFlage){
            html_msg = html_msg + &quot;&amp;lt;/table&amp;gt;&quot;;
        }
        return originHtml+html_msg;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置文件内容&quot;&gt;配置文件内容 :&lt;/h2&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;sendMail.mail_smtp_host=smtp.163.com
sendMail.mail_smtp_auth=login
sendMail.user=***@163.com
sendMail.password=******
sendMail.from=*****@163.com
sendMail.to=auguszero@163.com&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;excel-邮件发送实例图&quot;&gt;excel 邮件发送实例图:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1483757/201811/1483757-20181106231236847-434793974.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果你觉得可以 可以直接在github 上将该项目打包好 进行引入 作为工具类 。&lt;/p&gt;
&lt;p&gt;同时欢迎大家一起来完善这个github项目 。&lt;br/&gt;欢迎一起交流:&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1483757/201811/1483757-20181106231245144-563644242.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 15:14:00 +0000</pubDate>
<dc:creator>千狼</dc:creator>
<og:description>[TOC] 简述： 最近使用 github 在归类自己平时使用的工具类 github 地址: https://github.com/auguszero/javaToolRepsitory 利用java</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/auguszero/p/9919601.html</dc:identifier>
</item>
<item>
<title>python jieba库的基本使用 - |旧市拾荒|</title>
<link>http://www.cnblogs.com/xiaoyh/p/9919590.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyh/p/9919590.html</guid>
<description>&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;输入命令：pip install jieba&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106222624798-577651364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;jieba库分词的三种模式：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1、精准模式：把文本精准地分开，不存在冗余&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　2、全模式：把文中所有可能的词语都扫描出来，存在冗余&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　3、搜索引擎模式：在精准模式的基础上，再次对长词进行切分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106223010468-1099037278.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;精准模式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt; jieba&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt; jieba.lcut(&quot;&lt;span&gt;中国是一个伟大的国家&lt;/span&gt;&quot;)&lt;br/&gt;　　&lt;span&gt;Building prefix dict from the default dictionary ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Loading model from cache C:\Users\25282\AppData\Local\Temp\jieba.cache&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Loading model cost 0.869 seconds.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Prefix dict has been built succesfully.&lt;/span&gt;&lt;br/&gt;　　&lt;span&gt;['中国', '是', '一个', '伟大', '的', '国家']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;全模式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;gt;&amp;gt;&amp;gt; jieba.lcut(&quot;&lt;span&gt;中国是一个伟大的国家&lt;/span&gt;&quot;,cut_all=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;　　['中国', '国是', '一个', '伟大', '的', '国家']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;搜索引擎模式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;gt;&amp;gt;&amp;gt; jieba.lcut_for_search(&quot;&lt;span&gt;中华人民共和国是伟大的&lt;/span&gt;&quot;)&lt;br/&gt;　　&lt;span&gt;['中华', '华人', '人民', '共和', '共和国', '中华人民共和国', '是', '伟大', '的']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;向分词词典增加新词：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;gt;&amp;gt;&amp;gt; jieba.add_word(&quot;&lt;span&gt;蟒蛇语言&lt;/span&gt;&quot;)&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt; jieba.lcut(&quot;&lt;span&gt;python是蟒蛇语言&lt;/span&gt;&quot;)&lt;br/&gt;　　&lt;span&gt;['python', '是', '蟒蛇语言']&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106223919806-130050068.png&quot; alt=&quot;&quot; width=&quot;850&quot; height=&quot;191&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106224019989-1202771002.png&quot; alt=&quot;&quot; width=&quot;847&quot; height=&quot;531&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　&lt;span&gt;&lt;strong&gt;（1）查找出“threekingdoms.txt”文件中出现频率前十位的词汇 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106225418132-55221138.png&quot; alt=&quot;&quot; width=&quot;855&quot; height=&quot;588&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;&lt;strong&gt;（2）统计出“threekingdoms.txt”文件 “关羽”、“曹操”、“诸葛亮”、“刘备” 等人名出现的次数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1126989/201811/1126989-20181106225601349-1852172424.png&quot; alt=&quot;&quot; width=&quot;858&quot; height=&quot;625&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 06 Nov 2018 15:12:00 +0000</pubDate>
<dc:creator>|旧市拾荒|</dc:creator>
<og:description>第一步：先安装jieba库 输入命令：pip install jieba jieba库常用函数： jieba库分词的三种模式： 1、精准模式：把文本精准地分开，不存在冗余 2、全模式：把文中所有可能的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoyh/p/9919590.html</dc:identifier>
</item>
<item>
<title>手把手教你写DI_0_DI是什么？ - victor.x.qu</title>
<link>http://www.cnblogs.com/fs7744/p/9919559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fs7744/p/9919559.html</guid>
<description>&lt;p&gt;Dependency Injection 常常简称为：DI。&lt;/p&gt;
&lt;p&gt;它是实现控制反转（Inversion of Control – IoC）的一个模式。&lt;/p&gt;
&lt;p&gt;fowler 大大大神 “几十年”前的经典文章 &lt;a href=&quot;https://www.martinfowler.com/articles/injection.html&quot; class=&quot;uri&quot;&gt;https://www.martinfowler.com/articles/injection.html&lt;/a&gt; 说的很清楚。&lt;/p&gt;
&lt;p&gt;“几十年”以来，相信大家都早已学会了 大大大神 的教典。&lt;/p&gt;
&lt;p&gt;我们简单回忆一下对应内容，以便我们可以顺利进入后续章节：徒手撸个小DI。&lt;/p&gt;
&lt;p&gt;文章内容大致是这样：&lt;/p&gt;
&lt;p&gt;首先举例：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;
public interface MovieFinder {
    List findAll();
}

class MovieLister {

    private MovieFinder finder;

   public MovieLister() {
    finder = new ColonDelimitedMovieFinder(&quot;movies1.txt&quot;);
  }

  public Movie[] moviesDirectedBy(String arg) {
      List allMovies = finder.findAll();
      for (Iterator it = allMovies.iterator(); it.hasNext();) {
          Movie movie = (Movie) it.next();
          if (!movie.getDirector().equals(arg)) it.remove();
      }
      return (Movie[]) allMovies.toArray(new Movie[allMovies.size()]);
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后大大大神吐槽了一堆：&lt;/p&gt;
&lt;p&gt;这个实现类的名字就说明：我将要从一个逗号分隔的文本文件中获得影片列表。你不必操心具体的实现细节，只要设想这样一个实现类就可以了。如果这个类只由我自己使用，一切都没问题。但是，如果我的朋友叹服于这个精彩的功能，也想使用我的程序，那又会怎么样呢？如果他们也把影片清单保存在一个逗号分隔的文本文件中，并且也把这个文件命名为” movie1.txt “，那么一切还是没问题。如果他们只是给这个文件改改名，我也可以从一个配置文件获得文件名，这也很容易。但是，如果他们用完全不同的方式——例如SQL 数据库、XML 文件、web service，或者另一种格式的文本文件——来存储影片清单呢？在这种情况下，我们需要用另一个类来获取数据。由于已经定义了MovieFinder接口，我可以不用修改moviesDirectedBy方法。但是，我仍然需要通过某种途径获得合适的MovieFinder实现类的实例。&lt;/p&gt;
&lt;p&gt;还有张依赖图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/818422/201811/818422-20181106222049996-1554441994.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MovieLister类既依赖于MovieFinder接口，也依赖于具体的实现类。我们当然希望MovieLister类只依赖于接口，但我们要如何获得一个MovieFinder子类的实例呢？&lt;/p&gt;
&lt;p&gt;在Patterns of Enterprise Application Architecture一书中，我们把这种情况称为插件（plugin）：MovieFinder的实现类不是在编译期连入程序之中的，因为我并不知道我的朋友会使用哪个实现类。我们希望MovieLister类能够与MovieFinder的任何实现类配合工作，并且允许在运行期插入具体的实现类，插入动作完全脱离我（原作者）的控制。这里的问题就是：如何设计这个连接过程，使MovieLister类在不知道实现类细节的前提下与其实例协同工作。&lt;/p&gt;
&lt;p&gt;将这个例子推而广之，在一个真实的系统中，我们可能有数十个服务和组件。在任何时候，我们总可以对使用组件的情形加以抽象，通过接口与具体的组件交流（如果组件并没有设计一个接口，也可以通过适配器与之交流）。但是，如果我们希望以不同的方式部署这个系统，就需要用插件机制来处理服务之间的交互过程，这样我们才可能在不同的部署方案中使用不同的实现。所以，现在的核心问题就是：如何将这些插件组合成一个应用程序？这正是新生的轻量级容器所面临的主要问题，而它们解决这个问题的手段无一例外地是控制反转（Inversion of Control）模式。&lt;/p&gt;
&lt;p&gt;学术一点就是说 避免类之间强耦合，我们需要用依赖注入等方式在运行时才建立依赖达到代码松耦合，从而使代码易为维护&lt;/p&gt;
&lt;p&gt;戏言就是在说：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;我们都是大忙人，请你作为一个类简单明了的说清楚 ： 你这个类能干什么事？ 不要让我们这些大忙人把你每件衣服一件一件看完了才知道你是木匠， 还是铁匠&lt;/li&gt;
&lt;li&gt;我们都是大老板，我们财产不能全靠你一个，你不能干活或者你干不好活，我们做老板的人必须能找人换了你&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以上述代码中：&lt;/p&gt;
&lt;p&gt;我（MovieLister）离不开了 你 （ColonDelimitedMovieFinder(&quot;movies1.txt&quot;)），&lt;/p&gt;
&lt;p&gt;但是我们男人必须靠自己，至少表面没人看出我们之间的关系&lt;/p&gt;
&lt;p&gt;只有从我们（MovieLister）身体里面没有了你，才能没人看出我们之间的关系&lt;/p&gt;
&lt;p&gt;当我们开始干活的时候，我们再根据我们的私下关系协调好工作，男女搭配，好好干活。&lt;/p&gt;
&lt;p&gt;说到这里, 各位要被面试的同学记好这些话， 不要被问到依赖注入帮我解决了什么事情的时候， 回一句 我们不用自己new 对象啦， 这样大家就不会看见面试官无语又懵逼的脸了。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;构造函数注入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class MovieLister 
{
   private IMovieFinder finder;

   public MovieLister(IMovieFinder finder) {
    this.finder = finder;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;属性注入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class MovieLister 
{
   [Inject]
   public IMovieFinder Finder { get; set;}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;接口注入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface InjectFinder
{
    void injectFinder(MovieFinder finder);
}
class MovieLister : InjectFinder 
{
    private IMovieFinder finder;

    public void injectFinder(MovieFinder finder)
    {
        this.finder = finder;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这几种方式之间并没有性能或者什么特别的优势，主要是形式上的差异。&lt;/p&gt;
&lt;p&gt;具体对比可以参考 &lt;a href=&quot;http://insights.thoughtworkers.org/injection/&quot; class=&quot;uri&quot;&gt;http://insights.thoughtworkers.org/injection/&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 06 Nov 2018 15:09:00 +0000</pubDate>
<dc:creator>victor.x.qu</dc:creator>
<og:description>DI是什么？ Dependency Injection 常常简称为：DI。 它是实现控制反转（Inversion of Control – IoC）的一个模式。 fowler 大大大神 “几十年”前的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fs7744/p/9919559.html</dc:identifier>
</item>
<item>
<title>netty源码解解析(4.0)-2 Chanel的接口设计 - 自带buff</title>
<link>http://www.cnblogs.com/brandonli/p/9919562.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/brandonli/p/9919562.html</guid>
<description>&lt;p&gt;全名: io.netty.channel.Channel&lt;/p&gt;
&lt;p&gt;Channel内部定义了一个Unsafe类型，Channel定义了对外提供的方法，Unsafe定义了具体实现。我把Channel定义的的方法分为三种类型:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;辅助方法。&lt;/li&gt;
&lt;li&gt;outbound方法&lt;/li&gt;
&lt;li&gt;inbound方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面依次对这三种方法给予详细说明:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 辅助方法&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;19.5&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-0-0&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-0-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-1-0&quot;&gt;
&lt;p&gt;EventLoop eventLoop()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-1-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;得到EventLoop实例，每个Channel实例都会被注册到一个EventLoop中，这个EventLoop实例就是Channel注册的实例。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-2-0&quot;&gt;
&lt;p&gt;Channel parent()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-2-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;得到父Channel实例。如: channelB = channelA.accept(), 那么channelA就是channelB的parent。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-3-0&quot;&gt;
&lt;p&gt;ChannelConfig config()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;得到Channel实例的配置信息。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-4-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;boolean isOpen()                                                                                      &lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-4-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;channel是否处于open状态。netty为每个channel定义了四种状态open-&amp;gt;registered-&amp;gt;active-&amp;gt;closed。一个新创建的channel处于open状态，随后他被注册到一个eventloop中它处于open+registered状态，当这个channel上的连接建立成功后它处于open+registered+active状态，被关闭后处于closed状态。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-5-0&quot;&gt;
&lt;p&gt;boolean isRegistered()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-5-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel是否处于registered状态。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-6-0&quot;&gt;
&lt;p&gt;boolean isActive()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-6-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel是否处于active状态。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-7-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SocketAddress localAddress()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-7-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel的本地bind的地址。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-8-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SocketAddress remoteAddress()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-8-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel连接的远程channel的地址。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-9-0&quot;&gt;
&lt;p&gt;boolean isWritable()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-9-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel的I/O线程是否可以立即执操作。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-10-0&quot;&gt;
&lt;p&gt;Unsafe unsafe()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-10-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;得到channel内部的Unsafe实例。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-11-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;ChannelPipeline pipeline()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-11-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;得到channel内部的ChannelPipeline实例。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;4983-1541081953284-cell-12-0&quot;&gt;
&lt;p&gt;ByteBufAllocator alloc()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4983-1541081953284-cell-12-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;channel持有的buffer分配器。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. outbound方法&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;31&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-0-0&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-0-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-1-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;ChannelFuture bind(SocketAddress localAddress)&lt;/p&gt;
&lt;p&gt;ChannelFuture bind(SocketAddress localAddress, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-1-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;让channel绑定的指定的本地地址(localAddress)上。这个方法会触发ChannelOutboundHandler#bind(ChannelHandlerContext, SocketAddress, ChannelPromise)方法的调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;22.5&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-2-0&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;ChannelFuture connect(SocketAddress remoteAddress)&lt;/p&gt;
&lt;p&gt;ChannelFuture connect(SocketAddress remoteAddress, SocketAddress localAddress)&lt;/p&gt;
&lt;p&gt;ChannelFuture connect(SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-2-1&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;连接到远程地址(remoteAddress), 这个方法会触发ChannelOutboundHandler#connect(ChannelHandlerContext, SocketAddress, SocketAddress, ChannelPromise)方法的调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.5&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-3-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;ChannelFuture disconnect()&lt;/p&gt;
&lt;p&gt;ChannelFuture disconnect(ChannelPromise promise);&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-3-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;断开连接, 这个方法会触发ChannelOutboundHandler#disconnect(ChannelHandlerContext, ChannelPromise)的调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-4-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;ChannelFuture close()&lt;/p&gt;
&lt;p&gt;ChannelFuture close(ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-4-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;关闭channel. 这个方法会触发ChannelOutboundHandler#close(ChannelHandlerContext, ChannelPromise)的调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.5&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-5-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;ChannelFuture deregister()&lt;/p&gt;
&lt;p&gt;ChannelFuture deregister(ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-5-1&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;从eventloop中注销这个channel,这个方法会触发ChannelOutboundHandler#deregister(ChannelHandlerContext, ChannelPromise)的调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-6-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;ChannelFuture write(Object msg)&lt;/p&gt;
&lt;p&gt;ChannelFuture write(Object msg, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-6-1&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;向channel写入数据，这个操作不会导致真正写操作，只会把数据追加到输出缓冲区中。它会触发ChannelOutboundHandler#write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-7-0&quot;&gt;
&lt;p&gt;Channel flush()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-7-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;对输出缓冲区中的数据执行真正的写操作，调用这个方法后连接的另一端才能收到write的数据，它会触发ChannelOutboundHandler#flush(ChannelHandlerContext ctx)调用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.5&quot;&gt;&lt;td data-cell-id=&quot;4534-1541162870021-cell-8-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;ChannelFuture writeAndFlush(Object msg, ChannelPromise promise)&lt;/p&gt;
&lt;p&gt;ChannelFuture writeAndFlush(Object msg)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;4534-1541162870021-cell-8-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;效果和先调用write然后调用flush一样。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. inbound方法&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;5756-1541163599046-cell-0-0&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;5756-1541163599046-cell-0-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.5&quot;&gt;&lt;td data-cell-id=&quot;5756-1541163599046-cell-1-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Channel read()                                                                                        &lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;5756-1541163599046-cell-1-1&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;从channel中读取数据，把数据放到输入缓冲区中，然后触发ChannelInboundHandler#channelRead(ChannelHandlerContext, Object)和ChannelInboundHandler#channelReadComplete(ChannelHandlerContext)调用，如果之前已经有一个read操作正在执行或等待执行，这个方法不会有任何影响。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Unsafe接口定义&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;27.5&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-0-0&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-0-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-1-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SocketAddress localAddress()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-1-1&quot;&gt;
&lt;p&gt;同Channel&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-2-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SocketAddress remoteAddress()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-2-1&quot;&gt;
&lt;p&gt;同Channel&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-3-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;void register(EventLoop eventLoop, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-3-1&quot;&gt;
&lt;p&gt;同Channel,&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-4-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;void bind(SocketAddress localAddress, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-4-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-5-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;void connect(SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-5-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-6-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;void disconnect(ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-6-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-7-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;void close(ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-7-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-8-0&quot;&gt;
&lt;p&gt;void closeForcibly()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-8-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;立即关闭channel,并且不触发任何事件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-9-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;void deregister(ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-9-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-10-0&quot;&gt;
&lt;p&gt;void beginRead()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-10-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;为channel触发read事件做准备。如：把read事件注册到NIO 的selector上。 必须在I/O线程中执行 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-11-0&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;void write(Object msg, ChannelPromise promise)&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-11-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-12-0&quot;&gt;
&lt;p&gt;void flush()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-12-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;同Channel, 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td data-cell-id=&quot;2113-1541168342378-cell-13-0&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;ChannelOutboundBuffer outboundBuffer()&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;2113-1541168342378-cell-13-1&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;得到channel的输出缓冲区，write的数据就是追加到这个缓冲区中。 必须在I/O线程中执行&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;



</description>
<pubDate>Tue, 06 Nov 2018 15:09:00 +0000</pubDate>
<dc:creator>自带buff</dc:creator>
<og:description>全名: io.netty.channel.Channel Channel内部定义了一个Unsafe类型，Channel定义了对外提供的方法，Unsafe定义了具体实现。我把Channel定义的的方法分</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/brandonli/p/9919562.html</dc:identifier>
</item>
<item>
<title>java核心技术-NIO - 我是派大星</title>
<link>http://www.cnblogs.com/dwlovelife/p/9919495.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dwlovelife/p/9919495.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1、reactor（反应器）模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　使用单线程模拟多线程，提高资源利用率和程序的效率，增加系统吞吐量。下面例子比较形象的说明了什么是反应器模式：&lt;/p&gt;
&lt;p&gt;　　一个老板经营一个饭店，&lt;/p&gt;
&lt;p&gt;　　传统模式 - 来一个客人安排一个服务员招呼，客人很满意；（相当于一个连接一个线程）&lt;/p&gt;
&lt;p&gt;　　后来客人越来越多，需要的服务员越来越多，资源条件不足以再请更多的服务员了，传统模式已经不能满足需求。老板之所以为老板自然有过人之处，老板发现，服务员在为客人服务时，当客人点菜的时候，服务员基本处于等待状态，（阻塞线程，不做事）。&lt;/p&gt;
&lt;p&gt;　　于是乎就让服务员在客人点菜的时候，去为其他客人服务，当客人菜点好后再招呼服务员即可。 --反应器（reactor）模式诞生了&lt;/p&gt;
&lt;p&gt;　　饭店的生意红红火火，几个服务员就足以支撑大量的客流量，老板用有限的资源赚了更多的money~~~~&lt;sup&gt;_&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;　&lt;em&gt;通道：类似于流，但是可以异步读写数据（流只能同步读写），通道是双向的，（流是单向的），通道的数据总是要先读到一个buffer 或者 从一个buffer写入，即通道与buffer进行数据交互。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;通道类型：　　&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;FileChannel：从文件中读写数据。　　&lt;/li&gt;
&lt;li&gt;DatagramChannel：能通过&lt;strong&gt;UDP&lt;/strong&gt;读写网络中的数据。　　&lt;/li&gt;
&lt;li&gt;SocketChannel：能通过&lt;strong&gt;TCP&lt;/strong&gt;读写网络中的数据。　　&lt;/li&gt;
&lt;li&gt;ServerSocketChannel：可以监听新进来的&lt;strong&gt;TCP&lt;/strong&gt;连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。　　&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　-　FileChannel比较特殊，它可以与通道进行数据交互， 不能切换到非阻塞模式，套接字通道可以切换到非阻塞模式；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;缓冲区&lt;/em&gt; &lt;em&gt;- 本质上是一块可以存储数据的内存，被封装成了buffer对象而已！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;缓冲区类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ByteBuffer　　&lt;/li&gt;
&lt;li&gt;MappedByteBuffer　　&lt;/li&gt;
&lt;li&gt;CharBuffer　　&lt;/li&gt;
&lt;li&gt;DoubleBuffer　　&lt;/li&gt;
&lt;li&gt;FloatBuffer　　&lt;/li&gt;
&lt;li&gt;IntBuffer　　&lt;/li&gt;
&lt;li&gt;LongBuffer　　&lt;/li&gt;
&lt;li&gt;ShortBuffer　　&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;常用方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;allocate() - 分配一块缓冲区　　&lt;/li&gt;
&lt;li&gt;put() - 向缓冲区写数据&lt;/li&gt;
&lt;li&gt;get() - 向缓冲区读数据　　&lt;/li&gt;
&lt;li&gt;filp() - 将缓冲区从写模式切换到读模式　　&lt;/li&gt;
&lt;li&gt;clear() - 从读模式切换到写模式，不会清空数据，但后续写数据会覆盖原来的数据，即使有部分数据没有读，也会被遗忘；　　&lt;/li&gt;
&lt;li&gt;compact() - 从读数据切换到写模式，数据不会被清空，会将所有未读的数据copy到缓冲区头部，后续写数据不会覆盖，而是在这些数据之后写数据&lt;/li&gt;
&lt;li&gt;mark() - 对position做出标记，配合reset使用&lt;/li&gt;
&lt;li&gt;reset() - 将position置为标记值　　　　&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;缓冲区的一些属性：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;capacity - 缓冲区大小，无论是读模式还是写模式，此属性值不会变；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;position - 写数据时，position表示当前写的位置，每写一个数据，会向下移动一个数据单元，初始为0；最大为capacity - 1，切换到读模式时，position会被置为0，表示当前读的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;limit - 写模式下，limit 相当于capacity 表示最多可以写多少数据，切换到读模式时，limit 等于原先的position，表示最多可以读多少数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;非直接缓冲区：通过allocate() 方法 分配缓冲区,将缓冲区建立在JVM内存中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接缓冲区：通过allocateDirect() 方法直接缓冲区 将缓冲区建立在物理内存中&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;section&quot;&gt;2.1 关于缓冲区各个属性的测试&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;           String str = &quot;abcde&quot;;
                
                //1. 分配一个指定大小的缓冲区
                ByteBuffer buf = ByteBuffer.allocate(1024);
                
                System.out.println(&quot;--------------allocate()----------------&quot;);
                System.out.println(buf.position());//0
                System.out.println(buf.limit());//1024
                System.out.println(buf.capacity());//1024
                
                //2. 利用put存入数据到缓冲区中去
                buf.put(str.getBytes());
                
                System.out.println(&quot;----------------put()-------------------&quot;);
                System.out.println(buf.position());//5
                System.out.println(buf.limit());//1024
                System.out.println(buf.capacity());//1024

                
                //3. 切换到读取模式
                buf.flip();
                
                System.out.println(&quot;----------------flip()------------------&quot;);
                System.out.println(buf.position());//0
                System.out.println(buf.limit());//5
                System.out.println(buf.capacity());//1024

                
                //4. 利用get() 读取缓冲区中的数据
                byte[] dst = new byte[buf.limit()];
                buf.get(dst);
                System.out.println(new String(dst,0,dst.length));
                
                System.out.println(&quot;----------------get()------------------&quot;);
                System.out.println(buf.position());//5
                System.out.println(buf.limit());//5
                System.out.println(buf.capacity());//1024

                
                //5.可重复读
                buf.rewind();
                
                System.out.println(&quot;----------------rewind()------------------&quot;);
                System.out.println(buf.position());//0
                System.out.println(buf.limit());//5
                System.out.println(buf.capacity());//1024

                
                //6.clear(): 清空缓冲区, 但是缓冲区的数据依然存在, 但是处于被遗忘的状态
                buf.clear();
                
                System.out.println(&quot;----------------clear()-------------------&quot;);
                System.out.println(buf.position());//0
                System.out.println(buf.limit());//1024
                System.out.println(buf.capacity());//1024

                byte[] newByte = new byte[buf.limit()];
                buf.get(newByte);
                System.out.println(new String(newByte,0,newByte.length));
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;section-1&quot;&gt;2.2 关于通道的使用&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.利用通道进行 文件的复制 非直接缓冲区&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
                FileInputStream fis = null;
                FileOutputStream fos = null;
                FileChannel inChannel = null;
                FileChannel outChannel = null;
                try {
                        fis = new FileInputStream(&quot;1.jpg&quot;);
                        fos = new FileOutputStream(&quot;2.jpg&quot;);

                        // ①获取通道
                        inChannel = fis.getChannel();
                        outChannel = fos.getChannel();

                        // ②将通道中的数据存入缓冲区
                        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);

                        // 将通道中的数据存入缓冲区
                        while (inChannel.read(byteBuffer) != -1) {
                                byteBuffer.flip(); // 切换读取数据的模式
                                outChannel.write(byteBuffer);
                                byteBuffer.clear();
                        }

                } catch (IOException e) {
                        e.printStackTrace();
                } finally {
                        if (inChannel != null) {
                                try {
                                        inChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }

                        if (outChannel != null) {
                                try {
                                        outChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }

                        if (fis != null) {
                                try {
                                        fis.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }

                        if (fos != null) {
                                try {
                                        fos.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }

                }
        
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.通道之间的传输&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CREATE_NEW：如果文件不存在就创建，存在就报错&lt;/p&gt;
&lt;p&gt;CREATE：如果文件不存在就创建，存在创建(覆盖)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
                FileChannel inChannel = null;
                FileChannel outChannel = null;
                try {
                        inChannel = FileChannel.open(Paths.get(&quot;hello.txt&quot;), StandardOpenOption.READ);
                        outChannel = FileChannel.open(Paths.get(&quot;hello2.txt&quot;), StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE_NEW);
                        
                        inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (Exception e) {
                        e.printStackTrace();
                }  finally {
                        
                        if(inChannel != null){
                                try {
                                        inChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }
                        
                        if(outChannel != null){
                                try {
                                        outChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }
                }
        
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. 使用直接缓冲区完成内存文件的复制&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;               FileChannel inChannel = null;
                FileChannel outChannel = null;
                try {
                        inChannel = FileChannel.open(Paths.get(&quot;1.jpg&quot;), StandardOpenOption.READ);
                        outChannel = FileChannel.open(Paths.get(&quot;x.jpg&quot;), StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE_NEW);
                        
                        MappedByteBuffer inMappedBuffer = inChannel.map(MapMode.READ_ONLY, 0, inChannel.size());
                        MappedByteBuffer outMappedBuffer = outChannel.map(MapMode.READ_WRITE, 0, inChannel.size());
                        
                        System.out.println(inMappedBuffer.limit());
                        byte[] b = new byte[inMappedBuffer.limit()];;
                        inMappedBuffer.get(b);
                        outMappedBuffer.put(b);
                        
                } catch (Exception e) {
                        e.printStackTrace();
                } finally {
                        
                        if(inChannel != null){
                                try {
                                        inChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }
                        
                        if(outChannel != null){
                                try {
                                        outChannel.close();
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                        }
                        
                }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;nio-io&quot;&gt;2.3 重点 NIO-非阻塞IO&lt;/h4&gt;
&lt;p&gt;个人认为 NIO 最难的两点 一个是对于选择器和选择键的理解 其次是对于网络通信模型的理解&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本章内容以防过长 只讲解 NIO 的使用方法 上述两点参看下回分解&lt;/em&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1348730/201811/1348730-20181106225734123-569469745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞IO示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;       //客户端
        @Test
        public void client() throws IOException{
                SocketChannel sChannel = SocketChannel.open(new InetSocketAddress(&quot;127.0.0.1&quot;, 9898));
                
                FileChannel inChannel = FileChannel.open(Paths.get(&quot;1.jpg&quot;), StandardOpenOption.READ);
                
                ByteBuffer buf = ByteBuffer.allocate(1024);
                
                while(inChannel.read(buf) != -1){
                        buf.flip();
                        sChannel.write(buf);
                        buf.clear();
                }
                
                sChannel.shutdownOutput();
                
                //接收服务端的反馈
                int len = 0;
                while((len = sChannel.read(buf)) != -1){
                        buf.flip();
                        System.out.println(new String(buf.array(), 0, len));
                        buf.clear();
                }
                
                inChannel.close();
                sChannel.close();
        }
        
        //服务端
        @Test
        public void server() throws IOException{
                ServerSocketChannel ssChannel = ServerSocketChannel.open();
                
                FileChannel outChannel = FileChannel.open(Paths.get(&quot;2.jpg&quot;), StandardOpenOption.WRITE, StandardOpenOption.CREATE);
                
                ssChannel.bind(new InetSocketAddress(9898));
                
                SocketChannel sChannel = ssChannel.accept();
                
                ByteBuffer buf = ByteBuffer.allocate(1024);
                
                while(sChannel.read(buf) != -1){
                        buf.flip();
                        outChannel.write(buf);
                        buf.clear();
                }
                
                //发送反馈给客户端
                buf.put(&quot;服务端接收数据成功&quot;.getBytes());
                buf.flip();
                sChannel.write(buf);
                
                sChannel.close();
                outChannel.close();
                ssChannel.close();
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;非阻塞IO示例-TCP:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//客户端
        @Test
        public void client() throws IOException{
                //1. 获取通道
                SocketChannel sChannel = SocketChannel.open(new InetSocketAddress(&quot;127.0.0.1&quot;, 9898));
                
                //2. 切换非阻塞模式
                sChannel.configureBlocking(false);
                
                //3. 分配指定大小的缓冲区
                ByteBuffer buf = ByteBuffer.allocate(1024);
                
                //4. 发送数据给服务端
                Scanner scan = new Scanner(System.in);
                
                while(scan.hasNext()){
                        String str = scan.next();
                        buf.put((new Date().toString() + &quot;\n&quot; + str).getBytes());
                        buf.flip();
                        sChannel.write(buf);
                        buf.clear();
                }
                
                //5. 关闭通道
                sChannel.close();
        }

        //服务端
        @Test
        public void server() throws IOException{
                //1. 获取通道
                ServerSocketChannel ssChannel = ServerSocketChannel.open();
                
                //2. 切换非阻塞模式
                ssChannel.configureBlocking(false);
                
                //3. 绑定连接
                ssChannel.bind(new InetSocketAddress(9898));
                
                //4. 获取选择器
                Selector selector = Selector.open();
                
                //5. 将通道注册到选择器上, 并且指定“监听接收事件”
                ssChannel.register(selector, SelectionKey.OP_ACCEPT);
                
                //6. 轮询式的获取选择器上已经“准备就绪”的事件
                while(selector.select() &amp;gt; 0){
                        
                        //7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)”
                        Iterator&amp;lt;SelectionKey&amp;gt; it = selector.selectedKeys().iterator();
                        
                        while(it.hasNext()){
                                //8. 获取准备“就绪”的是事件
                                SelectionKey sk = it.next();
                                
                                //9. 判断具体是什么事件准备就绪
                                if(sk.isAcceptable()){
                                        //10. 若“接收就绪”，获取客户端连接
                                        SocketChannel sChannel = ssChannel.accept();
                                        
                                        //11. 切换非阻塞模式
                                        sChannel.configureBlocking(false);
                                        
                                        //12. 将该通道注册到选择器上
                                        sChannel.register(selector, SelectionKey.OP_READ);
                                }else if(sk.isReadable()){
                                        //13. 获取当前选择器上“读就绪”状态的通道
                                        SocketChannel sChannel = (SocketChannel) sk.channel();
                                        
                                        //14. 读取数据
                                        ByteBuffer buf = ByteBuffer.allocate(1024);
                                        
                                        int len = 0;
                                        while((len = sChannel.read(buf)) &amp;gt; 0 ){
                                                buf.flip();
                                                System.out.println(new String(buf.array(), 0, len));
                                                buf.clear();
                                        }
                                }
                                
                                //15. 取消选择键 SelectionKey
                                it.remove();
                        }
                }
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;非阻塞IO示例-UDP:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;       @Test
        public void send() throws IOException{
                DatagramChannel dc = DatagramChannel.open();
                
                dc.configureBlocking(false);
                
                ByteBuffer buf = ByteBuffer.allocate(1024);
                
                Scanner scan = new Scanner(System.in);
                
                while(scan.hasNext()){
                        String str = scan.next();
                        buf.put((new Date().toString() + &quot;:\n&quot; + str).getBytes());
                        buf.flip();
                        dc.send(buf, new InetSocketAddress(&quot;127.0.0.1&quot;, 9898));
                        buf.clear();
                }
                
                dc.close();
        }
        
        @Test
        public void receive() throws IOException{
                DatagramChannel dc = DatagramChannel.open();
                
                dc.configureBlocking(false);
                
                dc.bind(new InetSocketAddress(9898));
                
                Selector selector = Selector.open();
                
                dc.register(selector, SelectionKey.OP_READ);
                
                while(selector.select() &amp;gt; 0){
                        Iterator&amp;lt;SelectionKey&amp;gt; it = selector.selectedKeys().iterator();
                        
                        while(it.hasNext()){
                                SelectionKey sk = it.next();
                                
                                if(sk.isReadable()){
                                        ByteBuffer buf = ByteBuffer.allocate(1024);
                                        
                                        dc.receive(buf);
                                        buf.flip();
                                        System.out.println(new String(buf.array(), 0, buf.limit()));
                                        buf.clear();
                                }
                        }
                        
                        it.remove();
                }
        }
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 06 Nov 2018 15:06:00 +0000</pubDate>
<dc:creator>我是派大星</dc:creator>
<og:description>1、reactor（反应器）模式 使用单线程模拟多线程，提高资源利用率和程序的效率，增加系统吞吐量。下面例子比较形象的说明了什么是反应器模式： 一个老板经营一个饭店， 传统模式 来一个客人安排一个服务</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dwlovelife/p/9919495.html</dc:identifier>
</item>
</channel>
</rss>