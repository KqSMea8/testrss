<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>区块链技术开发如何防伪？聊区块链+商业溯源实施 - 我是猴子啊</title>
<link>http://www.cnblogs.com/PHPWSH/p/9284228.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PHPWSH/p/9284228.html</guid>
<description>&lt;p&gt;　　商业模式的发展也让当今市场情况愈发复杂，合作信任问题更是变得模糊不定，市场经济体制确立至今，发展已有26年！随着传统商业日趋成熟、其弊端也越发明显。在中心化的传统商业模式中，“一家独大”的市场潜规则，让行业合作的供求关系无法实现公平、公正的需求对接， 而“区块链技术开发+商业溯源”的发展正是为了解决这一问题而来，更是给未来商业的合理发展做出重要引导。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1431114/201807/1431114-20180709155616491-703125097.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在如今的市场下，造假、售假的行为屡禁不止，优秀的商家也屡次被仿冒。用户无法确定商品信息的真假、假冒品源源不断的流入市场，也算害了商家的信誉和品牌形象。这是传统商业无法解决的难题，而先达区块链技术开发就提出了“区块链+商业溯源”的解决思路，商品溯源的实施就是要解决多方问题：&lt;/p&gt;
&lt;p&gt;　　1. 商品溯源要追溯生产环节、流通环节，必然要增加做信任背书的主题，传统商业协&lt;/p&gt;
&lt;p&gt;　　难度大，也无法实现。&lt;/p&gt;
&lt;p&gt;　　2. 中心化的商品信息系统安全性不足，也容易被篡改信息，虽传统商业发展，信用问&lt;/p&gt;
&lt;p&gt;　　题愈发突出。&lt;/p&gt;
&lt;p&gt;　　3. 传统商业的供应链存在多行业的多个信息系统，会有信息孤岛问题，各系统之间信&lt;/p&gt;
&lt;p&gt;　　息核对繁琐复杂。&lt;/p&gt;
&lt;p&gt;　　4. 用户个人信息泄露现象严重，深知自身在商业行为参与当中都担心 信息泄露，用&lt;/p&gt;
&lt;p&gt;　　户对商品产生信任危机。&lt;/p&gt;
&lt;p&gt;　　在以上传统商业问题日益显露之下，区块链技术开发就为传统商业问题提供了覆盖性解决思路：&lt;/p&gt;
&lt;p&gt;　　1. 多方主题信任背书：区块链去中心化，降低了信任背书的难度，能组织到更多的供应链参与方，补充和共同维护更多的商品数据，提高用户的信任度。&lt;/p&gt;
&lt;p&gt;　　2. 溯源实现有效追责：结合区块链技术不可篡改、时间戳等特性，让交易可追溯。供应链数据被篡改时，多节点信息的“公识”会排斥“伪造、篡改的信息”，进而实现有效追责，达到商品信息透明真实，根除假冒伪劣问题。&lt;/p&gt;
&lt;p&gt;　　3. 打破各方信息鼓捣：供应链各方共同维护数据源，区块链的公识机制会排伪劣商品，确保参与各方即使发现运行过程中的问题，及对应的解决办法，有助于提升供应链管理效率，组建跨行业、跨层级整合供应与需求的商业问题。&lt;/p&gt;
&lt;p&gt;　　4. 保护用户隐私信息：利用区块链技术开发的匿名基础上，通过多种加密、验证方式有效保护用户的个人隐私，实现商业信息共享、个人隐私互不相关以提高信任感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1431114/201807/1431114-20180709155630821-2055900835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　就如当初的“互联网商业浪潮”袭来一样！先达区块链以这样的思路不断创新拓展，结合区块链特性，将“区块链+商业溯源”的模式通过分布式记录的公开、共识机制，让供应链各参与方直接快速对接，不用受制于“中心化”“行业领域”的限制，先达区块链的发展开发思路，既整合了商业需求上下游快速对接，又保证了合作、商品的安全可信，不法之徒在公开商品的链网下也无法造假，因为他一旦造假就就会遭到所有节点信息的排斥！实现“区块链技术开发+商业溯源”的合理应用布局，也为区块链合理商用化起到了积极的推动作用！&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 07:58:00 +0000</pubDate>
<dc:creator>我是猴子啊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PHPWSH/p/9284228.html</dc:identifier>
</item>
<item>
<title>python3之Splash - Py.qi</title>
<link>http://www.cnblogs.com/zhangxinqi/p/9279014.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxinqi/p/9279014.html</guid>
<description>&lt;p&gt;Splash是一个javascript渲染服务。它是一个带有HTTP API的轻量级Web浏览器，使用Twisted和QT5在Python 3中实现。QT反应器用于使服务完全异步，允许通过QT主循环利用webkit并发。&lt;br/&gt;一些Splash功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;并行处理多个网页&lt;/li&gt;
&lt;li&gt;获取HTML源代码或截取屏幕截图&lt;/li&gt;
&lt;li&gt;关闭图像或使用Adblock Plus规则使渲染更快&lt;/li&gt;
&lt;li&gt;在页面上下文中执行自定义JavaScript&lt;/li&gt;
&lt;li&gt;可通过Lua脚本来控制页面的渲染过程&lt;/li&gt;
&lt;li&gt;在Splash-Jupyter 笔记本中开发Splash Lua脚本。&lt;/li&gt;
&lt;li&gt;以HAR格式获取详细的渲染信息&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;1、Scrapy-Splash的安装&lt;/h3&gt;
&lt;p&gt;Scrapy-Splash的安装分为两部分，一个是Splash服务的安装，具体通过Docker来安装服务，运行服务会启动一个Splash服务，通过它的接口来实现JavaScript页面的加载；另外一个是Scrapy-Splash的Python库的安装，安装后就可在Scrapy中使用Splash服务了，下面我们分三部份来安装：&lt;br/&gt;(1)安装Docker&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;安装所需要的包：&lt;/span&gt;
yum install -y yum-utils device-mapper-persistent-&lt;span&gt;data lvm2
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置稳定存储库：&lt;/span&gt;
&lt;span&gt;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;开始安装DOCKER CE：&lt;/span&gt;
yum install docker-&lt;span&gt;ce
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;启动dockers：&lt;/span&gt;
&lt;span&gt;systemctl start docker
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;测试安装是否正确：&lt;/span&gt;
docker run hello-world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2)安装splash服务&lt;br/&gt;通过Docker安装Scrapinghub/splash镜像，然后启动容器，创建splash服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker pull scrapinghub/&lt;span&gt;splash
docker run &lt;/span&gt;-d -p 8050:8050 scrapinghub/&lt;span&gt;splash
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过浏览器访问8050端口验证安装是否成功&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3)Python包Scrapy-Splash安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip3 install scrapy-splash
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2、Splash Lua脚本&lt;/h3&gt;
&lt;p&gt;运行splash服务后，通过web页面访问服务的8050端口如:http://localhost:8050即可看到其web页面，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1134117/201807/1134117-20180708010404906-600474052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面有个输入框，默认是http://google.com，我们可以换成想要渲染的网页如：https://www.baidu.com然后点击Render me按钮开始渲染，页面返回结果包括渲染截图、HAR加载统计数据、网页源代码:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1134117/201807/1134117-20180708011439540-998629980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1134117/201807/1134117-20180708011452979-1257398293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从HAR中可以看到，Splash执行了整个页面的渲染过程，包括CSS、JavaScript的加载等，通过返回结果可以看到它分别对应搜索框下面的脚本文件中return部分的三个返回值，html、png、har：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;&lt;span&gt;(splash:go(args.url))
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:wait(&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;))
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    html &lt;/span&gt;=&lt;span&gt; splash:html(),
    png &lt;/span&gt;=&lt;span&gt; splash:png(),
    har &lt;/span&gt;=&lt;span&gt; splash:har(),
  }
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个脚本是使用Lua语言写的，它首先使用go()方法加载页面，wait()方法等待加载时间，然后返回源码、截图和HAR信息。&lt;/p&gt;
&lt;p&gt;现在我们修改下它的原脚本，访问www.baidu.com，通过javascript脚本，让它返回title，然后执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
&lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:go(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:wait(&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;local&lt;/span&gt; title = splash:evaljs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;document.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
title &lt;/span&gt;=&lt;span&gt; title
}
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;返回结果：
Splash Response: Object

title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;百度一下，你就知道&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由此可以确定Splash渲染页面的过程是通过此入口脚本来实现的，那么我们可以修改此脚本来满足我们对抓取页面的分析和结果返回，但此函数但名称必须是main()，它返回的结果是一个字典形式也可以返回字符串形式的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    hello&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  }
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;返回结果
Splash Response: Object
hello: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;返回结果
Splash Response: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、Splash对象的属性与方法&lt;/h3&gt;
&lt;p&gt;在前面的例子中，main()方法的第一参数是splash，这个对象它类似于selenium中的WebDriver对象，可以调用它的属性和方法来控制加载规程，下面介绍一些常用的属性：&lt;/p&gt;
&lt;p&gt;splash.args：该属性可以获取加载时陪在的参数，如URL，如果为GET请求，它可以获取GET请求参数，如果为POST请求，它可以获取表单提交的数据，splash.args可以使用函数的第二个可选参数args来进行访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash,args)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; url =&lt;span&gt; args.url
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;上面的第二个参数args就相当于splash.args属性，如下代码与上面是等价的

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
   &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; url=&lt;span&gt;splash.args.url
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash.js_enabled：启用或者禁用页面中嵌入的JavaScript代码的执行，默认为true，启用JavaScript执行&lt;/p&gt;
&lt;p&gt;splash.resource_timeout：设置网络请求的默认超时，以秒为单位，如设置为0或nil则表示无超时：splash.resource_timeout=nil&lt;/p&gt;
&lt;p&gt;splash.images_enabled：启用或禁用图片加载，默认情况下是加载的：splash.images_enabled=true&lt;/p&gt;
&lt;p&gt;splash.plugins_enabled：启用或禁用浏览器插件，默认为禁止：splash.plugins_enabled=false&lt;/p&gt;
&lt;p&gt;splash.scroll_position：获取和设置主窗口的当前位置：splash.scroll_position={x=50,y=600}&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:go(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.toutiao.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
  splash.scroll_position&lt;/span&gt;={y=&lt;span&gt;400&lt;/span&gt;&lt;span&gt;}
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    png &lt;/span&gt;=&lt;span&gt; splash:png()
  }
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#它会向下滚动400像素来获取图片
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash.html5_media_enabled： 启用或禁用HTML5媒体,包括HTML5视频和音频(例如&amp;lt;video&amp;gt;元素播放)&lt;/p&gt;
&lt;p&gt;splash对象的方法：&lt;/p&gt;
&lt;p&gt;splash:go()  ：该方法用来请求某个链接，而且它可以模拟GET和POST请求，同时支持传入请求头，表单等数据，用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
ok, reason = splash:go{url, baseurl=&lt;span&gt;nil&lt;/span&gt;, headers=&lt;span&gt;nil&lt;/span&gt;, http_method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, body=&lt;span&gt;nil&lt;/span&gt;, formdata=&lt;span&gt;nil&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明：url为请求的URL，baseurl为可选参数表示资源加载相对路径，headers为可选参数，表示请求头，http_method表示http请求方法的字符串默认为GET,body为使用POST时发送表单数据，使用的Content-type为application/json，formdata默认为空，POST请求时的表单数据，使用的Content-type为application/x-www-form-urlencoded&lt;/p&gt;
&lt;p&gt;该方法返回结果是ok和reason的组合，如果ok为空则代表网页加载错误，reason变量中会包含错误信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; ok, reason = splash:go{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, http_method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, body=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=Germey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ok &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:html()
  &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash.wait()  ：控制页面的等待时间&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;ok, &lt;span class=&quot;pre&quot;&gt;reason &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;splash:wait{time, &lt;span class=&quot;pre&quot;&gt;cancel_on_redirect=false, &lt;span class=&quot;pre&quot;&gt;cancel_on_error=true}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;tiem为等待的秒数，cancel_on_redirect表示发生重定向就停止等待，并返回重定向结果，默认为false，cancel_on_error默认为false，表示如果发生错误就停止等待&lt;/p&gt;
&lt;p&gt;返回结果同样是ok和reason的组合&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.toutiao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; ok reason = splash:wait(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    ok&lt;/span&gt;=&lt;span&gt;ok,
    reason&lt;/span&gt;=&lt;span&gt;reason
  }
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#返回true说明返回页面成功
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:jsfunc()&lt;br/&gt;lua_func = splash:jsfunc(func)&lt;br/&gt;此方法可以直接调用JavaScript定义的函数，但所调用的函数需要用双中括号包围，它相当于实现了JavaScript方法到Lua脚本到转换，全局的JavaScript函数可以直接包装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; get_div_count = splash:jsfunc(&lt;span&gt;[[&lt;/span&gt;&lt;span&gt;
  function () {
    var body = document.body;
    var divs = body.getElementsByTagName('div');
    return divs.length;
  }
  &lt;/span&gt;&lt;span&gt;]]&lt;/span&gt;&lt;span&gt;)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;There are %s DIVs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):format(
    get_div_count())
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;
Splash Response: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;There are 21 DIVs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash.evaljs()  ：在页面上下文中执行JavaScript代码段并返回最后一个语句的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;local&lt;/span&gt; title = splash:evaljs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;document.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;#返回页面标题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:runjs()  ：在页面上下文中运行JavaScript代码，同evaljs差不多，但它更偏向于执行某些动作或声明函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  splash:runjs(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo = function() { return 'bar' }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; result = splash:evaljs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:autoload()  ：将JavaScript设置为在每个页面加载时自动加载&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;ok, &lt;span class=&quot;pre&quot;&gt;reason &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;splash:autoload{source_or_url, &lt;span class=&quot;pre&quot;&gt;source=nil, &lt;span class=&quot;pre&quot;&gt;url=nil}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;&lt;span&gt;source_or_url - 包含JavaScript源代码的字符串或用于加载JavaScript代码的URL;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;source - 包含JavaScript源代码的字符串;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;url - 从中​​加载JavaScript源代码的URL&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 此方法只加载JavaScript代码或库，不执行操作，如果要执行操作可以调用evaljs()或runjs()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  splash:autoload(&lt;/span&gt;&lt;span&gt;[[&lt;/span&gt;&lt;span&gt;
    function get_document_title(){
      return document.title;
    }
  &lt;/span&gt;&lt;span&gt;]]&lt;/span&gt;&lt;span&gt;)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; splash:evaljs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get_document_title()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;


#&lt;span&gt;加载JS库文件
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:autoload(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://code.jquery.com/jquery-2.1.3.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:go(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.taobao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; version = splash:evaljs(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$.fn.jquery&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JQuery version: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; .. version
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:call_later ：通过设置定时任务和延迟时间来实现任务延时执行&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;timer &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;splash:call_later(callback, &lt;span class=&quot;pre&quot;&gt;delay)   ：callback运行的函数，delay延迟时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; snapshots =&lt;span&gt; {}
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; timer = splash:call_later(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;()
    snapshots[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; splash:png()
    splash.scroll_position&lt;/span&gt;={y=&lt;span&gt;500&lt;/span&gt;&lt;span&gt;}
    splash:wait(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)
    snapshots[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; splash:png()
  &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.toutiao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  splash:wait(&lt;/span&gt;&lt;span&gt;3.0&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; snapshots
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#等待2秒后执行截图然后再等待3秒后执行截图
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:http_get() ：发送HTTP GET请求并返回相应&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;response &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;splash:http_get{url, &lt;span class=&quot;pre&quot;&gt;headers=nil, &lt;span class=&quot;pre&quot;&gt;follow_redirects=true} ：url要加载的URL，headers添加HTTP头，follw_redirects是否启动自动重定向默认为true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;local&lt;/span&gt; reply = splash:http_get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;#返回一个响应对象，不会讲结果返回到浏览器
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:http_post ：发送POST请求&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;crayon-v&quot;&gt;response &lt;span class=&quot;crayon-h&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;= &lt;span class=&quot;crayon-h&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;splash&lt;span class=&quot;crayon-o&quot;&gt;:&lt;span class=&quot;crayon-e&quot;&gt;http_post&lt;span class=&quot;crayon-sy&quot;&gt;{&lt;span class=&quot;crayon-v&quot;&gt;url&lt;span class=&quot;crayon-sy&quot;&gt;, &lt;span class=&quot;crayon-h&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;headers&lt;span class=&quot;crayon-o&quot;&gt;=&lt;span class=&quot;crayon-v&quot;&gt;nil&lt;span class=&quot;crayon-sy&quot;&gt;, &lt;span class=&quot;crayon-h&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;follow_redirects&lt;span class=&quot;crayon-o&quot;&gt;=&lt;span class=&quot;crayon-t&quot;&gt;true&lt;span class=&quot;crayon-sy&quot;&gt;, &lt;span class=&quot;crayon-h&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;body&lt;span class=&quot;crayon-o&quot;&gt;=&lt;span class=&quot;crayon-v&quot;&gt;nil&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;crayon-v&quot;&gt;dody指定表单数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; treat = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;treat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; json = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; response = splash:http_post{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,     
      body&lt;/span&gt;=json.encode({name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Germey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}),
      headers&lt;/span&gt;={[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content-type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    html&lt;/span&gt;=&lt;span&gt;treat.as_string(response.body),
    url&lt;/span&gt;=&lt;span&gt;response.url,
    status&lt;/span&gt;=&lt;span&gt;response.status
    }
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;
html:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;args&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;name\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Germey\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;files&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Accept-Encoding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gzip, deflate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Accept-Language&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en,*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpbin.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) splash Version/9.0 Safari/602.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Germey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;origin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;221.218.181.223&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
status: &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;
url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:set_content()  ：设置当前页面的内容&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;ok, &lt;span class=&quot;pre&quot;&gt;reason &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;splash:set_content{data, &lt;span class=&quot;pre&quot;&gt;mime_type=&quot;text/html; &lt;span class=&quot;pre&quot;&gt;charset=utf-8&quot;, &lt;span class=&quot;pre&quot;&gt;baseurl=&quot;&quot;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
    &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:set_content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:png()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:html() ：获取网页的源代码，结果为字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash, args)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://httpbin.org/get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:html()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:png() ：获取PNG格式的网页截图&lt;/p&gt;
&lt;p&gt;splash:jpeg() ：获取JPEG格式的网页截图&lt;/p&gt;
&lt;p&gt;splash:har() ：获取页面加载过程描述&lt;/p&gt;
&lt;p&gt;splash:url() ：获取当前正在访问的URL&lt;/p&gt;
&lt;p&gt;splash:get_cookies() ：获取当前页面的cookies&lt;/p&gt;
&lt;p&gt;splash:add_cookie() ：为当前页面添加cookie&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
    splash:add_cookie{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sessionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;237465ghgfsd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, domain=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
    splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:get_cookies()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#&lt;span&gt;
Splash Response: Array[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;: Object
domain: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
httpOnly: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sessionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
path: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
secure: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;237465ghgfsd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:clear_cookies() ：清除所有的cookies&lt;/p&gt;
&lt;p&gt;splash:delete_cookies{name=nil,url=nil}  删除指定的cookie&lt;/p&gt;
&lt;p&gt;splash:get_viewport_size() ：获取当前浏览器页面的大小，即宽高&lt;/p&gt;
&lt;p&gt;splash:set_viewport_size(width,height) ：设置当前浏览器页面的大小，即宽高&lt;/p&gt;
&lt;p&gt;splash:set_viewport_full() ：设置浏览器全屏显示&lt;/p&gt;
&lt;p&gt;splash:set_user_agent()  ：覆盖设置请求头的User-Agent&lt;/p&gt;
&lt;p&gt;splash:get_custom_headers(headers) ：设置请求头&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  splash:set_custom_headers({
     [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
     [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Site&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpbin.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  })
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:html()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:on_request(callback) ：在HTTP请求之前注册要调用的函数&lt;/p&gt;
&lt;p&gt;splash:get_version() ：获取splash版本信息&lt;/p&gt;
&lt;p&gt;splash:mouse_press() ：触发鼠标按下事件&lt;/p&gt;
&lt;p&gt;splash:mouse_release() ：触发鼠标释放事件&lt;/p&gt;
&lt;p&gt;splash:send_keys() ：发送键盘事件到页面上下文，如发送回车键：splash:send_keys(&quot;key_Enter&quot;)&lt;/p&gt;
&lt;p&gt;splash:send_text() ：将文本内容发送到页面上下文&lt;/p&gt;
&lt;p&gt;splash:select() ：选中符合条件的第一个节点，如果有多个节点符合条件，则只会返回一个，其参数是CSS选择器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  input &lt;/span&gt;= splash:&lt;span&gt;select&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#kw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  input:send_text(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Splash&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  splash:wait(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:png()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:select_all() ：选中所有符合条件的节点，其参数是CSS选择器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; treat = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;treat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:go(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.zhihu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  &lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;(splash:wait(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;))
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; texts = splash:select_all(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.ContentLayout-mainColumn .ContentItem-title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; results =&lt;span&gt; {}
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; index, text &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ipairs&lt;/span&gt;(texts) &lt;span&gt;do&lt;/span&gt;&lt;span&gt;
    results[index] &lt;/span&gt;=&lt;span&gt; text.node.textContent
  &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; treat.as_array(results)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

#返回所有节点下的文本内容
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;splash:mouse_click() ：出发鼠标单击事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(splash)
  splash:go(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  input &lt;/span&gt;= splash:&lt;span&gt;select&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#kw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  input:send_text(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Splash&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  submit &lt;/span&gt;= splash:&lt;span&gt;select&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#su&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  submit:mouse_click()
  splash:wait(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; splash:png()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他splash scripts的属性与方法请参考官方文档：&lt;a href=&quot;http://splash.readthedocs.io/en/latest/scripting-ref.html#splash-args&quot; target=&quot;_blank&quot;&gt;http://splash.readthedocs.io/en/latest/scripting-ref.html#splash-args&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;4、响应对象&lt;/h3&gt;
&lt;p&gt;响应对象是由splash方法返回的回调信息，如splash:http_get()或splash:http_post()，会被传递给回调splash:on_response和splash:on_response_headers，它们包括的响应信息：&lt;/p&gt;
&lt;p&gt;response.url：响应的URL&lt;/p&gt;
&lt;p&gt;response.status:响应的HTTP状态码&lt;/p&gt;
&lt;p&gt;response.ok：成功返回true否则返回false&lt;/p&gt;
&lt;p&gt;response.headers：返回HTTP头信息&lt;/p&gt;
&lt;p&gt;response.info：具有HAR响应格式的响应数据表&lt;/p&gt;
&lt;p&gt;response.body：返回原始响应主体信息为二进制对象，需要使用treat.as_string转换为字符串&lt;/p&gt;
&lt;p&gt;resonse.request：响应的请求对象&lt;/p&gt;
&lt;p&gt;response.abort：终止响应&lt;/p&gt;
&lt;h3&gt;5、元素对象&lt;/h3&gt;
&lt;p&gt;元素对象包装JavaScript DOM节点，创建某个方法返回任何类型的DOM节点，如Node，Element，HTMLElement等，splash:select和splash:select_all将返回元素对象&lt;/p&gt;
&lt;p&gt;element:mouse_click() 出发元素上的鼠标单击事件&lt;/p&gt;
&lt;p&gt;element:mouse_hover()在元素上触发鼠标悬停事件&lt;/p&gt;
&lt;p&gt;elemnet:styles() 返回元素的计算样式&lt;/p&gt;
&lt;p&gt;element:bounds() 返回元素的边界客户端矩形&lt;/p&gt;
&lt;p&gt;element:png()以PNG格式返回元素的屏幕截图&lt;/p&gt;
&lt;p&gt;element:jpeg() 以JPEG格式返回元素的屏幕截图&lt;/p&gt;
&lt;p&gt;element:visible() 检查元素是否可见&lt;/p&gt;
&lt;p&gt;element:focused() 检查元素是否具有焦点&lt;/p&gt;
&lt;p&gt;element:text() 从元素中获取文本信息&lt;/p&gt;
&lt;p&gt;element:info() 获取元素的详细信息&lt;/p&gt;
&lt;p&gt;element:field_value() 获取field元素的值,如input,select,textarea,button&lt;/p&gt;
&lt;p&gt;element:form_values(values='auto'/'list'/'first') 如果元素类型是表单，则返回带有表单的表，返回类型有三种格式&lt;/p&gt;
&lt;p&gt;element:fill(values) 使用提供的值填写表单&lt;/p&gt;
&lt;p&gt;element:send_keys(keys) 将键盘事件发送到元素，如发送回车send_keys('key_Enter')，其他键请参考：&lt;a href=&quot;http://doc.qt.io/qt-5/qt.html#&quot; target=&quot;_blank&quot;&gt;http://doc.qt.io/qt-5/qt.html#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;element:send_text() 发送字符串到元素&lt;/p&gt;
&lt;p&gt;element:submit()提交表单元素&lt;/p&gt;
&lt;p&gt;element:exists()检查DOM中元素是否存在&lt;/p&gt;
&lt;p&gt;element属性：&lt;/p&gt;
&lt;p&gt;element.node   它具有所有公开的元素DOM方法和属性，但不包括splash定义的方法和属性&lt;/p&gt;
&lt;p&gt;element.inner_id  表示元素ID&lt;/p&gt;
&lt;p&gt;外部继承的支持的DOM属性：（有一些是只读的）&lt;/p&gt;
&lt;p&gt;从&lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement&quot;&gt;HTMLElement&lt;/a&gt;继承的属性:&lt;/p&gt;
&lt;ul class=&quot;first last simple&quot;&gt;&lt;li&gt;accessKey&lt;/li&gt;
&lt;li&gt;accessKeyLabel &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;contentEditable&lt;/li&gt;
&lt;li&gt;isContentEditable &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;dataset &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;dir&lt;/li&gt;
&lt;li&gt;draggable&lt;/li&gt;
&lt;li&gt;hidden&lt;/li&gt;
&lt;li&gt;lang&lt;/li&gt;
&lt;li&gt;offsetHeight &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;offsetLeft &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;offsetParent &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;offsetTop &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;spellcheck&lt;/li&gt;
&lt;li&gt;style - a table with styles which can be modified&lt;/li&gt;
&lt;li&gt;tabIndex&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从 &lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element&quot;&gt;Element&lt;/a&gt;继承的属性:&lt;/p&gt;
&lt;ul class=&quot;first last simple&quot;&gt;&lt;li&gt;attributes &lt;em&gt;(read-only)&lt;/em&gt; - a table with attributes of the element&lt;/li&gt;
&lt;li&gt;classList &lt;em&gt;(read-only)&lt;/em&gt; - a table with class names of the element&lt;/li&gt;
&lt;li&gt;className&lt;/li&gt;
&lt;li&gt;clientHeight &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clientLeft &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clientTop &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clientWidth &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;innerHTML&lt;/li&gt;
&lt;li&gt;localeName &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;namespaceURI &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;nextElementSibling &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;outerHTML&lt;/li&gt;
&lt;li&gt;prefix &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;previousElementSibling &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;scrollHeight &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;scrollLeft&lt;/li&gt;
&lt;li&gt;scrollTop&lt;/li&gt;
&lt;li&gt;scrollWidth &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;tabStop&lt;/li&gt;
&lt;li&gt;tagName &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从 &lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Node&lt;/a&gt;继承的属性:&lt;/p&gt;
&lt;ul class=&quot;first last simple&quot;&gt;&lt;li&gt;baseURI &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;childNodes &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;firstChild &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;lastChild &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;nextSibling &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;nodeName &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;nodeType &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;nodeValue&lt;/li&gt;
&lt;li&gt;ownerDocument &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;parentNode &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;parentElement &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;previousSibling &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;rootNode &lt;em&gt;(read-only)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;textContent&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;6、Splash HTTP API调用&lt;/h3&gt;
&lt;p&gt;Splash通过HTTP API控制来发送GET请求或POST表单数据，它提供了这些接口，只需要在请求时传递相应的参数即可获得不同的内容，下面来介绍下这些接口&lt;/p&gt;
&lt;p&gt;(1)render.html  它返回JavaScript渲染页面的HTML代码&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;url：要渲染的网址，str类型&lt;/p&gt;
&lt;p&gt;baseurl：用于呈现页面的基本URL&lt;/p&gt;
&lt;p&gt;timeout：渲染的超时时间默认为30秒&lt;/p&gt;
&lt;p&gt;resource_timeout：单个网络请求的超时时间&lt;/p&gt;
&lt;p&gt;wait：加载页面后等待更新的时间默认为0&lt;/p&gt;
&lt;p&gt;proxy：代理配置文件名称或代理URL，格式为：[protocol://][user:password@]proxyhost[:port])&lt;/p&gt;
&lt;p&gt;js：JavaScript配置&lt;/p&gt;
&lt;p&gt;js_source：在页面中执行的JavaScript代码&lt;/p&gt;
&lt;p&gt;filtrs：以逗号分隔的请求过滤器名称列表&lt;/p&gt;
&lt;p&gt;allowed_domains：允许的域名列表&lt;/p&gt;
&lt;p&gt;images：为1时下载图像，为0时不下载图像，默认为1&lt;/p&gt;
&lt;p&gt;headers：设置的HTTP标头，JSON数组&lt;/p&gt;
&lt;p&gt;body：发送POST请求的数据&lt;/p&gt;
&lt;p&gt;http_method：HTTP方法，默认为GET&lt;/p&gt;
&lt;p&gt;html5_media：是否启用HTML5媒体，值为1启用，0为禁用，默认为0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
response&lt;/span&gt;=requests.get(url+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render.html?url=https://www.baidu.com&amp;amp;wait=3&amp;amp;images=0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回网页源代码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）render.png   此接口获取网页的截图PNG格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定图像宽和高&lt;/span&gt;
response=requests.get(url+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render.png?url=https://www.taobao.com&amp;amp;wait=5&amp;amp;width=1000&amp;amp;height=700&amp;amp;render_all=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;taobao.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f.write(response.content)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）render.jpeg 返回JPEG格式截图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

response&lt;/span&gt;=requests.get(url+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render.jpeg?url=https://www.taobao.com&amp;amp;wait=5&amp;amp;width=1000&amp;amp;height=700&amp;amp;render_all=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;taobao.jpeg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f.write(response.content)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）render.har 此接口用于获取页面加载的HAR数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
response&lt;/span&gt;=requests.get(url+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render.har?url=https://www.jd.com&amp;amp;wait=5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）render.json 此接口包含了前面接口的所有功能，返回结果是JSON格式&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;html：是否在输出中包含HTML，html=1时包含html内容，为0时不包含，默认为0&lt;/p&gt;
&lt;p&gt;png：是否包含PNG截图，为1包含为0不包含默认为0&lt;/p&gt;
&lt;p&gt;jpeg：是否包含JPEG截图，为1包含为0不包含默认为0&lt;/p&gt;
&lt;p&gt;iframes：是否在输出中包含子帧的信息，默认为0&lt;/p&gt;
&lt;p&gt;script：是否输出包含执行的JavaScript语句的结果&lt;/p&gt;
&lt;p&gt;console：是否输出中包含已执行的JavaScript控制台消息&lt;/p&gt;
&lt;p&gt;history：是否包含网页主框架的请求与响应的历史记录&lt;/p&gt;
&lt;p&gt;har：是否输出中包含HAR信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
response&lt;/span&gt;=requests.get(url+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render.json?url=https://httpbin.org&amp;amp;html=1&amp;amp;png=1&amp;amp;history=1&amp;amp;har=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（6）execute  用此接口可以实现与Lua脚本的对接，它可以实现与页面的交互操作&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;lua_source：Lua脚本文件&lt;/p&gt;
&lt;p&gt;timeout：设置超时&lt;/p&gt;
&lt;p&gt;allowed_domains：指定允许的域名列表&lt;/p&gt;
&lt;p&gt;proxy：指定代理&lt;/p&gt;
&lt;p&gt;filters：指定筛选条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; urllib.parse &lt;span&gt;import&lt;/span&gt;&lt;span&gt; quote
lua&lt;/span&gt;=&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
function main(splash)
    return 'hello'
end
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/execute?lua_source=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;quote(lua)
response&lt;/span&gt;=&lt;span&gt;requests.get(url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过Lua脚本获取页面的body,url和状态码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; urllib.parse &lt;span&gt;import&lt;/span&gt;&lt;span&gt; quote
lua&lt;/span&gt;=&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
function main(splash,args)
    local treat=require(&quot;treat&quot;)
    local response=splash:http_get(&quot;http://httpbin.org/get&quot;)
    return {
        html=treat.as_string(response.body),
        url=response.url,
        status=response.status
    }
end
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://172.16.32.136:8050/execute?lua_source=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;quote(lua)
response&lt;/span&gt;=&lt;span&gt;requests.get(url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.text)

&lt;/span&gt;&lt;span&gt;#
&lt;/span&gt;{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 200, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&quot;args\&quot;:{},\&quot;headers\&quot;:{\&quot;Accept-Encoding\&quot;:\&quot;gzip, deflate\&quot;,\&quot;Accept-Language\&quot;:\&quot;en,*\&quot;,\&quot;Connection\&quot;:\&quot;close\&quot;,\&quot;Host\&quot;:\&quot;httpbin.org\&quot;,\&quot;User-Agent\&quot;:\&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) splash Version/9.0 Safari/602.1\&quot;},\&quot;origin\&quot;:\&quot;221.218.181.223\&quot;,\&quot;url\&quot;:\&quot;http://httpbin.org/get\&quot;}\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7、实例&lt;/h3&gt;
&lt;p&gt;抓取JD python书籍数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; @Time    : 2018/7/9 13:33&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; @Author  : Py.qi&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; @File    : JD.py&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; @Software: PyCharm&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymongo
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pyquery &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PyQuery as pq

client&lt;/span&gt;=pymongo.MongoClient(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,port=27017&lt;span&gt;)
db&lt;/span&gt;=client[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; page_parse(html):
    doc&lt;/span&gt;=pq(html,parser=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    items&lt;/span&gt;=doc(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#J_goodsList .gl-item&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).items()
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; items:
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-img img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
            image&lt;/span&gt;=item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-img img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            image&lt;/span&gt;=item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-img img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-lazy-img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        texts&lt;/span&gt;=&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;image,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text()[:6&lt;span&gt;],
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:re.sub(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;,item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).text()),
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:item(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.p-commit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text()[:-3&lt;span&gt;],

        }
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt; texts

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_to_mongo(data):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; db[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jd_collection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].insert(data):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;保存到MongoDB成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,data)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MongoDB存储错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,data)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(number):
    url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://192.168.146.140:8050/render.html?url=https://search.jd.com/Search?keyword=python&amp;amp;page={}&amp;amp;wait=1&amp;amp;images=0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(number)
    response&lt;/span&gt;=&lt;span&gt;requests.get(url)
    data&lt;/span&gt;=&lt;span&gt;page_parse(response.text)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
        save_to_mongo(i)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(i)&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; number &lt;span&gt;in&lt;/span&gt; range(1,200,2&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始抓取第{}页&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(number))
        main(number)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 更多内容请查看官方文档：&lt;a href=&quot;http://splash.readthedocs.io/en/stable/&quot; target=&quot;_blank&quot;&gt;http://splash.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 07:46:00 +0000</pubDate>
<dc:creator>Py.qi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxinqi/p/9279014.html</dc:identifier>
</item>
<item>
<title>php解析word,获得文档中的图片 - 如是说</title>
<link>http://www.cnblogs.com/lishanlei/p/9283974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lishanlei/p/9283974.html</guid>
<description>&lt;h2&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;前段时间在写一个功能：用原生php将获得word中的内容并导入到网站系统中。因为文档中存在公式，图片，表格等，因此写的比较麻烦。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;思路&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;大体思路是先将word中格式为doc的文档转化为docx，用预处理程序将文档中的公式转化为swf图片格式，将word转化为xml格式，在获得xml中的内容转化为json格式。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;预备知识&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 理解xml基础&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;xml是一种可扩展标记语言，是互联网数据传输的重要工具，xml可以实现跨互联网平台而不受编程语言和操作系统的限制，可以说是一个拥有互联网最高级别通行证的数据携带者。&lt;/p&gt;
&lt;p&gt;xml是当前处理结构化文档信息中的技术，有助于在服务器之间穿梭结构化出具，使得开发工作者可以更加方便的控制数据的存储和传输&lt;/p&gt;
&lt;p&gt;xml用于标记电子文件使其具有结构性的标记语言，可用来标记数据，定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。它是标准通用语言的子集，非常适合web传输。&lt;/p&gt;
&lt;p&gt;具体的详解可以看这里：&lt;a href=&quot;https://blog.csdn.net/com_ma/article/details/73277535&quot;&gt;https://blog.csdn.net/com_ma/article/details/73277535&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. word的两种不同的存储方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;word文档的两种存储格式：doc和docx&lt;/p&gt;
&lt;p&gt;doc：习惯上被称为word,采用二进制存储数据&lt;/p&gt;
&lt;p&gt;docx：也就是word2007，采用xml存储数据&lt;/p&gt;
&lt;p&gt;那么后缀明明是docx格式的，为什么成xml格式了？&lt;/p&gt;
&lt;p&gt;选择一个test.docx，将后缀名改为.zip，然后进行解压，得到下面的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201807/1201942-20180709155106098-1457874841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以你认为的docx文档，其实是一个压缩文件~&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 了解DOM和PHP DOM XML解析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DOM提供了针对html和xml文档的标准对象集，以及用于访问和操作这些文档的标准接口。XML DOM是为文档定义标准的对象集。使用PHP DOM扩展可以实现PHP对DOM树的一系列操作。&lt;/p&gt;
&lt;p&gt;使用PHP DOM读取一个XML文档：&lt;/p&gt;
&lt;p&gt;test.xml:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;teststore&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;php dom test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test-one&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;php dom test 2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test-two&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;teststore&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;test.php:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
    &lt;/span&gt;&lt;span&gt;$doc&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DOMDocument();
    &lt;/span&gt;&lt;span&gt;$doc&lt;/span&gt;-&amp;gt;load(&quot;test.xml&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取标签对象&lt;/span&gt;
    &lt;span&gt;$book&lt;/span&gt;=&lt;span&gt;$doc&lt;/span&gt;-&amp;gt;getElementsByTagName(&quot;test&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出第一个中的值&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$book&lt;/span&gt;-&amp;gt;item(0)-&amp;gt;&lt;span&gt;nodeValue;

    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br&amp;gt;----------------&amp;lt;br&amp;gt;&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;$title&lt;/span&gt;=&lt;span&gt;$doc&lt;/span&gt;-&amp;gt;getElementsByTagName(&quot;name&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$title&lt;/span&gt;-&amp;gt;item(0)-&amp;gt;&lt;span&gt;nodeValue;

    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br&amp;gt;----------------&amp;lt;br&amp;gt;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历所有book标签中的内容&lt;/span&gt;
    &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$book&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$note&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$note&lt;/span&gt;-&amp;gt;&lt;span&gt;nodeValue;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br&amp;gt;&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201807/1201942-20180709155122589-1168558803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. word中xml的定义格式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;word中的数据是怎么定义的呢？？&lt;/p&gt;
&lt;p&gt;我们只会介绍连个l两个文件/文件夹:&lt;/p&gt;
&lt;p&gt;一个文件是word/document.xml,这个文件定义了word整个文档的内容。&lt;/p&gt;
&lt;p&gt;另一个文件夹是word/media，这个文件夹存放着文档的多媒体内容，换句话说文档中所有的图片，音频视频都是在这个文件夹下存放。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201807/1201942-20180709155133753-2051105930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;document.ml中的整体结构定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:document &lt;/span&gt;&lt;span&gt;mc:ignorable&lt;/span&gt;&lt;span&gt;=&quot;w14 w15 wp14&quot;&lt;/span&gt;&lt;span&gt; xmlns:m&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/officeDocument/2006/math&quot;&lt;/span&gt;&lt;span&gt; xmlns:mc&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;&lt;span&gt; xmlns:o&lt;/span&gt;&lt;span&gt;=&quot;urn:schemas-microsoft-com:office:office&quot;&lt;/span&gt;&lt;span&gt; xmlns:r&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot;&lt;/span&gt;&lt;span&gt; xmlns:v&lt;/span&gt;&lt;span&gt;=&quot;urn:schemas-microsoft-com:vml&quot;&lt;/span&gt;&lt;span&gt; xmlns:w&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&lt;/span&gt;&lt;span&gt; xmlns:w10&lt;/span&gt;&lt;span&gt;=&quot;urn:schemas-microsoft-com:office:word&quot;&lt;/span&gt;&lt;span&gt; xmlns:w14&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordml&quot;&lt;/span&gt;&lt;span&gt; xmlns:w15&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2012/wordml&quot;&lt;/span&gt;&lt;span&gt; xmlns:wne&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2006/wordml&quot;&lt;/span&gt;&lt;span&gt; xmlns:wp&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing&quot;&lt;/span&gt;&lt;span&gt; xmlns:wp14&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing&quot;&lt;/span&gt;&lt;span&gt; xmlns:wpc&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas&quot;&lt;/span&gt;&lt;span&gt; xmlns:wpg&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordprocessingGroup&quot;&lt;/span&gt;&lt;span&gt; xmlns:wpi&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordprocessingInk&quot;&lt;/span&gt;&lt;span&gt; xmlns:wps&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/office/word/2010/wordprocessingShape&quot;&lt;/span&gt;&lt;span&gt; xmlns:wpscustomdata&lt;/span&gt;&lt;span&gt;=&quot;http://www.wps.cn/officeDocument/2013/wpsCustomData&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:ppr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:pstyle &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:pstyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:keepnext &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:keepnext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:keeplines &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:keeplines&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:widowcontrol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:widowcontrol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:suppresslinenumbers &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:suppresslinenumbers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:pbdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:top &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:top&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:left &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:left&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:bottom &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:bottom&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:right &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:right&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:pbdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;文档段落内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:ppr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:pstyle &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:pstyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:keepnext &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:keepnext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:keeplines &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:keeplines&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:widowcontrol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:widowcontrol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:suppresslinenumbers &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:suppresslinenumbers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:pbdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:top &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:top&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:left &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:left&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:bottom &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:bottom&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:right &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:right&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:pbdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:shd &lt;/span&gt;&lt;span&gt;w:fill&lt;/span&gt;&lt;span&gt;=&quot;FAFAFA&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;clear&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:shd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:spacing &lt;/span&gt;&lt;span&gt;w:after&lt;/span&gt;&lt;span&gt;=&quot;150&quot;&lt;/span&gt;&lt;span&gt; w:afterautospacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:before&lt;/span&gt;&lt;span&gt;=&quot;150&quot;&lt;/span&gt;&lt;span&gt; w:beforeautospacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:line&lt;/span&gt;&lt;span&gt;=&quot;378&quot;&lt;/span&gt;&lt;span&gt; w:linerule&lt;/span&gt;&lt;span&gt;=&quot;atLeast&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:spacing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:ind &lt;/span&gt;&lt;span&gt;w:firstline&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:left&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:right&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:ind&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rfonts &lt;/span&gt;&lt;span&gt;w:ascii&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:cs&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hansi&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hint&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rfonts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:i &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:caps &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:caps&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:color &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;404040&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:spacing &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:spacing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:sz &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:sz&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:szcs &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:szcs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:ppr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rfonts &lt;/span&gt;&lt;span&gt;w:ascii&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:cs&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hansi&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hint&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rfonts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:i &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:caps &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:caps&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:color &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;404040&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:spacing &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:spacing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:sz &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:sz&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:szcs &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:szcs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:bdr &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:bdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:shd &lt;/span&gt;&lt;span&gt;w:fill&lt;/span&gt;&lt;span&gt;=&quot;FAFAFA&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;clear&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:shd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:t&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    作者: Test
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:t&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;图片内容定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:rfonts &lt;/span&gt;&lt;span&gt;w:ascii&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:cs&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hansi&lt;/span&gt;&lt;span&gt;=&quot;Verdana&quot;&lt;/span&gt;&lt;span&gt; w:hint&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rfonts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:i &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:caps &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:caps&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:color &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;404040&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:spacing &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:spacing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:sz &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:sz&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:szcs &lt;/span&gt;&lt;span&gt;w:val&lt;/span&gt;&lt;span&gt;=&quot;21&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:szcs&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:bdr &lt;/span&gt;&lt;span&gt;w:color&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; w:space&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:sz&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:bdr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:shd &lt;/span&gt;&lt;span&gt;w:fill&lt;/span&gt;&lt;span&gt;=&quot;FAFAFA&quot;&lt;/span&gt;&lt;span&gt; w:val&lt;/span&gt;&lt;span&gt;=&quot;clear&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:shd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:rpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:drawing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wp:inline &lt;/span&gt;&lt;span&gt;distb&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; distl&lt;/span&gt;&lt;span&gt;=&quot;114300&quot;&lt;/span&gt;&lt;span&gt; distr&lt;/span&gt;&lt;span&gt;=&quot;114300&quot;&lt;/span&gt;&lt;span&gt; distt&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wp:extent &lt;/span&gt;&lt;span&gt;cx&lt;/span&gt;&lt;span&gt;=&quot;5543550&quot;&lt;/span&gt;&lt;span&gt; cy&lt;/span&gt;&lt;span&gt;=&quot;5543550&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wp:extent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wp:effectextent &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; l&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; r&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; t&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wp:effectextent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wp:docpr &lt;/span&gt;&lt;span&gt;descr&lt;/span&gt;&lt;span&gt;=&quot;IMG_256&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;Picture 1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wp:docpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;wp:cnvgraphicframepr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:graphicframelocks &lt;/span&gt;&lt;span&gt;nochangeaspect&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; xmlns:a&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:graphicframelocks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wp:cnvgraphicframepr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:graphic &lt;/span&gt;&lt;span&gt;xmlns:a&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:graphicdata &lt;/span&gt;&lt;span&gt;uri&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/drawingml/2006/picture&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:pic &lt;/span&gt;&lt;span&gt;xmlns:pic&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/drawingml/2006/picture&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:nvpicpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:cnvpr &lt;/span&gt;&lt;span&gt;descr&lt;/span&gt;&lt;span&gt;=&quot;IMG_256&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;Picture 1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:cnvpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:cnvpicpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:piclocks &lt;/span&gt;&lt;span&gt;nochangeaspect&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:piclocks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:cnvpicpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:nvpicpr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:blipfill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:blip &lt;/span&gt;&lt;span&gt;r:embed&lt;/span&gt;&lt;span&gt;=&quot;rId4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:blip&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:stretch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:fillrect&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:fillrect&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:stretch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:blipfill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:sppr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:xfrm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:off &lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:off&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:ext &lt;/span&gt;&lt;span&gt;cx&lt;/span&gt;&lt;span&gt;=&quot;5543550&quot;&lt;/span&gt;&lt;span&gt; cy&lt;/span&gt;&lt;span&gt;=&quot;5543550&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:ext&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:xfrm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:prstgeom &lt;/span&gt;&lt;span&gt;prst&lt;/span&gt;&lt;span&gt;=&quot;rect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:avlst&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:avlst&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:prstgeom&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:nofill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:nofill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:ln &lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;=&quot;9525&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:nofill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:nofill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:ln&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:sppr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pic:pic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:graphicdata&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a:graphic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;wp:inline&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:drawing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;w:r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结论：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:document&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;  定义整个文档的开始

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    document的子节点，文档的主体内容

        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    body的子节点，一个段落，就是word文档中的段落

           &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    p元素的子节点，一个Run定义了段落中具有相同格式的一段内容

                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:t&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    Run元素节点的子节点，就是文档的内容

                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:drawing&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    run元素的子节点，定义了一张图片

                    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;w:inline&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;    drawing子节点，具体应用没有研究

                    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a:graphic&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;     定义了图片内容

                        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pic:blipfill&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    graphic文档的子节点，定义了图片内容的索引.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;具体的说，如果用java，那么XWPF解析docx文档就是做xml文档解析，获得所有的节点并转换成更好用的属性提供API进行使用,在java中poi能根据这个名称拿到图片相对应的资源，而获取图片位置的关键也就是这里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201807/1201942-20180709155146984-52175820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;但是很不幸，我用的是php~~~所以我们需要通过php的相关接口手动实现获得图片.&lt;/p&gt;

&lt;p&gt;下面说一下我的&lt;span&gt;&lt;strong&gt;具体思路&lt;/strong&gt;&lt;/span&gt;：通过PHP的内置&lt;strong&gt;DOMDocument&lt;/strong&gt;接口获得docx文档的xml节点，遍历xml节点找到保存图片的节点元素，向下遍历图片节点扎到r:embed索引的值。因为docx文档是一个压缩包格式，所以通过PHP内置接口&lt;strong&gt;ZipArchive&lt;/strong&gt;接口遍历该docx文档(实质就是遍历.zip压缩包)，通过索引找到对应的图片，转换成二进制数据，在拼接img标签显示格式为base64的图片数据。&lt;/p&gt;
&lt;p&gt;转换成xml:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$rels_xml&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$doc_xml&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; readZipPart(&lt;span&gt;$filename&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$zip&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZipArchive();
        &lt;/span&gt;&lt;span&gt;$_xml&lt;/span&gt; = 'word/document.xml'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$_xml_rels&lt;/span&gt; = 'word/_rels/document.xml.rels'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt; === &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;open(&lt;span&gt;$filename&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;$index&lt;/span&gt; = &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;locateName(&lt;span&gt;$_xml&lt;/span&gt;)) !== &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$xml&lt;/span&gt; = &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;getFromIndex(&lt;span&gt;$index&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;$zip&lt;/span&gt;-&amp;gt;&lt;span&gt;close();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;die&lt;/span&gt;('non zip file'&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt; === &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;open(&lt;span&gt;$filename&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;$index&lt;/span&gt; = &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;locateName(&lt;span&gt;$_xml_rels&lt;/span&gt;)) !== &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$xml_rels&lt;/span&gt; = &lt;span&gt;$zip&lt;/span&gt;-&amp;gt;getFromIndex(&lt;span&gt;$index&lt;/span&gt;&lt;span&gt;);                    
            }
            &lt;/span&gt;&lt;span&gt;$zip&lt;/span&gt;-&amp;gt;&lt;span&gt;close();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;die&lt;/span&gt;('non zip file'&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DOMDocument();
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml-&amp;gt;encoding = mb_detect_encoding(&lt;span&gt;$xml&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml-&amp;gt;preserveWhiteSpace = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml-&amp;gt;formatOutput = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml-&amp;gt;loadXML(&lt;span&gt;$xml&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;doc_xml-&amp;gt;&lt;span&gt;saveXML();
        
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DOMDocument();
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml-&amp;gt;encoding = mb_detect_encoding(&lt;span&gt;$xml&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml-&amp;gt;preserveWhiteSpace = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml-&amp;gt;formatOutput = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml-&amp;gt;loadXML(&lt;span&gt;$xml_rels&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;rels_xml-&amp;gt;&lt;span&gt;saveXML();
        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;判断是否为图片节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$paragraph&lt;/span&gt;-&amp;gt;name === 'w:drawing'&lt;span&gt;) {
    (&lt;/span&gt;&lt;span&gt;strstr&lt;/span&gt;(&lt;span&gt;$ts&lt;/span&gt;,'…封…') != &lt;span&gt;false&lt;/span&gt; || &lt;span&gt;strstr&lt;/span&gt;(&lt;span&gt;$ts&lt;/span&gt;,'…线…') != &lt;span&gt;false&lt;/span&gt;) ? &lt;span&gt;$t&lt;/span&gt; .= '' : &lt;span&gt;$t&lt;/span&gt; .= &lt;span&gt;$this&lt;/span&gt;-&amp;gt;analysisDrawing(&lt;span&gt;$paragraph&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;获得图片索引：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; analysisDrawing(&amp;amp;&lt;span&gt;$drawingXml&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;$drawingXml&lt;/span&gt;-&amp;gt;&lt;span&gt;read()) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$drawingXml&lt;/span&gt;-&amp;gt;nodeType == XMLREADER::ELEMENT &amp;amp;&amp;amp; &lt;span&gt;$drawingXml&lt;/span&gt;-&amp;gt;name === 'a:blip'&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$rId&lt;/span&gt; = &lt;span&gt;$drawingXml&lt;/span&gt;-&amp;gt;getAttribute('r:embed'&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;$rIdIndex&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$rId&lt;/span&gt;,3&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;checkImageFormating(&lt;span&gt;$rIdIndex&lt;/span&gt;&lt;span&gt;);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;显示压缩包中图片文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; checkImageFormating(&lt;span&gt;$rIdIndex&lt;/span&gt;&lt;span&gt;) {

        &lt;/span&gt;&lt;span&gt;$imgname&lt;/span&gt; = 'word/media/image'.(&lt;span&gt;$rIdIndex&lt;/span&gt;-8&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$zipfileName&lt;/span&gt; =  __DIR__.DIRECTORY_SEPARATOR.'b'.DIRECTORY_SEPARATOR.'test.docx'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$zip&lt;/span&gt;=zip_open(&lt;span&gt;$zipfileName&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;$zip_entry&lt;/span&gt; = zip_read(&lt;span&gt;$zip&lt;/span&gt;)) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读依次读取包中的文件&lt;/span&gt;
            &lt;span&gt;$file_name&lt;/span&gt;=zip_entry_name(&lt;span&gt;$zip_entry&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取zip中的文件名&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;strstr&lt;/span&gt;(&lt;span&gt;$file_name&lt;/span&gt;,&lt;span&gt;$imgname&lt;/span&gt;) != ''&lt;span&gt; ) {
                &lt;/span&gt;&lt;span&gt;$a&lt;/span&gt; = (&lt;span&gt;$rIdIndex&lt;/span&gt;-8 &amp;lt; 10) ? mb_substr(&lt;span&gt;$file_name&lt;/span&gt;,mb_strlen(&lt;span&gt;$imgname&lt;/span&gt;,&quot;utf-8&quot;),1, 'utf-8') : ''&lt;span&gt;;    
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$rIdIndex&lt;/span&gt;-8 &amp;lt; 10 &amp;amp;&amp;amp; &lt;span&gt;$a&lt;/span&gt; != '.') &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$enter_zp&lt;/span&gt; = zip_entry_open(&lt;span&gt;$zip&lt;/span&gt;, &lt;span&gt;$zip_entry&lt;/span&gt;, &quot;r&quot;)) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取包中文件&lt;/span&gt;
                    &lt;span&gt;$ext&lt;/span&gt; = &lt;span&gt;pathinfo&lt;/span&gt;(zip_entry_name (&lt;span&gt;$zip_entry&lt;/span&gt;),PATHINFO_EXTENSION);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取图片文件扩展名&lt;/span&gt;
                    &lt;span&gt;$content&lt;/span&gt; = zip_entry_read(&lt;span&gt;$zip_entry&lt;/span&gt;,zip_entry_filesize(&lt;span&gt;$zip_entry&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取文件二进制数据&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;sprintf&lt;/span&gt;('&amp;lt;img src=&quot;data:image/%s;base64,%s&quot;&amp;gt;', &lt;span&gt;$ext&lt;/span&gt;, &lt;span&gt;base64_encode&lt;/span&gt;(&lt;span&gt;$content&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用base64_encode函数转换读取到的二进制数据并输入输出到页面中&lt;/span&gt;
&lt;span&gt;                }
                zip_entry_close(&lt;/span&gt;&lt;span&gt;$zip_entry&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭zip中打开的项目 &lt;/span&gt;
&lt;span&gt;            }
        }
        zip_close(&lt;/span&gt;&lt;span&gt;$zip&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭zip文件   &lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Mon, 09 Jul 2018 07:20:00 +0000</pubDate>
<dc:creator>如是说</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lishanlei/p/9283974.html</dc:identifier>
</item>
<item>
<title>vue菜鸟从业记：完成项目最后一公里之真机测试和打包上线 - 闰土大叔</title>
<link>http://www.cnblogs.com/running-runtu/p/9283453.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/running-runtu/p/9283453.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135259773-660253847.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最近我朋友王小闰他们公司的项目开发已经进入收尾阶段，前后端并行开发的差不多了，联调也调过了，上篇文章里也讲到了，所谓联调，就仿佛在说“我也不知道我的接口文档写的对不对，我们验证一下吧？我也不知道我的数据处理逻辑对不对，我们验证一下吧？”， 哈哈哈，自嘲一下~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当一切准备就绪，此时就剩下了完成项目的最后一公里，即真机测试和打包上线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么如何在vue项目里做真机测试呢？王小闰准备在leader面前大展身手，展示下自己最近的学习成果，让我们跟着王小闰的节奏操练起来~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先需要在命令行中输入 npm run dev ，启动自己的vue项目，例：http://localhost:8080，让项目在浏览器里跑起来：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135336219-996476792.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你用的是windows系统，输入快捷键WIN+R，输入cmd启动命令行工具，输入ipconfig查看本机IP。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你用的是MacOS系统，输入command+空格键，然后再搜索框输入terminal，敲回车进入终端命令行，输入ifconfig查看本机IP。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以mac为例，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135345654-993960620.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们这台机器在内网里的ip地址是192.168.1.4。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后回到浏览器，将运行着localhost:8080 替换为192.168.1.4:8080,结果发现如图所示，浏览器拒绝了我们的连接请求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135355714-1608967695.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来我们就要分析原因了，将地址栏里的8080去掉，换成192.168.1.4/api/，然后再访问一次。测试之后，发现IP是没有问题的，问题出在8080端口无法被外部访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135420476-1665851379.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因是我们前端的项目是通过webpack-dev-server启动的，而webpack-dev-server默认不支持IP的形式进行页面的访问，所以我们应该将它的配置项做一个修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;跟着王小闰的节奏，快速打开项目根目录下的package.json文件，每次运行npm run dev的时候，本质上都在运行它后面定义的 &lt;span&gt;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你想让webpack-dev-server能够通过IP地址被访问的话，只需要在其后面添加一段”--host 0.0.0.0“就可以了，连起来就是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;dev&quot;: &quot;webpack-dev-server --host 0.0.0.0 --inline --progress --config build/webpack.dev.conf.js&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我们保存下package.json文件，重启下服务，再回到浏览器重新输入IP+端口号，发现就可以正常访问了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135444115-497041022.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当进行到这个阶段，我们就可以让手机在内网里直接通过IP地址访问这个网页了。记住，只需要让你的手机和你的电脑在同一个局域网下就可以正常访问了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图手机截屏所示，这里仅仅给大家做个演示以便理解：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135451289-114970096.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过这几步，王小闰就实现了vue项目里面的真机测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有一种方法就是，本机ip替换localhost，然后使用草料二维码，将http://192.168.1.4:8080生成二维码，将手机连接到与电脑相同的WIFI，扫一扫即可在手机预览。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家在做真机测试的时候，因为各种手机的机型不太一样，王小闰这边测试用的是一台iPhoneSE，如果大家是一些比较低版本的安卓手机，可能你会在手机上访问这个页面，会出现白屏的现象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它可能有两种情况产生，第一种情况是：你的手机浏览器上默认不支持promise这个东西，那么如何解决这个兼容性问题呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决这个问题需要安装一个第三方的包，在终端里输入 &lt;span&gt;npm install babel-polyfill --save&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;babel-polyfill这个第三方的包会帮我们判断，如果浏览器里没有promise，会自动帮我们往里面添加这些es6的新特性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装好之后我们需要重启一下服务器，然后跟着王小闰的节奏，打开src/main.js文件，在文件开头引入&lt;span&gt; import 'babel-polyfill'&lt;/span&gt;，然后所有浏览器就都可以完美支持promise了，之前的一部分童鞋手机测试白屏的问题就解决了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二种情况是，即使添加上这个第三方包，有的同学手机上依然会出现白屏问题，那么这个锅就该让webpack来背了。 这其中就涉及到了vue项目的打包上线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当我们做vue项目上线的时候，首先第一步需要在终端运行一个命令&lt;span&gt; npm run build &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时，vue的脚手架工具会帮我们自动的对src目录下的源代码进行打包编译，生成一个能被浏览器运行的代码，同时这个代码是被压缩过的。稍等片刻，打包过程便会执行完毕，这时终端里会显示&lt;span&gt; Build complete&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135513012-6620122.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值得注意的是，build成功后有个tip提示你build后的文件需要部署在http服务器上，不能通过file协议打开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候，你会发现，项目根目录里多了一个dist目录：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135521080-1885360020.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开dist文件看看，里面的文件就是我们要打包上线的内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201807/701424-20180709135529846-619048680.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后王小闰把dist文件夹里面的内容提交到SVN，后端的童鞋会从SVN上拉取下来前端打包过来的dist源码，然后扔到后端服务器的根目录下就OK了。    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时，后端的服务器已经有了前端的代码，默认会显示index.html，同时index.html上面又引入了打包生成的css和js文件，那么整个前端的代码就可以在后端的服务器上完美的运行起来了。同时后端服务器上还有后端提供的接口，这样就把前端的代码融合到了后端的项目，整个把后端项目进行上线，那我们的webAPP也就做完了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此，王小闰就完成了最简单的项目真机测试与打包上线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，闰土有话说：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看完这篇文章的一部分童鞋可能会觉得，so easy，根本没有啥技术干货。但是作为以记录王小闰职场生活为生的我来说，这却是很多前端新人小白在公司开发项目中绕不过去的一个环节，总结沉淀也好，互诉衷肠也罢，我只想呐喊一句：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;以王小闰为镜，可以知得失。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 06:01:00 +0000</pubDate>
<dc:creator>闰土大叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/running-runtu/p/9283453.html</dc:identifier>
</item>
<item>
<title>LivePhoto开发，你要知道的知识点 - zhanggui</title>
<link>http://www.cnblogs.com/zhanggui/p/9283428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanggui/p/9283428.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Apple从iPhone6s开始支持Live Photo。Live Photo 会录下拍照前后 1.5 秒所发生的一切，因此用户获得的不仅仅是一张精美照片，还有拍照前后时刻的动作和声音。具体的操作可以参见&lt;a href=&quot;https://support.apple.com/zh-cn/HT207310&quot;&gt;拍照和编辑&lt;/a&gt;。&lt;br/&gt;本文接下来要介绍的是如何在项目开发过程中使用Live Photo以及兼容其他平台使用Live Photo。这些平台包括iOS、Web和Android。接下来就开始进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;先了解几个概念。&lt;br/&gt;HEVC：全称High Efficiency Video Coding。它是一种高效的视频编码，是符合行业标准的下一代视频编码技术，继承自H.264编码。Apple想要添加新的功能特性，但是当前的H.264已经无法满足Apple的需求，因此HEVC应运而生。&lt;br/&gt;HEIF：全称High Efficiency Image File(Format)，是一种高效率的图片文件格式，是中静止图像和图像序列的现代容器格式。&lt;br/&gt;苹果从iOS11开始已经默认启动了HEVC电影和HEIF图像存储。也就是说iOS11以及以后版本的手机拍摄的图片默认存储的格式都是HEIF。但是我们可以尝试将手机拍摄的图片发送给其他人，你会发现图片的格式依然是JPG。这是Apple做了兼容，让拍摄的照片更好地跨平台支持。但是如果你用Mac上的Photo（应用）将Live Photo以原图的形式导出，你会发现它导出的内容不再是JPG格式的文件，而是一个HEIC文件+一个mov文件。&lt;br/&gt;Apple其实是通过图片+视频的方式实现了Live Photo。&lt;br/&gt;先简单介绍多平台展示Live Photo的思路：&lt;br/&gt;苹果手机用户将Live Photo上传到服务器，此时上传的是一张图片+视频。当展示的时候分以下几种情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对于苹果手机的用户，可以从服务端获取图片+视频，然后将其合成Live Photo进行展示&lt;/li&gt;
&lt;li&gt;对于Android手机用户，可以模拟Live Photo，将图片覆盖到视频上，然后进行隐藏展示播放。当播放时隐藏图片，让视频播放；当停止播放时显示图片覆盖视频，停止视频播放&lt;/li&gt;
&lt;li&gt;对于Web用户，可以直接使用Apple官方提供的&lt;a href=&quot;https://developer.apple.com/documentation/livephotoskitjs&quot;&gt;LivePhotosKit JS&lt;/a&gt;，按照其使用方法将图片和视频加载到DOM元素中展示。Apple也提供了官方的一个Web展示Live Photo的Demo，点击&lt;a href=&quot;https://developer.apple.com/live-photos/&quot;&gt;这里&lt;/a&gt;查看。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接下来分平台进行操作处理。&lt;/p&gt;
&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt;
&lt;p&gt;首先，我们如果想要手动获取Live Photo的源文件，苹果推荐了下面几种方式：&lt;/p&gt;
&lt;h4 id=&quot;using-macos-image-capture&quot;&gt;1.Using macOS Image Capture&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Connect your iOS device to your Mac.(使用数据线将设备连接到你的Mac)&lt;/li&gt;
&lt;li&gt;Select the Live Photo you wish to import from your device to your local file system.(选择你想要导出到你本地文件系统的Live Photo)&lt;/li&gt;
&lt;li&gt;Choose the destination folder and click on Import.(选择你的目标文件夹，然后点击导入)&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;using-macos-photos&quot;&gt;2.Using macOS Photos&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Connect your iOS device to your Mac.(将你的iOS设备和Mac相连)&lt;/li&gt;
&lt;li&gt;Import your photos into the Photos application.(把你手机上的图片导入到Photos应用程序中)&lt;/li&gt;
&lt;li&gt;Select the Live Photo you wish to export.(选中你想要导入的Live Photo)&lt;/li&gt;
&lt;li&gt;Use File &amp;gt; Export &amp;gt; Export Unmodified Original to export to your file system.(导出，选择导出一张未修改的原件即可)&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;using-windows-10-file-explorer&quot;&gt;3.Using Windows 10 File Explorer&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Ensure that iTunes for Windows is installed. You can download it from here: http://www.apple.com/itunes/download/&lt;/li&gt;
&lt;li&gt;Open File Explorer. This can be opened by pressing the Windows Key and E at the same time.&lt;/li&gt;
&lt;li&gt;Connect your iOS device to your PC.&lt;/li&gt;
&lt;li&gt;You should see your iOS device in the &quot;This PC&quot; folder.&lt;/li&gt;
&lt;li&gt;Navigate to the following folder: (your device) &amp;gt; Internal Storage &amp;gt; DCIM and look for the Live Photo you wish to import.&lt;/li&gt;
&lt;li&gt;Your Live Photo will be stored as a pair of files: a JPG file and a MOV file.&lt;/li&gt;
&lt;li&gt;Drag the pair of files to your local file system.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;导出之后，得到了两个文件：一个是后缀为HEIC的图像文件，一个是mov后缀的视频文件。此时，便可以手动将图片+视频上传到Server，然后供其他端使用。&lt;br/&gt;如果是用户使用自己的iOS设备上传图片，我们可以先通过PHAssetCollection或者PHAsset获取图片，这里有个demo：我通过PHAsset.fetchAssets(with:photoOptions)可以获取手机上面所有的图片。还有一个PHAssetCollection的类，它代表图库中的组，例如时刻、用户创建的相册或者是smart album。我们可以使用该类获取所有的smartAlbum集合：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;var smartAlbums: PHFetchResult&amp;lt;PHAssetCollection&amp;gt;!   //smart albums

 smartAlbums = PHAssetCollection.fetchAssetCollections(with: .smartAlbum, subtype: .albumRegular, options: nil)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的.smartAlbum就是图库中的组的集合，是一个枚举：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;public enum PHAssetCollectionType : Int {
    case album
    case smartAlbum
    case moment
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时拿到的smartAlbums就是一组group，每个group中又包含了符合该组条件的图片例如：&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ScottZg/MarkDownResource/master/livephoto/demo.PNG&quot; alt=&quot;Demo页面展示&quot;/&gt;&lt;br/&gt;左边Smart Albums是获取到的smartAlbums，里面对图片做了智能分类，包括最近删除的、屏幕快照、Live Photos、Videos等等。右边是点击Live Photos进入的页面。里面全部是Live Photo。图片缩略图页面的数据是通过上一个页面传入的group中单个collection：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;  imgListVC.photosList = PHAsset.fetchAssets(in: smartAlbums.object(at: indexPath.row), options: nil)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的PHAsset.fetchAssets是从某个PHAssetCollection中获取该Collection中的所有图片集合，返回结果:&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;var photosList: PHFetchResult&amp;lt;PHAsset&amp;gt;? = nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是PHFetchResult类型，是一个结果集。拿到结果集之后，便可以在图片列表页面展示：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&amp;gt; UICollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CellIdentifier, for: indexPath) as! ImageCollectionCell
        
        let asset = photosList?.object(at: indexPath.row)
        if (asset?.mediaSubtypes.contains(.photoLive))! {
            collectionViewCell.badgeImage = PHLivePhotoView.livePhotoBadgeImage(options: .overContent)
        }
        imageManager.requestImage(for: asset!, targetSize: CGSize.init(width: 80, height: 80), contentMode: .aspectFill, options: nil, resultHandler: { image, _ in
            // The cell may have been recycled by the time this handler gets called;
            // set the cell's thumbnail image only if it's still showing the same asset.
           collectionViewCell.smallImage = image
        })
        
        return collectionViewCell
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里使用的UICollectionView充当容器。collectionViewCell.badgeImage（自定义的image，用于展示左上角的live photo标识）的获取方式很独特，是PhotosUI中自带的API获取的：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;PHLivePhotoView.livePhotoBadgeImage(options: .overContent)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PHLivePhotoView是继承与UIview的一个子类，可以把它理解为UIImageView，只不过UIImageView是用于展示静态图片，而PHLivePhotoView用于展示Live Photo。该类有一个livePhotoBadgeImage的方法用于获取live photo的标识图片,选项.overContent是Live Photo正常展示的角标，而.liveOff则是在角标上添加了斜杠，可自行尝试。&lt;br/&gt;接下来就是获取要展示的图片，这里使用到了PHCachingImageManager类，该类主要是提供用于检索或者生成预览图像。所以展示的预览图就是通过该类生成的。调用它的requestImage方法，将asset传入，便可获UIImage对象。&lt;br/&gt;当点击某个图片进去详情页面时，通过传入的asset便可获取Live Photo，并在PHLivePhotoView上展示：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt; PHImageManager.default().requestLivePhoto(for: asset, targetSize: view.frame.size, contentMode: .aspectFit, options: options) { (livePhoto, info) in
            guard livePhoto != nil else {return}
            self.livePhotoImageView.livePhoto = livePhoto
            
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里使用的是PHImageManager，可以通过该类获取 PHLivePhoto对象。&lt;/p&gt;
&lt;p&gt;写了这么多，只是从相册中获取了Live Photo，然后将其展示。那如何获取该Live Photo的源文件呢？很简单，直接看下面代码：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;  @objc func getSourceAction() {
        let arr = PHAssetResource.assetResources(for: asset)
        let manager = PHAssetResourceManager.default()
        let resourceReqOptions = PHAssetResourceRequestOptions.init()
        manager.requestData(for: arr[0], options: resourceReqOptions, dataReceivedHandler: { (data) in
            let image = UIImage.init(data: data, scale: 1)
            print(image ?? &quot;没有图片&quot;)
        }) { (error) in
            print(error?.localizedDescription ?? &quot;err&quot;)
        }
        print(arr)
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是点击获取资源触发的Action操作，主要用到了PHAssetResource和PHAssetResourceManager。&lt;br/&gt;PHAssetResource是于照片库中的图片视频或者Live Photo 相关连的底层数据资源，也就是说我可以通过此类获取Live Photo的图片+视频:&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ScottZg/MarkDownResource/master/livephoto/PHAssetResource.png&quot; alt=&quot;PHAssetResource解释&quot;/&gt;&lt;br/&gt;通过PHAsset获取asset 资源数组，对Live Photo而言，数组包含了图片+视频。这样如果用户是通过iOS设备上传Live Photo，开发者可以获取到视频和图片分别上传。然后其他端通过使用图片+视频模拟Live Photo的展示。&lt;br/&gt;还有一个问题，如果是iOS设备上，如何将网络获取的图片+视频展示位Live Photo呢？&lt;br/&gt;既然Apple提供了API让开发者获取Live Photo的原始资源，也可以通过原始资源合成Live Photo：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;    open class func request(withResourceFileURLs fileURLs: [URL], placeholderImage image: UIImage?, targetSize: CGSize, contentMode: PHImageContentMode, resultHandler: @escaping (PHLivePhoto?, [AnyHashable : Any]) -&amp;gt; Swift.Void) -&amp;gt; PHLivePhotoRequestID&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此方法是PHLivePhoto的类方法，作用是根据提供的资源文件异步合成Live Photo。这个方法中的URL为一个数组，内容为使用Photos库导出的Live Photo的源文件(HEIC+mov)。&lt;/p&gt;
&lt;h4 id=&quot;将生成的live-photo保存到本地&quot;&gt;将生成的Live Photo保存到本地&lt;/h4&gt;
&lt;p&gt;直接看代码：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;    PHPhotoLibrary.shared().performChanges({
            let request = PHAssetCreationRequest.forAsset()
            let options = PHAssetResourceCreationOptions.init()
            let imageUrl = Bundle.main.path(forResource: &quot;livephoto1&quot;, ofType: &quot;HEIC&quot;)!
            let vidoUrl = Bundle.main.path(forResource: &quot;livephoto1&quot;, ofType: &quot;mov&quot;)!
            request.addResource(with: .pairedVideo, fileURL: URL.init(fileURLWithPath: vidoUrl), options: options)
            request.addResource(with: .photo, fileURL: URL.init(fileURLWithPath: imageUrl), options: options)
        }) { (boo, error) in
            if boo {
                print(&quot;保存到手机成功&quot;)
            }else {
                print(error?.localizedDescription ?? &quot;error&quot;)
            }
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里主要使用的是PHAssetCreationRequest类。这里要注意一点，那就是LivePhoto的视频添加时， PHAssetResourceType为pairedVideo，这种类型是提供Live Photo原始视频数据的格式。通过add操作之后，可以将合成的Live Photo保存到手机中。&lt;br/&gt;按照上述的方式，便可以在iOS平台上面去使用Live Photo。&lt;/p&gt;
&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;
&lt;p&gt;Android本身不支持Live Photo，但是可以进行模拟。先从服务端拉取要展示的图片+视频，展示时，直接将图片覆盖到视频上，当进行按压时，隐藏图片，播放视频即可。&lt;/p&gt;
&lt;h3 id=&quot;web&quot;&gt;Web&lt;/h3&gt;
&lt;p&gt;Apple为了做在线播放Live Photo，官方开发了一套&lt;a href=&quot;https://developer.apple.com/documentation/livephotoskitjs&quot;&gt;LivePhotoKit&lt;/a&gt;的js，通过该JS，开发者可以很容易地将图片+视频合称为Live Photo展示到网页中。这里是Apple官方提供的&lt;a href=&quot;https://developer.apple.com/live-photos/&quot;&gt;Demo&lt;/a&gt;。自己有按照LivePhotoKit的指南去开发，但是发现兼容性并不是很好，在Safari中展示没有什么问题，但是在Chrome和Firefox上展示提示播放失败。这里后续有待进一步研究。另外，在Web展示的时候如果你使用的外链图片和视频，容易产生跨域问题：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt; No 'Access-Control-Allow-Origin' header &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以最好通过自己在本地起一个服务，然后同源进行操作。具体的LivePhotoKit使用可以直接查看官方网站的使用。&lt;/p&gt;
&lt;h2 id=&quot;结束&quot;&gt;结束&lt;/h2&gt;
&lt;p&gt;LivePhoto本质上就是图片+视频生成的一种新的照片格式。在对其进行操作的过程中主要用到的Photos+PhotosUI。&lt;br/&gt;代码Demo可参见&lt;a href=&quot;https://github.com/ScottZg/LivePhotoDemo-Swift&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如有什么疑问，可留言咨询！&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://developer.apple.com/documentation/livephotoskitjs&quot;&gt;LivePhotosKit JS&lt;/a&gt;&lt;br/&gt;2.&lt;a href=&quot;https://developer.apple.com/library/archive/samplecode/UsingPhotosFramework/Introduction/Intro.html&quot;&gt;Example app using Photos framework&lt;/a&gt;&lt;br/&gt;3.&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/505/&quot;&gt;Live Photo Editing and RAW Processing with Core Image&lt;/a&gt;&lt;br/&gt;4.&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/511&quot;&gt;Working with HEIF and HEVC&lt;/a&gt;&lt;br/&gt;5.&lt;a href=&quot;https://stackoverflow.com/questions/32925482/phassetresourcemanager-usage&quot;&gt;PHAssetResourceManager usage?&lt;/a&gt;&lt;br/&gt;6.&lt;a href=&quot;https://support.apple.com/zh-cn/HT207310&quot;&gt;拍摄和编辑livephoto&lt;/a&gt;&lt;br/&gt;7.&lt;a href=&quot;https://github.com/filelife/FLLivePhotoDemo&quot;&gt;FLLivePhotoDemo&lt;/a&gt;&lt;br/&gt;8.&lt;a href=&quot;https://blog.upyun.com/?p=845&quot;&gt;Live Photo存储与应用&lt;/a&gt;&lt;br/&gt;9.&lt;a href=&quot;https://juejin.im/post/5a3548cb51882529c70f3337&quot;&gt;iOS开发创建合成一张LivePhoto&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 05:44:00 +0000</pubDate>
<dc:creator>zhanggui</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanggui/p/9283428.html</dc:identifier>
</item>
<item>
<title>java中JVM内存管理(1) - 期待华丽转身</title>
<link>http://www.cnblogs.com/developerxiaofeng/p/9214969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/developerxiaofeng/p/9214969.html</guid>
<description>&lt;p&gt;Java岗位面试,JVM是对程序员基本功考察,通常会问你对JVM了解吗?  可以分几部分回答这个问题,首先JVM内存划分 | JVM垃圾回收的含义  |  有哪些GC算法  以及年轻代和老年代各自特点等等&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;1) JVM内存划分:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　①  方法区 (线程共享)  常量  静态变量  JIT(即时编译器)编译后代码也在方法区存放&lt;/p&gt;
&lt;p&gt;　　　　② 堆内存(线程共享) 垃圾回收的主要场地&lt;/p&gt;
&lt;p&gt;　　　　③  程序计数器  当前线程执行的字节码的位置指示器&lt;/p&gt;
&lt;p&gt;　　　　④   Java虚拟机栈(栈内存) :保存局部变量,基本数据类型以及堆内存中对象的引用变量&lt;/p&gt;
&lt;p&gt;　　　　⑤ 本地方法栈  (C栈):为JVM提供使用native方法的服务&lt;/p&gt;
&lt;p&gt;通过这幅图了解一下&lt;/p&gt;
&lt;p&gt;     　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217420/201807/1217420-20180709101039101-1521273260.png&quot; alt=&quot;&quot; width=&quot;364&quot; height=&quot;383&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  JDK 1.8同JDK 1.7 ,最大的区别是:元数据取代了永久代.元空间的本质和永久代类似,都是对JVM规范中的方法区的实现.其元空间和永久代之间的最大区别在于:元数据空间不在虚拟机中,而是在本地内存中&lt;/p&gt;
&lt;p&gt;详细了解一下各个部分&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;01)程序计数器(PC寄存器)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;程序计数器的定义:&lt;/span&gt;程序计数器是一块较小的内存空间,是当前线程正在执行的哪一条字节码指令的地址,若当前线程正在执行的是一个本地方法,那么此时程序计数器为Undefined&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;程序计数器的作用:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;字节码解释器通过改变程序计数器来依次获取指令,从而实现代码的流程的控制&lt;/li&gt;
&lt;li&gt;在在多线程情况下,程序计数器记录的是当前线程执行的执行的位置,从而当线程切换回来时,就知道上次线程执行到哪了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　&lt;span&gt;程序计数器的特点&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;是一块较小的内存空间&lt;/li&gt;
&lt;li&gt;线程私有,每个线程都有自己的程序计数器&lt;/li&gt;
&lt;li&gt;生命周期:随着线程的创建而创建,随着线程的销毁而销毁&lt;/li&gt;
&lt;li&gt;是一个唯一不会出现的OutOfMemoryError的内存区域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;02)Java虚拟机栈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;定义:&lt;/span&gt;描述Java方法运行过程的内存模型&lt;/p&gt;
&lt;p&gt;　　　　Java虚拟机栈会为每一个即将运行的Java方法创建一块叫做&quot;栈帧&quot;的区域,用于存放该方法运行过程中的一些信息,如  局部变量表  /操作数栈  /动态链接 /方法出口信息  .............&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217420/201807/1217420-20180709103944089-1138933398.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;压栈出栈过程:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　当方法运行过程中需要创建局部变量时,就将局部变量的值存入栈帧的局部变量表中&lt;/p&gt;
&lt;p&gt;　　　　Java虚拟机栈的栈顶是当前正在执行的活动栈,也就是当前正在执行的方法,PC寄存器也会指向这个地址,只有这个活动的栈帧的本地变量可以被操作数栈操作,当前这个栈帧中调用另一个方法,与之对应的额栈帧又会被创建,新创建的栈帧压入栈顶,变成当前的活动栈帧,方法结束后,当前栈帧的返回值变成新的活动栈帧的中的操作数栈的一个操作数,如果没有返回值,那么新的活动栈帧中操作数栈的操作数没有变化&lt;/p&gt;
&lt;p&gt;　　　　由于Java虚拟机栈是线程对应的,数据不是共享的,因此不用关心数据一致性问题,也不会存在同步锁的问题&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;特点&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;局部变量表随着栈帧的创建而创建,他的大小在编译时确定,创建时只需分配事先规定的大小即可,在方法运行的过程中,局部变化表的大小不会发生变化&lt;/li&gt;
&lt;li&gt;Java虚拟机栈会出现两种异常:StackOverFlowError和OutOfMemoryError&lt;/li&gt;
&lt;li&gt;StackOverFlowError若Java虚拟机栈的大小不允许动态扩展,那么当前线程请求的栈的深度超过当前的Java虚拟机栈的最大深度是,就会抛出此异常&lt;/li&gt;
&lt;li&gt;OutOFMemoryError,若允许动态扩展,那么当前线程的请求的栈内存用完了,无法再动态扩展时,抛出此异常&lt;/li&gt;
&lt;li&gt;Java虚拟机栈也是线程私有,随着线程创建而创建,随着线程的结束而销毁&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;03)本地方法栈(C栈)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;定义:&lt;/span&gt;是为了JVM运行native方法准备的空间,由于很多native方法都是用C语言实现的,所以通常又叫C栈,它与Java虚拟机栈实现的功能类似,只不过本地方法栈描述本地方法运行过程的内存模型&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;栈帧变化过程:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　本地方法被执行时,在本地方法栈也会创建一块栈帧,用于存放该方法的局部变量表  /操作数栈 /动态链接 /方法出口等信息; 方法结束后,相应的栈帧也会出栈,并释放内存空间.也会抛出StackOverFlowError和OutOfMemoryError异常&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;04) 堆&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;定义:&lt;/span&gt;堆是用来对象的内存空间,几乎所有的对象都存储在堆中&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;特点:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;线程共享,整个Java虚拟机只有一个堆,所有线程都访问同一个堆.&lt;/li&gt;
&lt;li&gt;在虚拟机启动时创建&lt;/li&gt;
&lt;li&gt;是垃圾回收的主要场地&lt;/li&gt;
&lt;li&gt;进一步可分为:新生代(Eden区 From Survior To Surviror)  老年代&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　不同的区域存放的不同生命周期的对象,这样可以根据不同区域使用不同的垃圾回收算法,更具有针对性. 堆的大小也可以固定也可以扩展,对于主流的虚拟机,堆大小可扩展的,因此当线程请求分配的内存,但堆已满,且内存已无法再扩展,就抛出OutOfMemoryError异常&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;05)方法区&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;定义:&lt;/span&gt;Java虚拟机规范中定义方法区是堆的一个逻辑部分,方法区存放以下信息  已被虚拟机加载的类信息  /常量  /静态变量 /即时编译后代码&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;特点:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;线程共享.方法区是堆的一个逻辑部分,因此和堆一样,都是线程共享,整个虚拟机中只有一个方法区&lt;/li&gt;
&lt;li&gt;永久代 方法区中的信息一般需要长期存在,而且它又是堆的逻辑分区,因此用堆的划分方法,把方法区称为&quot;永久代&quot;&lt;/li&gt;
&lt;li&gt;内存回收的效率低.方法区中的信息一般需要长期存在,回收一遍只有少量信息无效.主要回收的目标是: 对常量池的回收;对类型的卸载&lt;/li&gt;
&lt;li&gt;Java虚拟机规范l对方法区的要求比较宽松,和堆一样,允许固定大小.也允许动态扩展,还允许不实现垃圾回收&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　&lt;span&gt;运行时常量池:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　方法区中存放:类信息  常量  静态变量  即时编译器变编译后代码.常量就存放在运行时常量池中.当类被Java虚拟机加载后,.class文件中的常量就存在方法区的运行常量池,而且在运行期间,可以向常量池中添加新的常量,如String类的intern()方法就能在运行期间向常量池中添加字符串常量&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;06) 直接内存(堆外内存)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　直接内存是除Java虚拟机之外的内存,但有可能被Java使用&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;操作直接内存:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　在NIO中引入了一种基于通道和缓存的IO方式,他可以调用本地方法的直接分配Java虚拟机之外的内存,然后通过一个存储在堆中的DirectByteBuffer对象直接操作该内存,而无需将外部内存中数据复制到堆中再进行操作,从而提高数据操作的效率,直接内存的大小不受Java虚拟机,也会抛出OutOfMemoryError异常&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;直接内存和堆内存比较&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直接内存申请空间耗费更高的性能&lt;/li&gt;
&lt;li&gt;直接内存读取IO的性能优于普通的堆内存&lt;/li&gt;
&lt;li&gt;直接内存的作用链:本地IO--&amp;gt;直接内存--&amp;gt;本地IO&lt;/li&gt;
&lt;li&gt;堆内存的作用链:本地IO--&amp;gt;直接内存--&amp;gt;非直接内存--&amp;gt;直接内存---&amp;gt;本地IO&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
服务器管理员在配置虚拟机参数时,会根据实际内存设置  -Xmx等参数信息,但经常忽略直接内存,使得各个&lt;br/&gt;内存区域总和大于物理内存,从而导致动态扩展时出现OutOFMemoryError
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;span&gt;2)类似 -Xms  -Xmn这些参数的含义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;堆内存分配&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　① : JVM初始分配的内存由-Xms指定,默认是物理内存的1/64&lt;/p&gt;
&lt;p&gt;　　　　②:  JVM最大分配的内存由-Xmx指定,默认是物理内存的1/4&lt;/p&gt;
&lt;p&gt;　　　　③: 默认空余堆内存小于40%时,JVM就会增加堆直到-Xmx的最大限制;空余堆内存大于70%时,JVM会减少堆直到-Xms的最小限制&lt;/p&gt;
&lt;p&gt;　　　　④: 因此服务器一般设置-Xms  -Xmx相等以避免在每次GC后调整堆大小. 对象的堆内存由成为垃圾回收器的自动内存管理系统回收&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;非堆内存分配:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　①:JVM使用-XX:PermSize 设置非堆内存的初始值,默认物理内存的1/64;&lt;/p&gt;
&lt;p&gt;　　　　② :由XX:MaxPermSize设置设置最大非堆内存的大小&lt;/p&gt;
&lt;p&gt;　　　　③: -Xmn2G :设置年轻代的大小为2G&lt;/p&gt;
&lt;p&gt;　　　　④ :-XX:SurvivorRatio ,设置年轻代中Eden区与Survivor区的比值&lt;/p&gt;
&lt;p&gt;　3)垃圾回收的算法有哪些?&lt;/p&gt;
&lt;p&gt;　　　　① 引用计数法:原理是在此对象有个引用,即增加一个计数,删除一个引用则减少一个计数.垃圾回收时,只收集计数为0的对象.此算法的最致命的无法处理循环引用的问题&lt;/p&gt;
&lt;p&gt;　　　　②: 标记-清除 :此算法分两个阶段,第一阶段从引用的根节点开始标记所有被引用的对象,第二阶段遍历整个堆,把未标记的对象清除,此算法需要暂停应用,同时产生内存碎片&lt;/p&gt;
&lt;p&gt;　　　　③: 复制算法 此算法把内存划分为两个相等的区域,每次只使用一个区域,垃圾回收时,遍历当前使用的区域,把正在使用的对象复制到另一个区域中每次算法每次只处理正在使用的对象,因此复制的成本比较小,同时复制过去以后还能进行相应的内存整理,不会出现&quot;碎片问题&quot;,此算法的缺点也很明显,需要两倍的内存空间&lt;/p&gt;
&lt;p&gt;　　　　④: 标记-整理:此算法结合了&quot;标记-清除&quot;和:复制算法的两个的优点,也是分两个阶段,第一个阶段从根节点开始标记所有被引用对象,第二阶段遍历整个堆,清除未标记的对象并且把存活的对象&quot;压缩&quot;到堆的其中一块,按顺序排放,,此算法避免&quot;标记-清除&quot;的碎片问题,同时也避免&quot;复制&quot;的空间问题&lt;/p&gt;
&lt;p&gt;　4)root搜索算法中,哪些可以作为root?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;被启动类(bootstrap加载器)加载的类和创建的对象&lt;/li&gt;
&lt;li&gt;JavaStack中引用的对象(栈内存中引用的对象)&lt;/li&gt;
&lt;li&gt;方法区中静态引用&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 09 Jul 2018 05:38:00 +0000</pubDate>
<dc:creator>期待华丽转身</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/developerxiaofeng/p/9214969.html</dc:identifier>
</item>
<item>
<title>windows一键部署java项目 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/9283397.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/9283397.html</guid>
<description>&lt;p&gt;windows一键部署java项目&lt;/p&gt;
&lt;p&gt;因为公司需求，要在windows的环境上做一键部署启动java项目，同时还要支持从安装界面动态修改配置文件的IP地址。就像安装软件一样将jdk，tomcat，mysql，influxdb，nginx安装并配置到系统上，顺便还要初始化一下数据。花了一周的时间，这里记录我的踩坑日志。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;磨刀不误砍柴工，选择好工具可以事半功倍。&lt;br/&gt;一）、Inno Setup，一款为Windows程序提供的免费安装程序，通过它可以将需要的文件压缩打包成exe安装程序，然后像安装程序一样解压到另外一个环境中。&lt;a href=&quot;http://www.jrsoftware.org/isinfo.php&quot;&gt;官网地址&lt;/a&gt;&lt;br/&gt;二）、虚拟机，开两台虚拟机的作用：第一可以避免玩坏自己的电脑，第二可以保证每次测试安装的环境都是干净的系统，减少一些不必要的麻烦。对电脑的性能有点要求。&lt;br/&gt;三）、JDK1.8，MySQL5.7，Tomcat8，Nginx，InfluxDB等，这是需要压缩的文件资源。&lt;br/&gt;四）、Windows Server 2012 R2，你值得拥有，用2008安装MySQL会很不顺。&lt;/p&gt;
&lt;h2 id=&quot;inno-setup基础使用&quot;&gt;Inno Setup基础使用&lt;/h2&gt;
&lt;p&gt;Inno Setup的模版几乎一样，通过官方提供的innosetup-QSP.exe 可以帮助我们快速生成模版。但如果需要自定义界面，那你可就要挠挠头呢。比如我现在的需求是在安装的过程中添加一个有输入框的界面，并且能将输入的值替换指定配置文件中的指定内容，安装成功后在桌面生成快捷键。&lt;br/&gt;对于bat脚本语言很薄弱的我来说这里有两个难点，但依葫芦画瓢还是可以做出来的。&lt;br/&gt;一）、Inno Setup的函数，在[Code]代码块中，Inno Setup提供了很多功能来折磨，不来满足我们的需求。具体可以参考&lt;a href=&quot;http://www.jrsoftware.org/ispphelp/index.php&quot;&gt;在线的文档&lt;/a&gt;&lt;br/&gt;二）、需要用bat脚本配置jdk环境变量，安装部署Tomcat，安装部署MySQL。&lt;/p&gt;
&lt;p&gt;千篇一律的iss文档：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;#define MyAppName &quot;自定义程序名称&quot;        
#define MyAppVersion &quot;V1.0&quot;           
#define MyAppPublisher &quot;自定义程序出版商&quot;
#define MyAppURL &quot;http://www.xxxx.com/&quot;

; 基本配置
[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
; 单独标识，可以通过innosetup-QSP-5.6.1.exe 工具自动生成
AppId={{0167D65D-549A-4BA3-B88A-4814EC5A1D35}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
; 默认安装路径
DefaultDirName=C:\Program Files\ITDragon\
DefaultGroupName={#MyAppName}
; 软件名称
OutputBaseFilename=ITDragon
; 软件图标
SetupIconFile=C:\Users\Long\Desktop\ok\ITDragon\itdragon.ico 
; 压缩方式  
Compression=lzma
; yes 可以使文件更小
SolidCompression=yes
; 必需有管理员权限才能安装
PrivilegesRequired=admin
; 安装密码
;Password=itdragon
; 开启加密，需要一个iscrypt.dll文件，网上有下载的
;Encryption=yes

; 语言配置 
[Languages]
Name: &quot;english&quot;; MessagesFile: &quot;compiler:Default.isl&quot;

; 安装文件
[Files]
; 安装部署的源文件路径
Source: &quot;C:\Users\Long\Desktop\ITDragon\*&quot;; DestDir: &quot;{app}&quot;; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use &quot;Flags: ignoreversion&quot; on any shared system files

; 快捷键
[Icons]
Name: &quot;{group}\{cm:UninstallProgram,{#MyAppName}}&quot;; Filename: &quot;{uninstallexe}&quot;
Name: &quot;{commondesktop}\快捷HTTP地址&quot;; Filename: http://localhost
Name: &quot;{commondesktop}\Mysql数据初始化脚本&quot;; Filename: &quot;{app}\mysql\init-data.bat&quot; 
Name: &quot;{commondesktop}\安装须知&quot;; Filename: &quot;{app}\安装须知.doc&quot; 

; 程序安装成功后执行脚本
[Run]     
Filename: &quot;{app}\tomcat\init-jdk.bat&quot;; 
Filename: &quot;{app}\tomcat\bin\init-tomcat.bat&quot;;
Filename: &quot;{app}\mysql\bin\init-mysql.bat&quot;;

; 在安装的时候输入IP地址，动态将localhost修改为输入值
[Code]
var
myPage:TwizardPage;//自定义窗口
ed1:TEdit;//自定义输入框
Lbl1: TNewStaticText;//自定义标题

//初始化引导窗口
procedure InitializeWizard();
begin
myPage:=CreateCustomPage(wpWelcome, '配置服务IP地址', '请输入正确的IP地址，已确保服务的正常使用');
Lbl1 := TNewStaticText.Create(myPage);
Lbl1.Left := ScaleX(5);
Lbl1.Top := ScaleY(5);
Lbl1.Width := ScaleX(250);
Lbl1.Height := ScaleY(50);
Lbl1.Caption := 'IP地址输入框标题';
Lbl1.Parent := myPage.Surface;
ed1:=TEdit.Create(myPage);
ed1.Width:=ScaleX(410);
ed1.Top := ScaleY(25);
ed1.Text :='127.0.0.1';
ed1.Parent:=myPage.Surface;
end;
procedure CurStepChanged(CurStep: TSetupStep);
var
    fileName:String;
    svArray: TArrayOfString;
    nLines,i:Integer;
begin
  //复制文件后执行
  if CurStep = ssPostinstall then
  begin
  fileName := ExpandConstant('{app}\nginx\html\main.bundle.js');
  LoadStringsFromFile(fileName, svArray);//读取文件
  nLines := GetArrayLength(svArray);
  for i := 0 to nLines - 1 do
    if (0 &amp;lt; Pos('localhost', svArray[i])) then//查找目标
    StringChange(svArray[i], 'localhost', ed1.Text);
    SaveStringsToUTF8File(fileName, svArray, false);
  end;
end;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：&lt;br/&gt;一）、如果你不需要自定义函数，[Code]代码块都可以删掉&lt;br/&gt;二）、点击Inno Setup上的compile按钮开始编译，编译成功后会在一个Output目录夹生成exe文件，这个Output目录一般和iss文件在同一级。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/806956/201807/806956-20180709133515424-930493720.png&quot; alt=&quot;安装效果图&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置jdk环境变量&quot;&gt;配置JDK环境变量&lt;/h2&gt;
&lt;p&gt;在做这个需求的时候，看了几篇文章，发现他们都把jdk放在Tomcat目录中，第一次做的时候也傻乎乎的放在Tomcat目录中，其实没必要。而且目前主流的springboot项目都是内嵌tomcat。新建一个bat脚本用来运行java程序&lt;code&gt;java -jar xxx.jar&lt;/code&gt;安装成功后在桌面生成一个快捷键，让用户双击启动服务。如果你有更合理的方法，可以教教我！！！&lt;br/&gt;init-jdk.bat，内容来源网络，修改时需要目录层级关系:&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;@echo off 
echo
cd ..
echo  &quot;%~dp0&quot;
echo &quot;%cd%&quot;
set jdkpath=%cd%\tomcat\bin\java\jdk
echo %jdkpath%
setx JAVA_HOME  &quot;%jdkpath%&quot;  -m
setx CLASSPATH  &quot;.;%%JAVA_HOME%%\lib\tools.jar;%%JAVA_HOME%%\lib\dt.jar&quot; -m
echo %Path%
echo %Path%|find /i &quot;%java_home%&quot; &amp;amp;&amp;amp; set IsNull=true || set IsNull=false
echo %IsNull%
if not %IsNull%==true (
reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment&quot; /v Path /t REG_SZ /d &quot;%Path%;%%JAVA_HOME%%\bin;%%JAVA_HOME%%\jre\bin&quot; /f
setx Path &quot;%%JAVA_HOME%%\bin;%Path%&quot;
)
exit&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;tomcat安装部署&quot;&gt;Tomcat安装部署&lt;/h2&gt;
&lt;p&gt;需要将init-tomcat.bat文件放在tomcat/bin目录下，有博客说要修改service.bat文件，我没有修改依然可以正常启动。在看别人的博客的时候，遇到不明白的地方可以先试着跳过去。我就傻乎乎的下了一个tomcat6，对比两者有什么区别......&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;echo -------tomcat begin--------
call &quot;%~dp0%service.bat&quot; install tomcat8
echo -------tomcat install end------------------
sc config tomcat8 start= auto
net start tomcat8
exit&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;mysql安装部署&quot;&gt;MySQL安装部署&lt;/h2&gt;
&lt;p&gt;MySQL安装需要注意两点：第一设置数据库初始密码，第二设置数据库编码格式，&lt;br/&gt;一）、初始化数据库的时候不要生成密码，方便后期修改，命令&lt;code&gt;mysqld.exe --initialize-insecure --user=mysql --console&lt;/code&gt;&lt;br/&gt;二）、数据库的编码格式要统一为utf8，网上很多方法都是在my.ini文件中配置编码格式，可MySQL5.7没有该文件，没有我们可以创建一个。但MySQL5.6如果手动创建my.ini文件可能在启动服务时有问题。&lt;/p&gt;
&lt;p&gt;init-mysql.bat，内容来源网络，稍作修改。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;cd /d %~dp0 
cd ..
set inipath=%cd%\my.ini
cd bin
&quot;%cd%\mysqld.exe&quot; -install mysql --defaults-file=&quot;%inipath%&quot;
&quot;%cd%\mysqld.exe&quot; --initialize-insecure --user=mysql --console
net start mysql
sc config mysql start=auto 
net stop mysql
net start mysql
echo 安装完毕 
&quot;%cd%\mysqladmin.exe&quot; -u root password root
echo 修改密码完毕 
cd .. 
&quot;%cd%\bin\mysql.exe&quot; -uroot -proot &amp;lt; &quot;%cd%\sqlfile\initMysql.sql&quot; 
echo 数据库初始化完成 
pause;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;initMysql.sql，用来创建数据库和设置编码。MySQL启动成功后，我们还是要进去执行&lt;code&gt;show variables like '%char%;'&lt;/code&gt;看看是不是统一修改成了utf8&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create database IF NOT EXISTS itdragon_data character set utf8;
set global character_set_database=utf8;
set global character_set_server=utf8;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;遇到的坑&quot;&gt;遇到的坑&lt;/h2&gt;
&lt;p&gt;用了Inno Setup工具，一键部署配置web项目变的很简单，只需要将部署的资源压缩成exe文件，然后点击exe文件待安装成功后执行自动运行bat文件初始化配置即可。可我依然花了很长的时间。原因有几点：&lt;/p&gt;
&lt;p&gt;一）、开始安装的环境是Windows Server 2008，安装MySQL5.7失败，原因是不支持MySQL5.7提供的高级读写锁。后来换成了MySQL5.6安装成功&lt;/p&gt;
&lt;p&gt;二）、MySQL5.6启动服务失败1067，网上也有很多解决方法，没有一个成功。无奈换了WIndows Server 2012 r2，结果一次成功。&lt;/p&gt;
&lt;p&gt;三）、对Inno Setup函数使用不熟，资源文件太大，每次编译调试要等待半小时。&lt;/p&gt;
&lt;p&gt;文章到这里就结束了，InfluxDB和Nginx就更简单了，一样的逻辑。希望大家把时间用到正确的地方。如果觉得不错可以点个&quot;推荐&quot;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br/&gt;https://blog.csdn.net/liuhaomatou/article/details/52576162&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/dj0721/article/details/72462688&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 05:34:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/9283397.html</dc:identifier>
</item>
<item>
<title>微服务实战(一)：落地微服务架构到直销系统(什么是微服务) - 曹剑</title>
<link>http://www.cnblogs.com/malaoko/p/9279594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/malaoko/p/9279594.html</guid>
<description>&lt;p&gt;网上有很多关于微服务的文章，从不同的维度对微服务进行了相关的讲述；有些高屋建瓴，有些涉及细节，有些侧重理论，有些侧重代码，都是非常不错的了解微服务的文章。&lt;/p&gt;
&lt;p&gt;我们这个系列的文章的维度主要是实战落地，也就是我们在平常工作以及产品开发过程中，考虑为什么选择微服务架构风格，以及如何将微服务的架构风格落地到我们实际的一个大健康行业直销电商系统的主要过程。本文涉及有少量理论的部分，主要是架构与实现的层面，让大家真正对微服务能了解、能认识、能实现。&lt;/p&gt;
&lt;p&gt;本系列文章从“DDD实战进阶第一波”系列继续。如果你对我们落地的系统的需求以及DDD不是特别了解的话，建议你先查看我们DDD实战进阶第一波的文章，因为DDD是微服务架构风格的一个重要组成部分，而且本系列的需求和代码会紧接着DDD实战进阶第一波。&lt;/p&gt;
&lt;p&gt;微服务这几年很火。其实一种概念或一种架构风格的兴起，一定有它背后的原因。我们在这里不讲所谓高大上的理由，而是讲我经过将近18年的软件设计与开发工作，在有选择性的成功使用了微服务架构风格的体会。&lt;/p&gt;
&lt;p&gt;微服务架构风格的兴起，主要是因为客户对现代化的产品和系统的需要，对软件开发本身提出了更高的要求。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.服务独立性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个系统通常在设计时，架构师(或项目经理)会根据对需求的理解划分为设计上的多个界限上下文，每个界限上下文包含本界限上下文需要的领域模型。在实际&lt;/p&gt;
&lt;p&gt;开发过程中，会主要出现以下几个问题：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;a.多小组并行开发：&lt;/span&gt;在一个大型系统中，界限上下文会分给不同的开发小组进行开发。有些界限上下文之间在业务上有依赖关系，但我们在技术上也做了依赖。比如订单界限上下文依赖产品界限上下文或客户界限上下文，这样通常要先实现被依赖的对象或功能（至少要先定义出来），才做依赖它的功能，影响开发的效率。&lt;/p&gt;
&lt;p&gt;b.部署与运行的问题：因为存在依赖关系，所以被依赖界限上下文的组件发生变化时，该组件还要更新到依赖它的界限上下文中，管理复杂。而且一旦被依赖的界限上下文出现问题，依赖它的界限上下文也会出现问题。服务独立部署到不同的主机或Docker上因为存在引用，也会对管理和部署上带来障碍。&lt;/p&gt;
&lt;p&gt;c.技术选择的问题：因为技术上存在依赖关系（通常是通过引用），所以多个小组采用的技术通常是相同的。但在某些情况下，界限上下文应该选用最适合它的技术，而且界限上下文之间也不应该通过Restful风格的接口互相访问。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.高性能大并发：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;现代的互联网应用，需要支持大量用户的并发访问操作，传统的经典开发方式，会主要出现以下几个问题：&lt;/p&gt;
&lt;p&gt;a.用例接口的直接暴露：通常我们会将功能暴露成接口，而接口通过调用应用服务（应用服务协调仓储和逻辑）完成用例功能，如果逻辑复杂，数据库访问负载大，特别该用例通过事务同时操作多个数据访问上下文，速度会很慢，很长时间才给前端返回结果，如果用户多，该问题会被放大。&lt;/p&gt;
&lt;p&gt;b.查询的问题：一个界限上下文除了用例的功能，通常我们会有很多查询的功能提供给用户。通常我们会将一个界限上下文的所有功能都做到一个Api项目中，另外业务和查询使用的模型是同一个，这样也会影响性能。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.事件溯源与最终一致性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在大并发的系统中，我们不能使用事务来保证强一致性，因为这样会影响性能，我们应该采用多界限上下文的最终一致性来保证数据的正确。&lt;/p&gt;
&lt;p&gt;a.传统的经典开发方式，无法实现最终一致性的主要原因是没有记录一个对象变化历史的事件信息，所以当我们在通过非事务同时更新多个界限上下文的数据时，当需要回滚先更新界限上下文的对象数据时，不知道该对象的历史状态，也就没办法还原。&lt;/p&gt;
&lt;p&gt;b.业务单据的历史修改信息：通常在业务系统中，我们有需求需要知道一个对象（比如一张单据）的历史修改记录时，因为没有记录事件数据，所以无法很好的跟踪对象的历史变化状态。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.服务的高可用行：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;现在对服务的高可用要求越来越高，我们应该尽量保证应用提供的服务可用，否则会丢失用户，造成业务损失。服务的高可用通常会由于以下两个方面原因引起：&lt;/p&gt;
&lt;p&gt;a.数据库服务或数据库down掉、数据访问网络连接中断。&lt;/p&gt;
&lt;p&gt;b.WebApi网络地址不可用、WebApi访问负载大、对用户的请求响应异常。&lt;/p&gt;

&lt;p&gt;为了解决上述的开发过程、部署过程以及运行过程中的问题，我们需要一种新的架构风格来指导产品的开发、部署与运行。这种架构风格就是微服务。微服务架构风格提出以下几个&lt;/p&gt;
&lt;p&gt;要求来解决上述问题，并应对用户与市场对我们的产品与软件提出的更高的要求。&lt;/p&gt;
&lt;p&gt;1.通过构建EDA（事件驱动的架构）并结合消息总线，解决服务独立性的问题。&lt;/p&gt;
&lt;p&gt;2.通过构建CQRS（命令查询职责分离的架构）并结合消息总线，解决大并发高性能的问题。&lt;/p&gt;
&lt;p&gt;3.通过构建Event存储与还原的机制，实现事件溯源，解决最终一致性的问题，也解决业务上有对象历史状态获取需求。&lt;/p&gt;
&lt;p&gt;4.通过数据库产品本身高可用行，弹性访问实现数据访问高可用；通过实现WebApi负载平衡、重试与断路器、Api网关与服务中心等方式，实现WebApi的高可用。&lt;/p&gt;
&lt;p&gt;因此，我对微服务的定义是：微服务是一种架构风格，它旨在通过将一个大系统分解成多个小系统（DDD中的界限上下文），并通过一系列的架构建议，解决服务独立性、性能、事件溯源与最终一致、高可用性的需求，最终使多个界限上下文能够相互协作，组合成一个为用户提供高质量的服务的大系统。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;本系列文章涉及到的技术包括C#、Asp.net core、EF core、RabbitMq、Ocelot、Consule、Docker等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;本系列文章通过直销系统的实际案例，最终将实现如下的两个总体架构图，并将直销系统的业务连接到它们。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/56104/201807/56104-20180708172555945-1343224600.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/56104/201807/56104-20180708172636816-1388211323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QQ讨论群：309287205 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;微服务实战视频请关注微信公众号：&lt;/strong&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/56104/201804/56104-20180404152324246-1012833899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 09 Jul 2018 04:00:00 +0000</pubDate>
<dc:creator>曹剑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/malaoko/p/9279594.html</dc:identifier>
</item>
<item>
<title>React组件重构：嵌套+继承 与 高阶组件 - 韩子卢</title>
<link>http://www.cnblogs.com/vvjiang/p/9283006.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vvjiang/p/9283006.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在最近做的一个react项目中，遇到了一个比较典型的需要重构的场景：提取两个组件中共同的部分。&lt;/p&gt;
&lt;p&gt;最开始通过使用嵌套组件和继承的方式完成了这次重构。&lt;/p&gt;
&lt;p&gt;但是后来又用高阶组件重新写了一遍，发现更好一点。&lt;/p&gt;
&lt;p&gt;在这里记录下这两种方式以便之后参考和演进。&lt;/p&gt;
&lt;h2 id=&quot;本次重构的场景&quot;&gt;本次重构的场景&lt;/h2&gt;
&lt;p&gt;因为场景涉及到具体的业务，所以我现在将它简化为一个简单的场景。&lt;/p&gt;
&lt;p&gt;现在有两个黑色箱子，箱子上都有一个红色按钮，A箱子充满气体，按了按钮之后箱子里面气体变红，B箱子充满泥土，按了之后箱子里面泥土变红。&lt;/p&gt;
&lt;p&gt;那么现在上一个简单的重构前代码：&lt;/p&gt;
&lt;p&gt;BoxA.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class BoxA extends Component {
  state={
    color:'black'
  }

  handleClick=()=&amp;gt;{
    this.setState({
      color:'red'
    })
  }

  handleShake=()=&amp;gt;{
    /* 摇动后气体没声音  */
  }

  render() {
    return (
      /* 这里面当然没有onShake这种事件，理解意思就行了 */
      &amp;lt;div style={{backgroundColor:'black'}} onShake={this.handleShake}&amp;gt;
          &amp;lt;button onClick={this.handleClick} style={{backgroundColor:'red'}}&amp;gt;&amp;lt;/button&amp;gt;
          &amp;lt;div&amp;gt;
            /* 气体组件，没毛病 */
            &amp;lt;气体 color={this.state.color}  /&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxB.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class BoxB extends Component {
  state={
    color:'black'
  }
  handleClick=()=&amp;gt;{
    this.setState({
      color:'red'
    })
  }

  handleShake=()=&amp;gt;{
    /* 摇动后泥土有声音  */
  }

  render() {
    return (
      &amp;lt;div style={{backgroundColor:'black'}} onShake={this.handleShake}&amp;gt;
          &amp;lt;button onClick={this.handleClick} style={{backgroundColor:'red'}}&amp;gt;&amp;lt;/button&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;泥土 color={this.state.color}  /&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用嵌套组件进行重构&quot;&gt;使用嵌套组件进行重构&lt;/h2&gt;
&lt;p&gt;看看上面的代码，即使在业务简化的情况下都有很多重复的，所以得重构。&lt;/p&gt;
&lt;p&gt;对于这种很明显的箱子类问题，一般都会采用嵌套组件的方式重构。&lt;/p&gt;
&lt;p&gt;Box.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class Box extends Component {

  static propTypes = {
    children: PropTypes.node,
    onClick: PropTypes.func,
    onShake: PropTypes.func
  }

  render() {
    return (
      &amp;lt;div style={{backgroundColor:'black'}} onShake={this.props.onShake}&amp;gt;
          &amp;lt;button onClick={this.props.onClick} style={{backgroundColor:'red'}}&amp;gt;&amp;lt;/button&amp;gt;
          &amp;lt;div&amp;gt;
            {this.children}
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxA.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'
import Box from './Box.jsx'

class BoxA extends Component {
  state={
    color:'black'
  }

  handleClick=()=&amp;gt;{
    this.setState({
      color:'red'
    })
  }

  handleShake=()=&amp;gt;{
    /* 摇动后气体没声音  */
  }

  render() {
    return (
      &amp;lt;Box onClick={this.handleClick} onShake={this.props.handleShake}&amp;gt;
        &amp;lt;气体 color={this.state.color} /&amp;gt;
      &amp;lt;/Box&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxB.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class BoxB extends Component {
  state={
    color:'black'
  }
  handleClick=()=&amp;gt;{
    this.setState({
      color:'red'
    })
  }

  handleShake=()=&amp;gt;{
    /* 摇动后泥土有声音  */
  }

  render() {
    return (
     &amp;lt;Box onClick={this.handleClick} onShake={this.props.handleShake}&amp;gt;
        &amp;lt;泥土 color={this.state.color}  /&amp;gt;
     &amp;lt;/Box&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用继承组件的方式进行重构&quot;&gt;使用继承组件的方式进行重构&lt;/h2&gt;
&lt;p&gt;对于很多场景而言，使用了嵌套组件后，可能就不需要或者没法进一步进行组件提炼了。&lt;/p&gt;
&lt;p&gt;然而完成这波操作后，我们发现嵌套组件BoxA和BoxB依然存在重复代码，即按下按钮变红这部分代码。&lt;/p&gt;
&lt;p&gt;为了保证组件的单一职责，即箱子就是个带红色按钮可以摇动的箱子，我们不知道里面以后会放什么进去，就不能说不管以后里面放什么，只要我一按红色按钮，里面的物质都会变红。&lt;/p&gt;
&lt;p&gt;这部分代码肯定是不能放在嵌套组件Box里，因为它直接操作着被嵌套的内容。&lt;/p&gt;
&lt;p&gt;那么在这里我们可以使用继承组件的方式。&lt;/p&gt;
&lt;p&gt;Box.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class Box extends Component {
  static propTypes = {
    children: PropTypes.node,
    onClick: PropTypes.func,
    onShake: PropTypes.func
  }

  render() {
    return (
      &amp;lt;div style={{backgroundColor:'black'}} onShake={this.props.onShake}&amp;gt;
          &amp;lt;button onClick={this.props.onClick} style={{backgroundColor:'red'}}&amp;gt;&amp;lt;/button&amp;gt;
          &amp;lt;div&amp;gt;
            {this.children}
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BasicBox.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'
class BasicBox extends Component {
  state={
    color:'black'
  }

  handleClick=()=&amp;gt;{
    this.setState({
      color:'red'
    })
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxA.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'
import Box from './Box.jsx'

class BoxA extends BasicBox {
  handleShake=()=&amp;gt;{
    /* 摇动后气体没声音  */
  }

  render() {
    return (
      &amp;lt;Box onClick={this.handleClick} onShake={this.props.handleShake}&amp;gt;
        &amp;lt;气体 color={this.state.color} /&amp;gt;
      &amp;lt;/Box&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxB.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

class BoxB extends BasicBox {
  handleShake=()=&amp;gt;{
    /* 摇动后泥土有声音  */
  }

  render() {
    return (
     &amp;lt;Box onClick={this.handleClick} onShake={this.props.handleShake}&amp;gt;
        &amp;lt;泥土 color={this.state.color}  /&amp;gt;
     &amp;lt;/Box&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过修改后的代码，就可以将BoxA和BoxB中相同的部分提取到BasicBox中。&lt;/p&gt;
&lt;p&gt;这样我们相当于将一个功能块提取了出来，你可以继承BasicBox（这个命名可能不好，容易引起混淆），如果不使用state的值也完全没有任何问题。&lt;/p&gt;
&lt;p&gt;但是这样做也许会带了一些别的问题。&lt;/p&gt;
&lt;p&gt;我们自己去看这段代码的时候其实不难理解，不过之后让其他人对这块代码做修改时，后来的人就会感到奇怪，BoxA中突然间使用了一个不知道从哪里来的handleClick。&lt;/p&gt;
&lt;h2 id=&quot;使用高阶组件进行重构&quot;&gt;使用高阶组件进行重构&lt;/h2&gt;
&lt;p&gt;为了解决上面的问题，后来又使用高阶组件的方式玩了一遍:&lt;/p&gt;
&lt;p&gt;hocBox.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'

hocBox=(WrappedComponent)=&amp;gt;{
  return class Box extends Component{
      static propTypes = {
        onShake: PropTypes.func
      }

      state={
        color:'black'
      }

      handleClick=()=&amp;gt;{
        this.setState({
          color:'red'
        })
      }

      render() {
        return (
          &amp;lt;div style={{backgroundColor:'black'}} onShake={this.props.handleShake}&amp;gt;
              &amp;lt;button onClick={this.handleClick} style={{backgroundColor:'red'}}&amp;gt;&amp;lt;/button&amp;gt;
              &amp;lt;div&amp;gt;
                &amp;lt;WrappedComponent color={this.state.color}  /&amp;gt;
              &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        )
      }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxA.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'
import Box from './hocBox.jsx'


const 气体WithBtnBox=hocBox(气体)
class BoxA extends BasicBox {
  handleShake=()=&amp;gt;{
    /* 摇动后气体没声音  */
  }

  render() {
    return (
      &amp;lt;气体WithBtnBox onShake={this.handleShake} /&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BoxB.jsx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import React, { Component, PropTypes } from 'react'
import Box from './hocBox.jsx'

const 泥土WithBtnBox=hocBox(泥土)
class BoxA extends BasicBox {
  handleShake=()=&amp;gt;{
    /* 摇动后泥土有声音  */
  }

  render() {
    return (
      &amp;lt;泥土WithBtnBox onShake={this.handleShake} /&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;高阶组件的使用就像设计模式中的装饰者模式（Decorator Pattern）。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上的两种方式中，高阶组件的方式对于后来者在修改上更友好一点。&lt;/p&gt;
&lt;p&gt;但是用嵌套+继承的方式理解起来其实更容易一点，特别是去重构一个复杂的组件时，通过这种方式往往更快，拆分起来更容易。（我个人更倾向于这种，不知道是不是C#玩多了，更喜欢这样的玩法，而对高阶组件这种方式总是感觉很奇怪）&lt;/p&gt;
&lt;p&gt;本篇文章算是自己的一次重构笔记吧，写的只是个人的一点理解，如果有更好的办法或者疏漏的地方欢迎批评指正。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 03:33:00 +0000</pubDate>
<dc:creator>韩子卢</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vvjiang/p/9283006.html</dc:identifier>
</item>
<item>
<title>Angular使用总结 --- 通过指令动态添加组件 - Shapeying</title>
<link>http://www.cnblogs.com/shapeY/p/9275042.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shapeY/p/9275042.html</guid>
<description>&lt;p&gt;　　之前自己写的公共组件，都是会先引入，需要调起的时候再通过service控制公共组件状态、值、回调函数什么的。但是有一些场景不适合这种方式，还是动态添加组件更加好。通过写过的一个小组件来总结下。&lt;/p&gt;
&lt;h2&gt;创建组件&lt;/h2&gt;
&lt;p&gt;　　场景：鼠标移动到图标上时，展示解释性的说明文字。那就需要创建一个普通的tooltip组件。如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_566a52ba-d4c4-4a6f-ac82-043af3682e1e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_566a52ba-d4c4-4a6f-ac82-043af3682e1e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_566a52ba-d4c4-4a6f-ac82-043af3682e1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aside &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;hover-tip-wrapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{tipText}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aside&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HTML&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_d2f75309-c87e-4cdc-82de-ebd52222169d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2f75309-c87e-4cdc-82de-ebd52222169d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2f75309-c87e-4cdc-82de-ebd52222169d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
import { Component, OnInit } from '@angular/core'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-hovertip'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./hovertip.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./hovertip.component.scss'&lt;span&gt;]
})
export class HovertipComponent implements OnInit {

  public tipText: string;
  constructor() { }

  ngOnInit() {
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ts&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_8c377866-798d-40de-9434-72f0979516e6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8c377866-798d-40de-9434-72f0979516e6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8c377866-798d-40de-9434-72f0979516e6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.hover-tip-wrapper&lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; max-content&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;&lt;span&gt;
    bottom&lt;/span&gt;:&lt;span&gt; calc(100% + 5px)&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt; calc( -10px - 100%)&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; rgba(#000000,.8)&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0 5px&lt;/span&gt;;&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 3px&lt;/span&gt;;&lt;span&gt;

    &amp;amp;&lt;/span&gt;:&lt;span&gt;:after{
        content: ''&lt;/span&gt;;&lt;span&gt;
        position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
        height&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
        width&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
        border&lt;/span&gt;:&lt;span&gt; 4px solid transparent&lt;/span&gt;;&lt;span&gt;
        border-top-color&lt;/span&gt;:&lt;span&gt; rgba(#000000,.8)&lt;/span&gt;;&lt;span&gt;
        left&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
        top&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
    }&lt;span&gt;

    span &lt;/span&gt;{&lt;span&gt;
        color&lt;/span&gt;:&lt;span&gt; #ccc&lt;/span&gt;;&lt;span&gt;
        font-size&lt;/span&gt;:&lt;span&gt; 12px&lt;/span&gt;;
    }&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;scss&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　非常简单的一个组件，tipText来接收需要展示的文字。&lt;/p&gt;
&lt;p&gt;　　需要注意的是，声明组件的时候，除了需要添加到declarations中外，还记得要添加到entryComponents中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;entryComponents: [HovertipComponent],&lt;/strong&gt;&lt;/span&gt;
declarations: [HovertipComponent, HovertipDirective]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那entryComponents这个配置项是做什么的呢？看源码注释，大概意思就是：&lt;span&gt;Angular会为此配置项中的组件创建一个ComponentFactory，并存放在ComponentFactoryResolver中。&lt;/span&gt;动态添加组件时，需要用到组件工厂，所以此配置是必不可少的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201807/1072774-20180706175446116-1246331167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;创建指令&lt;/h2&gt;
&lt;p&gt;　　通过指令为目标元素绑定事件，控制创建组件、传递tipText以及组件的销毁。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
import { Input , Directive , ViewContainerRef , ComponentRef, ComponentFactory, HostListener , ComponentFactoryResolver} from '@angular/core'&lt;span&gt;;
import { HovertipComponent } from &lt;/span&gt;'./hovertip.component'&lt;span&gt;;
@Directive({
  selector: &lt;/span&gt;'[appHovertip]'&lt;span&gt;
})
export class HovertipDirective {

  public hovertip: ComponentRef&lt;/span&gt;&amp;lt;HovertipComponent&amp;gt;&lt;span&gt;;
  public factory: ComponentFactory&lt;/span&gt;&amp;lt;HovertipComponent&amp;gt;&lt;span&gt;;
  constructor(
    private viewContainer: ViewContainerRef,
    private resolver: ComponentFactoryResolver
  ) {&lt;br/&gt;// 获取对应的组件工厂
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.factory = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.resolver.resolveComponentFactory(HovertipComponent);
   }
  @Input(&lt;/span&gt;'appHovertip'&lt;span&gt;) tipText: string;
　&lt;br/&gt;// 绑定鼠标移入的事件
  @HostListener(&lt;/span&gt;'mouseenter'&lt;span&gt;) onmouseenter() {&lt;br/&gt;　　 // 清空所有的view    &lt;br/&gt;　　 &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.viewContainer.clear();&lt;br/&gt;// 创建组件
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hovertip = &lt;span&gt;this&lt;/span&gt;.viewContainer.createComponent(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.factory);&lt;br/&gt;// 向组件实例传递参数
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hovertip.instance.tipText = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tipText;
  }
　&lt;br/&gt;　// 绑定鼠标移出时的事件
  @HostListener(&lt;/span&gt;'mouseleave'&lt;span&gt;) onmouseleave() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hovertip) {&lt;br/&gt;　　// 组件销毁
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hovertip.destroy();
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;通过ViewContainerRef类来管理视图&lt;/span&gt;，这里用到了创建组件。这个 &lt;a href=&quot;https://segmentfault.com/a/1190000008672478#articleHeader1&quot; target=&quot;_blank&quot;&gt;专栏&lt;/a&gt; 解释的挺清楚的。这里用到了以下两个API，清除和创建。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201807/1072774-20180709105525552-1096958978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　createComponent方法接受ComponentFactoty类，创建后返回的&lt;span&gt;ComponentRef类，可以获取到组件实例（instance），控制组件销毁&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201807/1072774-20180709110728942-1316750155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　大致思路是这样的，先获取到了HovertipComponent组件对于的componentFactory，监听鼠标移入事件，在触发事件时，通过ViewContainerRef类来创建组件，存下返回的组件componentRef（获取实例，销毁组件时需要用到），向组件实例传递tipText。监听鼠标移出事件，在事件触发时，销毁组件。&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;　　在目标元素是绑定指令，同时传递tipText即可。&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201807/1072774-20180709111605410-685544695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以正常的创建和销毁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201807/1072774-20180709111822448-1774369170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;　　开始做的时候，主要是对这几个类比较懵，ViewContainerRef、ComponentRef、ComponentFactory、ComponentFactoryResolver等，看看源码，查查资料，总会梳理清楚的。&lt;/p&gt;
&lt;p&gt;　　参考资料：&lt;/p&gt;
&lt;p&gt;　　 https://segmentfault.com/a/1190000008672478#articleHeader1&lt;/p&gt;
&lt;p&gt;　　 https://segmentfault.com/a/1190000009175508&lt;/p&gt;
</description>
<pubDate>Mon, 09 Jul 2018 03:25:00 +0000</pubDate>
<dc:creator>Shapeying</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shapeY/p/9275042.html</dc:identifier>
</item>
</channel>
</rss>