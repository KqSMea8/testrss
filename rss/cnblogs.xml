<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Hibernate框架入门 - 风之之</title>
<link>http://www.cnblogs.com/fzz9/p/8035007.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzz9/p/8035007.html</guid>
<description>&lt;h2&gt;&lt;span&gt;导读&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本文主&lt;span&gt;要&lt;/span&gt;介绍hibernate的入门，主要包括以下内容：hibernate介绍、hibernate环境搭建、hibernate简单测试、测试涉及的api详解。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、hibernate介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;JDBC是Java操作数据库的工具，我们可以使用jdbc来书写并执行sql语句来操作数据库，对于普通的业务，jdbc工具是完全可以胜任的，但但当任务复杂，特别是数据库中表格很多的时候，jdbc就会显得力不从心，代码复用率低且sql语句容易出错。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hibernate框架从jdbc面向过程操作数据库的过程转变为面向对象来操作数据库。其原理是&lt;span&gt;ORM编程&lt;/span&gt;，即Object Relational Mapping(&lt;span&gt;对象关系映射&lt;/span&gt;)。每一个数据库表对应一个实体类，这个实体类通过映射关系来操作这个数据库表，映射可以理解为平常我们所说的函数，如y=f(x);y是数据库中的表，x是实体类，f(x)即映射关系，我们通过操作x可以改变y值，同样的操作实体类便可以达到操作数据库的目的，这就是通过&lt;span&gt;面向对象方式来操作数据库&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二、hibernate环境搭建&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;hibernate的环境搭建包括以下部分：1、导入运行环境需要的jar包；2、创建数据库表和对应的实体类；&lt;/span&gt;&lt;span&gt;&lt;span&gt;3、&lt;/span&gt;编写表和实体之间的映射关系（也叫orm元数据）；4、编写主配置文件hibernate.cfg.xml&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、导包&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;搜索下载压缩包：hibernate-release-5.0.7.Final.zip就可以找到相应的jar包：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213212626613-2011815452.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：不要忘了导入数据库驱动包（这里我使用的是mysql数据库），所以还需导入：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213212922019-1697258394.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、创建数据库表和实体类&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这里假设我们创建了&lt;span&gt;user表&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
`uid` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
`uname` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`uid`)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213214111926-1204570631.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实体类：&lt;span&gt;User&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; domain;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long uid;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uname;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getUid() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUid(Long uid) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.uid =&lt;span&gt; uid;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUname() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; uname;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUname(String uname) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.uname =&lt;span&gt; uname;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User [uid=&quot; + uid + &quot;, uname=&quot; + uname + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;3、编写表和实体之间的映射关系（orm元数据）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1）导入dtd约束&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;hibernate框架使用的是xml文件作为配置文件，所以在编写xml文件之前需要先导入dtd约束（该约束文件也在上面使用到的压缩包里）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213214906035-1707225665.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;导入方式：eclipse--&amp;gt;Preferences--&amp;gt;xml--&amp;gt;XML Catalog--&amp;gt;add&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213215217347-1079022967.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213215636582-1895953954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213215754879-277452380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;两个文件都添加完成后你的eclipse中有了这个dtd约束了，如果你的eclipse已经有了该dtd约束上面的步骤就可以忽略。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）配置映射关系:User.hbm.xml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般该文件的命名格式为（当然你可以随意命名）：类名.hbm.xml。且放在和该实体类同一个目录下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; xml简写版：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uname&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;uname&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;xml注释版：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_6909c3be-4eb1-41b7-845b-87677a6caf33&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6909c3be-4eb1-41b7-845b-87677a6caf33&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6909c3be-4eb1-41b7-845b-87677a6caf33&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 1、导入dtd约束 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 2、ORM元数据：配置表与实体对象的关系（映射关系） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        2.1 class元素: 配置实体与表的对应关系的
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            name: 完整类名
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            table:数据库表名
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; id元素:配置主键映射的属性
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                name: 填写主键对应属性名
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        每个类型有三种填法: java类型|hibernate类型|数据库类型
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;          &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; generator:主键生成策略(明天讲) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 2.2property元素:除id之外的普通属性映射
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                name: 填写属性名
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                column(可选): 填写列名
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                        每个类型有三种填法: java类型|hibernate类型|数据库类型
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;          &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uname&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;uname&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;4、编写主配置文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;主配置文件一般是整体环境的配置一些数据库操作设置。主要分为：1、必要配置：数据库驱动等配置；2、可选配置；3、引入orm元数据：指定要操作的关系映射。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般主配置文件都以hibernate.xfg.xml来命名（这样我们在使用时可以直接使用无参方法调用，比较方便）。且需要将文件放到src目录下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;hebernate.cfg.xml简写版:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 
        #hibernate.dialect org.hibernate.dialect.MySQLDialect
        #hibernate.dialect org.hibernate.dialect.MySQLInnoDBDialect
        #hibernate.dialect org.hibernate.dialect.MySQLMyISAMDialect
        #hibernate.connection.driver_class com.mysql.jdbc.Driver
        #hibernate.connection.url jdbc:mysql:///test
        #hibernate.connection.username gavin
        #hibernate.connection.password
        &amp;lt;property name=&quot;hibernate.connection.driver_class&quot;&amp;gt;com.mysql.jdbc.Driver&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.url&quot;&amp;gt;jdbc:mysql:///hibernate&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.username&quot;&amp;gt;root&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.password&quot;&amp;gt;password&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.MySQLDialect&amp;lt;/property&amp;gt;
        
        &amp;lt;property name=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;hibernate.format_sql&quot;&amp;gt;true&amp;lt;/property&amp;gt;
        
        &amp;lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;update&amp;lt;/property&amp;gt;

        &amp;lt;mapping resource=&quot;domain/User.hbm.xml&quot; /&amp;gt;
        
    &amp;lt;/session-factory&amp;gt;
&amp;lt;/hibernate-configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;hebernate.cfg.xml&lt;/span&gt;注释版：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c524b511-0350-4d5f-bcbf-c33875dcbd22&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c524b511-0350-4d5f-bcbf-c33875dcbd22&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c524b511-0350-4d5f-bcbf-c33875dcbd22&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLDialect
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLInnoDBDialect
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLMyISAMDialect
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        #hibernate.connection.driver_class com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        #hibernate.connection.url jdbc:mysql:///test
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        #hibernate.connection.username gavin
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        #hibernate.connection.password
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.connection.driver_class&quot;&amp;gt;com.mysql.jdbc.Driver&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.connection.url&quot;&amp;gt;jdbc:mysql:///hibernate&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.connection.username&quot;&amp;gt;root&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.connection.password&quot;&amp;gt;password&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.MySQLDialect&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.format_sql&quot;&amp;gt;true&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        &amp;lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;update&amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        &amp;lt;mapping resource=&quot;domain/User.hbm.xml&quot; /&amp;gt;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    &amp;lt;/session-factory&amp;gt;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/hibernate-configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;到这里我们的hibernate环境就搭建完成了，刚开始感觉很多，用多了其实就很可以很快copy这些文件然后改改就o了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;三、hibernate简单测试&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt; 1)Demo测试类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Session;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.SessionFactory;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Transaction;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.cfg.Configuration;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; domain.User;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用hibernate框架，通过操作User对象往user表中插入一条数据。&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser(){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;操作涉及的核心类&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         Configuration config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         SessionFactory factory =&lt;span&gt; config.buildSessionFactory();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         Session session =&lt;span&gt; factory.openSession();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Transaction tx =&lt;span&gt; session.beginTransaction();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;操作User
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-----------------------&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         User user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         user.setUid(1l&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         user.setUname(&quot;张三&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         session.save(user);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-----------------------
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭资源&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        tx.commit();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        session.close();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        factory.close();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2）执行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213230205238-1894599819.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171213230229691-1118392126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;四、测试涉及的api详解&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 创建,调用空参构造&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Configuration conf = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 根据配置信息,创建 SessionFactory对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; SessionFactory sf =&lt;span&gt; conf.buildSessionFactory();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3 获得session&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; Session session =&lt;span&gt; sf.openSession();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4 session获得操作事务的Transaction对象
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得操作事务的tx对象&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; Transaction tx =&lt;span&gt; session.getTransaction();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;tx.begin();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启事务并获得操作事务的tx对象(建议使用)&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; Transaction tx2 =&lt;span&gt; session.beginTransaction();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------------------
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 获得要修改的对象&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;User u = session.get(User.&lt;span&gt;class&lt;/span&gt;, 1l&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 调用delete删除对象&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;session.delete(u);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------------------&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; tx2.commit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交事务&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; session.close();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放资源&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; sf.close();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放资源&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;除了虚线//-----------------之间的操作部分，上下两部分一般都是固定不变的。所以我们可以使用工具类进行抽取，以提高代码复用率：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HibernateUtils:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; utils;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.HibernateException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Session;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.SessionFactory;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.cfg.Configuration;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HibernateUtils {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 会话工厂，以单例方式管理&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SessionFactory sessionFactory;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ThreadLocal存储session&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ThreadLocal&amp;lt;Session&amp;gt; session = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Session&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以单例方式管理sessionFactory&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             sessionFactory = &lt;span&gt;new&lt;/span&gt; Configuration().configure(&quot;hibernate.cfg.xml&quot;&lt;span&gt;).buildSessionFactory();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (HibernateException e) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HibernateException(&quot;初始化会话工厂失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到一个单例的会话工厂&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SessionFactory getSessionFactory(){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionFactory;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取一个新session&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Session openSession(){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;  
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Session getCurrentSession() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; HibernateException {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionFactory.getCurrentSession(); 
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; closeSession() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; HibernateException {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        sessionFactory.getCurrentSession().close();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 13 Dec 2017 15:22:00 +0000</pubDate>
<dc:creator>风之之</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzz9/p/8035007.html</dc:identifier>
</item>
<item>
<title>Lucene.net(4.8.0) 学习问题记录一:分词器Analyzer的构造和内部成员ReuseStategy - Shendu.cc</title>
<link>http://www.cnblogs.com/dacc123/p/8035438.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dacc123/p/8035438.html</guid>
<description>&lt;p&gt;前言：目前自己在做使用Lucene.net和PanGu分词实现全文检索的工作，不过自己是把别人做好的项目进行迁移。因为项目整体要迁移到ASP.NET Core 2.0版本,而Lucene使用的版本是3.6.0 ，PanGu分词也是对应Lucene3.6.0版本的。不过好在Lucene.net 已经有了Core 2.0版本，4.8.0 bate版，而PanGu分词，目前有人正在做，貌似已经做完，只是还没有测试~，Lucene升级的改变我都会加粗表示。&lt;/p&gt;
&lt;p&gt;Lucene.net 4.8.0   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/lucenenet&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/lucenenet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PanGu分词&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&quot; target=&quot;_blank&quot;&gt;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lucene.net 4.8.0 和之前的Lucene.net 3.6.0 改动还是相当多的，这里对自己开发过程遇到的问题，做一个记录吧，希望可以帮到和我一样需要升级Lucene.net的人。我也是第一次接触Lucene ,也希望可以帮助初学Lucene的同学。&lt;/p&gt;

&lt;h2&gt;一，Lucene 分词器：Analyzer&lt;/h2&gt;
&lt;p&gt;这里就对Lucene的Analyzer做一个简单的阐述，以后会对Analyzer做一个更加详细的笔记：Lucene 中的Analyzer 是一个分词器，具体的作用呢就是将文本（包括要写入索引的文档，和查询的条件）进行分词操作 Tokenization 得到一系列的分词 Token。我们用的别的分词工具，比如PanGu分词，都是继承Analyzer 的，并且继承相关的类和覆写相关的方法。Analyzer 是怎么参与搜索的过程呢？&lt;/p&gt;
&lt;h3&gt;1.在写入索引的时候：&lt;/h3&gt;
&lt;p&gt;我们需要IndexWriter  ,二IndexWriter 的构建 ，补充一下，&lt;strong&gt;Lucene3.6.0 的构造方法已经被抛弃了，新的构造方法是，依赖一个IndexWriterConfig 类&lt;/strong&gt;，这记录的是IndexWriter 的各种属性和配置，这里不做细究了。IndexWriterConfig 的构造函数就要传入一个Analyzer .&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
IndexWriterConfig(Version matchVersion, Analyzer analyzer)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以我们写入索引的时候，会用到Analyzer , 写入的索引是这样一个借口，索引的储存方式是Document 类，一个Document类中有很多的Field (name, value)。我们可以这样理解Document是是一个数据库中的表，Field是数据库的中的字段。比如一篇文章，我们要把它存入索引，以便后来有人可以搜索到。&lt;/p&gt;
&lt;p&gt;文章有很多属性：Title : xxx ; Author :xxxx;Content : xxxx;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
document.Add(&lt;span&gt;new&lt;/span&gt; Field(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lucene&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
document.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Field(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dacc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
document.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Field(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxxxxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
IndexWriter.AddDocument(document);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大抵是上面的过程，而分词器Analyzer需要做的就是Filed 的value进行分词，把很长的内容分成一个一个的小分词 Token。&lt;/p&gt;
&lt;h3&gt;2.在查询搜索的时候，&lt;/h3&gt;
&lt;p&gt;我们也需要Analyzer ,当然不是必须需要，和IndexWriter的必须要求不一样。Analyzer的职责就是，将查询的内容进行分词，比如我们查询的内容是 “全文检索和分词” ，那么Analyzer会把它先分解成“全文检索”和“分词”，然后在索引中，去找和有这些分词的Field ,然后把Field所在的Document，返回出去。这里搜索的细节在这里不细究了，以后也会做详细的笔记。&lt;/p&gt;
&lt;h2&gt;二，问题：&lt;/h2&gt;
&lt;p&gt;大概了解了Analyzer之后，我就列出我遇到的问题：&lt;/p&gt;
&lt;h3&gt;1.在调用Analyer的GetTokenStream 之后，抛出&lt;/h3&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;  &lt;span class=&quot;s2&quot;&gt;&lt;a href=&quot;https://www.crifan.com/csharp_error_object_reference_not_set_to_an_instance_of_an_object/&quot; target=&quot;_blank&quot;&gt;Object reference not set to an instance of an object&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;这个异常的意思是，引用了值为null的对象。于是我去翻找源码，发现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; TokenStream GetTokenStream(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName, TextReader reader)
        {
            TokenStreamComponents components &lt;/span&gt;= reuseStrategy.GetReusableComponents(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fieldName);
            TextReader r &lt;/span&gt;=&lt;span&gt; InitReader(fieldName, reader);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (components == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                components &lt;/span&gt;=&lt;span&gt; CreateComponents(fieldName, r);
                reuseStrategy.SetReusableComponents(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fieldName, components);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                components.SetReader(r);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; components.TokenStream;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  在下面这条语句上面抛出了错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    TokenStreamComponents components = reuseStrategy.GetReusableComponents(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fieldName);
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reuseStrategy 是一个空对象。所以这句就报错了。这里，我们可以了解一下，Analyzer的内部.函数 GetTokenStream 是返回Analyzer中的TokenStream，TokenStream是一系列Token的集合。先不细究TokenStream的具体作用，因为会花很多的篇幅去说。而获取TokenStream 的关键就在reuseStrategy &lt;strong&gt;。在新版本的Lucene中，Analyzer中TokenStream是可以重复使用的，即在一个线程中建立的Analyzer实例，都共用TokenStream。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;internal&lt;/span&gt; DisposableThreadLocal&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt; storedValue = &lt;span&gt;new&lt;/span&gt; DisposableThreadLocal&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Analyzer的成员 storedValue 是全局共用的，storedValue 中就储存了TokenStream 。&lt;strong&gt;而reuseStrategy也是Lucene3.6.0中没有的 &lt;/strong&gt;的作用就是帮助实现，多个Analyzer实例共用storedValue 。ResuseStrategy类 中有成员函数GetReusableComponents 和SetReusableComponents 是设置TokenStream和Tokenizer的，&lt;/p&gt;
&lt;p&gt;这是ResueStrategy类的源码，这个类是一个抽象类，Analyzer的内部类，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReuseStrategy
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the reusable &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; for the field with the given name.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;analyzer&quot;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;see cref=&quot;Analyzer&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; from which to get the reused components. Use
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;        &lt;span&gt;&amp;lt;see cref=&quot;GetStoredValue(Analyzer)&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;SetStoredValue(Analyzer, object)&quot;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;        to access the data on the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;Analyzer&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fieldName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; Name of the field whose reusable &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;        are to be retrieved &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt; Reusable &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; for the field, or &lt;/span&gt;&lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;         if there was no previous components for the field &lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; TokenStreamComponents GetReusableComponents(Analyzer analyzer, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Stores the given &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; as the reusable components for the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; field with the give name.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;analyzer&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; Analyzer &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fieldName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; Name of the field whose &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; are being set &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;components&quot;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;see cref=&quot;TokenStreamComponents&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; which are to be reused for the field &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetReusableComponents(Analyzer analyzer, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName, TokenStreamComponents components);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Returns the currently stored value.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt; Currently stored value or &lt;/span&gt;&lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; if no value is stored &lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;exception cref=&quot;ObjectDisposedException&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; if the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;Analyzer&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; is closed. &lt;/span&gt;&lt;span&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; GetStoredValue(Analyzer analyzer)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (analyzer.storedValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ObjectDisposedException(&lt;span&gt;this&lt;/span&gt;.GetType().GetTypeInfo().FullName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;this Analyzer is closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; analyzer.storedValue.Get();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Sets the stored value.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;analyzer&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; Analyzer &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;storedValue&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; Value to store &lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;exception cref=&quot;ObjectDisposedException&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; if the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;Analyzer&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; is closed. &lt;/span&gt;&lt;span&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetStoredValue(Analyzer analyzer, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; storedValue)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (analyzer.storedValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ObjectDisposedException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;this Analyzer is closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            analyzer.storedValue.Set(storedValue);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Analyzer 中的另一个内部类，继承了ReuseStrategy 抽象类。这两个类实现了设置Analyzer中的TokenStreamComponents和获取TokenStreamComponents 。这样的话Analyzer中GetTokenStream流程就清楚了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GlobalReuseStrategy : ReuseStrategy
        {
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Sole constructor. (For invocation by subclass constructors, typically implicit.) &lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            [Obsolete(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Don't create instances of this class, use Analyzer.GLOBAL_REUSE_STRATEGY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; GlobalReuseStrategy()
            { }


            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; TokenStreamComponents GetReusableComponents(Analyzer analyzer, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TokenStreamComponents)GetStoredValue(analyzer);
            }


            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetReusableComponents(Analyzer analyzer, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName, TokenStreamComponents components)
            {
                SetStoredValue(analyzer, components);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外呢Analyzer 也可以设置TokenStream:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; TokenStream GetTokenStream(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; fieldName, TextReader reader)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先获取上一次共用的TokenStreamComponents&lt;/span&gt;
                        TokenStreamComponents components = reuseStrategy.GetReusableComponents(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fieldName);
                        TextReader r &lt;/span&gt;=&lt;span&gt; InitReader(fieldName, reader);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有，就需要自己创建一个&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt; (components == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            components &lt;/span&gt;=&lt;span&gt; CreateComponents(fieldName, r);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;并且设置新的ResuableComponents，可以让下一个使用&lt;/span&gt;
                            reuseStrategy.SetReusableComponents(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fieldName, components);
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果之前就生成过了，TokenStreamComponents,则reset&lt;/span&gt;
&lt;span&gt;                            components.SetReader(r);
                        }
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回TokenStream&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; components.TokenStream;
                    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以我们在调用Analyzer的时候，Analyzer有一个构造函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Analyzer(ReuseStrategy reuseStrategy)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.reuseStrategy =&lt;span&gt; reuseStrategy;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;csharp&quot;&gt;
设置Analyzer 的 ReuseStrategy , 然后我发现在PanGu分词中，使用的构造函数中并没有传入ReuseStrategy , 按我们就需要自己建一个ReuseStrategy的实例。
&lt;/pre&gt;
&lt;p&gt;PanGu分词的构造函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; PanGuAnalyzer(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; originalResult)
          : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(originalResult, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PanGuAnalyzer(MatchOptions options, MatchParameter parameters)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, options, parameters)
        {
        }

      
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PanGuAnalyzer(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; originalResult, MatchOptions options, MatchParameter parameters)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Initialize(originalResult, options, parameters);
        }

       
       
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PanGuAnalyzer(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; originalResult, MatchOptions options, MatchParameter parameters, ReuseStrategy reuseStrategy)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(reuseStrategy)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Initialize(originalResult, options, parameters);
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Initialize(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; originalResult, MatchOptions options, MatchParameter parameters)
        {
            _originalResult &lt;/span&gt;=&lt;span&gt; originalResult;
            _options &lt;/span&gt;=&lt;span&gt; options;
            _parameters &lt;/span&gt;=&lt;span&gt; parameters;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我调用的是第二个构造函数，结果传进去的ReuseStrategy 是null ,所以我们需要新建实例，事实上Analyzer中已经为我们提供了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; ReuseStrategy GLOBAL_REUSE_STRATEGY = &lt;span&gt;new&lt;/span&gt; GlobalReuseStrategy()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以稍微改动一下PanGu分词的构造函数就好 了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; PanGuAnalyzer(MatchOptions options, MatchParameter parameters)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, options, parameters, Lucene.Net.Analysis.Analyzer.GLOBAL_REUSE_STRATEGY)
        {
        }
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 13 Dec 2017 15:15:00 +0000</pubDate>
<dc:creator>Shendu.cc</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dacc123/p/8035438.html</dc:identifier>
</item>
<item>
<title>《Flask Web开发——基于Python的Web应用开发实践》一字一句上机实践（下） - 舞动的心</title>
<link>http://www.cnblogs.com/liuzhen1995/p/8035393.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuzhen1995/p/8035393.html</guid>
<description>&lt;blockquote readability=&quot;0.41666666666667&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a1&quot;&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a2&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;8&lt;span&gt;章 用户认证&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a3&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;9&lt;span&gt;章 用户角色&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a4&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;10&lt;span&gt;章 用户资料&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a5&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;11&lt;span&gt;章 博客文章&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a6&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;12&lt;span&gt;章 关注者&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a7&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;13&lt;span&gt;章 用户评论&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/liuzhen1995/p/8035393.html#a8&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第&lt;/span&gt;14&lt;span&gt;章 应用编程接口&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;第1章-第7章学习实践记录请参见：&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/liuzhen1995/p/8001040.html&quot; target=&quot;_blank&quot;&gt;《Flask Web开发——基于Python的Web应用开发实践》一字一句上机实践（上）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;本文记录自己学习《Flask Web开发——基于Python的Web应用开发实践》的第8章-第14章内容。相比于刚开始学习第1-7章内容来说，本部分内容实战性更强，而且在书本上遇到的问题也相对较少，如果认真弄懂前7章内容的话，本部分内容相当于是对前7章内容的具体实践，学习也很轻松。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;首先说明一下本部分项目示例实现了哪些功能？&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;用户角色：普通用户、管理员&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;具体功能：登陆、注册、发布文章、编辑文章、用户间关注、用户评论、修改个人信息、管理用户评论、MarkDown显示文章格式。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;下图中所示为一个管理员角色登陆系统各部分功能图片动态图：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213223648504-1938688770.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://coding.net/u/LiuZhen1995/p/MyDemo/git/tree/twelve/&quot; target=&quot;_blank&quot;&gt;我自己上机演练代码&lt;/a&gt;&lt;/strong&gt;：（PS：和&lt;strong&gt;&lt;a href=&quot;https://github.com/miguelgrinberg/flasky&quot; target=&quot;_blank&quot;&gt;作者GitHub上代码&lt;/a&gt;&lt;/strong&gt;有些许区别）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.书本79页密码散列功能shell测试有bug&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果学完第7章，并按照71页manage.py中写入启动脚本代码，在控制台输入python manage.py shell会报以下错误：TypeError: &amp;lt;flask_script.commands.Shell object at 0x0000000004E29668&amp;gt;: 'dict' object is not callable&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224045129-632658781.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解决办法如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224051535-1040913936.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;紧接着，如果还是安装书本上命令提示输入命令，会报以下错误：Traceback (most recent call last):File &quot;&amp;lt;console&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决办法见下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224103363-625251779.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.书本87页用shell插入新用户数据有bug&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本问题在于数据库设计含有外键，直接按照书中插入代码，未插入用户角色外键，是无法插入数据的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决办法：删除User表和Role表之间的多对一关系&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224112347-1493075863.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后，删除项目中所有**.sqlite文件和migrations文件夹，具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224121660-1113478127.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后按照下图所示三步，重新创建数据库（PS：此处方法见第5章5.11节）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224131519-168705255.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这些处理完毕后，依照书上插入代码，依旧会报找不到User和db错误，解决办法如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224142754-548997348.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;完成以上数据插入任务后，在CMD控制台输入python manage.py runserver开启服务，浏览器中输入http://127.0.0.1:5000/auth/login，然后用插入的邮箱号和密码进行登陆，会得到如下结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224151082-782550728.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224200191-755689304.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.书本89页实际运行结果（PS：经验证，数据可以注册成功）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224207801-2097810081.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224217347-1166928075.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.书本92页执行一个新的数据库迁移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在CMD窗口中，依次输入python manage.py db migrate -m “the second migration”、python manage.py db upgrade命令，具体执行以及得到结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224226629-1484290757.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224235129-977460083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.书本94页示例8-22代码因为Flask-Login版本问题出现如下图所示bug&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224242582-429955942.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解决办法见下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224253785-170035241.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;让我疑惑的是，我写笔记时看的是实体书，上面代码有问题，下面截图的是电子书，上面却是正确的&amp;gt;~&amp;lt;，具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224303379-1476992036.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;问题解决方案网址（&lt;a href=&quot;https://segmentfault.com/q/1010000004041497&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/q/1010000004041497&lt;/a&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试is_authenticated方法如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224312004-1652018732.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;附加书本95页页面运行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224320129-1207538816.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224327613-1927094848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;出现上图的原因：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;花了一个多小时找错，结果发现是自己照着书本83页敲示例8-8代码时少了return语句，直接写User.query.get(int(user_id))，具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224339644-783933378.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解决来源（&lt;a href=&quot;https://github.com/maxcountryman/flask-login/issues/302&quot; target=&quot;_blank&quot;&gt;https://github.com/maxcountryman/flask-login/issues/302&lt;/a&gt;）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224433926-661788682.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;运行成功界面如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224427222-127183836.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面是我自己修改数据库数据中邮箱验证属性为True时显示结果（PS：主要在于邮箱验证时需要申请临时密码，所以就没填写具体邮箱数据，直接手动改写后台数据库中数据）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224441566-1108889260.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注：第8章主要讲解了如何使用Flask框架实现用户登陆、注册功能，以及使用邮箱进行用户注册确认以及密码修改确认等。感觉第8章内容就是对书本前7章内容的一次综合练习，所有使用的技术点都可以在前7章中找到。所以，个人感觉只要踏实把第8章所有代码以及实现思路弄懂，才算是刚刚入门Flask框架。&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.书本99页使用shell会话把角色写入数据库问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于在第8章实现过程中，我把Role表和User表之间的外键关系给删除了，如果在这章不重新回复两表之间的关系就无法实现用户角色的功能。所以，在这种情况下，我又得要把数据库重新初始化、迁移和创建。之所以这么做，而不是直接进行迁移和创建，是因为我在直接进行迁移和创建的过程中，报错：default属性在框架中已经存在，无法创建新的Role表，这个错误没有解决，由于初学，无奈，直接删除migrations文件夹和生成的data-dev.sqlite数据库文件，重新进行初始化、迁移和创建，发现一切OK。具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224510004-2051911532.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好了，既然Role表和User表之间有了一对多而存在的外键关系，那注册功能插入用户数据时，必须得要确认用户角色，否则无法插入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224518363-7307512.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;刚刚进行了注册测试，竟然不用确定用户角色，也可以插入成功。这样的感觉违背了我学习数据库的理论知识啊，之前第5章，进行插入数据时，行不通，现在好了。估计是之前学习时，代码有点bug。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：本章相当于主要在讲数据库的知识，和本书核心Flask框架的知识点联系不大，其中核心思想就是定义权限来分配角色等级。一个用户有的只有一种权限，有的可以有多种权限。权限的分配很灵活，这样处理操作大大简化了数据库的设计难度，也提高了数据的条理性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;书本105页、107、109页和112页操作运行结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此处按照书本上的代码讲解，进行编写代码操作，其中遇到的问题在前面均已遇到过，所以到了此处基本没啥难点。按照书本讲解，运行结果具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户简介页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224732582-776030574.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;普通用户修改个人信息界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224744722-1093904557.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224800082-449990452.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;管理员修改个人信息界面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224809113-2030880456.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224819347-941752358.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;显示用户头像的资料页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224827863-1586380199.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：本章主要实现博客系统普通用户和管理员角色的个人信息编辑功能实现，此处实现没有什么技术亮点和难点，只要认真完成书本前述部分，这部分功能完全没有障碍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.有关书本119页示例11-8代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本部分代码在作者GitHub上没有示例代码，即如果要实现导入虚拟数据测试功能，只能自己一个代码一个代码敲。不过，这个也太多了点，一个字母出错就要改错&amp;gt;~&amp;lt;。从作者GitHub上直接克隆下来的代码，虽然没有示例代码，但是应该是作者更新代码后，在此处换了另一种实现方式，因为在项目文件中出现了一个新的fake.py文件，该文件中代码和示例11-8代码基本类似。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;书本117页、123页、125页和130页操作运行结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224937832-539515068.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213224945285-381657994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225012504-1424470533.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225022832-348881947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注：本章是对博客系统功能的扩展，主要实现用户编辑发送博客文章，其中还可以使用MarkDown来实现对文章的编辑。功能具体实现参照书本的代码讲解即可，基本不会遇到什么较难的问题。&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.书本137页和142页实际运行结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225106597-844719637.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225116691-820269679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225124941-843475027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 2.&lt;/span&gt;&lt;span&gt;操作完第12章代码后，如果选择用户退出，可能会出现以下bug：AttributeError: 'AnonymousUser' object has no attribute 'followed_posts'&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225134910-836740897.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解决办法，在models.py文件中找到AnonymousUser类，在这个类中添加一个方法，具体代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@property
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; followed_posts(self):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Post.query.join(Follow, Follow.followed_id ==&lt;span&gt; Post.author_id) \
        .filter(Follow.follower_id &lt;/span&gt;== None) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225217129-1609127107.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注：本章具体实现部分的难点是关注用户记录的数据库表的设计，即多对对关系会生成一张中间表。其它部分，按照书本上的代码来上机操作，基本不会遇到什么难点。&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.书本148页和151页实际上机运行结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225232879-1164923232.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225243207-1528089056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注:本章主要实现博客的用户评论功能，以及添加了一个协管员权限，具体实现没有什么难点，按照书本的代码上机操作即可。&lt;/span&gt;&lt;/p&gt;



&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.书本168页测试打印结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此处具体操作需要先在CMD中打开服务，才能获取api中数据。（PS：推荐一篇博客：&lt;a href=&quot;http://blog.csdn.net/huang5487378/article/details/60778293&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/huang5487378/article/details/60778293&lt;/a&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225311894-1428853282.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/927750/201712/927750-20171213225325847-878061718.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 13 Dec 2017 15:03:00 +0000</pubDate>
<dc:creator>舞动的心</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuzhen1995/p/8035393.html</dc:identifier>
</item>
<item>
<title>FastDFS教程IV-文件服务器集群搭建 - 无涯Ⅱ</title>
<link>http://www.cnblogs.com/wlandwl/p/fastdfsGroup.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wlandwl/p/fastdfsGroup.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;#user  nobody;  
worker_processes  1;  
  
#error_log  logs/error.log;  
#error_log  logs/error.log  notice;  
#error_log  logs/error.log  info;  
  
#pid        logs/nginx.pid;  
  
  
events {  
    worker_connections  1024;  
}  
  
  
http {  
    include       mime.types;  
    default_type  application/octet-stream;  
  
    #log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '  
    #                  '$status $body_bytes_sent &quot;$http_referer&quot; '  
    #                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';  
  
    #access_log  logs/access.log  main;  
  
    sendfile        on;  
    #tcp_nopush     on;  
  
    #keepalive_timeout  0;  
    keepalive_timeout  65;  
  
    #gzip  on;  
      
    upstream fastdfs_tracker {  
       server 10.63.0.154:8888 weight=1 max_fails=2 fail_timeout=30s;  
       server 10.63.0.155:8888 weight=1 max_fails=2 fail_timeout=30s;  
    }  
  
    server {  
        listen       8888;  
        server_name  localhost;  
  
        #charset koi8-r;  
  
        #access_log  logs/host.access.log  main;  
  
        location /fastdfs {  
           root html;  
           index index.html index.htm;  
           proxy_pass http://fastdfs_tracker/;  
           proxy_set_header Host $http_host;  
           proxy_set_header Cookie $http_cookie;  
           proxy_set_header X-Real-IP $remote_addr;  
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
           proxy_set_header X-Forwarded-Proto $scheme;  
           client_max_body_size 300m;  
        }  
  
        #error_page  404              /404.html;  
  
        # redirect server error pages to the static page /50x.html  
        #  
        error_page   500 502 503 504  /50x.html;  
        location = /50x.html {  
            root   html;  
        }  
    }  
}  &lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 13 Dec 2017 14:54:00 +0000</pubDate>
<dc:creator>无涯Ⅱ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wlandwl/p/fastdfsGroup.html</dc:identifier>
</item>
<item>
<title>实现一个简单的行编辑器（优化） - PyLearn</title>
<link>http://www.cnblogs.com/PyLearn/p/8035039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PyLearn/p/8035039.html</guid>
<description>&lt;h2 id=&quot;目录&quot;&gt;0.目录&lt;/h2&gt;
&lt;h4 id=&quot;前言&quot;&gt;1.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump1&quot;&gt;前言&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;使用方向键来实现光标左右移动&quot;&gt;2.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump2&quot;&gt;使用方向键来实现光标左右移动&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;按两下esc键退出程序&quot;&gt;3.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump3&quot;&gt;按两下ESC键退出程序&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;移动光标到行首&quot;&gt;4.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump4&quot;&gt;移动光标到行首&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;移动光标到行尾&quot;&gt;5.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump5&quot;&gt;移动光标到行尾&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;总代码&quot;&gt;6.&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8035039.html#jump6&quot;&gt;总代码&lt;/a&gt;&lt;/h4&gt;
&lt;h2 id=&quot;前言-1&quot;&gt;&lt;span id=&quot;jump1&quot;&gt;1.前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;之前已经写过一篇文章了：&lt;a href=&quot;http://www.cnblogs.com/PyLearn/p/8033109.html&quot;&gt;实现一个简单的行编辑器&lt;/a&gt;&lt;br/&gt;实现的功能有：&lt;br/&gt;&lt;strong&gt;&lt;em&gt;1.按下大小写字母或者数字的时候，显示在屏幕上&lt;br/&gt;2.可以使用退格键来删除前一个字符&lt;br/&gt;3.可以使用Del键来删除一行&lt;br/&gt;4.使用'['键来实现光标左移&lt;br/&gt;5.使用']'键来实现光标右移&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;但是还是有很多不完善的地方。本篇文章修改以及添加了以下功能：&lt;br/&gt;&lt;strong&gt;&lt;em&gt;1.使用方向键'←'键来实现光标左移&lt;br/&gt;2.使用方向键'→'键来实现光标右移&lt;br/&gt;3.按两下ESC键退出程序&lt;br/&gt;4.使用'['键来实现移动光标到行首&lt;br/&gt;5.使用']'键来实现移动光标到行尾&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;并且在之前的文章中，采用的是&lt;code&gt;putchar('\b');&lt;/code&gt;实现光标左移，使用输出当前字符实现光标右移。&lt;br/&gt;在这篇文章中，将更改这种方法。&lt;/p&gt;
&lt;h2 id=&quot;使用方向键来实现光标左右移动-1&quot;&gt;&lt;span id=&quot;jump2&quot;&gt;2.使用方向键来实现光标左右移动&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在之前的文章中提到过。方向键其实是一次性输入了三个字符才组成的。&lt;br/&gt;以下是对应关系：&lt;br/&gt;上：0x1b 0x5b 0x41&lt;br/&gt;下：0x1b 0x5b 0x42&lt;br/&gt;左：0x1b 0x5b 0x44&lt;br/&gt;右：0x1b 0x5b 0x43&lt;br/&gt;Del键：0x1b 0x5b 0x33 0x7e&lt;br/&gt;其中，0x41、0x42、0x43、0x44分别就是大写字母A、B、C、D。&lt;br/&gt;在本篇文章中不实现上和下的功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现左移光标&lt;/span&gt;
putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
putchar(&lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt;);
&lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现右移光标&lt;/span&gt;
putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
putchar(&lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在while循环中实现：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt; )
{
    c=getchar();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt; )
    {
        c=getchar();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt; &amp;amp;&amp;amp; p )
        {
            &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现左移光标&lt;/span&gt;
            putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt;);
            p--;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt; &amp;amp;&amp;amp; p &amp;lt; len )
        {
            &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现右移光标&lt;/span&gt;
            putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;);
            p++;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
    }
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里使用了一个叫做状态机的概念。&lt;br/&gt;有兴趣的可以去找找相关的资料了解一下。&lt;/p&gt;
&lt;h2 id=&quot;按两下esc键退出程序-1&quot;&gt;&lt;span id=&quot;jump3&quot;&gt;3.按两下ESC键退出程序&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;只需要在上面的程序中加入一段代码就行了。&lt;br/&gt;顺便将Del键也改一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt; )
{
    c=getchar();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt; )
    {
        c=getchar();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt; &amp;amp;&amp;amp; p )
        {
            &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现左移光标&lt;/span&gt;
            putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt;);
            p--;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt; &amp;amp;&amp;amp; p &amp;lt; len )
        {
            &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现右移光标&lt;/span&gt;
            putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
            putchar(&lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;);
            p++;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x33&lt;/span&gt; )
        {
            c=getchar();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x7e&lt;/span&gt; )
            {
                &lt;span class=&quot;co&quot;&gt;//删除键(Del):删除整行(user input delete)&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//1.从光标处移动到结尾&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( ++p &amp;lt;= len )
                    putchar(' ');
                &lt;span class=&quot;co&quot;&gt;//2.从结尾往前依次退格&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( --p )
                    fun_backspace();
                &lt;span class=&quot;co&quot;&gt;//3.len置0&lt;/span&gt;
                len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
    }
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt; )
    {
        &lt;span class=&quot;co&quot;&gt;//按了两次ESC键，退出程序&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    }
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;移动光标到行首-1&quot;&gt;&lt;span id=&quot;jump4&quot;&gt;4.移动光标到行首&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用'['键来实现移动光标到行首&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == '[' &amp;amp;&amp;amp; p )
{
    &lt;span class=&quot;co&quot;&gt;//使用'['移动光标到行首&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p-- )
        fun_left();
    p = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;移动光标到行尾-1&quot;&gt;&lt;span id=&quot;jump5&quot;&gt;5.移动光标到行尾&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用']'键来实现移动光标到行尾&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == ']' &amp;amp;&amp;amp; p &amp;lt; len )
{
    &lt;span class=&quot;co&quot;&gt;//使用']'移动光标到行尾&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p++ &amp;lt; len )
        fun_right();
    p = len;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总代码-1&quot;&gt;&lt;span id=&quot;jump6&quot;&gt;6.总代码&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 设计完成一个行编辑器&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 能够接受用户输入，能倒退删除，插入，移动光标等&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#include   &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#include   &amp;lt;termios.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ot&quot;&gt;#define oops(s, x) { perror(s); exit(x); }&lt;/span&gt;

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_set(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; termios *info, &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; set);&lt;span class=&quot;co&quot;&gt;//设置回显位,设置缓冲&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_backspace();&lt;span class=&quot;co&quot;&gt;//实现退格功能&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_left();&lt;span class=&quot;co&quot;&gt;//实现光标左移&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_right();&lt;span class=&quot;co&quot;&gt;//实现光标右移&lt;/span&gt;

&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; c;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, j;

    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; termios info;
    fun_set( &amp;amp;info, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; );&lt;span class=&quot;co&quot;&gt;//关掉回显位,关掉缓冲&lt;/span&gt;
    
    &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;];&lt;span class=&quot;co&quot;&gt;//保存输出的字符&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; p = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;//当前位置&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;//总长度&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( ( c=getchar() ) != EOF )
    {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;( isalnum(c) )
        {
            &lt;span class=&quot;co&quot;&gt;//isalnum()函数:如果c是一个数字或字母返回非0值，否则为0&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//user input a letter or a number&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//1.将当前位置之后的值依次后移&lt;/span&gt;
            j = ++len;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( j-- &amp;gt; p )
                str[j] = str[j&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;];
            str[p] = c;
            j = len - p - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;//光标要移动的距离&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//2.从当前位置开始重新输出数组&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p &amp;lt; len )
                putchar(str[p++]);
            &lt;span class=&quot;co&quot;&gt;//3.将光标移动到之前的位置&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( j-- &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; p-- )
                fun_left();
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;( c == &lt;span class=&quot;bn&quot;&gt;0x7f&lt;/span&gt; &amp;amp;&amp;amp; p )
        {
            &lt;span class=&quot;co&quot;&gt;//退格键(user input a backspace)&lt;/span&gt;
            j = len - p;&lt;span class=&quot;co&quot;&gt;//光标要移动的距离&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//1.将当前位置之后的值依次前移&lt;/span&gt;
            putchar(&lt;span class=&quot;ch&quot;&gt;'\b'&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p &amp;lt; len )
            {
                str[p&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;] = str[p];
                putchar(str[p]);
                p++;
            }
            &lt;span class=&quot;co&quot;&gt;//2.将最后一个元素删除&lt;/span&gt;
            putchar(' ');
            putchar(&lt;span class=&quot;ch&quot;&gt;'\b'&lt;/span&gt;);
            len--;
            p--;
            &lt;span class=&quot;co&quot;&gt;//3.将光标移动到之前的位置&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( j-- &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; p-- )
                fun_left();
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt; )
        {
            c=getchar();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt; )
            {
                c=getchar();
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt; &amp;amp;&amp;amp; p )
                {
                    &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现左移光标&lt;/span&gt;
                    fun_left();
                    p--;
                }
                &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt; &amp;amp;&amp;amp; p &amp;lt; len )
                {
                    &lt;span class=&quot;co&quot;&gt;//连续输出三个字符实现右移光标&lt;/span&gt;
                    fun_right();
                    p++;
                }
                &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x33&lt;/span&gt; )
                {
                    c=getchar();
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x7e&lt;/span&gt; )
                    {
                        &lt;span class=&quot;co&quot;&gt;//删除键(Del):删除整行(user input delete)&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;//1.从光标处移动到结尾&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( ++p &amp;lt;= len )
                            putchar(' ');
                        &lt;span class=&quot;co&quot;&gt;//2.从结尾往前依次退格&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( --p )
                            fun_backspace();
                        &lt;span class=&quot;co&quot;&gt;//3.len置0&lt;/span&gt;
                        len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                    }
                    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
                }
                &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == &lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt; )
            {
                &lt;span class=&quot;co&quot;&gt;//按了两次ESC键，退出程序&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == '[' &amp;amp;&amp;amp; p )
        {
            &lt;span class=&quot;co&quot;&gt;//使用'['移动光标到行首&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p-- )
                fun_left();
            p = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( c == ']' &amp;amp;&amp;amp; p &amp;lt; len )
        {
            &lt;span class=&quot;co&quot;&gt;//使用']'移动光标到行尾&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;( p++ &amp;lt; len )
                fun_right();
            p = len;
        }
    }

    fun_set( &amp;amp;info, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; );&lt;span class=&quot;co&quot;&gt;//打开回显位,打开缓冲&lt;/span&gt;
}

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_set(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; termios *info, &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; set)
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( tcgetattr(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, info) == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; )          &lt;span class=&quot;co&quot;&gt;/* get attribs   */&lt;/span&gt;
        oops(&lt;span class=&quot;st&quot;&gt;&quot;tcgettattr&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;co&quot;&gt;/*set为1,打开回显位,打开缓冲;set为0,关掉回显位,关掉缓冲*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;( set )
    {
        (*info).c_lflag |= ECHO;    &lt;span class=&quot;co&quot;&gt;/* turn on bit   */&lt;/span&gt;
        (*info).c_lflag &amp;amp;= ICANON;  &lt;span class=&quot;co&quot;&gt;/* turn on bit   */&lt;/span&gt;
    }
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
    {
        (*info).c_lflag &amp;amp;= ~ECHO;   &lt;span class=&quot;co&quot;&gt;/* turn off bit   */&lt;/span&gt;
        (*info).c_lflag &amp;amp;= ~ICANON; &lt;span class=&quot;co&quot;&gt;/* turn off bit   */&lt;/span&gt;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( tcsetattr(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, TCSANOW, info) == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; ) &lt;span class=&quot;co&quot;&gt;/* set attribs    */&lt;/span&gt;
        oops(&lt;span class=&quot;st&quot;&gt;&quot;tcsetattr&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
}

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_backspace()
{
    putchar(&lt;span class=&quot;ch&quot;&gt;'\b'&lt;/span&gt;);
    putchar(' ');
    putchar(&lt;span class=&quot;ch&quot;&gt;'\b'&lt;/span&gt;);
}

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_left()
{
    putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
    putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
    putchar(&lt;span class=&quot;bn&quot;&gt;0x44&lt;/span&gt;);
}

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; fun_right()
{
    putchar(&lt;span class=&quot;bn&quot;&gt;0x1b&lt;/span&gt;);
    putchar(&lt;span class=&quot;bn&quot;&gt;0x5b&lt;/span&gt;);
    putchar(&lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 13 Dec 2017 13:41:00 +0000</pubDate>
<dc:creator>PyLearn</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PyLearn/p/8035039.html</dc:identifier>
</item>
<item>
<title>数据库分库分表事务解决方案 - atheva</title>
<link>http://www.cnblogs.com/lizo/p/8035036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lizo/p/8035036.html</guid>
<description>&lt;p&gt;随着时间和业务的发展，数据库中表的数据量会越来越大，相应地，数据操作，增删改查的开销也会越来越大。因此，把其中一些大表进行拆分到多个数据库中的多张表中。&lt;br/&gt;另一方面，在分库分表以后还需要保证分库分表的和主库的事务一致性&lt;/p&gt;

&lt;h2 id=&quot;id-分库分表基本方案-2.1事务问题&quot;&gt;2.1 事务问题&lt;/h2&gt;
&lt;p&gt;由于分库分表之后，新表在另外一个数据库中，如何保证主库和分库的事务性是必须要解决的问题。通过在主库中创建一个流水表，把操作数据库的逻辑映射为一条流水记录。当整个大事务执行完毕后（流水被插入到流水表）,然后通过其他方式来执行这段流水，保证最终一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214212504-2009950089.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-分库分表基本方案-2.2流水&quot;&gt;2.2 流水&lt;/h2&gt;
&lt;p&gt;上面通过在数据库中创建一张流水表，使用一条流水记录代表一个业务处理逻辑，因此，一个流水一定是能最终正确执行的.因此，当把一段业务代码提取流水中必须要考虑到:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;流水延迟处理性。流水不是实时处理的，而是用过流水执行器来异步执行的。因此，如果在原有逻辑中，需要特别注意后续流程对该流水是不是有实时依赖性（例如后续业务逻辑中会使用流水结果来做一些计算等）。&lt;/li&gt;
&lt;li&gt;流水处理无序性。保证即使后生成的流水先执行，也不能出现问题。&lt;/li&gt;
&lt;li&gt;流水最终成功性。对每条插入的流水，该条流水一定要保证能执行成功&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此，提取流水的时候:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;流水处理越简单越好&lt;/li&gt;
&lt;li&gt;流失处理依赖越少越好&lt;/li&gt;
&lt;li&gt;提取的流水在该业务逻辑中无实时性依赖&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;id-分库分表基本方案-2.3流水处理器&quot;&gt;2.3 流水处理器&lt;/h2&gt;
&lt;p&gt;流水处理器即要保证流水处理尽可能处理快，又能保证流水最终能执行成功。&lt;/p&gt;
&lt;p&gt;设想一个场景：当出现某一条流水处理失败，如果流失执行器要等当前流水执行成功才继续往后执行，那么会影响后续流水的执行，更严重的是一直卡在当条记录，导致整个系统出现问题&lt;/p&gt;
&lt;p&gt;因此，流水执行器中设置2个任务：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一个任务,流水处理任务，已最快的速度执行流水，如果流水处理失败了，也不影响后面流水处理&lt;/li&gt;
&lt;li&gt;第二个任务,流水校验任务，这个任务就是顺序检查流水记录，保证所有流水都执行成功，如果失败，进行重试，多次重试失败以后发出告警以让人工介入处理。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214224816-317273061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-分库分表基本方案-2.4如何表示流水处理完成&quot;&gt;2.4 如何表示流水处理完成&lt;/h2&gt;
&lt;p&gt;因为流水表是放在原数据库中，而流水处理完成后是操作分库，如何保证流水状态的更新和分库也是在一个事务的？&lt;/p&gt;
&lt;p&gt;在分库中创建一个流水表，当流失处理完成以后，不是去更新老表状态，而是插入分库流水表中，&lt;/p&gt;
&lt;p&gt;这样只要比较原数据库和分库的流水，就能流水处理结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214232472-250505912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果所有流水处理成功，那么主库中的流水表记录，分库中都存在对应的&lt;/p&gt;

&lt;p&gt;流水处理器其实不包含任何业务相关的处理逻辑，核心功能就是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通知业务接入方何时处理什么样的流水&lt;/li&gt;
&lt;li&gt;检验流水执行的成功&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;注：流水执行器并不知道该流水表示什么逻辑，具体需要业务系统去识别后去执行相对应业务逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214310426-1159357130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-分库分表基本方案-3.1流水执行任务&quot;&gt;3.1 流水执行任务&lt;/h2&gt;
&lt;p&gt;流水处理调度任务就是通过扫描待处理的流水，然后通知业务系统该执行哪一条流水。&lt;/p&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214317207-598802743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-分库分表基本方案-3.2流水校验任务&quot;&gt;3.2 流水校验任务&lt;/h2&gt;
&lt;p&gt;流水校验任务就是要比较主库和分库中的流水记录，对执行未成功的流水通知业务系统进行重新处理，如果多次重试失败则发出告警。&lt;/p&gt;
&lt;p&gt;流程示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055208/201712/1055208-20171213214327301-1569000161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 13 Dec 2017 13:40:00 +0000</pubDate>
<dc:creator>atheva</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lizo/p/8035036.html</dc:identifier>
</item>
<item>
<title>NodeJS爬虫入门 - msay</title>
<link>http://www.cnblogs.com/mingjiatang/p/8034953.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mingjiatang/p/8034953.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;1. 写在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;往常都是利用 Python/.NET 语言实现爬虫，然现在作为一名前端开发人员，自然需要熟练 NodeJS。下面利用 NodeJS 语言实现一个糗事百科的爬虫。另外，本文使用的部分代码是 es6 语法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现该爬虫所需要的依赖库如下。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;request: 利用 get 或者 post 等方法获取网页的源码。&lt;/li&gt;
&lt;li&gt;cheerio: 对网页源码进行解析，获取所需数据。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文首先对爬虫所需依赖库及其使用进行介绍，然后利用这些依赖库，实现一个针对糗事百科的网络爬虫。&lt;/p&gt;
&lt;h2 id=&quot;request-库&quot;&gt;2. request 库&lt;/h2&gt;
&lt;p&gt;request 是一个轻量级的 http 库，功能十分强大且使用简单。可以使用它实现 Http 的请求，并且支持 HTTP 认证， 自定请求头等。下面对 request 库中一部分功能进行介绍。&lt;/p&gt;
&lt;p&gt;安装 request 模块如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install request&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在安装好 request 后，即可进行使用，下面利用 request 请求一下百度的网页。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'request'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;req&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'http://www.baidu.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; (error&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; body) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;error &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(body)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在没有设置 options 参数时，request 方法默认是 get 请求。而我喜欢利用 request 对象的具体方法，使用如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'http://www.baidu.com'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;(err&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; body) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;err &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(body)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而很多时候，直接去请求一个网址所获取的 html 源码，往往得不到我们需要的信息。一般情况下，需要考虑到请求头和网页编码。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;网页的请求头&lt;/li&gt;
&lt;li&gt;网页的编码&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面介绍在请求的时候如何添加网页请求头以及设置正确的编码。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;Host&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;www.zhihu.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;Upgrade-Insecure-Requests&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;encoding &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; (err&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; body)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;err)
       &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(body)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置 options 参数, 添加 &lt;code&gt;headers&lt;/code&gt; 属性即可实现请求头的设置；添加 &lt;code&gt;encoding&lt;/code&gt; 属性即可设置网页的编码。需要注意的是，若 &lt;code&gt;encoding：null&lt;/code&gt; ，那么 get 请求所获取的内容则是一个 &lt;code&gt;Buffer&lt;/code&gt; 对象，即 body 是一个 Buffer 对象。&lt;/p&gt;
&lt;p&gt;上面介绍的功能足矣满足后面的所需了，更多功能请参看官网的文档 &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;request&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cheerio-库&quot;&gt;3. cheerio 库&lt;/h2&gt;
&lt;p&gt;cheerio 是一款服务器端的 Jquery，以轻、快、简单易学等特点被开发者喜爱。有 Jquery 的基础后再来学习 cheerio 库非常轻松。它能够快速定位到网页中的元素，其规则和 Jquery 定位元素的方法是一样的；它也能以一种非常方便的形式修改 html 中的元素内容，以及获取它们的数据。下面主要针对 cheerio 快速定位网页中的元素，以及获取它们的内容进行介绍。&lt;/p&gt;
&lt;p&gt;首先安装 cheerio 库&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install cheerio&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面先给出一段代码，再对代码进行解释 cheerio 库的用法。对博客园首页进行分析，然后提取每一页中文章的标题。&lt;/p&gt;
&lt;p&gt;首先对博客园首页进行分析。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/531939/201712/531939-20171213212238441-1714218637.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对 html 源代码进行分析后，首先通过 &lt;code&gt;.post_item&lt;/code&gt; 获取所有标题，接着对每一个 &lt;code&gt;.post_item&lt;/code&gt; 进行分析，使用 &lt;code&gt;a.titlelnk&lt;/code&gt; 即可匹配每个标题的 a 标签。下面通过代码进行实现。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'request'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; cheerio &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'cheerio'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://www.cnblogs.com/'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; (err&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; body) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;err &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; cnblogHtmlStr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; body&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; $ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cheerio&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(cnblogHtmlStr)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.post_item'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;((index&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ele) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(ele).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'a.titlelnk'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titleText &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;title&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titletUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;title&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'href'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(titleText&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; titletUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，cheerio 库也支持链式调用，上面的代码也可改写成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; cnblogHtmlStr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; body&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; $ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cheerio&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(cnblogHtmlStr)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titles &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.post_item'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'a.titlelnk'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;titles&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;((index&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ele) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titleText &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(ele).&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titletUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(ele).&lt;span class=&quot;at&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'href'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(titleText&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; titletUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码非常简单，就不再用文字进行赘述了。下面总结一点自己认为比较重要的几点。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用 &lt;code&gt;find()&lt;/code&gt; 方法获取的节点集合 A，若再次以 A 集合中的元素为根节点定位它的子节点以及获取子元素的内容与属性，需对 A 集合中的子元素进行 &lt;code&gt;$(A[i])&lt;/code&gt; 包装，如上面的&lt;code&gt;$(ele)&lt;/code&gt; 一样。&lt;/li&gt;
&lt;li&gt;在上面代码中使用 &lt;code&gt;$(ele)&lt;/code&gt; ，其实还可以使用 &lt;code&gt;$(this)&lt;/code&gt; 但是由于我使用的是 es6 的箭头函数，因此改变了 &lt;code&gt;each&lt;/code&gt; 方法中回调函数的 this 指针，因此，我使用 &lt;code&gt;$(ele)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;cheerio 库也支持链式调用，如上面的 &lt;code&gt;$('.post_item').find('a.titlelnk')&lt;/code&gt; ，需要注意的是，cheerio 对象 A 调用方法 &lt;code&gt;find()&lt;/code&gt;，如果 A 是一个集合，那么 A 集合中的每一个子元素都调用 &lt;code&gt;find()&lt;/code&gt; 方法，并放回一个结果结合。如果 A 调用 &lt;code&gt;text()&lt;/code&gt; ，那么 A 集合中的每一个子元素都调用 &lt;code&gt;text()&lt;/code&gt; 并返回一个字符串，该字符串是所有子元素内容的合并（直接合并，没有分隔符）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后在总结一些我比较常用的方法。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;first()&lt;/li&gt;
&lt;li&gt;last()&lt;/li&gt;
&lt;li&gt;children([selector]): 该方法和 find 类似，只不过该方法只搜索子节点，而 find 搜索整个后代节点。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;关于更多 cheerio 库的用法，请参考文档 &lt;a href=&quot;https://www.npmjs.com/package/cheerio&quot;&gt;cheerio&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;糗事百科爬虫&quot;&gt;4. 糗事百科爬虫&lt;/h2&gt;
&lt;p&gt;通过上面对 &lt;code&gt;request&lt;/code&gt; 和 &lt;code&gt;cheerio&lt;/code&gt; 类库的介绍，下面利用这两个类库对糗事百科的页面进行爬取。&lt;/p&gt;
&lt;p&gt;1、在项目目录中，新建 &lt;code&gt;httpHelper.js&lt;/code&gt; 文件，通过 url 获取糗事百科的网页源码，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//爬虫&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'request'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getHtml&lt;/span&gt;(url)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;((resolve&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; reject) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;st&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;st&quot;&gt;&quot;Referer&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://www.qiushibaike.com/&quot;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;encoding &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; (err&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; body)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(err)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(body)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;exports&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getHtml&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; getHtml&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、在项目目录中，新建一个 &lt;code&gt;Splider.js&lt;/code&gt; 文件，分析糗事百科的网页代码，提取自己需要的信息，并且建立一个逻辑通过更改 url 的 id 来爬取不同页面的数据。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; cheerio &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'cheerio'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; httpHelper &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./httpHelper'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getQBJok&lt;/span&gt;(htmlStr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; $ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cheerio&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(htmlStr)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; jokList &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'#content-left'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; rst &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;jokList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;((i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; item)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; node &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(item)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; titleNode &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'h2'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; titleNode &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;titleNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;trim&lt;/span&gt;() : &lt;span class=&quot;st&quot;&gt;'匿名用户'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.content span'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;trim&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; likeNumber &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'i[class=number]'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;trim&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;rst&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;title &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;content &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; content&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;likeNumber &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; likeNumber
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; rst&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;splider&lt;/span&gt;(index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`https://www.qiushibaike.com/8hr/page/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; htmlStr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;httpHelper&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getHtml&lt;/span&gt;(url)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; rst &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getQBJok&lt;/span&gt;(htmlStr)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; rst&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;splider&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在获取糗事百科网页信息的时候，首先在浏览器中对源码进行分析，定位到自己所需要标签，然后提取标签的文本或者属性值，这样就完成了网页的解析。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Splider.js&lt;/code&gt; 文件入口是 &lt;code&gt;splider&lt;/code&gt; 方法，首先根据传入该方法的 index 索引，构造糗事百科的 url，接着获取该 url 的网页源码，最后将获取的源码传入 &lt;code&gt;getQBJok&lt;/code&gt; 方法，进行解析，本文只解析每条文本笑话的作者、内容以及喜欢个数。&lt;/p&gt;
&lt;p&gt;直接运行 &lt;code&gt;Splider.js&lt;/code&gt; 文件，即可爬取第一页的笑话信息。然后可以更改 &lt;code&gt;splider&lt;/code&gt; 方法的参数，实现抓取不同页面的信息。&lt;/p&gt;
&lt;p&gt;在上面已有代码的基础上，使用 &lt;code&gt;koa&lt;/code&gt; 和 &lt;code&gt;vue2.0&lt;/code&gt; 搭建一个浏览文本的页面，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/531939/201712/531939-20171213212250801-1303176560.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;源码已上传到 github 上。下载地址：&lt;a href=&quot;https://github.com/StartAction/SpliderQB&quot; class=&quot;uri&quot;&gt;https://github.com/StartAction/SpliderQB&lt;/a&gt; ;&lt;/p&gt;
&lt;p&gt;项目运行依赖 &lt;code&gt;node v7.6.0&lt;/code&gt; 以上， 首先从 Github 上面克隆整个项目。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/StartAction/SpliderQB.git&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;克隆之后，进入项目目录，运行下面命令即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node app.js&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;5. 总结&lt;/h2&gt;
&lt;p&gt;通过实现一个完整的爬虫功能，加深自己对 &lt;code&gt;Node&lt;/code&gt; 的理解，且实现的部分语言都是使用 &lt;code&gt;es6&lt;/code&gt; 的语法，让自己加快对 &lt;code&gt;es6&lt;/code&gt; 语法的学习进度。另外，在这次实现中，遇到了 &lt;code&gt;Node&lt;/code&gt; 的异步控制的知识，本文是采用的是 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字，也是我最喜欢的一种，然而在 &lt;code&gt;Node&lt;/code&gt; 中，实现异步控制有好几种方式。关于具体的方式以及原理，有时间再进行总结。&lt;/p&gt;
</description>
<pubDate>Wed, 13 Dec 2017 13:25:00 +0000</pubDate>
<dc:creator>msay</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mingjiatang/p/8034953.html</dc:identifier>
</item>
<item>
<title>浅析文本挖掘（jieba模块的应用） - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/8034023.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/8034023.html</guid>
<description>&lt;p&gt;
&lt;h2&gt;一，文本挖掘&lt;/h2&gt;
&lt;h3&gt;1.1，什么是文本挖掘&lt;/h3&gt;
&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;58&quot;&gt;
&lt;p&gt;文本挖掘是指从大量文本数据中抽取事先未知的，可理解的，最终可用的知识的过程，同时运用这些知识更好的组织信息以便将来参考&lt;/p&gt;
&lt;h3&gt;1.2，文本挖掘基本流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201712/1226410-20171213170407754-1468328349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;收集数据&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;数据集。如果是已经被人做成数据集了，这就省去了很多麻烦事&lt;/li&gt;
&lt;li&gt;抓取。这个是 Python 做得最好的事情，优秀的包有很多，比如 scrapy，beautifulsoup等等。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;预处理（对这里的高质量讨论结果的修改，下面的顺序&lt;span&gt;仅限英文&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;去掉抓来的数据中不需要的部分，比如 HTML TAG，只保留文本。结合 beautifulsoup 和正则表达式就可以了。pattern.web 也有相关功能。&lt;/li&gt;
&lt;li&gt;处理编码问题。没错，即使是英文也需要处理编码问题！由于 Python2 的历史原因，不得不在编程的时候自己处理。英文也存在 unicode 和 utf-8 转换的问题，中文以及其他语言就更不用提了。这里有一个讨论，可以参考，当然网上也有很多方案，找到一个适用于自己的最好。&lt;/li&gt;
&lt;li&gt;将文档分割成句子。&lt;/li&gt;
&lt;li&gt;将句子分割成词。专业的叫法是 tokenize。&lt;/li&gt;
&lt;li&gt;拼写错误纠正。pyenchant可以帮你！&lt;/li&gt;
&lt;li&gt;POS Tagging。nltk 是不二选择，还可以使用 pattern。&lt;/li&gt;
&lt;li&gt;去掉标点符号。使用正则表达式就可以。&lt;/li&gt;
&lt;li&gt;去掉长度过小的单词。len&amp;lt;3 的是通常选择。&lt;/li&gt;
&lt;li&gt;去掉 non-alpha 词。同样，可以用正则表达式完成 \W 就可以。&lt;/li&gt;
&lt;li&gt;转换成小写。&lt;/li&gt;
&lt;li&gt;去掉停用词。Matthew L. Jockers 提供了一份比机器学习和自然语言处理中常用的停词表更长的停词表。中文的词停表 可以参考这个。&lt;/li&gt;
&lt;li&gt;lemmatization/stemming。nltk 里面提供了好多种方式，推荐用 wordnet 的方式，这样不会出现把词过分精简，导致词丢掉原型的结果，如果实在不行，也用 snowball 吧，别用 porter，porter 的结果我个人太难接受了，弄出结果之后都根本不知道是啥词了。MBSP也有相关功能。&lt;/li&gt;
&lt;li&gt;重新去掉长度过小的词。是的，再来一遍。&lt;/li&gt;
&lt;li&gt;重新去停词。上面这两部完全是为了更干净。&lt;/li&gt;
&lt;li&gt;到这里拿到的基本上是非常干净的文本了。如果还有进一步需求，还可以根据 POS 的结果继续选择某一种或者几种词性的词。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1.3，文本挖掘的应用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;基于内容的推荐，例如基于小说内容相似度的小说的推荐&lt;/li&gt;
&lt;li&gt;信息自动分类&lt;/li&gt;
&lt;li&gt;信息自动抽取&lt;/li&gt;
&lt;li&gt;自动问答、机器翻译&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二，jieba模块（做文本挖掘最好的模块就是jieba模块，所以下面主要用jieba模块。）&lt;/h2&gt;
&lt;/div&gt;
&lt;h3&gt;2.1，jieba模块的安装&lt;/h3&gt;
&lt;p&gt;安装在cmd中直接输入如下内容，即可安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install jieba
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2，文件结构与解析情况&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201712/1226410-20171213171225097-857570191.png&quot; alt=&quot;&quot; width=&quot;474&quot; height=&quot;171&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以打开jieba模块的安装包，然后注意到上面的图片，里面有一个dict.txt文件，这个就是jieba模块的基础字典，也就是其分词的基础，打开字典后有如下图，分别表示词语，词频，词性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201712/1226410-20171213171524410-1458631534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中对于词性的对照具体参考：http://www.360doc.cn/article/597197_346584378.html&lt;/p&gt;
&lt;h3&gt;2.3，分词模式&lt;/h3&gt;
&lt;p&gt;在jieba分词中支持三种分词模式（其中默认模式为精准模式）&lt;/p&gt;
&lt;h4&gt;————2.3.1精准模式：试图将句子最精确的切开，适合文本分析&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import jieba&lt;br/&gt;sentence = &quot;李飞非常喜欢古城西安&quot;
#精准模式
words1 &lt;/span&gt;= jieba.cut(sentence,cut_all=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words1:
    print(item)
print(words1)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;李飞&lt;br/&gt;非常&lt;br/&gt;喜欢&lt;br/&gt;古城&lt;br/&gt;西安&lt;br/&gt;&amp;lt;generator object Tokenizer.cut at 0x000001A006AB2FC0&amp;gt;&lt;br/&gt;----------------------------&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;————2.3.2全模式：把句子中所有的可能成词语都扫描出来，速度非常快，但是不能解决歧义&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#开启全模式
words &lt;/span&gt;= jieba.cut(sentence,cut_all=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words:
    print(item)
print(words)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;李&lt;br/&gt;飞&lt;br/&gt;非常&lt;br/&gt;喜欢&lt;br/&gt;古城&lt;br/&gt;城西&lt;br/&gt;西安&lt;br/&gt;&amp;lt;generator object Tokenizer.cut at 0x000001A00697B620&amp;gt;&lt;br/&gt;----------------------------&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;————2.3.3搜索引擎模式 ：在精准模式的基础上，对长词再次切分，提高招呼率，适合用于搜索引擎分词&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#搜索引擎模式
words3 &lt;/span&gt;=&lt;span&gt; jieba.cut_for_search(sentence)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words3:
    print(item)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;李飞
非常
喜欢
古城
西安
&lt;/span&gt;&amp;lt;generator &lt;span&gt;object&lt;/span&gt; Tokenizer.cut at &lt;span&gt;0x000001A006AB2FC0&lt;/span&gt;&amp;gt;
----------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; ————默认情况下，支持的是精确模式（下面举个例子）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#默认的话  是使用精准模式
words4 &lt;/span&gt;=&lt;span&gt; jieba.cut(sentence)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words4:
    print(item)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;李飞
非常
喜欢
古城
西安
&lt;/span&gt;&amp;lt;generator &lt;span&gt;object&lt;/span&gt; Tokenizer.cut at &lt;span&gt;0x000001A006AB2FC0&lt;/span&gt;&amp;gt;
----------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4，查看词性（词性标注）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;常见的词性如下：&lt;/strong&gt;&lt;br/&gt;a:形容词
c:连词
d:副词
e:叹词
f:方位词
i:成语
m:数词
n:名词
nr:人名
ns:地名
nt:机构团体
nz:其他专有名词
p:介词
r:代词
t:时间
u:助词
v:动词
vn:名动词
w:标点符号
un:未知词语&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
sentence2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;西安交通大学是一个很好的大学&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
words6 &lt;/span&gt;=&lt;span&gt;jieba.posseg.cut(sentence2)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words6:
    print(item.flag&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+item.word)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
----------------------------&lt;span&gt;
nt&lt;/span&gt;---------&lt;span&gt;西安交通大学
v&lt;/span&gt;---------&lt;span&gt;是
m&lt;/span&gt;---------&lt;span&gt;一个
a&lt;/span&gt;---------&lt;span&gt;很好
uj&lt;/span&gt;---------&lt;span&gt;的
n&lt;/span&gt;---------大学
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5，词典加载（即自定义添加词典）&lt;/h3&gt;
&lt;p&gt;在分词过程中我们会遇到一些jieba自带的词典中没有的词这时候我们需要不断完善dict.txt中的内容，比如随意构造“仲英学院是一个宿舍的名称”&lt;/p&gt;
&lt;p&gt;我们在添加字典的时候注意将txtx文档保存为utf-8编码格式，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201712/1226410-20171213190651019-1224038936.png&quot; alt=&quot;&quot; width=&quot;522&quot; height=&quot;74&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不然会出现错误如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
UnicodeDecodeError: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; codec can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t decode byte 0xd6 in position 0: invalid continuation byte&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt; raise ValueError('dictionary file %s must be utf-8' % f_name)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; ValueError: dictionary file D:\python3\Lib\site-packages\jieba/dict2.txt must be utf-8&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 举个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import jieba.posseg

sentences &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;仲英学院是一个宿舍的名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
words7 &lt;/span&gt;=&lt;span&gt;jieba.posseg.cut(sentences)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words7:
    print(item.flag&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;item.word)

jieba.load_userdict(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\python3\Lib\site-packages\jieba/dict2.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
words7 &lt;/span&gt;=&lt;span&gt;jieba.posseg.cut(sentences)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words7:
    print(item.flag&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+item.word)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
nr---------&lt;span&gt;仲英
n&lt;/span&gt;---------&lt;span&gt;学院
v&lt;/span&gt;---------&lt;span&gt;是
m&lt;/span&gt;---------&lt;span&gt;一个
n&lt;/span&gt;---------&lt;span&gt;宿舍
uj&lt;/span&gt;---------&lt;span&gt;的
n&lt;/span&gt;---------&lt;span&gt;名称
&lt;/span&gt;------------------------------&lt;span&gt;
ns&lt;/span&gt;---------&lt;span&gt;仲英
n&lt;/span&gt;---------&lt;span&gt;学院
v&lt;/span&gt;---------&lt;span&gt;是
m&lt;/span&gt;---------&lt;span&gt;一个
n&lt;/span&gt;---------&lt;span&gt;宿舍
uj&lt;/span&gt;---------&lt;span&gt;的
n&lt;/span&gt;---------名称
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6，更改词频&lt;/h3&gt;
&lt;div readability=&quot;87.5&quot;&gt;
&lt;h4&gt;&lt;span&gt;——2.6.1只能调高词频，不能调低词频&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;格式如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
add_word(word, freq=None, tag=&lt;span&gt;None)
suggest_freq(segment, tune&lt;/span&gt;=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#更改词频
import jieba
sentence8 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我喜欢上海东方明珠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
words8 &lt;/span&gt;=&lt;span&gt; jieba.cut(sentence8)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words8:
    print(item)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
jieba.add_word(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上海东方&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
words9 &lt;/span&gt;=&lt;span&gt; jieba.cut(sentence8)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words9:
    print(item)
print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
jieba.suggest_freq(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上海东方&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,tune =&lt;span&gt; True)
words10 &lt;/span&gt;=&lt;span&gt; jieba.cut(sentence8)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words10:
    print(item)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;我
喜欢
上海
东方明珠
&lt;/span&gt;----------------&lt;span&gt;
我
喜欢
上海
东方明珠
&lt;/span&gt;----------------&lt;span&gt;
我
喜欢
上海
东方明珠&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;————2.6.2只能降低词频，不能调高词频&lt;/h4&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;del_word(word)
suggest_freq((&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;segmentPart1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;segmentPart2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
jieba.suggest_freq((&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;东方&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;明珠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),True)
words11 &lt;/span&gt;=&lt;span&gt; jieba.cut(sentence8)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words11:
    print(item)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
----------------&lt;span&gt;
我
喜欢
上海东方
明珠&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.7，分词分析&lt;/h3&gt;
&lt;p&gt;进一步我们需要对文本信息进行相关分析，如返回词语所在位置、返回关键词等等。&lt;/p&gt;
&lt;h4&gt;————2.7.1提取文本中的关键词&lt;/h4&gt;
&lt;p&gt;其结果是结合文中出现的词频与字典中的词频进行排序&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import jieba.analyse
sentence8 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我喜欢上海东方明珠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
sentence9 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我非常喜欢上海东方明珠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

tag1 &lt;/span&gt;= jieba.analyse.extract_tags(sentence8,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
tag2 &lt;/span&gt;= jieba.analyse.extract_tags(sentence9,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
print(tag1)
print(tag2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;东方明珠&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;喜欢&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;东方明珠&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;喜欢&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;非常&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;————2.7.2返回词语的所在位置&lt;/h4&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#返回词语的位置
import jieba.analyse

sentence8 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我喜欢上海东方明珠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
words10 &lt;/span&gt;=&lt;span&gt; jieba.tokenize(sentence8)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words10:
    print(item)
words11 &lt;/span&gt;= jieba.tokenize(sentence8,mode=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words11:
    print(item)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;喜欢&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;东方明珠&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;----------------&lt;span&gt;
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;喜欢&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;东方&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;方明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;明珠&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;东方明珠&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回的数据格式为：[('词语',开始位置,结束位置),...,()]&lt;/p&gt;
&lt;h3&gt; 三，实战&lt;/h3&gt;
&lt;h4&gt; ————3.1我们先做一个小例子，分析一下血尸的词频&lt;/h4&gt;
&lt;p&gt;血尸的txt文件内容我传到下面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b013aa2c-1144-482f-af23-e45fc8a2d957&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b013aa2c-1144-482f-af23-e45fc8a2d957&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b013aa2c-1144-482f-af23-e45fc8a2d957&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;50年前，长沙镖子岭。

　　四个土夫子正蹲在一个土丘上，所有人都不说话，直勾勾地盯着地上那把洛阳铲。

　　铲子头上带着刚从地下带出的旧土，离奇的是，这一坏土正不停地向外渗着鲜红的液体，就像刚刚在血液里蘸过一样。http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;seputu.com/&lt;/span&gt;
&lt;span&gt;
　　“这下子麻烦大喽。”老烟头把他的旱烟在地上敲了敲，接着道，“下面是个血尸嘎，弄不好我们这点儿当当，都要撂在下面噢。”

　　“下不下去喃？要得要不得，一句话，莫七里八里的！”独眼的小伙子说，“你说你个老人家腿脚不方便，就莫下去了，我和我弟两个下去，管他什么东西，直接给他来一梭子。”

　　老烟头不怒反笑，对边上的一个大胡子说：“你屋里二伢子海式撩天的，指不定什么时候就给翻盖子了，你得多教育教育，咱这买卖，不是有只匣子炮就能喔荷西天。”

　　那大胡子瞪了那年轻人一眼：“你崽子，怎么这么跟老太爷讲话，老太爷淘土的时候你他妈的还在你娘肚子里吃屎咧。”

　　“我咋说……说错了，老祖宗不说了嘛，那血尸就是个好东西，下面宝贝肯定不少，不下去，走嘎一炉锅汤。”

　　“你还敢顶嘴！”大胡子举手就打，被老烟头用烟枪挡了回去。

　　“打不得，你做伢那时候不还是一样，这叫上梁不正下梁歪！”

　　那独眼的小伙子看他老爸被数落了，低下头偷笑，老烟头咳嗽了一声，又敲了那独眼的少年一记头棍：“你笑个啥？碰到血尸，可大可小，上次你二公就是在洛阳挖到这东西，结果现在还疯疯癫癫的，都不知道着了什么道。等一下我先下去，你跟在我后面，二伢子你带个土耗子殿后，三伢子你就别下去了，四个人都下去，想退都来不及退，你就拉着土耗子的尾巴，我们在里面一吆喝你就把东西拉出来。”

　　年纪最小的那少年不服气了：“我不依，你们偏心，我告诉我娘去！”

　　老烟头大笑：“你看你看，三伢子还怯不得子了，别闹，等一下给你摸把金刀刀。”

　　“我不要你摸，我自己会摸。”

　　那独眼老二就火了，一把揪住老三的耳朵：“你这杂家伙跟我寻事觅缝啰，招呼老子发宝气喃？！”

　　那年纪最小的少年看样子平日挨过不少揍，一看他二哥真火了，就吓得不敢吭声了，直望着他爹求救，怎料他爹已经去收拾家伙去了。他二哥这下得意了：“你何什咯样不带爱相啰，这次老头子也不帮你，你要再吆喝，我拧你个花麻鸡吧！”

　　老烟头拍拍老二的肩膀，大叫一声：“小子们，操家伙啰！”说完一把旋风铲已经舞开了。

　　半个小时候后，盗洞已经打得见不到底了，除了老二不时上来透气，洞里连声音都听不清楚了，老三等得不耐烦起来，就朝洞里大叫：“大爷爷，挖穿没有？”

　　隔了有好几秒，里面才传来一阵模糊的声音：“不……知道，你……待在上面，拉好……好绳子！”

　　是他二哥的声音，然后听到他那老烟头咳嗽了一声：“轻点声……听！有动静！”

　　然后就是死一般的沉寂。

　　老三知道下面肯定有什么变故，吓得也不敢说话了，突然他听到一阵让人毛骨悚然的咯咯声，好像蛤蟆叫一样的从洞里发出来。

　　然后他二哥在下面大吼了一声：“三伢子，拉！”

　　他不敢怠慢，一蹬地猛地拽住土耗子的尾巴，就往外拉，刚拉了几下，突然下面好像有什么东西咬住了，竟然有一股反力把绳子向盗洞里拉去，老三根本没想过还会有这种情况，差点就被拉到洞里去，他急中生智，一下子把尾巴绑在自己腰上，然后全身向后倒去，后背几乎和地面成了30度角，这个是他在村里和别的男孩子拔河的时候用的招数，这样一来他的体重就全部吃在绳子上，就算是匹骡子，他也能顶一顶。

　　果然，这样一来他就和洞里的东西对峙住了，双方都各自吃力，但是都拉不动分毫，僵持了有十几秒，就听到洞里一声盒子炮响，然后听到他爹大叫：“三伢子，快跑！！！！！！”就觉得绳子一松，土耗子嗖一声从洞里弹了出来，好像上面还挂了什么东西！那时候老三也顾不得那么多了，他知道下面肯定出了事情了，一把接住土耗子，扭头就跑！

　　他一口七跑出有二里多地，才敢停下来，掏出他怀里的土耗子一看，吓得大叫了一声，原来土耗子上勾着一只血淋淋的断手。他认得那手的模样，不由哭了出来，这手是分明是他二哥的。看样子他二哥就算不死也残废了。想到这里，他不由一咬牙，想回去救他二哥和老爹，刚一回头，却看见背后蹲着个血红血红的东西，正直勾勾地看着他。

　　这老三也不是个二流货色，平日里跟着他老爹大浪淘沙，离奇的事情见过不少，知道这地底下的，什么事情都有可能发生，最重要的不是大惊小怪，而是随机应变，要知道再凶险的鬼也强不过一活人，这什么黑凶白凶的，也得遵守物理定律，一梭子子弹打过去，打烂了也就没什么好怕的了。

　　想到这里，他把心一横，一边后退，一边腰上别着的一支匣子炮已经拽在手里，开了连发，只要那血红的东西有什么动静，就先给他劈头来个暴雨梨花。谁知道这时候那血红的东西竟然站起来了，老三仔细一看，顿觉得头皮发麻，胃里一阵翻腾，那分明是一个被剥了皮的人！混身上下血淋淋的，好像是自己整个儿从人皮里挤了出来一样。可是这样的一个人，竟然还能走动，那真是奇迹了，难道这就是血尸的真面目？

　　想着，那血尸一个弓身，突然就扑了过来，一下子老三就和他对上眼了，那血淋淋的脸一下子就贴着他的鼻子，一股酸气扑面而来，老三顺势向后一倒，同时匣子炮整一梭子子弹全部近距离打在了那东西胸膛上，距离过近，子弹全部都穿了过去，把那东西打的血花四溅，向后退了好几步。老三心中暗喜，再一回手对准那东西的脑袋就一扣扳机，就听喀嚓一声，枪竟然卡壳了！

　　这把老匣子炮是当年他二爷爷从一个军阀墓里挖出来的，想来也没用了多少年月，可惜这几年跟着他爹爹到处跑，也没工夫保养，平时候开枪的机会也少之又少，谁知道竟然在这节骨眼上卡壳了。那老三也真不简单，一看枪不好使唤，轮圆了胳膊用吃奶的力气把枪给砸了过去，也不管砸没砸到，扭头就跑。这次他连头也不敢回，看准前面一颗大树就奔了过去，寻思着怎么着它也不会爬树吧，突然脚下一绊，他一个狗吃屎，整张脸磕在一树墩上，顿时鼻子嘴巴里全是血。

　　老三狠狠一巴掌拍在地上，心里那个气啊，妈的怎么就这么背。

　　这时候听到后面风声响起，知道阎王爷来点名了，心一横，死就死吧，索性就趴在地上不起来了。没成想，那具血尸好像没看到他一样，竟然从他身上踩了过去，那血淋淋的脚板马上在他背后印下一个印子，这血尸出奇的重，一脚下去，老三就觉得嗓子一甜，只觉胆汁都被像踩吐了出来，而且背上那被踩过地方马上一阵奇痒，眼前马上朦胧起来，他马上意识到自己可能中毒了，而且毒性还非常的猛烈，恍惚间他看到不远处的地方，他二哥的那只手里好像还握着什么东西。

　　他用力眨了眨眼睛，仔细一看，原来是一块古帛片。他心想，自家二哥拼了命都要带出来的东西，肯定不是寻常东西，现在又不知道他们怎么样了，我好歹得把东西收好，万一我真的死了，他们找到我的尸体，也能从我身上找得着，那二哥的这只手也不算白断了，我也不至于白死。他一边这么想着，一边艰难地爬过去，用力掰开二哥紧握的手把那帛片从掌心里拿出来，塞进了自己袖子里。

　　这个时候他的耳朵也开始蜂鸣了，眼睛就像蒙了一层纱一样，手脚都开始凉起来。按他以往的经验，现在他裤裆里肯定大小便一大堆，中尸毒的人都死得很难看，他现在最希望的是不要给隔壁村的二丫头看见自己这个样子。

　　他就这么混混着胡想，脑子已经不怎么听他使唤了，这时候他又开始隐隐约约地听到他在盗洞口听到的那种咯咯怪声。www.seputu.com

　　老三隐约觉得一丝不对，刚才和血尸搏斗了这么些时候，也没听它叫过一声，现在怎么又叫起来了？难道刚才的那只并不是血尸？那刚才看到的又是什么东西呢？可惜这个时候他已经基本无法做思考了，他条件反射地抬起头看了一下，只见一张巨大的怪脸正俯下身子看着他，两只没有瞳孔的眼睛里空荡荡地毫无生气。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#分析血尸的词频
import jieba.analyse

data &lt;/span&gt;= open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/pycode/血尸.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).read()
tag &lt;/span&gt;= jieba.analyse.extract_tags(data,&lt;span&gt;15&lt;/span&gt;&lt;span&gt;)
print(tag)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;老三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;二哥&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;东西&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;伢子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;烟头&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;耗子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;血尸&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;洞里&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;下面&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;独眼&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;一声&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;听到&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;知道&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;下去&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;时候&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;————3.2盗墓笔记实战&lt;/h3&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#盗墓笔记的关键词提取
import jieba.analyse

data &lt;/span&gt;= open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/pycode/盗墓笔记.TXT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).read()
tag &lt;/span&gt;= jieba.analyse.extract_tags(data,&lt;span&gt;20&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后会出现如下错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
UnicodeDecodeError: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gbk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; codec can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t decode byte 0xbf in position 2: illegal multibyte sequence&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候我们对盗墓笔记文件做如下修改：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201712/1226410-20171213203732535-1652745315.png&quot; alt=&quot;&quot; width=&quot;513&quot; height=&quot;74&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 代码也做如下操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#盗墓笔记的关键词提取
import jieba.analyse

data &lt;/span&gt;= open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/pycode/盗墓笔记.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).read()
tag &lt;/span&gt;= jieba.analyse.extract_tags(data,&lt;span&gt;20&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候就得到如下结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;三叔&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我们&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;胖子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;油瓶&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;潘子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;什么&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;东西&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;知道&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;这里&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;但是&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;没有&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;一个&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;看到&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;老痒&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;事情&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;时候&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;一下&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;感觉&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;阿宁&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;已经&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;pre&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 13 Dec 2017 12:58:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/8034023.html</dc:identifier>
</item>
<item>
<title>记录一次线上处理5千万数据转换的经验 - 朝向远方</title>
<link>http://www.cnblogs.com/LipeiNet/p/7809567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LipeiNet/p/7809567.html</guid>
<description>&lt;p&gt;前言：刚来新公司2个月就面临了一次线上真实数据的转换,这些数据异常重要,对我们公司来说就是客户的资源,说白了就是客户存在我们公司的钱,一旦处理失败将会影响极大,可以想象一下你存银行2万元,第二天查询却一分钱没有的情况,但是很遗憾此次处理没有处理好,造成了极大的影响,对我个人而言也是,后续我对此次数据转换失败进行了深刻反思,发现处理失败原因主要2个方面,1是流程不对,2是基础知识准备不足,现在我将把当时处理的过程以及后续如何处理整理出来,供大家参考,希望大家少入坑。&lt;/p&gt;
&lt;h2&gt;1、当时处理数据的过程&lt;/h2&gt;
&lt;p&gt;我们当时采用的是分批处理,第一次灰度处理200个用户,第2次灰度处理4万个用户,第三次是全量处理,那么现在我将记录当时处理经过,因为我是底层服务的负责人,所以这个需求是别的业务方提出来,然后进行需要和技术进行评审,完毕后由我给出技术方案。&lt;/p&gt;
&lt;h3&gt;1.1、200个灰度用户处理&lt;/h3&gt;
&lt;p&gt;当时由于是200个用户,那么我采取的处理就是以用户这个维度进行处理,然后从文件中读取业务方给的用户id,然后通过一些业务逻辑处理生成一批可执行的shell脚本。与此同时依然以用户的维度写了一个回滚方案,如果执行一断失败即可回滚。写完这些技术方案我们进行了一次技术评审,评审发现我处理的数据有一些过期或者失效的用户资源,然后我们讨论这些资源是否要处理,最后得出结果是不处理,然后我对生成的shell脚本进行修复,只取用户可用资源。后续我们也进行几次评审,确定了最终的shell脚本,到上线那天进行执行。处理完毕以后由我先进行测试,然后由qa进行测试,最后由pm进行验收，整个过程很顺利,没有出现异常情况，完美验收。&lt;/p&gt;
&lt;h3&gt;1.2、40000个用户处理&lt;/h3&gt;
&lt;p&gt;由于上次处理的比较顺利,让我们放松了警惕,认为这种方案没什么问题,只不过把上次的200个用户替换成40000个用户,在上线的那天进行执行，当时处理也是没有任何问题,pm也验收通过,但是过了2天陆续有销售反应客户资源比原始资源大了很多，最后查询发现原来pm给我的用户数据存在不少是重复的,我并没有进行重复过滤,导致在刷数据的时候重复刷,这样一来客户资源在原来基础上扩大很多,这个不管pm如何给的数据,但是我作为资源负责人应该考虑这些问题，这是出现的第一例case,后续我们对代码进行修复。&lt;/p&gt;
&lt;h3&gt;1.3、全量数据处理&lt;/h3&gt;
&lt;p&gt; 全量处理方案,从数据库中获取所有的用户id,这里我采用了一个笨方法,采用java程序获取的,用户总量有好几百万,资源总量大约是5千万,然后我把用户id分别进行存储不同的文件中,然后采用多线程来执行从而提高效率,这个处理时长达8个小时(这里已经很明显不对了)因为中间有些逻辑必须调用服务所以处理时间比较长,但是最终还是得到了可执行的sql脚本，到了夜晚6点左右开始执行,先是有dba进行数据备份，然后由我把准备好的sql脚本交给dba进行执行(因为数据量大,只有dba通过特殊权限才可以快速执行),这些数据全部执行完毕大约用了40分钟,然后我们进行数据验证,上游各种服务上线,那天我自己也有job上线，导致从夜晚6点一直处理到第二天凌晨6点,然后pm验证后回家休息。但是噩梦在当天9点出现,有数万用户资源加多或加少或无法进行下载,然后开始修复数据(中间修复过程不在说了),整整修复3天，每天休息时间不超过4小时,终于得以遏止,很长一段时间我就在思考和反思问题出在哪里,以后应该去怎么应对这样庞大数据的迁移或者转换,到最后我发现主要死是流程的错误,导致一错再错，下面我写下我的总结&lt;/p&gt;
&lt;h2&gt; 2、总结&lt;/h2&gt;

&lt;p&gt;对于大量数据的转换或者迁移我们应该遵从下面几个流程,这样会最大化的减小数据出错的几率&lt;/p&gt;
&lt;h3&gt;2.1、详细的上线方案&lt;/h3&gt;
&lt;p&gt;其实我们也有上线方案(对于任何修改线上的操作我们应该都称为上线),但是不够明确或者有太多的点没有指出来，上线方案应该包括下面几点&lt;/p&gt;
&lt;h4&gt;2.1.1、上线前的准备&lt;/h4&gt;
&lt;p&gt;1是上线前夕需要禁止用户对数据的操作、查询等避免操作期间因为用户的操作导致大量脏数据进入库中后续处理非常麻烦,2是在文档中明确每个&lt;strong&gt;业务方的负责人&lt;/strong&gt;是谁在什么&lt;strong&gt;时间节点&lt;/strong&gt;进行关闭用户操作资源界面,在我们操作期间没有明确这些事情,导致我们转换了数据，但是没有关闭数据操作入口导致还有不少是按照以前逻辑的方式把数据添加到库中。&lt;/p&gt;
&lt;h4&gt;2.1.2、技术方案&lt;/h4&gt;
&lt;p&gt;涉及数据迁移或者转换我们最重要的2步一个是获取数据另一个就是处理数据然后生成可执行的shell脚本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据源的获取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、数据源的获取一定是要通过sql脚本来获取,禁止用应用程序跑&lt;/p&gt;
&lt;p&gt;2、数据源可分库获取,把每个库的数据放在一个文件,文件取名采用库名_数据条数(如果量很大可以继续分割)库名_n_数据条数&lt;/p&gt;
&lt;p&gt;3、避免有重复数据,通过shell来对数据进行排重&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理数据源生成可执行的shell脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、确认数据处理的维度,必须要以id为主键进行转换,切不可用用户id或者其他类型,尽量保证操作的幂等性,不管执行多少次结果不会改变&lt;/p&gt;
&lt;p&gt;2、按照数据源文件批量处理数据,在程序执行期间必须要打印日志,而且把处理异常的数据写入到一个error文件中,执行完毕后查询生成的数值是否和数据源要处理的数值一致,如果有异常去查看异常是否自己有考虑不全的地方,如果发现数值不一致也立即去排查原因,确保整个数据处理没有任何问题&lt;/p&gt;
&lt;p&gt;3、记录每个文件的处理时间,比如库1数据处理时间是1个小时,那么你单台机器只能处理2个应用程序，那么在上线的那天你都需要准备8台机器，这样还可以估算整个上线的时间&lt;/p&gt;
&lt;p&gt;4、程序尽量在服务器执行,因为你数据获取到处理数据到最后执行肯定是在上游的入口关闭以后,如果本地执行时间可能会太久,服务器执行就可以多申请几台服务器,把程序做成定时任务,然后同时跑,可能本机需要5个小时服务器20分钟足矣&lt;/p&gt;
&lt;h4&gt;2.1.3、执行&amp;amp;测试&lt;/h4&gt;
&lt;p&gt;1、如果整体数据量比较大还是建议交付给公司dba处理,他们权限比较大,处理效率会高不少&lt;/p&gt;
&lt;p&gt;2、执行前选取一条单独执行,然后验证看是否正确,避免出现sql错误的低级错误&lt;/p&gt;
&lt;p&gt;3、单库执行,然后进行测试,因为数据量巨大,一个个比对肯定不现实,可采用的方式查看备份库数据的数然后在查看按规则转换后的数据数量,如果一致的话在随机抽取数据进行验证,如果发现2中库的数量差别大,就需要检查是否出现漏掉数据没有处理&lt;/p&gt;
&lt;p&gt;4、全部执行,测试方式和上面一样,进行间接的测试来验证数据的正确性&lt;/p&gt;
&lt;h4&gt;2.1.4、验收&lt;/h4&gt;
&lt;p&gt;1、由pa进行覆盖性的点击每项功能查询是否出现异常&lt;/p&gt;
&lt;p&gt;2、由pm随机进行点击&lt;/p&gt;
&lt;h4&gt;2.1.5、回滚&lt;/h4&gt;
&lt;p&gt;如果数据一断出现自己无法把控的情况,可以先把情况告诉领导和各方负责人,经评审后联系dba对数据进行整体回滚,如果数据量比较小,可以在操作的时候记录数据主键,按照主键进行还原即可。&lt;/p&gt;
&lt;h4&gt;2.1.6、上线时间节点和地点&lt;/h4&gt;
&lt;p&gt;1、上线的地点可以提前预约一个会议室,数据转换进行投影,减少误操作&lt;/p&gt;
&lt;p&gt;2、上线节点,在每个节点要做什么都明确出来,做到井井有条&lt;/p&gt;
&lt;p&gt;因为我们目前处理项目重构和拆分阶段,有不少关于数据迁移转换的情况,后来我们也有大约3万多条数据迁移,完全按照上面的方式操作很顺利,至今没有反馈一个case。好了到这里就总结完毕了,数据处理需慎重,一定要考虑各种极端情况。&lt;/p&gt;

</description>
<pubDate>Wed, 13 Dec 2017 12:38:00 +0000</pubDate>
<dc:creator>朝向远方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LipeiNet/p/7809567.html</dc:identifier>
</item>
<item>
<title>java.util.HashSet, java.util.LinkedHashMap, java.util.IdentityHashMap 源码阅读 (JDK 1.8.0_111) - snowater</title>
<link>http://www.cnblogs.com/snowater/p/7756517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/snowater/p/7756517.html</guid>
<description>&lt;h2&gt;一、java.util.HashSet&lt;/h2&gt;
&lt;h3&gt;1.1 HashSet集成结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244495/201712/1244495-20171207192423738-1525179163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.2 java.util.HashSet属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; HashMap&amp;lt;E,Object&amp;gt;&lt;span&gt; map;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Dummy value to associate with an Object in the backing Map&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object PRESENT = &lt;span&gt;new&lt;/span&gt; Object();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HashSet的本质其实就是一个HashMap。Set集合一个重要的特性就是元素不重复，而HashMap本身就是符合这一特性的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Iterator&amp;lt;E&amp;gt;&lt;span&gt; iterator() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; map.keySet().iterator();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;集合的迭代器就是HashMap中keySet()的迭代器。&lt;/p&gt;
&lt;p&gt;HashSet类需要理解的不多，看懂了HashMap这个类就没什么问题了。HashMap源码解析请参考：&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/snowater/p/7742287.html&quot;&gt;java.util.HashMap和java.util.HashTable (JDK1.8)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;二、java.util.LinkedHashMap&lt;/h2&gt;
&lt;h3&gt;2.1 LinkedHashMap继承结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244495/201712/1244495-20171208152051015-389134213.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图中蓝色的为继承extend，虚线为implements&lt;/p&gt;
&lt;p&gt;HashMap的本质是一个Node的数组，本质是个数组，数组可以根据下标去访问数组内容。HashMap的Map.Entry是无序的。&lt;/p&gt;
&lt;p&gt;LinkedHashMap继承自HashMap，因此LinkedHashMap首先它是一个HashMap，其次它具备Node链表的属性。这个Node链表维护了Node插入顺序或者访问顺序。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2 LinkedHashMap属性&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Entry&amp;lt;K,V&amp;gt; &lt;span&gt;extends&lt;/span&gt; HashMap.Node&amp;lt;K,V&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 包含前一节点和后一节点的引用，是个双向链表&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         Entry&amp;lt;K,V&amp;gt;&lt;span&gt; before, after;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Entry(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, Node&amp;lt;K,V&amp;gt;&lt;span&gt; next) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(hash, key, value, next);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表头节点，也是最老的节点&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; head;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表尾节点，也是最年轻的节点&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; tail;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 访问顺序，true为访问顺序，false为插入顺序&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; accessOrder;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;accessOrder默认为false，如果需要设置成true，LinkedhashMap提供了如下构造函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; LinkedHashMap(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; initialCapacity,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                          &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                          &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accessOrder) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(initialCapacity, loadFactor);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.accessOrder =&lt;span&gt; accessOrder;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置为false，则整个双向链表按照插入顺序进行排列；为true则按照访问顺序进行排列，当某个节点被get访问，则将该节点放置到链表最结尾（最结尾是最年轻的节点）。&lt;/p&gt;
&lt;p&gt;访问顺序则是采用了LRU（Least recently used，最近最少使用）算法，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。 &lt;/p&gt;
&lt;h3&gt;2.3 LinkedHashMap方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将src的相关引用全部复制给dst节点&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; transferLinks(LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; src,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                                LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; dst) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改节点自身的before和after引用&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         LinkedHashMap.Entry&amp;lt;K,V&amp;gt; b = dst.before =&lt;span&gt; src.before;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         LinkedHashMap.Entry&amp;lt;K,V&amp;gt; a = dst.after =&lt;span&gt; src.after;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改前后节点的引用&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (b == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             head =&lt;span&gt; dst;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             b.after =&lt;span&gt; dst;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (a == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             tail =&lt;span&gt; dst;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             a.before =&lt;span&gt; dst;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法是替换节点的核心，新的节点接替旧的节点的所有引用关系，旧的节点无法被引用最终会被GC回收。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除节点操作&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; afterNodeRemoval(Node&amp;lt;K,V&amp;gt; e) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; unlink
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存当前节点及其前后节点&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         LinkedHashMap.Entry&amp;lt;K,V&amp;gt; p =
&lt;span&gt; 5&lt;/span&gt;             (LinkedHashMap.Entry&amp;lt;K,V&amp;gt;)e, b = p.before, a =&lt;span&gt; p.after;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从链表中去除掉该节点，主要是去除对该节点的引用
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将该节点对链表其它节点的引用也去掉&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         p.before = p.after = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (b == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             head =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             b.after =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (a == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             tail =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             a.before =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; afterNodeAccess(Node&amp;lt;K,V&amp;gt; e) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; move node to last&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; last;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果按照访问顺序，则需要将被访问节点至于链表最结尾处&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (accessOrder &amp;amp;&amp;amp; (last = tail) !=&lt;span&gt; e) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             LinkedHashMap.Entry&amp;lt;K,V&amp;gt; p =
&lt;span&gt;24&lt;/span&gt;                 (LinkedHashMap.Entry&amp;lt;K,V&amp;gt;)e, b = p.before, a =&lt;span&gt; p.after;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             p.after = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (b == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 head =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 b.after =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 a.before =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 last =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (last == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 head =&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 p.before =&lt;span&gt; last;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 last.after =&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             tail =&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             ++&lt;span&gt;modCount;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; afterNodeInsertion(&lt;span&gt;boolean&lt;/span&gt; evict) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; possibly remove eldest&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         LinkedHashMap.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; first;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; removeEldestEntry(first) 默认返回false，如果需要可以继承LinkedHashMap，覆盖该函数。
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; removeEldestEntry(first) 如果返回true,则在put的时候会删除链表头结点&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (evict &amp;amp;&amp;amp; (first = head) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; removeEldestEntry(first)) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             K key =&lt;span&gt; first.key;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             removeNode(hash(key), key, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面三个方法在HashMap中也是存在的，不过方法体为空，LinkedHashMap覆盖了该方法。在HashMap的put、get、remove方法中&lt;/p&gt;
&lt;p&gt;LinkedHashMap并没有重新实现put、get、remove、clear方法，仍然是采用HashMap的实现方式，不同的是afterNodeRemoval、afterNodeAccess、afterNodeInsertion已经不再是空的方法体了。&lt;/p&gt;
&lt;p&gt;在LinkedHashMap, LinkedKeySet, LinkedValueSet, LinkedEntrySet类中的forEach方法以及都是遍历链表的，因此可以按照插入顺序（或访问顺序）去遍历LinkedHashMap，从而解决了HashMap无序问题。&lt;/p&gt;
&lt;h2&gt;三、java.util.IndentifyHashMap&lt;/h2&gt;
&lt;h3&gt; 3.1 IndentifyHashMap继承结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244495/201712/1244495-20171211210811790-1656251070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IdentityHashMap虽然冠以HashMap之名，却不是HashMap的子类，它是继承自AbstractHashMap。&lt;/p&gt;
&lt;p&gt;IdentityHashMap比较两个key是否相等，并不是采用内容比较，而是直接进行==比较，比较两个key是否为同一个对象。&lt;/p&gt;
&lt;h3&gt;3.2 IdentityHashMap属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; Object[] table; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; non-private to simplify nested class access&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; modCount;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object NULL_KEY = &lt;span&gt;new&lt;/span&gt; Object();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;identityHashMap是一个Object数组，size表示当前Map存入的数据总数，modCount表示修改次数。&lt;/p&gt;
&lt;p&gt;IdentityHashMap允许使用NULL作为key，如下代码所示，如果key为null，则存入预先定义的NULL_KEY对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Object maskNull(Object key) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; NULL_KEY : key);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Object unmaskNull(Object key) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (key == NULL_KEY ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : key);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 3.3 IdentityHashMap方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; nextKeyIndex(&lt;span&gt;int&lt;/span&gt; i, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (i + 2 &amp;lt; len ? i + 2 : 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法在IdentityHashMap中频繁用到，作用是寻找下一个index以解决hash碰撞问题，下一个index获取也是按照非常简单的(i+2 &amp;lt; len ? i+2 : 0)。&lt;/p&gt;
&lt;p&gt;HashMap采用链表和红黑树避免hash碰撞问题，而在IdentityHashMap中则是采用开放定址法，而且采用的是最简单的线性探测法。&lt;/p&gt;
&lt;p&gt;我们先来看下最hash算法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hash(Object x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; h =&lt;span&gt; System.identityHashCode(x);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Multiply by -127, and left-shift to use least bit as part of hash&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; ((h &amp;lt;&amp;lt; 1) - (h &amp;lt;&amp;lt; 8)) &amp;amp; (length - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无论x对象所属的类是否重新实现了hashCode()方法，System.identityHashCode(x) 都将返回默认的hashCode()结果，所谓默认的hashCode()就是指Object类中的hashCode()方法。Object类中的hashCode()可以为不同的对象返回不同的结果，根据Java doc中的描述，这是根据对象的内存地址来计算hash结果的。System.identityHashCode(x) 在x为null时返回0。&lt;/p&gt;
&lt;p&gt;hash方法在通过System.identityHashCode方法获得hash code之后，再通过移位和与运算计算index。因为采用System.identityHashCode方法获取hash code，因此不同的对象hash code是不同的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Object k =&lt;span&gt; maskNull(key);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         retryAfterResize: &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;final&lt;/span&gt; Object[] tab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; tab.length;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 计算下标&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; hash(k, len);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有可能的位置，直到找到一个空位&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (Object item; (item = tab[i]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                  i =&lt;span&gt; nextKeyIndex(i, len)) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 待插入的key已经存在，替换value&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; k) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         V oldValue = (V) tab[i + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     tab[i + 1] =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新加一个节点如果size &amp;gt; len/3则需要扩容&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; s = size + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use optimized form of 3 * s.
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Next capacity is len, 2 * current capacity.&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (s + (s &amp;lt;&amp;lt; 1) &amp;gt; len &amp;amp;&amp;amp;&lt;span&gt; resize(len))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩容后待插入的节点需要重新查找位置&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt; retryAfterResize;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改次数加一&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在下标i存放key，在i+1下标存放value&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             tab[i] =&lt;span&gt; k;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             tab[i + 1] =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             size =&lt;span&gt; s;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     }    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在put方法中，判断两个key是否相等，是直接使用“==”的，也就是说&lt;strong&gt;不同对象就会被当做不同的key处理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其次在存放的时候i存放key，i+1存放value，这也就能解释查找下一个空位方法nextKeyIndex中使用i+2的原因了。&lt;/p&gt;
&lt;p&gt;从put方法中还能看出扩容条件为size &amp;gt; len/3，也就是说IdentityHashMap最多只能使用总capacity的1/3。相对于HashMap默认的loadFactor=0.75，IdentityHashMap的使用率还是非常低的。&lt;/p&gt;
&lt;p&gt;接下来看下resize方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; resize(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; newCapacity) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; assert (newCapacity &amp;amp; -newCapacity) == newCapacity; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; power of 2
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接扩容为之前的2倍&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newLength = newCapacity * 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         Object[] oldTable =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldLength =&lt;span&gt; oldTable.length;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (oldLength == 2 * MAXIMUM_CAPACITY) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; can't expand any further&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (size == MAXIMUM_CAPACITY - 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&quot;Capacity exhausted.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (oldLength &amp;gt;=&lt;span&gt; newLength)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新new一个新的数组出来，简单粗暴！&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         Object[] newTable = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[newLength];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; oldLength; j += 2&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             Object key =&lt;span&gt; oldTable[j];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (key != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 Object value = oldTable[j+1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将原数组上的key value清空，不清空将会导致内存无法被释放&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 oldTable[j] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 oldTable[j+1] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; key重新hash&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; hash(key, newLength);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (newTable[i] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; hash冲突了就查找下一个位置&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                     i =&lt;span&gt; nextKeyIndex(i, newLength);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 newTable[i] =&lt;span&gt; key;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 newTable[i + 1] =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         table =&lt;span&gt; newTable;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;resize方法真的是简单粗暴，直接double capacity，然后将旧的table中的数据hash到新的table中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Object k =&lt;span&gt; maskNull(key);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Object[] tab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; tab.length;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据key计算下标&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; hash(k, len);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Object item =&lt;span&gt; tab[i];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; k)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; (V) tab[i + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (item == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查找下一个位置&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             i =&lt;span&gt; nextKeyIndex(i, len);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;get方法和containsKey方法方法体相同，其实现思路也就是遍历数组，如果插到一个空位置，则说明不存在该key。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V remove(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Object k =&lt;span&gt; maskNull(key);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Object[] tab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; tab.length;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; hash(k, len);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Object item =&lt;span&gt; tab[i];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查找到该key&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (item ==&lt;span&gt; k) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 size--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     V oldValue = (V) tab[i + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 相应位置置空&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 tab[i + 1] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 tab[i] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接置空会导致查找出现问题&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                closeDeletion(i);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有找到该key&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (item == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             i =&lt;span&gt; nextKeyIndex(i, len);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为IdentityHashMap是以开放定址法解决hash冲突的，直接将数组某个地方设置为null，势必会导致查找出问题。为此需要调用closeDeletion方法来解决这一问题。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; closeDeletion(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; d) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Adapted from Knuth Section 6.4 Algorithm R&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         Object[] tab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; tab.length;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        Object item;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = nextKeyIndex(d, len); (item = tab[i]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;              i =&lt;span&gt; nextKeyIndex(i, len) ) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; r =&lt;span&gt; hash(item, len);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将后面的因为hash碰撞而存放的元素往前移&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((i &amp;lt; r &amp;amp;&amp;amp; (r &amp;lt;= d || d &amp;lt;= i)) || (r &amp;lt;= d &amp;amp;&amp;amp; d &amp;lt;=&lt;span&gt; i)) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将后面的元素往前移位&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                 tab[d] =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 tab[d + 1] = tab[i + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 tab[i] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 tab[i + 1] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 d =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;closeDeletion方法其思路就是对空置出来的位置d后面的元素进行hash判断，如果之前是因为hash碰撞存放在d后面的，则直接往前移，将这个空置的d位置给覆盖掉。在这个过程中要注意table数组是个环形的。&lt;/p&gt;
&lt;p&gt;整体感觉IdentityHashMap实现非常的简单粗暴，优化较少，可能是因为使用较少的原因。&lt;/p&gt;
</description>
<pubDate>Wed, 13 Dec 2017 12:26:00 +0000</pubDate>
<dc:creator>snowater</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/snowater/p/7756517.html</dc:identifier>
</item>
</channel>
</rss>