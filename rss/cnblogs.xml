<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spark SQL / Catalyst 内部原理 与 RBO - 郭俊Jason</title>
<link>http://www.cnblogs.com/jasongj/p/9625406.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jasongj/p/9625406.html</guid>
<description>&lt;blockquote readability=&quot;3.7350993377483&quot;&gt;
&lt;p&gt;原创文章，转载请务必将下面这段话置于文章开头处。&lt;br/&gt;本文转发自&lt;a href=&quot;http://www.jasongj.com/&quot;&gt;&lt;strong&gt;技术世界&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&quot;http://www.jasongj.com/spark/rbo/&quot;&gt;原文链接&lt;/a&gt;　&lt;a href=&quot;http://www.jasongj.com/spark/rbo/&quot; class=&quot;uri&quot;&gt;http://www.jasongj.com/spark/rbo/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;本文所述内容均基于 2018年9月10日 Spark 最新 Release 2.3.1 版本。后续将持续更新&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spark SQL 的整体架构如下图所示&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql.png&quot; alt=&quot;Spark SQL Catalyst&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;从上图可见，无论是直接使用 SQL 语句还是使用 DataFrame，都会经过如下步骤转换成 DAG 对 RDD 的操作&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Parser 解析 SQL，生成 Unresolved Logical Plan&lt;/li&gt;
&lt;li&gt;由 Analyzer 结合 Catalog 信息生成 Resolved Logical Plan&lt;/li&gt;
&lt;li&gt;Optimizer根据预先定义好的规则对 Resolved Logical Plan 进行优化并生成 Optimized Logical Plan&lt;/li&gt;
&lt;li&gt;Query Planner 将 Optimized Logical Plan 转换成多个 Physical Plan&lt;/li&gt;
&lt;li&gt;CBO 根据 Cost Model 算出每个 Physical Plan 的代价并选取代价最小的 Physical Plan 作为最终的 Physical Plan&lt;/li&gt;
&lt;li&gt;Spark 以 DAG 的方法执行上述 Physical Plan&lt;/li&gt;
&lt;li&gt;在执行 DAG 的过程中，Adaptive Execution 根据运行时信息动态调整执行计划从而提高执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spark SQL 使用 Antlr 进行记法和语法解析，并生成 UnresolvedPlan。&lt;/p&gt;
&lt;p&gt;当用户使用 SparkSession.sql(sqlText : String) 提交 SQL 时，SparkSession 最终会调用 SparkSqlParser 的 parsePlan 方法。该方法分两步&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用 Antlr 生成的 SqlBaseLexer 对 SQL 进行词法分析，生成 CommonTokenStream&lt;/li&gt;
&lt;li&gt;使用 Antlr 生成的 SqlBaseParser 进行语法分析，得到 LogicalPlan&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在两张表，分别定义如下&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;CREATE TABLE score (
  id INT,
  math_score INT,
  english_score INT
)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;CREATE TABLE people (
  id INT,
  age INT,
  name INT
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对其进行关联查询如下&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;SELECT sum(v)
FROM (
  SELECT score.id,
    100 + 80 + score.math_score + score.english_score AS v
  FROM people
  JOIN score
  ON people.id = score.id
  AND people.age &amp;gt; 10
) tmp&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成的 UnresolvedPlan 如下图所示。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_parser.png&quot; alt=&quot;Spark SQL Parser&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;从上图可见&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查询涉及的两张表，被解析成了两个 UnresolvedRelation，也即只知道这们是两张表，却并不知道它们是 EXTERNAL TABLE 还是 MANAGED TABLE，也不知道它们的数据存在哪儿，更不知道它们的表结构如何&lt;/li&gt;
&lt;li&gt;sum(v) 的结果未命名&lt;/li&gt;
&lt;li&gt;Project 部分只知道是选择出了属性，却并不知道这些属性属于哪张表，更不知道其数据类型&lt;/li&gt;
&lt;li&gt;Filter 部分也不知道数据类型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spark SQL 解析出的 UnresolvedPlan 如下所示&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;== Parsed Logical Plan ==
'Project [unresolvedalias('sum('v), None)]
+- 'SubqueryAlias tmp
   +- 'Project ['score.id, (((100 + 80) + 'score.math_score) + 'score.english_score) AS v#493]
      +- 'Filter (('people.id = 'score.id) &amp;amp;&amp;amp; ('people.age &amp;gt; 10))
         +- 'Join Inner
            :- 'UnresolvedRelation `people`
            +- 'UnresolvedRelation `score`&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;从 Analyzer 的构造方法可见&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Analyzer 持有一个 SessionCatalog 对象的引用&lt;/li&gt;
&lt;li&gt;Analyzer 继承自 RuleExecutor[LogicalPlan]，因此可对 LogicalPlan 进行转换&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;scala&quot;&gt;
&lt;code&gt;class Analyzer(
    catalog: SessionCatalog,
    conf: SQLConf,
    maxIterations: Int)
  extends RuleExecutor[LogicalPlan] with CheckAnalysis {&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Analyzer 包含了如下的转换规则&lt;/p&gt;
&lt;pre class=&quot;scala&quot;&gt;
&lt;code&gt;lazy val batches: Seq[Batch] = Seq(
    Batch(&quot;Hints&quot;, fixedPoint,
      new ResolveHints.ResolveBroadcastHints(conf),
      ResolveHints.RemoveAllHints),
    Batch(&quot;Simple Sanity Check&quot;, Once,
      LookupFunctions),
    Batch(&quot;Substitution&quot;, fixedPoint,
      CTESubstitution,
      WindowsSubstitution,
      EliminateUnions,
      new SubstituteUnresolvedOrdinals(conf)),
    Batch(&quot;Resolution&quot;, fixedPoint,
      ResolveTableValuedFunctions ::
      ResolveRelations ::
      ResolveReferences ::
      ResolveCreateNamedStruct ::
      ResolveDeserializer ::
      ResolveNewInstance ::
      ResolveUpCast ::
      ResolveGroupingAnalytics ::
      ResolvePivot ::
      ResolveOrdinalInOrderByAndGroupBy ::
      ResolveAggAliasInGroupBy ::
      ResolveMissingReferences ::
      ExtractGenerator ::
      ResolveGenerate ::
      ResolveFunctions ::
      ResolveAliases ::
      ResolveSubquery ::
      ResolveSubqueryColumnAliases ::
      ResolveWindowOrder ::
      ResolveWindowFrame ::
      ResolveNaturalAndUsingJoin ::
      ExtractWindowExpressions ::
      GlobalAggregates ::
      ResolveAggregateFunctions ::
      TimeWindowing ::
      ResolveInlineTables(conf) ::
      ResolveTimeZone(conf) ::
      ResolvedUuidExpressions ::
      TypeCoercion.typeCoercionRules(conf) ++
      extendedResolutionRules : _*),
    Batch(&quot;Post-Hoc Resolution&quot;, Once, postHocResolutionRules: _*),
    Batch(&quot;View&quot;, Once,
      AliasViewChild(conf)),
    Batch(&quot;Nondeterministic&quot;, Once,
      PullOutNondeterministic),
    Batch(&quot;UDF&quot;, Once,
      HandleNullInputsForUDF),
    Batch(&quot;FixNullability&quot;, Once,
      FixNullability),
    Batch(&quot;Subquery&quot;, Once,
      UpdateOuterReferences),
    Batch(&quot;Cleanup&quot;, fixedPoint,
      CleanupAliases)
  )&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如， ResolveRelations 用于分析查询用到的 Table 或 View。本例中 UnresolvedRelation (people) 与 UnresolvedRelation (score) 被解析为 HiveTableRelation (json.people) 与 HiveTableRelation (json.score)，并列出其各自包含的字段名。&lt;/p&gt;
&lt;p&gt;经 Analyzer 分析后得到的 Resolved Logical Plan 如下所示&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;== Analyzed Logical Plan ==
sum(v): bigint
Aggregate [sum(cast(v#493 as bigint)) AS sum(v)#504L]
+- SubqueryAlias tmp
   +- Project [id#500, (((100 + 80) + math_score#501) + english_score#502) AS v#493]
      +- Filter ((id#496 = id#500) &amp;amp;&amp;amp; (age#497 &amp;gt; 10))
         +- Join Inner
            :- SubqueryAlias people
            :  +- HiveTableRelation `jason`.`people`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#496, age#497, name#498]
            +- SubqueryAlias score
               +- HiveTableRelation `jason`.`score`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#500, math_score#501, english_score#502]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Analyzer 分析前后的 LogicalPlan 对比如下&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_analyzer.png&quot; alt=&quot;Spark SQL Analyzer&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;由上图可见，分析后，每张表对应的字段集，字段类型，数据存储位置都已确定。Project 与 Filter 操作的字段类型以及在表中的位置也已确定。&lt;/p&gt;
&lt;p&gt;有了这些信息，已经可以直接将该 LogicalPlan 转换为 Physical Plan 进行执行。&lt;/p&gt;
&lt;p&gt;但是由于不同用户提交的 SQL 质量不同，直接执行会造成不同用户提交的语义相同的不同 SQL 执行效率差距甚远。换句话说，如果要保证较高的执行效率，用户需要做大量的 SQL 优化，使用体验大大降低。&lt;/p&gt;
&lt;p&gt;为了尽可能保证无论用户是否熟悉 SQL 优化，提交的 SQL 质量如何， Spark SQL 都能以较高效率执行，还需在执行前进行 LogicalPlan 优化。&lt;/p&gt;

&lt;p&gt;Spark SQL 目前的优化主要是基于规则的优化，即 RBO （Rule-based optimization）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每个优化以 Rule 的形式存在，每条 Rule 都是对 Analyzed Plan 的等价转换&lt;/li&gt;
&lt;li&gt;RBO 设计良好，易于扩展，新的规则可以非常方便地嵌入进 Optimizer&lt;/li&gt;
&lt;li&gt;RBO 目前已经足够好，但仍然需要更多规则来 cover 更多的场景&lt;/li&gt;
&lt;li&gt;优化思路主要是减少参与计算的数据量以及计算本身的代价&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;PushdownPredicate&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;PushdownPredicate 是最常见的用于减少参与计算的数据量的方法。&lt;/p&gt;
&lt;p&gt;前文中直接对两表进行 Join 操作，然后再 进行 Filter 操作。引入 PushdownPredicate 后，可先对两表进行 Filter 再进行 Join，如下图所示。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_predicate_pushdown.png&quot; alt=&quot;Spark SQL RBO Predicate Pushdown&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;当 Filter 可过滤掉大部分数据时，参与 Join 的数据量大大减少，从而使得 Join 操作速度大大提高。&lt;/p&gt;
&lt;p&gt;这里需要说明的是，此处的优化是 LogicalPlan 的优化，从逻辑上保证了将 Filter 下推后由于参与 Join 的数据量变少而提高了性能。另一方面，在物理层面，Filter 下推后，对于支持 Filter 下推的 Storage，并不需要将表的全量数据扫描出来再过滤，而是直接只扫描符合 Filter 条件的数据，从而在物理层面极大减少了扫描表的开销，提高了执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;ConstantFolding&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;本文的 SQL 查询中，Project 部分包含了 100 + 800 + match_score + english_score 。如果不进行优化，那如果有一亿条记录，就会计算一亿次 100 + 80，非常浪费资源。因此可通过 ConstantFolding 将这些常量合并，从而减少不必要的计算，提高执行速度。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_constant_folding.png&quot; alt=&quot;Spark SQL RBO Constant Folding&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;ColumnPruning&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;在上图中，Filter 与 Join 操作会保留两边所有字段，然后在 Project 操作中筛选出需要的特定列。如果能将 Project 下推，在扫描表时就只筛选出满足后续操作的最小字段集，则能大大减少 Filter 与 Project 操作的中间结果集数据量，从而极大提高执行速度。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_column_pruning.png&quot; alt=&quot;Spark SQL RBO Column Pruning&quot;/&gt;&lt;/div&gt;
&lt;p&gt;这里需要说明的是，此处的优化是逻辑上的优化。在物理上，Project 下推后，对于列式存储，如 Parquet 和 ORC，可在扫描表时就只扫描需要的列而跳过不需要的列，进一步减少了扫描开销，提高了执行速度。&lt;/p&gt;
&lt;p&gt;经过如上优化后的 LogicalPlan 如下&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;== Optimized Logical Plan ==
Aggregate [sum(cast(v#493 as bigint)) AS sum(v)#504L]
+- Project [((180 + math_score#501) + english_score#502) AS v#493]
   +- Join Inner, (id#496 = id#500)
      :- Project [id#496]
      :  +- Filter ((isnotnull(age#497) &amp;amp;&amp;amp; (age#497 &amp;gt; 10)) &amp;amp;&amp;amp; isnotnull(id#496))
      :     +- HiveTableRelation `jason`.`people`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#496, age#497, name#498]
      +- Filter isnotnull(id#500)
         +- HiveTableRelation `jason`.`score`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#500, math_score#501, english_score#502]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;得到优化后的 LogicalPlan 后，SparkPlanner 将其转化为 SparkPlan 即物理计划。&lt;/p&gt;
&lt;p&gt;本例中由于 score 表数据量较小，Spark 使用了 BroadcastJoin。因此 score 表经过 Filter 后直接使用 BroadcastExchangeExec 将数据广播出去，然后结合广播数据对 people 表使用 BroadcastHashJoinExec 进行 Join。再经过 Project 后使用 HashAggregateExec 进行分组聚合。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img width=&quot;90%&quot; src=&quot;http://www.jasongj.com/img/spark/spark2_rbo/spark_sql_physical_plan.png&quot; alt=&quot;Spark SQL RBO Column Pruning&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;至此，一条 SQL 从提交到解析、分析、优化以及执行的完整过程就介绍完毕。&lt;/p&gt;
&lt;p&gt;本文介绍的 Optimizer 属于 RBO，实现简单有效。它属于 LogicalPlan 的优化，所有优化均基于 LogicalPlan 本身的特点，未考虑数据本身的特点，也未考虑算子本身的代价。下文将介绍 CBO，它充分考虑了数据本身的特点（如大小、分布）以及操作算子的特点（中间结果集的分布及大小）及代价，从而更好的选择执行代价最小的物理执行计划，即 SparkPlan。&lt;/p&gt;
</description>
<pubDate>Mon, 10 Sep 2018 23:52:00 +0000</pubDate>
<dc:creator>郭俊Jason</dc:creator>
<og:description>本文结合案例详述了 Spark SQL 的工作原理，包括但不限于 Parser，Analyzer，Optimizer，Rule-based optimization等内容。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jasongj/p/9625406.html</dc:identifier>
</item>
<item>
<title>微软改名部又出动啦！微软宣布VSTS改名为Azure DevOps - yan_xiaodi</title>
<link>http://www.cnblogs.com/yanxiaodi/p/9625378.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanxiaodi/p/9625378.html</guid>
<description>&lt;p&gt;本篇为翻译，原文地址：&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/introducing-azure-devops/&quot;&gt;https://azure.microsoft.com/en-us/blog/introducing-azure-devops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：Jamie Cool，Azure DevOps项目管理总监&lt;/p&gt;
&lt;p&gt;今天我们正式宣布Azure DevOps。 在与世界各地的客户和开发人员合作中，DevOps对团队的成功变得越来越重要。 Azure DevOps在提供支持软件开发团队的工具方面拥有超过15年的投资和学习经验。 在过去的一个月中，有超过80,000名Microsoft内部用户和成千上万的客户，无论是小型还是大型团队，都在使用这些服务向您交付产品。&lt;/p&gt;
&lt;p&gt;我们今天宣布的服务涵盖了整个开发生命周期，可帮助开发人员更快地高质量地交付软件。 它们代表了公有云中最完整的产品。 Azure DevOps包括：&lt;/p&gt;
&lt;h2&gt;Azure Pipelines&lt;/h2&gt;
&lt;p&gt;适用于任何语言，平台和云的CI/CD。 能够连接到GitHub或任何Git存储库并持续部署。 &lt;a href=&quot;https://azure.microsoft.com/services/devops/pipelines/&quot;&gt;了解更多&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Azure Boards&lt;/h2&gt;
&lt;p&gt;使用看板，Backlogs，团队仪表板和自定义报告进行强大的工作跟踪。 &lt;a href=&quot;https://azure.microsoft.com/services/devops/boards/&quot;&gt;了解更多&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Azure Artifacts&lt;/h2&gt;
&lt;p&gt;来自公共源和私有源的Maven，npm和NuGet包。 &lt;a href=&quot;https://azure.microsoft.com/services/devops/artifacts/&quot;&gt;了解更多&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Azure Repos&lt;/h2&gt;
&lt;p&gt;为您的项目提供无限制的云托管私人Git仓库。 协作拉取请求，高级文件管理等。 &lt;a href=&quot;https://azure.microsoft.com/services/devops/repos/&quot;&gt;了解更多&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Azure Test Plans&lt;/h2&gt;
&lt;p&gt;一体化计划和探索性测试解决方案。 &lt;a href=&quot;https://azure.microsoft.com/services/devops/test-plans/&quot;&gt;了解更多&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;每个Azure DevOps服务都是开放且可扩展的。它们都适用于任何类型的应用程序，您可以使用任何框架，平台或者云。 您可以将它们作为完整的DevOps解决方案使用，或与其他服务一起使用。 如果您要使用Azure Pipeline从GitHub中的存储库构建和测试Node服务并将其部署到AWS中的容器中，完全没有问题。 Azure DevOps支持公共云和私有云配置。 您可以在我们的云中或您自己的数据中心中运行它们。 无需购买不同的许可证。 了解有关&lt;a href=&quot;https://azure.microsoft.com/pricing/details/devops/azure-devops-services/&quot;&gt;Azure DevOps定价&lt;/a&gt;的更多信息。&lt;/p&gt;
&lt;p&gt;以下是单独使用Azure Pipeline构建GitHub存储库的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/352913/201809/352913-20180911062727317-192566142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此外，这是一个开发人员利用Azure Boards的优势，使用所有Azure DevOps服务的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/352913/201809/352913-20180911062728453-1592261529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;开源项目通过Azure Pipeline获得免费的CI/CD功能&lt;/h2&gt;
&lt;p&gt;我们承诺为所有开发人员提供开放灵活的工具，作为延伸，Azure Pipelines为每个开源项目提供无限时和10个并行作业的免费CI/CD。 借助云托管的Linux，macOS和Windows池，Azure Pipelines非常适合所有类型的项目。&lt;/p&gt;
&lt;p&gt;许多顶级开源项目已经在使用Azure Pipelines 作为CI / CD，例如Atom，CPython，Pipenv，Tox，Visual Studio Code和TypeScript - 这个列表每天都在增长。&lt;/p&gt;
&lt;p&gt;我们希望每个人都拥有极高的服务质量。 因此，我们在与付费客户使用的相同基础架构上运行开源项目。&lt;/p&gt;
&lt;p&gt;Azure Pipelines现在也可以在GitHub Marketplace中使用，可以轻松地为您的GitHub存储库，开源项目或其他方式进行设置。&lt;/p&gt;
&lt;p&gt;以下是Azure Pipeline的简介：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/announcing-azure-pipelines-with-unlimited-ci-cd-minutes-for-open-source/&quot;&gt;了解更多&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Visual Studio Team Services（VSTS）的演变&lt;/h2&gt;
&lt;p&gt;Azure DevOps代表了Visual Studio Team Services（VSTS）的演变。 VSTS用户将自动升级到Azure DevOps项目。 对于现有用户而言，功能上没有任何损失，提供了更多的选择和控制。 作为VSTS标志的端到端可追溯性和集成仍然可以使用。 Azure DevOps服务可以很好地协同工作。 今天就是转型的开始，在接下来的几个月里，现有用户将开始看到变化。 这意味着什么？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网址将从abc.visualstudio.com更改为dev.azure.com/abc。 我们将支持来自visualstudio.com网址的重定向，因此不会出现错误的链接。&lt;/li&gt;
&lt;li&gt;作为此更改的一部分，服务具有更新的用户体验。 我们将继续根据预览的反馈迭代体验。 今天开始我们默认为新用户启用它。 在接下来的几个月中，我们将默认为现有用户启用它。&lt;/li&gt;
&lt;li&gt;内部部署Team Foundation Server（TFS）的用户将继续根据Azure DevOps中的实时功能接收更新。 从下一版本的TFS开始，该产品将被称为Azure DevOps Server，并将通过我们正常的更新频率继续得到改进。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;了解&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/release-notes/2018/sep-10-azure-devops-launch&quot;&gt;如何为您现有的VSTS组织启用这些更改&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;了解更多&lt;/h2&gt;
&lt;p&gt;要了解有关Azure DevOps的更多信息，请加入我们：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主题演讲：观看我们的实时Azure DevOps主题演讲，时间为2018年9月11日太平洋时间上午8:00 - 9:30。&lt;/li&gt;
&lt;li&gt;现场培训：2018年9月17日太平洋时间上午8:30至下午2:30，参加我们的现场研讨会，并提供互动式问答。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;您可以在我们的活动页面上按时参加并观看实时视频流。 您还可以在该页面上找到更多其他点播视频和其他资源，以帮助您入门。&lt;/p&gt;
&lt;p&gt;向您和您的团队提供Azure DevOps，我们感到非常兴奋。 我们迫不及待地想看看你用它创造了多么神奇的东西。&lt;/p&gt;
</description>
<pubDate>Mon, 10 Sep 2018 22:30:00 +0000</pubDate>
<dc:creator>yan_xiaodi</dc:creator>
<og:description>本篇为翻译，原文地址：https://azure.microsoft.com/en-us/blog/introducing-azure-devops/ 作者：Jamie Cool，Azure DevO</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanxiaodi/p/9625378.html</dc:identifier>
</item>
<item>
<title>Zookeeper系列四：Zookeeper实现分布式锁、Zookeeper实现配置中心 - 小不点啊</title>
<link>http://www.cnblogs.com/leeSmall/p/9614601.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leeSmall/p/9614601.html</guid>
<description>&lt;p&gt;分布式锁主要用于在分布式环境中保证数据的一致性。&lt;/p&gt;
&lt;p&gt;包括跨进程、跨机器、跨网络导致共享资源不一致的问题。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;1. 分布式锁的实现思路&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1227483/201809/1227483-20180904210313049-1730833494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种实现会有一个缺点，即当有很多进程在等待锁的时候，在释放锁的时候会有很多进程就过来争夺锁，这种现象称为 &lt;strong&gt;“惊群效应”&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;2. 分布式锁优化后的实现思路&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1227483/201809/1227483-20180904222105722-328998635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3. Zookeeper分布式锁的代码实现&lt;/h2&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;1）安装Zookeeper，具体参考我前面的我文章&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/leeSmall/p/9563547.html&quot;&gt;Zookeeper系列一：Zookeeper介绍、Zookeeper安装配置、ZK Shell的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2）新建一个maven项目ZK-Demo,然后在pom.xml里面引入相关的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.101tec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.1 Zookeeper分布式锁的核心代码实现&lt;/h3&gt;
&lt;p&gt;实现逻辑参考“&lt;strong&gt;2. 分布式锁优化后的实现思路&lt;/strong&gt;”中的流程图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.lock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.locks.Condition;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.locks.Lock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.IZkDataListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.ZkClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.serialize.SerializableSerializer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: Zookeeper分布式锁的核心代码实现
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月4日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DistributedLock &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Lock {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(DistributedLock.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ZOOKEEPER_IP_PORT = &quot;192.168.152.130:2181&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOCK_PATH = &quot;/LOCK&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ZkClient client = &lt;span&gt;new&lt;/span&gt; ZkClient(ZOOKEEPER_IP_PORT, 4000, 4000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SerializableSerializer());

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CountDownLatch cdl;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String beforePath;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前请求的节点前一个节点&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String currentPath;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前请求的节点

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断有没有LOCK目录，没有则创建&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DistributedLock() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.exists(LOCK_PATH)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.createPersistent(LOCK_PATH);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; lock() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试去获取分布式锁失败&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;tryLock()) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对次小节点进行监听&lt;/span&gt;
&lt;span&gt;            waitForLock();
            lock();
        } 
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            logger.info(Thread.currentThread().getName() &lt;/span&gt;+ &quot; 获得分布式锁！&quot;&lt;span&gt;);
        }
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; tryLock() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果currentPath为空则为第一次尝试加锁，第一次加锁赋值currentPath&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (currentPath == &lt;span&gt;null&lt;/span&gt; || currentPath.length() &amp;lt;= 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个临时顺序节点&lt;/span&gt;
            currentPath = &lt;span&gt;this&lt;/span&gt;.client.createEphemeralSequential(LOCK_PATH + '/', &quot;lock&quot;&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot;----------------------------&amp;gt;&quot; +&lt;span&gt; currentPath);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有临时节点并排序，临时节点名称为自增长的字符串如：0000000400&lt;/span&gt;
        List&amp;lt;String&amp;gt; childrens = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.getChildren(LOCK_PATH);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由小到大排序所有子节点&lt;/span&gt;
&lt;span&gt;        Collections.sort(childrens);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断创建的子节点/LOCK/Node-n是否最小,即currentPath,如果当前节点等于childrens中的最小的一个就占用锁&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (currentPath.equals(LOCK_PATH + '/' + childrens.get(0&lt;span&gt;))) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        } 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找出比创建的临时顺序节子节点/LOCK/Node-n次小的节点,并赋值给beforePath&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; wz = Collections.binarySearch(childrens, currentPath.substring(6&lt;span&gt;));
            beforePath &lt;/span&gt;= LOCK_PATH + '/' + childrens.get(wz - 1&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待锁,对次小节点进行监听&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; waitForLock() {
        IZkDataListener listener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkDataListener() {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataDeleted(String dataPath) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                logger.info(Thread.currentThread().getName() &lt;/span&gt;+ &quot;:捕获到DataDelete事件！---------------------------&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cdl != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    cdl.countDown();
                }
            }

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataChange(String dataPath, Object data) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

            }
        };

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对次小节点进行监听,即beforePath-给排在前面的的节点增加数据删除的watcher&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.subscribeDataChanges(beforePath, listener);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.exists(beforePath)) {
            cdl &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                cdl.await();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                e.printStackTrace();
            }
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.client.unsubscribeDataChanges(beforePath, listener);
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;完成业务逻辑以后释放锁&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlock() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除当前临时节点&lt;/span&gt;
&lt;span&gt;        client.delete(currentPath);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ==========================================&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; lockInterruptibly() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryLock(&lt;span&gt;long&lt;/span&gt; time, TimeUnit unit) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Condition newCondition() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 3.2 在业务里面使用分布式锁&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.lock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.locks.Lock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: 在业务里面使用分布式锁
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月4日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; OrderCodeGenerator ong = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderCodeGenerator();

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Logger logger = LoggerFactory.getLogger(OrderServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同时并发的线程数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; NUM = 10&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按照线程数初始化倒计数器,倒计数器&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CountDownLatch(NUM);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Lock lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DistributedLock();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建订单接口&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createOrder() {
        String orderCode &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;准备获取锁&lt;/span&gt;
&lt;span&gt;        lock.lock();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取订单编号&lt;/span&gt;
            orderCode =&lt;span&gt; ong.getOrderCode();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: handle exception&lt;/span&gt;
        } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;完成业务逻辑以后释放锁&lt;/span&gt;
&lt;span&gt;            lock.unlock();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ……业务代码&lt;/span&gt;
&lt;span&gt;
        logger.info(&lt;/span&gt;&quot;insert into DB使用id：=======================&amp;gt;&quot; +&lt;span&gt; orderCode);
    }

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等待其他线程初始化&lt;/span&gt;
&lt;span&gt;            cdl.await();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建订单&lt;/span&gt;
&lt;span&gt;        createOrder();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt;= NUM; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按照线程数迭代实例化线程&lt;/span&gt;
            &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderServiceImpl()).start();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个线程，倒计数器减1&lt;/span&gt;
&lt;span&gt;            cdl.countDown();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.lock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderCodeGenerator {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自增长序列&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; i = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按照“年-月-日-小时-分钟-秒-自增长序列”的规则生成订单编号&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getOrderCode() {
        Date now &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        SimpleDateFormat sdf &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sdf.format(now) + ++&lt;span&gt;i;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 1. 首先在zookeeper里面创建一个Jdbc的节点，在下面分别创建4个子节点/Jdbc/url、/Jdbc/uname、/Jdbc/password、/Jdbc/driver&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create /Jdbc ''
create /Jdbc/url jdbc.mysql://192.168.152.1/dbspread 
create /Jdbc/uname root
create /Jdbc/password 123456
create /Jdbc/driver com.mysql.jdbc.Driver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：/Jdbc/url这个节点的值是错的 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180910004058766-1402852720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180910004122529-139086322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 2. 新建一个zkdemo的maven的web项目&lt;/h2&gt;
&lt;p&gt;项目结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180911001530392-699151999.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.1 在pom.xml文件里面引入下面依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.study.demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkdemo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkdemo Maven Webapp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.8.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.8.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.4.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.101tec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;curator-framework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;curator-recipes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.tomcat&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tomcat-catalina&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;7.0.39&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.zaxxer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;HikariCP&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.7.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.41&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7.25&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jcl-over-slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7.25&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkdemo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2 新建一个zookeeper配置中心类,从zookeeper动态获取数据库配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.TreeCache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.TreeCacheEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.TreeCacheListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.context.ContextLoader;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.context.WebApplicationContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zaxxer.hikari.HikariDataSource;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: zookeeper配置中心类,从zookeeper动态获取数据库配置
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月10日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZookeeperConfigurerCentral {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;curator客户端&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CuratorFramework zkClient;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;curator事件监听&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TreeCache treeCache;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;zookeeper的ip和端口&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String zkServers;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;zookeeper上的/Jdbc路径&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String zkPath;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;超时设置&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sessionTimeout;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取zookeeper上的数据库配置文件放到这里&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Properties props;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ZookeeperConfigurerCentral(String zkServers, String zkPath, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sessionTimeout) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.zkServers =&lt;span&gt; zkServers;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.zkPath =&lt;span&gt; zkPath;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sessionTimeout =&lt;span&gt; sessionTimeout;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.props = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化curator客户端&lt;/span&gt;
&lt;span&gt;        initZkClient();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从zookeeper的Jdbc节点下获取数据库配置存入props&lt;/span&gt;
&lt;span&gt;        getConfigData();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对zookeeper上的数据库配置文件所在节点进行监听，如果有改变就动态刷新props&lt;/span&gt;
&lt;span&gt;        addZkListener();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化curator客户端&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initZkClient() {
        zkClient &lt;/span&gt;=&lt;span&gt; CuratorFrameworkFactory.builder().connectString(zkServers).sessionTimeoutMs(sessionTimeout)
                .retryPolicy(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        zkClient.start();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从zookeeper的Jdbc节点下获取数据库配置存入props&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getConfigData() {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            List&lt;/span&gt;&amp;lt;String&amp;gt; list =&lt;span&gt; zkClient.getChildren().forPath(zkPath);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String key : list) {
                String value &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(zkClient.getData().forPath(zkPath + &quot;/&quot; +&lt;span&gt; key));
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.length() &amp;gt; 0&lt;span&gt;) {
                    props.put(key, value);
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对zookeeper上的数据库配置文件所在节点进行监听，如果有改变就动态刷新props&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addZkListener() {
        TreeCacheListener listener &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TreeCacheListener() {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; childEvent(CuratorFramework client, TreeCacheEvent event) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (event.getType() ==&lt;span&gt; TreeCacheEvent.Type.NODE_UPDATED) {
                    getConfigData();
                    WebApplicationContext ctx &lt;/span&gt;=&lt;span&gt; ContextLoader.getCurrentWebApplicationContext();
                    HikariDataSource dataSource &lt;/span&gt;= (HikariDataSource) ctx.getBean(&quot;dataSource&quot;&lt;span&gt;);
                    System.out.println(&lt;/span&gt;&quot;================&quot;+props.getProperty(&quot;url&quot;&lt;span&gt;));
                    dataSource.setJdbcUrl(props.getProperty(&lt;/span&gt;&quot;url&quot;&lt;span&gt;));
                    dataSource.setUsername(props.getProperty(&lt;/span&gt;&quot;uname&quot;&lt;span&gt;));
                    dataSource.setPassword(props.getProperty(&lt;/span&gt;&quot;password &quot;&lt;span&gt;));
                    dataSource.setDriverClassName(props.getProperty(&lt;/span&gt;&quot;driver &quot;&lt;span&gt;));
                }
            }
        };

        treeCache &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TreeCache(zkClient, zkPath);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            treeCache.start();
            treeCache.getListenable().addListener(listener);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Properties getProps() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; props;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setZkServers(String zkServers) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.zkServers =&lt;span&gt; zkServers;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setZkPath(String zkPath) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.zkPath =&lt;span&gt; zkPath;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSessionTimeout(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; sessionTimeout) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sessionTimeout =&lt;span&gt; sessionTimeout;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3 新建一个加载props里面的数据库配置的类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: 加载props里面的数据库配置,这个类等价于以前在xml文件里面的配置：
* &amp;lt;context:property-placeholder location=&quot;classpath:config/jdbc_conf.properties&quot;/&amp;gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月10日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZookeeperPlaceholderConfigurer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; PropertyPlaceholderConfigurer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ZookeeperConfigurerCentral zkConfigurerCentral;

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        System.out.println(zkConfigurerCentral.getProps());
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.processProperties(beanFactoryToProcess, zkConfigurerCentral.getProps());
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setzkConfigurerCentral(ZookeeperConfigurerCentral zkConfigurerCentral) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.zkConfigurerCentral =&lt;span&gt; zkConfigurerCentral;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4 在/zkdemo/src/main/webapp/WEB-INF/config/applicationContext.xml配置2.2和2.3新建的两个主类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:annotation-config &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.study.demo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;通过构造函数注入zkServers、sessionTimeout、zkPath从zookeeper动态获取数据库配置  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;zkConfigurerCentral&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.study.demo.config.ZookeeperConfigurerCentral&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;zkServers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;192.168.152.130:2181&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sessionTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;zkPath&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/Jdbc&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这个类等价于以前在xml文件里面的配置：
    &amp;lt;context:property-placeholder location=&quot;classpath:config/jdbc_conf.properties&quot;/&amp;gt;  加载
    props里面的数据库配置
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;zkPlaceholderConfigurer&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.study.demo.config.ZookeeperPlaceholderConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;zkConfigurerCentral&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;zkConfigurerCentral&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;ignoreUnresolvablePlaceholders&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;order&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;jdbcTemplate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.zaxxer.hikari.HikariDataSource&quot;&lt;/span&gt;&lt;span&gt;
        destroy-method&lt;/span&gt;&lt;span&gt;=&quot;shutdown&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClassName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbcUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${uname}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 连接只读数据库时配置为true， 保证安全 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;readOnly&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connectionTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;30000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;idleTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;600000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
            wait_timeout参数（show variables like '%timeout%';） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxLifetime&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1800000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumPoolSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;15&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5 在com.study.demo.controller新建测试类&lt;/h3&gt;
&lt;p&gt;测试类1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_844b415d-adcc-4bfa-b926-7095e106b4af&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_844b415d-adcc-4bfa-b926-7095e106b4af&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_844b415d-adcc-4bfa-b926-7095e106b4af&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderModel &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; orderId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; brandId;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getOrderId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; orderId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderId =&lt;span&gt; orderId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getBrandId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; brandId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setBrandId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; brandId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.brandId =&lt;span&gt; brandId;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试类2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_a0c513a1-8fcc-46a8-b25a-2991084f55ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0c513a1-8fcc-46a8-b25a-2991084f55ed&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0c513a1-8fcc-46a8-b25a-2991084f55ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.ResultSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.SQLException;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.core.JdbcTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.core.RowMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Repository;

@Repository
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderDao {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JdbcTemplate jdbcTemplate;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OrderModel findById() {
        String sql &lt;/span&gt;= &quot;select * from tbl_order where order_id = 1&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; jdbcTemplate.queryForObject(sql, &lt;span&gt;new&lt;/span&gt; RowMapper&amp;lt;OrderModel&amp;gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; OrderModel mapRow(ResultSet rs, &lt;span&gt;int&lt;/span&gt; rowNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
                OrderModel payment &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderModel();
                payment.setOrderId(rs.getInt(&lt;/span&gt;&quot;order_id&quot;&lt;span&gt;));
                payment.setBrandId(rs.getInt(&lt;/span&gt;&quot;brand_id&quot;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; payment;
            }
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试类3：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_121f5a2c-395c-48b0-bf89-ee87e12dceaa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_121f5a2c-395c-48b0-bf89-ee87e12dceaa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_121f5a2c-395c-48b0-bf89-ee87e12dceaa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderDao dao;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OrderModel getById() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dao.findById();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试类4：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_dfe6c2cb-fe3d-4708-8964-2c3deaa52d26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dfe6c2cb-fe3d-4708-8964-2c3deaa52d26&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dfe6c2cb-fe3d-4708-8964-2c3deaa52d26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;

@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderService service;

    @ResponseBody
    @RequestMapping(value &lt;/span&gt;= &quot;/test&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String test() {
        OrderModel p &lt;/span&gt;=&lt;span&gt; service.getById();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; p.getBrandId() + &quot;&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;2.6 其他附加配置和数据库脚本&lt;/h3&gt;
&lt;p&gt;/zkdemo/src/main/webapp/WEB-INF/config/log4j.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8b19fd03-2b0c-4629-85d0-a12abddcaa7f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8b19fd03-2b0c-4629-85d0-a12abddcaa7f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8b19fd03-2b0c-4629-85d0-a12abddcaa7f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;log4j.rootLogger=INFO,console
log4j.logger.org.apache.zookeeper=DEBUG
log4j.logger.org.apache.curator=DEBUG
log4j.logger.java.lang.Exception=INFO


log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{MM-dd HH:mm:ss.SSS} [%c:%p] %m%n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;/zkdemo/src/main/webapp/WEB-INF/config/spring-mvc.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ca4dca4f-e1b2-4115-84b4-684f5947a96b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ca4dca4f-e1b2-4115-84b4-684f5947a96b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ca4dca4f-e1b2-4115-84b4-684f5947a96b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;span&gt; xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:default-servlet-handler &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven
        &lt;/span&gt;&lt;span&gt;content-negotiation-manager&lt;/span&gt;&lt;span&gt;=&quot;contentNegotiationManager&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.study.demo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:include-filter &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;annotation&quot;&lt;/span&gt;&lt;span&gt;
            expression&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.stereotype.Controller&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:exclude-filter &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;annotation&quot;&lt;/span&gt;&lt;span&gt;
            expression&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.stereotype.Service&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;stringHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;supportedMediaTypes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.MediaType&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;plain&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;mappingJacksonHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean
        &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;messageConverters&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;stringHttpMessageConverter&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;mappingJacksonHttpMessageConverter&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;contentNegotiationManager&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mediaTypes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;html&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;pdf&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;application/pdf&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;xsl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;application/vnd.ms-excel&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;xml&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;application/xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;json&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;application/json&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultContentType&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewResolver&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.ContentNegotiatingViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;order&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;contentNegotiationManager&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;contentNegotiationManager&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewResolvers&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewClass&quot;&lt;/span&gt;&lt;span&gt;
                        value&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.JstlView&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/pages/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultViews&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;extractValueFromSingleKeyModel&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;/zkdemo/src/main/webapp/WEB-INF/web.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f6a935e6-ada3-4aa7-b715-0030479cb6c0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f6a935e6-ada3-4aa7-b715-0030479cb6c0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f6a935e6-ada3-4aa7-b715-0030479cb6c0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;WebApp_ID&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;2.5&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkdemo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Zookeeper Demo Application&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Context parameters definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;webAppRootKey&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkdemo.root&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4jConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/WEB-INF/config/log4j.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4jRefreshInterval&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;60000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/WEB-INF/config/applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/WEB-INF/config/spring-mvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Listener definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.util.Log4jConfigListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Filter definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;characterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;forceEncoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;characterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Web Session definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-timeout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-timeout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Redirect page definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;403&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/403.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;404&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/404.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;500&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/500.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; First page definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;============================================================== &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.htm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;数据库脚本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `tbl_order` (
  `order_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `brand_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;品牌id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`order_id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;MyISAM AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8 COMMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;订单表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; tbl_order &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 2.7 启动项目在浏览器输入地址http://localhost:8080/zkdemo/test查看效果&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180910004001045-1777519257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到报错了，这是因为我们之前设置了错误的url&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;Jdbc&lt;span&gt;/&lt;/span&gt;url jdbc.mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;152.1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dbspread 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改url为正确的 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;Jdbc&lt;span&gt;/&lt;/span&gt;url jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;152.1&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;dbspread
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180911001949567-1461994358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 再次输入地址访问查看效果：&lt;/p&gt;
&lt;p&gt;http://localhost:8080/zkdemo/test&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180910225016091-871374545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;可以看到在没有重启服务的情况下，可以正常访问获取到值了，这是因为zookeeper的数据库的配置动态刷新到服务了！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 10 Sep 2018 16:32:00 +0000</pubDate>
<dc:creator>小不点啊</dc:creator>
<og:description>一、Zookeeper实现分布式锁 分布式锁主要用于在分布式环境中保证数据的一致性。 包括跨进程、跨机器、跨网络导致共享资源不一致的问题。 1. 分布式锁的实现思路 说明： 这种实现会有一个缺点，即当</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leeSmall/p/9614601.html</dc:identifier>
</item>
<item>
<title>实现MongoDB读写分离的“读偏好”介绍 - 东山絮柳仔</title>
<link>http://www.cnblogs.com/xuliuzai/p/9624508.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuliuzai/p/9624508.html</guid>
<description>&lt;p&gt;在某些情况下，将读请求发送给副本集的备份节点是合理的，例如，单个服务器无法处理应用的读压力，就可以把查询请求路由到可复制集中的多台服务器上。现在绝大部分MongoDB驱动支持读偏好设置（read preference；或翻译为读取首选项），用来告诉驱动从特定的节点读取数据。&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;1  &lt;/strong&gt;&lt;strong&gt;读偏好选项&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;primary — 这是默认的设置，表明只从可复制集的主节点读取数据，因此具有强一致性。如果可复制集有问题，并且没有可选举的从节点，就表示出现错误。&lt;/p&gt;
&lt;p&gt;premaryPreferred — 设置了此参数的驱动会从主节点读取数据，除非某些原因使主节点不可用或者没有主节点，此时它会从从节点读取数据。此种设置下，读请求无法保证一致性。&lt;/p&gt;
&lt;p&gt;secondary — 这个设置告诉驱动应该一直从从节点读取数据。这种设置对于我们想确保读请求不会影响主节点的写入请求时非常有用。如果没有可用的从节点，读请求会抛出异常。&lt;/p&gt;
&lt;p&gt;secondarypreferred—读请求会发出到从节点，除非没有从节点可用，此时才会从主节点读取。&lt;/p&gt;
&lt;p&gt;nearest –驱动会尝试从最近的可复制集成员节点读取读取数据，通过网络延迟判断。可以是主节点也可以是从节点。因此读请求只会发送给驱动认为最快通信的节点。&lt;/p&gt;
&lt;p&gt;primary是唯一一个可以确保读一致的模式。因为写请求首先在主节点完成，从服务器的更新会有些延迟，所以可能在从节点无法找到刚刚在主节点写入的文档数据。&lt;/p&gt;
&lt;p&gt;汇总以上知识，各偏好设置下读取数据请求所发往的节点如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/780228/201809/780228-20180910235204059-389264792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;2  &lt;/strong&gt;&lt;strong&gt;最大过期时间&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MongoDB 3.4及更新的版本新增了maxStalenessSeconds设置。&lt;/p&gt;
&lt;p&gt;副本集的从节点可能因为网络阻塞、磁盘吞吐低、长时间执行操作等，导致其落后于主节点。读设置maxStalenessSeconds选项让你对从节点读取定义了最大落后或“过期”时间。当从节点估计过期时间超过了maxStalenessSeconds,客户端会停止使用它进行读操作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;最大过期和primary模式不匹配，只有选择从节点成员读取操作才能应用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当选择了使用maxStalenessSeconds进行读操作的服务端，客户端会通过比较从节点和主节点的最后一次写时间来估计从节点的过期程度。客户端会把连接指向估计落后小于等于maxStalenessSeconds的从节点。如果没有主节点，客户端使用从节点间的最近一次写操作来比较。&lt;/p&gt;
&lt;p&gt;默认是没有最大过期时间并且客户端也不会在指向读操作时考虑从节点的落后。&lt;/p&gt;
&lt;p&gt;必须定义maxStalenessSeconds的值大于等于90秒：定义一个更小的值会抛出异常。客户端通过定期检查每个副本集成员最后一次写时间来估计副本集过期程度。因为检查不频繁，所以估计是粗略的。&lt;strong&gt;因此，客户端&lt;span&gt;不能&lt;/span&gt;强制maxStalenessSecconds小于90秒。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;3  &lt;/strong&gt;&lt;strong&gt;连接字符串格式&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;副本集连接字符串格式&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em&gt;mongodb://username:password@host1:port1,host2:port2[,...,hostN:portN]/database?options&lt;/em&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;options是连接配置中的可选项，replicaSet、readPreference、maxStalenessSeconds是其中的一个子项。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;下面我们举一个例子来说明字符串是怎么配置的，测试环境的副本集信息如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td nowrap=&quot;nowrap&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;副本集名称&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td nowrap=&quot;nowrap&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;节点角色&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td nowrap=&quot;nowrap&quot; width=&quot;116&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;节点IP&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td nowrap=&quot;nowrap&quot; width=&quot;67&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;端口&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;3&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;left&quot;&gt;Reptest&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;left&quot;&gt;主服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;116&quot;&gt;
&lt;p align=&quot;left&quot;&gt;172.171.X.XX1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;67&quot;&gt;
&lt;p align=&quot;right&quot;&gt;27017&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;left&quot;&gt;副本节点&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;116&quot;&gt;
&lt;p align=&quot;left&quot;&gt;172.171.X.XX2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;67&quot;&gt;
&lt;p align=&quot;right&quot;&gt;27017&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;left&quot;&gt;仲裁节点&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;116&quot;&gt;
&lt;p align=&quot;left&quot;&gt;172.171.X.XX3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;bottom&quot; nowrap=&quot;nowrap&quot; width=&quot;67&quot;&gt;
&lt;p align=&quot;right&quot;&gt;27017&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; 账号信息如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;Username&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;Password&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;DBName&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;109&quot;&gt;
&lt;p align=&quot;left&quot;&gt;mongousertest&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;184&quot;&gt;
&lt;p align=&quot;left&quot;&gt;testuserpwd&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p align=&quot;left&quot;&gt;mongotestdb&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果希望程序读请求路由到从节点secondary，100秒为节点数据失效时间，此时C#程序中connectionStr的字符串可以设置如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em&gt;stringconnectionStr = &quot;mongodb://mongousertest:testuserpwd@172.171.x.xx1:27017,172.&lt;/em&gt;171.x.xx2:&lt;em&gt;27017&lt;/em&gt;/mongotestdb?replicaSet=reptest&amp;amp;readPreference=secondary&amp;amp;maxStalenessSeconds=100&quot;;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em&gt; &lt;/em&gt;&lt;strong&gt;本文版权归作者所有，未经作者同意不得转载,谢谢配合！！！&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 10 Sep 2018 16:10:00 +0000</pubDate>
<dc:creator>东山絮柳仔</dc:creator>
<og:description>在某些情况下，将读请求发送给副本集的备份节点是合理的，例如，单个服务器无法处理应用的读压力，就可以把查询请求路由到可复制集中的多台服务器上。现在绝大部分MongoDB驱动支持读偏好设置（read pr</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuliuzai/p/9624508.html</dc:identifier>
</item>
<item>
<title>EF和Dapper之争的关键 - 自由飞</title>
<link>http://www.cnblogs.com/freeflying/p/9624431.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freeflying/p/9624431.html</guid>
<description>&lt;p&gt;突然发现园子里为EF和Dapper的事闹翻了天。&lt;/p&gt;
&lt;p&gt;讲到EF对Mysql的支持，我在一边偷着乐：还好我用的是NHibernate，对Mysql的支持可好啦，哈哈……&lt;/p&gt;
&lt;p&gt;咳咳，这样做当然是不对的，应该批评。我检讨三秒钟，先。&lt;/p&gt;

&lt;p&gt;我看了文章，也看了评论（但没看完）。老实讲，我觉得&lt;a href=&quot;https://home.cnblogs.com/u/sanshi/&quot;&gt;三生石上&lt;/a&gt;只有一句话是站得住脚的：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;真正出现问题的不是 Entity Framework，而是我们，好吧，就明说了吧：我们太想念 SQL 语句了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他的，嗯，已经有很多人说了很多了，我就不凑热闹了。&lt;/p&gt;

&lt;p&gt;不知道大家还记不记得我以前说过：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;虽然我们有C#这种面向对象的语言，但实际上我们很多开发人员仍然是“面向数据库”编程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了避免引发更大的争论，我必须首先声明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象和面向数据库并无优劣高下之分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象和面向数据库并无优劣高下之分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象和面向数据库并无优劣高下之分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;重要的事说三遍。&lt;/p&gt;

&lt;p&gt;选择Dapper，甚至ADO.NET拼SQL，本质上就是“面向数据库”编程。什么意思呢？所有的开发过程是以数据库为基础的，整个系统的架构是以数据库的库表结构为依托的。当遇到一个业务逻辑的时候，首先想到的是这数据放在哪几张表里的，用什么SQL语句把它们给取出来，然后才想着怎么把这些数据封装成类……这就是我所谓的“面向数据库”编程。&lt;/p&gt;
&lt;p&gt;那么与之相对的，什么是“面向对象编程”呢？&lt;/p&gt;
&lt;p&gt;忘掉数据库，尤其是关系型数据库，我以前讲过，你可以想象成这数据最终是存放在XML文件里的、存放在NoSQL里的、存放在其他什么什么磁盘里面的。当然，最理想的，是有一个“对象数据库”，所有的数据都是以对象形式存放的，数据与数据之间就是对象与对象的关系，有继承有引用，都是Load出来.出来的。总之，SQL语句完全不管用。所以，遇到一个业务逻辑的时候，首先想到的就是这些数据存放在哪些对象里面，怎么加载这些对象……&lt;/p&gt;
&lt;p&gt;明白了吧？这才是“面向对象”的思路！&lt;/p&gt;
&lt;p&gt;哪里有什么表，哪里有什么SQL？我们眼里只有对象！万物皆对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/49387/201809/49387-20180910223811409-373932456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但是，世上的事情啊，最怕就是这个但是！&lt;/p&gt;
&lt;p&gt;没有“对象数据库”，只有“关系数据库”啊？这是一个始终无法回避的问题：几乎所有的企业级应用，都是以关系数据库为存储器的。这下就麻烦了，怎么办呢？&lt;/p&gt;
&lt;p&gt;面向对象的拥趸们，就推出了ORM（Object Relational Map），在“对象”和关系数据库“表”之间做一个映射，希望能解决这个问题。大家一定要明白，ORM是O开头的，其核心其要义，是把object映射成Relational的表，Object是第一位的。而不是很多同学那样，把ORM当成一个SQL语句生成器或者SQL语言的封装，其作用就是“不写SQL”。不是这样的，本末倒置了呀，同学！那么，从这个意义上讲，Dapper就不算是一个ORM（不做定义上的争论，大家理解意思就行），他就是一个理想的DBHelper而已。&lt;/p&gt;
&lt;p&gt;相应的，EF作为一个沉重的ORM工具，就被嫌弃了。这是自然而然的，我不知道我说明白了没有，当你的思维是“面向数据库”的时候，ORM确实是一种负担，不仅仅是因为它的“沉重”，更因为它遮蔽了SQL实现的细节：看不到SQL，我心里不踏实啊！还要特么的设个断点查查log看看生成的SQL啥样子的，这就憋屈了……&lt;/p&gt;
&lt;p&gt;而且ORM在复杂对象映射、复杂查询的时候，确实会出问题，现在这工具还不能说是完美。&lt;/p&gt;
&lt;p&gt;那咋整呢？&lt;/p&gt;

&lt;p&gt;我觉得这就是一个个人（或者团队）的喜好问题了。&lt;/p&gt;
&lt;p&gt;“面向数据库”本身其实没问题。基于数据库基于表结构，CRUD，又怎么啦？回归代码的本质，也符合KISS（Keep It Stupid Simple）原则啊！不计其数的成功项目都这样完成的，而且也一直良好运作。相反的，完全的“面向数据库”设计架构的，崩了的项目也不少吧？&lt;/p&gt;
&lt;p&gt;但是，我个人而言，更倾向于“面向对象”的思路和方向。主要有这么几个原因：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;不喜欢SQL。这恐怕是决定性的原因，尤其憎恨存储过程，尤其尤其受不了那种几百上千行的存储过程，崩溃了一样的感觉。“面向数据库”的极致就是“存储过程编程”，假如都走极端，相比较而言，“面向对象”的极致我觉得都能接受——就全部代码见不着一行SQL嘛，没啥。&lt;/li&gt;
&lt;li&gt;ORM再不断的进步。EF我不熟，NHibernate5.0的很多新特性让我真的是眼前一亮，最鼓舞人心的就是Colletion上进行Query() 可以生成SQL查询而不用把整个collection加载进来。这是我期盼了不知多久的一个特性，太爽了！以前很多为了性能而做的walkaround就不需要了，代码会非常的清晰。我相信，ORM工具以后会一直进步，直到无限接近于完美，或者诞生“对象数据库”。&lt;/li&gt;
&lt;li&gt;太多太多的工具或手段是必须和“面向对象”配合的。比如说单元测试，我不知道其他人怎么玩的，反正我的单元测试是隔离了数据库的，测试用的数据，直接new就OK了，有快有轻巧。混入了SQL语句或存储过程，必须连着数据库，这单元测试咋做？我还真不知道。另外的，领域驱动，“面向数据库”也没办法玩，你和“领域专家”讲表结构和SQL，人家会崩溃的，“面向数据库”就根本不需要BLL层。把数据从数据库取出来，封装成类，何必呢？多此一举啊，完全是。就算要封装，我觉得强类型的DataSet就完全够用了。但DateSet这些已经凉了，说白了，“面向数据库编程”已经就那个样子了，能用，但没啥发展了；但ORM，还有很多人很多公司在努力的完善，还有进步的空间。&lt;/li&gt;
&lt;li&gt;ORM保留了你在特殊情况下使用原生SQL的权利。实在不行的时候，还是可以自己写SQL的呀！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;差不多了，我觉得可以简单总结一下，希望同学们：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;能够从战略高度上理解“面向对象”和“面向数据库”的区别；&lt;/li&gt;
&lt;li&gt;明白ORM的不足，但要对ORM的发展抱有信心。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;咳咳，这腔调越来越像老师了。是的，&lt;a href=&quot;http://17bang.ren/Article/Category-13&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;text-primary&quot;&gt;人人都是程序猿&lt;/span&gt;&lt;/a&gt; 已经开课很久了，今天是第18讲，入门型普及型课程，有兴趣的同学可以听一听，或者给周围的新人宣传宣传，先谢了！&lt;/p&gt;
</description>
<pubDate>Mon, 10 Sep 2018 15:59:00 +0000</pubDate>
<dc:creator>自由飞</dc:creator>
<og:description>突然发现园子里为EF和Dapper的事闹翻了天。 讲到EF对Mysql的支持，我在一边偷着乐：还好我用的是NHibernate，对Mysql的支持可好啦，哈哈…… 咳咳，这样做当然是不对的，应该批评。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/freeflying/p/9624431.html</dc:identifier>
</item>
<item>
<title>SpringCloud(9)---mysql实现配置中心 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9624386.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9624386.html</guid>
<description>&lt;p&gt;      本公司配置数据的管理是通过mysql进行配置管理，因为已经搭建好了，所以自己动手重新搭建一遍，熟悉整个流程。有关项目源码后期会补上github地址&lt;/p&gt;
&lt;p&gt;微服务要实现集中管理微服务配置、&lt;span&gt;不同环境不同配置&lt;/span&gt;、&lt;span&gt;运行期间也可动态调整&lt;/span&gt;、&lt;span&gt;配置修改后可以自动更新的需求&lt;/span&gt;，Spring Cloud Config同时满足了以上要求。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、项目搭建&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;本次主要用三个微服务&lt;/p&gt;
&lt;p&gt;（1）Eureka-server： 7001 注册中心&lt;/p&gt;
&lt;p&gt;（2）config-server ： 5001 配置中心&lt;/p&gt;
&lt;p&gt;（3）product-server ： 8001 商品微服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201809/1090617-20180910232534543-36360615.png&quot; alt=&quot;&quot; width=&quot;982&quot; height=&quot;110&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1、Eureka-server注册中心&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;注册中心很简单，这里不在重复些，注册中心没有变化。可以看之前写的博客 : SpringCloud(3)---Eureka服务注册与发现&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、配置中心微服务&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    &lt;strong&gt;&lt;span&gt;1、pom.xml&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;服务中心jar包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置中心jar包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-config-server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;连接msql数据库相关jar包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.21&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   &lt;span&gt;&lt;strong&gt;&lt;span&gt;2、application.yml&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;服务名称&lt;/span&gt;
&lt;span&gt;&lt;span&gt; server&lt;/span&gt;:
   &lt;span&gt;port&lt;/span&gt;: &lt;/span&gt;5001

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;连接配置信息&lt;/span&gt;
&lt;span&gt;&lt;span&gt; spring&lt;/span&gt;:
   &lt;span&gt;application&lt;/span&gt;:
     &lt;span&gt;name&lt;/span&gt;: config&lt;/span&gt;-server-&lt;span&gt;jdbc
   &lt;span&gt;profiles&lt;/span&gt;:
     &lt;span&gt;active&lt;/span&gt;: jdbc
   &lt;span&gt;cloud&lt;/span&gt;:
     &lt;span&gt;config&lt;/span&gt;:
       &lt;span&gt;server&lt;/span&gt;:
         &lt;span&gt;default&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&lt;span&gt;label&lt;/span&gt;: dev
         &lt;span&gt;jdbc&lt;/span&gt;:
           &lt;span&gt;sql&lt;/span&gt;: SELECT akey , avalue FROM config_server where APPLICATION&lt;/span&gt;=? &lt;span&gt;and&lt;/span&gt; APROFILE=? &lt;span&gt;and&lt;/span&gt; LABEL=&lt;span&gt;?
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################################################&lt;/span&gt;
 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysql 属性配置&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   datasource&lt;/span&gt;:
     &lt;span&gt;driver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-class-&lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;: com.mysql.jdbc.Driver
     &lt;span&gt;url&lt;/span&gt;: jdbc:mysql:&lt;/span&gt;//127.0.0.1:3306/&lt;span&gt;test
     &lt;span&gt;username&lt;/span&gt;: root
     &lt;span&gt;password&lt;/span&gt;: root
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################################################&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定注册中心地址&lt;/span&gt;
&lt;span&gt;&lt;span&gt; eureka&lt;/span&gt;:
   &lt;span&gt;client&lt;/span&gt;:
     &lt;span&gt;serviceUrl&lt;/span&gt;:
       &lt;span&gt;defaultZone&lt;/span&gt;: http:&lt;/span&gt;//localhost:7001/eureka/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里主要讲下连接配置信息&lt;/p&gt;
&lt;p&gt;（1）&lt;span&gt;spring.profiles.active=jdbc&lt;/span&gt;，自动实现JdbcEnvironmentRepository。&lt;/p&gt;
&lt;p&gt;（2）sql语句自定义，否则会默认为“SELECT KEY, VALUE from PROPERTIES where APPLICATION=? and PROFILE=? and LABEL=?”，具体可以参考&lt;span&gt;JdbcEnvironmentRepository&lt;/span&gt;实现。&lt;/p&gt;
&lt;p&gt;（3）本人数据库建表为config_server，由于key，value和profile是mysql关键字，所以我都在最前面加了a。当然表名字段名都可以自定义。&lt;/p&gt;
&lt;p&gt;（4） &lt;span&gt;{application}&lt;/span&gt; 对应客户端的&quot;spring.application.name&quot;属性;&lt;/p&gt;
&lt;p&gt;         &lt;span&gt;{aprofile}&lt;/span&gt; 对应客户端的 &quot;spring.profiles.active&quot;属性(逗号分隔的列表); 和&lt;/p&gt;
&lt;p&gt;          &lt;span&gt;{label}&lt;/span&gt; 对应服务端属性,这个属性能标示一组配置文件的版本.&lt;/p&gt;
&lt;p&gt;（5）只要&lt;span&gt;select出来是两个字段&lt;/span&gt;，框架会&lt;span&gt;自动包装到environment的map&amp;lt;key,value&amp;gt;&lt;/span&gt;。&lt;/p&gt;
&lt;h4&gt;      &lt;span&gt;&lt;strong&gt;&lt;span&gt; 3、mysql数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201809/1090617-20180910233438186-1244022037.png&quot; alt=&quot;&quot; width=&quot;739&quot; height=&quot;140&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;&lt;strong&gt;&lt;span&gt;4、springboot启动类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;添加&lt;span&gt;@EnableConfigServer&lt;/span&gt;注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
&lt;span&gt;@EnableConfigServer
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConfigserverApplication {

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
SpringApplication.run(ConfigserverApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt; 3、product-service微服务&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;      &lt;span&gt;&lt;strong&gt;&lt;span&gt;1、pom.xml&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;服务中心jar&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置中心客户端jar&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-config-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      &lt;span&gt;2、bootstrap.yml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定注册中心地址&lt;/span&gt;
&lt;span&gt;&lt;span&gt;eureka&lt;/span&gt;:
  &lt;span&gt;client&lt;/span&gt;:
    &lt;span&gt;serviceUrl&lt;/span&gt;:
      &lt;span&gt;defaultZone&lt;/span&gt;: http:&lt;/span&gt;//localhost:7001/eureka/

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;服务的名称&lt;/span&gt;
&lt;span&gt;&lt;span&gt;spring&lt;/span&gt;:
  &lt;span&gt;application&lt;/span&gt;:
    &lt;span&gt;name&lt;/span&gt;: product&lt;/span&gt;-&lt;span&gt;service
  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定从哪个配置中心读取&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  cloud&lt;/span&gt;:
    &lt;span&gt;config&lt;/span&gt;:
      &lt;span&gt;discovery&lt;/span&gt;:
        &lt;span&gt;service&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-id&lt;/span&gt;: config-server-&lt;span&gt;jdbc
        &lt;span&gt;enabled&lt;/span&gt;: true
      &lt;span&gt;profile&lt;/span&gt;: dev
      &lt;span&gt;label&lt;/span&gt;: dev

&lt;span&gt;server&lt;/span&gt;:
  &lt;span&gt;port&lt;/span&gt;: &lt;/span&gt;8001
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里为什么用bootstrap.yml而不用application.yml，是因为若application.yml 和bootStrap.yml 在同一目录下，&lt;/p&gt;
&lt;p&gt;则&lt;span&gt;bootStrap.yml 的加载顺序要高于application.yml&lt;/span&gt;,即bootStrap.yml 会优先被加载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为何需要把 config server 的信息放在 bootstrap.yml 里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当使用 Spring Cloud 的时候，配置信息一般是从 config server 加载的，为了取得配置信息（比如密码等），你需要一些提早的或引导配置。&lt;/p&gt;
&lt;p&gt;因此，把 config server 信息放在 bootstrap.yml，用来加载真正需要的配置信息。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;&lt;span&gt;3、ConfigController类（测试用）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@RequestMapping(&lt;/span&gt;&quot;/api/v1/product&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConfigController {

    &lt;span&gt;@Value(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;${item_url}&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String url;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 输出url
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;url&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; list(){

        System.out.println(url);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      &lt;span&gt;&lt;strong&gt;&lt;span&gt; 4、测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过访问：http://localhost:8001/api/v1/product/url 进入断点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201809/1090617-20180910234524780-731245319.png&quot; alt=&quot;&quot; width=&quot;730&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;我只是偶尔安静下来，对过去的种种思忖一番。那些曾经的旧时光里即便有过天真愚钝，也不值得谴责。毕竟，往后的日子，还很长。不断鼓励自己，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;天一亮，又是崭新的起点，又是未知的征程（上校11）&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 10 Sep 2018 15:53:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>mysql实现配置中心 本公司配置数据的管理是通过mysql进行配置管理，因为已经搭建好了，所以自己动手重新搭建一遍，熟悉整个流程。有关项目源码后期会补上github地址 微服务要实现集中管理微服务配</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9624386.html</dc:identifier>
</item>
<item>
<title>Gradle 常用配置总结 - 叶应是叶</title>
<link>http://www.cnblogs.com/leavesC/p/9624397.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leavesC/p/9624397.html</guid>
<description>&lt;p&gt;这里分享下我在日常开发中对 Gradle 的常用配置规则&lt;/p&gt;
&lt;h5 id=&quot;一版本号配置&quot;&gt;一、版本号配置&lt;/h5&gt;
&lt;p&gt;当项目逐渐演进的过程中，主工程依赖的 &lt;code&gt;Module&lt;/code&gt; 可能会越来越多，此时就需要统一配置各个 &lt;code&gt;Module&lt;/code&gt; 的编译参数了&lt;/p&gt;
&lt;p&gt;在工程的根目录下新建一个 &lt;code&gt;gradle&lt;/code&gt; 文件，命名为 &lt;code&gt;config.gradle&lt;/code&gt;，在此文件中统一声明工程的编译属性和依赖库的版本号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-f793b47cdd01752c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;ext {
    compileSdkVersion = 28
    minSdkVersion = 15
    targetSdkVersion = 28
    versionCode = 1
    versionName = '1.0'

    dependencies = [
            appcompatV7     : 'com.android.support:appcompat-v7:28.0.0-rc02',
            constraintLayout: 'com.android.support.constraint:constraint-layout:1.1.3',
            junit           : 'junit:junit:4.12',
            testRunner      : 'com.android.support.test:runner:1.0.2',
            espressoCore    : 'com.android.support.test.espresso:espresso-core:3.0.2'
    ]

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认情况下，&lt;code&gt;App Module&lt;/code&gt; 的 &lt;code&gt;build.gradle&lt;/code&gt; 文件的默认配置如下所示&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId &quot;leavesc.hello.gradlesamples&quot;
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName &quot;1.0&quot;
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里将其改为引用 &lt;code&gt;config.gradle&lt;/code&gt; 文件的形式&lt;/p&gt;
&lt;p&gt;首先，需要在根目录下的 &lt;code&gt;build.gradle&lt;/code&gt; 文件中应用 &lt;code&gt;config.gradle&lt;/code&gt; 文件，这样在 &lt;code&gt;Module&lt;/code&gt; 配置文件中才引用得到当中的属性值&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-83324b77c34c3c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时就可以修改应用版本号以及依赖库的声明方式了&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;apply plugin: 'com.android.application'

def globalConfiguration = rootProject.ext
def presentationDependencies = globalConfiguration.dependencies

android {
    compileSdkVersion globalConfiguration[&quot;compileSdkVersion&quot;]
    defaultConfig {
        applicationId &quot;leavesc.hello.gradlesamples&quot;
        minSdkVersion globalConfiguration[&quot;minSdkVersion&quot;]
        targetSdkVersion globalConfiguration[&quot;targetSdkVersion&quot;]
        versionCode globalConfiguration[&quot;versionCode&quot;]
        versionName globalConfiguration[&quot;versionName&quot;]
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation presentationDependencies.appcompatV7
    implementation presentationDependencies.constraintLayout
    testImplementation presentationDependencies.junit
    androidTestImplementation presentationDependencies.testRunner
    androidTestImplementation presentationDependencies.espressoCore
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，即使以后工程中包含多个 &lt;code&gt;Module&lt;/code&gt; ，只要配置的属性都是来自于 &lt;code&gt;config.gradle&lt;/code&gt; 文件，就可以做到统一修改编译属性与依赖库版本了&lt;/p&gt;
&lt;h5 id=&quot;二签名属性配置&quot;&gt;二、签名属性配置&lt;/h5&gt;
&lt;p&gt;通常，应用的签名类型会分为 &lt;code&gt;release&lt;/code&gt; 和 &lt;code&gt;debug&lt;/code&gt; 两类，并分别使用不同的签名文件&lt;br/&gt;为了安全考虑以及实现自动化打包，可以通过 &lt;code&gt;gradle&lt;/code&gt; 来声明签名配置，包括签名文件路径、签名别名、签名密码等&lt;br/&gt;在 &lt;code&gt;local.properties&lt;/code&gt; 文件中声明签名文件路径以及签名密码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;sdk.dir=C\:\\Software\\SDK
key.keyStorePath=..\\doc\\key.jks
key.keyAlias=leavesC
key.keyPassword=987654321
key.storePassword=123456789&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据配置可知，签名文件是放在工程的 &lt;code&gt;doc&lt;/code&gt; 文件夹内&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-6f2725bd181534ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过代码获取到签名的各个配置项&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def keyStorePath_ = properties.getProperty(&quot;key.keyStorePath&quot;)
def storePassword_ = properties.getProperty(&quot;key.storePassword&quot;)
def keyAlias_ = properties.getProperty(&quot;key.keyAlias&quot;)
def keyPassword_ = properties.getProperty(&quot;key.keyPassword&quot;)
def storeFile_ = file(keyStorePath_)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置不同的签名属性以及 &lt;code&gt;build&lt;/code&gt; 类型&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    signingConfigs {
        release {
            storeFile storeFile_
            storePassword storePassword_
            keyAlias keyAlias_
            keyPassword keyPassword_
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debug {
            storeFile storeFile_
            storePassword storePassword_
            keyAlias keyAlias_
            keyPassword keyPassword_
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处，我配置了两种不同的 &lt;code&gt;buildType&lt;/code&gt;：&lt;code&gt;debug&lt;/code&gt;、&lt;code&gt;release&lt;/code&gt;，并对应不同的签名文件&lt;/p&gt;
&lt;p&gt;以后只要选定不同的 &lt;code&gt;Build Variant&lt;/code&gt;，即可打包具体签名的 Apk 文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-74fd70312681a619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;local.properties&lt;/code&gt; 文件可以保存到服务器来实现远程打包，从而保证了隐私安全&lt;/p&gt;
&lt;h5 id=&quot;三多渠道打包&quot;&gt;三、多渠道打包&lt;/h5&gt;
&lt;p&gt;有时候，为了方便进行精准营销，会有生成不同渠道包的要求，此时就需要在同个应用上打上不同的渠道ID（channelId），这可以通过 &lt;code&gt;productFlavors&lt;/code&gt; 来实现&lt;br/&gt;先在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 文件中配置占位符，&lt;code&gt;appKey&lt;/code&gt; 即对应各个渠道的 ID 值&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;        &amp;lt;meta-data
            android:name=&quot;APP_KEY&quot;
            android:value=&quot;${appKey}&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;gradle.properties&lt;/code&gt; 文件中声明需要的 &lt;code&gt;ChannelId&lt;/code&gt;以及对应的 &lt;code&gt;ApplicationId&lt;/code&gt;，在此文件中声明的属性可以直接在 &lt;code&gt;build.gradle&lt;/code&gt; 中直接获取到&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;#默认配置
defaultApplicationId=leavesc.hello.gradlesamples
##各个渠道的配置
#应用宝
yingyongbaoChannelId=&quot;yingyongbao&quot;
yingyongbaoApplicationId=leavesc.hello.gradlesamples.yingyongbao
yingyongbaoAppKey=appKey_yingyongbao
#豌豆荚
wandoujiaChannelId=&quot;wandoujia&quot;
wandoujiaApplicationId=leavesc.hello.gradlesamples.wandoujia
wandoujiaAppKey=appKey_wandoujia
#小米
xiaomiChannelId=&quot;xiaomi&quot;
xiaomiApplicationId=leavesc.hello.gradlesamples.xiaomi
xiaomiAppKey=appKey_xiaomi&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;productFlavors&lt;/code&gt; 可以理解为是对同个产品的不同“风味要求”，可以根据配置项生成特定风味的产品（App）&lt;br/&gt;例如，此处就为不同渠道设定了不同的 &lt;code&gt;applicationId&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buildConfigField&lt;/code&gt; 属性则用于在 &lt;code&gt;BuildConfig.java&lt;/code&gt; 文件中生成特定类型的字段，此处就生成了一个类型为 &lt;code&gt;String&lt;/code&gt; ，名为 &lt;code&gt;channelId&lt;/code&gt; 的字段，用于方便在应用运行过程中判断当前应用的渠道类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manifestPlaceholders&lt;/code&gt; 就是用于替换 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 文件中的指定占位符了&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    productFlavors {
        yingyongbao {
            applicationId yingyongbaoApplicationId
            buildConfigField &quot;String&quot;, &quot;channelId&quot;, yingyongbaoChannelId
            manifestPlaceholders = [appKey: yingyongbaoAppKey]
        }
        wandoujia {
            applicationId wandoujiaApplicationId
            buildConfigField &quot;String&quot;, &quot;channelId&quot;, wandoujiaChannelId
            manifestPlaceholders = [appKey: wandoujiaAppKey]
        }
        xiaomi {
            applicationId xiaomiApplicationId
            buildConfigField &quot;String&quot;, &quot;channelId&quot;, xiaomiChannelId
            manifestPlaceholders = [appKey: xiaomiAppKey]
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-1dd2dda4d620ece3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在主布局文件中展示当前应用的各项属性值&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;ApplicationId: &quot;);
        sb.append(getApplicationInfo().packageName);
        sb.append(&quot;\n&quot;);
        sb.append(&quot;ApplicationName: &quot;);
        sb.append(getString(getApplicationInfo().labelRes));
        sb.append(&quot;\n&quot;);
        sb.append(&quot;ChannelId: &quot;);
        sb.append(BuildConfig.channelId);
        sb.append(&quot;\n&quot;);
        try {
            ApplicationInfo appInfo = getPackageManager().getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
            String appKey = appInfo.metaData.getString(&quot;APP_KEY&quot;);
            sb.append(&quot;AppKey: &quot;);
            sb.append(appKey);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        TextView tv_appInfo = findViewById(R.id.tv_appInfo);
        tv_appInfo.setText(sb);
        ImageView iv_log = findViewById(R.id.iv_log);
        iv_log.setImageResource(getApplicationInfo().icon);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-f087781650af9a92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;四打包时指定-apk-名字&quot;&gt;四、打包时指定 Apk 名字&lt;/h5&gt;
&lt;p&gt;为了方便标识各个测试包的版本已经打包时间，可以通过 &lt;code&gt;Gradle&lt;/code&gt; 来指定生成的 Apk 文件的命名规则&lt;/p&gt;
&lt;p&gt;例如，以下配置就根据 &lt;code&gt;buildType、flavorName&lt;/code&gt; 和 &lt;strong&gt;编译时间&lt;/strong&gt; 来命名 Apk 文件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    applicationVariants.all { variant -&amp;gt;
        def buildType = variant.buildType.name
        def flavorName = variant.flavorName
        def createTime = new Date().format(&quot;YYYY-MM-dd_hh_mm_ss&quot;, TimeZone.getTimeZone(&quot;GMT+08:00&quot;))
        variant.outputs.all {
            outputFileName = flavorName + &quot;_&quot; + buildType + &quot;_v&quot; + defaultConfig.versionName + &quot;_&quot; + createTime + &quot;.apk&quot;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-b91ac47afb58f39b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;五生成属性字段与资源文件值&quot;&gt;五、生成属性字段与资源文件值&lt;/h5&gt;
&lt;p&gt;上边讲过，&lt;code&gt;buildConfigField&lt;/code&gt; 属性可用于在 &lt;code&gt;BuildConfig.java&lt;/code&gt; 文件中生成特定类型的字段，此处可以利用其来记录应用的编译时间&lt;/p&gt;
&lt;p&gt;此外，也可以利用 &lt;code&gt;resValue&lt;/code&gt; 来生成一个 ID 引用类型的 &lt;code&gt;string&lt;/code&gt; 字符串&lt;/p&gt;
&lt;p&gt;首先，声明两个方法，分别用于获取当前时间以及当前电脑的用户信息&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;static def buildTime() {
    return new Date().format(&quot;yyyy-MM-dd HH:mm:ss&quot;)
}

static def hostName() {
    return System.getProperty(&quot;user.name&quot;) + &quot;@&quot; + InetAddress.localHost.hostName
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    defaultConfig {
        applicationId defaultApplicationId
        minSdkVersion globalConfiguration[&quot;minSdkVersion&quot;]
        targetSdkVersion globalConfiguration[&quot;targetSdkVersion&quot;]
        versionCode globalConfiguration[&quot;versionCode&quot;]
        versionName globalConfiguration[&quot;versionName&quot;]
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
        flavorDimensions '1'
        resValue &quot;string&quot;, &quot;build_host&quot;, hostName()
        buildConfigField &quot;String&quot;, &quot;build_time&quot;, &quot;\&quot;&quot; + buildTime() + &quot;\&quot;&quot;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用代码来获取这两个属性值&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;ApplicationId: &quot;);
        sb.append(getApplicationInfo().packageName);
        sb.append(&quot;\n&quot;);
        sb.append(&quot;ApplicationName: &quot;);
        sb.append(getString(getApplicationInfo().labelRes));
        sb.append(&quot;\n&quot;);
        sb.append(&quot;ChannelId: &quot;);
        sb.append(BuildConfig.channelId);
        sb.append(&quot;\n&quot;);
        sb.append(&quot;BuildTime: &quot;);
        sb.append(BuildConfig.build_time);
        sb.append(&quot;\n&quot;);
        sb.append(&quot;BuildUser: &quot;);
        sb.append(getString(R.string.build_host));
        sb.append(&quot;\n&quot;);
        try {
            ApplicationInfo appInfo = getPackageManager().getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
            String appKey = appInfo.metaData.getString(&quot;APP_KEY&quot;);
            sb.append(&quot;AppKey: &quot;);
            sb.append(appKey);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        TextView tv_appInfo = findViewById(R.id.tv_appInfo);
        tv_appInfo.setText(sb);
        ImageView iv_log = findViewById(R.id.iv_log);
        iv_log.setImageResource(getApplicationInfo().icon);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-db2763edb4deb986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;六替换资源文件&quot;&gt;六、替换资源文件&lt;/h5&gt;
&lt;p&gt;在多渠道打包时，除了需要在应用中打上特定的标签外，也可能需要使之使用不同的资源文件，例如应用图标和应用名称&lt;/p&gt;
&lt;p&gt;此时可以以各个 &lt;code&gt;productFlavor&lt;/code&gt; 的名称来命名相应的文件夹，并在其中放置相应的图标文件以及声明了应用名称的 &lt;code&gt;string.xml&lt;/code&gt; 文件，这样在多渠道打包时，Gradle 就会自动引用相应的资源文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-717c6ff61425a07f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2552605-496f4b5c470677b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上述所有的示例代码可以在这里获取：&lt;a href=&quot;https://github.com/leavesC/GradleSamples&quot;&gt;GradleSamples&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多的读书笔记可以看这里：&lt;a href=&quot;https://github.com/leavesC/Java_Kotlin_Android_Learn&quot;&gt;一份关于 Java 、Kotlin 、 Android 的学习笔记&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 10 Sep 2018 15:50:00 +0000</pubDate>
<dc:creator>叶应是叶</dc:creator>
<og:description>这里分享下我在日常开发中对 Gradle 的常用配置规则 一、版本号配置 当项目逐渐演进的过程中，主工程依赖的 可能会越来越多，此时就需要统一配置各个 的编译参数了 在工程的根目录下新建一个 文件，命</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leavesC/p/9624397.html</dc:identifier>
</item>
<item>
<title>19届瓜子测试开发工程师校招-编程题 - heart_fox</title>
<link>http://www.cnblogs.com/lijuanhu321/p/9624346.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lijuanhu321/p/9624346.html</guid>
<description>&lt;p&gt;选择题涵盖面比较广，包括数据库的设计模式，结构型模式有哪几种，排序中的稳定排序，用户拨号认证的协议，TCP/IP对应OSI网络协议哪一层，Java与C++，数据库联合查询等。&lt;/p&gt;
&lt;h2&gt;编程题1：给出两个数，输出最大公约数与最大公倍数&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m,n,a;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;((cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n)!=&lt;span&gt;NULL)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(m&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;n&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;m==&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             cout&amp;lt;&amp;lt;&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             cout&amp;lt;&amp;lt;m&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(m&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;n&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;m!=&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=m*n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(m%i==&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;n%i==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     cout&amp;lt;&amp;lt;m*n/i&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return 0;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;编程题2：数字和为sum的方法数&lt;/h2&gt;
&lt;p&gt;题目：给定一个有n个正整数的数组A和一个整数sum，，求选择数组中部分数字和为sum的方案数。当两种选取方案有一个数字的下标不一样，我们就认为是不同的组成方案。&lt;/p&gt;
&lt;p&gt;输入：第一行为两个正整数n（1&amp;lt;=n&amp;lt;=1000），sum（1&amp;lt;=sum&amp;lt;=1000）；&lt;/p&gt;
&lt;p&gt;第二行为n个正整数Ai，以空格隔开&lt;/p&gt;
&lt;p&gt;输出：输出所求的方案数&lt;/p&gt;
&lt;p&gt;例1：输入&lt;/p&gt;
&lt;p&gt;5 15&lt;/p&gt;
&lt;p&gt;5 5 10 2 3&lt;/p&gt;
&lt;p&gt;输出： 4&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; typedef &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; LL;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; LL dp[&lt;span&gt;1000&lt;/span&gt;][&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,sum;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;&lt;span&gt;sum);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; array[&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++) cin&amp;gt;&amp;gt;&lt;span&gt;array[i];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(n&amp;gt;=&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;n&amp;lt;=&lt;span&gt;1000&lt;/span&gt;&amp;amp;&amp;amp;sum&amp;gt;=&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;sum&amp;lt;=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;n;j++) dp[&lt;span&gt;0&lt;/span&gt;][j]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         dp[&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;=sum;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 dp[i][j]=dp[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;][j];
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(j&amp;gt;=array[i-&lt;span&gt;1&lt;/span&gt;]) dp[i][j] +=dp[i-&lt;span&gt;1&lt;/span&gt;][j-array[i-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]];
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         cout&amp;lt;&amp;lt;dp[n][sum]&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;编程题3：&lt;/h2&gt;
&lt;p&gt;题目：有一堆石子共有N个。A B两个人轮流拿，A先拿。每次最少拿1颗，最多拿K颗，拿到最后1颗石子的人获胜。假设A，B都非常聪明，拿石子的过程不会出现失误。给出N和K，问最后谁能赢得比赛。假如N=3，K=2.无论A如何拿，B都可以拿到最后1颗石子。&lt;/p&gt;
&lt;p&gt;输入：第1行：一个数T，表示后面用作输入测试的数的数量。（1&amp;lt;=T&amp;lt;=10000）&lt;/p&gt;
&lt;p&gt;第2-T+1行：每行2个数N，K。中间用空格分隔。&lt;/p&gt;
&lt;p&gt;输出：共T行，如果A获胜输出A，如果B获胜输出B。&lt;/p&gt;
&lt;p&gt;例1：输入&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;3 2&lt;/p&gt;
&lt;p&gt;4 2&lt;/p&gt;
&lt;p&gt;7 3&lt;/p&gt;
&lt;p&gt;8 3&lt;/p&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     cin&amp;gt;&amp;gt;&lt;span&gt;t;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; array[&lt;span&gt;10000&lt;/span&gt;][&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;t;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;2&lt;/span&gt;;j++) cin&amp;gt;&amp;gt;&lt;span&gt;array[i][j];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;t;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(array[i][&lt;span&gt;0&lt;/span&gt;]&amp;lt;=array[i][&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             array[i][&lt;span&gt;0&lt;/span&gt;]%=(array[i][&lt;span&gt;1&lt;/span&gt;]+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(array[i][&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 10 Sep 2018 15:38:00 +0000</pubDate>
<dc:creator>heart_fox</dc:creator>
<og:description>考试时长：90分钟 考试题型：选择题15道（包括单选与多选），编程题3道。 考试范围： 选择题涵盖面比较广，包括数据库的设计模式，结构型模式有哪几种，排序中的稳定排序，用户拨号认证的协议，TCP/IP</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lijuanhu321/p/9624346.html</dc:identifier>
</item>
<item>
<title>Solr7.4.0的API操作Solrj - Frankdeng</title>
<link>http://www.cnblogs.com/frankdeng/p/9615856.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/frankdeng/p/9615856.html</guid>
<description>&lt;h2&gt;一.SolrJ的概念&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;        &lt;a href=&quot;https://lucene.apache.org/solr/7_4_0//solr-solrj/&quot;&gt;SolrJ&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;是一个API，它使用Java（或任何基于JVM的语言）编写的应用程序可以轻松地与Solr交谈。&lt;/span&gt;&lt;span&gt;SolrJ隐藏了许多连接到Solr的细节，并允许您的应用程序通过简单的高级方法与Solr交互。&lt;/span&gt;&lt;span&gt;SolrJ支持大多数Solr API，并且具有高度可配置性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;官方API参考文档： &lt;a href=&quot;http://lucene.apache.org/solr/guide/7_4/using-solrj.html#using-solrj&quot; target=&quot;_blank&quot;&gt;http://lucene.apache.org/solr/guide/7_4/using-solrj.html#using-solrj&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;这里使用Maven构建项目，请将以下内容放入&lt;code&gt;pom.xml&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.solr&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;solr-solrj&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;7.4.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910101605076-450652236.png&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;
&lt;p&gt;为了方便测试，导入单元测试依赖和日志依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;&lt;span&gt;4.12&lt;/span&gt;&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;&lt;br/&gt;&amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;&amp;lt;artifactId&amp;gt;slf4j-nop&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二.SolrJ的单机连接&lt;/h2&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;7.8014184397163&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;38.519503546099&quot;&gt;
&lt;p&gt;&lt;code&gt;SolrClient是一个抽象类，下边有很多被实现的子类，&lt;a href=&quot;https://lucene.apache.org/solr/7_4_0//solr-solrj/org/apache/solr/client/solrj/impl/HttpSolrClient.html&quot;&gt;HttpSolrClient&lt;/a&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt; - 面向以查询为中心的工作负载，但也是一个很好的通用客户端。&lt;/span&gt;&lt;span&gt;直接与单个Solr节点通信。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;不同solr版本solrj 的创建方式有所不同&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;solr4创建方式&lt;/span&gt;
SolrServer solrServer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrServer(solrUrl); &lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;solr5创建方式,在url中指定core名称：core1 &lt;br/&gt;HttpSolrClient solrClient = new HttpSolrClient(&lt;/span&gt;&lt;span&gt;solrUrl); &lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;solr7创建方式,在url中指定core名称：core1 &lt;br/&gt;HttpSolrClient solrClient = new HttpSolrClient.Builder(&lt;/span&gt;&lt;span&gt;solrUrl).build();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.xyg.solr;

import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.junit.Test;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Author: Mr.Deng
 * Date: 2018/9/10
 * Desc: 测试连接客户端
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; testConnectionClient {

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testConnectionClient(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置solr客户端url地址&lt;/span&gt;
        String solrUrl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建solrClient同时指定超时时间，不指定走默认配置&lt;/span&gt;
        HttpSolrClient solrClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl)
                .withConnectionTimeout(&lt;/span&gt;&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;)
                .withSocketTimeout(&lt;/span&gt;&lt;span&gt;60000&lt;/span&gt;&lt;span&gt;)
                .build();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(solrClient);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910140310658-1697111360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三.SolrJ的集群连接&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://lucene.apache.org/solr/7_4_0//solr-solrj/org/apache/solr/client/solrj/impl/CloudSolrClient.html&quot;&gt;&lt;code&gt;CloudSolrClient&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; - 面向与SolrCloud部署的通信。&lt;/span&gt;&lt;span&gt;使用已记录的ZooKeeper状态来发现并将请求路由到健康的Solr节点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.xyg.solrCloud;

import org.apache.solr.client.solrj.impl.CloudSolrClient;
import org.junit.Test;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Author: Mr.Deng
 * Date: 2018/9/10
 * Desc: 测试连接客户端
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnectionCloudSolrClient {

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connectionCloudSolrClient(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一种方式：使用运行中的某一台solr节点
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;final String solrUrl = &quot;&lt;/span&gt;&lt;span&gt;http://192.168.100.21&lt;/span&gt;&lt;span&gt;:8983/solr&quot;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CloudSolrClient solrClient = new CloudSolrClient.Builder().withSolrUrl(solrUrl).build();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二种方式：使用zookeeper节点连接（推荐）&lt;/span&gt;
        final String zkHost = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;node21:2181,node22:2181,node23:2181/solr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        CloudSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CloudSolrClient.Builder().withZkHost(zkHost).build();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(solrClient);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910201203017-1727805042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;四.SolrJ的增删改查&lt;/h2&gt;
&lt;p&gt;这里测试单机版APi操作&lt;/p&gt;
&lt;h2&gt;1.创建索引&lt;/h2&gt;
&lt;h3&gt;1）指定id单条创建索引 &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
@Test&lt;br/&gt;public void addIndexById() throws IOException, SolrServerException {&lt;br/&gt;String solrUrl = &quot;http://node21:8080/solr/new_core&quot;;&lt;br/&gt;HttpSolrClient solrClient = new HttpSolrClient.Builder(solrUrl).build();&lt;br/&gt;//创建索引文档对象&lt;br/&gt;SolrInputDocument doc = new SolrInputDocument();&lt;br/&gt;// 第一个参数：域的名称，域的名称必须是在schema.xml中定义的&lt;br/&gt;// 第二个参数：域的值,注意：id的域不能少&lt;br/&gt;doc.addField(&quot;id&quot;,&quot;1&quot;);&lt;br/&gt;doc.addField(&quot;name&quot;,&quot;红豆&quot;);&lt;br/&gt;doc.addField(&quot;price&quot;,&quot;1.2&quot;);&lt;br/&gt;//3.将文档写入索引库中&lt;br/&gt;solrClient.add(doc);&lt;br/&gt;solrClient.commit();&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2）批量创建索引 &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
@Test&lt;br/&gt;public void addIndexByListId() throws Exception {&lt;br/&gt;String solrUrl = &quot;http://node21:8080/solr/new_core&quot;;&lt;br/&gt;HttpSolrClient solrClient = new HttpSolrClient.Builder(solrUrl).build();&lt;br/&gt;//创建索引文档对象&lt;br/&gt;SolrInputDocument doc1 = new SolrInputDocument();&lt;br/&gt;doc1.addField( &quot;id&quot;, &quot;2&quot;);&lt;br/&gt;doc1.addField( &quot;name&quot;, &quot;绿豆&quot;);&lt;br/&gt;doc1.addField( &quot;price&quot;, 1.8 );&lt;br/&gt;SolrInputDocument doc2 = new SolrInputDocument();&lt;br/&gt;doc2.addField( &quot;id&quot;, &quot;3&quot; );&lt;br/&gt;doc2.addField( &quot;name&quot;, &quot;黑豆&quot; );&lt;br/&gt;doc2.addField( &quot;price&quot;, 2.6 );&lt;br/&gt;Collection&amp;lt;SolrInputDocument&amp;gt; docs = new ArrayList&amp;lt;SolrInputDocument&amp;gt;();&lt;br/&gt;docs.add(doc1);&lt;br/&gt;docs.add(doc2);&lt;br/&gt;//3.将文档写入索引库中&lt;br/&gt;solrClient.add(docs);&lt;br/&gt;solrClient.commit();&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.查询索引&lt;/h2&gt;
&lt;h3&gt;1）匹配查询&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; findIndex1() throws IOException, SolrServerException {
        String solrUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        HttpSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建搜索对象&lt;/span&gt;
        SolrQuery query = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SolrQuery();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置搜索条件&lt;/span&gt;
        query.&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*:*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置每页显示多少条&lt;/span&gt;
        query.setRows(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发起搜索请求&lt;/span&gt;
        QueryResponse response =&lt;span&gt; solrClient.query(query);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询结果&lt;/span&gt;
        SolrDocumentList docs =&lt;span&gt; response.getResults();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询结果总数&lt;/span&gt;
        &lt;span&gt;long&lt;/span&gt; cnt =&lt;span&gt; docs.getNumFound();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总条数为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+cnt+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;条&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (SolrDocument doc : docs) {
          System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+ doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+ doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,price:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+ doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
        solrClient.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910233445611-1038212656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2）条件过滤查询&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; findIndex2() throws IOException, SolrServerException {
        String solrUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        HttpSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 封装查询参数&lt;/span&gt;
        Map&amp;lt;String, String&amp;gt; queryParamMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
        queryParamMap.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*:*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3 添加到SolrParams对象,SolrParams 有一个 SolrQuery 子类，它提供了一些方法极大地简化了查询操作&lt;/span&gt;
        MapSolrParams queryParams = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MapSolrParams(queryParamMap);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4 执行查询返回QueryResponse&lt;/span&gt;
        QueryResponse response =&lt;span&gt; solrClient.query(queryParams);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5 获取doc文档&lt;/span&gt;
        SolrDocumentList docs =&lt;span&gt; response.getResults();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询结果总数&lt;/span&gt;
        &lt;span&gt;long&lt;/span&gt; cnt =&lt;span&gt; docs.getNumFound();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总条数为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + cnt + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;条&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[6]内容遍历&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (SolrDocument doc : docs) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,price:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + doc.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
        solrClient.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910231413622-985987843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.更新索引&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateIndex() throws IOException, SolrServerException {
        String solrUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        HttpSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建索引文档对象&lt;/span&gt;
        SolrInputDocument doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SolrInputDocument();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把红豆价格修改为1.5&lt;/span&gt;
        doc.addField(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        doc.addField(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;红豆&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        doc.addField(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.将文档写入索引库中&lt;/span&gt;
&lt;span&gt;        solrClient.add(doc);
        solrClient.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交&lt;/span&gt;
&lt;span&gt;        solrClient.commit();

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.删除索引 &lt;/h2&gt;
&lt;h3&gt;1）单一条件删除&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteIndexById() throws IOException, SolrServerException {
        String solrUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        HttpSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全删
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;solrClient.deleteByQuery(&quot;*:*&quot;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模糊匹配删除（带有分词效果的删除）&lt;/span&gt;
        solrClient.deleteByQuery(&lt;span&gt;&quot;name:&lt;/span&gt;&lt;span&gt;红&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定id删除
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;solrClient.deleteById(&quot;1&quot;);&lt;/span&gt;
&lt;span&gt;        solrClient.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2）批量条件删除&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteIndexByListId() throws IOException, SolrServerException {
        String solrUrl &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://node21:8080/solr/new_core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        HttpSolrClient solrClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpSolrClient.Builder(solrUrl).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过id删除&lt;/span&gt;
        ArrayList&amp;lt;String&amp;gt; ids = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        ids.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        ids.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        solrClient.deleteById(ids);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[3]提交&lt;/span&gt;
&lt;span&gt;        solrClient.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[4]关闭资源&lt;/span&gt;
&lt;span&gt;        solrClient.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;五.代码报错问题&lt;/h2&gt;
&lt;h3&gt;1.代码添加索引报405问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910180349067-774227343.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;在使用Tomcat部署Solr后，new_core的地址为：http://node21:8080/solr/#/new_core，但使用SolrJ进行索引的时候，应该使用http://node21:8080/solr/new_core，即无中间的#号。&lt;/p&gt;
&lt;h3&gt;2.自定义索引字段&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201809/1385722-20180910181746451-78515325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图报错提示未识别索引字段&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/solr_doc/solr_doc-g1az2fmd.html&quot; target=&quot;_blank&quot;&gt;https://www.w3cschool.cn/solr_doc/solr_doc-g1az2fmd.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/gaogaoyanjiu/p/7815558.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/gaogaoyanjiu/p/7815558.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/11fb9cfdb2fd&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/11fb9cfdb2fd&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 10 Sep 2018 15:36:00 +0000</pubDate>
<dc:creator>Frankdeng</dc:creator>
<og:description>一.SolrJ的概念 SolrJ是一个API，它使用Java（或任何基于JVM的语言）编写的应用程序可以轻松地与Solr交谈。SolrJ隐藏了许多连接到Solr的细节，并允许您的应用程序通过简单的高级</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/frankdeng/p/9615856.html</dc:identifier>
</item>
<item>
<title>依赖状态的线程任务的等待方式之忙等待 - 猫毛·波拿巴</title>
<link>http://www.cnblogs.com/longfurcat/p/9624286.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/longfurcat/p/9624286.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;引入：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;有时候我们执行一个操作，需要一个前提条件，只有在条件满足的情况下，才能继续执行。在单线程程序中，如果某个状态变量不满足条件，则基本上可以直接返回。但是，在并发程序中，基于状态的条件可能会由于其他线程的操作而改变。而且存在这种需要，即某个操作一定要完成，如果当前条件不满足，没关系，我可以等，等到条件满足的时候再执行。今天，我们就来&lt;span&gt;聊一聊等待的几种方式。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;忙等待 / 自旋等待。&lt;/li&gt;
&lt;li&gt;让权等待 / 轮询与休眠&lt;/li&gt;
&lt;li&gt;条件队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;情景条件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们要实现一个有界缓存，其中&lt;span&gt;用不同的等待方式处理前提条件失败的问题&lt;/span&gt;。在每种实现中都扩展了BaseBoundedBuffer，这个类中实现了一个基于数组的循环缓存，其中各个缓存状态变量（buf、head、tail和count）均由缓存的内置锁来保护。它还提供了同步的doPut和doTake方法，并在子类中通过这些方法来实现put和take操作，底层的状态将对子类隐藏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313132/201809/1313132-20180910204700083-1052171559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此段代码来自《Java Concurrency in Practice》&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BaseBoundedBuffer&amp;lt;V&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; V[] buf;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓冲数组&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tail;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓冲数据尾部索引&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; head;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;头部索引&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储的数据量&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; BaseBoundedBuffer(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; capacity) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.buf = (V[]) &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[capacity];
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doPut(V v) {
        buf[tail] &lt;/span&gt;=&lt;span&gt; v;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (++tail ==&lt;span&gt; buf.length)
            tail &lt;/span&gt;= 0&lt;span&gt;;
        &lt;/span&gt;++&lt;span&gt;count;
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; V doTake() {
        V v &lt;/span&gt;=&lt;span&gt; buf[head];
        buf[head] &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (++head ==&lt;span&gt; buf.length)
            head &lt;/span&gt;= 0&lt;span&gt;;
        &lt;/span&gt;--&lt;span&gt;count;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; v;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isFull() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count ==&lt;span&gt; buf.length;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count == 0&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忙等待：反复检查条件是否为真，直到条件达到，继而完成后续任务。&lt;/p&gt;
&lt;p&gt;我们来看看，忙等待的实现方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BusyWaitBoundedBuffer&amp;lt;V&amp;gt; &lt;span&gt;extends&lt;/span&gt; BaseBoundedBuffer&amp;lt;V&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BusyWaitBoundedBuffer(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(size);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; put(V v) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;isFull()) {
                    doPut(v);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; V take() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;isEmpty())
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; doTake();
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的两个方法在访问缓存时都采用&quot;&lt;strong&gt;先检查，再运行&lt;/strong&gt;&quot;的逻辑策略，非线程安全，因为条件可能在&quot;&lt;strong&gt;检查之后，运行之前&lt;/strong&gt;&quot;的中间时刻，被其他线程修改，以至于，在运行的时候，前提条件已经不满足了，故需要对put和take两个方法都进行同步，共用同一个锁以确保实现对缓冲状态的&lt;span&gt;独占访问&lt;/span&gt;，即某一时刻只能有一个线程可以访问操作缓冲数组。也就是说，在put方法执行的一次尝试中，take方法不能被调用，不能改变缓冲数组状态。&lt;/p&gt;
&lt;p&gt;还有一点，值得注意的是，while循环并不在同步块内，而是同步块在while循环内，也就是每执行一次条件检查，如果不满足，需要释放掉锁。不然另一个方法就拿不到锁，也就不能改变状态，条件就永远不能发生改变，这个方法就变成了&lt;span&gt;&lt;strong&gt;死等待&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这样做，虽然在逻辑上实现了功能要求，但是在性能上却可能消耗过多的CPU时间，因为它占据着CPU，不做计算，而只是等待。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;“尚未解决的疑惑”：&lt;/strong&gt;&lt;/span&gt;线程等待锁的时候是否会被JVM挂起，调出CPU？如果是这样的话，那么上下文切换的开销也会很大，因为每检查一次条件，需要进出CPU两次。&lt;/p&gt;

</description>
<pubDate>Mon, 10 Sep 2018 15:33:00 +0000</pubDate>
<dc:creator>猫毛&amp;#183;波拿巴</dc:creator>
<og:description>引入： 有时候我们执行一个操作，需要一个前提条件，只有在条件满足的情况下，才能继续执行。在单线程程序中，如果某个状态变量不满足条件，则基本上可以直接返回。但是，在并发程序中，基于状态的条件可能会由于其</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/longfurcat/p/9624286.html</dc:identifier>
</item>
</channel>
</rss>