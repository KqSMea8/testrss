<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>hash算法与hashmap - unbelievableme</title>
<link>http://www.cnblogs.com/kundeg/p/7779002.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kundeg/p/7779002.html</guid>
<description>&lt;p&gt;参考博客：&lt;br/&gt;&lt;a href=&quot;http://zha-zi.iteye.com/blog/1124484&quot; class=&quot;uri&quot;&gt;http://zha-zi.iteye.com/blog/1124484&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3681042.html(%E5%8F%82%E8%80%83%E4%BA%86hashCode%E4%B8%8Eequals)&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3681042.html(参考了hashCode与equals)&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/leesf456/p/5242233.html(%E8%BD%AC%E8%BD%BD%E4%BA%86hashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/leesf456/p/5242233.html(转载了hashMap源码分析)&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/mengfanrong/p/4034950.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/mengfanrong/p/4034950.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/tanggao1314/article/details/51457585&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/tanggao1314/article/details/51457585&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/fan2012huan/article/details/51087722&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/fan2012huan/article/details/51087722&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一hash算法&quot;&gt;一、hash算法&lt;/h2&gt;
&lt;h3 id=&quot;hash简介&quot;&gt;1.1 hash简介&lt;/h3&gt;
&lt;p&gt;hash,一般翻译为散列，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出值就是散列值，这种转换是一种压缩映射，也就是散列的空间小于输入的空间，不同的输入可能会形成相同的输出，因此不可以通过散列值来唯一的确定输入值，简单的说就是把任意长度的消息压缩到某一固定长度的消息摘要的函数&lt;/p&gt;
&lt;h3 id=&quot;构造hash函数的方法&quot;&gt;1.2 构造hash函数的方法&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;23.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;直接寻址法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;取keyword或keyword的某个线性函数值为&lt;br/&gt;散列地址。即H(key)=key或H(key)=a•key&lt;br/&gt;+b，当中a和b为常数（这样的散列函数叫做&lt;br/&gt;自身函数）&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;地址集合的大小 = 关键字集合的大小&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;地址 A1 A2 ……A99 A100&lt;br/&gt;年龄(key) 1 2 ……99 100&lt;br/&gt;人数(value)980 800 ……495 107&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;11&quot;&gt;&lt;td&gt;数字分析法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;数字分析法是取数据元素关键字中某些取值较&lt;br/&gt;均匀的数字位作为哈希地址的方法。即当关键&lt;br/&gt;字的位数很多时，可以通过对关键字的各位进&lt;br/&gt;行分析，丢掉分布不均匀的位，作为哈希值。&lt;br/&gt;它只适合于所有关键字值已知的情况。通过分&lt;br/&gt;析分布情况把关键字取值区间转化为一个较小&lt;br/&gt;的关键字取值区间&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;能预先估计出全体关键字的每一位上各种数&lt;br/&gt;字出现的频度&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;存在关键字如下：&lt;br/&gt;K1=61317602 K2=61326875&lt;br/&gt;K3=62739628 K4=61343634&lt;br/&gt;K5=62706815 K6=62774638&lt;br/&gt;通过分析,key的前4位不宜作为hash值。&lt;br/&gt;从后面取四位中取两位即可&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;12&quot;&gt;&lt;td&gt;折叠法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;折叠法是将关键字从左到右分割成位数相等的&lt;br/&gt;几部分（最后一部分位数不够可以短一些），&lt;br/&gt;然后将这几部分叠加求和，并按散列表表长，&lt;br/&gt;取后几位作为散列地址&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关键字的数字位数特别多&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;当哈希表长为1000,关键字key=31119891,&lt;br/&gt;允许的地址空间为三位十进制数&lt;br/&gt;，则这两种叠加情况如下：&lt;br/&gt;移位叠加   边界叠加&lt;br/&gt;891     891&lt;br/&gt;119     911&lt;br/&gt;  31       31&lt;br/&gt;041     833&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;8&quot;&gt;&lt;td&gt;平方取中法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;这个方法是先取关键字的平方，然后根据可使&lt;br/&gt;用空间的大小，选取平方数是中间几位为哈希&lt;br/&gt;地址&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关键字中的每一位都有某些数字重复出现频&lt;br/&gt;度很高的现象&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;若设哈希表长为1000&lt;br/&gt;关键字 关键字的平方 哈希函数值&lt;br/&gt;1234  1522756    227&lt;br/&gt;2143  4592449    924&lt;br/&gt;4132  17073424    734&lt;br/&gt;3214  10329796    297&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9&quot;&gt;&lt;td&gt;除留余数法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;函数公式为：f(key)=key mod p(p&amp;lt;=m)&lt;br/&gt;，m为地址空间大小，事实上，这方法不仅可&lt;br/&gt;以对关键字直接取模，也可以在折叠、平方取&lt;br/&gt;中后再取模&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;此方法重要的是p的选取&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;散列元素为（18，75，60，43，54，&lt;br/&gt;90，46）,表长m=10，假设p=7，则：&lt;br/&gt;h(18)=18%7=4 h(75)=75%7=5&lt;br/&gt;h(60)=60%7=4 h(43)=43%7=1&lt;br/&gt;h(54)=54%7=5 h(90)=90%7=6&lt;br/&gt;h(46)=46%7=4&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;散列表&quot;&gt;1.3 散列表&lt;/h3&gt;
&lt;p&gt;散列表也叫哈希表，是依据关键码值（key,value）而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中的一个位置来访问记录，以加快查找的速度，这个映射函数就是1.1中的hash函数，存放记录的数组叫做散列表。&lt;/p&gt;
&lt;h3 id=&quot;hash冲突&quot;&gt;1.4 hash冲突&lt;/h3&gt;
&lt;p&gt;不同的key的hash值相同的时候，就产生了冲突，这个时候就需要有解决冲突的方法，常见的有：&lt;/p&gt;
&lt;h4 id=&quot;开放地址法&quot;&gt;1. 开放地址法&lt;/h4&gt;
&lt;p&gt;通过H=H（key）产生冲突的时候，就使用这个公式：H = （H（key）+di）mod m（m为hash表的长度） 来重新确定key的hash值。&lt;br/&gt;1.当di取1，2，3，4 ...时，称为线性探测再散列&lt;br/&gt;2.当di取1^2，-1^2，2^2,-2^2,...，称为平方探测再散列&lt;br/&gt;3.当di取随机数时，称为随机探测再散列&lt;/p&gt;
&lt;h4 id=&quot;再哈希法&quot;&gt;2. 再哈希法&lt;/h4&gt;
&lt;p&gt;顾名思义，不止存在一个hash函数，当使用第一个hash函数产生冲突后，就使用其他的hash函数，直至不冲突为止&lt;/p&gt;
&lt;h4 id=&quot;链地址法&quot;&gt;3. 链地址法&lt;/h4&gt;
&lt;p&gt;就是下面即将提到的hashMap采用的解决冲突的方法，此处不累述&lt;/p&gt;
&lt;h3 id=&quot;java中的hash&quot;&gt;1.5 java中的hash&lt;/h3&gt;
&lt;p&gt;Java中的Object类中有一个方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public native int hashCode();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此对于没有重写hashCode方法的类来说，他的hash值就是通过本地算法计算而来的。&lt;/p&gt;
&lt;h4 id=&quot;hashcode的作用&quot;&gt;1. hashCode的作用&lt;/h4&gt;
&lt;p&gt;java常见的集合框架HashMap，HashTable，HashSet等，在保存对象的同时都会保存下来对象的hashCode，这样做的目的可以减少集合进行某些操作，例如：HashMap的判断是否包含key，查找等操作的时间复杂度&lt;/p&gt;
&lt;h4 id=&quot;hashcode与对象的关系&quot;&gt;2. hashCode与对象的关系&lt;/h4&gt;
&lt;p&gt;1.不同对象的hashCode可能相同（hash冲突），因此通过hashCode不能判断对象相同&lt;br/&gt;2.hashCode不同那么对象肯定不同，因此可以通过hashCode判断对象不同&lt;br/&gt;我们知道判断对象相同可以用equals方法，因此上述两句表示可以变为：&lt;br/&gt;1.对象equals为true,那么hashCode一定相同&lt;br/&gt;2.hashCode不同，那么equals一定为false&lt;/p&gt;
&lt;h2 id=&quot;二hashmap数据结构&quot;&gt;二、HashMap数据结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171103164609591-1999371905.png&quot;/&gt;&lt;br/&gt;　说明：上图很形象的展示了HashMap的数据结构（数组+链表+红黑树），桶中的结构可能是链表，也可能是红黑树，红黑树的引入是为了提高效率&lt;/p&gt;
&lt;h2 id=&quot;三-hashmap源码分析&quot;&gt;三 、HashMap源码分析&lt;/h2&gt;
&lt;h3 id=&quot;类的属性&quot;&gt;3.1 类的属性&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {
    // 序列号
    private static final long serialVersionUID = 362498820763181265L;    
    // 默认的初始容量是16
    static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4;   
    // 最大容量
    static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; 
    // 默认的填充因子
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    // 当桶(bucket)上的结点数大于这个值时会转成红黑树
    static final int TREEIFY_THRESHOLD = 8; 
    // 当桶(bucket)上的结点数小于这个值时树转链表
    static final int UNTREEIFY_THRESHOLD = 6;
    // 桶中结构转化为红黑树对应的table的最小大小
    static final int MIN_TREEIFY_CAPACITY = 64;
    // 存储元素的数组，总是2的幂次倍
    transient Node&amp;lt;k,v&amp;gt;[] table; 
    // 存放具体元素的集
    transient Set&amp;lt;map.entry&amp;lt;k,v&amp;gt;&amp;gt; entrySet;
    // 存放元素的个数，注意这个不等于数组的长度。
    transient int size;
    // 每次扩容和更改map结构的计数器
    transient int modCount;   
    // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容
    int threshold;
    // 填充因子
    final float loadFactor;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用下图表示loadFactor，capacity，threshold的关系：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171112131153169-1102930444.png&quot;/&gt;&lt;br/&gt;其中capacity为64（满足2的幂次倍），假设loadFactor为默认的0.75，那么threshold为54，当前size为10&amp;lt;54,因此不需要扩容，当size大于54时，会进行扩容&lt;/p&gt;
&lt;h3 id=&quot;类的构造函数&quot;&gt;3.2 类的构造函数&lt;/h3&gt;
&lt;p&gt;1.HashMap（int，float）型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(int initialCapacity, float loadFactor) {
    // 初始容量不能小于0，否则报错
    if (initialCapacity &amp;lt; 0)
        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +
                                            initialCapacity);
    // 初始容量不能大于最大值，否则为最大值
    if (initialCapacity &amp;gt; MAXIMUM_CAPACITY)
        initialCapacity = MAXIMUM_CAPACITY;
    // 填充因子不能小于或等于0，不能为非数字
    if (loadFactor &amp;lt;= 0 || Float.isNaN(loadFactor))
        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +
                                            loadFactor);
    // 初始化填充因子                                        
    this.loadFactor = loadFactor;
    // 初始化threshold大小
    this.threshold = tableSizeFor(initialCapacity);    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：tableSizeFor(initialCapacity)返回大于initialCapacity的最小的二次幂数值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static final int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 2;
        n |= n &amp;gt;&amp;gt;&amp;gt; 4;
        n |= n &amp;gt;&amp;gt;&amp;gt; 8;
        n |= n &amp;gt;&amp;gt;&amp;gt; 16;
        return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&amp;gt;&amp;gt;&amp;gt; 操作符表示无符号右移，高位取0&lt;br/&gt;2.HashMap(int)型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(int initialCapacity) {
    // 调用HashMap(int, float)型构造函数
    this(initialCapacity, DEFAULT_LOAD_FACTOR);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.HashMap()型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap() {
    // 初始化填充因子
    this.loadFactor = DEFAULT_LOAD_FACTOR; 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.HashMap(Map&amp;lt;? extends K&amp;gt;)型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m) {
    // 初始化填充因子
    this.loadFactor = DEFAULT_LOAD_FACTOR;
    // 将m中的所有元素添加至HashMap中
    putMapEntries(m, false);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：putMapEntries(Map&amp;lt;? extends K, ? extends V&amp;gt; m, boolean evict)函数将m的所有元素存入本HashMap实例中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final void putMapEntries(Map&amp;lt;? extends K, ? extends V&amp;gt; m, boolean evict) {
    int s = m.size();
    if (s &amp;gt; 0) {
        // 判断table是否已经初始化
        if (table == null) { // pre-size
            // 未初始化，s为m的实际元素个数
            float ft = ((float)s / loadFactor) + 1.0F;
            int t = ((ft &amp;lt; (float)MAXIMUM_CAPACITY) ?
                    (int)ft : MAXIMUM_CAPACITY);
            // 计算得到的t大于阈值，则初始化阈值
            if (t &amp;gt; threshold)
                threshold = tableSizeFor(t);
        }
        // 已初始化，并且m元素个数大于阈值，进行扩容处理
        else if (s &amp;gt; threshold)
            resize();
        // 将m中的所有元素添加至HashMap中
        for (Map.Entry&amp;lt;? extends K, ? extends V&amp;gt; e : m.entrySet()) {
            K key = e.getKey();
            V value = e.getValue();
            putVal(hash(key), key, value, false, evict);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;重要函数分析&quot;&gt;3.3 重要函数分析&lt;/h3&gt;
&lt;p&gt;1.putVal&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, i;
    // table未初始化或者长度为0，进行扩容
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    // (n - 1) &amp;amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
    if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    // 桶中已经存在元素
    else {
        Node&amp;lt;K,V&amp;gt; e; K k;
        // 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
        if (p.hash == hash &amp;amp;&amp;amp;
            ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                // 将第一个元素赋值给e，用e来记录
                e = p;
        // hash值不相等，即key不相等；为红黑树结点
        else if (p instanceof TreeNode)
            // 放入树中
            e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
        // 为链表结点
        else {
            // 在链表最末插入结点
            for (int binCount = 0; ; ++binCount) {
                // 到达链表的尾部
                if ((e = p.next) == null) {
                    // 在尾部插入新结点
                    p.next = newNode(hash, key, value, null);
                    // 结点数量达到阈值，转化为红黑树
                    if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    // 跳出循环
                    break;
                }
                // 判断链表中结点的key值与插入的元素的key值是否相等
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    // 相等，跳出循环
                    break;
                // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表
                p = e;
            }
        }
        // 表示在桶中找到key值、hash值与插入元素相等的结点
        if (e != null) { 
            // 记录e的value
            V oldValue = e.value;
            // onlyIfAbsent为false或者旧值为null
            if (!onlyIfAbsent || oldValue == null)
                //用新值替换旧值
                e.value = value;
            // 访问后回调
            afterNodeAccess(e);
            // 返回旧值
            return oldValue;
        }
    }
    // 结构性修改
    ++modCount;
    // 实际大小大于阈值则扩容
    if (++size &amp;gt; threshold)
        resize();
    // 插入后回调
    afterNodeInsertion(evict);
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：HashMap并没有直接提供putVal接口给用户调用，而是提供的put函数，而put函数就是通过putVal来插入元素的。&lt;/p&gt;
&lt;p&gt;2.getNode&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final Node&amp;lt;K,V&amp;gt; getNode(int hash, Object key) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; int n; K k;
    // table已经初始化，长度大于0，根据hash寻找table中的项也不为空
    if ((tab = table) != null &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
        (first = tab[(n - 1) &amp;amp; hash]) != null) {
        // 桶中第一项(数组元素)相等
        if (first.hash == hash &amp;amp;&amp;amp; // always check first node
            ((k = first.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            return first;
        // 桶中不止一个结点
        if ((e = first.next) != null) {
            // 为红黑树结点
            if (first instanceof TreeNode)
                // 在红黑树中查找
                return ((TreeNode&amp;lt;K,V&amp;gt;)first).getTreeNode(hash, key);
            // 否则，在链表中查找
            do {
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：HashMap并没有直接提供getNode接口给用户调用，而是提供的get函数，而get函数就是通过getNode来取得元素的&lt;/p&gt;
&lt;p&gt;3.resize&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final Node&amp;lt;K,V&amp;gt;[] resize() {
    // 当前table保存
    Node&amp;lt;K,V&amp;gt;[] oldTab = table;
    // 保存table大小
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    // 保存当前阈值 
    int oldThr = threshold;
    int newCap, newThr = 0;
    // 之前table大小大于0
    if (oldCap &amp;gt; 0) {
        // 之前table大于最大容量
        if (oldCap &amp;gt;= MAXIMUM_CAPACITY) {
            // 阈值为最大整形
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        // 容量翻倍，使用左移，效率更高
        else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
            oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
            // 阈值翻倍
            newThr = oldThr &amp;lt;&amp;lt; 1; // double threshold
    }
    // 之前阈值大于0
    else if (oldThr &amp;gt; 0)
        newCap = oldThr;
    // oldCap = 0并且oldThr = 0，使用缺省值（如使用HashMap()构造函数，之后再插入一个元素会调用resize函数，会进入这一步）
    else {           
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    // 新阈值为0
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
    // 初始化table
    Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
    table = newTab;
    // 之前的table已经初始化过
    if (oldTab != null) {
        // 复制元素，重新进行hash
        for (int j = 0; j &amp;lt; oldCap; ++j) {
            Node&amp;lt;K,V&amp;gt; e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash &amp;amp; (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                    Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                    Node&amp;lt;K,V&amp;gt; next;
                    // 将同一桶中的元素根据(e.hash &amp;amp; oldCap)是否为0进行分割，分成两个不同的链表（如果e.hash &amp;amp; oldCap为1该entry可以分配到新的桶），完成rehash
                    do {
                        next = e.next;
                        if ((e.hash &amp;amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。扩容再hash的过程可以用下图表示：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171112125941731-1976919440.png&quot;/&gt;&lt;br/&gt;在resize的时候，oldtable数组结点可以分为三类：1.没有子链的非空结点（例如A1,A3）,2.空结点（例如A2）,3.带有子链的结点（例如A4）。&lt;br/&gt;对于第一种：resize后的位置根据 E.hash()&amp;amp;newCap-1 有两种可能，例如图中的：A1到B1或B5，A3到B3或 B7&lt;br/&gt;对于第二种：不必处理，例如A2&lt;br/&gt;对于第三种：数组结点以及子链上的结点，根据E.hash()&amp;amp;oldCap是否为0，分为两组，如果为0，根据图中的从A4到B4，如果不为0，从A4到A8&lt;/p&gt;
&lt;p&gt;4.hash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   static final int hash(Object key) {
        int h;
//返回Object的hashCode值的高十六位和低十六位的异或值
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之所以不直接使用hashCode值，是为了降低不同对象哈希值相同的可能，对象在table中序列值计算的算法是hash&amp;amp;（tab.length-1）。这就可以解释table的length为什么为2的幂次倍，图解如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171109093044903-956091414.png&quot;/&gt;&lt;br/&gt;5.containsValue&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public boolean containsValue(Object value) {
        Node&amp;lt;K,V&amp;gt;[] tab; V v;
        if ((tab = table) != null &amp;amp;&amp;amp; size &amp;gt; 0) {
         //遍历每个桶
            for (int i = 0; i &amp;lt; tab.length; ++i) {
         //遍历某个桶中的所有结点
                for (Node&amp;lt;K,V&amp;gt; e = tab[i]; e != null; e = e.next) {
                    if ((v = e.value) == value ||
                        (value != null &amp;amp;&amp;amp; value.equals(v)))
                        return true;
                }
            }
        }
        return false;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四延伸&quot;&gt;四、延伸&lt;/h2&gt;
&lt;p&gt;在了解了HashMap之后，我们重新考虑下hashCode和equals的设计问题，例如有以下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class People{
    private String name;
    private int age;
     
    public People(String name,int age) {
        this.name = name;
        this.age = age;
    }  
     
    public void setAge(int age){
        this.age = age;
    }
 
public class Main {
 
    public static void main(String[] args) {
         
        People p1 = new People(&quot;Jack&quot;, 12);
        HashMap&amp;lt;People, Integer&amp;gt; hashMap = new HashMap&amp;lt;People, Integer&amp;gt;();
        hashMap.put(p1, 1);
         
        System.out.println(hashMap.get(new People(&quot;Jack&quot;, 12)));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述结果的输出值为Null,原因很简单，因为Object本地的hashCode方法与对象的地址有关，那么p1在hashMap中储存的数组序列号与new People(&quot;Jack&quot;,12)在hashMap中查找的位置不同，因此需要重写hashCode方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public int hashCode() {
        // TODO Auto-generated method stub
        return name.hashCode()*37+age;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行输出结果还是null，重写了hashCode方法我们保证了放和取的位置相同，但是getVal的细节是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (first.hash == hash &amp;amp;&amp;amp; // always check first node
                ((k = first.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                return first;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是==判断地址相同，显然(k = first.key) == key为false，那么(key != null &amp;amp;&amp;amp; key.equals(k))呢？由于我们没有重写equals方法，用的是Object的equals方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public boolean equals(Object obj) {
        return (this == obj);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很显然也返回false，结果返回不了，我们想到了重写equals方法，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    @Override
    public boolean equals(Object obj) {
        // TODO Auto-generated method stub
        return this.name.equals(((People)obj).name) &amp;amp;&amp;amp; this.age== ((People)obj).age;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候运行就成功输出1了，当然我们这里仅仅考虑了最简单的实现同时也是不规范的（同一对象的equals可能不同），没有考虑动态变化，例如：我们在将p1放进hashMap后，通过p1.setAge（11）改变age值，在调用hashMap.get（p1）也返回null，总的来说equals和hashCode的设计必须满足在前面所述的：&lt;br/&gt;1.对象equals为true,那么hashCode一定相同&lt;br/&gt;2.hashCode不同，那么equals一定为false&lt;/p&gt;
&lt;h2 id=&quot;五hashmap的优化&quot;&gt;五、HashMap的优化&lt;/h2&gt;
&lt;h3 id=&quot;扩容的效率问题&quot;&gt;4.1扩容的效率问题&lt;/h3&gt;
&lt;p&gt;从前面分析已知，当插入一个元素的时候size就加1，若size大于threshold的时候，就会进行扩容。假设我们的capacity大小为32，loadFator为0.75,则threshold为24 = 32 * 0.75，此时，插入了25个元素，并且插入的这25个元素都在同一个桶中，桶中的数据结构为红黑树，则还有31个桶是空的，为了元素能够更加均匀的分布在各个桶中，也会进行扩容处理，但是这次扩容可能对于之后元素的查询优化了一点点，可是扩容的代价可是巨大的，这也就是hashMap在使用的时候需要优化。&lt;/p&gt;
&lt;h3 id=&quot;hashmap优化&quot;&gt;4.2 hashMap优化&lt;/h3&gt;
&lt;p&gt;hashMap优化的目的主要有两个：1.减少hash冲突，减少查询的时间复杂度， 2.减少扩容的次数，因为扩容需要遍历所有的元素，这个代价是巨大的&lt;br/&gt;方法有以下几种：&lt;br/&gt;1.设计良好的hash函数是减少hash冲突的根本&lt;br/&gt;2.对于初始loadFactor和capacity的设定，有如下两种情况：&lt;br/&gt;1.如果知道大致需要的容量，把初始容量设置好以解决扩容损失；例如：现在有1000个数据，需要 1000/0.75 = 1333 ,又 1024 &amp;lt; 1333 &amp;lt; 2048，所以最好使用2048作为初始容量&lt;br/&gt;2.容量是动态变化的，我们尽量将capacity设置的大一点，loadFactor设置小一点，这既保证了hash冲突的可能性，也降低了扩容的可能性。&lt;/p&gt;
</description>
<pubDate>Sun, 12 Nov 2017 15:40:00 +0000</pubDate>
<dc:creator>unbelievableme</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kundeg/p/7779002.html</dc:identifier>
</item>
<item>
<title>express的学习，与使用 - 一灯evel</title>
<link>http://www.cnblogs.com/evaling/p/7823551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evaling/p/7823551.html</guid>
<description>&lt;p&gt;最近在学习vue的一个实战项目，碰到一个express,当时很萌，就随便看了看................&lt;/p&gt;
&lt;p&gt;expres是基于node 的一个web框架，&lt;/p&gt;
&lt;p&gt;首先可以找到它的官网照着学习&lt;/p&gt;
&lt;p&gt;这里只讲一些官网上没有的或者很晦涩的东西.........&lt;/p&gt;
&lt;p&gt;1）模版引擎的使用&lt;/p&gt;
&lt;p&gt;给出package.json的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{&lt;br/&gt;&quot;name&quot;: &quot;demo&quot;,&lt;br/&gt;&quot;version&quot;: &quot;1.0.0&quot;,&lt;br/&gt;&quot;description&quot;: &quot;&quot;,&lt;br/&gt;&quot;main&quot;: &quot;demo01.js&quot;,&lt;br/&gt;&quot;scripts&quot;: {&lt;br/&gt;&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;br/&gt;},&lt;br/&gt;&quot;author&quot;: &quot;&quot;,&lt;br/&gt;&quot;license&quot;: &quot;ISC&quot;,&lt;br/&gt;&quot;dependencies&quot;: {&lt;br/&gt;&quot;body-parser&quot;: &quot;^1.18.2&quot;,&lt;br/&gt;&quot;express&quot;: &quot;^4.16.2&quot;,&lt;br/&gt;&quot;hbs&quot;: &quot;~2.3.1&quot;,&lt;br/&gt;&quot;jade&quot;: &quot;^1.11.0&quot;&lt;br/&gt;}&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以npm install 一下，&lt;/p&gt;
&lt;p&gt;我这里要坐的就是使用express的路由兼模版引擎搭建一个小网站。&lt;/p&gt;
&lt;p&gt;2）首先你的建立几个文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112215641731-36750369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;node_modules：这个就不解释了，你稍微使用个就知道了。&lt;/p&gt;
&lt;p&gt;public：这个里面我们主要是放些css，images等文件&lt;/p&gt;
&lt;p&gt;views：是视图文件（主要放一些）&lt;/p&gt;
&lt;p&gt;blog.js：主要是数据（模拟数据）&lt;/p&gt;
&lt;p&gt;evel02.js：就是我的启动文件（大家习惯的是app.js）&lt;/p&gt;

&lt;p&gt;3）边看代码，遍解释&lt;/p&gt;
&lt;p&gt;evel02.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.jb51.net/article/58166.htm&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; bodyParser = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body-parser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; path = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app =&lt;span&gt; express();


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; hbs是express的众多模版之一，可以google一下去了解。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; hbs = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置模版引擎&lt;/span&gt;
app.&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view engine&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
app.engine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,hbs.__express);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载数据&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;var&lt;/span&gt; blogEngine = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./blog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);


&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;app.use(bodyParser());

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parse application/x-www-form-urlencoded&lt;/span&gt;
app.use(bodyParser.urlencoded({ extended: &lt;span&gt;false&lt;/span&gt;&lt;span&gt; }));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parse application/json&lt;/span&gt;
&lt;span&gt;app.use(bodyParser.json()) ;

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  res.render('index');&lt;/span&gt;
  res.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  {
    tile:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;最近的文章&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    entries:&lt;strong&gt;blogEngine.getBlogEntries()&lt;/strong&gt;
  });
});

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/about&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;res.render('about');&lt;br/&gt;　　//渲染页面&lt;/span&gt;
  res.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;about&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{title:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;自我介绍&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
});

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/article/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;res.render('article');&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;var&lt;/span&gt; entry = blogEngine.getBlogEntry(req.&lt;span&gt;params&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;.id);&lt;/strong&gt;
res.render(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{title:entry.title,blog:entry});
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制定静态文件目录
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;app.use(express.static('public'));&lt;/span&gt;
app.use(express.&lt;span&gt;static&lt;/span&gt;(path.join(__dirname, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听3000端口&lt;/span&gt;
app.listen(&lt;span&gt;3000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;blog.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; entries =&lt;span&gt;[
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第一篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-1-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第二篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-2-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第三篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-3-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第四篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-4-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第五篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-5-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第六篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-6-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第七篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-7-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
];
&lt;span&gt;//倒出两个方法&lt;/span&gt;
exports.&lt;strong&gt;getBlogEntries &lt;/strong&gt;&lt;/span&gt;=&lt;span&gt; function(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries;
};

exports.&lt;strong&gt;getBlogEntry &lt;/strong&gt;&lt;/span&gt;=&lt;span&gt; function(id){
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;entries.length;i++&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(entries[i].id ==&lt;span&gt; id)
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries[i];
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;views（是express的默认视图文件夹）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112222127153-1541631088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;layout.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&lt;span&gt;
    {{{body}}}
   &lt;/span&gt;&amp;lt;footer&amp;gt;
      &amp;lt;p&amp;gt;
         &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt; - &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/about&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;自我介绍&amp;lt;/a&amp;gt;
      &amp;lt;/p&amp;gt;
   &amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;h1&amp;gt;文章列表&amp;lt;/h1&amp;gt;&lt;span&gt;
{{#each entries}}
   &lt;/span&gt;&amp;lt;p&amp;gt;
      &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/article/{{id}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{title}}&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&lt;span&gt;
      Published: {{published}}
   &lt;/span&gt;&amp;lt;/p&amp;gt;&lt;span&gt;
{{&lt;/span&gt;/&lt;span&gt;each}}  
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;article.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;&lt;span&gt;34333&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;span&gt;
    {{blog.title}}
  &lt;/span&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; --&amp;gt;


&amp;lt;h1&amp;gt;{{blog.title}}&amp;lt;/h1&amp;gt;&lt;span&gt;
Published: {{blog.published}}

&lt;/span&gt;&amp;lt;p/&amp;gt;&lt;span&gt;

{{blog.body}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;about.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;&lt;span&gt;
{{title}}
&lt;/span&gt;&amp;lt;p&amp;gt;正文&amp;lt;/p&amp;gt;
&amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt; --&amp;gt;


&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/css/style.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;h3&amp;gt;w文件上传递&amp;lt;/h3&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/pictures/upload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; enctype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multipart/form-data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
        Select an image to upload:
        &lt;/span&gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Upload Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里要解释一下，我的about.html模版是使用的html页面，当然你也可以使用hbs的模版&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;&lt;span&gt;
{{title}}
&lt;/span&gt;&amp;lt;p&amp;gt;正文&amp;lt;/p&amp;gt;
&amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整学习实例参考：&lt;span&gt;&lt;span&gt;http://blog.csdn.net/ganxunzou/article/details/42918015&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;（知识共享，知识的搬运工）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;看完这片文章就在思考怎么将express与前端相结合起来呢？？？(我不轻易问问提的。。。。)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写个css的都知道前端框架有很多vue,angular,react，他们都有自己的路由机制，而且还是蛮好用的。。。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;探究一番。。。。&lt;/p&gt;
&lt;p&gt;文件目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112225022747-1799042157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;app.js&lt;/p&gt;
&lt;p&gt;(这个是没有使用express的模版引擎的，我要做的就是使用&lt;span&gt;express做接口数据层&lt;/span&gt;，&lt;span&gt;使用前端路由，访问接口地址，进行数据获取&lt;/span&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express = require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; path =require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routes = require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./routes/index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);//

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app =&lt;span&gt; express();

app.use(express.&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;(path.join(__dirname,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)));

app.use(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,routes);

app.listen(&lt;/span&gt;&lt;span&gt;3001&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;routes/index.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; router =&lt;span&gt; express.Router();

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.render(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
    title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
  });
});

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.json({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.send({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});
router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.send({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goinfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});
module.exports &lt;/span&gt;=router;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看到这里可能有同学说这个和上面那个例子不是一样的吗？？？？&lt;/p&gt;
&lt;p&gt;不一样。。。区别就是res.send()，与res.render（）的区别，并且我也没用express的模板引擎&lt;/p&gt;
&lt;p&gt;res.send(),或者res.json（）是还回数据，res.render（）渲染页面&lt;/p&gt;
&lt;p&gt;public:(主要存放一些资源文件)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112225702231-182477574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;p&gt;(使用vue框架，简单的搭建了几个页面，没有使用vue-cli,因为不是终点)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

    &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/vue2.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/vue_router.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/axios.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

  &lt;span&gt;const&lt;/span&gt; Home=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is home page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; methods:{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   getData(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     axios.get('/').then(function(res){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       console.log(res);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }).catch(function(err){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       console.log(err);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     });
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; mounted(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   this.getData();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;
  };
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; foo=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is foo page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; bar=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is bar page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;get('/bar'&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;.then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };

  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; goInfo=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is foo goInfo&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios.&lt;/span&gt;&lt;strong&gt;&lt;span&gt;get('/goInfo'&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;.then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };
   &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; router =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
       mode:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;history&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
       routes:
     [
        {
          path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
          name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
          component:Home,
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; children:[
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     {path:'foo',name:'foo',component:foo},
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;        },
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:foo},
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:bar},
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:goInfo},
     ]
   })

  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; mou = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    router,
    template:`
      &lt;/span&gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;h1&amp;gt;Name Routes&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;currnt route &amp;lt;/p&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'home'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;home&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'foo'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;foo&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'bar'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;bar&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'goinfo'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;goinfo&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
      &amp;lt;/div&amp;gt;&lt;span&gt;
    `
  });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后你直接在命令行输入： node app.js&lt;/p&gt;
&lt;p&gt;访问localhost:3000&lt;/p&gt;

&lt;p&gt;&lt;span&gt;主要的已经讲完了，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来补充几点：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若要设置HTTP头部信息&lt;/span&gt;
app.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/htp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
  res.setHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/plain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  res.setHeader(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,body.length);
  res.setHeader(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;expire&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nocache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  res.send(body);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考例子：&lt;span&gt;&lt;span&gt;http://www.cnblogs.com/KevinSong/p/4495729.html#3837987&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;例子源码地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;https://github.com/EvalGitHub/myExpress&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:34:00 +0000</pubDate>
<dc:creator>一灯evel</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evaling/p/7823551.html</dc:identifier>
</item>
<item>
<title>java自定义注解 - 纯新手</title>
<link>http://www.cnblogs.com/alone-striver/p/7823550.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alone-striver/p/7823550.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;　　注解是Java 1.5引入的，目前已被广泛应用于各种Java框架，如Hibernate，&lt;a class=&quot;external&quot; href=&quot;http://www.journaldev.com/498/rest-using-jersey-complete-tutorial-with-jaxb-exception-handling-and-client-program&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Jersey&lt;/a&gt;，Spring。注解相当于是一种嵌入在程序中的元数据，可以使用注解解析工具或编译器对其进行解析，也可以指定注解在编译期或运行期有效。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Java SE5内置了&lt;span&gt;三种标准注解:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. &lt;strong&gt;@Override&lt;/strong&gt;——当我们想要复写父类中的方法时，我们需要使用该注解去告知编译器我们想要复写这个方法。这样一来当父类中的方法移除或者发生更改时编译器将提示错误信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. &lt;strong&gt;@Deprecated&lt;/strong&gt;——当我们希望编译器知道某一方法不建议使用时，我们应该使用这个注解。Java在javadoc 中推荐使用该注解，我们应该提供为什么该方法不推荐使用以及替代的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;strong&gt;@SuppressWarnings&lt;/strong&gt;——这个仅仅是告诉编译器忽略特定的警告信息，例如在泛型中使用原生数据类型。它的保留策略是SOURCE（译者注：在源文件中有效）并且被编译器丢弃。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　创建Java自定义注解，这里有&lt;span&gt;四种类型的元注解&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. &lt;strong&gt;@Documented&lt;/strong&gt; —— 指明拥有这个注解的元素可以被javadoc此类的工具文档化。这种类型应该用于注解那些影响客户使用带注释的元素声明的类型。如果一种声明使用&lt;strong&gt;Documented&lt;/strong&gt;进行注解，这种类型的注解被作为被标注的程序成员的公共API。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. &lt;strong&gt;@Target&lt;/strong&gt;——指明该类型的注解可以注解的程序元素的范围。该元注解的取值可以为TYPE,METHOD,CONSTRUCTOR,FIELD等。如果&lt;strong&gt;Target&lt;/strong&gt;元注解没有出现，那么定义的注解可以应用于程序的任何元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;strong&gt;@Inherited&lt;/strong&gt;——指明该注解类型被自动继承。如果用户在当前类中查询这个元注解类型并且当前类的声明中不包含这个元注解类型，那么也将自动查询当前类的父类是否存在&lt;strong&gt;Inherited&lt;/strong&gt;元注解，这个动作将被重复执行知道这个标注类型被找到，或者是查询到顶层的父类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4.&lt;strong&gt;@Retention&lt;/strong&gt;——指明了该Annotation被保留的时间长短。RetentionPolicy取值为SOURCE,CLASS,RUNTIME。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义注解的例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、新建自定义注解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112232932419-1595793792.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2、使用注解的类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112233105044-518342371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、提取注解的参数。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112233246575-112751966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:34:00 +0000</pubDate>
<dc:creator>纯新手</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alone-striver/p/7823550.html</dc:identifier>
</item>
<item>
<title>再学习之MyBatis - JMCui</title>
<link>http://www.cnblogs.com/jmcui/p/7801871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jmcui/p/7801871.html</guid>
<description>&lt;h2&gt;一、框架基本介绍&lt;/h2&gt;
&lt;h4&gt;1、概念&lt;/h4&gt;
&lt;p&gt;支持普通SQL查询、存储过程和高级映射，简化和实现了Java 数据持久化层的的开源框架，主要流行的原因在于他的简单性和易使用性。&lt;/p&gt;
&lt;h4&gt;2、特点&lt;/h4&gt;
&lt;p&gt;持久层 、ORM(对象关系映射) 、轻量级、支持SQL语句。&lt;/p&gt;
&lt;h4&gt;3、工作原理&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;应用程序读取mybatis的配置文件，形成配置对象。&lt;/li&gt;
&lt;li&gt;通过sqlsessionfactorybuilder读取配置对象，产生sqlsessionfactory&lt;/li&gt;
&lt;li&gt;通过sqlsessionfactory得到sqlsession&lt;/li&gt;
&lt;li&gt;通过sqlsession得到mapper映射器&lt;/li&gt;
&lt;li&gt;通过mapper读取对应的映射文件从而操作数据库&lt;/li&gt;
&lt;li&gt;处理事务&lt;/li&gt;
&lt;li&gt;释放sqlsession&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二、配置文件含义&lt;/h2&gt;
&lt;h3&gt;1、environment   &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0f40aa9f-d323-44d6-a6c8-e1ff16007c83')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0f40aa9f-d323-44d6-a6c8-e1ff16007c83',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;admin&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;transactionManager&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JNDI&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;admin&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 主要用来配置多个dataSource环境；在同一个环境中切换不同的dataSource时，需要为每个数据库创建一个SqlSessionFactory。对于每个环境 environment,我们需要配置 dataSource 和 transactionManager。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;1.1 DateSource&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;UNPOOLED:为每一个数据库操作创建一个新的连接，使用结束就关闭他。该方式适用于小规模数量的并发用户的简单应用程序上。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;POOLED:Mybatis会创建一个数据库连接池，连接池中的一个连接将会被用作数据库操作。一旦数据库操作完成，MyBatis 会将此连接返回给连接池。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;JNDI：MyBatis 从在应用服务器向配置好的 JNDI 数据源 dataSource 获取数据库连接。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;1.2 TransactionManager&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;JDBC：应用程序自己管理事务（Tomcat）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MANAGED：应用本身不去管理事务，而把事务管理交给应用所在的服务器进行管理。(JBoss、WebLogic、GlassFish)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2、properties&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3e7db1ce-76f8-4216-a5c3-b6b04b62a730')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3e7db1ce-76f8-4216-a5c3-b6b04b62a730',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;application.properties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc.username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;db_user&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc.password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;verysecurepwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里，如果 application.properties 文件包含值 jdbc.username 和 jdbc.password，则上述定义的 username 和password 的值 db_user 和 verysecurepwd 将会被 application.properties 中定义的对应的 jdbc.username 和jdbc.password 值覆盖。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3、typeAliases&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;如果没有设置typeAliases的类型别名，对于resultType和parameterType属性值，我们需要使用JavaBean的完全限定名。所以，我们可以为完全限定名使用别名，通过typeAliases设置：&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;3.1 为每个JavaBean单独起别名&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;alias&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain.Student&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;alias&lt;/span&gt;&lt;span&gt;=&quot;Tutor&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain.Tutor&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt;3.2 为JavaBean 所在的包起别名&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;当然也可以不用为每一个JavaBean 单独定义别名，你可以为提供需要起别名的JavaBean 所在的包，Mybatis会自动扫描包内定义的JavaBeans，然后分别为JavaBean注册一个小写字母开头的非完全限定的类名形式的别名。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cdcee050-6d21-4095-b097-a7f6e78dbdb0')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cdcee050-6d21-4095-b097-a7f6e78dbdb0',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果 Student.java 和 Tutor.java 的 Bean 定义在 com.mybatis3.domain 包中，则 com.mybatis3.domain.Student的别名会被注册为 student。而 com.mybatis3.domain.Tutor 别名将会被注册为 tutor。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt; 3.3 利用注解的方式起别名&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;使用注解@Alias起别名，@Alias 注解将会覆盖配置文件中的&amp;lt;typeAliases&amp;gt;定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Alias(&quot;StudentAlias&quot;)
public class Student
{ }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;4、typeHandlers&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;MyBatis 对于以下的类型使用内建的类型处理器：所有的基本数据类型、基本类型的包装类型、 byte[]、java.util.Date、 java.sql.Date、 java,sql.Time、 java.sql.Timestamp、 java 枚举类型等。所以当 MyBatis 发现属性的类型属于上述类型，他会使用对应的类型处理器将值设置到PreparedStatement 中，同样地，当从 SQL 结果集构建 JavaBean 时，也有类似的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果，我们可以自定义一个类型处理器为我们子定义的Class服务。&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;一旦我们实现了自定义的类型处理器，我们需要在&lt;/span&gt; &lt;span class=&quot;fontstyle2&quot;&gt;&lt;span&gt;mybatis-config.xml&lt;/span&gt; &lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;中注册它：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d3ff08c5-57ad-4bb5-a4e1-0b04c4557362')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d3ff08c5-57ad-4bb5-a4e1-0b04c4557362',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
 */
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PhoneTypeHandler &lt;span&gt;extends&lt;/span&gt; BaseTypeHandler&amp;lt;PhoneNumber&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setNonNullParameter(PreparedStatement preparedStatement, &lt;span&gt;int&lt;/span&gt; i, PhoneNumber phoneNumber, JdbcType jdbcType) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        preparedStatement.setString(i, phoneNumber.toString());
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(ResultSet resultSet, String s) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(resultSet.getString(s));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(ResultSet resultSet, &lt;span&gt;int&lt;/span&gt; i) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(resultSet.getString(i));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(CallableStatement callableStatement, &lt;span&gt;int&lt;/span&gt; i) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(callableStatement.getString(i));
    }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;自定义类型处理器&lt;/span&gt; &lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d510128c-5256-4f41-ba05-869fa5009848')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d510128c-5256-4f41-ba05-869fa5009848',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeHandlers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeHandler &lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;=&quot;com.summersoft.ts.util.PhoneTypeHandler&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeHandlers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注册自定义类型处理器&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 时间类型：Mybatis 会将java.util.Data 类型转换成java.sql.Timestamp（时间戳）并设置。&lt;/p&gt;
&lt;h3&gt;5、&lt;span class=&quot;fontstyle0&quot;&gt;Mappers&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e0411f79-0d67-4040-953b-001e21d6a834')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e0411f79-0d67-4040-953b-001e21d6a834',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/mybatis3/mappers/StudentMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;=&quot;file:///D:/mybatisdemo/app/mappers/TutorMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.mappers.TutorMapper&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.mappers&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;resource 属性用来指定在 classpath 中的 mapper 文件。&lt;/li&gt;
&lt;li&gt;url 属性用来通过完全文件系统路径或者 web URL 地址来指向 mapper 文件&lt;/li&gt;
&lt;li&gt;class 属性用来指向一个 mapper 接口&lt;/li&gt;
&lt;li&gt;package 属性用来指向可以找到 Mapper 接口的包名&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;三、映射文件讲解&lt;/h2&gt;
&lt;p&gt;  我们通过映射器配置文件配置了映射语句，同时创建一个完全对应的一个映射器接口。接口名跟配置文件名相同。接口所在包名也跟配置文件所在包名完全一 样。在配置文件中，其命名空间namespace 应该和接口的完全限定名保持一致。&lt;/p&gt;
&lt;h3&gt;1、INSERT&lt;/h3&gt;
&lt;p&gt;id： 对应接口的方法名&lt;br/&gt;parameterType： 输入参数&lt;br/&gt;useGeneratedKeys=&quot;true&quot; ：让数据库生成自增长的列&lt;br/&gt;keyProperty=&quot;属性名&quot;： 将生成的值设置到其中一个输入对象属性内&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是Oracle数据库，没有像MySQL那样的自增机制：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0ec1615c-0bfd-4b77-814c-aafd2d71db45')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0ec1615c-0bfd-4b77-814c-aafd2d71db45',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;BEFORE&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT ELEARNING.STUD_ID_SEQ.NEXTVAL FROM DUAL
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO STUDENTS(STUD_ID,NAME,EMAIL, PHONE)
        VALUES(#{studId},#{name},#{email},#{phone})
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;order=&quot;BEFORE&quot; 表示在插入语句发生前产生studId的值就赋给插入语句。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0e612462-f894-4e5b-975e-3a606dea5a66')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0e612462-f894-4e5b-975e-3a606dea5a66',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO STUDENTS(NAME,EMAIL, PHONE)
        VALUES(#{name},#{email},#{phone})
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;AFTER&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT ELEARNING.STUD_ID_SEQ.CURRVAL FROM DUAL
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; order=&quot;AFTER&quot; 表示在插入语句之后采用触发器(trigger)来设置主键值&lt;/p&gt;
&lt;h3&gt;2、SELECT&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2.1、&lt;/strong&gt; resultType='Student' 当 column名和对象property名一致时，会自动把相应的column填充上对象的property，如果查询记录返回多条，Mybatis 自动用 集合类来接收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2、&lt;/strong&gt;Mybatis根据集合的类型，会采用适当的集合实现：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于 List，Collection，Iterable 类型，MyBatis 将返回 java.util.ArrayList&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 Map 类型，MyBatis 将返回 java.util.HashMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 Set 类型，MyBatis 将返回 java.util.HashSet&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 SortedSet 类型，MyBatis 将返回 java.util.TreeSet&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3、&lt;/strong&gt;ResultType 和 ResuleMap 不能同时使用，ResultMap的 id 在此命名空间内是唯一的 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4、&lt;/strong&gt;Resulttype=&quot;java.util.HashMap&quot;。在这种情况下，结果集中的列名将会作为Map中的key值，而列值作值将会作为Map的value值。如果查询记录返回多条，Mybatis自动用集合类来接收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5、&lt;/strong&gt;我们可以从另外一个&amp;lt;resultMap&amp;gt;,扩展出一个新的&amp;lt;resultMap&amp;gt;,这样原来的属性值可以扩展过来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.6、&lt;/strong&gt;一对一关联查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45980449-83c0-47d9-b851-c25692b97557')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('45980449-83c0-47d9-b851-c25692b97557',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;phone&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;phone&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一直接关联&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fb0aa9bf-2ba6-46a3-b267-3336e6768f78')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fb0aa9bf-2ba6-46a3-b267-3336e6768f78',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Address&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;AddressResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResultIn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;AddressResult&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一嵌套关联&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('90012de3-59ce-464e-b1f5-970781a6b842')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('90012de3-59ce-464e-b1f5-970781a6b842',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResultHasOne&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;Address&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一内联关联has one&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.7、&lt;/strong&gt;一对多关联查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ad9660a5-85b2-4018-b368-619f1b413a9c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ad9660a5-85b2-4018-b368-619f1b413a9c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Course&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;course_id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;courseId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;start_date&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;startDate&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;end_date&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;endDate&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Tutor&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;TutorResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tutor_id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;tutorId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tutor_name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;courses&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.8、&lt;/strong&gt;在MyBatis的配置文件中，可以不指定输入参数。而采用#{param1}和#{param2}引用接口中方法的形参。&lt;/p&gt;
&lt;h3&gt; 3、动态SQL&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3.1&lt;/strong&gt; if 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('66a4b784-4f09-4a19-8b4b-66a08e916456')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('66a4b784-4f09-4a19-8b4b-66a08e916456',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
          SELECT * FROM COURSES
          WHERE TUTOR_ID= #{tutorId}
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND NAME LIKE #{courseName}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;startDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND START_DATE &amp;gt; #{startDate}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;endDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND END_DATE  &lt;/span&gt;&lt;span&gt;&amp;amp;lt;&lt;/span&gt;&lt;span&gt; #{endDate}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;if 语句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.2&lt;/strong&gt; choose when条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fcb35f29-f68c-4188-92d6-837117e07af9')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fcb35f29-f68c-4188-92d6-837117e07af9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCoursesTwo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;searchBy == 'Tutor'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;searchBy == 'CourseName'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE TUTOR start_date &amp;gt;= now()
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;choose when 条件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;choose&amp;gt;测试条件的值，且使用第一个值为TRUE的子句，如果没有条件为True，则使用&amp;lt;otherwise&amp;gt;内的字句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3&lt;/strong&gt; where 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d8453b14-f1f4-4ecc-8368-0887d9778fb6')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d8453b14-f1f4-4ecc-8368-0887d9778fb6',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt;
            resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot; tutorId != null &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;startDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND start_date &amp;gt;= #{startDate}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;endDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND end_date  &lt;/span&gt;&lt;span&gt;&amp;amp;lt;&lt;/span&gt;&lt;span&gt;= #{endDate}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Where 子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;where&amp;gt;元素只有在内部标签有返回内容时才会在动态语句上插入WHERE条件语句。并且，如果Where子句以AND 或者 OR 打头，则打头的AND 或 OR 将会被移除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.4&lt;/strong&gt; trim 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f37cddc4-35db-4125-ab5a-03a084b23446')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f37cddc4-35db-4125-ab5a-03a084b23446',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;WHERE&quot;&lt;/span&gt;&lt;span&gt; prefixOverrides&lt;/span&gt;&lt;span&gt;=&quot;AND | OR&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            /*拼接成的字句前面加上WHERE，如果WHERE后面有AND 或者 OR，将去掉。suffix末尾加上，suffixOverrides 末尾去掉*/
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot; tutorId != null &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;trim 子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; &amp;lt;trim&amp;gt; 元素和 &amp;lt;where&amp;gt;元素类似，如果任意一个&amp;lt;if&amp;gt;条件为true，&amp;lt;trim&amp;gt;元素会插入WHERE，并且移除紧跟WHERE 后面的AND 或 OR&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.5&lt;/strong&gt; foreach 循环&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f58725b2-a4c4-478a-bf91-1fc05a2bd703')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f58725b2-a4c4-478a-bf91-1fc05a2bd703',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCoursesByTutors&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;tutorIds != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;tutorId&quot;&lt;/span&gt;&lt;span&gt; collection&lt;/span&gt;&lt;span&gt;=&quot;tutorIds&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    OR tutor_id=#{tutorId}
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;foreach子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;它可以迭代遍历一个数组或者列表，构造AND/OR条件或者一个IN子句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.6&lt;/strong&gt; set 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('15eb9bd7-a0c4-451c-8acc-976d627315e9')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('15eb9bd7-a0c4-451c-8acc-976d627315e9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        update students
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;name=#{name},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;email != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;email=#{email},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;phone != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;phone=#{phone},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        where stud_id=#{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;set子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;如果&amp;lt;if&amp;gt;条件返回了任何文本内容，&amp;lt;set&amp;gt;将会插入set关键字和其文本内容。并且会剔除末尾的&quot;,&quot;&lt;/p&gt;
&lt;h3&gt; 4、缓存&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;4.1、&lt;/strong&gt;第一级缓存：如果你使用同一个SqlSession 接口对象调用了相同的SELECT语句，则直接会从缓存中返回结果，而不是再查询一次数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2、&lt;/strong&gt;第二级缓存：我们可以在SQL映射器XML配置文件中使用&amp;lt;cache /&amp;gt;元素添加全局二级缓存。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;所有的在映射语句文件定义的&amp;lt;select&amp;gt;语句的查询结果都会被缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所有的在映射语句文件定义的&amp;lt;insert&amp;gt;,&amp;lt;update&amp;gt; 和&amp;lt;delete&amp;gt;语句将会刷新缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存根据最近最少被使用（Least Recently Used，LRU）算法管理&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存不会被任何形式的基于时间表的刷新（没有刷新时间间隔），即不支持定时刷新机制&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存将存储 1024 个 查询方法返回的列表或者对象的引用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存是线程安全的&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然我们也可以 复写默认属性来自定义缓存的行为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;cache &lt;/span&gt;&lt;span&gt;eviction&lt;/span&gt;&lt;span&gt;=&quot;FIFO&quot;&lt;/span&gt;&lt;span&gt; flushInterval&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;512&quot;&lt;/span&gt;&lt;span&gt; readOnly&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eviction：LRU、FIFO、SOFT、WEAK&lt;br/&gt;readOnly：一个只读的缓存会向调用者返回被缓存对象的一份引用。一个读/写缓存cache将会返回改对象的一份拷贝。&lt;/p&gt;



</description>
<pubDate>Sun, 12 Nov 2017 15:30:00 +0000</pubDate>
<dc:creator>JMCui</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jmcui/p/7801871.html</dc:identifier>
</item>
<item>
<title>分页查询时，使用cookie保存上次的查询条件。jQuery实现方法以及中间遇到的坑 - 宇的季节</title>
<link>http://www.cnblogs.com/chenkeyu/p/7823528.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenkeyu/p/7823528.html</guid>
<description>&lt;p&gt;今天做分页查询时需要在跳转页面时保存上次查询的条件，如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171112232021934-1573825167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 实现的大致思路就是用cookie本地保存。&lt;/p&gt;
&lt;p&gt;其中需要用到jQuery.Cookie&lt;span&gt;插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用方法很简单：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　存数据：$.cookie(“key”,”value”);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　取数据：&lt;/span&gt;$.cookie(“key”);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的实现方法就是在每次点击&lt;/span&gt;“查询”按钮时，把查询的条件放入&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在页面初始化时，会调用&lt;/span&gt;jQuery&lt;span&gt;，这时把&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;存放的值从新放入表单中。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当点击提交时把查询的参数存到cookie&lt;/span&gt;
                $(&quot;#condition&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    $.cookie(&lt;/span&gt;'c_name', $(&quot;input[name='c_name']&quot;&lt;span&gt;).val());
                    $.cookie(&lt;/span&gt;'c_id', $(&quot;select[name='c_id']&quot;&lt;span&gt;).val());
                    $.cookie(&lt;/span&gt;'s_id', $(&quot;select[name='s_id']&quot;&lt;span&gt;).val());
                    
                })
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert($(&quot;select[name='c_id']&quot;).val()+&quot;:&quot;+$(&quot;select[name='s_id']&quot;).val())&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载页面时将之前提交的参数赋值&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;($.cookie('c_name')!=0&amp;amp;&amp;amp;$.cookie('c_name')!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;input[name='c_name']&quot;).val($.cookie('c_name'&lt;span&gt;));
                }
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.cookie('c_id')!=0&amp;amp;&amp;amp;$.cookie('c_id')!=&quot;null&quot;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;select[name='c_id']&quot;).val($.cookie('c_id'&lt;span&gt;));
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.cookie('s_id')!=0&amp;amp;&amp;amp;$.cookie('s_id')!=&quot;null&quot;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;select[name='s_id']&quot;).val($.cookie('s_id'&lt;span&gt;));
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　实现步骤很简单，但是其中却有一个坑：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在把&lt;/span&gt;cookie&lt;span&gt;的值插入表单前，需要进行验证，看值是不是&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;或者空值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为第一次打开页面时&lt;/span&gt;cookie&lt;span&gt;是没有值，如果不验证就会出现下面这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171112232253778-1955638358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正常情况下进行非空验证需要下面两步：&lt;/p&gt;
&lt;p&gt;$.cookie('c_id')!=0 &amp;amp;&amp;amp; $.cookie('c_id')!=null&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是当我使用却发现即使没存值，&lt;/span&gt;.cookie(“c_id”)!=null&lt;span&gt;也返回&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;最后搞了很久发现，当&lt;/span&gt;null&lt;span&gt;值存入&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;时，是存入了一个&lt;/span&gt;”null”&lt;span&gt;的字符串。不仅如此，对&lt;/span&gt;true&lt;span&gt;、&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;，也是这样的处理，所以在进行比较时就需要加双引号：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$.cookie('c_id')!=0 &amp;amp;&amp;amp; $.cookie('c_id')!=”null”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这时我就思考了一下，可能不止&lt;/span&gt;cookie&lt;span&gt;，对于其他一些&lt;/span&gt;&lt;span&gt;key-value&lt;/span&gt;&lt;span&gt;类型的容器，对&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;等这些特殊符号可能也是做字符串处理，大家以后一定要注意。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:26:00 +0000</pubDate>
<dc:creator>宇的季节</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenkeyu/p/7823528.html</dc:identifier>
</item>
<item>
<title>速率限制的一些思考 - 行者酱油君</title>
<link>http://www.cnblogs.com/makor/p/some-tips-for-rate-limit.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makor/p/some-tips-for-rate-limit.html</guid>
<description>&lt;p&gt;无论是在我们日常的软件使用中还是软件开发中，我们总是会遇到速率限制的问题，例如短信验证码限制一小时最多只能发送5次，这是日常生活的情况；在工作中，我们可能会限制说 DB 的操作不能超过 100 qps，这也是一种限制操作，那么对于这些限制速率的行为，有没有什么好一点的实践或者理论，最近我就看了一些，但是理解可能并不是很深刻，但不妨写出来和大家交流一番。&lt;/p&gt;
&lt;h3 id=&quot;toc_0&quot;&gt;常用的限流策略&lt;/h3&gt;
&lt;p&gt;在看了不少的实践文章之后，我发现有主要讲得都是两种方法，而且都是从网络限流中迁移过来的，分别是：&lt;strong&gt;Leaky bucket&lt;/strong&gt; 和 &lt;strong&gt;Token bucket&lt;/strong&gt;，这两种方法可能乍看之下差不多，而且有不少文章并没有明确得指出他们的区别，所以很容易混淆误导；但这不是唯一的原因，还有个原因就是在某些条件下，他们其实达到的效果和实现都是一致的，所以不免让人混淆。&lt;/p&gt;
&lt;p&gt;下面我就以我个人的理解分别介绍讲解一下这两种策略，同时，针对 &lt;strong&gt;Token bucket&lt;/strong&gt; 我将会使用 Python 编程语言写一个简单的实现，方便大家有一个更清晰的认识。&lt;/p&gt;
&lt;h3 id=&quot;toc_1&quot;&gt;Leaky bucket&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Leaky bucket&lt;/strong&gt; 最初也是用在网络方面，用于计算机网络和通信网络中包交换的速率限制，后面也就迁移到其他领域了。&lt;strong&gt;Leaky bucket&lt;/strong&gt; 的理论有两种，分别称为&lt;strong&gt;基于 meter&lt;/strong&gt; 的和 &lt;strong&gt;基于 queue&lt;/strong&gt; 的，他们实现的具体思路不同，而且当你真正实现的时候，会发现有很大的区别，下面我也分别介绍这两种。&lt;/p&gt;
&lt;h4 id=&quot;toc_2&quot;&gt;基于 meter 的 Leaky bucket&lt;/h4&gt;
&lt;p&gt;这种基于 &lt;strong&gt;meter&lt;/strong&gt; 的 &lt;strong&gt;Leaky bucket&lt;/strong&gt; 相对来说比较简单，其实它就有一个计数器，然后有消息要发送的时候，就看计数器够不够，如果计数器没有满的话，那么这个消息就可以被处理，如果计数器不足以发送消息的话，那么这个消息将会被丢弃。&lt;/p&gt;
&lt;p&gt;那么这个计数器是怎么来的呢，基于 &lt;strong&gt;meter&lt;/strong&gt; 的形式的计数器就是发送的频率，例如你设置得频率是不超过 5条/s ，那么计数器就是 5，在一秒内你每发送一条消息就减少一个，当你发第 6 条的时候计时器就不够了，那么这条消息就被丢弃了。&lt;/p&gt;
&lt;p&gt;从这里可以看出基于 &lt;strong&gt;meter&lt;/strong&gt; 的 &lt;strong&gt;Leaky bucket&lt;/strong&gt; 的特点就是肯定不超过指定速率，而且可以一定程度保持原始消息的发送信息，但是不能很好得应对突发的短期流量。&lt;/p&gt;
&lt;h4 id=&quot;toc_3&quot;&gt;基于 queue 的 Leaky bucket&lt;/h4&gt;
&lt;p&gt;另外一种基于 &lt;strong&gt;queue&lt;/strong&gt; 的 &lt;strong&gt;Leaky bucket&lt;/strong&gt; 实现起来比较复杂，但是原理却比较简单，和 &lt;strong&gt;meter&lt;/strong&gt; 差不多，也是存在一个 counter，这个 counter 却不表示速率限制，而是表示 &lt;strong&gt;bucket&lt;/strong&gt; 的大小，这里就是当有消息要发送的时候看 &lt;strong&gt;bucket&lt;/strong&gt; 中是否还有位置，如果有，那么就将消息放进 &lt;strong&gt;queue&lt;/strong&gt; 中，注意，这里就是不一样的地方，这里只是将消息放进 &lt;strong&gt;Leaky bucket&lt;/strong&gt; 维护的一个 &lt;strong&gt;queue&lt;/strong&gt; 的，这个 &lt;strong&gt;queue&lt;/strong&gt; 以 FIFO 的形式提供服务；如果 &lt;strong&gt;bucket&lt;/strong&gt; 没有位置了，那么同样得，消息将被抛弃。&lt;/p&gt;
&lt;p&gt;在消息被放进 &lt;strong&gt;queue&lt;/strong&gt; 之后，&lt;strong&gt;Leaky bucket&lt;/strong&gt; 还维护了一个定时器，这个定时器的周期就是我们设置的频率周期，例如我们设置得频率是 5条/s，那么定时器的周期就是 200ms，定时器每 200ms 去 &lt;strong&gt;queue&lt;/strong&gt; 里获取一次消息，如果有消息，那么就发送出去，如果没有，那么轮空了。&lt;/p&gt;
&lt;p&gt;从上面的描述中，可以看出，对于 &lt;strong&gt;基于 queue&lt;/strong&gt; 的 &lt;strong&gt;Leaky bucket&lt;/strong&gt; 来说，它可以保证的是任务之间的执行间隔严格按照我们设置得频率，不会超频，但是也正是因为如此，完全失去了任务进来的相关信息，而且对于突发流量也完全无法应对，无论流量多或少，都是固定的频率。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;Token bucket&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Token bucket&lt;/strong&gt;，我们中文习惯性称之为 &lt;strong&gt;令牌桶&lt;/strong&gt;，它的特点就是有一个 &lt;strong&gt;bucket&lt;/strong&gt;，然后在 &lt;strong&gt;bucket&lt;/strong&gt; 中存放了一定数额的 &lt;strong&gt;token&lt;/strong&gt;，每当你要发送消息的时候，需要从 &lt;strong&gt;bucket&lt;/strong&gt; 中获取一个 &lt;strong&gt;token&lt;/strong&gt;，只要获取成功，那么你就可以发送，否则，那么将被放弃。&lt;/p&gt;
&lt;p&gt;既然 &lt;strong&gt;token&lt;/strong&gt; 会被消耗，那么肯定有补充的方式，是的，&lt;strong&gt;Token bucket&lt;/strong&gt; 的 token 补充方式就是以设定的频率往&lt;strong&gt;bucket&lt;/strong&gt; 里放置 &lt;strong&gt;token&lt;/strong&gt;，而 &lt;strong&gt;bucket&lt;/strong&gt; 是有大小的，如果要放置 &lt;strong&gt;token&lt;/strong&gt; 的时候 &lt;strong&gt;bucket&lt;/strong&gt; 满了，那么 &lt;strong&gt;token&lt;/strong&gt; 将被抛弃，否则 &lt;strong&gt;bucket&lt;/strong&gt; 中的 &lt;strong&gt;token&lt;/strong&gt; 数量增加。&lt;/p&gt;
&lt;p&gt;这里就是问题的有趣之处，和&lt;strong&gt;基于 queue 的 Leaky bucket&lt;/strong&gt; 的一点区别就在于 bucket 是有容量的，也就是说假设我们设置的频率是 5条/s，但是我将 &lt;strong&gt;bucket&lt;/strong&gt; 的 size 设置为 10，那么也就是说当 &lt;strong&gt;bucket&lt;/strong&gt; 被放满的时候，同一时间我可以提供的 &lt;strong&gt;token&lt;/strong&gt; 数量是 10 个，这意味着我可以临时支持 10条/s 的速率，这就是 &lt;strong&gt;token bucket&lt;/strong&gt; 比较有意思的一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token bucket&lt;/strong&gt; 可以也能在一定程度上保持流量的来源特征，同时也支持一定的突发流量，但是，从另外一方面也可能导致超频，当然这依赖于你的选择，可以不要。&lt;/p&gt;
&lt;h3 id=&quot;toc_5&quot;&gt;一个 Python 实现&lt;/h3&gt;
&lt;p&gt;根据上面的 &lt;strong&gt;Token bucket&lt;/strong&gt; 的描述，我就以 Python 编程语言为例，给出一个&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171112232108919-1086651330.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这个例子比较简单， &lt;strong&gt;Token bucket&lt;/strong&gt; 有两个因子，分别是：&lt;strong&gt;频率&lt;/strong&gt; 和 &lt;strong&gt;bucket大小&lt;/strong&gt;，这里我们就将他们定义为 &lt;code&gt;fill_rate&lt;/code&gt; 和 &lt;code&gt;tokens&lt;/code&gt;，然后当我们需要发送消息的时候，就调用 &lt;code&gt;consume&lt;/code&gt; 申请指定数量的 &lt;strong&gt;token&lt;/strong&gt;，如果我们发现 &lt;strong&gt;token&lt;/strong&gt; 是够的，那么 ok 没问题，不够的话就没办法了。&lt;/p&gt;
&lt;p&gt;这里的判断 token 数量的逻辑还是不错的，值得同学们稍作思考一番。下面是一个使用的例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171112232108700-114787505.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h3 id=&quot;toc_6&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;最后，总结一下两种不同的方式的不同点和优缺点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaky bucket&lt;/strong&gt; 的优点就是可以保证速率肯定不超过我们设定的速率，最多也就相等；同时，实现可以很简单（meter），也可以很复杂（queue），不过更多情况下我们是认为它不能保持原始流量的特征的。在流量方面， &lt;strong&gt;Leaky bucket&lt;/strong&gt; 不能应对突发流量，但是，反过来想，这个可以用来防御恶意流量，不过这个 &lt;strong&gt;bucket&lt;/strong&gt; 的大小选择是个难题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token bucket&lt;/strong&gt; 的一个比较大的优点就是可以应对突发流量，同时如果我们希望也可以转化为 &lt;strong&gt;meter leaky bucket&lt;/strong&gt;，但是缺点也是比较明显，就是可能会产生突发性的流量，例如一个小时的流量都在第一秒耗完了，当然，这有个比较麻烦得解决方案：滑动窗口，这里没有提到。&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Leaky_bucket&quot;&gt;Leaky bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Token_bucket&quot;&gt;Token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xizhibei/blog/issues/29&quot;&gt;接口限流&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 12 Nov 2017 15:21:00 +0000</pubDate>
<dc:creator>行者酱油君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makor/p/some-tips-for-rate-limit.html</dc:identifier>
</item>
<item>
<title>通讯框架 t-io 学习——websocket 部分源码解析 - 丶Pz</title>
<link>http://www.cnblogs.com/panzi/p/7823118.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/panzi/p/7823118.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　前端时间看了看t-io的websocket部分源码，于是抽时间看了看websocket的握手和他的通讯机制。本篇只是简单记录一下websocket握手部分。&lt;/p&gt;
&lt;h2&gt;WebSocket握手&lt;/h2&gt;
&lt;p&gt;　　好多人都用过websocket，不过有的都是在框架之上，只知道连接某个地址，然后调用js API就可以使用websocket了。但是通过阅读t-io的源码才稍微有点明白，服务端到底做了什么。将t-io的websocket demo运行起来之后，我们看一下请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/841545/201711/841545-20171112211551888-1505833268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，请求头部分：&lt;/p&gt;
&lt;p&gt;　　Connection：Upgrade 固定&lt;/p&gt;
&lt;p&gt;　　Upgrade：websocket 固定&lt;/p&gt;
&lt;p&gt;　　Host：为websocket请求地址&lt;/p&gt;
&lt;p&gt;　　Sec-WebSocket-Version:13,websocket协议版本号&lt;/p&gt;
&lt;p&gt;　　Sec-WebSocket-Key:发送给服务端需要校验的key，是一个Base64 encode的值，这个是浏览器随机生成的。那么服务端如果响应的话，需要做如下操作：将 Key 追加固定字符串 ：“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后进行SHA-1加密，在转化为base64.&lt;/p&gt;
&lt;p&gt;　　服务端响应如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/841545/201711/841545-20171112212255263-1665371181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Status Code：101 Switching Protocols&lt;/p&gt;
&lt;p&gt;　　sec-websocket-accept：为上文中转化为base64的串。&lt;/p&gt;
&lt;p&gt;　　upgrade：升级为websocket协议&lt;/p&gt;
&lt;p&gt;　　握手成功，可以进行通讯。&lt;/p&gt;
&lt;h2&gt;握手源码&lt;/h2&gt;
&lt;p&gt;　　代码来源：tio/websocket/server/WsServerAioHandler.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HttpResponse updateWebSocketProtocol(HttpRequest request, ChannelContext channelContext) {
　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先获取请求头部信息&lt;/span&gt;
        Map&amp;lt;String, String&amp;gt; headers =&lt;span&gt; request.getHeaders();
　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取Sec-WebSocket-Key&lt;/span&gt;
        String Sec_WebSocket_Key = headers.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(HttpConst.RequestHeaderKey.Sec_WebSocket_Key);

　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果key是空的话，肯定不会握手成功&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(Sec_WebSocket_Key)) {
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;追加固定串&lt;/span&gt;
            String Sec_WebSocket_Key_Magic = Sec_WebSocket_Key + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SHA-1加密&lt;/span&gt;
            &lt;span&gt;byte&lt;/span&gt;[] key_array =&lt;span&gt; SHA1Util.SHA1(Sec_WebSocket_Key_Magic);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转化为base64&lt;/span&gt;
            String acceptKey =&lt;span&gt; BASE64Util.byteArrayToBase64(key_array);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造响应体&lt;/span&gt;
            HttpResponse httpResponse = &lt;span&gt;new&lt;/span&gt; HttpResponse(request, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;响应状态码 101 Switching Protocols&lt;/span&gt;
&lt;span&gt;            httpResponse.setStatus(HttpResponseStatus.C101);

            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; respHeaders = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Connection：upgrade&lt;/span&gt;
&lt;span&gt;            respHeaders.put(HttpConst.ResponseHeaderKey.Connection, HttpConst.ResponseHeaderValue.Connection.Upgrade);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Upgrade:websocket&lt;/span&gt;
            respHeaders.put(HttpConst.ResponseHeaderKey.Upgrade, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WebSocket&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sec-WebSocket-Accept:生成的base64串&lt;/span&gt;
&lt;span&gt;            respHeaders.put(HttpConst.ResponseHeaderKey.Sec_WebSocket_Accept, acceptKey);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置响应头&lt;/span&gt;
&lt;span&gt;            httpResponse.setHeaders(respHeaders);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回响应信息 握手成功&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; httpResponse;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;WebSocket 数据帧解析&lt;/h2&gt;
&lt;p&gt;　　注：博客部分内容来源于：&lt;a href=&quot;https://github.com/zhangkaitao/websocket-protocol/wiki/5.%E6%95%B0%E6%8D%AE%E5%B8%A7&quot; target=&quot;_blank&quot;&gt;https://github.com/zhangkaitao/websocket-protocol/wiki/5.%E6%95%B0%E6%8D%AE%E5%B8%A7&lt;/a&gt;  有兴趣的同学可以直接读本链接内容。&lt;/p&gt;
&lt;p&gt;　　相信很多人从其他博客中也看过这个图，当然啦，这个图是官方出品的权威数据帧格式图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/841545/201711/841545-20171112214638841-629601470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其实我第一眼看的时候确实看不懂，不过没关系，一点一点的看。&lt;/p&gt;
&lt;p&gt;　　FIN：1bit，指示这个消息是否为最后片段，1是，0否。如果不是最后片段，则服务端需要将所有消息接受完并组装成一个完整的消息才可以。（t-io中目前只支持FIN=1）&lt;/p&gt;
&lt;p&gt;　　RSV123每个长度为1bit，目前就都是固定 0。&lt;/p&gt;
&lt;p&gt;　　opcode：4bit，数据操作类型。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;%x0 代表一个继续帧&lt;/li&gt;
&lt;li&gt;%x1 代表一个文本帧&lt;/li&gt;
&lt;li&gt;%x2 代表一个二进制帧&lt;/li&gt;
&lt;li&gt;%x3-7 保留用于未来的非控制帧&lt;/li&gt;
&lt;li&gt;%x8 代表连接关闭&lt;/li&gt;
&lt;li&gt;%x9 代表ping&lt;/li&gt;
&lt;li&gt;%xA 代表pong&lt;/li&gt;
&lt;li&gt;%xB-F 保留用于未来的控制帧&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　MASK:1bit,是否掩码，1掩码，0非掩码。从客户端发送到服务端的这个值必须为1，否则服务端不接受。服务端返回到客户端的这个值必须为 0.&lt;/p&gt;
&lt;p&gt;　　Payload len:负载数据的长度，7bit。由于7bit只能存储0-127，所以为了能够表示准确的长度，在这个值为0-125区间的时候，payload length的长度就是该值。当 值为126的时候，后边两个字节（16位）的值表示长度。当值为127的时候，后边8字节（64位）的值表示长度。&lt;/p&gt;
&lt;p&gt;　　Mask key：掩码，0或4个bit。值取决于MASK是否为1.在有掩码的情况下，数据就要根据掩码来解析。否则不用解析。解析规则为：每个字节的值与掩码的索引（字节索引值对4取模）异或运算。（array[i] = array[i] ^ mask[i % 4]）&lt;/p&gt;
&lt;p&gt;　　其实说实话我也没弄得非常懂，但是基本了解了以上这些知识之后，我们就可以读懂源码的意思了。&lt;/p&gt;
&lt;h2&gt;数据帧解析源码&lt;/h2&gt;
&lt;p&gt;　　代码来源：tio/websocket/common/WsServerDecoder.java&lt;/p&gt;
&lt;p&gt;　　代码中的注释为我自己的理解所添加的注释，不一定正确。（由于源码中有部分注释，我的注释添加“注”字以作区分）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; WsRequest decode(ByteBuffer buf, ChannelContext channelContext) throws AioDecodeException {
WsSessionContext imSessionContext &lt;/span&gt;=&lt;span&gt; (WsSessionContext) channelContext.getAttribute();
List&lt;/span&gt;&amp;lt;&lt;span&gt;byte&lt;/span&gt;[]&amp;gt; lastParts =&lt;span&gt; imSessionContext.getLastParts();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一阶段解析&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; initPosition =&lt;span&gt; buf.position();
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; readableLength = buf.limit() -&lt;span&gt; initPosition;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; headLength =&lt;span&gt; WsPacket.MINIMUM_HEADER_LENGTH;
　　　　
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (readableLength &amp;lt;&lt;span&gt; headLength) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：读取第一个字节 这里以 0x81举例 它的二进制为：10000001&lt;/span&gt;
&lt;span&gt;byte&lt;/span&gt; first = buf.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：这个 0xff还是很有意思的，当byte类型想转为int类型的时候，比如： int res = byteValue &amp;amp; 0xff；
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int b = first &amp;amp; 0xFF; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换成32位
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0x80(127) 10000000
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0x81(128) 10000001
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此行代码说实话，我是用了很长的时间才理解，说来惭愧，刚开始连 &amp;amp; 操作符啥意思都不清楚。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按位与运算符“&amp;amp;”是双目运算符。其功能是参与运算的两数各对应的二进位相与。只要对应的二个二进位都为1时，结果位就为1。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参与运算的两个数均以补码出现。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0x80 &amp;amp; 0x81 10000000&lt;/span&gt;
boolean fin = (first &amp;amp; &lt;span&gt;0x80&lt;/span&gt;) &amp;gt; &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到第8位 10000000&amp;gt;0
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：这段我不理解什么意思，为什么要右移4位&lt;/span&gt;
@SuppressWarnings(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unused&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; rsv = (first &amp;amp; &lt;span&gt;0x70&lt;/span&gt;) &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;4&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到5、6、7 为01110000 然后右移四位为00000111
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：获取操作码
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0x0f 00001111 (按位与操作，前四位都为0，那么操作结果就是opCode的值)&lt;/span&gt;
&lt;span&gt;byte&lt;/span&gt; opCodeByte = (&lt;span&gt;byte&lt;/span&gt;) (first &amp;amp; &lt;span&gt;0x0F&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后四位为opCode 00001111
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：转换OpCode&lt;/span&gt;
Opcode opcode =&lt;span&gt; Opcode.valueOf(opCodeByte);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (opcode ==&lt;span&gt; Opcode.CLOSE) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Aio.remove(channelContext, &quot;收到opcode:&quot; + opcode);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return null;&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fin) {
    log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} 暂时不支持fin为false的请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelContext);
    Aio.remove(channelContext, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;暂时不支持fin为false的请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面这段代码不要删除，以后若支持fin，则需要的

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            if (lastParts == null) {

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                lastParts = new ArrayList&amp;lt;&amp;gt;();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                imSessionContext.setLastParts(lastParts);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            }&lt;/span&gt;
&lt;span&gt;
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    imSessionContext.setLastParts(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：开始解析第二个字节。8-16位，第八位为mask掩码值1或者0，后7位为payload length&lt;/span&gt;
&lt;span&gt;byte&lt;/span&gt; second = buf.&lt;span&gt;get&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向后读取一个字节
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：又是 &amp;amp; 操作。 0xff:11111111
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11111111 &amp;amp; 10000001 = 10000001  向右移动七位，只剩下第一位的值 00000001
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所以该操作过后就知道第一位为 0 或者 1 ，得知 payload Data是否经过掩码处理&lt;/span&gt;
boolean hasMask = (second &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span&gt;7&lt;/span&gt; == &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于标识PayloadData是否经过掩码处理。如果是1，Masking-key域的数据即是掩码密钥，用于解码PayloadData。客户端发出的数据帧需要进行掩码处理，所以此位是1。


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Client data must be masked&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; (!hasMask) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第9为为mask,必须为1
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;throw new AioDecodeException(&quot;websocket client data must be masked&quot;);&lt;/span&gt;
} &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：有掩码的情况下，掩码占用4个字节，所以在这里headLength + 4&lt;/span&gt;
    headLength += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：第一位为mask位置，后7位为payload length
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0x7f : 01111111
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;amp;操作过后得到payload的值
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取后7位  Payload legth，如果&amp;lt;126则payloadLength&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; payloadLength = second &amp;amp; &lt;span&gt;0x7F&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] mask = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：如果payloadLength = 126，那么说明这个值不是真正的payloadLength，后边两个字节才表示真正的length
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为126读2个字节，后两个字节为payloadLength&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (payloadLength == &lt;span&gt;126&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要多占两个字节表示payloadLength。headlength + 2&lt;/span&gt;
    headLength += &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (readableLength &amp;lt;&lt;span&gt; headLength) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}

payloadLength &lt;/span&gt;=&lt;span&gt; ByteBufferUtils.readUB2WithBigEdian(buf);
　　log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} payloadLengthFlag: 126，payloadLength {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelContext, payloadLength);

}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：如果payloadLength = 127，则后 8个字节 64位长度的值表示payloadLength
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127读8个字节,后8个字节为payloadLength&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (payloadLength == &lt;span&gt;127&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头部长度 + 8&lt;/span&gt;
    headLength += &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (readableLength &amp;lt;&lt;span&gt; headLength) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：我猜测getLong方法就读取buf中下一位长整数，即64位的payloadLength(first ,second都已经读取完)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;|first|second|payloadLength|&lt;/span&gt;
payloadLength = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) buf.getLong();
　　log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} payloadLengthFlag: 127，payloadLength {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelContext, payloadLength);
}

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (payloadLength &amp;lt; &lt;span&gt;0&lt;/span&gt; || payloadLength &amp;gt;&lt;span&gt; WsPacket.MAX_BODY_LENGTH) {
&lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AioDecodeException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body length(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + payloadLength + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) is not right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (readableLength &amp;lt; headLength +&lt;span&gt; payloadLength) {
　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hasMask) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：有掩码，掩码长度为4个字节，读取掩码的值&lt;/span&gt;
    mask = ByteBufferUtils.readBytes(buf, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二阶段解析&lt;/span&gt;
WsRequest websocketPacket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WsRequest();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：设置各种属性值&lt;/span&gt;
&lt;span&gt;websocketPacket.setWsEof(fin);
websocketPacket.setWsHasMask(hasMask);
websocketPacket.setWsMask(mask);
websocketPacket.setWsOpcode(opcode);
websocketPacket.setWsBodyLength(payloadLength);

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (payloadLength == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; websocketPacket;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：读取payloadLength长度的body值&lt;/span&gt;
&lt;span&gt;byte&lt;/span&gt;[] array =&lt;span&gt; ByteBufferUtils.readBytes(buf, payloadLength);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hasMask) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注：有掩码，所以需要通过掩码解析&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;^操作 位值相同为0 ，不同为1
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 00001111 ^ 00001010 = 00000101&lt;/span&gt;
        array[i] = (&lt;span&gt;byte&lt;/span&gt;) (array[i] ^ mask[i % &lt;span&gt;4&lt;/span&gt;&lt;span&gt;]);
    }
}

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;fin) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lastParts.add(array);&lt;/span&gt;
&lt;span&gt;
    log.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payloadLength {}, lastParts size {}, array length {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, payloadLength, lastParts.size(), array.length);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; websocketPacket;
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; allLength =&lt;span&gt; array.length;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (lastParts != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] part : lastParts) {
    　　allLength &lt;/span&gt;+=&lt;span&gt; part.length;
　　}
&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] allByte = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[allLength];

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; offset = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] part : lastParts) {
    System.arraycopy(part, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, allByte, offset, part.length);
    offset &lt;/span&gt;+=&lt;span&gt; part.length;
}
System.arraycopy(array, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, allByte, offset, array.length);
    array &lt;/span&gt;=&lt;span&gt; allByte;
}

websocketPacket.setBody(array);

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (opcode ==&lt;span&gt; Opcode.BINARY) {

} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        String text &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        text &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(array, WsPacket.CHARSET_NAME);
        websocketPacket.setWsBodyText(text);
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (UnsupportedEncodingException e) {
        log.error(e.toString(), e);
        }
    }
}
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; websocketPacket;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;　　由于本人也是小菜鸟，能看懂的就那么多了，很多代码都读不懂。哎，大神就是大神啊，编码都精准到每一个bit上了。不过通过阅读源码和websocket文档对比，还是多少能够理解一些的。再次感谢开源贡献者，向所有开源大神致敬。&lt;/p&gt;
</description>
<pubDate>Sun, 12 Nov 2017 14:56:00 +0000</pubDate>
<dc:creator>丶Pz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/panzi/p/7823118.html</dc:identifier>
</item>
<item>
<title>JS模块化开发----require.js - 白菜白</title>
<link>http://www.cnblogs.com/zxt-17862802783/p/7822226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zxt-17862802783/p/7822226.html</guid>
<description>&lt;p&gt;前端开发中，起初只要在&lt;code&gt;script&lt;/code&gt;标签中嵌入几十上百行代码就能实现一些基本的交互效果，后来js得到重视，应用也广泛起来了，&lt;code&gt;jQuery，Ajax，Node.Js，MVC，MVVM&lt;/code&gt;等的助力也使得前端开发得到重视，也使得前端项目越来越复杂，然而，&lt;code&gt;JavaScript&lt;/code&gt;却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块（module）了，所以，进行模块化开发的重要性就不言而喻了。那么什么是模块呢？&lt;/p&gt;
&lt;p&gt;一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。&lt;/p&gt;
&lt;p&gt;所以，今天小编介绍一下js模块化开发的几种方法。&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、模块化开发规范&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;js模块化的开发并不是随心所欲的，为了便于他人的使用和交流，需要遵循一定的规范。目前，通行的js模块规范主要有两种：&lt;code&gt;CommonJS&lt;/code&gt;和&lt;code&gt;AMD&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AMD&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;AMD 即&lt;code&gt;Asynchronous Module Definition&lt;/code&gt;，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是&lt;code&gt;CommonJS；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。&lt;/p&gt;
&lt;p&gt;关于AMD有两个非常重要的概念，那就是用于模块定义的define方法和用于处理依赖加载的require方法。&lt;/p&gt;

&lt;p&gt;（1）作为一个规范，只需定义其语法API，而不关心其实现。define函数定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;define(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;     [module-name?] /*可选*/, 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     [array-of-dependencies?] /*可选*/, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     [module-factory-or-object]
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;para&quot;&gt;module-name: 模块标识，可以省略。如果没有这个属性，则称为匿名模块。&lt;/li&gt;
&lt;li class=&quot;para&quot;&gt;array-of-dependencies: 所依赖的模块，可以省略。&lt;/li&gt;
&lt;li class=&quot;para&quot;&gt;module-factory-or-object: 模块的实现，或者一个JavaScript对象&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;para&quot;&gt;举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;define(
    &quot;myModule&quot;,
    [&quot;foo&quot;, &quot;bar&quot;],

    // 模块定义函数，依赖(foo,bar)作为参数映射到函数上
    function (foo, bar) {
        // 创建模块
        var myModule = {
            myFun: function () {
                console.log(&quot;Jeri&quot;);
            }
        }

        // 返回定义的模块
        return myModule;
    }
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）require()方法，有两个参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
require([module], callback);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个参数[module]，是一个数组，里面的成员就是要加载的模块；&lt;/li&gt;
&lt;li&gt;第二个参数callback，则是加载成功之后的回调函数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 举个实际栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;require(['math'], function (math) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　math.add(2, 3);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;CommonJS规范&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; &lt;code&gt;CommonJS&lt;/code&gt;是服务器端模块的规范，根据&lt;code&gt;CommonJS&lt;/code&gt;规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为&lt;code&gt;global&lt;/code&gt;对象的属性。输出模块变量的最好方法是使用&lt;code&gt;module.exports&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;不过，与AMD表现形式不同的是，CommonJS模块并不使用define进行定义。CommonJS模块由两部分组成：变量exports和require函数。&lt;/p&gt;
&lt;p&gt;（1）exports/require:加载模块使用&lt;code&gt;require&lt;/code&gt;方法，该方法读取一个文件并执行，最后返回文件内部的&lt;code&gt;module.exports&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;再举个栗子：创建两个js文件：&lt;/p&gt;
&lt;p&gt;libJS:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;// 新定义的模块方法
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function log(arg) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    console.log(arg);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;// 把方法暴露给其他模块
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; exports.log = log;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; app.JS:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;// ./lib是我们需要的一个依赖
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var lib = requrie(&quot;./lib&quot;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;// 新定义的模块方法
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;function foo() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    lib.log(&quot;jeri&quot;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;// 把方法暴露给其他模块
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; exports.foo = foo;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）module.exports&lt;/p&gt;
&lt;p&gt;直接举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var i = 1;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var max = 30;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;module.exports = function () {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   for (i -= 1; i++ &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; max&lt;/span&gt;&lt;span&gt;; ) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    console.log(i);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;  max *&lt;/span&gt;&lt;span&gt;= 1.1;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、JS模块的常用写法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; 在前言中小编也提过，模块：就是一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。&lt;/p&gt;
&lt;p&gt;除了接下来要讲的require.js，还有适合于一些简单模块的几种常用写法。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;字面量写法&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;要知道，模块就是实现特定功能的一组方法。&lt;/p&gt;
&lt;p&gt;只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。这也是最简单的一种写法。也就是说，每一个函数就是一个简单的模块。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function func1 (){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;  alert(&quot;这是func1&quot;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;function func2 (){
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;  alert(&quot;这是func2&quot;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 把栗子中的两个函数func1()和func2()就组成了一个模块；&lt;/p&gt;
&lt;p&gt;不过，这种写法有着一定的缺点：&lt;/p&gt;
&lt;p&gt;如果只是实现一些简单的功能还好，如果实现复杂的功能，太多的函数就会出现问题，&quot;污染&quot;了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;对象写法&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 所以，为了解决上述的问题，把模块写成一个对象，所有的模块成员都放到这个对象里面不失为一个好的方式。&lt;/p&gt;
&lt;p&gt;再再举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var module = {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    func1 : function(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;      alert(1);      
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    func2 : function(){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;      alert(2);      
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;module.func1();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; module.func2();
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;通过闭包实现&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在JavaScript中，并不能可以直接声明类，但我们可以使用闭包来封装私有的属性和方法，进而模拟类的概念，在JavaScript中实现Module模式；&lt;/p&gt;
&lt;p&gt;疯狂的举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var myModule = (function () {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    // 私有变量
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    var privateVar = 0;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    // 私有函数
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    var privateFun = function (foo) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        console.log(foo);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    return {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        // 私有变量
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        publicVar: &quot;foo&quot;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        // 公有函数
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        publicFun: function (arg) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            // 修改私有变量
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            privateVar ++;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            // 传入bar调用私有方法
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            privateFun(arg);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }) ()
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.4&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;输入全局变量&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。为了在模块内部调用全局变量，必须显式地将其他变量输入模块。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var module1 = (function ($, YAHOO) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　//...
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　})(jQuery, YAHOO);
&lt;/pre&gt;&lt;/div&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、require.js&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; requir.JS本就是为了实现js的模块开发而创建的一个js脚本，其主要有着两大优点：&lt;/p&gt;
&lt;p&gt;（1）实现js文件的异步加载，避免网页失去响应；&lt;/p&gt;
&lt;p&gt;（2）管理模块之间的依赖性，便于代码的编写和维护。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;require.js的实现步骤&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; （1）众所周知，要导入js文件，为了避免网页失去响应有两种方法；&lt;/p&gt;
&lt;p&gt;第一种，把&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;放在文件的最后。&lt;/p&gt;
&lt;p&gt;今天，我们主要说第二种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/require.js&quot;&lt;/span&gt;&lt;span&gt; defer async&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; async属性表明这个文件需要异步加载，避免网页失去响应。但是，IE不支持这个属性，只支持defer，所以需要把defer也写上。&lt;/p&gt;
&lt;p&gt;（2）在HTML中导入require.JS文件后，就可以编写自己的main.js文件。&lt;/p&gt;
&lt;p&gt;首先，导入main.js文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/require.js&quot;&lt;/span&gt;&lt;span&gt; data-main&lt;/span&gt;&lt;span&gt;=&quot;js/main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中：data-main属性的作用是，指定网页程序的主模块。&lt;/p&gt;
&lt;p&gt;在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。 &lt;/p&gt;
&lt;p&gt;（3）编写main.js;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;　require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　// some code here
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 通过require方法，实现代码的模块加载，传入两个参数：&lt;/p&gt;
&lt;p&gt;①第一个参数是一个数组，表示代码所依赖的模块。&lt;br/&gt;②第二个参数是一个回调函数，当前面的模块加载完成后，就会被调用。&lt;br/&gt;加载的模块一参数的形式传入，从而在回调函数内部可以使用这些模块，回调函数就是整个页面的JS代码;&lt;/p&gt;
&lt;p&gt;再次疯狂的举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　// some code here
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;模块的加载&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在上面的栗子中，我们可以使用require.config()方法，对模块的加载行为进行自定义。&lt;/p&gt;
&lt;p&gt;（1）require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。 &lt;/p&gt;
&lt;p&gt; 不要命的举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;require.config({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　paths: {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; （2）上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。&lt;/p&gt;
&lt;p&gt;如果这些模块在其他目录，比如js/lib目录，则有两种写法。&lt;/p&gt;
&lt;p&gt;一种是逐一指定路径。&lt;/p&gt;
&lt;p&gt;再次举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;require.config({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;　　　　paths: {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 另一种则是直接改变基目录（baseUrl）。&lt;/p&gt;
&lt;p&gt;再再次举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　require.config({
　　　　baseUrl: &quot;js/lib&quot;,
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,
　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,
　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;
　　　　}
　　});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （3）如果某个模块在另一台主机上，也可以直接指定它的网址；&lt;/p&gt;
&lt;p&gt;举栗子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;require.config({
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;
　　　　}
　　});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;require的AMD模块写法&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;require.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。&lt;/p&gt;
&lt;p&gt;具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。&lt;/p&gt;
&lt;p&gt;假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;// math.js
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;　　define(function (){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;　　　　var add = function (x,y){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;　　　　　　return x+y;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;　　　　};
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;　　　　return {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;　　　　　　add: add
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;　　　　};
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加载方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;// main.js
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;　　require(['math'], function (math){
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;　　　　alert(math.add(1,1));
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;　define(['myLib'], function(myLib){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;　　　　function foo(){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;　　　　　　myLib.doSomething();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;　　　　return {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;　　　　　　foo : foo
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;　　　　};
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 　　});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 在日常的工作中，js的模块法开发是一个不可或缺的一部分。在这里只是介绍了基于AMD模块的require.js。还有基于commonJS规范的node.js。小编会在下次和大家一起学习。&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 14:51:00 +0000</pubDate>
<dc:creator>白菜白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zxt-17862802783/p/7822226.html</dc:identifier>
</item>
<item>
<title>Vue.js用法详解（一）更新中~ - 一个柠檬</title>
<link>http://www.cnblogs.com/1996zy/p/7823039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1996zy/p/7823039.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　前段时间为了一个数据查询的项目自学了Vue，感觉这款框架还是很不错的，今天就整理整理这个框架如何使用，希望对正在学这个框架的小伙伴有所帮助~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;首先，我们先来了解一下Vue：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;span&gt;Vue.js是一套构建用户界面(user interface)的渐进式框架。与其他重量级框架不同的是，Vue 从根本上采用最小成本、渐进增量(incrementally adoptable)的设计。Vue 的核心库只专注于视图层，并且很容易与其他第三方库或现有项目集成。另一方面，当与单文件组件和 Vue生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供有力驱动。所以，Vue其实还是很强大的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;Vue.js的安装与模版语法&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Vue的使用非常简单，直接下载Vue.js或者Vue.min.js导入就可以使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1-1     模板语法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11.5&quot;&gt;
&lt;h5&gt;&lt;span&gt;1. html模版&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;　　html模版：基于DOM的模版，模版都是可解析的有效的HTML&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;插值&lt;/strong&gt;：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;　　文本&lt;/em&gt;：使用“Mustache”语法（大括号）{{ value }}；作用：替换实例上的属性值，当值改变时，插值内容会被自动更新。也可使用v-text=&quot;value&quot;代替。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;code&gt;　&lt;span&gt;　&amp;lt;p&amp;gt;{{ value }}&amp;lt;p&amp;gt; 等价于 &amp;lt;p v-text=&quot;value&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;　　原生的html&lt;/em&gt;：双大括号输出的文本，不会解析html标签。也就是说当实例的data为html标签时，不能解析而是直接输出出来。此时如想要解析，可使用v-html=&quot;value&quot;代替。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    data:{
        value: `&lt;/span&gt;&amp;lt;span&amp;gt;我是一个span标签&amp;lt;/span&amp;gt;`
&lt;span&gt;    }
});
&lt;/span&gt;&amp;lt;p&amp;gt;{{ value }}&amp;lt;p&amp;gt;   页面展示  =&amp;gt;  &amp;lt;span&amp;gt;我是一个span标签&amp;lt;/span&amp;gt; 
&amp;lt;p v-html=&quot;value&quot;&amp;gt;&amp;lt;p&amp;gt;   页面展示  =&amp;gt;&lt;span&gt;  我是一个span标签&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要注意的是，有时候因为一些网络延迟等原因，用户会在也买年中先看到{{ xxx }}，然后才有数据。我们若想避免此效果，可用v-text=&quot;xxxx&quot;代替&lt;/strong&gt;。&lt;br/&gt;&lt;em&gt;属性&lt;/em&gt;：使用v-bind进行绑定，可以响应变化。&lt;br/&gt;&lt;span&gt;&lt;code&gt;&amp;lt;h2 :class=&quot;{red:show}&quot;&amp;gt;标题&amp;lt;/h2&amp;gt; =&amp;gt; 注意此处的show为data内的一个布尔值数据，若真则添加red的class，若假则移除red的class，&lt;/code&gt;&lt;/span&gt;&lt;br/&gt;&lt;em&gt;使用javascript表达式&lt;/em&gt;：可以写简单的表达式。（可以简单的三目运算，但是不可以写if语句），以后会有计算属性。&lt;br/&gt;&lt;span&gt;&lt;code&gt;{ 1+2 }&lt;/code&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;code&gt;{ true? &quot;yes&quot;:&quot;no&quot; }&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;h5&gt;&lt;span&gt;2. 字符串模版&lt;/span&gt;&lt;/h5&gt;
&lt;h6&gt;&lt;span&gt;template字符串&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;tempalte =&amp;gt; 选项对象的属性&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;模版将会替换挂载的元素。挂载元素的内容都会被忽略，根节点只有一个，将html结构写在一对script标签中，设置type=&quot;x-template&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;box&quot;&amp;gt;

    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&quot;vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;'DOMContentLoaded',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = '&amp;lt;h2&amp;gt;hello pink!&amp;lt;/h2&amp;gt;'
        &lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            el: &lt;/span&gt;'#box'&lt;span&gt;,
            template: str
        });
    },&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&amp;lt;/script&amp;gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176850/201711/1176850-20171112210455919-1716479401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 说明权重比较高，直接“代替”挂载点，把原来的html替换后显示。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//代码片段这个就是利用script标签对内定义模版，局限性：不能跨文件使用，一个页面中可以使用
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;x-template&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;str&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;我是一个p标签&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;p&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOMContentLoaded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        });
    },&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Vue实例&lt;/strong&gt;，每一个应用都是通过Vue这个构造函数创建根实例（root instance）启动New Vue（选项对象）。需要传入选项对象，对象包含挂在元素，数据，模板、方法等。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;el&lt;/em&gt;：挂载元素选择器 --- String|HtmlElement&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;data&lt;/em&gt;：代理数据 --- Object|Function&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;methods&lt;/em&gt;：定义方法 --- Object&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;Vue代理data数据&lt;/strong&gt;，每个vue实例都会代理其data对象里所有的属性，这些被代理的属性是响应的。&lt;strong&gt;新添加&lt;/strong&gt;的属性不具备响应功能，改变后不会更新视图。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;Vue实例自身属性和方法&lt;/strong&gt;，暴露自身的属性和方法,以“$”开头的，例如：$el、$data。。。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
       el: &lt;/span&gt;'#app'&lt;span&gt;,
       data: {
          message: &lt;/span&gt;'hello,Datura!!!'&lt;span&gt;
        }，
        methods: {
            test (){
                alert(&lt;/span&gt;1&lt;span&gt;);
            }
        },
        compontents:{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里存放组件&lt;/span&gt;
&lt;span&gt;        }
     });
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; vm就是new出来的实例 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  console.log(vm.$data);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也就是数据data，后面还有很多挂载在vm（new出来的）实例上的属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//代码片段放在template标签里，并给一个id名
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;tem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我是template&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOMContentLoaded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#tem&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        });
    },&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;&lt;span&gt;3. 模版—render函数&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;render函数很接近编辑器&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;render =&amp;gt; 选项对象属性&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据对象属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;class: {}, =&amp;gt; 绑定class，和v-bind:class一样的API&lt;/span&gt;&lt;br/&gt;&lt;span&gt;style: {}, =&amp;gt; 绑定样式，和v-bind:style一样的API&lt;/span&gt;&lt;br/&gt;&lt;span&gt;attrs: {}, =&amp;gt; 添加行间属性&lt;/span&gt;&lt;br/&gt;&lt;span&gt;domProps: {}, =&amp;gt; DOM元素属性&lt;/span&gt;&lt;br/&gt;&lt;span&gt;on: {}, =&amp;gt; 绑定事件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;nativeOn: {}, =&amp;gt; 监听原生事件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;directives: {}, =&amp;gt; 自定义指令&lt;/span&gt;&lt;br/&gt;&lt;span&gt;scopedSlots: {}, =&amp;gt; slot作用域&lt;/span&gt;&lt;br/&gt;&lt;span&gt;slot: {}, =&amp;gt; 定义slot名称 和组件有关系，插曹&lt;/span&gt;&lt;br/&gt;&lt;span&gt;key: &quot;key&quot;, =&amp;gt; 给元素添加唯一标识&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ref: &quot;ref&quot;, =&amp;gt; 引用信息&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;Vue.js的条件、循环语句&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2-1条件语句&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;v-if ：根据值的真假，切换元素会被销毁、重建； =&amp;gt; 在dom中已消失&lt;/span&gt;&lt;br/&gt;&lt;span&gt;v-show ：根据值的真假，切换元素的display属性；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;v-else ：条件都不符合时渲染；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;v-else-if ：多条件判断，为真则渲染；&lt;/span&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、V-if&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;条件判断使用 v-if 指令：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;seen&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;现在你看到我了&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;哈哈哈，打字辛苦啊！！！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data: {
    seen: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    ok: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  }
})
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、v-else&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以用 v-else 指令给 v-if 添加一个 &quot;else&quot; 块：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随机生成一个数字，判断是否大于0.5，然后输出对应信息：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;Math.random() &amp;gt; 0.5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Sorry
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Not sorry
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
})
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;三、v-show&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;我们也可以使用 v-show 指令来根据条件展示元素：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data: {
    ok: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  }
})
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;四、v-else-if&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;判断 type 变量的值：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;type === 'A'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      A
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else-if&lt;/span&gt;&lt;span&gt;=&quot;type === 'B'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      B
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else-if&lt;/span&gt;&lt;span&gt;=&quot;type === 'C'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      C
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      Not A/B/C
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data: {
    type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
  }
})
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;[v-show、v-if的使用与比较]&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;① v-show ：根据值的真假，切换元素的display属性；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;v-show的元素会始终渲染并保持在DOM中。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;v-show并不支持template语法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;② v-if是真实的条件渲染，因为他会确保条件块在切换当中适当的销毁与重建条件块内的事件监听器和子组件。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;③ v-if有更高的切换消耗而v-show有更高的初始渲染消耗。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果需要频繁切换使用v-show更好，如果在运行时条件不大可能改变，使用v-if比较好&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2-2      循环语句       v-for&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 语法：v-for=&quot;x in items&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　x是索引；items是数组，这样进行遍历 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;② v-for循环是不断创建新的标签，标签里的内容，我们决定，一般都是放在数组里，然后遍历显示出来。也可以放对象 ，遍历对象。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;③ 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(val,key) in fruitsArr&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ val }} =&amp;gt; {{ key }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;  //循环出来的列表项
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOMContentLoaded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            data:{
                fruitsArr:[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;banana&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据源&lt;/span&gt;
&lt;span&gt;            }
        });
    },&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176850/201711/1176850-20171112213518169-388362227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;编者按&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　今天就先介绍到这，后续我们继续更新，因为重点在后头呢，哈哈~&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 12 Nov 2017 13:36:00 +0000</pubDate>
<dc:creator>一个柠檬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1996zy/p/7823039.html</dc:identifier>
</item>
<item>
<title>Maven聚合与继承 - 水木竹水</title>
<link>http://www.cnblogs.com/shuimuzhushui/p/7822719.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shuimuzhushui/p/7822719.html</guid>
<description>&lt;p&gt;本文将在以下三部分进行编写：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;POM文件解析&lt;/li&gt;
&lt;li&gt;构建顺序&lt;/li&gt;
&lt;li&gt;可选择性部署&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt; Maven&lt;strong&gt;聚合&lt;/strong&gt;即可以将多个子模块聚合在一起进行构建，&lt;strong&gt;继承&lt;/strong&gt;即所有子模块均可以继承父模块的属性、依赖和插件等，可消除重复配置。&lt;/p&gt;
&lt;p&gt;Maven基础性的知识不在此赘述，本文中涉及的Maven关键标签包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;packaging&lt;/strong&gt;：打包方式，常见的有jar（默认）、war和pom等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module&lt;/strong&gt;：子模块声明&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;properties&lt;/strong&gt;：属性，可定义依赖报的版本号、定义某些插件的配置等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt;：依赖管理，具有依赖管理的POM，即不会给父模块引入依赖，也不会给子模块引入依赖。只有子模块声明依赖的使用（只需groupId和artifactId即可指明所用依赖），才会引入依赖包。使用import范围依赖导入依赖管理配置暂不讨论；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pluginManagement&lt;/strong&gt;：插件管理，与依赖管理类似，该元素的配置不会实际插件调用的行为，只有当POM中正在配置对应的plugin元素才起作用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repositories&lt;/strong&gt;：用于声明远程仓库，可以是私有仓库（可由nexus搭建）。所有POM文件都会继承Maven顶级POM，其中包含Maven中央仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;distributionManagement&lt;/strong&gt;：部署管理，可部署到远程Maven仓库，支持snapshotRepository和repository分别对应快照和稳定版本。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举一个比较常见的例子，假设某项目project包含三个模块，分别是：project_a、project_b、project_c，其文件结构如下，三个子模块与pom.xml在同一级，与父模块是父子目录结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/project
    /project_a
    /project_b
    /project_c
    pom.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1. POM文件解析&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;父模块project&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project_a&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project_b&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project_c&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;   
&lt;span&gt;18&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        ......
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;   
&lt;span&gt;34&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;              ......
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.12.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;skipTests&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;skipTests&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;   
&lt;span&gt;59&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven repository&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://serverip:port/nexus/content/groups/public/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;     
&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 发布 构件 到 私服 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;nexus&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;releases&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://serverip:port/nexus/content/repositories/releases/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt; 
&lt;span&gt;81&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshotRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://serverip:port/nexus/content/repositories/snapshots/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshotRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;distributionManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt; 4-6行：声明该构件在Maven仓库中的唯一坐标；&lt;/li&gt;
&lt;li&gt;7行： 打包方式为pom，起聚合作用的父模块必须声明为pom方式，否则构建失败；&lt;/li&gt;
&lt;li&gt;8-12行：聚合三个子模块project_a、project_b、project_c，每个module的值代表当前POM的&lt;strong&gt;相对目录，&lt;/strong&gt;如果三个子模块与父模块是平行目录结构，则值应该为 &lt;strong&gt;../project_a&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;14-16行：定义POM属性，其可由子模块继承，在此声明为spring版本号；&lt;/li&gt;
&lt;li&gt;18-32行：配置依赖管理，对工程不会引入依赖，只有真正声明对应依赖才会引入；&lt;/li&gt;
&lt;li&gt;34-57行：配置插件管理，同依赖管理；&lt;/li&gt;
&lt;li&gt;59-71行：配置远程Maven仓库，需要在setting.xml中配置远程Maven仓库的用户名与密码等信息，如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt; 74-86行：发布构件到私服配置，其他开发者可以使用该构件&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;子模块（project_a）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project_a&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project_a&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        ......
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;              ......
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt; 6-10行：由parent元素声明该模块的父模块为project，其中省略了&amp;lt;relativePath&amp;gt;，该元素标识父模块POM的相对位置（由父模块与子模块的目录结构决定），默认值为 &lt;strong&gt;../pom.xml&lt;/strong&gt;，在本例子中为默认值；&lt;/li&gt;
&lt;li&gt;11-12行：由于继承了父模块中的所有配置，此处只需要声明artifactId即可，groupId与version继承自父模块。name元素用于描述，在构建日志找那个将显示该名；&lt;/li&gt;
&lt;li&gt;14-24行：真正声明所需依赖，会为该模块引入对应依赖，只需groupId和artifactId；&lt;/li&gt;
&lt;li&gt;26-38行：真正声明所需插件，也只需groupId和artifactId；&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2. 构建顺序&lt;/h2&gt;
&lt;p&gt;在对工程只需 mvn clean install等命令的时候，Maven会首先解析聚合模块的POM、分析要构建的模块、并计算出一个反应堆构建顺序（Reactor Build Order），然后根据这个顺序依次构建模块。其中反应堆是所有模块组成的一个构建结构，包含各模块之间的继承与依赖关系，计算合理的模块构建顺序。（模块构建具体经历过哪些过程，可学习Maven中的生命周期）。&lt;/p&gt;
&lt;p&gt;假设三个模块之间存在一定的依赖关系，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1012728/201711/1012728-20171112202528794-1464668732.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本工程的构建顺序如下，聚合模块project、project_a、project_c、project_b：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] project
[INFO] project_a
[INFO] project_c
[INFO] project_b
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 还可以通过命令行对反应堆进行裁剪，包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-am， --also-make 同时构建所列模块的依赖模块&lt;/li&gt;
&lt;li&gt;-amd， --also-make-dependents 同时构建依赖于所列模块的模块&lt;/li&gt;
&lt;li&gt;-pl， --projects &amp;lt;arg&amp;gt; 构建指定的模块，模块间用逗号分隔&lt;/li&gt;
&lt;li&gt;-rf，-resume-form &amp;lt;arg&amp;gt; 从指定模块开始构建&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举例：mvn clean install -pl project_a,project_b&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] project_a
[INFO] project_b
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; mvn clean install -pl project_a -am&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] project
[INFO] project_a
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; mvn clean install -pl project_a -amd&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] project_a
[INFO] project_c
[INFO] project_b
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; mvn clean install -pl project_a -amd -rf project_c&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] project_c
[INFO] project_b
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. 可选择性部署&lt;/h2&gt;
&lt;p&gt;在父模块中声明了distributionManagement，在执行 mvn deploy的时候，会将所有的模块部署到远程服务器上。如何做到有选择性的的部署呢？比如不想将project_a部署到Maven仓库，有两种方式：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;在properties元素中声明 maven.deploy.skip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在project_a模块的POM文件中添加如下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.deploy.skip&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.deploy.skip&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;（2）声明子模块插件，覆盖父模块插件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在project_a模块的POM文件中，添加属于自己的部署插件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;skip&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;skip&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;POM的聚合与继承，前者方便快捷构建项目，后者可以消除重复配置；&lt;/li&gt;
&lt;li&gt;除了本文举的例子，可以在聚合模块任意文件夹什么父模块，只需要改变module和relativePath的相对路径即可；&lt;/li&gt;
&lt;li&gt;根据反应堆对各模块间依赖关系的计算，形成合理的构建顺序，并可以对构建顺序进行裁剪；&lt;/li&gt;
&lt;li&gt;可以通过插件属性配置，实现模块可选择的部署；&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;参考：&lt;/h2&gt;
</description>
<pubDate>Sun, 12 Nov 2017 13:17:00 +0000</pubDate>
<dc:creator>水木竹水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shuimuzhushui/p/7822719.html</dc:identifier>
</item>
</channel>
</rss>