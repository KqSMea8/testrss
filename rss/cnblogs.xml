<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>CSS3选择器详解 - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8426799.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8426799.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8426799.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;css3介绍&quot;&gt;CSS3介绍&lt;/h2&gt;
&lt;p&gt;CSS3在CSS2基础上，&lt;strong&gt;增强&lt;/strong&gt;或&lt;strong&gt;新增&lt;/strong&gt;了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。&lt;/p&gt;
&lt;h3 id=&quot;css3的现状&quot;&gt;CSS3的现状&lt;/h3&gt;
&lt;h3 id=&quot;应对的策略渐进增强&quot;&gt;应对的策略：渐进增强&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;（1）坚持&lt;strong&gt;渐进增强&lt;/strong&gt;的原则：&lt;strong&gt;让低版本浏览器能正常访问页面，高版本的浏览器用户体验更好&lt;/strong&gt;。【重要】&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;比如说，同样是一个头像，可能在低版本的浏览器中，头像方的；在高版本的浏览器中，头像是圆的。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;h3 id=&quot;浏览器的版本问题&quot;&gt;浏览器的版本问题&lt;/h3&gt;
&lt;p&gt;由于CSS3普遍存在兼容性问题，为了避免因兼容性带来的干扰，浏览器的建议版本为：&lt;/p&gt;
&lt;h3 id=&quot;如何使用手册&quot;&gt;如何使用手册&lt;/h3&gt;
&lt;p&gt;CSS参考手册的网址：&lt;a href=&quot;http://css.doyoe.com/&quot; class=&quot;uri&quot;&gt;http://css.doyoe.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSS参考手册的下载链接：&lt;a href=&quot;http://download.csdn.net/download/smyhvae/10243974&quot; class=&quot;uri&quot;&gt;http://download.csdn.net/download/smyhvae/10243974&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在查看&lt;a href=&quot;http://download.csdn.net/download/smyhvae/10243974&quot;&gt;CSS参考手册&lt;/a&gt;时，需要注意以下符号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_2150.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如说，&lt;code&gt;{1,4}&lt;/code&gt;表示可以设置一至四个参数。&lt;/p&gt;
&lt;p&gt;下面讲CSS3的基础知识。本文讲一下 CSS3 选择器的内容。&lt;/p&gt;
&lt;h2 id=&quot;css3-选择器&quot;&gt;CSS3 选择器&lt;/h2&gt;
&lt;p&gt;我们之前学过 CSS 的选择器，比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     div{} 标签选择器

     .box 类名选择器

     #box　id选择器

     div p 后代选择器

     div.box 交集选择器

     div,p,span 并集选择器

     div&amp;gt;p 子代

     * : 通配符

     div+p: 选中div后面相邻的第一个p

     div~p: 选中的div后面所有的p
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;CSS3新增了许多&lt;strong&gt;灵活&lt;/strong&gt;查找元素的方法，极大的提高了查找元素的效率和&lt;strong&gt;精准度&lt;/strong&gt;。CSS3选择器与 jQuery 中所提供的&lt;strong&gt;绝大部分&lt;/strong&gt;选择器兼容。&lt;/p&gt;
&lt;h3 id=&quot;属性选择器&quot;&gt;属性选择器&lt;/h3&gt;
&lt;p&gt;属性选择器的标志性符号是 &lt;code&gt;[]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;匹配含义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;^：开头  $：结尾  *：包含&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E[title]&lt;/code&gt; 选中页面的E元素，并且E存在 title 属性即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E[title=&quot;abc&quot;]&lt;/code&gt;选中页面的E元素，并且E需要带有title属性，且属性值&lt;strong&gt;完全等于&lt;/strong&gt;abc。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E[attr~=val]&lt;/code&gt; 选择具有 att 属性且属性值为：用空格分隔的字词列表，其中一个等于 val 的E元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E[attr|=val]&lt;/code&gt; 表示要么是一个单独的属性值，要么这个属性值是以“-”分隔的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;E[title^=&quot;abc&quot;]&lt;/code&gt; 选中页面的E元素，并且E需要带有 title 属性,属性值以 abc 开头。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;E[title$=&quot;abc&quot;]&lt;/code&gt; 选中页面的E元素，并且E需要带有 title 属性,属性值以 abc 结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;E[title*=&quot;abc&quot;]&lt;/code&gt; 选中页面的E元素，并且E需要带有 title 属性,属性值任意位置包含abc。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;比如说，我们用属性选择器去匹配标签的className，是非常方便的。&lt;/p&gt;
&lt;p&gt;这里我们用class属性来举例。代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;选择器 - 属性&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-family:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'微软雅黑'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#F7F7F7&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1024px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrapper&lt;/span&gt; &amp;gt; section &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;min-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;box-shadow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#DDD&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#FFF&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrapper&lt;/span&gt; &amp;gt; header &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrapper&lt;/span&gt; section &amp;gt; header &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;22px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#EEE&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.wrap-box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        form &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        form input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        form input&lt;span class=&quot;ch&quot;&gt;[type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.attr1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.download&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.attr1&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.attr1&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*  E[attr~=val] 表示的一个单独的属性值 这个属性值是以空格分隔的*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.attr2&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[class~=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*  E[attr|=val] 表示的要么一个单独的属性值 要么这个属性值是以&quot;-&quot;分隔的*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.attr3&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[class|=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*  E[attr*=val] 表示的属性值里包含val字符并且在“任意”位置 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.attr4&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[class*=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*  E[attr^=val] 表示的属性值里包含val字符并且在“开始”位置 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.attr5&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[class^=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*  E[attr$=val] 表示的属性值里包含val字符并且在“结束”位置 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.attr6&lt;/span&gt; a&lt;span class=&quot;ch&quot;&gt;[class$=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;CSS3-属性选择器&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;简介&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                        姓名: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                        密码: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                        性别: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;男
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; 女
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                        兴趣: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;写代码
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-movie&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-movie&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-music&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr~=attr]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-movie&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-movie&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download download-music&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr|=attr]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download-movie&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download-music&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr*=val]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;moviedownload&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;downloadmusic&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr5&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr^=val]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;moviedownload&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;downloadmusic&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;section&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;attr6&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;E[attr$=val]&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap-box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./b.rmvb&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;moviedownload&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./a.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;downloadmusic&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下载&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后来张表格：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1500.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;结构伪类选择器&quot;&gt;结构伪类选择器&lt;/h3&gt;
&lt;p&gt;伪类选择器的标志性符号是 &lt;code&gt;:&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;CSS中有一些伪类选择器，比如&lt;code&gt;:link&lt;/code&gt;、&lt;code&gt;:active&lt;/code&gt;、&lt;code&gt;:visited&lt;/code&gt;、&lt;code&gt;:hover&lt;/code&gt;，这些是动态伪类选择器。&lt;/p&gt;
&lt;p&gt;CSS3又新增了其它的伪类选择器。这一小段，我们来学习CSS3中的&lt;strong&gt;结构伪类选择器&lt;/strong&gt;：即通过&lt;strong&gt;结构&lt;/strong&gt;来进行筛选。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、格式：（第一部分）&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:first-child&lt;/code&gt; 匹配父元素的第一个子元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:last-child&lt;/code&gt; 匹配父元素的最后一个子元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-child(n)&lt;/code&gt; 匹配父元素的第n个子元素E。&lt;strong&gt;注意&lt;/strong&gt;，盒子的编号是从&lt;code&gt;1&lt;/code&gt;开始算起，不是从&lt;code&gt;0&lt;/code&gt;开始算起。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-child(odd)&lt;/code&gt; 匹配奇数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-child(even)&lt;/code&gt; 匹配偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-last-child(n)&lt;/code&gt; 匹配父元素的倒数第n个子元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;理解：&lt;/p&gt;
&lt;p&gt;（1）这里我们要好好理解&lt;strong&gt;父元素&lt;/strong&gt;的含义，它指的是：以 E 元素的父元素为参考。&lt;/p&gt;
&lt;p&gt;（2）注意：以上选择器中所选到的元素的类型，必须是指定的类型E，如果选不中，则无效。这个要好好理解，具体可以看CSS参考手册中的&lt;code&gt;E:nth-child(n)&lt;/code&gt;的示例。我们可以理解成：&lt;strong&gt;先根据选择器找到选中的全部位置，如果发现某个位置不是类型E，则该位置失效&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（3）另外，&lt;code&gt;E:nth-child(n)&lt;/code&gt;这个属性也很有意思。比如，针对下面这样一组标签：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;4&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;5&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;6&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;7&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;9&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;10&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中：&lt;/p&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(2)&lt;/code&gt;，则表示第2个 &lt;code&gt;li&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(n)&lt;/code&gt;，则表示&lt;strong&gt;所有的&lt;/strong&gt;&lt;code&gt;li&lt;/code&gt;。因为此时的 &lt;code&gt;n&lt;/code&gt; 表示 0,1,2,3,4,5,6,7,8.....（当n小于1时无效，因为n = 0 也是不会选中的）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(2n)&lt;/code&gt;，则表示所有的&lt;strong&gt;第偶数个&lt;/strong&gt; li。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(2n+1)&lt;/code&gt;，则表示所有的&lt;strong&gt;第奇数个&lt;/strong&gt; li。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(-n+5)&lt;/code&gt;，则表示&lt;strong&gt;前5个&lt;/strong&gt; li。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-last-child(-n+5)&lt;/code&gt;，则表示&lt;strong&gt;最后5个&lt;/strong&gt; li。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果选择器写成&lt;code&gt;li:nth-child(7n)&lt;/code&gt;，则表示选中7的倍数。。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面列举的选择器中，我们只要记住： &lt;code&gt;n&lt;/code&gt; 表示 0,1,2,3,4,5,6,7,8.....就很容易明白了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、格式：（第二部分）&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:first-of-type&lt;/code&gt; 匹配同类型中的第一个同级兄弟元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:last-of-type&lt;/code&gt; 匹配同类型中的最后一个同级兄弟元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-of-type(n)&lt;/code&gt; 匹配同类型中的第n个同级兄弟元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E:nth-last-of-type(n)&lt;/code&gt; 匹配同类型中的倒数第n个同级兄弟元素E。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;既然上面这几个选择器带有&lt;code&gt;type&lt;/code&gt;，我们可以这样理解：先在同级里找到所有的E类型，然后根据 n 进行匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、格式：（第三部分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以把多个伪类选择器结合起来使用，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1340.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果想把上图中，第一行的前三个 span 标红，我们可以这样使用结构伪类选择器：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;    dt&lt;span class=&quot;dv&quot;&gt;:first-child&lt;/span&gt; span&lt;span class=&quot;dv&quot;&gt;:nth-of-type&lt;/span&gt;(-n+3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后来张表格：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1502.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;伪元素选择器&quot;&gt;伪元素选择器&lt;/h3&gt;
&lt;p&gt;伪元素选择器的标志性符号是 &lt;code&gt;::&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、格式：（第一部分）&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E::before&lt;/code&gt; 设置在 元素E 前面（依据对象树的逻辑结构）的内容，配合content属性一起使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E::after&lt;/code&gt; 设置在 元素E 后面（依据对象树的逻辑结构）的内容，配合content属性一起使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;E:after&lt;/code&gt;、&lt;code&gt;E:before&lt;/code&gt;在旧版本里是伪类，在 CSS3 这个新版本里是伪元素。新版本里，&lt;code&gt;E:after&lt;/code&gt;、&lt;code&gt;E:before&lt;/code&gt;会被自动识别为&lt;code&gt;E::after&lt;/code&gt;、&lt;code&gt;E::before&lt;/code&gt;，按伪元素来对待，这样做的目的是用来做兼容处理。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*::before 和::after 是通过 css 模拟出的html标签的效果*/&lt;/span&gt;
        span&lt;span class=&quot;dv&quot;&gt;::before&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;smyhvae&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        span&lt;span class=&quot;dv&quot;&gt;::after&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;永不止步&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt;yellowgreen&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*给原本的span标签设置一个默认的属性*/&lt;/span&gt;
        span&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;生命壹号&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1409.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上图可以看出&lt;/strong&gt;：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过伪元素选择器，就可以添加出类似于span标签的效果（记得要结合 content 属性使用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过这两个属性添加的伪元素，是&lt;strong&gt;行内元素&lt;/strong&gt;，需要转换成块元素才能设置宽高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2、格式：（第二部分）&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E::first-letter&lt;/code&gt; 设置元素 E 里面的&lt;strong&gt;第一个字符&lt;/strong&gt;的样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;E::first-line&lt;/code&gt; 设置元素 E 里面的&lt;strong&gt;第一行&lt;/strong&gt;的样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;E::selection&lt;/code&gt; 设置元素 E 里面被鼠标选中的区域的样式（一般设置颜色和背景色）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;E::first-letter&lt;/code&gt; 的举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1430.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E::first-line&lt;/code&gt;的举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1433.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后来张表格：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1503.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 07:16:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8426799.html</dc:identifier>
</item>
<item>
<title>看得懂的区块链，看不清的ICO人心 - 初码</title>
<link>http://www.cnblogs.com/printhelloworld/p/8426627.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/printhelloworld/p/8426627.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/983921/201802/983921-20180207145657076-1962632629.jpg&quot;&gt;&lt;img title=&quot;p78667.webp&quot; src=&quot;https://images2017.cnblogs.com/blog/983921/201802/983921-20180207145657216-1385082740.jpg&quot; alt=&quot;p78667.webp&quot; width=&quot;604&quot; height=&quot;341&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    比特币又开始下跌了，是狂欢尽头还是又一波调整，无从得知，背后的乱象会让监管者继续心烦，而这乱象对我来说，有时候会有些心寒。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;你说我怎么可能想到，我一个写程序的人，突然有一天会发现，朋友圈里有一些搞技术的朋友，竟然也走向ICO传销的不归路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    传销这两个字很刺耳吧，有人便涨红了脸：你凭什么污蔑区块链技术，凭空污人清白！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    是的，你知道区块链的四种算法，而我却知17种人心，今天写下这篇文章，我想完全剥开ICO背后那阴暗残忍的内心。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《一、区块链靠不靠谱》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/983921/201802/983921-20180207145657420-2096664227.jpg&quot;&gt;&lt;img title=&quot;timg&quot; src=&quot;https://images2017.cnblogs.com/blog/983921/201802/983921-20180207145657623-279815298.jpg&quot; alt=&quot;timg&quot; width=&quot;900&quot; height=&quot;508&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;完全OJBK&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    在这个开放的、自由化的多元世界里，要看懂区块链，其实很容易，不需要看谁投资了，也不需要看谁跟进了，请直接看央行银行对区块链技术的政策走向和行动趋势，就完全OJBK了。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    任何国家的政府机构，是不会轻易的在可能颠覆政权基石的货币政策上被别人牵着鼻子走的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    而从目前各国央行的研究态势看，区块链技术是靠谱的，可用的，具备价值的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;     区块链技术到底有何用，如果通俗的非技术性的去解释的话，就好比原来口袋里有一张纸质的百元大钞，即使银行都倒闭了，你也能用一定的办法鉴别它的真伪并流通使用。而区块链技术驱动下的某一应用领域-数字货币，也是如此，口袋里的钞票换成了U盘，存着一串唯一数字代表了100元钱，即使不去银行插入U盘鉴别真伪，也可以有办法和机制鉴定这串数字是否就是你的那串数字而没有被伪造和复制，从而具备了货币的一些基本特征可以替代纸质货币。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    但区块链技术就目前来看，并非100%完备可控的，从专业领域的各种公开可查资料中可以得知，各国央行对区块链的研究，在领先、独立、稳定的情况下，依然是谨慎的。央行无论是在研究的技术方向上，包括加密算法、共识机制、交易速度、硬件支持等，还是在业务的规则制定和博弈上，包括发行量控制、跨域流通体系设计等，无一不命中数字货币这一领域的关键点和要害。换句话说，数字货币的应用还没有那么成熟和乐观。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    除了数字货币，区块链的其他应用领域的行业标准和技术要求相对更低一些，但&lt;strong&gt;落地到具体业务场景上&lt;/strong&gt;，无论是&lt;strong&gt;必要性&lt;/strong&gt;、可行性还是可操作性，都是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;前景可期，路还很长&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《二、ICO为什么是传销不归路》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/983921/201802/983921-20180207145657951-1227171754.png&quot;&gt;&lt;img title=&quot;微信截图_20180207085002&quot; src=&quot;https://images2017.cnblogs.com/blog/983921/201802/983921-20180207145658279-733175949.png&quot; alt=&quot;微信截图_20180207085002&quot; width=&quot;479&quot; height=&quot;314&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    好了，上面说了一大堆废话，无非是想证明，并没有反对区块链技术的发展和应用，但为何ICO还是传销不归路？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;我们慢慢来拨开这层画皮&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    什么是传销，很简单的一句话可以概括&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;在某一业务领域，当业务实情和你的嘴上所说、心里所想都不太一样的时候，你还在下意识的奋力的维护这个体系，那之后的一系列行为，就是传销，甚至诈骗！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    是的，亲爱的ICO从业者们，并没有说你一上来就是要骗人的，也没有说你不做实事，但有了这样的判定规则，一下子就明朗很多，那么ICO是传销不归路就可以换一种表达方式：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;ICO行为本身并不传销，ICO是融资手段，是区块链初代技术下的金融衍生品和业务创新，但在现阶段的中国国情下，ICO背后的项目，无一例外的重Token交易轻业务发展，从没有、少有业务场景到臆想、伪造业务场景，从没有交易量到强行关联、制造交易量。当项目本身不产生价值创造额外收益的时候，当项目背后的区块链技术进步和实际Token并无直接关联的时候，对ICO的鼓吹和推动，就沦为了传销和诈骗！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;就上面这段话，有人可能不太能理解，我想讲两个典型的案例，先说&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一个业务并不真实的典型项目：STB Chain&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    区块链的应用鱼龙混杂，且不说那些为了骗、凑而起的ICO项目，也不说那些看上去可行但其实并不技术敏感的例如艺术、农业、物流行业的区块链应用。当我在某个微信群里第一次看到STB Chain（软件资产链）的时候，是饶有兴趣的，因为他提出将软件版权保护和区块链技术结合在一起，这个领域是技术敏感的，而我又是软件行业的从业者，创始人也是著名.NET资源下载站51aspx的站长和微软多年MVP，于是我很认真的研读了STB Chain的白皮书（有兴趣的可以从这个&lt;/span&gt;&lt;a href=&quot;https://www.soft2b.com/STBChain-CN.pdf&quot;&gt;&lt;span&gt;地址&lt;/span&gt;&lt;/a&gt;&lt;span&gt;下载完整白皮书），但看完后依旧是失望。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;失望的是依旧没有任何可具体落地的业务场景，依然无法逃离臆想业务场景的怪圈。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    我公司的业务是软件外包，我自己也算是软件正版化领域的长期研究者，从最早的各种桌面软件使用，在软件破解社区交流，到购买各种形式各种形态下的正版软件授权，再到学习了解软件正版化法律环境，说不上顶级专家，也算是资深了吧，可我看完STB Chain的白皮书里面的各种“论证”、“方法”、“业务流程”后五味杂陈，&lt;strong&gt;没有1个符合软件正版化行业现状&lt;/strong&gt;，别说和软件巨头形成服务对接，甚至不具备一丁点的和中小软件开发者对接的真实落地价值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    其实能不能落地也许今天不行，以后就可以了，慢慢发展不是坏事，可我更担心的是：&lt;strong&gt;创始人自己知不知道业务薄弱、暂时还不存在真实场景这样的实情&lt;/strong&gt;？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    我简单的搜了一下网上关于STB的资讯，有2点让我若有所思，一个是STB团队自己发了一些媒体文章，提到“&lt;strong&gt;51aspx已经对接了100万正版软件客户，是STB可行的重要背书&lt;/strong&gt;”。另一个是STB的中文&lt;/span&gt;&lt;a href=&quot;https://soft2b.com/home.html?lang=cn&quot;&gt;&lt;span&gt;官网&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，打开首页，直接弹出一个满屏幕的引导去交易所买币的说明，除此之外，官网只剩白皮书和团队介绍。而有关软件正版链的产品描述、平台和SDK开发细节，除了一个时间轴之外也再无过多描述，也找不到任何资料。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有时候，蠢萌和阴坏只差一步之遥&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    事实上，在开放自由的世界里，也许我无权批判这样的事情，但STB的现状，是这个圈子的一个缩影。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;连务实的微软MVP，都这么干了，我们有什么理由不去分一杯羹呢？&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    &lt;span&gt;纯粹的骗子我们并不关心，这里来模拟一下真实的ICO创业者的心路历程&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;18.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;我懂一些技术，或者我不懂技术但是懂区块链业务原理，于是我组建了一个团队来做区块链 ↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;我听说ICO是一种创业融资方式，获得资金后可以开展技术研究，做技术研发或者做出私链公链然后对接行业业务 ↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;我竭尽脑汁，把区块链技术和行业业务进行靠拢，设计业务模式，制定发展规划，撰写了白皮书↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;我成功的进行了ICO，获得了代币，然后代币竟然真的套取了人民币现金，这可是实打实的存款啊，我有点开始喜欢ICO了 ↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;ICO获得的资金用来租赁场地，购置办公设备，招聘员工↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;一晃几个月过去了，好像并没有什么具体的公司和产业愿意对接我们的区块链，能谈的上话的都是区块链圈内人士，业务拓展挺缓慢的，而且好像快没钱了维持经营了，怎么半呢↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;要不再进行一些套现吧，可价格也不高，要不要再宣传一波，提高一下价格呢，这样是不是骗人呢？不是的！我是为了做业务和技术研发的！↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;生活和工作还在继续，有时候上班挺不方便了，套现买辆车吧，有时候工作累了，套现出国玩一下吧，爸爸说要买房，要不套现给点资金支持一下吧。这样会不会不好呢？不会的！我是创始人，有时候奖励一下自己也无可厚非的！↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;好像业务还是没什么进展，买我币的人有时候还会和我唠叨价格低，要不再搞一波宣传？可是这样下去业务怎么拓展呢，算了，想不了那么多了，先宣传吧，造一些业务数据和交易量出来，好让大家对我有信心！↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;哎呀，还是没啥进展，技术研发也就这样，难道这真的暂时没法落地了吗，好像周围大家都这样，我看有的币涨了几百倍都买房了，要不我也不管那么多了，等个2-3年再说，这个行业本来就需要3-5年的发展嘛，我还是先套现储备一些资金吧↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;我好想发现了什么，项目不产生价值的话，好像这个买币卖币是资产的转移，怎么办，万一听我话买币入市的人亏了会不会来找我，要不我加个免责条款吧，下次推广的时候让大家注意风险。↓&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;我已经不再关心业务和区块链技术了，我每天关心的是币市，关心的是价格，我关心有没有可能我这个币突然涨1000倍，然后我就财务自由了。等我财务自由了，我就能更加安心的做这个项目了&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;至此，当ICO创始人从懵懵懂懂到学会说出一句：投资有风险的时候，他已经懂得如何逃避责任了，当ICO创始人关心套现的时候，他的私欲已经战胜了理想，而这些行为的背后，是他看清了事实，是他开始不安，也是他开始改变了，于是，这场游戏中人心的泯灭和恶劣，达到了极致。这像什么？&lt;strong&gt;是的，就是传销&lt;/strong&gt;！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这就是ICO人心，也许当事者自己都看不清，但真实存在&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里还想再谈一个典型案例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一个技术和ICO并无直接关联的项目：小蚁区块链&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    如果说STB这样的项目对区块链的研究和使用还处在懵懵懂懂的状态，当大量的ICO项目还停留在业务想象阶段的时候，小蚁区块链技术（&lt;/span&gt;&lt;a href=&quot;http://docs.neo.org/zh-cn/index.html&quot;&gt;&lt;span&gt;官网&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）是走在前列的，作为国内比较早的使用.NET技术把区块链技术单独拿出来研究的的团队，不管小蚁区块链技术下的智能合约有没有落地业务场景，但小蚁团队确实有在做包括接入合约的相关技术研发和社区开发引导工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    除了初期的投资外，我想撑起小蚁团队成本的资金，大部分来源于ICO，那么又一个问题来了，做出了区块链的技术研发和业务落地，和ICO有必然关系吗？&lt;strong&gt;没有&lt;/strong&gt;！&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;代币价值不等于项目价值和技术价值，这个逻辑背后，就是一个巨大的ICO团队始终不愿意公开和正视的事实：团队的区块链技术研发成果以及团队所在公司的发展成长，并不直接驱动代币的价格增长，也无直接关联关系。&lt;/strong&gt;&lt;strong&gt;这和股价增长是完全不一样的!&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;span&gt;  小蚁团队在ICO中套取的资金并不是国内最多的，相比很多空壳项目，小蚁有在做实事的根本原因，还是&lt;strong&gt;源于自我约束&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    可即便如此，从公开渠道可查到的区块链技术进步上看，&lt;strong&gt;小蚁团队所获得资金量和其研发产出，并不成正比&lt;/strong&gt;，换句话说，拿了钱，并没用全力去做事，大量的体系内资金，脱离了监管，甚至没有监管，直接进了参与小蚁币炒币的炒币者的个人腰包中。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;而这背后，就是ICO最大的问题：没有监管，脱离、甚至对抗法律&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   &lt;span&gt;很多刚刚创业的人，并不理解为什么有法律条条框框，为什么有各种社会上的条条框框，可当他一天天的成长后就会懂得，规则是社会正常运转的必要条件，如果没有了规则，那创业本身都会失控，试想一下，如果公司账上的钱可以随意支取不需要记录和凭证，如果制定的计划可以反复改口不算数，这样的公司能够可持续发展吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    而&lt;strong&gt;ICO团队的野蛮发展则视这些所有的规则如无物&lt;/strong&gt;，资金的处置，全凭创始人和创始团队的喜好，号称是募集来用于经营和研发的资金，则无需任何日常记录和公示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    即便是近些年来中国对金融创新不断拥抱和开放，出现了包括众筹、三板四板等在内的新颖融资方式和渠道，那背后也是存在强有力的信用背书机构和规则的，并不是随心所欲的就可以获取资金。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    宽进严出的经济治理法则，无可厚非，融资环境的开放也顺应时代，但无论如何，ICO从法理上看，也太夸张了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    而ICO作为融资手段，还有一个重要的问题就是&lt;strong&gt;信息不对称和不透明&lt;/strong&gt;，参与投资的群体，并不能准确的了解相关&lt;strong&gt;技术和业务的真实情况&lt;/strong&gt;，融资后&lt;strong&gt;资金去向和使用明细&lt;/strong&gt;也没有查询通道和追溯制度。如果不对称，那是什么，对，就是&lt;strong&gt;诈骗&lt;/strong&gt;！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    我想说的是，无论怎么看：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;ICO都是彻头彻尾的投机和非法，于理不合，于法不容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    甚至还有投机律师在给ICO的法律合法和政策合法支招，我想说，你就不要做梦了，别说中国，美国也不可能，很多人意淫说你看美国对ICO就宽容的多，我想说的是，西方经济学下的优秀的金融创新，确实很多从美国首先发展而来，可你看到了美国的开放却看不到他强大的纠错能力&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;即使美国等国家今天给ICO制定了规则准许合规入市，等到ICO背后的项目不产生价值而引发真实资产的不当转移、流失的时候，美国市场和政策也会给予有力的回击。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    区块链并不是魔鬼，只是一种技术，国内很多大的金融集团都有在用项目投资的方式进行区块链技术的研究，&lt;strong&gt;而这和其他投融资项目并无二异&lt;/strong&gt;，反而这种在监管下有序进行的技术研发，更加务实，更加深入技术和业务本身，投资失败无产出则按照投资协议清算，投资如果成功则获得收益和回报。创业不外乎如此，可如果走上弯路，&lt;strong&gt;人心一旦走偏，往往很难回头！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么如何避免陷入ICO传销的心灵陷阱，很简单，请对照以下几个真理&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;区块链技术的推进，数字货币的推进不是ICO的背书&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;西方世界对ICO的宽容和研究不是对ICO的背书&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;区块链技术可以用于某个行业，不等于必须用于某个行业，这也不是ICO的背书&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;自由化和开放不等于不遵守法律，这更不是ICO的背书&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;投机者我不想过问，希望他们自生自灭，但我想对用区块链技术创业的懵懂技术青年们说一句，我知道你真心的想在区块链上有所建树，但如果以上任何一条你曾经用来安慰过自己操盘ICO的迷茫，曾经用来发朋友圈吸引朋友来入币市，那么请赶快停下错误的脚步，回归技术的本源，回归踏实的生活。怎么融资都可以，唯独ICO不行，请回到地面，用正确的、正当的方式获得资金，&lt;strong&gt;你们还hold不住ICO这个不属于你们年纪和阅历的畸形价值体系&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;《三、何时才能活捉李笑来》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/983921/201802/983921-20180207145658607-2124629619.jpg&quot;&gt;&lt;img title=&quot;u=2151868332,875439805&amp;amp;fm=27&amp;amp;gp=0&quot; src=&quot;https://images2017.cnblogs.com/blog/983921/201802/983921-20180207145658748-204597220.jpg&quot; alt=&quot;u=2151868332,875439805&amp;amp;fm=27&amp;amp;gp=0&quot; width=&quot;544&quot; height=&quot;304&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    币圈有个笑谈，叫活捉李笑来，但我是真的想抓住李笑来，不仅是李笑来，还有薛蛮子、徐小平，这些鼓吹ICO的推手们。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;鼓吹投机，生产畸形价值观，是人性的最恶&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;当大量的企业家还在感谢改革开放不断给企业家去除原罪，当大量的创业者还在小心翼翼的做开发、做宣传、做销售的时候，有那么一些人，竟然已经可以逾越法律，逾越国界，做着超泛自由化的“伟大事业”，而且很快就财务自由了。而很多踏踏实实工作的技术工作者和创业者，在有机会通过ico赚取财富面前，在已经混乱的价值体系面前，迷失了脚步，不能自已，已经不再能够静下心来搞项目和技术，这是时代的缩影，但也是当下中国的悲剧和灾难。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    李笑来们，除了对人性的颠覆外，还有对法律的颠覆，不断的通过所谓的“&lt;strong&gt;业务模式创新&lt;/strong&gt;”，来逃避监管和打击&lt;strong&gt;，甚至自己坐镇国外，变着花样玩弄着迷茫的人们&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    李笑来微博一句简单的“糖果盒子”，就在市场上掀起惊涛骇浪，又引得一大波资金入场，又引发新一轮的所谓“业务创新”，而到头来，还是财富转移的游戏，操盘者赚的盆满钵满，投机者赌上性命身家。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    澳门线上娱乐城可以抓，白银期货交易所可以抓，二元期权平台可以抓，ICO更加疯狂和赤膊上阵，为何不能抓？如果在这个时候，监管者还是投鼠忌器，那真的不是钱宝这种区域性事件这么简单了。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;连张小雷都知道要包装一下江北智慧城，来告诉大家他是用心经营钱宝业务的，平时也积极的给投资者“&lt;strong&gt;汇报&lt;/strong&gt;”业绩，但ICO竟然已经可以明目张胆到只在非法集资的第一天撩骚一下业务前景，从此就再也不谈业务，满嘴的币和交易，人心可怕，也不过如此，时代魔幻，也恰如此景。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;希望监管者们能明白&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;ICO不存在项目好与坏，只要是ICO都是非法集资&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;写在最后：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    其实很多ICO创始人们心里很清楚，ICO后的币市来给自己赚钱和发展区块链技术并不冲突，他们也会在内心深处安慰自己：我做的是正当技术研究，为啥不能搞点收入，这是无可厚非的呀，时代的错又不是我的错，我先财务自由了，不是有更多的时间做研究吗。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    但我想说一句：没有人可以和社会体系脱离独善其身，在泛自由化的世界里，如果逃离规则，你将与死神同行！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;作者：张柔，发布于 &lt;/span&gt; &lt;a href=&quot;http://printhelloworld.cnblogs.com/&quot;&gt;&lt;span&gt;博客园&lt;/span&gt;&lt;/a&gt;&lt;span&gt;  与 公众号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/983921/201802/983921-20180207145524951-1087650186.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2017.cnblogs.com/blog/983921/201802/983921-20180207145525607-2079490796.png&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;243&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;转载请注明出处，欢迎邮件交流：&lt;/span&gt;&lt;a href=&quot;mailto:zhangrou@chuma.cn&quot;&gt;&lt;span&gt;zhangrou@chuma.cn&lt;/span&gt;&lt;/a&gt; &lt;span&gt;，或者加QQ群：11444444&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 06:56:00 +0000</pubDate>
<dc:creator>初码</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/printhelloworld/p/8426627.html</dc:identifier>
</item>
<item>
<title>Redis进阶实践之十 Redis主从复制的集群模式 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8426610.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8426610.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、引言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;          Redis的基本数据类型，高级特性，与Lua脚本的整合等相关知识点都学完了，说是学完了，只是完成了当前的学习计划，在以后的时间还需继续深入研究和学习。从今天开始来讲一下有关Redis的集群模式，Redis有三种集群模式，第一个就是主从模式，第二种“哨兵”模式，第三种是Cluster集群模式，第三种的集群模式是在Redis 3.x以后的版本才增加进来的，我们今天就来说一下Redis第一种集群模式：主从集群模式。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、配置操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;         实现主从复制（Master-Slave Replication）的工作原理：Slave从节点服务启动并连接到Master之后，它将主动发送一个SYNC命令。Master服务主节点收到同步命令后将启动后台存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕后，Master将传送整个数据库文件到Slave，以完成一次完全同步。而Slave从节点服务在接收到数据库文件数据之后将其存盘并加载到内存中。此后，Master主节点继续将所有已经收集到的修改命令，和新的修改命令依次传送给Slaves，Slave将在本次执行这些数据修改命令，从而达到最终的数据同步。&lt;/p&gt;&lt;p&gt;        如果Master和Slave之间的链接出现断连现象，Slave可以自动重连Master，但是在连接成功之后，一次完全同步将被自动执行。&lt;/p&gt;&lt;p&gt;       我先介绍一下我的环境，操作系统是Windows 10企业版，Redis有两个版本，第一版本是以Windows服务形式安装的Redis服务器，IP地址是：192.168.131.1，端口号：6379，当前没有设置密码；第二个版本是在Linux系统下安装的Redis服务，IP地址是：192.168.127.128，端口号是：6379，当前也没有设置密码。今天测试两个情况，一种情况：Windows系统上的Redis服务做主服务节点，Linux系统上的Redis服务做从服务节点，第二种情况是：Linux系统上的Redis服务做主服务节点，Windows系统上的Redis服务做从服务节点。其他情况就不测试了，同系统之间测试就很容易了，也不会出现什么问题。&lt;/p&gt;&lt;p&gt;     &lt;span&gt;  主从复制配置：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;       第一步：修改从节点的配置文件：slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;       第二步：如果设置了密码，就要设置：masterauth &amp;lt;master-password&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;       主从复制的配置很简单，主要操作从节点的配置文件，主节点不需要任何改动。我们可以使用info查看role角色即可知道是主服务或从服务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       1、Windows系统上的Redis服务做主服务节点，Linux系统上的Redis服务做从服务节点（测试很顺利）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主节点服务：192.168.131.1    端口号：6379   Windows系统

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从节点服务：192.168.127.128  端口号：6379   Linux系统

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在主要修改从节点服务Linux系统上的redis.conf配置文件&lt;/span&gt;
&lt;span&gt;
           slaveof &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;131.1&lt;/span&gt; &lt;span&gt;6379&lt;/span&gt;&lt;span&gt;

           设置完成:

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主节点配置信息：&lt;/span&gt;
           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;131.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;info Replication
           #Replication
           role:master
           connected_slaves:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           slave0:ip&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;131.1&lt;/span&gt;,port=&lt;span&gt;6379&lt;/span&gt;,state=online,offset=&lt;span&gt;239&lt;/span&gt;,lag=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           master_repl_offset:&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;&lt;span&gt;
           repl_backlog_active:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           repl_backlog_size:&lt;/span&gt;&lt;span&gt;1048576&lt;/span&gt;&lt;span&gt;
           repl_backlog_first_byte_offset:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
           repl_backlog_histlen:&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;


           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从节点配置信息：&lt;/span&gt;
           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;info Replication
           #Replication
           role:slave
           master_host:&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;131.1&lt;/span&gt;&lt;span&gt;
           master_port:&lt;/span&gt;&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;
           master_link_status:up
           master_last_io_seconds_ago:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
           master_sync_in_progress:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;

           slave_repl_offset:&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;&lt;span&gt;
           slave_priority:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
           slave_read_only:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

           connected_slaves:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;

           master_replid:7f2e5cde55803c8b78d26c16f0111695e3c1fb6f8
           master_replid2:&lt;/span&gt;&lt;span&gt;000000000000000000000000000000000000000000&lt;/span&gt;&lt;span&gt;
           master_repl_offset:&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;&lt;span&gt;
           second_repl_offset:&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

           repl_backlog_active:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           repl_backlog_size:&lt;/span&gt;&lt;span&gt;1048576&lt;/span&gt;&lt;span&gt;
           repl_backlog_first_byte_offset:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
           repl_backlog_histlen:&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;       2、Linux系统上的Redis服务做主服务节点，Windows系统上的Redis服务做从服务节点（设置完成，但是主节点不能连接，master_link_status:down，该问题还没解决）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主节点服务：192.168.127.128  端口号：6379  Linux系统

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从节点服务：192.168.131.1    端口号：6379  Windows系统

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在主要修改从节点服务在Windows系统上的redis.windows.conf配置文件&lt;/span&gt;
&lt;span&gt;
           slaveof &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt; &lt;span&gt;6379&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要密码
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;masterauth 123456

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主节点配置信息：&lt;/span&gt;
           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;info Replication
           #Replication
           role:master
           connected_slaves:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
           master_replid:23ed05016a5fdf45e45318281b7f827cbbf75025
           master_replid2:&lt;/span&gt;&lt;span&gt;0000000000000000000000000000000000000000&lt;/span&gt;&lt;span&gt;
           master_repl_offset:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
           second_repl_offset:&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           repl_backlog_active:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           repl_backlog_size:&lt;/span&gt;&lt;span&gt;1048576&lt;/span&gt;&lt;span&gt;
           repl_backlog_first_byte_offset:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           repl_backlog_histlen:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;


           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从节点配置信息：&lt;/span&gt;
           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;info Replication
           #Replication
           role:slave
           master_host:&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;&lt;span&gt;
           master_port:&lt;/span&gt;&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;&lt;span&gt;
           master_link_status:down&lt;/span&gt;
           master_last_io_seconds_ago:&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           master_sync_in_progress:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;

           slave_repl_offset:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
           master_link_down_since_seconds:jd
           slave_priority:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
           slave_read_only:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

           connected_slaves:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;

           repl_backlog_active:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
           repl_backlog_size:&lt;/span&gt;&lt;span&gt;1048576&lt;/span&gt;&lt;span&gt;
           repl_backlog_first_byte_offset:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
           repl_backlog_histlen:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Slave从节点日志显示为：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        * Connecting to MASTER &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.908&lt;/span&gt; 

        * MASTER &amp;lt;-&amp;gt;&lt;span&gt; SLAVE sync started[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.909&lt;/span&gt; 

        * Non blocking connect &lt;span&gt;for&lt;/span&gt; SYNC fired the &lt;span&gt;event&lt;/span&gt;&lt;span&gt;.[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.913&lt;/span&gt; 

        * Master replied to PING, replication can &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;...[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.917&lt;/span&gt; 

        *&lt;span&gt; Partial resynchronization not possible (no cached master)[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.923&lt;/span&gt; 

        * Full resync &lt;span&gt;from&lt;/span&gt; master: 0e17ac45471c6a94dadec46f993c14ee6dc33726:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.980&lt;/span&gt; 

        * MASTER &amp;lt;-&amp;gt; SLAVE sync: receiving &lt;span&gt;193&lt;/span&gt; bytes &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.987&lt;/span&gt; 

        * MASTER &amp;lt;-&amp;gt;&lt;span&gt; SLAVE sync: Flushing old data[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.989&lt;/span&gt; 

        * MASTER &amp;lt;-&amp;gt; SLAVE sync: Loading DB &lt;span&gt;in&lt;/span&gt;&lt;span&gt; memory[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.991&lt;/span&gt; # Can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t handle RDB format version 8&lt;/span&gt;[&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;10.992&lt;/span&gt;&lt;span&gt; 

        # Failed trying to load the MASTER synchronization DB &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; disk[&lt;/span&gt;&lt;span&gt;11188&lt;/span&gt;] &lt;span&gt;07&lt;/span&gt; Feb &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;11.910&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;   效果截图如下：&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;                 &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201802/1048776-20180207155730185-1272817172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;             &lt;span&gt;有谁可以解决问题的，请给我留言，不胜感谢，我自己也会继续研究的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、主从模式的配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;      下面是我使用的配置，使用主从模式，持久化的模式要保持一致&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;      1、######Master config&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                    1.1、###General 配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;               daemonize yes    #默认值是no，把只修改为yes，以后台模式运行

               pidfile &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/run/redis-&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;.pid  #pid文件位置，保持默认值，不用修改

               port &lt;/span&gt;&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;  #使用默认端口

               timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;  # Client 端空闲断开连接的时间

               loglevel warning  #日志记录级别，默认是notice，我这边使用warning,是为了监控日志方便。使用warning后，只有发生告警才会产生日志，这对于通过判断日志文件是否为空来监控报警非常方便。

               logfile &lt;/span&gt;/root/application/program/redis-tool/logs/&lt;span&gt;redis.log  #日志文件的位置

               databases &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  #默认当前使用的是索引为 &lt;span&gt;0&lt;/span&gt; 的Redis 数据库，使用select n 命令可以选择要使用第几个Redis的数据库，这样不同的应用程序使用相同的key也不会有问题。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;                    1.2、###SNAPSHOTTING 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
               为了保证数据相对安全，在下面的设置中，更改越频繁，SNAPSHOTTING越频繁，也就是说，压力越大，反而花在持久化上的资源会越多。所以我选择了master-&lt;span&gt;slave模式，并在master关掉了SNAPSHOTTING。

               #save &lt;/span&gt;&lt;span&gt;900&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;    #在900秒之内，redis至少发生1次修改则redis抓快照到磁盘

               #save &lt;/span&gt;&lt;span&gt;300&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;  #在300秒之内，redis至少发生100次修改则redis抓快照到磁盘

               #save &lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;  #在60秒之内，redis至少发生10000次修改则redis抓快照到磁盘

               rdbcompression yes  #使用压缩

               dbfilename dump.rdb  #SNAPSHOTTING的文件名

               dir &lt;/span&gt;/root/application/program/redis-tool/datas #SNAPSHOTTING文件的路径
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                    1.3、### REPLICATION 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
               #slaveof#如果这台机器是台redis slave，可以打开这个设置。如果使用master-&lt;span&gt;slave模式，保持主从设置一致，防止出现莫名其妙的问题

               #slave&lt;/span&gt;-serve-stale-data yes 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                  1.4、### SECURITY 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;               #requirepass aaaaaaaaa  #redis性能太好，用个passwd 意义不大

               #rename&lt;/span&gt;-command FLUSHALL &lt;span&gt;&quot;&quot;&lt;/span&gt;  #可以用这种方式关掉非常危险的命令，如FLUSHALL这个命令，它清空整个 Redis 服务器的数据，而且不用确认且从不会失败
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                 1.5、### LIMIT 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
               maxclients &lt;span&gt;0&lt;/span&gt;&lt;span&gt; #无client连接数量的限制

               maxmemory 14gb

               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;redis最大可使用的内存量，我的服务器内存是16G，如果使用redis SNAPSHOTTING的copy-on-write的持久会写方式，会额外的使用内存，为了使持久会操作不会使用系统VM，使redis服务器性能下降，&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;               建议保留redis最大使用内存的一半8G来留给持久化使用，我个人觉得非常浪费。我没有在master上不做持久化，使用主从方式maxmemory-policy volatile-lru  #使用LRU算法删除设置了过期时间的key,但如果程序写的时间没有写key的过期时间，&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;               建议使用allkeys-lru，这样至少保证redis不会不可写入。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                1.6、###APPEND ONLY MODE 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;               appendonly yes  #主从要保持一致，防止出现一些莫名其妙的问题&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;               appendfsync always

               no&lt;/span&gt;-appendfsync-on-&lt;span&gt;rewrite no

               auto&lt;/span&gt;-aof-rewrite-percentage &lt;span&gt;100&lt;/span&gt;&lt;span&gt;

               auto&lt;/span&gt;-aof-rewrite-min-size 64mb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                 1.7、###SLOW LOG 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
               slowlog-log-slower-than &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;  #如果操作时间大于0.001秒，记录slow log,这个log是记录在内存中的，可以用

               redis&lt;/span&gt;-cli slowlog &lt;span&gt;get&lt;/span&gt; 命令查看slowlog-max-len &lt;span&gt;1024&lt;/span&gt;  #slow log 的最大长度
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                 1.8、###VIRTUAL MEMORY 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
               vm-enabled no  #不使用虚拟内存，在redis &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.4版本，作者已经非常不建议使用VM。

               vm&lt;/span&gt;-swap-&lt;span&gt;file

               vm&lt;/span&gt;-max-memory &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

               vm&lt;/span&gt;-page-size &lt;span&gt;32&lt;/span&gt;&lt;span&gt;

               vm&lt;/span&gt;-pages &lt;span&gt;134217728&lt;/span&gt;&lt;span&gt;

               vm&lt;/span&gt;-max-threads &lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                  1.9、###ADVANCED CONFIG 设置，下面的设置主要是用来节省内存的，保持默认值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
               hash-max-zipmap-entries &lt;span&gt;512&lt;/span&gt;&lt;span&gt;

               hash&lt;/span&gt;-max-zipmap-value &lt;span&gt;64&lt;/span&gt;&lt;span&gt;
 
               list&lt;/span&gt;-max-ziplist-entries &lt;span&gt;512&lt;/span&gt;&lt;span&gt;

               list&lt;/span&gt;-max-ziplist-value &lt;span&gt;64&lt;/span&gt;

               &lt;span&gt;set&lt;/span&gt;-max-intset-entries &lt;span&gt;512&lt;/span&gt;&lt;span&gt;

               zset&lt;/span&gt;-max-ziplist-entries &lt;span&gt;128&lt;/span&gt;&lt;span&gt;

               zset&lt;/span&gt;-max-ziplist-value &lt;span&gt;64&lt;/span&gt;&lt;span&gt;

               activerehashing yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                 1.10、###INCLUDES 设置 ，可以配置一些其它的设置，如slave的配置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
               #include /path/to/&lt;span&gt;local.conf

               #include &lt;/span&gt;/path/to/&lt;span&gt;other.conf

               #include &lt;/span&gt;/opt/redis/etc/slave.conf  如果是slave server,把这个注释打开slave 配置：$cat /opt/redis/etc/slave.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;  &lt;span&gt;&lt;strong&gt;    2、######Slave Config&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;                  &lt;strong&gt;2.1、###REPLICATION 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
              slaveof &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.1&lt;/span&gt; &lt;span&gt;6397&lt;/span&gt;&lt;span&gt;  

              slave&lt;/span&gt;-serve-stale-data no  #如果slave 无法与master 同步，设置成slave不可读，方便监控脚本发现问题。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;                 2.2、###APPEND ONLY MODE 设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
              appendonly yes  #在slave上使用了AOF，以保证数据可用性。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;      3、用redis-cli bgsave 命令每天凌晨一次持久化一次master redis上的数据，并CP到其它备份服务器上。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;      4、用redis-cli bgrewriteaof 命令每半小时持久化一次 slave redis上的数据，并CP到其它备份服务器上。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;      5、写个脚本 ，定期get master和slave上的key,看两个是否同步，如果没有同步，及时报警。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、主从模式的优缺点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;          1、Redis的Replication的特点和优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                  1】、同一个Master可以同步多个Slaves。&lt;/p&gt;&lt;p&gt;                  2】、Slave同样可以接受其它Slaves的连接和同步请求，这样可以有效的分载Master的同步压力。因此我们可以将Redis的Replication架构视为图结构。&lt;/p&gt;&lt;p&gt;                  3】、Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。&lt;/p&gt;&lt;p&gt;                  4】、Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。&lt;/p&gt;&lt;p&gt;                  5】、为了分载Master的读操作压力，Slave服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成。即便如此，系统的伸缩性还是得到了很大的提高。&lt;/p&gt;&lt;p&gt;                  6】、Master可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。&lt;/p&gt;&lt;p&gt;                  7】、支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;         2、&lt;/strong&gt;Redis的Replication的&lt;/span&gt;缺点：&lt;/p&gt;&lt;p&gt;                1】、Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。&lt;/p&gt;&lt;p&gt;                2】、主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。&lt;/p&gt;&lt;p&gt;                3】、Redis的主从复制采用全量复制，复制过程中主机会fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。&lt;/p&gt;&lt;p&gt;                4】、Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、结束&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;           今天就写到这里了，其实redis的主从模式很简单，在实际的生产环境中是很少使用的，我也不建议在实际的生产环境中使用主从模式来提供系统的高可用性，之所以不建议使用都是由它的缺点造成的，在数据量非常大的情况，或者对系统的高可用性要求很高的情况下，主从模式也是不稳定的。虽然这个模式很简单，但是这个模式是其他模式的基础，所以必须深刻的理解，对其他模式的学习才会有帮助作用。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 06:53:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8426610.html</dc:identifier>
</item>
<item>
<title>shiro权限控制（二）：分布式架构中shiro的实现 - 望星辰大海</title>
<link>http://www.cnblogs.com/tohxyblog/p/8426230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tohxyblog/p/8426230.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;br/&gt;前段时间在搭建公司游戏框架安全验证的时候，就想到之前web最火的shiro框架，虽然后面实践发现在netty中不太适用，最后自己模仿shiro写了一个缩减版的，但是中间花费两天时间弄出来的shiro可不能白费，这里给大家出个简单的教程说明吧。&lt;/p&gt;
&lt;p&gt;shiro的基本介绍这里就不再说了，可以自行翻阅博主之前写的shiro教程，这篇文章主要说明分布式架构下shiro的session共享问题。&lt;/p&gt;
&lt;h3 id=&quot;h3--&quot;&gt;一、原理描述&lt;/h3&gt;
&lt;p&gt;无论分布式、还是集群下，项目都需要获取登录用户的信息，而不可能做的就是让客户在每个系统或者每个模块中反复登录，也不存在让客户端存载用户信息给服务端，这是很常识的问题&lt;/p&gt;
&lt;p&gt;而单机模式下，我们用shiro做了登录验证，他的主要方式就是在第一次登陆的时候，把我们设置的用户信息保存在cache（内存）中和自带的ehcahe（缓存管理器）中，然后给客户端一个cookie，在每次客户端访问时获取cookie值，从而得到用户信息。&lt;/p&gt;
&lt;p&gt;好了，那么逻辑就清楚了，分布式架构下，要与多系统共享用户信息，其实就是共享shiro保存的cache。&lt;/p&gt;
&lt;p&gt;要在多项目中共享，内存是不可能的了，ehcache对分布式支持不太好，或者说根本不支持。那么剩下只能是我么熟悉的mysql，redis，mongdb啥的数据库了。这么一对比，不用我说大家也明白了，最适合的无疑是redis了，速度快，主从啥的。&lt;/p&gt;
&lt;h3 id=&quot;h3--&quot;&gt;二、流程描述&lt;/h3&gt;
&lt;p&gt;查看源码我们可以知道，cacheManager最终会被set到sessionDAO中，所以我们要自己写sessionDAO。有两个类去操作保存的，那么我们只需要重写，实现这两个类，然后在注册的时候声明即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.shiroCache:cache类，可以自己写一个定时消除的MAP存放更好，文章结尾我会给出map的代码。而这里的代码我是放在redis的。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.result.shiro.distributed;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.Cache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.CacheException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.redis.RedisKey;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.redis.RedisUtil;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.tools.KyroUtil;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月8日 下午9:33:23
* cache共享
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@SuppressWarnings(&lt;/span&gt;&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ShiroCache&amp;lt;K, V&amp;gt; &lt;span&gt;implements&lt;/span&gt; Cache&amp;lt;K, V&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String REDIS_SHIRO_CACHE =&lt;span&gt; RedisKey.CACHEKEY;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cacheKey;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; globExpire = 30&lt;span&gt;;
@SuppressWarnings(&lt;/span&gt;&quot;rawtypes&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroCache(String name) {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cacheKey = REDIS_SHIRO_CACHE + name + &quot;:&quot;&lt;span&gt;;
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; V get(K key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CacheException {
Object obj &lt;/span&gt;=&lt;span&gt; RedisUtil.get(KyroUtil.serialization(getCacheKey(key)));
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(obj==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (V) KyroUtil.deserialization((String)obj);
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; V put(K key, V value) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CacheException {
V old &lt;/span&gt;=&lt;span&gt; get(key);
RedisUtil.setex(KyroUtil.serialization(getCacheKey(key)), &lt;/span&gt;18000&lt;span&gt;, KyroUtil.serialization(value));
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; old;
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; V remove(K key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CacheException {
V old &lt;/span&gt;=&lt;span&gt; get(key);
RedisUtil.del(KyroUtil.serialization(getCacheKey(key)));
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; old;
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; clear() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CacheException {
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(String key : (Set&amp;lt;String&amp;gt;&lt;span&gt;)keys()){
RedisUtil.del(key);
}
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; keys().size();
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Set&amp;lt;K&amp;gt;&lt;span&gt; keys() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (Set&amp;lt;K&amp;gt;) RedisUtil.keys(KyroUtil.serialization(getCacheKey(&quot;*&quot;&lt;span&gt;)));
}
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Collection&amp;lt;V&amp;gt;&lt;span&gt; values() {
Set&lt;/span&gt;&amp;lt;K&amp;gt; set =&lt;span&gt; keys();
List&lt;/span&gt;&amp;lt;V&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (K s : set) {
list.add(get(s));
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; K getCacheKey(Object k) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (K) (&lt;span&gt;this&lt;/span&gt;.cacheKey +&lt;span&gt; k);
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.session操作类：这里用来把用户信息存放在redis中共享的。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.result.shiro.distributed;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月6日 上午10:12:42
* redis实现共享session
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.UnknownSessionException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.redis.RedisKey;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.redis.RedisUtil;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.tools.KyroUtil;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.tools.SerializationUtil;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RedisSessionDao &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; EnterpriseCacheSessionDAO {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(RedisSessionDao.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(Session session) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UnknownSessionException {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.saveSession(session);
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 删除session
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; delete(Session session) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (session == &lt;span&gt;null&lt;/span&gt; || session.getId() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
logger.error(&lt;/span&gt;&quot;==========session或sessionI 不存在&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
}
RedisUtil.del(KyroUtil.serialization(RedisKey.SESSIONKEY &lt;/span&gt;+&lt;span&gt; session.getId()));
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 获取存活的sessions
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Collection&amp;lt;Session&amp;gt;&lt;span&gt; getActiveSessions() {
Set&lt;/span&gt;&amp;lt;Session&amp;gt; sessions = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
Set&lt;/span&gt;&amp;lt;String&amp;gt; keys = RedisUtil.keys(KyroUtil.serialization(RedisKey.SESSIONKEY + &quot;*&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String key:keys){
sessions.add((Session)KyroUtil.deserialization((String)RedisUtil.get(key)));
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessions;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 创建session
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Override
&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Serializable doCreate(Session session) {
Serializable sessionId &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.generateSessionId(session);
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.assignSessionId(session, sessionId);
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.saveSession(session);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionId;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 获取session
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Override
&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Session doReadSession(Serializable sessionId) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sessionId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
logger.error(&lt;/span&gt;&quot;==========session id 不存在&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
Object obj &lt;/span&gt;= RedisUtil.get(KyroUtil.serialization(RedisKey.SESSIONKEY +&lt;span&gt; sessionId));
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(obj==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
Session s &lt;/span&gt;=&lt;span&gt; (Session)KyroUtil.deserialization((String)obj);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 保存session并存储过期时间
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; session
* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; UnknownSessionException
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; saveSession(String sessionId,Object obj) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UnknownSessionException{
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
logger.error(&lt;/span&gt;&quot;要存入的session为空&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置过期时间&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; expireTime = 1800&lt;span&gt;;
RedisUtil.setex(sessionId,expireTime,SerializationUtil.serializeToString(obj));
}
}
然后还有一个类也是必要的

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.result.shiro.distributed;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.Cache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.CacheException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.CacheManager;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月8日 下午9:32:41
* 类说明
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RedisCacheManager &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; CacheManager {
@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;K, V&amp;gt; Cache&amp;lt;K, V&amp;gt; getCache(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CacheException {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ShiroCache&amp;lt;K, V&amp;gt;&lt;span&gt;(name);
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;h3--&quot;&gt;三：辅助类说明&lt;/h3&gt;
&lt;p&gt;用户信息的session存放在redis中肯定是需要序列化的，然而用json这种可读性太强的东西安全性显得极低，而且长度太大，浪费存储空间和IO。所以需要找其他的序列化工具。&lt;/p&gt;
&lt;p&gt;常规的好用的序列化工具有kyro，protobuff，这些是性能极高而且序列化之后长度极小的序列化工具，其中protobuf支持跨语言。不过这些在之后的文章再和大家介绍去了，因为~！！session不支持这两种操作（因为上面两个类中操作的session实际是一个接口）。&lt;/p&gt;
&lt;p&gt;那么序列化用的什么，emmmm~一个很原生的东西，测试效率也挺高的，和protobuf差不太多。下面贴出的代码实际就是上面类中kyroUtils中的方法，因为shiro分布式在项目中被废掉了，我也没去改名字了。大家自己看仔细点就可以了。&lt;/p&gt;
&lt;p&gt;被注释掉的代码是kyro的序列化工具。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.result.tools;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ByteArrayInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ByteArrayOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ObjectInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.ObjectOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月6日 下午2:22:14
* Kryo工具类
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; KyroUtil {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(KyroUtil.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;private static KryoPool pool;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原本打算使用kyro序列化session，后来发现kyro对session序列化不支持，反序列后得不到value。 这种out序列化测试性能消耗时间更短，但是长度变大4倍意思，待优化
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; static{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; KryoFactory factory = new KryoFactory() {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; public Kryo create() {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Kryo kryo = new Kryo();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.setReferences(false);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把shiroSession的结构注册到Kryo注册器里面，提高序列化/反序列化效率
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.register(Session.class, new JavaSerializer());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.register(String.class, new JavaSerializer());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.register(User.class, new JavaSerializer());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.setInstantiatorStrategy(new StdInstantiatorStrategy());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return kryo;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; pool = new KryoPool.Builder(factory).build();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; logger.info(&quot;KryoPool初始化成功====================================&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;&lt;span&gt;
/**&lt;/span&gt;&lt;span&gt;
* 对象编码
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String serialization(Object value) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; String str =&quot;&quot;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; try {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Kryo kryo = pool.borrow();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ByteArrayOutputStream baos = new ByteArrayOutputStream();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Output output = new Output(baos);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; kryo.writeClassAndObject(output, value);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; output.flush();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; output.close();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; byte[] b = baos.toByteArray();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; baos.flush();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; baos.close();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; str = new String(b, &quot;ISO8859-1&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; } catch (IOException e) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; e.printStackTrace();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return str;
&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;ByteArrayOutputStream bos = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
ObjectOutputStream oos &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
bos &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayOutputStream();
oos &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectOutputStream(bos);
oos.writeObject(value);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; String(bos.toByteArray(), &quot;ISO8859-1&quot;&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;serialize session error&quot;&lt;span&gt;, e);
} &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
oos.close();
bos.close();
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
e.printStackTrace();
}
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return new String(new Base64().encode(b));&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 对象解码
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; obj
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; clazz
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Object deserialization(String obj) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; try {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Kryo kryo = pool.borrow();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ByteArrayInputStream bais;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; bais = new ByteArrayInputStream(obj.getBytes(&quot;ISO8859-1&quot;));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;new Base64().decode(obj));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Input input = new Input(bais);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return kryo.readClassAndObject(input);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; } catch (UnsupportedEncodingException e) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; e.printStackTrace();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return null;&lt;/span&gt;
ByteArrayInputStream bis = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
ObjectInputStream ois &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
bis &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ByteArrayInputStream(obj.getBytes(&quot;ISO8859-1&quot;&lt;span&gt;));
ois &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectInputStream(bis);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ois.readObject();
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;deserialize session error&quot;&lt;span&gt;, e);
} &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
ois.close();
bis.close();
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
e.printStackTrace();
}
}
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;h3--&quot;&gt;四、注册&lt;/h3&gt;
&lt;p&gt;好了，该重写的都重写了，那么最后一步就是整合spring的时候我们要告诉spring，我们要用的是我们重写过的sessiondao了。&lt;/p&gt;
&lt;p&gt;我这里用的是代码的方式，因为某些原因在写框架的时候不太好用xml去整合。&lt;/p&gt;
&lt;p&gt;反正原理都差不多，大家看看就明白了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.business.shiro;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.credential.HashedCredentialsMatcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.CacheManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.ehcache.EhCacheManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.codec.Base64;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.realm.AuthorizingRealm;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.LifecycleBeanPostProcessor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.web.ShiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.mgt.CookieRememberMeManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.mgt.DefaultWebSecurityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.servlet.SimpleCookie;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.MethodInvokingFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.DependsOn;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.shiro.distributed.RedisCacheManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.shiro.distributed.RedisSessionDao;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月8日 下午8:29:12
* 类说明
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroConfiguration {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
@Bean(name &lt;/span&gt;= &quot;cacheShiroManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CacheManager getCacheManage() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisCacheManager();
}
@Bean(name &lt;/span&gt;= &quot;lifecycleBeanPostProcessor&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
}
@Bean(name &lt;/span&gt;= &quot;sessionValidationScheduler&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExecutorServiceSessionValidationScheduler getExecutorServiceSessionValidationScheduler() {
ExecutorServiceSessionValidationScheduler scheduler &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExecutorServiceSessionValidationScheduler();
scheduler.setInterval(&lt;/span&gt;900000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; scheduler;
}
@Bean(name &lt;/span&gt;= &quot;hashedCredentialsMatcher&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher getHashedCredentialsMatcher() {
HashedCredentialsMatcher credentialsMatcher &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashedCredentialsMatcher();
credentialsMatcher.setHashAlgorithmName(&lt;/span&gt;&quot;MD5&quot;&lt;span&gt;);
credentialsMatcher.setHashIterations(&lt;/span&gt;1&lt;span&gt;);
credentialsMatcher.setStoredCredentialsHexEncoded(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; credentialsMatcher;
}
@Bean(name &lt;/span&gt;= &quot;sessionIdCookie&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleCookie getSessionIdCookie() {
SimpleCookie cookie &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleCookie(&quot;sid&quot;&lt;span&gt;);
cookie.setHttpOnly(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
cookie.setMaxAge(&lt;/span&gt;-1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cookie;
}
@Bean(name &lt;/span&gt;= &quot;rememberMeCookie&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleCookie getRememberMeCookie() {
SimpleCookie simpleCookie &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleCookie(&quot;rememberMe&quot;&lt;span&gt;);
simpleCookie.setHttpOnly(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
simpleCookie.setMaxAge(&lt;/span&gt;2592000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; simpleCookie;
}
@Bean
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CookieRememberMeManager getRememberManager(){
CookieRememberMeManager meManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CookieRememberMeManager();
meManager.setCipherKey(Base64.decode(&lt;/span&gt;&quot;4AvVhmFLUs0KTA3Kprsdag==&quot;&lt;span&gt;));
meManager.setCookie(getRememberMeCookie());
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; meManager;
}
@Bean(name &lt;/span&gt;= &quot;sessionManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager getSessionManage() {
DefaultWebSessionManager sessionManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager();
sessionManager.setGlobalSessionTimeout(&lt;/span&gt;1800000&lt;span&gt;);
sessionManager.setSessionValidationScheduler(getExecutorServiceSessionValidationScheduler());
sessionManager.setSessionValidationSchedulerEnabled(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
sessionManager.setDeleteInvalidSessions(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
sessionManager.setSessionIdCookieEnabled(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
sessionManager.setSessionIdCookie(getSessionIdCookie());
RedisSessionDao cacheSessionDAO &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisSessionDao();
cacheSessionDAO.setCacheManager(getCacheManage());
sessionManager.setSessionDAO(cacheSessionDAO);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; -----可以添加session 创建、删除的监听器&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionManager;
}
@Bean(name &lt;/span&gt;= &quot;myRealm&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizingRealm getShiroRealm() {
MyRealm realm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyRealm();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; realm.setName(&quot;shiro_auth_cache&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; realm.setAuthenticationCache(getCacheManage().getCache(realm.getName()));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; realm.setAuthenticationTokenClass(UserAuthenticationToken.class);&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; realm;
}
@Bean(name &lt;/span&gt;= &quot;securityManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager getSecurityManager() {
DefaultWebSecurityManager securityManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
securityManager.setCacheManager(getCacheManage());
securityManager.setSessionManager(getSessionManage());
securityManager.setRememberMeManager(getRememberManager());
securityManager.setRealm(getShiroRealm());
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; securityManager;
}
@Bean
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodInvokingFactoryBean getMethodInvokingFactoryBean(){
MethodInvokingFactoryBean factoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodInvokingFactoryBean();
factoryBean.setStaticMethod(&lt;/span&gt;&quot;org.apache.shiro.SecurityUtils.setSecurityManager&quot;&lt;span&gt;);
factoryBean.setArguments(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[]{getSecurityManager()});
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; factoryBean;
}
@Bean
@DependsOn(&lt;/span&gt;&quot;lifecycleBeanPostProcessor&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator getAutoProxyCreator(){
DefaultAdvisorAutoProxyCreator creator &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
creator.setProxyTargetClass(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; creator;
}
@Bean
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(){
AuthorizationAttributeSourceAdvisor advisor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
advisor.setSecurityManager(getSecurityManager());
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; advisor;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Bean(name &lt;/span&gt;= &quot;shiroFilter&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean getShiroFilterFactoryBean(){
ShiroFilterFactoryBean factoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
factoryBean.setSecurityManager(getSecurityManager());
factoryBean.setLoginUrl(&lt;/span&gt;&quot;/toLogin&quot;&lt;span&gt;);
factoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; factoryBean;
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;优化：伪定时消除map，最好配合quartz清楚，不然内存中MAP如果不访问就不消除，容易累计。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.result.security;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.result.NettyGoConstant;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 作者 huangxinyu
* &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年1月29日 上午10:31:50 类说明
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ExpiryMap&amp;lt;K, V&amp;gt; &lt;span&gt;extends&lt;/span&gt; HashMap&amp;lt;K, V&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* default expiry time 2m
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; EXPIRY =&lt;span&gt; NettyGoConstant.LOGINSESSIONTIMEOUT;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; HashMap&amp;lt;K, Long&amp;gt; expiryMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExpiryMap() {
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ExpiryMap(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; defaultExpiryTime) {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(1 &amp;lt;&amp;lt; 4&lt;span&gt;, defaultExpiryTime);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ExpiryMap(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; defaultExpiryTime) {
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(initialCapacity);
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.EXPIRY =&lt;span&gt; defaultExpiryTime;
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
expiryMap.put(key, System.currentTimeMillis() &lt;/span&gt;+&lt;span&gt; EXPIRY);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.put(key, value);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; containsKey(Object key) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; !checkExpiry(key, &lt;span&gt;true&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.containsKey(key);
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; expiryTime
* 键值对有效期 毫秒
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; V put(K key, V value, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; expiryTime) {
expiryMap.put(key, System.currentTimeMillis() &lt;/span&gt;+&lt;span&gt; expiryTime);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.put(key, value);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entrySet().size();
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; entrySet().size() == 0&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; containsValue(Object value) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Boolean.FALSE;
Set&lt;/span&gt;&amp;lt;java.util.Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; set = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.entrySet();
Iterator&lt;/span&gt;&amp;lt;java.util.Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; iterator =&lt;span&gt; set.iterator();
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()) {
java.util.Map.Entry&lt;/span&gt;&amp;lt;K, V&amp;gt; entry =&lt;span&gt; iterator.next();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (value.equals(entry.getValue())) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (checkExpiry(entry.getKey(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)) {
iterator.remove();
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Boolean.FALSE;
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Boolean.TRUE;
}
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Boolean.FALSE;
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Collection&amp;lt;V&amp;gt;&lt;span&gt; values() {
Collection&lt;/span&gt;&amp;lt;V&amp;gt; values = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.values();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (values == &lt;span&gt;null&lt;/span&gt; || values.size() &amp;lt; 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; values;
Iterator&lt;/span&gt;&amp;lt;V&amp;gt; iterator =&lt;span&gt; values.iterator();
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()) {
V next &lt;/span&gt;=&lt;span&gt; iterator.next();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;containsValue(next))
iterator.remove();
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; values;
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (checkExpiry(key, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.get(key);
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
*
* @Description: 是否过期
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; null:不存在或key为null -1:过期 存在且没过期返回value 因为过期的不是实时删除，所以稍微有点作用
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object isInvalid(Object key) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;expiryMap.containsKey(key)) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;long&lt;/span&gt; expiryTime =&lt;span&gt; expiryMap.get(key);
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = System.currentTimeMillis() &amp;gt;&lt;span&gt; expiryTime;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.remove(key);
expiryMap.remove(key);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.get(key);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; putAll(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt;&lt;span&gt; m) {
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt;&lt;span&gt; e : m.entrySet())
expiryMap.put(e.getKey(), System.currentTimeMillis() &lt;/span&gt;+&lt;span&gt; EXPIRY);
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.putAll(m);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;&lt;span&gt; entrySet() {
Set&lt;/span&gt;&amp;lt;java.util.Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; set = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.entrySet();
Iterator&lt;/span&gt;&amp;lt;java.util.Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; iterator =&lt;span&gt; set.iterator();
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()) {
java.util.Map.Entry&lt;/span&gt;&amp;lt;K, V&amp;gt; entry =&lt;span&gt; iterator.next();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (checkExpiry(entry.getKey(), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
iterator.remove();
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; set;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
*
* @Description: 是否过期
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt;: qd-ankang
* @date: 2016-11-24 下午4:05:02
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; expiryTime
* true 过期
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; isRemoveSuper
* true super删除
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; checkExpiry(Object key, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isRemoveSuper) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;expiryMap.containsKey(key)) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Boolean.FALSE;
}
&lt;/span&gt;&lt;span&gt;long&lt;/span&gt; expiryTime =&lt;span&gt; expiryMap.get(key);
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = System.currentTimeMillis() &amp;gt;&lt;span&gt; expiryTime;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isRemoveSuper)
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.remove(key);
expiryMap.remove(key);
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 删除
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; del(Object key){
&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.remove(key);
expiryMap.remove(key);
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
ExpiryMap&lt;/span&gt;&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; ExpiryMap&amp;lt;&amp;gt;(10&lt;span&gt;);
map.put(&lt;/span&gt;&quot;test&quot;, &quot;ankang&quot;&lt;span&gt;);
map.put(&lt;/span&gt;&quot;test1&quot;, &quot;ankang&quot;&lt;span&gt;);
map.put(&lt;/span&gt;&quot;test2&quot;, &quot;ankang&quot;, 3000&lt;span&gt;);
System.out.println(&lt;/span&gt;&quot;test1&quot; + map.get(&quot;test&quot;&lt;span&gt;));
Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
System.out.println(&lt;/span&gt;&quot;isInvalid:&quot; + map.isInvalid(&quot;test&quot;&lt;span&gt;));
System.out.println(&lt;/span&gt;&quot;size:&quot; +&lt;span&gt; map.size());
System.out.println(&lt;/span&gt;&quot;size:&quot; + ((HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;) map).size());
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, String&amp;gt;&lt;span&gt; m : map.entrySet()) {
System.out.println(&lt;/span&gt;&quot;isInvalid:&quot; +&lt;span&gt; map.isInvalid(m.getKey()));
map.containsKey(m.getKey());
System.out.println(&lt;/span&gt;&quot;key:&quot; + m.getKey() + &quot; value:&quot; +&lt;span&gt; m.getValue());
}
System.out.println(&lt;/span&gt;&quot;test1&quot; + map.get(&quot;test&quot;&lt;span&gt;));
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 是否超过过期的一半时间
* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isHalfExpiryTime(Object key ){
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;expiryMap.containsKey(key)) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;long&lt;/span&gt; expiryTime =&lt;span&gt; expiryMap.get(key);
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = System.currentTimeMillis()-(expiryTime-NettyGoConstant.LOGINSESSIONTIMEOUT)&amp;gt;=NettyGoConstant.LOGINSESSIONTIMEOUT/2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.droptb.com/article/detail/58164a980bd64e13b4a7c679bfa31435&quot; target=&quot;_blank&quot;&gt;更多链接&lt;/a&gt;: http://www.droptb.com/article/detail/58164a980bd64e13b4a7c679bfa31435    欢迎点击参观博主的网站&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 05:56:00 +0000</pubDate>
<dc:creator>望星辰大海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tohxyblog/p/8426230.html</dc:identifier>
</item>
<item>
<title>官方新出的 Kotlin 扩赞库 KTX，到底帮你干了什么？ - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/8426176.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/8426176.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e503bb1?w=900&amp;amp;h=500&amp;amp;f=jpeg&amp;amp;s=70765&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;kotlin-ktx&quot;&gt;Kotlin KTX&lt;/h2&gt;
&lt;p&gt;2月5号的时候，Google 发布了一款 Kotlin 的扩展库，叫 Android KTX，不过现在还处于预览版的状态。它能使 Android 上的 Kotlin 代码更简洁，从而提高开发者的效率和使用体验。&lt;/p&gt;
&lt;p&gt;Android KTX 其实就是一个 Kotlin 代码的扩展库，Google 把我们开发的时候，比较常用的一些代码块，进行封装，然后在这个基础上，提供更良好的 API，供开发者使用。举个例子：以前你需要些三五行代码才可以实现的功能，用上 Android KTX 之后，一行代码搞定了。意不意外，惊不惊喜！&lt;/p&gt;
&lt;p&gt;说明白 Android KTX 是什么之后，你是不是想说，这不就是 Java 下的 XxxUtils 库么？&lt;/p&gt;
&lt;p&gt;其实还真就是一样的，只是因为 Kotlin 的 Extensions 特性，让这个扩展库看着更无缝了，就像是在使用一些原生的 API 一样。&lt;/p&gt;
&lt;h2 id=&quot;举个例子&quot;&gt;举个例子&lt;/h2&gt;
&lt;p&gt;说的那么好，我们上几个个官方提供的例子，来看看 Android KTX 的方便之处。&lt;/p&gt;
&lt;h3 id=&quot;字符串转-uri&quot;&gt;1 字符串转 URI&lt;/h3&gt;
&lt;p&gt;通常我们需要使用 &lt;code&gt;Uri.parse()&lt;/code&gt; 方法，来讲一个 String 对象转换成一个 Uri 对象。但是 Android KTX 为 String 增加了一个扩展函数&lt;code&gt;toUri()&lt;/code&gt;，调用一下，就解决问题了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e651b74?w=667&amp;amp;h=120&amp;amp;f=jpeg&amp;amp;s=14645&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;写入-sharedpreferences&quot;&gt;2 写入 SharedPreferences&lt;/h3&gt;
&lt;p&gt;读写 SharedPreferences 是一个非常常见的操作，之前还需要 调用 &lt;code&gt;edit()&lt;/code&gt; 获取一个用于编辑的对象。现在这个操作又被 Android KTX 简化了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e5af199?w=665&amp;amp;h=213&amp;amp;f=jpeg&amp;amp;s=19913&quot; alt=&quot;spdemo&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;监听-onpredraw-回调&quot;&gt;3 监听 onPreDraw 回调&lt;/h3&gt;
&lt;p&gt;如果你想增加 OnPreDrawListener 的监听，Android KTX 可以帮你节省很多代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e77e93b?w=667&amp;amp;h=354&amp;amp;f=jpeg&amp;amp;s=40716&quot; alt=&quot;doPreDraw&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这几个例子都是 Google 博客中提及的例子，应该算是比较有代表性的了。从例子中可以看出 Android KTX 做的就是精简代码的事情，让我们开发起来更简洁和高效。&lt;/p&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;如何使用&lt;/h2&gt;
&lt;p&gt;虽然 Android KTX 现在还是预览版，但是你依然可以体验它。只需要在 Gradle 中添加依赖即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;repositories {
    google()
}

dependencies {
    // Android KTX for framework API
    implementation 'androidx.core:core-ktx:0.1'
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同步一下即可使用，非常的方便。&lt;/p&gt;
&lt;p&gt;需要注意的是，毕竟是预览版，可能会有不确定的问题，所以 Google 推荐在正式版来临之前，千万不要在商业项目中使用它。&lt;/p&gt;
&lt;p&gt;同时 Google 表示，预览版只是一个开始，在接下来的几个月里他们会根据开发者的反馈和贡献，对 API 进行迭代，会在迭代的过程中，考虑 API 的兼容性。最终可能计划将 Android KTX 作为 Android Support Library 的一部分。&lt;/p&gt;
&lt;p&gt;感受到 Google 的诚意了吧？让我们拭目以待吧！&lt;/p&gt;
&lt;h2 id=&quot;android-ktx-的更多细节&quot;&gt;Android KTX 的更多细节&lt;/h2&gt;
&lt;p&gt;毕竟是一个预览版，本身来说到这里就已经算是结束了，不过我们还是要看看文档和源码来分析一下。&lt;/p&gt;
&lt;p&gt;简单阅读一下 Android KTX 的文档，其实内容还是很多的，不仅仅是前面举的那些例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e66732b?w=219&amp;amp;h=757&amp;amp;f=jpeg&amp;amp;s=29702&quot; alt=&quot;Packages&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从动画到 Text 以及 View 的处理，其实都被 Android KTX 涉及到了，算是已经包含了大部分我们的常用操作了。&lt;/p&gt;
&lt;p&gt;拿前面举例的 SharePreferences 写入的例子来看，它在 &lt;code&gt;androidx.context&lt;/code&gt; 包下面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c2e4fe9ad?w=890&amp;amp;h=157&amp;amp;f=jpeg&amp;amp;s=33906&quot; alt=&quot;sp-dome&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看文档写的很清晰了，随手试一试就能知道怎么用。&lt;/p&gt;
&lt;p&gt;不过代码更简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ec4c58b96e0f?w=638&amp;amp;h=378&amp;amp;f=jpeg&amp;amp;s=38389&quot; alt=&quot;sp-code&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有兴趣可以看看文档和 Github 上的代码。&lt;/p&gt;
&lt;blockquote readability=&quot;1.2233009708738&quot;&gt;
&lt;p&gt;Doc：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://android.github.io/android-ktx/core-ktx/&quot; class=&quot;uri&quot;&gt;https://android.github.io/android-ktx/core-ktx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/android/android-ktx&quot; class=&quot;uri&quot;&gt;https://github.com/android/android-ktx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android KXT 的代码都很简单，不会包含大段的代码，都是一些小功能的封装，有兴趣直接上 Github 上阅读即可。&lt;/p&gt;
&lt;p&gt;简单阅读了代码之后，感觉这个库吧，不会有什么大坑，自己公司有兴趣都可以参考着自己写一个扩展库出来。可以放心私用，不过还是期待正式版的发布。&lt;/p&gt;
&lt;p&gt;你对 Google 发布的 Android KTX 有什么看法？不妨在留言区留言讨论一下！&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;今天在公众号后台回复成长『&lt;strong&gt;成长&lt;/strong&gt;』，将会得到我整理的一些学习资料，也能回复『&lt;strong&gt;加群&lt;/strong&gt;』，一起学习进步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/5/1616494658f73e46?w=600&amp;amp;h=600&amp;amp;f=jpeg&amp;amp;s=54770&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 05:40:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/plokmju/p/8426176.html</dc:identifier>
</item>
<item>
<title>由阅读源码想到 - kid551</title>
<link>http://www.cnblogs.com/kid551/p/8426074.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kid551/p/8426074.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxMFLoYazlqaCBPhjkwvmrkvTTiajpLQASJElHUwjuO8mIlXxN2nhpkstbas43Qdnzz4UqPicPMaDgLA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxMFLoYazlqaCBPhjkwvmrkvTTiajpLQASJElHUwjuO8mIlXxN2nhpkstbas43Qdnzz4UqPicPMaDgLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;阅读源代码，同数学、同任何一个知识密集型行业的吸收过程一样，是一个在反复地“读了忘、忘了读”的旅程。&lt;/p&gt;
&lt;p&gt;记得本科时，从清北毕业的教授泛函分析的李老师说过一段闲话：“再来教你们泛函分析，对我来说是个重新拾起来的过程。数学就这样，反复地做、反复地读，反复地习得这个技能，然后又反复地忘掉。那怎么办呢？真要再用的时候再看看呗，拾起来就好了”。&lt;/p&gt;
&lt;p&gt;我想，阅读源码是同样的，你不用那么费尽心力去叹息、去责备自己为何会忘记曾经熟稔的技术细节。等到要用的时候，又不得不重头开始。事实上，大家都会忘记。忘记了，在用的时候拾起来就好。&lt;/p&gt;
&lt;p&gt;我想，这里真正让人泄气的一个问题是：既然终究会忘掉，那不如一开始就不要学习？但这便是tricky的部分。你读过的东西，忘掉，表面上什么都没得到。但事实是，你的技能，你对很多抽象的观点，会有具体深入的体会与理解。你会有切肤之感，进而它会以“直觉”的形式成为你潜意识的一部分。以此为基础，再去做触类旁通的相关事务，才懂得如何切入、有的放矢。&lt;/p&gt;
&lt;p&gt;当然，阅读源码的挫败感，还在于它本身所需的大量基础知识造成的复杂性。往往，优秀的源码是由一系列的精妙技术组合而成。但并没有这样一套体系或者类似于打怪升级的系统去告诉你，哪一套是适合初级选手，哪一套适合进阶选手。于是，那些隐形的看不见的缺乏阶梯，横亘在了你的进步之路而你又浑然不知。也即是，读不懂它，仅仅是因为你和它之间缺乏的阶梯太多了而已。没有银弹，将那些缺乏的知识阶梯补上后，你自然可以读懂。&lt;/p&gt;
&lt;p&gt;更何况，如同阅读文学名著一般。年少的阅读，中青年的阅读，以及成为了半个写作者的阅读，其对文本的理解和关注点都各有不同。不存在一种捷径或者参考列表，可以容纳对这个文本的所有理解和探索方式。倒不是说作者心思缜密，故意埋藏多个伏笔在那里。而是写出来的文本是头脑的磨刀石，它的作用是一扇引导门，启发你探索自己本身。这扇门的背后通往哪里，完全由自己的阅历和思维敏锐度决定。或许作者并未有某个方向的意思，但是，你却会因为那一句话，接合曾经的种种经历，进而完成自己的悟道。&lt;/p&gt;
&lt;p&gt;阅读源码是同样的，你企图一下子要弄懂这段代码背后的所有技术，并不现实。且不说某些代码背后的知识量之巨让人生畏，你能够在这段代码当中读到多少东西，取决于你自身的技术高度和思想境界。好作品的阅读效果，不完全取决于作者，更取决于读者本身。阅读是一个读者和作者的共同创作的过程。读者本身的素质，会极大地影响最终的阅读产出。&lt;/p&gt;
&lt;p&gt;所以，这其实是一个漫长的、反复不断地细品过程，急不来。想通了这点，便可以更为从容地去读这份代码。用个比喻讲，如果你不得不通读5次、实践5次，才能够达到下一个level的通悟。那么，知道了“你不可以跨过第三个包子而吃到第五个包子”的这一事实，便可以老老实实按部就班地从第一遍读起来。然后把剩下的焦虑托付给时间。&lt;/p&gt;
&lt;p&gt;从这个角度讲，阅读源码这件事真的没有银弹，要依靠你的苦功夫和硬本领，去慢慢同它熬岁月。不要总想走捷径，这只会减缓自己的成长。欧几里得早已点出，“几何之中，并无王者之道”。应该拿出做数学的勇气，拿出干苦力的踏实，一点点缓慢进步。要知道，理解和习得一项本身就很复杂的技能，其本身就需要这么多的努力付出。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;那为何你在数学上又有如此的勇气和魄力，去阅读那些一天甚至几天才能进展一页的大部头呢？&lt;/p&gt;
&lt;p&gt;为何可以如此耐心？&lt;/p&gt;
&lt;p&gt;请参看下篇。&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;strong&gt;近期回顾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484156&amp;amp;idx=1&amp;amp;sn=2715fa6c7da75533146542fcc8a26307&amp;amp;chksm=ec20e540db576c56366976975ef5b79be3236efeaddb6dd0627254838ab70559ac6da3363af6&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;志玲姐姐的《十三邀》&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484152&amp;amp;idx=1&amp;amp;sn=a806d2d92eb9655f3a22b15c34c832ed&amp;amp;chksm=ec20e544db576c5293e6d638a38f7ef97de55e1d833abc9cc47245a31be75d412018abb1c5e6&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;2018年01月写字总结&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484148&amp;amp;idx=1&amp;amp;sn=6d05351d20e89c47e6d057475863544a&amp;amp;chksm=ec20e548db576c5eaabdd57c571ca5a7f52012a79f6248740e715781e03a9ba087df88b89e21&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;纽约时报的《王国与权力》&lt;/a&gt;》&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果你喜欢我的文章或分享，请长按下面的二维码关注我的微信公众号，谢谢！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxO9bdR9L0kttlgPe8JlGY87dGprLDyYXqdZWbhAxcETGrnWXCm3UgREhBG7DE3y9FknUCbYCUuuBg/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; width=&quot;auto&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxO9bdR9L0kttlgPe8JlGY87dGprLDyYXqdZWbhAxcETGrnWXCm3UgREhBG7DE3y9FknUCbYCUuuBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1240&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VIP赞赏专区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxM4uGL2UpKV92GZ6XjwDoShRKLD8ib7bibuGZVibkyhQ0At2IS64V9GX4ib91xibovBtibt7qicowFpvibP1Q/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; width=&quot;57%&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VJsh0SqOtxM4uGL2UpKV92GZ6XjwDoShRKLD8ib7bibuGZVibkyhQ0At2IS64V9GX4ib91xibovBtibt7qicowFpvibP1Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1152&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 05:02:00 +0000</pubDate>
<dc:creator>kid551</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kid551/p/8426074.html</dc:identifier>
</item>
<item>
<title>一步一步从原理跟我学邮件收取及发送 10.四句代码说清base64 - clq</title>
<link>http://www.cnblogs.com/-clq/p/8425988.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-clq/p/8425988.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;算法来自 &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/IwAdream/p/6088283.html&lt;/span&gt;&lt;span&gt;, 加了我自己的注释 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;基本上就是靠移位算法将 3 个字节变成 4 个字节,或者将 4 个字节变成 三个字节
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以看 &lt;/span&gt;&lt;span&gt;https://zh.wikipedia.org/wiki/Base64&lt;/span&gt;&lt;span&gt; 中的表格图示 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片可以在本源码中附带的 base64.png 中看到[如果转载的网友也转载有图片的话就会有] 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其实一张图就能明白它的原理 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把变量提前以便更多编译器支持 &lt;/span&gt;
&lt;span&gt;
#ifndef _BASE64_H_
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; _BASE64_H_&lt;span&gt;

#include &lt;/span&gt;&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdint.h&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq 这个其实也不是必须的 &lt;/span&gt;
#include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;malloc&lt;/span&gt;.h&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq 可以不用,有时会冲突 &lt;/span&gt;
 
&lt;span&gt;char&lt;/span&gt; base64_table[] =&lt;span&gt; {
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
};
 
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; base64_map(uint8_t *in_block, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; len; ++&lt;span&gt;i) {
        in_block[i] &lt;/span&gt;=&lt;span&gt; base64_table[in_block[i]];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d %c&quot;,in_block[i], base64_table[in_block[i]]);&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(len % &lt;span&gt;4&lt;/span&gt; == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
        in_block[len] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(len % &lt;span&gt;4&lt;/span&gt; == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
        in_block[len] &lt;/span&gt;= in_block[len+&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
}


&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;  base64_unmap(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;in_block) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;c;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; decode_count = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;4&lt;/span&gt;; ++&lt;span&gt;i) {
        c &lt;/span&gt;= in_block +&lt;span&gt; i;
 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*c&amp;gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; *c&amp;lt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;*c -= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*c&amp;gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; *c&amp;lt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;*c -= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;*c += &lt;span&gt;26&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;*c = &lt;span&gt;62&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;*c = &lt;span&gt;63&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;*c = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
 
        &lt;/span&gt;*c -= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;*c += &lt;span&gt;52&lt;/span&gt;&lt;span&gt;;
    }
}
 
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; _base64_encode(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;in&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; inlen, uint8_t *&lt;span&gt;out&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;in_block;
    uint8_t &lt;/span&gt;*&lt;span&gt;out_block;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; temp[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; outlen = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 加一个解码后的数据长度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 
    out_block &lt;/span&gt;= &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
    in_block &lt;/span&gt;= &lt;span&gt;in&lt;/span&gt;&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; inlen; i += &lt;span&gt;3&lt;/span&gt;&lt;span&gt;) {
        memset(temp, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        memcpy(temp, in_block, i &lt;/span&gt;+ &lt;span&gt;3&lt;/span&gt; &amp;lt; inlen ? &lt;span&gt;3&lt;/span&gt; : inlen -&lt;span&gt; i);
        memset(out_block, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;memset(out_block, '=', 4); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;好象也不用 &lt;/span&gt;
&lt;span&gt; 
        out_block[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = (temp[&lt;span&gt;0&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;2&lt;/span&gt;) &amp;amp; &lt;span&gt;0x3f&lt;/span&gt;&lt;span&gt;;
        out_block[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = ((temp[&lt;span&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;4&lt;/span&gt;) &amp;amp; &lt;span&gt;0x30&lt;/span&gt;) | ((temp[&lt;span&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;4&lt;/span&gt;) &amp;amp; &lt;span&gt;0x0f&lt;/span&gt;&lt;span&gt;);
        out_block[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = ((temp[&lt;span&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;2&lt;/span&gt;) &amp;amp; &lt;span&gt;0x3c&lt;/span&gt;) | ((temp[&lt;span&gt;2&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;6&lt;/span&gt;) &amp;amp; &lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;);
        out_block[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = (temp[&lt;span&gt;2&lt;/span&gt;]) &amp;amp; &lt;span&gt;0x3f&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%.2x %.2x %.2x\n&quot;, temp[0], temp[1], temp[2]);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%.2x %.2x %.2x %.2x\n&quot;, out_block[0], out_block[1], out_block[2], out_block[3]);&lt;/span&gt;
        out_block += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
        in_block &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        
        outlen &lt;/span&gt;+= &lt;span&gt;4&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 加一个编码后的数据长度&lt;/span&gt;
&lt;span&gt;    }
 
    base64_map(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;, ((inlen * &lt;span&gt;4&lt;/span&gt;) - &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;3&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; outlen;
}
 
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; _base64_decode(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;in&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; inlen, uint8_t *&lt;span&gt;out&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;in_block;
    uint8_t &lt;/span&gt;*&lt;span&gt;out_block;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; temp[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; outlen = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 加一个解码后的数据长度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 
    out_block &lt;/span&gt;= &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
    in_block &lt;/span&gt;= &lt;span&gt;in&lt;/span&gt;&lt;span&gt;;

 
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; inlen; i += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*in_block == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        memcpy(temp, in_block, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
        memset(out_block, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        base64_unmap(temp);
 
        out_block[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = ((temp[&lt;span&gt;0&lt;/span&gt;]&amp;lt;&amp;lt;&lt;span&gt;2&lt;/span&gt;) &amp;amp; &lt;span&gt;0xfc&lt;/span&gt;) | ((temp[&lt;span&gt;1&lt;/span&gt;]&amp;gt;&amp;gt;&lt;span&gt;4&lt;/span&gt;) &amp;amp; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        out_block[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = ((temp[&lt;span&gt;1&lt;/span&gt;]&amp;lt;&amp;lt;&lt;span&gt;4&lt;/span&gt;) &amp;amp; &lt;span&gt;0xf0&lt;/span&gt;) | ((temp[&lt;span&gt;2&lt;/span&gt;]&amp;gt;&amp;gt;&lt;span&gt;2&lt;/span&gt;) &amp;amp; &lt;span&gt;0xf&lt;/span&gt;&lt;span&gt;);
        out_block[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = ((temp[&lt;span&gt;2&lt;/span&gt;]&amp;lt;&amp;lt;&lt;span&gt;6&lt;/span&gt;) &amp;amp; &lt;span&gt;0xc0&lt;/span&gt;) | ((temp[&lt;span&gt;3&lt;/span&gt;]   ) &amp;amp; &lt;span&gt;0x3f&lt;/span&gt;&lt;span&gt;);
 
        out_block &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
        in_block &lt;/span&gt;+=&lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
        
        outlen &lt;/span&gt;+= &lt;span&gt;3&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 加一个解码后的数据长度&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个长度其实不对,因为不一定是 3 的倍数
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (temp[3] == '=') outlen -= 1; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 有一个等号就表示补充了一个字节&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;优化放到最后去好了 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (temp[3] == '=') outlen -= 1; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 有一个等号就表示补充了一个字节&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;优化放到最后去好了 &lt;/span&gt;
&lt;span&gt;        
    }
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;in&lt;/span&gt;[inlen-&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) outlen -= &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 有一个等号就表示补充了一个字节&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;优化放到最后去好了 &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;in&lt;/span&gt;[inlen-&lt;span&gt;2&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) outlen -= &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 有一个等号就表示补充了一个字节&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;优化放到最后去好了 

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return 0;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; outlen; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clq add 加一个解码后的数据长度 &lt;/span&gt;
&lt;span&gt;}
 
 
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
int main2() {
 
    char cipher_text[64];
    int i = 0;
    
    while(scanf(&quot;%s&quot;, cipher_text) != EOF) {
        printf(&quot;%s\n&quot;, cipher_text);
 
        uint8_t *tran_cipher = (uint8_t *)malloc(sizeof(uint8_t) * 64);
        memset(tran_cipher, 0, sizeof(uint8_t) * 64);
 
        #define ENCODE
        #define DECODE
        #ifdef ENCODE
        printf(&quot;----------------ENCODE-----------------&quot;);
        base64_encode(cipher_text, strlen(cipher_text), tran_cipher);
        int len = (strlen(cipher_text) * 4 - 1) / 3 + 1;
        len = len % 4 == 3 ? len + 1 : len + 2;
        for(i = 0; i &amp;lt; len ; ++i)
            printf(&quot;%c&quot;, tran_cipher[i]);
        printf(&quot;\n&quot;);
 
        #endif // ENCODE
 
        #ifdef DECODE
        printf(&quot;----------------DECODE-----------------&quot;);
        base64_decode(cipher_text, strlen(cipher_text), tran_cipher);
        len = strlen(cipher_text);
        int n = len;
        while(cipher_text[--n] == '=')
            ;
        if(n == len-2)
            len = (len &amp;gt;&amp;gt; 2) * 3 - 1;
        else if(n == len-3)
            len = (len &amp;gt;&amp;gt; 2) * 3 - 2;
        else if(n == len-1)
            len = (len &amp;gt;&amp;gt; 2) * 3;
 
        for(i = 0; i &amp;lt; len; ++i)
            printf(&quot;%c&quot;, tran_cipher[i]);
        printf(&quot;\n&quot;);
        #endif // DECODE
    }
    return 0;
}

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;


&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 07 Feb 2018 04:17:00 +0000</pubDate>
<dc:creator>clq</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-clq/p/8425988.html</dc:identifier>
</item>
<item>
<title>什么是拜占庭将军问题 - Tiny熊</title>
<link>http://www.cnblogs.com/tinyxiong/p/8425901.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tinyxiong/p/8425901.html</guid>
<description>&lt;p&gt;接触区块链的同学，多少都听说过拜占庭将军问题，经常看到或听到某某区块链使用某某算法解决了拜占庭将军问题，那么究竟什么是拜占庭将军问题呢?&lt;/p&gt;
&lt;h2 id=&quot;什么是拜占庭将军问题&quot;&gt;什么是拜占庭将军问题&lt;/h2&gt;
&lt;p&gt;也被称为“拜占庭容错”、“拜占庭将军问题”。&lt;br/&gt;拜占庭将军问题是Leslie Lamport（2013年的图灵讲得住）用来为描述&lt;strong&gt;分布式系统一致性问题&lt;/strong&gt;（Distributed Consensus）在&lt;a href=&quot;http://lamport.azurewebsites.net/pubs/byz.pdf&quot;&gt;论文&lt;/a&gt;中抽象出来一个著名的例子。&lt;/p&gt;
&lt;p&gt;这个例子大意是这样的：&lt;/p&gt;
&lt;p&gt;拜占庭帝国想要进攻一个强大的敌人，为此派出了10支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御5支常规拜占庭军队的同时袭击。这10支军队在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少6支军队（一半以上）同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵骑马相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们才能保证有多于6支军队在同一时间一起发起进攻，从而赢取战斗？&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;拜占庭将军问题中并不去考虑通信兵是否会被截获或无法传达信息等问题，即消息传递的信道绝无问题。Lamport已经证明了在消息可能丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。所以，在研究拜占庭将军问题的时候，已经假定了信道是没有问题的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;问题分析&lt;/h2&gt;
&lt;p&gt;单从上面的说明可能无法理解这个问题的复杂性，我们来简单分析一下：&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;先看在没有叛徒情况下，假如一个将军A提一个进攻提议（如：明日下午1点进攻，你愿意加入吗？）由通信兵通信分别告诉其他的将军，如果幸运中的幸运，他收到了其他6位将军以上的同意，发起进攻。如果不幸，其他的将军也在此时发出不同的进攻提议（如：明日下午2点、3点进攻，你愿意加入吗？），由于时间上的差异，不同的将军收到（并认可）的进攻提议可能是不一样的，这是可能出现A提议有3个支持者，B提议有4个支持者，C提议有2个支持者等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.5&quot;&gt;
&lt;p&gt;再加一点复杂性，在有叛徒情况下，一个叛徒会向不同的将军发出不同的进攻提议（通知A明日下午1点进攻， 通知B明日下午2点进攻等等），一个叛徒也会可能同意多个进攻提议（即同意下午1点进攻又同意下午2点进攻）。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;叛徒发送前后不一致的进攻提议，被称为“拜占庭错误”，而能够处理拜占庭错误的这种容错性称为「Byzantine fault tolerance」，简称为BFT。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;相信大家已经可以明白这个问题的复杂性了。&lt;/p&gt;
&lt;h2 id=&quot;中本聪的解决方案&quot;&gt;中本聪的解决方案&lt;/h2&gt;
&lt;p&gt;在出现比特币之前，解决分布式系统一致性问题主要是Lamport提出的Paxos算法或其衍生算法。Paxos类算法仅适用于中心化的分布式系统，这样的系统的没有不诚实的节点（不会发送虚假错误消息，但允许出现网络不通或宕机出现的消息延迟）。&lt;/p&gt;
&lt;p&gt;中本聪在比特币中创造性的引入了“工作量证明（POW : Proof of Work）”来解决这个问题，有兴趣可进一步阅读&lt;a href=&quot;https://learnblockchain.cn/2017/11/04/bitcoin-pow/&quot;&gt;工作量证明&lt;/a&gt;。&lt;br/&gt;通过工作量证明就增加了发送信息的成本，降低节点发送消息速率，这样就以保证在一个时间只有一个节点(或是很少)在进行广播，同时在广播时会附上自己的签名。&lt;br/&gt;这个过程就像一位将军A在向其他的将军（B、C、D...）发起一个进攻提议一样，将军B、C、D...看到将军A签过名的进攻提议书，如果是诚实的将军就会立刻同意进攻提议，而不会发起自己新的进攻提议。&lt;/p&gt;
&lt;p&gt;以上就是比特币网络中是单个区块（账本）达成共识的方法（取得一致性）。&lt;/p&gt;
&lt;p&gt;理解了单个区块取得一致性的方法，那么整个区块链（总账本）如果达成一致也好理解。&lt;br/&gt;我们稍微把将军问题改一下：假设攻下一个城堡需要多次的进攻，每次进攻的提议必须基于之前最多次数的胜利进攻下提出的（只有这样敌方已有损失最大，我方进攻胜利的可能性就更大），这样约定之后，将军A在收到进攻提议时，就会检查一下这个提议是不是基于最多的胜利提出的，如果不是（基于最多的胜利）将军A就不会同意这样的提议，如果是的，将军A就会把这次提议记下来。&lt;/p&gt;
&lt;p&gt;这就是比特币网络&lt;a href=&quot;https://xiaozhuanlan.com/topic/0298513746&quot;&gt;最长链选择&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;经济学分析&quot;&gt;经济学分析&lt;/h2&gt;
&lt;p&gt;工作量证明其实相当于提高了做叛徒（发布虚假区块）的成本，在工作量证明下，只有第一个完成证明的节点才能广播区块，竞争难度非常大，需要很高的算力，如果不成功其算力就白白的耗费了（算力是需要成本的），如果有这样的算力作为诚实的节点，同样也可以获得很大的收益（这就是矿工所作的工作），这也实际就不会有做叛徒的动机，整个系统也因此而更稳定。&lt;/p&gt;
&lt;p&gt;很多人批评工作量证明造成巨大的电力浪费，促使人们去探索新的解决一致性（共识）问题的机制：权益证明机制（POS: Proof of Stake）是一个代表。在拜占庭将军问题的角度来看，它同样提高了做叛徒的成本，因为账户需要首先持有大量余额才能有更多的几率广播区块，POS不是本文重点，以后在讲。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;共识算法的核心就是解决拜占庭将军问题（分布式网络一致性问题）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;扩展阅读&quot;&gt;扩展阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://lamport.azurewebsites.net/pubs/byz.pdf&quot;&gt;The Byzantine Generals Problem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learnblockchain.cn/&quot;&gt;深入浅出区块链&lt;/a&gt; - 系统学习区块链，打造最好的区块链技术博客。&lt;br/&gt;我的&lt;strong&gt;&lt;a href=&quot;https://t.xiaomiquan.com/RfAu7uj&quot;&gt;知识星球&lt;/a&gt;&lt;/strong&gt;为各位解答区块链技术问题，欢迎加入讨论。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 03:46:00 +0000</pubDate>
<dc:creator>Tiny熊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tinyxiong/p/8425901.html</dc:identifier>
</item>
<item>
<title>VLAN 模式下的 OpenStack 管理 vSphere 集群方案 - SammyLiu</title>
<link>http://www.cnblogs.com/sammyliu/p/8422529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sammyliu/p/8422529.html</guid>
<description>&lt;p&gt;&lt;span&gt;本文不合适转载，只用于自我学习。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;关于为什么要用OpenStack 管理 vSphere 集群，原因可以有很多，特别是一些传统企业，VMware 的使用还是很普遍的，用 OpenStack 纳管至少会带来管理上的便捷性。&lt;/p&gt;
&lt;h2&gt;1. 部署架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180207112412873-640997746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;节点&lt;/td&gt;
&lt;td&gt;网卡数&lt;/td&gt;
&lt;td&gt;网卡用途&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;KVM宿主机&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;10G：存储网络&lt;/p&gt;
&lt;p&gt;10G：SDN网络&lt;/p&gt;
&lt;p&gt;1G：管理网络&lt;/p&gt;
&lt;p&gt;1G: IPMI网络&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ESXi 宿主机&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;HBA：存储网络&lt;/p&gt;
&lt;p&gt;10G：SDN网络&lt;/p&gt;
&lt;p&gt;10G：vmKernel 网络&lt;/p&gt;
&lt;p&gt;1G：管理网络&lt;/p&gt;
&lt;p&gt;1G: IPMI网络&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;vDS_tenant 其实更像一个 vSwitch，数据层面只处理本宿主机上的流量，再加上集群范围内的统一管理&lt;/li&gt;
&lt;li&gt;vDS_SDN 需要跨宿主机通信，因此需要绑定物理网卡&lt;/li&gt;
&lt;li&gt;vmKernel 网络也需要支持跨宿主机通信，因此也需要绑定物理网卡&lt;/li&gt;
&lt;li&gt;另外还需要考虑物理网卡高可用，因此还需要添加更多的网卡。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.组件&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206170417951-1272532854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2.1 cinder volume 的 vcdriver&lt;/h3&gt;
&lt;p&gt;使用：  volume_driver=cinder.volume.drivers.vmware.vmdk.VMwareVcVmdkDriver&lt;/p&gt;
&lt;p&gt;过程：cinder-volume 从MQ 接收到请求后，驱动 vcdriver 连接 vCenter 调用其 API 执行操作。&lt;/p&gt;
&lt;p&gt;功能：支持的功能包括：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Create, delete, attach, and detach volumes.&lt;/li&gt;
&lt;li&gt;Create, list, and delete volume snapshots.&lt;/li&gt;
&lt;li&gt;Create a volume from a snapshot.&lt;/li&gt;
&lt;li&gt;Copy an image to a volume.&lt;/li&gt;
&lt;li&gt;Copy a volume to an image.&lt;/li&gt;
&lt;li&gt;Clone a volume.&lt;/li&gt;
&lt;li&gt;Backup a volume.&lt;/li&gt;
&lt;li&gt;Restore backup to new or existing volume.&lt;/li&gt;
&lt;li&gt;Change the type of a volume.&lt;/li&gt;
&lt;li&gt;Extend a volume&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2.2 nova-compute 的 vcdriver&lt;/h3&gt;
&lt;p&gt;我们使用 compute_driver = vmwareapi.ovsvapp_vc_driver.OVSvAppVCDriver，其配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[vmware]&lt;/span&gt;&lt;span&gt;
host_ip&lt;/span&gt;=&amp;lt;vCenter 的IP地址&amp;gt;&lt;span&gt;
host_username&lt;/span&gt;=&amp;lt;vCenter admin username&amp;gt;&lt;span&gt;
host_password&lt;/span&gt;=&amp;lt;vCenter admin password&amp;gt;&lt;span&gt;
cluster_name&lt;/span&gt;=&amp;lt;vSphere Cluster name&amp;gt;&lt;span&gt;
datastore_regex&lt;/span&gt;=compute*&lt;span&gt;
wsdl_location&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;host_ip&amp;gt;/sdk/vimService.wsdl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码在 &lt;a href=&quot;https://github.com/openstack/networking-vsphere/blob/master/networking_vsphere/nova/virt/vmwareapi/ovsvapp_vc_driver.py&quot; target=&quot;_blank&quot;&gt;https://github.com/openstack/networking-vsphere/blob/master/networking_vsphere/nova/virt/vmwareapi/ovsvapp_vc_driver.py&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;2.3 镜像处理&lt;/h3&gt;
&lt;p&gt;我们没有使用 vsphere 作为 glance 的 backend store，而是把镜像放在 ceph 之中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
glance image-show a88a0000-&lt;span&gt;0000&lt;/span&gt;-42dd-9b5f-&lt;span&gt;ee0fbf313cf1
&lt;/span&gt;+------------------+----------------------------------------------------------------------------------+
| Property         | Value                                                                            |
+------------------+----------------------------------------------------------------------------------+
| checksum         | 0000000000000000000000000                                                 |
| container_format | bare                                                                             |
| created_at       | &lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-19T01:&lt;span&gt;15&lt;/span&gt;:33Z                                                             |
| direct_url       | rbd:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6dc80000-2675-4f31-0000-b818f00d178c/pool-0/a88a0000-0000-42dd-9b5f-  |&lt;/span&gt;
|                  | ee1fbf313cf1/snap                                                                |
| disk_format      | vmdk                                                                             |
| hw_disk_bus      | scsi                                                                             |
| hw_scsi_model    | paraVirtual                                                                      |
| id               | a88a0000-0000-42dd-9b5f-ee1fbf313cf1                                             |
| img_hv_type      | vmware                                                                           |
| min_disk         | &lt;span&gt;0&lt;/span&gt;                                                                                |
| min_ram          | &lt;span&gt;0&lt;/span&gt;                                                                                |
| name             | debian.vmdk                                                                      |
| owner            | 00000000000000000                                                 |
| &lt;span&gt;protected&lt;/span&gt;        | False                                                                            |
| size             | &lt;span&gt;1073741824&lt;/span&gt;                                                                       |
| status           | active                                                                           |
| tags             | []                                                                               |
| updated_at       | &lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-17T06:&lt;span&gt;24&lt;/span&gt;:48Z                                                             |
| virtual_size     | None                                                                             |
| visibility       | &lt;span&gt;private&lt;/span&gt;                                                                          |
| vmware_disktype  | eagerZeroedThick                                                                 |
+------------------+----------------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; nova-compute 首先从分布式存储中下载镜像文件到本地，然后 nova 的 vmware driver 会通过 HTTP 将镜像传送到 vSphere datastore。相关代码可参考&lt;a href=&quot;https://github.com/openstack/nova/blob/master/nova/virt/vmwareapi/vmops.py&quot; target=&quot;_blank&quot;&gt; https://github.com/openstack/nova/blob/master/nova/virt/vmwareapi/vmops.py&lt;/a&gt;。这么做的好处是可以统一KVM和VMware镜像的管理方式，但是会导致新镜像第一次创建虚机时间较长。&lt;/p&gt;
&lt;h2&gt;3. 网络&lt;/h2&gt;
&lt;p&gt;我们采用 OVSvAPP 网络方案，链接在这里&lt;a href=&quot;http://www.cnblogs.com/sammyliu/p/036c51be-a5bd-4eac-b755-07723a30c42d&quot; target=&quot;_blank&quot;&gt; https://wiki.openstack.org/wiki/Neutron/Networking-vSphere&lt;/a&gt;。 我们采用 VLAN 网络模式。&lt;/p&gt;
&lt;h3&gt;3.1 架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206171631951-803710691.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.2 租户网络流向&lt;/h3&gt;
&lt;h4&gt;3.2.1 场景示意图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206171759638-743816298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红线：DVS1 中，OVSvAPP agent 会为每个 network 创建一个全局性 port group，如图中 ESXi 节点1 上的 Port Grp 7。VM1 和 VM2 在同一个 vlan 中，因此两者的通讯直接在 Port Grp 7 内进行。&lt;/p&gt;
&lt;p&gt;紫线：ESXi 2 上，VM2 和 VM3 在两个 vlan 上。网络包从 VM2 出发，首先经过 ESX2 上的 OVSvAPP 虚机，再经过 vDS_SDN 出宿主机，然后经过网络节点做路由交换，再经过 vDS_SDN 返回ESX2 上的 OVSvAPP 虚机，再到达 VM3.&lt;/p&gt;
&lt;p&gt;绿线：ESX1 上的 VM3 和 ESXi2 上的 VM2 在同一个 vlan 上，但是分开在两个宿主机上。两者的通讯需要经过 ESX1 上的 OVSvAPP 虚机，再经过 vDS_SDN 分布式交换机，再达到 ESX2 上的OVSvAPP 虚机，再达到 VM2.&lt;/p&gt;
&lt;p&gt;黄线：ESXi1 上的 VM2 和  ESXi 2 上的 VM1 在不同的 vlan 上，且分在两个宿主机上。两者的通讯需要经过各自宿主机上的 OVSvAPP 虚机以及网络节点。&lt;/p&gt;
&lt;h4&gt;3.2.2 br-int 的流表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#这是从端口5（br-ens192） 也就是dVS_SDN 进来的也就是从宿主机外面发过来的网络包，到有物理的 vlan id。修改 vlan id 后，发到端口1 也就是到 br-sec 去，再到 dVS_tenant
&lt;/span&gt;n_packets=&lt;span&gt;110820815&lt;/span&gt;, n_bytes=&lt;span&gt;7396114366&lt;/span&gt;, idle_age=&lt;span&gt;0&lt;/span&gt;, hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;dl_vlan&lt;/span&gt;=&lt;span&gt;192&lt;/span&gt; actions=&lt;span&gt;mod_vlan_vid&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;,output:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;#把从端口1 也就是 br-sec 进来的包也就是虚机发出的包发到端口5 也就是 br-ens192也就是物理网卡
&lt;/span&gt;n_packets=&lt;span&gt;16326229471&lt;/span&gt;, n_bytes=&lt;span&gt;26270964185221&lt;/span&gt;, idle_age=&lt;span&gt;0&lt;/span&gt;, hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;1&lt;/span&gt;,dl_vlan=&lt;span&gt;2&lt;/span&gt; actions=output:&lt;span&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其主要职责是把物理 vlan id （dl_vlan）修改为内部的 vlan id，然后再发到合适的端口。&lt;/p&gt;
&lt;h4&gt;3.2.3 br-ens192 的流表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;10&lt;/span&gt;,rarp,in_port=&lt;span&gt;2&lt;/span&gt; actions=&lt;span&gt;NORMAL
&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;2&lt;/span&gt;,dl_vlan=&lt;span&gt;3&lt;/span&gt; actions=mod_vlan_vid:&lt;span&gt;192&lt;/span&gt;,output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;2&lt;/span&gt;,dl_vlan=&lt;span&gt;2&lt;/span&gt; actions=mod_vlan_vid:&lt;span&gt;160&lt;/span&gt;,output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;2&lt;/span&gt;,dl_vlan=&lt;span&gt;5&lt;/span&gt; actions=mod_vlan_vid:&lt;span&gt;224&lt;/span&gt;,output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;2&lt;/span&gt;,dl_vlan=&lt;span&gt;1&lt;/span&gt; actions=mod_vlan_vid:&lt;span&gt;208&lt;/span&gt;,output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;4&lt;/span&gt;,in_port=&lt;span&gt;2&lt;/span&gt;,dl_vlan=&lt;span&gt;6&lt;/span&gt; actions=mod_vlan_vid:&lt;span&gt;176&lt;/span&gt;,output:&lt;span&gt;1&lt;br/&gt;priority=0 actions=NORMAL&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它负责把内部 vlan id 转换成物理 vlan id 再发到端口1 也就是 SDN 网卡 ens192. 而从物理网卡 ens192 进来的则直接走到 br-int。&lt;/p&gt;
&lt;h4&gt;3.2.4 br-sec 的流表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
dst=&lt;span&gt;42002&lt;/span&gt; actions=fin_timeout(idle_timeout=&lt;span&gt;1&lt;/span&gt;),output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;0&lt;/span&gt;, priority=&lt;span&gt;20&lt;/span&gt;,tcp,vlan_tci=&lt;span&gt;0x0002&lt;/span&gt;/&lt;span&gt;0x0fff&lt;/span&gt;,nw_src=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;160.191&lt;/span&gt;,nw_dst=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;16.187&lt;/span&gt;,tp_src=&lt;span&gt;50706&lt;/span&gt;,tp_dst=&lt;span&gt;8086&lt;/span&gt; actions=fin_timeout(idle_timeout=&lt;span&gt;1&lt;/span&gt;),output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;0&lt;/span&gt;, priority=&lt;span&gt;20&lt;/span&gt;,tcp,vlan_tci=&lt;span&gt;0x0002&lt;/span&gt;/&lt;span&gt;0x0fff&lt;/span&gt;,nw_src=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;160.191&lt;/span&gt;,nw_dst=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;16.187&lt;/span&gt;,tp_src=&lt;span&gt;50716&lt;/span&gt;,tp_dst=&lt;span&gt;8086&lt;/span&gt; actions=fin_timeout(idle_timeout=&lt;span&gt;1&lt;/span&gt;),output:&lt;span&gt;1&lt;/span&gt;hard_age=&lt;span&gt;0&lt;/span&gt;, priority=&lt;span&gt;20&lt;/span&gt;,tcp,vlan_tci=&lt;span&gt;0x0002&lt;/span&gt;/&lt;span&gt;0x0fff&lt;/span&gt;,nw_src=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;160.187&lt;/span&gt;,nw_dst=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;16.191&lt;/span&gt;,tp_src=&lt;span&gt;8086&lt;/span&gt;,tp_dst=&lt;span&gt;50706&lt;/span&gt; actions=fin_timeout(idle_timeout=&lt;span&gt;1&lt;/span&gt;),output:&lt;span&gt;2&lt;/span&gt;hard_age=&lt;span&gt;0&lt;/span&gt;, priority=&lt;span&gt;20&lt;/span&gt;,tcp,vlan_tci=&lt;span&gt;0x0002&lt;/span&gt;/&lt;span&gt;0x0fff&lt;/span&gt;,nw_src=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;160.187&lt;/span&gt;,nw_dst=&lt;span&gt;10.70&lt;/span&gt;.&lt;span&gt;16.191&lt;/span&gt;,tp_src=&lt;span&gt;8086&lt;/span&gt;,tp_dst=&lt;span&gt;50716&lt;/span&gt; actions=fin_timeout(idle_timeout=&lt;span&gt;1&lt;/span&gt;),output:&lt;span&gt;2&lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;0&lt;/span&gt; actions=&lt;span&gt;drop
 &lt;/span&gt;hard_age=&lt;span&gt;65534&lt;/span&gt;, priority=&lt;span&gt;0&lt;/span&gt; actions=drop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的主要职责是作为安全组和防火墙。Neutron ovs agent 负责将安全组规则转换为OVS 流表，对进出虚机的网络包进行过滤。&lt;/p&gt;
&lt;h4&gt;3.2.5 DRS 支持&lt;/h4&gt;
&lt;p&gt;VMware DRS 可以动态地将虚机在 ESX 节点之间迁移。因此，为了支持 DRS，在每个 OVSvAPP 虚机之内，流表都是一样的。这样，不管虚机迁移到哪里，其网络都不会收到影响。当然，这也会造成流表过大。这会导致 CPU 占用增加，以及网络延迟加大。&lt;/p&gt;
&lt;p&gt;下图比较了不同数量级流表下的 OVSvAPP 虚机的CPU占用情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206182208826-55642703.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.3 VLAN 模式下虚机网卡的处理过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206171931748-1339953995.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里面能看到运行在 OVSvAPP 虚机中的 neutron agent 驱动 vSphere 根据 port 的 vlan id 创建 Port Group 过程。在创建好以后，Nova Compute Proxy 再把port 绑定到虚机，同时创建各种bridge（br-int，br-sec，br-ex）的流表。为了实现这逻辑，社区提供了 nova 的 OVSvAppVCDriver 驱动。&lt;/p&gt;
&lt;h3&gt;3.4 网络性能&lt;/h3&gt;
&lt;h4&gt;3.4.1 官方建议网络配置&lt;/h4&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 10&quot;&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;div class=&quot;layoutArea&quot;&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;DVS 的 Uplink 网卡以及 Trunk 口的 MTU 设置为 9000&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;OVSvAPP 虚机里面的 br-int, br-sec 和 br-ex 的 MTU 设置为 8900&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;虚机的 MTU 设置为 8900&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ESX 的物理 uplink 网卡的MTU 设置为 9000&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;3.4.2 OVSvAPP 方案对虚机的吞吐性能影响较小&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206172815357-1672974609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;3.4.3 但是对延迟影响还是蛮严重的，毕竟网络路径大大延长了。&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180206172912123-1268311143.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;h3&gt;3.5 VMware 虚机和KVM 虚机通讯&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/697113/201802/697113-20180207112309795-1318888880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4. 一些局限&lt;/h2&gt;
&lt;p&gt;OVSvAPP 方案是一个比较不错的方案，包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持neutron，支持VLAN 和 VXLAN&lt;/li&gt;
&lt;li&gt;支持安全组&lt;/li&gt;
&lt;li&gt;支持 DRS&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;但是也存在一些局限，包括但不限于：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;增加了单点故障风险，比如 OVSvAPP 虚机自身的单点故障，以及 Proxy VM 的单点故障&lt;/li&gt;
&lt;li&gt;网络路径太长，造成网络延迟大大增加&lt;/li&gt;
&lt;li&gt;OVSvAPP 内的流表数目会随着集群规模的增加而成倍增加。一方面这会限制集群规模，也会进一步增加网络延迟以及资源消耗。&lt;/li&gt;
&lt;li&gt;同一个ESX宿主机上的同一个网络之间的虚机之间没有安全组，因为没有经过 OVSvAPP 虚机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 03:44:00 +0000</pubDate>
<dc:creator>SammyLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sammyliu/p/8422529.html</dc:identifier>
</item>
<item>
<title>6.Ray-消息订阅器编写 - 几维</title>
<link>http://www.cnblogs.com/CharlesZHENG/p/8425856.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CharlesZHENG/p/8425856.html</guid>
<description>&lt;div class=&quot;markdown-here-wrapper&quot; data-md-url=&quot;https://i.cnblogs.com/EditPosts.aspx?opt=1&quot; readability=&quot;65&quot;&gt;
&lt;h5 id=&quot;-&quot;&gt;消息订阅器：&lt;/h5&gt;
&lt;p&gt;Ray是基于Event Sourcing设计的ES/Actor框架，消息发布后需要订阅处理，订阅器主要有以下两类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CoreHandler消息订阅器=RabbitSub+SubHandler&lt;/li&gt;
&lt;li&gt;ToReadHandler消息订阅器=RabbitSub+SQLToReadHandler（ToReadHandler的子类）
&lt;h5 id=&quot;rabbitsub-&quot;&gt;RabbitSub特性&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;RabbitSub特性是RabbitMQ消息队列订阅器。&lt;/p&gt;
&lt;p&gt;RabbitSub特性有两个构造函数，常用的是这个：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public RabbitSubAttribute(string group, string exchange, string queue, int queueCount = 1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;group：通常用于分类。示例中，X-CoreHandler的group是Core，X-ToReadHandler是Read。&lt;/li&gt;
&lt;li&gt;exchange：RabbitMQ中的exchange名称。&lt;/li&gt;
&lt;li&gt;queue：RabbitMQ中的queue名称。&lt;/li&gt;
&lt;li&gt;queueCount：消息队列数。用于消息的负载均衡。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[RabbitSub(&quot;Core&quot;, &quot;Account&quot;, &quot;account&quot;)]
public sealed class AccountCoreHandler : SubHandler&amp;lt;string, MessageInfo&amp;gt;
{
    ……
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;RabbitSub可以单独使用，用于订阅消息。&lt;/p&gt;
&lt;hr/&gt;&lt;h5 id=&quot;corehandler-&quot;&gt;CoreHandler消息订阅器&lt;/h5&gt;
&lt;p&gt;Ray中的ESActor通过RaiseEvent方法发布事件，传递消息。Ray默认使用RabbitMQ传递消息。ESActor发起事件后，CoreHandler订阅事件，以处理事件。&lt;/p&gt;
&lt;p&gt;实现方式是：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li&gt;继承SubHandler。&lt;/li&gt;
&lt;li&gt;添加RabbitSub特性。 exchange名称、queue名称与ESGrain上RabbitPub特性的标识一致。&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;添加构造函数（必须）。
&lt;pre&gt;
&lt;code&gt;public AccountCoreHandler(IServiceProvider svProvider) : base(svProvider)
{
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;事件被订阅后会流转到Tell方法中,data是要处理的事件。
&lt;pre&gt;
&lt;code&gt;public override Task Tell(byte[] bytes, IActorOwnMessage&amp;lt;string&amp;gt; data, MessageInfo msg)
{
   switch (data)
   {
       case AmountTransferEvent value: return Task.WhenAll(task, AmountAddEventHandler(value));
       default: return task;
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;toreadhandler-&quot;&gt;ToReadHandler消息订阅器&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;SQLToReadHandler&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;ESActor发起事件后，X-ToReadHandler订阅事件，以处理事件。X-ToReadHandler继承自X-SQLToReadHandler，X-SQLToReadHandler继承自ToReadHandler。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/C2EC04206F634371BF07D4F6525C3275?method=download&amp;amp;shareKey=d1e81adfe348d9a8daac5379147a064b&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/0F01A997C3464347874107B40D9E84E3?method=download&amp;amp;shareKey=697d7986634d6520534dd2c6122ff2d4&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;X-SQLToReadHandler需要使用者继承PartSubHandler，根据使用的关系型数据库自己实现。Ray默认提供了PostgreSQL的PSQLToReadHandler。如果使用的是MySQL、SQL Server等其他关系型数据库，请自定义实现。&lt;/p&gt;
&lt;p&gt;X-SQLToReadHandler实现细节：&lt;br/&gt;修改对应关系型数据库的&lt;code&gt;Integrity Constraint Violation（违反完整性约束）&lt;/code&gt;的异常。&lt;br/&gt;可以将实例中PSQLToReadHandler当做X-ToReadHandler模板，修改&lt;code&gt;if (!(t.Exception.InnerException is Npgsql.PostgresException e &amp;amp;&amp;amp; e.SqlState == &quot;23505&quot;))&lt;/code&gt;即可。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;当X-ToReadHandler订阅消息，消息有重放的场景，如果该消息已经得到处理，数据库中已经存在其处理后的结果，这是可能会报&lt;code&gt;Integrity Constraint Violation（违反完整性约束）&lt;/code&gt;异常，默认不做处理，其他异常将其抛出，这是这段代码的作用。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;示例模板：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class PSQLToReadHandler&amp;lt;K&amp;gt; : PartSubHandler&amp;lt;K, MessageInfo&amp;gt;
{
    public PSQLToReadHandler(IServiceProvider svProvider) : base(svProvider)
    { }
    public override Task Notice(byte[] data)
    {
        return base.Notice(data).ContinueWith(t =&amp;gt;
        {
            if (t.Exception != null)
            {
                //根据使用数据库，修改这个if判断
                if (!(t.Exception.InnerException is Npgsql.PostgresException e &amp;amp;&amp;amp; e.SqlState == &quot;23505&quot;))
                {
                    throw t.Exception;
                }
            }
        });
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  2. X-ToReadHandler&lt;br/&gt;X-ToReadHandler订阅器主要用于订阅感兴趣的消息，将数据写入到数据库中。&lt;/p&gt;
&lt;p&gt;实现方式是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[RabbitSub(&quot;Read&quot;, &quot;Account&quot;, &quot;account&quot;)]
public sealed class AccountToReadHandler : PSQLToReadHandler&amp;lt;string&amp;gt;
{
    public AccountToReadHandler(IServiceProvider svProvider) : base(svProvider)
    {
        Register&amp;lt;AmountAddEvent&amp;gt;();
        Register&amp;lt;AmountTransferEvent&amp;gt;();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;x-toreadhandler-corehandler-&quot;&gt;X-ToReadHandler消息订阅器与CoreHandler消息订阅器差异&lt;/h5&gt;
&lt;p&gt;X-ToReadHandler消息订阅器使用时，需要在构造函数中注册关心的事件，而X-CoreHandler中不需要，原因是事件在处理中需要反序列化，X-CoreHandler会对RabbitSub参数指定订阅的所有的消息反序列化，X-ToReadHandler在此基础上做了进一步的控制，在订阅的消息中只对Register的事件处理。这样做的原因：1.反序列化会消耗一定的性能，进一步控制有助于提高性能；2.Ray提供两种实现方式，为开发者扩展自定义源码提供借鉴。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CoreHandler消息订阅器=RabbitSub+SubHandler&lt;/li&gt;
&lt;li&gt;ToReadHandler消息订阅器=RabbitSub+SQLToReadHandler（ToReadHandler的子类）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 07 Feb 2018 03:36:00 +0000</pubDate>
<dc:creator>几维</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CharlesZHENG/p/8425856.html</dc:identifier>
</item>
</channel>
</rss>