<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>通俗易懂的分析如何用Python实现一只小爬虫，爬取拉勾网的职位信息 - nnngu</title>
<link>http://www.cnblogs.com/nnngu/p/8408558.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnngu/p/8408558.html</guid>
<description>&lt;p&gt;源代码：&lt;a href=&quot;https://github.com/nnngu/LagouSpider&quot; class=&quot;uri&quot;&gt;https://github.com/nnngu/LagouSpider&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;效果预览&quot;&gt;效果预览&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517607553153.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;思路&lt;/h2&gt;
&lt;p&gt;1、首先我们打开拉勾网，并搜索“java”，显示出来的职位信息就是我们的目标。&lt;/p&gt;
&lt;p&gt;2、接下来我们需要确定，怎样将信息提取出来。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;查看网页源代码，这时候发现，网页源代码里面找不到职位相关信息，这证明拉勾网关于职位的信息是异步加载的，这也是一种很常用的技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;异步加载的信息，我们需要借助 chrome 浏览器的开发者工具进行分析，打开开发者工具的方法如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517604536071.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;点击Nerwork进入网络分析界面，这时候是一片空白，刷新一下界面就可以看到一系列的网络请求了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517604631241.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;前面我们说到，拉勾网关于职位的信息是异步加载的，那么在这一系列的网络请求中，必定有某个请求发送给服务器，响应回来的是职位信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;正常情况下，我们可以忽略css，图片等类型的请求，关注点放在XHR这种类型请求上，如图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517605038140.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一共4个XHR类型的请求，我们逐个打开对比，分别点击Preview就能看到它们响应的内容。&lt;/p&gt;
&lt;p&gt;发现第一个请求就是我们要找的。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517605245280.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Headers，查看一下请求参数。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517605796162.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此，我们可以确定city参数就是城市，pn参数就是页数，kd参数就是搜索关键字。&lt;/p&gt;
&lt;p&gt;接下来开始写代码了。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;代码分成四个部分，便于后期维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、基本 https 请求&lt;code&gt;https.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分对 requests 包进行了一些封装，部分代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; src.setting &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; IP, UA
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; requests, random
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; logging


&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Http:
    &lt;span class=&quot;co&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    http请求相关的操作&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    '''&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; get(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, url, headers&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, cookies&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, proxy&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, timeOut&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, timeOutRetry&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;):
        &lt;span class=&quot;co&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        获取网页源码&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        url: 网页链接&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        headers: headers&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        cookies: cookies&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        proxy: 代理&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        timeOut: 请求超时时间&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        timeOutRetry: 超时重试次数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        return: 源码&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        '''&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; url:
            logging.error(&lt;span class=&quot;st&quot;&gt;'GetError url not exit'&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'None'&lt;/span&gt;
            
        &lt;span class=&quot;co&quot;&gt;# 这里只展示了一部分代码&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;# 完整代码已上传到Github&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里只展示了一部分代码，完整代码已上传到&lt;a href=&quot;https://github.com/nnngu/LagouSpider&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、代码主逻辑部分&lt;code&gt;main.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分的程序逻辑，如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;获取职位信息&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; getInfo(url, para):
    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    获取信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    generalHttp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Http()
    htmlCode &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; generalHttp.post(url, para&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;para, headers&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;headers, cookies&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;cookies)
    generalParse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Parse(htmlCode)
    pageCount &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; generalParse.parsePage()
    info &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;):
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'第&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;页'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; i)
        para[&lt;span class=&quot;st&quot;&gt;'pn'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(i)
        htmlCode &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; generalHttp.post(url, para&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;para, headers&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;headers, cookies&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;cookies)
        generalParse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Parse(htmlCode)
        info &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; info &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; getInfoDetail(generalParse)
        time.sleep(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; info&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;对信息进行储存&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; processInfo(info, para):
    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    信息存储&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    logging.error(&lt;span class=&quot;st&quot;&gt;'Process start'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
        title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'公司名称&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;公司类型&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;融资阶段&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;标签&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;公司规模&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;公司所在地&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;职位类型&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;学历要求&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;福利&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;薪资&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;工作经验&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; codecs.&lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;职位.xls'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; para[&lt;span class=&quot;st&quot;&gt;'city'&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;'w'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
        &lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt;.write(title)
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; info:
            line &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companyName'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companyType'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companyStage'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;
                   &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companyLabel'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companySize'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'companyDistrict'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;
                   &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'positionType'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'positionEducation'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(
                p[&lt;span class=&quot;st&quot;&gt;'positionAdvantage'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;
                   &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'positionSalary'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(p[&lt;span class=&quot;st&quot;&gt;'positionWorkYear'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;
            &lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt;.write(line)
        &lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt;.close()
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; e:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(e)
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、信息解析部分&lt;code&gt;parse.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分针对服务器返回的职位信息的特点，进行解析，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Parse:
    &lt;span class=&quot;co&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    解析网页信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    '''&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, htmlCode):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.htmlCode &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; htmlCode
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.json &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; demjson.decode(htmlCode)
        &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; parseTool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, content):
        &lt;span class=&quot;co&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        清除html标签&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        '''&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;(content) &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; content
        sublist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'&amp;lt;p.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/p.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;b.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/b.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;div.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/div.*?&amp;gt;'&lt;/span&gt;,
                   &lt;span class=&quot;co&quot;&gt;'&amp;lt;/br&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;ul&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/ul&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;li&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/li&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;strong&amp;gt;'&lt;/span&gt;,
                   &lt;span class=&quot;co&quot;&gt;'&amp;lt;/strong&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;table.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;tr.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/tr&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;td.*?&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/td&amp;gt;'&lt;/span&gt;,
                   &lt;span class=&quot;co&quot;&gt;'\r'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;amp;.*?;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;amp;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'#.*?;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;em&amp;gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'&amp;lt;/em&amp;gt;'&lt;/span&gt;]
        &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; substring &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; [re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(string, re.S) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; string &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; sublist]:
                content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.sub(substring, &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;, content).strip()
        &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt;:
            &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Error '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(substring.pattern))
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; content
        
        &lt;span class=&quot;co&quot;&gt;# 这里只展示了一部分代码&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;# 完整代码已上传到Github&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里只展示了一部分代码，完整代码已上传到&lt;a href=&quot;https://github.com/nnngu/LagouSpider&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、配置部分&lt;code&gt;setting.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分加入 cookies 的原因是为了应对拉勾网的反爬，长期使用需要进行改进，进行动态 cookies 获取&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;30&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# headers&lt;/span&gt;
headers &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;st&quot;&gt;'Host'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'www.lagou.com'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Connection'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'keep-alive'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Content-Length'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'23'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Origin'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'https://www.lagou.com'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'X-Anit-Forge-Code'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'User-Agent'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Content-Type'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'application/x-www-form-urlencoded; charset=UTF-8'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Accept'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'application/json, text/javascript, */*; q=0.01'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'X-Requested-With'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'XMLHttpRequest'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'X-Anit-Forge-Token'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'None'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Referer'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'https://www.lagou.com/jobs/list_java?city=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%E&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;5%B9%BF&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%E&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;5%B7&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%9E&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;cl=false&amp;amp;fromSearch=true&amp;amp;labelWords=&amp;amp;suginput='&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Accept-Encoding'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'gzip, deflate, br'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'Accept-Language'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517607653279.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;爬取结束后，在src目录下就可以看到爬虫爬取到的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/3/1517607553153.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此，拉勾网的职位信息抓取就完成了。完整代码已经上传到&lt;a href=&quot;https://github.com/nnngu/LagouSpider&quot;&gt;我的Github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 22:41:00 +0000</pubDate>
<dc:creator>nnngu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnngu/p/8408558.html</dc:identifier>
</item>
<item>
<title>Go基础--goroutine和channel - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/8393091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/8393091.html</guid>
<description>&lt;h2&gt;goroutine&lt;/h2&gt;
&lt;p&gt;在go语言中，每一个并发的执行单元叫做一个goroutine&lt;/p&gt;
&lt;p&gt;这里说到并发，所以先解释一下并发和并行的概念：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并发：逻辑上具备同时处理多个任务的能力&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并行：物理上在同一时刻执行多个并发任务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当一个程序启动时，其主函数即在一个单独的goroutine中运行，一般这个goroutine是主goroutine&lt;/p&gt;
&lt;p&gt;如果想要创建新的goroutine,只需要再执行普通函数或者方法的的前面加上关键字go&lt;/p&gt;
&lt;p&gt;通过下面一个例子演示并发的效果，主goroutine会计算第45个斐波那契函数，在计算的同时会循环打印：-\|/  &lt;/p&gt;
&lt;p&gt;这里需要知道：&lt;span&gt;当主goroutine结束之后，所有的goroutine都会被打断，程序就会退出&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;time&quot;
    &quot;fmt&quot;&lt;span&gt;
)

func spinner(delay time.Duration){
    for {
        for _,r :&lt;/span&gt;= range `-\|/&lt;span&gt;`{
            fmt.Printf(&lt;/span&gt;&quot;\r%c&quot;&lt;span&gt;,r)
            time.Sleep(delay)
        }
    }
}

func fib(x &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;//&lt;span&gt; 斐波那契函数
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; x &amp;lt; 2&lt;span&gt;{
        return x
    }
    return fib(x&lt;/span&gt;-1) + fib(x-2&lt;span&gt;)
}

func main() {
    go spinner(&lt;/span&gt;100*time.Millisecond) //&lt;span&gt;开启一个goroutine
    const n &lt;/span&gt;= 45&lt;span&gt;
    fibN:&lt;/span&gt;=&lt;span&gt; fib(n)
    fmt.Printf(&lt;/span&gt;&quot;\rFib(%d) = %d\n&quot;&lt;span&gt;,n,fibN)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当第一次看到go的并发，感觉真是太好用了！！！！&lt;/p&gt;
&lt;p&gt;所以在网络编程里，服务端都是需要同时可以处理很多个连接，我们看一下下面的服务端和客户端例子&lt;/p&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;net&quot;
    &quot;io&quot;
    &quot;time&quot;
    &quot;log&quot;&lt;span&gt;
)

func handleConn(c net.Conn){
    defer c.Close()
    for{
        _,err :&lt;/span&gt;= io.WriteString(c,time.Now().Format(&quot;15:04:05\r\n&quot;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
            return
        }
        time.Sleep(&lt;/span&gt;1*&lt;span&gt;time.Second)
    }
}

func main() {
    &lt;/span&gt;//&lt;span&gt; 监听本地tcp的8000端口
    listener,err :&lt;/span&gt;= net.Listen(&quot;tcp&quot;,&quot;localhost:8000&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        log.Fatal(err)
    }
    for {
        conn,err :&lt;/span&gt;=&lt;span&gt; listener.Accept()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err!=&lt;span&gt; nil{
            log.Print(err)
            continue
        }
        go handleConn(conn)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;io&quot;
    &quot;log&quot;
    &quot;net&quot;
    &quot;os&quot;&lt;span&gt;
)

func mustCopy(dst io.Writer,src io.Reader){
    &lt;/span&gt;//&lt;span&gt; 从连接中读取内容，并写到标准输出
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; _,err := io.Copy(dst,src);err !=&lt;span&gt;nil{
        log.Fatal(err)
    }

}

func main(){
    conn,err :&lt;/span&gt;= net.Dial(&quot;tcp&quot;,&quot;localhost:8000&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        log.Fatal(err)
    }
    defer conn.Close()
    mustCopy(os.Stdout, conn)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Channel&lt;/h2&gt;
&lt;p&gt;channel是不同的goroutine之间的通信机制。&lt;/p&gt;
&lt;p&gt;一个goroutine通过channel给另外一个goroutine发送信息。&lt;/p&gt;
&lt;p&gt;每个channel 都有一个特殊的类型，也就是channel可以发送的数据的类型&lt;/p&gt;
&lt;p&gt;我们可以通过make创建一个channel如：&lt;/p&gt;
&lt;p&gt;ch := make(chan int)  这就是创建了一个类型为int的channel&lt;/p&gt;
&lt;p&gt;默认我们这样创建的是无缓存的channel,当然我们可以通过第二个参数来设置容量&lt;/p&gt;
&lt;p&gt;ch := make(chan int,10)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：channel是引用类型，channel的零值也是nil&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;两个相同类型的channel可以使用==运算符比较。如果两个channel引用的是相通的对象，那么比较的结&lt;br/&gt;果为真。一个channel也可以和nil进行比较。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;因为channel是在不同的goroutine之间进行通信的，所以channel这里有两种操作:存数据和取数据，而这里两种操作的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;方法都是通过运算符：&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;ch &amp;lt;- x  这里是发送一个值x到channel中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;x = &amp;lt;- ch 这里是从channel获取一个值存到变量x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&amp;lt;-ch 这里是从channel中取出数据，但是不使用结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;close(ch) 用于关闭channel&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;当我们关闭channel后，再次发送就会导致panic异常，但是如果之前发送过数据，我们在关闭channel之后依然可以执行接收操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;如果没有数据的话，会产生一个零值&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;基于channel发送消息有两个重要方面，首先每个消息都有一个值，但是有时候通讯的事件和发送的时刻也同样重要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们更希望强调通讯发送的时刻时，我们将它称为消息事件。有些消息并不携带额外的信息，它仅仅是用做两个goroutine之间的同步，这个时候我们可以用struct{}空结构体作为channel元素的类型&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt; &lt;span&gt;无缓存的channel&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于无缓存的channel的发送和接受操作将导致两个goroutine做一次同步操作，所以无缓存channel有时候也被称为同步channel&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;串联的channel (Pipeline)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;channel也可以用于多个goroutine连接在一起，一个channel的输出作为下一个channel的输入，这种串联的channel就是所谓的pipeline&lt;/p&gt;
&lt;p&gt;通过下面例子理解，第一个goroutine是一个计算器，用于生成0，1，2...形式的整数序列，然后通过channel将该整数序列&lt;/p&gt;
&lt;p&gt;发送给第二个goroutine；第二个goroutine是一个求平方的程序，对收到的每个整数求平方，然后将平方后的结果通过第二个channel发送给第三个goroutine&lt;/p&gt;
&lt;p&gt;第三个goroutine是一个打印程序，打印收到的每个整数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;fmt&quot;&lt;span&gt;
)

func main(){
    naturals :&lt;/span&gt;= make(chan &lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
    squares :&lt;/span&gt;= make(chan &lt;span&gt;int&lt;/span&gt;&lt;span&gt;)

    go func(){
        for x:&lt;/span&gt;=0;;x++&lt;span&gt;{
            naturals &lt;/span&gt;&amp;lt;-&lt;span&gt; x
        }
    }()

    go func(){
        for {
            x :&lt;/span&gt;= &amp;lt;-&lt;span&gt; naturals
            squares &lt;/span&gt;&amp;lt;- x *&lt;span&gt; x
        }
    }()

    for{
        fmt.Println(&lt;/span&gt;&amp;lt;-&lt;span&gt;squares)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果我把第一个生成数的写成一个有范围的循环，这个时候程序其实会报错的&lt;/p&gt;
&lt;p&gt;所以就需要想办法让发送知道没有可以发给channel的数据了，也让接受者知道没有可以接受的数据了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候就需要用到close(chan)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当一个channel被关闭后，再向该channel发送数据就会导致panic异常&lt;/p&gt;
&lt;p&gt;当从一个已经关闭的channel中接受数据，在接收完之前发送的数据后，并不会阻塞，而会立刻返回零值，所以在从channel里接受数据的时候可以多获取一个值如：&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
go func(){&lt;br/&gt;for {&lt;br/&gt;x ,ok := &amp;lt;-naturals&lt;br/&gt;if !ok{&lt;br/&gt;break&lt;br/&gt;}&lt;br/&gt;squares &amp;lt;- x*x&lt;br/&gt;}&lt;br/&gt;close(squares)&lt;br/&gt;}()&lt;p&gt;&lt;span&gt;第二位ok是一个布尔值，true表示成功从channel接受到值，false表示channel已经被关闭并且里面没有值可以接收&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;单方向的channel&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当一个channel座位一个函数的参数时，它一般总是被专门用于只发送或者只接收&lt;/p&gt;
&lt;p&gt;chan &amp;lt;- int ：表示一个只发送int的channel,只能发送不能接收&lt;/p&gt;
&lt;p&gt;&amp;lt; chan int : 表示一个只接受int的channel,只能接收不能发送&lt;/p&gt;

&lt;p&gt;当然在有时候我们需要获取channel内部缓存的容量，可以通过内置的cap函数获取&lt;/p&gt;
&lt;p&gt;而len函数则返回的是channel内实际有效的元素个数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于select的多路复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 这里先说一个拥有的知识点：time.Tick函数&lt;/p&gt;
&lt;p&gt;这个函数返回一个channel,通过下面代码进行理解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;time&quot;
    &quot;fmt&quot;&lt;span&gt;
)

func main() {
    tick :&lt;/span&gt;= time.Tick(1*&lt;span&gt;time.Second)
    for countdown :&lt;/span&gt;=10;countdown&amp;gt;0;countdown--&lt;span&gt;{
        j :&lt;/span&gt;=&amp;lt;-&lt;span&gt; tick
        fmt.Println(j)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序会循环打印一个时间戳&lt;/p&gt;

&lt;p&gt;select 语句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select {
 &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &amp;lt;-&lt;span&gt;ch1:
     &lt;/span&gt;//&lt;span&gt; ...
 &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; x := &amp;lt;-&lt;span&gt;ch2:
     &lt;/span&gt;//&lt;span&gt; ...use x...
 &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ch3 &amp;lt;-&lt;span&gt; y:
     &lt;/span&gt;//&lt;span&gt; ...
 default:
&lt;/span&gt;    // ... &lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;select语句的形式其实和switch语句有点类似，这里每个case代表一个通信操作&lt;/p&gt;
&lt;p&gt;在某个channel上发送或者接收，并且会包含一些语句组成的一个语句块 。&lt;/p&gt;
&lt;p&gt;select中的default来设置当 其它的操作都不能够马上被处理时程序需要执行哪些逻辑&lt;/p&gt;
&lt;p&gt;&lt;span&gt;channel 的零值是nil,  并且对nil的channel 发送或者接收操作都会永远阻塞，在select语句中操作nil的channel永远都不会被select到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这可以让我们用nil来激活或者禁用case，来达成处理其他输出或者输出时间超时和取消的逻辑&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Feb 2018 16:28:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/8393091.html</dc:identifier>
</item>
<item>
<title>【SqlServer系列】浅谈SQL Server事务与锁（上篇） - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/8396986.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/8396986.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一  概述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据库方面，对于非DBA的程序员来说，事务与锁是一大难点，针对该难点，本篇文章试图采用图文的方式来与大家一起探讨。&lt;/p&gt;
&lt;p&gt;“浅谈SQL Server 事务与锁”这个专题共分两篇，上篇主讲事务及事务一致性问题，并简略的提及一下锁的种类和锁的控制级别。&lt;/p&gt;
&lt;p&gt;下篇主讲SQL Server中的锁机制，锁控制级别和死锁的若干问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二   事务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1   何为事务&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 预览众多书籍，对于事务的定义，不同文献不同作者对其虽有细微差别却大致统一，我们将其抽象概括为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
事务：指封装且执行单个或多个操作的单个工作单元，在SqlServer中，其定义表现为显示定义和隐式定义两种方式。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 基于如上的定义，我们可以将事务解剖拆分为如下几个点：&lt;/p&gt;
&lt;p&gt;(1)事务是单个工作单元，这一定义，才使事务具有ACID属性&lt;/p&gt;
&lt;p&gt;(2)事务是封装操作的，如封装基本的CRUD操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;事务&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;Begin&lt;/span&gt; &lt;span&gt;Tran&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; UserInfo
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; UserInfo &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;35&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;UPDATE&lt;/span&gt; UserInfo &lt;span&gt;SET&lt;/span&gt; Age&lt;span&gt;=&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; UserName&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;DELETE&lt;/span&gt; UserInfo &lt;span&gt;WHERE&lt;/span&gt; UserName&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;Commit&lt;/span&gt; &lt;span&gt;Tran&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3)事务在封装操作时，可以封装单个操作，也可以封装多个操作(封装多个操作时，应注意与批处理的区别)&lt;/p&gt;
&lt;p&gt;(4)在SqlServer中，事务的定义分为显示定义和隐式定义两种方式&lt;/p&gt;
&lt;p&gt; 显示定义：以Begin Tran作为开始，其中提交事务为Commit Tran，回滚事务为RollBack Tran，如我们在一个事务中插入两条操作语句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;--&lt;/span&gt;&lt;span&gt;显示定义事务&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;Begin&lt;/span&gt; &lt;span&gt;Tran&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; UserInfo &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan_shanghai&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; UserInfo &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;35&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;Commit&lt;/span&gt; &lt;span&gt;Tran&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 隐式定义：如果不显示定义事务，SQL Server 默认把每个语句当作一个事务来处理(执行完每个语句之后就自动提交事务)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2   事务的ACID属性&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 事务作为单个工作单元，该定义使其具有ACID属性，ACID属性指原子性(Atomicity)、一致性(Consisitency)、隔离性(Isolation)和持久性(Durability)。&lt;/p&gt;
&lt;p&gt;(1)原子性(Atomicity)&lt;/p&gt;
&lt;p&gt;原子性指事务必须是原子工作单元，即对于事务的封装操作，要么全部执行，要么全都不执行。如下情况均会导致事务的撤销或回滚。。。&lt;/p&gt;
&lt;p&gt;a.事务提交之前，系统发生故障或重新启动，SQL Server将会撤销在事务中进行的所有操作；&lt;/p&gt;
&lt;p&gt;b.事务处理中遇到错误，SQL Server通常会自动回滚事务，但也有少数例外；&lt;/p&gt;
&lt;p&gt;c.一些不太严重的错误不会引发事务的自动回滚，如主键冲突，锁超时等；&lt;/p&gt;
&lt;p&gt;d.可以使用错误处理代码来捕获一些错误，并采取相应的操作，如把错误记录在日志中，再回滚事务等；&lt;/p&gt;
&lt;p&gt;(2)一致性(Consisitency)&lt;/p&gt;
&lt;p&gt;一致性主要指数据一致性，即主要对象是数据。从宏观上来说，指某一段时间区间，数据要保持一致性状态，从微观上来说，某个时间点数据要保持一致性状态，我们举个例子，&lt;/p&gt;
&lt;p&gt;假若有两个事务A和B对同一张表进行操作，A向表中写数据，B向数据表中读取数据，可以猜测，B读取的数据大致有三种粗粒度可能：&lt;/p&gt;
&lt;p&gt;第一种可能：A还没向数据表中写入数据的状态;&lt;/p&gt;
&lt;p&gt;第二种可能：A已向数据表中写入部分数据，但还未写完的状态；&lt;/p&gt;
&lt;p&gt;第三种可能：A已向数据表中写完数据；&lt;/p&gt;
&lt;p&gt;如此，造成了事务的不一致性。&lt;/p&gt;
&lt;p&gt;关于事务一致性，可能会发生 丢失更新，脏读，不可重复读和幻读等问题，下文会详细论述这些事务一致性问题。&lt;/p&gt;
&lt;p&gt;(3)隔离性(Isolation)&lt;/p&gt;
&lt;p&gt;隔离性指当两个及其以上事务对同一边界资源进行操作时，要控制好每个事务的边界，控制好数据访问机制，确保事务只能访问处于期望的一致性级别下的数据。&lt;/p&gt;
&lt;p&gt;在SQL Server中，一般采用锁机制来控制，下文中，我们会详细论述。&lt;/p&gt;
&lt;p&gt;(4)持久性(Durability)&lt;/p&gt;
&lt;p&gt; 我们对数据表进行操作时，一般会按照先后顺序执行如下两步：&lt;/p&gt;
&lt;p&gt;第一步：将对数据表操作写入到磁盘上数据库的事务日志中(持久还到磁盘事务日志中)；&lt;/p&gt;
&lt;p&gt;第二步：完成第一步后，再将对数据表操作写入到磁盘上数据库的数据分区中(持久化到磁盘上数据库分区中)；&lt;/p&gt;
&lt;p&gt;关于如上两步，我们来想想可能发生的问题：&lt;/p&gt;
&lt;p&gt;问题1：完成如上第一步之前，系统发生故障(如系统异常，系统重启)，数据库引擎会怎么做？&lt;/p&gt;
&lt;p&gt; 由于未完成第一步，提交指令还未记录到磁盘的事务日志中，此时事务并未持久化，系统发生故障后，SQL Server&lt;/p&gt;
&lt;p&gt;会检查每个数据库的事务日志，进行恢复处理(恢复处理一般分为重做阶段和撤销阶段)，此时的恢复处理为重做阶段，即提交指令还未记录到磁盘的事务日志中，&lt;/p&gt;
&lt;p&gt;数据库引擎会撤销这些事务所做的所有修改，这个过程也成为回滚。&lt;/p&gt;
&lt;p&gt;问题2：完成如上第一步但还未完成第二步，系统发生故障(如系统异常，系统重启)，数据库引擎会怎么做？&lt;/p&gt;
&lt;p&gt; 完成第一步后，提交指令已记录到磁盘的事务日志中，无论数据操作是否被写入到磁盘的数据分区，此时事务已持久化，系统发生故障后，SQL Server&lt;/p&gt;
&lt;p&gt;会检查每个数据库的事务日志，进行恢复处理(恢复处理一般分为重做阶段和撤销阶段)，此时的恢复处理为重做阶段，即由于数据修改还没有运用到数据分区的事务，&lt;/p&gt;
&lt;p&gt;数据库引擎会重做这些事务所做的所有修改，这个过程也成为前滚。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三   事务的隔离级别和隔离级别产生的一致性问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1   未提交读(READ UNCOMMITTED)&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 未提交读(READ UNCOMMITTED)指读取未提交的数据，此时产生的数据不一致性，我们称为数据脏读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1   未提交读为什么会产生数据脏读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;未提交读是最低级的隔离级别，在这个隔离级别运行的事务，读操作是不需要请求共享锁的，如果读操作不需要共享锁，就不会产生与持有排它锁的事务操作发生冲突，&lt;/p&gt;
&lt;p&gt;那么也就是说，在这个事务隔离级别，读操作可以与写操作同时进行，互不排斥，读操作可以读取写操作未提交的修改，从而造成数据的不一致性，这种情况，我们称&lt;/p&gt;
&lt;p&gt;数据脏读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2   图解数据脏读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202213014890-21800851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3   SQL演示数据脏读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202153022953-1141861279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2   已提交读(READ COMMITTED)&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 已提交读(READ COMMITTED)指只能读取已提交事务的数据，是防止数据脏读的最低隔离级别，也是SQL Server默认的隔离级别，它要求读操作必须获得共享锁后&lt;/p&gt;
&lt;p&gt;才能进行操作，防止读取未提交的修改，虽然已提交读能防止产生数据脏读，但却不可避免不可重复读数据一致性问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1   为什么已提交读能够防止数据脏读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已提交读只允许读取事务已提交的数据，它要求读操作必须获得共享锁才能尽心操作，而读操作的共享锁与写操作的排他锁是互斥的，两者互斥会发生冲突，所以读操作&lt;/p&gt;
&lt;p&gt;在读取数据时，必须等待写操作完成后，才能获取共享锁，然后才能读取数据，此时读取的数据是已经提交结束的数据，因此就防止了数据脏读的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2   SQL演示已提交读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202165427796-2087644322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3   为什么已提交读会产生不可重复读问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道，虽然已提交读能获得共享锁，然而，读操作一完成，就会立即释放资源上的共享锁(该操作不会在事务持续期间一致保留共享锁)，如此就会产生一个问题，&lt;/p&gt;
&lt;p&gt;即在一个事务处理内部对相同数据资源读操作之间，没有共享锁会锁定该资源，导致其他事务可以在两个读操作之间更改数据资源，读操作因而可能每次得到不同的&lt;/p&gt;
&lt;p&gt;取值，这种现象称为数据的不可重复读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4   图解不可重复读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202172910484-1649701037.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3  可重复读(REPEATABLE READ)&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 为了防止不可重复读现象，SQL Sever中采用隔离级别升级的方式，即将已提交读升级为可重复读。在可重复读隔离级别下，事务中的读操作不仅能获得共享锁，&lt;/p&gt;
&lt;p&gt;而且获得的共享锁一直保持到事务完成为止， 在该事务完成之前，其他事务不可能获得排他锁来修改这一数据，如此，便实现了可重复读，防止了不可重复读造&lt;/p&gt;
&lt;p&gt;成的数据不一致性。可重复读不仅能解决不可重复读数据不一致性问题，还能解决丢失更新问题。然而，可重复读也存在问题，那就是死锁和幻读等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 SQL演示可重复读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202205848468-1475380495.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2  何为丢失更新？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在比可重复读低的隔离级别中，两个事务在读取数据之后就不再持有该资源的任何锁，此时，两个事务都能更新这个值，&lt;/p&gt;
&lt;p&gt;从而发生最后事务更新的值覆盖前面事务更新的值，从而造成数据的丢失，这称为丢失更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3  图解丢失更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202213847375-685247408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4   可序列化(SERIALIZABLE)&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;4.1   何为幻读？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道，在可重复读隔离级别下，读事务持有的共享锁一直保持到该事务完成为止，但是事务只锁定查询第一次运行时找到的那些数据资源(如，行)，&lt;/p&gt;
&lt;p&gt;而不会锁定查询结果范围以外的其他行(其实，控制事务时，有数据库架构级别，表，页和行等)。因此，在同一事务中进行第二次读取之前，若其他事&lt;/p&gt;
&lt;p&gt;务插入新行，并且新行能满足读操作的查询过滤条件，那么这些新行也会出现在第二次读操作返回的结果中，这些新行称为幻影子，也叫做幻读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2  图解幻读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202220620046-243190103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 4.3  如何解决幻读？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQL SERVER中，更高级别的可序列化(SERIALIZABLE)能够解决该问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.4  何为可序列化(SERIALIZABLE)？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大多数时候，可序列化(SERIALIZABLE)隔离级别的处理方式和可重复都得处理方式是类似的，只不过，可序列化(SERIALIZABLE)隔离级别&lt;/p&gt;
&lt;p&gt;增加了一个新的内容——逻辑上，这个隔离级别会让读操作锁定满足查询搜索条件的键的整范围，这就意味着读操作不仅锁定了满足查询搜索&lt;/p&gt;
&lt;p&gt;条件的现有的那些行，还锁定了未来可能满足查询搜索条件的行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5   SNAPSHOT&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 略。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四    事务的隔离级别总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下表总结了每种隔离级别与逻辑一致性问题，检测冲突和行版本控制之间关系&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202224210796-505116746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;五   锁定&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1  两种并发控制模型&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;关于并发控制模型，主要有两种，即悲观控制模型和乐观控制模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202225236375-1521154151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(1)悲观控制模型： 该模型假设总是存在多个事务对同一资源操作(读/写)，即假定冲突总是会发生。在SQL Server中，采用事务&lt;/p&gt;
&lt;p&gt;隔离级别来控制(也可叫做采用锁来控制)。一般在事务发生冲突前进行控制，也叫事前控制；&lt;/p&gt;
&lt;p&gt;(2)乐观控制模型：该模型与悲观控制模型是对立的，即该模型总是假设系统中并不存在或较少存在多个事务对同一资源操作(读/写)&lt;/p&gt;
&lt;p&gt;，即假定冲突是不会发生的或很少发生的。在SQL Server中，采用行版本控制来处理。一般在事务发生冲突后进行控制，也叫事后&lt;/p&gt;
&lt;p&gt;控制；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 何为锁定及锁定的种类&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;2.1  何为锁定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;锁定，指在并发操作时，确保数据的一致性所采用的一种手段。在SQL Server中，采用锁机制与事务隔离级别来控制数据的一致性，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 锁定的种类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用的四大类锁包括：共享锁，意向锁，更新锁和排他锁。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202231518000-700526670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(1)共享锁：在SQL SERVER中，当事务要读取数据时，需要获取共享锁。&lt;/p&gt;
&lt;p&gt;(2)意向锁：在SQL SERVER中，准确来说，意向锁并不是一种独立的锁，其主要作用在于获取锁的控制粒度(如，页，表，行等)。&lt;/p&gt;
&lt;p&gt;(3)更新锁：在SQL SERVER中，准确来说，更新锁并不是一种独立的锁，而是由共享锁和排它锁组成的混合锁，其隔离级别高于共享锁，&lt;/p&gt;
&lt;p&gt;低于排他锁，更新锁能够预防锁升级而产生的死锁。&lt;/p&gt;
&lt;p&gt;(4)排它锁：在SQL SERVER中，当事务要写数据、更细数据和删除数据时，需要获取排他锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 锁的控制粒度&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 在SQL SERVER中，锁可以控制表，页和行等资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201802/1066923-20180202234520953-1403797561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;六  参看文献&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【01】Microsoft  SqlServer 2008技术内幕:T-SQL 语言基础&lt;/p&gt;
&lt;p&gt;【02】Microsoft  SqlServer 2008技术内幕:T-SQL 查询&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七  版权区&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2016177728@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 02 Feb 2018 15:58:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/8396986.html</dc:identifier>
</item>
<item>
<title>布衣之路(一)：VMware虚拟机+CentOS系统安装 - 陈本布衣</title>
<link>http://www.cnblogs.com/chenbenbuyi/p/8335217.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbenbuyi/p/8335217.html</guid>
<description>&lt;p&gt; 　　&lt;span&gt;前言：布衣博主乃苦逼的Java程序猿一枚，虽然工作中不会涉及系统运维，但是开发的项目总还是要部署到服务器做一些负载均衡、系统兼容性测试、系统集成等等骚操作，而这些测试性的操作不可能直接SSH远程运维的服务器任我行般瞎搞一通的，所以在个人的开发机上虚拟机一套Linux系统做为测试服务器也就成了程序猿的必备生存技能。本来想一篇博文讲完虚拟机安装和各种环境的搭建的，但博主仔细的捋一捋发现，从虚拟系统到JDK环境再到数据库服务等等东西还不少，而且搭建过程中还有很多问题也是需要好好絮叨一番的，讲的太简略了，作为小白的博主以后参考博文的时候也会懵逼，索性将内容掰开细分成几篇博文细细的叨，以便比博主更白的小小白能零基础入门，而比博主要黑一点的老白读之能呵呵痛快拍砖。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　系列第一篇，先来讲讲如何在我们的电脑上虚拟一台计算机并安装操作系统。因为是安装教程，故以下博文截图较多，有多图恐惧症的请慎读；博文中涉及的软件版本：虚拟机—VMware 12,Linux系统—CentOS 6.5&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; 一 软件准备&lt;/h2&gt;
&lt;p&gt;　　VMware的安装包百度一下即可下载，现在最新的已经更新到14版了。比较难下的是CentOS镜像文件，这个最好到官网下载，更权威。由于官方网站是英文的，很多人看起来有点懵逼，所以这里有必要简单说道一下。首先点击&lt;a title=&quot;CentOS官方网站&quot; href=&quot;https://www.centos.org/&quot; target=&quot;_blank&quot;&gt;链接&lt;/a&gt;访问官网，你看到的应该是以下主页——&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201801/1231169-20180123215335459-186645495.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　你可以看到顶部有几个导航菜单栏——&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;  Get CentOS&lt;/strong&gt;：和主页内容中的 &lt;span&gt;Get CentOS Now&lt;/span&gt; 功能一样，都是链接到CentOS的镜像下载页面；&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;About&lt;/strong&gt;：下属多个子选菜单，链接到CentOS的一些细节介绍页面；&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Community&lt;/strong&gt;：下属多个子选菜单，链接到CentOS社区，里边可以分享交流相关信息、提交Bug等；&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Documentation&lt;/strong&gt;：下属多个子选菜单，链接到CentOS文档信息，包括帮助文档和版本指导手册等；&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Help&lt;/strong&gt;：链接到CentOS的常见问题解决方法和帮助信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　我们的目的是要下载镜像，点击&lt;a title=&quot;下载页面&quot; href=&quot;https://www.centos.org/download/&quot; target=&quot;_blank&quot;&gt;链接&lt;/a&gt;跳转到镜像下载页面——&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201801/1231169-20180123225217709-986519566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在下载页面当中可以看到三个可选链接，链接到最新版本的下载页面，具体含义——&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;DVD ISO&lt;/strong&gt;：普通光盘完整安装版镜像，可离线安装到计算机硬盘上，包含大量的常用软件，大小4G以上，一般选择这种镜像类型即可；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything ISO&lt;/strong&gt;：包含了完整安装版的内容，并对其进行补充，集成了所有软件，大小8G以上；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal ISO&lt;/strong&gt;：这个版本为精简版的镜像，可以安装一个基本的CentOS系统，只包含可启动系统基本所需的最小安装包，不含桌面，只能全命令行操作，镜像大小不到1G，用来简单的搭个服务器环境部署项目还是可以选择的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;根据自己的喜好，点击对应版本链接到下载目录界面，界面有两个主要的资源区：&lt;strong&gt;Actual Country&lt;/strong&gt;和&lt;strong&gt;Nearby Countries——&lt;/strong&gt;前者表示当前所在国家资源区，后者表示附近国家资源区，每个资源下边罗列有不同站点的资源，一般选择当前国家资源区的站点下载，获取资源速度比较快。虽然现在CentOS最新版本已经是7+了，但是国内使用6+版本的还有相当的使用率，所以6+版本的下载也是常见需求。在下载页面最下方的Older Versions中有通向旧版本下载的链接，点击就可以链接到旧版本的下载页面，要下载的看官度娘一下会有详细的教程，这里限于篇幅就不过多赘述。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二 虚拟机安装&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;虚拟机的安装不用费口舌，基本就是同意协议下一步，傻瓜式的安装，只不过最后记得要输入激活秘钥，输入激活后，你就算正式的在自己的电脑（宿主机）上虚拟出一台计算机了——是的，不用花一分钱，你就多了一台电脑可以玩，是不是很划得来？虚拟机界面如下——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201801/1231169-20180123152932631-1362698848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 三 CentOS系统安装&lt;/h2&gt;
&lt;h4&gt;　　虚拟机配置向导&lt;/h4&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;现在，你已经有一台崭新的电脑了，但只是有了电脑没装系统你同样啥都干不了，必须要安装操作系统。在虚拟机开机界面点击创建新的虚拟机，开启系统的虚拟机系统安装前的配置向导&lt;/span&gt;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201801/1231169-20180123232827256-381726622.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;有两个选项，典型和自定义，自定义只是多了对版本兼容性和硬件限制条件的选择，我们直接选典型安装就好。然后分别是选择操作系统（Linux）、系统位数（CentOS 64位），填写虚拟机名称和装机位置，都很简单，这里就不贴图了。这些设置完之后，来到一下步，选择系统安装来源——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201801/1231169-20180123233257600-1858568385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　该步骤中，我们可以直接选第二项挂载下载好的系统镜像文件，也可以选择最后一项，先不挂载，最后配置硬件的时候一起挂载。这里建议先不挂载，稍后配置的时候同硬件配置一起操作。当然，如果最后你忘了挂载镜像，开启虚拟机也是无法进入安装流程的，而是如下找不到系统的错误提示——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202213353000-1860698857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;继续下一步，指定磁盘大小并选择单文件存储（除非虚拟机需要迁移才选择拆分磁盘），下一步，完成虚拟机向导之前可以进行一下硬件配置（如果不配置完成向导后单独编辑也是可以的）——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202215442671-1970150196.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;系统内存根据建议配置就行，如果你是土豪计算机内存够大，分配大一点也无所谓，不过建议够用就行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202215826312-1771329500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;处理器配置建议也是默认就可以了，不要太多以免影响宿主机的运行。如果对虚拟机要求高一点将处理器核心数高选就可以了，但是不能超过宿主机本来的核心数量，超过数量会有失败提示。关于如果确定宿主机处理器核心数量，有多种方式：你可以通过计算机右键&amp;gt;属性&amp;gt;查看设备管理器&amp;gt;处理器数量，更简洁的就是通过任务管理器&amp;gt;性能&amp;gt;CPU使用记录，有几个框就代表有几个核心。接着，挂载操作系统镜像——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202220750421-1209333968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;配置网络适配器。如果你真的期望在局域网中虚拟出一台和真机一样的计算机，就按如下选择桥接模式（另外的几种模式将在后面的博文中有介绍）——&lt;/span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202221010718-1781127089.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　其他的声卡之类的就不用详细配置了，点击关闭、完成，虚拟机配置向导就算完成了——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202222059203-585097139.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;　　虚拟机系统安装&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　虚拟机向导安装完成，开启虚拟机，按流程进行系统设置——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202222355218-1581028307.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;按 tab 键可以选择，安装的话直接第一项（安装或升级现有系统）回车进入——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202222908359-1117943537.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　该界面表示测试光盘媒体，一般选择跳过。因为不是光盘安装，如果选择测试，会出现找不到光盘的错误，导致无法继续配置流程。跳过之后，依次要选择系统语言和系统键盘。第一次安装使用博主建议使用你看得懂的语言，学习阶段没有必要故作高深把自己都弄得懵逼，键盘选择美式英文键盘。下一步，选择默认的基本存储——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202223513921-1463099436.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;再下一步，这里会弹出警告，因为是全新安装，会创建一个没有用过的硬盘，所以选择忽略（选择 否 也会提示没有找到可用磁盘，也是无法继续的）——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202224315421-1883618971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　继续下一步，设置计算机名称、时区选择（亚洲/上海）、设置超级用户密码，都设置完毕后选择分区，如有必要而且也懂得Linux的分区的话，可以根据自己的配置自定义分区布局；当然，博主比较小白，就不去自定义分区了，直接使用所有空间，省事：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202231257640-286953701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;下一步，将修改写入磁盘&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202231538328-907837823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;下一步，默认，来到系统安装精简度选择，建议选择Minimal Desktop,基本的桌面系统，包含较少的软件——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202232842687-805151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;这里不论选择什么都建议勾选上 现在自定义，因为这样你可以在系统安装的时候自定义预装一些软件服务，比如我可以直接安装上MySql服务，Java平台等。当然，这里不建议选上Java平台，这会导致安装默认的OpenJDK,反而多了卸载的麻烦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202233021000-218093667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202233207468-1466038272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;最后，开始静静的等待安装，直到安装完成——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202233946546-849180219.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202234136859-773122752.png&quot; alt=&quot;&quot;/&gt;　　安装完成之后，重新引导，会重启系统，还要完成一些协议许可、用户创建、日期和时间设置等工作，都很简单——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202234343359-2130538019.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最后，用创建好的用户登录系统，就可愉快的操作你的Linux系统了——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1231169/201802/1231169-20180202234456562-1001154376.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最后，还是要说明一下，由于版本升级，CentOS最新版和旧版本之间的命令和目录结构是有比较多的改变，博文中所涉及的操作命令都只针对6+的版本，看官要注意区分。博主曾尝试7+版本，发现很多命令的改变让自己有些无所适从，不得已又换回旧版本来作为安装示例。不过以后自己还是会尝试最新版系统的把玩——技术终究是往前发展的，永远躺在自己的舒适区，不去拥抱最新的东西，终究会被淘汰掉的。下篇博文，布衣博主将会接着安装好的系统，讲解登录之后的故事。。。&lt;/span&gt;&lt;/p&gt;



</description>
<pubDate>Fri, 02 Feb 2018 15:49:00 +0000</pubDate>
<dc:creator>陈本布衣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbenbuyi/p/8335217.html</dc:identifier>
</item>
<item>
<title>号外号外！解决github+hexo+yilia评论插件的问题！！！ - 阿♛正</title>
<link>http://www.cnblogs.com/pengwenzheng/p/8407479.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pengwenzheng/p/8407479.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;先走一波效果图!    本人网站--&lt;a href=&quot;http://www.wenzheng.club/&quot; target=&quot;_blank&quot;&gt;http://www.wenzheng.club/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;ps：效果还是不错的，支持QQ微信登录，支持表情，甚至gif动图评论！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;插件采用韩国服务器的来必力评论插件--&lt;a href=&quot;https://livere.com/&quot; target=&quot;_blank&quot;&gt;https://livere.com/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;电脑端效果如下                          2018-02-0223:05:56&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202230016500-497574590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是手机端&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202230037953-1362575265.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;相信看到这个帖子的同学，对于我这个话题肯定很感兴趣&lt;/p&gt;
&lt;p&gt;Hexo博客的Yilia主题中评论系统只提供了畅言、网易云跟帖、多说和Disqus。&lt;/p&gt;
&lt;p&gt;但是多说已经退出了江湖，网易云跟帖同样也不了了之，Disqus更不用说了，网址都进不去，岂不是更尴尬的存在？&lt;/p&gt;
&lt;p&gt;但是Yilia的作者给我们留了开源的接口，支持我们添加其他的插件！&lt;/p&gt;
&lt;p&gt;也有老哥创新性的加入了友言评论插件想试一试的同学可以看一下下面的链接!不过我没有成功，甚至在本地都没有成功，更不要说上传到Github了。&lt;/p&gt;
&lt;p&gt;我参考了这篇帖子&lt;a href=&quot;http://blog.csdn.net/destinytaoer/article/details/78400021&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/destinytaoer/article/details/78400021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好的开始咱们的表演！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、注册账号，虽说livere是韩国的插件，但也支持qq邮箱登录注册，相当方便，网址--&lt;a href=&quot;https://livere.com/&quot; target=&quot;_blank&quot;&gt;https://livere.com/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202232020984-1590985302.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二、获取到了代码全部复制下来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202232305906-416278244.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、本地配置，步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202232859437-126895347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把复制的代码粘贴在里面就行了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202232950484-268015577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很重要的一点!是下面这一步！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;修改hexo\themes\yilia\layout\_partial\article.ejs,找到

&lt;/span&gt;&amp;lt;% &lt;span&gt;if&lt;/span&gt; (!index &amp;amp;&amp;amp; post.comments){ %&amp;gt;
&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
在此下方添加下列代码：

 &lt;/span&gt;&amp;lt;% &lt;span&gt;if&lt;/span&gt; (theme.livere){ %&amp;gt;
  &amp;lt;%- &lt;span&gt;partial&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;post/livere&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
        key: post.slug,
        title: post.title,
        url: config.url&lt;/span&gt;+&lt;span&gt;url_for(post.path)
    }) &lt;/span&gt;%&amp;gt;
  &amp;lt;% } %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后就是把插件放到主页面，进行加载，操作如下：&lt;/p&gt;
&lt;p&gt;打开你主题的设置项：_config.yml（注意不是hexo的_config.yml，而是yilia的文件夹里的_config.yml）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202233749125-589382694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后粘贴id即可！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202233648843-9399582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、最后一步上传到github，大功告成！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1263384/201802/1263384-20180202234132328-135448671.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;本人网站--&lt;a href=&quot;http://www.wenzheng.club/&quot; target=&quot;_blank&quot;&gt;http://www.wenzheng.club/&lt;/a&gt;（前一段刚建好还没整理）本人博客园--&lt;a href=&quot;http://www.cnblogs.com/pengwenzheng/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/pengwenzheng/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;祝你成功！&lt;/p&gt;

</description>
<pubDate>Fri, 02 Feb 2018 15:44:00 +0000</pubDate>
<dc:creator>阿♛正</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pengwenzheng/p/8407479.html</dc:identifier>
</item>
<item>
<title>DAY10-万物皆对象-2018-2-2 - Archer-LCY</title>
<link>http://www.cnblogs.com/archer-lcy/p/8407432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/archer-lcy/p/8407432.html</guid>
<description>&lt;p&gt;　　　　许久没有写了，虽然每天都有在学，但是学的东西也少了，后面难度慢慢加大，学习速度也是变慢了。这是许多天积累下来的笔记，从第一次接触对象，到慢慢去了解，现在处于还待深入了解的状态。万物皆对象，那是不是说没有对象的小伙伴不必担心了呢？&lt;/p&gt;



&lt;p&gt;&lt;span&gt;终于到了对象这里。面向对象程序设计（简称&lt;/span&gt;OOP&lt;span&gt;），&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;是完全面向对象的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一、使用面向对象思想描述现实世界。&lt;/p&gt;
&lt;p&gt;基本步骤：&lt;/p&gt;
&lt;p&gt;1、发现类&lt;/p&gt;
&lt;p&gt;如下图：可以将下图的人分为几类&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231748031-1370113800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;人类&lt;/span&gt;/&lt;span&gt;科学家类&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;演员类&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;逗比类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、找出属性（名词）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;姓名、性别、职业、年龄、爱好&lt;/span&gt;……&lt;/p&gt;
&lt;p&gt;3、找出行为（动词）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;吃饭、说话、表演&lt;/span&gt;……&lt;/p&gt;
&lt;p&gt;数据抽象：是数据和处理方法的结合&lt;/p&gt;
&lt;p&gt;二、使用类图描述类&lt;/p&gt;
&lt;p&gt;作用：直观容易理解&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考工具：&lt;/span&gt;StarUML&lt;span&gt;、&lt;/span&gt;&lt;span&gt;Astah UML&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231804406-647741611.png&quot; alt=&quot;&quot;/&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231811390-607410913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;三、类与对象的关系&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类：是抽象概念，仅仅是模板，比如说&lt;/span&gt;“演员”、“总统”。类是构造对象的模板和蓝图，用于描述一种数据类型。&lt;/p&gt;
&lt;p&gt;对象：是你能够看到摸到的具体实物。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拿小甜饼举例，将类想象成制作小甜饼的机器，而对象就是一个小甜饼。由类构造（&lt;/span&gt;construct&lt;span&gt;）对象的过程称作为创建类的实例（&lt;/span&gt;&lt;span&gt;instance&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如图：左边是类，右边是对象&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231819859-1118433081.png&quot; alt=&quot;&quot;/&gt;        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231838578-981595965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;补充：怎么另一个类中怎么访问其他的类&lt;/span&gt;private&lt;span&gt;的变量的方法&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在另一个类中，是无法访问其他类的私有属性或方法的。&lt;/li&gt;
&lt;li&gt;在内部类可以直接访问。&lt;/li&gt;
&lt;li&gt;可以通过定义方法的形式，让内部类调用，以获得方法的返回值。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;四、类之间的的关系&lt;/p&gt;
&lt;p&gt;常见关系有：依赖、聚合、继承&lt;/p&gt;
&lt;p&gt;&lt;span&gt;依赖（&lt;/span&gt;uses-a&lt;span&gt;）：如果说一个类的方法操纵另一个类的对象，就说一个类依赖于另一个类&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;我们应该尽可能让相互依赖的类减少，用软件工程的术语来说，就是让类之间的耦合度最小。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;聚合（&lt;/span&gt;has-a&lt;span&gt;）：类&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;的对象包含类&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;继承（&lt;/span&gt;is-a&lt;span&gt;）：特殊与一般的关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231916515-964265237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;五、预定义类&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;java&lt;span&gt;中，没有类就无法做任何事情，然而，并不是所有类都具有面向对象特征，例如：&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、对象与对象变量：想要使用对象就必须先构造对象，并指定其初始状态。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;区别：&lt;/span&gt;Date deadline;//deadline does not refer to any object&lt;span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;实际上等同于&lt;/span&gt;c++&lt;span&gt;中：&lt;/span&gt;&lt;span&gt;Date* deadline;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;定义了一个对象变量&lt;/span&gt;deadline&lt;span&gt;，它可以引用&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;类型的对象。但是，一定要认识到：变量&lt;/span&gt;&lt;span&gt;deadline&lt;/span&gt;&lt;span&gt;不是一个对象，也没有引用对象。首先要初始化这个变量：&lt;/span&gt;&lt;span&gt;deadline=new Date();&lt;/span&gt;&lt;span&gt;如果是&lt;/span&gt;&lt;span&gt;deadline=null;&lt;/span&gt;&lt;span&gt;表明这个对象目前没有引用任何对象。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;两个变量引用一个对象：（一个对象变量没有包含实际包含一个对象，而仅仅引用一个对象。在&lt;/span&gt;Java&lt;span&gt;中任何对象变量的值都是对存储在另外一个地方的一个对象的引用。&lt;/span&gt;&lt;span&gt;New&lt;/span&gt;&lt;span&gt;操作符的返回值也是一个引用。）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231925328-1876527040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;在&lt;/span&gt;c++&lt;span&gt;中，稍不小心就可能创建一个错误的指针，或者造成内存溢出。而在&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;语言中，这些问题都不存在，如果使用一个没有初始化的指针，会报错，而不是随机运行的结果；同时，不必担心内存的管理问题，垃圾收集器将会处理相关的事宜。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2、Java &lt;span&gt;类库中的&lt;/span&gt; &lt;span&gt;LocalDate&lt;/span&gt; &lt;span&gt;类&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;时间是用距离一个固定时间点的毫秒数（可正&lt;/span&gt; &lt;span&gt;可负）&lt;/span&gt; &lt;span&gt;表示的，&lt;/span&gt; &lt;span&gt;这个点就是所谓的纪元（&lt;/span&gt; epoch), &lt;span&gt;它 是&lt;/span&gt; &lt;span&gt;UTC&lt;/span&gt; &lt;span&gt;时间&lt;/span&gt; &lt;span&gt;1970&lt;/span&gt; &lt;span&gt;年&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;月&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;日&lt;/span&gt; &lt;span&gt;00:00:00&lt;/span&gt;&lt;span&gt;。&lt;/span&gt; &lt;span&gt;UTC&lt;/span&gt; &lt;span&gt;是&lt;/span&gt; &lt;span&gt;Coordinated Universal Time&lt;/span&gt; &lt;span&gt;的缩写，与大家熟悉的&lt;/span&gt; &lt;span&gt;GMT (&lt;/span&gt; &lt;span&gt;即&lt;/span&gt; &lt;span&gt;Greenwich Mean Time,&lt;/span&gt; &lt;span&gt;格林威治时间）一样，是一种具有实践意义的科学标准时间。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;不要使用构造器来构造&lt;/span&gt; LocalDate &lt;span&gt;类的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Local Date.now() &lt;span&gt;会构造一个新对象，表示构造这个对象时的日期。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;可以提供年、&lt;/span&gt; &lt;span&gt;月和日来构造对应一个特定日期的对象：&lt;/span&gt; LocalDate.of(1999, 12, 31)&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;当然，&lt;/span&gt; &lt;span&gt;通常都希望将构造的对象保存在一个对象变量中：&lt;/span&gt; LocalDate newYearsEve = Local Date.of(1999, 12, 31);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;一旦有&lt;/span&gt; &lt;span&gt;了一个&lt;/span&gt; LocalDate &lt;span&gt;对象， 可以用方法&lt;/span&gt; &lt;span&gt;getYear&lt;/span&gt;&lt;span&gt;、&lt;/span&gt; &lt;span&gt;getMonthValue&lt;/span&gt; &lt;span&gt;和&lt;/span&gt; &lt;span&gt;getDayOfMonth&lt;/span&gt; &lt;span&gt;得到年、月和日：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; int year = newYearsEve.getYearO; // 1999&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; int month = newYearsEve.getMonthValueO; // 12&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;int day = newYearsEve.getDayOfMonth(); // 31&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;看起来这似乎没有多大的意义，&lt;/span&gt; &lt;span&gt;因为这正是构造对象时使用的那些值。不过，有时可能&lt;/span&gt; &lt;span&gt;某个日期是计算得到的，你希望调用这些方法来得到更多信息。例如，&lt;/span&gt; plusDays &lt;span&gt;方法会得到 一个新的&lt;/span&gt; &lt;span&gt;LocalDate,&lt;/span&gt; &lt;span&gt;如果把应用这个方法的对象称为当前对象，这个新日期对象则是距当 前对象指定天数的一个新日期：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate aThousandDaysLater = newYearsEve.piusDays(1000);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; year = aThousandDaysLater.getYearO&lt;span&gt;；&lt;/span&gt;&lt;span&gt;// 2002&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;month = aThousandDaysLater.getMonthValueO; // 09&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;day = aThousandDaysLater.getDayOfMonth(); // 26&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate &lt;span&gt;类封装了实例域来维护所设置的日期。如果不查看源代码， 就不可能知道类内 部的日期表示。当然， 封装的意义在于，这一点并不重要， 重要的是类对外提供的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;3、更改器方法与使用器方法&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;1&lt;span&gt;、访问器方法（&lt;/span&gt;&lt;span&gt;accessor method&lt;/span&gt;&lt;span&gt;）：只访问对象而不修改对象的方法。例如：&lt;/span&gt;&lt;span&gt;LocalDate.getYear&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;GregorianCalendar.get&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate aThousandDaysLater = newYearsEve.plusDays(1000);&lt;span&gt;调用&lt;/span&gt;&lt;span&gt;newYearEve.plusDays&lt;/span&gt;&lt;span&gt;之后不会改为&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;之后的日期，实际上&lt;/span&gt;&lt;span&gt;plusDays&lt;/span&gt;&lt;span&gt;方法没有更改调用这个方法的对象，而是，&lt;/span&gt;&lt;span&gt;plusDays&lt;/span&gt;&lt;span&gt;方法会产生一个新的&lt;/span&gt;&lt;span&gt;LocalDate&lt;/span&gt;&lt;span&gt;对象，然后把这个新对象赋给&lt;/span&gt;&lt;span&gt;aThousandDaysLater&lt;/span&gt;&lt;span&gt;变量，原来对象不做任何改动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2&lt;span&gt;、更改器方法（&lt;/span&gt;&lt;span&gt;mutator method&lt;/span&gt;&lt;span&gt;）：对象的方法会改变&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;有一个&lt;/span&gt;GregorianCalendar&lt;span&gt;方法是更改器方法，可以用于增加&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;天：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;CregorianCalendar someDay = new CregorianCalendar(1999, 11, 31); //&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;月份是从&lt;/span&gt;0-11&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;someDay.add(Calendar.DAY_0F _M0NTH, 1000);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：在&lt;/span&gt;c++&lt;span&gt;中，带有&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt;后缀的方法是访问器方法；默认为更改器方法。但是，在&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;语言中访问器和更改器没有明显的语法区别。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Feb 2018 15:20:00 +0000</pubDate>
<dc:creator>Archer-LCY</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/archer-lcy/p/8407432.html</dc:identifier>
</item>
<item>
<title>promise使用方法 - 吴贤强</title>
<link>http://www.cnblogs.com/wuxianqiang/p/8407419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuxianqiang/p/8407419.html</guid>
<description>&lt;p&gt;代码报错会走向失败时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;我错了&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会失败&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; p.then((data) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;  console.log(data)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }, (err) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;   console.log(err) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行这个方法&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行reject会走向失败时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  reject(&lt;/span&gt;&quot;我错了&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会失败&lt;/span&gt;
&lt;span&gt;})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data)
}, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(err) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行这个方法&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行resolve会执行成功时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;我对了&quot;&lt;span&gt;) // 会成功
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行此方法&lt;/span&gt;
}, (err) =&amp;gt;&lt;span&gt; {
  console.log(err) 
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不执行的情况&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;&quot;不知道&quot;&lt;span&gt;);
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不执行&lt;/span&gt;
}, (err) =&amp;gt;&lt;span&gt; {
  console.log(err)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不执行&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用可以返回普通值&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;执行2&quot;&lt;span&gt;
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;执行3&quot;&lt;span&gt;
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用可以返回promise&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行2&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行3&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用也可以不返回任何值直接到达下一步&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跳过我吧！&lt;/span&gt;
}).then((data) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行3&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;手写一个promise：https://github.com/wuxianqiang/promise&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 15:17:00 +0000</pubDate>
<dc:creator>吴贤强</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuxianqiang/p/8407419.html</dc:identifier>
</item>
<item>
<title>Part 1：请求与响应--Django从入门到精通系列教程 - 刘江liujiangblog.com</title>
<link>http://www.cnblogs.com/feixuelove1009/p/8403990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixuelove1009/p/8403990.html</guid>
<description>&lt;hr/&gt;&lt;h3 id=&quot;该系列教程系个人原创并完整发布在个人官网刘江的博客和教程&quot;&gt;该系列教程系个人原创，并完整发布在个人官网&lt;a href=&quot;http://www.liujiangblog.com&quot;&gt;刘江的博客和教程&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;所有转载本文者需在顶部显著位置注明原作者及www.liujiangblog.com官网地址&quot;&gt;所有转载本文者，需在顶部显著位置注明原作者及www.liujiangblog.com官网地址。&lt;/h3&gt;
&lt;h3 id=&quot;python及django学习qq群453131687&quot;&gt;Python及Django学习QQ群：453131687&lt;/h3&gt;
&lt;hr/&gt;&lt;h3 id=&quot;本章以创建一个web投票应用为例子手把手的教你如何使用django开发web应用力图从全局范围带给大家一个整体的django概念让你对django的设计理念功能模块体系架构基本用法有个初步的印象&quot;&gt;本章以创建一个Web投票应用为例子，手把手的教你如何使用Django开发Web应用，力图从全局范围带给大家一个整体的Django概念，让你对Django的设计理念、功能模块、体系架构、基本用法有个初步的印象。&lt;/h3&gt;
&lt;p&gt;该应用包括以下两个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个可以让公众用户进行投票和查看投票结果的站点&lt;/li&gt;
&lt;li&gt;一个让可以进行增删改查的后台admin管理界面&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在开始之前，再次重申，请确保已经安装最新版本的Django。可以在命令行或者$提示符下输入：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python -m django --version&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果没有显示版本号，而是提示“No module named django”，请返回前面的章节，参考安装Django。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一-新建项目&quot;&gt;一、 新建项目&lt;/h2&gt;
&lt;p&gt;进入你指定的项目保存目录，然后运行下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ django-admin startproject mysite&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这将在目录下生成一个mysite目录，也就是你的这个Django项目的根目录。它包含了一系列自动生成的目录和文件，具备各自专有的用途。&lt;/p&gt;
&lt;p&gt;注意：在给项目命名的时候必须避开Django和Python的保留关键字，比如“django”，“test”等，否则会引起冲突和莫名的错误。对于mysite的放置位置，不建议放在传统的/var/wwww目录下，它会具有一定的数据暴露危险，因此Django建议你将项目文件放在例如/home/mycode类似的位置。&lt;/p&gt;
&lt;p&gt;一个新建立的项目结构大概如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;各文件和目录解释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;外层的&lt;code&gt;mysite/&lt;/code&gt;目录与Django无关，只是你项目的容器，可以任意命名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manage.py&lt;/code&gt;：一个命令行工具，用于与Django进行不同方式的交互脚本，非常重要！&lt;/li&gt;
&lt;li&gt;内层的&lt;code&gt;mysite/&lt;/code&gt;目录是真正的项目文件包裹目录，它的名字是你引用内部文件的包名，例如：&lt;code&gt;mysite.urls&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/__init__.py&lt;/code&gt;:一个定义包的空文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/settings.py&lt;/code&gt;:项目的主配置文件，非常重要！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/urls.py&lt;/code&gt;:路由文件，所有的任务都是从这里开始分配，相当于Django驱动站点的内容表格，非常重要！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/wsgi.py&lt;/code&gt;:一个基于WSGI的web服务器进入点，提供底层的网络通信功能，通常不用关心。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt;这一部分，我们可以在Pycharm环境下进行，参考上节内容。&lt;/p&gt;
&lt;h2 id=&quot;二-启动开发服务器&quot;&gt;二、 启动开发服务器&lt;/h2&gt;
&lt;p&gt;进入mystie项目的根目录，输入下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你会看到下面的提示，这表明Django的开发服务器已经启动，开始提供Web服务了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Performing system checks...
System check identified no issues (0 silenced).
You have unapplied migrations; your app may not work properly until they are applied.
Run `python manage.py migrate' to apply them.
September 10, 2017 - 15:50:53
Django version 1.10, using settings `mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Django提供了一个用于开发的web服务器，使你无需配置一个类似Ngnix的线上服务器，就能让站点运行起来。&lt;/strong&gt;这是一个由Python编写的轻量级服务器，简易并且不安全，因此不要将它用于生产环境。&lt;/p&gt;
&lt;p&gt;打开浏览器，访问http://127.0.0.1:8000/，你将看到Django的欢迎界面，一切OK！&lt;/p&gt;
&lt;p&gt;Django的开发服务器（以后简称服务器）默认运行在内部的8000端口，如果你想指定端口，请在命令中显示给出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver 8080&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果想修改服务器的ip地址，请按下面的方式运行命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver 0.0.0.0:8000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时，Django将运行在8000端口，整个局域网内都将可以访问站点，而不只是是本机。&lt;/p&gt;
&lt;p&gt;注意： &lt;strong&gt;Django的开发服务器具有自动重载功能，当你的代码有修改，每隔一段时间服务器将自动更新。&lt;/strong&gt;但是，有一些例如增加文件的动作，不会触发服务器重载，这时就需要你自己手动重启。&lt;/p&gt;
&lt;p&gt;PS:这一步操作也可以在Pycharm里完成。&lt;/p&gt;
&lt;h2 id=&quot;三-创建投票应用app&quot;&gt;三、 创建投票应用(app)&lt;/h2&gt;
&lt;p&gt;app应用与project项目的区别：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个app实现某个功能，比如博客、公共档案数据库或者简单的投票系统；&lt;/li&gt;
&lt;li&gt;一个project是配置文件和多个app的集合，这些app组合成整个站点；&lt;/li&gt;
&lt;li&gt;一个project可以包含多个app；&lt;/li&gt;
&lt;li&gt;一个app可以属于多个project！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;app的存放位置可以是任何地点，但是通常都将它们放在与&lt;code&gt;manage.py&lt;/code&gt;脚本同级的目录下，这样方便导入文件。&lt;/p&gt;
&lt;p&gt;进入mysite项目根目录，确保与&lt;code&gt;manage.py&lt;/code&gt;文件处于同一级，输入下述命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python manage.py startapp polls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;系统会自动生成 polls应用的目录，其结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Pycharm中，没有可以创建app的图形化按钮，需要在下方的&lt;code&gt;terminal&lt;/code&gt;终端中输入命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python manage.py startapp polls&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样也能创建polls应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/zh7delzlzxr58gaeqjl13wyt/image.png&quot; alt=&quot;image.png-29.9kB&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四编写第一个视图&quot;&gt;四、编写第一个视图&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;polls/views.py&lt;/code&gt;文件中，编写代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponse

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; index(request):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;st&quot;&gt;&quot;Hello, world. You're at the polls index.&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了调用该视图，我们还需要编写urlconf，也就是路由路径。现在，在polls目录中新建一个文件，名字为&lt;code&gt;urls.py&lt;/code&gt;，在其中输入代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; views

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^$'&lt;/span&gt;, views.index, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，目录的文件结构是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们先不用深究url中代码的具体含义。&lt;/p&gt;
&lt;p&gt;接下来，在项目的&lt;strong&gt;主urls文件&lt;/strong&gt;中添加&lt;code&gt;urlpattern&lt;/code&gt;条目，指向我们刚才建立的polls这个app独有的urls文件，这里需要导入include模块。打开&lt;code&gt;mysite/urls.py&lt;/code&gt;文件，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; include, url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.contrib &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; admin

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^polls/'&lt;/span&gt;, include(&lt;span class=&quot;st&quot;&gt;'polls.urls'&lt;/span&gt;)),
    url(&lt;span class=&quot;vs&quot;&gt;r'^admin/'&lt;/span&gt;, admin.site.urls),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;include语法相当于多级路由，它把接收到的url地址去除前面的正则表达式，将剩下的字符串传递给下一级路由进行判断。在路由的章节，有更加详细的用法指导。&lt;/p&gt;
&lt;p&gt;include的背后是一种即插即用的思想。项目根路由不关心具体app的路由策略，只管往指定的二级路由转发，实现了应用解耦。app所属的二级路由可以根据自己的需要随意编写，不会和其它的app路由发生冲突。app目录可以放置在任何位置，而不用修改路由。这是软件设计里很常见的一种模式。&lt;/p&gt;
&lt;p&gt;建议：除了admin路由外，尽量给每个app设计自己独立的二级路由。&lt;/p&gt;
&lt;p&gt;好了，路由设置成功后，启动服务器，然后在浏览器中访问地址&lt;code&gt;http://localhost:8000/polls/&lt;/code&gt;。一切正常的话，你将看到&lt;code&gt;“Hello, world. You’re at the polls index.”&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;url方法&quot;&gt;&lt;strong&gt;url()方法：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;url()方法可以接收4个参数，其中2个是必须的：&lt;code&gt;regex&lt;/code&gt;和&lt;code&gt;view&lt;/code&gt;，以及2个可选的参数：&lt;code&gt;kwargs&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regex：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;regex是正则表达式的通用缩写，它是一种匹配字符串或url地址的语法。Django拿着用户请求的url地址，在&lt;code&gt;urls.py&lt;/code&gt;文件中对&lt;code&gt;urlpatterns&lt;/code&gt;列表中的每一项条目从头开始进行逐一对比，一旦遇到匹配项，立即执行该条目映射的视图函数或下级路由，其后的条目将不再继续匹配。因此，url路由的编写顺序非常重要！&lt;/p&gt;
&lt;p&gt;需要注意的是，regex不会去匹配GET或POST参数或域名，例如对于&lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;，regex只尝试匹配&lt;code&gt;myapp/&lt;/code&gt;。对于&lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;,regex也只尝试匹配&lt;code&gt;myapp/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你想深入研究正则表达式，可以读一些相关的书籍或专论，但是在Django的实际应用中，你不需要多高深的正则表达式知识，在Python教程部分有正则表达式相关专题，可供学习参考。&lt;/p&gt;
&lt;p&gt;当URLconf模块加载的时候会预先编译正则表达式，因此它的匹配搜索速度非常快，你通常感觉不到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;view：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;view指的是处理当前url请求的视图函数。当正则表达式匹配到某个条目时，自动将封装的&lt;code&gt;HttpRequest&lt;/code&gt;对象作为第一个参数，正则表达式“捕获”到的值作为第二个参数，传递给该条目指定的视图view。如果是简单捕获，那么捕获值将作为一个位置参数进行传递，如果是命名捕获，那么将作为关键字参数进行传递。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kwargs：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任意数量的关键字参数可以作为一个字典传递给目标视图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对你的URL进行命名，让你能够在Django的任意处，尤其是模板内显式地引用它。这是一个非常强大的功能，相当于给URL取了个全局变量名，不会将url匹配地址写死。&lt;/p&gt;
&lt;p&gt;url()方法的四个参数，每个都非常有讲究，这里先做基本的介绍，在后面有详细的论述。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:52:00 +0000</pubDate>
<dc:creator>刘江liujiangblog.com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixuelove1009/p/8403990.html</dc:identifier>
</item>
<item>
<title>扫描线讲解，动态开点版线段树 - 杨松燚</title>
<link>http://www.cnblogs.com/yangsongyi/p/8378629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangsongyi/p/8378629.html</guid>
<description>&lt;p&gt;&lt;strong&gt;　　首先，扫描线是干什么的？&lt;/strong&gt;扫描线一般运用在图形上面，它和它的字面意思十分相似，就是一条线在整个图上扫来扫去，它一般被用来解决图形面积，周长等问题，以一道例题为例。给出n个正方形，这些正方形在平面直角坐标系中互相重叠摆放，但四条边都与坐标轴平行，例如下图所示。那么知道题目了，怎么运用呢？首先我们需要知道怎么用暴力解决这个问题，根据图片可知图中的面积是S&lt;sub&gt;ABCD&lt;/sub&gt;+S&lt;sub&gt;HEFG&lt;/sub&gt;-S&lt;sub&gt;IDJE&lt;/sub&gt;暴力搜索是个好东西，但是当数据范围大了怎么办？这里就要讲到扫描线。&lt;/p&gt;
&lt;p&gt;&lt;img dir=&quot;ltr&quot; src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129164934453-115980736.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;208&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129175005921-1199128947.png&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　扫描线对于这道例题可以抽象为这四条紫色的直线（如上图l1，l2，l3，l4），仔细观察，可以看出这四条线把这个图形分割成三个矩形，那么我们就可以直接求这三个矩形再加和是不是就可以了？那么现在难点来了，怎样求这些矩形的面积。我们可以把题目中给的矩形的边转换成直线（如下图），即只留下这四条边，这四条线就是整个做法的核心。既然四条线已经看出来了，那么我们就可以一眼看出，面积就是从头到现在的扫描线的重影减去已经结束的长方形的边的投影承上两条扫描线的间距。再把这些乘积加在一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129181802484-743576157.png&quot; alt=&quot;&quot; width=&quot;298&quot; height=&quot;204&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180130124846984-896697391.png&quot; alt=&quot;&quot; width=&quot;297&quot; height=&quot;205&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;下面就将如何实现了&lt;/strong&gt;，首先我们可以想到用线段树求区间和来求这些投影的长度，那么区间如此之大（-1e8~1e8），怎么能建树呢？不会空间爆炸吗？所以就应该运用动态开点线段树，算一下每一个扫描线开一个节点，那么就是n个，一共有log&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;1e8&lt;/sup&gt;层所以是可以开的下的。根据这个说法，每一条边应该进行排序，由于扫描是从左到右，所以排序应该是把横坐标从小到大排序，所以每条边有三个属性：位置即横坐标，从那个点开始，从那个点结束，这两给点分别是纵坐标的两个端点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Line
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt;,to,x,val;  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; }line[&lt;span&gt;2001&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; cmp1(&lt;span&gt;const&lt;/span&gt; Line &amp;amp;a,&lt;span&gt;const&lt;/span&gt; Line &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; a.x&amp;lt;=&lt;span&gt;b.x;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{ 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;c,&amp;amp;&lt;span&gt;d);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].x=&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].&lt;span&gt;from&lt;/span&gt;=d+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].to=&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].val=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].x=&lt;span&gt;c;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].&lt;span&gt;from&lt;/span&gt;=d+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].to=&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].val=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         sort(line+&lt;span&gt;1&lt;/span&gt;,line+&lt;span&gt;1&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;*&lt;span&gt;n,cmp1);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线排序&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　下面讲解一下如何把线段树运用进去，我们把每一条边给定一个属性，这个矩形的左面边定义为入边，给一个+1的值，右边的边定义为出边，给一个-1的值，这就是边里的val的意义，那么这个和线段树又有什么关系呢？有了这个值我们可以快速地直接给线段树赋值，让其显示是否有边覆盖在上面，也就是下面代码中的cover数组的含义，如果cover数组有值不是零，那么这个区间就有边，即有r-l+1的贡献，否则则没有。这便是查询。在查询中一定要查到叶子节点，因为在扫描线中是没有上传值或是下传值的说法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; find(&lt;span&gt;int&lt;/span&gt; l,&lt;span&gt;int&lt;/span&gt; r,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(cover[p])
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum[p];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(lp==rp&amp;amp;&amp;amp;rp==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; sum=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(lp!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 sum+=find(l,(l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,lp);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(rp!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 sum+=find(((l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,r,rp);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线查询&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　最难的要数修改，如果现在的节点被现在要加的边完全覆盖，那么直接修改就好啦，否则要递归的寻找他的儿子，如果没有儿子则动态开点出来，这边是修改的想法，当然在修改时不要忘记修改cover的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; change(&lt;span&gt;int&lt;/span&gt; l,&lt;span&gt;int&lt;/span&gt; r,&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt; &amp;amp;p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; delta)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;p)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 p=++&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(x&amp;lt;=l&amp;amp;&amp;amp;r&amp;lt;=&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 cover[p]+=&lt;span&gt;delta;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 sum[p]=r-l+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(x&amp;lt;=&lt;span&gt;mid)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                change(l,mid,x,y,lp,delta);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(y&amp;gt;&lt;span&gt;mid)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 change(mid+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,r,x,y,rp,delta);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线修改&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　大致就是这样，不会的可以评论发问题，我会解答。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>杨松燚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangsongyi/p/8378629.html</dc:identifier>
</item>
<item>
<title>TSQL 数据类型转换 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/5461799.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/5461799.html</guid>
<description>&lt;p&gt;常用的转换函数是 cast 和 convert，用于把表达式得出的值的类型转换成另一个数据类型，如果转换失败，该函数抛出错误，导致整个事务回滚。在SQL Server 2012版本中，新增两个容错的转换函数：try_cast 和 try_convert，如果转换操作失败，该函数返回null，不会导致整个事务失败，事务继续执行下去。&lt;/p&gt;
&lt;p&gt;注意：对于SQL Server显式定义的不合法转换，try_cast 和 try_convert 会失败，抛出错误信息：&lt;span&gt;Explicit conversion from data type int to date is not allowed.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; try_cast(&lt;span&gt;1&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; date)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转换函数是parse 和 try_parse，只用于把字符类型转换为 date/time 和 数字类型，在解析字符时会产生一定的性能消耗。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，时间类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在把日期/时间类型转换成字符串时，常用的转换函数&lt;strong&gt;是Convert和Cast，&lt;/strong&gt;convert函数能够在一定程度上显式控制日期/时间的显示格式，而cast对日期/时间类型的显示格式，无法显式控制，我推荐使用另一个功能更强大的函数：FORMAT，该函数用于把日期时间类型，按照指定的格式转换成字符串，也可以把数值按照特定的格式输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，常用的转换函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;convert 常用于转换date，datetime 等日期/时间类型，通过指定style参数，能够控制数据显示的格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CAST&lt;/span&gt; ( expression &lt;span&gt;AS&lt;/span&gt; data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;CONVERT&lt;/span&gt; ( data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; , expression &lt;span&gt;[&lt;/span&gt;&lt;span&gt; , style &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的style及其显示格式如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;101 mm/dd/yyyy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;110 mm-dd-yyyy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;111 yyyy/mm/dd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;112 yyyymmdd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;120 yyyy-mm-dd hh:mm:ss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;121 yyyy-mm-dd hh:mm:sssssss&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CONVERT函数的style是数字，记忆起来比较困难，只能按照系统定义的格式来显示，不够灵活。SQL Server提供更为灵活的转换函数FORMAT。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，FORMAT函数，控制日期和时间类型的显示格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FORMAT函数主要用于格式化显示date/time类型和数值类型，参数format用于指定显示的格式，给予用户对格式更自由地控制，culture参数是可选的，用于指定显示的语言，该函数返回值的数据类型是NVARCHAR，如果格式转换失败，该函数返回NULL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
FORMAT ( value, format &lt;span&gt;[&lt;/span&gt;&lt;span&gt;, culture &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; ) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当转换date/time时，在format参数中指定日期/时间显示的格式，通常情况下，日期/时间的格式使用以下关键字符作为占位符：yyyy、MM、dd用来表示：年、月、日，而hh、mm、ss用来表示：时、分、秒，并使用“/”，“-”等作为连接符，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DECLARE&lt;/span&gt; &lt;span&gt;@d&lt;/span&gt; &lt;span&gt;DATETIME&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GETDATE&lt;/span&gt;&lt;span&gt;();  
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; FORMAT( &lt;span&gt;@d&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dd/MM/yyyy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;en-US&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DateTime Result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当转换数值类型时，在参数format中使用#代表一个数字，使用相应的连接符，拼接成数字的格式字符，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
FORMAT(&lt;span&gt;123456789&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;###-##-####&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Custom Number Result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/628084/201802/628084-20180202221957406-1176938359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，TRY_CAST and TRY_CONVERT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果表达式转换成功，返回强转之后表达式的值；如果转换失败，返回NULL；如果转换两个显式禁止的数据类型，转换失败，抛出错误。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;TRY_CAST&lt;/strong&gt; takes the value passed to it and tries to convert it to the specified &lt;em&gt;data_type&lt;/em&gt;. If the cast succeeds, &lt;strong&gt;TRY_CAST&lt;/strong&gt; returns the value as the specified &lt;em&gt;data_type&lt;/em&gt;; if an error occurs, null is returned. However if you request a conversion that is explicitly not permitted, then &lt;strong&gt;TRY_CAST&lt;/strong&gt; fails with an error.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
TRY_CAST ( expression &lt;span&gt;AS&lt;/span&gt; data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )
TRY_CONVERT ( data_type &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;, expression &lt;span&gt;[&lt;/span&gt;&lt;span&gt;, style &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1，try_cast 返回null&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;CASE&lt;/span&gt; &lt;span&gt;WHEN&lt;/span&gt; TRY_CAST(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;) &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; 
                &lt;span&gt;THEN&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cast failed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;ELSE&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cast succeeded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;END&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; Result;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，try_cast 转换失败，返回error&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; TRY_CAST(&lt;span&gt;4&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; xml) &lt;span&gt;AS&lt;/span&gt; Result;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Explicit conversion from data type int to xml is not allowed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，try_cast转换成功&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SET&lt;/span&gt;&lt;span&gt; DATEFORMAT mdy;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; TRY_CAST(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;12/31/2010&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; datetime2) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Result;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/628084/201605/628084-20160505142359216-213177766.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，转换的性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;转换函数的性能是不同的，经过测试，cast 和 convert 的转换性能最好，要比try_cast和try_convert要好一些；而Cast的转换性能比convert要好一点。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mssqltips.com/sqlservertip/3018/performance-comparison-of-the-sql-server-parse-cast-convert-and-tryparse-trycast-tryconvert-functions/&quot;&gt;Performance Comparison of the SQL Server PARSE, CAST, CONVERT and TRY_PARSE, TRY_CAST, TRY_CONVERT Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms187928.aspx&quot; target=&quot;_blank&quot;&gt;CAST and CONVERT (Transact-SQL)&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/5461799.html</dc:identifier>
</item>
</channel>
</rss>