<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[BlueZ] 2、使用bluetoothctl搜索、连接、配对、读写、使能notify蓝牙低功耗设备 - beautifulzzzz</title>
<link>http://www.cnblogs.com/zjutlitao/p/9589661.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjutlitao/p/9589661.html</guid>
<description>&lt;p&gt;星期三, 05. 九月 2018 02:03上午 - beautifulzzzz&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://btfzmd.oss-cn-shanghai.aliyuncs.com/base/bar.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;1、前言&lt;/h3&gt;
&lt;p&gt;上一篇讲了如何编译安装BlueZ-5，本篇主要在于玩BlueZ，用命令行去操作BLE设备：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://btfzmd.oss-cn-shanghai.aliyuncs.com/base/bar.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;gatttool-老工具趟坑&quot;&gt;2、gatttool —— 老工具趟坑&lt;/h3&gt;
&lt;p&gt;刚开始跟着 &lt;a href=&quot;https://www.jaredwolff.com/blog/get-started-with-bluetooth-low-energy/&quot;&gt;Get Started with Bluetooth Low Energy on Linux&lt;/a&gt; 操作gatttool，发现坑太多（主要原因是工具老了）：&lt;/p&gt;
&lt;p&gt;采用&lt;code&gt;sudo gatttool -b 4D:69:98:0E:91:5E -I&lt;/code&gt;去连接&lt;br/&gt;发现会报错：&lt;code&gt;Error: connect error: Connection refused (111)&lt;/code&gt;&lt;br/&gt;最终参考LINK-11发现需要加random选项&lt;sup&gt;(&lt;a href=&quot;https://stackoverflow.com/questions/32947807/cannot-connect-to-ble-device-on-raspberry-pi&quot;&gt;#1&lt;/a&gt;)&lt;sup&gt;：&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;➜  ~  sudo gatttool -b 4D:69:98:0E:91:5E -I
[4D:69:98:0E:91:5E][LE]&amp;gt; connect
Attempting to connect to 4D:69:98:0E:91:5E
Error: connect error: Connection refused (111)
[4D:69:98:0E:91:5E][LE]&amp;gt; exit
➜  ~  sudo gatttool  -t random  -b 4D:69:98:0E:91:5E -I
[4D:69:98:0E:91:5E][LE]&amp;gt; connect
Attempting to connect to 4D:69:98:0E:91:5E
Connection successful
[4D:69:98:0E:91:5E][LE]&amp;gt; 
(gatttool:3104): GLib-WARNING **: Invalid file descriptor.&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;过一回会10S自动断开，网上说这个工具老了，不建议用了&lt;sup&gt;(&lt;a href=&quot;https://www.spinics.net/lists/linux-bluetooth/msg67617.html&quot;&gt;#2&lt;/a&gt;)&lt;sup&gt;:&lt;/sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;There are new tools to use with GATT, bluetoothctl/bluetoothd is the preferred since with that you have GAP, etc, 
but if want to use a stand alone tool then I suggest you use btgatt-client.&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;&lt;img src=&quot;https://btfzmd.oss-cn-shanghai.aliyuncs.com/base/bar.png&quot;/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&quot;bluetoothctlnb的新工具&quot;&gt;&lt;sup&gt;3、bluetoothctl——NB的新工具&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;&lt;sup&gt;命令行进入bluetoothctl操作环境&lt;sup&gt;(&lt;a href=&quot;https://mcuoneclipse.com/2016/12/19/tutorial-ble-pairing-the-raspberry-pi-3-model-b-with-hexiwear/&quot;&gt;#6&lt;/a&gt;)&lt;sup&gt;：&lt;/sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;bluetoothctl&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;我在手机上用lightblue模拟一个BLE设备ty_prod，之后对其service进行修改，调用scan on进行搜索还是老的，&lt;br/&gt;最终发现要先用remove移除之前的设备，之后再scan就会出现&lt;code&gt;[NEW] Device 72:3B:E1:81:4E:4F ty_prod&lt;/code&gt;设备&lt;br/&gt;&lt;strong&gt;注：&lt;/strong&gt; 用lightblue模拟的设备的MAC不是固定的&lt;br/&gt;&lt;strong&gt;注：&lt;/strong&gt; 我发现在lightblue中无论怎么模拟BLE设备，一旦被连上搜索到的service都是IPone的&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[bluetooth]# devices
Device 28:ED:6A:A0:26:B7 ty_prod
Device 58:71:33:00:00:24 Bluetooth Keyboard
Device 00:1A:7D:DA:71:0A SHEN-PC
Device 94:87:E0:B3:AC:6F Mi Phone
[bluetooth]# remove 28:ED:6A:A0:26:B7 
...
[bluetooth]# scan on
Discovery started
[NEW] Device 72:3B:E1:81:4E:4F ty_prod
[bluetooth]# scan off
...
Discovery stopped
[bluetooth]# connect 72:3B:E1:81:4E:4F
Attempting to connect to 72:3B:E1:81:4E:4F
[CHG] Device 72:3B:E1:81:4E:4F Connected: yes
Connection successful
[ty_prod]&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;索性就用IPhone自带的服务做测试了~&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[ty_prod]# info
Device 28:ED:6A:A0:26:B7 (public)
    Name: tuya_mdev_test
    Alias: tuya_mdev_test
    Appearance: 0x0040
    Icon: phone
    Paired: yes
    Trusted: no
    Blocked: no
    Connected: yes
    LegacyPairing: no
    UUID: Fax                       (00001111-0000-1000-8000-00805f9b34fb)
    UUID: Generic Access Profile    (00001800-0000-1000-8000-00805f9b34fb)
    UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb)
    UUID: Current Time Service      (00001805-0000-1000-8000-00805f9b34fb)
    UUID: Device Information        (0000180a-0000-1000-8000-00805f9b34fb)
    UUID: Battery Service           (0000180f-0000-1000-8000-00805f9b34fb)
    UUID: Vendor specific           (7905f431-b5ce-4e99-a40f-4b1e122d00d0)
    UUID: Vendor specific           (89d3502b-0f36-433a-8ef4-c502ad55f8dc)
    UUID: Vendor specific           (9fa480e0-4967-4542-9390-d343dc5d04ae)
    UUID: Vendor specific           (d0611e78-bbb4-4591-a5f8-487910ae4366)
[CHG] Device 28:ED:6A:A0:26:B7 ServicesResolved: no
[CHG] Device 28:ED:6A:A0:26:B7 Connected: no
&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;我们用Current Time Service，列出所有attributes操作如下：&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[tuya_mdev_test]# menu gatt
[tuya_mdev_test]# list-attributes 28:ED:6A:A0:26:B7
...
Primary Service
    /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041
    00001805-0000-1000-8000-00805f9b34fb
    Current Time Service
Characteristic
    /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0045
    00002a0f-0000-1000-8000-00805f9b34fb
    Local Time Information
Characteristic
    /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0042
    00002a2b-0000-1000-8000-00805f9b34fb
    Current Time
Descriptor
    /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0042/desc0044
    00002902-0000-1000-8000-00805f9b34fb
    Client Characteristic Configuration
...&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;上面&lt;code&gt;Current Time Service&lt;/code&gt;对应的服务如下图：&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;img src=&quot;http://odff1d90v.bkt.clouddn.com/20180905/bluez_2.png&quot;/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;我们选择Current Time进行操作UUID：0x2A2B&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[ty_prod]# select-attribute /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0042
[tuya_mdev_test:/service0041/char0042]# read
Attempting to read /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0042
[CHG] Attribute /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041/char0042 Value:
  e2 07 09 05 01 24 11 03 f1 02                    .....$....      
  e2 07 09 05 01 24 11 03 f1 02                    .....$.... 
[tuya_mdev_test:/service0041/char0042]# attribute-info
Characteristic - Current Time
    UUID: 00002a2b-0000-1000-8000-00805f9b34fb
    Service: /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0041
    Value:
  e2 07 09 05 01 2e 01 03 f5 02                    ..........      
    Notifying: yes
    Flags: read
    Flags: notify&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;读出结果大致意思应该是：&lt;strong&gt;2018-9/5-1:36:17 周三&lt;/strong&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;读取一下0x180A的Device Information:&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[tuya_mdev_test:/service0006/char0007]# select-attribute /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0047/char004a
[tuya_mdev_test:/service0047/char004a]# attribute-info
Characteristic - Model Number String
    UUID: 00002a24-0000-1000-8000-00805f9b34fb
    Service: /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0047
    Flags: read
[tuya_mdev_test:/service0047/char004a]# read
Attempting to read /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0047/char004a
[CHG] Attribute /org/bluez/hci0/dev_47_B1_26_C1_81_18/service0047/char004a Value:
  69 50 68 6f 6e 65 36 2c 32                       iPhone6,2       
  69 50 68 6f 6e 65 36 2c 32                       iPhone6,2    &lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;当然写、使能notify也很简单，看help即可。最后断开连接、并退出！！！&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;[tuya_mdev_test:/service0047/char004a]# disconnect 28:ED:6A:A0:26:B7
Attempting to disconnect from 28:ED:6A:A0:26:B7
[CHG] Device 28:ED:6A:A0:26:B7 ServicesResolved: no
Successful disconnected
[CHG] Device 28:ED:6A:A0:26:B7 Connected: no
[bluetooth]# quit&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;
&lt;p&gt;&lt;sup&gt;&lt;img src=&quot;https://btfzmd.oss-cn-shanghai.aliyuncs.com/base/bar.png&quot;/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;sup&gt;LINKS&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;&lt;sup&gt;&lt;a href=&quot;https://stackoverflow.com/questions/32947807/cannot-connect-to-ble-device-on-raspberry-pi&quot;&gt;[1].Cannot connect to BLE device on Raspberry Pi&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.spinics.net/lists/linux-bluetooth/msg67617.html&quot;&gt;[2].Invalid file descriptor gatttool of bluez 5.32&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jaredwolff.com/blog/get-started-with-bluetooth-low-energy/&quot;&gt;[3].Get Started with Bluetooth Low Energy on Linux&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://learn.adafruit.com/reverse-engineering-a-bluetooth-low-energy-light-bulb/control-with-bluez&quot;&gt;[4].Reverse Engineering a Bluetooth Low Energy Light Bulb&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://elinux.org/images/3/32/Doing_Bluetooth_Low_Energy_on_Linux.pdf&quot;&gt;[5].Doing Bluetooth Low Energy on Linux&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://mcuoneclipse.com/2016/12/19/tutorial-ble-pairing-the-raspberry-pi-3-model-b-with-hexiwear/&quot;&gt;[6].Tutorial: BLE Pairing the Raspberry Pi 3 Model B with Hexiwear&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;img src=&quot;https://btfzmd.oss-cn-shanghai.aliyuncs.com/base/bar.png&quot;/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sup&gt;&lt;code&gt;@beautifulzzzz
智能硬件、物联网，热爱技术，关注产品
博客：http://blog.beautifulzzzz.com
园友交流群：414948975&lt;/code&gt;&lt;/sup&gt;&lt;/pre&gt;</description>
<pubDate>Tue, 04 Sep 2018 18:12:00 +0000</pubDate>
<dc:creator>beautifulzzzz</dc:creator>
<og:description>星期三, 05. 九月 2018 02:03上午 beautifulzzzz ![][ bar] 1、前言 上一篇讲了如何编译安装BlueZ 5，本篇主要在于玩BlueZ，用命令行去操作BLE设备：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjutlitao/p/9589661.html</dc:identifier>
</item>
<item>
<title>JQuery扩展方法实现Form表单与Json互相转换 - Elder_James</title>
<link>http://www.cnblogs.com/ElderJames/p/9589568.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ElderJames/p/9589568.html</guid>
<description>&lt;p&gt;记两段代码，使用JQuery实现从表单获取json与后端交互，以及把后端返回的json映射到表单相应的字段上。&lt;/p&gt;
&lt;h2 id=&quot;把表单转换出json对象&quot;&gt;把表单转换出json对象&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;
    //把表单转换出json对象
    $.fn.toJson = function () {
        var self = this,
            json = {},
            push_counters = {},
            patterns = {
                &quot;validate&quot;: /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                &quot;key&quot;: /[a-zA-Z0-9_]+|(?=\[\])/g,
                &quot;push&quot;: /^$/,
                &quot;fixed&quot;: /^\d+$/,
                &quot;named&quot;: /^[a-zA-Z0-9_]+$/
            };

        this.build = function (base, key, value) {
            base[key] = value;
            return base;
        };

        this.push_counter = function (key) {
            if (push_counters[key] === undefined) {
                push_counters[key] = 0;
            }
            return push_counters[key]++;
        };

        $.each($(this).serializeArray(), function () {
            // skip invalid keys
            if (!patterns.validate.test(this.name)) {
                return;
            }

            var k,
                keys = this.name.match(patterns.key),
                merge = this.value,
                reverse_key = this.name;

            while ((k = keys.pop()) !== undefined) {
                // adjust reverse_key
                reverse_key = reverse_key.replace(new RegExp(&quot;\\[&quot; + k + &quot;\\]$&quot;), '');

                // push
                if (k.match(patterns.push)) {
                    merge = self.build([], self.push_counter(reverse_key), merge);
                }

                // fixed
                else if (k.match(patterns.fixed)) {
                    merge = self.build([], k, merge);
                }

                // named
                else if (k.match(patterns.named)) {
                    merge = self.build({}, k, merge);
                }
            }

            json = $.extend(true, json, merge);
        });

        return json;
    };
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;将josn对象赋值给form使表单控件也显示相应的状态&quot;&gt;将josn对象赋值给form，使表单控件也显示相应的状态&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;   //将josn对象赋值给form
    $.fn.loadData = function (obj) {
        var key, value, tagName, type, arr;

        this.reset();

        for (var x in obj) {
            if (obj.hasOwnProperty(x)) {
                key = x;
                value = obj[x];

                this.find(&quot;[name='&quot; + key + &quot;'],[name='&quot; + key + &quot;[]']&quot;).each(function () {
                    tagName = $(this)[0].tagName.toUpperCase();
                    type = $(this).attr('type');
                    if (tagName == 'INPUT') {
                        if (type == 'radio') {
                            if ($(this).val() == value) {
                                    $(this).attr('checked', true);
                            }
                        } else if (type == 'checkbox') {
                            arr = value.split(',');
                            for (var i = 0; i &amp;lt; arr.length; i++) {
                                if ($(this).val() == arr[i]) {
                                        $(this).attr('checked', true);
                                    break;
                                }
                            }
                        } else {
                            $(this).val(value);
                        }
                    } else if (tagName == 'SELECT' || tagName == 'TEXTAREA') {
                        $(this).val(value);
                    }
                });
            }
        }
    }
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 04 Sep 2018 17:13:00 +0000</pubDate>
<dc:creator>Elder_James</dc:creator>
<og:description>JQuery笔记 记两段代码，使用JQuery实现从表单获取json与后端交互，以及把后端返回的json映射到表单相应的字段上。 把表单转换出json对象 将josn对象赋值给form，使表单控件也显</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ElderJames/p/9589568.html</dc:identifier>
</item>
<item>
<title>快速排序方法——python实现 - hangingter</title>
<link>http://www.cnblogs.com/Hangingter/p/9589427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Hangingter/p/9589427.html</guid>
<description>&lt;p&gt;参考博文：http://www.cnblogs.com/jingmoxukong/p/4302891.html&lt;/p&gt;

&lt;p&gt;快速排序是一种&lt;strong&gt;交换排序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;快速排序由C. A. R. Hoare在1962年提出。&lt;/p&gt;
&lt;p&gt;它的基本思想是：通过一趟排序将要排序的数据&lt;strong&gt;分割&lt;/strong&gt;成独立的两部分：&lt;strong&gt;分割点左边都是比它小的数，右边都是比它大的数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;它的基本流程是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以&lt;a href=&quot;https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695&quot; target=&quot;_blank&quot; data-lemmaid=&quot;1740695&quot;&gt;递归&lt;/a&gt;进行，以此达到整个数据变成有序&lt;a href=&quot;https://baike.baidu.com/item/%E5%BA%8F%E5%88%97/1302588&quot; target=&quot;_blank&quot; data-lemmaid=&quot;1302588&quot;&gt;序列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;算法结构如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1168087/201809/1168087-20180905002715982-1798559129.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图中，演示了快速排序的处理过程：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始状态&lt;/strong&gt;为一组无序的数组：2、4、5、1、3。&lt;/p&gt;
&lt;p&gt;经过以上操作步骤后，完成了&lt;strong&gt;第一次的排序&lt;/strong&gt;，得到新的数组：1、2、5、4、3。&lt;/p&gt;
&lt;p&gt;新的数组中，以2为分割点，左边都是比2小的数，右边都是比2大的数。&lt;/p&gt;
&lt;p&gt;因为2已经在数组中找到了合适的位置，所以不用再动。&lt;/p&gt;
&lt;p&gt;2左边的数组只有一个元素1，所以显然不用再排序，位置也被确定。（注：这种情况时，left指针和right指针显然是重合的。因此在代码中，我们可以通过设置判定条件&lt;strong&gt;left&lt;/strong&gt;&lt;strong&gt;必须小于right&lt;/strong&gt;&lt;strong&gt;，如果不满足，则不用排序了&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;而对于2右边的数组5、4、3，设置left指向5，right指向3，开始继续&lt;strong&gt;重复图中的一、二、三、四步骤&lt;/strong&gt;，对新的数组进行排序。&lt;/p&gt;
&lt;p&gt;在此采用python语言实现，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;57&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
example = [1,3,4,5,2,6,9,7,8,0]

a = 0
b = len(example)-1

def quickSort(number,head,tail):
        if (head&amp;lt;tail):
                base = division(number,head,tail)
                #print(number[base],&quot;\n&quot;)
                quickSort(number,head,base-1)
                quickSort(number,base+1,tail)
        else:
                print(number)

def division(number,head,tail):
        base = number[head]
        while(head&amp;lt;tail):
                while(head&amp;lt;tail and number[tail]&amp;gt;=base):
                        tail-=1
                number[head] = number[tail]
                while (head&amp;lt;tail and  number[head]&amp;lt;=base):
                        head+=1
                number[tail] = number[head]
        number[head] = base
        return head



if __name__ == '__main__':
        quickSort(example,a,b)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1168087/201809/1168087-20180905002854665-742898349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;时间复杂度与空间复杂度&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当数据有序时，以第一个关键字为基准分为两个子序列，前一个子序列为空，此时执行效率最差。&lt;/p&gt;
&lt;p&gt;而当数据随机分布时，以第一个关键字为基准分为两个子序列，两个子序列的元素个数接近相等，此时执行效率最好。&lt;/p&gt;
&lt;p&gt;所以，数据越随机分布时，快速排序性能越好；数据越接近有序，快速排序性能越差。&lt;/p&gt;

&lt;p&gt;快速排序在每次分割的过程中，需要&lt;span lang=&quot;EN-US&quot;&gt; 1 个空间存储基准值。而快速排序的大概需要&lt;span lang=&quot;EN-US&quot;&gt; Nlog2N次的分割处理，所以占用空间也是&lt;span lang=&quot;EN-US&quot;&gt; Nlog2N 个。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 04 Sep 2018 16:33:00 +0000</pubDate>
<dc:creator>hangingter</dc:creator>
<og:description>快速排序（Quicksort）是对冒泡排序的一种改进，在此使用Python语言简单的递归实现该算法。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Hangingter/p/9589427.html</dc:identifier>
</item>
<item>
<title>【C语言】学习笔记8——结构struct - 早起的虫儿去吃鸟</title>
<link>http://www.cnblogs.com/yeyeck/p/9589344.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyeck/p/9589344.html</guid>
<description>&lt;p&gt;1. 先看个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;#define&lt;/span&gt; MAXTITL 41
&lt;span&gt;#define&lt;/span&gt; MAXAUTL 31

&lt;span&gt;struct&lt;/span&gt; book {                   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;结构模板，标记是 book &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;char&lt;/span&gt;&lt;span&gt; title[MAXTITL];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; author[MAXAUTL];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; value;
}; 

&lt;/span&gt;&lt;span&gt;char&lt;/span&gt; * s_gets(&lt;span&gt;char&lt;/span&gt; *, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; book library;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 把 library 声明为一个 book 类型的变量&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入书的标题：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    s_gets(library.title, MAXTITL);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;现在输入书的作者姓名：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    s_gets(library.author, MAXAUTL);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;现在输入书本的价格：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;library.value);
    
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s by %s: $%.2f\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, library.title, library.author, library.value);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s: \&quot;%s\&quot;($%.2f)\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, library.author, library.title, library.value);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Done.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 } 
 
 &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; * s_gets(&lt;span&gt;char&lt;/span&gt; *st, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
 {
     &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt; ret_val;
     &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt; find;
     ret_val &lt;/span&gt;=&lt;span&gt; fgets(st, n, stdin);
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ret_val)
     {
         find &lt;/span&gt;= strchr(st, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找换行符&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (find)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果地址不是NULL &lt;/span&gt;
            *find = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在此放置一个空字符&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (getchar() != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理输入行中剩余的字符 &lt;/span&gt;
&lt;span&gt;     }
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret_val;
 }
 
 &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 output:
 请输入书的标题：
我与地坛
现在输入书的作者姓名：
史铁生
现在输入书本的价格：
20
我与地坛 by 史铁生: $20.00
史铁生: &quot;我与地坛&quot;($20.00)
Done.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构变量：为了提高C语言表示数据的能力。&lt;/p&gt;
&lt;p&gt;　　比如说描述一本书，我们会用一个char数组表示书名， 再用一个char数组表示作者，一个float表示书的描述，但是我们要描述很5本书的时候，我们就得用5个char数组分别表示5本书名，5个char数组表示五本书的作者，5个float表示五本书的价格。这样做很麻烦，而且不容易维护他们之间的关系。所以就有了结构。&lt;/p&gt;
&lt;p&gt;　　结够有点像面向对象，但是只有属性，没有行为；&lt;/p&gt;
&lt;p&gt;2. 建立结构声明,并声明一个结构变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt; book {               &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;带标记定义结构，可重用&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;   
    &lt;span&gt;char&lt;/span&gt;&lt;span&gt; title[MAXTITL];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; author[MAXAUTL];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; value;
}; 

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; book library;

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; {               &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;不带标记定义结构， 不可重用&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;   
    &lt;span&gt;char&lt;/span&gt;&lt;span&gt; title[MAXTITL];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; author[MAXAUTL];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; value;
} library;             &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;定义结构的同时，声明一个结构变量。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3. 结构的内存模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1213881/201809/1213881-20180904223625222-905648650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4. 初始化结构变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt; book library = {   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;按顺序初始化&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我与地坛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;史铁生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，
    &lt;/span&gt;&lt;span&gt;20.00&lt;/span&gt;&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; book library = {   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;按成员名称初始化&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    .value &lt;/span&gt;= &lt;span&gt;20.00&lt;/span&gt;&lt;span&gt;,
    .author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;史铁生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，
    .title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我与地坛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; book library = {   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;局部初始化&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    .value &lt;/span&gt;= &lt;span&gt;20.00&lt;/span&gt;&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; book library = {   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;瞎j8初始化&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    .value &lt;/span&gt;= &lt;span&gt;20.00&lt;/span&gt;&lt;span&gt;,
    .author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;史铁生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，
    &lt;/span&gt;&lt;span&gt;5.00&lt;/span&gt;&lt;span&gt;    
};                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为value紧跟author， 最终value = 5.00，&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5. 访问结构的数据，用结构成员运算符 &lt;em&gt;(&lt;strong&gt;. )&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;6. 声明结构数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt; book library[&lt;span&gt;5&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.结构数组内存模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1213881/201809/1213881-20180904225554272-745357172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8. 嵌套结构&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;#define&lt;/span&gt; LEN 20

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; * msgs[&lt;span&gt;5&lt;/span&gt;] =&lt;span&gt; 
{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Thank you for the wonderful evening, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You certainly prove that a &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is a special kind of guy. We must get together&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;over a delicious &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; and have a few laughs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names{
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; first[LEN];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; last[LEN];
}; 

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; guy{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names handle;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; favfood[LEN];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; job[LEN];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; income;
};

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; guy fellow =&lt;span&gt; {
        {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ewen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Villard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grilled salmon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;personality coach&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;68112.0&lt;/span&gt;&lt;span&gt;
    };
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dear %s, \n\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, fellow.handle.first);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msgs[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;], fellow.handle.first);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msgs[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], fellow.job);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msgs[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msgs[&lt;span&gt;3&lt;/span&gt;], fellow.favfood, msgs[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fellow.income &amp;gt; &lt;span&gt;150000.0&lt;/span&gt;&lt;span&gt;)
        puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (fellow.income &amp;gt; &lt;span&gt;75000.0&lt;/span&gt;&lt;span&gt;)
        puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n%40s%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;See you soon,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%40s%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Shalala&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
output:
Dear Ewen,

  Thank you for the wonderful evening, Ewen.
You certainly prove that a personality coach
is a special kind of guy. We must get together
over a delicious grilled salmon and have a few laughs.

                                        See you soon,
                                        Shalala
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9. 指向结构的指针&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;#define&lt;/span&gt; LEN 20

&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names{
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; first[LEN];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; last[LEN];
}; 

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; guy{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names handle;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; favfood[LEN];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; job[LEN];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; income;
};

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; guy fellows[&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; {
        {
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ewen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Villard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grilled salmon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;personality coach&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;68112.0&lt;/span&gt;&lt;span&gt;
        },
        {
            {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Rondeny&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Swillbelly&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tripe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tabloid editor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;432400.00&lt;/span&gt;&lt;span&gt;
        }
    };
    
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; guy * him; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 声明一个指向结构的指针 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;address #1: %p #2: %p\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;fellows[&lt;span&gt;0&lt;/span&gt;], &amp;amp;fellows[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
    him &lt;/span&gt;= &amp;amp;fellows[&lt;span&gt;0&lt;/span&gt;];  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 告诉编译器该指针指向何处 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;him-&amp;gt;income is $%.2f: (*him).income is $%.2f\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, him-&amp;gt;income, (*&lt;span&gt;him).income);
    him&lt;/span&gt;++&lt;span&gt;;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;him-&amp;gt;favfood is %s: (*him).handle.last is %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, him-&amp;gt;favfood, (*&lt;span&gt;him).handle.last);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
output:

address #1: 000000000062FD90 #2: 000000000062FDE4
him-&amp;gt;income is $68112.00: (*him).income is $68112.00
him-&amp;gt;favfood is tripe: (*him).handle.last is Swillbelly

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10. 用指针访问结构成员&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt; guy * him;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个指向结构变量的指针&lt;/span&gt;

&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; guy barney;

him &lt;/span&gt;= &amp;amp;barney;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;让指针指向结构变量barney&lt;/span&gt;
him-&amp;gt;income；      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用 -&amp;gt; 运算符访问结构的成员变量，即 barney.income&lt;/span&gt;
&lt;span&gt;
(&lt;/span&gt;*him).income       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将指针解引用，即barney.income&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11. 向函数传递结构的信息&lt;/p&gt;
&lt;p&gt;　　a. 传递结构成员&lt;/p&gt;
&lt;p&gt;　　b. 传递结构地址&lt;/p&gt;
&lt;p&gt;　　c. 传递结构&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;#define&lt;/span&gt; FUNDLEN 50

&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; funds {
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; bank[FUNDLEN];
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; bankfund;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; save[FUNDLEN];
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; savefund;
};

&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum1(&lt;span&gt;double&lt;/span&gt;, &lt;span&gt;double&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum2(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; funds *&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum3(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; funds);

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; funds stan =&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Garlic-Melon Bank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;4032.27&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lucky's Savings and Loan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;8543.94&lt;/span&gt;&lt;span&gt;
    };
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stan has a total if $%.3f.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sum1(stan.bankfund, stan.savefund));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向函数传递结构成员 &lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stan has a total if $%.3f.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sum2(&amp;amp;stan));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向函数传递结构的地址 &lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stan has a total if $%.3f.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sum3(stan));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向函数传递结构&lt;/span&gt;
    
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum1(&lt;span&gt;double&lt;/span&gt; x, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; y)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (x +&lt;span&gt; y);
}

&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum2(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; funds *&lt;span&gt; money)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (money-&amp;gt;bankfund + money-&amp;gt;&lt;span&gt;savefund);
}
&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; sum3(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; funds moolah)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (moolah.bankfund +&lt;span&gt; moolah.savefund);
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
output:

Stan has a total if $12576.210.
Stan has a total if $12576.210.
Stan has a total if $12576.210.

--------------------------------
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12.  结构中的字符数组和指针&lt;/p&gt;
&lt;p&gt;　　假设有一个结构声明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; LEN 20
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names{
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; first[LEN];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; last[LEN];
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用指向char的指针来代替字符数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; pnames{
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt; first;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt; last;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样做是可以的。但是会带来麻烦。考虑以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt; names veep = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Talia&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Summers};&lt;/span&gt;
&lt;span&gt;struct&lt;/span&gt; pnames treas = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Brad&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fallingjaw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;};
printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s and %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, veep.first, treas.first);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　代码运行都没有问题，内存分配是怎么做的？&lt;/p&gt;
&lt;p&gt;　　对于struct names 类型的结构变量 veep , 以上字符串都存储在结构内部，结构总共要分配40字节存储姓名。&lt;/p&gt;
&lt;p&gt;　　然而对于 struct pnames类型结构变量 treas，以上字符串存储在编译器存储常量的地方，结构本身只存储了两个地址， 在我们的系统中共占16字节（64位系统一个地址是8字节）。 struct pnames 结构不用为字符串分配任何存储空间。他使用的是存储在别处的字符串。&lt;/p&gt;
&lt;p&gt;　　考虑以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; names accountant;
&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; pnames attorney;
puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Enter the last name of your accountant:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, accountant.last);
puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Enter the last name of your attorney:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, attorney.last);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;潜在的危险&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用户的输入存储到哪里去了？ &lt;/p&gt;
&lt;p&gt;       对于 accountant， 它的姓被存储在names的last中。&lt;/p&gt;
&lt;p&gt;　　对于 attorney，它的姓被存储在 attorney.last所指向的地址中。由于attorney未被初始化，所以attorney.last可能指向任何一个地址，所以这个操作可能会造成不想要的修改。&lt;/p&gt;
&lt;p&gt;　　因此，如果要用结构存储字符串，用字符数组作为成员笔记简单。用指向char的指针也行，但是误用会导致严重的问题。&lt;/p&gt;

</description>
<pubDate>Tue, 04 Sep 2018 16:01:00 +0000</pubDate>
<dc:creator>早起的虫儿去吃鸟</dc:creator>
<og:description>1. 先看个例子 结构变量：为了提高C语言表示数据的能力。 比如说描述一本书，我们会用一个char数组表示书名， 再用一个char数组表示作者，一个float表示书的描述，但是我们要描述很5本书的时候</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyeck/p/9589344.html</dc:identifier>
</item>
<item>
<title>宽字节注入浅浅谈！ - 沈大帅来咯</title>
<link>http://www.cnblogs.com/DaShuai-PX/p/9589305.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DaShuai-PX/p/9589305.html</guid>
<description>&lt;p&gt;&lt;span&gt;   今天要写的是宽字节注入，这章节写的很浅，浅到让我有点不想写下去了。不过每天总要留下点痕迹吧，生命的痕迹嘛。后期我会再去补。&lt;/span&gt;Ok&lt;span&gt;，让我们继续继续。（图在后期上传）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在我们注入的时候，会遇到一种情况。输入&lt;/span&gt;xxx?id=1’ &lt;span&gt;，并且它是字符型字符型字符型。（重要的说三遍，是需要用&lt;/span&gt;’&lt;span&gt;闭合的）这时你会发现出现了&lt;/span&gt;“错误”。用brup&lt;span&gt;抓取包&lt;/span&gt;看一下，会发现我们输入的单引号被注释了。语句&lt;span&gt;变成了&lt;/span&gt;xxx?id=1’\’’，这时候就不能闭合了，也就没法构建我们的注入语句了。很尴尬啊，难道就没办法了吗？&lt;/p&gt;
&lt;p&gt;        不，有一种特殊情况可以支持我们注入。那就是当我们的数据库编码为GBK时，可以支持我们正常注入。只需要我们在地址后面加一个%df，然后再加单引号&lt;span&gt;就&lt;/span&gt;ok&lt;span&gt;了。为什么可以这样做呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为这时候的数据库编码为&lt;/span&gt;GBK&lt;span&gt;，在外面注入时大家通常都会看到自己输入的空格变成了&lt;/span&gt;&lt;span&gt;%20&lt;/span&gt;&lt;span&gt;。这是&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;转码后的结果。我们的数据就是转码完之后再放进数据库进行查询的。我们的输入的&lt;/span&gt;&lt;span&gt;%df&lt;/span&gt;’。首先会因为’&lt;span&gt;被转义变成&lt;/span&gt;%df\’,&lt;span&gt;因为&lt;/span&gt;&lt;span&gt;\&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;编码为&lt;/span&gt;&lt;span&gt;%5c&lt;/span&gt;&lt;span&gt;，所以总的变成了&lt;/span&gt;&lt;span&gt;%df%5c&lt;/span&gt;’(‘转码还是’)&lt;span&gt;，又因为我们的数据库编码为&lt;/span&gt;&lt;span&gt;GBK&lt;/span&gt;&lt;span&gt;而不是&lt;/span&gt;&lt;span&gt;GB2312&lt;/span&gt;&lt;span&gt;。所以&lt;/span&gt;&lt;span&gt;\&lt;/span&gt;&lt;span&gt;转码过来的&lt;/span&gt;&lt;span&gt;%5c&lt;/span&gt;&lt;span&gt;会在&lt;/span&gt;&lt;span&gt;GBK&lt;/span&gt;&lt;span&gt;的编码范围内。&lt;/span&gt;&lt;span&gt;GB2312&lt;/span&gt;&lt;span&gt;大家都不陌生吧？它是编码适用于汉字处理、汉字通信等系统之间的信息交换的。它会和前面的&lt;/span&gt;&lt;span&gt;%df&lt;/span&gt;&lt;span&gt;组合在一起，变成&lt;/span&gt;&lt;span&gt;%df%5c&lt;/span&gt;&lt;span&gt;，这是汉字“連”所以&lt;/span&gt;&lt;span&gt;%df%5c&lt;/span&gt;’变成了連’所以’它就逃出来了，这样前面也就闭合了。闭合完之后我们的操作就和之前的一样的。&lt;/p&gt;
&lt;p&gt;        不过要注意的一点就是，我们这些操作为的是能让这个语句闭合，从而可以继续我们的操作。如果当我们的注入语句中出现库名需要用’xx’&lt;span&gt;引起来时就会出现错误。无法引用这个库。这时候我们需要利用另外一种方法&lt;/span&gt;:&lt;span&gt;嵌套查询。就是用其他的函数来引出我们所需要用的这个库或其他东西。如：&lt;/span&gt;&lt;span&gt;select table_name from information_schema.tables where table_schema=&lt;/span&gt;’sql’ limit 0,1  &lt;span&gt;这时&lt;/span&gt;’sql’&lt;span&gt;（&lt;/span&gt;sql&lt;span&gt;在我文章里的意思是当前数据库）就不行了。我们需要将语句换成&lt;/span&gt;&lt;span&gt;select table_name from information_schema.tables where table_schema=&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;select database()) limit 0,1&lt;/span&gt; &lt;span&gt;这样就可以运行了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以我们每学到一种方法就必须将它吃透。为什么要这样用，怎么用。这样才能慢慢变好。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   在这里贴一段困扰了我&lt;/span&gt;N&lt;span&gt;分钟的代码，你们可以在自己那复制来测试。&lt;/span&gt;&lt;span&gt;Select column_name from information_schema.columns where table_schema=(select databses()) and table_name=( select table_name from information_schema.tables where table_schema=(select database()) limit 0,1) limit 0,1&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pass:&lt;span&gt;坚持每日一更。完毕，凌晨了睡觉觉！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 04 Sep 2018 15:46:00 +0000</pubDate>
<dc:creator>沈大帅来咯</dc:creator>
<og:description>今天要写的是宽字节注入，这章节写的很浅，浅到让我有点不想写下去了。不过每天总要留下点痕迹吧，生命的痕迹嘛。后期我会再去补。Ok，让我们继续继续。（图在后期上传） 在我们注入的时候，会遇到一种情况。输入</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DaShuai-PX/p/9589305.html</dc:identifier>
</item>
<item>
<title>python自学——文件修改 - 皇城根儿</title>
<link>http://www.cnblogs.com/huangchenggener/p/9589301.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangchenggener/p/9589301.html</guid>
<description>&lt;pre&gt;
#如何修改文件，我们知道文件因为在磁盘上已经有储存了，后面要更新或修改，只能在在原来文件后面追加&lt;br/&gt;使用f=open(&quot;wenjian_name&quot;,&quot;r+&quot;,encoding=&quot;utf-8“）&lt;br/&gt;这里的“r+&quot;指的是读 写，也可以替换成”a+“append+&lt;br/&gt;但是无法对原文件中间及之前的内容进行改变&lt;br/&gt;那么怎么修改文件内容呢？&lt;br/&gt;第一种方法就是讲原文件都下载到内存中进行修改，然后放入到一个新的文件中（但是这种方法对及三件的要求比较高）&lt;br/&gt;第二种就是对文件内容一行一行的读取，然后选择，如果是我们想要的我们就保存到新的文件中，如果是需要替换的我&lt;br/&gt;们就将内容修改。（推荐使用第二种）&lt;br/&gt;下面我们就介绍一下第二种方法的简单应用：&lt;br/&gt;首先你先准备两个文件，一个是原文件（yesterday），另外一个是我们想得到的文件（纸短情长）&lt;br/&gt;f=open(&quot;yesterday&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;)&lt;br/&gt;f_bet=open(&quot;纸短情长&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)&lt;br/&gt;for line in f:&lt;br/&gt;if &quot;你呀&quot;in line:&lt;br/&gt;line=line.replace(&quot;你呀&quot;,&quot;bianhuanchenggg&quot;) #这个地方一定要使用line=line.replace()赋值，不然更改不了&lt;br/&gt;f_bet.write(line)&lt;br/&gt;f.close()&lt;br/&gt;f_bet.close()&lt;/pre&gt;</description>
<pubDate>Tue, 04 Sep 2018 15:44:00 +0000</pubDate>
<dc:creator>皇城根儿</dc:creator>
<og:description>#如何修改文件，我们知道文件因为在磁盘上已经有储存了，后面要更新或修改，只能在在原来文件后面追加使用f=open(&quot;wenjian_name&quot;,&quot;r+&quot;,enc</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangchenggener/p/9589301.html</dc:identifier>
</item>
<item>
<title>tensorflow源码解析之common_runtime-direct_session - jicanghai</title>
<link>http://www.cnblogs.com/jicanghai/p/9589285.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jicanghai/p/9589285.html</guid>
<description>&lt;ol&gt;&lt;li&gt;核心概念&lt;/li&gt;
&lt;li&gt;direct_session
&lt;ol&gt;&lt;li&gt;direct_session.h&lt;/li&gt;
&lt;li&gt;direct_session.cc&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;读过之前文章的读者应该还记得，session是一个执行代理。我们把计算图和输入交给session，由它来调度执行器，执行计算产生结果。TF给我们提供了一个最简单的执行器direction_session。按照当前的理解，我们觉得direction_session的实现应该是非常简单而直接的，毕竟执行器的复杂结构我们在executor那篇已经见到了。但实际上，问题的难点在于，有时候我们只是希望以计算图中某些节点为输入，某些节点为输出，来执行图中的一小部分计算，而不需要执行整张图，另外一个方面，这种对图部分执行的任务，在同一张图上可能同时存在多个。为了应对这种情况，direct_session就衍生出了很多辅助数据。&lt;/p&gt;

&lt;h2 id=&quot;direct_session.h&quot;&gt;2.1 direct_session.h&lt;/h2&gt;
&lt;p&gt;DirectSession类提供了丰富的数据和接口，以下为了表达简洁，我们略去了部分函数的形参：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class DirectSession : public Session {
  public:
    DirectionSession(const SessionOptions&amp;amp; options, const Device* device_mgr, DirectSessionFactory* factory);
    
    Status Create(const GraphDef&amp;amp; graph) override;
    Status Extend(const GraphDef&amp;amp; graph) override;
    Status Run(...) override;//运行图
    
    Status PRunSetup(...);//部分运行图准备
    Status PRun(...);//部分运行图
    
    Status Reset(const std::vector&amp;lt;string&amp;gt;&amp;amp; containers);//清空device_mgr中的containers，如果containers本身就是空的，那么清空默认容器
    
    Status ListDevice(...) override;
    Status Close() overrides;
    Status LocalDeviceManager(const DeviceMgr** output) overrides;
    
    void ExportCostModels(...);

  private:
    Status MaybeInitializeExecutionState(...);//给定graph之后，如果执行器状态没有初始化，则初始化基础的执行器状态
    
    Status GetOrCreateExecutors(...);//对于一组给定的输入和输出，在一个给定的执行器集合中检索，是否存在合适的执行器，如果没有，则创造一个
    
    Status CreateGraphs(...);//给定graph_def_和设备，以及输入和输出，创造多张图，这些新创建的图共享一个公共的函数库flib_def
    
    Status ExtendLocked(const GraphDef&amp;amp; graph);//Extend的内部执行类
    
    Status ResourceHandleToInputTensor(...);
    
    Status SendPRunInputs(...);//将更多的输入提供给执行器，启动后续的执行
    
    Status RecvPRunOutputs(...);//从执行器中获取更多的输出，它会等待直到输出张量计算完成
    
    Status CheckFetch(...);//检查需求的输出能否根据给定的输入计算出来
    
    Status WaitForNotification(...);
    Status CheckNotClosed();
    
    const SessionOptions options_;
    
    //设备相关的结构
    const std::unique_ptr&amp;lt;const DeviceMgr&amp;gt; device_mgr_;
    std::vector&amp;lt;Device*&amp;gt; devices_;
    DeviceSet device_set_;
    
    string session_handle_;
    bool graph_created_ GUARDED_BY(graph_def_lock_) = false;
    mutex graph_def_lock_;
    GraphDef graph_def_ GUARDED_BY(graph_def_lock_);
    
    std::vector&amp;lt;std::pair&amp;lt;thread::ThreadPool*, bool&amp;gt;&amp;gt; thread_pools_;//被用来执行op的线程池，用一个布尔值来标志，是否拥有这个线程池
    
    Status init_error_;
    
    bool sync_on_finish_ = true;//如果为真，阻塞线程直到设备已经完成了某个步骤内的所有队列中的操作
    void SchedClosure(thread::ThreadPool* pool, std::function&amp;lt;void()&amp;gt; c);//在线程池中调度c
    
    mutex executor_lock_;//保护执行器
    
    std::unordered_map&amp;lt;string, std::shared_ptr&amp;lt;ExecutorsAndkeys&amp;gt;&amp;gt; executor_ GUARDED_BY(executor_lock_);//由签名映射到它的执行器，签名包括了部分执行图的输入和输出，由这两个就能唯一确定一个部分执行图
    
    std::unordered_map&amp;lt;string, std::shared_ptr&amp;lt;RunState&amp;gt;&amp;gt; partial_runs_ GUARDED_BY(executor_lock_);//从签名到部分执行状态，每一个部分执行都会有一个专门保存其状态的结构
    
    SessionState session_state_;//保存了所有当前在会话中正在存活的张量
    
    DirectSessionFactory* const factory_;
    CancellationManager* cancellation_manager_;
    
    std::unordered_map&amp;lt;string, string&amp;gt; stateful_placements_ GUARDED_BY(graph_def_lock_);//对于有状态的节点（比如params和queue），保存节点名称到节点所在设备的映射，一旦这些节点被放置在了某个设备上，是不允许再移动的
    
    std::unique_ptr&amp;lt;SimpleGraphExecutionState&amp;gt; execution_state_ GUARDED_BY(graph_def_lock_);//放置整张图时使用
    
    std::unique_ptr&amp;lt;FunctionLibraryDefinition&amp;gt; flib_def_;//在任何的重写或优化之前的函数库，特别是，CreateGraphs函数会修改函数库
    
    mutex closed_lock_;
    bool closed_ GUARDED_BY(closed_lock_) = false;//如果会话已经被关闭，则为true
    
    //为这个会话生成唯一的名字
    std::atomic&amp;lt;int64&amp;gt; edge_name_counter_ = {0};
    std::atomic&amp;lt;int64&amp;gt; handle_name_counter_ = {0};
    
    static std::atomic_int_fast64_t step_id_counter_;//为所有的会话生成唯一的step id
    
    const int64 operation_timeout_in_ms_ = 0;//全局对阻塞操作的超时阈值
    
    CostModelManager cost_model_manager_;//为当前会话中执行的图管理所有的损失模型
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，DirectSession里面的很多内容都是为部分执行准备的。由于计算图仅是一个计算的规划，我们可以通过为同一张图选取不同的输入和输出，来执行不同的计算。而不同的计算需要不同的执行器，也需要不同的存储结构来保存各个计算的当前状态。为此，TF专门给出了几个结构体，首先我们来看一下对不同计算执行器的封装：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//为每一个partition准备的执行器和函数运行时库
struct PerPartionExecutorAndLib {
    Graph* graph = nullptr;
    std::unique_ptr&amp;lt;FunctionLibraryRuntime&amp;gt; flib;
    std::unique_ptr&amp;lt;Executor&amp;gt; executor;
};

//为每一次计算提供的数据结构
struct ExecutorsAndKeys {
    std::atomic_int_fast64_t step_count;
    std::unique_ptr&amp;lt;Graph&amp;gt; graph;
    NameNodeMap name_to_node;
    std::unique_ptr&amp;lt;FunctionLibraryDefinition&amp;gt; flib_def;
    std::vector&amp;lt;PerPartitionExecutorsAndLib&amp;gt; items;
    std::unordered_map&amp;lt;string, size_t&amp;gt; input_name_to_index;
    std::unordered_map&amp;lt;string, string&amp;gt; input_name_to_rendezvous_key;
    std::unordered_map&amp;lt;string, size_t&amp;gt; output_name_to_index;
    std::unordered_map&amp;lt;string, string&amp;gt; output_name_to_rendezvous_key;
    
    DataTypeVector input_types;
    DataTypeVector output_types;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于一张计算图来说，我们的每一次计算的执行，不论是完整图的计算还是部分图的计算，都有可能是跨设备的，因此都需要先做节点放置，把图的节点分割到不同的设备上，每一个设备上放置了一个图的partition，每个partition有对应的运行时函数库和执行器。而对于每一种计算来说，我们需要一个vector把不同partition的信息存储起来。&lt;br/&gt;另外，刚才提到我们还需要为每一次计算提供保存当前状态的结构，下面就来看一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//对于每一个partition内的执行，会话保存了一个RunState
struct RunState {
    mutex mu_;
    Status status GUARDED_BY(mu_);
    IntraProcessRendezvous* rendez = nullptr;
    std::unique_ptr&amp;lt;StepStatsCollector&amp;gt; collector;
    Notification executors_done;
    std::unordered_map&amp;lt;string, bool&amp;gt; pending_inputs;//如果已经提供了输入，则为true
    std::unordered_map&amp;lt;string, bool&amp;gt; pending_outputs;//如果已经获得了输出，则为true
    TensorStore tensor_store;
    ScopedStepContainer step-container;
    //...
};

struct RunStateArgs {
    RunStateArgs(const DebugOption&amp;amp; options) : debug_options(options) {}
    bool is_partial_run = false;
    string handle;
    std::unique_ptr&amp;lt;Graph&amp;gt; graph;
    const DebugOptions&amp;amp; debug_options;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，RunState为每一个partition的执行提供了状态保存的功能，而RunStateArgs则为前者提供了用于调试的参数和配置。&lt;/p&gt;
&lt;h2 id=&quot;direct_session.cc&quot;&gt;2.2 direct_session.cc&lt;/h2&gt;
&lt;p&gt;在源文件里，给出了DirectSessionFactory的定义，它提供了对于DirectSession进行生成和管理的功能，简要摘录如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class DirectSessionFactory : public SessionFactory {
  public:
    Session* NewSession(const SessionOptions&amp;amp; options) override;
    Status Reset(...) override;
    void Deregister(const DirectSession* session);
  private:
    mutex session_lock_;
    std::vector&amp;lt;DirectSession*&amp;gt; session_ GUARDED_BY(sessions_lock_);//用于存储生成的DirectSession
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外，还提供了一个对于直接工厂注册的类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class DirectSessionRegistrar {
  public:
    DirectSessionRegistrar() {
        SessionFactory::Register(&quot;DIRECT_SESSION&quot;, new DirectSessionFactory());
    }
};
static DirectSessionRegistrar registrar;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面，我们会按照顺序对DirectSession内重要的函数，进行拆解，由于部分函数细节比较多，除了核心代码之外，我们仅给出功能解释：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;DirectSession::DirectSession(const SessionOptions&amp;amp; options, const DeviceMgr* device_mgr, DirectSessionFactory* const factory){
    //根据options准备线程池
    //根据device_mgr准备device_和device_set_和每个设备的op_segment()
}

Status DirectSession::Run(...){
    //提取对于当前会话的本次运行的输入的名称
    //检查对于所需的输入输出，是否已经存在现成的执行器
    //构造一个调用帧（call frame），方便会话与执行器之间传递输入和输出
    //创建一个运行时状态的结构（RunState）
    //开始并行执行，核心代码如下
    for(const auto&amp;amp; item : executors_and_keys-&amp;gt;items){
        item.executor-&amp;gt;RunAsync(args, barrier-&amp;gt;Get());
    }
    //获取输出
    //保存本次运行中我们希望保存的输出张量
    //创建并返回损失模型（cost model）
    //如果RunOptions中有相关配置，输出分割后的图
}

Status DirectSession::GetOrCreateExecutors(...){
    //快速查找路径
    //慢查找路径，对输入和输出做排序，使得相同输入和输出集合会得到相同的签名
    //如果未找到，则创建这个执行器并缓存
    //构建执行图，核心代码如下
    CreateGraphs(options, &amp;amp;graphs, &amp;amp;ek-&amp;gt;flib_def, run_state_args, &amp;amp;ek-&amp;gt;input_types, &amp;amp;ek-&amp;gt;output_types));
    //为各子图准备运行时环境
}

Status DirectSession::CreateGraphs(...){
    //前期预处理
    //图分割算法，核心代码如下
    Partition(popts, &amp;amp;client_graph-&amp;gt;graph, &amp;amp;partitions);
    //检查分割结果的有效性
    //图优化遍历，核心代码如下
    OptimizationPassRegistry::Global()-&amp;gt;RunGrouping(OptimizationPassRegistry::POST_PARTITIONING, optimization_options);
    //允许设备重写它拥有的子图
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，具体的执行过程是在Run函数内部，调用executor-&amp;gt;RunAsync函数来实现的，在具体执行之前，我们还需要通过GetOrCreateExecutors函数获得执行器，在这个函数内部，我们通过CreateGraphs函数对原图进行了分割，并利用图优化遍历算法对图进行了优化。&lt;/p&gt;
</description>
<pubDate>Tue, 04 Sep 2018 15:39:00 +0000</pubDate>
<dc:creator>jicanghai</dc:creator>
<og:description>目录 1. 核心概念 2. direct_session 1. direct_session.h 2. direct_session.cc 1. 核心概念 读过之前文章的读者应该还记得，session</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jicanghai/p/9589285.html</dc:identifier>
</item>
<item>
<title>MongoDB 最大连接数 设置失效的异常分析 - 东山絮柳仔</title>
<link>http://www.cnblogs.com/xuliuzai/p/9589272.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuliuzai/p/9589272.html</guid>
<description>&lt;p&gt;查询MongoDB配置参数，可以知道关于最大连接数的参数是maxConns。但是连接实例后，查看支持的最大连接数，还是默认的819。&lt;/p&gt;
&lt;p&gt;说明：最大连接数是由maxConn (maxIncomingConnections)和操作系统单个进程能打开的最大文件描述符数总量的80%决定的，取两个之间的最小值。默认单个进程能打开的最大文件描述符数为1024，1024*80% = 819.2 取整数819。所以最大可以支持的并发连接数为819。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;案例重现&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;以下为本次测试MongoDB案例配置的参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904143830839-1453769434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动后查看最大连接数。&lt;/p&gt;
&lt;p&gt;运行命令：db.serverStatus().connections&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904143906448-574148417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Current表示当前到实例上正在运行的连接数。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Available表示当前实例还可以支持的并发连接数。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;也就是说此实例最大能支持的并发连接数为：Current+available=3+816=819.&lt;/p&gt;
&lt;p&gt;所以设置的maxConns参数无效。&lt;strong&gt;&lt;span&gt;&lt;em&gt;所以设置的maxConns参数无效！所以设置的maxConns参数无效！所以设置的maxConns参数无效！&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;strong&gt;答案求索&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p&gt;此时查看查看网上相关资料，大部分集中在 Linux系统最大文件描述符数。查看我们系统配置，此时已经是65535了。不是系统最大文件描述符数限制的了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904144209758-1613759881.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转个弯，因为我们是为操作系统是 centos 7 ，所以我们的mongodb服务是透过systemctl来管理的。那如果是通过service 命令来管理此服务呢?&lt;/p&gt;
&lt;p&gt;测试1 测试用service来管理mongodb 服务 对最大连接数的影响&lt;/p&gt;
&lt;p&gt;（1）       在/etc/init.d目录下创建名为mongodbtest0903的服务；&lt;/p&gt;
&lt;p&gt;（2）       服务的配置如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904144912151-1183200638.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）       赋予执行权限，然后开启服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904145000830-482317433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）       此时查看连接数为2500（为maxConns参数值）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904145028153-1478059494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5）       关闭 mongodb 服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904145054831-968703099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;以上说明用service 来管理服务，最大连接数参数起作用了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;测试2 如果直接用Mongodb command打开呢？&lt;/p&gt;
&lt;p&gt;（1）       直接开启&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150008350-1800780608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）此时查看连接数为2500（为maxConns参数值）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150034786-453276543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）关闭此服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150056195-1166672538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;以上说明直接开启Mongodb服务，最大连接数参数起作用了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过service &lt;/strong&gt;&lt;strong&gt;和  mongodb &lt;/strong&gt;&lt;strong&gt;命令启动服务，最大连接数都是设置的参数，而通过systemctl &lt;/strong&gt;&lt;strong&gt;来开启此服务就变成了默认的819.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;探究&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;我们来具体分析下systemctl 开启的 mongodb 服务（此服务定义为mongodbtest0903）。&lt;/p&gt;
&lt;p&gt;（1）查看此服务的所有配置细节的命令&lt;/p&gt;
&lt;p&gt;systemctl show mongodbtest0903.service&lt;/p&gt;
&lt;p&gt;部分细节如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150326569-1749746771.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此时 LimitNOFILE=4096&lt;/p&gt;
&lt;p&gt;（2）              查看此服务的进程，以及此进程下的资源限制&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150604359-1078896612.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 进程的资源限制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150641389-321271335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;终于看到了 资源限制是1024。&lt;/p&gt;

&lt;p&gt;问题1：为什么经过systemctl 启动的mongodb服务变成了默认的819.&lt;/p&gt;
&lt;p&gt;回答：因为systemctl 启动的服务进程其最大文件描述符数变成了1024. 1024*80% = 819.2 取整数819.&lt;/p&gt;

&lt;p&gt;问题2：为什么系统设置的最大是65525 而 systemctl 变成了1024.&lt;/p&gt;
&lt;p&gt;在Centos7系统中，使用Systemd替代了之前的SysV。/etc/security/limits.conf文件的配置作用域缩小了。/etc/security/limits.conf的配置，只适用于通过PAM认证登录用户的资源限制，它对systemd的service的资源限制不生效。&lt;/p&gt;
&lt;p&gt;其实仔细查看/etc/security/limits.conf文件的注释，说明了对系统服务不生效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150800459-602611909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;解决方案 &lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;解决方案，知道了问题所在，针对此问题寻找解决方案相对容易了。&lt;/p&gt;

&lt;p&gt;解决方案1：针对单个 systemctl 管理的服务。&lt;/p&gt;
&lt;p&gt;在/lib/systemd/system中找到具体的服务，增加&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;
&lt;em&gt;# (open files)&lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
LimitNOFILE=64000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令。 修改后为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/780228/201809/780228-20180904150855110-1764150440.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重启服务，此时连接查看最大连接数为2500，到达设置的参数。&lt;/p&gt;

&lt;p&gt;解决方案2 网上有种方案是对systemd全局修改。&lt;span&gt;此方案本作者没有验证，转述如下，意思是修改 /etc/systemd/system.conf 即可：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;全局的配置，放在文件/etc/systemd/system.conf和/etc/systemd/user.conf。 同时，也会加载两个对应的目录中的所有.conf文件/etc/systemd/system.conf.d/*.conf和/etc/systemd/user.conf.d/*.conf&lt;/em&gt;&lt;br/&gt;&lt;em&gt;其中，system.conf是系统实例使用的，user.conf用户实例使用的。一般的sevice，使用system.conf中的配置即可。systemd.conf.d/*.conf中配置会覆盖system.conf。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;DefaultLimitCORE=infinity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;DefaultLimitNOFILE=100000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;DefaultLimitNPROC=100000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：修改了system.conf后，需要重启系统才会生效。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;因为服务器上systemctl会管理多种服务，为减少对其它服务的影响，建议在单个服务上修改，集采用第一种方案。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他相关知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）mysql 服务也会遇到类似问题；&lt;/p&gt;
&lt;p&gt;（2）* nofiles    - soft limit on the number of file descriptors a process may have；&lt;/p&gt;

&lt;p&gt;（3） *soft limit与hard limit的不同：soft limit是真正生效的限制值，而hard limit仅仅是soft limit调整范围的一个上限。&lt;/p&gt;

</description>
<pubDate>Tue, 04 Sep 2018 15:35:00 +0000</pubDate>
<dc:creator>东山絮柳仔</dc:creator>
<og:description>背景介绍： 查询MongoDB配置参数，可以知道关于最大连接数的参数是maxConns。但是连接实例后，查看支持的最大连接数，还是默认的819。 说明：最大连接数是由maxConn (maxIncom</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuliuzai/p/9589272.html</dc:identifier>
</item>
<item>
<title>zabbix - (|^_^|||)</title>
<link>http://www.cnblogs.com/L-dongf/p/9589243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/L-dongf/p/9589243.html</guid>
<description>&lt;h3 id=&quot;一部署zabbix&quot;&gt;一、部署zabbix&lt;/h3&gt;
&lt;h4 id=&quot;配置master节点&quot;&gt;1、配置master节点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;准备LAMP环境和zabbix的yum源&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# yum install httpd php mariadb-server -y
# vim /etc/my.cnf
[mysqld]
log-bin=master-log
innodb_file_per_table=ON
skip_name_resolve=ON
# systemctl start mariadb
# systemctl enable mariadb
# vim /etc/yum.repos.d/zabbix.repo
[zabbix]
name=zabbix
baseurl=https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/3.4/rhel/7/x86_64/
gpgcheck=0
[non-supported]
name=non-supported
baseurl=https://mirrors.tuna.tsinghua.edu.cn/zabbix/non-supported/rhel/7/x86_64/
gpgcheck=0&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;安装并配置zabbix&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent -y
# mysql
MariaDB [(none)]&amp;gt; create database zabbix character set utf8 collate utf8_bin;
MariaDB [(none)]&amp;gt; grant all privileges on zabbix.* to zabbix@localhost identified by 'zbxpass';
MariaDB [(none)]&amp;gt; grant all privileges on zabbix.* to zabbix@127.0.0.1 identified by 'zbxpass';
MariaDB [(none)]&amp;gt; grant all privileges on zabbix.* to zabbix@'192.168.0.%' identified by 'zbxpass';
MariaDB [(none)]&amp;gt; quit
# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -h192.168.0.8 -pzbxpass zabbix
# vim /etc/zabbix/zabbix_server.conf
DBHost=192.168.0.8
DBPassword=zbxpass
# systemctl start zabbix-server
# systemctl enable zabbix-server
# vim /etc/httpd/conf.d/zabbix.conf
php_value date.timezone Asia/Shanghai
# systemctl start httpd
# systemctl enable httpd&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;浏览器访问：http://192.168.0.8/zabbix/，默认用户名密码：Admin/zabbix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;配置被监控节点&quot;&gt;2、配置被监控节点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;配置zabbix的yum源，和master节点一致&lt;/li&gt;
&lt;li&gt;安装zabbix-agent&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# yum install zabbix-agent zabbix-sender&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;配置agent参数&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# vim /etc/zabbix/zabbix_agentd.conf
Server=192.168.0.8  #zabbix_master的IP地址，建议使用主机名
ServerActive=192.168.0.8
Hostname=node01.zabbix.com&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;启动agent&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# systemctl start zabbix-agent
# systemctl enable zabbix-agent&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二监控系统&quot;&gt;二、监控系统&lt;/h3&gt;
&lt;h4 id=&quot;基本具有的功能&quot;&gt;1、基本具有的功能&lt;/h4&gt;
&lt;p&gt;数据采集功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ssh/telnet&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;li&gt;IPMI&lt;/li&gt;
&lt;li&gt;JMX&lt;/li&gt;
&lt;li&gt;agent&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数据存储：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;rrd&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可视化：&lt;/p&gt;
&lt;p&gt;告警：&lt;/p&gt;
&lt;h4 id=&quot;zabbix&quot;&gt;2、zabbix&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;zabbix server&lt;/li&gt;
&lt;li&gt;zabbix database(MySQL)&lt;/li&gt;
&lt;li&gt;zabbix web gui(LAMP)&lt;/li&gt;
&lt;li&gt;zabbix proxy&lt;/li&gt;
&lt;li&gt;zabbix agent&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;监控基本术语&quot;&gt;3、监控基本术语&lt;/h4&gt;
&lt;p&gt;主机（host） -- 主机组（host group）&lt;/p&gt;
&lt;p&gt;监控项（item） -- 应用（application）&lt;/p&gt;
&lt;p&gt;触发器（trigger）：阈值，trigger event&lt;/p&gt;
&lt;p&gt;动作（action）：conditions（条件），operations（操作）&lt;/p&gt;
&lt;h3 id=&quot;三zabbix基本监控流程以下为webgui操作&quot;&gt;三、zabbix基本监控流程(以下为webGUI操作)&lt;/h3&gt;
&lt;h4 id=&quot;添加主机及主机组&quot;&gt;1、添加主机及主机组&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Create host -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Host name: node01.zabbix.com
Visible name: node01
New group: MyServers
Agent interfaces: 
    IP address: 192.168.0.9
    Port: 10050&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;创建item&quot;&gt;2、创建Item&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Items -- Create item -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Item:
    Name: inbound packets
    Type: Zabbix agent
    Key: net.if.in[eth0,packets]
    Host interface: 192.168.0.9:10050
    Type of information: Numeric(unsigned) #无符号整数
    Units: packets/second
    Update interval: 5s
    History storage period: 90d  #历史数据保存90天
    Trend storage period: 365d  #趋势数据
    Show value: As is  #数据状态转换(不转换)
    New application: net traffic
    Populates host inventory field: None  #是否加入资产清单
Preprocessing:  #数据预处理
    Preprocessing steps:
        Name: Change per second  #计算每秒钟的变化量&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;克隆item&quot;&gt;3、克隆Item&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Items -- inbound packets -- Clone -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: inbound bytes
Key: net.if.in[eth0,bytes]
Units: Bps&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Name: outbound packets
Key: net.if.out[eth0,packets]
Units: packets/second&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Name: outbound bytes
Key: net.if.out[eth0,bytes]
Units: Bps&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;创建trigger&quot;&gt;4、创建Trigger&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Triggers -- Create trigger -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: inbound packets too fast
Expression: {node01.zabbix.com:net.if.in[eth0,packets].last(#1)}&amp;gt;100
    Add:
        item: node01: inbound packets
        Function: last()-Last(most recent) T value
        Last of(T): 1 Count
        Result &amp;gt; 100
OK event generation: Expression  #事件恢复处理
PROBLEM event generation mode: Single  #事件报告触发一次
OK event closes: All problems  #恢复后关闭事件&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;创建action&quot;&gt;5、创建Action&lt;/h4&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;action: event dirven 事件驱动，触发动作&lt;/p&gt;
&lt;p&gt;​ conditions 条件&lt;/p&gt;
&lt;p&gt;​ operations 操作&lt;/p&gt;
&lt;p&gt;​ OK - PROBLEM operations&lt;/p&gt;
&lt;p&gt;​ PROBLEM - OK recovery operations&lt;/p&gt;
&lt;p&gt;​ ackownlegement operations&lt;/p&gt;
&lt;p&gt;remote command 远程命令&lt;/p&gt;
&lt;p&gt;send message 发送消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、在node01上安装nginx&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# yum install nginx -y
# systemctl start nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、将nginx加入item&lt;/p&gt;
&lt;p&gt;Configuration -- Hosts -- Items -- Create item -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: nginx service state
Key: net.tcp.port[192.168.0.9,80]
Update interval: 5s
Show value: Service state
New application: nginx status&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、定义一个Trigger&lt;/p&gt;
&lt;p&gt;Configuration -- Hosts -- Triggers -- Create trigger -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: nginx down
Severity: High
Expression: {node01.zabbix.com:net.tcp.port[192.168.0.9,80].last(#3)}=0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、定义一个Action，Event source：Triggers&lt;/p&gt;
&lt;p&gt;Configuration -- Actions -- Create action(注意：事件源选择Triggers event) -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Action: 动作
    Name: nginx service
    Type of calculation: And  #满足以下俩个条件触发操作
    Conditions: 条件
        Trigger = node01: nginx down
        Maintenance status not in maintenance  #非维护期间
Operations: 操作
    New:
        Steps: 1-1
        Operation type: Remote command
Recovery operations: 恢复操作
    Target list: Current host
    Type: Custom script
    Execute on: Zabbix agent
    Commands: sudo /usr/bin/systemctl restart nginx.service
Acknowledgement operations: 确认操作&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、利用agent来执行远程命令时需要授予zabbix用户sudo权限，并且修改agent的配置文件，在node01做以下配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node01 ~]# visudo
root    ALL=(ALL)   ALL
zabbix  ALL=(ALL)   NOPASSWD: ALL
[root@node01 ~]# vim /etc/zabbix/zabbix_agentd.conf
EnableRemoteCommands=1
[root@node01 ~]# systemctl restart zabbix-agent&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;创建媒介实现通过邮件发送报警信息&quot;&gt;6、创建媒介，实现通过邮件发送报警信息&lt;/h4&gt;
&lt;p&gt;1、在master节点安装mailx，利用脚本发送邮件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@master ~]# yum install mailx -y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、添加媒介&lt;/p&gt;
&lt;p&gt;Administration -- Media types -- Create media type -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Media type:
    Name: local email
    Type: Email
    SMTP server: localhost
    SMTP server port: 25
    SMTP helo: localhost
    SMTP email: zabbix@localhost
    Connection security: None
    Authentication: None
Options:
    Concurrent sessions: Unlimited&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、为admin用户添加端点&lt;/p&gt;
&lt;p&gt;Administration -- Admin -- Media -- Add -- Update&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Type: local email
Send to: dongfei@localhost&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、继nginx service的Action添加报警升级操作&lt;/p&gt;
&lt;p&gt;Configuration -- Actions -- nginx service -- Operations -- New -- Add -- Update&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Steps: 2-2
Operation type: Send message
Send to Users: Admin (Zabbix Administrator)
Send only to: local email&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Recovery operations:  #恢复后发送邮件
    Send to Users: Admin (Zabbix Administrator)
    Send only to: local email&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、测试验证：可以将nginx的端口改成8080，然后将nginx进程杀掉，查看监控信息，到master节点切换到dongfei用户使用mail命令接受邮件查看报警&lt;/p&gt;
&lt;h3 id=&quot;四macro宏----预设的文本替换模式&quot;&gt;四、macro宏 -- 预设的文本替换模式&lt;/h3&gt;
&lt;p&gt;zabbix中宏有三个级别&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全局级别&lt;/li&gt;
&lt;li&gt;模板级别&lt;/li&gt;
&lt;li&gt;主机级别&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;内建宏&quot;&gt;1、内建宏&lt;/h4&gt;
&lt;p&gt;引用方法：{MACRO_NAME}&lt;/p&gt;
&lt;p&gt;参考：https://www.zabbix.com/documentation/3.4/manual/appendix/macros/supported_by_location&lt;/p&gt;
&lt;h4 id=&quot;自定义宏&quot;&gt;2、自定义宏&lt;/h4&gt;
&lt;p&gt;引用方法：{$MACRO_NAME}&lt;/p&gt;
&lt;p&gt;全局宏定义：Administration -- General -- Macros(右侧下拉列表) -- Add -- Update&lt;/p&gt;
&lt;p&gt;主机宏定义：Configuration -- Hosts -- node01 -- Macros -- Add -- Update&lt;/p&gt;
&lt;p&gt;模板宏定义：Configuration -- Templates -- Template OS Linux -- Macros -- Add -- Update&lt;/p&gt;
&lt;h3 id=&quot;五template-模板&quot;&gt;五、Template 模板&lt;/h3&gt;
&lt;p&gt;1、将模板连接至主机：Configuration -- Hosts -- node01 -- Templates&lt;/p&gt;
&lt;p&gt;2、自定义模板：Configuration -- Templates -- Create template&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Template name: my template
Visible name: template for os linux
New group: my template&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、导入模板：Configuration -- Templates -- Import&lt;/p&gt;
&lt;p&gt;4、到https://share.zabbix.com/下载模板，找到项目所在的GitHub站点&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# yum install git -y
# git clone https://github.com/cuimingkun/zbx_tem_redis.git
# sz zbx_tem_redis/redis_templates_for_zbx_3.4.xml  #导出到windows(本地)，web导入到zabbix的模板
# scp zbx_tem_redis/userparameter_redis_lld_plus.conf node01:/etc/zabbix/zabbix_agentd.d/  #需要将自定义key的配置文件放到agent上&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;六自定义key&quot;&gt;六、自定义key&lt;/h3&gt;
&lt;h4 id=&quot;直接定义key&quot;&gt;1、直接定义key&lt;/h4&gt;
&lt;p&gt;1、在agent端定义&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node01 ~]# vim /etc/zabbix/zabbix_agentd.d/test.conf
UserParameter=memory.used,/usr/bin/free | /usr/bin/awk '/^Mem/{print $3}'
UserParameter=memory.shm,/usr/bin/free | /usr/bin/awk '/^Mem/{print $5}'
[root@node01 ~]# systemctl restart zabbix-agent.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在master端测试&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@master ~]# yum install zabbix-get -y
[root@master ~]# zabbix_get -s node01 -p 10050 -k &quot;memory.used&quot;
181076  #获取到的数据
[root@master ~]# zabbix_get -s node01 -p 10050 -k &quot;memory.shm&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;key的参数传递&quot;&gt;2、key的参数传递&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node01 ~]# vim /etc/zabbix/zabbix_agentd.d/memory.conf
UserParameter=memory.usage[*],/usr/bin/awk '/^$1/{print $$2}' /proc/meminfo  #此处awk中的$2需要做逃逸
[root@node01 ~]# systemctl restart zabbix-agent.service
[root@master ~]# zabbix_get -s node01 -p 10050 -k &quot;memory.usage[MemFree]&quot;
[root@master ~]# zabbix_get -s node01 -p 10050 -k &quot;memory.usage[Shmem]&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在host上创建item&quot;&gt;3、在host上创建item&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;Name: memory MemFree
Key: memory.usage[MemFree]  #将参数MemFree传递给Key来获取空闲内存值
New application: memory stats&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Name: memory Buffers
Key: memory.usage[Buffers]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;七discovery-自动发现&quot;&gt;七、Discovery 自动发现&lt;/h3&gt;
&lt;p&gt;1、创建自动发现扫描规则&lt;/p&gt;
&lt;p&gt;Configuration -- Discovery -- Create discovery rule -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: My Net 1
IP range: 192.168.0.1-20
Update interval: 30s  #做测试用，30s扫描一次
Checks: Zabbix agent &quot;system.uname&quot;
Device uniqueness criteria: Zabbix agent &quot;system.uname&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在node02上安装agent&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node02 ~]# yum install zabbix-agent zabbix-sender -y
[root@node02 ~]# vim /etc/zabbix/zabbix_agentd.conf
Server=master.zabbix.com
ServerActive=Server=master.zabbix.com
Hostname=node02.zabbix.com
[root@node02 ~]# systemctl start zabbix-agent.service 
[root@node02 ~]# systemctl enable zabbix-agent.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、添加发现行为&lt;/p&gt;
&lt;p&gt;Configuration -- Actions -- Event source(Discovery) -- Create action -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Action:
    Name: Add My Net Hosts
    Type of calculation: And
    Conditions:
        A   Discovery rule = My Net 1
        B   Discovery status = Discovered
Operations:
    Operations:
        Send message to users: Admin (Zabbix Administrator) via local email
        Add host
        Link to templates: Template OS Linux&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;八主动监控方式默认是被动方式&quot;&gt;八、主动监控方式（默认是被动方式）&lt;/h3&gt;
&lt;p&gt;在agent的基本配置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ServerActive=master.zabbix.com&lt;/li&gt;
&lt;li&gt;Hostname=node02.zabbix.com&lt;/li&gt;
&lt;li&gt;HostnameItem=system.hostname&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;主动检测的数据发送方式&quot;&gt;1、主动检测的数据发送方式&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Items -- Create item -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Item:
    Name: net traffic in bytes
    Type: Zabbix agent (active)  #agent主动向zabbix_server发送数据
    Units: bps
    Applications: net traffic
Preprocessing:
    Preprocessing steps:
        Change per second&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;zabbix_sender的数据发送方式&quot;&gt;2、zabbix_sender的数据发送方式&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Items -- Create item -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: test sender metric
Type: Zabbix trapper
Key: test.sender.metric
New application: sender data&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在node02端定义发送的数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node02 ~]# zabbix_sender -z master.zabbix.com -s &quot;node02.zabbix.com&quot; -k &quot;test.sender.metric&quot; -o &quot;875&quot;
[root@node02 ~]# zabbix_sender -z master.zabbix.com -s &quot;node02.zabbix.com&quot; -k &quot;test.sender.metric&quot; -o &quot;`free -m |awk '/^Mem/{print $3}'`&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;九web监控&quot;&gt;九、web监控&lt;/h3&gt;
&lt;p&gt;监控指定的站点的资源下载速度，及页面响应时间，还有响应代码&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;web.test.in[Scenario,Step,bps]：传输速率&lt;br/&gt;web.test.time[Scenario,Step]：响应时长&lt;br/&gt;web.test.rspcode[Scenario,Step]：响应码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建web监控：Configuration -- Hosts -- Web -- Create web scenario&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Scenario:
    Name: node02 web ui
    New application: node02 web ui performance
    Update interval: 10s
    Agent: Chrome 38.0(Linux)
Steps: 1:   home page   15s http://192.168.0.10/index.html      200
    Add:
        Name: home page
        URL: http://192.168.0.10/index.html
        Retrieve only headers: √
        Required status codes: 200&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;十snmp监控&quot;&gt;十、SNMP监控&lt;/h3&gt;
&lt;p&gt;Simple Network Management Protocol：简单网络管理协议&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;agent/manager&lt;/li&gt;
&lt;li&gt;Net-SNMP&lt;/li&gt;
&lt;li&gt;net-snmp-utils&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;SNMP的三个版本&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;v1&lt;/li&gt;
&lt;li&gt;v2c：community name is the password , public&lt;/li&gt;
&lt;li&gt;v3：支持认证和加密传输&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MIB：管理信息库，OID == Object Id&lt;/p&gt;
&lt;h4 id=&quot;配置zabbix支持snmp&quot;&gt;1、配置zabbix支持SNMP&lt;/h4&gt;
&lt;p&gt;在被监控主机中安装&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# yum install net-snmp net-snmp-utils -y  #net-snmp-utils用来测试用&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置启动服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# vim /etc/snmp/snmpd.conf
#view    systemview    included   .1.3.6.1.2.1.1
#view    systemview    included   .1.3.6.1.2.1.25.1.1
view    systemview    included   .1.3.6.1
# systemctl start snmpd
# systemctl enable snmpd&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在本机测试&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# snmptranslate -Tp .1.3.6.1.2.1 |more
# snmpget -v 2c -c public 192.168.0.10 .1.3.6.1.2.1.1.1.0  #获取系统描述信息
# snmpwalk -v 2c -c public 192.168.0.10 .1.3.6.1.2.1.25.4.2.1.2  #获取进程列表&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在zabbix配置监控&quot;&gt;2、在zabbix配置监控&lt;/h4&gt;
&lt;p&gt;Configuration -- Hosts -- Create Host -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Host name: node02
Visible name: node02
New group: my linux servers
SNMP interfaces: 192.168.0.10 DNS 161&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;-- Item -- Create Item -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Item:
    Name: net traffic in bytes
    Type: SNMPv2 agent
    Key: net.if.in.bytes
    SNMP OID: .1.3.6.1.2.1.2.2.1.10.2
    SNMP community: public
    Units: bps
    Update interval: 5s
    New application: net traffic
Preprocessing:
    Preprocessing steps: Change per second&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;十一jmx监控&quot;&gt;十一、JMX监控&lt;/h3&gt;
&lt;p&gt;JMX：java管理扩展&lt;/p&gt;
&lt;p&gt;1、在node02上安装配置Tomcat&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node02 ~]# yum install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-webapps tomcat-docs-webapps -y
[root@node02 ~]# vim /etc/tomcat/tomcat.conf  #加入以下配置
CATALINA_OPTS=&quot;-Djava.rmi.server.hostname=192.168.0.10 -Djavax.management.bui
lder.initial= -Dcom.sun.management.jmxremote=true   -Dcom.sun.management.jmxr
emote.port=12345  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.managem
ent.jmxremote.authenticate=false&quot;
[root@node02 ~]# systemctl start tomcat
[root@node02 ~]# ss -tnl |grep 12345
LISTEN     0      50          :::12345
[root@node02 ~]# systemctl enable tomcat&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在zabbix-server上安装配置zabbix-java-gateway（如果有大量的jvm需要被监控，那么java-gateway需要独立安装到一台服务器中）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@master ~]# yum install zabbix-java-gateway -y
[root@master ~]# vim /etc/zabbix/zabbix_java_gateway.conf
LISTEN_PORT=10052
START_POLLERS=5
[root@master ~]# systemctl start zabbix-java-gateway
[root@master ~]# ss -tnl |grep 10052
LISTEN     0      50          :::10052
[root@master ~]# vim /etc/zabbix/zabbix_server.conf
JavaGateway=192.168.0.8
JavaGatewayPort=10052
StartJavaPollers=5
[root@master ~]# systemctl restart zabbix-server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、在zabbix的webGUI中配置监控&lt;/p&gt;
&lt;p&gt;Configuration -- Hosts -- Create Host -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;JMX interfaces: 192.168.0.10 12345
Linked templates: Template App Apache Tomcat JMX&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;十二zabbix的分布式监控&quot;&gt;十二、zabbix的分布式监控&lt;/h3&gt;
&lt;p&gt;1、配置zabbix_proxy，192.168.0.11&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@zabbix_proxy ~]# yum install mariadb-server zabbix-proxy-mysql zabbix-get zabbix-agent zabbix-sender -y
[root@zabbix_proxy ~]# vim /etc/my.cnf
[mysqld]
skip_name_resolve=0
[root@zabbix_proxy ~]# systemctl start mariadb
[root@zabbix_proxy ~]# systemctl enable mariadb
[root@zabbix_proxy ~]# mysql
MariaDB [(none)]&amp;gt; CREATE DATABASE zbxproxy character set utf8 collate utf8_bin;
MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON zbxproxy.* TO zabbix@localhost IDENTIFIED BY 'zbxpass';
[root@zabbix_proxy ~]# zcat /usr/share/doc/zabbix-proxy-mysql-3.4.13/schema.sql.gz |mysql -uzabbix -pzbxpass zbxproxy
[root@zabbix_proxy ~]# vim /etc/zabbix/zabbix_proxy.conf
Server=192.168.0.8
Hostname=zabbix_proxy  #注意此处的主机名必须可以被解析
ListenPort=10051
DBName=zbxproxy
DBUser=zabbix
DBPassword=zbxpass
HeartbeatFrequency=20
ConfigFrequency=10
DataSenderFrequency=1
[root@zabbix_proxy ~]# systemctl start zabbix-proxy.service 
[root@zabbix_proxy ~]# systemctl enable zabbix-proxy.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、在zabbix的webGUI中配置proxy&lt;/p&gt;
&lt;p&gt;Administration -- Proxies -- Create proxy -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Proxy name: zabbix_proxy  #此处的主机名一定需要被解析&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、加入被proxy代理的被监控端，注意：被监控的agent需要配置允许proxy监控&lt;/p&gt;
&lt;p&gt;Configuration -- Hosts -- Create host -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Host:
    Host name: master.dongfei.tech
    Visible name: k8s_master
    New group: my linux servers
    Agent interfaces: 192.168.0.12 10050
    Monitored by proxy: zabbix_proxy
Templates:
    Linked templates: Template OS Linux&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、由proxy的自动发现&lt;/p&gt;
&lt;p&gt;Configuration -- Create discovery rule -- Add&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Name: My Net 2
Discovery by proxy: zabbix_proxy
IP range: 192.168.0.1-20
Update interval: 1h
Checks: Zabbix agent &quot;system.uname&quot;
Device uniqueness criteria: Zabbix agent &quot;system.uname&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;感谢阅读，未完待续。。。&lt;/p&gt;
</description>
<pubDate>Tue, 04 Sep 2018 15:28:00 +0000</pubDate>
<dc:creator>(|^_^|||)</dc:creator>
<og:description>一、部署zabbix 1、配置master节点 准备LAMP环境和zabbix的yum源 安装并配置zabbix 浏览器访问：http://192.168.0.8/zabbix/，默认用户名密码：Ad</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/L-dongf/p/9589243.html</dc:identifier>
</item>
<item>
<title>Nginx（二）------nginx.conf 配置文件 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/9384880.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/9384880.html</guid>
<description>&lt;p&gt;　　上一篇博客我们将 nginx 安装在 /usr/local/nginx 目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改，所以本篇博客我们先大致介绍一下该配置文件的结构。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201807/1120165-20180729225520207-404971432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1、nginx.conf 的主体结构&lt;/h3&gt;
&lt;p&gt;　　打开此文件，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7dd7e6d1-a0ea-47da-b307-714f0cb8b116')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_7dd7e6d1-a0ea-47da-b307-714f0cb8b116&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7dd7e6d1-a0ea-47da-b307-714f0cb8b116&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7dd7e6d1-a0ea-47da-b307-714f0cb8b116',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7dd7e6d1-a0ea-47da-b307-714f0cb8b116&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#user  nobody;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; worker_processes  1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; #error_log  logs/&lt;span&gt;error.log;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; #error_log  logs/&lt;span&gt;error.log  notice;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; #error_log  logs/&lt;span&gt;error.log  info;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; #pid        logs/&lt;span&gt;nginx.pid;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;events {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;     worker_connections  1024&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;    include       mime.types;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     default_type  application/octet-&lt;span&gt;stream;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;     #log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
&lt;span&gt; 21&lt;/span&gt;     #                  '$status $body_bytes_sent &quot;$http_referer&quot; '
&lt;span&gt; 22&lt;/span&gt;     #                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt;     #access_log  logs/&lt;span&gt;access.log  main;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;    sendfile        on;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;    #tcp_nopush     on;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt;     #keepalive_timeout  0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     keepalive_timeout  65&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    #gzip  on;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    server {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         listen       80&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        server_name  localhost;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         #charset koi8-&lt;span&gt;r;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;         #access_log  logs/&lt;span&gt;host.access.log  main;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            index  index.html index.htm;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;         #error_page  404              /404&lt;span&gt;.html;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;         # redirect server error pages to the &lt;span&gt;static&lt;/span&gt; page /&lt;span&gt;50x.html
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        #
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         error_page   500 502 503 504  /&lt;span&gt;50x.html;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         location = /&lt;span&gt;50x.html {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;         # proxy the PHP scripts to Apache listening on 127.0.0.1:80
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        #
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         #location ~&lt;span&gt; \.php$ {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         #    proxy_pass   http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        #}
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        #
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         #location ~&lt;span&gt; \.php$ {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        #    root           html;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         #    fastcgi_pass   127.0.0.1:9000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        #    fastcgi_index  index.php;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         #    fastcgi_param  SCRIPT_FILENAME  /&lt;span&gt;scripts$fastcgi_script_name;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        #    include        fastcgi_params;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        #}
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt;         # deny access to .htaccess files, &lt;span&gt;if&lt;/span&gt; Apache's document root
&lt;span&gt; 73&lt;/span&gt;         # concurs with nginx's one
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        #
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         #location ~ /&lt;span&gt;\.ht {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        #    deny  all;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        #}
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;     # another virtual host using mix of IP-, name-, and port-&lt;span&gt;based configuration
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    #server {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     #    listen       8000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     #    listen       somename:8080&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    #    server_name  somename  alias  another.alias;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;     #    location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    #        root   html;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    #        index  index.html index.htm;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    #    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    #}
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    # HTTPS server
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    #
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    #server {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     #    listen       443&lt;span&gt; ssl;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    #    server_name  localhost;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    #    ssl_certificate      cert.pem;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    #    ssl_certificate_key  cert.key;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    #    ssl_session_cache    shared:SSL:1m;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    #    ssl_session_timeout  5m;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;     #    ssl_ciphers  HIGH:!aNULL:!&lt;span&gt;MD5;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    #    ssl_prefer_server_ciphers  on;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;     #    location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;    #        root   html;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    #        index  index.html index.htm;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    #    }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    #}
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　# 开头的表示注释内容，我们去掉所有以 # 开头的段落，精简之后的内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; worker_processes  1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;events {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     worker_connections  1024&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    include       mime.types;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     default_type  application/octet-&lt;span&gt;stream;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    sendfile        on;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     keepalive_timeout  65&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    server {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         listen       80&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        server_name  localhost;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            index  index.html index.htm;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         error_page   500 502 503 504  /&lt;span&gt;50x.html;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         location = /&lt;span&gt;50x.html {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　根据上述文件，我们可以很明显的将 nginx.conf 配置文件分为三部分：&lt;/p&gt;
&lt;h3&gt;2、全局块&lt;/h3&gt;
&lt;p&gt;　　从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。&lt;/p&gt;
&lt;p&gt;　　比如上面第一行配置的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
worker_processes  1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约，这个后面会详细介绍。&lt;/p&gt;
&lt;h3&gt;3、events 块&lt;/h3&gt;
&lt;p&gt;　　比如上面的配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;events {
    worker_connections  &lt;/span&gt;1024&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。&lt;/p&gt;
&lt;p&gt;　　上述例子就表示每个 work process 支持的最大连接数为 1024.&lt;/p&gt;
&lt;p&gt;　　这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。&lt;/p&gt;
&lt;h3&gt;4、http 块&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    include       mime.types;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     default_type  application/octet-&lt;span&gt;stream;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    sendfile        on;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     keepalive_timeout  65&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    server {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         listen       80&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        server_name  localhost;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            index  index.html index.htm;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         error_page   500 502 503 504  /&lt;span&gt;50x.html;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         location = /&lt;span&gt;50x.html {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            root   html;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。&lt;/p&gt;
&lt;p&gt;　　需要注意的是：http 块也可以包括 &lt;strong&gt;http全局块&lt;/strong&gt;、&lt;strong&gt;server 块&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;①、http 全局块&lt;/h4&gt;
&lt;p&gt;　　http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。&lt;/p&gt;
&lt;h4&gt;②、server 块&lt;/h4&gt;
&lt;p&gt;　　这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。后面会详细介绍虚拟主机的概念。&lt;/p&gt;
&lt;p&gt;　　每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。&lt;/p&gt;
&lt;p&gt;　　而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1、全局 server 块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2、location 块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一个 server 块可以配置多个 location 块。&lt;/p&gt;
&lt;p&gt;　　这块的主要作用是基于 Nginx  服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。&lt;/p&gt;

</description>
<pubDate>Tue, 04 Sep 2018 14:50:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<og:description>Nginx（二）------nginx.conf 配置文件</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/9384880.html</dc:identifier>
</item>
</channel>
</rss>