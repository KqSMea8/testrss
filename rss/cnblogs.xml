<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>一篇关于PHP性能的文章 - 微风伏面</title>
<link>http://www.cnblogs.com/guixiaoming/p/8534224.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guixiaoming/p/8534224.html</guid>
<description>&lt;h2 id=&quot;一篇关于php性能的文章&quot;&gt;一篇关于PHP性能的文章&lt;/h2&gt;
&lt;blockquote readability=&quot;7.4696132596685&quot;&gt;
&lt;p&gt;&lt;em&gt;昨晚清理浏览器收藏夹网址时，发现了&lt;a href=&quot;http://www.phpbench.com/&quot; class=&quot;uri&quot;&gt;http://www.phpbench.com/&lt;/a&gt;，想起来应该是2015年发现的一个比较性能的文章，我就点进去看了看，发现还是全英文耶，刚好最近一直在读一些英文文档和资料，就想着把它翻译下来，以供其他中国开发更有效率的阅读，好多自我的口语化，见谅~&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PHPBench.com&lt;/strong&gt; 想用一种直观的方式去陈述一个事实，让人们明白不是每段PHP代码都能以相同的方式运行。你可能会对产生的结果感到惊讶，但是不要怀疑--it's ok。一些被测试统计过的代码样例的页面也被创建了，你可以下载然后在自己的服务器环境运行测试，你可以结合自己的想法，对这些实例进行一顿操作~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;你要时刻记住要多刷新几次页面来得到正确的结果，每次刷新的时候，数字都会急剧变化，我认为这是因为PHP的内存垃圾回收机制是随机的并且这个机器上其他的进程对此也有影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;为了方便我就简单的使用了&lt;em&gt;microtime()&lt;/em&gt;函数来测试这用例。如果使用了更高级的东西，我担心一些初级phper理解不了。&lt;/p&gt;
&lt;center&gt;
&lt;h2 id=&quot;循环读取数据的比较&quot;&gt;循环读取数据的比较&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;foreach-vs.-for-vs.-whilelist-each&quot;&gt;&lt;em&gt;foreach() vs. for vs. while(list() = each())&lt;/em&gt;&lt;/h5&gt;
&lt;/center&gt;
&lt;ol&gt;&lt;li&gt;上面所有结果中，我发现，&lt;em&gt;foreach()&lt;/em&gt;循环比&lt;em&gt;while()&lt;/em&gt;和&lt;em&gt;for()&lt;/em&gt;强一档的水平。有一点值得注意下，所有样例中每个循环开始的时候我都会使用&lt;em&gt;reset()&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;由于之前测试的版本备受争议，我必须道个歉，因为我在while循环实施&lt;em&gt;reset()&lt;/em&gt;功能的时候是在最开始而不是结束时。非常感谢Anthony Bush这位老铁发现了这个。&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;修改下循环方式再来一波比较&quot;&gt;修改下循环方式再来一波比较&lt;/h2&gt;
&lt;/center&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;foreach()&lt;/em&gt;依然吊打其他两位循环选手&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;计数循环之间的pk&quot;&gt;计数循环之间的PK&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;for-vs.-while&quot;&gt;&lt;em&gt;for() VS. while()&lt;/em&gt;&lt;/h5&gt;
&lt;/center&gt;
&lt;ol&gt;&lt;li&gt;*结果让人吃惊...这在任何程序中都是很容易去实现的一件事情,也是PHP社区普遍认可的基准，结果表明他们都是为了自己说话。&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;双引号单引号的较量&quot;&gt;双引号单引号的较量&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;double-vs.-single&quot;&gt;double (&quot;) vs. single (')&lt;/h5&gt;
&lt;/center&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;PHP中单引号和双引号效率上是否有区别呢？ 比如重复使用10000多次时&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/6ufmhNs.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;结论-3&quot;&gt;结论：&lt;/h3&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;*在当前的PHP版本中，这个条件下两边表现都是不俗的。让大家在这一点上和谐相处！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;变量检测的较量&quot;&gt;变量检测的较量&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;isset-vs.-empty-vs.-is_array&quot;&gt;isSet() vs. empty() vs. is_array()&lt;/h5&gt;
&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/OX2mF2d.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;结论-4&quot;&gt;结论：&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;*isset()和empty()差不多的，因此使用变量之前，尽量检查一波。例如：if (isSet($foo) AND is_array($foo))&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;条件控制结构的较量&quot;&gt;条件控制结构的较量&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;switchcasedefault-vs.-ifelseifelse&quot;&gt;switch/case/default vs. if/elseif/else&lt;/h5&gt;
&lt;/center&gt;
&lt;ol&gt;&lt;li&gt;*switch/case 和 if/elseif 棋逢敌手五五开，需要注意的是if/elseif 中用全等（===）比相等（==）要稍微快一些哦~&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;
&lt;h2 id=&quot;字符串输出比较&quot;&gt;字符串输出比较&lt;/h2&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5 id=&quot;echo-vs.-print&quot;&gt;echo vs. print&lt;/h5&gt;
&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PUo38oV.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;结论-6&quot;&gt;结论：&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;*实际上，echo 和 print 函数/结构服务很明确，因此实现他们的代码差不多。值得一提的是：在使用echo 时，用逗号分隔时，会快一些。&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;5.8100558659218&quot;&gt;
&lt;p id=&quot;作者fredgui&quot;&gt;&lt;em&gt;作者：fredGui&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;来源httpwww.cnblogs.comguixiaomingp8534224.html&quot;&gt;*来源：&lt;a href=&quot;http://www.cnblogs.com/guixiaoming/p/8534224.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/guixiaoming/p/8534224.html&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;著作权归作者所有商业转载请联系作者获得授权非商业转载请注明出处&quot;&gt;&lt;em&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 09 Mar 2018 07:33:00 +0000</pubDate>
<dc:creator>微风伏面</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guixiaoming/p/8534224.html</dc:identifier>
</item>
<item>
<title>漫谈计算机编码 - 一只黑色的猫</title>
<link>http://www.cnblogs.com/yangming1996/p/8533993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangming1996/p/8533993.html</guid>
<description>&lt;p&gt;我们知道，在计算机内部，所有的信息都是以二进制形式进行存储。无论是字符，或是视频音频文件，最终都会对应到一串由 0 和 1 构成的数字串。所以从我们能看懂的人类信息转变为机器级别的二进制语言的过程就可以理解为一种编码的过程，自然，相反的过程就是所谓的解码的过程。&lt;/p&gt;
&lt;p&gt;可以这么说，&lt;strong&gt;所有的乱码都是源于解码方式与编码方式的不一致&lt;/strong&gt;。就好像我用英文给你写了一封信（我要表达的信息用英文这种方式 [编码] 了），而你只懂中文，你用中文去读信的内容（用中文 [解码]），于是整封信在你看来就是所谓的 [乱码]。其实，所谓的乱码不是什么复杂的问题，仅仅就是解码的方式不同于编码的方式而已，只要换成合适的解码方式就好了。&lt;/p&gt;
&lt;p&gt;本文根据计算机编码的演变历史，从最早的 ASCLL 编码，到一统编码界的 Unicode 编码方式，探讨一下我们的 [人类信息] 究竟是如何被编码成 [计算机级信息] 的。&lt;/p&gt;
&lt;h4 id=&quot;一始终被兼容的-ascll&quot;&gt;&lt;strong&gt;一、始终被兼容的 ASCLL&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;上个世纪中旬，美国人发明了计算机，当时并没有考虑到计算机的普及程度会如此之快，所以当时美国人只制定了英文字符和一些控制字符与二进制之间的映射标准，这个最初的标准就是 &lt;strong&gt;ASCLL 编码标准&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;ASCLL 首先对所有需要编码的字符进行了一个编号（总共编排了 128 个字符），例如：数字 0 的编号是 48，字母 a 的编号是 97 等。于是 ASCLL 使用一个字节（8 个比特位）来描述这些字符，将他们各自的编号的十进制转换成二进制即可。于是从 00000000 -- 01111111 （0-127）都被编排了字符。所以，所有采用 ASCLL 编码标准的文件在解析的时候，每八位二进制一起被解释成一个字符，这样所有的英文字符、数字、其他一些字符都已经可以被存储被读取了。下面附一张经典的 ASCLL 表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180308151159316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见，虽然一个字节只用了七个比特位，但是包含的字符还是相当多的，对于美国人来说，这完全足够用了，但是对于一些欧洲国家，乃至我们伟大的中国来说，一个字节实在是太少了，于是很多地区国家就有了自己的扩展编码标准，但无一例外的兼容 ASCLL 编码（毕竟人家是鼻祖）。&lt;/p&gt;
&lt;h4 id=&quot;二windows-1252-来自欧洲人的扩展&quot;&gt;&lt;strong&gt;二、Windows-1252 来自欧洲人的扩展&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;美国人的 ASCLL 标准只定义了 128 个字符的编码方式，使用了 00000000 -- 01111111 这个区间段的二进制。于是欧洲人直接使用 10000000 -- 11111111（128-255）区间段的 127 个二进制位来定义他们自己的一些符号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180308153644655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180308153653102?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;三gb2312-来自中国人的扩展&quot;&gt;&lt;strong&gt;三、GB2312 来自中国人的扩展&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;我伟大的中华民族有着成千上万的汉字，美国人的一个字节的编码标准怎么能好使？ GB2312 （国家标准编码）主要针对的是我们日常中经常使用的一些简体中文，总共收录 6763 个汉字，采用双字节编码，向前兼容 ASCLL 标准。&lt;/p&gt;
&lt;p&gt;那么有一个问题，ASCLL 标准的字符采用的一个字节进行编码方式，而我们的中文汉字采用的两个字节进行编码，计算机在解码的时候究竟是一次读取一个字节并把它按照 ASCLL 标准解析成一个字符，还是一次读取两个字节并把它按照我们的 GB2312 标准解析成一个汉字呢？&lt;/p&gt;
&lt;p&gt;GB2312 规定，编码汉字的两个字节中，第一个字节的最高位必须为 1。这样，由于 ASCLL 标准的所有字符（00000000-01111111），最高位都是 0，所以当计算机读取到某个字节的最高位为 1 的时候，就连着读取两个字节按照 GB2312 标准解析为一个汉字，否则则认为这是一个普通字符并按照 ASCLL 将它解析为一个普通字符。&lt;/p&gt;
&lt;p&gt;下面我们简单描述一下 GB2312 的具体编码细节：&lt;/p&gt;
&lt;p&gt;首先，GB2312 是通过所谓的 [分区] 来编排每一个汉字的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;01-09 区编排了一些特殊字符&lt;/li&gt;
&lt;li&gt;16-55 区编排了一级常用汉字&lt;/li&gt;
&lt;li&gt;56-87 区编排了二级常用汉字&lt;/li&gt;
&lt;li&gt;00-15 区及 88-94 区则未有编码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;GB2312 的编码方式：0xA0 + 区号，0xA0 + 位号。&lt;strong&gt;例如：[杨] 的区位号是 4978（49 区 78 位），所以杨的 GB2312 编码为：0xA0 + 49 ，0xA0 + 78 ，即：D1EE&lt;/strong&gt;。所以以前有一种区位输入法，就是通过输入四位的数字来进行打字的，而这四位数字就是该汉字的区位号。至于为什么要在区号位号加 0xA0 ，查了很多资料，没有明确的说法，可能就是一种规定吧。&lt;/p&gt;
&lt;p&gt;其实仔细想一下，&lt;strong&gt;所谓的编码过程不就是两个步骤的组合么&lt;/strong&gt;，理解这一点很重要。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用唯一的一个标识编排表示该字符&lt;/li&gt;
&lt;li&gt;制定统一的规则将标识映射为底层二进制&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;ASCLL 标准如此，GB2312 也是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如：ASCLL 为所有字符进行编号，并且相互不重复（第一步），然后制定了一个规则，某个字符编号的二进制就是它的字符编码（第二步）。&lt;/p&gt;
&lt;p&gt;例如：GB2312 为所有的汉字进行分区编号，相互不重复（第一步），然后制定规则使得可以通过区位号得到该汉字的二进制字符编码（第二步）。&lt;/p&gt;
&lt;p&gt;GBK 向下兼容并扩展了 GB2312 ，收录了 21003 个汉字，依然是采用的固定两个字节来编码汉字，只是高位字节的取值范围不同而已，此处不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;四有雄心的-unicode&quot;&gt;&lt;strong&gt;四、有雄心的 Unicode&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;上面我们介绍了美国人的编码标准、欧洲人的编码标准、中国人的编码标准，当然这只是冰山一角，世界上存在着各种各样的编码标准。每个国家的计算机厂商都要根据不同的地域使用不同的编码标准来生产计算机，繁琐低效。有没有一种编码标准能收录世界上所有的字符，并提供存储实现呢？&lt;/p&gt;
&lt;p&gt;Unicode 的诞生就是为了统一世界上所有编码的，它编排了世界上近乎所有的字符，总共收录将近 110 多万个字符集合，编号范围从 0x000000 到 0x10FFFF。但大多数字符在范围：0x0000 到 0xFFFF 之间（即小于 65536），每个字符都有一个 Unicode 编号并且一般用十六进制表示，前置 U+。例如：[杨] 的 Unicode 表示为：U+6768。&lt;/p&gt;
&lt;p&gt;Unicode 是一种编码标准，它只是为世界上的所有字符进行了编号，并没有指定每个字符每个编号该如何映射为某个二进制串，而 Unicode 的主要实现者有：UTF-32，UTF-16 和 UTF-8。下面，我们分别来看看这些实现者的具体实现细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、UTF-32&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一种最粗暴的实现方式，采用固定四个字节存储单个字符，所有的字符都使用四个字节进行存储，空间浪费，实际使用中很少采用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、UTF-16&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对 Unicode 的存储实现来说，应当遵循一个基本的理念：越常用的字符应当使用越少的字节数表示，而越少见的字符才应该用最多的字节数进行表示。下面我们看看 UTF-16 的具体实现细节：&lt;/p&gt;
&lt;p&gt;Unicode 的编码范围从 0x000000 - 0x10FFFF，总共可以编排 1,112,064 个字符。UTF-16 的策略是，编号范围 0x00000 - 0x10000（0-65532）属于常用字符，采用固定的两个字节存储。其中，字符所对应的二进制数值就是该字符本身编号的二进制字面量值。但是，其中 0xD800 到 0xDFFF 编号区间没有编排任何字符，这个区间将用于后续的增补字集编码，这里暂时先不说。&lt;/p&gt;
&lt;p&gt;可见，对于常用的字符来说，采用两个字节进行编码，但是不常用不代表用不到，我们接着看看那些增补字符集，也就是所谓的不常用字符集是如何编码的。&lt;/p&gt;
&lt;p&gt;对于编号范围 0x10000 - 0x10FFFF 之间的字符来说，UTF-16 使用固定的四个字节进行存储，但是你会发现 0x10000 - 0x10FFFF 之间总共有 FFFF 个字符，即 2^20=1,048,576 个字符，也就是需要 20 个比特位才能编码这么多字符。所以，我们的四个字节里，前两个字节共 16 位至少要提供 2^10(111...111，十个一)种可能，后两个字节也要提供 2^10 种可能，才能组合编排所有的增补字符集。&lt;/p&gt;
&lt;p&gt;但是，现在有一个问题：&lt;strong&gt;一串二进制数值，我如何判断某个字符是常用字符（使用固定的两个字节存储的），或是增补字符（使用四个字节存储的）？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UTF-16 的解决办法如下：&lt;/p&gt;
&lt;p&gt;每个 Unicode 字符都有一个自己的 Unicode 编号，并且对于增补字符来说，他们的编号都大于 0x10000 。用字符本身的编号减去 0x10000 即可得到该字符在所有增补字符集中的排列序号。这个序号的值必然位于范围：0x00000 - 0xFFFFF 之间，占 20 个比特位 ，因为剩下的增补字符数目不会超过 0xFFFF 个。&lt;/p&gt;
&lt;p&gt;对于前 两个字节（维基百科上称做&lt;strong&gt;前导代理&lt;/strong&gt;），定义他们的取值范围：0xD800（0xD800 + 0x0000）到 0xDBFF（0xD800 + 0x3FF &lt;strong&gt;[10 个 1]&lt;/strong&gt;），刚好提供了 2^10 种可能取值。&lt;/p&gt;
&lt;p&gt;对于后 两个字节（维基百科上称做&lt;strong&gt;后尾代理&lt;/strong&gt;），同样定义了他们的取值范围：0xDC00（0xDC00 + 0x0000）到 0xDFFF（0xDC00 + 0x3FF &lt;strong&gt;[10 个 1]&lt;/strong&gt;），也刚好提供了 2^10 种可能取值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180309105640934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，如果发现前两个字节的二进制数值位于范围 0xD800 到 0xDBFF 之间，则说明这个字符属于增补字符并且在编码的时候采用四个字节固定存储了，依次读取四个字节即为当前字符的二进制数值。否则，则说明这是一个由两个固定字节存储的基本常用字符，依次读取两个字节就好了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面看几个示例：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;1、Unicode 编号 U+0024 的字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，判断得知该编号小于 0x10000，该字符隶属于普通常用字符集，所以该字符的 UTF-16 编码值就是其本身的编号二进制形式。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;2、Unicode 编号 U+24B62 的字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，判断该字符的编号值是大于 0x10000 的，说明该字符隶属于增补字符集。&lt;/p&gt;
&lt;p&gt;于是，用 0x24B62 减去 0x10000 得到该字符在增补字符集中的排序：&lt;strong&gt;0x14B62&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;通过 UTF-16 编码标准，得到前导代理和后导代理，组合后就是该字符的 UTF-16 编码。以下是计算过程：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;0x14B62 -&amp;gt; 0001 0100 1011 0110 0010&lt;/p&gt;
&lt;p&gt;前导代理项：0001 0100 10 + 0xD800 = 0xD852&lt;/p&gt;
&lt;p&gt;后尾代理项：11 0110 0010 + 0xDC00 = 0xDF62&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，U+24B62 字符的 UTF-16 编码为：&lt;strong&gt;0xD852 DF62&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结一下 UTF-16 的编码标准，对于编号小于 65536 的字符，采用固定两个字节以编号的二进制作为编码的值。对于增补字符集（编号大于 65536），首先拿本身的 Unicode 编号减去 65536 得到当前字符在增补字符集中的排列序号，接着分出两个代理项并加上特定的数值，使得他们各自位于特定的范围中，并以此来区分某个字符究竟是两个字节存储的还是四个字节存储的。&lt;/p&gt;
&lt;h4 id=&quot;utf-8&quot;&gt;&lt;strong&gt;3、UTF-8&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;UTF-8（8-bit Unicode Transformation Format），是一种针对 Unicode 的可变长度字符编码。使用一到四个字节来编码 Unicode 字符，最常用的字符使用最少的字节数进行存储，很少用的字符使用相对多一点的字节数进行存储。&lt;/p&gt;
&lt;p&gt;UTF-8 的编码规则如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180309132224769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于编号小于 127 的字符来说，UTF-8 编码标准等同于 ASCLL 编码标准。&lt;/p&gt;
&lt;p&gt;对于其余编号范围，按照如图中所示的格式进行编码，其他的也不多说了，现在我们通过一个示例来看看究竟是如何编码的。&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;汉字 [杨] 的 Unicode 编号是：0x6768 ，十进制：26472&lt;/p&gt;
&lt;p&gt;显然，该汉字的 UTF-8 标准编码格式为：1110xxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;0x6768 的二进制是：0110 0111 0110 1000&lt;/p&gt;
&lt;p&gt;从这个二进制的最后一位开始，依次从后向前替换编码格式中的 [x] 即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180309141349442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，结果已经出来了，对应的十六进制代码为：&lt;strong&gt;0xE69DA8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结一下，UTF-8 编码标准对所有 Unicode 编号进行了分类，排名越靠前，存储时使用的字节数目就越少。不同范围的 Unicode 编号字符集在进行 UTF-8 编码的时候会有不同的模板，以自己编号的二进制按照相应的规则去套模板，即可得到相对应的 UTF-8 编码。&lt;/p&gt;
&lt;p&gt;相反的，指定了 UTF-8 编码的文件，计算机在进行解码的时候，以字节为最小单位。如果当前字节的最高位是 0，那么反向我们上述的几个步骤，可以得到该字符的 Unicode 编号二进制形式，继而查表可以得到该字符。&lt;/p&gt;
&lt;p&gt;如果当前字节开头有多个一，那么有几个一，该字符的编码后的二进制数值就有几个字节，顺序读取即可。然后同样的反向操作，自然可以得到相对应的字符。&lt;/p&gt;
&lt;p&gt;常见的几种编码方式就简单介绍到这，关于编码这块，始终要记得本篇中所总结过一个结论。&lt;strong&gt;所有的编码标准实际上都做了两件事情，第一件就是为所有需要编码的字符进行一个编号或标识，第二件就是指定一个规则统一得将这个编号或标识与二进制串进行一个映射。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;文章中的所有代码、图片、文件都云存储在我的 GitHub 上：&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/SingleYam/overview_java&quot; class=&quot;uri&quot;&gt;https://github.com/SingleYam/overview_java&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;欢迎关注微信公众号：扑在代码上的高尔基，所有文章都将同步在公众号上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180305113628126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 07:05:00 +0000</pubDate>
<dc:creator>一只黑色的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangming1996/p/8533993.html</dc:identifier>
</item>
<item>
<title>docker学习系列（一）：docker 基础 - {-）大傻逼</title>
<link>http://www.cnblogs.com/s-b-b/p/8533882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/s-b-b/p/8533882.html</guid>
<description>&lt;h2 id=&quot;一.简介&quot;&gt;一.简介&lt;/h2&gt;
&lt;p&gt;开发当中比较麻烦的问题在于软件配置，每个人的机械以及系统都不尽相同，程序需要运行在系统当中需要配置好相应的系统以及各种依赖的组件，但是很多时候由于各种软件依赖包的版本，系统兼容性问题会导致程序运行出现问题，人们便寻求一种可以解决这种问题的方法。&lt;/p&gt;
&lt;h4 id=&quot;虚拟机&quot;&gt;虚拟机&lt;/h4&gt;
&lt;p&gt;而虚拟机技术就是其中的一种解决方法,众所周知，虚拟机技术允许一种操作系统之上运行另一种操作系统，如win系统安装linux的虚拟机，而里面的运行程序却认为自己依旧运行在linux里面，因此用户只需要打包整个自己的运行环境，就可以在不同的系统利用虚拟机技术完美运行程序所需要的系统，而里面的程序更不在话下，且打包好的系统对于运行的系统而言只是一个文件，可以轻松管理。&lt;/p&gt;
&lt;p&gt;但是虚拟机技术却有一种比较大的问题，那就是用户明明只需要运行某个程序，却需要引入该程序所处的整个系统，不但占用的空间很大，且启动速度也比较慢，毕竟需要启动整个系统。&lt;/p&gt;
&lt;h3 id=&quot;容器技术&quot;&gt;容器技术&lt;/h3&gt;
&lt;p&gt;由于虚拟机存在这些缺点，Linux发展出了另一个虚拟技术：Linux容器，相对于虚拟机，Linux容器不是模仿一个完整的操作系统，而是对进程进行隔离。在这个容器里面，它接触到的资源都是虚拟的，他只需要它本身所需要的组件，相对于虚拟机技术而言，更轻量级，而docker就是对Linux容器的一种封装，提供给我们简单易用的接口，将应用程序以及依赖打包在一个文件里面。&lt;/p&gt;
&lt;h2 id=&quot;二.安装docker&quot;&gt;二.安装docker&lt;/h2&gt;
&lt;p&gt;我是ubuntu系统，安装docker可以使用官方的快捷安装脚本进行安装。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ wget -qO- https://get.docker.com/ | sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是我安装起来有点问题，在添加gbp的时候，所以我是安装&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&quot;&gt;教程&lt;/a&gt;一步步安装的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 添加gbp，但是我按照官方教程执行有点问题，去掉最后一个-符号就可以执行
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# 添加APT资源
$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;
$ sudo apt-get update
# 查看源是否已经生效
$ apt-cache policy docker-ce
# 这时候应该输出类似于这种东西，如果没有这些输出的话，下面的安装就会找不到软件包了
# docker-ce:
#   Installed: (none)
#   Candidate: 17.03.1~ce-0~ubuntu-xenial
#   Version table:
#      17.03.1~ce-0~ubuntu-xenial 500
#         500 https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
#      17.03.0~ce-0~ubuntu-xenial 500
#         500 https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages

# 最后安装docker
$ sudo apt-get install -y docker-ce
# 安装之后执行以下命令有信息输出即证明成功。
$ sudo systemctl status docker
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之后我们可以通过下载一个镜像来尝试运行hello world。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run ubuntu echo &quot;Hello world&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三.使用国内源&quot;&gt;三.使用国内源&lt;/h2&gt;
&lt;p&gt;我们的docker在国内下载镜像并不会很流畅，所以我选择使用&lt;a href=&quot;https://www.docker-cn.com/registry-mirror&quot;&gt;国内官方的景象&lt;/a&gt;。&lt;br/&gt;我直接新建文件：/etc/docker/daemon.json，然后添加如下json，重启docker即可永久选择国内镜像。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四.docker的基本概念&quot;&gt;四.docker的基本概念&lt;/h2&gt;
&lt;h3 id=&quot;image镜像&quot;&gt;1.image（镜像）&lt;/h3&gt;
&lt;p&gt;docker把应用程序以及其依赖，打包在image文件里面，docker容器是通过运行image生成的实例，同一个image文件可以生成多个容器实例。&lt;/p&gt;
&lt;h3 id=&quot;container容器&quot;&gt;2.container（容器）&lt;/h3&gt;
&lt;p&gt;container是一个docker的运行实例，也叫做容器，本身也是一个文件，可以理解容器实例就是通过渲染运行image镜像之后才产生的。值得注意的是生成容器之后，关闭容器不会删除该容器文件，该容器文件之后停止运行了而已。&lt;/p&gt;
&lt;p&gt;至于镜像以及容器之间拥有镜像分层结构，详解可以看出我写的&lt;a href=&quot;http://www.cnblogs.com/s-b-b/p/8533936.html&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;五.基本命令&quot;&gt;五.基本命令&lt;/h2&gt;
&lt;p&gt;镜像操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 查看当前本地镜像列表
$ docker images
# 查看远程相关镜像镜像
$ docker search 镜像名字
# 拉取镜像到本地
$ docker pull 镜像名字
# 删除镜像（当存在多个名字一样的镜像时候，可以通过指定tag方式来操作，如ubuntu:16.04）
$ docker rmi 镜像名字&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;容器的基本操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 创建一个docker容器，返回容器的id
$ docker create 镜像名字
# 运行docker容器
$ docker start 容器id
# 新建容器且运行，也就是上面两步一块执行。
# 值得注意的是如果该镜像在本地不存在，会自动从源那里去拉取
$ docker run 镜像名字
# 停止容器
$ docker stop 容器id
# 查看当前运行的docker容器
$ docker ps
# 查看全部的docker容器
$ docker ps -a
# 删除容器
$ docker rm 容器id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建容器（docker run 镜像）常见可选参数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;p：指定映射端口，如运行一个nginx服务，那么我可以设置 -p 8080:80来把本地的8080端口映射到容器里的80端口。&lt;/li&gt;
&lt;li&gt;d：容器作为一个守护进程去进行运行，也就是保持后台运行，运行后会返回cotainer id。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;容器与镜像间的操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 终端连接到容器
$ docker exec -i -t 容器id bash
# 复制文件到容器里面
$ docker cp index.html 镜像id://usr/share/nginx/html
# 保存更改并生成为一个新的image文件
$ docker commit -m &quot;mess&quot; 镜像id 镜像名字&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 09 Mar 2018 06:55:00 +0000</pubDate>
<dc:creator>{-）大傻逼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/s-b-b/p/8533882.html</dc:identifier>
</item>
<item>
<title>SpringMVC源码情操陶冶-RequestMappingHandlerAdapter适配器 - 南柯问天</title>
<link>http://www.cnblogs.com/question-sky/p/8529862.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/question-sky/p/8529862.html</guid>
<description>&lt;blockquote readability=&quot;5.4886363636364&quot;&gt;
&lt;p&gt;承接前文&lt;a href=&quot;http://www.cnblogs.com/question-sky/p/7170295.html&quot;&gt;SpringMVC源码情操陶冶-HandlerAdapter适配器简析&lt;/a&gt;。RequestMappingHandlerAdapter适配器组件是专门处理RequestMappingHandlerMapping返回的&lt;code&gt;HandlerMethod&lt;/code&gt;对象，由此对象返回相应的视图对象或者直接返回数据给客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;requestmappinghandleradapter的xml配置应用&quot;&gt;RequestMappingHandlerAdapter的xml配置应用&lt;/h3&gt;
&lt;p&gt;常用的针对handlerAdapter适配器的配置如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:annotation-driven&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--对直接返回数据前端而不是视图的消息处理器配置--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:message-converters&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;ref&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; bean=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jsonMessageConverter&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;ref&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; bean=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;xmlMessageConverter&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.jing.springmvc.message.converter.StringHttpMessageConverter&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mvc:message-converters&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--方法参数解析器--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:argument-resolvers&amp;gt;&lt;/span&gt;
        ....
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mvc:argument-resolvers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--返回内容处理器，其会包含上述的mvc:message-converters配置--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:return-value-handlers&amp;gt;&lt;/span&gt;
        ...
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mvc:return-value-handlers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mvc:annotation-driven&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;requestmappinghandleradapter代码层面解析&quot;&gt;RequestMappingHandlerAdapter代码层面解析&lt;/h3&gt;
&lt;p&gt;首先我们可以看下&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;的构造函数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Default constructor.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestMappingHandlerAdapter&lt;/span&gt;() {

        StringHttpMessageConverter stringHttpMessageConverter = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;StringHttpMessageConverter&lt;/span&gt;();
        stringHttpMessageConverter.&lt;span class=&quot;fu&quot;&gt;setWriteAcceptCharset&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// See SPR-7316&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt;();
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ByteArrayHttpMessageConverter&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(stringHttpMessageConverter);
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; SourceHttpMessageConverter&amp;lt;Source&amp;gt;());
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AllEncompassingFormHttpMessageConverter&lt;/span&gt;());
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;上述代表如果不指定&lt;code&gt;mvc:message-converters&lt;/code&gt;配置，则默认采用上述的消息处理器集合，反之则会采用配置的消息处理器而&lt;strong&gt;忽略默认的配置&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再而我们继续看下&lt;code&gt;RequestMappingHandlerAdapter.class&lt;/code&gt;的继承关系&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RequestMappingHandlerAdapter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; AbstractHandlerMethodAdapter
        &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; BeanFactoryAware, InitializingBean{}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们会看到非常熟悉的&lt;code&gt;InitializingBean&lt;/code&gt;接口，其&lt;code&gt;afterPropertiesSet()&lt;/code&gt;方法会在其内部属性设置完毕后被调用，首先我们就从这个方法入手。&lt;/p&gt;
&lt;h4 id=&quot;requestmappinghandleradapterafterpropertiesset&quot;&gt;RequestMappingHandlerAdapter#afterPropertiesSet()&lt;/h4&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterPropertiesSet&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 加载mvc:argument-resolvers的配置信息以及应用默认的配置&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;argumentResolvers&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers = &lt;span class=&quot;fu&quot;&gt;getDefaultArgumentResolvers&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;argumentResolvers&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HandlerMethodArgumentResolverComposite&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addResolvers&lt;/span&gt;(resolvers);
        }
        &lt;span class=&quot;co&quot;&gt;// 加载mvc:argument-resolvers的配置信息以及应用默认的配置&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;initBinderArgumentResolvers&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers = &lt;span class=&quot;fu&quot;&gt;getDefaultInitBinderArgumentResolvers&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;initBinderArgumentResolvers&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HandlerMethodArgumentResolverComposite&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addResolvers&lt;/span&gt;(resolvers);
        }
        &lt;span class=&quot;co&quot;&gt;// 加载mvc:message-converters的配置信息以及应用默认的配置&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;returnValueHandlers&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; handlers = &lt;span class=&quot;fu&quot;&gt;getDefaultReturnValueHandlers&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;returnValueHandlers&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HandlerMethodReturnValueHandlerComposite&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addHandlers&lt;/span&gt;(handlers);
        }
        &lt;span class=&quot;co&quot;&gt;// 初始化缓存所有@ControllerAdvice类上的含有@ModelAttributes和@InitBinder注解方法集合&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;initControllerAdviceCache&lt;/span&gt;();
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;针对上述的代码我们罗列下默认的参数处理、返回值处理是配置哪些处理类&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;参数处理类列表&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;HandlerMethodArgumentResolver&amp;gt; &lt;span class=&quot;fu&quot;&gt;getDefaultArgumentResolvers&lt;/span&gt;() {
    List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;HandlerMethodArgumentResolver&amp;gt;();

    &lt;span class=&quot;co&quot;&gt;// Annotation-based argument resolution&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// @RequestParam和@RequestParamMap&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestParamMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestParamMapMethodArgumentResolver&lt;/span&gt;());
    &lt;span class=&quot;co&quot;&gt;// @PathVariable和@PathVariableMap&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PathVariableMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PathVariableMapMethodArgumentResolver&lt;/span&gt;());
    &lt;span class=&quot;co&quot;&gt;// @MatrixVariable和@MatrixVariableMap&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MatrixVariableMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MatrixVariableMapMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletModelAttributeMethodProcessor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;));
    &lt;span class=&quot;co&quot;&gt;// @RequestBody&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestResponseBodyMethodProcessor&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMessageConverters&lt;/span&gt;()));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestPartMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMessageConverters&lt;/span&gt;()));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestHeaderMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;()));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestHeaderMapMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletCookieValueMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;()));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ExpressionValueMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;()));

    &lt;span class=&quot;co&quot;&gt;// Type-based argument resolution&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletRequestMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletResponseMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpEntityMethodProcessor&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMessageConverters&lt;/span&gt;()));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RedirectAttributesMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelMethodProcessor&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MapMethodProcessor&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ErrorsMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SessionStatusMethodArgumentResolver&lt;/span&gt;());
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UriComponentsBuilderMethodArgumentResolver&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 加载mvc:argument-resolver的自定义配置&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;getCustomArgumentResolvers&lt;/span&gt;() != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        resolvers.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getCustomArgumentResolvers&lt;/span&gt;());
    }

    &lt;span class=&quot;co&quot;&gt;// Catch-all&lt;/span&gt;
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestParamMethodArgumentResolver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;));
    resolvers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletModelAttributeMethodProcessor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;));

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; resolvers;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;主要应用于我们常用的方法参数的注解，比如&lt;code&gt;@RequestParam&lt;/code&gt;、&lt;code&gt;@PathVarible&lt;/code&gt;、&lt;code&gt;@RequestBody&lt;/code&gt;等注解方法，多余的读者可自行分析&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;上述的&lt;code&gt;@RequestBody&lt;/code&gt;、&lt;code&gt;@RequestPart&lt;/code&gt;注解处理类也会用到&lt;code&gt;mvc:message-converter&lt;/code&gt;的配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;返回值处理类列表&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Return the list of return value handlers to use including built-in and&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * custom handlers provided via &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link #setReturnValueHandlers}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; &lt;span class=&quot;fu&quot;&gt;getDefaultReturnValueHandlers&lt;/span&gt;() {
    List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; handlers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;HandlerMethodReturnValueHandler&amp;gt;();

    &lt;span class=&quot;co&quot;&gt;// Single-purpose return value types&lt;/span&gt;
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAndViewMethodReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelMethodProcessor&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ViewMethodReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpEntityMethodProcessor&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMessageConverters&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;contentNegotiationManager&lt;/span&gt;));
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpHeadersReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CallableMethodReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DeferredResultMethodReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AsyncTaskMethodReturnValueHandler&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanFactory&lt;/span&gt;));

    &lt;span class=&quot;co&quot;&gt;// Annotation-based return value types&lt;/span&gt;
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAttributeMethodProcessor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;));
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequestResponseBodyMethodProcessor&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMessageConverters&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;contentNegotiationManager&lt;/span&gt;));

    &lt;span class=&quot;co&quot;&gt;// Multi-purpose return value types&lt;/span&gt;
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ViewNameMethodReturnValueHandler&lt;/span&gt;());
    handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MapMethodProcessor&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 自定义的返回类型处理器&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;getCustomReturnValueHandlers&lt;/span&gt;() != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        handlers.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getCustomReturnValueHandlers&lt;/span&gt;());
    }

    &lt;span class=&quot;co&quot;&gt;// Catch-all&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getModelAndViewResolvers&lt;/span&gt;())) {
        handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAndViewResolverMethodReturnValueHandler&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getModelAndViewResolvers&lt;/span&gt;()));
    }
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        handlers.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAttributeMethodProcessor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;));
    }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; handlers;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;主要应用于我们常用的方法返回类型，比如&lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;ModelAndView&lt;/code&gt;、&lt;code&gt;View&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;@ResponseBody&lt;/code&gt;等返回类型，多余的读者可自行分析&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;上述的&lt;code&gt;@ResponseBody&lt;/code&gt;注解也会用到&lt;code&gt;mvc:message-converter&lt;/code&gt;的配置，多用于将数据直接写入响应体中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;requestmappinghandleradapterhandleinternal&quot;&gt;RequestMappingHandlerAdapter#handleInternal()&lt;/h3&gt;
&lt;p&gt;完整的处理&lt;code&gt;RequestMappingHandlerMapping&lt;/code&gt;所含有的对象&lt;code&gt;HandlerMethod&lt;/code&gt;，废话少说，我们直接看下源码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ModelAndView &lt;span class=&quot;fu&quot;&gt;handleInternal&lt;/span&gt;(HttpServletRequest request,
            HttpServletResponse response, HandlerMethod handlerMethod) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;co&quot;&gt;// checkAndPrepare，处理前的准备工作①&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;getSessionAttributesHandler&lt;/span&gt;(handlerMethod).&lt;span class=&quot;fu&quot;&gt;hasSessionAttributes&lt;/span&gt;()) {
            &lt;span class=&quot;co&quot;&gt;// 相应的类上存在@SessionAttribute注解则走此处&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// Always prevent caching in case of session attribute management.&lt;/span&gt;
            &lt;span class=&quot;fu&quot;&gt;checkAndPrepare&lt;/span&gt;(request, response, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cacheSecondsForSessionAttributeHandlers&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// Uses configured default cacheSeconds setting.&lt;/span&gt;
            &lt;span class=&quot;fu&quot;&gt;checkAndPrepare&lt;/span&gt;(request, response, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        }

        &lt;span class=&quot;co&quot;&gt;// Execute invokeHandlerMethod in synchronized block if required.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;synchronizeOnSession&lt;/span&gt;) {
            HttpSession session = request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (session != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                Object mutex = WebUtils.&lt;span class=&quot;fu&quot;&gt;getSessionMutex&lt;/span&gt;(session);
                &lt;span class=&quot;kw&quot;&gt;synchronized&lt;/span&gt; (mutex) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;invokeHandleMethod&lt;/span&gt;(request, response, handlerMethod);
                }
            }
        }
        &lt;span class=&quot;co&quot;&gt;// invokeHandleMethod,处理HandleMethod对象开始业务逻辑②&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;invokeHandleMethod&lt;/span&gt;(request, response, handlerMethod);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述罗列了最主要的两个执行方法，按照先后顺序已标注为①和②，现在我们分别看下方法的逻辑&lt;/p&gt;
&lt;h4 id=&quot;webcontentgeneratorcheckandprepare-检查并作预备工作&quot;&gt;WebContentGenerator#checkAndPrepare()-检查并作预备工作①&lt;/h4&gt;
&lt;p&gt;我们直接通过源码来讲解&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;checkAndPrepare&lt;/span&gt;(
            HttpServletRequest request, HttpServletResponse response, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; cacheSeconds, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; lastModified)
            &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException {

        &lt;span class=&quot;co&quot;&gt;// 检查请求的方法是否被支持&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// RequestMappingHandlerAdapter默认指定的supportedMethods为null&lt;/span&gt;
        String method = request.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;supportedMethods&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;supportedMethods&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(method)) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpRequestMethodNotSupportedException&lt;/span&gt;(
                    method, StringUtils.&lt;span class=&quot;fu&quot;&gt;toStringArray&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;supportedMethods&lt;/span&gt;));
        }

        &lt;span class=&quot;co&quot;&gt;// 检查是否session对象必须存在，默认为false&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;requireSession&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;) == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpSessionRequiredException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Pre-existing session required but none found&quot;&lt;/span&gt;);
            }
        }

        &lt;span class=&quot;co&quot;&gt;// 是否增加cache头响应，默认不加&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;applyCacheSeconds&lt;/span&gt;(response, cacheSeconds, lastModified);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;从上述的代码解析看，此处只是为了检查请求的方式是否被支持、session对象是否必须存在、cache响应头是否需要新增。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过代码跟踪与发现，&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;对象并不需要上述的检查，所以此方法可略过&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;requestmappinghandleradapterinvokehandlemethod-关键处理逻辑&quot;&gt;RequestMappingHandlerAdapter#invokeHandleMethod()-关键处理逻辑②&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Invoke the &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link RequestMapping}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; handler method preparing a &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link ModelAndView}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * if view resolution is required.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ModelAndView &lt;span class=&quot;fu&quot;&gt;invokeHandleMethod&lt;/span&gt;(HttpServletRequest request,
            HttpServletResponse response, HandlerMethod handlerMethod) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {

        ServletWebRequest webRequest = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletWebRequest&lt;/span&gt;(request, response);
        &lt;span class=&quot;co&quot;&gt;// HandlerMethod对应实体类的@InitBinder注解方法集合以及所关联的@ControllAdvice注解类的@InitBinder方法集合&lt;/span&gt;
        WebDataBinderFactory binderFactory = &lt;span class=&quot;fu&quot;&gt;getDataBinderFactory&lt;/span&gt;(handlerMethod);
        &lt;span class=&quot;co&quot;&gt;// 同上，对应@ModelAttribute方法集合&lt;/span&gt;
        ModelFactory modelFactory = &lt;span class=&quot;fu&quot;&gt;getModelFactory&lt;/span&gt;(handlerMethod, binderFactory);
        
        &lt;span class=&quot;co&quot;&gt;// 包装成ServletInvocableHandlerMethod对象&lt;/span&gt;
        ServletInvocableHandlerMethod requestMappingMethod = &lt;span class=&quot;fu&quot;&gt;createRequestMappingMethod&lt;/span&gt;(handlerMethod, binderFactory);
        
        &lt;span class=&quot;co&quot;&gt;// 整合model对象集合1.request对象的org.springframework.web.servlet.DispatcherServlet.INPUT_FLASH_MAP属性值 2.解析带@ModelAttribute注解的方法返回值 3.session保存的属性集合&lt;/span&gt;
        ModelAndViewContainer mavContainer = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAndViewContainer&lt;/span&gt;();
        mavContainer.&lt;span class=&quot;fu&quot;&gt;addAllAttributes&lt;/span&gt;(RequestContextUtils.&lt;span class=&quot;fu&quot;&gt;getInputFlashMap&lt;/span&gt;(request));
        modelFactory.&lt;span class=&quot;fu&quot;&gt;initModel&lt;/span&gt;(webRequest, mavContainer, requestMappingMethod);
        mavContainer.&lt;span class=&quot;fu&quot;&gt;setIgnoreDefaultModelOnRedirect&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ignoreDefaultModelOnRedirect&lt;/span&gt;);
        
        &lt;span class=&quot;co&quot;&gt;// 异步请求的处理配置，servlet 3.0+才会被引用&lt;/span&gt;
        AsyncWebRequest asyncWebRequest = WebAsyncUtils.&lt;span class=&quot;fu&quot;&gt;createAsyncWebRequest&lt;/span&gt;(request, response);
        asyncWebRequest.&lt;span class=&quot;fu&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;asyncRequestTimeout&lt;/span&gt;);

        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; WebAsyncManager asyncManager = WebAsyncUtils.&lt;span class=&quot;fu&quot;&gt;getAsyncManager&lt;/span&gt;(request);
        asyncManager.&lt;span class=&quot;fu&quot;&gt;setTaskExecutor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;taskExecutor&lt;/span&gt;);
        asyncManager.&lt;span class=&quot;fu&quot;&gt;setAsyncWebRequest&lt;/span&gt;(asyncWebRequest);
        asyncManager.&lt;span class=&quot;fu&quot;&gt;registerCallableInterceptors&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;callableInterceptors&lt;/span&gt;);
        asyncManager.&lt;span class=&quot;fu&quot;&gt;registerDeferredResultInterceptors&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;deferredResultInterceptors&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (asyncManager.&lt;span class=&quot;fu&quot;&gt;hasConcurrentResult&lt;/span&gt;()) {
            Object result = asyncManager.&lt;span class=&quot;fu&quot;&gt;getConcurrentResult&lt;/span&gt;();
            mavContainer = (ModelAndViewContainer) asyncManager.&lt;span class=&quot;fu&quot;&gt;getConcurrentResultContext&lt;/span&gt;()[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;];
            asyncManager.&lt;span class=&quot;fu&quot;&gt;clearConcurrentResult&lt;/span&gt;();

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (logger.&lt;span class=&quot;fu&quot;&gt;isDebugEnabled&lt;/span&gt;()) {
                logger.&lt;span class=&quot;fu&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Found concurrent result value [&quot;&lt;/span&gt; + result + &lt;span class=&quot;st&quot;&gt;&quot;]&quot;&lt;/span&gt;);
            }
            requestMappingMethod = requestMappingMethod.&lt;span class=&quot;fu&quot;&gt;wrapConcurrentResult&lt;/span&gt;(result);
        }
        
        &lt;span class=&quot;co&quot;&gt;// 处理业务逻辑&lt;/span&gt;
        requestMappingMethod.&lt;span class=&quot;fu&quot;&gt;invokeAndHandle&lt;/span&gt;(webRequest, mavContainer);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (asyncManager.&lt;span class=&quot;fu&quot;&gt;isConcurrentHandlingStarted&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        }
        
        &lt;span class=&quot;co&quot;&gt;// 返回视图对象&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getModelAndView&lt;/span&gt;(mavContainer, modelFactory, webRequest);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的代码备注上述已展示，可以看下最主要的部分&lt;code&gt;ServletInvocableHandlerMethod#invokeAndHandle()&lt;/code&gt;，其实如何处理具体的业务逻辑&lt;/p&gt;
&lt;h4 id=&quot;servletinvocablehandlermethodinvokeandhandle&quot;&gt;ServletInvocableHandlerMethod#invokeAndHandle()&lt;/h4&gt;
&lt;p&gt;直接上源码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;invokeAndHandle&lt;/span&gt;(ServletWebRequest webRequest,
            ModelAndViewContainer mavContainer, Object&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;providedArgs) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;co&quot;&gt;// 处理业务逻辑代码得到返回值&lt;/span&gt;
        Object returnValue = &lt;span class=&quot;fu&quot;&gt;invokeForRequest&lt;/span&gt;(webRequest, mavContainer, providedArgs);
        
        &lt;span class=&quot;co&quot;&gt;// 设置返回状态码和返回信息，通常与@ResponseStatus结合使用&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;setResponseStatus&lt;/span&gt;(webRequest);

        ....
        ....
        

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 检索returnValueHandlers集合，查找对应返回类型的处理器用于处理请求&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;returnValueHandlers&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;handleReturnValue&lt;/span&gt;(returnValue, &lt;span class=&quot;fu&quot;&gt;getReturnValueType&lt;/span&gt;(returnValue), mavContainer, webRequest);
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception ex) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (logger.&lt;span class=&quot;fu&quot;&gt;isTraceEnabled&lt;/span&gt;()) {
                logger.&lt;span class=&quot;fu&quot;&gt;trace&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getReturnValueHandlingErrorMessage&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Error handling return value&quot;&lt;/span&gt;, returnValue), ex);
            }
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; ex;
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;上述代码如果方法结合了&lt;code&gt;@ResponseStatus&lt;/code&gt;注解，则如果指定了&lt;code&gt;reason&lt;/code&gt;字段值且非空，则会直接发送错误至前台，错误信息则为&lt;code&gt;reason&lt;/code&gt;指定的内容。具体的可查看下&lt;code&gt;@ResponseStatus&lt;/code&gt;注解文档&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过之前设置的&lt;code&gt;returnValueHandlers&lt;/code&gt;集合来匹配返回类型从而处理多方式的响应&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;为了方便理解上述的第二点，举个处理&lt;code&gt;@RequestBody&lt;/code&gt;和&lt;code&gt;@ResponseBody&lt;/code&gt;注解方法的返回方式，此处为&lt;strong&gt;&lt;code&gt;RequestResponseBodyMethodProcessor&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleReturnValue&lt;/span&gt;(Object returnValue, MethodParameter returnType,
            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)
            &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException, HttpMediaTypeNotAcceptableException {
        &lt;span class=&quot;co&quot;&gt;// 设置处理状态为已处理&lt;/span&gt;
        mavContainer.&lt;span class=&quot;fu&quot;&gt;setRequestHandled&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 一般此处的返回值为String对象或者自定义的对象，切记是一个对象，而非void&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (returnValue != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;co&quot;&gt;// 此处就是通过mvc:message-converters指定的或者默认的消息处理器来处理内容&lt;/span&gt;
            &lt;span class=&quot;fu&quot;&gt;writeWithMessageConverters&lt;/span&gt;(returnValue, returnType, webRequest);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从此处我们可以直接关注&lt;code&gt;AbstractMessageConverterMethodProcessor#writeWithMessageConverters()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;writeWithMessageConverters&lt;/span&gt;(T returnValue, MethodParameter returnType,
            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)
            &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException, HttpMediaTypeNotAcceptableException {

        Class&amp;lt;?&amp;gt; returnValueClass = returnValue.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;();
        HttpServletRequest servletRequest = inputMessage.&lt;span class=&quot;fu&quot;&gt;getServletRequest&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 大多用于获取请求包头的accept头，表明客户端需要接收什么类型的媒体类型&lt;/span&gt;
        List&amp;lt;MediaType&amp;gt; requestedMediaTypes = &lt;span class=&quot;fu&quot;&gt;getAcceptableMediaTypes&lt;/span&gt;(servletRequest);
        &lt;span class=&quot;co&quot;&gt;// 优先应用@RequestMapping的produce属性，表示生产何种类型的媒体类型，否则则采用messageConverters集合下指定的supportMediaTypes属性集合&lt;/span&gt;
        List&amp;lt;MediaType&amp;gt; producibleMediaTypes = &lt;span class=&quot;fu&quot;&gt;getProducibleMediaTypes&lt;/span&gt;(servletRequest, returnValueClass);

        &lt;span class=&quot;co&quot;&gt;// 匹配查找结果&lt;/span&gt;
        Set&amp;lt;MediaType&amp;gt; compatibleMediaTypes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;MediaType&amp;gt;();
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (MediaType requestedType : requestedMediaTypes) {
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (MediaType producibleType : producibleMediaTypes) {
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (requestedType.&lt;span class=&quot;fu&quot;&gt;isCompatibleWith&lt;/span&gt;(producibleType)) {
                    compatibleMediaTypes.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMostSpecificMediaType&lt;/span&gt;(requestedType, producibleType));
                }
            }
        }
        &lt;span class=&quot;co&quot;&gt;// 没有匹配的媒体类型处理，则抛异常&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (compatibleMediaTypes.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpMediaTypeNotAcceptableException&lt;/span&gt;(producibleMediaTypes);
        }

        List&amp;lt;MediaType&amp;gt; mediaTypes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;MediaType&amp;gt;(compatibleMediaTypes);
        MediaType.&lt;span class=&quot;fu&quot;&gt;sortBySpecificityAndQuality&lt;/span&gt;(mediaTypes);

        ......
        ......

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (selectedMediaType != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            selectedMediaType = selectedMediaType.&lt;span class=&quot;fu&quot;&gt;removeQualityValue&lt;/span&gt;();
            &lt;span class=&quot;co&quot;&gt;// 遍历消息处理器集合，统一通过canWrite()方法来做条件判断，采用write()方法写入数据&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (HttpMessageConverter&amp;lt;?&amp;gt; messageConverter : &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;messageConverters&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (messageConverter.&lt;span class=&quot;fu&quot;&gt;canWrite&lt;/span&gt;(returnValueClass, selectedMediaType)) {
                    ((HttpMessageConverter&amp;lt;T&amp;gt;) messageConverter).&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(returnValue, selectedMediaType, outputMessage);
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (logger.&lt;span class=&quot;fu&quot;&gt;isDebugEnabled&lt;/span&gt;()) {
                        logger.&lt;span class=&quot;fu&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Written [&quot;&lt;/span&gt; + returnValue + &lt;span class=&quot;st&quot;&gt;&quot;] as &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + selectedMediaType + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; using [&quot;&lt;/span&gt; +
                                messageConverter + &lt;span class=&quot;st&quot;&gt;&quot;]&quot;&lt;/span&gt;);
                    }
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
                }
            }
        }
        &lt;span class=&quot;co&quot;&gt;// 抛异常&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpMediaTypeNotAcceptableException&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;allSupportedMediaTypes&lt;/span&gt;);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li&gt;优先比较消息的媒体类型是否能被响应。不能被响应则会抛出异常
&lt;ul&gt;&lt;li&gt;请求体的媒体类型获取：Accept头、请求路径的文件后缀名等&lt;/li&gt;
&lt;li&gt;响应体的媒体类型获取：&lt;code&gt;@RequestMapping&lt;/code&gt;注解属性&lt;code&gt;produce&lt;/code&gt;(&lt;strong&gt;优先&lt;/strong&gt;)、&lt;code&gt;messageConverters&lt;/code&gt;配置的&lt;code&gt;supportMediaTypes&lt;/code&gt;集合(&lt;strong&gt;其次&lt;/strong&gt;)、所有类型均支持(&lt;strong&gt;默认&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;写入响应体时，优先判断消息处理器是否支持返回内容对应的类，是则开始写入数据到响应体。此点多应用于&lt;code&gt;json&lt;/code&gt;对象的返回包装，读者也可以多关注spring内置的&lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;消息处理器&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;上述条件均不满足的情况下，会抛出&lt;code&gt;Could not find acceptable representation&lt;/code&gt;等错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;requestmappinghandleradaptergetmodelandview-判断是否需要返回视图对象&quot;&gt;RequestMappingHandlerAdapter#getModelAndView()-判断是否需要返回视图对象&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ModelAndView &lt;span class=&quot;fu&quot;&gt;getModelAndView&lt;/span&gt;(ModelAndViewContainer mavContainer,
            ModelFactory modelFactory, NativeWebRequest webRequest) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {

        modelFactory.&lt;span class=&quot;fu&quot;&gt;updateModel&lt;/span&gt;(webRequest, mavContainer);
        &lt;span class=&quot;co&quot;&gt;// 请求如果已经标记为已处理，则返回null的视图对象。&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (mavContainer.&lt;span class=&quot;fu&quot;&gt;isRequestHandled&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        }
        ModelMap model = mavContainer.&lt;span class=&quot;fu&quot;&gt;getModel&lt;/span&gt;();
        ModelAndView mav = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ModelAndView&lt;/span&gt;(mavContainer.&lt;span class=&quot;fu&quot;&gt;getViewName&lt;/span&gt;(), model);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!mavContainer.&lt;span class=&quot;fu&quot;&gt;isViewReference&lt;/span&gt;()) {
            mav.&lt;span class=&quot;fu&quot;&gt;setView&lt;/span&gt;((View) mavContainer.&lt;span class=&quot;fu&quot;&gt;getView&lt;/span&gt;());
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (model &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; RedirectAttributes) {
            Map&amp;lt;String, ?&amp;gt; flashAttributes = ((RedirectAttributes) model).&lt;span class=&quot;fu&quot;&gt;getFlashAttributes&lt;/span&gt;();
            HttpServletRequest request = webRequest.&lt;span class=&quot;fu&quot;&gt;getNativeRequest&lt;/span&gt;(HttpServletRequest.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
            RequestContextUtils.&lt;span class=&quot;fu&quot;&gt;getOutputFlashMap&lt;/span&gt;(request).&lt;span class=&quot;fu&quot;&gt;putAll&lt;/span&gt;(flashAttributes);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mav;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要通过&lt;code&gt;ModelAndViewContainer#requestHandled&lt;/code&gt;标记来判断是否返回视图对象，此标记为null表示不经过视图返回给前端而是通过其他形式的返回比如直接返回数据给前端，具体可看前面的代码分析。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;blockquote readability=&quot;2.7324561403509&quot;&gt;
&lt;p&gt;最好结合&lt;a href=&quot;http://www.cnblogs.com/question-sky/p/6940552.html&quot;&gt;SpringMVC源码情操陶冶-DispatcherServlet简析（二）&lt;/a&gt;和&lt;a href=&quot;http://www.cnblogs.com/question-sky/p/7090875.html&quot;&gt;SpringMVC源码情操陶冶-AnnotationDrivenBeanDefinitionParser注解解析器&lt;/a&gt;两篇博文来阅读，则会对&lt;code&gt;HandlerAdapter&lt;/code&gt;适配器有更深的理解&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 09 Mar 2018 06:54:00 +0000</pubDate>
<dc:creator>南柯问天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/question-sky/p/8529862.html</dc:identifier>
</item>
<item>
<title>用VSCode开发一个基于asp.net core 2.0/sql server linux(docker)/ng5/bs4的项目(3) - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/8525541.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/8525541.html</guid>
<description>&lt;p&gt;第一部分: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8478993.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8478993.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二部分: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8481825.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8481825.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于本文主要是讲VSCode开发等, 所以相关等一些angular/.net core的知识就相对少讲点.&lt;/p&gt;
&lt;p&gt;我把需求改一下, 如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309124326917-630490742.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于efcore目前还是使用中间表来建立多对多的关系, 所以分类标签这个需求就没什么特别的了, 就去掉吧. 还有电视剧分季这个技术上也是重复的, 也删掉.&lt;/p&gt;
&lt;p&gt;目前只剩下电视台和电视剧的维护, 还剩下的知识点是:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;集合的CRUD操作&lt;/li&gt;
&lt;li&gt;对项目结构进行整理, 使用Unit Of Work 以及 Repository 模式&lt;/li&gt;
&lt;li&gt;上传文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于CRUD画面做起来比较简单, 我相信大家使用该技术的都会, 所以我直接把我写完的代码传上来. 此时页面的操作效果请看视频:&lt;/p&gt;

&lt;p&gt;这时的代码: &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1egCmuNT0OxJNwkz0OQ72kA&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1egCmuNT0OxJNwkz0OQ72kA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里面又一个比较常见的问题, 就是&lt;/p&gt;
&lt;h2&gt;针对集合的增删改:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309130029800-1506873784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述业务的电视剧的增删改就会出现这种情况:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309130524699-807937159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据库里面原来有4条数据, 而前台操作完, 删除了第3条数据, 并且增加了一条数据, 其余数据的内容可能有变化.&lt;/p&gt;
&lt;p&gt;这种集合类增删改的思路应该是这样的:&lt;/p&gt;
&lt;p&gt;1.从传进来的集合找出所有新添加的数据(新添加的数据Id通常并不存在, 这是条件), 放在一个临时的集合, 然后添加到context.&lt;/p&gt;
&lt;p&gt;2.从数据库集合找出所有需要删除的数据(有一些id在传进来的集合找不到的就是), 放在一个集合, 然后从conetxt一次性移除.&lt;/p&gt;
&lt;p&gt;3.两个集合都有的数据就是只需要修改内容的数据, 更新即可.&lt;/p&gt;
&lt;p&gt;下面开始实现这个功能:&lt;/p&gt;
&lt;p&gt;首先确保Put方法里, 把电视台下所有的电视剧都读取出来:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309131934433-699498943.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;接下来, 找到MappingProfile.cs, 使用AutoMapper来实现这个功能.&lt;/p&gt;
&lt;p&gt;首先要忽略默认的集合映射:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309132318860-62724309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后调用AfterMap方法做后期手动处理, 代码的意思大概是这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309134554921-1689278481.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者, 也可以用Linq做一些重构:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309135838805-315086848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;回到画面试一下编辑功能:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309140221960-790198667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后添加和删除:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309140240483-101630676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309140249942-28107200.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OK.&lt;/p&gt;

&lt;h2&gt;项目重构&lt;/h2&gt;
&lt;p&gt;下面, 我们使用Unit Of Work以及Repository Pattern对项目进行重构:&lt;/p&gt;
&lt;p&gt;由于这部分也很简单, 并且也不是这篇文章的重点, 我就直接贴出重构后的代码吧:&lt;/p&gt;
&lt;p&gt;Database/TvRepostiory.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Models;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvRepository : ITvRepostitory
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; TvContext context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TvRepository(TvContext context)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.context =&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;List&amp;lt;TvNetwork&amp;gt;&amp;gt;&lt;span&gt; GetTvNetworksAsync()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; context.TvNetworks.Include(x =&amp;gt;&lt;span&gt; x.TvShows).ToListAsync();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;TvNetwork&amp;gt; GetTvNetworkByIdAsync(&lt;span&gt;int&lt;/span&gt; id, &lt;span&gt;bool&lt;/span&gt; includeRelated = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (includeRelated)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; context.TvNetworks.Include(x =&amp;gt; x.TvShows).SingleOrDefaultAsync(x =&amp;gt; x.Id ==&lt;span&gt; id);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.TvNetworks.FindAsync(id);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AddTvNetwork(TvNetwork model)
        {
            context.TvNetworks.Add(model);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RemoveTvNetwork(TvNetwork model)
        {
            context.TvNetworks.Remove(model);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database/ITvRepository.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Models;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ITvRepostitory
    {
        Task&lt;/span&gt;&amp;lt;List&amp;lt;TvNetwork&amp;gt;&amp;gt;&lt;span&gt; GetTvNetworksAsync();
        Task&lt;/span&gt;&amp;lt;TvNetwork&amp;gt; GetTvNetworkByIdAsync(&lt;span&gt;int&lt;/span&gt; id, &lt;span&gt;bool&lt;/span&gt; includeRelated = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; AddTvNetwork(TvNetwork model);
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; RemoveTvNetwork(TvNetwork model);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database/UnitOfWork.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UnitOfWork : IUnitOfWork
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; TvContext context;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UnitOfWork(TvContext context)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.context =&lt;span&gt; context;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task SaveAsync()
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Database/IUnitOfWork.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUnitOfWork
    {
        Task SaveAsync();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Startup.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddAutoMapper();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; services.AddDbContext&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(Configuration[&quot;ConnectionStrings:Default&quot;]));&lt;/span&gt;
            services.AddDbContext&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(Configuration.GetConnectionString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
            &lt;span&gt;services.AddScoped&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;ITvRepostitory, TvRepository&amp;gt;();
            services.AddScoped&amp;lt;IUnitOfWork, UnitOfWork&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;();&lt;/span&gt;
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TvController.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; AutoMapper;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Database;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Models;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.ViewModels;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Controllers
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ITvRepostitory repostiory;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IUnitOfWork unitOfWork;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IMapper mapper;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TvController(ITvRepostitory repostiory, IUnitOfWork unitOfWork, IMapper mapper)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.repostiory =&lt;span&gt; repostiory;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.unitOfWork =&lt;span&gt; unitOfWork;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mapper =&lt;span&gt; mapper;
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/tvnetworks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;TvNetworkViewModel&amp;gt;&amp;gt;&lt;span&gt; GetTvNetworks()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; models = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; repostiory.GetTvNetworksAsync();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vms = mapper.Map&amp;lt;List&amp;lt;TvNetwork&amp;gt;, List&amp;lt;TvNetworkViewModel&amp;gt;&amp;gt;&lt;span&gt;(models);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; vms;
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/tvnetworks/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; model = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; repostiory.GetTvNetworkByIdAsync(id);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vm = mapper.Map&amp;lt;TvNetwork, TvNetworkViewModel&amp;gt;&lt;span&gt;(model);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok(vm);
        }

        [HttpPost(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/tvnetworks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; Post([FromBody]TvNetworkUpdateViewModel vm)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ModelState.IsValid)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BadRequest(ModelState);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; model = mapper.Map&amp;lt;TvNetworkUpdateViewModel, TvNetwork&amp;gt;&lt;span&gt;(vm);
            repostiory.AddTvNetwork(model);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; unitOfWork.SaveAsync();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = mapper.Map&amp;lt;TvNetwork, TvNetworkViewModel&amp;gt;&lt;span&gt;(model);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok(result);
        }

        [HttpPut(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/tvnetworks/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Put(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id, [FromBody]TvNetworkUpdateViewModel vm)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ModelState.IsValid)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BadRequest(ModelState);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dbModel = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; repostiory.GetTvNetworkByIdAsync(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (dbModel == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; model = mapper.Map&amp;lt;TvNetworkUpdateViewModel, TvNetwork&amp;gt;&lt;span&gt;(vm, dbModel);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; unitOfWork.SaveAsync();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = mapper.Map&amp;lt;TvNetwork, TvNetworkViewModel&amp;gt;&lt;span&gt;(model);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok(result);
        }

        [HttpDelete(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/tvnetworks/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt; Delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; model = &lt;span&gt;await&lt;/span&gt; repostiory.GetTvNetworkByIdAsync(id, includeRelated: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (model == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NotFound();
            }
            repostiory.RemoveTvNetwork(model);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; unitOfWork.SaveAsync();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NoContent();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再操作下画面, 没有任何问题.&lt;/p&gt;


&lt;p&gt;今天先写到这, VSCode的开发速度还是非常快的.&lt;/p&gt;
&lt;p&gt;还剩下最后一部分--上传文件.&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 06:30:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/8525541.html</dc:identifier>
</item>
<item>
<title>俄罗斯方块联机小游戏的实现（一） 基础功能 - 丶Pz</title>
<link>http://www.cnblogs.com/panzi/p/8533705.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/panzi/p/8533705.html</guid>
<description>&lt;p&gt;    好友没有写博客啦。没啥可说的，就是因为懒。今后几篇为大家带来一个俄罗斯方块游戏的实现，网上有很多类似博客，大致原理一致，我自己想的思路也没有多大的偏差。不过我稍微加了一些联机元素在里面。先放一张效果图吧，我不会做界面，就酱紫了，不改了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2018/0308/134215_picW_3669181.png&quot; alt=&quot;&quot; width=&quot;1055&quot; height=&quot;555&quot; align=&quot;left&quot;/&gt;&lt;/p&gt;















&lt;ol&gt;&lt;li&gt;单机版的俄罗斯方块游戏体验：即俄罗斯方块游戏的基础实现，方块定义，方块旋转等&lt;/li&gt;
&lt;li&gt;联机两人（或多人）一起玩游戏，增加竞技乐趣&lt;/li&gt;
&lt;li&gt;类似游戏大厅的功能，玩家可选择房间进入&lt;/li&gt;
&lt;li&gt;消息推送功能，联机必备&lt;/li&gt;
&lt;li&gt;方块界面由&lt;strong&gt;canvas&lt;/strong&gt;实现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;    首先我们要开发一个联机游戏，那么消息推送是必不可少的，由于我只会一丢丢的&lt;strong&gt;WebSocket&lt;/strong&gt;，那我只好用它了。另外这次还是使用了 &lt;strong&gt;tio&lt;/strong&gt; 框架。&lt;strong&gt;tio-http-server&lt;/strong&gt; &lt;strong&gt;tio-ws-server&lt;/strong&gt; 都有用到。第二，就是俄罗斯方块的游戏分析。其实游戏名称里的”&lt;strong&gt;方块&lt;/strong&gt;“就能给我们带来思路。整个游戏界面就是一个布满200（10 * 20）个坐标点的一个数组。下面画一个图，方便大家了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发参考图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2018/0308/140553_2vY8_3669181.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;415&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    上图中分别用不同的坐标组合表示出相应的形状。那么我们的方块还有旋转功能，这就要考虑到旋转方向的问题，根据旋转方向和当前状态是否可以旋转来进行旋转操作。&lt;/p&gt;
&lt;p&gt;     请看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2018/0308/141014_Mp6U_3669181.png&quot; alt=&quot;&quot; width=&quot;397&quot; height=&quot;367&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    我以这种类型的方块为例子讲解一下旋转过程。首先，我定义了一个规则，就是一个方块由四个坐标点组成，然后他们的排序规则为从上到下，从左到右。如上图中标注出的序号。那么当我们对该方块做”右转“操作时候。最关键的，我们要找到第一个点在哪里，那么后续就好说了。看一下右转的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt; case UP:
   //第一个点不变
   // points[0] = points[0];
   //第二个点在第一个点下面
   points[1] = points[0].down();
   //第三个点在第一个点右边
   points[2] = points[1].right();
   //第四个点在二个点下面
   points[3] = points[1].down();
   blockStatus = BlockStatus.RIGHT;
 break;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    所以，旋转代码就变得很简单了，先确定第一个点，然后根据图形规则，分别找到其他的点。上述代码中的&lt;strong&gt;down，right&lt;/strong&gt;等方法，其实就是一个 &lt;strong&gt;x+-1&lt;/strong&gt; 或者 &lt;strong&gt;y+-1&lt;/strong&gt;的操作。其他旋转同理，不过要注意好中心点的位置，否则会出现转了几圈之后，方块不走直线的情况。&lt;/p&gt;
&lt;p&gt;    方块构造好并且可以旋转之后，下面要做的就是细活了。&lt;strong&gt;第一：方块什么时候停止，第二：方块什么时候消除，消除之后怎么处理其他方块。第三：方块什么时候不能旋转。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;   下面我一一解答上节遗留的问题。&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;方块停止的条件&lt;/strong&gt;：1.碰到地图最下边缘 2.方块碰到其他的方块。 第一个很好理解，方块到底下了，就要停下。（一个方块中四个点任意一个点碰到地图底部都会停下）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;//一个点的Y值 = 地图界限值
private static boolean onBottom(Point point){
   return point.getY() == GameMap.MAX_RANGE_HEIGHT  - 1;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    第二个，方块碰到其他的方块，就是说，比如游戏中已经积累了很多方块，那么新的方块要落到其他方块之上，所以判断一下方块下一步的移动轨迹是否与已经停止的方块的点有重合，如果有重合，那么方块不能继续移动。不管是向下、向左、向右、旋转，都用此方法判断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    方块消除的条件：&lt;/strong&gt;这个就很简单了，当达到满行之后进行消除。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2018/0308/143116_REH6_3669181.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;369&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    黄色区域需要消除掉，然后处理加分逻辑。消除掉之后呢，需要将其他的点（Y值 &amp;lt; 当前消除行的Y值）的Y值 + 相对应的行数。为什么说是相对应的行数呢？因为有的点下方只消除了一行，有的点下方消除了两行或者多行，那么根据行数来改变点的Y值。上图中，黄色行以上的点的Y值都需要加1.&lt;/p&gt;

&lt;p&gt;    方块有上（变形）下（加速）左（左移）右（右移）四种操作。变形和左右移就是一些点的坐标替换。变形已经在上文中讲过了，左右移和加速其实道理一样。就是一个块中的所有点的X+-1或者Y+1.&lt;/p&gt;

&lt;p&gt;    操作之后，用户要有回馈，否则，服务器数据变化了，用户得不到回馈，就会出现类似网游中的卡顿现象，或者其他bug，体验非常不好。响应流程后续在讲。&lt;/p&gt;

&lt;p&gt;    通过&lt;strong&gt;ScheduledExecutorService &lt;/strong&gt;的 &lt;strong&gt;scheduleWithFixedDelay &lt;/strong&gt;方法达到周期刷新游戏界面的效果，同样，服务端每刷新一次，如果用户不做任何操作的话，方块会自动向下移动一格。然后推送到用户端。&lt;/p&gt;

&lt;p&gt;    其实俄罗斯方块的实现原理并不难，只是需要考虑的细节比较多，而且根据我的代码运行情况，还时不时出现bug。。。我猜测和多线程有关。唉，多线程，并发，异步等是我的弱项，我还得在研究研究。不知道这么讲解大家能否看得懂呢？不懂的或者有其他疑问的可以留言。拜拜~~&lt;/p&gt;


</description>
<pubDate>Fri, 09 Mar 2018 06:26:00 +0000</pubDate>
<dc:creator>丶Pz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/panzi/p/8533705.html</dc:identifier>
</item>
<item>
<title>PyCharm链接服务器同步代码 - begrateful</title>
<link>http://www.cnblogs.com/wendj/p/PyCharm_Linux_PyCharmLinux_PyCharm.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wendj/p/PyCharm_Linux_PyCharmLinux_PyCharm.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;准备工作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1：服务器（本地虚拟安装或是云服务器）这里我使用的是腾讯云服务器 &lt;/p&gt;
&lt;p&gt;2：PyCharm开发软件&lt;/p&gt;
&lt;p&gt;3：XShell 软件&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;以上准备工作在我的博客关于Linux学习中都有涉及。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步：打开PyCharm如下图新建一个项目&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309135714566-1144429444.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Location：选择代码存放在本地的路径&lt;/p&gt;
&lt;p&gt;Interpreter：选择add Remote 配置服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309140419604-1153768960.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：配置Python解析器为远程服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309140601429-953228729.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：因为Linux中默认就有Python环境，所以Python interpreter path：这个选项就默认不需要改&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 第三步：配置代码远程同步&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309140724929-1453586267.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;请选择：SFTP&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309134033079-1066063316.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309140850688-2066781331.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当文件保存后就更新文件到服务器 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309141057975-1738583373.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309134508172-1004197774.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一次编辑请同步代码，这时候会出现错误，排查找错，意思是找不到文件 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309141331158-1285052251.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309141526220-1473186778.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;原因是：Connection这个选项卡中的Root path 与Mappings选项卡中的Deployment path on server 两个是拼接起来的，所以后者如果在服务器中没有，系统会默认创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309141825261-1059893870.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309141832952-6023875.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当配置好后重新运行代码就会成功打印出，在通过XShell 链接远程服务器 或是本地虚拟机的系统，就会看到我们在PyCharm中创建的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145331/201803/1145331-20180309135340018-1941447356.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 09 Mar 2018 06:25:00 +0000</pubDate>
<dc:creator>begrateful</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wendj/p/PyCharm_Linux_PyCharmLinux_PyCharm.html</dc:identifier>
</item>
<item>
<title>前端测试框架对比(js单元测试框架对比) - 晴天_雨天</title>
<link>http://www.cnblogs.com/lihuanqing/p/8533552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lihuanqing/p/8533552.html</guid>
<description>&lt;h2 id=&quot;前端测试框架对比js单元测试框架对比&quot;&gt;前端测试框架对比(js单元测试框架对比)&lt;/h2&gt;
&lt;p&gt;本文主要目的在于横评业界主流的几款前端框架，顺带说下相关的一些内容。&lt;/p&gt;
&lt;h3 id=&quot;测试分类&quot;&gt;测试分类&lt;/h3&gt;
&lt;p&gt;通常应用会有 单元测试(Unit tests) 和 功能测试(Functional tests)，复杂大型应用可能会有整合测试(Integration tests)。&lt;br/&gt;其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;单元测试：关注应用中每个零部件的正常运转，防止后续修改影响之前的组件。&lt;/li&gt;
&lt;li&gt;功能测试：确保其整体表现符合预期，关注能否让用户正常使用。&lt;/li&gt;
&lt;li&gt;整合测试：确保单独运行正常的零部件整合到一起之后依然能正常运行。&lt;br/&gt;&lt;a href=&quot;https://codeutopia.net/blog/2015/04/11/what-are-unit-testing-integration-testing-and-functional-testing/&quot;&gt;详细资料1&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.sitepoint.com/javascript-testing-unit-functional-integration/&quot;&gt;详细资料2&lt;/a&gt;&lt;br/&gt;开发人员主要关注单元测试，作为开发中的反馈。本文重点讨论的单元测试框架。&lt;br/&gt;单元测试的好处：&lt;/li&gt;
&lt;li&gt;如果能通过单元测试，那么通过后续测试且软件整体正常运行的概率大大提高。&lt;/li&gt;
&lt;li&gt;单元测试发现的问题定位到细节，容易修改，节省时间。&lt;/li&gt;
&lt;li&gt;追踪问题变得更加方便。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;选择单元测试框架&quot;&gt;选择单元测试框架&lt;/h3&gt;
&lt;p&gt;单元测试应该：简单，快速执行，清晰的错误报告。&lt;br/&gt;测试框架基本上都做了同一件事儿：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;描述你要测试的东西&lt;/li&gt;
&lt;li&gt;对其进行测试&lt;/li&gt;
&lt;li&gt;判断是否符合预期&lt;br/&gt;选择框架会考虑下面的点：&lt;/li&gt;
&lt;li&gt;断言(Assertions)：用于判断结果是否符合预期。有些框架需要单独的断言库。&lt;/li&gt;
&lt;li&gt;适合 TDD / BDD：是否适合 测试驱动型 / 行为驱动型 的测试风格。&lt;/li&gt;
&lt;li&gt;异步测试：有些框架对异步测试支持良好。&lt;/li&gt;
&lt;li&gt;使用的语言：大部分 js 测试框架使用 js。&lt;/li&gt;
&lt;li&gt;用于特定目的：每个框架可能会擅长处理不同的问题。&lt;/li&gt;
&lt;li&gt;社区是否活跃。&lt;br/&gt;注：&lt;/li&gt;
&lt;li&gt;TDD：测试驱动型的开发方式，先写测试代码，之后编写能通过测试的业务代码，可以不断的在能通过测试的情况下重构。&lt;/li&gt;
&lt;li&gt;BDD：与 TDD 很相似，测试代码的风格是预期结果，更关注功能，看起来像需求文档。&lt;br/&gt;其实都是先写测试代码，感觉BDD 风格更人性。&lt;br/&gt;&lt;a href=&quot;https://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;测试工具的类型&quot;&gt;测试工具的类型&lt;/h3&gt;
&lt;p&gt;组合使用工具很常见，即使已选框架也能实现类似的功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提供测试框架(Mocha, Jasmine, Jest, Cucumber)&lt;/li&gt;
&lt;li&gt;提供断言(Chai, Jasmine, Jest, Unexpected)&lt;/li&gt;
&lt;li&gt;生成，展示测试结果(Mocha, Jasmine, Jest, Karma)&lt;/li&gt;
&lt;li&gt;快照测试(Jest, Ava)&lt;/li&gt;
&lt;li&gt;提供仿真(Sinon, Jasmine, enzyme, Jest, testdouble)&lt;/li&gt;
&lt;li&gt;生成测试覆盖率报告(Istanbul, Jest, Blanket)&lt;/li&gt;
&lt;li&gt;提供类浏览器环境(Protractor, Nightwatch, Phantom, Casper)&lt;br/&gt;解释上面提到的点：&lt;/li&gt;
&lt;li&gt;测试框架，即组织你的测试，当前流行 BDD 的测试结构。&lt;/li&gt;
&lt;li&gt;快照测试(snapshot testing)，测试 UI 或数据结构是否和之前完全一致，通常 UI 测试不在单元测试中&lt;/li&gt;
&lt;li&gt;仿真(mocks, spies, and stubs)：获取方法的调用信息，模拟方法，模块，甚至服务器&lt;br/&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24413184/can-someone-explain-the-difference-between-mock-stub-and-spy-in-spock-framewor&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;各框架特点&quot;&gt;各框架特点&lt;/h3&gt;
&lt;h4 id=&quot;jest&quot;&gt;Jest&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;facebook 坐庄&lt;/li&gt;
&lt;li&gt;基于 Jasmine 至今已经做了大量修改添加了很多特性&lt;/li&gt;
&lt;li&gt;开箱即用配置少，API简单&lt;/li&gt;
&lt;li&gt;支持断言和仿真&lt;/li&gt;
&lt;li&gt;支持快照测试&lt;/li&gt;
&lt;li&gt;在隔离环境下测试&lt;/li&gt;
&lt;li&gt;互动模式选择要测试的模块&lt;/li&gt;
&lt;li&gt;优雅的测试覆盖率报告，基于Istanbul&lt;/li&gt;
&lt;li&gt;智能并行测试(&lt;a href=&quot;https://facebook.github.io/jest/blog/2016/03/11/javascript-unit-testing-performance.html#optimal-scheduling-of-a-test-run&quot;&gt;参考&lt;/a&gt;)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;较新，社区不十分成熟&lt;/li&gt;
&lt;li&gt;全局环境，比如 describe 不需要引入直接用&lt;/li&gt;
&lt;li&gt;较多用于 React 项目(但广泛支持各种项目)&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;mocha&quot;&gt;Mocha&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;灵活(不包括断言和仿真，自己选对应工具)&lt;br/&gt;流行的选择：chai，sinon&lt;/li&gt;
&lt;li&gt;社区成熟用的人多，测试各种东西社区都有示例&lt;/li&gt;
&lt;li&gt;需要较多配置&lt;/li&gt;
&lt;li&gt;可以使用快照测试，但依然需要额外配置&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;jasmine&quot;&gt;Jasmine&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;开箱即用(支持断言和仿真)&lt;/li&gt;
&lt;li&gt;全局环境&lt;/li&gt;
&lt;li&gt;比较'老',坑基本都有人踩过了&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;ava&quot;&gt;AVA&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;异步，性能好&lt;/li&gt;
&lt;li&gt;简约，清晰&lt;/li&gt;
&lt;li&gt;快照测试和断言需要三方支持&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;tape&quot;&gt;Tape&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;体积最小，只提供最关键的东西&lt;/li&gt;
&lt;li&gt;对比其他框架，只提供最底层的 API&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结一下，Mocha 用的人最多，社区最成熟，灵活，可配置性强易拓展，Jest 开箱即用，里边啥都有提供全面的方案，Tape 最精简，提供最基础的东西最底层的API。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/comparing-jasmine-mocha-ava-tape-and-jest&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择测试框架并不是非黑即白的事儿，就像你并不能证明PHP不是最好的语言。&lt;br/&gt;&lt;strong&gt;个人倾向 Jest，原因：容易上手，开箱即用，功能全面。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;社区意见&quot;&gt;社区意见&lt;/h3&gt;
&lt;p&gt;下面是在 stackshare 最流行的三个测试框架如下，但应考虑到 Jest 比较年轻，参与投票的时间较短的因素。&lt;br/&gt;&lt;img src=&quot;http://owel7ec6g.bkt.clouddn.com/js%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8A%95%E7%A5%A8%E5%AF%B9%E6%AF%94.png&quot; alt=&quot;测试框架对比&quot;/&gt;&lt;br/&gt;下面是三个框架在过去一年里 google 的搜索热度，但应该考虑到 Jest 比较年轻，大家尝试新东西，解决新问题，可能会带来较大搜索量。&lt;br/&gt;&lt;img src=&quot;http://owel7ec6g.bkt.clouddn.com/js%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%9C%E7%B4%A2%E9%87%8F%E5%AF%B9%E6%AF%94.png&quot; alt=&quot;测试框架对比&quot;/&gt;&lt;br/&gt;下面是用户使用情况的调查，可以看出， Jest 忠诚度较高，使用后弃用的概率较低，Mocha 和 Jasmine 知名度最高。数据统计于 2017 年。&lt;br/&gt;&lt;img src=&quot;http://owel7ec6g.bkt.clouddn.com/js%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%94%A8%E6%88%B7%E8%B0%83%E6%9F%A5.png&quot; alt=&quot;测试框架对比&quot;/&gt;&lt;br/&gt;&lt;a href=&quot;https://stackshare.io/stackups/jasmine-vs-jest-vs-mocha&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码样例&quot;&gt;代码样例&lt;/h3&gt;
&lt;p&gt;要测试的代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;st&quot;&gt;'use strict'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; Math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(a&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; b) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;ava-1&quot;&gt;AVA&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ava'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; firstOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; secondOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Math add function&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; t &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(firstOperand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;va&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;is&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; firstOperand &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jasmine-1&quot;&gt;Jasmine&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Math&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; firstOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; secondOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;beforeEach&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    firstOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    secondOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;should add two numbers&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(firstOperand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;expect&lt;/span&gt;(result).&lt;span class=&quot;at&quot;&gt;toEqual&lt;/span&gt;(firstOperand &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jest-1&quot;&gt;Jest&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;jest&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;unmock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// unmock to use the actual implementation of Math&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Math&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; firstOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; secondOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;at&quot;&gt;beforeEach&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    firstOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    secondOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;at&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;should add two numbers&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(firstOperand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;expect&lt;/span&gt;(result).&lt;span class=&quot;at&quot;&gt;toEqual&lt;/span&gt;(firstOperand &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;mocha-1&quot;&gt;Mocha&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; assert &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'assert'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// nodejs 内建断言&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Math&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; firstOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; secondOperand&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;beforeEach&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    firstOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    secondOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;should add two numbers&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(firstOperand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;equal&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; firstOperand &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;tape-1&quot;&gt;Tape&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tape'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; math &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'../Math'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; firstOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; secondOperand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Math add function&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(t) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;add&lt;/span&gt;(firstOperand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;equal&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; firstOperand &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; secondOperand)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;end&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/welldone-software/an-overview-of-javascript-testing-in-2018-f68950900bc3&quot;&gt;参考资料1&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://spin.atomicobject.com/2017/05/02/react-testing-jest-vs-mocha/&quot;&gt;参考资料2&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://medium.com/cardinal-solutions/lets-compare-javascript-testing-frameworks-bb500f0b1006&quot;&gt;参考资料3&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 05:59:00 +0000</pubDate>
<dc:creator>晴天_雨天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lihuanqing/p/8533552.html</dc:identifier>
</item>
<item>
<title>拥抱.NET Core系列：MemoryCache 缓存域 - KAnts</title>
<link>http://www.cnblogs.com/ants/p/8533074.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ants/p/8533074.html</guid>
<description>&lt;blockquote readability=&quot;4.2857142857143&quot;&gt;
&lt;p&gt;在上一篇“《&lt;a href=&quot;http://www.cnblogs.com/ants/p/8526935.html&quot; target=&quot;_blank&quot;&gt;拥抱.NET Core系列：MemoryCache 缓存选项&lt;/a&gt;》”我们介绍了一些 MSCache 的机制，今天我们来介绍一下 MSCache 中的缓存域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MSCache 目前最新的正式版是 2.0.0，预览版是2.1.0，会与 .NETCore 2.1 一起发布。本篇用了2.0.0版本&lt;/p&gt;
&lt;p&gt;开源在 GitHub 上，仓库地址是：&lt;a href=&quot;https://github.com/aspnet/Caching&quot;&gt;https://github.com/aspnet/Caching&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet地址为：&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Caching.Memory/2.0.0&quot;&gt;https://www.nuget.org/packages/Microsoft.Extensions.Caching.Memory/2.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们来假设一个场景。&lt;/p&gt;
&lt;p&gt;有下面四个成员&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;书籍模型（包含一个组章节模型）&lt;/li&gt;
&lt;li&gt;章节模型&lt;/li&gt;
&lt;li&gt;书籍服务&lt;/li&gt;
&lt;li&gt;章节服务&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115551355-1266641106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;BookService 有一个获取书籍的方法&lt;/p&gt;
&lt;p&gt;ChapterService 有一个获取书籍章节的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115602813-1642787138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115610380-1878943462.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到 GetBook 内使用了缓存，缓存了5秒钟。GetBook 又调用了 ChapterService 的 GetChapters，GetChapters 缓存了3秒钟。&lt;/p&gt;
&lt;p&gt;这时候书籍的章节信息缓存要早于书籍过期。&lt;/p&gt;
&lt;p&gt;那么大家试想一下，如果章节信息先过期了 GetBook 这个方法返回的是不是还是旧的数据？&lt;/p&gt;
&lt;p&gt;在一些简单的缓存设计中是这样的，但在 MSCache 中微软提供了缓存域的概念，从层级上 Chapter 的父级缓存是 Book。所以当 Chapter 过期时，Book 也会级联过期。&lt;/p&gt;
&lt;p&gt;我们来看一下测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115617993-1536584158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115622922-1338404131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每隔三秒钟不仅 Chapter 重新获取，Book 也会一起级联获取。&lt;/p&gt;
&lt;p&gt;这样在很大程度上减轻了我们处理缓存依赖的问题。&lt;/p&gt;
&lt;h2&gt;ChaneToken在域中&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115631763-1030652557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115637702-1799234023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;SlidingExpiration在域中&lt;span&gt;（画重点）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115646998-1830195168.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;恩，输出是 时间，时间，新时间。&lt;/p&gt;
&lt;p&gt;其实呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115653195-437152874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;子缓存项并没有过期。&lt;/p&gt;
&lt;p&gt;这是为什么呢？我翻了 Caching 的源码发现，缓存失效扩散的处理中，并没有对 SlidingExpiration 进行处理，只处理了 ExpirationTokens 和 AbsoluteExpiration。&lt;/p&gt;
&lt;p&gt;不知道这是不是一个bug，我已经在 MSCache 项目上提了一个issue，等待回复后再来更新这块的说明。&lt;/p&gt;
&lt;p&gt;这块的处理代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180309115658609-381450738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;逻辑很简单，把自身的过期 token 和 绝对过期时间 设置在父缓存项上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说你在父缓存中设计的绝对到期时间会被改写成到期缓存域中最小的到期时间。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MSCache 真的非常像 Orchard 中的 Caching，有兴趣的同学可以去了解一些 Orchard 中的 Caching 设计。&lt;/p&gt;
&lt;p&gt;至 此 MSCache 中的 MemoryCache 机制和功能就基本介绍完了。&lt;/p&gt;
&lt;p&gt;后续会继续介绍 MSCache 中的 DistributedCache（分布式缓存），和一些 MSCache 的使用技巧。&lt;strong&gt;&lt;br/&gt;.NET技术栈QQ群：384413261（点击加入 &lt;a href=&quot;http://shang.qq.com/wpa/qunwpa?idkey=623e0bb6e02e7716ee6340cf7330be611e64d8ce7869862d9d9981f3d702bc8c&quot;&gt;.NET Group&lt;/a&gt;）&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 03:57:00 +0000</pubDate>
<dc:creator>KAnts</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ants/p/8533074.html</dc:identifier>
</item>
<item>
<title>R语言学习 第七篇：列表 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4907882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4907882.html</guid>
<description>&lt;p&gt;列表（List）是R中最复杂的数据类型，一般来说，列表是数据对象的有序集合，但是，列表的各个元素（item）的数据类型可以不同，每个元素的长度可以不同，是R中最灵活的数据类型。列表项可以是列表类型，因此，列表被认为是递归变量，与之相对，向量，数组，矩阵，数据框被认为是原子变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，创建列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列表由list()函数创建，每个参数使用逗号分割，用于指定列表项的内容，列表中的元素数量不限，类型不限。列表项的名称是可选的，可以创建无名的列表项；列表的每一个item，都可以显示命名，例如，name1=item1, name2=item2。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
list([name1=]item1,[name2=]item2,...)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1，创建的无名的列表项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，下面的脚本创建一个列表，该列表共有三个item，第一个item是整数向量，第二个item是字符向量，第三个item是矩阵，列表的每一个item都没有名称；对于无名的列表项，只能通过嵌套的中括号[[n]]来索引列表项的元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list &amp;lt;- &lt;span&gt;list(
+     c(1:3&lt;span&gt;),
+&lt;span&gt;     month.abb,
+     matrix(c(-1,-2,-3,-4),nrow=2&lt;span&gt;)
+ )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印列表，列表的第一个item，使用两个嵌套的中括号[[1]]表示，这是索引列表的一种方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; a_list
[[1&lt;span&gt;]]
[1] 1 2 3&lt;span&gt;

[[2&lt;span&gt;]]
 [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot;&lt;span&gt;

[[3&lt;span&gt;]]
     [,1] [,2&lt;span&gt;]
[1,]   -1   -3&lt;span&gt;
[2,]   -2   -4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，创建命名的列表项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过指定列表项的变量名，为每一个列表项显示指定名称，列表项的命名是变量名，不需要加双引号；对于列表中的命名元素，可以使用美元符号$来索引列表项。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;  a_list &amp;lt;- &lt;span&gt;list(
&lt;/span&gt;+         a=c(&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;+         b=&lt;span&gt;month.abb,
&lt;/span&gt;+         c=matrix(c(-&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;2&lt;/span&gt;,-&lt;span&gt;3&lt;/span&gt;,-&lt;span&gt;4&lt;/span&gt;),nrow=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;+&lt;span&gt;      )
&lt;/span&gt;&amp;gt;&lt;span&gt; a_list
$a
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;

$b
 [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Feb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Apr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jul&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Aug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sep&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Oct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Nov&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

$c
     [,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] [,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,]   -&lt;span&gt;1&lt;/span&gt;   -&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,]   -&lt;span&gt;2&lt;/span&gt;   -&lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;二，列表元素的命名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用函数names(list)查看列表中每个item的名称，如果创建列表是无名列表项，那么该函数返回NULL；可以对该函数names(list)赋值，为列表的每个item命名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;gt; names(a_list) &amp;lt;- c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&lt;span&gt; a_list
$first
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;

$second
 [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Feb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Apr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jul&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Aug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sep&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Oct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Nov&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

$third
     [,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] [,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,]   -&lt;span&gt;1&lt;/span&gt;   -&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,]   -&lt;span&gt;2&lt;/span&gt;   -&lt;span&gt;4&lt;/span&gt;

&amp;gt;&lt;span&gt; names(a_list)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三，列表的长度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列表没有维度，列表和向量一样，有长度（length），可以使用函数length()获取列表的长度，列表的长度是列表的顶层item的数量，不包括嵌套的列表项。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; length(a_list)
[1] 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数NROW(),NCOL()把列表看作向量，是只有一列，多行的数据结构，因此NCOL(x)始终返回1，而NROW(x)返回的值和length(x)相同&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; NCOL(a_list)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt;
&amp;gt;&lt;span&gt; NROW(a_list)
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四，索引列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列表的下标是列表项的序号，可以使用中括号[n]索引列表的元素，下标有四种表示方法：正整数、负整数、元素名称或逻辑索引，下标的整数值从1开始，正整数表示选择该列表项，负整数表示剔除该列表项。&lt;/p&gt;
&lt;p&gt;例如，选择列表的第1项，第2项，分别使用正整数下标、负整数下标、元素名称和逻辑索引表示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt; a_list[-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt; a_list[c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&amp;gt;&lt;span&gt; a_list[c(TURE,TRUE,FALSE)] 

$first
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;

$second
 [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Feb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Apr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jul&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Aug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sep&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Oct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Nov&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些索引操作的结果是产生&lt;strong&gt;另一个列表&lt;/strong&gt;，也就是说，使用单个中括号索引列表项，返回的结果是一个&lt;strong&gt;新的列表&lt;/strong&gt;，要访问列表元素的内容，有两种方式：使用&lt;strong&gt;嵌套的中括号（传入正整数，代表列表项的下标，或传入字符串，代表列表项的名称），或指定元素的名称&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，使用嵌套的中括号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，通过嵌套的中括号和下标，获取列表的第一个项目（item）的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[[1&lt;span&gt;]]
[1] 1 2 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，使用列表的名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，通过指定元素的名称作为下标，获取列表的第一个项目（item）的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; a_list$first
[1] 1 2 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3，访问列表项中的元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在访问列表的元素之后，可以通过中括号访问列表项的元素值，例如，列表的第一个项目是向量，通过中括号和下标，能够访问向量的第一个元素的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list$first[1&lt;span&gt;]
[1] 1
&amp;gt; a_list[[1]][1&lt;span&gt;]
[1] 1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果以错误的正整数索引访问列表元素的内容，R会抛出下标越界的错误，而使用错误的列表项（item）的名称，R会返回NULL值，不会报错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[[4&lt;span&gt;]]
Error in a_list[[4]] : subscript out&lt;span&gt; of bounds
&amp;gt;&lt;span&gt; a_list$forth
NULL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;五&lt;/strong&gt;&lt;strong&gt;，列表项的追加、删除和更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列表创建之后，可以向列表中追加元素，删除现有的列表元素，更新现有的列表元素。追加元素和更新元素都是通过对元素赋值来实现的，如果列表中的元素存在，那么更新该元素；如果列表中的元素不存在，那么把当前变量添加到列表中作为新的列表项。其实，删除列表的元素，也是通过对列表项赋值来实现，只不过赋的是特殊的NULL值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，删除列表元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NULL是各特殊值，表示一个空的变量，不会占用任何空间，长度为零。NULL能够用于删除列表中的元素，把列表项更新为NULL，则R会删除该列表项，在该列表项之后的元素，其索引序号都要减少1；在该列表项之前的元素，其索引序号不变。&lt;/p&gt;
&lt;p&gt;例如，把第一个列表项删除，原来的第二个列表项的索引变成1，原来的第三个列表的索引变成2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[1] &amp;lt;- &lt;span&gt;NULL
&amp;gt;&lt;span&gt; a_list
$second
 [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot;&lt;span&gt;

$third
     [,1] [,2&lt;span&gt;]
[1,]   -1   -3&lt;span&gt;
[2,]   -2   -4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，追加列表元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项列表中追加新的列表项，可以使用嵌套的中括号（在列表末尾追加未命名的列表项），或直接使用新的列表项的名称（在列表末尾追加已命名的列表项）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[[&lt;span&gt;3&lt;/span&gt;]]=c(&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt; a_list$fifth=c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于通过单层中括号索引的列表项是一个列表，也可以为直接通过列表变量赋值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[&lt;span&gt;3&lt;/span&gt;] &amp;lt;- list(c(&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&amp;gt; a_list[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fifth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- list(c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3，列表项的更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更新列表项，可以通过直接访问列表项，把列表项赋值为新的变量来实现，&lt;/p&gt;
&lt;p&gt;例如，把列表的第三个列表项修改为list类型的变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;forth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- list(c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&amp;gt; a_list$&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;forth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4，更新列表项的元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引列表项的元素，改变元素的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; a_list$&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;forth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;[&lt;span&gt;3&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&lt;span&gt; a_list$forth
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5，把列表项更新为NULL值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要把现有的列表元素设置为NULL值，不能简单地为其赋值为NULL，因为这将删除该列表元素，而是必须使用list(NULL)来设置，list(NULL)返回的是空的列表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
a_list[&lt;span&gt;1&lt;/span&gt;] &amp;lt;- list(NULL)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;六，列表和向量的相互转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向量可以使用函数as.list函数转换成列表，所创建的列表和向量中的元素一一对应，列表的每一个元素都对应向量的每一个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt; v=c(1,3&lt;span&gt;)
&amp;gt; (l=as&lt;span&gt;.list(v))
[[1&lt;span&gt;]]
[1] 1&lt;span&gt;

[[2&lt;span&gt;]]
[1] 3&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表既能存储相同的类型的数据，也能存储不同类型的数据，如果列表的所有列表项的数据类型相同，并且每一个列表项都是标量变量，可以通过unlist()函数把列表转换成向量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; unlist(l)
[1] 1 3&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果列表存储不同类型的数据，那么列表不能转换为向量。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/aba70025b7a2&quot; target=&quot;_blank&quot;&gt;R--列表&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 03:32:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4907882.html</dc:identifier>
</item>
</channel>
</rss>