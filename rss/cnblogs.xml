<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>快递单号查询免费api接口（PHP示例） - 304的的哥</title>
<link>http://www.cnblogs.com/304dedige/p/8990983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/304dedige/p/8990983.html</guid>
<description>&lt;p&gt;快递单号查询API，可以对接顺丰快递查询，邮政快递查询，中通快递查询等。这些快递物流企业，提供了快递单号自动识别接口，快递单号查询接口等快递物流服务。对于电商企业，ERP服务企业，集成此接口到自己的软件中，增加了企业的竞争力。但是有个缺点，需要分别对接到各大快递公司，分别调试接口，维护成本高，不方便管理等。推荐一个提供快递查询api免费对接的服务平台，&lt;a href=&quot;http://open.kuaidihelp.com/&quot; target=&quot;_blank&quot;&gt;快宝开放平台&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一、接口应用场景&lt;/p&gt;
&lt;p&gt;1.在电商平台购物后，通过购物订单跟踪物流时，调用此API获取物流信息详情&lt;/p&gt;
&lt;p&gt;2.处理运费对账时，一键获取运单物流状态&lt;/p&gt;
&lt;p&gt;3.批量跟踪及获取运单物流信息&lt;/p&gt;

&lt;p&gt;二、对接准备&lt;/p&gt;
&lt;p&gt;1.注册快宝开放平台，注册地址：http://open.kuaidihelp.com/register&lt;/p&gt;
&lt;p&gt;2.获取开发者账号信息（ID ,API Key），在【控制台】中查看&lt;/p&gt;
&lt;p&gt;3.进行技术联调，并完成调试，物流查询api地址：http://open.kuaidihelp.com/api/1003&lt;/p&gt;
&lt;p&gt;4.在您的软件中集成快递物流查询接口&lt;/p&gt;

&lt;p&gt;三、技术对接&lt;/p&gt;
&lt;p&gt;快宝开放平台提供的快递查询接口，支持110多家快递物流查询，涵盖了国内主流快递服务企业的单号查询，信息及时，数据完整。&lt;/p&gt;
&lt;p&gt;接口名称：express.info.get&lt;br/&gt;正式地址：https://kop.kuaidihelp.com/api&lt;br/&gt;请求方式：HTTP POST&lt;br/&gt;请求方法编码格式：utf-8&lt;/p&gt;
&lt;p&gt;公共请求参数 ↓ &lt;/p&gt;
&lt;table&gt;&lt;thead class=&quot;ant-table-thead&quot;&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot;ant-table-tbody&quot; readability=&quot;28&quot;&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;method&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;API接口名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;app_id&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;用户ID（注册开放平台时分配，在控制台中查看）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;sign&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;按照规则(md5(app_id + method + ts + api_key))生成的验证合法性签名&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;ts&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前请求的时间戳&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;data&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;JSON格式请求参数设置&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;公共响应参数  ↓  &lt;/p&gt;
&lt;table&gt;&lt;thead class=&quot;ant-table-thead&quot;&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot;ant-table-tbody&quot; readability=&quot;24.107142857143&quot;&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;1.4324324324324&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;code&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;2.6229508196721&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;msg&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;返回结果说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;uid&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;本次请求唯一业务流水号&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;data&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;JSON格式响应数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;请求参数  ↓  &lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;2.6971153846154&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;是否必输&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;waybill_no&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;物流单号，多个单号之间用&quot;,&quot;隔开,最多支持10条&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.5227272727273&quot;&gt;&lt;td&gt;exp_company_code&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;支持品牌简称请查看品牌列表&lt;a href=&quot;http://software.kuaidihelp.com/platform/company_code.xls&quot;&gt;下载并查看详情&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;响应参数  ↓&lt;/p&gt;
&lt;table&gt;&lt;thead class=&quot;ant-table-thead&quot;&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot;ant-table-tbody&quot; readability=&quot;26&quot;&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;code&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;响应状态码。0-成功，非0-失败&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;msg&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;返回结果说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;data&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;JSON格式响应数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;请求代码示例  ↓&lt;/p&gt;
&lt;p&gt;支持6中开发语言对接，包括JAVA，C#，PHP，Python，Node.js，Crul；根据您的开发语言，选择参考对应的代码示例，下面以PHP代码为例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;$host&lt;/span&gt; = &quot;https://kop.kuaidihelp.com/api&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;$method&lt;/span&gt; = &quot;POST&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;$headers&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据API的要求，定义相对应的Content-Type&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;array_push&lt;/span&gt;(&lt;span&gt;$headers&lt;/span&gt;, &quot;Content-Type&quot;.&quot;:&quot;.&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;$querys&lt;/span&gt; = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$bodys&lt;/span&gt; =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &quot;app_id&quot;=&amp;gt;'50001',
&lt;span&gt; 9&lt;/span&gt; &quot;method&quot;=&amp;gt;'express.info.get',
&lt;span&gt;10&lt;/span&gt; &quot;sign&quot;=&amp;gt;&quot;bdf3b5f50865ac813cbdfd6c9b572b79&quot;,
&lt;span&gt;11&lt;/span&gt; &quot;ts&quot;=&amp;gt;'1524209949',
&lt;span&gt;12&lt;/span&gt; &quot;data&quot;=&amp;gt;'{ &quot;waybill_no&quot;:&quot;物流单号多个的以英文逗号分隔&quot;, &quot;exp_company_code&quot;:&quot;品牌简称&quot;}'
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;$bodys&lt;/span&gt; = &lt;span&gt;http_build_query&lt;/span&gt;(&lt;span&gt;$bodys&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;$url&lt;/span&gt; = &lt;span&gt;$host&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;$curl&lt;/span&gt; =&lt;span&gt; curl_init();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_CUSTOMREQUEST, &lt;span&gt;$method&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_URL, &lt;span&gt;$url&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_HTTPHEADER, &lt;span&gt;$headers&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_FAILONERROR, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_RETURNTRANSFER, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_HEADER, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (1 == &lt;span&gt;strpos&lt;/span&gt;(&quot;$&quot;.&lt;span&gt;$host&lt;/span&gt;, &quot;https://&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_SSL_VERIFYPEER, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_SSL_VERIFYHOST, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; curl_setopt(&lt;span&gt;$curl&lt;/span&gt;, CURLOPT_POSTFIELDS, &lt;span&gt;$bodys&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;var_dump&lt;/span&gt;(curl_exec(&lt;span&gt;$curl&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功响应示例 ↓  &lt;/p&gt;
&lt;p&gt;响应（成功、失败）示例，仅支持JSON格式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&quot;code&quot;:int0
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&quot;msg&quot;:string&quot;查询成功&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&quot;data&quot;:[
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;0:{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&quot;no&quot;:string&quot;3339809700595&quot;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&quot;brand&quot;:string&quot;sto&quot;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&quot;status&quot;:string&quot;signed&quot;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&quot;data&quot;:[
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;0:{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&quot;time&quot;:string&quot;2017-10-03 19:11:00&quot;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&quot;context&quot;:string&quot;已签收,签收人是代签&quot;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;1:{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&quot;time&quot;:string&quot;2017-10-03 08:14:33&quot;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&quot;context&quot;:string&quot;快件已到达 浙江浦江公司&quot;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;2:{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&quot;time&quot;:string&quot;2017-10-03 01:09:41&quot;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&quot;context&quot;:string&quot;由浙江义乌中转部 发往 浙江浦江公司&quot;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&quot;order&quot;:string&quot;desc&quot;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;失败响应示例  ↓  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&quot;code&quot;:string&quot;错误代码&quot;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&quot;msg&quot;:string&quot;错误信息&quot;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&quot;data&quot;:{}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;&lt;thead class=&quot;ant-table-thead&quot;&gt;&lt;tr&gt;&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot;ant-table-tbody&quot;&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;201102&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;请求参数错误&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;201103&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;不支持的快递品牌&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;ant-table-row ant-table-row-level-0&quot;&gt;&lt;td&gt;&lt;span class=&quot;ant-table-row-indent indent-level-0&quot;&gt;201101&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;查询暂无记录&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;- the end -&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 07:47:00 +0000</pubDate>
<dc:creator>304的的哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/304dedige/p/8990983.html</dc:identifier>
</item>
<item>
<title>[ SSH框架 ] Hibernate框架学习之三 - Kevin.ZhangCG</title>
<link>http://www.cnblogs.com/Kevin-ZhangCG/p/8987913.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Kevin-ZhangCG/p/8987913.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、表关系的分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Hibernate框架实现了ORM的思想，将关系数据库中表的数据映射成对象，使开发人员把对数据库的操作转化为对对象的操作，Hibernate的关联关系映射主要包括多表的映射配置、数据的增加、删除等。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　数据库中多表之间存在着三种关系，也就是系统设计中的三种实体关系。如图所示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503201519629-1569163800.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　从图可以看出，系统设计的三种实体关系分别为：多对多、一对多和一对一关系。在数据库中实体表之间的关系映射是采用外键来描述的，具体如下。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;1.1 表与表的三种关系&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;●  一对多&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建表原则：再多的一方创建外键指向一的一方的主键：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503202547614-1706832836.png&quot; alt=&quot;&quot;/&gt; &lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;●  多对多&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建表原则：创建一个中间表，中间表中至少两个字段作为外键分别指向多对多双方的主键&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503202421668-2093253431.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;●  一对一&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建表原则（两种）：①  唯一外键对应：假设一对一中的任意一方为多，在多的一方创建外键指向一的一方的主键，然后将外键设置为唯一。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　    ②  主键对应：一方的主键作为另一方的主键。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503202613883-1709289123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;数据库表能够描述的实体数据之间的关系，通过对象也可以进行描述，所谓的关联映射就是将关联关系映射到数据库里，在对象模型中就是一个或多个引用。在 Hibernate中采用Java对象关系来描述数据表之间的关系，具体如图所示。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503203008541-722455253.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div readability=&quot;13&quot;&gt;&lt;span&gt;　　从图可以看出，通过一对一的关系就是在本类中定义对方类型的对象，如A中定义B类类型的&lt;/span&gt;
&lt;p&gt;&lt;span&gt;属性b，B类中定义A类类型的属性a：一对对多的关系，图中描述的是一个A对应多个B类类型的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;情况，需要在A类以Set集合的方式引入B类型的对象，在B类中定义A类类型的属性a；多对多&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;的关系，在A类中定义B类类型的Set集合，在B类中定义A类类型的Set集合，这里用Set集合&lt;/span&gt;
&lt;p&gt;&lt;span&gt;的目的是避免了数据的重复。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;　　以上就是系统模型中实体设计的三种关联关系，由于一对一的关联关系在开发中不常使用，所以我们不单独讲解，了解即可。那么接下来我们就先来学习一下一对多的关系映射。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Hibernate 一对多关系映射&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1创建表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503205542730-630211818.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503205556211-1212394387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;联系人表中存在外键（lkm_cust_id），外键指向客户表，表示如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503203418945-1812731299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 创建实体：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;客户实体：&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.Kevin.domain;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 创建客户实体类
 *  
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Customer &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long cust_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_address;    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_source;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_industry;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_level;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_mobile;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Set&amp;lt;Linkman&amp;gt; linkmans=&lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;Linkman&amp;gt;(0&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一对多关系映射：多的一方
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主表实体应该包含从表实体的集合引用&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Set&amp;lt;Linkman&amp;gt;&lt;span&gt; getLinkmans() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; linkmans;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setLinkmans(Set&amp;lt;Linkman&amp;gt;&lt;span&gt; linkmans) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.linkmans =&lt;span&gt; linkmans;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getCust_id() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_id(Long cust_id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_id =&lt;span&gt; cust_id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_address() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_address;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_address(String cust_address) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_address =&lt;span&gt; cust_address;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_name() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_name(String cust_name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_name =&lt;span&gt; cust_name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_source() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_source;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_source(String cust_source) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_source =&lt;span&gt; cust_source;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_industry() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_industry;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_industry(String cust_industry) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_industry =&lt;span&gt; cust_industry;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_level() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_level;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_level(String cust_level) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_level =&lt;span&gt; cust_level;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_phone() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_phone;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_phone(String cust_phone) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_phone =&lt;span&gt; cust_phone;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCust_mobile() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cust_mobile;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCust_mobile(String cust_mobile) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cust_mobile =&lt;span&gt; cust_mobile;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Customer [cust_id=&quot; + cust_id + &quot;, cust_address=&quot; + cust_address + &quot;, cust_name=&quot; +&lt;span&gt; cust_name
                &lt;/span&gt;+ &quot;, cust_source=&quot; + cust_source + &quot;, cust_industry=&quot; + cust_industry + &quot;, cust_level=&quot; +&lt;span&gt; cust_level
                &lt;/span&gt;+ &quot;, cust_phone=&quot; + cust_phone + &quot;, cust_mobile=&quot; + cust_mobile + &quot;]&quot;&lt;span&gt;;
    }
    
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;联系人实体：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.Kevin.domain;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 创建联系人实体类
 *  
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Linkman &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long lkm_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_gender;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_mobile;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_email;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_qq;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_position;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_memo;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一对多关系影射
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从表实体包含主表实体的对象引用&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Customer customer;
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer getCustomer() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; customer;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCustomer(Customer customer) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.customer =&lt;span&gt; customer;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getLkm_id() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_id(Long lkm_id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_id =&lt;span&gt; lkm_id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_name() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_name(String lkm_name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_name =&lt;span&gt; lkm_name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_gender() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_gender;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_gender(String lkm_gender) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_gender =&lt;span&gt; lkm_gender;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_mobile() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_mobile;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_mobile(String lkm_mobile) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_mobile =&lt;span&gt; lkm_mobile;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_phone() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_phone;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_phone(String lkm_phone) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_phone =&lt;span&gt; lkm_phone;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_email() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_email;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_email(String lkm_email) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_email =&lt;span&gt; lkm_email;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_qq() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_qq;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_qq(String lkm_qq) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_qq =&lt;span&gt; lkm_qq;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_position() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_position;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_position(String lkm_position) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_position =&lt;span&gt; lkm_position;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLkm_memo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lkm_memo;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLkm_memo(String lkm_memo) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lkm_memo =&lt;span&gt; lkm_memo;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Linkman [lkm_id=&quot; + lkm_id + &quot;, lkm_name=&quot; + lkm_name + &quot;, lkm_gender=&quot; + lkm_gender + &quot;, lkm_mobile=&quot;
                + lkm_mobile + &quot;, lkm_phone=&quot; + lkm_phone + &quot;, lkm_email=&quot; + lkm_email + &quot;, lkm_qq=&quot; +&lt;span&gt; lkm_qq
                &lt;/span&gt;+ &quot;, lkm_position=&quot; + lkm_position + &quot;, lkm_memo=&quot; + lkm_memo + &quot;]&quot;&lt;span&gt;;
    }
    
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3 创建映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;客户映射：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!--&lt;span&gt; 
创建客户类关系映射
导入dtd约束
 &lt;/span&gt;--&amp;gt;
 &amp;lt;!DOCTYPE hibernate-&lt;span&gt;mapping PUBLIC 
    &lt;/span&gt;&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;
&amp;lt;!-- 
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long cust_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_address;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_source;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_industry;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_level;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cust_mobile;
 &lt;/span&gt;--&amp;gt;    
&amp;lt;hibernate-mapping &lt;span&gt;package&lt;/span&gt;=&quot;com.Kevin.domain&quot;&amp;gt;
    &amp;lt;&lt;span&gt;class&lt;/span&gt; name=&quot;Customer&quot; table=&quot;cust_customer&quot; lazy=&quot;false&quot;&amp;gt;
        &amp;lt;id name=&quot;cust_id&quot;&amp;gt;
            &amp;lt;generator &lt;span&gt;class&lt;/span&gt;=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_address&quot; column=&quot;cust_address&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;&amp;gt;&amp;lt;/property&amp;gt;
        
        &amp;lt;!--&lt;span&gt; 一对多关系影射：主表实体的映射配置
            涉及的标签：set：用于配置set集合属性
                            属性：name：指定实体类中set集合的属性名称
                                  table：指定从表的名称，在一对多配置时可以不写
                        key：用于映射外键字段
                            属性：column：指定外键字段名称
                        one—to—many：用于建立一对多的映射配置
                            属性：&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：指定从表实体类的名称                  
         &lt;/span&gt;--&amp;gt;
        &amp;lt;set name=&quot;linkmans&quot; table=&quot;cust_linkman&quot; &amp;gt;
            &amp;lt;key column=&quot;lkm_cust_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
            &amp;lt;one-to-many &lt;span&gt;class&lt;/span&gt;=&quot;Linkman&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;使用set集合来描述 Customer.java类中的属性 linkman。在 Hibernate的映射文件中，使用&amp;lt;set&amp;gt;标签用来描述被映射类中的Set集合，&amp;lt;key&amp;gt;标签的 column 属性值对应文件多的一方的外键名称，在 Customer.java客户类中，客户与联系人是一对多的关系,，Hibernate的映射文件中，使用&amp;lt; one-to-many&amp;gt;标签来描述持久化类的一对多关联，其中 class属性用来描述映射的关联类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;联系人映射：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!--&lt;span&gt; 
创建联系人实体类映射
导入dtd约束
 &lt;/span&gt;--&amp;gt;
&amp;lt;!DOCTYPE hibernate-&lt;span&gt;mapping PUBLIC 
    &lt;/span&gt;&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;
    
&amp;lt;!-- 
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long lkm_id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_gender;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_mobile;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_email;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_qq;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_position;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String lkm_memo;
 &lt;/span&gt;--&amp;gt; 
&amp;lt;hibernate-mapping &lt;span&gt;package&lt;/span&gt;=&quot;com.Kevin.domain&quot;&amp;gt;
    &amp;lt;&lt;span&gt;class&lt;/span&gt; name=&quot;Linkman&quot; table=&quot;cust_linkman&quot;&amp;gt;
        &amp;lt;id name=&quot;lkm_id&quot;&amp;gt;
            &amp;lt;generator &lt;span&gt;class&lt;/span&gt;=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;lkm_name&quot; column=&quot;lkm_name&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_gender&quot; column=&quot;lkm_gender&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_mobile&quot; column=&quot;lkm_mobile&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_phone&quot; column=&quot;lkm_phone&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_email&quot; column=&quot;lkm_email&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_qq&quot; column=&quot;lkm_qq&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_position&quot; column=&quot;lkm_position&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;lkm_memo&quot; column=&quot;lkm_memo&quot;&amp;gt;&amp;lt;/property&amp;gt;
        
        &amp;lt;!--&lt;span&gt; 一对多关系影射：从表实体的映射配置
            涉及的标签：many&lt;/span&gt;-to-&lt;span&gt;one：建立多对一的映射配置
                                属性：name：从表示实体中引用主表实体对象的引用的名称
                                      &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：指定属性所对应的实体类名称        
         &lt;/span&gt;--&amp;gt;
        &amp;lt;many-to-one name=&quot;customer&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Customer&quot; column=&quot;lkm_cust_id&quot; &amp;gt;&amp;lt;/many-to-one&amp;gt;
    &amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&amp;lt;many-to-one&amp;gt;标签定义两个持久化类的关联，这种关联是数据表间的多对一关联，联系人与客户就是多对一的关系，所以用&amp;lt; many-to-one&amp;gt;标签来描述。&amp;lt;many-to-one&amp;gt;标签的name属性用来描述&lt;/span&gt;&lt;br/&gt;&lt;span&gt;customer在 Linkman.java类中的属性的名称，class属性用来指定映射的类，column属性值对应表中的外键列名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;2.4 将映射添加到配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &amp;lt;mapping resource=&quot;com/Kevin/domain/Linkman.hbm.xml&quot;/&amp;gt;
        &amp;lt;mapping resource=&quot;com/Kevin/domain/Customer.hbm.xml&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.5 编写测试代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test2(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.创建一个客户&lt;/span&gt;
        Customer c1=&lt;span&gt;new&lt;/span&gt; Customer();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        c1.setCust_name(&quot;Kevin_one2many&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.创建一个新的联系人&lt;/span&gt;
        Linkman lkm1=&lt;span&gt;new&lt;/span&gt; Linkman();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        lkm1.setLkm_name(&quot;Kevin_one2many1&quot;&lt;span&gt;);
        Linkman lkm2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Linkman();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        lkm2.setLkm_name(&quot;Kevin_one2many2&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.建立客户和联系人的关联关系（让双向）&lt;/span&gt;
&lt;span&gt;        lkm1.setCustomer(c1);
        lkm2.setCustomer(c1);
        c1.getLinkmans().add(lkm1);
        c1.getLinkmans().add(lkm2);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.保存要符合原则&lt;/span&gt;
        s.save(c1);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持久态 有一级缓存和快照&lt;/span&gt;
        s.save(lkm1);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持久态 有一级缓存和快照&lt;/span&gt;
&lt;span&gt;        s.save(lkm2);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在配置文件中添加了自动建表信息后，运行程序时，程序会自动创建两张表，并且插入数据。运行方法后，控制台输出结果如所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503214636289-530263615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　从图的输出结果可以看到，控制台成功输出了三条insert语句和两条update语句，此时查询数据库中的数据如图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503214200635-1645296869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503214742334-1037011434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从上图的查询结果可以看出，数据表创建成功，并成功插入了相应的数据。那么一个基本的一对多的关联关系映射就已经配置好了。从以上代码我们可以发现我们建立的关系是双向的，即客户关联了联系人，同时联系人也关联了客户。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、一对多的相关操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　级联操作是指&lt;span&gt;当主控方执行保存、更新或者删除操作时，其关联对象(被控方)也执行相同的操作&lt;/span&gt;。在映射文件中通过对 cascade属性的设置来控制是否对关联对象采用级联操作，级联操作对各种关联关系都是有效的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 级联保存或更新&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　级联是有方向性的,所谓的方向性指的是，在保存一的一方级联多的一方和在保存多的一方级联一的一方。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;27&quot;&gt;&lt;strong&gt;&lt;span&gt;保存客户级联联系人&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;　　首先要确定我们要保存的主控方是那一方，我们要保存客户，所以客户是主控方，那么需要在客户的映射文件中进行如下的配置。&lt;/span&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--&lt;span&gt; 一对多关系影射：主表实体的映射配置
            涉及的标签：set：用于配置set集合属性
                            属性：name：指定实体类中set集合的属性名称
                                  table：指定从表的名称，在一对多配置时可以不写
                        key：用于映射外键字段
                            属性：column：指定外键字段名称
                        one—to—many：用于建立一对多的映射配置
                            属性：&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：指定从表实体类的名称        
                                
         &lt;/span&gt;--&amp;gt;
        &amp;lt;set name=&quot;linkmans&quot; table=&quot;cust_linkman&quot; cascade=&quot;save-update&quot;&amp;gt;
            &amp;lt;key column=&quot;lkm_cust_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
            &amp;lt;one-to-many &lt;span&gt;class&lt;/span&gt;=&quot;Linkman&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后可以编写如下测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.创建一个客户&lt;/span&gt;
        Customer c1=&lt;span&gt;new&lt;/span&gt; Customer();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        c1.setCust_name(&quot;Kevin&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.创建一个新的联系人&lt;/span&gt;
        Linkman lkm1=&lt;span&gt;new&lt;/span&gt; Linkman();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        lkm1.setLkm_name(&quot;Kevin_one2many&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.建立客户和联系人的关联关系（让双向）&lt;/span&gt;
&lt;span&gt;        lkm1.setCustomer(c1);
        c1.getLinkmans().add(lkm1);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.保存要符合原则&lt;/span&gt;
        s.save(c1);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持久态 有一级缓存和快照&lt;/span&gt;
&lt;span&gt;        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;保存联系人级联客户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　同样我们需要确定主控方，现在我们的主控方是联系人。所以需要在联系人的映射文件中进行配置，内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--&lt;span&gt; 一对多关系影射：从表实体的映射配置
            涉及的标签：many&lt;/span&gt;-to-&lt;span&gt;one：建立多对一的映射配置
                                属性：name：从表示实体中引用主表实体对象的引用的名称
                                      &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：指定属性所对应的实体类名称                                         
 &lt;/span&gt;--&amp;gt;
 &amp;lt;many-to-one name=&quot;customer&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Customer&quot; column=&quot;lkm_cust_id&quot; cascade=&quot;save-update&quot;&amp;gt;&amp;lt;/many-to-one&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;编写如下测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.创建一个客户&lt;/span&gt;
        Customer c1=&lt;span&gt;new&lt;/span&gt; Customer();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        c1.setCust_name(&quot;Kevin&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.创建一个新的联系人&lt;/span&gt;
        Linkman lkm1=&lt;span&gt;new&lt;/span&gt; Linkman();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        lkm1.setLkm_name(&quot;Kevin_one2many&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.建立客户和联系人的关联关系（让双向）&lt;/span&gt;
&lt;span&gt;        lkm1.setCustomer(c1);
        c1.getLinkmans().add(lkm1);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.保存要符合原则&lt;/span&gt;
        s.save(lkm1);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持久态 有一级缓存和快照&lt;/span&gt;
&lt;span&gt;        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 级联更新&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test5(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.查询一个客户&lt;/span&gt;
        Customer c1=s.get(Customer.&lt;span&gt;class&lt;/span&gt;, 1l&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.创建一个新的联系人&lt;/span&gt;
        Linkman lkm=&lt;span&gt;new&lt;/span&gt; Linkman(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;瞬时态&lt;/span&gt;
        lkm.setLkm_name(&quot;one2many_update&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.建立客户和联系人的关联关系（双向）&lt;/span&gt;
&lt;span&gt;        lkm.setCustomer(c1);
        c1.getLinkmans().add(lkm);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.更新联系人&lt;/span&gt;
&lt;span&gt;        s.update(c1);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;span&gt;&lt;strong&gt;3.3 Hibernate 的级联删除&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div readability=&quot;17.5&quot;&gt;
&lt;p&gt;　&lt;span&gt;　我们之前学习过级联保存或更新，那么再来看级联删除也就不难理解了，级联删除也是有方向性的，删删除客户同时级联删除联系人，也可以删除联系人同时级联删除客户(这种需求很少)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　原来JDBC中删除客户和联系人的时候，如果有外键的关系是不可以删除的，但是现在我们使用了 Hibernate，其实 Hibernate可以实现这样的功能，但是不会删除客户同时删除联系人，默认情况下 Hibernate会怎么做呢呢？我们们来看下面的测试：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;18.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test6(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx &lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        Customer c&lt;/span&gt;=s.get(Customer.&lt;span&gt;class&lt;/span&gt;, 71&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除客户&lt;/span&gt;
&lt;span&gt;        s.delete(c);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;默认的情况下如果客户下面还有联系人,，Hibernate会将联系人的外键置为null,然后去删除客户。那么其实有的时候我们需要删除客户的时候，同时将客户关联的联系人一并删除。这个时候我们就需要使用 Hibernate的级联保存操作了。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;&lt;span&gt;&lt;strong&gt;删除客户的时候同时删除客户的联系人&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;确定删除的主控方式客户,所以需要在客户端配置：&lt;/span&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &amp;lt;set name=&quot;linkmans&quot; table=&quot;cust_linkman&quot; cascade=&quot;save-update,delete&quot;&amp;gt;
            &amp;lt;key column=&quot;lkm_cust_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
            &amp;lt;one-to-many &lt;span&gt;class&lt;/span&gt;=&quot;Linkman&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;编写如下测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test6(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx &lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        Customer c&lt;/span&gt;=s.get(Customer.&lt;span&gt;class&lt;/span&gt;, 7l&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除客户&lt;/span&gt;
&lt;span&gt;        s.delete(c);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 双向关联产生多余的SQL语句&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之前已经分析过了，因为双向维护了关系，而且持久态对象可以自动更新数据库，更新客户的时候会修改一次外键，更新联系人的时候同样也会修改一次外键。这样就会产生了多余的SQL语句，那么问题产生了，我们又该如何解决呢？其实解决的办法很简单，只需要将一方放弃外键维护权即可。也就是说关系不是双方维护的，只需要交给某一方去维护就可以了。&lt;span&gt;通常我们都是交给多的一方去维护的。&lt;/span&gt;为什么呢？因为多的方才是维护关系的最好的地方。举个例子，一个老师对应多个学生，一个学生对应一个老师，这是典型的一对多。那么一个老师如果要记住所有学生的名字很难的，但如果让每个学生记住老师的名字应该不难。其实就是这个道理。所以在一对多中，一的一方都会放弃外键的维护权(关系的维护)。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;span&gt;　　这个时候如果想让一的一方放弃外键的维护权，只需要进行如下的配置即可。&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180503222456067-647975713.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;span&gt;　　inverse的默认值是false ，代表不放弃外键维护权，配置值为true，代表放弃了外键的维护权。此时就不会再产生之前的问题。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、Hibernate的多对多关联关系映射&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1 创建表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据模型如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180504144747011-2033839878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.2 创建实体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 用户实体：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.Kevin.domain;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 用户实体类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SysUser &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long userId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userPassword;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer userState;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多对多关系映射：&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Set&amp;lt;SysRole&amp;gt; roles=&lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;SysRole&amp;gt;(0&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Set&amp;lt;SysRole&amp;gt;&lt;span&gt; getRoles() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roles;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setRoles(Set&amp;lt;SysRole&amp;gt;&lt;span&gt; roles) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roles =&lt;span&gt; roles;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserId(Long userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserName(String userName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userName =&lt;span&gt; userName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userPassword;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserPassword(String userPassword) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userPassword =&lt;span&gt; userPassword;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getUserState() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userState;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserState(Integer userState) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userState =&lt;span&gt; userState;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;SysUser [userId=&quot; + userId + &quot;, userName=&quot; + userName + &quot;, userPassword=&quot; +&lt;span&gt; userPassword
                &lt;/span&gt;+ &quot;, userState=&quot; + userState + &quot;]&quot;&lt;span&gt;;
    }
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;角色实体：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.Kevin.domain;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 角色的实体类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SysRole &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long roleId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String roleName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String roleMemo;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多对多关系映射：一个角色可以赋予多个用户&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Set&amp;lt;SysUser&amp;gt; users=&lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;SysUser&amp;gt;(0&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Set&amp;lt;SysUser&amp;gt;&lt;span&gt; getUsers() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; users;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUsers(Set&amp;lt;SysUser&amp;gt;&lt;span&gt; users) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.users =&lt;span&gt; users;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getRoleId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roleId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRoleId(Long roleId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roleId =&lt;span&gt; roleId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRoleName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roleName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRoleName(String roleName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roleName =&lt;span&gt; roleName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRoleMemo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roleMemo;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRoleMemo(String roleMemo) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roleMemo =&lt;span&gt; roleMemo;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;SysRole [roleId=&quot; + roleId + &quot;, roleName=&quot; + roleName + &quot;, roleMemo=&quot; + roleMemo + &quot;]&quot;&lt;span&gt;;
    }
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.3 创建映射&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户映射：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!--&lt;span&gt; 
创建用户类关系映射
导入dtd约束
 &lt;/span&gt;--&amp;gt;
 &amp;lt;!DOCTYPE hibernate-&lt;span&gt;mapping PUBLIC 
    &lt;/span&gt;&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;
&amp;lt;!-- 
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long userId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userPassword;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer userState;
 &lt;/span&gt;--&amp;gt;    
&amp;lt;hibernate-mapping &lt;span&gt;package&lt;/span&gt;=&quot;com.Kevin.domain&quot;&amp;gt;
    &amp;lt;&lt;span&gt;class&lt;/span&gt; name=&quot;SysUser&quot; table=&quot;sys_user&quot; &amp;gt;
        &amp;lt;id name=&quot;userId&quot; column=&quot;user_id&quot;&amp;gt;
            &amp;lt;generator &lt;span&gt;class&lt;/span&gt;=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;userName&quot; column=&quot;user_name&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;userPassword&quot; column=&quot;user_password&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;userState&quot; column=&quot;user_state&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!--&lt;span&gt; 
            多对多关系映射涉及的标签：
                set：用于映射set集合属性
                    name：指定集合名称
                    table：指定中间表的名称
                key：用于映射外键字段
                    column：指定当前实体在中间表的外键字段名称
                many&lt;/span&gt;-to-&lt;span&gt;many：用于映射多对多的关系
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：对方的实体类
                    column：    对方在中间类的外键字段名称
         &lt;/span&gt;--&amp;gt;
         &amp;lt;set name=&quot;roles&quot; table=&quot;user_role_ref&quot; inverse=&quot;true&quot; cascade=&quot;delete&quot;&amp;gt;
             &amp;lt;key column=&quot;user_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
             &amp;lt;many-to-many &lt;span&gt;class&lt;/span&gt;=&quot;SysRole&quot; column=&quot;role_id&quot; /&amp;gt;
         &amp;lt;/set&amp;gt;
    &amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;角色映射：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!--&lt;span&gt; 
创建用户类关系映射
导入dtd约束
 &lt;/span&gt;--&amp;gt;
 &amp;lt;!DOCTYPE hibernate-&lt;span&gt;mapping PUBLIC 
    &lt;/span&gt;&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;
&amp;lt;!-- 
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long roleId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String roleName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String roleMemo;
 &lt;/span&gt;--&amp;gt;    
&amp;lt;hibernate-mapping &lt;span&gt;package&lt;/span&gt;=&quot;com.Kevin.domain&quot;&amp;gt;
    &amp;lt;&lt;span&gt;class&lt;/span&gt; name=&quot;SysRole&quot; table=&quot;sys_role&quot; &amp;gt;
        &amp;lt;id name=&quot;roleId&quot; column=&quot;role_id&quot;&amp;gt;
            &amp;lt;generator &lt;span&gt;class&lt;/span&gt;=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;roleName&quot; column=&quot;role_name&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;roleMemo&quot; column=&quot;role_memo&quot;&amp;gt;&amp;lt;/property&amp;gt;
                &amp;lt;!--&lt;span&gt; 
            多对多关系映射涉及的标签：
                set：用于映射set集合属性
                    name：指定集合名称
                    table：指定中间表的名称
                key：用于映射外键字段
                    column：指定当前实体在中间表的外键字段名称
                many&lt;/span&gt;-to-&lt;span&gt;many：用于映射多对多的关系
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;：对方的实体类
                    column：    对方在中间类的外键字段名称
         &lt;/span&gt;--&amp;gt;
         &amp;lt;set name=&quot;users&quot; table=&quot;user_role_ref&quot; cascade=&quot;delete&quot;&amp;gt;
             &amp;lt;key column=&quot;role_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
             &amp;lt;many-to-many &lt;span&gt;class&lt;/span&gt;=&quot;SysUser&quot; column=&quot;user_id&quot;/&amp;gt;
         &amp;lt;/set&amp;gt;
    &amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.4 在核心配置中加入映射文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &amp;lt;mapping resource=&quot;com/Kevin/domain/SysUser.hbm.xml&quot;/&amp;gt;
        &amp;lt;mapping resource=&quot;com/Kevin/domain/SysRole.hbm.xml&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.5 编写测试类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 保存操作：需求：创建2个用户和3个角色
     *                     让1号用户具备1号和2号角色
     *                     让2号用户具备2号和3号角色
     *                     保存用户和角色
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
        SysUser u1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u1.setUserName(&lt;/span&gt;&quot;User1&quot;&lt;span&gt;);
        SysUser u2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u2.setUserName(&lt;/span&gt;&quot;User2&quot;&lt;span&gt;);
        
        SysRole r1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r1.setRoleName(&lt;/span&gt;&quot;Role1&quot;&lt;span&gt;);
        SysRole r2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r2.setRoleName(&lt;/span&gt;&quot;Role2&quot;&lt;span&gt;);
        SysRole r3&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r3.setRoleName(&lt;/span&gt;&quot;Role3&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立双相关联关系
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先建立用户&lt;/span&gt;
&lt;span&gt;        u1.getRoles().add(r1);
        u1.getRoles().add(r2);
        u2.getRoles().add(r2);
        u2.getRoles().add(r3);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立角色&lt;/span&gt;
&lt;span&gt;        r1.getUsers().add(u1);
        r2.getUsers().add(u1);
        r2.getUsers().add(u2);
        r3.getUsers().add(u2);
        
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        s.save(u1);
        s.save(u2);
        s.save(r1);
        s.save(r2);
        s.save(r3);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、多对多的相关操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.1 级联保存或更新&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之前已经学习过一对多的级联保存了，那么多对多也是一样的。如果只保存单独的一方是不可以的，还是需要保存双方的。如果就想保存一方就需要设置级联操作。同样要看保存的主控方是哪一端，就需要在那一端进行配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;保存用户级联角色&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180504145747805-621613331.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;编写测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 级联保存操作：
     * 需求：创建2个用户和3个角色
     *                     让1号用户具备1号和2号角色
     *                     让2号用户具备2号和3号角色
     *                     保存用户和角色
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test1(){
        SysUser u1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u1.setUserName(&lt;/span&gt;&quot;User1&quot;&lt;span&gt;);
        SysUser u2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u2.setUserName(&lt;/span&gt;&quot;User2&quot;&lt;span&gt;);
        
        SysRole r1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r1.setRoleName(&lt;/span&gt;&quot;Role1&quot;&lt;span&gt;);
        SysRole r2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r2.setRoleName(&lt;/span&gt;&quot;Role2&quot;&lt;span&gt;);
        SysRole r3&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r3.setRoleName(&lt;/span&gt;&quot;Role3&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立双相关联关系
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先建立用户&lt;/span&gt;
&lt;span&gt;        u1.getRoles().add(r1);
        u1.getRoles().add(r2);
        u2.getRoles().add(r2);
        u2.getRoles().add(r3);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立角色&lt;/span&gt;
&lt;span&gt;        r1.getUsers().add(u1);
        r2.getUsers().add(u1);
        r2.getUsers().add(u2);
        r3.getUsers().add(u2);
        
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        s.save(u1);
        s.save(u2);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 保存角色级联用户&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180504150455999-1070493696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编写测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 级联保存操作：保存角色级联用户
     * 需求：创建2个用户和3个角色
     *                     让1号用户具备1号和2号角色
     *                     让2号用户具备2号和3号角色
     *                     保存用户和角色
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test3(){
        SysUser u1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u1.setUserName(&lt;/span&gt;&quot;User1&quot;&lt;span&gt;);
        SysUser u2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        u2.setUserName(&lt;/span&gt;&quot;User2&quot;&lt;span&gt;);
        
        SysRole r1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r1.setRoleName(&lt;/span&gt;&quot;Role1&quot;&lt;span&gt;);
        SysRole r2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r2.setRoleName(&lt;/span&gt;&quot;Role2&quot;&lt;span&gt;);
        SysRole r3&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysRole();
        r3.setRoleName(&lt;/span&gt;&quot;Role3&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立双相关联关系
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先建立用户&lt;/span&gt;
&lt;span&gt;        u1.getRoles().add(r1);
        u1.getRoles().add(r2);
        u2.getRoles().add(r2);
        u2.getRoles().add(r3);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立角色&lt;/span&gt;
&lt;span&gt;        r1.getUsers().add(u1);
        r2.getUsers().add(u1);
        r2.getUsers().add(u2);
        r3.getUsers().add(u2);
        
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        s.save(r1);
        s.save(r2);
        s.save(r3);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.2 级联删除（了解）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　级联删除仅作了解，因为在实际开发中是禁止用的。由于在多对多关联关系下，往往有多个对象是关联的，因此只要删除一个，使用级联操作，就会删除多个对象和数据。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1375044/201805/1375044-20180504150756986-174945293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 删除操作
     * 在实际开发中：多对多的双向级联删除是禁止使用的
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test2(){
        Session s&lt;/span&gt;=&lt;span&gt;HibernateUtil.getCurrSession();
        Transaction tx&lt;/span&gt;=&lt;span&gt;s.beginTransaction();
        
        SysUser u1&lt;/span&gt;=s.get(SysUser.&lt;span&gt;class&lt;/span&gt;, 1l&lt;span&gt;);
        
        s.delete(u1);
        tx.commit();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 04 May 2018 07:22:00 +0000</pubDate>
<dc:creator>Kevin.ZhangCG</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Kevin-ZhangCG/p/8987913.html</dc:identifier>
</item>
<item>
<title>poi excel 常用操作 [冻结、合并、链接] - -知心不知情</title>
<link>http://www.cnblogs.com/july4/p/8989898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/july4/p/8989898.html</guid>
<description>&lt;h4 id=&quot;基本&quot;&gt;基本&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;Workbook wb= new HSSFWorkbook();
Sheet sheet = wb.createSheet(&quot;sheetName&quot;);
Row row = sheet.createRow(0); //第一行
Cell cell = row.createCell(0);//第一个单元格
cell.setCellValue(&quot;企业名称&quot;);//单元格赋值
cell.setCellStyle(cellStyle);//设置样式
FileOutputStream fos = new FileOutputStream(&quot;c:/workbook.xls&quot;);
wb.write(fos);
fos.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;合并单元格&quot;&gt;合并单元格&lt;/h4&gt;
&lt;p&gt;CellRangeAddress（int firstRow, int lastRow, int firstCol, int lastCol）&lt;br/&gt;参数：起始行号，终止行号， 起始列号，终止列号&lt;br/&gt;例：&lt;br/&gt;CellRangeAddress cra =new CellRangeAddress(0, 1, 0, 0); //合并第一列两行&lt;br/&gt;sheet.addMergedRegion(cra);&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/187982/201805/187982-20180504111034498-628455225.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;冻结固定表头&quot;&gt;冻结、固定表头&lt;/h4&gt;
&lt;p&gt;CreateFreezePane的参数&lt;br/&gt;第一个参数表示要冻结的列数；&lt;br/&gt;第二个参数表示要冻结的行数，这里只冻结列所以为0；&lt;br/&gt;第三个参数表示右边区域可见的首列序号，从1开始计算；&lt;br/&gt;第四个参数表示下边区域可见的首行序号，也是从1开始计算，这里是冻结列，所以为0；&lt;br/&gt;例：sheet.createFreezePane(1,2,1,2);&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/187982/201805/187982-20180504111936226-586481177.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;链接&quot;&gt;链接&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;cell.setCellFormula(&quot;HYPERLINK(\&quot;文件夹地址或者网址\&quot;,\&quot;&quot; + &quot;附件&quot;+ &quot;\&quot;)&quot;);
//link样式
HSSFCellStyle linkStyle = (HSSFCellStyle) wb.createCellStyle();
HSSFFont cellFont= (HSSFFont) wb.createFont();
cellFont.setUnderline((byte) 1);
cellFont.setColor(HSSFColor.BLUE.index);
linkStyle.setFont(cellFont);
cell.setCellStyle(linkStyle);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/187982/201805/187982-20180504113113507-57237607.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;格式化&quot;&gt;格式化&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;文本：@
货币：#,##0.00
日期：yyyy年m月d日&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例： HSSFCellStyle numberStyle = (HSSFCellStyle) wb.createCellStyle();&lt;br/&gt;DataFormat format = wb.createDataFormat();&lt;br/&gt;numberStyle.setDataFormat(format.getFormat(&quot;#,##0.00&quot;));&lt;br/&gt;cell.setCellStyle(numberStyle);&lt;br/&gt;1,290,588.00&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 07:21:00 +0000</pubDate>
<dc:creator>-知心不知情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/july4/p/8989898.html</dc:identifier>
</item>
<item>
<title>Unity使用C++作为游戏逻辑脚本的研究（二） - zblade</title>
<link>http://www.cnblogs.com/zblade/p/8990750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zblade/p/8990750.html</guid>
<description>&lt;p&gt;&lt;span&gt;文章申明：本文来自JacksonDunstan的博客系列文章内容摘取和翻译，版权归其所有，附上原文的链接，大家可以有空阅读原文：&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//jacksondunstan.com/articles/3978&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;C++ Scripting( in Unity)&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上一篇文章写完，有同学觉得有点晦涩，其实可以多认真看两遍源码，仔细琢磨一下，就会有一种茅塞顿开的感觉：D。今天继续上文，深入讨论一下C++作为游戏脚本的研究，本文会较长，需要写一些示例代码做讲解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、对C#指针(引用)的封装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上文，我们提到，C++对C#的调用，是基于C#的函数指针（引用）而来的，比如在C++中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return transform handle  || function pointer name  || take a handle to the go&lt;/span&gt;
int32_t                    (*GameObjectGetTransform)   (int32_t thiz);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;为了拓展性，我们都会倾向于对于这种int32_t类型的数据做一个封装，自然容易想到用一个结构体（结构体默认为public）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; System
{
     &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Object
     {
         int32_t Handle;
     }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;利用继承的特点，我们可以延伸出其他类型的结构体定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; UnityEngine
{
     &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; Vector3 {&lt;span&gt;float&lt;/span&gt; x; &lt;span&gt;float&lt;/span&gt; y; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; z;};

     &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Transform:System::Object
     {
         &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetPosition(Vector3 val)
         {
               TransformSetPosition(Handle, val);
         }
     }

     &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; GameObject:System::Object
     {
          GameObject()
          {
               Handle &lt;/span&gt;=&lt;span&gt; GameObjectNew();
          }

          Transform GetPosition()
          {
                Transform transform;
                transform.Handle &lt;/span&gt;=&lt;span&gt; GameObjectGetTransform(Handle);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; transform;
          }
     }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;二、对内存管理的控制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在C#部分，对于托管部分，是基于垃圾自动回收机制的，对于C++部分，相对较为简单的回收，可以基于计数的回收机制，当对象的引用计数为零的时候执行垃圾回收，那么对于我们可以定义两个全局变量来做相关的计数统计：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;
&lt;span&gt;int32_t managedObjectsRefCountLen;
int32_t &lt;/span&gt;*&lt;span&gt;managedObjectsRefCounts;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.....

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init&lt;/span&gt;
managedObjectsRefCountLen = maxManagedObjects;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;c#会传入该数据&lt;/span&gt;
managedObjectsRefCounts = (int32_t*)calloc(maxManagedObjects, &lt;span&gt;sizeof&lt;/span&gt;(int32_t));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样在GameObject的初始化和解析的时候可以执行相关的内存管理操作：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;GameObject()
{
     Handle &lt;/span&gt;=&lt;span&gt; GameObjectNew();
     managedObjectsRefCounts[Handle]&lt;/span&gt;++&lt;span&gt;;
}

&lt;/span&gt;~&lt;span&gt;GameObject()
{
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(--managedObjectsRefCounts[Handle] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
     {
         ReleaseObject(Handle);
     }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于其他的结构体，可以利用宏定义来实现类似的结构体定义中的操作。综上，可以实现在传递的时候对int32_t类型数据的封装，其次可以内嵌内存操作。整体代码对于c#的修改不多，对于C++的修改较多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、代码部分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于c#部分的代码，基本不修改，只是修改一下Init函数，添加内存管理相关的数据和函数，具体代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;....
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化函数及相关委托的修改&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;delegate&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InitDelegate(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxManagedObjects, IntPtr releaseObject,
IntPtr gameObjectNew, IntPtr gameObjectGetTransform, IntPtr transformSetPosition);
....
...
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; UNITY_EDITOR_OSX || UNITY_EDITOR_LINUX&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;#elif&lt;/span&gt; UNITY_EDITOR_WIN&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;&lt;span&gt;
    [DllImport(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NativeScript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Init(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxManagedObjects, IntPtr releaseObject,
    IntPtr gameObjectNew, IntPtr gameObjectGetTransform, 
    IntPtr transformSetPosition);
...
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新增释放&lt;/span&gt;
&lt;span&gt;delegate&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReleaseObjectDelegate(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; handle);
...
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改Awake函数中对于初始化的操作&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Awake()
    {
      ...

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;init c++ libraray &lt;/span&gt;
      &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxManagedObjects = &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
      ObjectStore.Init(maxManagedObjects);
      Init(maxManagedObjects,
      Marshal.GetFunctionPointerForDelegate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReleaseObjectDelegate(ReleaseObject)),
      Marshal.GetFunctionPointerForDelegate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; GameObjectNewDelegate(GameObjectNew)),
      Marshal.GetFunctionPointerForDelegate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; GameObjectGetTransformDelegate(GameObjectGetTransform)),
      Marshal.GetFunctionPointerForDelegate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TransformSetPositionDelegate(TransformSetPosition)));
    }

...

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;c# function for c++ to call&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReleaseObject(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; handle)
{
    ObjectStore.Remove(handle);
}
...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;C++部分的代码修改较多，我就copy一下作者的工程源码吧 ：D&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For assert()&lt;/span&gt;
#include &amp;lt;assert.h&amp;gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For int32_t, etc.&lt;/span&gt;
#include &amp;lt;stdint.h&amp;gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For malloc(), etc.&lt;/span&gt;
#include &amp;lt;stdlib.h&amp;gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For std::forward&lt;/span&gt;
#include &amp;lt;utility&amp;gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Macro to put before functions that need to be exposed to C#&lt;/span&gt;
&lt;span&gt;#ifdef _WIN32
    &lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; DLLEXPORT extern &quot;C&quot; __declspec(dllexport)
&lt;span&gt;#else&lt;/span&gt;
    &lt;span&gt;#define&lt;/span&gt; DLLEXPORT extern &quot;C&quot;
&lt;span&gt;#endif&lt;/span&gt;
 
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; C# struct types&lt;/span&gt;
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
 
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; UnityEngine
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Vector3
    {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; x;
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; y;
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; z;
 
        Vector3()
            : x(&lt;/span&gt;&lt;span&gt;0.0f&lt;/span&gt;&lt;span&gt;)
            , y(&lt;/span&gt;&lt;span&gt;0.0f&lt;/span&gt;&lt;span&gt;)
            , z(&lt;/span&gt;&lt;span&gt;0.0f&lt;/span&gt;&lt;span&gt;)
        {
        }
 
        Vector3(
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; x,
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; y,
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; z)
            : x(x)
            , y(y)
            , z(z)
        {
        }
    };
}
 
&lt;/span&gt;&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; C# functions for C++ to call&lt;/span&gt;
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
 
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Plugin
{
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; UnityEngine;
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (*&lt;span&gt;ReleaseObject)(
        int32_t handle);
 
    int32_t (&lt;/span&gt;*&lt;span&gt;GameObjectNew)();
 
    int32_t (&lt;/span&gt;*&lt;span&gt;GameObjectGetTransform)(
        int32_t thiz);
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (*&lt;span&gt;TransformSetPosition)(
        int32_t thiz,
        Vector3 val);
}
 
&lt;/span&gt;&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reference counting of managed objects&lt;/span&gt;
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
 
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Plugin
{
    int32_t managedObjectsRefCountLen;
    int32_t&lt;/span&gt;*&lt;span&gt; managedObjectRefCounts;
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; ReferenceManagedObject(int32_t handle)
    {
        assert(handle &lt;/span&gt;&amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; handle &amp;lt;&lt;span&gt; managedObjectsRefCountLen);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (handle != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            managedObjectRefCounts[handle]&lt;/span&gt;++&lt;span&gt;;
        }
    }
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; DereferenceManagedObject(int32_t handle)
    {
        assert(handle &lt;/span&gt;&amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; handle &amp;lt;&lt;span&gt; managedObjectsRefCountLen);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (handle != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            int32_t numRemain &lt;/span&gt;= --&lt;span&gt;managedObjectRefCounts[handle];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (numRemain == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                ReleaseObject(handle);
            }
        }
    }
}
 
&lt;/span&gt;&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Mirrors of C# types. These wrap the C# functions to present
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a similiar API as in C#.&lt;/span&gt;
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
 
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; System
{
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Object
    {
        int32_t Handle;
 
        Object(int32_t handle)
        {
            Handle &lt;/span&gt;=&lt;span&gt; handle;
            Plugin::ReferenceManagedObject(handle);
        }
 
        Object(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; Object&amp;amp;&lt;span&gt; other)
        {
            Handle &lt;/span&gt;=&lt;span&gt; other.Handle;
            Plugin::ReferenceManagedObject(Handle);
        }
 
        Object(Object&lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; other)
        {
            Handle &lt;/span&gt;=&lt;span&gt; other.Handle;
            other.Handle &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }
    };
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;宏定义操作&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; SYSTEM_OBJECT_LIFECYCLE(ClassName, BaseClassName) \&lt;span&gt;
    ClassName(int32_t handle) \
        : BaseClassName(handle) \
    { \
    } \
    \
    ClassName(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; ClassName&amp;amp;&lt;span&gt; other) \
        : BaseClassName(other) \
    { \
    } \
    \
    ClassName(ClassName&lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; other) \
        : BaseClassName(std::forward&lt;/span&gt;&amp;lt;ClassName&amp;gt;&lt;span&gt;(other)) \
    { \
    } \
    \
    &lt;/span&gt;~&lt;span&gt;ClassName() \
    { \
        DereferenceManagedObject(Handle); \
    } \
    \
    ClassName&lt;/span&gt;&amp;amp; &lt;span&gt;operator&lt;/span&gt;=(&lt;span&gt;const&lt;/span&gt; ClassName&amp;amp;&lt;span&gt; other) \
    { \
        DereferenceManagedObject(Handle); \
        Handle &lt;/span&gt;=&lt;span&gt; other.Handle; \
        ReferenceManagedObject(Handle); \
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; *&lt;span&gt;this&lt;/span&gt;&lt;span&gt;; \
    } \
    \
    ClassName&lt;/span&gt;&amp;amp; &lt;span&gt;operator&lt;/span&gt;=(ClassName&amp;amp;&amp;amp;&lt;span&gt; other) \
    { \
        DereferenceManagedObject(Handle); \
        Handle &lt;/span&gt;=&lt;span&gt; other.Handle; \
        other.Handle &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; \
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; *&lt;span&gt;this&lt;/span&gt;&lt;span&gt;; \
    }
}
 
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; UnityEngine
{
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; System;
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Plugin;
 
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; GameObject;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Component;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Transform;
 
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; GameObject : Object
    {
        SYSTEM_OBJECT_LIFECYCLE(GameObject, Object)
        GameObject();
        Transform GetTransform();
    };
 
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Component : Object
    {
        SYSTEM_OBJECT_LIFECYCLE(Component, Object)
    };
 
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Transform : Component
    {
        SYSTEM_OBJECT_LIFECYCLE(Transform, Component)
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetPosition(Vector3 val);
    };
 
    GameObject::GameObject()
        : GameObject(GameObjectNew())
    {
    }
 
    Transform GameObject::GetTransform()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Transform(GameObjectGetTransform(Handle));
    }
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Transform::SetPosition(Vector3 val)
    {
        TransformSetPosition(Handle, val);
    }
}
 
&lt;/span&gt;&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; C++ functions for C# to call&lt;/span&gt;
&lt;span&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Init the plugin&lt;/span&gt;
DLLEXPORT &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Init(
    int32_t maxManagedObjects,
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (*&lt;span&gt;releaseObject)(int32_t),
    int32_t (&lt;/span&gt;*&lt;span&gt;gameObjectNew)(),
    int32_t (&lt;/span&gt;*&lt;span&gt;gameObjectGetTransform)(int32_t),
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (*&lt;span&gt;transformSetPosition)(int32_t, UnityEngine::Vector3))
{
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Plugin;
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Init managed object ref counting&lt;/span&gt;
    managedObjectsRefCountLen =&lt;span&gt; maxManagedObjects;
    managedObjectRefCounts &lt;/span&gt;= (int32_t*&lt;span&gt;)calloc(
        maxManagedObjects,
        &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(int32_t));
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Init pointers to C# functions&lt;/span&gt;
    ReleaseObject =&lt;span&gt; releaseObject;
    GameObjectNew &lt;/span&gt;=&lt;span&gt; gameObjectNew;
    GameObjectGetTransform &lt;/span&gt;=&lt;span&gt; gameObjectGetTransform;
    TransformSetPosition &lt;/span&gt;=&lt;span&gt; transformSetPosition;
}
 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Called by MonoBehaviour.Update&lt;/span&gt;
DLLEXPORT &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MonoBehaviourUpdate()
{
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; UnityEngine;
 
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; int32_t numCreated = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (numCreated &amp;lt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
    {
        GameObject go;
        Transform transform &lt;/span&gt;=&lt;span&gt; go.GetTransform();
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; comp = (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;)numCreated;
        Vector3 position(comp, comp, comp);
        transform.SetPosition(position);
        numCreated&lt;/span&gt;++&lt;span&gt;;
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;四、c#和Unity API 的导出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写到上面部分，基本对于c#和c++之间的操作有一个整体的较为完整的讲解，还有一个没有提起，那就是，怎么将 unity 的API导出给C++使用呢？作者给出了一个导出方式：JSON导出这让熟悉c#导出到lua的同学可以发现异曲同工之妙，其基本的导出设计为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;54&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;{
    &quot;Assemblies&quot;: [
        {
            &quot;Path&quot;: &quot;/Applications/Unity/Unity.app/Contents/Managed/UnityEngine.dll&quot;,
            &quot;Types&quot;: [
                {
                    &quot;Name&quot;: &quot;UnityEngine.Object&quot;,
                    &quot;Constructors&quot;: [],
                    &quot;Methods&quot;: [],
                    &quot;Properties&quot;: [],
                    &quot;Fields&quot;: []
                },
                {
                    &quot;Name&quot;: &quot;UnityEngine.GameObject&quot;,
                    &quot;Constructors&quot;: [
                        {
                            &quot;Types&quot;: []
                        }
                    ],
                    &quot;Properties&quot;: [ &quot;transform&quot; ],
                    &quot;Fields&quot;: []
                },
                {
                    &quot;Name&quot;: &quot;UnityEngine.Component&quot;,
                    &quot;Constructors&quot;: [],
                    &quot;Methods&quot;: [],
                    &quot;Properties&quot;: [],
                    &quot;Fields&quot;: []
                },
                {
                    &quot;Name&quot;: &quot;UnityEngine.Transform&quot;,
                    &quot;Constructors&quot;: [],
                    &quot;Methods&quot;: [],
                    &quot;Properties&quot;: [ &quot;position&quot; ],
                    &quot;Fields&quot;: []
                }
            ]
        }
    ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;整体设计简介易懂，当然，并不是所有的c#特性都可以被导出，json的导出不支持：Array/out and ref/ delegate/ generic functions and types/ struct types，不知后期作者是否考虑扩展对这些不兼容的特效的导出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用json导出，整体的修改和使用非常简单，比如对Component，需要添加对其transform特性的导出，那么只需要修改为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;&quot;Properties&quot;:[&quot;transform&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;那么，保存后重新导出，就可以得到transform特性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此外，对于.Net的一些API， 也可以使用JSON导出的方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;{
    &quot;Path&quot;: &quot;/Applications/Unity/Unity.app/Contents/Mono/lib/mono/unity/System.dll&quot;,
    &quot;Types&quot;: [
        {
            &quot;Name&quot;: &quot;System.Diagnostics.Stopwatch&quot;,
            &quot;Constructors&quot;: [
                {
                    &quot;Types&quot;: []
                }
            ],
            &quot;Methods&quot;: [
                {
                    &quot;Name&quot;: &quot;Start&quot;,
                    &quot;Types&quot;: []
                },
                {
                    &quot;Name&quot;: &quot;Reset&quot;,
                    &quot;Types&quot;: []
                }
            ],
            &quot;Properties&quot;: [ &quot;ElapsedMilliseconds&quot; ],
            &quot;Fields&quot;: []
        }
    ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;基于上面的各个部分，整体的游戏工程，可以分为2个部分：逻辑代码部分和binding相关的部分，作者给出的工程规划：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
&lt;span&gt;Assets
|- Game.cpp                  // Game-specific code. Can rename this file, add headers, etc.
|- NativeScriptTypes.json    // JSON describing which .NET types the game wants to expose to C++
|- NativeScriptConstants.cs  // Game-specific constants such as plugin names and paths
|- NativeScript/             // C++ scripting system. Drop this into your project.
   |- Editor/
      |- GenerateBindings.cs // Code generator
   |- Bindings.cs            // C# code to expose functionality to C++
   |- ObjectStore.cs         // Object handles system
   |- Bindings.h             // C++ wrapper types for C# (declaration)
   |- Bindings.cpp           // C++ wrapper types for C# (definition)
   |- BootScript.cs          // MonoBehaviour to boot up the C++ plugin
   |- BootScene.unity        // Scene with just BootScript on an empty GameObject&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于NativeScript来说，相当于基本的binding相关的东西，对于任何工程都适用，对于其他部分，则根据具体的工程来设计。基于这样的设计，需要做到三个基本规范：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、需要定义一个全局的类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NativeScriptConstants
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Name of the plugin used by [DllImport] when running outside the editor
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PluginName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NativeScript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Path to load the plugin from when running inside the editor
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;#if&lt;/span&gt; UNITY_EDITOR_OSX
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PluginPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/NativeScript.bundle/Contents/MacOS/NativeScript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;#elif&lt;/span&gt; UNITY_EDITOR_LINUX
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PluginPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/NativeScript.so&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;#elif&lt;/span&gt; UNITY_EDITOR_WIN
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PluginPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/NativeScript.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;
 
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Maximum number of simultaneous managed objects that the C++ plugin uses
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxManagedObjects = &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Path within the Unity project to the exposed types JSON file
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ExposedTypesJsonPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NativeScriptTypes.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、NativeScriptConstants.ExposedTypesJsonPath需要指向前面所提到的json导出文件；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、在C++代码部分，需要定义2个函数用来执行相关的更新&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
&lt;span&gt;// Called when the plugin is initialized
void PluginMain()
{
}
 
// Called for MonoBehaviour.Update
void PluginUpdate()
{
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后，整体的工程可以在github上找到，给出工程的链接：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jacksondunstan/UnityNativeScripting&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;jacksondunstan/UnityNativeScripting&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Over!&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 07:14:00 +0000</pubDate>
<dc:creator>zblade</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zblade/p/8990750.html</dc:identifier>
</item>
<item>
<title>PHP7开启Opcode打造强悍性能 - 郁冬</title>
<link>http://www.cnblogs.com/lamp01/p/8985068.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lamp01/p/8985068.html</guid>
<description>&lt;p&gt;&lt;span&gt;鸟哥在博客中说，提高PHP 7性能的几个tips，第一条就是开启opcache：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;记得启用Zend Opcache, 因为PHP7即使不启用Opcache速度也比PHP-5.6启用了Opcache快, &lt;/span&gt;&lt;br/&gt;&lt;span&gt;所以之前测试时期就发生了有人一直没有启用Opcache的事情&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;那么什么是Opcache呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Opcache 的前生是 &lt;code&gt;Optimizer+&lt;/code&gt; ，它是PHP的官方公司 Zend 开发的一款闭源但可以免费使用的 PHP 优化加速组件。 Optimizer+ 将PHP代码预编译生成的脚本文件 &lt;code&gt;Opcode&lt;/code&gt; 缓存在共享内存中供以后反复使用，从而避免了从磁盘读取代码再次编译的时间消耗。同时，它还应用了一些代码优化模式，使得代码执行更快。从而加速PHP的执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; PHP的正常执行流程如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1128628/201805/1128628-20180504142714761-711951956.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;request请求（nginx,apache,cli等）--&amp;gt;Zend引擎读取.php文件--&amp;gt;扫描其词典和表达式 --&amp;gt;解析文件--&amp;gt;创建要执行的计算机代码(称为Opcode)--&amp;gt;最后执行Opcode--&amp;gt; response 返回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每一次请求PHP脚本都会执行一遍以上步骤，如果PHP源代码没有变化，那么Opcode也不会变化，显然没有必要每次都重新生成Opcode，结合在Web中无所不在的缓存机制，我们可以把Opcode缓存下来，以后直接访问缓存的Opcode岂不是更快，启用Opcode缓存之后的流程图如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1128628/201805/1128628-20180504142702126-1584014725.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; Opcode cache 的目地是避免重复编译，减少 CPU 和内存开销。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面介绍Opcache的安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1、找到opcache的扩展，我的是php7.1&lt;span&gt;
yum &lt;/span&gt;&lt;span&gt;list&lt;/span&gt; php71*
2&lt;span&gt;、安装扩展
yum install php71w&lt;/span&gt;-opcache.x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;配置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;zend_extension=opcache.&lt;span&gt;so
[opcache]
;开启opcache
opcache&lt;/span&gt;.enable=1&lt;span&gt;  

;CLI环境下，PHP启用OPcache
opcache&lt;/span&gt;.enable_cli=1&lt;span&gt;

;OPcache共享内存存储大小&lt;/span&gt;,&lt;span&gt;单位MB
opcache&lt;/span&gt;.memory_consumption=128&lt;span&gt;  

;PHP使用了一种叫做字符串驻留（&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; interning）的技术来改善性能。例如，如果你在代码中使用了1000次字符串“foobar”，在PHP内部只会在第一使用这个字符串的时候分配一个不可变的内存区域来存储这个字符串，其他的999次使用都会直接指向这个内存区域。这个选项则会把这个特性提升一个层次——默认情况下这个不可变的内存区域只会存在于单个php-fpm的进程中，如果设置了这个选项，那么它将会在所有的php-&lt;span&gt;fpm进程中共享。在比较大的应用中，这可以非常有效地节约内存，提高应用的性能。
这个选项的值是以兆字节（megabytes）作为单位，如果把它设置为16，则表示16MB，默认是4MB
opcache&lt;/span&gt;.interned_strings_buffer=8&lt;span&gt;

;这个选项用于控制内存中最多可以缓存多少个PHP文件。这个选项必须得设置得足够大，大于你的项目中的所有PHP文件的总和。
设置值取值范围最小值是 &lt;/span&gt;200，最大值在 PHP 5.5.6 之前是 100000，PHP 5.5.6 及之后是 1000000&lt;span&gt;。也就是说在200到1000000之间。
opcache&lt;/span&gt;.max_accelerated_files=4000&lt;span&gt;

;设置缓存的过期时间（单位是秒）&lt;/span&gt;,&lt;span&gt;为0的话每次都要检查
opcache&lt;/span&gt;.revalidate_freq=60&lt;span&gt;

;从字面上理解就是“允许更快速关闭”。它的作用是在单个请求结束时提供一种更快速的机制来调用代码中的析构器，从而加快PHP的响应速度和PHP进程资源的回收速度，这样应用程序可以更快速地响应下一个请求。把它设置为1就可以使用这个机制了。
opcache&lt;/span&gt;.fast_shutdown=1&lt;span&gt;

;如果启用（设置为1），OPcache会在opcache&lt;/span&gt;.&lt;span&gt;revalidate_freq设置的秒数去检测文件的时间戳（timestamp）检查脚本是否更新。
如果这个选项被禁用（设置为0），opcache&lt;/span&gt;.&lt;span&gt;revalidate_freq会被忽略，PHP文件永远不会被检查。这意味着如果你修改了你的代码，然后你把它更新到服务器上，再在浏览器上请求更新的代码对应的功能，你会看不到更新的效果
强烈建议你在生产环境中设置为0，更新代码后，再平滑重启PHP和web服务器。
opcache&lt;/span&gt;.validate_timestamps=0&lt;span&gt; 

;开启Opcache &lt;/span&gt;&lt;span&gt;File&lt;/span&gt; Cache(实验性), 通过开启这个, 我们可以让Opcache把opcode缓存缓存到外部文件中, 对于一些脚本, 会有很明显的性能提升.&lt;span&gt;
这样PHP就会在&lt;/span&gt;/tmp目录下Cache一些Opcode的二进制导出文件, 可以跨PHP生命周期存在.&lt;span&gt;
opcache&lt;/span&gt;.file_cache=/tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;查看phpinfo：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1128628/201805/1128628-20180504150553607-1732347193.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1128628/201805/1128628-20180504150651899-685437096.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样的接口从以前的几百毫秒提升到现在的50ms左右&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1128628/201805/1128628-20180504150720857-181358113.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考资料：&lt;a title=&quot;Opcode是啥以及如何使用好Opcache&quot; href=&quot;https://www.zybuluo.com/phper/note/1016714&quot; target=&quot;_blank&quot;&gt;Opcode是啥以及如何使用好Opcache&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a title=&quot; 让PHP7达到最高性能的几个Tips &quot; href=&quot;http://www.laruence.com/2015/12/04/3086.html&quot; target=&quot;_blank&quot;&gt;让PHP7达到最高性能的几个Tips &lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 07:12:00 +0000</pubDate>
<dc:creator>郁冬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lamp01/p/8985068.html</dc:identifier>
</item>
<item>
<title>Angular v6 正式发布 - 冠军</title>
<link>http://www.cnblogs.com/haogj/p/8988948.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haogj/p/8988948.html</guid>
<description>&lt;p&gt; Angular 6 已经正式发布了！这个主要版本并不关注于底层的框架，更多地关注于工具链，以及使 Angular 在未来更容易快速推进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150604064-1669772797.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为发布的一部分，我们同步了主要的框架包  (@angular/core, @angular/common, @angular/compiler, etc),  Angular CLI, 以及 Angular Material + CDK。现在全部都是作为 6.0.0 发布。我们理清了它们之间的兼容性。小的更新的补丁将会基于项目的需要发布。&lt;/p&gt;
&lt;p&gt;可以通过每个项目的变更清单来查看全部的内容： &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot;&gt;framework&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/material2/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot;&gt;material+cdk&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular-cli/releases&quot; target=&quot;_blank&quot;&gt;cli&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;1. ng update&lt;/h2&gt;
&lt;p&gt;ng update &amp;lt;package&amp;gt;  是一个新的 CLI 命令，用于分析 package.json 并使用其关于 Angular 的知识来更新您的应用。请查看&lt;a href=&quot;https://update.angular.io/&quot; target=&quot;_blank&quot;&gt;升级手册&lt;/a&gt;来查看其行为。&lt;/p&gt;
&lt;p&gt;不仅可以使用 ng update 来帮助您适配正确版本的依赖项，并保持依赖同步，而且第三方也可以使用 &lt;a href=&quot;https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2&quot; target=&quot;_blank&quot;&gt;schematics&lt;/a&gt; 来提供 update 脚本命令。如果您的某个依赖库提供了 ng update 语法，在其有大更新的时候，就可以自动更新您的代码了。&lt;/p&gt;
&lt;p&gt;ng update 并不会替换您的包管理器，而是使用 npm 或者 yarn 在底层管理依赖，然后更新依赖，ng update 将对您的项目进行必要的转换。&lt;/p&gt;
&lt;p&gt;例如，ng update @angular/core 将会更新所有的 Angular 框架包，比如：RxJS 和 TypeScript，并运行这些包中可用的 schematics 来保持最新。作为命令的一部分，我们将会自动安装 rxjs-compat 到您的应用中以平滑迁移。&lt;/p&gt;
&lt;p&gt;我们期待更多的库和包在随后支持 ng update 语法，我们已经 听到一些企业库的团队在计划使用 ng update 来自动更新重要的变更升级，以减少开发时间。&lt;/p&gt;
&lt;p&gt;学习更多关于&lt;a href=&quot;https://github.com/angular/devkit/blob/master/docs/specifications/update.md&quot; target=&quot;_blank&quot;&gt;如何使用 ng update&lt;/a&gt; , 开始学习如何创建您自己的 ng update 语法，可以参考 rxjs 的 package.json 的入口，它关联了  collection.json。&lt;/p&gt;
&lt;h2&gt;2. ng add&lt;/h2&gt;
&lt;p&gt; 另一个新的 CLI 命令是 ng add，它可以使您添加新包变得更加容易。ng add 将使用您的包管理器来下载新的依赖项，并运行安装脚本（以 schematics 实现）。通过配置文件来更新项目。添加额外的依赖项（例如 polyfill 等），或者执行包特定的初始化代码。&lt;/p&gt;
&lt;p&gt;可以在您的使用 ng new 创建的新项目上试一下下面的命令：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ng add @angular/pwa, 通过为您的应用添加 manifest 文件和 service worker 将其转换为 PWA 项目&lt;/li&gt;
&lt;li&gt;ng add @ng-bootstrap/schematics, 将 ng-bootstrap 添加到项目中&lt;/li&gt;
&lt;li&gt;ng add @angular/metarial, 安装与设置 Angular Metarial ，并使用 ng generate 添加新的启动组件。&lt;/li&gt;
&lt;li&gt;ng add @clr/angular@next, 从 VMWare 安装和设置 Clarity。&lt;/li&gt;
&lt;li&gt;ng add @angular/elements, 为 Angular elements 安装 document-register-element.js 和依赖项。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于 ng add 基于 schematics 和 Npm ，我们希望库和社区支持我们构建一个 ng add 支持包的生态圈。&lt;/p&gt;
&lt;p&gt;请查看 &lt;a href=&quot;https://github.com/angular/material2/blob/master/src/lib/schematics/collection.json&quot; target=&quot;_blank&quot;&gt;Angular Metarial 的 ng add schemetic&lt;/a&gt; ，作为示例来帮助您开始创建您自己的 ng add。&lt;/p&gt;
&lt;h2&gt;3. Angular Elements&lt;/h2&gt;
&lt;p&gt;第一个版本的 Angular Elements 支持您在现有的 Angular 应用中通过注册 Angular Component 作为自定义元素。我们在 angular.io 内容管理系统中使用这种扩展能力，通过嵌入 HTML 来支持动态。这替换掉了手动启动 Angular 组件。&lt;/p&gt;
&lt;p&gt;请查看&lt;a href=&quot;https://stackblitz.com/edit/angular-f3nrpv?file=app%2Fapp.module.ts&quot; target=&quot;_blank&quot;&gt;注册 Angular Component 作为 custom element&lt;/a&gt;，或者&lt;a href=&quot;https://angular.io/guide/elements&quot; target=&quot;_blank&quot;&gt;学习更多的 Angular Elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;已经有一个社区成员发布了 &lt;a href=&quot;https://www.youtube.com/watch?v=4u9_kdkvTsc&quot; target=&quot;_blank&quot;&gt;Angular Elements Quick Start&lt;/a&gt;, 我们非常建议您参考。&lt;/p&gt;
&lt;h2&gt;4. Angular Metarial + CDK component&lt;/h2&gt;
&lt;p&gt;最大的更新是增加了新的 tree 组件以显示层次结构，遵循 table 组件的模式，CDK 支持了核心 tree 指令，Angular Metarial  通过 Metarial Design 提供了一致的体验，我们最近提供了一个关于它的内容，可以参考（&lt;a href=&quot;https://www.youtube.com/watch?v=s0Vy3sLbeyA&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt;, &lt;a href=&quot;https://docs.google.com/presentation/d/1DmWdfr8j25owK2ac5qlt7oeX6HpxQnXEGwmHIjf6EHI&quot; target=&quot;_blank&quot;&gt;slide&lt;/a&gt; ）.新的 tree 组件有两种风格：（Metarial 风格）mat-tree 和未修饰的版本 cdk-tree&lt;/p&gt;
&lt;p&gt;除了 tree 组件之外，我们还提供了 &lt;a href=&quot;https://material.angular.io/components/badge/overview&quot; target=&quot;_blank&quot;&gt;badge&lt;/a&gt; 和 &lt;a href=&quot;https://material.angular.io/components/bottom-sheet/overview&quot; target=&quot;_blank&quot;&gt;bottom-sheet-components&lt;/a&gt;。徽章用于显示小的帮助信息。例如未读项目数量等等，Bottom-sheet  是移动设备专用的对话框，通常用于提供一系列动作的选项。&lt;/p&gt;
&lt;p&gt;@angular/cdk/overlay 是 CDK 中非常有用的包，在新的 v6 版中，其包含新的定位逻辑，以在各种场景下帮助弹出。&lt;/p&gt;
&lt;h2&gt;5. Angular Metarial Starter Components&lt;/h2&gt;
&lt;p&gt;一旦您执行 ng add @angular/metarial 将 Metarial 添加到您的项目中，您将得到 3 个新的 starter 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150447748-1351599348.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Metarial SideNav&lt;/h3&gt;
&lt;p&gt;您现在可以生成一个包含 app 名称的 toolbar 和边栏导航的起步组件。&lt;/p&gt;
&lt;p&gt; 执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ng generate @angular/material:material-nav
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;将会生成这样的起步组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150352760-2104657871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Metarial Dashboard&lt;/h3&gt;
&lt;p&gt;您可以生成一个包含动态表格的卡片列表 。&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ng generate  @angular/material:material-dashboard
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以生成这样的组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150337404-1085395125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Material Data Table&lt;/h3&gt;
&lt;p&gt;您可以生成支持排序、分页的预配置 datasource 的数据表组件。&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ng generate  @angular/material:material-table
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;将会生成这样的组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150315721-1208673182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里查看更多资料：&lt;a href=&quot;http://material.angular.io/guide/schematics&quot; target=&quot;_blank&quot;&gt;Angular Material  Schematics&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;6. CLI Workspaces&lt;/h2&gt;
&lt;p&gt;Angular CLI v6 现在支持包含多个项目的工作空间，比如多个应用或者库。CLI 项目现在将使用 angular.json 来替代 .angular-cli.json 进行配置和构建。&lt;/p&gt;
&lt;p&gt;每个 CLI 可以有多个项目，每个项目有 target, 每个 target 有配置文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
   &lt;/span&gt;&quot;projects&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;&lt;span&gt;my-project-name“： {
             &lt;/span&gt;&quot;projectType&quot;: &quot;application&quot;&lt;span&gt;,
             &lt;/span&gt;&quot;architect&quot;&lt;span&gt;: {
                      &lt;/span&gt;&quot;build&quot;&lt;span&gt;: {
                            &lt;/span&gt;&quot;&lt;span&gt;configurations”: {
                                    &lt;/span&gt;&quot;production&quot;&lt;span&gt;: {},
                                    &lt;/span&gt;&quot;demo&quot;&lt;span&gt;: {},
                                    &lt;/span&gt;&quot;staging&quot;&lt;span&gt;: {},
                                                      }
                                  },
                       &lt;/span&gt;&quot;serve&quot;&lt;span&gt;: {},
                       &lt;/span&gt;&quot;extrace-i18n&quot;&lt;span&gt;: {},
                       &lt;/span&gt;&quot;test&quot;&lt;span&gt;: {},
                              }

                                    },
              &lt;/span&gt;&quot;my-project-name-e2e&quot;&lt;span&gt;: {}
                    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更多信息请参考：&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/angular-workspace&quot; target=&quot;_blank&quot;&gt;新的配置文件&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;7. 库的支持&lt;/h2&gt;
&lt;p&gt;被广泛请求的一个 CLI 特性现在支持了：创建和构建库。我很荣幸介绍它。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ng generate  library &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504150117186-1562237727.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该命令将会在您的 CLI 工作空间创建一个库项目，并配置其测试和构建。&lt;/p&gt;
&lt;p&gt;更多信息请参考：&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot; target=&quot;_blank&quot;&gt;使用 Angular CLI 创建库&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;8. Tree Shakable 提供器&lt;/h2&gt;
&lt;p&gt;为使您的应用尺寸更小，我们从模块引用服务变成了服务引用模块。这使得我们可以仅仅打包模块中注入到代码中的服务。&lt;/p&gt;
&lt;p&gt;以前&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@NgModule({
   ...
   providers: [ MyService ]
})
export class AppModule {}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中，服务的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import { Injectable } from '@angular/core'&lt;span&gt;;

@Injectable()
export class MyService {
   constructor() {}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以后的用法&lt;/p&gt;
&lt;p&gt;不需要在模块中引用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import { Injectable } from '@angular/core'&lt;span&gt;;

@Injectable( {
    &lt;span&gt;providedIn: &lt;/span&gt;&lt;/span&gt;&lt;span&gt;'root'&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;
})
export class MyService {
   constructor() {}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更多信息，参考&lt;a href=&quot;https://angular.io/guide/dependency-injection&quot; target=&quot;_blank&quot;&gt;依赖注入&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;9. 动画性能改进&lt;/h2&gt;
&lt;p&gt;我们已经更新了动画实现，不再需要 &lt;a href=&quot;https://angular.io/guide/browser-support#enabling-polyfills&quot; target=&quot;_blank&quot;&gt;Web animations polyfill&lt;/a&gt;，这意味着您可以从应用中删除这个 polyfill，并节省大约 47K 的打包尺寸，同时提升了在 Safari 中的性能。&lt;/p&gt;
&lt;h2&gt;10. RxJS v6&lt;/h2&gt;
&lt;p&gt;Angular 已经升级到 RxJS v6。RxJS 是 Angular 的一个依赖项，其在几周前正式发布了 v6。RxJS v6 带来了多个重要的更新，还提供了反向兼容库 rxjs-compat，可以保持您的应用继续工作。&lt;/p&gt;
&lt;p&gt;RxJS 进行了重新组织以便于 Tree shakable, 以确保只有用到的 RxJS 部分打包到应用中。&lt;/p&gt;
&lt;p&gt;如果您使用 ng update, 您的应用将会保持工作，您可以&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md&quot; target=&quot;_blank&quot;&gt;从 RxJS 5.5 迁移到 6&lt;/a&gt; 得到更多信息。&lt;/p&gt;
&lt;h2&gt;11. 长期支持&lt;/h2&gt;
&lt;p&gt;我们扩展了我们的长期支持条款到所有主要发布版本。&lt;/p&gt;
&lt;p&gt;以前，我们声明只有 v4-v6 是长期支持的版本。但是为了是的从某个主要版本升级到下一个更加容易，并给予大的项目更多的时间来计划升级，我们决定扩展到支持从 v4 开始的所有主要版本。&lt;/p&gt;
&lt;p&gt;每个主要发布将会支持 18 个月，包括 6 个月的活动开发和 12 个月的关键 bug 修复和安全补丁。&lt;/p&gt;
&lt;p&gt;更多信息可以参考 &lt;a href=&quot;https://update.angular.io/&quot; target=&quot;_blank&quot;&gt;Angular 版本和发布&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;12. 如何更新到 6.0.0&lt;/h2&gt;
&lt;p&gt;访问 &lt;a href=&quot;https://update.angular.io/&quot; target=&quot;_blank&quot;&gt;update.angular.io&lt;/a&gt; 来得到升级应用的信息和指导。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/13475/201805/13475-20180504145814518-407987289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;升级通常包括 3 步，并可以从 ng update 工具获得好处。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;升级 @angular/cli&lt;/li&gt;
&lt;li&gt;升级 Angular 框架包&lt;/li&gt;
&lt;li&gt;升级其它依赖&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;对于我们来说，让开发者保持最新版本的更新特别重要，所以，如果您有什么建议请让我们知道。&lt;/p&gt;
&lt;h2&gt;13. Ivy 怎么样了？&lt;/h2&gt;
&lt;p&gt;关于我们下一代的渲染引擎 Ivy，Ivy 当前处于开发阶段，还不是 v6 的一部分。在随后的几个月，我们将会宣告 Ivy 的一个预览版。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;See Also&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 07:10:00 +0000</pubDate>
<dc:creator>冠军</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haogj/p/8988948.html</dc:identifier>
</item>
<item>
<title>Flask-email 发送邮件的配置，发送附件的方法，以及os.environ.get('MAIL_USERNAME')为None的解决办法 - 听风。</title>
<link>http://www.cnblogs.com/huchong/p/8990610.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huchong/p/8990610.html</guid>
<description>&lt;p&gt;在学习flask-mail来发送电子邮件的时候遇到了一些问题，其实都是些小问题，现在记录下来以便于以后查看。 &lt;/p&gt;
&lt;h2&gt;1、首先flask-mail的安装&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install flask-mail
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2、flask-mail，载入和初始化&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask.ext.mail &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Mail
mail &lt;/span&gt;= Mail(app)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3、flask-mail SMTP邮箱服务器配置&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504144844817-744867940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;配置hotmail邮箱服务器：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
MAIL_SERVER = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.live.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
MAIL_PROT &lt;/span&gt;= 25&lt;span&gt;,
MAIL_USE_TLS &lt;/span&gt;=&lt;span&gt; True,
MAIL_USE_SSL &lt;/span&gt;=&lt;span&gt; False,
MAIL_USERNAME &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_PASSWORD &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_DEBUG &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置qq邮箱服务器：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
MAIL_SERVER = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.qq.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
MAIL_PROT &lt;/span&gt;= 25&lt;span&gt;,
MAIL_USE_TLS &lt;/span&gt;=&lt;span&gt; True,
MAIL_USE_SSL &lt;/span&gt;=&lt;span&gt; False,
MAIL_USERNAME &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_PASSWORD &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_DEBUG &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置126邮箱服务器：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
MAIL_SERVER = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.126.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
MAIL_PROT &lt;/span&gt;= 25&lt;span&gt;,
MAIL_USE_TLS &lt;/span&gt;=&lt;span&gt; True,
MAIL_USE_SSL &lt;/span&gt;=&lt;span&gt; False,
MAIL_USERNAME &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_PASSWORD &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
MAIL_DEBUG &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置163邮箱服务器：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
app.config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_SERVER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.163.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
app.config[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 465&lt;span&gt;
app.config[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_USE_SSL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
app.config[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_USERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = os.environ.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_USERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
app.config[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = os.environ.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这里的端口改为了465，是网易邮箱的配置，在邮箱帮助中可以搜索到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504145011267-1676249734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同时设置MAIL_USE_SSL为True，无需设置MAIL_USE_TSL，默认为False&lt;/p&gt;

&lt;p&gt;其实服务器的配置都是挺简单的，&lt;strong&gt;&lt;span&gt;各个不同邮箱服务器的SMTP配置的不同点就是MAIL_SERVER那里，再就是不同的协议用端口不同，根据自己的配置来设置，&lt;/span&gt;&lt;/strong&gt;如果明明配置正确了都还不可以成功发送邮件，那就得检查一下自己的邮箱账户里边儿有没有把SMTP服务给打开，具体的打开方式就自己百度了哈，都挺简单的事情。&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask.ext.mail &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Mail, Message
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.config.update(
    DEBUG &lt;/span&gt;=&lt;span&gt; True,
    MAIL_SERVER&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;smtp.live.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    MAIL_PROT&lt;/span&gt;=25&lt;span&gt;,
    MAIL_USE_TLS &lt;/span&gt;=&lt;span&gt; True,
    MAIL_USE_SSL &lt;/span&gt;=&lt;span&gt; False,
    MAIL_USERNAME &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;example@hotmail.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    MAIL_PASSWORD &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;**********&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    MAIL_DEBUG &lt;/span&gt;=&lt;span&gt; True
)

mail &lt;/span&gt;=&lt;span&gt; Mail(app)

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; sender 发送方哈，recipients 邮件接收方列表&lt;/span&gt;
    msg = Message(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi!This is a test &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,sender=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example@example.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, recipients=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example@example.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; msg.body 邮件正文 &lt;/span&gt;
    msg.body = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a first email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; msg.attach 邮件附件添加&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; msg.attach(&quot;文件名&quot;, &quot;类型&quot;, 读取文件）&lt;/span&gt;
    with app.open_resource(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F:\2281393651481.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as fp:
        msg.attach(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image/jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, fp.read())

    mail.send(msg)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mail sent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;我们先来看文章&lt;span&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160814115816184&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里讲一下SMTP和POP还有IMAP功能&lt;/p&gt;
&lt;p&gt;这个主要达到的功能就是：可以通过非官方的客户端，来访问邮箱收发邮件&lt;/p&gt;
&lt;p&gt;比如：我用邮箱大师这个软件，可以绑定某个126邮箱，来进行收发邮件&lt;/p&gt;
&lt;p&gt;而POP和IMAP的区别在于，POP的操作，不会同步到服务器上，也就是不会影响到服务器&lt;/p&gt;
&lt;p&gt;而IMAP是和服务器同步的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;然后126设置相关的页面如下&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;特别要注意我附加在页面上的文字，网易会在开通这些功能的时候让你另外设置一个授权码！！这个授权码是当你在使用非网易客户端时，启用pop/smtp/imap几个功能时候的密码！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;也就是说，你用其他软件收发邮件的时候，密码不是你原来那个，而是你的授权码！！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160814122937214&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;也可以在邮箱中把客户端授权密码关闭，直接使用密码发送即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504144739073-401473803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在开发过程中，如果连接到外部SMTP 服务器，则可能更方便。举个例子，示例6-1 展示&lt;br/&gt;了如何配置程序，以便使用Google Gmail 账户发送电子邮件。&lt;br/&gt;示例6-1　hello.py：配置Flask-Mail 使用Gmail&lt;br/&gt;import os&lt;br/&gt;# ...&lt;br/&gt;app.config['MAIL_SERVER'] = 'smtp.126.com'                #&lt;span&gt;这里是设置每个邮箱不同的smtp服务器，由于GMAIL在国内被墙了，所以我这里使用126&lt;/span&gt;&lt;br/&gt;app.config['MAIL_PORT'] = 25                                            #&lt;span&gt;自己百度一下，每个邮箱对应的smtp端口号&lt;/span&gt;&lt;br/&gt;app.config['MAIL_USE_TLS'] = True&lt;br/&gt;app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')   #&lt;span&gt;这里提示，不要将账户和密码写入代码里面，而是设置在环境变量里面读取&lt;/span&gt;&lt;br/&gt;app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;前方大坑.....注意避让&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;保存电子邮件服务器用户名和密码的两个环境变量要在环境中定义。如果你在Linux 或&lt;br/&gt;Mac OS X 中使用bash，那么可以按照下面的方式设定这两个变量：&lt;br/&gt;(venv) $ export MAIL_USERNAME=&amp;lt;Gmail username&amp;gt;&lt;br/&gt;(venv) $ export MAIL_PASSWORD=&amp;lt;Gmail password&amp;gt;&lt;br/&gt;微软Windows 用户可按照下面的方式设定环境变量：&lt;br/&gt;(venv) $ set MAIL_USERNAME=&amp;lt;Gmail username&amp;gt;&lt;br/&gt;(venv) $ set MAIL_PASSWORD=&amp;lt;Gmail password&amp;gt;&lt;/p&gt;

&lt;p&gt;我是windows用户，所以选取第二个选项&lt;/p&gt;
&lt;p&gt;这里的&lt;strong&gt;&lt;span&gt;1号大坑&lt;/span&gt;&lt;/strong&gt;：设置的时候，要把&amp;lt;&amp;gt;去掉，并且！！你的邮箱名和密码，都要用引号括起来，也就是字符串！！！&lt;/p&gt;
&lt;p&gt;后续更新！！！重要更新！！！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在cmd下面，设置环境变量的时候，不需要引号，在powershell下面设置的时候，需要引号！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这里的&lt;strong&gt;&lt;span&gt;2号大坑&lt;/span&gt;&lt;/strong&gt;：set这个设置环境变量的方法，是在&lt;span&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/span&gt;里面的！！我用的是&lt;span&gt;&lt;strong&gt;powershell&lt;/strong&gt;&lt;/span&gt;！！他的语句应该是&lt;/p&gt;
&lt;p&gt;$env:MAIL_USERNAME='xxxxx@126.com'&lt;/p&gt;
&lt;p&gt;$env:MAIL_PASSWORD='这里输密码'&lt;/p&gt;



&lt;p&gt;补一下基础知识！&lt;/p&gt;
&lt;p&gt;因为在cmd里面，查看所有环境变量的命令是set&lt;/p&gt;
&lt;p&gt;而在powershell里面，查看环境变量的命令是ls env:   而设置的方法是   $env: name='variable'    这里的name是添加的变量名字，后面的variable则是变量内容&lt;/p&gt;

&lt;p&gt;这里转载一篇其他前辈的博客，予以参考！！ &lt;span&gt; http://blog.sina.com.cn/s/blog_bfc35a260102vv88.html&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你按照cmd里面的设置环境变量的方法set，那么，你就会碰到授权错误553或者550的信息，如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160814123948332&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;发送邮件的代码如下：&lt;/p&gt;
&lt;p&gt;(venv) $ python hello.py shell&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; from flask.ext.mail import Message&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; from hello import mail&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; msg = Message('test subject', sender='you@example.com',&lt;br/&gt;... recipients=['you@example.com'])&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; msg.body = 'text body'&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; msg.html = '&amp;lt;b&amp;gt;HTML&amp;lt;/b&amp;gt; body'&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; with app.app_context():&lt;br/&gt;... mail.send(msg)&lt;br/&gt;...                                                                    #进行到这里没有报错的话，那就是ok了！！&lt;/p&gt;

&lt;p&gt;我们来看一下测试结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160814124433418&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后我们最后补一下关于cmd下还有powershell下面的环境变量区别&lt;/p&gt;
&lt;p&gt;在powershell下面，你需要用ls env：的命令，才能显示参数&lt;/p&gt;
&lt;p&gt;而设置方法，则是$env :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160814124812828&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 总结&lt;/h2&gt;
&lt;p&gt;在windows下，在PyCharm的Terminal中设置环境变量，不行！！后来，在cmd命令下设置，关闭当前窗口后，就会失效，最关键的问题是在pycharm中无法获取，所以解决方法有两种&lt;/p&gt;
&lt;p&gt;第一种：在我的电脑-右键-属性-高级系统设置-环境变量，将MAIL_USERNAME等设置&lt;/p&gt;
&lt;p&gt;第二种：直接在pycharm中设置，设置后重启pycharm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504144553000-509722217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504144558278-1711068437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1195739/201805/1195739-20180504144606870-1554084672.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/u013753393/article/details/53401717&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/werewolf_st/article/details/46805429&lt;/p&gt;
&lt;p&gt;https://www.oschina.net/translate/the-flask-mega-tutorial-part-xi-email-support?lang=chs&amp;amp;page=1#&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 06:52:00 +0000</pubDate>
<dc:creator>听风。</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huchong/p/8990610.html</dc:identifier>
</item>
<item>
<title>[Other]在 Docker 当中搭建 Docfx 站点 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/8990189.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/8990189.html</guid>
<description>&lt;h2 id=&quot;一简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;Docfx 是微软开发的一款开源的文档生成工具，其默认支持 C# 与 VB.Net 这两种项目的文档生成，支持 DotNetCore 项目，并且还可以打包成一个静态的 Web 站点，而且还支持 markdown 文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://sixlabors.github.io/docs/api/index.html&quot;&gt;这个站点&lt;/a&gt;&lt;/strong&gt;就是 ImageSharp 的 API 文档，可以去参考一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504132437013-547912582.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二安装&quot;&gt;二、安装&lt;/h2&gt;
&lt;h3 id=&quot;下载&quot;&gt;下载&lt;/h3&gt;
&lt;p&gt;Docfx 是即开即用的，他基于 .Net Framework 开发，所以我们可以先在 Windows 平台上面生成 API 文档试一下，DocFx 的下载地址为 &lt;a href=&quot;https://github.com/dotnet/docfx/releases&quot; class=&quot;uri&quot;&gt;https://github.com/dotnet/docfx/releases&lt;/a&gt;，选择最新版本下载即可。&lt;/p&gt;
&lt;h3 id=&quot;设置环境变量&quot;&gt;设置环境变量&lt;/h3&gt;
&lt;p&gt;然后解压其压缩包，因为这是一个命令行程序，所以我们可以将其目录添加到环境变量以便于我们在任何地方来使用。&lt;/p&gt;
&lt;p&gt;按住 Shift 键再点击右键在当前目录弹出 cmd 命令行窗口，输入一下命令:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;setx PATH &quot;%Path%;&amp;lt; 这里是你 docfx.exe 所在的目录&amp;gt;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三使用&quot;&gt;三、使用&lt;/h2&gt;
&lt;h3 id=&quot;初始化基础项目&quot;&gt;初始化基础项目&lt;/h3&gt;
&lt;p&gt;在你需要生成基础项目的文件夹下打开命令行窗口，运行 &lt;code&gt;docfx init -q&lt;/code&gt; 就回在当前目录下生成一个 docfx_project 文件夹，这里面包含了一些基本配置，稍后再讲。&lt;/p&gt;
&lt;h3 id=&quot;生成-api-yml-文件&quot;&gt;生成 API yml 文件&lt;/h3&gt;
&lt;p&gt;docfx 支持为 csproj 与 sln 来生成 API 文档，假如你的库有很多个的话，就可以直接根据 sln 解决方案来生成 API 文档。&lt;/p&gt;
&lt;p&gt;我们来到 API 目录下面，在 csproj 文件所在目录打开命令行窗口，运行 &lt;code&gt;docfx metadata ./api.csproj&lt;/code&gt; 命令就会在这个目录下面生成一个 **_api** 文件夹，这里面会包含大量像这样的 yml 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504125656039-73149399.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将这些文件拷贝到 docfx_project 目录下的 api 文件夹内，编辑 docfx_project 根目录的 toc.yml 文件，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504125915970-1064546349.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里面就是管理 API 站点目录结构的，可以看到这里的每一个以 &lt;code&gt;-&lt;/code&gt; 划分的都是一个节点，也就是在 API 站点顶部导航栏所展示的内容，而 &lt;code&gt;href&lt;/code&gt; 则是该导航栏指向的文档目录路径。&lt;code&gt;homepage&lt;/code&gt; 则是首页的 markdown 文件。&lt;/p&gt;
&lt;p&gt;如果你有一些自定义的文档则可以在这里添加目录结构。&lt;/p&gt;
&lt;h3 id=&quot;构建-api-站点&quot;&gt;构建 API 站点&lt;/h3&gt;
&lt;p&gt;文件这些已经准备就绪，原始的站点文档都以 yml 文件与 md 文件为主，我们可以通过调用 &lt;code&gt;docfx ./docfx.json&lt;/code&gt; 命令来将这些文件构建成一个静态的 html 站点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504130650805-1231805303.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;预览-api-站点&quot;&gt;预览 API 站点&lt;/h3&gt;
&lt;p&gt;如果我们想查看效果的话，可以在 docfx_project 目录执行 &lt;code&gt;docfx serve ./_site&lt;/code&gt; 命令，它将会开启一个服务器，你也可以通过 &lt;code&gt;-p&lt;/code&gt; 参数来指定自己的端口，例如 &lt;code&gt;docfx serve ./_site -p 5000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504130820410-1470510463.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四部署&quot;&gt;四、部署&lt;/h2&gt;
&lt;p&gt;如果只是自己看就没什么用了，那么我们还可以通过 Docker 来将我们的站点部署到服务器上，如何来做呢？大致思路就是一个 docker 镜像生成 &lt;code&gt;_site&lt;/code&gt; 文件夹，一个镜像来做 Web 服务器承载站点。&lt;/p&gt;
&lt;h3 id=&quot;制作镜像&quot;&gt;制作镜像&lt;/h3&gt;
&lt;h4 id=&quot;文档生成镜像-doc_generator&quot;&gt;1.文档生成镜像 doc_generator&lt;/h4&gt;
&lt;p&gt;那么我们首先来编写生成 docker 镜像的 Dockerfile 文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode dockerfile&quot;&gt;
&lt;code class=&quot;sourceCode dockerfile&quot;&gt;&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; mono:latest
&lt;span class=&quot;kw&quot;&gt;WORKDIR&lt;/span&gt; /work
&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; ./ .
&lt;span class=&quot;co&quot;&gt;# 构建 API 站点&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;RUN&lt;/span&gt; mono /work/docfx/docfx.exe /work/docfx.json \
    &amp;amp;&amp;amp; mkdir /app
&lt;span class=&quot;kw&quot;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;cp&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;-r&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;/work/_site/*&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;/app&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行 &lt;code&gt;docker build -t doc_generator .&lt;/code&gt; 命令生成了一个 doc_generator 镜像。&lt;/p&gt;
&lt;h4 id=&quot;web-服务器镜像-nginx&quot;&gt;2.Web 服务器镜像 nginx&lt;/h4&gt;
&lt;p&gt;这里 Web 服务器镜像并不需要特别的定制，直接使用 nginx 的默认镜像就可以了。&lt;/p&gt;
&lt;h3 id=&quot;运行镜像&quot;&gt;运行镜像&lt;/h3&gt;
&lt;p&gt;那么我们来编写一个 Shell 运行我们的镜像:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;#!/bin/bash
docker run -dti -v /temp/document_html:/app --name=doc_generator doc_generator
# 移动文件，更改文件目录结构
cp -r /temp/document_html/_site/* /temp/document_html
docker run --name=doc_nginx -d -p 20001:80 -v /temp/document_html:/usr/share/nginx/html nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行脚本之后查看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201805/1203160-20180504131923230-1559646288.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;五后记&quot;&gt;五、后记&lt;/h2&gt;
&lt;p&gt;结合 Jenkins 等 CI 你可以实现自动增量更新，这里就不再赘述了。&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 05:23:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/8990189.html</dc:identifier>
</item>
<item>
<title>解决 RabbitMQ 集群 Channel shutdown: connection error 错误（HAProxy 负载均衡） - 田园里的蟋蟀</title>
<link>http://www.cnblogs.com/xishuai/p/rabbitmq-and-haproxy-channel-shutdown-connection-error.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xishuai/p/rabbitmq-and-haproxy-channel-shutdown-connection-error.html</guid>
<description>&lt;p&gt;相关文章：&lt;a href=&quot;http://www.cnblogs.com/xishuai/p/centos-rabbitmq-cluster-and-haproxy.html&quot;&gt;搭建 RabbitMQ Server 高可用集群&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201805/435188-20180504112534642-1346775059.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体错误信息：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:48.116 ERROR 60848 --- [.168.0.202:8001] o.s.a.r.c.CachingConnectionFactory       : Channel shutdown: connection error
&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:48.116 ERROR 60848 --- [.168.0.202:8001] o.s.a.r.c.CachingConnectionFactory       : Channel shutdown: connection error
&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:48.125  INFO 60848 --- [nge.consumer1-8] o.s.a.r.l.SimpleMessageListenerContainer : Restarting Consumer@5196e177: tags=[&lt;span class=&quot;dt&quot;&gt;{amq.ctag-d_wIlZIGxM3f0fsxkmYQfA=my_test_exchange.consumer1}&lt;/span&gt;], channel=Cached Rabbit Channel: AMQChannel(amqp://admin@192.168.0.202:8001/,1), &lt;span class=&quot;kw&quot;&gt;conn&lt;/span&gt;: Proxy@25a73de1 Shared Rabbit Connection: SimpleConnection@25fca927 [delegate=amqp://admin@192.168.0.202:8001/, localPort= 56258], acknowledgeMode=AUTO local queue size=0
&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:48.126  INFO 60848 --- [nge.consumer1-9] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [manager1:8001]
&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:48.393  INFO 60848 --- [nge.consumer1-9] o.s.a.r.c.CachingConnectionFactory       : Created new connection: rabbitConnectionFactory#2b8bd14b:12/SimpleConnection@3fb9795a [delegate=amqp://admin@192.168.0.202:8001/, localPort= 56260]
&lt;span class=&quot;kw&quot;&gt;2018-05-04&lt;/span&gt; 11:21:49.059  INFO 60848 --- [nge.consumer1-8] o.s.a.r.l.SimpleMessageListenerContainer : Restarting Consumer@58b42519: tags=[&lt;span class=&quot;dt&quot;&gt;{amq.ctag-T1HyrOd5Ykr_VQZDwxRslA=stream_exchange.consumer1}&lt;/span&gt;], channel=Cached Rabbit Channel: AMQChannel(amqp://admin@192.168.0.202:8001/,2), &lt;span class=&quot;kw&quot;&gt;conn&lt;/span&gt;: Proxy@25a73de1 Shared Rabbit Connection: SimpleConnection@3fb9795a [delegate=amqp://admin@192.168.0.202:8001/, localPort= 56260], acknowledgeMode=AUTO local queue size=0&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Spring Boot 配置 RabbitMQ（使用 HAProxy 负载均衡）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;spring:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;application:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;name:&lt;/span&gt; stream-rabbitmq-producer
  &lt;span class=&quot;fu&quot;&gt;rabbitmq:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;host:&lt;/span&gt; manager1
    &lt;span class=&quot;fu&quot;&gt;port:&lt;/span&gt; 8001
    &lt;span class=&quot;fu&quot;&gt;username:&lt;/span&gt; admin
    &lt;span class=&quot;fu&quot;&gt;password:&lt;/span&gt; admin123456&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最近使用 RabbitMQ 集群的时候（HAProxy 负载均衡），频繁的出现上面错误信息，但是消息可以正常被消费掉，如果只使用单机版 RabbitMQ 的话（不使用 HAProxy），是没有任何错误的。&lt;/p&gt;
&lt;p&gt;被这个问题困扰了很久，Google 找了很多资料，也没有找到解决方案，无意间找到一篇文章：&lt;a href=&quot;https://deviantony.wordpress.com/2014/10/30/rabbitmq-and-haproxy-a-timeout-issue/&quot;&gt;RabbitMQ and HAProxy: a timeout issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章说，如果使用 HAProxy 配置 RabbitMQ 高可用集群的话，则会遇到客户端连接超时问题。&lt;/p&gt;
&lt;p&gt;为什么会出现此问题呢？因为 HAProxy 配置了客户端连接超时参数（&lt;code&gt;timeout client ms&lt;/code&gt;），如果客户端连接超过配置的此参数，那么 HAProxy 将会删除这个客户端连接。&lt;/p&gt;
&lt;p&gt;RabbitMQ 客户端使用永久连接到代理，从不超时，那为什么还会出现问题？&lt;strong&gt;因为如果 RabbitMQ 在一段时间内处于非活动状态，那么 HAProxy 将自动关闭连接（有点坑呀😂）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那如何解决这个问题呢？我们看到 HAProxy 提供了一个&lt;code&gt;clitcpka&lt;/code&gt;参数配置，它可以从客户端发送&lt;code&gt;TCP keepalive&lt;/code&gt;数据包。&lt;/p&gt;
&lt;p&gt;我们就使用它，但发现配置了之后，还是出现了上面的问题。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;[…]the exact behaviour of tcp keep-alive is determined by the underlying OS/Kernel configuration[…]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么意思？意思就是&lt;code&gt;TCP keepalive&lt;/code&gt;数据包的发送，取决于操作系统/内核配置。&lt;/p&gt;
&lt;p&gt;我们可以使用命令查看（HAProxy 所在服务器中的&lt;code&gt;tcp_keepalive_time&lt;/code&gt;配置）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@manager1&lt;/span&gt; ~]# cat /proc/sys/net/ipv4/tcp_keepalive_time
&lt;span class=&quot;kw&quot;&gt;7200&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tcp_keepalive_time&lt;/code&gt;默认配置时间 2 个小时，表示发送&lt;code&gt;TCP keepalive&lt;/code&gt;数据包的间隔时间是 2 个小时，或者说每隔 2 个小时发送&lt;code&gt;TCP keepalive&lt;/code&gt;数据包。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;这么说就清楚了吧，虽然我们在 HAProxy 中，配置了&lt;code&gt;clitcpka&lt;/code&gt;参数，但因为系统发送&lt;code&gt;TCP keepalive&lt;/code&gt;数据包的间隔时间过长，远远超过 HAProxy 中的 &lt;code&gt;timeout client&lt;/code&gt;超时时间（默认好像是 2 秒），所以客户端连接每隔 2 秒，就被 HAProxy 无情的给删除掉，然后不断的被重建。&lt;/p&gt;
&lt;p&gt;说了那么多，我们该怎么解决此问题呢？&lt;/p&gt;
&lt;p&gt;两种方案：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修改系统的&lt;code&gt;tcp_keepalive_time&lt;/code&gt;配置，间隔时间低于 HAProxy 配置的&lt;code&gt;timeout client&lt;/code&gt;超时时间（因为有可能影响其他系统服务，不推荐）。&lt;/li&gt;
&lt;li&gt;修改 HAProxy 中的&lt;code&gt;timeout client&lt;/code&gt;超时时间，配置大于系统的&lt;code&gt;tcp_keepalive_time&lt;/code&gt;间隔时间（推荐）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为系统&lt;code&gt;tcp_keepalive_time&lt;/code&gt;发送&lt;code&gt;TCP keepalive&lt;/code&gt;数据包间隔时间是 2 个小时，所以，我们将 HAProxy 中的&lt;code&gt;timeout client&lt;/code&gt;超时时间，设置为 3 个小时：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; client  3h
&lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; server  3h&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整示例配置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;root@manager1&lt;/span&gt; ~]# cat /etc/haproxy/haproxy.cfg
&lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;     127.0.0.1  local0 info
&lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;     127.0.0.1  local1 notice
    &lt;span class=&quot;kw&quot;&gt;daemon&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;maxconn&lt;/span&gt; 4096

&lt;span class=&quot;kw&quot;&gt;defaults&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;     global
    &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;    tcp
    &lt;span class=&quot;kw&quot;&gt;option&lt;/span&gt;  tcplog
    &lt;span class=&quot;kw&quot;&gt;option&lt;/span&gt;  dontlognull
    &lt;span class=&quot;kw&quot;&gt;retries&lt;/span&gt; 3
    &lt;span class=&quot;kw&quot;&gt;option&lt;/span&gt;  abortonclose
    &lt;span class=&quot;kw&quot;&gt;maxconn&lt;/span&gt; 4096
    &lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; connect  5000ms
    &lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; client  3000ms
&lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; server  3000ms
    &lt;span class=&quot;kw&quot;&gt;balance&lt;/span&gt; roundrobin

&lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt; private_monitoring
    &lt;span class=&quot;kw&quot;&gt;bind&lt;/span&gt;    0.0.0.0:8000
    &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;    http
    &lt;span class=&quot;kw&quot;&gt;option&lt;/span&gt;  httplog
    &lt;span class=&quot;kw&quot;&gt;stats&lt;/span&gt;   refresh  5s
    &lt;span class=&quot;kw&quot;&gt;stats&lt;/span&gt;   uri  /stats
    &lt;span class=&quot;kw&quot;&gt;stats&lt;/span&gt;   realm   Haproxy
    &lt;span class=&quot;kw&quot;&gt;stats&lt;/span&gt;   auth  admin:admin

&lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt; rabbitmq_admin
    &lt;span class=&quot;kw&quot;&gt;bind&lt;/span&gt;    0.0.0.0:8002
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager1 manager1:15672
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager2 manager2:15672
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager3 manager3:15672

&lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt; rabbitmq_cluster
    &lt;span class=&quot;kw&quot;&gt;bind&lt;/span&gt;    0.0.0.0:8001
    &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;    tcp
    &lt;span class=&quot;kw&quot;&gt;option&lt;/span&gt;  tcplog
    &lt;span class=&quot;kw&quot;&gt;balance&lt;/span&gt; roundrobin
    &lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; client  3h
    &lt;span class=&quot;kw&quot;&gt;timeout&lt;/span&gt; server  3h
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager1  manager1:5672  check  inter  5000  rise  2  fall  3
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager2  manager2:5672  check  inter  5000  rise  2  fall  3
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;  manager3  manager3:5672  check  inter  5000  rise  2  fall  3&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新运行 HAProxy，然后 RabbitMQ 测试成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201805/435188-20180504120731895-1082229539.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 04 May 2018 04:10:00 +0000</pubDate>
<dc:creator>田园里的蟋蟀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xishuai/p/rabbitmq-and-haproxy-channel-shutdown-connection-error.html</dc:identifier>
</item>
<item>
<title>数据分析怎么更直观？十分钟构建数据看板 - 网易云</title>
<link>http://www.cnblogs.com/163yun/p/8989873.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/163yun/p/8989873.html</guid>
<description>&lt;p&gt;本文由 &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;a href=&quot;https://www.163yun.com/?tag=M_cnblogs_8989873&quot; target=&quot;_blank&quot;&gt;网易云&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/a&gt;发布。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;作者：王文开（本篇文章仅限知乎内部分享，如需转载，请取得作者同意授权。）&lt;/p&gt;
&lt;p&gt;要说整车厂的核心业务是什么，说白了就是两个：一个是造车，一个是卖车；我今天想来聊一聊卖车，也就是整车厂的销售业务。&lt;/p&gt;

&lt;p&gt;目前中国的汽车销售模式都是通过经销商的（暂时不考虑那些垂直的汽车电商，不是本文的重点），普通的个人客户是没法直接向整车厂订购车辆，都是通过4S店的渠道进行购买；这也就是说整车厂需要先把车卖给经销商（批售），经销商再把车卖给个人客户（零售）；对于整车厂来说，前者相当于是整车批售，后者就是整车零售；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113439261-61745458.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般来说，品牌的销售部门会将全国分为几个销售大区，每个大区一般包含几个省份、大区下一层级就是小区，小区一般是城市级别，然后就是到经销商；所以是三层的结构：大区-小区-经销商&lt;/p&gt;

&lt;p&gt;言归正传，假设销售部门的领导提出一个需求，希望提供一个汽车销售情况的仪表盘，其他什么细节需求都没讲（领导嘛，讲讲大方向就行了，剩下的就靠我等屁民自己揣摩了），那现在我们就来看看，如何在10分钟内快速的构建出一个有价值汽车销售看板；&lt;/p&gt;

&lt;p&gt;在动手做之前，我们还是得以目标为导向，花写时间思考一下，究竟这张仪表盘能给到业务什么价值？我总结有以下几点：&lt;/p&gt;

&lt;p&gt;1、发现问题：希望能够一目了然的发现销售业务的异常情况&lt;/p&gt;
&lt;p&gt;2、定位问题：希望能够定位到问题&lt;/p&gt;
&lt;p&gt;3、解决问题：希望能从中制定出解决方案&lt;/p&gt;
&lt;p&gt;4、验证问题：解决方案实施后，能够从数据变化来判断业务是否已经恢复正常。&lt;/p&gt;
&lt;p&gt;所以这四个步骤应该是一个闭环的过程，那现在就朝着这个目标开始做吧。&lt;/p&gt;

&lt;p&gt;首先，我假设当前日期是2017.1.22，我想看一下本月的零售完成情况；&lt;/p&gt;

&lt;p&gt;1、发现问题：&lt;/p&gt;
&lt;p&gt;首先展示一些核心的指标：MTD销量（月累计）、月目标和月完成率。&lt;/p&gt;

&lt;p&gt;那光看完成率有意义吗？一个很简单的想法，就是和时间赛跑；所谓时间过半，任务完成情况也应该过半吧；很明显，当该月的完成率已经落后时间进度时，指标就会变成红色；一眼就能看出目前业务肯定发生了异常；也就是我们发现了问题；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113455308-750138823.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、定位问题&lt;/p&gt;
&lt;p&gt;那发现问题后，我们就要开始着手定位问题。首先我们想看一下各个大区的销售情况怎么样，如下图&lt;/p&gt;

&lt;p&gt;左半部分展现了每个销售大区本月销售台次和本月的目标；&lt;/p&gt;
&lt;p&gt;右半部分展现了每个大区完成率和时间进度轴的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113503423-333029783.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很明显，一眼就能看出，除了销售2区的进度是超过时间进度外，其余的都没有达标，尤其是销售1区和销售4区，落后的好多。&lt;/p&gt;
&lt;p&gt;而且，我们之前提到过，我们全国是有层级的，那可以通过聚焦下钻的功能，看出到底是哪些城市和哪些经销商出现了问题。从而我们定位到了问题所在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113518626-985474304.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.解决问题&lt;/p&gt;
&lt;p&gt;既然要制定解决方案，我们需要再多一些分析；下图是一张散点图，主要是&lt;/p&gt;
&lt;p&gt;表现每个城市本月的销售情况（是否达标），以及自己和自己去年同期比较，是否有增长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113528134-1145554451.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这样一来，就可以把所有的城市分为了4个象限&lt;/p&gt;

&lt;p&gt;1、优质区域：这个象限中的城市本月进度达标，而且同比又是增长的，所以需要继续保持；&lt;/p&gt;
&lt;p&gt;2、异常区域：这个区域中的城市本月进度都达标了，但是和去年同期比，销量却同比下降了，这说明是不是销量目标定得有点低了？是不是要多Push点压力给到这些城市；&lt;/p&gt;
&lt;p&gt;4、异常区域：这个区域中的城市同比增长，但本月却没有达标；那需要看一下是不是目标定得有些高了；&lt;/p&gt;
&lt;p&gt;3、重点关注区域：这个区域里面的城市就很有问题了，本月既没有达标，同比也是下降的，所以都是拖后腿的城市，需要重点关注；同样，这张图还可以通过城市下钻到经销商，去看经销商的分布情况。&lt;/p&gt;

&lt;p&gt;此外，我们还可以关注以下区域经理和4S店的排名情况；下图右半部分可以看出全国大多数的经销商都没有达标；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113540031-2137296375.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还可以通过自定义区域地图来从看一下全国的销售分布情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113549495-1602512070.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后可以展现一些明细的表格，作为数据的导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113600626-705171395.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过以上的一些分析，我们为解决问题找到了很多思路，我们找到了问题的城市和经销商，发现了可能导致问题的原因；并且通过对销售经理的排名可以看出其业绩的表现，这样就制定了以下几点的解决方案：&lt;/p&gt;

&lt;p&gt;1、重新Review一下销量目标制定的情况，是否符合当地的实情。比如当地是否出台了相关限购政策等。&lt;/p&gt;
&lt;p&gt;2、对问题城市和经销进行进一步的跟进，派出人员现场调研；是否4S点接待出了问题？是否销售顾问跟进不及时？&lt;/p&gt;
&lt;p&gt;3、进一步继续分析一下具体是哪些车型发生的问题，从而调整相应的市场活动策略和广告投放策略...&lt;/p&gt;

&lt;p&gt;4、验证问题&lt;/p&gt;
&lt;p&gt;通过对这些解决措施的实施，可以通过报表的数据变化来验证是否有效，来观察业务是否回归到了正常；&lt;/p&gt;

&lt;p&gt;通过以上分析的几张图表，就可以构建出一张有价值的汽车销售仪表盘了。完整的看板如下，可以通过设置图表联动进行关联分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201805/1253350-20180504113613125-616536375.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PS：本文中的所有图表通过网易有数完成；&lt;/p&gt;

&lt;p&gt;想要创建数据看板，请猛戳&lt;a class=&quot; wrap external&quot; href=&quot;https://bigdata.163yun.com/youdata?channel=M_cnblogs_8989873&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;网易有数 - 网易大数据|专业的私有化大数据平台&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;了解 网易云 ：&lt;br data-filtered=&quot;filtered&quot;/&gt;
网易云官网：&lt;a href=&quot;https://www.163yun.com/?tag=M_cnblogs_8989873&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/&lt;/a&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;
新用户大礼包：&lt;a href=&quot;https://www.163yun.com/gift?tag=M_cnblogs_8989873&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/gift&lt;/a&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;
网易云社区：&lt;a href=&quot;https://sq.163yun.com/?tag=M_cnblogs_8989873&quot; target=&quot;_blank&quot;&gt;https://sq.163yun.com/&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 04 May 2018 03:38:00 +0000</pubDate>
<dc:creator>网易云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/163yun/p/8989873.html</dc:identifier>
</item>
</channel>
</rss>