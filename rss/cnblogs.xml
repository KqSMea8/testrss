<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JVM 线上故障排查基本操作 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9062196.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9062196.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4236553-630b33e7ec7b87dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;# 前言&lt;/h2&gt;
&lt;p&gt;对于后端程序员，特别是 Java 程序员来讲，排查线上问题是不可避免的。各种 CPU 飚高，内存溢出，频繁 GC 等等，这些都是令人头疼的问题。楼主同样也遇到过这些问题，那么，遇到这些问题该如何解决呢？&lt;/p&gt;
&lt;p&gt;首先，出现问题，肯定要先定位问题所在，然后分析问题原因，再然后解决问题，最后进行总结，防止下次再次出现。&lt;/p&gt;
&lt;p&gt;今天的文章，就如我们的题目一样，讲的是基本操作，也就是一些排查线上问题的基本方法。为什么这么说呢？因为线上问题千奇百怪，就算是身经百战的专家也会遇到棘手的问题，因此不可能在一篇文章里说完，还有一个最重要的原因，当然就是楼主的水平不到位。&lt;/p&gt;
&lt;p&gt;但不到位归不到位，任何经验都是值得记录的，因此，楼主有必要将这些问题记录一下。&lt;/p&gt;
&lt;p&gt;还有，本文的排查环境是 Linux.&lt;/p&gt;
&lt;h2 id=&quot;cpu-飚高&quot;&gt;#1. CPU 飚高&lt;/h2&gt;
&lt;p&gt;线上 CPU 飚高问题大家应该都遇到过，那么如何定位问题呢？&lt;/p&gt;
&lt;p&gt;思路：首先找到 CPU 飚高的那个 Java 进程，因为你的服务器会有多个 JVM 进程。然后找到那个进程中的 “问题线程”，最后根据线程堆栈信息找到问题代码。最后对代码进行排查。&lt;/p&gt;
&lt;p&gt;如何操作呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过 top 命令找到 CPU 消耗最高的进程，并记住进程 ID。&lt;/li&gt;
&lt;li&gt;再次通过 top -Hp [进程 ID] 找到 CPU 消耗最高的线程 ID，并记住线程 ID.&lt;/li&gt;
&lt;li&gt;通过 JDK 提供的 jstack 工具 dump 线程堆栈信息到指定文件中。具体命令：jstack -l [进程 ID] &amp;gt;jstack.log。&lt;/li&gt;
&lt;li&gt;由于刚刚的线程 ID 是十进制的，而堆栈信息中的线程 ID 是16进制的，因此我们需要将10进制的转换成16进制的，并用这个线程 ID 在堆栈中查找。使用 printf &quot;%x\n&quot; [十进制数字] ，可以将10进制转换成16进制。&lt;/li&gt;
&lt;li&gt;通过刚刚转换的16进制数字从堆栈信息里找到对应的线程堆栈。就可以从该堆栈中看出端倪。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;从楼主的经验来看，一般是某个业务死循环没有出口，这种情况可以根据业务进行修复。还有 C2 编译器执行编译时也会抢占 CPU，什么是 C2编译器呢？当 Java 某一段代码执行次数超过10000次（默认）后，就会将该段代码从解释执行改为编译执行，也就是编译成机器码以提高速度。而这个 C2编译器就是做这个的。如何解决呢？项目上线后，可以先通过压测工具进行预热，这样，等用户真正访问的时候，C2编译器就不会干扰应用程序了。如果是 GC 线程导致的，那么极有可能是 Full GC ，那么就要进行 GC 的优化。&lt;/p&gt;
&lt;h2 id=&quot;内存问题排查&quot;&gt;2. 内存问题排查&lt;/h2&gt;
&lt;p&gt;说完了 CPU 的问题排查，再说说内存的排查，通常，内存的问题就是 GC 的问题，因为 Java 的内存由 GC 管理。有2种情况，一种是内存溢出了，一种是内存没有溢出，但 GC 不健康。&lt;/p&gt;
&lt;p&gt;内存溢出的情况可以通过加上 -XX:+HeapDumpOnOutOfMemoryError 参数，该参数作用是：在程序内存溢出时输出 dump 文件。&lt;/p&gt;
&lt;p&gt;有了 dump 文件，就可以通过 dump 分析工具进行分析了，比如常用的MAT，Jprofile，jvisualvm 等工具都可以分析，这些工具都能够看出到底是哪里溢出，哪里创建了大量的对象等等信息。&lt;/p&gt;
&lt;p&gt;第二种情况就比较复杂了。GC 的健康问题。&lt;/p&gt;
&lt;p&gt;通常一个健康的 GC 是什么状态呢？根据楼主的经验，YGC 5秒一次左右，每次不超过50毫秒，FGC 最好没有，CMS GC 一天一次左右。&lt;/p&gt;
&lt;p&gt;而 GC 的优化有2个维度，一是频率，二是时长。&lt;/p&gt;
&lt;p&gt;我们看YGC，首先看频率，如果 YGC 超过5秒一次，甚至更长，说明系统内存过大，应该缩小容量，如果频率很高，说明 Eden 区过小，可以将 Eden 区增大，但整个新生代的容量应该在堆的 30% - 40%之间，eden，from 和 to 的比例应该在 8：1：1左右，这个比例可根据对象晋升的大小进行调整。&lt;/p&gt;
&lt;p&gt;如果 YGC 时间过长呢？YGC 有2个过程，一个是扫描，一个是复制，通常扫描速度很快，复制速度相比而言要慢一些，如果每次都有大量对象要复制，就会将 STW 时间延长，还有一个情况就是 StringTable ，这个数据结构中存储着 String.intern 方法返回的常连池的引用，YGC 每次都会扫描这个数据结构（HashTable），如果这个数据结构很大，且没有经过 FGC，那么也会拉长 STW 时长，还有一种情况就是操作系统的虚拟内存，当 GC 时正巧操作系统正在交换内存，也会拉长 STW 时长。&lt;/p&gt;
&lt;p&gt;再来看看FGC，实际上，FGC 我们只能优化频率，无法优化时长，因为这个时长无法控制。如何优化频率呢？&lt;/p&gt;
&lt;p&gt;首先，FGC 的原因有几个，1 是 Old 区内存不够，2 是元数据区内存不够，3 是 System.gc()， 4 是 jmap 或者 jcmd，5 是CMS Promotion failed 或者 concurrent mode failure，6 JVM 基于悲观策略认为这次 YGC 后 Old 区无法容纳晋升的对象，因此取消 YGC，提前 FGC。&lt;/p&gt;
&lt;p&gt;通常优化的点是 Old 区内存不够导致 FGC。如果 FGC 后还有大量对象，说明 Old 区过小，应该扩大 Old 区，如果 FGC 后效果很好，说明 Old 区存在了大量短命的对象，优化的点应该是让这些对象在新生代就被 YGC 掉，通常的做法是增大新生代，如果有大而短命的对象，通过参数设置对象的大小，不要让这些对象进入 Old 区，还需要检查晋升年龄是否过小。如果 YGC 后，有大量对象因为无法进入 Survivor 区从而提前晋升，这时应该增大 Survivor 区，但不宜太大。&lt;/p&gt;
&lt;p&gt;上面说的都是优化的思路，我们也需要一些工具知道 GC 的状况。&lt;/p&gt;
&lt;p&gt;JDK 提供了很多的工具，比如 jmap ，jcmd 等，oracle 官方推荐使用 jcmd 代替 jmap，因为 jcmd 确实能代替 jmap 很多功能。jmap 可以打印对象的分布信息，可以 dump 文件，注意，jmap 和 jcmd dump 文件的时候会触发 FGC ，使用的时候注意场景。&lt;/p&gt;
&lt;p&gt;还有一个比较常用的工具是 jstat，该工具可以查看GC 的详细信息，比如eden ，from，to，old 等区域的内存使用情况。&lt;/p&gt;
&lt;p&gt;还有一个工具是 jinfo，该工具可以查看当前 jvm 使用了哪些参数，并且也可以在不停机的情况下修改参数。&lt;/p&gt;
&lt;p&gt;包括我们上面说的一些分析 dump 文件的可视化工具，MAT，Jprofile，jvisualvm 等，这些工具可以分析 jmap dump 下来的文件，看看哪个对象使用的内存较多，通常是能够查出问题的。&lt;/p&gt;
&lt;p&gt;还有很重要的一点就是，线上环境一定要带上 GC 日志！！！&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;基于文章的标题，我们这个是基本操作，故障排查是说不完的话题，每个故障涉及的知识也都很多，因此，我们在学习了基本的排查之后，还需要学习更多事故排查技术，比如排查 IO，网络，TCP 连接等等。楼主将在后面的文章中将这些基本操作都记录下来。&lt;/p&gt;
&lt;p&gt;good luck！！！！&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 16:01:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9062196.html</dc:identifier>
</item>
<item>
<title>linux，windows下检测指定的IP地址是否可用或者检测IP地址冲突的3种方式（批处理程序，python程序，linux shell 批量ping） - 我是某某某是我</title>
<link>http://www.cnblogs.com/LiuBingBlogs/p/9054035.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiuBingBlogs/p/9054035.html</guid>
<description>&lt;p&gt;本文中的脚本适用范围：&lt;/p&gt;
&lt;p&gt;1）检测某些IP地址是否被占用；&lt;/p&gt;
&lt;p&gt;2）检测网络中某些设备是否存活；&lt;/p&gt;
&lt;p&gt;3）在分配新的ip地址之前，批量检测环境中是否存在冲突的机器&lt;/p&gt;
&lt;p&gt;以上检测基于ICMP Ping报文，要求所有的设备允许Ping，设备开通禁止ICMP策略，防火墙禁止ICMP报文等情况不在本文的考虑范围之内。&lt;/p&gt;
&lt;p&gt;不多说，上代码：&lt;/p&gt;
&lt;p&gt;(一)windows 批处理脚本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;::autor lb
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; ::&lt;span&gt;date&lt;/span&gt; 2018 05
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@echo&lt;/span&gt; &lt;span&gt;off&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;::&lt;/span&gt;&lt;span&gt;屏显当前的测试时间并输出到测试结果（详细日志和结果日志）&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %&lt;span&gt;date&lt;/span&gt;% %&lt;span&gt;time&lt;/span&gt;&lt;span&gt;%
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;::&lt;/span&gt;&lt;span&gt;每次执行脚本时都要先删除日志&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;del&lt;/span&gt; %&lt;span&gt;cd&lt;/span&gt;%\IpCheckerDetailLog.&lt;span&gt;txt 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;del&lt;/span&gt; %&lt;span&gt;cd&lt;/span&gt;%\IpCheckerResLog.&lt;span&gt;txt 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %&lt;span&gt;date&lt;/span&gt;% %&lt;span&gt;time&lt;/span&gt;% &amp;gt;&amp;gt;IpCheckerDetailLog.&lt;span&gt;txt
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %&lt;span&gt;date&lt;/span&gt;% %&lt;span&gt;time&lt;/span&gt;%  &amp;gt;&amp;gt;IpCheckerResLog.&lt;span&gt;txt
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; IpCheckerResult &amp;gt;&amp;gt;IpCheckerResLog.&lt;span&gt;txt
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;::&lt;/span&gt;&lt;span&gt;for循环执行ping命令，每次循环都会从制定的文件中读取ip地址进行ping操作，ping count=1,timeout=1ms,每次Ping结果都会重定向到详细日志文件&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; /a avaNum=0
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; /a unReaccNum=0
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; /f &quot;delims=&quot; %%i in (ip.txt) &lt;span&gt;do&lt;/span&gt; (
&lt;span&gt;18&lt;/span&gt; Ping.exe -n 1 -w 1 %%i &amp;gt;&amp;gt; IpCheckerDetailLog.&lt;span&gt;txt
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;errorlevel&lt;/span&gt; 1 ( &lt;span&gt;echo&lt;/span&gt;&lt;span&gt; %%i            is avaliable
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %%i            is avaliable &amp;gt;&amp;gt; IpCheckerResLog.&lt;span&gt;txt
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; /a avaNum+=1 ) &lt;span&gt;else&lt;/span&gt; ( &lt;span&gt;echo&lt;/span&gt;&lt;span&gt; %%i            is unreachable[Warning] 
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; /a unReaccNum+=1
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %%i            is unreachable[Warning]  &amp;gt;&amp;gt; IpCheckerResLog.txt )
&lt;span&gt;24&lt;/span&gt; )
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; /a Total=%avaNum% +&lt;span&gt; %unReaccNum%
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt;&lt;span&gt; Total Count:%Total%
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; %avaNum% avaliable;&lt;span&gt;    %unReaccNum% unreachable!
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;pause&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;测试如下：&lt;/p&gt;
&lt;p&gt;　创建ip.txt，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1346188/201805/1346188-20180518010219729-1154115962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;执行脚本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1346188/201805/1346188-20180518010744284-701522771.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （二） Windows Python脚本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!windows 64 python3.6.5&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Ip检测脚本&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; author lb&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; time 2018 05&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; SrcFileName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ip.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; CurT = datetime.datetime.now().strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%m%d_%H%M%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; CurTInLog = datetime.datetime.now().strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; LogFileName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s_LogDetail.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; CurT;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; ResFileName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s_Res.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; CurT;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; IpOkNum=&lt;span&gt;0;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; IpFailNum=&lt;span&gt;0;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建详细日志文件&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; LogFp = open(LogFileName, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; LogFp.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PingTestDetailLog\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;LogFp.write(CurTInLog);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建结果日志文件&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; ResFp = open(ResFileName, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; ResFp.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PingTestResult\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;ResFp.write(CurTInLog);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 打开ip文件&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; SrcFp = open(SrcFileName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; ip &lt;span&gt;in&lt;/span&gt;&lt;span&gt; SrcFp:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(ip)&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     cmd = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ping -n 1 -w 1 %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; ip;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     ret =&lt;span&gt; os.popen(cmd);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     strRet=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; ret.read();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    LogFp.write( strRet);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(strRet)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找到了TTL关键字，证明ping通&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;  strRet.find(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TTL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != -1 &lt;span&gt;or&lt;/span&gt; strRet.find(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;丢失 = 0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         strok=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s Is Reachable \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; ip;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(strok);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        ResFp.write(strok);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         IpOkNum+=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         strfail=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s Is Uneachable[Warning]\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; ip;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(strfail);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        ResFp.write(strfail);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         IpFailNum+=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; Res=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Total Ip Num i:%d\nReachable  Count:%d,Unreachable Count:%d &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % ((IpFailNum+&lt;span&gt;IpOkNum),IpOkNum,IpFailNum);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(Res)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;LogFp.close();
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;ResFp.close();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; SrcFp.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1346188/201805/1346188-20180519220642288-2116848138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （三）linux shell&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!bin/sh&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;author lb&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;date 2018 05&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;PingFun()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Creat Log File&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; echo DetailLog&amp;gt;&amp;gt;&lt;span&gt;IpCheckerDetailLog.txt
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; echo DetailResult&amp;gt;&amp;gt;&lt;span&gt;IpCheckerResLog.txt
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; CurT=$(date &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+%Y:%m:%D %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; IpAvaCount=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; IpUnReachCount=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Init Log File&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; echo &lt;span&gt;$CurT&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;IpCheckerDetailLog.txt
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; echo &lt;span&gt;$CurT&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;pCheckerResLog.txt
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;echo Starting ping...
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Read Ip &lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;&lt;span&gt; read ip
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ping -c 1 -w 1 &lt;span&gt;$ip&lt;/span&gt; &amp;gt;/dev/&lt;span&gt;null ;then
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         echo &lt;span&gt;$ip&lt;/span&gt;&lt;span&gt;     is avaliable
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         echo &lt;span&gt;$ip&lt;/span&gt;     is avaliable &amp;gt;&amp;gt;&lt;span&gt;IpCheckerResLog.txt
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         IpAvaCount=$((&lt;span&gt;$IpAvaCount&lt;/span&gt;+1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; echo &lt;span&gt;$ip&lt;/span&gt;&lt;span&gt;     is unreachable
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;          echo &lt;span&gt;$ip&lt;/span&gt;     is unreachable &amp;gt;&amp;gt;&lt;span&gt;IpCheckerResLog.txt    
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         IpUnReachCount=$((1+&lt;span&gt;$IpUnReachCount&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    fi
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;done &amp;lt;ip.txt
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;statistics&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;echo Statis:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; echo Total Count : $((&lt;span&gt;$IpUnReachCount&lt;/span&gt;+&lt;span&gt;$IpAvaCount&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; echo Avaliable :&lt;span&gt;$IpAvaCount&lt;/span&gt;,Unreachable :&lt;span&gt;$IpUnReachCount&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; PingFun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1346188/201805/1346188-20180519235847433-875538425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 19 May 2018 15:58:00 +0000</pubDate>
<dc:creator>我是某某某是我</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiuBingBlogs/p/9054035.html</dc:identifier>
</item>
<item>
<title>js算法初窥02（排序算法02-归并、快速以及堆排序） - Zaking</title>
<link>http://www.cnblogs.com/zaking/p/9053668.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zaking/p/9053668.html</guid>
<description>&lt;p&gt;　　上一篇，我们讲述了一些简单的排序算法，其实说到底，在前端的职业生涯中，不涉及node、不涉及后台的情况下，我目前还真的没想到有哪些地方可以用到这些数据结构和算法，但是我在前面的文章也说过了。或许你用不到，但是，真的，如果你想要在前端领域有一个不错的发展。数据结构和算法一定是你的必修课。它不仅仅让你在处理问题的时候可以有一个思维底蕴，更重要的是，在遇到一些奇葩产品的时候，你可以和他PK到底！嗯，到底！&lt;/p&gt;
&lt;p&gt;　　哈哈，开个小玩笑。咱们还是聊点有营养的。上一篇的算法比较简单，主内容就是循环，次内容就是比较。但是，这篇文章所介绍的一些算法，在实现上有些许的复杂，甚至在其中涉及到了一部分数据结构相关的知识，如果你对数据结构还不是十分了解，请移步这里&lt;a id=&quot;homepage1_HomePageDays_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/zaking/p/9016600.html&quot;&gt;用js来实现那些数据结构—目录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　那么，我们这篇文章要一起来看看另外一些在执行上有着更高效率的算法，比如归并排序，比如快速排序，还有堆排序等等。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;归并排序&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;我们先来看看什么是归并排序，以及归并排序是怎么实现的。&lt;/p&gt;
&lt;p&gt;　　归并排序属于一种&lt;strong&gt;分治&lt;/strong&gt;算法。归并排序的思想就是将原始数组切分成一个一个较小的数组，直到每一个数组只有一个元素为止，然后再把一个一个小数组，一点一点的结合成一个最终排序后的数组。其实简单来说，就是先分，再合。归并排序的实现有两种方法，一种是递归，一种是迭代。下面我们只用递归的方式来实现一下代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;归并排序&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 不多说，你懂的。&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.mergeSort = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    array &lt;/span&gt;=&lt;span&gt; mergeSortRec(array);
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个私有函数，其实就是整个归并排序中“分”的部分。我们来看看它是如何“分”的。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; mergeSortRec = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (array) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储数组长度。&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; length =&lt;span&gt; array.length;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于是递归，所以当length 为 1 的时候，说明我们分到底了。直接返回这个数组。也就是只有一个元素的数组。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同时这个判断条件也是递归的终止条件，要记住任何递归操作都必须有终止条件。不然会陷入死循环。&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(length === 1&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们要把原始数组从中一分为二。下面就是一分为二的操作。无需多说。&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; mid = Math.floor(length / 2&lt;span&gt;),
        left &lt;/span&gt;= array.slice(0&lt;span&gt;,mid),
        right &lt;/span&gt;=&lt;span&gt; array.slice(mid,length);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里，我们先不去管merge函数是做什么的。我们先看递归到最底层。merge的两个参数会变成什么。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于我们又返回了自身，至此递归就形成了。在merge的参数中我们又递归调用了一次自身。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 那么这次调用我们把left和right两个数组又拆分了一次。直到最后array.length 为 1（归并的最小单位）。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 那么换句话说，实际上merge函数递归的最底层传入的就是两个只有一个元素的数组。&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; merge(mergeSortRec(left),mergeSortRec(right));
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; merge = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (left,right) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我们声明一个最终结果的数组result,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; il和ir是用来控制左右两个数组的迭代的变量&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; result = [],il = 0,ir = 0&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里，我们的最底层是只有两个只有一个元素的数组&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        array[left]和array[right]
        第一个while， 循环的条件是两个长度变量是否在合法值内。
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(il &amp;lt; left.length &amp;amp;&amp;amp; ir &amp;lt;&lt;span&gt; right.length) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果左侧小于右侧，此时的il和ir是相等的都是0。注意这一点&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我们就把左侧的left[il]放入数组并il++。否则，我们就把right[ir]存入数组result并ir++。此时，il和ir就不相等了。&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以，这时候，我们下一次循环判断的条件就是ir或il的递增与没有递增的il或者ir做比较。这样就做到了一个元素与另外数组中所有元素都比较过的一个方法。&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 希望上面我说明白了想要表达的意思。&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(left[il] &amp;lt;&lt;span&gt; right[ir]) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里，不太容易理解。为什么我们要在result中加入il++而不是il?&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其实这里的意思是，先加如left[il]再il++。&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不信，你可以把代码改成这个样子&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            result.push(left[il]);
            il++
            &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 效果是一样一样的。&lt;/span&gt;
            result.push(left[il++&lt;span&gt;]);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            result.push(right[ir&lt;/span&gt;++&lt;span&gt;]);
        }
    };
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这两个循环的目的是把剩余的数组元素（包括left数组和right数组）都存入result数组中。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这样我们就行了一个归并后的结果数组，然后进行下一次的归并过程的初始参数。&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(il &amp;lt;&lt;span&gt; left.length) {
        result.push(left[il&lt;/span&gt;++&lt;span&gt;]);
    };

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(ir &amp;lt;&lt;span&gt; right.length) {
        result.push(right[ir&lt;/span&gt;++&lt;span&gt;]);
    };

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们用上一章的方法来测试一下归并排序&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; arraylist = creatArrayList(5&lt;span&gt;);
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5,4,3,2,1&lt;/span&gt;
&lt;span&gt;arraylist.mergeSort();
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1,2,3,4,5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其实归并排序的核心思想就是先拆分数组直至分为只有一个元素的数组时，再对其一点一点的进行合并。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;快速排序&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　快速排序是我们在组织架构或者实际应用中最为常用的排序算法之一，你也可以把快速排序用在你的项目中。&lt;/p&gt;
&lt;p&gt;　　快速排序的思想和归并排序有些类似，但是快速排序不需要把拆分开的元素装入一个新的数组，而是直接在原数组上进行交换操作。&lt;/p&gt;
&lt;p&gt;　　那么我们来看看快速排序的操作步骤：&lt;/p&gt;
&lt;p&gt;　　　　首先我们要找到用于与之相比较的“主元”。理论上主元可以为数组中的任意的元素，但是在本文中我们选取数组的中间项作为主元。&lt;/p&gt;
&lt;p&gt;　　　　然后，我们选择主元左侧和右侧的两部分中的元素分别和主元做比较，直到我们找到了左侧比主元大并且右侧比主元小的元素，那么我们就交换两个元素的位置。直到迭代的左侧指针超过了右侧指针。这样，我们就使比主元小的元素和比主元大的元素分别存在于主元的两侧。&lt;/p&gt;
&lt;p&gt;　　　　最后，我们再对左右两侧的数组递归重复上面的步骤。直至数组排序结束。&lt;/p&gt;
&lt;p&gt;　　我们来看下代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;快速排序&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.quickSort = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里传入的参数是原始数组本身和首尾元素的下标。&lt;/span&gt;
    quick(array,0,array.length - 1&lt;span&gt;);
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; quick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (array,left,right) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个index是为了帮助我们分离出较小值数组和较大值数组的&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; index;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果length&amp;gt;1才执行逻辑，因为只有一个元素的数组意味着无需排序。&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(array.length &amp;gt; 1&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; partition返回一个元素的下标。&lt;/span&gt;
        index =&lt;span&gt; partition(array,left,right);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面两个判断条件为了区分我们要递归的是较小值数组还是较大值数组。&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(left &amp;lt; index - 1&lt;span&gt;) {
            quick(array,left,index &lt;/span&gt;- 1&lt;span&gt;);
        };

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(index &amp;lt;&lt;span&gt; right) {
            quick(array,index,right);
        };
    }
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们来看看划分过程的这个方法&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; partition = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (array,left,right) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; pivot（主元），也就是我们要与之比较的元素。我们选取中间项作为主元。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; i和j代表着较小值数组和较大值数组当前元素的指针&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; pivot = array[Math.floor((right + left) / 2)],i = left,j =&lt;span&gt; right;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;要知道最开始的i是0，j是lenght-1。所以i++是往右侧移动指针，j--是往左侧移动指针。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环的条件是较小值数组的下标小于较大值数组的下标。&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(i &amp;lt;=&lt;span&gt; j) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果array[i]元素小于主元，向右移动指针。&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;(array[i] &amp;lt;&lt;span&gt; pivot) {
            i&lt;/span&gt;++&lt;span&gt;;
        };
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果array[j]元素大于主元，向左移动指针。&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;(array[j] &amp;gt;&lt;span&gt; pivot) {
            j&lt;/span&gt;--&lt;span&gt;;
        };
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上面两个while迭代，当遇到不符合条件的时候就会停下来。&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 而这种不符合条件的情况是array[i]&amp;gt;array[j]。这是要调整的情况。但是此时i仍旧是小于等于j的。要注意,i在这里不可能比j大。&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以我们此时交换两个下标对应的元素，并改变i和j的指针。最后返回下标i。&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(i &amp;lt;=&lt;span&gt; j) {
            swap(array,i,j);
            i&lt;/span&gt;++&lt;span&gt;;
            j&lt;/span&gt;--&lt;span&gt;;
        };
    };

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
};



&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arraylist = creatArrayList(5&lt;span&gt;);
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5,4,3,2,1&lt;/span&gt;
&lt;span&gt;arraylist.quickSort();
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1,2,3,4,5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;3&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;堆排序&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在说堆排序之前，我们得先了解一下什么是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)&quot; target=&quot;_blank&quot;&gt;堆&lt;/a&gt;，堆这种数据结构本质是一个完全二叉树（如果你还不知道什么是树，请看我&lt;a href=&quot;http://www.cnblogs.com/zaking/p/9016600.html&quot; target=&quot;_blank&quot;&gt;前面的文章&lt;/a&gt;），那么既然堆是一种树，那么有关于树的一些概念都可以用在堆上面，比如深度，比如节点等。要知道，树通常都会有左孩子又孩子节点和父节点的指针，但是在完全二叉树中，这些指针都可以去掉，因为我们可以用一定的规律来直接找到当前节点的关联节点。比如给定某一个结点，假设它的下标为i，那么它的左孩子结点的下标就是2i + 1，右孩子结点的下标就是2i + 2，它的父结点为(i−1)/2。这样，我们就把可以省略去这些指针，直接将堆中的结点存储在数组中了。&lt;/p&gt;
&lt;p&gt;　　在了解了什么是堆之后，我们看看堆排序是怎么操作的。我们直接从代码中看比较具体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;堆排序&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 这里你需要对树数据结构有一定的了解和认识。如果你对树结构还不是十分了解，请看我前面有关于树结构的相关章节。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 或者，你可以直接用下面的代码来解决问题，当然，你需要做一些细微的改动。&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.heapSort = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把数组长度存入一个变量&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; heapSize =&lt;span&gt; array.length;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把该数组“堆”化。&lt;/span&gt;
&lt;span&gt;    buildHeap(array);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代递减heapSize的长度，交换数组中下标为0和当前的heapSize重新使变动的堆“合理化”。这里的合理化是指让交换了元素位置的数组重新生成符合堆原理的一个新数组。&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(heapSize &amp;gt; 1&lt;span&gt;) {
        heapSize&lt;/span&gt;--&lt;span&gt;;
        swap(array,&lt;/span&gt;0&lt;span&gt;,heapSize);
        heapify(array,heapSize,&lt;/span&gt;0&lt;span&gt;);
    };
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成堆函数，我们的i为数组中间值并且递减i的循环为heapify函数传入。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; buildHeap = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (array) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; heapSize =&lt;span&gt; array.length;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = Math.floor(array.length / 2);i &amp;gt;= 0; i--&lt;span&gt;) {
        heapify(array,heapSize,i);
    };
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;“堆”化函数。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; heapify = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (array,heapSize,i) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们声明左节点，右节点，以及父节点（也就是largest）的变量&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; left = i * 2 + 1&lt;span&gt;,
        right &lt;/span&gt;= i * 2 + 2&lt;span&gt;,
        largest &lt;/span&gt;=&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这两个判断是为了知道在当前轮中的父节点是谁。&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(left &amp;lt; heapSize &amp;amp;&amp;amp; array[left] &amp;gt;&lt;span&gt; array[largest]) {
        largest &lt;/span&gt;=&lt;span&gt; left;
    };

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(right &amp;lt; heapSize &amp;amp;&amp;amp; array[right] &amp;gt;&lt;span&gt; array[largest]) {
        largest &lt;/span&gt;=&lt;span&gt; right;
    };
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果largest变了，我们就需要交换两个值得位置。并且重新调用heapify。&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(largest !==&lt;span&gt; i) {
        swap(array,i,largest);
        heapify(array,heapSize,largest);
    };
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arraylist = creatArrayList(125&lt;span&gt;);
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5,4,3,2,1&lt;/span&gt;
&lt;span&gt;arraylist.heapSort();
console.log(arraylist.toString());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1,2,3,4,5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　堆排序的概念其实并不难理解，唯一需要注意的就是堆数据结构的概念，希望我说清楚了，如果你觉得我对于堆的讲解并不详细，首先你可以百度，其次你可以谷歌，再次你还可以去搜维基百科。实在不行，你去这里看看&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25820535&quot; target=&quot;_blank&quot;&gt;https://zhuanlan.zhihu.com/p/25820535&lt;/a&gt;。这是一篇有关于java相关的系列教程之一。当然，就算你不懂java，相信你也一样可以看懂，真的，我没开玩笑。&lt;/p&gt;
&lt;p&gt;　　我在纠结要不要画张图还是就这样结束，因为画一个完整的流程图真的很花时间......我抽根烟考虑下......要不大家去买本书看吧。。。。嗯....一个不错的建议。　&lt;/p&gt;
&lt;p&gt;　　下面我们以数组[3,5,1,6,4,7,2]作为图例的基本数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1184971/201805/1184971-20180519235452779-1679875301.png&quot; alt=&quot;&quot; width=&quot;1219&quot; height=&quot;647&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　图片要结合代码一起看，不然看不懂的噢.......还有，这个图你最好放大了看，不然累眼睛。。。&lt;/p&gt;
&lt;p&gt;　　最后，其实有关于排序算法还有很多，比如计数排序，桶排序，基数排序等等等等等。排序算法远不止如此。但是本系列不会介绍这么多的算法，如果你想要更深入的去了解其它算法的内容，可以自行查找相关的资料。&lt;/p&gt;
&lt;p&gt;　　好了，终于要结束了，希望本文的内容能带给你一点点的收获。&lt;/p&gt;

&lt;p&gt;　　最后，&lt;strong&gt;由于本人水平有限，能力与大神仍相差甚远，若有错误或不明之处，还望大家不吝赐教指正。非常感谢！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 15:58:00 +0000</pubDate>
<dc:creator>Zaking</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zaking/p/9053668.html</dc:identifier>
</item>
<item>
<title>codeforces 982D Shark - qrfkickit</title>
<link>http://www.cnblogs.com/kickit/p/9062168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kickit/p/9062168.html</guid>
<description>&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给出一个数组，删除大于等于k的数字，使得其满足以下条件：&lt;/p&gt;
&lt;p&gt;1.剩余的连续的段，每一段的长度相等；&lt;/p&gt;
&lt;p&gt;2.在满足第一个条件的情况下，段数尽可能多；&lt;/p&gt;
&lt;p&gt;3.在满足前两个条件的情况下，k取最小的。&lt;/p&gt;
&lt;p&gt;求k。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;一开始整个数组可以看成完整的一段，这是对应的k是最大的数字 + 1。&lt;/p&gt;
&lt;p&gt;用一个set sd维护删除的数字。&lt;/p&gt;
&lt;p&gt;从大到小枚举删除的数字，每次删除一个数字，都可以看成是删除一个长的段，然后添加两个小的段，在sd中找出这个数字的位置cur的前驱pre和后继sub，要删除的段就是前驱到后继这一段，然后新添加两段就是cur到pre 以及 sub到cur。把cur添加到删除数字的集合中。&lt;/p&gt;
&lt;p&gt;用一个map维护&amp;lt;线段长度，数量&amp;gt;来表示现在段数的情况，容易知道当map的size为1时，表明所有线段的长度相同，就可以更新答案了。&lt;/p&gt;
&lt;p&gt;更新答案的时候，首先考虑线段数量是否更多，再考虑k是否可以变小。&lt;/p&gt;
&lt;p&gt;假设当前删除的数字是tmp，那么是不是满足条件之后就直接把答案更新为tmp呢？&lt;/p&gt;
&lt;p&gt;不是，假设当前数字是x，比它小的第一个数字是y，显然y + 1这个数字也可以满足条件，而且y + 1 &amp;lt;= x是显然的，所以答案应该更新为y + 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢mzjj教我！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;map&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;&lt;span&gt;set&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; typedef &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; ll;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; typedef pair&amp;lt;&lt;span&gt;int&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; pii;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; map&amp;lt;&lt;span&gt;int&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; mmp;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&amp;lt;pii&amp;gt;&lt;span&gt; s;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; sd;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i &amp;lt;= n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;x);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        s.insert(pii(x,i));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     sd.insert(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     sd.insert(n+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     mmp[n]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; ans = s.rbegin() -&amp;gt; first + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; cnt = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; n - &lt;span&gt;1&lt;/span&gt;;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         auto it =&lt;span&gt; s.rbegin();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; cur = it -&amp;gt;&lt;span&gt; second;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         s.erase(*&lt;span&gt;it);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; pre = *(--&lt;span&gt;sd.lower_bound(cur));
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; sub = *&lt;span&gt;(sd.upper_bound(cur));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d %d %d\n&quot;,pre,sub,cur);&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sub-pre-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             mmp[sub-pre-&lt;span&gt;1&lt;/span&gt;]--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (mmp[sub-pre-&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 mmp.erase(sub-pre-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        sd.insert(cur);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (cur-pre-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;) mmp[cur-pre-&lt;span&gt;1&lt;/span&gt;]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sub-cur-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;) mmp[sub-cur-&lt;span&gt;1&lt;/span&gt;]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (mmp.size() == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int len = mmp.begin() -&amp;gt; first;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; num = mmp.begin() -&amp;gt;&lt;span&gt; second;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d *\n&quot;,len);&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (num &amp;gt;=&lt;span&gt; cnt)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 cnt =&lt;span&gt; num;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 ans = s.rbegin() -&amp;gt; first + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 19 May 2018 15:54:00 +0000</pubDate>
<dc:creator>qrfkickit</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kickit/p/9062168.html</dc:identifier>
</item>
<item>
<title>Flask开发微电影网站(二) - renpingsheng</title>
<link>http://www.cnblogs.com/renpingsheng/p/9062166.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renpingsheng/p/9062166.html</guid>
<description>&lt;h2 id=&quot;安装数据库连接依赖包&quot;&gt;1.安装数据库连接依赖包&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;pip install flask-sqlalchemy&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建movie数据库&quot;&gt;2.创建movie数据库&lt;/h2&gt;
&lt;p&gt;在CentOS虚拟机，&lt;code&gt;进入MaridDB数据库提示符，创建movie数据库&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create database movie&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;定义mariddb数据库连接&quot;&gt;3.定义MaridDB数据库连接&lt;/h2&gt;
&lt;p&gt;在app目录下的&lt;code&gt;__init__.py文件&lt;/code&gt;中添加以下内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# _*_coding:utf-8_*_

from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
import pymysql

# 实例化Flask类得到app对象
app = Flask(__name__)

# 定义连接的数据库
app.config['SQLALCHEMY_DATABASE_URI'] = &quot;mysql+pymysql://root:root1234@192.168.81.10:3306/movie&quot;

# 如果设置成True(默认情况),Flask-SQLAlchemy将会追踪对象的修改并且发送信号
# 这需要额外的内存，如果不必要的可以禁用
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True

# 定义secret_key
app.config['SECRET_KEY'] = &quot;6bd749587aad49399f674b202a07d56f&quot;

db = SQLAlchemy(app)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;定义数据模型类&quot;&gt;4.定义数据模型类&lt;/h2&gt;
&lt;p&gt;在app目录下创建models.py文件，文件内容为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# _*_coding:utf-8_*_

from datetime import datetime
from app import db&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义会员数据模型&quot;&gt;4.1 定义会员数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 会员
class User(db.Model):
    __tablename__ = 'user'      # 定义用户表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)    # 用户编号
    name = db.Column(db.String(100), unique=True)   # 呢称
    pwd = db.Column(db.String(100))     # 密码
    email = db.Column(db.String(100), unique=True)  # 邮箱
    phone = db.Column(db.String(11), unique=True)   # 用户手机号码
    info = db.Column(db.Text)           # 个性简介
    face = db.Column(db.String(255), unique=True)   # 头像
    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 注册时间
    uuid = db.Column(db.String(255), unique=True)   # 唯一标识
    userlogs = db.relationship(&quot;Userlog&quot;, backref='user')       # 会员登录日志外键关系关联
    comments = db.relationship('Comment', backref='user')       # 评论外键关系关联
    moviecols = db.relationship('Moviecol', backref='user')     # 电影收藏外键关系关联

    # 返回定义类型
    def __repr__(self):
        return &quot;&amp;lt;User %r&amp;gt;&quot; % self.name

    # 检测密码，判断用户输入的密码是否与数据库中保存的用户的密码相同
    def check_pwd(self,pwd):
        from werkzeug.security import check_password_hash
        return check_password_hash(self.pwd,pwd)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义会员登录日志数据模型&quot;&gt;4.2 定义会员登录日志数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 会员登录日志
class Userlog(db.Model):
    __tablename__ = 'userlog'        # 定义用户日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)    # 编号
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属会员编号
    ip = db.Column(db.String(100))                  # 最近登录IP地址
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 最近登录时间

    def __repr__(self):
        return &quot;&amp;lt;Userlog %r&amp;gt;&quot; % self.id&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义标签数据模型&quot;&gt;4.3 定义标签数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影标签
class Tag(db.Model):
    __tablename__ = 'tag'              # 定义电影标签表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 电影编号
    name = db.Column(db.String(100), unique=True)  # 标题
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 电影添加时间
    movies = db.relationship(&quot;Movie&quot;, backref='tag')  # 电影外键的键值

    def __repr__(self):
        return &quot;&amp;lt;Tag %r&amp;gt;&quot; % self.name
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影数据模型&quot;&gt;4.4 定义电影数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影
class Movie(db.Model):
    __tablename__ = 'movie'              # 定义电影表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    title = db.Column(db.String(255), unique=True)  # 标题
    url = db.Column(db.String(255), unique=True)  # 地址
    info = db.Column(db.Text)  # 简介
    logo = db.Column(db.String(255), unique=True)  # 封面
    star = db.Column(db.SmallInteger)  # 星级
    playnum = db.Column(db.BigInteger)  # 播放量
    commentnum = db.Column(db.BigInteger)  # 评论量
    tag_id = db.Column(db.Integer, db.ForeignKey('tag.id'))  # 所属标签
    area = db.Column(db.String(255))  # 上映地区
    release_time = db.Column(db.Date)  # 上映时间
    length = db.Column(db.String(100))  # 播放时间
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间
    comments = db.relationship('Comment', backref='movie')  # 评论外键关系关联
    moviecols = db.relationship('Moviecol', backref='movie')  # 收藏外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Movie %r&amp;gt;&quot; % self.title&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义上映预告数据模型&quot;&gt;4.5 定义上映预告数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 上映预告
class Preview(db.Model):
    __tablename__ = 'preview'              # 定义电影上映预告表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    title = db.Column(db.String(255), unique=True)  # 标题
    logo = db.Column(db.String(255), unique=True)  # 封面
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return &quot;&amp;lt;Preview %r&amp;gt;&quot; % self.title
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影评论数据模型&quot;&gt;4.6 定义电影评论数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影评论
class Comment(db.Model):
    __tablename__ = 'comment'              # 定义电影评论表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    content = db.Column(db.Text)  # 评论内容
    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 所属电影
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属用户
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return '&amp;lt;Comment %r&amp;gt;' % self.id
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影收藏数据模型&quot;&gt;4.7 定义电影收藏数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影收藏
class Moviecol(db.Model):
    __tablename__ = 'moviecol'              # 定义电影收藏表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 电影编号
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 用户编号
    addtime = db.Column(db.DateTime, index=True, default=datetime)  # 添加收藏时间

    def __repr__(self):
        return &quot;&amp;lt;Moviecol %r&amp;gt;&quot; % self.id
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义权限数据模型&quot;&gt;4.8 定义权限数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 权限
class Auth(db.Model):
    __tablename__ = 'auth'              # 定义用户权限表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(100), unique=True)  # 权限名称
    url = db.Column(db.String(100), unique=True)  # 地址
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return &quot;&amp;lt;Auth %r&amp;gt;&quot; % self.name
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义角色数据模型&quot;&gt;4.9 定义角色数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 角色
class Role(db.Model):
    __tablename__ = 'role'              # 定义用户角色表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(128), unique=True)  # 角色名称
    auths = db.Column(db.String(512))
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间
    admins = db.relationship(&quot;Admin&quot;, backref='role')  # 管理员外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Role %r&amp;gt;&quot; % self.name
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义管理员数据模型&quot;&gt;4.10 定义管理员数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 管理员
class Admin(db.Model):
    __tablename__ = 'admin'              # 定义管理员表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(100), unique=True)  # 管理员账号
    pwd = db.Column(db.String(100))  # 管理员密码
    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'))  # 所属角色
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)
    adminlogs = db.relationship('Adminlog', backref='admin')  # 管理员登录日志外键关系关联
    oplogs = db.relationship('Oplog', backref='admin')  # 管理员操作日志外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Admin %r&amp;gt;&quot; % self.name

    def check_pwd(self, pwd):
        from werkzeug.security import check_password_hash
        return check_password_hash(self.pwd, pwd)
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义管理员登录日志数据模型&quot;&gt;4.11 定义管理员登录日志数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 管理员登录日志
class Adminlog(db.Model):
    __tablename__ = 'adminlog'              # 定义管理员日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    admin_id = db.Column(db.Integer, db.ForeignKey('admin.id'))  # 所属管理员
    ip = db.Column(db.String(100))  # 登录IP
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 登录时间

    def __repr__(self):
        return &quot;&amp;lt;Adminlog %r&amp;gt;&quot; % self.id
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义用户操作日志&quot;&gt;4.12 定义用户操作日志&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 操作日志
class Oplog(db.Model):
    __tablename__ = 'oplog'              # 定义操作日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    admin_id = db.Column(db.Integer, db.ForeignKey('admin.id'))  # 所属管理员
    ip = db.Column(db.String(100))  # 登录IP
    reason = db.Column(db.String(600))  # 操作原因
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 登录时间

    def __repr__(self):
        return &quot;&amp;lt;Oplog %r&amp;gt;&quot; % self.id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在models.py文件保存所有的模型类&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建数据库&quot;&gt;5. 创建数据库&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;models.py文件&lt;/code&gt;中，&lt;code&gt;定义main函数，在MariaDB数据库中生成前面定义的模型表&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if __name__ == '__main__':
    db.create_all()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;单独执行models.py文件，在MariaDB数据库的movie数据库中创建数据表&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据库创建完成，进入&lt;code&gt;MariaDB数据库提示符&lt;/code&gt;，查看创建的数据表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133627/201805/1133627-20180519235528875-760376203.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 15:53:00 +0000</pubDate>
<dc:creator>renpingsheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renpingsheng/p/9062166.html</dc:identifier>
</item>
<item>
<title>Spring Boot 2.0 教程 - 深入SpringAplication - NNS</title>
<link>http://www.cnblogs.com/hitandrew/p/9062124.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hitandrew/p/9062124.html</guid>
<description>&lt;p&gt;原文连接：&lt;a href=&quot;https://www.codemore.top/cates/Backend/post/2018-05-20/spring-boot-SpringApplication&quot; target=&quot;_blank&quot;&gt;https://www.codemore.top/cates/Backend/post/2018-05-20/spring-boot-SpringApplication&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以通过SpringApplication.run() 方法轻松的启动一个Spring应用，例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
        SpringApplication.run(MySpringConfiguration.class, args);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;  .   ____          _            __ _ _
 /\\ / ___&lt;span class=&quot;hljs-string&quot;&gt;'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | &lt;span class=&quot;hljs-string&quot;&gt;'_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &lt;span class=&quot;hljs-string&quot;&gt;'  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::   v2.0.1.RELEASE

2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)
2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy
2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 8080
2014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认的Log级别是INFO级别.&lt;/p&gt;
&lt;h5&gt;定制banner&lt;/h5&gt;
&lt;p&gt;banner是在Spring应用启动的时候打印的，如果需要定制banner，可以添加banner.txt到classpath中，或者设置&lt;code&gt;spring.banner.location&lt;/code&gt;属性设置banner的路径。banner默认编码方式是UTF-8，如果不使用UTF-8，可以设置&lt;code&gt;spring.banner.charset&lt;/code&gt;属性设置其编码方式。除了文本文件，也可以使用，banner.gif,banner.jpeg,banner.png等图片文件作为banner，或者设置&lt;code&gt;spring.banner.image.location&lt;/code&gt;属性设置图片banner。图片有Spring转为ASCII输出。 banner.txt 中添加如下占位符&lt;/p&gt;
&lt;p&gt;也可以实现&lt;code&gt;org.springframework.boot.Banner&lt;/code&gt;接口的&lt;code&gt;printBanner()&lt;/code&gt;方法定制Banner，使用SpringApplication.setBanner()设置banner。 配置&lt;code&gt;spring.main.banner-mode&lt;/code&gt;设置是否在控制台显示banner&lt;/p&gt;
&lt;h5&gt;定制SpringApplication&lt;/h5&gt;
&lt;p&gt;可以通过创建自定义的SpringApplication示例来定制SpringApplication，例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
        SpringApplication app = &lt;span class=&quot;hljs-keyword&quot;&gt;new SpringApplication(MySpringConfiguration.class);
        app.setBannerMode(Banner.Mode.OFF);
        app.run(args);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用builder定制SpringApplication&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new SpringApplicationBuilder()
                .sources(Parent.class)
                .child(Application.class)
                .bannerMode(Banner.Mode.OFF)
                .run(args);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5&gt;应用事件和监听器&lt;/h5&gt;
&lt;p&gt;除了通常的Spring Framework的事件，例如&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;等，&lt;code&gt;SpringApplication&lt;/code&gt;还会发送一些其他的应用时间。 由于一些事件是在ApplicationContext创建之前触发的，因此无法通过@Bean的方式注册这些事件的监听器。可以使用SpringApplication.addListeners() 犯法或者SpringApplicationBuilder.listeners()方法注册监听器。 也可以通过添加&lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件到项目中，自动注册监听器，例如&lt;code&gt;org.springframework.context.ApplicationListener=come.example.project.MyListener&lt;/code&gt; 应用启动后，应用时间按照如下的顺序触发 1. 应用开始运行时触发&lt;code&gt;ApplicationStartingEvent&lt;/code&gt;事件 2. 在ApplicationContext创建之前，Environment可用时触发&lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt;事件。 3. bean定义加载后，刷新之前触发&lt;code&gt;ApplicationPreparedEvent&lt;/code&gt;事件 4. context刷新后，command-line runner运行前，触发&lt;code&gt;ApplicationStartedEvent&lt;/code&gt; 5. command-lie runner运行后，触发&lt;code&gt;ApplicationReadyEvent&lt;/code&gt;表示应用可以接受请求了 6. 如果发生异常，触发&lt;code&gt;ApplicationFailedEvent&lt;/code&gt; 应用事件时通过Spring Framework的事件发布机制发送的，这种机制保证了发送给子context的事件同样也会发送给其祖先context。因此如果ApplicationContext时有层次的，可能会收到多个相同的事件，为了区分这些事件，需要应用注入自己的ApplicationContext，当接收事件时判断是否时本层事件再做处理，可以用过继承&lt;code&gt;ApplicationContextAware&lt;/code&gt;注入ApplicationContext，或者如果监听器时一个bean也可以用过@Autowired注入ApplicationContext。&lt;/p&gt;
&lt;h5&gt;Web环境&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SpringApplication&lt;/code&gt;可以根据配置创建正确的&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样也可以使用setApplication(...)完全自己设置ApplicationContext。&lt;/p&gt;
&lt;h5&gt;访问应用参数&lt;/h5&gt;
&lt;p&gt;如果需要访问SpringApplication.run(...)中的args参数，可以通过注入&lt;code&gt;org.springframework.boot.ApplicationArguments&lt;/code&gt; bean访问。接口&lt;code&gt;ApplicationArguments&lt;/code&gt;不仅提供了访问原生参数的String[] ,同样也提供了 option和non-option参数例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.boot.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.beans.factory.annotation.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.stereotype.*

&lt;span class=&quot;hljs-meta&quot;&gt;@Component
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;MyBean {

        &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;MyBean&lt;span class=&quot;hljs-params&quot;&gt;(ApplicationArguments args) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;boolean debug = args.containsOption(&lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;);
                List&amp;lt;String&amp;gt; files = args.getNonOptionArgs();
                &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h6&gt;使用ApplicationRunner和CommandLineRunner&lt;/h6&gt;
&lt;p&gt;如果在运行完SpringApplication.run()之后需要运行其他代码，可以通过实现&lt;code&gt;ApplicationRunner&lt;/code&gt;或者&lt;code&gt;CommandLineRunner&lt;/code&gt;接口，这俩接口作用相同，都提供一个run（）的方法，等调用完SpringApplication.run()之后调用，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.boot.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.stereotype.*

&lt;span class=&quot;hljs-meta&quot;&gt;@Component
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;MyBean &lt;span class=&quot;hljs-keyword&quot;&gt;implements &lt;span class=&quot;hljs-title&quot;&gt;CommandLineRunner {

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;run&lt;span class=&quot;hljs-params&quot;&gt;(String... args) {
                &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果定义了多个CommandLineRunner或者ApplicationRunner，则可以通过接口&lt;code&gt;org.springframework.core.Ordered&lt;/code&gt;或者&lt;code&gt;org.springframework.core.annotation.Order&lt;/code&gt;注解提供顺序。&lt;/p&gt;
&lt;h5&gt;应用退出&lt;/h5&gt;
&lt;p&gt;每一个SpringApplication都会注册一个JVM退出的钩子，保证ApplicationContext可以优雅关闭。另外bean可以实现&lt;code&gt;org.springfamework.boot.ExitCodeGenerator&lt;/code&gt;接口当调用SpringApplication.exit()时返回一个特定的返回码，这个返回码可以传递给System.exit()例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SpringBootApplication
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ExitCodeApplication {

        &lt;span class=&quot;hljs-meta&quot;&gt;@Bean
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public ExitCodeGenerator &lt;span class=&quot;hljs-title&quot;&gt;exitCodeGenerator&lt;span class=&quot;hljs-params&quot;&gt;() {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return () -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;42;
        }

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
                System.exit(SpringApplication
                                .exit(SpringApplication.run(ExitCodeApplication.class, args)));
        }

}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
<pubDate>Sat, 19 May 2018 15:40:00 +0000</pubDate>
<dc:creator>NNS</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hitandrew/p/9062124.html</dc:identifier>
</item>
<item>
<title>手把手教你使用 netlify 实现前端的 自动部署 + HTTPS - 大雄的学习人生</title>
<link>http://www.cnblogs.com/codernie/p/9062104.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codernie/p/9062104.html</guid>
<description>&lt;p&gt;随着开源工具越来越多，特别是nodejs构建微服务器之快，实现前端自动化部署越来越简单了，有可能【10行js代码+10行sh脚本+设置github的webhook】就能实现，但是如果你和我一样，就是“懒”（此处为褒义😆），连这些都不想自己做，那该怎么办呢？这个时候我发现了这款好工具—netlify，下面我就来讲讲它究竟有多好用吧^_^&lt;/p&gt;

&lt;p&gt;一、&lt;strong&gt;使用github或者gitlab登陆netlify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，打开netlify网站(https://app.netlify.com/)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5AsjqSEuwwLuTiaw2nWZMlG11hZlno61Hujt1o1dTbsPyu7HXLmt21tw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.53125&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后使用github或者gitlab账号登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5MlxAVE5Wqeu6WFuib05vS96mmcljApFe6ktGP1lDyyI3xI0cam0TYnA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.496875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、&lt;strong&gt;根据github/gitlab仓库创建网站&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击New site from Git按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5Iy1qiayjXeMJ2CmHDBRibmyB6Uv0UWTOrphKTe7SOJicATjkXicJRVCh5w/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.3&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据你的仓库所在平台选择，以下三选一：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5vuuAialPKeaqJ6rrzMRtibkG5REj0cUoJcgLjjMgyuhePXZrjwKOAvyg/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.11875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择你需要部署的仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5fabMxMqp4uLichvhVdjpvX8m0D5A77D28ffUcYdG9B5uz1FqyNOpK8g/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5421875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置部署选项，包括三点：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;部署分支（对应下图中 Branch to deploy）:&lt;/p&gt;
&lt;p&gt;顾名思义就是你的git仓库的分支，默认选择为master分支&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;打包命令（对应下图中 Build command）：&lt;/p&gt;
&lt;p&gt;就是你的打包命令，诸如 npm run build，gulp build 之类；如果本身已是静态文件，不需打包编译，这一栏则不填&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;打包后目录（对应下图中 Publish directory）：&lt;/p&gt;
&lt;p&gt;即执行完打包命令之后静态文件所在目录，诸如 dist，_site 之类；如果本身已是静态文件，这一栏则不填&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5MoMoWM6l8r95W2Q0FSfCDZMibSJJVmmJsDP3bQmgjMoAJRxY1sdrBlQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;1.2109375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完成之后点击途中 deploy site 按钮&lt;/p&gt;

&lt;p&gt;三、&lt;strong&gt;设置域名，绑定域名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进行完第二步，我们可以看到自动化部署已经开始运行了，而且过不多久，我们的网站就已经可以利用netlify域名就行访问了，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5SiaWJbSTJqA801PqhvQzKhWh79eGqy4wug1OjLmNK3M7BYpMD2MeSyA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.528125&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到netlify为我们随机生成了一个netlify下的域名，这里我们可以更改其前缀，并绑定到我们自己的域名下：&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; 更改netlify域名前缀：&lt;/p&gt;
&lt;p&gt;首先，点击上图中 Site settings 按钮，然后在下方点击 Change site name 按钮，然后在弹出框中输入自己需要更改的前缀名，点击保存即可，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm53OBuIYyK11ibyE6c5eBXK9rCtgdkytMPz6UQic9MzQQslSJYY083w2uw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.8265625&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; 绑定到自己的域名下：&lt;/p&gt;
&lt;p&gt;首先，点击上上图中 Domain settings 按钮，然后在下方点击 Add custom domain 按钮，然后在弹出框中输入自己需要绑定的完整域名，点击保存，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5tL9CRwYyOH5DDk2iaaNkbgSCsC6b0JibEpB0TYx0qB9TBoyDQYDGTlOg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.584375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候会显示 ！Check DNS configuration，因为我们还没有设置域名解析到netlify服务器，所以这个时候需要到你自己域名的相应服务商网站登录之后在需要绑定的域名下添加一条CNAME解析，解析的主机记录即对应的netlify域名值（这里即 codernie.netlify.com）&lt;/p&gt;
&lt;p&gt;ok，过一会儿就可以使用自己的域名访问自己的网站啦&lt;/p&gt;

&lt;p&gt;四、&lt;strong&gt;生成HTTPS证书，实现HTTPS访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第四部中的Domain settings 中往下拉，可以看到 HTTPS 几个大字母：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5c1iaGicpxZAlqyxFqoGxK36iaUM2aiavZHFo2jur16lj0ShqVBGlReCUibg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.765625&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击 Verify DNS configuration 按钮，待它变成下方绿色按钮之后，再点击：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5d8ynozib1aVfDZVWWtZhbIIPCAwMrdLdeg04RHtjOaLjWevVaNicnjSg/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.285124&quot; data-w=&quot;484&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在弹出框中点击确认，过一会儿之后就可以使用https访问你的小站啦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5upwiakwa0v7BdND2N2WMN56pQlEcLrMrmFmxAvVFv6pTnkpnYRpVSQQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.1168831&quot; data-w=&quot;462&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到自己的小站前面可以有绿色的安全字样，是不是很酷炫，而且很放心，再也不用担心运营商在自己的网站上挂广告啦，哈哈哈。。。等等，是不是还差了点什么：&lt;/p&gt;
&lt;p&gt;对啊，还没有强制跳转https，OK，继续&lt;/p&gt;

&lt;p&gt;五、&lt;strong&gt;强制HTTP跳转HTTPS访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在第四步 Domain settings 再往下翻一点，可以看到 Force HTTPS，只需点击 Force HTTPS 即可实现，是不是很方便，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5baJlA9RpASX7MqZKSFd3Wnxps63Ip1HKYMibNWQKXRZziaPugDNxmeKA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.784375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里，你的网站即使用户使用http访问，也将强制跳转至https访问啦，这下可以彻底不用担下运营商给你的用户“发红包”啦！&lt;/p&gt;

&lt;p&gt;六、设置redirect&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用netlify实现自动化部署和HTTPS就写到这里了，喜欢就点个赞啦。&lt;/p&gt;

</description>
<pubDate>Sat, 19 May 2018 15:31:00 +0000</pubDate>
<dc:creator>大雄的学习人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codernie/p/9062104.html</dc:identifier>
</item>
<item>
<title>超越Ctrl+S保存页面所有资源 - JerremyZhang</title>
<link>http://www.cnblogs.com/Johnzhang/p/9061998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnzhang/p/9061998.html</guid>
<description>&lt;h2 id=&quot;基本需求&quot;&gt;基本需求&lt;/h2&gt;
&lt;p&gt;抓取页面所有内容主要包括一下内容：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;页面内元素&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;页面元素包含服务端直接返回的元素，动态构建的元素&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;页面内所有资源&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;页面所有资源包含本页面所在域资源以及第三方域资源，同主域的资源也认为第三方域资源，这种资源一般是以绝对路径的方式标识，同域下资源主要有三种表现方式 （以https://www.baidu.com举例）&lt;/p&gt;
&lt;p&gt;a). 相对路径&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b). 绝对路径&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://www.baidu.com/image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c). 绝对路径2&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;//www.baidu.com/image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种表示方式会自动根据浏览器打开该页面的协议请求时加入协议（protocol），本地保存后，基于file协议打开同样会加入file:前缀。&lt;/p&gt;
&lt;h2 id=&quot;当前实现方案&quot;&gt;当前实现方案&lt;/h2&gt;
&lt;h3 id=&quot;基本流程&quot;&gt;基本流程&lt;/h3&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;服务端http get 页面&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;根据服务端响应的html，遍历需要加载的其它资源，比如javascript、image、css、font、media等资源&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;处理html、javascript、css 等文件，进行资源路径替换，保证页面本地化后能正常打开&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;不足之处&quot;&gt;不足之处&lt;/h3&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;http get 只能拿到原始内容，需要依赖后期再浏览器中加载之后的再渲染（比如依赖本地化的js再次请求数据进行页面构建 或者 直接生成dom进行页面构建）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;请求后得到的资源文件依赖原本相对路径，如果处理有较高的技术难度，比如使用AMD、CMD等模式加载的文件。由于当前方案抓取资源时对当前资源目录层次全部铺平了（纵向目录已经不存在了，相对路径也会变化），所以需要动态修改（拿应用了AMD加载模式的页面举例）require.config.js 文件的内容，否则会导致页面js 无法正常加载，页面无法正常渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;对非html页面直接获取的资源，获取的难度较大，这种非html页面直接获取的资源包括，css 文件中引入的字体资源文件以及图片资源文件，js资源文件中引入的资源文件，比如上述2 中描述的AMD、CMD模式实现的按需加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;新的实现方案&quot;&gt;新的实现方案&lt;/h2&gt;
&lt;p&gt;puppeteer是操作chromnium的上层node api，当浏览器打开一个页面是，可以简单理解细分为如下过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通知浏览器发起请求&lt;/li&gt;
&lt;li&gt;浏览器发起请求&lt;/li&gt;
&lt;li&gt;浏览器获取响应内容&lt;/li&gt;
&lt;li&gt;浏览器把响应内容交给上层渲染引擎&lt;/li&gt;
&lt;li&gt;渲染引擎处理&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在整个过程中，puppeteer提供了一种机制让我们有机会拦截到2和3这两个阶段，基于这点，我们可以做更多的事情，比如我们可以拦截页面的所有请求，可以截获所有的响应，而不用关注请求的去向，因为只要请求发出去了，就能受我们的控制，另外，由于是使用浏览器本身，所以跟直接http get 页面最大的区别在于前者是渲染后的，后者是原始的，前者对SPA或者依靠脚本构建的应用比较友好。&lt;/p&gt;
&lt;p&gt;使用puppeteer实现完全能处理原始方案的不足，新的实现思路如下：&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;拦截所有网络请求，对资源请求以及构建dom相关请求进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对同域名下资源进行相对路径处理，在本地创建对应的相对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对不同域名下资源（第三方资源）以第三方域名为名建立新的目录，用来存储第三方资源&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;资源处理，处理html资源，css资源以及javascript文件中绝对路径为相对路径（这里绝对路径是指直接引入的cdn等模式路径，相对路径是指对cdn域名本地化目录后的路径）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;核心代码说明&quot;&gt;核心代码说明&lt;/h2&gt;
&lt;p&gt;基于上述新的方案，实现的核心代码如下，代码中加入了详细的注释，不再做过多解释，有疑问欢迎留言讨论&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; puppeteer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'puppeteer'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; URL &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'url'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'md5'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; util &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'util'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'path'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; shell &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'shelljs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//资源保存目录&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; BASEDIR &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./asserts/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; start &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;async&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//初始化删除清理资源目录，仅测试阶段，因为当前目录为时间戳生成&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;shell&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'rm -rf asserts/'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//因为所有网络请求都会拦截，处理请求和页面资源以及dom构建无关可忽略&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//下面的域名是比较常见的前端采集域名 (有很多没有列出来的)&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; blackList &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;st&quot;&gt;'collect.ptengine.cn'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;st&quot;&gt;'collect.ptengine.jp'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'js.ptengine.cn'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'js.ptengine.jp'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'hm.baidu.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'api.growingio.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'www.google-analytics.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'script.hotjar.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'vars.hotjar.com'&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//用来缓存第三方资源（包括css、javascript），在请求没有结束之前，无法获取完整的第三方资源列，无法保证css、javascript中内容替换完整，所以先缓存，请求结束后再统一替换&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; resourceBufferMap &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Map&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//第三方资源服务（域名）列表&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; thirdPartyList &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;puppeteer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;launch&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;browser&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;newPage&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//启用请求拦截&lt;/span&gt;
        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setRequestInterception&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;co&quot;&gt;//以博客园为例子进行页面抓取&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://www.cnblogs.com&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; docUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(url)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//获取请求地址的域名，用来确定资源是否来自第三方&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; originUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;docUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;//&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;docUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hostname&lt;/span&gt;)
        &lt;span class=&quot;co&quot;&gt;//@fixme 每次抓取生成的内容目录名称&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; md5_prefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;now&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;async&lt;/span&gt; (req) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; whitelist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'image'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'stylesheet'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'document'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'font'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//如果请求的是第三方域名，只考虑和页面构建相关的资源&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;indexOf&lt;/span&gt;(originUrl) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;whitelist&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resourceType&lt;/span&gt;())) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abort&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//采集黑名单中的内容不处理&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;blackList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;()).&lt;span class=&quot;at&quot;&gt;host&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abort&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;continue&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'response'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; async res &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                resourceUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                urlObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(resourceUrl)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                filePath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;urlObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//文件路径&lt;/span&gt;
                dirPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dirname&lt;/span&gt;(filePath)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//目录路径&lt;/span&gt;
                requestMethod &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;method&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//请求方法&lt;/span&gt;
                isSameOrigin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;resourceUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(originUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否是同域名请求&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//只考虑get请求资源，其它http verb 对文件资源请求较少&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (requestMethod &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//如果是同一个域名下的资源，则直接构建目录，下载文件&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//创建路径的方式依据请求本身path结构，保证和原资源网站目录结构完整统一，这样即使有CMD、AMD规范的代码再次执行，require相对路径也不会出现问题。&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; dirPathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; hostname &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;urlObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (isSameOrigin) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//构建同域名path&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//同域名的资源 有时会以//www.xxx.com/images/logo.png 这种方式使用，所以，对这种资源需要特殊处理&lt;/span&gt;
                    thirdPartyList[&lt;span class=&quot;vs&quot;&gt;`//&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    dirPathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dirPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    filePathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; filePath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//第三方资源构建正则表达式，替换http、https、// 三种模式路径为本地目录路径&lt;/span&gt;
                    thirdPartyList[&lt;span class=&quot;vs&quot;&gt;`(https?:)?//&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    dirPathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hostname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dirPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    filePathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hostname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; filePath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//获取扩展名 如果获取不到 则认为不是资源文件&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(filePathCreatedIfNotExists)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//路径不存在，直接创建多级目录&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;existsSync&lt;/span&gt;(dirPathCreatedIfNotExists)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;shell&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`mkdir -p &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;dirPathCreatedIfNotExists&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'create dir'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;()) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; ((isSameOrigin &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dirPath &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;isSameOrigin) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; needReplace &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'stylesheet'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'script'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//@fixme toString 可能会有编码问题&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fileContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (await &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;buffer&lt;/span&gt;()).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//第三方域名还获取，先缓存再处理&lt;/span&gt;
                            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;needReplace&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resourceType&lt;/span&gt;())) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;co&quot;&gt;//js css 文件中可能包含需要替换的内容，需要处理&lt;/span&gt;
                                &lt;span class=&quot;co&quot;&gt;//所以暂时缓存不写入文件&lt;/span&gt;
                                &lt;span class=&quot;va&quot;&gt;resourceBufferMap&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; fileContent)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                                &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;buffer&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goto&lt;/span&gt;(url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'networkidle0'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;content&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//对css javascript文件 进行替换处理&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;resourceBufferMap&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; thirdPartyList)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; value)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// html 内容处理&lt;/span&gt;
        content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(content&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; thirdPartyList)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`./asserts/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;md5_prefix&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/index.html`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; content)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;close&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        await &lt;span class=&quot;va&quot;&gt;browser&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;close&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;catch&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(origin&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; regList) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; prop &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; regList) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//进行正则全局替换&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; reg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;RegExp&lt;/span&gt;(prop&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'g'&lt;/span&gt;)
        origin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;origin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(reg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; regList[prop])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; origin&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;at&quot;&gt;start&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;上述方案能解决几乎所有原始方案无法解决的问题，但是也并非十全十美，首选，相比原始方案，增加了渲染的步骤，所以性能有所下降；其次如果用户网站比较特殊，比如https://www.xxx.com/admin 这个路径下资源，比如某css文件中有如下写法：'background:url('./xxx.bg.png')' ，这时路径会找不到，因为在资源路径替换阶段，会替换为hostname，即查找资源是会去根目录去找，导致路径not found，不过这有其它改进的方案，比如可以把同域名的路径做的更灵活一点，可以让接口消费者修改。&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 14:59:00 +0000</pubDate>
<dc:creator>JerremyZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Johnzhang/p/9061998.html</dc:identifier>
</item>
<item>
<title>特征工程之特征表达 - 刘建平Pinard</title>
<link>http://www.cnblogs.com/pinard/p/9061549.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pinard/p/9061549.html</guid>
<description>&lt;p&gt;          在&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/pinard/p/9032759.html&quot;&gt;特征工程之特征选择&lt;/a&gt;中，我们讲到了特征选择的一些要点。本篇我们继续讨论特征工程，不过会重点关注于特征表达部分，即如果对某一个特征的具体表现形式做处理。主要包括缺失值处理，特殊的特征处理比如时间和地理位置处理，离散特征的连续化和离散化处理，连续特征的离散化处理几个方面。&lt;/p&gt;

&lt;p&gt;          特征有缺失值是非常常见的，大部分机器学习模型在拟合前需要所有的特征都有值，不能是空或者NULL。那么如果有缺失值我们需要怎么处理呢？&lt;/p&gt;
&lt;p&gt;　　   首先我们会看是该特征是连续值还是离散值。如果是连续值，那么一般有两种选择，一是选择所有有该特征值的样本，然后取平均值，来填充缺失值，另一种是取中位数来填充缺失值。如果是离散值，则一般会选择所有有该特征值的样本中最频繁出现的类别值，来填充缺失值。在sklearn中，可以使用preprocessing.Imputer来选择这三种不同的处理逻辑做预处理。&lt;/p&gt;

&lt;p&gt; 　　有些特征的默认取值比较特殊，一般需要做了处理后才能用于算法。比如日期时间，比如显示20180519，这样的值一般没办法直接使用。那么一般需要如何变换呢？&lt;/p&gt;
&lt;p&gt;        对于时间原始特征，处理方法有很多，这里只举例几种有代表性的方法。　第一种是使用连续的时间差值法，即计算出所有样本的时间到某一个未来时间之间的数值差距，这样这个差距是UTC的时间差，从而将时间特征转化为连续值。第二种方法是根据时间所在的年，月，日，星期几，小时数，将一个时间特征转化为若干个离散特征，这种方法在分析具有明显时间趋势的问题比较好用。第三种是权重法，即根据时间的新旧得到一个权重值。比如对于商品，三个月前购买的设置一个较低的权重，最近三天购买的设置一个中等的权重，在三个月内但是三天前的设置一个较大的权重。当然，还有其他的设置权重的方法，这个要根据要解决的问题来灵活确定。&lt;/p&gt;
&lt;p&gt;       对地理特征，比如“广州市天河区XX街道XX号”，这样的特征我们应该如何使用呢？处理成离散值和连续值都是可以的。如果是处理成离散值，则需要转化为多个离散特征，比如城市名特征，区县特征，街道特征等。但是如果我们需要判断用户分布区域，则一般处理成连续值会比较好，这时可以将地址处理成经度和纬度的连续特征。&lt;/p&gt;

&lt;p&gt;　　  有很多机器学习算法只能处理连续值特征，不能处理离散值特征，比如线性回归，逻辑回归等。那么想使用逻辑回归，线性回归时这些值只能丢弃吗？当然不是。我们可以将离散特征连续化处理。&lt;/p&gt;
&lt;p&gt;　　 最常见的离散特征连续化的处理方法是独热编码one-hot encoding。处理方法其实比较简单，比如某特征的取值是高，中和低，那么我们就可以创建三个取值为0或者1的特征，将高编码为1,0,0这样三个特征，中编码为0,1,0这样三个特征，低编码为0,0,1这样三个特征。也就是说，之前的一个特征被我们转化为了三个特征。sklearn的OneHotEncoder可以帮我们做这个处理。&lt;/p&gt;
&lt;p&gt;　　 第二个方法是特征嵌入embedding。这个一般用于深度学习中。比如对于用户的ID这个特征，如果要使用独热编码，则维度会爆炸，如果使用特征嵌入就维度低很多了。对于每个要嵌入的特征，我们会有一个特征嵌入矩阵，这个矩阵的行很大，对应我们该特征的数目。比如用户ID，如果有100万个，那么嵌入的特征矩阵的行就是100万。但是列一般比较小，比如可以取20。这样每个用户ID就转化为了一个20维的特征向量。进而参与深度学习模型。在tensorflow中，我们可以先随机初始化一个特征嵌入矩阵，对于每个用户，可以用tf.nn.embedding_lookup找到该用户的特征嵌入向量。特征嵌入矩阵会在反向传播的迭代中优化。&lt;/p&gt;
&lt;p&gt;　　 此外，在自然语言处理中，我们也可以用word2vec将词转化为词向量，进而可以进行一些连续值的后继处理。&lt;/p&gt;

&lt;p&gt;　　 离散特征有时间也不能直接使用，需要先进行转化。比如最常见的，如果特征的取值是高，中和低，那么就算你需要的是离散值，也是没法直接使用的。&lt;/p&gt;
&lt;p&gt;　　 对于原始的离散值特征，最常用的方法也是独热编码，方法在第三节已经讲到。&lt;/p&gt;
&lt;p&gt;　　 第二种方法是虚拟编码dummy coding，它和独热编码类似，但是它的特点是，如果我们的特征有N个取值，它只需要N-1个新的0,1特征来代替，而独热编码会用N个新特征代替。比如一个特征的取值是高，中和低，那么我们只需要两位编码，比如只编码中和低，如果是1，0则是中，0,1则是低。0,0则是高了。目前虚拟编码使用的没有独热编码广，因此一般有需要的话还是使用独热编码比较好。&lt;/p&gt;
&lt;p&gt;　　 此外，有时候我们可以对特征进行研究后做一个更好的处理。比如，我们研究商品的销量对应的特征。里面有一个原始特征是季节春夏秋冬。我们可以将其转化为淡季和旺季这样的二值特征，方便建模。当然有时候转化为三值特征或者四值特征也是可以的。&lt;/p&gt;
&lt;p&gt;　　 对于分类问题的特征输出，我们一般需要用sklearn的LabelEncoder将其转化为0,1,2，...这样的类别标签值。&lt;/p&gt;

&lt;p&gt;　　 对于连续特征，有时候我们也可以将其做离散化处理。这样特征变得高维稀疏，方便一些算法的处理。&lt;/p&gt;
&lt;p&gt;　　 对常用的方法是根据阈值进行分组，比如我们根据连续值特征的分位数，将该特征分为高，中和低三个特征。将分位数从0-0.3的设置为高，0.3-0.7的设置为中，0.7-1的设置为高。&lt;/p&gt;
&lt;p&gt;　　 当然还有高级一些的方法。比如使用GBDT。在LR+GBDT的经典模型中，就是使用GDBT来先将连续值转化为离散值。那么如何转化呢？比如我们用训练集的所有连续值和标签输出来训练GBDT，最后得到的GBDT模型有两颗决策树，第一颗决策树有三个叶子节点，第二颗决策树有4个叶子节点。如果某一个样本在第一颗决策树会落在第二个叶子节点，在第二颗决策树落在第4颗叶子节点，那么它的编码就是0,1,0,0,0,0,1，一共七个离散特征，其中会有两个取值为1的位置，分别对应每颗决策树中样本落点的位置。在sklearn中，我们可以用GradientBoostingClassifier的 apply方法很方便的得到样本离散化后的特征，然后使用独热编码即可。 &lt;/p&gt;
&lt;p&gt;         具体的一个示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.datasets &lt;span&gt;import&lt;/span&gt;&lt;span&gt; make_classification
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.model_selection &lt;span&gt;import&lt;/span&gt;&lt;span&gt; train_test_split
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.ensemble &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GradientBoostingClassifier
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; OneHotEncoder
X, y &lt;/span&gt;= make_classification(n_samples=10&lt;span&gt;)  
X_train, X_test, y_train, y_test &lt;/span&gt;= train_test_split(X, y, test_size=0.5&lt;span&gt;)
gbc &lt;/span&gt;= GradientBoostingClassifier(n_estimators=2&lt;span&gt;)
one_hot &lt;/span&gt;=&lt;span&gt; OneHotEncoder()
gbc.fit(X_train, y_train)
X_train_new &lt;/span&gt;=&lt;span&gt; one_hot.fit_transform(gbc.apply(X_train)[:, :, 0])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (X_train_new.todense())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       输出是：&lt;/p&gt;
&lt;pre&gt;
[[0. 1. 1. 0.]
 [1. 0. 0. 1.]
 [1. 0. 0. 1.]
 [1. 0. 0. 1.]
 [0. 1. 1. 0.]]
&lt;/pre&gt;

&lt;p&gt;       本文总结了特征表达的一些具体方法， 但是特征表达的方法便不止于上文中的方法，毕竟这是工程实践。但是上文中的方法是比较普遍的，希望可以给大家一些帮助和启发。 下一篇我们讨论特征预处理和分类类别不平衡的问题处理。&lt;/p&gt;

&lt;p&gt;（欢迎转载，转载请注明出处。欢迎沟通交流： liujianping-ok@163.com）      　　　　　　　&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 14:39:00 +0000</pubDate>
<dc:creator>刘建平Pinard</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pinard/p/9061549.html</dc:identifier>
</item>
<item>
<title>springMVC引入Validation详解 - 倒骑的驴</title>
<link>http://www.cnblogs.com/daoqidelv/p/9061862.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daoqidelv/p/9061862.html</guid>
<description>&lt;p&gt;本文简单介绍如何引入validation的步骤，如何通过自定义validation减少代码量，提高生产力。特别提及：非基本类型属性的valid，GET方法的处理，validation错误信息的统一resolve。&lt;/p&gt;
&lt;p&gt;本文中validation的实际实现委托给Hibernate validation处理&lt;/p&gt;
&lt;h2&gt;基本配置&lt;/h2&gt;
&lt;h3&gt;pom引入maven依赖&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- validation begin --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.1.0.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.4.0.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- validation end --&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3&gt;增加validation配置&lt;/h3&gt;
&lt;p&gt;在spring-mvc-servlet.xml中增加如下配置:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;mvc:annotation-driven validator=&quot;validator&quot;&amp;gt;

&amp;lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&amp;gt;
    &amp;lt;property name=&quot;providerClass&quot; value=&quot;org.hibernate.validator.HibernateValidator&quot; /&amp;gt;
    &amp;lt;property name=&quot;validationMessageSource&quot; ref=&quot;messageSource&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
 
//messageSource 为i18n资源管理bean，见applicationContext.xml配置
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3&gt;自定义exceptionHandler&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;个性化处理validation错误信息,返回给调用方的信息更加友好，&lt;/span&gt;在applicationContext.xml中增加如下配置:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;!--  加载i18n消息资源文件 --&amp;gt;
&amp;lt;bean id=&quot;messageSource&quot;  class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&amp;gt;
    &amp;lt;property name=&quot;basenames&quot;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;value&amp;gt;errormsg&amp;lt;/value&amp;gt;
            &amp;lt;value&amp;gt;validation_error&amp;lt;/value&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&quot;validationExceptionResolver&quot; class=&quot;com.*.exception.ValidationExceptionResovler&quot;/&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;在项目类路径上增加：validation_error_zh_CN.properties资源文件：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;pre&gt;
#the error msg for input validation&lt;br/&gt;#common
field.can.not.be.null={field}不能为空
field.can.not.be.empty={field}不能为空或者空字符串
field.must.be.greater.than.min={field}不能小于{value}
field.must.be.letter.than.max={field}不能大于{value}
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;pre&gt;
ValidationExceptionResovler实现：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3509fe04-5f91-4052-adff-c5c04af82686')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3509fe04-5f91-4052-adff-c5c04af82686',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Slf4j
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ValidationExceptionResovler &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractHandlerExceptionResolver {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValidationExceptionResovler() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置order，在DefaultHandlerExceptionResolver之前执行&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.setOrder(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * Handle the case where an argument annotated with {&lt;/span&gt;&lt;span&gt;@code&lt;/span&gt;&lt;span&gt; @Valid} such as
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     * an {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; } or {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; } argument fails validation.
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 自定义ValidationException 异常处理器
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     * 获取到具体的validation 错误信息，并组装CommonResponse，返回给调用方。
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request  current HTTP request
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response current HTTP response
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; handler  the executed handler
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; an empty ModelAndView indicating the exception was handled
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException potentially thrown from response.sendError()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ModelAndView handleMethodArgumentNotValidException(BindingResult bindingResult,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                                                                 HttpServletRequest request,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                                                                 HttpServletResponse response,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                                                                 Object handler)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         List&amp;lt;ObjectError&amp;gt; errors =&lt;span&gt; bindingResult.getAllErrors();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         StringBuffer errmsgBF = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ObjectError error : errors) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             String massage =&lt;span&gt; error.getDefaultMessage();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            errmsgBF.append(massage);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             errmsgBF.append(&quot;||&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         String errmsgString =&lt;span&gt; errmsgBF.toString();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         errmsgString = errmsgString.length() &amp;gt; 2 ? errmsgString.substring(0, errmsgString.length() - 2&lt;span&gt;) : errmsgString;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         log.error(&quot;Validation failed! {} &quot;&lt;span&gt;, errmsgString);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;         Map&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;String, Object&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         map.put(&quot;success&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         map.put(&quot;errorCode&quot;, &quot;9999&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         map.put(&quot;errorMsg&quot;&lt;span&gt;, errmsgString);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         ModelAndView mav = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         MappingJackson2JsonView view = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MappingJackson2JsonView();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        view.setAttributesMap(map);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        mav.setView(view);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mav;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ModelAndView doResolveException(HttpServletRequest request,
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                                              HttpServletResponse response, Object handler,
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                                              Exception ex) {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         BindingResult bindingResult = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ex &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; MethodArgumentNotValidException) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             bindingResult =&lt;span&gt; ((MethodArgumentNotValidException) ex).getBindingResult();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ex &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BindException) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             bindingResult =&lt;span&gt; ((BindException) ex).getBindingResult();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;other exception , ignore&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(bindingResult != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handleMethodArgumentNotValidException(bindingResult, request, response, handler);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 log.error(&quot;doResolveException: &quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ValidationExceptionResovler.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;在controller中增加@Valid&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/buy&quot;&lt;span&gt;)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse buy(@RequestBody @Valid BuyFlowerRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在request bean上为需要validation的属性增加validation注解&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Setter
@Getter
public class BuyFlowerRequest {

    @NotEmpty(message = &quot;{name.can.not.be.null}&quot;) &lt;br/&gt;private String name;&lt;br/&gt;} 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二级对象的validation&lt;/h2&gt;
&lt;p&gt;上面的写法，只能对BuyFlowerRequest在基本类型属性上做校验,但是没有办法对对象属性的属性进行validation,如果需要对二级对象的属性进行validation,则需要在二级对象及二级对象属性上同时添加@Valid 和 具体的validation注解.&lt;/p&gt;
&lt;p&gt;如下写法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1c8117cd-a740-45d8-a9d5-ed51c288afdb')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1c8117cd-a740-45d8-a9d5-ed51c288afdb',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BuyFlowerRequest {

    @NotEmpty(field &lt;/span&gt;= &quot;花名&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    @Min(field &lt;/span&gt;= &quot;价格&quot;, value = 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;

    @NotNull
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;PayType&amp;gt;&lt;span&gt; payTypeList;

} 

@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PayType {

    @Valid
    @Min(value &lt;/span&gt;= 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; payType;

    @Valid
    @Min(value &lt;/span&gt;= 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; payAmount;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt; &lt;/div&gt;
&lt;h2&gt;进一步减少编码量&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了减少编码工作量,通过自定义Validation注解,尝试将validation作用的filed名称传递到 错误信息的资源文件中,从而避免为每个域编写不同的message模版.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面以重写的@NotNull为例讲解:&lt;/p&gt;
&lt;p&gt;1、定义Validation注解,注意相比原生注解增加了field(),用于传递被validated的filed名字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('26503447-25f3-4ea6-9690-8c3da66a5ee5')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('26503447-25f3-4ea6-9690-8c3da66a5ee5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target( { ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER })
@Constraint(validatedBy &lt;/span&gt;= { NotNullValidator.&lt;span&gt;class&lt;/span&gt;&lt;span&gt; })
@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; NotNull {

    String field() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;

    String message() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;{field.can.not.be.null}&quot;&lt;span&gt;;

    Class&lt;/span&gt;&amp;lt;?&amp;gt;[] groups() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {};

    Class&lt;/span&gt;&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Payload&amp;gt;[] payload() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {};
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NotNull.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2、定义Validator,所有的Validator均实现ConstraintValidator接口:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8652f8e4-81e7-4a3c-af44-907316e83127')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8652f8e4-81e7-4a3c-af44-907316e83127',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NotNullValidator &lt;span&gt;implements&lt;/span&gt; ConstraintValidator&amp;lt;NotNull, Object&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize(NotNull annotation) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isValid(Object str, ConstraintValidatorContext constraintValidatorContext) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; str != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NotNullValidator.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;3、在filed上加入Validation注解,注意指定filed值,message如果没有个性化需求，可以不用指明，validation组件会自行填充default message。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8e46a364-07c2-4ba9-b142-54956c4ec3c0')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8e46a364-07c2-4ba9-b142-54956c4ec3c0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BuyFlowerRequest {

    @NotEmpty(field &lt;/span&gt;= &quot;花名&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    @Min(field &lt;/span&gt;= &quot;价格&quot;, value = 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;

} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;BuyFlowerRequest.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;注：@NotNull注解已经支持对list的特殊校验，对于List类型节点，如果list==null || list.size() == 0都会返回false，validation失败。目前已按照此思路自定义实现了@NotNull、@NotEmpty、@Min、@Max注解,在goods工程中可以找到.&lt;/p&gt;
&lt;h2&gt;支持GET请求&lt;/h2&gt;
&lt;p&gt;上面的示例都是POST请求，@RequestBody可以 resolve POST请求，但是不支持GET请求，阅读spring的文档和源码，发现@ModelAttribute可以将GET请求resolve成Bean，且支持Validation。具体可以翻阅spring源码：ModelAttributeMethodProcessor.resolveArgument()方法。&lt;/p&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e5f849b2-cdcf-4609-9bc5-001e89d35f82')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e5f849b2-cdcf-4609-9bc5-001e89d35f82',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
@RequestMapping(value = &quot;/buy&quot;, method =&lt;span&gt; RequestMethod.GET)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse detail(@Valid @ModelAttribute DetailFlowerRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

    DetailFlowerResponse response &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DetailFlowerResponse();
    response.setName(request.getName());

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ResultFactory.success(response, BaseResponse.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、根据业务场景扩展validation,如:日期格式、金额等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、支持多个field关系校验的validation&lt;/p&gt;
&lt;h2&gt; 附：spring validation实现关键代码&lt;/h2&gt;
&lt;p&gt;@RequestBody&lt;/p&gt;
&lt;p&gt;实现类：RequestResponseBodyMethodProcessor.java&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {&lt;br/&gt;Object arg = this.readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType());&lt;br/&gt;String name = Conventions.getVariableNameForParameter(parameter);&lt;br/&gt;WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);&lt;br/&gt;if (arg != null) {&lt;br/&gt;&lt;strong&gt;this.validateIfApplicable(binder, parameter);&lt;/strong&gt;&lt;br/&gt;if (binder.getBindingResult().hasErrors() &amp;amp;&amp;amp; this.isBindExceptionRequired(binder, parameter)) {&lt;br/&gt;throw new MethodArgumentNotValidException(parameter, binder.getBindingResult());&lt;br/&gt;}&lt;br/&gt;}&lt;p&gt;mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());&lt;br/&gt;return arg;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;@ModelAttibute&lt;/p&gt;
&lt;p&gt;实现类：ModelAttributeMethodProcessor.java&lt;/p&gt;
&lt;blockquote readability=&quot;31.5&quot;&gt;
&lt;pre readability=&quot;22&quot;&gt;
public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {&lt;br/&gt;String name = ModelFactory.getNameForParameter(parameter);&lt;br/&gt;Object attribute = mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) : this.createAttribute(name, parameter, binderFactory, webRequest);&lt;br/&gt;if (!mavContainer.isBindingDisabled(name)) {&lt;br/&gt;ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class);&lt;br/&gt;if (ann != null &amp;amp;&amp;amp; !ann.binding()) {&lt;br/&gt;mavContainer.setBindingDisabled(name);&lt;br/&gt;}&lt;br/&gt;}&lt;p&gt;WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);&lt;br/&gt;if (binder.getTarget() != null) {&lt;br/&gt;if (!mavContainer.isBindingDisabled(name)) {&lt;br/&gt;this.bindRequestParameters(binder, webRequest);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;strong&gt; this.validateIfApplicable(binder, parameter);&lt;/strong&gt;&lt;br/&gt;if (binder.getBindingResult().hasErrors() &amp;amp;&amp;amp; this.isBindExceptionRequired(binder, parameter)) {&lt;br/&gt;throw new BindException(binder.getBindingResult());&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;Map&amp;lt;String, Object&amp;gt; bindingResultModel = binder.getBindingResult().getModel();&lt;br/&gt;mavContainer.removeAttributes(bindingResultModel);&lt;br/&gt;mavContainer.addAllAttributes(bindingResultModel);&lt;br/&gt;return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;

</description>
<pubDate>Sat, 19 May 2018 14:33:00 +0000</pubDate>
<dc:creator>倒骑的驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daoqidelv/p/9061862.html</dc:identifier>
</item>
</channel>
</rss>