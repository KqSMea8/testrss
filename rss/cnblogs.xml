<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Java 并发基础——线程安全性 - NeilZhang</title>
<link>http://www.cnblogs.com/NeilZhang/p/8682266.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeilZhang/p/8682266.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;当线程安全：&lt;/strong&gt;多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协调，这个类都能表现出正确的行为，那么久称这个类是线程安全的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在线程安全类中封装了必要的同步机制，因此客户端无需采取进一步的同步措施。&lt;/p&gt;
&lt;h3&gt;原子性&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;要么不执行，要么执行到底。原子性就是当某一个线程修改i的值的时候，&lt;span&gt;从取出i到将新的i的值写给i之间不能有其他线程对i进行任何操作。&lt;/span&gt;也就是说保证某个线程对i&lt;span&gt;的操作是原子性的&lt;/span&gt;，这样就可以避免数据脏读。 通过锁机制或者CAS（Compare And Set 需要硬件CPU的支持）操作可以保证操作的原子性。&lt;/p&gt;
&lt;p&gt;当多个线程访问某个状态变量，并且其中有一个线程执行写入操作时，必须采用同步机制来协调这些线程对变量的访问。&lt;span&gt;无状态对象一定是线程安全的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  如果我们在无状态的对象中增加一个状态时，会出现什么情况呢？假设我们按照以下方式在servlet中增加一个&quot;命中计数器&quot;来管理请求数量：在servlet中增加一个long类型的域，每处理一个请求就在这个值上加1。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UnsafeCountingFactorizer &lt;span&gt;implements&lt;/span&gt; Servlet {
     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; count = 0;

     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; getCount() {
            &lt;span&gt;return&lt;/span&gt; count ;
     }

     @Override
     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; service(ServletRequest arg0, ServletResponse arg1)
                 &lt;span&gt;throws&lt;/span&gt; ServletException, IOException {
            &lt;span&gt;// do something&lt;/span&gt;
           count++;
     }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不幸的是，以上代码不是线程安全的，因为count++并非是原子操作，实际上，它包含了三个独立的操作：读取count的值，将值加1，然后将计算结果写入count。如果线程A读到count为10，马上线程B读到count也为10，线程A加1写入后为11，线程B由于已经读过count值为10，执行加1写入后依然为11，这样就丢失了一次计数。&lt;/p&gt;
&lt;p&gt;        在 count++例子中线程不安全是因为 count++并非原子操作，我们可以使用原子类，确保确保操作是原子，这样这个类就是线程安全的了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CountingFactorizer &lt;span&gt;implements&lt;/span&gt; Servlet {
     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AtomicLong count = &lt;span&gt;new&lt;/span&gt; AtomicLong(0);

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; getCount() {
          &lt;span&gt;return&lt;/span&gt; count .get() ;
   }

    @Override
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; service(ServletRequest arg0, ServletResponse arg1)
               &lt;span&gt;throws&lt;/span&gt; ServletException, IOException {
          &lt;span&gt;// do something&lt;/span&gt;
          count.incrementAndGet();
   }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       AtomicLong是java.util.concurrent.atomic包中的原子变量类，它能够实现原子的自增操作，这样就是线程安全的了。   同样，上述情况还会出现在 单例模式的懒加载过程中，当多个线程同时访问 getInstance()函数时。这篇文章中有讲解：&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/7979629.html&quot;&gt;实现优雅的单例模式&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;加锁机制&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;      线程在执行被synchronized修饰的代码块时，首先检查是否有其他线程持有该锁，如果有则阻塞等待，如果没有则持有该锁，并在执行完之后释放该锁。&lt;/p&gt;
&lt;p&gt;      除了使用原子变量的方式外，我们也可以通过加锁的方式实现线程安全性。还是UnsafeCountingFactorizer，我们只要在它的service方法上增加synchronized关键字，那么它就是线程安全的了。当然在整个方法中加锁在这里是效率很低的，因为我们只需要保证count++操作的原子性，所以这里只对count++进行了加锁，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UnsafeCountingFactorizer &lt;span&gt;implements&lt;/span&gt; Servlet {
     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; count = 0;

     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; getCount() {
            &lt;span&gt;return&lt;/span&gt; count ;
     }

     @Override
     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; service(ServletRequest arg0, ServletResponse arg1)
                 &lt;span&gt;throws&lt;/span&gt; ServletException, IOException {
            &lt;span&gt;// do something&lt;/span&gt;
           &lt;span&gt;synchronized&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;){
               count++;
          }
     }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Synchronized代码块使得一段程序的执行具有 原子性，即每个时刻只能有一个线程持有这个代码块，多个线程执行在执行时会互不干扰。&lt;/p&gt;
&lt;h3&gt;java 内存模型及 可见性&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;     的内存模型没有上面这么简单，在Java Memory Model中，Memory分为两类，main memory和working memory，main memory为所有线程共享，working memory中存放的是线程所需要的变量的拷贝（线程要对main memory中的内容进行操作的话，首先需要拷贝到自己的working memory，一般为了速度，working memory一般是在cpu的cache中的）。&lt;span&gt;被volatile修饰的变量在被操作的时候不会产生working memory的拷贝，&lt;/span&gt;而是直接操作main memory，当然volatile虽然解决了变量的可见性问题，但没有解决变量操作的原子性的问题，这个还需要synchronized或者CAS相关操作配合进行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ifeve.com/wp-content/uploads/2013/01/113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每个线程内部都保有共享变量的副本，当一个线程更新了这个共享变量，另一个线程可能看的到，可能看不到，这就是可见性问题。&lt;/p&gt;
&lt;p&gt;下面这段代码中 main 线程中 改变了 ready的值，当开启多个子线程时，子线程的值并不是马上就刷新为最新的ready的值（这里的中间刷新的时间间隔到底是多长，或者子线程的刷新机制，自己也不太清楚。当开启一个线程去执行时，ready值改变时就会立刻刷新，循环立刻就结束，但是当开启多个线程时，就会有一定的延迟）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SelfTest {
    &lt;span&gt;private&lt;/span&gt;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; ready;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; number;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; time;

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ReadThread &lt;span&gt;extends&lt;/span&gt; Thread {
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; run() {
            &lt;span&gt;while&lt;/span&gt;(!ready ){
                System. out.println(&quot;&lt;span&gt;*******  &lt;/span&gt;&quot;+Thread.currentThread()+&quot;&quot;+number);
                Thread. yield();
            }
            System. out.println(number+&quot;&lt;span&gt;   currentThread: &lt;/span&gt;&quot;+Thread.currentThread());
        }
    }
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String [] args) {
        time = System.currentTimeMillis();
        &lt;span&gt;new&lt;/span&gt; ReadThread().start();
        &lt;span&gt;new&lt;/span&gt; ReadThread().start();
        &lt;span&gt;new&lt;/span&gt; ReadThread().start();
        &lt;span&gt;new&lt;/span&gt; ReadThread().start();
        &lt;span&gt;try&lt;/span&gt; {
            Thread.sleep(10);
        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.printStackTrace();
        }
        number = 42;
        ready = &lt;span&gt;true&lt;/span&gt; ;
        System.out.println(&quot;&lt;span&gt;赋值时间：ready = true     &lt;/span&gt;&quot;);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段代码的执行结果：可以看出赋值后，循环还是执行了几次。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201803/918077-20180331150627428-2129903134.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201803/918077-20180331150627923-46459941.png&quot; alt=&quot;image&quot; width=&quot;318&quot; height=&quot;168&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此时如果把 ready的属性加上 volatile 结果便是如下的效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201803/918077-20180331150628537-319702060.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201803/918077-20180331150629092-1867021200.png&quot; alt=&quot;image&quot; width=&quot;414&quot; height=&quot;206&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由此可见Volatile可以解决内存可见性的问题。&lt;/p&gt;
&lt;p&gt;上面讲的加锁机制同样可以解决内存可见性的问题，加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。&lt;/p&gt;
&lt;p&gt;注：由于System.out.println的执行仍然需要时间，所以这面打印的顺序还是可能出现错乱。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;http://www.mamicode.com/info-detail-245652.html&quot; href=&quot;http://www.mamicode.com/info-detail-245652.html&quot;&gt;http://www.mamicode.com/info-detail-245652.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并发编程实战&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;http://www.cnblogs.com/NeilZhang/p/7979629.html&quot; href=&quot;http://www.cnblogs.com/NeilZhang/p/7979629.html&quot;&gt;http://www.cnblogs.com/NeilZhang/p/7979629.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 07:08:00 +0000</pubDate>
<dc:creator>NeilZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeilZhang/p/8682266.html</dc:identifier>
</item>
<item>
<title>【WCF系列】（二）设计和实现服务协定 - 进击的辣条</title>
<link>http://www.cnblogs.com/wyt007/p/8682259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyt007/p/8682259.html</guid>
<description>&lt;h2&gt; 设计和实现服务协定&lt;/h2&gt;
&lt;h3&gt;WCF术语介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;服务(Service)&lt;/strong&gt;：服务是一个构造，它公开一个或多个终结点，其中每个终结点都公开一个或多个服务操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终结点(EndPoint)&lt;/strong&gt;：终结点是用来发送或接收消息（或执行这两种操作）的构造。终结点包括一个定义消息可以发送到的目的地的位置（地址）、一个描述消息应如何发送的通信机制规范（绑定）以及对于可以在该位置发送或接收（或两者皆可）的一组消息的定义（服务协定）— 该定义还描述了可以发送何种消息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应用程序终结点&lt;/strong&gt;：一个终结点，由应用程序公开并对应于该应用程序实现的服务协定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础结构终结点&lt;/strong&gt;：一个终结点，由基础结构公开，以便实现与服务协定无关的服务需要或提供的功能。 例如，服务可能拥有一个提供元数据信息的基础结构终结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址(Adress)&lt;/strong&gt;：地址指定接收消息的位置。 地址以统一资源标识符 (URI) 的形式指定。 URI 架构部分指定用于到达该地址的传输机制，如 HTTP 和 TCP。 URI 的层次结构部分包含一个唯一的位置，其格式取决于传输机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定(Binding)&lt;/strong&gt;：绑定定义终结点与外界进行通信的方式。它由一组称为绑定元素的要素构造而成，这些元素“堆叠”在一起以形成通信基础结构。 绑定最起码应定义传输协议（如HTTP 或 TCP）和所使用的编码（如文本或二进制）。 绑定可以包含指定详细信息（例如，用于保护消息的安全机制或终结点所使用的消息模式）的绑定元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务协定&lt;/strong&gt;：服务协定将多个相关的操作联系在一起，组成单个功能单元。 协定可以定义服务级设置，如服务的命名空间、对应的回调协定以及其他此类设置。 在大多数情况下，协定是通过用您所选的编程语言创建一个接口并将 ServiceContractAttribute 属性应用于该接口来定义的。 通过实现该接口，可生成实际的服务代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作协定&lt;/strong&gt;：操作协定定义参数并返回操作的类型。 在创建定义服务协定的接口时，可以通过将 OperationContractAttribute 属性应用于协定中包含的每个方法定义来表示一个操作协定。 可以将操作建模为采用单个消息作为参数并返回单个消息，或者建模为采用一组类型作为参数并返回一个类型。 在后一种情况下，系统将确定需要为该操作交换的消息的格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宿主&lt;/strong&gt;：服务必须承载于某个进程中。 “宿主”是控制服务的生存期的应用程序。 服务可以是自承载的，也可以由现有的宿主进程进行管理。&lt;/p&gt;
&lt;h3&gt;创建服务协定&lt;/h3&gt;
&lt;p&gt;类或接口都可以定义服务协定（但是建议使用接口，因为接口可以直接对服务协定建模）&lt;/p&gt;
&lt;p&gt;服务协定接口具有托管接口的所有优点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;服务协定接口可以扩展任何数量的其他服务协定接口。

一个类可以通过实现服务协定接口来实现任意数量的服务协定。

可以通过更改接口实现来修改服务协定的实现，而让服务协定保持不变。 持不变。

可以通过实现旧接口和新接口来确定服务的版本。 老客户端连接到原始版本，而新客户端则可以连接到较新的版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;定义服务协定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在类或接口上使用ServiceContractAttribute属性标记&lt;br/&gt;&lt;strong&gt;定义服务操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在方法上使用OtiCttAttibt属性对其进行标记 – 在方法上使用OperationContractAttribute属性对其进行标记&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数和返回值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　每个操作都有一个返回值和一个参数 即使它们为void 可以使用局部方法将对对象的引用从一个对象传递到另一个对象，但与局部方法不同的是，服务操作不会传递对对象的引用， 它们传递的只是对象的副本。&lt;/p&gt;
&lt;p&gt;　　这是因为参数或返回值中使用的每个类型都必须是可序列化的，换言之，该类型的对象必须能够转换为字节流， 是可序列化的。&lt;/p&gt;
&lt;p&gt;　　默认情况下，基元类型是可序列化的，.NET Framework 中的很多类型都是可序列化的&lt;/p&gt;
&lt;h4&gt;创建服务协定一：请求/响应&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991704/201803/991704-20180331130010618-1163152171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;创建服务协定二：单向传输&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991704/201803/991704-20180331130053408-351149644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;创建服务协定三：双向传输&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/991704/201803/991704-20180331130131528-2062404586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;数据协定&lt;/h4&gt;
&lt;p&gt; 数据协定：是服务协定的一部分用于描述您的服务操作交换的数据是服务协定的一部分，用于描述您的服务操作交换的数据。&lt;/p&gt;
&lt;p&gt;一般使用DataContractAttribute和DataMemberAttribute属性对您的类型进行标记。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bd809955-c3ac-468d-8f37-9ea655bc85d9')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_bd809955-c3ac-468d-8f37-9ea655bc85d9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd809955-c3ac-468d-8f37-9ea655bc85d9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bd809955-c3ac-468d-8f37-9ea655bc85d9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd809955-c3ac-468d-8f37-9ea655bc85d9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; [DataContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CompositeType
    {
        &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; boolValue = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; stringValue = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        [DataMember]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; BoolValue
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; boolValue; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { boolValue =&lt;span&gt; value; }
        }

        [DataMember]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; StringValue
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; stringValue; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { stringValue =&lt;span&gt; value; }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;数据协定是可选的样式协定：除非您显式应用数据协定属性，否则不会序列化任何类型或数据成员&lt;/p&gt;
&lt;p&gt;数据协定与托管代码的访问范围无关：可以对私有数据成员进行序列 并将其发送到其他位置，以便可以公开访问它们&lt;/p&gt;
&lt;p&gt;WCF处理用于启用操作功能的基础SOAP消息的定义并处理数据类型到消息正文的序列化和从消息正文进行的反序列化。 数据类型一旦序列化，您就无需在设计操作时考虑基础消息交换基础结构&lt;/p&gt;
&lt;p&gt;可以使用其他序列化机制。 标准ISerializable, SerializableAttribute和IXmlSerializable 机制都可用于处理数据类型到基础SOAP消息序列化，这些消息可将数据类型从一个应用程序带到另一个应用程&lt;/p&gt;
&lt;h3&gt;引用方式传参&lt;/h3&gt;
&lt;p&gt;Out和Ref参数：由于out 和ref 参数都指示数据是从操作返回的，操作签名增加这2个关键字会使变更生效并返回&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[ServiceContract]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IMyContract
{
    [OperationContract]
    voidPopulateData(refCustomDataType data);
}      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留修改和方法返回值无关，即便是VOID&lt;br/&gt;如果操作是单向操作，则将在运行时引发InvalidOperationException 异常&lt;/p&gt;

</description>
<pubDate>Sat, 31 Mar 2018 07:05:00 +0000</pubDate>
<dc:creator>进击的辣条</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyt007/p/8682259.html</dc:identifier>
</item>
<item>
<title>js中非死循环引起的栈调用溢出问题 - james·von</title>
<link>http://www.cnblogs.com/rock-roll/p/8679280.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rock-roll/p/8679280.html</guid>
<description>&lt;p&gt;一般情况下，仅从代码上看只要不出现死循环，是不会出现堆栈调用溢出的。但是某些情况下列外，比如下面这段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; a = 99&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; b (){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     a --&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (a &amp;gt; 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        b();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        console.info(a);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;b();&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; =&amp;gt; 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这并不是死循环，当变量 a逐渐减少到0时，递归就终止了。乍一看是不会出现任何问题的，但是如果我们把 a增加到一个较大的数值，就会出现问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986162/201803/986162-20180331125251981-876849792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图所示，一个范围错误的异常抛了出来，我们被告知&quot;超过了最大栈调用大小&quot;，哈哈，如果业务代码里出现了针对大量数据的递归，后果可想而知。所有我们有必要知道js调用栈的一些特点。&lt;/p&gt;
&lt;p&gt;针对示例中 b函数来说，它的内部应用了外部作用域中的 a变量，形成了闭包，只要符合条件，它会一直被递归调用。而当b函数每一次被调用都会有新的闭包产生，为了记录对外部作用域中的变量引用，上一次因函数调用产生的栈帧不会从栈顶出去，导致栈中的栈帧超过了允许的数量而抛出栈调用溢出的异常。而js引擎（或者是其他计算机语言的解释器）设计这种限制的目的就是在于要控制程序对内存资源的使用量，如果无此限制，一个错误的代码就足以让计算机奔溃。在较为新版的Chrom中，调用大小在13000次左右，FireFox在60000次左右，Node.js在10000次左右。因版本不同可能限制不同，这个可以自行测试。&lt;/p&gt;
&lt;p&gt;针对js递归中容易出现栈调用溢出问题，是有解决办法的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用js事件循环机制来处理该问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;js最初就是被作为浏览器端语言而开发的，它能够和由排版引擎提供的DOM进行交互，为了表现的一致性，整个页面的排版引擎和js引擎是在唯一的一个线程里面跑的。可以这里理解：打开浏览器，就跑起了浏览器的进程。新建开一个tab、输入一个网址回车，就对应一个web页面，就为这个页面在这个浏览器进程中新起了一个线程，用来跑该页面的排版引擎和js引擎，再开一个tab也是如此，但是tab之前的线程相互独立，互不干扰，每个tab中的线程只负责自己页面的事物。这就是浏览器tab单线程来由，然而为了表现一致性而引入的单线程却带来了另外一个问题：阻塞。&lt;/p&gt;
&lt;p&gt;试想如果我在做一个xhr请求，在请求没回来之前，按照单线程阻塞的特点，页面是没有任何反应的，所有排版引擎的回流和重绘等都阻塞了，用户的点击事件也没法相应，动画全部停止，这简直就是噩梦。为了避免这个问题，js在设计之初就拥有一个事件循环（Event Loop）机制来使它的运行是非阻塞的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986162/201803/986162-20180331144138514-577316598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由上图可以看出在主线程之外其实还维护了一个队列，整个过程由上到下。我们使用setTimeout等异步定时器操作的函数都被推入了任务队列中，而不是在主线程里直接被运行了。当主线程的C过程中的同步任务被执行完后，在此刻主线程中的任务都被执行完，事件循环器会在任务队列中去查看是有任务需要执行的事件。这个事件的产生就是由任务队列中的任务执行完成后生成出的一个标记。如果任务队列中有需要执行的事件，那么将这个事件所对应的任务推回主线程中进行执行，如上图 A函数，A函数执行完成后或者在执行的过程中，主线程执行栈中又被压入了一个D过程的同步任务，在A函数执行后就开始执行D任务。当然数值都只是打个比方，不可能经过100毫秒、200毫秒就正好可以见缝插针。总之时间循环机制就是不停地定时查看主线程是否空闲，如果空闲，就去队列中找事情到主线中去做。也就是说异步的函数调用是不会阻塞的，除非是主线程同步任务自己阻塞了，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986162/201803/986162-20180331141059309-227850967.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中弹出alert，如果不点击确定，console的内容是永远不会出现的。因为alert(1)是在主线程中调用的，如果用户没有在浏览器上有任何点击弹出框确定按钮的动作，该同步任务一直在执行栈中处于挂起状态，主线程是一直阻塞着的，且无法进行下一个同步任务的执行。即便时间循环机制发现了事件队列中有任务到了需要执行的时间点，该任务的执行也会排在主线程阻塞完成之后。&lt;/p&gt;
&lt;p&gt;以上算是对js事件循环机制有个初步的概括，那么利用这一机制怎么来解决递归中可能会出现的调用栈溢出情况呢？&lt;/p&gt;
&lt;p&gt;通过上面的函数调用栈我们已经知道每次函数的调用如果有对外层内容的引用或依赖，本次函数调用时在调用栈中创建调用帧都会被保留。如果达到的最大调用大小还没有被清除，那么就会抛出异常。但是我们可以在每次调用的时候将对函数的递归调用放到异步方法中去，比如通过setTimeout方法，强行将函数的同步调用放到主线程以外的任务队列中，把主线程对函数调用的控制权交由更上一层的事件循环机制来处理。之前代码片段可以修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; a = 9999&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; b (){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     a --&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (a &amp;gt; 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         setTimeout(b, 4&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        console.info(a);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; b();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大概等了一会儿，控制台输出了0；实际测试中即便将a修改为99999，只要时间等的足够久也是能看到控制台打出东西的。&lt;/p&gt;
&lt;p&gt;通过setTimeout异步函数来调用b时，上一次当b函数被调用完成后，主线程的执行栈会清除掉该次调用栈帧，因为到setTimeout这里的时候，主线程执行栈已经知道b在主线的调用已经结束了，不需要为它保存任何记录，它被推入了主线程外的队列中去了，控制权由主线程交到了时间循环机制手里。既然调用栈帧每一次都会被清除，自然也不会出现调用栈达到最大值的异常了。当定时器到点时，就会在任务队列中产生一个事件，事件循环机制下一个到任务队列中取事件的时候，就会发现b函数现在可以被拿回到主线程中执行了。&lt;/p&gt;
&lt;p&gt;同时这也解释了为什么setTimeout和setIntervel异步调用的函数内容的this指向的是window对象，因为即便他们是处于某个对象的方法中，他们的调用也就是事件循环机制决定的，并不是主线程一手操控，和他们在被书写时候处于哪个对象内部并没有任何的关系。可以这样理解：其实是js引擎（对于页面作用域来说也就是window对象）调用了它们，而不是代码上的a对象调用的，所有this也自然不会指向a对象：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986162/201803/986162-20180331143540897-1966173936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;除了这个方法可以处理递归调用可能存在的调用栈溢出问题，还有&lt;a title=&quot;Tail Call&quot; href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot; target=&quot;_blank&quot;&gt;尾调用&lt;/a&gt;优化也能解决，在支持ES6的现代浏览器，只要函数是尾调用并开启 &lt;span class=&quot;cnblogs_code&quot;&gt;&quot;use strict&quot;&lt;/span&gt; 严格模式，就会在执行的时候被优化成循环方式来替换函数递归调用进行优化，避免巨量的调用帧出现且不能被清空的情况发生。在其他程序语言中也有此优化支持。&lt;/p&gt;
&lt;p&gt;在babel6以下版本，一代源代码符合尾调用，会被转译成while循环来避免因递归的深层级而引起的爆栈，但在后续babel6版本中被取消了，可能是因为while性能不佳也不被严格模式支持的原因。&lt;/p&gt;

</description>
<pubDate>Sat, 31 Mar 2018 06:53:00 +0000</pubDate>
<dc:creator>james&amp;#183;von</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rock-roll/p/8679280.html</dc:identifier>
</item>
<item>
<title>嘿，OCR文字识别了解下！ - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8681840.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8681840.html</guid>
<description>&lt;div class=&quot;image-block&quot; readability=&quot;7.0857142857143&quot;&gt;
&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;腾讯云&lt;/a&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦&lt;span lang=&quot;EN-US&quot;&gt;~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文由云+社区运营团队发布在腾讯云+社区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/dudggzbpjc.jpg?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;2018年3月27日腾讯云云+社区联合腾讯云智能图像团队共同在客户群举办了腾讯云OCR文字识别——智能图像分享活动，活动举办期间用户耐心听分享嘉宾的介绍，并提出了相关的问题，智能图像团队的科学家和工程师也耐心解答可用户的疑问。以下就是活动分享的全部内容。&lt;/p&gt;

&lt;p&gt;在日常生活工作中，我们难免会遇到一些问题，比如自己辛辛苦苦写完的资料，好不容易打印出来却发现源文件丢了。难的收集了一些名片，却要很麻烦的一个一个录入信息。快递公司的业务越来越好，但每天却需要花费很多时间登记录入运单，效率非常的低。&lt;/p&gt;
&lt;p&gt;那么，有没有什么技术能帮助我们解决这些难题呢？有的，那就是OCR文字识别技术。今天我们请到了腾讯云大数据AI产品中心的AI科学家冀永楠、产品经理Florali、陈英恬，高级工程师肖西华为咱们分享一下腾讯云近年来在这一领域的探索情况。&lt;/p&gt;
&lt;h2&gt;什么是OCR？&lt;/h2&gt;
&lt;p&gt;OCR 是实时高效的定位与识别图片中的所有文字信息，返回文字框位置与文字内容。支持多场景、任意版面下整 图文字的识别，以及中英文、字母、数字的识别。通俗的来说，就是将图片上的文字内容，智能识别成为可编辑的文本，例如：&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/brcsbu0i5n.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;OCR的技术原理是什么？&lt;/h2&gt;
&lt;p&gt;OCR本质是图像识别。其原理也和其他的图像识别问题基本一样。包含两大关键技术：文本检测和文字识别。先将图像中的特征的提取并检测目标区域，之后对目标区域的的字符进行分割和分类。&lt;/p&gt;
&lt;p&gt;以深度学习兴起的时间为分割点，直至近五年之前，业界最为广泛使用的仍然是传统的OCR识别技术框架，而随着深度学习的崛起，基于这一技术的OCR识别框架以另外一种新的思路迅速突破了原有的技术瓶颈（如文字定位、二值化和文字分割等），并已在工业界得到广泛应用。&lt;/p&gt;
&lt;p&gt;首先文本定位，接着进行倾斜文本矫正，之后分割出单字后，并对单字识别，最后基于统计模型（如隐马尔科夫链，HMM）进行语义纠错。&lt;/p&gt;
&lt;h2&gt;OCR技术的难点是什么？&lt;/h2&gt;
&lt;p&gt;复杂背景、艺术字体、低分辨率、非均匀光照、图像退化、字符形变、多语言混合、文本行复杂版式、检测框字符残缺，等等。&lt;/p&gt;
&lt;h3&gt;如克服这些难点的？&lt;/h3&gt;
&lt;p&gt;从几个方面入手。一是使用场景，另一方面是从技术上的改进腾讯优图实验室在文本检测技术方进行了深度优化，提出了Compact Inception，通过设计合理的网络结构来提升各尺度的文字检测／提取能力。同时引入RNN多层自适应网络和Refinement结构来提升检测完整性和准确性。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/1003483/803gvlmaw6.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;img&lt;/div&gt;
&lt;h2&gt;腾讯云OCR目前支持什么功能？&lt;/h2&gt;
&lt;p&gt;基于腾讯优图实验室世界领先的深度学习技术，目前我们已支持： 身份证识别，银行卡识别，名片识别，营业执照识别，行驶证驾驶证识别，车牌号识别，通用印刷体识别，手写体识别。&lt;/p&gt;
&lt;p&gt;大家可以扫文章头部的小程序二维码体验下我们的小程序。&lt;/p&gt;
&lt;h2&gt;通用印刷体的技术难点，使用场景&lt;/h2&gt;
&lt;p&gt;我们知道身份证识别可广泛应用在金融行业中，有用户的身份认证中，可以减少用户的信息输入，提升效率，提高用户体验，营业执照的识别完全省去了手工录入的繁琐，还可以为企业省去大量的人力资源成本，这些场景大家都已经比较熟悉。&lt;/p&gt;
&lt;p&gt;对于通用印刷体，腾讯优图实验室自主设计一整套全方位多尺度文字识别引擎，可攻破模糊，散焦，透视，文字部分遮挡的问题，识别准确率高达90%以上，处于业界领先水平。使用场景广泛，例如对任意版面上图像的文字识别，可广泛应用在印刷文档、广告图、医疗、物流等行业中的识别。&lt;/p&gt;
&lt;h2&gt;对于通用印刷体有没有什么好的例子？&lt;/h2&gt;
&lt;p&gt;例如这个广告，内容多字体，中英文与数字混合，背景也比较随意。咱们的OCR通过透视矫正、去模糊等，能大幅还原图像真实度，极大提升算法的鲁棒性。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/oeewgev3yq.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;再例如识别文字密集，行间距小，透视畸变等的海报。人工识别需要不仅耗费时间，肉眼也比较难识别。但腾讯云OCR 设计了小而精的特征提取网络，配合先进的预处理技术，识别准确率高达93%以上。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/19d7gx48fc.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;有时候也会遇到识别率不理想的情况，如何可以提高识别准确率？&lt;/h2&gt;
&lt;p&gt;首先会确认下当前的场景，造成准确度不高的原因。评估可提高的空间设计，之后做出相应的修改，列入预处理等等。&lt;/p&gt;
&lt;h2&gt;关于腾讯云手写体识别这块有没有什么案例？&lt;/h2&gt;
&lt;p&gt;腾讯是国内首家将手写体识别应用在复杂场景下的服务商，数字识别准确率高达90%以上，单字识别速度在15ms以内，复杂汉字准确率超过80%。&lt;/p&gt;
&lt;p&gt;腾讯云手写体OCR已运用到的运单识别场景，解决了物流行业每日快递单人工输入工作量极大且极易出错，非常低效等问题。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/1003483/dre5g09gmy.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;img&lt;/div&gt;
&lt;h2&gt;运单识别与传统人工识别有什么区别呢？&lt;/h2&gt;
&lt;p&gt;如果传统人工识别按照3min/单，1000单需要6.25个人/天，保证运单时效则需要耗费大量人力，考虑人力成本则影响运单及时性，成本和服务难两全。&lt;/p&gt;
&lt;p&gt;我们的运单识别速度可以达到毫秒级/单，并支持24小时识别服务 ，业务增长时只需要投入计算用服务器资源即可，弹性较大。&lt;/p&gt;
&lt;p&gt;与传统识别相比，不仅成本可以降低，提高准确性，还可以保护用户的隐私泄露风险。&lt;/p&gt;
&lt;h2&gt;目前OCR应用现实中有很广泛的应用场景，腾讯云OCR有什么优势？&lt;/h2&gt;
&lt;p&gt;咱们的OCR文字识别技术，目前支持中文简繁体、英文、数字、标点共10000+标签，覆盖上百种字体，生僻字版本更支持2W+标签 。&lt;/p&gt;
&lt;h2&gt;那咱们在行业中也有不少落地客户了吧？&lt;/h2&gt;
&lt;p&gt;新版手Q就用到了咱们的技术，在扫一扫、聊天窗口和空间图片大图预览共三个入口上支持了提取图片中文字的功能。&lt;/p&gt;
&lt;p&gt;方便用户阅读、编辑、保存图片上的文字，从而可以对提取出的文字进行翻译、搜索。在多种场景下可以极大提升用户对图片上文字的阅读和记录效率。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/9i5hl5k1n8.jpg?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;企业微信中的名片识也用到了咱们OCR技术。用户只需拍照或选择名片图片，就能准确快速地识别出名片中的文字，并自动提取为对应的字段，极大简化了名片录入流程，也避免了手动录入过程可能出现的错误。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1003483/a022rd4uck.png?imageView2//0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;经过上面的分享，用户也提出了不少问题，我们来看看用户都问了什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：您好，我想问下OCR 识别是否支持H5开发呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：支持，接口是基于http协议，只要支持http协议都可以使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：通用印刷体识别剩下的10%，有提高的思路吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：整体思路还是要回到我们的三大引擎上。逐一进行优化。&lt;/p&gt;
&lt;ol class=&quot;ol-level-0&quot;&gt;&lt;li&gt;背景识别&lt;/li&gt;
&lt;li&gt;定位引擎&lt;/li&gt;
&lt;li&gt;字段识别引擎&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Q：目前印刷体识别上使用的思路是先分割后识别吗？OCR支持离线识别吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：思路是先分割后识别，我们的OCR支持离线识别的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：OCR遇到无法分割或者分割错误的情况如何处理呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：很少有无法分割的情况。分割错误肯定会对最后的结果又影响。我们的技术，即便是再字符重叠的情况下也可以做出正确的分割。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：我想问下如果针对运单识别场景，请问是否可以智能纠正客户的地址呢？例如深圳，写成了深土川。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：我们会结合NLP技术，结合上下文进行智能纠错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：目前市面已提供有相关服务，那么咱们在这块有什么与众不同的地方或者更有优势的一面呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：我们在OCR上积累的很多的相关经验，也是国内首家将手写体识别应用在复杂场景下的服务商。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：那请问腾讯云OCR业务支持什么语言呀，对文字大小字体等有要求嘛？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：中文（简体和繁体），英文及数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：之前有提到总的分类高达2w+，这种大分类模型是怎么训练的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：分级，分批训练。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：那我还想问您下车牌自动识别已应用于日常生活场景中。想了解下这个的技术难点是什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：相比于证照类输入图来说，车牌输入图受限于实际场景配置的摄像监控设备，及车辆位置的随机变化，产生各种极端角度及光照案例，其质量变化范围远大于证照类采集图像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：您刚才展示都是平整的图片，对于手机拍的纸质文档有一定弧度，比如折过的纸没压平，就会有一定弧度，这个能处理吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：轻微的弧度我们可以通过技术处理，严重变形的相对比较困难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：除了支持标准车牌，我们支持识别新能源车吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：支持的，我们目前已支持蓝牌、黄牌、军牌、警牌、教练车牌、新能源车牌等，目前识别率可达到97%-98%~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：请问针对物流公司司机手机拍的照片，一是面单不平整，二是光线有的不理想，三是拍照角度有倾斜。针对以上情况技术方面有没有解决办法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：拍照角度可以通过几何算法矫正。光线的问题也可以通过图像的归一化增强。单面不平整，这个得看不平整到什么程度了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：车辆运行中，您这个80%的准确率是指车辆运动过程中拍摄下来的图还是车辆停止时候拍的图？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：我们是按帧处理的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：是否可以经过一定数据积累，纠错等训练，从而使其能识别手写文字?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：我们已实现手写体识别~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：OCR对运动模糊的场景识别率有多高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：模糊的程度差异性很大。不好做标准化的统计。图像质量不佳，最直白的处理方法是做图像的增强。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：贵司技术有相关paper可以查阅吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1007166&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1007166&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1008463&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1008463&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1029969&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1029969&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看看咱们社区的文章哦~很多文章都是鹅厂的精华呢~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：图片有点模糊，能不能说下比较好具体算法，这个太笼统了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：有很多的滤波器都可以处理不同程度的模糊图像。也有采用神经网络的的方式处理。&lt;/p&gt;
&lt;p&gt;我们看到不管是复杂文字识别场景还是小程序应用腾讯云OCR都可以解决，对本文提问有任何疑问的同学，大家都可以去腾讯云问答社区（&lt;a href=&quot;https://cloud.tencent.com/developer/ask&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/ask&lt;/a&gt;）提出自己的疑问，届时会有邀请相关的产品同学回答您的问题。&lt;/p&gt;
&lt;p&gt;感谢大家对腾讯云云+社区及腾讯云智能图像的支持，如需了解更多腾讯云OCR识别，请点击：&lt;a href=&quot;https://cloud.tencent.com/product/ocr&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/product/ocr&lt;/a&gt;。了解腾讯云OCR接入流程请点击：https://cloud.tencent.com/document/product/641/12412。想体验腾讯云AI更多产品请扫描下方小程序码。腾讯云AI合作请联系邮箱cloudAI@tencent.com，或添加智能图像QQ群：188257726。 没有及时参加本次活动的小伙伴，请查看历史聊天记录或等待工作人员将聊天记录总结后的文章分享。更多优秀文章请关注云+社区（&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;第 1 步：登陆账号注册并通过实名认证后，您可以登录【腾讯云控制台】（链接：&lt;a href=&quot;https://console.cloud.tencent.com/ai&quot; target=&quot;_blank&quot;&gt;https://console.cloud.tencent.com/ai&lt;/a&gt;）进行使用。如果没有账号，请参考 【账号注册教程】（链接：&lt;a href=&quot;https://cloud.tencent.com/document/product/378/9603&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/document/product/378/9603&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;第 2 步：创建秘钥完成注册后，您需要在【访问管理】（链接：&lt;a href=&quot;https://console.cloud.tencent.com/cam/capi&quot; target=&quot;_blank&quot;&gt;https://console.cloud.tencent.com/cam/capi&lt;/a&gt; ）创建秘钥。AppID、SecretID和SecretKey是您进行应用开发的唯一凭证，请妥善保管。&lt;/p&gt;
&lt;p&gt;第 3 步：生成签名通过签名来验证请求的合法性，用户可以使用AppID、SecretID和SecretKey生成签名，具体签名生成方法请参阅【签名鉴权】（链接：&lt;a href=&quot;https://cloud.tencent.com/document/product/641/12409&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/document/product/641/12409&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;第 4 步：调用API我们为您提供了丰富多样的API接口，您可以查看并调用【OCR】（链接：&lt;a href=&quot;https://cloud.tencent.com/document/product/641/12407&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/document/product/641/12407&lt;/a&gt;）服务。&lt;/p&gt;
&lt;p&gt;第 5 步：查看调用您可以登录【腾讯云控制台】（链接：&lt;a href=&quot;https://console.cloud.tencent.com/ai/ocr/namecard&quot; target=&quot;_blank&quot;&gt;https://console.cloud.tencent.com/ai/ocr/namecard&lt;/a&gt;），查OCR的各服务调用情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;此文已由作者授权腾讯云+社区发布，转载请注明&lt;a href=&quot;https://cloud.tencent.com/developer/article/1080576?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;文章出处&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文链接：https://cloud.tencent.com/developer/article/1080576?fromSource=waitui&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201803/1112679-20180330104936874-1573429539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 05:30:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8681840.html</dc:identifier>
</item>
<item>
<title>New UWP Community Toolkit - Staggered panel - shaomeng</title>
<link>http://www.cnblogs.com/shaomeng/p/8676696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shaomeng/p/8676696.html</guid>
<description>&lt;p&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前面 New UWP Community Toolkit 文章中，我们对 2.2.0 版本的重要更新做了简单回顾，其中简单介绍了 Staggered panel，本篇我们结合代码详细讲解  Staggered panel 的实现。&lt;/p&gt;
&lt;p&gt;Staggered panel 是一种交错排列的面板控件，允许面板中的 item 以非整齐排列的方式排列，每个 item 会被添加到当前占用空间最小的列。这种排列方式，非常适用于图片类，新闻资讯类的应用，官方示例展示如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201803/306530-20180331102749754-550867198.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI.Controls/StaggeredPanel/StaggeredPanel.cs&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI.Controls/StaggeredPanel/StaggeredPanel.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/controls/staggeredpanel&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/controls/staggeredpanel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Namespace: &lt;em&gt;Microsoft.Toolkit.Uwp.UI.Controls&lt;/em&gt;; Nuget: &lt;em&gt;Microsoft.Toolkit.Uwp.UI.Controls&lt;/em&gt;; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;开发过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;StaggeredPanel 类继承自 Panel类，我们先来看看它的构成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;public static 依赖属性：PaddingProperty, DesiredColumnWidthProperty&lt;/li&gt;
&lt;li&gt;public 变量：Padding, DesiredColumnWidth&lt;/li&gt;
&lt;li&gt;private 变量：_columnWidth&lt;/li&gt;
&lt;li&gt;public 方法：StaggeredPanel()&lt;/li&gt;
&lt;li&gt;protected override 方法：MeasureOverride(availableSize), ArrangeOverride(finalSize)&lt;/li&gt;
&lt;li&gt;private 方法：GetColumnIndex(columnHeights), OnHorizontalAlignmentChanged(sender, dp)&lt;/li&gt;
&lt;li&gt;private static 方法：OnDesiredColumnWidthChanged(d, e), OnPaddingChanged(d, e)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201803/306530-20180331103941057-1158902819.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们先来看一下 StaggeredPanel 中可在调用类中获取、设置和绑定的两个依赖属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DesiredColumnWidth - 获取和设置 StaggeredPanel 内 Item 期望列宽度的属性，默认值宽度是 250d；&lt;/li&gt;
&lt;li&gt;Padding - 获取和设置 StaggeredPanel 内 Item padding 属性，默认值是 Thickness 的默认值 (0,0,0,0)，它也是本次 V2.2.0 更新加入的内容&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty DesiredColumnWidthProperty =&lt;span&gt; DependencyProperty.Register(
    nameof(DesiredColumnWidth),
    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StaggeredPanel),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyMetadata(250d, OnDesiredColumnWidthChanged));

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty PaddingProperty =&lt;span&gt; DependencyProperty.Register(
    nameof(Padding),
    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Thickness),
    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StaggeredPanel),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; PropertyMetadata(&lt;span&gt;default&lt;/span&gt;(Thickness), OnPaddingChanged));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而这两个依赖属性注册的 On***Changed 如下，获取当前 StaggeredPanel 后，强制触发一次 Measure 的重新计算：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnDesiredColumnWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; panel =&lt;span&gt; (StaggeredPanel)d;
    panel.InvalidateMeasure();
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnPaddingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; panel =&lt;span&gt; (StaggeredPanel)d;
    panel.InvalidateMeasure();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来看一下 StaggeredPanel 的类构造方法：&lt;/p&gt;
&lt;p&gt;可以看到，构造方法中注册了一个属性变化后的回调事件，针对 Panel.HorizontalAlignmentProperty 的变化，注册了 OnHorizontalAlignmentChanged 方法，这个方法的功能也很简单，就是强制触发一次 Measure 计算。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StaggeredPanel()
{
    RegisterPropertyChangedCallback(Panel.HorizontalAlignmentProperty, OnHorizontalAlignmentChanged);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnHorizontalAlignmentChanged(DependencyObject sender, DependencyProperty dp)
{
    InvalidateMeasure();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后来看两个 override 方法：MeasureOverride(availableSize) 和 ArrangeOverride(finalSize)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MeasureOverride(availableSize) ：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;该方法作用是传入可用的尺寸，基于其对子元素大小的计算确定它在布局期间所需要的尺寸，我们来看一下具体实现过程：&lt;/p&gt;
&lt;p&gt;1. 根据 availableSize，去掉 Padding 对应方向的值，获得新的 availableSize，也就是子元素可用的尺寸；&lt;/p&gt;
&lt;p&gt;2. 在期望列宽和可用宽度间获得正确的列宽，根据列宽计算当前布局中可用的列数；如果当前控件的横向对齐方式对拉伸，重新设置列宽，这时列宽实际就是期望列宽度；&lt;/p&gt;
&lt;p&gt;3. 遍历 panel 中的 children，根据 GetColumnIndex(columnHeights) 方法传回指定 child 的列索引，计算原则是找到 columnHeights 数组中最小值，返回索引；根据返回的索引，把对应 child 的高度加到 columnHeights 对应索引中，更新  columnHeights 数组中每列的总高度值；&lt;/p&gt;
&lt;p&gt;4. 在 columnHeights 数组中 ，找到最大值，返回新的尺寸：宽度为可用尺寸的宽度，高度为列数组的最大值；可以看出，这个尺寸就是根据子元素计算出的 panel 需要的空间大小；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Size MeasureOverride(Size availableSize)
{
    availableSize.Width &lt;/span&gt;= availableSize.Width - Padding.Left -&lt;span&gt; Padding.Right;
    availableSize.Height &lt;/span&gt;= availableSize.Height - Padding.Top -&lt;span&gt; Padding.Bottom;

    _columnWidth &lt;/span&gt;=&lt;span&gt; Math.Min(DesiredColumnWidth, availableSize.Width);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; numColumns = (&lt;span&gt;int&lt;/span&gt;)Math.Floor(availableSize.Width /&lt;span&gt; _columnWidth);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (HorizontalAlignment ==&lt;span&gt; HorizontalAlignment.Stretch)
    {
        _columnWidth &lt;/span&gt;= availableSize.Width /&lt;span&gt; numColumns;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnHeights = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt;[numColumns];

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; Children.Count; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnIndex =&lt;span&gt; GetColumnIndex(columnHeights);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; child =&lt;span&gt; Children[i];
        child.Measure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Size(_columnWidth, availableSize.Height));
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; elementSize =&lt;span&gt; child.DesiredSize;
        columnHeights[columnIndex] &lt;/span&gt;+=&lt;span&gt; elementSize.Height;
    }

    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; desiredHeight =&lt;span&gt; columnHeights.Max();

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Size(availableSize.Width, desiredHeight);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;ArrangeOverride(finalSize)：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;该方法作用是根据 Measure 方法计算的最终尺寸，实际去排列 Item，排列完成后给出元素实际占用的尺寸，来看一下具体实现过程：&lt;/p&gt;
&lt;p&gt;1. 计算列数，根据 panel 横向对齐方式，在居中和靠右时，重新设置横向偏移值，考虑最终宽度和实际元素宽度的偏差；&lt;/p&gt;
&lt;p&gt;2. 遍历 panel 的 children，在排列时对 child 宽度做矫正，如果 child 宽度大于列宽，则把宽度调整到列宽，根据宽高比调整高度；&lt;/p&gt;
&lt;p&gt;3. 排列后，重新计算当前占用空间的 bounds，调整列数组中对应列的高度；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Size ArrangeOverride(Size finalSize)
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; horizontalOffset =&lt;span&gt; Padding.Left;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; verticalOffset =&lt;span&gt; Padding.Top;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; numColumns = (&lt;span&gt;int&lt;/span&gt;)Math.Floor(finalSize.Width /&lt;span&gt; _columnWidth);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (HorizontalAlignment ==&lt;span&gt; HorizontalAlignment.Right)
    {
        horizontalOffset &lt;/span&gt;+= finalSize.Width - (numColumns *&lt;span&gt; _columnWidth);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (HorizontalAlignment ==&lt;span&gt; HorizontalAlignment.Center)
    {
        horizontalOffset &lt;/span&gt;+= (finalSize.Width - (numColumns * _columnWidth)) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnHeights = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt;[numColumns];

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; Children.Count; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnIndex =&lt;span&gt; GetColumnIndex(columnHeights);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; child =&lt;span&gt; Children[i];
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; elementSize =&lt;span&gt; child.DesiredSize;

        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; elementWidth =&lt;span&gt; elementSize.Width;
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; elementHeight =&lt;span&gt; elementSize.Height;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elementWidth &amp;gt;&lt;span&gt; _columnWidth)
        {
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; differencePercentage = _columnWidth /&lt;span&gt; elementWidth;
            elementHeight &lt;/span&gt;= elementHeight *&lt;span&gt; differencePercentage;
            elementWidth &lt;/span&gt;=&lt;span&gt; _columnWidth;
        }

        Rect bounds &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Rect(horizontalOffset + (_columnWidth * columnIndex), columnHeights[columnIndex] &lt;br/&gt;+&lt;span&gt; verticalOffset, elementWidth, elementHeight);
        child.Arrange(bounds);

        columnHeights[columnIndex] &lt;/span&gt;+=&lt;span&gt; elementSize.Height;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.ArrangeOverride(finalSize);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后来看一下前面 MeasureOverride 和 ArrangeOverride 方法中都用到的 GetColumnIndex(columnHeights) 方法：&lt;/p&gt;
&lt;p&gt;这个方法的作用是根据传入的列高度数组，计算当前高度最小的列索引；这也是 StaggeredPanel 可以实现每次添加到最小高度列的关键方法；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GetColumnIndex(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;[] columnHeights)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; columnIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; height = columnHeights[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;1&lt;/span&gt;; j &amp;lt; columnHeights.Length; j++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (columnHeights[j] &amp;lt;&lt;span&gt; height)
        {
            columnIndex &lt;/span&gt;=&lt;span&gt; j;
            height &lt;/span&gt;=&lt;span&gt; columnHeights[j];
        }
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; columnIndex;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;调用示例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面示例中，我们使用了 GridView 控件，用 StaggeredPanel 作为 ItemsPanelTemplate；上面说到了两个依赖属性，我们分别作了设置，从下面的运行图中也可以体现出来。大家也可以看到，StaggeredPanel 中 child 的排列规则，确实是按照每个列高度最小的列来排列；而在 panel 宽度变化时，也对应作了重新的计算和排列。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GridView.ItemTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.Background&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SolidColorBrush &lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Color}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.Background&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Image &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Thumbnail}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Stretch&lt;/span&gt;&lt;span&gt;=&quot;Uniform&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;#44000000&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Foreground&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;5,3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Run &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Title}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TextBlock&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;GridView.ItemTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GridView.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;controls:StaggeredPanel &lt;/span&gt;&lt;span&gt;DesiredColumnWidth&lt;/span&gt;&lt;span&gt;=&quot;135&quot; Padding=&quot;25,25,25,25&quot;&lt;/span&gt;&lt;span&gt;
                                    HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;GridView.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201803/306530-20180331125142406-25469044.jpg&quot; alt=&quot;&quot; height=&quot;380&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201803/306530-20180331125208479-2102378060.jpg&quot; alt=&quot;&quot; height=&quot;380&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;到这里我们就把 UWP Community Toolkit 中的 StaggeredPanel 功能的源代码实现过程和简单的调用示例讲解完成了，希望能对大家更好的理解和使用这个控件有所帮助，也希望能启发大家去做出更丰富排列规则的 Panel 控件。欢迎大家多多交流，谢谢！&lt;/p&gt;
&lt;p&gt;最后，再跟大家安利一下 UWPCommunityToolkit 的官方微博：&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://weibo.com/u/6506046490&quot; target=&quot;_blank&quot;&gt;https://weibo.com/u/6506046490&lt;/a&gt;,&lt;/strong&gt;&lt;/em&gt; 大家可以通过微博关注最新动态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;衷心感谢 UWPCommunityToolkit 的作者们杰出的工作，Thank you so much, UWPCommunityToolkit authors!!!&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 31 Mar 2018 05:04:00 +0000</pubDate>
<dc:creator>shaomeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shaomeng/p/8676696.html</dc:identifier>
</item>
<item>
<title>spring整合springmvc和hibernate - JAVA开发老菜鸟</title>
<link>http://www.cnblogs.com/sam-uncle/p/8681515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sam-uncle/p/8681515.html</guid>
<description>&lt;p&gt;上篇文章使用maven搭建了web环境，这篇来记录下如何使用spring整合springmvc和hibernate，亦即spring+springmvc+hibernate框架整合。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一步：首先配置spring&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;配置spring配置文件applicationContext.xmls
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_d7d2694e-6904-48fb-8aa9-fa0f68e5c54c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d7d2694e-6904-48fb-8aa9-fa0f68e5c54c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d7d2694e-6904-48fb-8aa9-fa0f68e5c54c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/aop
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.mvn&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置自动aop &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:aspectj-autoproxy &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;配置web.xml文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_6906135d-7a98-4aa3-9f12-6521231feae8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6906135d-7a98-4aa3-9f12-6521231feae8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6906135d-7a98-4aa3-9f12-6521231feae8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置spring context需要读取的配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置spring listener 以便在web容器启动的时候能自动初始化spring &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第二步：配置spring mvc&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;配置spring mvc配置文件spring-web.xmls
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_27219a4a-bc88-472e-9abf-ca2dabefe33b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_27219a4a-bc88-472e-9abf-ca2dabefe33b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_27219a4a-bc88-472e-9abf-ca2dabefe33b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/aop
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动扫描 com.mvn.controller的文件，初始化处理器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.mvn.controller&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置试图解析器（渲染器） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewResolver&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewClass&quot;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            value&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.JstlView&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;WEB-INF/jsp/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;配置web.xml文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_f372827c-1213-4fea-9798-b50e742ec504&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f372827c-1213-4fea-9798-b50e742ec504&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f372827c-1213-4fea-9798-b50e742ec504&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置spring mvc 分发器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 初始化spring mvc 配置文件的位置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring-web.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; web容器启动的时候就加载springmvc &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*.do&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;第三步：配置hibernate&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将hibernate的相关配置放到spring配置文件applicationContext.xml里面
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_8cb1309a-353c-4b92-88a8-89c1be7b8e4e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8cb1309a-353c-4b92-88a8-89c1be7b8e4e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8cb1309a-353c-4b92-88a8-89c1be7b8e4e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动读取配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:spring.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&lt;/span&gt;&lt;span&gt;
        destroy-method&lt;/span&gt;&lt;span&gt;=&quot;close&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClassName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.driverClassName}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置sessionFactory&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sessionFactory&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; hibernate自动扫描 实体类&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;packagesToScan&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mvn.entity&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; hibernate属性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernateProperties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                hibernate.hbm2ddl.auto=${jdbc.hibernate.hbm2ddl.auto}
                hibernate.dialect=${jdbc.hibernate.dialect}
                hibernate.show_sql=${jdbc.hibernate.show_sql}

            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sessionFactory&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;sessionFactory&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:annotation-driven &lt;/span&gt;&lt;span&gt;transaction-manager&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;由于用到了需要读取propertie文件，因此要新增
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7&quot;&gt;&lt;img id=&quot;code_img_closed_83f9fa42-1b6d-4032-9385-a7e9e1eba30b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_83f9fa42-1b6d-4032-9385-a7e9e1eba30b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_83f9fa42-1b6d-4032-9385-a7e9e1eba30b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;jdbc.driverClassName=com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;jdbc.url=jdbc:mysql://localhost:3306/mvn
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;jdbc.username=root
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;jdbc.password=root
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;jdbc.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;jdbc.hibernate.show_sql=true
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; jdbc.hibernate.hbm2ddl.auto=update
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;第四步：编写对应的java和jsp代码&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建entity类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_aeba9bbd-e0cc-4300-82e8-7fdbfbda5f1e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aeba9bbd-e0cc-4300-82e8-7fdbfbda5f1e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aeba9bbd-e0cc-4300-82e8-7fdbfbda5f1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.mvn.entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.Entity;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.GeneratedValue;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.Id;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.persistence.Table;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;@Entity
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; @Table(name=&quot;t_user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    @Id
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    @GeneratedValue
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     
&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;创建dao类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_1f265129-cd53-4f61-bbbc-82fddd8dd5f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1f265129-cd53-4f61-bbbc-82fddd8dd5f8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1f265129-cd53-4f61-bbbc-82fddd8dd5f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.mvn.dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.SessionFactory;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.classic.Session;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Repository;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mvn.entity.User;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@Repository
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDao {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    @Resource
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    SessionFactory sessionFactory;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; save(User user){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Session session =&lt;span&gt; sessionFactory.openSession();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        session.save(user);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;创建service类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_de2f616a-eb2a-4fe6-a6b4-bc0d6a51c7b4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_de2f616a-eb2a-4fe6-a6b4-bc0d6a51c7b4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_de2f616a-eb2a-4fe6-a6b4-bc0d6a51c7b4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.mvn.service;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.transaction.annotation.Transactional;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mvn.dao.UserDao;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mvn.entity.User;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserService {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Resource
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    UserDao userDao;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    @Transactional
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; save(User user){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        userDao.save(user);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;创建控制器
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_382cdf6c-7969-43e5-9a44-e745aa11a5ff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_382cdf6c-7969-43e5-9a44-e745aa11a5ff&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_382cdf6c-7969-43e5-9a44-e745aa11a5ff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.mvn.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mvn.entity.User;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mvn.service.UserService;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SaveUser {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    @Resource
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    UserService userService;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     @RequestMapping(value=&quot;/saveUser&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String saveUser(User user){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        userService.save(user);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;saveSucess&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;创建jsp文件：WEB-INF\jsp\saveSucess.jsp
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;7.5&quot;&gt;&lt;img id=&quot;code_img_closed_e3e93d52-326a-4e45-a8c0-c1f9648967e5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e3e93d52-326a-4e45-a8c0-c1f9648967e5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e3e93d52-326a-4e45-a8c0-c1f9648967e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Hello
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;恭喜！
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;整合成功
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　至此代码写完了，完整的目录结构为：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201803/1345071-20180331112701749-1364869255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步：进行测试&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建数据库&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201803/1345071-20180331113125855-1581171849.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;启动tomcat，由于我们配置了hibernate属性hibernate.hbm2ddl.auto=update，因此会在tomcat启动完成后自动生成表t_user&lt;/li&gt;
&lt;li&gt;通过页面访问&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201803/1345071-20180331124743361-411816804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　4.数据库生成数据&lt;/p&gt;
&lt;p&gt; 　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201803/1345071-20180331124826312-200019004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，整合工作完成。&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 04:53:00 +0000</pubDate>
<dc:creator>JAVA开发老菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sam-uncle/p/8681515.html</dc:identifier>
</item>
<item>
<title>图片在线裁剪和图片上传总结 - 微笑刺客D</title>
<link>http://www.cnblogs.com/CKExp/p/8681263.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CKExp/p/8681263.html</guid>
<description>&lt;p&gt;&lt;span&gt;上周需要做一个图片上传并且将上传的图片在线可以裁剪展示,觉得这个功能很有用，但是找参考资料的时候却并不是很多，因此来将我用到的总结总结，也让有需要的博友们直接借鉴。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;首先环境介绍：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、asp.net mvc网站，用到的前端插件是JCrop和Bootstrap-fileinput，在后端用框架自带的一些类库进行处理即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　JCrop插件是用来裁剪图片的，页面上裁剪就是保存裁剪的位置信息，然后将位置信息转给后台在后台进行实际图片裁剪功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　插件地址：&lt;a href=&quot;http://code.ciaoca.com/jquery/jcrop/demo/&quot; target=&quot;_blank&quot;&gt;http://code.ciaoca.com/jquery/jcrop/demo/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Bootstrap-fileinput插件是Bootstrap下的文件上传的插件，功能强大，我将依靠这个完成文件的上传，当然也能够使用其他的文件上传工具。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　插件地址：&lt;a href=&quot;http://plugins.krajee.com/file-input&quot; target=&quot;_blank&quot;&gt;http://plugins.krajee.com/file-input&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　文件上传后页面上展示的图片是以Data URI Scheme方式进行展示的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Data URI Scheme知识点：&lt;a href=&quot;https://blog.csdn.net/aoshilang2249/article/details/51009947&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/aoshilang2249/article/details/51009947&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2、asp.net core mvc网站，前端插件不变，但是在后端不能够使用自带类库了，core下面的图片处理相关的类库还没有完全移植过来，只能够借用第三方类库&lt;span&gt;&lt;strong&gt;SixLabors.ImageSharp&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;快速浏览&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62.5&quot;&gt;&lt;img id=&quot;code_img_closed_b7cd66e3-f753-454c-acdb-bd6d55110e7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b7cd66e3-f753-454c-acdb-bd6d55110e7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b7cd66e3-f753-454c-acdb-bd6d55110e7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;120&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@{
    ViewBag.Title &lt;/span&gt;= &quot;文件上传&quot;&lt;span&gt;;
}

&lt;/span&gt;&amp;lt;link href=&quot;@Url.Content(&quot;~/Content/Jcrop/jquery.Jcrop.css&quot;)&quot; rel=&quot;stylesheet&quot; /&amp;gt;
&amp;lt;link href=&quot;@Url.Content(&quot;~/Content/bootstrap-fileinput/fileinput.css&quot;)&quot; rel=&quot;stylesheet&quot; /&amp;gt;

&amp;lt;br /&amp;gt;
&amp;lt;button class=&quot;btn btn-primary&quot; data-toggle=&quot;modal&quot; data-target=&quot;#myModal&quot;&amp;gt;头像&amp;lt;/button&amp;gt;
&amp;lt;div class=&quot;modal fade&quot; id=&quot;myModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot;&amp;gt;
    &amp;lt;div class=&quot;modal-dialog&quot;&amp;gt;
        &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
            &amp;lt;div class=&quot;modal-header&quot;&amp;gt;
                &amp;lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
                &amp;lt;h4 class=&quot;modal-title&quot; id=&quot;myModalLabel&quot;&amp;gt;图片上传&amp;lt;/h4&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;modal-body&quot;&amp;gt;
                &amp;lt;div class=&quot;row&quot;&amp;gt;
                    &amp;lt;div class=&quot;col-md-6&quot; style=&quot;width: 300px;&quot;&amp;gt;
                        &amp;lt;img id=&quot;cut-img&quot; class=&quot;thumbnail&quot; style=&quot;width: 300px;height:300px;&quot; src=&quot;~/Content/defaultAvatar.jpg&quot;&amp;gt;&amp;lt;br /&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;col-md-5&quot;&amp;gt;
                        &amp;lt;input type=&quot;file&quot; name=&quot;txt_file&quot; id=&quot;txt_file&quot; multiple class=&quot;file-loading&quot; /&amp;gt;&amp;lt;br /&amp;gt;
                        &amp;lt;h4&amp;gt;图片说明：&amp;lt;/h4&amp;gt;
                        &amp;lt;p&amp;gt;1、图片格式需要jpg、gif、png为后缀名.&amp;lt;/p&amp;gt;
                        &amp;lt;p&amp;gt;2、图片可以在线裁剪大小,以裁剪后为最终结果.&amp;lt;/p&amp;gt;
                        &amp;lt;p&amp;gt;3、图片上传完毕即可关闭窗口.&amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;span&gt;

@section scripts{
    &lt;/span&gt;&amp;lt;script src=&quot;@Url.Content(&quot;~/Scripts/Jcrop/jquery.Jcrop.js&quot;)&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;@Url.Content(&quot;~/Scripts/bootstrap-fileinput/fileinput.js&quot;)&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;@Url.Content(&quot;~/Scripts/bootstrap-fileinput/zh.js&quot;)&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://code.ciaoca.com/jquery/jcrop/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://code.ciaoca.com/jquery/jcrop/demo/animation&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://plugins.krajee.com/file-input&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://plugins.krajee.com/file-advanced-usage-demo#advanced-example-5&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt; tailorInfo = &quot;&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化fileinput&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FileInput() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oFile = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

            oFile.Init &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (ctrlName, uploadUrl) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; control = $('#' +&lt;span&gt; ctrlName);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化上传控件的样式&lt;/span&gt;
&lt;span&gt;                control.fileinput({
                    language: &lt;/span&gt;'zh', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置语言&lt;/span&gt;
                    browseLabel: '选择'&lt;span&gt;,
                    browseIcon: &lt;/span&gt;&quot;&amp;lt;i class=\&quot;glyphicon glyphicon-picture\&quot;&amp;gt;&amp;lt;/i&amp;gt; &quot;&lt;span&gt;,
                    browseClass: &lt;/span&gt;&quot;btn btn-primary&quot;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮样式&lt;/span&gt;
                    uploadUrl: uploadUrl, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;上传的地址&lt;/span&gt;
                    allowedFileExtensions: ['jpg', 'gif', 'png'],&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收的文件后缀&lt;/span&gt;
                    showUpload: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示上传按钮&lt;/span&gt;
                    showCaption: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示标题&lt;/span&gt;
                    showPreview: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏预览&lt;/span&gt;
                    dropZoneEnabled: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示拖拽区域&lt;/span&gt;
                    uploadAsync: &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;采用异步&lt;/span&gt;
                    autoReplace: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;minImageWidth: 50,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;minImageHeight: 50,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxImageWidth: 1000,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxImageHeight: 1000,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxFileSize: 0,//单位为kb，如果为0表示不限制文件大小&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;minFileCount: 0,&lt;/span&gt;
                    maxFileCount: 1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示允许同时上传的最大文件个数&lt;/span&gt;
                    enctype: 'multipart/form-data'&lt;span&gt;,
                    validateInitialCount: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    previewFileIcon: &lt;/span&gt;&quot;&amp;lt;i class='glyphicon glyphicon-king'&amp;gt;&amp;lt;/i&amp;gt;&quot;&lt;span&gt;,
                    msgFilesTooMany: &lt;/span&gt;&quot;选择上传的文件数量({n}) 超过允许的最大数值{m}！&quot;&lt;span&gt;,
                    uploadExtraData: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; { &quot;tailorInfo&quot;&lt;span&gt;: tailorInfo }
                    }
                });
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oFile;
        };

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; PageInit() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jcorp = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _this = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fileInput = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInput();
            fileInput.Init(&lt;/span&gt;&quot;txt_file&quot;, &quot;@Url.Action(&quot;UpLoadFile&quot;)&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; input = $('#txt_file'&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片上传完成后&lt;/span&gt;
            input.on(&quot;fileuploaded&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event, data, previewId, index) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.response.success) {
                    jcorp.destroy();

                    $(&lt;/span&gt;'#cut-img').attr('src', data.response.newImage);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Data URI Scheme形式&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$('#cut-img').attr('src', data.response.newImage + &quot;?t=&quot; + Math.random());//加尾巴解决缓存问题&lt;/span&gt;
&lt;span&gt;                }
                alert(data.response.message);
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择图片后触发&lt;/span&gt;
            input.on('change', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event, data, previewId, index) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; img = $('#cut-img'&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (input[0].files &amp;amp;&amp;amp; input[0].files[0&lt;span&gt;]) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader();
                    reader.readAsDataURL(input[&lt;/span&gt;0].files[0&lt;span&gt;]);
                    reader.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
                        img.removeAttr(&lt;/span&gt;'src'&lt;span&gt;);
                        img.attr(&lt;/span&gt;'src'&lt;span&gt;, e.target.result);
                        img.Jcrop({
                            setSelect: [&lt;/span&gt;0, 0, 260, 290&lt;span&gt;],
                            handleSize: &lt;/span&gt;10&lt;span&gt;,
                            aspectRatio: &lt;/span&gt;1,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选框宽高比&lt;/span&gt;
                            bgFade: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                            bgColor: &lt;/span&gt;'black'&lt;span&gt;,
                            bgOpacity: &lt;/span&gt;0.3&lt;span&gt;,
                            onSelect: updateCords
                        }, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            jcorp &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
                        });
                    };
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jcorp !=&lt;span&gt; undefined) {
                        jcorp.destroy();
                    }
                }
                &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; updateCords(obj) {
                    tailorInfo &lt;/span&gt;= JSON.stringify({ &quot;PictureWidth&quot;: $('.jcrop-holder').css('width'), &quot;PictureHeight&quot;: $('.jcrop-holder').css('height'), &quot;CoordinateX&quot;: obj.x, &quot;CoordinateY&quot;: obj.y, &quot;CoordinateWidth&quot;: obj.w, &quot;CoordinateHeight&quot;&lt;span&gt;: obj.h });
                    console.log(tailorInfo);
                }
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上传出现错误&lt;/span&gt;
            input.on('fileuploaderror', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event, data, msg) {
                alert(msg);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;jcorp.destroy();&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$('#cut-img').attr('src', '/Content/defaultAvatar.jpg');&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除图片&lt;/span&gt;
            input.on('fileclear', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                console.log(&lt;/span&gt;&quot;fileclear&quot;&lt;span&gt;);

                jcorp.destroy();
                $(&lt;/span&gt;'#cut-img').attr('src', '/Content/defaultAvatar.jpg'&lt;span&gt;);
            });
        };

        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            PageInit();
        });
    &lt;/span&gt;&amp;lt;/script&amp;gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;前端页面代码&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_da05489e-5a17-4783-b081-0df320b357f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_da05489e-5a17-4783-b081-0df320b357f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_da05489e-5a17-4783-b081-0df320b357f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileInputController : Controller
    {
        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult UpLoadFile()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }

        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ActionResult UpLoadFile(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tailorInfo)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; success = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; message = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newImage = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tailorInfoEntity = JsonConvert.DeserializeObject&amp;lt;TailorInfo&amp;gt;&lt;span&gt;(tailorInfo);
                tailorInfoEntity.PictureWidth &lt;/span&gt;= tailorInfoEntity.PictureWidth.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
                tailorInfoEntity.PictureHeight &lt;/span&gt;= tailorInfoEntity.PictureHeight.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; file = HttpContext.Request.Files[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; file.ContentLength != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    newImage &lt;/span&gt;=&lt;span&gt; ImageHelper.TailorImage(file.InputStream, tailorInfoEntity);
                    success &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.Message;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { success = success, message = message, newImage =&lt;span&gt; newImage });
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;后端控制器代码&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_11ca15aa-c779-4546-90b3-807d0bfc3abd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_11ca15aa-c779-4546-90b3-807d0bfc3abd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_11ca15aa-c779-4546-90b3-807d0bfc3abd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 前端裁剪信息及前端图片展示规格
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TailorInfo
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PictureWidth { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PictureHeight { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateX { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateY { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateWidth { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateHeight { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;裁剪信息类&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;&lt;img id=&quot;code_img_closed_61902ca3-2a5b-4258-b3da-928501a7afe1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_61902ca3-2a5b-4258-b3da-928501a7afe1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_61902ca3-2a5b-4258-b3da-928501a7afe1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;99&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片处理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImageHelper
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片按照实际比例放大
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tailorInfo&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TailorImage(Stream content, TailorInfo tailorInfo)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scaleWidth =&lt;span&gt; Convert.ToInt16(tailorInfo.PictureWidth);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scaleHeight =&lt;span&gt; Convert.ToInt16(tailorInfo.PictureHeight);

            Bitmap sourceBitmap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(content);
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; scaleWidthPercent = Convert.ToDouble(sourceBitmap.Width) /&lt;span&gt; scaleWidth;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; scaleHeightPercent = Convert.ToDouble(sourceBitmap.Height) /&lt;span&gt; scaleHeight;

            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realX = scaleWidthPercent *&lt;span&gt; tailorInfo.CoordinateX;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realY = scaleHeightPercent *&lt;span&gt; tailorInfo.CoordinateY;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realWidth = scaleWidthPercent *&lt;span&gt; tailorInfo.CoordinateWidth;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realHeight = scaleHeightPercent *&lt;span&gt; tailorInfo.CoordinateHeight;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; CropImage(content, (&lt;span&gt;int&lt;/span&gt;)realX, (&lt;span&gt;int&lt;/span&gt;)realY, (&lt;span&gt;int&lt;/span&gt;)realWidth, (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)realHeight);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成新图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropWidth&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropHeight&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CropImage(&lt;span&gt;byte&lt;/span&gt;[] content, &lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y, &lt;span&gt;int&lt;/span&gt; cropWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cropHeight)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream(content))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CropImage(stream, x, y, cropWidth, cropHeight);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成新图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropWidth&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropHeight&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CropImage(Stream content, &lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y, &lt;span&gt;int&lt;/span&gt; cropWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cropHeight)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Bitmap sourceBitmap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(content))
            {
                Bitmap bitSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(sourceBitmap, sourceBitmap.Width, sourceBitmap.Height);
                Rectangle cropRect &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Rectangle(x, y, cropWidth, cropHeight);
                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Bitmap newBitMap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(cropWidth, cropHeight))
                {
                    newBitMap.SetResolution(sourceBitmap.HorizontalResolution, sourceBitmap.VerticalResolution);
                    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Graphics g =&lt;span&gt; Graphics.FromImage(newBitMap))
                    {
                        g.InterpolationMode &lt;/span&gt;=&lt;span&gt; InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode &lt;/span&gt;=&lt;span&gt; SmoothingMode.HighQuality;
                        g.PixelOffsetMode &lt;/span&gt;=&lt;span&gt; PixelOffsetMode.HighQuality;
                        g.CompositingQuality &lt;/span&gt;=&lt;span&gt; CompositingQuality.HighQuality;
                        g.DrawImage(bitSource, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Rectangle(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, newBitMap.Width, newBitMap.Height), cropRect, GraphicsUnit.Pixel);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BitmapToBytes(newBitMap);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片转到byte数组
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; BitmapToBytes(Bitmap source)
        {
            ImageCodecInfo codec &lt;/span&gt;= ImageCodecInfo.GetImageEncoders()[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
            EncoderParameters parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; EncoderParameters(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            parameters.Param[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;new&lt;/span&gt; EncoderParameter(Encoder.Quality, &lt;span&gt;100L&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (MemoryStream tmpStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream())
            {
                source.Save(tmpStream, codec, parameters);
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[tmpStream.Length];
                tmpStream.Seek(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SeekOrigin.Begin);
                tmpStream.Read(data, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)tmpStream.Length);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SaveImageToLocal(data);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 存储图片到本地文件系统
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;binary&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SaveImageToLocal(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] binary)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据用户信息生成图片名 todo&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Content\avatar.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            File.WriteAllBytes(path, binary);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:images/png;base64,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Convert.ToBase64String(binary);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Data URI Scheme形式
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return @&quot;/Content/avatar.png&quot;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Url形式&lt;/span&gt;
&lt;span&gt;        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;图片辅助类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; git地址：&lt;a href=&quot;https://gitee.com/530521314/TailorImage.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/530521314/TailorImage.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、引用前端插件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　加入JCrop插件，在官网下载或是git上下载均可,引用这两个文件即可，注意引用地址正确哈。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Content/Jcrop/jquery.Jcrop.css&quot;)&quot; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/Jcrop/jquery.Jcrop.js&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　加入Bootstrap插件，同样下载或是git上下载，不建议通过nuget或是bower下载，会下载一大堆的东西，很多用不到的。引用如下文件。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Content/bootstrap-fileinput/fileinput.css&quot;)&quot; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/bootstrap-fileinput/fileinput.js&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;@Url.Content(&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/bootstrap-fileinput/zh.js&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;我是直接在页面上引用的并没有将其移动到模板上出于一些因素，暂时可以不讨论这里，页面引用结构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133736/201803/1133736-20180331110350042-590213104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、前端文件上传页面设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;加入文件上传元素，一行代码即可，没错就一行：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;txt_file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;txt_file&quot;&lt;/span&gt;&lt;span&gt; multiple class&lt;/span&gt;&lt;span&gt;=&quot;file-loading&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;加入文件上传相关的js代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化fileinput&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; FileInput() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oFile = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

            oFile.Init &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (ctrlName, uploadUrl) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; control = $('#' +&lt;span&gt; ctrlName);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化上传控件的样式&lt;/span&gt;
&lt;span&gt;                control.fileinput({
                    language: &lt;/span&gt;'zh', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置语言&lt;/span&gt;
                    browseLabel: '选择'&lt;span&gt;,
                    browseIcon: &lt;/span&gt;&quot;&amp;lt;i class=\&quot;glyphicon glyphicon-picture\&quot;&amp;gt;&amp;lt;/i&amp;gt; &quot;&lt;span&gt;,
                    browseClass: &lt;/span&gt;&quot;btn btn-primary&quot;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮样式&lt;/span&gt;
                    uploadUrl: uploadUrl, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;上传的地址&lt;/span&gt;
                    allowedFileExtensions: ['jpg', 'gif', 'png'],&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收的文件后缀&lt;/span&gt;
                    showUpload: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示上传按钮&lt;/span&gt;
                    showCaption: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示标题&lt;/span&gt;
                    showPreview: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏预览&lt;/span&gt;
                    dropZoneEnabled: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示拖拽区域&lt;/span&gt;
                    uploadAsync: &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;采用异步&lt;/span&gt;
                    autoReplace: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;minImageWidth: 50,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;minImageHeight: 50,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxImageWidth: 1000,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxImageHeight: 1000,&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;maxFileSize: 0,//单位为kb，如果为0表示不限制文件大小&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;minFileCount: 0,&lt;/span&gt;
                    maxFileCount: 1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示允许同时上传的最大文件个数&lt;/span&gt;
                    enctype: 'multipart/form-data'&lt;span&gt;,
                    validateInitialCount: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    previewFileIcon: &lt;/span&gt;&quot;&amp;lt;i class='glyphicon glyphicon-king'&amp;gt;&amp;lt;/i&amp;gt;&quot;&lt;span&gt;,
                    msgFilesTooMany: &lt;/span&gt;&quot;选择上传的文件数量({n}) 超过允许的最大数值{m}！&quot;&lt;span&gt;,
                    uploadExtraData: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; { &quot;tailorInfo&quot;&lt;span&gt;: tailorInfo }
                    }
                });
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oFile;
        };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;然后实例化一个fileinput&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; fileInput = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInput();
 fileInput.Init(&lt;/span&gt;&quot;txt_file&quot;, &quot;@Url.Action(&quot;UpLoadFile&quot;)&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;至此文件上传前端页面已经OK了，接下来加入图片裁剪功能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、前端图片裁剪页面设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;裁剪的话不能够在文件上传的框中进行直接裁剪，而是通过一个图片标签进行裁剪，因此加入一个图片标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;cut-img&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;thumbnail&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width: 300px;height:300px;&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;~/Content/defaultAvatar.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　裁剪的js代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; input = $('#txt_file'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择图片后触发&lt;/span&gt;
 input.on('change', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event, data, previewId, index) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; img = $('#cut-img'&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (input[0].files &amp;amp;&amp;amp; input[0].files[0&lt;span&gt;]) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader();
                    reader.readAsDataURL(input[&lt;/span&gt;0].files[0&lt;span&gt;]);
                    reader.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
                        img.removeAttr(&lt;/span&gt;'src'&lt;span&gt;);
                        img.attr(&lt;/span&gt;'src'&lt;span&gt;, e.target.result);&lt;br/&gt;　　　　　　　　　　　　　　 //关键在这里
                        img.Jcrop({
                            setSelect: [&lt;/span&gt;0, 0, 260, 290&lt;span&gt;],
                            handleSize: &lt;/span&gt;10&lt;span&gt;,
                            aspectRatio: &lt;/span&gt;1,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选框宽高比&lt;/span&gt;
                            bgFade: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                            bgColor: &lt;/span&gt;'black'&lt;span&gt;,
                            bgOpacity: &lt;/span&gt;0.3&lt;span&gt;,
                            onSelect: updateCords
                        }, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            jcorp &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
                        });
                    };
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jcorp !=&lt;span&gt; undefined) {
                        jcorp.destroy();
                    }
                }
                &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; updateCords(obj) {
                    tailorInfo &lt;/span&gt;= JSON.stringify({ &quot;PictureWidth&quot;: $('.jcrop-holder').css('width'), &quot;PictureHeight&quot;: $('.jcrop-holder').css('height'), &quot;CoordinateX&quot;: obj.x, &quot;CoordinateY&quot;: obj.y, &quot;CoordinateWidth&quot;: obj.w, &quot;CoordinateHeight&quot;&lt;span&gt;: obj.h });
                    console.log(tailorInfo);
                }
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　至此前端页面文件上传和裁剪可以直接使用了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、后端文件上传和裁剪设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;将裁剪信息传递到后端，前端可以使用到Bootstrap-fileinput的一个属性uploadExtraData，可以传递除文件外的一些信息过来。当然如果看了Bootstrap-fileinput，其实是有两种模式，模式一是直接表单提交，额外属性直接用相关字段即可保存提交，我用的是模式二，异步上传，额外的信息只能通过属性uploadExtraData来保存提交。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　获得上传过来的图片信息，通过图片辅助类的处理得到图片的的地址，这个是用的DataURI Scheme协议，可以直接在图片上展示图片，而不需要用相对/绝对路径的形式，某宝好像就是这样。这样一来，小图片可以直接转换成Base64的形式保存在数据库，而不需要依赖本地的文件系统了，不错额。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ActionResult UpLoadFile(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tailorInfo)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; success = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; message = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newImage = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tailorInfoEntity = JsonConvert.DeserializeObject&amp;lt;TailorInfo&amp;gt;&lt;span&gt;(tailorInfo);
                tailorInfoEntity.PictureWidth &lt;/span&gt;= tailorInfoEntity.PictureWidth.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
                tailorInfoEntity.PictureHeight &lt;/span&gt;= tailorInfoEntity.PictureHeight.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; file = HttpContext.Request.Files[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; file.ContentLength != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    newImage &lt;/span&gt;=&lt;span&gt; ImageHelper.TailorImage(file.InputStream, tailorInfoEntity);
                    success &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.Message;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { success = success, message = message, newImage =&lt;span&gt; newImage });
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 　　&lt;/strong&gt;图片辅助类&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片处理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImageHelper
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片按照实际比例放大
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tailorInfo&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TailorImage(Stream content, TailorInfo tailorInfo)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scaleWidth =&lt;span&gt; Convert.ToInt16(tailorInfo.PictureWidth);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scaleHeight =&lt;span&gt; Convert.ToInt16(tailorInfo.PictureHeight);

            Bitmap sourceBitmap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(content);
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; scaleWidthPercent = Convert.ToDouble(sourceBitmap.Width) /&lt;span&gt; scaleWidth;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; scaleHeightPercent = Convert.ToDouble(sourceBitmap.Height) /&lt;span&gt; scaleHeight;

            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realX = scaleWidthPercent *&lt;span&gt; tailorInfo.CoordinateX;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realY = scaleHeightPercent *&lt;span&gt; tailorInfo.CoordinateY;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realWidth = scaleWidthPercent *&lt;span&gt; tailorInfo.CoordinateWidth;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; realHeight = scaleHeightPercent *&lt;span&gt; tailorInfo.CoordinateHeight;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; CropImage(content, (&lt;span&gt;int&lt;/span&gt;)realX, (&lt;span&gt;int&lt;/span&gt;)realY, (&lt;span&gt;int&lt;/span&gt;)realWidth, (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)realHeight);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成新图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropWidth&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropHeight&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CropImage(&lt;span&gt;byte&lt;/span&gt;[] content, &lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y, &lt;span&gt;int&lt;/span&gt; cropWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cropHeight)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream(content))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CropImage(stream, x, y, cropWidth, cropHeight);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成新图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropWidth&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cropHeight&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CropImage(Stream content, &lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y, &lt;span&gt;int&lt;/span&gt; cropWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cropHeight)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Bitmap sourceBitmap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(content))
            {
                Bitmap bitSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(sourceBitmap, sourceBitmap.Width, sourceBitmap.Height);
                Rectangle cropRect &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Rectangle(x, y, cropWidth, cropHeight);
                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Bitmap newBitMap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bitmap(cropWidth, cropHeight))
                {
                    newBitMap.SetResolution(sourceBitmap.HorizontalResolution, sourceBitmap.VerticalResolution);
                    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Graphics g =&lt;span&gt; Graphics.FromImage(newBitMap))
                    {
                        g.InterpolationMode &lt;/span&gt;=&lt;span&gt; InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode &lt;/span&gt;=&lt;span&gt; SmoothingMode.HighQuality;
                        g.PixelOffsetMode &lt;/span&gt;=&lt;span&gt; PixelOffsetMode.HighQuality;
                        g.CompositingQuality &lt;/span&gt;=&lt;span&gt; CompositingQuality.HighQuality;
                        g.DrawImage(bitSource, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Rectangle(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, newBitMap.Width, newBitMap.Height), cropRect, GraphicsUnit.Pixel);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BitmapToBytes(newBitMap);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片转到byte数组
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; BitmapToBytes(Bitmap source)
        {
            ImageCodecInfo codec &lt;/span&gt;= ImageCodecInfo.GetImageEncoders()[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
            EncoderParameters parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; EncoderParameters(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            parameters.Param[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;new&lt;/span&gt; EncoderParameter(Encoder.Quality, &lt;span&gt;100L&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (MemoryStream tmpStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream())
            {
                source.Save(tmpStream, codec, parameters);
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[tmpStream.Length];
                tmpStream.Seek(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SeekOrigin.Begin);
                tmpStream.Read(data, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)tmpStream.Length);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SaveImageToLocal(data);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 存储图片到本地文件系统
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;binary&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SaveImageToLocal(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] binary)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据用户信息生成图片名 todo&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Content\avatar.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            File.WriteAllBytes(path, binary);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:images/png;base64,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Convert.ToBase64String(binary);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Data URI Scheme形式
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return @&quot;/Content/avatar.png&quot;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Url形式&lt;/span&gt;
&lt;span&gt;        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　最后这一步可以控制你需要的形式，是要使用路径形式还是Data URI Scheme形式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第一个方法将图片根据获得的位置信息，进行比例缩放,然后一系列处理得到新图片。再将图片返回给前端展示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　裁剪信息的类我是这样设计的，但是里面的内容可以全部自定义，是由前端传递过来的信息决定的，应该属于ViewModel这一类的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 前端裁剪信息及前端图片展示规格
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TailorInfo
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PictureWidth { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PictureHeight { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateX { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateY { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateWidth { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CoordinateHeight { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、成果展示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1133736/201803/1133736-20180331120040255-2100945209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133736/201803/1133736-20180331120053254-992638068.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至此图片的在线裁剪搞定了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;六、 asp.net core下的后端设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;由于core并还没有将图片相关的类库移植到core下，但是社区上有大神们已经完成了core下的图片处理的类库，我使用的是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;SixLabors.ImageSharp&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　&lt;span&gt;　地址：&lt;a href=&quot;https://www.nuget.org/packages/SixLabors.ImageSharp&quot; target=&quot;_blank&quot;&gt;https://www.nuget.org/packages/SixLabors.ImageSharp&lt;/a&gt;其中介绍了怎么样安装的方法，不再陈述。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　在asp.net core下，我只实现了一个图片缩放的代码，如有更多需要，可以联系我，我将尝试尝试。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前端页面无需做改动，后端代码我们需要改变了，需要用到ImageSharp中的一些方法和属性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;asp.net core&lt;/span&gt;&lt;span&gt;取文件的方式变了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; file = HttpContext.Request.Form.Files[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txt_file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
pictureUrl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:images/png;base64,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + ImageHelper.ImageCompress(file.OpenReadStream());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片缩放到一定规格&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在图片辅助类中，通过ImageSharp进行处理即可将图片缩放，当然也可以裁剪，但是我没有去设计了：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ImageCompress(Stream content)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; imageString = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image =&lt;span&gt; Image.Load(content))
            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x
                     .Resize(image.Width &lt;/span&gt;/ &lt;span&gt;5&lt;/span&gt;, image.Height / &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
                     .Grayscale());

                imageString &lt;/span&gt;=&lt;span&gt; image.ToBase64String(ImageFormats.Bmp);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; imageString;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在此，感谢几位博友的文章:&lt;/p&gt;
&lt;p&gt;　　　　@&lt;a href=&quot;https://home.cnblogs.com/u/wuxinzhe/&quot;&gt;梦游的龙猫&lt;/a&gt; &lt;a href=&quot;https://www.cnblogs.com/wuxinzhe/p/6198506.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wuxinzhe/p/6198506.html &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;       　　&lt;a href=&quot;https://yq.aliyun.com/ziliao/1140&quot; target=&quot;_blank&quot;&gt;https://yq.aliyun.com/ziliao/1140&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;lang-java prettyprint prettyprinted&quot;&gt;
&lt;code&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;strong&gt;2018-3-31,望技术有成后能回来看见自己的脚步&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 31 Mar 2018 04:21:00 +0000</pubDate>
<dc:creator>微笑刺客D</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CKExp/p/8681263.html</dc:identifier>
</item>
<item>
<title>移动端H5地图矢量SHP网格切分打包方案 - 李晓晖</title>
<link>http://www.cnblogs.com/naaoveGIS/p/8681658.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/naaoveGIS/p/8681658.html</guid>
<description>&lt;p data-source-line=&quot;1&quot;&gt;&lt;span&gt;文章版权由作者李晓晖和博客园共有，若转载请于明显处标明出处：http://www.cnblogs.com/naaoveGIS/&lt;/span&gt;&lt;/p&gt;

&lt;p data-source-line=&quot;2&quot;&gt;与离线瓦片方案一样，同样是为了解决移动端网速和流量问题，但是却不仅仅于此。传统的矢量数据的展示一般分为两种方案：&lt;/p&gt;
&lt;ul data-source-line=&quot;3&quot;&gt;&lt;li&gt;通过WMS动态获取范围内的矢量数据图片（矢量数据由后台处理成一张图片返回），在前端叠加展示。&lt;br/&gt;优点——渲染压力在后端，前端无压力。后台对图片更容易做缓存（前端把地图切分成格网，以WMS请求模拟WMTS请求）。&lt;br/&gt;缺点——当前端需要交互时，必须进行动态的根据坐标查询地理服务器（I查询）。响应稍慢，对后端压力大。&lt;/li&gt;
&lt;li&gt;通过WFS服务获取范围内的矢量数据文本（geojson、pbf等格式），前端解析返回数据动态渲染。&lt;br/&gt;优点——由于是前端渲染展示，交互便捷，并且可以在前段只有控制样式。&lt;br/&gt;缺点——后台和前端在获取数据和展示数据上均有压力，当数据量特别大时，前端渲染耗费性能容易卡顿。&lt;/li&gt;
&lt;/ul&gt;&lt;p data-source-line=&quot;10&quot;&gt;而该方案上，当我们将SHP矢量数据以一定算法处理成文本文件存放到移动端后，既可以避免动态获取数据对服务端的压力，也可以拥有WFS方案上在前端实时渲染数据时的样式制定和交互便捷的优点。&lt;br/&gt;整个方案优点总结为：&lt;/p&gt;
&lt;ul data-source-line=&quot;12&quot;&gt;&lt;li&gt;规避手机网速问题&lt;/li&gt;
&lt;li&gt;规避手机流量问题&lt;/li&gt;
&lt;li&gt;减少服务端压力&lt;/li&gt;
&lt;li&gt;前端要素展示样式可定制&lt;/li&gt;
&lt;li&gt;要素交互快速响应&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-source-line=&quot;19&quot;&gt;2.1方案一（分级矢量切片方案）&lt;/h2&gt;
&lt;h3 data-source-line=&quot;20&quot;&gt;方案描述&lt;/h3&gt;
&lt;p data-source-line=&quot;21&quot;&gt;矢量切片方案在我之前的文章中均有描述：&lt;a href=&quot;http://www.cnblogs.com/naaoveGIS/p/8589204.html&quot;&gt;项目角度谈矢量切片运用以及Geoserver处理自定义规格矢量切片方案&lt;/a&gt;以及&lt;a href=&quot;http://www.cnblogs.com/naaoveGIS/p/4982549.html&quot;&gt;WebGIS中矢量切图的初步研究&lt;/a&gt;。简单叙述为：&lt;/p&gt;
&lt;ul data-source-line=&quot;22&quot;&gt;&lt;li&gt;把矢量数据当做瓦片处理，根据切图原点、瓦片大小、各级别分辨率，先在不同级别对SHP进行抽稀简化，然后将该级别的SHP切分成对应矢量数据块，再处理成文本格式。&lt;/li&gt;
&lt;li&gt;将矢量切片上传至移动端，H5地图请求获取本地矢量切片，解析渲染。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 data-source-line=&quot;24&quot;&gt;方案分析&lt;/h3&gt;
&lt;ul data-source-line=&quot;25&quot;&gt;&lt;li&gt;优点: 各级别数据抽稀切片，使得各级别数据量加载均可控制，前端渲染数量也处于可控状态。&lt;/li&gt;
&lt;li&gt;缺点：由于要切不同级别下的数据，矢量切片比较耗费时间，而且切图数据量大。不利于快速实施。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 data-source-line=&quot;27&quot;&gt;2.2方案二（固定网格切片方案）&lt;/h2&gt;
&lt;h3 data-source-line=&quot;28&quot;&gt;方案描述&lt;/h3&gt;
&lt;ul data-source-line=&quot;29&quot;&gt;&lt;li&gt;以固定几何大小的网格对SHP数据切片处理成文本。&lt;/li&gt;
&lt;li&gt;前端实时根据此时的可视范围，基于预制的网格切片大小，算出此时范围下对应的各切片，请求加载，解析渲染。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 data-source-line=&quot;31&quot;&gt;方案分析&lt;/h3&gt;
&lt;ul data-source-line=&quot;32&quot;&gt;&lt;li&gt;优点：只需根据预制的网格大小将矢量数据一次切割生成，效率比较高。&lt;/li&gt;
&lt;li&gt;缺点：在地图级别很小显示全图时，加载的切片数量过多导致前端渲染压力非常大。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 data-source-line=&quot;34&quot;&gt;2.3方案选型&lt;/h2&gt;
&lt;ul data-source-line=&quot;35&quot;&gt;&lt;li&gt;方案二优于方案一最大的地方在于实施更快速。&lt;/li&gt;
&lt;li&gt;方案二最大的缺点是在低地图级别时显示的数据过量问题，这里可以通过两个手段规避。&lt;br/&gt;控制显示层级——即只让地图缩放至某个级别上时才加载该矢量数据。&lt;br/&gt;控制显示数量——将网格数据进一步以责任网格打包，固定人员只展示固定责任网格范围内的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 data-source-line=&quot;40&quot;&gt;3.1SHP数据网格切分详细描述&lt;/h2&gt;
&lt;ul data-source-line=&quot;41&quot;&gt;&lt;li&gt;获得该图层的几何范围，依据切图原点、网格大小，算出该图层对应的网格数量（colnums、rownums）以及网格的起始切片的行列编号(startcolnum、startrownum）。&lt;/li&gt;
&lt;li&gt;以colnums和rownums作为双循环遍历结束点，依次将图层中的要素切片，处理成文本文件。&lt;br/&gt;代码描述：&lt;/li&gt;
&lt;/ul&gt;&lt;pre data-source-line=&quot;44&quot;&gt;
&lt;code class=&quot;hljs&quot;/&gt;
&lt;/pre&gt;
&lt;h2 data-source-line=&quot;50&quot;&gt;3.2基于单元网格的已有切片打包描述&lt;/h2&gt;
&lt;p data-source-line=&quot;51&quot;&gt;选用单元网格图层进行打包，主要原因为单元网格为最小划分网格，变动相对较少，减少实施次数。利用网格将已有的切片再进行整合打包，可进一步控制前端展示时的矢量数据数量。&lt;/p&gt;
&lt;ul data-source-line=&quot;52&quot;&gt;&lt;li&gt;遍历获取网格图层中的网格要素，得到各要素的几何范围。&lt;/li&gt;
&lt;li&gt;依据几何范围、网格大小、切图原点，算出该范围内包含的瓦片编号。&lt;/li&gt;
&lt;li&gt;将这些瓦片拷贝至以（要素编码\部件类型编号)命名的文件夹中。&lt;/li&gt;
&lt;li&gt;遍历处理完所有数据拷贝后，进行整体的文件压缩。&lt;/li&gt;
&lt;/ul&gt;&lt;p data-source-line=&quot;57&quot;&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;瓦片的打包路径规范为：&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656746/201803/656746-20180331121027511-1736911132.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;工具界面为:&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656746/201803/656746-20180331121034700-78316438.png&quot; alt=&quot;&quot; width=&quot;406&quot; height=&quot;327&quot;/&gt;&lt;/p&gt;

&lt;h2 data-source-line=&quot;63&quot;&gt;4.1详细描述&lt;/h2&gt;
&lt;p data-source-line=&quot;64&quot;&gt;前端展示所用算法与网格打包时所用算法相同。JS获取本地数据的思想方法也与我在&lt;a href=&quot;http://www.cnblogs.com/naaoveGIS/p/8670183.html&quot;&gt;移动端H5地图离线瓦片方案&lt;/a&gt;中描述的移动端读取本地瓦片的方法相同。不做累述，核心代码如下:&lt;/p&gt;
&lt;pre data-source-line=&quot;65&quot;&gt;
&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var originx=&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat(gridClipParams[&lt;span class=&quot;hljs-number&quot;&gt;0]);
&lt;span class=&quot;hljs-keyword&quot;&gt;var originy=&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat(gridClipParams[&lt;span class=&quot;hljs-number&quot;&gt;1]);
&lt;span class=&quot;hljs-keyword&quot;&gt;var size=&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat(gridClipParams[&lt;span class=&quot;hljs-number&quot;&gt;2]);
&lt;span class=&quot;hljs-keyword&quot;&gt;var vectorSource = &lt;span class=&quot;hljs-keyword&quot;&gt;new VectorSource({
        format:format,
        url:&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;extent) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;var temurl=GeosService.queryContent(url,servicelayerid,where,extent);
                &lt;span class=&quot;hljs-keyword&quot;&gt;if(useMobileCache){
                        &lt;span class=&quot;hljs-keyword&quot;&gt;var col=&lt;span class=&quot;hljs-built_in&quot;&gt;Math.floor(&lt;span class=&quot;hljs-built_in&quot;&gt;Math.abs((extent[&lt;span class=&quot;hljs-number&quot;&gt;0]-originx))/size);
                        &lt;span class=&quot;hljs-keyword&quot;&gt;var row=&lt;span class=&quot;hljs-built_in&quot;&gt;Math.floor(&lt;span class=&quot;hljs-built_in&quot;&gt;Math.abs((extent[&lt;span class=&quot;hljs-number&quot;&gt;1]-originy))/size);
                        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 data-source-line=&quot;105&quot;&gt;4.2成果展示&lt;/h2&gt;
&lt;p data-source-line=&quot;106&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656746/201803/656746-20180331121047064-2104265922.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;106&quot;&gt;由于部件打包是以1000米的网格进行划分后再打包，可以看见有的不在单元网格区划内的部件也展示在了地图上。所以网格切分的大小是一个必须根据项目进行调整的参数。&lt;/p&gt;

&lt;p data-source-line=&quot;109&quot;&gt;我将打包上传单独进行描述，是因为这一块整合时需要格外注意文件的合并方式。&lt;/p&gt;
&lt;ul data-source-line=&quot;110&quot;&gt;&lt;li&gt;手机服务端获取到责任网格与单元网格的对应关系。&lt;/li&gt;
&lt;li&gt;将责任网格对应的所有单元网格下的文件进行合并。合并规则为增盖方式。合并后的文件夹名称为责任网格命名。&lt;/li&gt;
&lt;/ul&gt;&lt;p data-source-line=&quot;113&quot;&gt;&lt;span&gt;责任网格打包文件夹的路径说明: \责任网格编码\部件小类\行号\列号.json&lt;/span&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;113&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　  　-----欢迎转载，但保留版权，请于明显处标明出处：&lt;a href=&quot;http://www.cnblogs.com/naaoveGIS/&quot;&gt;http://www.cnblogs.com/naaoveGIS/&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;                                                                        　　    如果您觉得本文确实帮助了您，可以微信扫一扫，进行小额的打赏和鼓励，谢谢 ^_^&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/656746/201803/656746-20180331121239860-1389141430.png&quot; alt=&quot;&quot; width=&quot;117&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 04:13:00 +0000</pubDate>
<dc:creator>李晓晖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/naaoveGIS/p/8681658.html</dc:identifier>
</item>
<item>
<title>Linux x86_64内核中断初始化 - stonehat</title>
<link>http://www.cnblogs.com/stonehat/p/8681639.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stonehat/p/8681639.html</guid>
<description>&lt;h2 id=&quot;中断分类&quot;&gt;中断分类&lt;/h2&gt;
&lt;p&gt;Linux系统中，中断分为：&lt;/p&gt;
&lt;p&gt;​ 软中断是Linux系统中断处理的底半处理部分，是Linux模拟的中断。为了加快硬件中断的处理，防止数据的丢失，Linux对中断处理分为顶半处理和底半处理两部分，顶半处理程序快速处理硬件事件，把不是那么紧急的逻辑放到底半处理程序中，可以简单的认为硬终端处理程序为顶半处理程序，软中断处理程序为底半处理程序。软中断一般在硬中断处理程序执行后才会执行。但是当硬中断嵌套的时候，软中断会在所有的硬中断处理完毕后才会处理，当软中断太多，会放到ksoftirqd线程中处理。&lt;/p&gt;
&lt;h2 id=&quot;内核初始化-中断&quot;&gt;内核初始化-中断&lt;/h2&gt;
&lt;p&gt;intel处理器有256个硬中断号。其中前32个中断号为异常使用，在内核初始化的时候进行初始化。内核初始化的代码流程如下：&lt;br/&gt;可以看到首先初始化异常处理，再初始化部分外部中断，再初始化一部分软中断处理。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;
asmlinkage &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; __init start_kernel(&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;)
{
     
    lock_kernel();
    ...
     &lt;span class=&quot;co&quot;&gt;//初始化调度模块&lt;/span&gt;
    sched_init();

    ...
    sort_main_extable();
    &lt;span class=&quot;co&quot;&gt;// 初始化异常处理。&lt;/span&gt;
    trap_init();
    ...
    &lt;span class=&quot;co&quot;&gt;// 初始化外部中断&lt;/span&gt;
    init_IRQ();
    ...
    &lt;span class=&quot;co&quot;&gt;// 初始化定时器模块，同时，会注册定时器的软中断处理函数。&lt;/span&gt;
    init_timers();
    
    &lt;span class=&quot;co&quot;&gt;// 初始化软中断）&lt;/span&gt;
    softirq_init();
    time_init();
    ...
    &lt;span class=&quot;co&quot;&gt;// 初始化&lt;/span&gt;
    acpi_early_init();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;异常中断初始化&quot;&gt;异常中断初始化&lt;/h2&gt;
&lt;p&gt;异常中断在内核中称为trap，异常中断初始化代码为&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;//门初始化。初始化中断向量表。系统有固定的256个硬件中断向量。&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; __init trap_init(&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;)
{
    
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&amp;amp;divide_error);
    set_intr_gate_ist(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&amp;amp;debug,DEBUG_STACK);
    set_intr_gate_ist(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&amp;amp;nmi,NMI_STACK);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&amp;amp;int3);
    set_system_gate(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&amp;amp;overflow);   &lt;span class=&quot;co&quot;&gt;/* int4-5 can be called from all */&lt;/span&gt;
    set_system_gate(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&amp;amp;bounds);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&amp;amp;invalid_op);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&amp;amp;device_not_available);
    set_intr_gate_ist(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&amp;amp;double_fault, DOUBLEFAULT_STACK);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;,&amp;amp;coprocessor_segment_overrun);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&amp;amp;invalid_TSS);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;,&amp;amp;segment_not_present);
    set_intr_gate_ist(&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;,&amp;amp;stack_segment,STACKFAULT_STACK);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;,&amp;amp;general_protection);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;,&amp;amp;page_fault);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;,&amp;amp;spurious_interrupt_bug);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;,&amp;amp;coprocessor_error);
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;,&amp;amp;alignment_check);
&lt;span class=&quot;ot&quot;&gt;#ifdef CONFIG_X86_MCE&lt;/span&gt;
    set_intr_gate_ist(&lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;,&amp;amp;machine_check, MCE_STACK); 
&lt;span class=&quot;ot&quot;&gt;#endif&lt;/span&gt;
    set_intr_gate(&lt;span class=&quot;dv&quot;&gt;19&lt;/span&gt;,&amp;amp;simd_coprocessor_error);

&lt;span class=&quot;ot&quot;&gt;#ifdef CONFIG_IA32_EMULATION&lt;/span&gt;
    set_system_gate(IA32_SYSCALL_VECTOR, ia32_syscall);
&lt;span class=&quot;ot&quot;&gt;#endif&lt;/span&gt;
       
    set_intr_gate(KDB_VECTOR, call_debug);
       
    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Should be a barrier for any external CPU state.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    cpu_init();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;除法错误&lt;/td&gt;
&lt;td&gt;Divide_error&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;调试异常&lt;/td&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;NMI中断&lt;/td&gt;
&lt;td&gt;Nmi&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;单字节，int 3&lt;/td&gt;
&lt;td&gt;Int3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;溢出&lt;/td&gt;
&lt;td&gt;Overflow&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;边界监测中断&lt;/td&gt;
&lt;td&gt;Bounds&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;无效操作码&lt;/td&gt;
&lt;td&gt;Invalid_op&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;设备不可用&lt;/td&gt;
&lt;td&gt;Device_not_available&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;双重故障&lt;/td&gt;
&lt;td&gt;Double_fault&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;协处理器段溢出&lt;/td&gt;
&lt;td&gt;Coprocessor_segment_overrun&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;无效TSS&lt;/td&gt;
&lt;td&gt;Incalid_tss&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;缺段中断&lt;/td&gt;
&lt;td&gt;Segment_not_present&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;堆栈异常&lt;/td&gt;
&lt;td&gt;Stack_segment&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;一般保护异常&lt;/td&gt;
&lt;td&gt;General_protection&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;页异常&lt;/td&gt;
&lt;td&gt;Page_fault&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;Spurious_interrupt_bug&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;协处理器出错&lt;/td&gt;
&lt;td&gt;Coprocessor_error&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;对齐检查中断&lt;/td&gt;
&lt;td&gt;Alignment_check&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0x80&lt;/td&gt;
&lt;td&gt;系统调用&lt;/td&gt;
&lt;td&gt;ia32_syscall&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0xf9&lt;/td&gt;
&lt;td&gt;内核调试&lt;/td&gt;
&lt;td&gt;call_debug&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;上述中断处理函数都是汇编语言编写。一部分汇编直接处理完毕，一部分通过调用C函数帮助处理。&lt;br/&gt;汇编代码在&lt;code&gt;linux/arch/x86_64/entry.S&lt;/code&gt;中，大部分都是调用C函数&lt;code&gt;do_中断处理函数名&lt;/code&gt;处理。&lt;br/&gt;整理如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;除法错误&lt;/td&gt;
&lt;td&gt;Divide_error&lt;/td&gt;
&lt;td&gt;do_divide_error&lt;/td&gt;
&lt;td&gt;发送SIGFPE信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;调试异常&lt;/td&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;td&gt;do_debug&lt;/td&gt;
&lt;td&gt;发送SIGTRAP信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;NMI中断&lt;/td&gt;
&lt;td&gt;Nmi&lt;/td&gt;
&lt;td&gt;do_nmi&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;单字节，int 3&lt;/td&gt;
&lt;td&gt;Int3&lt;/td&gt;
&lt;td&gt;do_int3&lt;/td&gt;
&lt;td&gt;发送SIGTRAP信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;溢出&lt;/td&gt;
&lt;td&gt;Overflow&lt;/td&gt;
&lt;td&gt;do_overflow&lt;/td&gt;
&lt;td&gt;发送SIGSEGV信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;边界监测中断&lt;/td&gt;
&lt;td&gt;Bounds&lt;/td&gt;
&lt;td&gt;do_bounds&lt;/td&gt;
&lt;td&gt;发送SIGSEGV信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;无效操作码&lt;/td&gt;
&lt;td&gt;Invalid_op&lt;/td&gt;
&lt;td&gt;do_invalid_op&lt;/td&gt;
&lt;td&gt;发送SIGILL信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;设备不可用&lt;/td&gt;
&lt;td&gt;Device_not_available&lt;/td&gt;
&lt;td&gt;math_state_restore&lt;/td&gt;
&lt;td&gt;发送SIGSEGV信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;双重故障&lt;/td&gt;
&lt;td&gt;Double_fault&lt;/td&gt;
&lt;td&gt;do_double_fault&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;协处理器段溢出&lt;/td&gt;
&lt;td&gt;Coprocessor_segment_overrun&lt;/td&gt;
&lt;td&gt;do_coprocessor_segment_overrun&lt;/td&gt;
&lt;td&gt;发送SIGFPE信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;无效TSS&lt;/td&gt;
&lt;td&gt;Invalid_tss&lt;/td&gt;
&lt;td&gt;do_invalid_TSS&lt;/td&gt;
&lt;td&gt;发送SIGSEGV信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;缺段中断&lt;/td&gt;
&lt;td&gt;Segment_not_present&lt;/td&gt;
&lt;td&gt;do_segment_not_present&lt;/td&gt;
&lt;td&gt;发送SIGBUS信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;堆栈异常&lt;/td&gt;
&lt;td&gt;Stack_segment&lt;/td&gt;
&lt;td&gt;do_stack_segment&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;一般保护异常&lt;/td&gt;
&lt;td&gt;General_protection&lt;/td&gt;
&lt;td&gt;do_general_protection&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;页异常&lt;/td&gt;
&lt;td&gt;Page_fault&lt;/td&gt;
&lt;td&gt;do_page_fault&lt;/td&gt;
&lt;td&gt;处理缺页中断&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;Spurious_interrupt_bug&lt;/td&gt;
&lt;td&gt;do_spurious_interrupt_bug&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;协处理器出错&lt;/td&gt;
&lt;td&gt;Coprocessor_error&lt;/td&gt;
&lt;td&gt;do_coprocessor_error&lt;/td&gt;
&lt;td&gt;发送SIGFPE信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;对齐检查中断&lt;/td&gt;
&lt;td&gt;Alignment_check&lt;/td&gt;
&lt;td&gt;do_alignment_check&lt;/td&gt;
&lt;td&gt;发送SIGBUS信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0x80&lt;/td&gt;
&lt;td&gt;系统调用&lt;/td&gt;
&lt;td&gt;ia32_syscall&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0xf9&lt;/td&gt;
&lt;td&gt;内核调试&lt;/td&gt;
&lt;td&gt;call_debug&lt;/td&gt;
&lt;td&gt;do_call_debug&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;外部中断初始化&quot;&gt;外部中断初始化&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;中断控制器硬件APIC分为两种：本地APIC和全局APIC。本地APIC集成在CPU内部，每个CPU都有一个，用于处理本地中断请求，CPU可以通过APIC向其他CPU发送中断，现在主要用于CPU之间的通信（IPI）。全局APIC主要是连接外部设备，用于外部设备的中断。在内核中断初始化的时候，会初始化三个与IPI相关中断。&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; __init init_IRQ(&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 该函数主要是初始化硬件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 1. 初始化本地APIC控制芯片&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 2. 初始化8259A芯片&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    /&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    init_ISA_irqs();&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    /*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 清空32以后的中断向量表。（除了系统调用和内核调试用的中断号）&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; (NR_VECTORS - FIRST_EXTERNAL_VECTOR); i++) {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; vector = FIRST_EXTERNAL_VECTOR + i;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= NR_IRQS)
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (vector != IA32_SYSCALL_VECTOR &amp;amp;&amp;amp; vector != KDB_VECTOR) { 
            set_intr_gate(vector, interrupt[i]);
    }
    }
&lt;span class=&quot;co&quot;&gt;// 多处理器通信中断&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#ifdef CONFIG_SMP&lt;/span&gt;

    set_intr_gate(FIRST_DEVICE_VECTOR, interrupt[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
    set_intr_gate(RESCHEDULE_VECTOR, reschedule_interrupt);
    set_intr_gate(INVALIDATE_TLB_VECTOR, invalidate_interrupt);
    set_intr_gate(CALL_FUNCTION_VECTOR, call_function_interrupt);
&lt;span class=&quot;ot&quot;&gt;#endif  &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 本地APIC中断&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#ifdef CONFIG_X86_LOCAL_APIC&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* self generated IPI for local APIC timer */&lt;/span&gt;
    set_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
    set_intr_gate(SPURIOUS_APIC_VECTOR, spurious_interrupt);
    set_intr_gate(ERROR_APIC_VECTOR, error_interrupt);
&lt;span class=&quot;ot&quot;&gt;#endif&lt;/span&gt;
    setup_timer();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!acpi_ioapic)
        setup_irq(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &amp;amp;irq2);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt;0xfc&lt;/td&gt;
&lt;td&gt;RESCHEDULE_VECTOR&lt;/td&gt;
&lt;td&gt;处理器间中断， 用于cpu之间同学，其他cpu要求重新调度&lt;/td&gt;
&lt;td&gt;reschedule_interrupt&lt;/td&gt;
&lt;td&gt;smp_reschedule_interrupt&lt;/td&gt;
&lt;td&gt;将线程调度标志置为需要重新调度。之后内核检查标志的时候会重新调度线程&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;0xfd&lt;/td&gt;
&lt;td&gt;INVALIDATE_TLB_VECTOR&lt;/td&gt;
&lt;td&gt;处理器间中断， 用于cpu之间通信，其他cpu要求TLB缓存失效&lt;/td&gt;
&lt;td&gt;invalidate_interrupt&lt;/td&gt;
&lt;td&gt;smp_invalidate_interrupt&lt;/td&gt;
&lt;td&gt;cpu刷新TLB&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;0xfa&lt;/td&gt;
&lt;td&gt;CALL_FUNCTION_VECTOR&lt;/td&gt;
&lt;td&gt;处理器间中断， 用于cpu之间通信，让另外的cpu调用某个函数&lt;/td&gt;
&lt;td&gt;call_function_interrupt&lt;/td&gt;
&lt;td&gt;smp_call_function_interrupt&lt;/td&gt;
&lt;td&gt;函数数据通过call_data_struct传送，cpu会调用该函数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;0xef&lt;/td&gt;
&lt;td&gt;LOCAL_TIMER_VECTOR&lt;/td&gt;
&lt;td&gt;APIC定期器中断&lt;/td&gt;
&lt;td&gt;apic_timer_interrupt&lt;/td&gt;
&lt;td&gt;smp_apic_timer_interrupt&lt;/td&gt;
&lt;td&gt;触发定时器的软中断&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0xff&lt;/td&gt;
&lt;td&gt;SPURIOUS_APIC_VECTOR&lt;/td&gt;
&lt;td&gt;伪中断&lt;/td&gt;
&lt;td&gt;spurious_interrupt&lt;/td&gt;
&lt;td&gt;smp_spurious_interrupt&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0xfe&lt;/td&gt;
&lt;td&gt;ERROR_APIC_VECTOR&lt;/td&gt;
&lt;td&gt;APIC错误&lt;/td&gt;
&lt;td&gt;error_interrupt&lt;/td&gt;
&lt;td&gt;smp_error_interrupt&lt;/td&gt;
&lt;td&gt;打印错误&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;0xfa中断说明：&lt;br/&gt;当cpu需要另一个cpu执行某个函数时，只需要初始化&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;struct call_data_struct {
    void (*func) (void *info);
    void *info;
    atomic_t started;
    atomic_t finished;
    int wait;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;的结构体，然后发出一个0xfa中断即可。&lt;/p&gt;
&lt;h2 id=&quot;软中断初始化&quot;&gt;软中断初始化&lt;/h2&gt;
&lt;p&gt;软中断初始化分为两部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初始化定时器时，会打开TIMER_SOFTIRQ的软中断，并设置中断处理函数为run_timer_softirq。&lt;/li&gt;
&lt;li&gt;softirq_init函数执行，会打开TASKLET_SOFTIRQ和HI_SOFTIRQ，处理函数分别为 tasklet_action和 tasklet_hi_action。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;软中断的线程处理机制就不说了。&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 04:06:00 +0000</pubDate>
<dc:creator>stonehat</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stonehat/p/8681639.html</dc:identifier>
</item>
<item>
<title>OGG12.1(LINUX)  for 11G R2 RAC classical install 经典抽取模式单项同步配置OGG12.1 - 翰墨文海（胡磊）</title>
<link>http://www.cnblogs.com/hmwh/p/8681600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hmwh/p/8681600.html</guid>
<description>&lt;div readability=&quot;1003&quot;&gt;

&lt;p&gt;
&lt;h2&gt;一、环境描述以及注意事项&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;1.1 环境简介&lt;/h3&gt;
&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;149&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;159&quot;&gt;
&lt;p&gt;IP&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;121&quot;&gt;
&lt;p&gt;系统&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;147&quot;&gt;
&lt;p&gt;Oracle版本&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;135&quot;&gt;
&lt;p&gt;OGG版本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;149&quot;&gt;
&lt;p&gt;源端&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;159&quot;&gt;
&lt;p&gt;172.16.10.16/36&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;121&quot;&gt;
&lt;p&gt;RHEL6.5&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;147&quot;&gt;
&lt;p&gt;oracle11204&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;135&quot;&gt;
&lt;p&gt;12.1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;149&quot;&gt;
&lt;p&gt;目标端&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;159&quot;&gt;
&lt;p&gt;172.16.10.154&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;121&quot;&gt;
&lt;p&gt;RHEL6.5&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;147&quot;&gt;
&lt;p&gt;oracle11204&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;135&quot;&gt;
&lt;p&gt;12.1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;同步用户为：hr。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;1.2 OGG网络带宽规划&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;GoldenGate数据同步所需的网络带宽是目前各种技术中最低的，复制全库数据时，通常GoldenGate队列文件大小与数据库日志大小的比例为1:4，GoldenGate网络传输压缩比例为1:8，TCP/IP网络传输效率最高为0.7；&lt;/p&gt;
&lt;p&gt;–根据以上数据估算，以业务高峰期每小时产生50GB数据库日志为例，GoldenGate维持秒级数据&lt;/p&gt;
&lt;p&gt;同步延迟的带宽要求为：&lt;/p&gt;
&lt;p&gt;50 * 1024 (MB/小时) * 8 (每字节8位) / 3600 (秒/小时) / 4 (队列/日志比例)&lt;/p&gt;
&lt;p&gt;/ 8 (传输压缩比例) / 0.7 (网络传输效率) = 5.08 Mbps&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;1.3 OGG安装注意事项&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;1、尽量避免OGG 双向同步，ogg双活安装需要业务避免更改同一行记录。&lt;/p&gt;
&lt;p&gt;2、配置Extract，为了避免数据丢失，在启动extract 之前，必须确保所有open 的事务都已经完成。（或者在配置时，停止所有中间件以及监听业务）&lt;/p&gt;
&lt;p&gt;3、特别大的表，或者操作太频繁的表，建议单独拆成多组抽取，还原进程。&lt;/p&gt;
&lt;p&gt;4、TRAIL是否压缩，以及到期时间，字符集设置，ogg管理密码是否加密。&lt;/p&gt;
&lt;p&gt;5、自动过滤重复时段的数据冲突，用于不能停机执行初始化，打开该参数后不会将数据错误报到discard文件中。&lt;/p&gt;
&lt;p&gt;6、rac ogg 需要安装到共享目录上。&lt;/p&gt;
&lt;p&gt;7、源库和目标库设置参数ENABLE_GOLDENGATE_REPLICATION 为true&lt;/p&gt;
&lt;p&gt;（In Oracle 11.2.0.4 you will need to set ENABLE_GOLDENGATE_REPLICATION to TRUE in the init.ora parameter file for any source or target database）。&lt;/p&gt;
&lt;p&gt;８、安装的所有主机尽量时间保持一直。&lt;/p&gt;
&lt;p&gt;9、使用TRANLOGOPTIONS参数与DBLOGREADER选项参数文件如果RDBMS是Oracle 11.1.0.7或Oracle 11.2.0.2或更高版本11g R2版本。&lt;/p&gt;
&lt;p&gt;10、DDL 数据库版本高于10G，不需要关闭回收站。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;1.4 关于经典抽取模式&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;在经典捕获模式下，Oracle GoldenGate Extract进程从源库上的Oracle重做或归档日志文件或备库上的归档日志中捕获数据更改。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114518049-2056750726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;经典捕捉完全支持大多数Oracle数据类型，对复杂数据类型提供有限的支持。经典捕获是最初的Oracle GoldenGate捕获方法。对于Oracle GoldenGate支持的任何源Oracle RDBMS，您可以使用经典捕获，但多租户容器数据库除外。&lt;/p&gt;
&lt;h4&gt;经典捕获来支持以下内容：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;UDT，&lt;code&gt;NOLOGGING&lt;/code&gt;VARRAY，源数据库兼容性设置在11.2.0.0.0以下的LOB。&lt;/li&gt;
&lt;li&gt;透明数据加密支持，源数据库兼容性设置在11.0.0.0.0以下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECUREFILE&lt;/code&gt; 源数据库兼容性设置为低于11.2.0.0.0的LOB支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOLOGGING&lt;/code&gt; 源数据库兼容性设置为低于11.2.0.0.0的LOB支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;h3&gt;1.5 关于集成抽取模式&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;在集成捕获模式下，Oracle GoldenGate Extract进程直接与数据库登录服务器进行交互，以逻辑更改记录（LCR）的形式接收数据更改。图显示了集成捕获模式下的提取配置。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114528292-1972462985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;与经典捕捉相比，集成捕捉支持更多的数据和存储类型，支持更加透明。&lt;/p&gt;
&lt;p&gt;以下是集成捕获的一些额外好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;由于集成捕获与数据库完全集成，因此不需要其他设置即可与Oracle RAC，ASM和TDE配合使用。&lt;/li&gt;
&lt;li&gt;集成捕获使用数据库登录服务器来访问Oracle重做流，其优点是能够自动在归档日志的不同副本或在线日志的不同镜像版本之间切换。因此，集成捕获可以透明地处理由于磁盘损坏，硬件故障或操作员错误导致的日志文件的缺失（假设存档和在线日志的附加副本可用&lt;/li&gt;
&lt;li&gt;集成捕捉可以更快地过滤表格。&lt;/li&gt;
&lt;li&gt;集成的捕获能够更有效地处理时间点恢复和RAC集成。&lt;/li&gt;
&lt;li&gt;集成的捕捉功能集成日志管理。Oracle Recovery Manager（RMAN）会自动保留“抽取”所需的归档日志。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成捕获是支持从多租户容器数据库捕获的唯一模式。One Extract可以挖掘多租户容器数据库中的多个可插拔数据库。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对于版本11.2.0.4源数据库及更高版本（源兼容性设置为11.2.0.4或更高版本），DDL的捕获由登录服务器异步执行，不需要安装特殊的触发器，表或其他数据库对象。可以在不停止用户应用程序的情况下执行Oracle GoldenGate升级。当Extract处于集成模式下时，需要使用DDL触发器和支持对象，而Oracle &lt;em&gt;11g&lt;/em&gt;源数据库早于版本11.2.0.4。&lt;/li&gt;
&lt;li&gt;由于集成捕获和集成应用程序都是数据库对象，因此对象的命名遵循与其他Oracle数据库对象相同的规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;集成捕获支持的数据库版本&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;完全支持：&lt;/strong&gt;为了支持所有Oracle数据和存储类型，&lt;strong&gt;源数据库的兼容性设置必须至少为&lt;/strong&gt;&lt;strong&gt;11.2.0.3&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;集成解压缩11.2.x（My Oracle Support文档ID 1557031.1Opens a new window）的11.2.0.3数据库特定捆绑软件修补程序。&lt;/p&gt;

&lt;p&gt;要在不安装DDL支持对象的情况下支持DDL捕获，源数据库必须至少为Oracle 11.2.0.4或更高版本。对于较早的数据库版本，需要DDL支持对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有限的支持：&lt;/strong&gt;可以在11.2.0.3下挖掘数据库上对兼容性小于11.2.0.3的源数据库使用集成捕获，但在此模式下，SECUREFILELOB，XML列，透明数据加密和UDT基于数据库版本和兼容性。数据库必须具有适用于集成提取11.2.x（Doc ID 1557031.1Opens a new window）的11.2.0.3数据库特定捆绑软件修补程序。数据库必须与源数据库版本相同（或更高）的数据库版本（最低为11.2.0.3）。&lt;/p&gt;

&lt;p&gt;Integrated Replicat异步应用事务。不具有相互依赖性的事务可以安全地执行并按顺序执行，以实现快速吞吐量。具有依赖关系的事务保证以与源上相同的顺序应用。&lt;/p&gt;
&lt;p&gt;入站服务器中的读取器进程根据目标数据库中定义的约束（主键，唯一外键）计算工作负载中事务之间的依赖关系。障碍事务和DDL操作也是自动管理的。协调员进程协调多个事务并在应用服务器之间维护订单。&lt;/p&gt;
&lt;p&gt;如果入站服务器不支持配置的功能或列类型，则Replicat与入站服务器分离，等待入站服务器在其队列中完成事务，然后通过OCI 以&lt;em&gt;直接应用&lt;/em&gt;模式将事务应用于数据库。应用直接事务后，复制器在集成模式下恢复处理。&lt;/p&gt;
&lt;p&gt;Replicat在直接模式下应用以下功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DDL操作&lt;/li&gt;
&lt;li&gt;序列操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLEXEC&lt;/code&gt;参数&lt;code&gt;TABLE&lt;/code&gt;或&lt;code&gt;MAP&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EVENTACTIONS&lt;/code&gt; 处理&lt;/li&gt;
&lt;li&gt;UDT请注意，如果提取用于&lt;code&gt;USENATIVEOBJSUPPORT&lt;/code&gt;捕获UDT，则集成的Replicat将将其应用于入站服务器，否则将由Replicat直接处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;集成复制要求&lt;/h4&gt;
&lt;p&gt;要使用集成的Replicat：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;目标Oracle数据库必须是Oracle 11.2.0.4或更高版本。&lt;/li&gt;
&lt;li&gt;必须在源数据库上启用补充日志记录以支持计算表之间的依赖关系以及在目标上同时执行事务调度。有关启用所需日志记录的说明。此日志记录可以在任何时候启用Oracle GoldenGate进程，但在此之前启用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完全支持：&lt;/strong&gt;为了支持所有Oracle数据和存储类型，&lt;strong&gt;源数据库的兼容性设置必须至少为&lt;/strong&gt;&lt;strong&gt;11.2.0.3&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;集成解压缩11.2.x（My Oracle Support文档ID 1557031.1Opens a new window）的11.2.0.3数据库特定捆绑软件修补程序。要在不安装DDL支持对象的情况下支持DDL捕获，源数据库必须至少为Oracle 11.2.0.4或更高版本。对于较早的数据库版本，需要DDL支持对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有限的支持：&lt;/strong&gt;可以在11.2.0.3下挖掘数据库上对兼容性小于11.2.0.3的源数据库使用集成捕获，但在此模式下，SECUREFILELOB，XML列，透明数据加密和UDT基于数据库版本和兼容性。数据库必须具有适用于集成提取11.2.x（Doc ID 1557031.1Opens a new window）的11.2.0.3数据库特定捆绑软件修补程序。数据库必须与源数据库版本相同（或更高）的数据库版本（最低为11.2.0.3）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成捕获是支持从多租户容器数据库捕获的唯一模式。One Extract可以挖掘多租户容器数据库中的多个可插拔数据库。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;h3&gt;1.6 关于非整合复制&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;在非集成模式下，Replicat进程使用标准SQL将数据直接应用到目标表。在这种模式下，Replicat的操作如下：&lt;/p&gt;

&lt;p&gt;阅读Oracle GoldenGate跟踪。&lt;/p&gt;
&lt;p&gt;执行数据过滤，映射和转换。&lt;/p&gt;
&lt;p&gt;构造代表源数据库DML或DDL事务的SQL语句（按提交顺序）。&lt;/p&gt;
&lt;p&gt;通过Oracle调用接口（OCI）将SQL应用于目标。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;1.7 决定使用哪种应用方法&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;使用不同的捕获和应用模式，可以一起使用以下捕捉和应用模式：&lt;/p&gt;

&lt;p&gt;经典捕获（Oracle或非Oracle源）和非集成的Replicat&lt;/p&gt;
&lt;p&gt;经典捕捉（Oracle或非Oracle源）和集成的Replicat&lt;/p&gt;
&lt;p&gt;集成捕获和非集成复制&lt;/p&gt;
&lt;p&gt;集成捕获和集成Replicat&lt;/p&gt;

&lt;p&gt;您可以在同一个源Oracle GoldenGate实例内同时使用集成的捕获和经典捕获，并且可以在同一个目标Oracle GoldenGate实例内同时使用集成的Replicat和非集成的Replicat。此配置需要仔细将对象放置在相应的进程组中，因为在经典和集成捕捉模式之间以及在非集成和集成的Replicat模式之间没有DDL或DML的协调。每个提取组必须根据表数据类型和属性处理适合处理模式的对象。一个Extract中没有对象可以对另一个Extract中的对象具有DML或DDL依赖性。Replicat配置必须应用相同类型的隔离。&lt;/p&gt;

&lt;p&gt;Oracle版本支持的推荐Oracle GoldenGate配置是在Oracle源上使用一个集成捕获，在Oracle目标上使用每个源数据库上的一个集成Replicat。集成捕获比传统捕获更全面地支持某些数据类型。一个集成的Replicat配置通过入站服务器支持所有Oracle数据类型，或者在必要时通过切换直接应用来支持所有Oracle数据类型，并保持源事务完整性。您可以根据需要将并行度设置调整到所需的应用性能级别。&lt;/p&gt;


&lt;p&gt;
&lt;h2&gt;二、OGG安装要求&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;2.1环境环境要求&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁盘空间要求&lt;/strong&gt;：Linux 12c 需要至少 521M 磁盘空间 OUI安装；rac OCFS 官方建议支持自动faliover。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内存要求&lt;/strong&gt;：oracle官方建议在大多数情况下，用户不需要更改默认的内存管理配置Oracle GoldenGate。（In most cases, users need not change the default Oracle GoldenGate memory management configuration.）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络要求&lt;/strong&gt;：带宽多大参考1.2；Oracle GoldenGate需要一些毫无保留的和不受限制的TCP / IP端口的，它的数量取决于OGG的进程的数量和类型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作系统用户权限要求&lt;/strong&gt;：安装在Unix操作系统下，安装Oracle GoldenGate的用户必须&lt;/p&gt;
&lt;p&gt;在Oracle GoldenGate安装目录的写权限。Oracle GoldenGate提取，复制，和经理必须操作过程有权限读取、写入和删除文件的操作系统用户。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据库要求&lt;/strong&gt;：ORACLE 数据库必须为归档模式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAC&lt;/strong&gt;&lt;strong&gt;环境要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、将Oracle GoldenGate Manager流程(和唯一的管理器)注册为集群管理的资源， Manager必须唯一的Oracle GoldenGate进程，即集群管理软件启动停止，因为它是管理所有其他进程的父进程,将Oracle GoldenGate集成到集群中&lt;/p&gt;
&lt;p&gt;2、如果集群使用一个虚拟IP地址(如Oracle Clusterware)，您可能需要为管理程序获取可用的固定IP地址。VIP必须公共子网上的一个可用的IP地址，不能确定通过DHCP。在提取数据泵的参数文件中，指定其中的VIP远程管理器作为RMTHOST参数的输入值。其他的&lt;/p&gt;
&lt;p&gt;访问Manager的GoldenGate产品也应该使用VIP。&lt;/p&gt;
&lt;p&gt;3、确保集群中的所有节点具有相同的兼容参数&lt;/p&gt;
&lt;p&gt;设置。&lt;/p&gt;
&lt;p&gt;4、当您配置管理器时，添加AUTOSTART和AUTORESTART参数该管理器将自动启动复制过程。在需要的时候,可以控制提取、复制和其他Oracle GoldenGate进程GoldenGate用户界面。&lt;/p&gt;
&lt;p&gt;5、只在一个节点上安装共享驱动器。这阻止了进程的存在开始另一个节点。在所有节点上使用相同的挂载点。&lt;/p&gt;

&lt;p&gt;6、可以专门为OGG 添加一个服务。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.2 OGG支持的数据类型&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;OGG 12.1支持的类型：&lt;/p&gt;
&lt;h4&gt;2.2.1 ANYDATA 类型&lt;/h4&gt;
&lt;p&gt;■ BINARY_DOUBLE&lt;/p&gt;
&lt;p&gt;■ BINARY_FLOAT&lt;/p&gt;
&lt;p&gt;■ CHAR&lt;/p&gt;
&lt;p&gt;■ DATEINTERVAL DAY TO SECOND&lt;/p&gt;
&lt;p&gt;■ INTERVAL YEAR TO MONTH&lt;/p&gt;
&lt;p&gt;■ NCHAR&lt;/p&gt;
&lt;p&gt;■ NUMBER&lt;/p&gt;
&lt;p&gt;■ NVARCHAR2&lt;/p&gt;
&lt;p&gt;■ RAW&lt;/p&gt;
&lt;p&gt;■ TIMESTAMP&lt;/p&gt;
&lt;p&gt;■ TIMESTAMP WITH TIME ZONE&lt;/p&gt;
&lt;p&gt;■ TIMESTAMP WITH LOCAL TIMEZONE&lt;/p&gt;
&lt;p&gt;■ UDTs&lt;/p&gt;
&lt;p&gt;■ VARCHAR/VARCHAR2&lt;/p&gt;


&lt;h4&gt;2.2.2 Numeric 类型&lt;/h4&gt;
&lt;p&gt;■ NUMBER up to the maximum size permitted by Oracle&lt;/p&gt;
&lt;p&gt;■ BINARY FLOAT&lt;/p&gt;
&lt;p&gt;■ BINARY DOUBLE&lt;/p&gt;

&lt;h4&gt;2.2.3 Character类型&lt;/h4&gt;
&lt;p&gt;■ CHAR&lt;/p&gt;
&lt;p&gt;■ VARCHAR2&lt;/p&gt;
&lt;p&gt;■ LONG&lt;/p&gt;
&lt;p&gt;■ NCHAR&lt;/p&gt;
&lt;p&gt;■ NVARCHAR2&lt;/p&gt;

&lt;h4&gt;2.2.4 Multi-byte 类型&lt;/h4&gt;
&lt;p&gt;■ NCHAR and  NVARCHAR2 multi-byte character data types&lt;/p&gt;
&lt;p&gt;■ Multi-byte data stored in  CHAR and  VARCHAR2 columns&lt;/p&gt;

&lt;h4&gt;2.2.5 Binary 类型&lt;/h4&gt;
&lt;p&gt;■ RAW&lt;/p&gt;
&lt;p&gt;■ LONG RAW&lt;/p&gt;

&lt;h4&gt;2.2.6 Date and Timestamp 类型&lt;/h4&gt;
&lt;p&gt;■ DATE&lt;/p&gt;
&lt;p&gt;■ TIMESTAMP&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;Oracle GoldenGate不支持负的日期。&lt;/p&gt;
&lt;p&gt;■间隔一天，间隔年只是如果目标大小的支持列等于或大于源的列。&lt;/p&gt;
&lt;p&gt;■Oracle GoldenGate支持捕获和时间戳和时间复制带为UTC偏移（timestamp 2011-01-01 8:00:00 - 8”）。&lt;/p&gt;
&lt;p&gt;■时间戳和时区的TZR（区域ID）是复制支持数据的变化，而不是初始荷载，为返回，或操作的地方必须从数据库中提取列。在这些情况下，区域id是当选定列时，由数据库转换为时间偏移量。复制将时间戳复制为具有时间偏移值的日期和时间数据。&lt;/p&gt;
&lt;h4&gt;2.2.7 Large Object 类型&lt;/h4&gt;
&lt;p&gt;■ CLOB&lt;/p&gt;
&lt;p&gt;■ NCLOB&lt;/p&gt;
&lt;p&gt;■ BLOB&lt;/p&gt;
&lt;p&gt;■ SECUREFILE and  BASICFILE&lt;/p&gt;

&lt;p&gt;Oracle GoldenGate不支持过滤、列映射，或操纵大于4K的大对象。&lt;/p&gt;

&lt;h4&gt;2.2.8 XML Data Types&lt;/h4&gt;
&lt;p&gt;支持以下XML类型：&lt;/p&gt;
&lt;p&gt;■集成捕获模式，Oracle GoldenGate支持XMLType列XMLType表存储为XML CLOB，XML和XML二进制对象关系。&lt;/p&gt;
&lt;p&gt;■经典的捕获模式，Oracle GoldenGate支持XMLType列存储XML和XML二进制字符&lt;/p&gt;

&lt;h4&gt;2.2.9用户定义或抽象类型&lt;/h4&gt;
&lt;p&gt;用户定义或抽象类型&lt;/p&gt;
&lt;p&gt;Oracle GoldenGate支持用户定义类型（UDT）或抽象数据类型（ADT）&lt;/p&gt;
&lt;p&gt;源和目标对象具有相同的结构。 模式名称可以是&lt;/p&gt;
&lt;p&gt;不同。&lt;/p&gt;
&lt;p&gt;支持的一般限制 - 集成和经典捕获模式&lt;/p&gt;
&lt;p&gt;■基于重做的支持大多数属性类型，但可以从源代码提取&lt;/p&gt;
&lt;p&gt;当UDT包含表时：&lt;/p&gt;
&lt;p&gt;– Nested Table&lt;/p&gt;
&lt;p&gt;– SDO_TOPO_GEOMETRY&lt;/p&gt;
&lt;p&gt;– SDO_GEORASTER&lt;/p&gt;
&lt;p&gt;■ Fetch-based does not support UDT that contains:&lt;/p&gt;
&lt;p&gt;– ANYDATA&lt;/p&gt;
&lt;p&gt;– TIMESTAMP WITH TIMEZONE&lt;/p&gt;
&lt;p&gt;– TIMESTAMP WITH LOCAL TIMEZONE&lt;/p&gt;
&lt;p&gt;– INTERVAL YEAR TO MONTH&lt;/p&gt;
&lt;p&gt;– INTERVAL DAY TO SECOND&lt;/p&gt;
&lt;p&gt;– BINARY FLOAT&lt;/p&gt;
&lt;p&gt;– BINARY DOUBLE&lt;/p&gt;
&lt;p&gt;■ Oracle GoldenGate GG does not support UDTs that contain:&lt;/p&gt;
&lt;p&gt;Details of Support for Oracle Data Types&lt;/p&gt;
&lt;p&gt;System Requirements and Preinstallation Instructions 1-17&lt;/p&gt;
&lt;p&gt;– CFILE&lt;/p&gt;
&lt;p&gt;– BFILE&lt;/p&gt;
&lt;p&gt;– REF&lt;/p&gt;
&lt;p&gt;– OPAQUE (with exception of  XMLType and  ANYDATA&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.3 DML支持的对象和操作&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;2.3.1 Tables, Views, Materialized Views&lt;/h4&gt;
&lt;p&gt;Oracle GoldenGate支持对常规表进行的以下DML操作，&lt;/p&gt;
&lt;p&gt;索引组织表，聚集表和实例化视图。&lt;/p&gt;
&lt;p&gt;■插入&lt;/p&gt;
&lt;p&gt;■更新&lt;/p&gt;
&lt;p&gt;■删除&lt;/p&gt;
&lt;p&gt;■关联交易控制操作&lt;/p&gt;
&lt;p&gt;提示：您可以使用DBA_GOLDENGATE_SUPPORT_MODE数据字典&lt;/p&gt;
&lt;p&gt;查看以显示有关Oracle GoldenGate级别的信息捕获数据库中的表的进程支持。&lt;/p&gt;
&lt;p&gt;Oracle GoldenGate支持包含任意数量行的表。&lt;/p&gt;
&lt;p&gt;■一行长度最多可达4 MB。如果Oracle GoldenGate配置为包含&lt;/p&gt;
&lt;p&gt;在其处理范围内的列的前后图像，为4 MB最大长度适用于完整的图像加长度的总长度&lt;/p&gt;
&lt;p&gt;的后图像。例如，如果列上有UPDATE操作被用作行标识符，处理前后图像&lt;/p&gt;
&lt;p&gt;总共不能超过4 MB。列之前和之后的图像也是必需的这不是行标识符，而是用作冲突的比较列检测和分辨率（CDR）。允许超过4 KB数据的列，例如LOB和LONG，只有前4 KB的数据存储在行和有助于最大行长4MB。&lt;/p&gt;
&lt;p&gt;■Oracle GoldenGate支持每个表的最大列数由数据库支持。&lt;/p&gt;

&lt;h4&gt;2.3.2 GoldenGate支持分区属性的表&lt;/h4&gt;
&lt;p&gt;– Range partitioning&lt;/p&gt;
&lt;p&gt;– Hash Partitioning&lt;/p&gt;
&lt;p&gt;– Interval Partitioning&lt;/p&gt;
&lt;p&gt;– System Partitioning&lt;/p&gt;
&lt;p&gt;– Composite Partitioning&lt;/p&gt;
&lt;p&gt;– Virtual Column-Based Partitioning&lt;/p&gt;
&lt;p&gt;– Reference Partitioning&lt;/p&gt;
&lt;p&gt;– List Partitioning&lt;/p&gt;

&lt;h4&gt;2.3.3 Oracle GoldenGate支持仅包含一列的表&lt;/h4&gt;
&lt;p&gt;不包括以下类型的表（Oracle GoldenGate supports tables that contain only one column, except when the column contains one of the following data types）&lt;/p&gt;
&lt;p&gt;– LOB&lt;/p&gt;
&lt;p&gt;– LONG&lt;/p&gt;
&lt;p&gt;– Nested table&lt;/p&gt;
&lt;p&gt;– UDT&lt;/p&gt;
&lt;p&gt;– VARRAY&lt;/p&gt;
&lt;p&gt;– XMLType&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.4 DDL支持的对象和操作&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;当源数据库是Oracle 11.2.0.4或更高版本的时候，提取操作是集成的模式，DDL捕获支持集成到数据库日志挖掘服务器中不需要使用DDL触发器。必须设置数据库参数11.2.0.4.0兼容性。在集成捕获模式中，提取支持DDL包括基于密码的列加密。&lt;/p&gt;
&lt;p&gt;--注意： Password-based column encryption in DDL is not supported in classic capture mode.&lt;/p&gt;
&lt;h4&gt;2.4.1 支持的DML对象&lt;/h4&gt;
&lt;p&gt;– clusters&lt;/p&gt;
&lt;p&gt;– directories&lt;/p&gt;
&lt;p&gt;– functions&lt;/p&gt;
&lt;p&gt;– indexes&lt;/p&gt;
&lt;p&gt;– packages&lt;/p&gt;
&lt;p&gt;– procedure&lt;/p&gt;
&lt;p&gt;– tables&lt;/p&gt;
&lt;p&gt;– tablespaces&lt;/p&gt;
&lt;p&gt;– roles&lt;/p&gt;
&lt;p&gt;– sequences&lt;/p&gt;
&lt;p&gt;– synonyms&lt;/p&gt;
&lt;p&gt;– triggers&lt;/p&gt;
&lt;p&gt;– types&lt;/p&gt;
&lt;p&gt;– views&lt;/p&gt;
&lt;p&gt;– materialized views&lt;/p&gt;
&lt;p&gt;– users&lt;/p&gt;

&lt;p&gt;Oracle editionbased Redefinition(EBR)数据库复制的Oracle DDL是&lt;/p&gt;
&lt;p&gt;支持以下Oracle数据库对象的集成提取:&lt;/p&gt;
&lt;p&gt;– functions&lt;/p&gt;
&lt;p&gt;– library&lt;/p&gt;
&lt;p&gt;– packages (specification and body)&lt;/p&gt;
&lt;p&gt;– procedure&lt;/p&gt;
&lt;p&gt;– synonyms&lt;/p&gt;
&lt;p&gt;– types (specification and body)&lt;/p&gt;
&lt;p&gt;– views&lt;/p&gt;
&lt;p&gt;EBR不支持使用DDL触发器。&lt;/p&gt;

&lt;h4&gt;2.4.2 支持的DML操作&lt;/h4&gt;
&lt;p&gt;■GoldenGate支持DDL操作4 MB的大小。GoldenGate用字节来度量DDL语句的大小，而不是字符。这大小限制包括包、过程和函数。实际的大小限制DDL的支持是近似的，因为大小不仅包括语句文本，但也包括Oracle GoldenGate的维护开销对象名称的长度、DDL类型和其他特征在内部保存DDL记录。&lt;/p&gt;
&lt;p&gt;■GoldenGate支持全局临时表(GTT)DDL操作要清晰可见，这样它们就可以被复制。您必须设置DDLOPTIONS允许这个操作的参数，因为它不是默认设置的&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.5 OGG不支持的数据类型和对象&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;集成和经典的捕获模式&lt;/p&gt;

&lt;h4&gt;2.5.1 不支持的Oracle数据类型&lt;/h4&gt;
&lt;p&gt;Oracle GoldenGate不支持以下数据类型。&lt;/p&gt;
&lt;p&gt;■对于不具有VARRAYS的数据类型，基于ANYDATA fetch的列支持&lt;/p&gt;
&lt;p&gt;包括嵌入在这些数据类型中的命名集合和VARRAYS&lt;/p&gt;
&lt;p&gt;■ANYDATASET&lt;/p&gt;
&lt;p&gt;■ANYTYPE&lt;/p&gt;
&lt;p&gt;■BFILE&lt;/p&gt;
&lt;p&gt;■MLSLABEL&lt;/p&gt;
&lt;p&gt;■ORDDICOM&lt;/p&gt;
&lt;p&gt;■TIMEZONE_ABBR&lt;/p&gt;
&lt;p&gt;■URITYPE&lt;/p&gt;
&lt;p&gt;■包含不受支持的Oracle数据类型的UDT&lt;/p&gt;
&lt;p&gt;■Oracle GoldenGate不支持标识列数据的复制或有效时间时间列数据。&lt;/p&gt;
&lt;p&gt;以及calssical不支持的capture 类型，如：LONG VARCHAR，XML columns stored as&lt;/p&gt;
&lt;p&gt;Object-Relational，Basic Compression, OLTP-Compression, Exadata Hybrid Columnar&lt;/p&gt;
&lt;p&gt;Compression，Invisible（隐形）columns。&lt;/p&gt;

&lt;h4&gt;2.5.2 不支持索引组织表&lt;/h4&gt;
&lt;p&gt;索引组织表的不支持限制，这些适用于经典拍摄模式。&lt;/p&gt;
&lt;p&gt;■启用密钥压缩的IOT（由COMPRESS关键字指示key_compression子句）在经典捕获模式下不受支持，但是支持集成捕获模式。&lt;/p&gt;

&lt;h4&gt;2.5.3 不支持的视图&lt;/h4&gt;
&lt;p&gt;不支持的视图，这些限制适用于集成和经典的捕获模式。&lt;/p&gt;
&lt;p&gt;■GoldenGate支持捕获从一个视图提取初始载荷模式(直接从源视图获取，而不是重做日志)。&lt;/p&gt;
&lt;p&gt;■GoldenGate不捕获变更数据从一个视图,但是它支持从视图的底层表中捕获。&lt;/p&gt;
&lt;p&gt;■GoldenGate可以复制到一个视图可更新，只要视图是固有的。源表的结构和目标视图必须是相同的&lt;/p&gt;

&lt;h4&gt;2.5.4 不支持物化视图&lt;/h4&gt;
&lt;p&gt;在经典的和集成的模式中得到了物化视图&lt;/p&gt;
&lt;p&gt;以下的局限性。&lt;/p&gt;
&lt;p&gt;■物化视图不支持创建ROWID。&lt;/p&gt;
&lt;p&gt;对Oracle DML中对象和操作的支持细节为Oracle数据库安装和配置Oracle GoldenGate&lt;/p&gt;
&lt;p&gt;■可以创建物化视图日志与ROWID。&lt;/p&gt;
&lt;p&gt;■源表必须有一个主键。&lt;/p&gt;
&lt;p&gt;■截断的物化视图不支持。您可以使用DELETE FROM声明。&lt;/p&gt;
&lt;p&gt;■DML(但不是DDL)从一个完整的刷新物化视图的支持。如果DDL&lt;/p&gt;
&lt;p&gt;需要支持此特性，打开Oracle GoldenGate支持案例。&lt;/p&gt;
&lt;p&gt;■为Replicat Create MV命令必须包括更新条款&lt;/p&gt;
&lt;p&gt;■物化视图可以被复制或底层基表(s),但不是两者都有&lt;/p&gt;

&lt;h4&gt;2.5.5 不支持集群表&lt;/h4&gt;
&lt;p&gt;不支持的集群表：&lt;/p&gt;
&lt;p&gt;在集成和经典的捕获模式中支持索引集群，在两种模式中都不支持散列集群。在经典的捕获模式下:&lt;/p&gt;
&lt;p&gt;■加密和压缩群集表不支持在经典的捕捉。&lt;/p&gt;
&lt;p&gt;■提取在经典的捕获模式捕获DML更改索引集群表，如果集群因子大小保持不变。任何导致集群大小的DDL增加或减少可能导致提取到该表上的后续DML不正确。&lt;/p&gt;

&lt;h4&gt;2.5.6 不支持的序列&lt;/h4&gt;
&lt;p&gt;不支持的序列，这些适用于集成和经典的捕获模式。&lt;/p&gt;
&lt;p&gt;■GoldenGate不支持复制的序列值active - active双向配置。&lt;/p&gt;
&lt;p&gt;■缓存大小和源和目标序列的增量区间必须的是相同的。缓存可以是任何大小，包括0(NOCACHE)。&lt;/p&gt;
&lt;p&gt;■序列可以设置为循环周期,但源和目标数据库必须以同样的方式设置。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.6 DML不支持的对象和操作&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;2.6.1 DML不支持的对象和操作&lt;/h4&gt;
&lt;p&gt;如下DML在经典或集成捕获模式中都不支持:&lt;/p&gt;
&lt;p&gt;■REF&lt;/p&gt;
&lt;p&gt;■序列值在一个active - active双向配置&lt;/p&gt;
&lt;p&gt;■Database Replay&lt;/p&gt;
&lt;p&gt;■创建外部表&lt;/p&gt;
&lt;p&gt;■无形的列不支持通过经典或综合提取。&lt;/p&gt;
&lt;h4&gt;2.6.2 经典模式不支持对象和操作&lt;/h4&gt;
&lt;p&gt;以下是经典捕获模式中不支持:&lt;/p&gt;
&lt;p&gt;■Exadata混合柱状压缩&lt;/p&gt;
&lt;p&gt;■捕获与OLTP表压缩表&lt;/p&gt;
&lt;p&gt;■捕获与压缩的表空间和表创建或修改&lt;/p&gt;
&lt;p&gt;■捕获从加密和压缩群集表&lt;/p&gt;
&lt;p&gt;■无形的列&lt;/p&gt;
&lt;p&gt;■分布式事务。在Oracle版本11.1.0.6和更高版本中，可以捕获这些事务如果您通过以下方式使它们不分布命令，要求重新启动数据库。&lt;/p&gt;
&lt;p&gt;改变系统设置_CLUSTERWIDE_GLOBAL_TRANSACTIONS = FALSE;&lt;/p&gt;
&lt;p&gt;■RAC分布式XA和PDML分布式事务&lt;/p&gt;
&lt;p&gt;■enabled-tables版本&lt;/p&gt;
&lt;p&gt;■标识列&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.7 DDL不支持的对象和操作&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;2.7.1 DDL不支持的对象和操作（经典和集成模式）&lt;/h4&gt;
&lt;p&gt;&quot;ANONYMOUS&quot;, // HTTP access to XDB&lt;/p&gt;
&lt;p&gt;&quot;APPQOSSYS&quot;, // QOS system user&lt;/p&gt;
&lt;p&gt;&quot;AUDSYS&quot;, // audit super user&lt;/p&gt;
&lt;p&gt;&quot;BI&quot;, // Business Intelligence&lt;/p&gt;
&lt;p&gt;&quot;CTXSYS&quot;, // Text&lt;/p&gt;
&lt;p&gt;&quot;DBSNMP&quot;, // SNMP agent for OEM&lt;/p&gt;
&lt;p&gt;&quot;DIP&quot;, // Directory Integration Platform&lt;/p&gt;
&lt;p&gt;&quot;DMSYS&quot;, // Data Mining&lt;/p&gt;
&lt;p&gt;&quot;DVF&quot;, // Database Vault&lt;/p&gt;
&lt;p&gt;&quot;DVSYS&quot;, // Database Vault&lt;/p&gt;
&lt;p&gt;&quot;EXDSYS&quot;, // External OGGI System User&lt;/p&gt;
&lt;p&gt;&quot;EXFSYS&quot;, // Expression Filter&lt;/p&gt;
&lt;p&gt;&quot;GSMADMIN_INTERNAL&quot;, // Global Service Manager&lt;/p&gt;
&lt;p&gt;&quot;GSMCATUSER&quot;, // Global Service Manager&lt;/p&gt;
&lt;p&gt;&quot;GSMUSER&quot;, // Global Service Manager&lt;/p&gt;
&lt;p&gt;&quot;LBACSYS&quot;, // Label Security&lt;/p&gt;
&lt;p&gt;&quot;MDSYS&quot;, // Spatial&lt;/p&gt;
&lt;p&gt;&quot;MGMT_VIEW&quot;, // OEM Database Control&lt;/p&gt;
&lt;p&gt;&quot;MTSSYS&quot;, // MS Transaction Server&lt;/p&gt;
&lt;p&gt;&quot;ODM&quot;, // Data Mining&lt;/p&gt;
&lt;p&gt;&quot;ODM_MTR&quot;, // Data Mining Repository&lt;/p&gt;
&lt;p&gt;&quot;OJVMSYS&quot;, // Java Policy SRO Schema&lt;/p&gt;
&lt;p&gt;&quot;OLAPSYS&quot;, // OLAP catalogs&lt;/p&gt;
&lt;p&gt;&quot;ORACLE_OCM&quot;, // Oracle Configuration Manager User&lt;/p&gt;
&lt;p&gt;&quot;ORDDATA&quot;, // Intermedia&lt;/p&gt;
&lt;p&gt;&quot;ORDPLUGINS&quot;, // Intermedia&lt;/p&gt;
&lt;p&gt;&quot;ORDSYS&quot;, // Intermedia&lt;/p&gt;
&lt;p&gt;&quot;OUTLN&quot;, // Outlines (Plan Stability)&lt;/p&gt;
&lt;p&gt;&quot;SI_INFORMTN_SCHEMA&quot;, // SQL/MM Still Image&lt;/p&gt;
&lt;p&gt;&quot;SPATIAL_CSW_ADMIN&quot;, // Spatial Catalog Services for Web&lt;/p&gt;
&lt;p&gt;&quot;SPATIAL_CSW_ADMIN_USR&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SPATIAL_WFS_ADMIN&quot;, // Spatial Web Feature Service&lt;/p&gt;
&lt;p&gt;&quot;SPATIAL_WFS_ADMIN_USR&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SYS&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SYSBACKUP&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SYSDG&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SYSKM&quot;,&lt;/p&gt;
&lt;p&gt;&quot;SYSMAN&quot;, // Adminstrator OEM&lt;/p&gt;
&lt;p&gt;&quot;SYSTEM&quot;,&lt;/p&gt;
&lt;p&gt;&quot;TSMSYS&quot;, // Transparent Session Migration&lt;/p&gt;
&lt;p&gt;&quot;WKPROXY&quot;, // Ultrasearch&lt;/p&gt;
&lt;p&gt;&quot;WKSYS&quot;, // Ultrasearch&lt;/p&gt;
&lt;p&gt;&quot;WK_TEST&quot;,&lt;/p&gt;
&lt;p&gt;&quot;WMSYS&quot;, // Workspace Manager&lt;/p&gt;
&lt;p&gt;&quot;XDB&quot;, // XML DB&lt;/p&gt;
&lt;p&gt;&quot;XS$NULL&quot;,&lt;/p&gt;
&lt;p&gt;&quot;XTISYS&quot;, // Time Index&lt;/p&gt;

&lt;p&gt;Special schemas:&lt;/p&gt;

&lt;p&gt;&quot;*.AQ$*&quot;, // advanced queues&lt;/p&gt;
&lt;p&gt;&quot;*.DR$*$*&quot;, // oracle text&lt;/p&gt;
&lt;p&gt;&quot;*.M*_*$$&quot;, // Spatial index&lt;/p&gt;
&lt;p&gt;&quot;*.MLOG$*&quot;, // materialized views&lt;/p&gt;
&lt;p&gt;&quot;*.OGGQT$*&quot;,&lt;/p&gt;
&lt;p&gt;&quot;*.RUPD$*&quot;, // materialized views&lt;/p&gt;
&lt;p&gt;&quot;*.SYS_C*&quot;, // constraints&lt;/p&gt;
&lt;p&gt;&quot;*.MDR*_*$&quot;, // Spatial Sequence and Table&lt;/p&gt;
&lt;p&gt;&quot;*.SYS_IMPORT_TABLE*&quot;,&lt;/p&gt;
&lt;p&gt;&quot;*.CMP*$*&quot;, // space management, rdbms &amp;gt;= 12.1&lt;/p&gt;
&lt;p&gt;&quot;*.DBMS_TABCOMP_TEMP_*&quot;, // space management, rdbms &amp;lt; 12.1&lt;/p&gt;
&lt;p&gt;&quot;*.MDXT_*$*&quot; // Spatial extended statistics tables&lt;/p&gt;

&lt;h4&gt;2.7.2 DDL不支持的对象和操作（其它类）&lt;/h4&gt;
&lt;p&gt;■ DDL on nested tables.&lt;/p&gt;
&lt;p&gt;■ DDL on invisible columns.&lt;/p&gt;
&lt;p&gt;■ DDL on identity columns&lt;/p&gt;
&lt;p&gt;更改数据库和更改系统(这些不被认为是DDL)使用集成字典，您可以复制ALTER DATABASE默认版本更改可插入数据库的默认版本。所有其他的改变(PLUGABLE)数据库命令将被忽略。&lt;/p&gt;
&lt;p&gt;■备用数据库的DDL。&lt;/p&gt;
&lt;p&gt;■数据库链接DDL。&lt;/p&gt;
&lt;p&gt;■DDL创建表的闪回存档条款和DDL创建,alters，或者删除flashback数据归档本身。DML在表中闪回支持档案。&lt;/p&gt;
&lt;p&gt;■经典捕获模式不支持DDL,包括密码列加密。&lt;/p&gt;

&lt;p&gt;Oracle对象名称在默认情况下是不敏感的，但是可以区分大小写，使用双引号。(GoldenGate)支持大小写敏感性。&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;2.8 查看OGG不支持的模式&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;2.8.1 查延迟约束的类型和对象&lt;/h4&gt;
&lt;p&gt;col CONSTRAINT_NAME for a30&lt;/p&gt;
&lt;p&gt;select owner,table_name,CONSTRAINT_TYPE,DEFERRED from dba_constraints where DEFERRED='DEFERRED';&lt;/p&gt;

&lt;p&gt;按照用户同步可使用如下语句：&lt;/p&gt;
&lt;p&gt;col CONSTRAINT_NAME for a30&lt;/p&gt;
&lt;p&gt;select owner,table_name,CONSTRAINT_TYPE,DEFERRED from user_constraints where DEFERRED='DEFERRED';&lt;/p&gt;

&lt;h4&gt;2.8.2 没有主键和唯一键的表&lt;/h4&gt;
&lt;p&gt;col TABLE_NAME for a50&lt;/p&gt;
&lt;p&gt;SELECT owner, TABLE_NAME，CONSTRAINT_TYPE FROM dba_constraints t WHERE NOT EXISTS(SELECT table_name FROM dba_constraints c WHERE constraint_type in（'P','U'） AND t.table_name=c.table_name)；&lt;/p&gt;

&lt;p&gt;按照用户同步可使用如下语句：&lt;/p&gt;
&lt;p&gt;col TABLE_NAME for a50&lt;/p&gt;
&lt;p&gt;SELECT owner, TABLE_NAME，CONSTRAINT_TYPE FROM user_constraints t WHERE NOT EXISTS(SELECT table_name FROM User_constraints c WHERE constraint_type in（'P','U'） AND t.table_name=c.table_name)；&lt;/p&gt;

&lt;h4&gt;2.8.3 不支持的字段,类型&lt;/h4&gt;
&lt;p&gt;set lin 150          &lt;/p&gt;
&lt;p&gt;set pages 100&lt;/p&gt;
&lt;p&gt;col table_name for a30&lt;/p&gt;
&lt;p&gt;col owner for a10&lt;/p&gt;
&lt;p&gt;col column_name for a30&lt;/p&gt;
&lt;p&gt;select owner,table_name,column_name,data_type from dba_tab_columns where owner in ('XXX') and data_type in ('ANYDATA','ANYDATASET','ANYTYPE','BFILE','MLSLABEL','ORDDICOM','REFs','TIMEZONE_ABBR','URITYPE','UDT');&lt;/p&gt;

&lt;p&gt;或者：&lt;/p&gt;
&lt;p&gt;select owner,table_name,column_name,data_type from dba_tab_columns where data_type in ('ANYDATA','ANYDATASET','ANYTYPE','BFILE','MLSLABEL','ORDDICOM','REFs','TIMEZONE_ABBR','URITYPE','UDT');&lt;/p&gt;

&lt;h4&gt;2.8.4 不支持压缩表&lt;/h4&gt;
&lt;p&gt;select owner,table_name from dba_tables where compression='ENABLED';&lt;/p&gt;
&lt;p&gt;或者按用户查找：&lt;/p&gt;

&lt;p&gt;select owner,table_name from dba_tables where owner in ('HR') and compression='ENABLED';&lt;/p&gt;

&lt;h4&gt;2.8.5 不支持物化视图&lt;/h4&gt;
&lt;p&gt;COL OBJECT_NAME FOR A30&lt;/p&gt;
&lt;p&gt;select object_name,owner from dba_objects where object_type='MATERIALIZED VIEW';&lt;/p&gt;

&lt;p&gt;或者按照用户查找：&lt;/p&gt;

&lt;p&gt;COL OBJECT_NAME FOR A30&lt;/p&gt;
&lt;p&gt;select object_name,owner from dba_objects where owner in('hr') and object_type='MATERIALIZED VIEW';&lt;/p&gt;

&lt;p&gt;
&lt;h2&gt;三、OGG12.1的OUI的安装&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;注释：源库和目标库都安装。&lt;/p&gt;
&lt;p&gt;相关目录，并把安装软件上传上去：&lt;/p&gt;
&lt;p&gt;官方建议软件安装到Oracle Cluster File System (OCFS)卷，而不是安装到本地直接目录。&lt;/p&gt;
&lt;p&gt;[root@ogg1 ~]# cd /ogg/&lt;/p&gt;
&lt;p&gt;[root@ogg1 ogg]# mkdir home&lt;/p&gt;
&lt;p&gt;[root@ogg1 ogg]# mkdir ogginstall&lt;/p&gt;
&lt;p&gt;[root@ogg1 ogg]# chown -R oracle:oinstall /ogg/&lt;/p&gt;
&lt;p&gt; 注意：ogg安装目录要为空。&lt;/p&gt;
&lt;p&gt;LINUX 环境下运行runInstaller&lt;/p&gt;
&lt;div&gt;
&lt;h3&gt;3.1 OGG安装步骤（源，目标库）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114641387-1440251832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114659010-1952734389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114710422-129705725.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;3.2 OGG目录的说明&lt;/h3&gt;
&lt;/p&gt;

&lt;p&gt;以上所创建的目录的作用：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;Name&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;purpose&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirchk&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Checkpoint files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;用来存放检查点(checkpoint)文件,次检查点是ogg自己的检查点与实例不同&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirdat&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;GoldenGate trails&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot;&gt;
&lt;p&gt;用来存放TRAIL文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirdef&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Data definition files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用来存放通过DEFGEN工具生成的源或目标端数据定义文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirprm&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Parameter files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用来存放配置参数文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirpcs&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Process status files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用来存放进程状态文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirrpt&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Report files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用来存放进程报告文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirsql&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;SQL script files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用来存放SQL脚本文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;118&quot;&gt;
&lt;p&gt;dirtmp&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;165&quot;&gt;
&lt;p&gt;Temporary files&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;408&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;当事物所需要的内存超过已分配内存时,默认存储在这个目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;
&lt;h2&gt; 四、OGG 数据库准备工作&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;4.1 数据库级别最下附加日志&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;查看以及修改语句如下（12.1 ogg官方安装文档54页）：&lt;/p&gt;
&lt;p&gt;SELECT supplemental_log_data_min, force_logging FROM v$database;&lt;/p&gt;
&lt;p&gt;ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;&lt;/p&gt;
&lt;p&gt;ALTER DATABASE FORCE LOGGING;&lt;/p&gt;
&lt;p&gt;SELECT supplemental_log_data_min, force_logging FROM v$database;&lt;/p&gt;
&lt;p&gt;ALTER SYSTEM SWITCH LOGFILE;&lt;/p&gt;

&lt;div readability=&quot;17&quot;&gt;
&lt;p&gt;SQL&amp;gt; select supplemental_log_data_min from v$database;&lt;/p&gt;

&lt;p&gt;SUPPLEME&lt;/p&gt;
&lt;p&gt;--------&lt;/p&gt;
&lt;p&gt;YES                       -------------若不是YES，需要打开&lt;/p&gt;

&lt;p&gt;打开语句：&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; alter database add supplemental log data;&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; ALTER SYSTEM SWITCH LOGFILE;&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; select force_logging from v$database;&lt;/p&gt;

&lt;p&gt;FOR&lt;/p&gt;
&lt;p&gt;---&lt;/p&gt;
&lt;p&gt;YES&lt;/p&gt;

&lt;p&gt;SQL&amp;gt; ALTER DATABASE FORCE LOGGING;&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;4.2 确认表级附加日志添加&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;1、确认所有表的状态是否logging，把nologing变成logging。&lt;/p&gt;

&lt;p&gt;select owner,table_name from dba_tables where owner in ('HR') and logging='NO';&lt;/p&gt;
&lt;p&gt;OWNER                          TABLE_NAME&lt;/p&gt;
&lt;p&gt;------------------------------ ------------------------------&lt;/p&gt;
&lt;p&gt;HR                             DEPARTMENTS&lt;/p&gt;
&lt;p&gt;HR                             REGIONS&lt;/p&gt;
&lt;p&gt;HR                             JOBS&lt;/p&gt;
&lt;p&gt;HR                             EMPLOYEES&lt;/p&gt;
&lt;p&gt;HR                             JOB_HISTORY&lt;/p&gt;
&lt;p&gt;HR                             LOCATIONS&lt;/p&gt;

&lt;p&gt;6 rows selected.&lt;/p&gt;

&lt;p&gt;2、打开表级附加日志&lt;/p&gt;
&lt;p&gt;select 'alter table '||owner||'.'||table_name||' logging;' from dba_tables where owner in ('HR') and logging='NO';&lt;/p&gt;

&lt;p&gt;'ALTERTABLE'||OWNER||'.'||TABLE_NAME||'LOGGING;'&lt;/p&gt;
&lt;p&gt;--------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;alter table HR.DEPARTMENTS logging;&lt;/p&gt;
&lt;p&gt;alter table HR.REGIONS logging;&lt;/p&gt;
&lt;p&gt;alter table HR.JOBS logging;&lt;/p&gt;
&lt;p&gt;alter table HR.EMPLOYEES logging;&lt;/p&gt;
&lt;p&gt;alter table HR.JOB_HISTORY logging;&lt;/p&gt;
&lt;p&gt;alter table HR.LOCATIONS logging;&lt;/p&gt;

&lt;p&gt;3、确认已经打开标记附加日志。&lt;/p&gt;
&lt;p&gt;select owner,table_name from dba_tables where owner in ('HR') and logging='NO';&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;4.3 数据库启用goldengate&lt;/h3&gt;
&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;Oracle 11.2.0.4 以及之后版本数据库，&lt;strong&gt;源库以及目标库&lt;/strong&gt;必须开启参数。&lt;/p&gt;
&lt;p&gt;ENABLE_GOLDENGATE_REPLICATION&lt;/p&gt;
&lt;p&gt;1、启用参数 ENABLE_GOLDENGATE_REPLICATION&lt;/p&gt;
&lt;p&gt;alter system set enable_goldengate_replication=true;&lt;/p&gt;

&lt;p&gt;SQL&amp;gt; show parameter gold&lt;/p&gt;

&lt;p&gt;NAME                                 TYPE        VALUE&lt;/p&gt;
&lt;p&gt;------------------------------------ ----------- ------------------------------&lt;/p&gt;
&lt;p&gt;enable_goldengate_replication        boolean     FALSE&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; alter system set enable_goldengate_replication=true;&lt;/p&gt;

&lt;p&gt;2、设置闪回查询&lt;/p&gt;
&lt;p&gt;如果源库需要开启闪回查询，建议增大undo 表空间的大小以及保留时间。&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; show parameter undo&lt;/p&gt;

&lt;p&gt;NAME                                 TYPE        VALUE&lt;/p&gt;
&lt;p&gt;------------------------------------ ----------- ------------------------------&lt;/p&gt;
&lt;p&gt;undo_management                      string      AUTO&lt;/p&gt;
&lt;p&gt;undo_retention                       integer     900&lt;/p&gt;
&lt;p&gt;undo_tablespace                      string      UNDOTBS1&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;alter system set undo_retention=1800 scope=both;&lt;/p&gt;
&lt;p&gt;alter tablespace UNDOTBS1 add datafile '+datadg' size 2048m;&lt;/p&gt;
&lt;p&gt;GRANT FLASHBACK ANY TABLE TO db_user&lt;/p&gt;
&lt;p&gt;GRANT FLASHBACK ON schema.table TO db_user;&lt;/p&gt;

&lt;p&gt;3、需要注意的参数&lt;/p&gt;
&lt;p&gt;STREAMS_POOL_SIZE，MAX_SGA_SIZE，PARALLELISM&lt;/p&gt;

&lt;p&gt;GoldenGate默认情况下，一个完整的采集提取请求的服务器运行日志挖掘max_sga_size 1GB和平行度2。因此，如果您运行三个提取在同一数据库实例中的集成捕获模式中，至少需要3 GB的分配给流池的内存。作为最佳实践，保留25%的流&lt;/p&gt;
&lt;p&gt;池。例如，如果在&lt;strong&gt;集成&lt;/strong&gt;捕获模式中有三个提取，则设置&lt;/p&gt;
&lt;p&gt;streams_pool_size以下：&lt;/p&gt;
&lt;p&gt;3 GB +（3 GB×0.25）= 3.75 GB&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;4.4 创建管理用户&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;4.4.1创建管理用户ogg&lt;/h4&gt;
&lt;p&gt;注意：要按照实际情况分配大小（&lt;strong&gt;目标库、源库&lt;/strong&gt;执行以下操作）。&lt;/p&gt;
&lt;p&gt;创建表空间是为了DDL同步,以及OGG查询。&lt;/p&gt;
&lt;p&gt;create tablespace ogg datafile '+DATADG' size 2048M autoextend on next 200m;&lt;/p&gt;
&lt;p&gt;create user ogg identified by ogg default tablespace ogg;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;SQL&amp;gt; create tablespace ogg datafile '+DATADG' size 2048M autoextend on next 200m;&lt;/p&gt;

&lt;p&gt;SQL&amp;gt; create user ogg identified by ogg default tablespace ogg;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;--授权，DBA权限在安装成功后可以收回：&lt;/p&gt;
&lt;p&gt;11.2.0.3 之后的授权（参照OGG12.1安装文档63页）：&lt;/p&gt;

&lt;p&gt;GRANT CONNECT TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT ALTER ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT ALTER SESSION TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT CREATE SESSION TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT FLASHBACK ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY DICTIONARY TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT LOCK ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT RESOURCE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT DBA TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY TRANSACTION TO ogg;&lt;/p&gt;
&lt;p&gt;exec dbms_goldengate_auth.grant_admin_privilege('ogg');&lt;/p&gt;
&lt;p&gt;GRANT UNLIMITED TABLESPACE TO ogg;&lt;/p&gt;

&lt;div readability=&quot;37&quot;&gt;
&lt;p&gt;GRANT CONNECT TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT ALTER ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT ALTER SESSION TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT CREATE SESSION TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT FLASHBACK ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY DICTIONARY TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT LOCK ANY TABLE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT RESOURCE TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT DBA TO ogg;&lt;/p&gt;
&lt;p&gt;GRANT SELECT ANY TRANSACTION TO ogg;&lt;/p&gt;
&lt;p&gt;exec dbms_goldengate_auth.grant_admin_privilege('ogg');&lt;/p&gt;
&lt;p&gt;--Capture from Data Vault,Capture from Virtual Private&lt;/p&gt;
&lt;p&gt;Database, Capture redacted data&lt;/p&gt;
&lt;p&gt;sys.dbms_internal_clkm 复制Oracle Transparent Data Encryption (TDE)时需要.&lt;/p&gt;
&lt;p&gt;--安装成功后可以收回dba权限，但是要授予UNLIMITED TABLESPACE权限。&lt;/p&gt;
&lt;p&gt;GRANT UNLIMITED TABLESPACE TO ogg;&lt;/p&gt;
&lt;p&gt;或者alter user ogg quota unlimited on users;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;--在ddl_setup时报错，通过授予以下权限解决。&lt;/p&gt;
&lt;div readability=&quot;19&quot;&gt;
&lt;p&gt;grant create any table to ogg;&lt;/p&gt;
&lt;p&gt;grant create any view to ogg;&lt;/p&gt;
&lt;p&gt;grant create any procedure to ogg;&lt;/p&gt;
&lt;p&gt;grant create any sequence to ogg;&lt;/p&gt;
&lt;p&gt;grant create any index to ogg;&lt;/p&gt;
&lt;p&gt;grant create any trigger to ogg;&lt;/p&gt;
&lt;p&gt;grant create any view to ogg;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;h3&gt;4.5  OGG DDL 的配置                  &lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;来自（OGG 12.1 官方文档131页13.7）&lt;/p&gt;

&lt;p&gt;启用 ddl 支持&lt;/p&gt;
&lt;p&gt;默认情况下, ddl 复制支持的状态如下:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源库中&lt;/strong&gt;：默认情况下&lt;strong&gt;禁用&lt;/strong&gt;oracle GoldenGate ddl 支持。必须使用 ddl 参数配置提取以捕获 ddl。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标库&lt;/strong&gt;上,：默认情况下启用 ddl 支持, 以维护复制的事务性数据。默认情况下, Replicat 将处理所有 ddl跟踪所包含的操作。如果需要, 可以使用 ddl 参数来配置 Replicat 以忽略或筛选 ddl 操作。&lt;/p&gt;

&lt;p&gt;■ just DDL changes&lt;/p&gt;
&lt;p&gt;■ just DML changes&lt;/p&gt;
&lt;p&gt;■ both DDL and DML&lt;/p&gt;

&lt;p&gt;何时使用基于 ddl 捕获，必须使用基于 ddl 捕获时, 提取将在以下操作配置:&lt;/p&gt;
&lt;p&gt;提取操作的经典捕获模式对任何版本的 oracle 数据库。提取操作以集成模式对 oracle 数据库版本11.2.0.3 或早.如果提取将在集成模式下运行11.2.0.4 或更高版本的 oracle数据库, 则不需要 ddl 触发器。默认情况下, 将处理 ddl 捕获透明地通过数据库 logmining 服务器。如果提取将从多容器数据库捕获, 集成捕获模式必须与本机 ddl 捕获方法一起使用。&lt;/p&gt;

&lt;h4&gt;4.5.1 基于DDL触发器的捕获（源库执行）&lt;/h4&gt;
&lt;p&gt;classcial 模式安装DDL对象（OGG 安装文档222,223页）：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114752559-687947142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注释：从OGG 安装目录下执行如下脚本。&lt;/p&gt;

&lt;p&gt;1.确定DDL SCHEMA&lt;/p&gt;
&lt;p&gt;需要配置在GLOBALS中：GGSCHEMA ogg&lt;/p&gt;

&lt;p&gt;2.授予ogg读写操作系统上的文本文件权限&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;GRANT EXECUTE ON UTL_FILE TO ogg;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;3.准备表空间&lt;/p&gt;
&lt;p&gt;为ogg_DDL_HIST、 ogg_MARKER等表准备表空间，如果空间不足，会导致数据库无法进行DDL，从而影响业务。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;SQL&amp;gt; alter user ogg default tablespace ogg;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;4.退出所有ORACLE会话，不允许新会话产生。退出所有Oracle会话，包括那些SQL * Plus，那些业务应用程序，Oracle GoldenGate进程的应用程序，以及任何其他应用程序使用Oracle的软件。 防止任何新会话的开始。&lt;/p&gt;

&lt;p&gt;5.sqlplus &quot;/as sysdba&quot;  ----必须sysdba连入 ，运行SQL * Plus并以具有SYSDBA权限的用户身份登录。 这个特权是需要在SYS模式中安装DDL触发器，这是Oracle需要的。&lt;/p&gt;

&lt;p&gt;6.@marker_setup&lt;/p&gt;
&lt;p&gt;  --该脚本安装marker系统，这部分为启用DLL支持所必备，执行该脚本时会提示输入GoldenGate管理帐户schema名。&lt;/p&gt;

&lt;p&gt;7. @ddl_setup&lt;/p&gt;
&lt;p&gt;  执行该脚本要确认关闭掉所有ORACLE会话，以及提交相应问提交的事物。&lt;/p&gt;
&lt;p&gt;注意：如果ddl_setup.sql将失败此模式的表空间由任何其他用户共享，但是，如果不行，那不会失败默认表空间没有将AUTOEXTEND设置为ON，建议使用设置。&lt;/p&gt;

&lt;p&gt;8. @role_setup&lt;/p&gt;
&lt;p&gt;--该操作会重建DDL同步所需的权限，授予GoldenGate中的DDL对象以DML权限。&lt;/p&gt;
&lt;p&gt;提示你执行一条GRANT语句，执行即可！&lt;/p&gt;

&lt;p&gt;GRANT GGS_GGSUSER_ROLE TO ogg;&lt;/p&gt;

&lt;p&gt;9. @ddl_enable.sql&lt;/p&gt;
&lt;p&gt;  --启用DDL触发器，以捕获DDL操作。&lt;/p&gt;

&lt;p&gt;10. @ddl_pin.sql ogg&lt;/p&gt;
&lt;p&gt;先执行@?/rdbms/admin/dbmspool.sql （DDL 性能工具）&lt;/p&gt;

&lt;p&gt;要提高DDL触发器的性能，可以通过ddl_pin脚本，该脚本会将触发器使用的包加载到内存，以此提高效率。该脚本执行时需要引用dbms_shared_pool系统包，因此在使用ddl_pin脚本前需要确保dbms_shared_pool可用。执行ddl_pin脚本需要指定GoldenGate管理员schema名称.&lt;/p&gt;


&lt;p&gt;11. @ddl_status.sql&lt;/p&gt;

&lt;p&gt;验证是否由该对象创建的每个对象Oracle GoldenGate DDL支持特性的存在和存在正常运作。(Oracle安装).&lt;/p&gt;

&lt;h4&gt;4.5.2 重置DDL环境&lt;/h4&gt;
&lt;p&gt;1. Run GGSCI.&lt;/p&gt;
&lt;p&gt;2. STOP EXTRACT &amp;lt;group&amp;gt;&lt;/p&gt;
&lt;p&gt;3. STOP REPLICAT &amp;lt;group&amp;gt;&lt;/p&gt;
&lt;p&gt;4. Run SQL*Plus and log in as a user that has SYSDBA privileges.&lt;/p&gt;
&lt;p&gt;5. Run the ddl_disable script.&lt;/p&gt;
&lt;p&gt;6. Run the ddl_remove script,&lt;/p&gt;
&lt;p&gt;7. Run the marker_remove script.&lt;/p&gt;
&lt;p&gt;8. Run the marker_setup script.&lt;/p&gt;
&lt;p&gt;9. Run the ddl_setup script.&lt;/p&gt;
&lt;p&gt;10. Run the role_setup script.&lt;/p&gt;
&lt;p&gt;11. Grant the role to all Oracle GoldenGate users&lt;/p&gt;
&lt;p&gt;12. Run the ddl_enable.sql script.&lt;/p&gt;

&lt;h4&gt;4.5.4 删除DDL环境：&lt;/h4&gt;
&lt;p&gt;1. Run GGSCI.&lt;/p&gt;
&lt;p&gt;2. STOP EXTRACT &amp;lt;group&amp;gt;&lt;/p&gt;
&lt;p&gt;3. STOP REPLICAT &amp;lt;group&amp;gt;&lt;/p&gt;
&lt;p&gt;4. Run SQL*Plus and log in as a user that has SYSDBA privileges.&lt;/p&gt;
&lt;p&gt;5. Run the ddl_disable script .&lt;/p&gt;
&lt;p&gt;6. Run the ddl_remove script&lt;/p&gt;
&lt;p&gt;7. Run the marker_remove script.&lt;/p&gt;

&lt;h4&gt;4.5.4 支持sequence&lt;/h4&gt;

&lt;p&gt;查看OGG 12.1.2 官方安装文档102-103页。&lt;/p&gt;
&lt;p&gt;在 Source 和 target 都得执行，&lt;/p&gt;
&lt;p&gt;grant dba to ogg;&lt;/p&gt;
&lt;p&gt;ggsci&lt;/p&gt;
&lt;p&gt;EDIT PARAMS ./GLOBALS  --后面参数配置&lt;/p&gt;
&lt;p&gt;GGSCHEMA ogg&lt;/p&gt;
&lt;p&gt;SQL&amp;gt; @sequence.sql&lt;/p&gt;
&lt;p&gt;在 source 系统里&lt;/p&gt;
&lt;p&gt;GRANT EXECUTE on &lt;strong&gt;DDLuser.updateSequence&lt;/strong&gt; TO DBLOGINuser;&lt;/p&gt;

&lt;p&gt;GRANT EXECUTE on ogg.updateSequence TO ogg;&lt;/p&gt;
&lt;p&gt;在 target 系统里&lt;/p&gt;
&lt;p&gt;GRANT EXECUTE on &lt;strong&gt;DDLuser.replicateSequence&lt;/strong&gt; TO Replicatuser;&lt;/p&gt;
&lt;p&gt;GRANT EXECUTE on ogg.replicateSequence TO ogg;&lt;/p&gt;

&lt;p&gt;源库执行如下：&lt;/p&gt;

&lt;p&gt;ALTER TABLE sys.seq$ ADD SUPPLEMENTAL LOG DATA (PRIMARY KEY) COLUMNS;&lt;/p&gt;
&lt;p&gt;DDL 支持配置完毕，就可以支持 sequences (CREATE, ALTER, DROP, RENAME)&lt;/p&gt;
&lt;p&gt;操作的复制的，但如果只是单纯的想复制 sequence 的话，可以不配置 DDL 支持，&lt;/p&gt;
&lt;p&gt;只需要 sequence 参数就 行。&lt;/p&gt;
&lt;p&gt;GGSCI&amp;gt; dblogin userid ogg@source,password ogg&lt;/p&gt;
&lt;p&gt;FLUSH SEQUENCE &amp;lt;owner.sequence&amp;gt; 或者 wildcard&lt;/p&gt;
&lt;p&gt;在 initial synchronization 之后，必须执行的就是在 target 上对没一个&lt;/p&gt;
&lt;p&gt;sequence 至少取一次 nextval&lt;/p&gt;

&lt;p&gt;参照OGG安装文档154页。&lt;/p&gt;
&lt;p&gt;注意：在允许新的DDL或者DML将发行的同一对象（S）作为原始DDL，让原来的DDL时间要复制到远程系统，然后再由提取该系统。这将确保操作到达正确的复制对原系统，防止DML元数据不一致造成的错误。&lt;/p&gt;

&lt;p&gt;在一个级联配置传播DDL EXT进程配置。&lt;/p&gt;

&lt;p&gt;DDLOPTIONS GETREPLICATES, IGNOREAPPLOPS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;序列复制中的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cycle的影响&lt;/p&gt;
&lt;p&gt;达到maxvalue后，会切换成minvalue值，但是有序列源和目标端算法限制，目标端进程必须在一直执行nextval，直到maxvalue，所以表象就是replicat一直hang的状态，checkpoint不向前移动。&lt;/p&gt;
&lt;p&gt;此时建议：&lt;/p&gt;
&lt;p&gt; 复制排除recycle的序列或者临时忽略sequence的复制。&lt;/p&gt;
&lt;p&gt; 或者加参数DBOPTIONS _MAXSEQUENCEDISTANCE &amp;lt;n&amp;gt; n – 源端和目标端seq的值相差多少可以ignore；&lt;/p&gt;
&lt;p&gt;现有的目标上（已经配置了序列复制）同时又配置了extract（配置了ddl setup），extract会很&lt;/p&gt;
&lt;p&gt;慢，建议修改seq的cache大小，或者配置DBOPTIONS _NOAUTOMATICSEQUENCEFLUSH来&lt;/p&gt;
&lt;p&gt;减少ALTER SEQUENCE CYCLE|NOCYCLE的产生。&lt;/p&gt;
&lt;p&gt;
&lt;h2&gt;五、OGG classical 模式源库的配置（cdc和initload配合）&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;5.1 添加supplement log&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331114939396-1738636710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;&lt;div readability=&quot;253&quot;&gt;
&lt;p&gt;
&lt;h3&gt;5.3 全局参数的设置&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;参数说明来自OGG 12.1.2 （Reference for Oracle GoldenGate for Windows and UNIX）12c 207-208页&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;28&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot;&gt;
&lt;p&gt;使用说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;TRAILBYTEORDER&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;left&quot;&gt;指定使用EXTFILE，RMTFILE，EXTTRAIL或RMTTRAIL参数创建的文件的字节顺序（字节顺序）。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;CHARMAP&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;指定字符映射文件覆盖字符代码点映射。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;CHARSET&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;在读取参数文件时，指定要使用的进程的多字节字符集，而不是操作系统默认值。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;CHECKPOINTTABLE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定一个默认检查点表。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;CREDENTIALSTORELOCATION&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定存储登录凭据的Oracle GoldenGate凭据存储的位置。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;DDLTABLE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定支持的DDL历史表的非默认名称Oracle的DDL同步。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;ENABLECATALOGNAMES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;支持SQL / MX数据库的三部分名称。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;ENABLEMONITORING&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;使Oracle GoldenGate Monitor可以查看和监视Oracle GoldenGate实例。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;EXCLUDEWILDCARDOBJECTSONLY&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;当TABLEEXCLUDE，SCHEMAEXCLUDE或CATALOGEXCLUDE参数包含通配符时，包含非通配符源表&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;GGSCHEMA&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定包含数据库对象的模式的名称支持Oracle的DDL同步。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;MARKERTABLE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定支持的DDL标记表的非默认名称Oracle的DDL同步。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;MAXGROUPS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;指定可以在其中运行的最大进程组数Oracle GoldenGate实例。（默认25，协调的MAXTHREADS选项的值ADD REPLICAT命令（默认值为25），加上其他Replicat的数量在Oracle GoldenGate实例中提取组不能超过MAXGROUPS值，或ADD REPLICAT返回错误）。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;MGRSERVNAME&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定Manager作为窗口服务安装时的名称。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;NAMECCSID&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;如果SQL目录中的对象名称为DB2，则指定DB2 CCSID&lt;/p&gt;
&lt;p&gt;与系统不同的CCSID。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;NODUPMSGSUPPRESSION&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;防止重复信息的自动抑制警告消息。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;OUTPUTFILEUMASK&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定Oracle GoldenGate进程可以使用的umask来创建跟踪文件和丢弃文件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;USEANSISQLQUOTES 或&lt;/p&gt;
&lt;p&gt;NOUSEANSISQLQUOTES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;为引用的对象名称和文字启用SQL-92规则。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;SYSLOG&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;过滤写入到的GoldenGate消息的类型系统日志。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;TRAILCHARSET&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;当路径是不存储源字符集的旧版本时，指定源数据的字符集，或者覆盖存储在路径中的字符集。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;UPREPORT&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;指定Manager报告“提取”的频率复制正在运行的进程。每次进程之一开始或停止，生成事件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;USEIPV4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;强制Oracle GoldenGate使用IPv4进行TCP / IP连接。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;USEIPV6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;强制Oracle GoldenGate使用Ipv6进行TCP / IP连接。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;WALLETLOCATION&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;425&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定主钥匙钱包的位置。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;具体操作：&lt;/p&gt;

&lt;div readability=&quot;16&quot;&gt;
&lt;p&gt;GGSCI (ogg1 as ogg@ogg1) 6&amp;gt; dblogin userid ogg@ogg1,password ogg&lt;/p&gt;
&lt;p&gt;Successfully logged into database.&lt;/p&gt;

&lt;p&gt;GGSCI (ogg1 as ogg@ogg1) 7&amp;gt; EDIT PARAMS ./GLOBALS&lt;/p&gt;
&lt;p&gt;GGSCHEMA ogg&lt;/p&gt;
&lt;p&gt;CHECKPOINTTABLE OGG.ggschkpt&lt;/p&gt;

&lt;p&gt;配置GLOBAL文件后，需要通过推出并重新登录ggsci，使得配置生效。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;h3&gt;5.4 创建检查点&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;参数说明来自OGG 12.1.2 （Reference for Oracle GoldenGate for Windows and UNIX）12c 261页。&lt;/p&gt;

&lt;p&gt;在GLOBALS参数文件中使用CHECKPOINTTABLE参数来指定名称所有Replicat组可以在一个或多个中使用的默认检查点表Oracle GoldenGate实例。所有使用ADD REPLICAT创建的Replicat组命令将默认为此表，除非它被覆盖该命令的CHECKPOINTTABLE选项。&lt;/p&gt;
&lt;p&gt;要创建检查点表，请使用GGSCI中的ADD CHECKPOINTTABLE命令。做不针对以集成模式配置的Replicat使用检查点表一个Oracle目标数据库。在该模式下不需要它，将被忽略。&lt;/p&gt;
&lt;p&gt;有关更多信息，请参阅管理适用于Windows和UNIX的Oracle GoldenGate创建一个检查点表。&lt;/p&gt;

&lt;p&gt;使用语法：&lt;/p&gt;

&lt;p&gt;Syntax&lt;/p&gt;
&lt;p&gt;CHECKPOINTTABLE [container. | catalog.] owner.table&lt;/p&gt;
&lt;p&gt;[container. | catalog.]owner.table&lt;/p&gt;
&lt;p&gt;The owner and name of the checkpoint table. Additionally, for an Oracle container&lt;/p&gt;
&lt;p&gt;database, specify the correct pluggable database (container). For a SQL/MX database,&lt;/p&gt;
&lt;p&gt;specify the correct catalog.&lt;/p&gt;
&lt;p&gt; Example&lt;/p&gt;
&lt;p&gt;CHECKPOINTTABLE finance.ggs.chkpt&lt;/p&gt;

&lt;p&gt;或者直接GGSCI中的ADD CHECKPOINTTABLE命令。&lt;/p&gt;

&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;GGSCI (ogg1) &amp;gt;  dblogin userid ogg@ogg1,password ogg&lt;/p&gt;
&lt;p&gt;Successfully logged into database.&lt;/p&gt;

&lt;p&gt;GGSCI (ogg1 as ogg@ogg1) 4&amp;gt; ADD CHECKPOINTTABLE&lt;/p&gt;

&lt;p&gt;No checkpoint table specified. Using GLOBALS specification (OGG.ggschkpt)&lt;/p&gt;

&lt;p&gt;Successfully created checkpoint table OGG.ggschkpt。&lt;/p&gt;

&lt;p&gt;Oracle GoldenGate检查点表在生产库配置完成。&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;5.５ 其他一些参数说明&lt;/h3&gt;
&lt;/p&gt;
&lt;h4&gt;5.5.1 通配符排除参数&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot;&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;EXCLUDEWILDCARDOBJECTSONLY&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;强制包含指定的非通配符的源对象在表或映射参数中，当一个排除参数包含一个通配符，否则将排除该对象。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;MAPEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从映射语句中排除源对象。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;TABLEEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从表语句中排除源对象。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;CATALOGEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;将源对象排除在指定的源容器中来自Oracle GoldenGate配置的目录容器或目录名使用通配符来指定表或映射语句。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;316&quot;&gt;
&lt;p&gt;SCHEMAEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;394&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;不包括由指定源拥有的源对象所有者(如模式)来自Oracle GoldenGate配置当通配符用于指定表或映射表中的所有者。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4&gt;5.5.2 DEFGEN参数&lt;/h4&gt;
&lt;p&gt;DEFGEN为源表或目标表创建具有数据定义的文件。数据定义当源表和目标表有不同的定义时，是否需要数据库有不同的类型。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot;&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;CATALOGEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从通配符中排除指定的源容器或目录规范。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;CHARSET&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定进程使用的多字节字符集，而不是读取参数文件时操作系统默认。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;DEFSFILE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;标识出DEFGEN写定义的文件的名称。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;NAMECCSID&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;为i CCSID指定一个DB2，如果SQL目录中的对象名称是与系统不同的CCSID。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;NOCATALOG&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;防止容器或目录名被包含在其中元数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;SCHEMAEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从通配符规范中排除指定的源模式。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;SOURCEDB&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;将数据源指定为登录信息的一部分&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;TABLE for DEFGEN&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;标识要捕获定义的表&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;210&quot;&gt;
&lt;p&gt;USERIDALIAS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;500&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定数据库连接信息。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4&gt;5.5.3 DDL参数&lt;/h4&gt;
&lt;p&gt;这些参数控制Oracle GoldenGate DDL支持。其他参数可以需要使用DDL支持，但是这里的这些是专门处理DDL特性的。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot;&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DDL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;启用DDL支持和过滤DDL。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DDLERROR&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;处理DDL复制期间发生的错误。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DDLOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;除了过滤和过滤之外，还配置DDL复制的各个方面字符串替换。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DDLSUBST&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;允许在DDL操作中替换字符串。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DDLTABLE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定DDL历史表的替代名称。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;GGSCHEMA&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定包含对象的模式的名称支持DDL复制&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;PURGEDDLHISTORY 或&lt;/p&gt;
&lt;p&gt;PURGEDDLHISTORYALT&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制DDL历史表的大小。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;PURGEMARKERHISTORY&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;508&quot;&gt;
&lt;p&gt;控制DDL mark的大小&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;
&lt;h3&gt;5.６ 创建抽取进程&lt;/h3&gt;
&lt;/p&gt;

&lt;p&gt;使用语法，说明来自OGG 12.1.2 （Reference for Oracle GoldenGate for Windows and UNIX）12c 197页（可以配置多组抽取进程）&lt;/p&gt;

&lt;p&gt;Syntax for Windows, UNIX, and Linux&lt;/p&gt;
&lt;p&gt;extract paramfile parameter_file&lt;/p&gt;
&lt;p&gt;[atcsn CSN | aftercsn CSN]&lt;/p&gt;
&lt;p&gt;[initialdataload]&lt;/p&gt;
&lt;p&gt;[pauseatend | nopauseatend]&lt;/p&gt;
&lt;p&gt;[processid PID]&lt;/p&gt;
&lt;p&gt;[reportfile report_file]&lt;/p&gt;
&lt;p&gt;[usesubdirs | nousesubdirs]&lt;/p&gt;

&lt;p&gt;参数说明来自OGG 12.1.2 （Reference for Oracle GoldenGate for Windows and UNIX）12c 213-215页。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;53.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot;&gt;
&lt;p&gt;操作说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RECOVERYOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制提取的恢复进程处理。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;SOURCEDB&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定数据源作为登录的一部分信息。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;TCPSOURCETIMER或 NOTCPSOURCETIMER&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;当这些系统反映不同时间时，调整传输到其他系统的记录的时间戳。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;UPDATERECORDFORMAT&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制图像之前和之后是否存储在一个轨迹记录或两个记录中。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DSOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;当使用Teradata访问模块（TAM）时，指定提取处理选项。&lt;/p&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;EXTRACT&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;将抽取组定义为在线进程&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;GETAPPLOPS或 IGNOREAPPLOPS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制来自除Replicat之外的所有进程的操作是否写入跟踪或文件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;GETREPLICATES或&lt;/p&gt;
&lt;p&gt;IGNOREREPLICATES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制是否通过同一系统上的“提取”捕获复制操作。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;PASSTHRU 或NOPASSTHRU&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制表是否由数据泵处理是以直通模式提取还是需要数​​据定义。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;PASSTHRUMESSAGES或&lt;/p&gt;
&lt;p&gt;NOPASSTHRUMESSAGES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制是否将正在以直通模式处理的表写入消息提取到“提取”报告文件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RMTTASK&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;在远程系统上创建一个处理任务。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;SOURCEISTABLE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从源表中提取整个记录。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;VAM&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示正在使用Teradata访问模块（TAM）向事务处理提供事务数据。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;COMPRESSDELETES 或 NOCOMPRESSDELETES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制Oracle GoldenGate是否仅将关键字或全部列写入跟踪以进行删除操作。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;COMPRESSUPDATES 或 NOCOMPRESSUPDATES&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;仅导致主键列和更改了要更新的列&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;EXCLUDETAG&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;将Replicat或数据泵更改指定为从路径文件中排除。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;FETCHOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制Oracle GoldenGate获取数据的方式的某些方面&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;LOGALLSUPCOLS 或NOLOGALLSUPCOLS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;记录所需的列支持冲突检测和解决和集成复制。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;SEQUENCE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot;&gt;
&lt;p&gt;指定同步序列。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TABLE | MAP&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定提取和控件的表列映射和转换。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TABLEEXCLUDE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;从提取中排除源表处理。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TARGETDEFS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定包含目标表的文件位于NonStop平台上的目标数据库的定义。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TRAILCHARSETASCII&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;指定数据的ASCII字符集在z / OS上从DB2捕获，当两者兼容时存在ASCII和EBCDIC表。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TRAILCHARSETEBCDIC&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;指定数据的EBCDIC字符集在z / OS上从DB2捕获，当两者兼容时存在ASCII和EBCDIC表。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;EXTFILE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定提取数据写入本地系统的提取文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;EXTTRAIL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;指定提取的数据写入远程系统的TRAIL文件。指定TRAIL的数据写入本地系统的路径。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RMTFILE&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定提取的数据写入远程系统的提取文件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RMTHOST&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定目标系统和管理端口号。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RMTTRAIL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定提取的数据写入远程系统的路径。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;FORMATASCII&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;以外部ASCII格式格式提取数据。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;FORMATSQL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;将数据提取到等效的SQL语句中。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;FORMATXML&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;将提取的数据格式化为等效的XML语法。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;NOHEADERS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;防止记录标题被写入小径。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;BR&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制提取的有界恢复功能。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;CACHEMGR&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制虚拟内存缓存管理器。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;FLUSHSECS 或 FLUSHCSECS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;确定记录数据保留的时间量缓冲后被写入小径。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;LOBMEMORY&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制内存量和临时磁盘空间可用于缓存包含LOB的事务。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;RMTHOSTOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定被动提取组使用的TCP / IP连接的主机信息以外的连接属性。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;THREADOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制Extract在Oracle RAC中运行的方式。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TRANLOGOPTIONS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;支持捕获进程选项。指定在解析数据库日志时所需要的特殊参数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;TRANSMEMORY&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制内存量和临时磁盘空间可用于缓存未提交的交易数据。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;WARNLONGTRANS&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;定义一个长时间运行的事务并控制其频率检查并报告。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;ROLLOVER&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定跟踪文件的老化方式。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;DECRYPTTRAIL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;当Extract用作数据时，需要解密数据泵并且必须对数据进行处理。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;234&quot;&gt;
&lt;p&gt;ENCRYPTTRAIL或&lt;/p&gt;
&lt;p&gt;NOENCRYPTTRAIL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;477&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;控制跟踪或提取文件中数据的加密。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;参照OGG 12.1 官方安装文档41页&lt;/p&gt;
&lt;p&gt;注意：建议多组抽取进程，为缓解OGG日志抽取压力。&lt;/p&gt;
&lt;p&gt;Group 1:&lt;/p&gt;
&lt;p&gt;EXTRACT ora9a&lt;/p&gt;
&lt;p&gt;SETENV (ORACLE_HOME = &quot;/home/oracle/ora/product&quot;)&lt;/p&gt;
&lt;p&gt;SETENV (ORACLE_SID = &quot;oraa&quot;)&lt;/p&gt;
&lt;p&gt;USERIDALIAS tiger1&lt;/p&gt;
&lt;p&gt;RMTHOST sysb&lt;/p&gt;
&lt;p&gt;RMTTRAIL /home/ggs/dirdat/rt&lt;/p&gt;
&lt;p&gt;TABLE hr.emp;&lt;/p&gt;
&lt;p&gt;TABLE hr.salary;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1339563/201803/1339563-20180331115137211-104273933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;使用TRANLOGOPTIONS参数与DBLOGREADER选项参数文件如果RDBMS是Oracle 11.1.0.7或Oracle 11.2.0.2或更高版本11g R2版本。&lt;/p&gt;
&lt;p&gt;使用HANDLECOLLISIONS（该参数依赖于表的主键进行逻辑判断，无主键表使用该参数会导致重复记录出现）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体参数设置如下（可按照实际情况添加，可以大表拆分等，仅供参考）：&lt;/p&gt;
&lt;div readability=&quot;122&quot;&gt;
&lt;p&gt;ggsci&amp;gt; dblogin userid ogg@ogg1,password ogg&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt; add extract sa_ext tranlog threads 2 begin now  (RAC)&lt;/p&gt;
&lt;p&gt;add extract sa_ext tranlog threads 2 scn 4072415 –按照SCN加&lt;/p&gt;
&lt;p&gt;单机： add extract sa_ext tranlog begin now&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;add extract sb_ext tranlog threads 2 begin now&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;add exttrail /ogg/install/dirdat/sa extract sa_ext, megabytes 100&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;add exttrail /ogg/ogginstall/dirdat/sb extract sb_ext, megabytes 100&lt;/p&gt;

&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;tranlog：表示数据抓取的来源是数据库的redo数据。&lt;/p&gt;
&lt;p&gt;threads 2：表示我们数据库有多少个threads，单实例基本上是1或者不设，rac就自己设置了。&lt;/p&gt;
&lt;p&gt;begin now：表示我们在启动这个抓取进程的就去抓取数据。&lt;/p&gt;
&lt;p&gt;./dirdat：表示trail文件的目录&lt;/p&gt;
&lt;p&gt;sm：trail文件的前缀&lt;/p&gt;
&lt;p&gt;extract sm_ext：值指定给那个进程用的（sm_ext）。&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;edit param sa_ext&lt;/p&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;extract sa_ext&lt;/p&gt;
&lt;p&gt;setenv (NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.ZHS16GBK&quot;)&lt;/p&gt;
&lt;p&gt;SETENV (ORACLE_HOME = &quot;/u01/app/oracle/product/11.2.0/dbhome_1&quot;)&lt;/p&gt;
&lt;p&gt;--SETENV (ORACLE_SID = &quot;ogg1&quot;)&lt;/p&gt;
&lt;p&gt;userid ogg@ogg1,password ogg&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS DBLOGREADER&lt;/p&gt;
&lt;p&gt;exttrail /ogg/ogginstall/dirdat/sa&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS LOGRETENTION DISABLED&lt;/p&gt;
&lt;p&gt;DBOPTIONS ALLOWUNUSEDCOLUMN&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS ALTARCHIVELOGDEST +ARCHDG/ORCL/ARCHIVELOG&lt;/p&gt;
&lt;p&gt; --归档路径可以不用设置，OGG能够识别&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS ALTARCHIVEDLOGFORMAT &quot;arch_%t_%s_%r.arc&quot;&lt;/p&gt;
&lt;p&gt;--归档路径可以不用设置，OGG能够识别&lt;/p&gt;
&lt;p&gt;DISCARDFILE /ogg/ogginstall/dirdat/sa_ext.dsc, APPEND, MEGABYTES 100&lt;/p&gt;
&lt;p&gt;DISCARDROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTCOUNT EVERY 1 HOURS, RATE&lt;/p&gt;
&lt;p&gt;FETCHOPTIONS MISSINGROW ABEND&lt;/p&gt;
&lt;p&gt;STATOPTIONS REPORTFETCH&lt;/p&gt;
&lt;p&gt;WARNLONGTRANS 1H, CHECKINTERVAL 10m&lt;/p&gt;
&lt;p&gt;DYNAMICRESOLUTION&lt;/p&gt;
&lt;p&gt;FETCHOPTIONS FETCHPKUPDATECOLS&lt;/p&gt;
&lt;p&gt;--DDLSUBST '/ora10g/oradata/src/' with '/ora11g/oradata/trg/' -- Create tablespace是可以复制的，可以支持复制到不同文件目录；&lt;/p&gt;
&lt;p&gt;ddl include objname HR.* include objtype 'TRIGGER'&lt;/p&gt;
&lt;p&gt;table HR.*;&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;edit param sb_exti:&lt;/p&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;extract sb_ext&lt;/p&gt;
&lt;p&gt;setenv (NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.ZHS16GBK&quot;)&lt;/p&gt;
&lt;p&gt;SETENV (ORACLE_HOME = &quot;/u01/app/oracle/product/11.2.0/dbhome_1&quot;)&lt;/p&gt;
&lt;p&gt;--SETENV (ORACLE_SID = &quot;ogg1&quot;)&lt;/p&gt;
&lt;p&gt;userid ogg@ogg1,password ogg&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS DBLOGREADER&lt;/p&gt;
&lt;p&gt;exttrail /ogg/ogginstall/dirdat/sb&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS LOGRETENTION DISABLED&lt;/p&gt;
&lt;p&gt;DBOPTIONS ALLOWUNUSEDCOLUMN&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS ALTARCHIVELOGDEST +ARCHDG/ORCL/ARCHIVELOG&lt;/p&gt;
&lt;p&gt;--归档路径可以不用设置，OGG能够识别&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS ALTARCHIVEDLOGFORMAT &quot;arch_%t_%s_%r.arc&quot;&lt;/p&gt;
&lt;p&gt;--归档路径可以不用设置，OGG能够识别&lt;/p&gt;
&lt;p&gt;DISCARDFILE /ogg/ogginstall/dirdat/sb_ext.dsc, APPEND, MEGABYTES 100&lt;/p&gt;
&lt;p&gt;DISCARDROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTCOUNT EVERY 1 HOURS, RATE&lt;/p&gt;
&lt;p&gt;FETCHOPTIONS MISSINGROW ABEND&lt;/p&gt;
&lt;p&gt;STATOPTIONS REPORTFETCH&lt;/p&gt;
&lt;p&gt;WARNLONGTRANS 1H, CHECKINTERVAL 10m&lt;/p&gt;
&lt;p&gt;DYNAMICRESOLUTION&lt;/p&gt;
&lt;p&gt;FETCHOPTIONS FETCHPKUPDATECOLS&lt;/p&gt;
&lt;p&gt;ddl include objname HR.* include objtype 'TRIGGER'&lt;/p&gt;
&lt;p&gt;table HR.*;&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;start sa_ext&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;start sb_ext&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;重要参数说明：&lt;/p&gt;
&lt;p&gt;TRANLOGOPTIONS：使用TRANLOGOPTIONS参数来控制抽取与之交互的方式事务日志或使用传递事务数据的API，具体取决于数据库或捕获模式。您可以使用多个TRANLOGOPTIONS语句同样的参数文件，也可以在相同的范围内指定多个选项如果允许的话，可以使用TRANLOGOPTIONS语句。只对数据库或数据库使用给定的TRANLOGOPTIONS选项的意图。&lt;/p&gt;

&lt;p&gt;LOGRETENTION [ENABLED [DAYS n] | SR | DISABLED]：指定Oracle恢复管理器(RMAN)是否保留日志文件提取需求恢复。当您使用寄存器提取命令时，日志根据当前数据库，是否保留了发出命令的时间视交叉上核。保留日志直到手动删除。此参数不启用或在数据库内部禁用RMAN。&lt;/p&gt;

&lt;p&gt;ALLOWUNUSEDCOLUMN |  NOALLOWUNUSEDCOLUMN: 对Oracle的提取有效。控制在遇到未使用的列的表时提取异常。&lt;/p&gt;
&lt;p&gt;DBOPTIONS 默认值是ALLOWUNUSEDCOLUMN。提取时遇到未使用的表列，它继续处理并生成一个警告。使用这个参数时,在目标或源定义文件中必须有相同的未使用的列该表必须指定为复制，以便正确的元数据映射可以执行。NOALLOWUNUSEDCOLUMN导致提取到未使用的列上。&lt;/p&gt;

&lt;p&gt;DISCARDFILE | NODISCARDFILE:&lt;/p&gt;
&lt;p&gt;如果一个进程从GGSCI中的START命令开始，则生成一个丢弃文件&lt;/p&gt;
&lt;p&gt;默认如下:&lt;/p&gt;
&lt;p&gt;■文件命名创建它的过程中,与一个。dsc扩展。如果进程是一个协调的副本，每个线程生成一个文件。每个文件的名字是附加了相应线程的线程ID。&lt;/p&gt;
&lt;p&gt;■dirrpt子目录中的文件创建的Oracle GoldenGate安装目录。&lt;/p&gt;
&lt;p&gt;■最大文件大小是50 mb。&lt;/p&gt;
&lt;p&gt;■在启动时,如果丢弃文件存在,它是写新数据之前清除。如果一个进程是从操作系统的命令行开始的，不要生成默认的丢弃文件。&lt;/p&gt;

&lt;p&gt;DISCARDROLLOVER:使用丢弃drollover参数为老化丢弃文件设置一个时间表。长时间或者连续运行，设置一个老化的时间表，防止丢弃文件被填满并且使这个过程结束，它提供了一个可以预见的档案集&lt;/p&gt;
&lt;p&gt;在你的存档程序中加入。&lt;/p&gt;

&lt;p&gt;REPORTROLLOVER: 使用REPORTROLLOVER参数强制报告文件按正常的时间进行，&lt;/p&gt;
&lt;p&gt;而不是在一个过程开始的时候。对于长时间或连续的运行，设置一个老化进度控制活动报告文件的大小，并提供一个更可预测的集合可以包含在您的存档程序中的存档。&lt;/p&gt;

&lt;p&gt;查看抽取进程运行报告，以及队列文件，正常，继续后面的操作&lt;/p&gt;

&lt;p&gt;如果有长事物，可以设置一下参数：&lt;/p&gt;
&lt;p&gt;BR：默认4小时。 BR BRINTERVAL 20M, BRDIR BR (20M表示检查间隔是20分钟)&lt;/p&gt;
&lt;p&gt;场景：长事务还未结束，日志文件被删除；无需还原日志文件，收到commit后，直接从BR目录下的文件写入trial&lt;/p&gt;
&lt;p&gt;文件。&lt;/p&gt;

&lt;p&gt;Create tablespace是可以复制的，可以支持复制到不同文件目录；&lt;/p&gt;
&lt;p&gt;样例： DDLSUBST '/ora10g/oradata/src/' with '/ora11g/oradata/trg/'&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;5.7、增长pump进程&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;传输进程要配置的参数：&lt;/p&gt;

&lt;div readability=&quot;50&quot;&gt;
&lt;p&gt;ggsci&amp;gt;add extract sa_dmp EXTTRAILSOURCE /ogg/ogginstall/dirdat/sa&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;add extract sb_dmp EXTTRAILSOURCE /ogg/ogginstall/dirdat/sb&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;ADD RMTTRAIL /ogg/ogginstall/dirdat/sa, EXTRACT sa_dmp&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;ADD RMTTRAIL /ogg/ogginstall/dirdat/sb, EXTRACT sb_dmp&lt;/p&gt;

&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;EXTTRAILSOURCE：指定提取文件作为数据源&lt;/p&gt;
&lt;p&gt;ADD RMTTRAIL：在目标数据库上创建一个trail&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;edit param sa_dmp&lt;/p&gt;

&lt;p&gt;参数：&lt;strong&gt;（注意&lt;/strong&gt;&lt;strong&gt;IP&lt;/strong&gt; &lt;strong&gt;建议是rac vip&lt;/strong&gt; &lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;EXTRACT sa_dmp&lt;/p&gt;
&lt;p&gt;PASSTHRU&lt;/p&gt;
&lt;p&gt;DYNAMICRESOLUTION&lt;/p&gt;
&lt;p&gt;RMTHOST 172.16.0.111, MGRPORT 7809&lt;/p&gt;
&lt;p&gt;--RMTHOST 172.16.0.111, MGRPORT 7809, COMPRESS, compressthreshold 750&lt;/p&gt;
&lt;p&gt;rmttrail /ogg/ogginstall/dirdat/sa&lt;/p&gt;
&lt;p&gt;DISCARDFILE /ogg/ogginstall/dirdat/sa_ext.dsc, APPEND, MEGABYTES 100&lt;/p&gt;
&lt;p&gt;DISCARDROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTCOUNT EVERY 1 HOURS, RATE&lt;/p&gt;
&lt;p&gt;TABLE HR.*;&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;edit param sb_dmp&lt;/p&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;EXTRACT sb_dmp&lt;/p&gt;
&lt;p&gt;PASSTHRU&lt;/p&gt;
&lt;p&gt;DYNAMICRESOLUTION&lt;/p&gt;
&lt;p&gt;RMTHOST 172.16.0.111, MGRPORT 7809&lt;/p&gt;
&lt;p&gt;rmttrail /ogg/ogginstall/dirdat/sb&lt;/p&gt;
&lt;p&gt;DISCARDFILE /ogg/ogginstall/dirdat/sb_ext.dsc, APPEND, MEGABYTES 100&lt;/p&gt;
&lt;p&gt;DISCARDROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTROLLOVER AT 6:00&lt;/p&gt;
&lt;p&gt;REPORTCOUNT EVERY 1 HOURS, RATE&lt;/p&gt;
&lt;p&gt;TABLE HR.*;&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;start sa_dmp&lt;/p&gt;

&lt;p&gt;ggsci&amp;gt;start sb_dmp&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;
&lt;h2&gt;六、目标库配置&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;6.1 MGR进程配置&lt;/h3&gt;
&lt;/p&gt;
&lt;p&gt;具体设置如下：&lt;/p&gt;
&lt;div readability=&quot;27&quot;&gt;
&lt;p&gt;ggsci&amp;gt;edit param mgr&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;

&lt;p&gt;port 7809&lt;/p&gt;
&lt;p&gt;DYNAMICPORTLIST 7800-7810&lt;/p&gt;
&lt;p&gt;AUTORESTART replicat *,RETRIES 3, WAITMINUTES 5, RESETMINUTES 30&lt;/p&gt;
&lt;p&gt;LAGREPORTHOURS 1&lt;/p&gt;
&lt;p&gt;LAGREPORTMINUTES 10&lt;/p&gt;
&lt;p&gt;LAGCRITICALMINUTES 10&lt;/p&gt;
&lt;p&gt;PURGEOLDEXTRACTS /ogg/ogginstall/dirdat/*, USECHECKPOINTS, MINKEEPHOURS 12&lt;/p&gt;
&lt;p&gt;userid ogg@ogg,password ogg&lt;/p&gt;
&lt;p&gt;PURGEDDLHISTORY MINKEEPDAYS 7, MAXKEEPDAYS 14, FREQUENCYHOURS 24&lt;/p&gt;
&lt;p&gt;PURGEMARKERHISTORY MINKEEPDAYS 7, MAXKEEPDAYS 14, FREQUENCYHOURS 24&lt;/p&gt;

&lt;p&gt;设置好后，重启MGR&lt;/p&gt;
&lt;p&gt;ggsci&amp;gt;start mgr&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;     在使用DATAPUMP工具导出前，需要在生产库确保GoldenGate抽取进程启动的时间点前的事务已经结束。&lt;/p&gt;&lt;p&gt;SELECT s.sid,s.serial#,s.status,s.username,t.start_time,s.WAIT_TIME, s.osuser, s.sql_id, s.program,START_DATE FROM gv$session s,gv$transaction t WHERE s.INST_ID=t.INST_ID and s.saddr=t.ses_addr order by  t.start_time desc;&lt;/p&gt;&lt;p&gt;set serveroutput on size 1000000                               &lt;/p&gt;&lt;p&gt;spool /tmp/hr_old.txt                                                &lt;/p&gt;&lt;p&gt;DECLARE                                                         &lt;/p&gt;&lt;p&gt;v_cnt number;                                                  &lt;/p&gt;&lt;p&gt;BEGIN                                                          &lt;/p&gt;&lt;p&gt;FOR rec in (select 'HR.' || TABLE_NAME AS tanme from dba_tables where owner='HR' order by 1)                   &lt;/p&gt;&lt;p&gt;LOOP                                                           &lt;/p&gt;&lt;p&gt;           END LOOP;                                            &lt;/p&gt;&lt;p&gt;  END;                                                         &lt;/p&gt;&lt;p&gt;create or replace directory dir_dp as '/ogg/expdp';&lt;br/&gt;Grant read,write on directory dir_dp to ogg;&lt;/p&gt;&lt;p&gt;nohup expdp ogg/ogg schemas=HR directory=dir_dp flashback_scn=2159117 dumpfile=HR.dmp logfile=HR.log &amp;amp;&lt;/p&gt;&lt;p&gt;create or replace directory dir_dp as '/ogg/expdp';&lt;br/&gt;Grant read,write on directory dir_dp to ogg;&lt;/p&gt;&lt;p&gt; nohup impdp ogg/ogg schemas=HR  directory=dir_dp  dumpfile=HR.dmp logfile=HR.log &amp;amp;&lt;/p&gt;&lt;p&gt;select segment_type,count(*),sum(bytes/1024/1024) from dba_segments  where owner='HR' group by segment_type;&lt;/p&gt;&lt;p&gt;set serveroutput on size 1000000                               &lt;/p&gt;&lt;p&gt;spool /tmp/hr_target.txt                                                &lt;/p&gt;&lt;p&gt;DECLARE                                                        &lt;/p&gt;&lt;p&gt;v_cnt number;                                                   &lt;/p&gt;&lt;p&gt;BEGIN                                                          &lt;/p&gt;&lt;p&gt;FOR rec in (select 'HR.' || TABLE_NAME AS tanme from dba_tables where owner='HR' order by 1)                  &lt;/p&gt;&lt;p&gt;LOOP                                                           &lt;/p&gt;&lt;p&gt;           END LOOP;                                           &lt;/p&gt;&lt;p&gt;  END;                                                         &lt;/p&gt;&lt;p&gt;Constraints must be disabled in nonintegrated Replicat mode because Oracle GoldenGate replicates DML that results from the firing of a trigger or a cascade constraint. If the same trigger or constraint gets activated on the target table, it becomes redundant because of the replicated version, and the database returns an error.&lt;/p&gt;&lt;p&gt;约束必须禁用的非集成的复制模式因为Oracle GoldenGate复制DML从触发和级联约束。如果在目标表上激活相同的触发器或约束，则由于复制的版本而变得冗余，数据库返回错误。&lt;/p&gt;&lt;p&gt;参数说明来自OGG 12.1.2 （Reference for Oracle GoldenGate for Windows and UNIX）12c 215-216页&lt;/p&gt;&lt;p&gt;注意：无法使用HANDLECOLLISIONS（该参数依赖于表的主键进行逻辑判断，无主键表使用该参数会导致重复记录出现）。&lt;/p&gt;</description>
<pubDate>Sat, 31 Mar 2018 04:03:00 +0000</pubDate>
<dc:creator>翰墨文海（胡磊）</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hmwh/p/8681600.html</dc:identifier>
</item>
</channel>
</rss>