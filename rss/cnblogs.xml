<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>04_Linux目录文件操作命令1（mv ls cd...）_我的Linux之路 - susmote</title>
<link>http://www.cnblogs.com/susmote/p/8722892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/susmote/p/8722892.html</guid>
<description>&lt;p&gt;&lt;em&gt;上一节已经给大家讲了Linux的目录结构，相信大家已经对Linux的整个目录结构有所了解&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;现实中，服务器（包含Linux，Unix，windows server）一般都摆放在机房里，因为一个机房摆放了很多Linux机器，所有机器都运转起来，整个室内温度也是非常高的，所以作为一个要操作Linux的开发人员，它们通常都是通过ssh远程连接操作Linux的，而ssh只有命令行界面，所以我们操作Linux只能通过一个个的命令去运作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266253/201804/1266253-20180405145343417-354211772.jpg&quot; alt=&quot;&quot; width=&quot;362&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，如果想熟练操作Linux，只能通过学习一个个Linux的命令来提高自己的系统操作能力&lt;/p&gt;

&lt;p&gt;首先我们要学到的就是Linux的目录文件的操作命令&lt;/p&gt;

&lt;h3&gt;cd    切换用户当前工作目录&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cd (选项) (参数)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;cd命令用来切换用户工作目录到一个指定的目录下，这个指定的目录你可以使用绝对路径或者是相对路径，（绝对路径代表从根目录开始，相对路径代表以当前目录为起点）&lt;/p&gt;
&lt;p&gt;如果直接用 cd 命令而不加任何参数，则会切换到登录用户的主目录&lt;/p&gt;
&lt;p&gt;比如我一开始是用root用户登录的，那么他已进入命令行就会进入到 /root/ 目录，使用cd 切换到其他目录后，直接cd（不加任何参数）那么他会切换回到/root/ 目录&lt;/p&gt;

&lt;p&gt;cd 切换目录时要注意的几点&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;&quot; ~ &quot;&lt;/code&gt;表示为home directory（家目录或者叫用户目录）的意思&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &quot; . &quot;&lt;/strong&gt;   表示目前所在的目录&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;&quot; .. &quot;&lt;/strong&gt; 表示目前目录位置的上一层目录。&lt;/li&gt;
&lt;/ol&gt;&lt;h5&gt;实例&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cd    进入用户主目录；
cd ~  进入用户主目录；
cd -  返回进入此目录之前所在的目录；
cd ..  返回上级目录（若当前目录为“/“，则执行完后还在“/&quot;；&quot;..&quot;为上级目录的意思）；
cd ../..  返回上两级目录；
cd !$  把上个命令的参数作为cd参数使用。
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;pwd 显示用户当前工作目录&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pwd（选项）
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;pwd是用来显示用户当前的工作路径的 ，他是以绝对路径的形式呈现的&lt;/p&gt;
&lt;p&gt;例如以下例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@localhost susmote]# cd /root
[root@localhost ~]# pwd
/root
[root@localhost ~]# cd /home/susmote/
[root@localhost susmote]# pwd
/home/susmote
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;ls 显示目标列表（之前在讲目录结构的时候使用过的）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
ls（选项）（参数）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　参数可以为一个目录，如果什么都不加，代表当前目录&lt;/p&gt;
&lt;p&gt;ls目录在我看来算是Linux中使用频率最高的命令了&lt;/p&gt;
&lt;p&gt;在windows下，打开文件资源管理器，进入一个目录，里面的文件目录，都是直接显示的&lt;/p&gt;
&lt;p&gt;而在Linux下，进入一个目录，想查看一个目录里面的文件，或文件夹就必须用到ls命令了&lt;/p&gt;
&lt;h5&gt;ls命令的选项如下&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；
-A：显示除影藏文件“.”和“..”以外的所有文件列表；
-C：多列显示输出结果。这是默认选项；
-l：与“-C”选项功能相反，所有输出信息用单列格式输出，不输出为多列；
-F：在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“/”表示目录，“@”表示符号链接，“|”表示命令管道FIFO，“=”表示sockets套接字。当文件为普通文件时，&lt;br/&gt;不输出任何标识符；
-b：将文件中的不可输出的字符以反斜线“”加字符编码的方式输出；
-c：与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的一句是文件的状态改变时间；
-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；
-f：此参数的效果和同时指定“aU”参数相同，并关闭“lst”参数的效果；
-i：显示文件索引节点号（inode）。一个索引节点代表一个文件；
--file-type：与“-F”选项的功能相同，但是不显示“*”；
-k：以KB（千字节）为单位显示文件大小；
-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；
-m：用“,”号区隔每个文件和目录的名称；
-n：以用户识别码和群组识别码替代其名称；
-r：以文件名反序排列并输出目录内容列表；
-s：显示文件和目录的大小，以区块为单位；
-t：用文件和目录的更改时间排序；
-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；
-R：递归处理，将指定目录下的所有文件及子目录一并处理；
--full-time：列出完整的日期与时间；
--color[=WHEN]：使用不同的颜色高亮显示不同类型的。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之前跟大家讲过每种颜色分别代表什么样的颜色，在这你也可以通过 --color 自己指定不同类型显示那种不同的颜色&lt;/p&gt;
&lt;p&gt;下面是简单的演示&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@localhost ~]# ls     #默认显示当前目录下的文件
1.txt  2.txt  3.txt  a  b  c
[root@localhost ~]# ls -a　　　　#显示当前目录下所有的文件,包含&quot;.&quot;开头的隐藏文件
.   1.txt  3.txt  b              .bash_logout   .bashrc                c       .cshrc    .python_history  .viminfo
..  2.txt  a      .bash_history  .bash_profile  .bashrc-anaconda3.bak  .cache  .ipython  .tcshrc          .vimrc
[root@localhost ~]# ls -l       #显示当前目录下文件的详细信息，如权限，文件大小，修改时间
total 12
-rw-r--r--. 1 root root    0 Apr  5 10:29 1.txt
-rw-r--r--. 1 root root    0 Apr  5 10:29 2.txt
-rw-r--r--. 1 root root    0 Apr  5 10:29 3.txt
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 a
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 b
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 c
[root@localhost ~]# ll　　　　　　　#等同与ls -l 命令，显示文件详细信息
total 12
-rw-r--r--. 1 root root    0 Apr  5 10:29 1.txt
-rw-r--r--. 1 root root    0 Apr  5 10:29 2.txt
-rw-r--r--. 1 root root    0 Apr  5 10:29 3.txt
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 a
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 b
drwxr-xr-x. 2 root root 4096 Apr  5 10:29 c
[root@localhost ~]# ls -al       #组合选项 相当于 ls -a -l 显示当前目录下所有文件或目录的详细信息
total 68
dr-xr-x---.  7 root root 4096 Apr  5 10:29 .
dr-xr-xr-x. 22 root root 4096 Apr  5 09:27 ..
-rw-r--r--.  1 root root    0 Apr  5 10:29 1.txt
-rw-r--r--.  1 root root    0 Apr  5 10:29 2.txt
-rw-r--r--.  1 root root    0 Apr  5 10:29 3.txt
drwxr-xr-x.  2 root root 4096 Apr  5 10:29 a
drwxr-xr-x.  2 root root 4096 Apr  5 10:29 b
-rw-------.  1 root root 4083 Apr  4 18:03 .bash_history
-rw-r--r--.  1 root root   18 May 20  2009 .bash_logout
-rw-r--r--.  1 root root  176 May 20  2009 .bash_profile
-rw-r--r--.  1 root root  247 Mar 12 05:07 .bashrc
-rw-r--r--.  1 root root  176 Mar 11 06:12 .bashrc-anaconda3.bak
drwxr-xr-x.  2 root root 4096 Apr  5 10:29 c
drwxr-xr-x.  3 root root 4096 Apr  1 05:19 .cache
-rw-r--r--.  1 root root  100 Sep 22  2004 .cshrc
drwxr-xr-x.  5 root root 4096 Mar 12 05:10 .ipython
-rw-------.  1 root root   32 Mar 31 17:16 .python_history
-rw-r--r--.  1 root root  129 Dec  3  2004 .tcshrc
-rw-------.  1 root root 4016 Apr  2 04:35 .viminfo
-rw-r--r--.  1 root root   25 Mar 12 05:10 .vimrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他选项可以自己动手去试，由于篇幅问题，我就不一一演示了&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;mv 移动文件目录命令&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mv(选项)(参数)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mv命令可以用来移动一个文件或是一个目录，同时也可以用来作为改名的命令&lt;/p&gt;
&lt;p&gt;他一般需要两个参数 ，source（源文件或源目录），target（目标文件或目标目录）&lt;/p&gt;
&lt;p&gt;注意，如果目标路径中存在相同的文件，那么将会覆盖原先的文件，如果只是移动到当前目录下，而且与原先文件目录名不同，那么这只是一个改名的操作&lt;/p&gt;
&lt;h5&gt;mv的选项如下&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
--backup=&amp;lt;备份模式&amp;gt;：若需覆盖文件，则覆盖前先行备份；
-b：当文件存在时，覆盖前，为其创建一个备份；
-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；
-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可&lt;br/&gt;以避免误将文件覆盖。
--strip-trailing-slashes：删除源文件中的斜杠“/”；
-S&amp;lt;后缀&amp;gt;：为备份文件指定后缀，而不使用默认的后缀；
--target-directory=&amp;lt;目录&amp;gt;：指定源文件要移动到目标目录；
-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一般我们再使用mv命令时是用不到选项的，所以只是列举选项以供参考&lt;/p&gt;
&lt;p&gt;mv的应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@localhost susmote]# ls
a.py  a.sh
[root@localhost susmote]# mv a.py b.py      #只是改名了
[root@localhost susmote]# ls
a.sh  b.py
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@localhost susmote]# ls /root/a/
1.py  2.py  3.py  4.py  5.py
[root@localhost susmote]# pwd
/home/susmote
[root@localhost susmote]# mv /root/a/* .           #移动a目录下所有文件到当前目录(*代表的是通配符，.代表的是当前目录)
[root@localhost susmote]# ls
1.py  2.py  3.py  4.py  5.py  a.sh  b.py
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Thu, 05 Apr 2018 07:53:00 +0000</pubDate>
<dc:creator>susmote</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/susmote/p/8722892.html</dc:identifier>
</item>
<item>
<title>项目微管理12 - 管理 - 沙场秋点兵</title>
<link>http://www.cnblogs.com/dxy1982/p/8722199.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxy1982/p/8722199.html</guid>
<description>&lt;p&gt;经过这么多尝试和实践，虽然团队目前就四代和鼬两人，但是也有了基本的流程，并且正常的运转了起来。按图索骥，照方抓药，效果也算差强人意。&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405133749771-990998746.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;不过在四代心里，总觉得缺些什么，隐隐有股担忧不时闪现在四代心中，四代思考良久也想不起来到底还有什么事没做。&lt;/p&gt;

&lt;p&gt;江郎才尽啊，四代感叹。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;自古套路得人心&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;无奈之下，四代只能暂时停下思绪，安心码代码。&lt;/p&gt;

&lt;p&gt;不过就在某一天忙忙碌碌之际，四代突然灵光一闪，意识到了自己目前缺少的是什么了，那就是团队运作完整的套路。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405134748302-1600169741.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代目前完成的只是产品管理的一个方面，团队建设的其它方面都还没有眉目。而悲剧的是，四代以前也没怎么留心过，怎么办呢？&lt;/p&gt;

&lt;p&gt;问是没处问了？那就“头悬梁，锥刺股”，自己好好学习吧。好在是互联网时代“有个性，有底线，有尊严，有责任的四有新人”（四代提出来的，哈哈），这点觉悟还是有的，也就是从这一天开始，四代决定要系统的学习一下管理的基础知识。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405135058125-636842158.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;那么接下来的问题就是怎么学习管理知识了。&lt;/p&gt;

&lt;p&gt;传统的学习方案是阅读各位大师的经典著作，然后从这些经典的理论和案例出发，通过演绎和推理，照猫画虎，应用到具体的事例中。&lt;/p&gt;

&lt;p&gt;不过四代清醒的意识到了一点，那就是那些东西虽然经典和优秀，但不一定适用于当前的情况，就好像熟读兵书不一定打的了胜仗一样。兵法总是要根据实际的情况灵活运用，“纸上谈兵”的故事四代是非常熟悉的，管理也是一样。&lt;/p&gt;

&lt;p&gt;既然这样，那就走另外一条路，回归知识的自然面貌，从各种实战事例开始，然后再不断的总结并向各种理论靠拢吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;归纳和演绎&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;人类认识世界的基本过程分为两步：&lt;/p&gt;

&lt;p&gt;第一步，从具体个体的行为归纳出一般性原理，这一步对细节进行了抽象，这一步阐释了知识获取的过程，这一步我们称之为“归纳”。&lt;/p&gt;

&lt;p&gt;第二步，从一般性原理推导出具体个体行为，这一步对抽象进行填充，衍生出新的细节，这一步阐释了知识的运用过程，这一步我们称之为“演绎”。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405141021342-1857774408.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;“归纳法”和“演绎法”交替作用构成了我们获得和应用知识基本步骤。四代回归知识的自然面貌，就是使用这两个基本方法，探索管理基本知识的过程。&lt;/p&gt;

&lt;p&gt;其实，在程序员世界中，也存在对应的“演绎法”和“归纳法”，在编程中经常需要做出的决定：何时使用演绎推理，何时使用归纳推理。&lt;/p&gt;

&lt;p&gt;举个例子来说，四代以前总有个困惑：现在的架构很多，那么在项目中到底该如何选择呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;预先挑选架构的难点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;按照“演绎法”，我们先是对比各种架构的优点和缺点，然后基于项目的情况，选择认为比较好的一种来实现；设计模式也是一样的，拿到一个问题场景，我们也是对照那些教科书上的描述，对比一下各自的长处和短处，然后挑选一个自认为比较合适的模式。&lt;/p&gt;

&lt;p&gt;当我们能客观分析目前的状况的话，基于这个实际情况的选择也不能算错，很多时候我们确实是这样做的。&lt;/p&gt;

&lt;p&gt;不过，四代知道，各种理论其实是大量经验的高度抽象和总结，在没有大量经历匹配的情况下，针对特定的场景，对比对应的理论是非常困难的事。&lt;/p&gt;

&lt;p&gt;于是，现在非常常见的情况就是，对于大部分人来讲，他们现在几乎从来不去深入思考或者说是限于经验，根本无法深入思考一些问题，所以只能简单的根据一些表面现象来轻率的做出选择。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405140528675-1873765214.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;所以，一个司空见惯的事情就是，大家一遇到通知，就立即使用观察者模式；一遇到对象创建，就会忍不住去写个工厂模式；一遇到分支语句，立即会尝试策略或者状态模式，这样真的好吗？&lt;/p&gt;

&lt;p&gt;况且，当我们做出这些选择的时候，开发常常是刚刚开始，很多变化的情况和事实还没有出现，这个时候选择的架构和模式在后面很有可能就变成一种约束，制约软件后面的开发。虽然大家后面仍然可以使用重构来改变这样的现状，不过代价通常是巨大的。&lt;/p&gt;

&lt;p&gt;对于这一点，四代还是深有感触的。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;重构到架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;而“归纳法”的做法是正好相反的，归纳法是基于既定实现，在不断迭代的过程中应对变化，最终归纳到抽象的框架和模式的过程。很显然，这种归纳推理更符合敏捷开发的精神，所以也是四代非常推荐的做法。&lt;/p&gt;

&lt;p&gt;确定了基本思路后，四代首先会去研究一些公司在某个方面的做法，不管是成功的经验还是失败的教训，然后对这些事例进行分析和总结，最后得出目前对于PC团队可以使用的知识。&lt;/p&gt;

&lt;p&gt;然后，在使用知识的过程中，不断进行磨合和迭代，不断调整这些流程使之匹配当时团队的状态。四代可不会奢望会寻找到一种万能、完美、一成不变的管理体系，可以永远的适用于PC团队。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405141457184-49523817.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;不过，要从这些零散的事例中一窥管理的全貌，确实也是一件相当苦逼的事。在这个过程中，四代要始终如一的坚持自己的想法，并且在合适的时候，调整一下前进的方向。&lt;strong&gt;任何时候，“坚持”都是最困难的一件事&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;也就是在这一阶段时间，四代将自己的QQ签名改成了“空”，四代要给自己的脑袋洗洗澡，从头开始了。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405144038029-1142350426.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;从头开始&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;这个网站有个专栏，叫做“每日管理充电”（后面改版了），这里面大概有250页，每页10篇文章，总共是2500左右的文章。四代大概浏览了一下，这里的文章覆盖了管理的各个方面，算是比较全面了。&lt;/p&gt;

&lt;p&gt;然后，四代给自己定了摘抄100篇管理论文的目标，不达标，誓不罢休，那就开始吧。&lt;/p&gt;

&lt;p&gt;好在四代还算是个能坚持的人，在经过大约3个月的奋战后，利用每天中午的休息时间，四代终于把这个专栏下面所有的文章都看了一遍，并把写的比较好的的文章全摘录下来了，大概有250篇左右。真够讽刺的，整个就是“250”，四代如是形容自己，哈哈一笑。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405141851641-486791698.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代想起了“我是特种兵”中的经典台词：“什么是特种兵？特种兵就是特别傻的兵！”这个时刻想起这句话，还真是感慨万分。明明可以像很多人那样，“只负责接受需求，分配任务，追究责任”，当个轻松的项目经理，偏偏把自己搞的这么累，图什么啊。&lt;/p&gt;

&lt;p&gt;通读了这么多的案例，四代对于管理也有了自己的感悟：所谓“管理”，不过就是管事和管人两件事。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;新的方向&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;四代前面实施的部分基本都是管事的部分，这一部分也就是“产品管理”，四代找到新方向的这一部分就是管人，这一部分也就是“团队管理”，或者用“互联网+”时代的描述，叫“团队领导”。虽然只是把“管理”换成了“领导”，不过含义却是翻天覆地的变化。&lt;/p&gt;

&lt;p&gt;“管理”是工业化时代产物，是基于等级森严的金字塔结构和命令的称谓，而“领导”则是人性化，团队合作衍生的产物，虽然这个词早在许多年前就粉墨登场了，但是好像只是到了最近几年，才变的炙手可热。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180405142832525-254493111.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;产品管理，包含所有与产品相关的一系列的流程，比如Release流程，代码审查流程，文档管理流程等。这一部分四代基本构建成形。&lt;/p&gt;

&lt;p&gt;团队领导则包含所有与团队成员相关的一系列流程，比如人员招聘、培训、激励、考核、离职处理等等。这一部分，四代做的还远远不够。&lt;/p&gt;

&lt;p&gt;有了这些目标就好了，四代知道可以去干些什么了，四代瞬间觉的原地复活了，真是在哪跌倒，就在哪歇一会，然后爬起来继续，呵呵。&lt;/p&gt;

</description>
<pubDate>Thu, 05 Apr 2018 06:47:00 +0000</pubDate>
<dc:creator>沙场秋点兵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxy1982/p/8722199.html</dc:identifier>
</item>
<item>
<title>Django-rest-framework源码分析（2）----权限 - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8722212.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8722212.html</guid>
<description>&lt;h2&gt;添加权限&lt;/h2&gt;
&lt;p&gt;（1）API/utils文件夹下新建premission.py文件，代码如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;message是当没有权限时，提示的信息&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; utils/permission.py&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SVIPPremission(object):
    message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必须是SVIP才能访问&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_permission(self,request,view):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.user.user_type != 3&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyPremission(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_permission(self,request,view):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.user.user_type == 3&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）settings.py全局配置权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;全局&lt;/span&gt;
REST_FRAMEWORK =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFAULT_AUTHENTICATION_CLASSES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;API.utils.auth.Authentication&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,],
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFAULT_PERMISSION_CLASSES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;API.utils.permission.SVIPPremission&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）views.py添加权限&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;默认所有的业务都需要SVIP权限才能访问&lt;/li&gt;
&lt;li&gt;OrderView类里面没写表示使用全局配置的SVIPPremission&lt;/li&gt;
&lt;li&gt;UserInfoView类，因为是普通用户和VIP用户可以访问，不使用全局的，要想局部使用的话，里面就写上自己的权限类&lt;/li&gt;
&lt;li&gt;permission_classes = [MyPremission,]   #局部使用权限方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,HttpResponse
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; JsonResponse
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; API &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; exceptions
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseAuthentication
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; API.utils.permission &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SVIPPremission,MyPremission

ORDER_DICT &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;1&lt;span&gt;:{
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:15&lt;span&gt;
    },
    &lt;/span&gt;2&lt;span&gt;:{
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:100&lt;span&gt;
    }
}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; md5(user):
    &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib
    &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间，相当于生成一个随机的字符串&lt;/span&gt;
    ctime =&lt;span&gt; str(time.time())
    m &lt;/span&gt;= hashlib.md5(bytes(user,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    m.update(bytes(ctime,encoding&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; m.hexdigest()

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthView(APIView):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;用于用户登录验证&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;

    authentication_classes &lt;/span&gt;= []      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;里面为空，代表不需要认证&lt;/span&gt;
    permission_classes = []          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不里面为空，代表不需要权限&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; post(self,request,*args,**&lt;span&gt;kwargs):
        ret &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None}
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            user &lt;/span&gt;= request._request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            pwd &lt;/span&gt;= request._request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            obj &lt;/span&gt;= models.UserInfo.objects.filter(username=user,password=&lt;span&gt;pwd).first()
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; obj:
                ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 1001&lt;span&gt;
                ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;为用户创建token&lt;/span&gt;
            token =&lt;span&gt; md5(user)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;存在就更新，不存在就创建&lt;/span&gt;
            models.UserToken.objects.update_or_create(user=obj,defaults={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:token})
            ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; token
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 1002&lt;span&gt;
            ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;请求异常&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; JsonResponse(ret)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderView(APIView):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    订单相关业务(只有SVIP用户才能看)
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
        self.dispatch
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;request.user&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;request.auth&lt;/span&gt;
        ret = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None}
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            ret[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; ORDER_DICT
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; JsonResponse(ret)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoView(APIView):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
       订单相关业务(普通用户和VIP用户可以看)
       &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    permission_classes &lt;/span&gt;= [MyPremission,]    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不用全局的权限配置的话，这里就要写自己的局部权限&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):

        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(request.user)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4ffa5b57-1207-4bc4-ae30-66b6e558737f')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_4ffa5b57-1207-4bc4-ae30-66b6e558737f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4ffa5b57-1207-4bc4-ae30-66b6e558737f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4ffa5b57-1207-4bc4-ae30-66b6e558737f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4ffa5b57-1207-4bc4-ae30-66b6e558737f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; API.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AuthView,OrderView,UserInfoView

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, admin.site.urls),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api/v1/auth/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,AuthView.as_view()),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api/v1/order/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,OrderView.as_view()),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api/v1/info/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,UserInfoView.as_view()),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;urls.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0550ac93-f939-4493-9a4d-2513b78b8db3')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_0550ac93-f939-4493-9a4d-2513b78b8db3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0550ac93-f939-4493-9a4d-2513b78b8db3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0550ac93-f939-4493-9a4d-2513b78b8db3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0550ac93-f939-4493-9a4d-2513b78b8db3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; API/utils/auth/py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; exceptions
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; API &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseAuthentication


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Authentication(BaseAuthentication):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;用于用户登录验证&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; authenticate(self,request):
        token &lt;/span&gt;= request._request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        token_obj &lt;/span&gt;= models.UserToken.objects.filter(token=&lt;span&gt;token).first()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; token_obj:
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt; exceptions.AuthenticationFailed(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户认证失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在rest framework内部会将这两个字段赋值给request，以供后续操作使用&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (token_obj.user,token_obj)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; authenticate_header(self, request):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;auth.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（4）测试&lt;/p&gt;
&lt;p&gt;普通用户访问OrderView,提示没有权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180405131151542-1797447017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 普通用户访问UserInfoView，可以返回信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180405131305146-1365576209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 权限源码流程&lt;/h2&gt;
&lt;p&gt; （1）dispatch&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt; dispatch(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        `.dispatch()` is pretty much the same as Django's regular dispatch,
        but with extra hooks for startup, finalize, and exception handling.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        self.args &lt;/span&gt;=&lt;span&gt; args
        self.kwargs &lt;/span&gt;=&lt;span&gt; kwargs
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对原始request进行加工，丰富了一些功能&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Request(&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     request,&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     parsers=self.get_parsers(),&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     authenticators=self.get_authenticators(),&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     negotiator=self.get_content_negotiator(),&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     parser_context=parser_context&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; )&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;request(原始request,[BasicAuthentications对象，])&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取原生request,request._request&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取认证类的对象，request.authticators&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1.封装request&lt;/span&gt;
        request = self.initialize_request(request, *args, **&lt;span&gt;kwargs)
        self.request &lt;/span&gt;=&lt;span&gt; request
        self.headers &lt;/span&gt;= self.default_response_headers  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; deprecate?&lt;/span&gt;

        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;2.认证&lt;/span&gt;
            self.initial(request, *args, **&lt;span&gt;kwargs)

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Get the appropriate handler method&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; request.method.lower() &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.http_method_names:
                handler &lt;/span&gt;=&lt;span&gt; getattr(self, request.method.lower(),
                                  self.http_method_not_allowed)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                handler &lt;/span&gt;=&lt;span&gt; self.http_method_not_allowed

            response &lt;/span&gt;= handler(request, *args, **&lt;span&gt;kwargs)

        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as exc:
            response &lt;/span&gt;=&lt;span&gt; self.handle_exception(exc)

        self.response &lt;/span&gt;= self.finalize_response(request, response, *args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.response
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）initial&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt; initial(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Runs anything that needs to occur prior to calling the method handler.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        self.format_kwarg &lt;/span&gt;= self.get_format_suffix(**&lt;span&gt;kwargs)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Perform content negotiation and store the accepted info on the request&lt;/span&gt;
        neg =&lt;span&gt; self.perform_content_negotiation(request)
        request.accepted_renderer, request.accepted_media_type &lt;/span&gt;=&lt;span&gt; neg

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Determine the API version, if versioning is in use.&lt;/span&gt;
        version, scheme = self.determine_version(request, *args, **&lt;span&gt;kwargs)
        request.version, request.versioning_scheme &lt;/span&gt;=&lt;span&gt; version, scheme

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Ensure that the incoming request is permitted&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;4.实现认证&lt;/span&gt;
&lt;span&gt;        self.perform_authentication(request)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;5.权限判断&lt;/span&gt;
&lt;span&gt;        self.check_permissions(request)
        self.check_throttles(request)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）check_permissions&lt;/p&gt;
&lt;p&gt;里面有个has_permission这个就是我们自己写的权限判断&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; check_permissions(self, request):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Check if the request should be permitted.
        Raises an appropriate exception if the request is not permitted.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;[权限类的对象列表]&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; permission &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.get_permissions():
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; permission.has_permission(request, self):
                self.permission_denied(
                    request, message&lt;/span&gt;=getattr(permission, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, None)
                )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）get_permissions&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_permissions(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Instantiates and returns the list of permissions that this view requires.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; [permission() &lt;span&gt;for&lt;/span&gt; permission &lt;span&gt;in&lt;/span&gt; self.permission_classes]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）permission_classes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180405132409173-720959493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 所以settings全局配置就如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;全局&lt;/span&gt;
REST_FRAMEWORK =&lt;span&gt; {
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFAULT_PERMISSION_CLASSES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;API.utils.permission.SVIPPremission&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;内置权限&lt;/h2&gt;
&lt;p&gt; django-rest-framework内置权限BasePermission&lt;/p&gt;
&lt;p&gt;默认是没有限制权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BasePermission(object):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    A base class from which all permission classes should inherit.
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_permission(self, request, view):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Return `True` if permission is granted, `False` otherwise.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; True

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_object_permission(self, request, view, obj):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        Return `True` if permission is granted, `False` otherwise.
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们自己写的权限类，应该去继承BasePermission,修改之前写的permission.py文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; utils/permission.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rest_framework.permissions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BasePermission

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SVIPPremission(BasePermission):
    message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必须是SVIP才能访问&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_permission(self,request,view):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.user.user_type != 3&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyPremission(BasePermission):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; has_permission(self,request,view):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.user.user_type == 3&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）使用&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;自己写的权限类：1.必须继承BasePermission类；  2.必须实现：has_permission方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（2）返回值&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;True   有权访问&lt;/li&gt;
&lt;li&gt;False  无权访问&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（3）局部&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;permission_classes = [MyPremission,] &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; （4）全局&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
REST_FRAMEWORK =&lt;span&gt; {
   &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;权限&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFAULT_PERMISSION_CLASSES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;API.utils.permission.SVIPPremission&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 05 Apr 2018 05:43:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8722212.html</dc:identifier>
</item>
<item>
<title>MySQL/MariaDB中游标的使用 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8722244.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8722244.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8722244.html#blog1&quot;&gt;&lt;span&gt;1.游标说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8722244.html#blog2&quot;&gt;&lt;span&gt;2.使用游标&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8722244.html#blog3&quot;&gt;&lt;span&gt;3.游标使用示例&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;游标，有些地方也称为光标。它的作用是在一个结果集中逐条逐条地获取记录行并操作它们。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201804/733013-20180405133656097-333414444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中select是游标所操作的结果集，游标每次fetch一行中的name和age字段，并将每一行的这两个字段赋值给变量var1和var2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;有很多、很多、很多人，很多、很多、很多书都强烈建议：能不用游标尽量不要用游标&lt;/span&gt;。&lt;/strong&gt;因为它违背了集合的理论，集合取数据是一把一把抓，游标取数据的时候一行一行取，每取一行操作一行，而且在每一行上都有额外的资源消耗。总之，游标效率低、资源消耗高。&lt;/p&gt;
&lt;p&gt;其实很多领域都有这样的优化：把数据先集中起来，集中到了一定量再一次性处理，这样的处理方式效率要高得多。比如写日志到磁盘上，可以每产生一条日志就刷入磁盘，也可以先产生一堆日志缓存起来，之后一次性刷如磁盘。后者效率要高得多。&lt;/p&gt;
&lt;p&gt;集合取数据的时候关注点在于想要什么数据，而不关注怎么去获取数据，游标的关注点则在于怎么获取这些数据：将游标指针作为遍历依据，遍历到哪行数据就返回这行数据然后停下来处理数据，再继续遍历数据。习惯于迭代的人比较喜欢游标，特别是习惯C语言的人，因为游标就是遍历数据行的行为。&lt;/p&gt;
&lt;p&gt;在MySQL、MariaDB中实现的游标比较简单，它&lt;span&gt;&lt;strong&gt;只有一种遍历方式：逐行向前遍历&lt;/strong&gt;&lt;/span&gt;。MariaDB 10.3后，游标方面支持的更完整一点：支持游标参数。&lt;/p&gt;
&lt;p&gt;光标的使用包括&lt;span&gt;&lt;strong&gt;声明光标、打开光标、使用光标和关闭光标&lt;/strong&gt;&lt;/span&gt;(MySQL/MariaDB中的游标无需释放)。光标必须声明在处理程序之前，并且在声明保存结果集的变量之后。另外，&lt;strong&gt;&lt;span&gt;游标是一种复合语句结构(就像begin...end)，只能用于stored procedure或stored function中&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;1.声明游标&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; cursor_name &lt;span class=&quot;hljs-keyword&quot;&gt;CURSOR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; select_statement;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中select_statement是游标需要从中获取的结果集。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; cur_city &lt;span class=&quot;hljs-keyword&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id,&lt;span class=&quot;hljs-string&quot;&gt;'name'&lt;/span&gt;,population &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; world,city;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在MariaDB 10.3中，支持游标参数，该参数可以传递到select_statement中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; cursor_name &lt;span class=&quot;hljs-keyword&quot;&gt;CURSOR&lt;/span&gt;(param1 data_type,param2 data_type2...) &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; select_statement;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; cur_stu &lt;span class=&quot;hljs-keyword&quot;&gt;cursor&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id,name &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Student &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;max&lt;/span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，mariaDB 10.3之前的语法也能在10.3版本上执行，因为之前的语法是10.3版本中不带参数的特殊情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.声明处理程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，光标是用在逐条取结果集的情况下，所以在使用光标的时候基本都会放在循环结构中循环获取数据存储到变量中。但如何在取完数据后退出循环？&lt;/p&gt;
&lt;p&gt;在游标无法获取到下一行数据的时候，将会返回一个1329错误码，这个错误码对应的SQL状态码为&quot;02000&quot;，它们等价于NOT FOUND(这几个是等价的，只是MariaDB中分了3类描述问题的代码而已)。这时可以在声明游标后定义一个handler，用于处理NOT FOUND。&lt;/p&gt;
&lt;p&gt;例如下面是适合游标NOT FOUND时的CONTINUE处理器，表示当找不到下一行数据时继续执行后面的程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONTINUE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;HANDLER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOUND&lt;/span&gt; statement;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于处理游标的HANDLER，通常statement部分是SET语句，用于设置一些变量。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; var_name=&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时，当取不到下一条记录时即已经取完记录时，就设置变量var_name=value。之后就可以通过该变量的值作为退出循环的条件。&lt;/p&gt;
&lt;p&gt;关于handler详细内容，见我翻译的MariaDB手册：&lt;span&gt;&lt;a href=&quot;https://mariadb.com/kb/zh-cn/declare-handler/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://mariadb.com/kb/zh-cn/declare-handler/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.打开游标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当声明了一个游标后，必须要打开游标才能使用游标。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; cursor_name;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; cur_city;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于mariadb 10.3，由于支持游标参数，因此语法为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; cursor_name(value1,value2);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; cur_stu(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.使用游标(fetch into)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过fetch into命令将每次fetch到的结果存储到预先定义好的变量中。注意，&lt;span&gt;这个变量必须是本地变量(局部变量)，不能是用户自定义变量，且这个变量必须定义在游标声明语句之前。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;fetch&lt;/span&gt; cursor_name into var_name;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;fetch&lt;/span&gt; cur_city into city_id,city_name,city_popcnt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面已经说过了，一般游标都会在循环结构中使用。以下是在repeat结构中使用游标；&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;repeat
    fetch ... into ...
    until var_name=value
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;repeat&lt;/span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5.关闭游标&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;close&lt;/span&gt; cursor_name;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;close&lt;/span&gt; cur_city;
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;以下是MariaDB 10.3版本之前(也适用于10.3)的游标使用示例：将表t1和表t2中每行中的某一列作比较，将较大值插入到表t3中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-function&quot;&gt;create or replace table &lt;span class=&quot;hljs-title&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-function&quot;&gt;create or replace table &lt;span class=&quot;hljs-title&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-function&quot;&gt;create or replace table &lt;span class=&quot;hljs-title&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;hljs-function&quot;&gt;insert &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t1 &lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;,&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;,&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-function&quot;&gt;insert &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t2 &lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;,&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;,&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;


delimiter $$

&lt;span class=&quot;hljs-function&quot;&gt;create or replace procedure &lt;span class=&quot;hljs-title&quot;&gt;proc1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;
begin
    declare done &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;;   
    declare x,y &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;;                  
    declare cur1 cursor &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1;    
    declare cur2 cursor &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t2;    
    declare &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; handler &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; not found &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; done=&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;   

    open cur1;
    open cur2;

    my_loop: LOOP
        fetch cur1 &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; x;
        fetch cur2 &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; y;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; done then
            leave my_loop;
        end &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x &amp;lt;= &lt;span class=&quot;hljs-function&quot;&gt;y then 
        insert &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t3 &lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(y)&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
        insert &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t3 &lt;span class=&quot;hljs-title&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;;
    end &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;;
    end loop;

    close cur1;
    close cur2;
end$$

delimiter ;

call proc1;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看表t3：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t3;&lt;/span&gt;
+
| i    |
+
|   15 |
|   30 |
|   20 |
+
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是MariaDB 10.3上使用游标的一个示例：将表t1中i字段某一段数据插入到表t2中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; t1(i &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; t2(i &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;

&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;

delimiter $$

&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;procedure&lt;/span&gt; proc1(&lt;span class=&quot;hljs-keyword&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; done &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;
    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; x &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;;&lt;/span&gt;
    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; cur1 &lt;span class=&quot;hljs-keyword&quot;&gt;cursor&lt;/span&gt;(cmin &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;,cmax &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; t1.i &lt;span class=&quot;hljs-keyword&quot;&gt;between&lt;/span&gt; cmin &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; cmax;&lt;/span&gt;
    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; done=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;

    open cur1(min,max);

    my_loop: LOOP
        fetch cur1 into x;
        if done then
            leave my_loop;
        &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;;&lt;/span&gt;
        &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;(x);&lt;/span&gt;
    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; loop;&lt;/span&gt;

    close cur1;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;$$

delimiter ;&lt;/span&gt;

&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; proc1(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看t2结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;MariaDB [test]&amp;gt; select * from t2;
&lt;span class=&quot;hljs-addition&quot;&gt;+------+&lt;/span&gt;
| i    |
&lt;span class=&quot;hljs-addition&quot;&gt;+------+&lt;/span&gt;
|   10 |
|   20 |
|   30 |
|   40 |
&lt;span class=&quot;hljs-addition&quot;&gt;+------+&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8722244.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/8722244.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 05:42:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8722244.html</dc:identifier>
</item>
<item>
<title>关于TomCat上传文件中文名乱码的问题 - doveshelly</title>
<link>http://www.cnblogs.com/doveshelly/p/8722201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/doveshelly/p/8722201.html</guid>
<description>&lt;p&gt;        最近在学习TomCat文件上传这一部分,由于文件上传必须要三个条件:　　&lt;/p&gt;
&lt;p&gt;　　1.表单提交方式必须为Post&lt;/p&gt;
&lt;p&gt;　　2.表单中需要有&amp;lt;input type=”file”&amp;gt;元素，还需要有name属性和值(name的值)。&lt;/p&gt;
&lt;p&gt;　　3.表单enctype=”multipart/form-data”&lt;/p&gt;
&lt;p&gt;　　而且,这种方式提交后对浏览器进行抓包分析如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;POST /web06/jsp/upload.jsp HTTP/1.1
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Accept: text/html, application/xhtml+xml, */*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;X-HttpWatch-RID: 22006-10026
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Referer: http://localhost:8080/web06/jsp/upload.jsp
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;Accept-Language: zh-CN
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;Content-Type: multipart/form-data; boundary=-------------------------7e139d10110a64(分割线,将请求体的内容分成几块,后面带两个横杠表示内容结束)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;Accept-Encoding: gzip, deflate
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;Host: localhost:8080
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Content-Length: 322
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;DNT: 1
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;Connection: Keep-Alive
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;Cache-Control: no-cache
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;Cookie: JSESSIONID=D51DCB996556C94861B2C72C4D978010
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;-----------------------------7e139d10110a64
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;Content-Disposition: form-data; name=&quot;info&quot;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;aaa
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;-----------------------------7e139d10110a64
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;C:\Users\jt\Desktop\aa.txt&quot;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;Content-Type: text/plain
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;hello world！！！
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; -----------------------------7e139d10110a64—-(有两个横杠表示结束)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要想获得普通项的参数,不能像以前那样通过request.getParameter()来得到了.因此,借住第三方工具包,本文采用的是Apache公司的FileUpload工具包.代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public class UploadServlet extends HttpServlet {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        try {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 6             request.setCharacterEncoding(&quot;utf-8&quot;);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 7&lt;/span&gt;             List&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FileItem&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; fileitems = servletFileUpload.parseRequest(request);
&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 8             //System.setProperty(&quot;sun.jnu.encoding&quot;,&quot;utf-8&quot;);//设置系统对文件名编码的字符集
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            for (FileItem itme : fileitems) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                if (itme.isFormField()) {//是普通项
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    String name = itme.getFieldName();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    String value = itme.getString(&quot;utf-8&quot;);
&lt;/span&gt;&lt;span&gt;&lt;strong&gt;13&lt;/strong&gt; &lt;strong&gt;                  //String value = itme.getString();
14                   //value = new String(value.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    System.out.println(name+&quot;---&quot;+value);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                } else {//文件上传项
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    String realPath = this.getServletContext().getRealPath(&quot;/upload&quot;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    File file = new File(realPath);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    if (!file.exists()) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        file.mkdirs();//不存在就创建文件夹
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    //获得文件输入流
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    InputStream is = itme.getInputStream();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    //获得输出流
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    String filename =itme.getName();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    System.out.println(filename);
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;27                     //System.out.println(System.getProperty(&quot;file.encoding&quot;));
28                     //System.out.println(System.getProperty(&quot;sun.jnu.encoding&quot;));
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    int index = filename.lastIndexOf(&quot;\\&quot;);//兼容IE浏览器,如果是IE浏览器,则获得filename为全路径
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    if (index != -1) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                        filename = filename.substring(index + 1);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                    System.out.println(filename);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    String newFilename = Utils.getName(filename);//工具类,防止文件名重名,调用UUID
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                    String path = Utils.getFilename(newFilename);//工具类,将文件进行分类存放
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                    File newFile = new File(realPath +&quot;/&quot;+ path);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                    if (!newFile.exists()) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                         newFile.mkdirs();
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                    FileOutputStream os = new FileOutputStream(realPath +&quot;/&quot;+ path+ newFilename);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    IOUtils.copy(is,os);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                    is.close();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                    os.close();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        } catch (FileUploadException e) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     }            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面代码中标红部分是比较关键的地方.下面对普通项和文件项乱码问题分别进行解释:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.普通项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　获得普通项的值得代码为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
String value = itme.getString(&quot;utf-8&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　和这个方法有个重载的如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
String value = itme.getString();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　很显然大家也知道结果,上面那个采用字符集&quot;utf-8&quot;进行编码,如果value含有中文,那么结果不会乱码,而采用下面一种则会乱码.我当时就在想,我在程序开始已经设置了请求缓冲流的字符集如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 request.setCharacterEncoding(&quot;utf-8&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为什么我调用下面getString()还会出现乱码呢?去查看源码才发现自己对这几个方法根本没有理解,只是套模板用而已.下面先看一下setCharacterEncoding()方法的作用,API中的解释如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public void setCharacterEncoding(String env) throws java.io.UnsupportedEncodingException
重写此请求正文中使用的字符编码的名称。必须在使用 getReader() 读取请求参数或读取输入之前调用此方法。否则，此方法没有任何效果。 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　 　当你提交不含文件的表单,调用getParameter方法从请求缓冲流获得数据时,设置该方法可以解决乱码问题,(只限Post请求和Tomcat8.0的get请求).查看getParameter源码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 6 private void mergeParameters（）{
 7 if （（queryParamString == null） || （queryParamString.length（） &amp;lt; 1））
 8 return;
 9 HashMap queryParameters = new HashMap（）;
&lt;span&gt;&lt;strong&gt;10 String encoding = getCharacterEncoding（）;&lt;/strong&gt;&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;11 if （encoding == null）
12 encoding = &quot;ISO-8859-1&quot;;&lt;/span&gt;&lt;/strong&gt;
13 try{
14 RequestUtil.parseParameters（queryParameters， queryParamString， encoding）;
15 }catch （Exception e）{
16 ;
17 }
18 Iterator keys = parameters.keySet（）.iterator（）;
19 while （keys.hasNext（））{
20 　　String key = （String） keys.next（）;
21　　 Object value = queryParameters.get（key）;
22 　　if （value == null）{
23 　　　　queryParameters.put（key， parameters.get（key））;
24 　　　　continue;
25 　　　　}
26 　　　　queryParameters.put（key， mergeValues（value， parameters.get（key）））;
27 　　}
28 　　parameters = queryParameters;
29 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
　主要在10 11 12三行代码,10行调用了&lt;strong&gt;getCharacterEncodin&lt;/strong&gt;g（）方法获得字符集,如果没设置的话就默认设置字符集为iso-8859-1.&lt;br/&gt;　　　　而在提交含有文件(即设置了enctype属性)的请求中就不一样了,下面看一下getString()方法的源码:
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
1 &lt;span&gt; public String getString() {
&lt;span&gt;&lt;strong&gt; 2         byte[] rawdata = get();//通过缓冲流获得字节数组
&lt;/strong&gt;&lt;/span&gt; 3 &lt;span&gt;        String charset = getCharSet();//获得字符集,并没有看到setCharSet方法,因此,调用该方法,只能得到charset=null
 4 &lt;span&gt;        if (charset == null) {//如果字符集是空
&lt;span&gt;&lt;strong&gt; 5             charset = DEFAULT_CHARSET;//这是个自定义常量为ISO-8859-1
&lt;/strong&gt;&lt;/span&gt; 6 &lt;span&gt;        }
 7 &lt;span&gt;        try {
&lt;strong&gt;&lt;span&gt; 8 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;            return new String(rawdata, charset);//通过iso-8859-1进行编码得到了结果,肯定会乱码&lt;/span&gt;&lt;/strong&gt;
 9 &lt;span&gt;        } catch (UnsupportedEncodingException e) {
10 &lt;span&gt;            return new String(rawdata);
11 &lt;span&gt;        }
12     }　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;public String getString(final String charset) throws UnsupportedEncodingException { &lt;strong&gt;&lt;span&gt;return new String(get(), charset);&lt;/span&gt;&lt;/strong&gt; }&lt;/span&gt;&lt;/span&gt; 　　　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;这是重载的getString(String )方法,可以看到get()获得字符数组之后,直接调用new String方法得到参数.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;strong&gt;那么如果用 String value = itme.getString();则可以先用iso-8859-1解码,然后再用utf-8编码,也能获得正确的结果.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;String value = new String((value.getbytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;strong&gt;2.文件项上传(文件名乱码和文件内容乱码)&lt;/strong&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;请参考:
&lt;a href=&quot;https://blog.csdn.net/QQ578473688/article/details/77265815?locationNum=7&amp;amp;fps=1&quot;&gt;https://blog.csdn.net/QQ578473688/article/details/77265815?locationNum=7&amp;amp;fps=1&lt;/a&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 05 Apr 2018 05:22:00 +0000</pubDate>
<dc:creator>doveshelly</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/doveshelly/p/8722201.html</dc:identifier>
</item>
<item>
<title>详解机器学习中的熵、条件熵、相对熵和交叉熵 - 遍地胡说</title>
<link>http://www.cnblogs.com/kyrieng/p/8694705.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kyrieng/p/8694705.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/kyrieng/p/8694705.html#name&quot;&gt;信息熵&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/kyrieng/p/8694705.html#name2&quot;&gt;条件熵&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kyrieng/p/8694705.html#name3&quot;&gt;&lt;span&gt;相对熵&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kyrieng/p/8694705.html#name4&quot;&gt;&lt;span&gt;交叉熵&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/kyrieng/p/8694705.html#name5&quot;&gt;总结&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1、&lt;span&gt;信息&lt;/span&gt;&lt;span&gt;熵&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;熵(entropy)这一词最初来源于热力学。1948年，克劳德·爱尔伍德·香农将热力学中的熵引入信息论，所以也被称为香农熵，信息熵。本文只讨论香农熵。首先，我们先来理解一下信息这个概念。信息是一个很抽象的概念，百度百科将它定义为：指音讯、消息、通讯系统传输和处理的对象，泛指人类社会传播的一切内容。那信息可以被量化么？可以的！香农提出的“信息熵”概念解决了这一问题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一条信息的信息量大小和它的&lt;strong&gt;不确定性&lt;/strong&gt;有直接的关系。我们需要搞清楚一件非常非常不确定的事，或者是我们一无所知的事，就需要了解大量的信息。相反，如果我们对某件事已经有了较多的了解，我们就不需要太多的信息就能把它搞清楚。所以，从这个角度，我们可以认为，&lt;strong&gt;信息量的度量就等于不确定性的多少&lt;/strong&gt;。比如，有人说广东下雪了。对于这句话，我们是十分不确定的。因为广东几十年来下雪的次数寥寥无几。为了搞清楚，我们就要去看天气预报，新闻，询问在广东的朋友，而这就需要大量的信息，信息熵很高。再比如，中国男足进军2022年卡塔尔世界杯决赛圈。对于这句话，因为确定性很高，几乎不需要引入信息，信息熵很低。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;考虑一个离散的随机变量 $x$，由上面两个例子可知，信息的量度应该依赖于概率分布 $p(x)$，因此我们想要寻找一个函数 $h(x)$，它是概率 $p(x)$ 的单调函数，表达了信息的内容。怎么寻找呢？如果我们有两个不想管的事件 $x$ 和 $y$，那么观察两个事件同时发生时获得的信息量应该等于观察到事件各自发生时获得的信息之和，即：$h(x,y)=h(x)+h(y)$。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为两个事件是独立不相关的，因此 $p(x,y)=p(x)p(y)$。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据这两个关系，很容易看出 &lt;strong&gt;$h(x)$一定与 $p(x)$ 的对数有关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(因为对数的运算法则是 $log_a(mn)=log_am+log_an$)。因此，我们有&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$h(x)=-logp(x)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;其中负号是用来保证信息量是正数或者零。而 $log$ 函数基的选择是任意的&lt;/strong&gt;（信息论中基常常选择为2，因此信息的单位为比特bits；而机器学习中基常常选择为自然常数，因此单位常常被称为nats）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最后，我们正式引出信息熵。 现在假设一个发送者想传送一个随机变量的值给接收者。那么在这个过程中，他们传输的平均信息量可以通过求 $h(x)=-logp(x)$ 关于概率分布 $p(x)$ 的期望得到，即：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(X)=-\displaystyle\sum_{x}p(x)logp(x)=-\sum_{i=1}^{n}p(x_i)logp(x_i)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(X)$ 就被称为随机变量 $x$ 的&lt;strong&gt;熵,它是表示随机变量不确定的度量，是对所有可能发生的事件产生的信息量的期望&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从公式可得，&lt;strong&gt;随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大。当随机分布为均匀分布时，熵最大&lt;/strong&gt;，且 $0\le H(X)\le logn$。稍后证明。将一维随机变量分布推广到多维随机变量分布，则其&lt;strong&gt;联合熵&lt;/strong&gt;为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(X,Y)=-\displaystyle\sum_{x,y}p(x,y)logp(x,y)=-\sum_{i=1}^{n}\sum_{j=1}^{m}p(x_i,y_i)logp(x_i,y_i)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;1、熵只依赖于随机变量的分布,与随机变量取值无关，所以也可以将 $X$ 的熵记作 $H(p)$。2、令0log0=0(因为某个取值概率可能为0)。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那么这些定义有着什么样的性质呢？考虑一个随机变量 $x$。这个随机变量有4种可能的状态，每个状态都是等可能的。为了把 $x$ 的值传给接收者，我们需要传输2比特的消息。$H(X)=-4\times\dfrac{1}{4}log_2\dfrac{1}{4}=2\ bits$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在考虑一个具有4种可能的状态 $\left\{a,b,c,d\right\}$ 的随机变量，每个状态各自的概率为 $\left( \displaystyle\frac{1}{2},\frac{1}{4},\frac{1}{8},\frac{1}{8} \right)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种情形下的熵为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(X)=-\displaystyle\frac{1}{2}log_2\frac{1}{2}-\frac{1}{4}log_2\frac{1}{4}-\frac{1}{8}log_2\frac{1}{8}-\frac{1}{8}log_2\frac{1}{8}=1.75\ bits$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以看到，&lt;strong&gt;非均匀分布比均匀分布的熵要小&lt;/strong&gt;。现在让我们考虑如何把变量状态的类别传递给接收者。与之前一样，我们可以使用一个2比特的数字来完成这件事情。然而，我们可以利用非均匀分布这个特点，&lt;strong&gt;使用更短的编码来描述更可能的事件，使用更长的编码来描述不太可能的事件&lt;/strong&gt;。我们希望这样做能够得到一个更短的平均编码长度。我们可以使用下面的编码串（哈夫曼编码）：0、10、110、111来表示状态 $\left\{a,b,c,d\right\}$。传输的编码的平均长度就是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;average code length = $\displaystyle\frac{1}{2}\times1+\frac{1}{4}\times2+2\times\frac{1}{8}\times3=1.75\ bits$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个值与上方的随机变量的熵相等。熵和最短编码长度的这种关系是一种普遍的情形。Shannon编码定理&lt;a title=&quot;编码定理&quot; href=&quot;https://baike.baidu.com/item/Shannon%20%E7%BC%96%E7%A0%81%E5%AE%9A%E7%90%86/15585931?fr=aladdin&quot; target=&quot;_blank&quot;&gt;https://baike.baidu.com/item/Shannon%20%E7%BC%96%E7%A0%81%E5%AE%9A%E7%90%86/15585931?fr=aladdin&lt;/a&gt; 表明&lt;strong&gt;熵是传输一个随机变量状态值所需的比特位下界（最短平均编码长度）&lt;/strong&gt;。因此，信息熵可以应用在数据压缩方面。这里这篇文章&lt;a title=&quot;数据压缩&quot; href=&quot;http://www.ruanyifeng.com/blog/2014/09/information-entropy.html&quot; target=&quot;_blank&quot;&gt;http://www.ruanyifeng.com/blog/2014/09/information-entropy.html&lt;/a&gt;讲的很详细了，我就不赘述了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;证明$0\le H(X)\le logn$&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用拉格朗日乘子法证明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为&lt;/span&gt; &lt;span&gt;$p(1)+p(2)+\dots+p(n)=1$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以有&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;目标函数：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;$f(p(1),p(2),\dots,p(n))=-(p(1)logp(1)+p(2)logp(2)+\dots+p(n)logp(n))$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;约束条件：&lt;/strong&gt;$g(p(1),p(2),\dots,p(n),\lambda)=p(1)+p(2)+\dots+p(n)-1=0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、定义拉格朗日函数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$L(p(1),p(2),\dots,p(n),\lambda)=-(p(1)logp(1)+p(2)logp(2)+\dots+p(n)logp(n))+\lambda(p(1)+p(2)+\dots+p(n)-1)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、$L(p(1),p(2),\dots,p(n),\lambda)$分别对 $p(1),p(2),p(n),\lambda$ 求偏导数，令偏导数为 $0$：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$\lambda-log(e\cdot p(1))=0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$\lambda-log(e\cdot p(2))=0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$\dots\dots$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$\lambda-log(e\cdot p(n))=0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$p(1)+p(2)+\dots+p(n)-1=0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3、求出 $p(1),p(2),\dots,p(n)$ 的值：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解方程得，$p(1)=p(2)=\dots=p(n)=\displaystyle\frac{1}{n}$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代入 $f(p(1),p(2),\dots,p(n))$ 中得到目标函数的极值为 $f(\displaystyle\frac{1}{n},\frac{1}{n},\dots,\frac{1}{n})=-(\frac{1}{n}log\frac{1}{n}+\frac{1}{n}log\frac{1}{n}+\dots+\frac{1}{n}log\frac{1}{n})=-log(\frac{1}{n})=logn$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;由此可证 $logn$ 为最大值。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; 2、条件熵&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;条件熵 $H(Y|X)$ 表示在已知随机变量 $X$ 的条件下随机变量 $Y$ 的不确定性。条件熵 $H(Y|X)$ 定义为 $X$ 给定条件下 $Y$ 的条件概率分布的熵对  $X$ 的数学期望：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1361042/201804/1361042-20180403085847838-130152886.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;span&gt;条件熵 $H(Y|X)$ 相当于联合熵 $H(X,Y)$ 减去单独的熵 $H(X)$，即&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(Y|X)=H(X,Y)-H(X)$，证明如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1361042/201804/1361042-20180403094218843-1537760199.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;举个例子，比如环境温度是低还是高，和我穿短袖还是外套这两个事件可以组成联合概率分布 $H(X,Y)$，因为两个事件加起来的信息量肯定是大于单一事件的信息量的。假设 $H(X)$ 对应着今天环境温度的信息量，由于今天环境温度和今天我穿什么衣服这两个事件并不是独立分布的，所以在已知今天环境温度的情况下，我穿什么衣服的信息量或者说不确定性是被减少了。当已知 $H(X)$ 这个信息量的时候，$H(X,Y)$ 剩下的信息量就是条件熵：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(Y|X) =H(X,Y)-H(X)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此，可以这样理解，&lt;strong&gt;描述 $X$ 和 $Y$ 所需的信息是描述 $X$ 自己所需的信息,加上给定  $X$ 的条件下具体化  $Y$ 所需的额外信息&lt;/strong&gt;。关于条件熵的例子可以看这篇文章，讲得很详细。&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26551798&quot; target=&quot;_blank&quot;&gt;https://zhuanlan.zhihu.com/p/26551798&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;3、相对熵（KL散度）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;设 $p(x)$、$q(x)$ 是 离散随机变量 $X$ 中取值的两个概率分布，则 $p$ 对 $q$ 的相对熵是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$D_{KL}(p||q)=\displaystyle\sum_{x}p(x)log\frac{p(x)}{q(x)}=E_{p(x)}log\frac{p(x)}{q(x)}$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;性质：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、如果 $p(x)$ 和 $q(x)$ 两个分布相同，那么相对熵等于0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、$D_{KL}(p||q)\not=D_{KL}(q||p)$ ，相对熵具有不对称性。大家可以举个简单例子算一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、$D_{KL}(p||q)\geq0$ 证明如下（利用Jensen不等式&lt;a href=&quot;https://en.wikipedia.org/wiki/Jensen%27s_inequality&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/Jensen%27s_inequality&lt;/a&gt;）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1361042/201804/1361042-20180404162649353-1228349647.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 因为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$\displaystyle\sum_{x}p(x)=1$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$D_{KL}(p||q)\geq0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;总结：相对熵可以用来衡量两个概率分布之间的差异，上面公式的意义就是求 $p$ 与 $q$ 之间的对数差在 $p$ 上的期望值&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4、交叉熵&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在有关于样本集的两个概率分布 $p(x)$ 和 $q(x)$，其中  $p(x)$ 为真实分布， $q(x)$ 非真实分布。如果用真实分布 $p(x)$ 来衡量识别别一个样本所需要编码长度的期望（平均编码长度）为:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$H(p) =\displaystyle\sum_{x}p(x)log\frac{1}{p(x)}$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果使用非真实分布 $q(x)$ 来表示来自真实分布 $p(x)$ 的平均编码长度，则是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;$H(p,q)=\displaystyle\sum _{x}p(x)log\frac{1}{q(x)}$&lt;/strong&gt;。（因为用 $q(x)$ 来编码的样本来自于分布 $q(x)$ ，所以 $H(p,q)$ 中的概率是 $p(x)$）。此时就将 $H(p,q)$ 称之为&lt;strong&gt;交叉熵&lt;/strong&gt;。举个例子。考虑一个随机变量 $x$，真实分布$p(x)= \left( \displaystyle\frac{1}{2},\frac{1}{4},\frac{1}{8},\frac{1}{8} \right)$，非真实分布 &lt;span&gt;$q(x)=\left( \displaystyle\frac{1}{4},\frac{1}{4},\frac{1}{4},\frac{1}{4} \right)$&lt;/span&gt;，&lt;/span&gt;&lt;span&gt; 则$H(p)=1.75\ bits$（最短平均码长），交叉熵 $H(p,q)=\displaystyle\frac{1}{2}log_24+\frac{1}{4}log_24+\frac{1}{8}log_24+\frac{1}{8}log_24=2\ bits$。由此可以看出根据非真实分布 $q(x)$ 得到的平均码长大于根据真实分布 $p(x)$ 得到的平均码长。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们再化简一下相对熵的公式。$D_{KL}(p||q)=\displaystyle\sum_{x}p(x)log\frac{p(x)}{q(x)}=\sum_{x}p(x)logp(x)-p(x)logq(x)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有没有发现什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;熵的公式 $H(p)=-\displaystyle\sum_{x}p(x)logp(x)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;交叉熵的公式 $H(p,q)=\displaystyle\sum _{x}p(x)log\frac{1}{q(x)}=-\sum _{x}p(x)logq(x)$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$D_{KL}(p||q)=H(p,q)-H(p)$（当用非真实分布 $q(x)$ 得到的平均码长比真实分布 $p(x)$ 得到的平均码长多出的比特数就是相对熵）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;又因为 $D_{KL}(p||q)\geq0$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以 $H(p,q)\geq H(p)$（当 $p(x)=q(x)$ 时取等号，此时交叉熵等于信息熵）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且&lt;strong&gt;当 $H(p)$ 为常量时（注：在机器学习中，训练数据分布是固定的），最小化相对熵 $D_{KL}(p||q)$ 等价于最小化交叉熵 $H(p,q)$ 也等价于最大化似然估计（具体参考Deep Learning 5.5）&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在机器学习中，我们希望在&lt;strong&gt;训练数据上模型学到的分布 $P(model)$ 和真实数据的分布  $P(real)$ 越接近越好，所以我们可以使其相对熵最小&lt;/strong&gt;。但是我们没有真实数据的分布，所以只能希望模型学到的分布 $P(model)$ 和训练数据的分布 $P(train)$ 尽量相同。假设训练数据是从总体中独立同分布采样的，那么我们可以通过最小化训练数据的经验误差来降低模型的泛化误差。即：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;希望学到的模型的分布和真实分布一致，$P(model)\simeq P(real)$&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;但是真实分布不可知，假设训练数据是从真实数据中独立同分布采样的，$P(train)\simeq P(real)$&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;因此，我们希望学到的模型分布至少和训练数据的分布一致，$P(train)\simeq P(model)$&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;根据之前的描述，最小化&lt;/span&gt;训练数据上的分布  $P(train)$ 与&lt;/span&gt;&lt;span&gt;最小化模型分布 $P(model)$ 的差异等价于最小化相对熵，即 $D_{KL}(P(train)||P(model))$。此时， $P(train)$ 就是$D_{KL}(p||q)$ 中的 $p$，即真实分布，$P(model)$ 就是 $q$。又因为训练数据的分布 $p$ 是给定的，所以求  $D_{KL}(p||q)$  等价于求 $H(p,q)$。&lt;strong&gt;得证，交叉熵可以用来计算学习模型分布与训练分布之间的差异&lt;/strong&gt;。交叉熵广泛用于逻辑回归的Sigmoid和Softmax函数中作为损失函数使用。这篇文章先不说了。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;5、总结&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;信息熵是衡量随机变量分布的混乱程度，是随机分布各事件发生的信息量的期望值，随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大。当随机分布为均匀分布时，熵最大；信息熵推广到多维领域，则可得到联合信息熵；条件熵表示的是在 $X$ 给定条件下，$Y$ 的条件概率分布的熵对 $X$的期望。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;相对熵可以用来衡量两个概率分布之间的差异。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;交叉熵可以来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出的努力的大小。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;或者：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;信息熵是传输一个随机变量状态值所需的比特位下界（最短平均编码长度）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;相对熵是指用 $q$ 来表示分布 $p$  额外需要的编码长度。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;条件熵是指用分布 $q$ 来表示本来表示分布 $p$ 的平均编码长度。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;6、参考&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、吴军《数学之美》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、李航《统计学习方法》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、马春鹏《模式识别与机器学习》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、&lt;a href=&quot;https://www.zhihu.com/question/41252833%20&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/41252833 &lt;/a&gt;如何通俗的解释交叉熵与相对熵&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、&lt;a href=&quot;https://www.zhihu.com/question/65288314/answer/244557337&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/65288314/answer/244557337&lt;/a&gt;为什么交叉熵（cross-entropy）可以用于计算代价？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5/8983241?fr=aladdin&quot; target=&quot;_blank&quot;&gt;https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5/8983241?fr=aladdin&lt;/a&gt; 交叉熵的百度百科解释&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、&lt;a href=&quot;https://blog.csdn.net/saltriver/article/details/53056816&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/saltriver/article/details/53056816&lt;/a&gt;信息熵到底是什么&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;7、后记&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本人不是大神，大牛。目前写博客是为了让我自己更深刻地记忆学过的知识和对知识进行梳理。这篇博客是我的第一篇，其中借鉴了不少其他博主的博客里的分享，都有标注来源，如有遗忘，劳烦提醒，衷心感谢他们对自己所掌握的知识的分享。这篇博客可能还存在着一些错误，如有发现，请求斧正，谢谢。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 04:50:00 +0000</pubDate>
<dc:creator>遍地胡说</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kyrieng/p/8694705.html</dc:identifier>
</item>
<item>
<title>Vue 2.0基础语法：系统指令 - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8721471.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8721471.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8721471.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vue初体验&quot;&gt;Vue初体验&lt;/h2&gt;
&lt;p&gt;新建一个空的项目，引入vue.js文件。写如下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--vue的版本：2.5.15--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&amp;lt;!--这个div区域就是MVVM中的 View--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    {{name}}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//new出来的对象就是MVVM中的 View Module&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; myVue &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#div1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//当前vue对象将接管上面的div区域&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//data就是MVVM中的 module&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180313_0955.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们在控制台输入&lt;code&gt;myVue.data+='123'&lt;/code&gt;，页面会&lt;strong&gt;自动更新&lt;/strong&gt;name的值。&lt;/p&gt;
&lt;p&gt;下面来讲一下Vue的各种系统指令。&lt;/p&gt;
&lt;h2 id=&quot;v-on注册事件&quot;&gt;v-on：注册事件&lt;/h2&gt;
&lt;h3 id=&quot;v-on-的用法举例&quot;&gt;v-on 的用法举例&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;&amp;lt;!--vue的版本：2.5.15--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;&amp;lt;!--这个div区域就是MVVM中的 View--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 给button节点绑定按钮的点击事件 --&amp;gt;&lt;/span&gt;
    {{name}}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;改变name的值&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;//new出来的对象就是MVVM中的 View Module&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; myVue &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#div1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//当前vue对象将接管上面的div区域&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//data就是MVVM中的 module&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//注意，下方这个 `methods` 是Vue中定义方法的关键字，不能改&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//上面的button按钮的点击事件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，我们给button按钮绑定了点击事件。注意，这个button标签要写在div区域里（否则点击事件不生效），因为下方的View module接管的是div区域。&lt;/p&gt;
&lt;h3 id=&quot;v-on的简写形式&quot;&gt;&lt;code&gt;v-on&lt;/code&gt;的简写形式&lt;/h3&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;改变name的值&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以简写成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;改变name的值&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;v-on的常用事件&quot;&gt;v-on的常用事件&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;v-on:click&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on:keydown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on:keyup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on:mousedown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on:mouseover&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v-on:submit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;....&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;v-on的事件修饰符&quot;&gt;v-on的事件修饰符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;v-on&lt;/code&gt; 提供了很多事件修饰符来辅助实现一些功能。事件修饰符有如下：&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;.stop&lt;/code&gt; 阻止冒泡。本质是调用 event.stopPropagation()。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;.prevent&lt;/code&gt; 阻止默认事件。本质是调用 event.preventDefault()。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;.capture&lt;/code&gt; 添加事件监听器时，使用 capture 模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;.self&lt;/code&gt; 只有当事件是从侦听器绑定的元素本身触发时，才触发回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;`&lt;code&gt;.{keyCode | keyAlias}&lt;/code&gt; 只当事件是从侦听器绑定的元素本身触发时，才触发回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;`&lt;code&gt;.native&lt;/code&gt; 监听组件根元素的原生事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;写法示范：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;          &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- click事件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThis&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 缩写 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThis&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 内联语句 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThat('hello', $event)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阻止冒泡 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.stop&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThis&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阻止默认行为 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThis&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阻止默认行为，没有表达式 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@submit.prevent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--  串联修饰符 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.stop.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;doThis&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：（&lt;code&gt;.prevent&lt;/code&gt;的用法举例）&lt;/p&gt;
&lt;p&gt;现在有一个form表单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;表单提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们知道，上面这个表单因为&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;，因此它是一个提交按钮，点击按钮后，这个表单就会被提交到form标签的action属性中指定的那个页面中去。这是表单的默认行为。&lt;/p&gt;
&lt;p&gt;现在，我们可以用&lt;code&gt;.prevent&lt;/code&gt;来阻止这种默认行为。修改为：点击按钮后，不提交到服务器，而是执行我们自己想要的事件（在submit方法中另行定义）。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阻止表单中submit的默认事件 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@submit.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 执行自定义的click事件 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mySubmit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;表单提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;mySubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ok'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，我们通过&lt;code&gt;.prevent&lt;/code&gt;阻止了提交按钮的默认事件，点击按钮后，执行的是&lt;code&gt;mySubmit()&lt;/code&gt;方法里的内容。这个方法名是可以随便起的，我们甚至可以起名为&lt;code&gt;submit&lt;/code&gt;，反正默认的submit已经失效了。&lt;/p&gt;
&lt;h2 id=&quot;插值表达式&quot;&gt;插值表达式 {{}}&lt;/h2&gt;
&lt;p&gt;数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值。例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Message: {{ msg }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mustache 标签将会被替代为对应数据对象上 msg 属性（msg定义在data对象中）的值。&lt;br/&gt;无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会&lt;strong&gt;自动更新&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{{}}&lt;/code&gt;对JavaScript 表达式支持，例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{{&lt;/span&gt; number &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;{{&lt;/span&gt; ok &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'YES'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'NO'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;{{&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'true'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'false'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;message&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;reverse&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是有个限制就是，每个绑定都&lt;strong&gt;只能包含单个表达式&lt;/strong&gt;，如下表达式无效：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 这是语句，不是表达式 --&amp;gt;&lt;/span&gt;
{{ var a = 1 }}

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 流控制也不会生效，请使用三元表达式 --&amp;gt;&lt;/span&gt;
{{ if (ok) { return message } }}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;v-text&quot;&gt;v-text&lt;/h2&gt;
&lt;p&gt;v-text可以将一个变量的值渲染到指定的元素中。例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;&amp;lt;!--vue的版本：2.5.15--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#div1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello smyhvae'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180313_1645.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-html&quot;&gt;v-html&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;v-text&lt;/code&gt;是纯文本，而&lt;code&gt;v-html&lt;/code&gt;会被解析成html元素。&lt;/p&gt;
&lt;p&gt;注意：使用v-html渲染数据可能会非常危险，因为它很容易导致 XSS（跨站脚本） 攻击，使用的时候请谨慎，能够使用{{}}或者v-text实现的不要使用v-html。&lt;/p&gt;
&lt;h2 id=&quot;v-cloak&quot;&gt;v-cloak&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;v-cloak&lt;/code&gt;：保持和元素实例的关联，直到结束编译后自动消失。&lt;/p&gt;
&lt;p&gt;这个指令和CSS 规则一起用的时候，可以隐藏未编译的标签直到实例准备完毕。比如说，在网络很慢的情况下，通过&lt;code&gt;v-cloak&lt;/code&gt;隐藏元素，当加载完毕后，再显示出来。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/*网络很慢时，在span上加上 v-cloak和css样式控制以后，浏览器在加载时会先把span隐藏起来。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    直到 Vue实例化完毕以后，v-cloak 会自动消失，那么对应的css样式就会失去作用，最终将span中的内容呈现给用户 */&lt;/span&gt;
    &lt;span class=&quot;ch&quot;&gt;[v-cloak]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-cloak&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#div1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello1 smyhvae22'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;v-bind&quot;&gt;v-bind&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;v-bind&lt;/code&gt;：给html元素或者组件&lt;strong&gt;动态绑定&lt;/strong&gt;一个或多个特性，例如动态绑定style和class。&lt;/p&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-bind:src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;imageSrc&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-bind:style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ fontSize: size + 'px' }&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中的&lt;code&gt;imageSrc&lt;/code&gt;和&lt;code&gt;size&lt;/code&gt;其实是Vue实例里面的变量。&lt;/p&gt;
&lt;p&gt;上面两行代码可以简写成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;imageSrc&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ fontSize: size + 'px' }&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;div1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- value里的值只是简单的字符串 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 加上 v-bind 之后，value里的值是 Vue 里的变量 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-bind:value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 超链接后面的path是 Vue 里面的变量 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{href:'http://www.baidu.com/'+path}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;超链接&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#div1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`2.html`&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180313_1745.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-model双向数据绑定&quot;&gt;v-model：双向数据绑定&lt;/h2&gt;
&lt;p&gt;上面的一段中，我们通过v-bind，给&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;标签绑定了&lt;code&gt;data&lt;/code&gt;对象里的&lt;code&gt;name&lt;/code&gt;属性。当&lt;code&gt;data -&amp;gt; name&lt;/code&gt;的值发生改变时，&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;标签里的内容会自动更新。&lt;/p&gt;
&lt;p&gt;可我现在要做的是：我在&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;标签里修改内容，要求&lt;code&gt;data -&amp;gt; name&lt;/code&gt;的值自动更新。从而实现双向数据绑定。该怎么做呢？这就可以利用&lt;code&gt;v-model&lt;/code&gt;这个属性。&lt;/p&gt;
&lt;p&gt;代码举例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-model=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myAccount.username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;pwd&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-model=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myAccount.userpwd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;注册&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//上面的标签中采用v-model进行双向数据绑定，数据会自动更新到data里面来&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;myAccount&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;userpwd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//在methods里绑定各种方法，根据业务需要进行操作&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;submit1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;myAccount&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;  pwd=&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;myAccount&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userpwd&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，便可实现我们刚刚要求的双向数据绑定的效果。&lt;/p&gt;
&lt;h2 id=&quot;v-forfor循环&quot;&gt;v-for：for循环&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：根据数组中的元素遍历指定模板内容生成内容。&lt;/p&gt;
&lt;h3 id=&quot;引入&quot;&gt;引入&lt;/h3&gt;
&lt;p&gt;比如说，如果我想给一个&lt;code&gt;ul&lt;/code&gt;中的多个&lt;code&gt;li&lt;/code&gt;分别赋值1、2、3...。如果不用循环，就要挨个赋值：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{list[0]}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{list[1]}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{list[2]}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180329_1713.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了实现上面的效果，如果我用&lt;code&gt;v-for&lt;/code&gt;进行赋值，代码就简洁很多了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用v-for对多个li进行遍历赋值 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item in list&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们详细讲一下&lt;code&gt;v-for&lt;/code&gt;的用法。需要声明的是，Vue 1.0的写法和Vue 2.0的写法是不一样的。本文全部采用Vue 2.0的写法&lt;/p&gt;
&lt;h3 id=&quot;数组的遍历赋值&quot;&gt;数组的遍历赋值&lt;/h3&gt;
&lt;p&gt;针对下面这样的数组：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将数组中的&lt;strong&gt;值&lt;/strong&gt;赋给li：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item in arr1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将数组中的&lt;strong&gt;值和index&lt;/strong&gt;赋给li：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;      &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 括号里如果写两个参数：第一个参数代表值，第二个参数代表index --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(item,index) in arr1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;值：{{item}} --- 索引：{{index}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180329_1856.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;对象的遍历赋值&quot;&gt;对象的遍历赋值&lt;/h3&gt;
&lt;p&gt;针对下面这样的对象：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'26'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将上面的&lt;code&gt;obj1&lt;/code&gt;对象的数据赋值给li，写法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 括号里如果写两个参数：则第一个参数代表value，第二个参数代表key --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(value,key) in obj1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;值：{{value}} --- 键：{{key}} &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;---分隔线---&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 括号里如果写三个参数：则第一个参数代表value，第二个参数代表key，第三个参数代表index --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(value,key,index) in obj1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;值：{{value}} --- 键：{{key}} --- index：{{index}} &lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180329_1850.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-if设置元素的显示和隐藏&quot;&gt;v-if：设置元素的显示和隐藏&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：根据表达式的值的真假条件，来决定是否渲染元素，如果为false则不渲染（达到隐藏元素的目的），如果为true则渲染。&lt;/p&gt;
&lt;p&gt;在切换时，元素和它的数据绑定会被销毁并重建。&lt;/p&gt;
&lt;p&gt;举例如下：（点击按钮时，切换和隐藏盒子）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;toggle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;显示/隐藏&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-if=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;isShow&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是盒子&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;isShow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isShow&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isShow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180329_1920.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-show设置元素的显示和隐藏&quot;&gt;v-show：设置元素的显示和隐藏&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：根据表达式的真假条件，来切换元素的 display 属性。如果为false，则在元素上添加 &lt;code&gt;display:none&lt;/code&gt;属性；否则移除&lt;code&gt;display:none&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;举例如下：（点击按钮时，切换和隐藏盒子）&lt;/p&gt;
&lt;p&gt;我们直接把上一段代码中的&lt;code&gt;v-if&lt;/code&gt;改成&lt;code&gt;v-show&lt;/code&gt;就可以了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;toggle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;显示/隐藏&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-show=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;isShow&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;我是盒子&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;isShow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isShow&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isShow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180329_2040.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;v-if和v-show的区别&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-if&lt;/code&gt;和&lt;code&gt;v-show&lt;/code&gt;都能够实现对一个元素的隐藏和显示操作。但是&lt;code&gt;v-if&lt;/code&gt;是添加/删除DOM元素，而&lt;code&gt;v-show&lt;/code&gt;是在这个元素上添加/移除&lt;code&gt;style=&quot;display:none&quot;&lt;/code&gt;属性。&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 03:00:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8721471.html</dc:identifier>
</item>
<item>
<title>python 面向对象之封装与类与对象 - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/8695557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/8695557.html</guid>
<description>&lt;p&gt;　　从封装本身的意思去理解，封装就好像是拿来一个麻袋，把小猫，小狗，小王八，小老虎一起装进麻袋，然后把麻袋封上口子。照这种逻辑看，封装=‘隐藏’，这种理解是相当片面的&lt;/p&gt;&lt;p&gt;&lt;span&gt;在python中用双下划线开头的方式将属性隐藏起来（设置成私有的）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　1.这种机制也并没有真正意义上限制我们从外部直接访问属性，知道了类名和属性名就可以拼出名字：_类名__属性，然后就可以访问了，如a._A__N，即这种操作并不是严格意义上的限制外部访问，仅仅只是一种语法意义上的变形，主要用来限制外部的直接访问。&lt;/p&gt;&lt;p&gt;　　2.变形的过程只在类的定义时发生一次,在定义后的赋值操作，不会变形&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　3.在继承中，父类如果不想让子类覆盖自己的方法，可以将方法定义为私有的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　1. 你的身体没有一处不体现着封装的概念：你的身体把膀胱尿道等等这些尿的功能隐藏了起来，然后为你提供一个尿的接口就可以了（接口就是你的。。。，），你总不能把膀胱挂在身体外面，上厕所的时候就跟别人炫耀：hi，man，你瞅我的膀胱，看看我是怎么尿的。&lt;/p&gt;&lt;p&gt;　　2. 电视机本身是一个黑盒子，隐藏了所有细节，但是一定会对外提供了一堆按钮，这些按钮也正是接口的概念，所以说，封装并不是单纯意义的隐藏！！！&lt;/p&gt;&lt;p&gt;　　3. 快门就是傻瓜相机为傻瓜们提供的方法，该方法将内部复杂的照相功能都隐藏起来了&lt;/p&gt;&lt;p&gt;　　提示：在编程语言里，对外提供的接口（接口可理解为了一个入口），可以是函数，称为接口函数，这与接口的概念还不一样，接口代表一组接口函数的集合体。&lt;/p&gt;&lt;p&gt;　　python并不会真的阻止你访问私有的属性，模块也遵循这种约定，如果模块名以单下划线开头，那么from module import *时不能被导入,但是你from module import _private_module依然是可以导入的&lt;/p&gt;&lt;p&gt;　　其实很多时候你去调用一个模块的功能时会遇到单下划线开头的(socket._socket,sys._home,sys._clear_type_cache),这些都是私有的，原则上是供内部调用的，作为外部的你，一意孤行也是可以用的，只不过显得稍微傻逼一点点&lt;/p&gt;&lt;p&gt;　　python要想与其他编程语言一样，严格控制属性的访问权限，只能借助内置方法如__getattr__，&lt;/p&gt;&lt;p&gt;　　property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值&lt;/p&gt;&lt;p&gt;　　例一：BMI指数（bmi是计算而来的，但很明显它听起来像是一个属性而非方法，如果我们将其做成一个属性，更便于理解）&lt;/p&gt;&lt;div readability=&quot;247.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class People:
    def __init__(self,name,weight,height):
        self.name=name
        self.weight=weight
        self.height=height
    @property
    def bmi(self):
        return self.weight / (self.height**2)

p1=People('egon',75,1.85)
print(p1.bmi)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　例二：圆的周长和面积&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import math
class Circle:
    def __init__(self,radius): #圆的半径radius
        self.radius=radius

    @property
    def area(self):
        return math.pi * self.radius**2 #计算面积

    @property
    def perimeter(self):
        return 2*math.pi*self.radius #计算周长

c=Circle(10)
print(c.radius)
print(c.area) #可以向访问数据属性一样去访问area,会触发一个函数的执行,动态计算出一个值
print(c.perimeter) #同上
'''
输出结果:
314.1592653589793
62.83185307179586
'''
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#注意：此时的特性arear和perimeter不能被赋值
c.area=3 #为特性area赋值
'''
抛出异常:
AttributeError: can't set attribute
'''
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;2：为什么要用property&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　将一个类的函数定义成特性以后，对象再去使用的时候obj.name,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式&lt;strong&gt;遵循了统一访问的原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　除此之外，看下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
ps：面向对象的封装有三种方式:
【public】
这种其实就是不封装,是对外公开的
【protected】
这种封装方式对外不公开,但对朋友(friend)或者子类(形象的说法是“儿子”,但我不知道为什么大家 不说“女儿”,就像“parent”本来是“父母”的意思,但中文都是叫“父类”)公开
【private】
这种封装对谁都不公开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　python并没有在语法上把它们三个内建到自己的class机制中，在C++里一般会将所有的所有的数据都设置为私有的，然后提供set和get方法（接口）去设置和获取，在python中通过property方法可以实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Foo:
    def __init__(self,val):
        self.__NAME=val #将所有的数据属性都隐藏起来

    @property
    def name(self):
        return self.__NAME #obj.name访问的是self.__NAME(这也是真实值的存放位置)

    @name.setter
    def name(self,value):
        if not isinstance(value,str):  #在设定值之前进行类型检查
            raise TypeError('%s must be str' %value)
        self.__NAME=value #通过类型检查后,将值value存放到真实的位置self.__NAME

    @name.deleter
    def name(self):
        raise TypeError('Can not delete')

f=Foo('egon')
print(f.name)
# f.name=10 #抛出异常'TypeError: 10 must be str'
del f.name #抛出异常'TypeError: Can not delete'
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Foo:
    def __init__(self,val):
        self.__NAME=val #将所有的数据属性都隐藏起来

    def getname(self):
        return self.__NAME #obj.name访问的是self.__NAME(这也是真实值的存放位置)

    def setname(self,value):
        if not isinstance(value,str):  #在设定值之前进行类型检查
            raise TypeError('%s must be str' %value)
        self.__NAME=value #通过类型检查后,将值value存放到真实的位置self.__NAME

    def delname(self):
        raise TypeError('Can not delete')

    name=property(getname,setname,delname) #不如装饰器的方式清晰

了解：一种property的古老用法
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;五，封装与可扩展性&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;封装在于明确区分内外，使得类实现者可以修改封装内的东西而不影响外部调用者的代码；而外部使用用者只知道一个接口(函数)，只要接口（函数）名、参数不变，使用者的代码永远无需改变。这就提供一个良好的合作基础——或者说，只要接口这个基础约定不变，则代码改变不足为虑。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#类的设计者
class Room:
    def __init__(self,name,owner,width,length,high):
        self.name=name
        self.owner=owner
        self.__width=width
        self.__length=length
        self.__high=high
    def tell_area(self): #对外提供的接口，隐藏了内部的实现细节，此时我们想求的是面积
        return self.__width * self.__length


#使用者
&amp;gt;&amp;gt;&amp;gt; r1=Room('卧室','egon',20,20,20)
&amp;gt;&amp;gt;&amp;gt; r1.tell_area() #使用者调用接口tell_area


#类的设计者，轻松的扩展了功能，而类的使用者完全不需要改变自己的代码
class Room:
    def __init__(self,name,owner,width,length,high):
        self.name=name
        self.owner=owner
        self.__width=width
        self.__length=length
        self.__high=high
    def tell_area(self): #对外提供的接口，隐藏内部实现，此时我们想求的是体积,内部逻辑变了,只需求修该下列一行就可以很简答的实现,而且外部调用感知不到,仍然使用该方法，但是功能已经变了
        return self.__width * self.__length * self.__high


#对于仍然在使用tell_area接口的人来说，根本无需改动自己的代码，就可以用上新功能
&amp;gt;&amp;gt;&amp;gt; r1.tell_area()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1：什么是类，什么是对象？&lt;/h3&gt;
&lt;p&gt;　　类即类别、种类，是面向对象设计最重要的概念，从一小节我们得知对象是特征与技能的结合体，而类则是一系列对象相似的特征与技能的结合体。&lt;/p&gt;
&lt;p&gt;　　那么问题来了，先有的一个个具体存在的对象（比如一个具体存在的人），还是先有的人类这个概念，这个问题需要分两种情况去看&lt;/p&gt;
&lt;p&gt;在现实世界中：肯定是先有对象，再有类&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
世界上肯定是先出现各种各样的实际存在的物体，然后随着人类文明的发展，
人类站在不同的角度总结出了不同的种类，比如人类、动物类、植物类等概念。
也就说，对象是具体的存在，而类仅仅只是一个概念，并不真实存在，
比如你无法告诉我人类具体指的是哪一个人。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在程序中：务必保证先定义类，后产生对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
这与函数的使用是类似的：先定义函数，后调用函数，类也是一样的：
在程序中需要先定义类，后调用类。不一样的是：调用函数会执行函数体代码
返回的是函数体执行的结果，而调用类会产生对象，返回的是对象
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2：类的定义&lt;/h3&gt;
&lt;p&gt;　　我们来定义一个类（我们站在学校的角度去看，在座的各位都是学生）&lt;/p&gt;
&lt;p&gt;　　在现实社会中，先有对象，再有类&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
对象1：李坦克
    特征:
        学校=oldboy
        姓名=李坦克
        性别=男
        年龄=18
    技能：
        学习
        吃饭
        睡觉

对象2：王大炮
    特征:
        学校=oldboy
        姓名=王大炮
        性别=女
        年龄=38
    技能：
        学习
        吃饭
        睡觉

对象3：牛榴弹
    特征:
        学校=oldboy
        姓名=牛榴弹
        性别=男
        年龄=78
    技能：
        学习
        吃饭
        睡觉


现实中的老男孩学生类
    相似的特征:
        学校=oldboy
    相似的技能：
        学习
        吃饭
        睡觉
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在程序中，务必保证：先定义（类），后使用类（用来产生对象）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#在Python中程序中的类用class关键字定义，而在程序中特征用变量标识，
技能用函数标识，因而类中最常见的无非是：变量和函数的定义
class OldboyStudent:
    school='oldboy'
    def learn(self):
        print('is learning')

    def eat(self):
        print('is eating')

    def sleep(self):
        print('is sleeping')
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;类中可以有任意python代码，这些代码在类定义阶段便会执行，因而会产生新的名称空间，用来存放类的变量名与函数名，可以通过OldboyStudent.__dict__查看&lt;/li&gt;
&lt;li&gt;类中定义的名字，都是类的属性，点是访问属性的语法。&lt;/li&gt;
&lt;li&gt;对于经典类来说我们可以通过该字典操作类名称空间的名字，但新式类有限制（新式类与经典类的区别我们将在后续章节介绍）&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
#程序中类的用法
.:专门用来访问属性，本质操作的就是__dict__
OldboyStudent.school #等于经典类的操作OldboyStudent.__dict__['school']
OldboyStudent.school='Oldboy' #等于经典类的操作OldboyStudent.__dict__['school']='Oldboy'
OldboyStudent.x=1 #等于经典类的操作OldboyStudent.__dict__['x']=1
del OldboyStudent.x #等于经典类的操作OldboyStudent.__dict__.pop('x')


#程序中的对象
#调用类，或称为实例化，得到对象
s1=OldboyStudent()
s2=OldboyStudent()
s3=OldboyStudent()

#如此，s1、s2、s3都一样了，而这三者除了相似的属性之外还各种不同的属性，这就用到了__init__
#注意：该方法是在对象产生之后才会执行，只用来为对象进行初始化操作，可以有任意代码，但一定不能有返回值
class OldboyStudent:
    ......
    def __init__(self,name,age,sex):
        self.name=name
        self.age=age
        self.sex=sex
    ......


s1=OldboyStudent('李坦克','男',18) #先调用类产生空对象s1，然后调用OldboyStudent.__init__(s1,'李坦克','男',18)
s2=OldboyStudent('王大炮','女',38)
s3=OldboyStudent('牛榴弹','男',78)


#程序中对象的用法
#执行__init__,s1.name='牛榴弹'，很明显也会产生对象的名称空间
s2.__dict__
{'name': '王大炮', 'age': '女', 'sex': 38}

s2.name #s2.__dict__['name']
s2.name='王三炮' #s2.__dict__['name']='王三炮'
s2.course='python' #s2.__dict__['course']='python'
del s2.course #s2.__dict__.pop('course')
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;　　1，站的角度不同，定义出来的类是截然不同的&lt;/p&gt;
&lt;p&gt;　　2，现实中的类并不完全等于程序中的类，比如现实中的公司类，在程序中有时需要拆分成部门类，业务类。。。&lt;/p&gt;
&lt;p&gt;　　3，有时候为了编程需求，程序中也有可能会定义现实中不存在的类，比如策略类，现实中并不存在，但是在程序中确实一个很常见的类。&lt;/p&gt;
&lt;h3&gt;3：python为类内置的特殊属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
类名.__name__# 类的名字(字符串) 

类名.__doc__# 类的文档字符串 

类名.__base__# 类的第一个父类(在讲继承时会讲) 

类名.__bases__# 类所有父类构成的元组(在讲继承时会讲) 

类名.__dict__# 类的字典属性 类名.__module__# 类定义所在的模块 

类名.__class__# 实例对应的类(仅新式类中)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;补充说明：从代码级别看面向对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;102&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
#1、在没有学习类这个概念时，数据与功能是分离的
def exc1(host,port,db,charset):
    conn=connect(host,port,db,charset)
    conn.execute(sql)
    return xxx


def exc2(host,port,db,charset,proc_name)
    conn=connect(host,port,db,charset)
    conn.call_proc(sql)
    return xxx

#每次调用都需要重复传入一堆参数
exc1('127.0.0.1',3306,'db1','utf8','select * from tb1;')
exc2('127.0.0.1',3306,'db1','utf8','存储过程的名字')




#2、我们能想到的解决方法是，把这些变量都定义成全局变量
HOST=‘127.0.0.1’
PORT=3306
DB=‘db1’
CHARSET=‘utf8’

def exc1(host,port,db,charset):
    conn=connect(host,port,db,charset)
    conn.execute(sql)
    return xxx


def exc2(host,port,db,charset,proc_name)
    conn=connect(host,port,db,charset)
    conn.call_proc(sql)
    return xxx

exc1(HOST,PORT,DB,CHARSET,'select * from tb1;')
exc2(HOST,PORT,DB,CHARSET,'存储过程的名字')


#3、但是2的解决方法也是有问题的，按照2的思路，我们将会定义一大堆全局变量，这些全局变量并没有做任何区分，即能够被所有功能使用，然而事实上只有HOST，PORT，DB，CHARSET是给exc1和exc2这两个功能用的。言外之意：我们必须找出一种能够将数据与操作数据的方法组合到一起的解决方法，这就是我们说的类了

class MySQLHandler:
    def __init__(self,host,port,db,charset='utf8'):
        self.host=host
        self.port=port
        self.db=db
        self.charset=charset
    def exc1(self,sql):
        conn=connect(self.host,self.port,self.db,self.charset)
        res=conn.execute(sql)
        return res


    def exc2(self,sql):
        conn=connect(self.host,self.port,self.db,self.charset)
        res=conn.call_proc(sql)
        return res


obj=MySQLHandler('127.0.0.1',3306,'db1')
obj.exc1('select * from tb1;')
obj.exc2('存储过程的名字')


#改进
class MySQLHandler:
    def __init__(self,host,port,db,charset='utf8'):
        self.host=host
        self.port=port
        self.db=db
        self.charset=charset
        self.conn=connect(self.host,self.port,self.db,self.charset)
    def exc1(self,sql):
        return self.conn.execute(sql)

    def exc2(self,sql):
        return self.conn.call_proc(sql)


obj=MySQLHandler('127.0.0.1',3306,'db1')
obj.exc1('select * from tb1;')
obj.exc2('存储过程的名字')

数据与专门操作该数据的功能组合到一起
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4：类的使用&lt;/h3&gt;
&lt;h4&gt;4.1：引用类&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
OldboyStudent.school #查
OldboyStudent.school='Oldboy' #改
OldboyStudent.x=1 #增
del OldboyStudent.x #删
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.2：调用类，或称为实例化，得到程序中的对象&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
s1=OldboyStudent()
s2=OldboyStudent()
s3=OldboyStudent()

#如此，s1、s2、s3都一样了，而这三者除了相似的属性之外还各种不同的属性，这就用到了__init__
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4.3：__init__方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#注意：该方法是在对象产生之后才会执行，只用来为对象进行初始化操作，
可以有任意代码，但一定不能有返回值
class OldboyStudent:
    ......
    def __init__(self,name,age,sex):
        self.name=name
        self.age=age
        self.sex=sex
    ......

s1=OldboyStudent('李坦克','男',18) #先调用类产生空对象s1，
然后调用OldboyStudent.__init__(s1,'李坦克','男',18)
s2=OldboyStudent('王大炮','女',38)
s3=OldboyStudent('牛榴弹','男',78)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5：对象的使用&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#执行__init__,s1.name='牛榴弹'，很明显也会产生对象的名称空间可以用s2.__dict__查看，
查看结果为{'name': '王大炮', 'age': '女', 'sex': 38}

s2.name #查，等同于s2.__dict__['name']
s2.name='王三炮' #改，等同于s2.__dict__['name']='王三炮'
s2.course='python' #增，等同于s2.__dict__['course']='python'
del s2.course #删，等同于s2.__dict__.pop('course')
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;补充说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;站的角度不同，定义出的类是截然不同的；&lt;/li&gt;
&lt;li&gt;现实中的类并不完全等于程序中的类，比如现实中的公司类，在程序中有时需要拆分成部门类，业务类等；&lt;/li&gt;
&lt;li&gt;有时为了编程需求，程序中也可能会定义现实中不存在的类，比如策略类，现实中并不存在，但是在程序中却是一个很常见的类。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;6：属性查找&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;类有两种属性：数据属性和函数属性&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;1，类的数据属性是所有对象共享的&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#类的数据属性是所有对象共享的,id都一样
print(id(OldboyStudent.school))

print(id(s1.school)) #4377347328
print(id(s2.school)) #4377347328
print(id(s3.school)) #4377347328
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2，类的函数数据是绑定给对象用的，称为绑定到对象的方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#类的函数属性是绑定给对象使用的,obj.method称为绑定方法,内存地址都不一样

print(OldboyStudent.learn) #&amp;lt;function OldboyStudent.learn at 0x1021329d8&amp;gt;
print(s1.learn) #&amp;lt;bound method OldboyStudent.learn of &amp;lt;__main__.OldboyStudent object at 0x1021466d8&amp;gt;&amp;gt;
print(s2.learn) #&amp;lt;bound method OldboyStudent.learn of &amp;lt;__main__.OldboyStudent object at 0x102146710&amp;gt;&amp;gt;
print(s3.learn) #&amp;lt;bound method OldboyStudent.learn of &amp;lt;__main__.OldboyStudent object at 0x102146748&amp;gt;&amp;gt;

#ps:id是python的实现机制,并不能真实反映内存地址,如果有内存地址,还是以内存地址为准
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在obj.name会先从obj自己的名称空间里找name，找不到则去类中找，类也找不到就找父类...最后都找不到就抛出异常&lt;/p&gt;
&lt;h3&gt;7：绑定方法（绑定到对象的方法的特殊之处）&lt;/h3&gt;
&lt;p&gt;定义类并实例化三个对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class OldboyStudent:
    school='oldboy'
    def __init__(self,name,age,sex):
        self.name=name
        self.age=age
        self.sex=sex
    def learn(self):
        print('%s is learning' %self.name) #新增self.name

    def eat(self):
        print('%s is eating' %self.name)

    def sleep(self):
        print('%s is sleeping' %self.name)


s1=OldboyStudent('李坦克','男',18)
s2=OldboyStudent('王大炮','女',38)
s3=OldboyStudent('牛榴弹','男',78)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　类中定义的函数（没有被任何装饰器装饰的）是类的函数属性，类可以使用，但必须遵循函数的参数规则，有几个参数需要传几个参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
OldboyStudent.learn(s1) #李坦克 is learning
OldboyStudent.learn(s2) #王大炮 is learning
OldboyStudent.learn(s3) #牛榴弹 is learning
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　类中定义的函数（没有被任何装饰器装饰的）,其实主要是给对象使用的，而且是绑定到对象的，虽然所有对象指向的都是相同的功能，但是绑定到不同的对象就是不同的绑定方法&lt;/p&gt;
&lt;p&gt;　　强调：绑定到对象的方法的特殊之处在于，绑定给谁就由谁来调用，谁来调用，就会将‘谁’本身当做第一个参数传给方法，即自动传值（方法__init__也是一样的道理）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
s1.learn() #等同于OldboyStudent.learn(s1)
s2.learn() #等同于OldboyStudent.learn(s2)
s3.learn() #等同于OldboyStudent.learn(s3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;注意：绑定到对象的方法的这种自动传值的特征，决定了在类中定义的函数都要默认写一个参数self，self可以是任意名字，但是约定俗成地写出self。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;8：类即类型&lt;/h3&gt;
&lt;p&gt;　　python中一切皆为对象，且python3中类与类型是一个概念，类型就是类&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#类型dict就是类dict
&amp;gt;&amp;gt;&amp;gt; list
&amp;lt;class 'list'&amp;gt;

#实例化的到3个对象l1,l2,l3
&amp;gt;&amp;gt;&amp;gt; l1=list()
&amp;gt;&amp;gt;&amp;gt; l2=list()
&amp;gt;&amp;gt;&amp;gt; l3=list()

#三个对象都有绑定方法append,是相同的功能,但内存地址不同
&amp;gt;&amp;gt;&amp;gt; l1.append
&amp;lt;built-in method append of list object at 0x10b482b48&amp;gt;
&amp;gt;&amp;gt;&amp;gt; l2.append
&amp;lt;built-in method append of list object at 0x10b482b88&amp;gt;
&amp;gt;&amp;gt;&amp;gt; l3.append
&amp;lt;built-in method append of list object at 0x10b482bc8&amp;gt;

#操作绑定方法l1.append(3),就是在往l1添加3,绝对不会将3添加到l2或l3
&amp;gt;&amp;gt;&amp;gt; l1.append(3)
&amp;gt;&amp;gt;&amp;gt; l1
[3]
&amp;gt;&amp;gt;&amp;gt; l2
[]
&amp;gt;&amp;gt;&amp;gt; l3
[]
#调用类list.append(l3,111)等同于l3.append(111)
&amp;gt;&amp;gt;&amp;gt; list.append(l3,111) #l3.append(111)
&amp;gt;&amp;gt;&amp;gt; l3
[111]
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;9：构造方法__init__(...)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;　　__init__(...)&lt;/code&gt;被称为 构造方法或初始化方法，在例实例化过程中自动执行，目的是初始化实例的一些属性。每个实例通过__init__初始化的属性都是独有的&lt;/p&gt;
&lt;p&gt;　　主要作用就是实例化时在给实例一些初始化参数，或者执行一些其他的初始化工作，总之这个__init__只要一实例化，就会自动执行，所以不管你在这个方法里面写了什么东西，它都会统统在实例化时执行一遍&lt;/p&gt;
&lt;h4&gt;9.1：普通方法&lt;/h4&gt;
&lt;p&gt;　　定义类的一些正常功能，比如人这个类，可以说话，走路，吃饭等，每个方法其实相当于一个功能或者动作&lt;/p&gt;
&lt;h4&gt;9.2：析构方法（解构方法）&lt;/h4&gt;
&lt;p&gt;　　实例在内存中被删除时，会自动执行这个方法，如你在内存里生成了一个人的实例，现在他被打死了，那这个人除了自己的实例要被删除外，可能它在实例外产生的一些痕迹也要清除掉，清除的动作就可以写在这个方法里&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Person(object):

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def talk(self):
        print(&quot;Hello, my name is %s, I'm %s years old!&quot; % (self.name, self.age))

    def __del__(self):
        print(&quot;running del method, this person must be died.&quot;)


p = Person(&quot;Alex&quot;, 22)
p.talk()

del p

print('--end program--')
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;9.3：对象之间的交互&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Garen:        #定义英雄盖伦的类，不同的玩家可以用它实例出自己英雄;
    camp='Demacia'  #所有玩家的英雄(盖伦)的阵营都是Demacia;
    def __init__(self,nickname,aggressivity=58,life_value=455): #英雄的初始攻击力58...;
        self.nickname=nickname  #为自己的盖伦起个别名;
        self.aggressivity=aggressivity #英雄都有自己的攻击力;
        self.life_value=life_value #英雄都有自己的生命值;
    def attack(self,enemy):   #普通攻击技能，enemy是敌人;
        enemy.life_value-=self.aggressivity #根据自己的攻击力，攻击敌人就减掉敌人的生命值。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以仿照garen类再创建一个Riven类&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
class Riven:
    camp='Noxus'  #所有玩家的英雄(锐雯)的阵营都是Noxus;
    def __init__(self,nickname,aggressivity=54,life_value=414): #英雄的初始攻击力54;
        self.nickname=nickname  #为自己的锐雯起个别名;
        self.aggressivity=aggressivity #英雄都有自己的攻击力;
        self.life_value=life_value #英雄都有自己的生命值;
    def attack(self,enemy):   #普通攻击技能，enemy是敌人;
        enemy.life_value-=self.aggressivity #根据自己的攻击力，攻击敌人就减掉敌人的生命值。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实例除两英雄&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; g1=Garen('草丛伦')
&amp;gt;&amp;gt;&amp;gt; r1=Riven('锐雯雯')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　交互：瑞文雯攻击草丛论，反之一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; g1.life_value
455
&amp;gt;&amp;gt;&amp;gt; r1.attack(g1)
&amp;gt;&amp;gt;&amp;gt; g1.life_value
401 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;9.4：补充：&lt;/h3&gt;
&lt;p&gt;garen_hero.Q()称为向garen_hero这个对象发送了一条消息，让他去执行Q这个功能，类似的有：&lt;/p&gt;
&lt;p&gt;　　garen_hero.W()&lt;/p&gt;
&lt;p&gt;　　garen_hero.E()&lt;/p&gt;
&lt;p&gt;　　garen_hero.R()&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 05 Apr 2018 02:44:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/8695557.html</dc:identifier>
</item>
<item>
<title>更优雅的方式： JavaScript 中顺序执行异步函数 - givebest</title>
<link>http://www.cnblogs.com/givebest/p/8721371.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/givebest/p/8721371.html</guid>
<description>&lt;h2 id=&quot;火于异步&quot;&gt;火于异步&lt;/h2&gt;
&lt;p&gt;1995年，当时最流行的浏览器——网景中开始运行 JavaScript （最初称为 LiveScript）。 1996年，微软发布了 JScript 兼容 JavaScript。随着网景、微软竞争而不断的技术更新，在 2000年前后，JavaScript 相关的技术基础准备就绪。 随后到 2005 年前后，以 Google 为首开始重视使用 AJAX（即 Asynchronous JavaScript and XML)，使得复杂的网页交互体验接近桌面应用。&lt;/p&gt;
&lt;p&gt;然后，随着 Web 应用变得越来越复杂 ，JavaScript 的生态和重要性也日益提升，YUI、prototype.js、jQuery 等各种库相应登场，随之而来就到了 JavaScript 的繁荣期。&lt;/p&gt;
&lt;p&gt;2008年，Google 发布了 JavaScript 引擎 V8 大大改善了 JavaScript 的执行速度，进一步推动了 JavaScript 的繁荣，也为 JavaScript 进军服务器端打下了基础（如：Node.js）。&lt;/p&gt;
&lt;h2 id=&quot;顺序执行异步函数&quot;&gt;顺序执行异步函数&lt;/h2&gt;
&lt;p&gt;异步为 JavaScript 带来非阻塞等优势的同时，同时也在一些场景下带了不便，如：顺序执行异步函数，下面总结了一些常用的方法。&lt;/p&gt;
&lt;h3 id=&quot;回调地狱&quot;&gt;1. &quot;回调地狱&quot;&lt;/h3&gt;
&lt;p&gt;随着应用复杂度几何式增加，我们可能遇到下面“回调地狱”式的代码。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 第一个任务&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task1&lt;/span&gt; (callback) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第一个任务，必须第一个执行'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    callback &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 第二个任务&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task2&lt;/span&gt; (callback) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第二个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    callback &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 第三个任务&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task3&lt;/span&gt; (callback) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第三个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    callback &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 所有任务&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;allTasks&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;task1&lt;/span&gt;((cb1) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (cb1) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;task2&lt;/span&gt;((cb2) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (cb2) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;task3&lt;/span&gt;((cb3) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (cb3) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;co&quot;&gt;// 顺序完成所有任务&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;   
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;allTasks&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1 我是第一个任务，必须第一个执行&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 2 第二个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3 第三个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;promise&quot;&gt;2. Promise&lt;/h3&gt;
&lt;p&gt;为了避免“回调地狱”带来的复杂性和不易阅读，ES6 推出了 Promise。这次实现起来简单多了，但还存在 Promise 中嵌套多层 Promise 的问题，似乎又回到了类似“回调地狱”的问题上。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;(resolve &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第一个任务，必须第一个执行'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;((val) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;(resolve &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第二个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(val &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第三个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1 我是第一个任务，必须第一个执行&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 2 第二个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3 第三个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;awaitasync&quot;&gt;3. Await、Async&lt;/h3&gt;
&lt;blockquote readability=&quot;2.25&quot;&gt;
&lt;p&gt;确保支持，详细见：&lt;a href=&quot;https://caniuse.com/#search=async&quot; class=&quot;uri&quot;&gt;https://caniuse.com/#search=async&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了更易书写和阅读来实现顺序执行异步函数，ES2017 新增了 &lt;code&gt;await&lt;/code&gt; 和 &lt;code&gt;async&lt;/code&gt;。这次书写体验非常的棒，就像写同步代码一样完成了顺序执行异步的需求。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第一个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task1&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;(resolve &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是第一个任务，必须第一个执行'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'done'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第二个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task2&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;(resolve &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'第二个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'done'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第三个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task3&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;((resolve&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; reject) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'第三个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'error'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第四个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;task4&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;(resolve &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'第四个任务'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'done'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 所有任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;allTasks&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  await &lt;span class=&quot;at&quot;&gt;task1&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  await &lt;span class=&quot;at&quot;&gt;task2&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  await &lt;span class=&quot;at&quot;&gt;task3&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  await &lt;span class=&quot;at&quot;&gt;task4&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 执行任务&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;allTasks&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1 我是第一个任务，必须第一个执行&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 2 第二个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1秒后&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3 第三个任务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Uncaught (in promise) error&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;完整案例&quot;&gt;完整案例&lt;/h5&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;基于 Node.js，通过 Await 、Async、Promise 实现的顺序执行异步，爬取豆瓣电影截图并按顺序一张张下载图片。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;h3 id=&quot;转载请注明出处-httpblog.givebest.cnjavascript20180405javascript-sync.html&quot;&gt;转载请注明出处： &lt;a href=&quot;http://blog.givebest.cn/javascript/2018/04/05/javascript-sync.html&quot; class=&quot;uri&quot;&gt;http://blog.givebest.cn/javascript/2018/04/05/javascript-sync.html&lt;/a&gt;&lt;/h3&gt;
</description>
<pubDate>Thu, 05 Apr 2018 02:25:00 +0000</pubDate>
<dc:creator>givebest</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/givebest/p/8721371.html</dc:identifier>
</item>
<item>
<title>测试驱动开发实践2————测试驱动开发之前 - 云开发</title>
<link>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</guid>
<description>&lt;p&gt;【内容指引】&lt;br/&gt;关闭微服务项目的缓存开关；&lt;br/&gt;改造dto层代码；&lt;br/&gt;改造dao层代码；&lt;br/&gt;改造service.impl层的list方法；&lt;br/&gt;调整单元测试类的testList方法代码。&lt;/p&gt;
&lt;h2 id=&quot;toc_0&quot;&gt;一、关闭项目的缓存开关&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;在正式进行测试驱动开发之前，我们需要关闭项目的缓存配置&lt;/em&gt;。由于从“云开发”平台生成的微服务初始化代码默认启用了Redis缓存(建议以Docker的方式安装及启动Redis)，为避免因为缓存导致测试数据不准确，可以关闭缓存的开关。&lt;/p&gt;
&lt;p&gt;如下图所示，在&quot;DocApplicationTests&quot;中将“//TODO”提示这行删除掉即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074938565-142960196.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在“DocApplication”中将“@EnableCaching”这个注解注释掉，就关掉了缓存开关：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074938905-985830872.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;二、改造dto层代码&lt;/h2&gt;
&lt;p&gt;在查询文档分类(Category)列表时，查询的参数通过“DTO数据传输对象”CategoryDTO传递。默认情况下，“云开发”平台初始化的DTO类代码中的字段来自于领域类中数据类型为String的字段，除此外，增加一个keyword字段。&lt;/p&gt;
&lt;p&gt;keyword字段用于标准查询，其它字段用于高级查询。这里介绍下标准查询和高级查询的区别。&lt;br/&gt;&lt;em&gt;提示&lt;/em&gt;&lt;br/&gt;由于本例中Category领域类仅包含name(分类名称)这一个String类型的字段，不便于区分标准查询和高级查询。&lt;em&gt;我们假设Category类中还含有一个memo(分类说明)字段&lt;/em&gt;，那么标准查询和高级查询的用途如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准查询&lt;/strong&gt;&lt;br/&gt;标准查询，就是“或”关系的匹配。客户端仅提供一个“查询关键字”，然后从Category领域类对应的数据表&quot;tbl_category&quot;的多个String字段中匹配该关键字(忽略大小写)，只要任何一个字段匹配成功，即成为查询结果之一。比如，关键字为“AA”，那么如果分类名称(name)中含有“AA”，或者分类说明(memo)中含有“AA”,都是符合条件的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级查询&lt;/strong&gt;&lt;br/&gt;高级查询，就是“且”关系的匹配。客户端提供多个关键字，然后从Category领域类对应的数据表&quot;tbl_category&quot;的多个String字段中分别匹配这些关键字，只有所有字段的赋值均匹配成功，才能成为查询结果之一。比如，分类名称关键字为“AA”，分类说明关键字为“BB”，那么只有分类名称(name)中含有“AA”，并且分类说明(memo)中含有“BB”的数据才是符合条件的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074939862-116160088.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;1.keyword字段不可删除&lt;/h3&gt;
&lt;p&gt;keyword字段是约定用于标准查询的参数，不可删除！&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;2.CategoryDTO其它字段&lt;/h3&gt;
&lt;p&gt;根据实际查询需要，将不适合用于查询的字段删除掉，包含私有字段、构造函数、get和set属性。&lt;br/&gt;本例中由于领域类Category中仅含一个String类型字段name，所以不必分标准查询和高级查询，所以将用于高级查询的字段“name”删除掉。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;3.为CategoryDTO增加字段&lt;/h3&gt;
&lt;p&gt;本例中，查询文档分类时需指定所属的项目，所以增加一个projectId字段，相应修改带参构造函数和Getter、Setter。Mac操作系统下使用IntelliJ IDEA编码时可以用“Command + N”快捷键：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074939930-2025224850.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;修改后代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dto;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Category(文档分类) 的DTO数据传输对象
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CategoryDTO &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关键字(标准查询)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String keyword;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 文档分类所属的项目
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long projectId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *空构造函数
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CategoryDTO(){
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CategoryDTO(String keyword, Long projectId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.keyword =&lt;span&gt; keyword;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.projectId =&lt;span&gt; projectId;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *Getter,Setter
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getKeyword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; keyword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKeyword(String keyword) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.keyword =&lt;span&gt; keyword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getProjectId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; projectId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProjectId(Long projectId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.projectId =&lt;span&gt; projectId;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;三、改造dao层代码&lt;/h2&gt;
&lt;p&gt;dao层采用JPA接口的方式实现数据查询，根据DTO中字段的调整，修改这里的接口(增加了projectId参数)：&lt;/p&gt;
&lt;p&gt;修改前代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; top.cloudev.doc.domain.Category;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Pageable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.jpa.repository.JpaRepository;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 领域类 Category(文档分类) 的DAO Repository接口层
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RepositoryRestResource(path = &quot;newpath&quot;)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; CategoryRepository &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Category,Long&amp;gt;&lt;span&gt; {

    Page&lt;/span&gt;&amp;lt;Category&amp;gt;&lt;span&gt; findByIsDeletedFalse(Pageable pageable);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标准查询&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByNameContainingAndIsDeletedFalseAllIgnoringCase(String name, Pageable pageable);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074942122-1823650402.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; top.cloudev.doc.domain.Category;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Pageable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.jpa.repository.JpaRepository;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 领域类 Category(文档分类) 的DAO Repository接口层
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RepositoryRestResource(path = &quot;newpath&quot;)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; CategoryRepository &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Category,Long&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认列表&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByProjectIdAndIsDeletedFalse(Long projectId, Pageable pageable);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标准查询&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByNameContainingAllIgnoringCaseAndProjectIdAndIsDeletedFalse(String name, Long projectId, Pageable pageable);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_6&quot;&gt;四、改造service.impl层的getPageData方法&lt;/h2&gt;
&lt;p&gt;由于dao层的查询接口已修改，相应调整服务实现层UserServiceImpl中getPageData方法调用的方法名及参数。这里利用&quot;dto.getProjectId()&quot;给增加的参数传值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074940956-1542138786.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_7&quot;&gt;五、调整单元测试类的testList方法代码&lt;/h2&gt;
&lt;p&gt;打开文档分类的单元测试类代码，找到&quot;testList()&quot;方法，对其中调用Dao层数据访问接口的代码进行调整（正常情况下应该在“测试无搜索列表”、“测试标准查询”和“测试高级查询”三处有对dao接口的调用，本例中因没有高级查询，所以仅需修改两处）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074943401-2087317693.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;调整后代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074955268-1081489692.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074954128-1310771408.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 测试无搜索列表
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO 将下面的null值换为测试参数&lt;/span&gt;
        Pageable pageable=&lt;span&gt;new&lt;/span&gt; PageRequest(0,10, Sort.Direction.DESC,&quot;categoryId&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 期望获得的结果数量(默认有两个测试用例，所以值应为&quot;2L&quot;，如果新增了更多测试用例，请相应设定这个值)&lt;/span&gt;
        expectResultCount = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接通过dao层接口方法获得期望的数据&lt;/span&gt;
        Page&amp;lt;Category&amp;gt; pagedata =&lt;span&gt; categoryRepository.findByProjectIdAndIsDeletedFalse(c1.getCategoryId(), pageable);
        expectData &lt;/span&gt;= JsonPath.read(Obj2Json(pagedata),&quot;$&quot;&lt;span&gt;).toString();

        MvcResult mvcResult &lt;/span&gt;=&lt;span&gt; mockMvc
                .perform(
                        MockMvcRequestBuilders.get(&lt;/span&gt;&quot;/category/list&quot;&lt;span&gt;)
                                .accept(MediaType.APPLICATION_JSON)
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.pagedata.totalElements&quot;&lt;span&gt;).value(expectResultCount))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.keyword&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.name&quot;&lt;span&gt;).isEmpty())
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取返回结果中的列表数据及翻页信息&lt;/span&gt;
        responseData = JsonPath.read(mvcResult.getResponse().getContentAsString(),&quot;$.pagedata&quot;&lt;span&gt;).toString();

        System.out.println(&lt;/span&gt;&quot;=============无搜索列表期望结果：&quot; +&lt;span&gt; expectData);
        System.out.println(&lt;/span&gt;&quot;=============无搜索列表实际返回：&quot; +&lt;span&gt; responseData);

        Assert.assertEquals(&lt;/span&gt;&quot;错误，无搜索列表返回数据与期望结果有差异&quot;&lt;span&gt;,expectData,responseData);
        


        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 测试标准查询
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO 将下面的null值换为测试参数&lt;/span&gt;
        dto = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CategoryDTO();
        dto.setKeyword(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        dto.setProjectId(c1.getProjectId());

        pageable&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; PageRequest(0,10, Sort.Direction.DESC,&quot;categoryId&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 期望获得的结果数量&lt;/span&gt;
        expectResultCount = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        String keyword &lt;/span&gt;=&lt;span&gt; dto.getKeyword().trim();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接通过dao层接口方法获得期望的数据&lt;/span&gt;
        pagedata =&lt;span&gt; categoryRepository.findByNameContainingAllIgnoringCaseAndProjectIdAndIsDeletedFalse(keyword, dto.getProjectId(), pageable);
        expectData &lt;/span&gt;= JsonPath.read(Obj2Json(pagedata),&quot;$&quot;&lt;span&gt;).toString();

        mvcResult &lt;/span&gt;=&lt;span&gt; mockMvc
                .perform(
                        MockMvcRequestBuilders.get(&lt;/span&gt;&quot;/category/list&quot;&lt;span&gt;)
                                .param(&lt;/span&gt;&quot;keyword&quot;&lt;span&gt;,dto.getKeyword())
                                .accept(MediaType.APPLICATION_JSON)
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.pagedata.totalElements&quot;&lt;span&gt;).value(expectResultCount))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.keyword&quot;&lt;span&gt;).value(dto.getKeyword()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.name&quot;&lt;span&gt;).isEmpty())
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取返回结果中的列表数据及翻页信息&lt;/span&gt;
        responseData = JsonPath.read(mvcResult.getResponse().getContentAsString(),&quot;$.pagedata&quot;&lt;span&gt;).toString();

        System.out.println(&lt;/span&gt;&quot;=============标准查询期望结果：&quot; +&lt;span&gt; expectData);
        System.out.println(&lt;/span&gt;&quot;=============标准查询实际返回：&quot; +&lt;span&gt; responseData);

        Assert.assertEquals(&lt;/span&gt;&quot;错误，标准查询返回数据与期望结果有差异&quot;,expectData,responseData);
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 04 Apr 2018 23:50:00 +0000</pubDate>
<dc:creator>云开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</dc:identifier>
</item>
</channel>
</rss>