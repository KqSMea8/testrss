<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>即将发布的 ASP.NET Core 2.2 会有哪些新玩意儿？ - Liam Wang</title>
<link>http://www.cnblogs.com/willick/p/aspnetcore2-2-2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willick/p/aspnetcore2-2-2.html</guid>
<description>&lt;div class=&quot;markdown-here-wrapper&quot; data-md-url=&quot;https://i.cnblogs.com/EditPosts.aspx?opt=1&quot; readability=&quot;47.043443603029&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191097/201809/191097-20180920005408791-1024753221.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;今年 6 月份的时候时候 .NET 团队就在 GitHub 公布了 ASP.NET Core 2.2 版本的 Roadmap（文末有链接），而前两天 ASP.NET Core 2.2 预览版 2 已经可以下载使用了，正式版大约会在今年年底的时候发布。&lt;/p&gt;
&lt;p&gt;相对于 2.0 and 2.1 来说，这次更新算是一次小更新了，主要包含 Bug 修复、性能优化、增加一些小的特性、和 Merge 社区的 PR。&lt;/p&gt;
&lt;p&gt;下面来总结一下 ASP.NET Core 2.2 有哪些新的东西。&lt;/p&gt;
&lt;h3 id=&quot;apicontroller-&quot;&gt;ApiController 特性增强&lt;/h3&gt;
&lt;p&gt;ApiController 特性是 ASP.NET Core 2.1 引入的，应用在 Controller 类上，主要用来自动对 Model 进行验证并自动响应 400 错误。引入 ApiController 特性后比如下面的代码是多余的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!ModelState.IsValid)&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BadRequest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ModelState)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在版本 2.2，ApiController 特性提供了 API Explorer 元数据，可以更友好地生成 Swagger/OpenAPI 文档。然后还增加了一些默认约定，如果代码不符合约定，是会有建议的。比如下面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-csharp&quot;&gt;[ApiController]&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CatalogController&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ControllerBase&lt;/span&gt;&lt;br/&gt;{&lt;br/&gt;[HttpGet]&lt;br/&gt;[Route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;items/{id:int}&quot;&lt;/span&gt;)]&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;CatalogItem&amp;gt;&amp;gt; GetItemById(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; id)&lt;br/&gt;{&lt;br/&gt;}&lt;br/&gt;...&lt;br/&gt;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会出现建议提示，通过快捷键 Ctrl+.，编辑器会建议你这么写：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-csharp&quot;&gt;[ApiController]&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CatalogController&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ControllerBase&lt;/span&gt;&lt;br/&gt;{&lt;br/&gt;[HttpGet]&lt;br/&gt;[Route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;items/{id:int}&quot;&lt;/span&gt;)]&lt;br/&gt;[ProducesResponseType((&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)HttpStatusCode.NotFound)]&lt;br/&gt;[ProducesResponseType(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(CatalogItem),(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)HttpStatusCode.OK)]&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;CatalogItem&amp;gt;&amp;gt; GetItemById(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; id)&lt;br/&gt;{&lt;br/&gt;}&lt;br/&gt;...&lt;br/&gt;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;-&quot;&gt;引入新的路由系统&lt;/h3&gt;
&lt;p&gt;会有一个叫 Dispatcher 的东西，它的设计是为了让路由匹配更早地出现在管道中，这样可对中间件可见，中间件通过它可以知道路由下一个指向目标的信息。&lt;/p&gt;
&lt;h3 id=&quot;-api-repl-&quot;&gt;提供调用 API 的 REPL 工具&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;dotnet&lt;/code&gt; CLI 中集成可以调用 API 的 REPL 工具。这个主要是方便快速调试 API 的，类似命令行的 curl 命令，但应该更强大。&lt;/p&gt;
&lt;h3 id=&quot;-api-c-typescript-&quot;&gt;生成调用 API 客户端代码 (C# 和 TypeScript)&lt;/h3&gt;
&lt;p&gt;可以根据写好的 API 元数据，生成调用 API 的客户端代码（C# 和 TypeScript）。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;授权服务&lt;/h3&gt;
&lt;p&gt;提供基于 OpenID 的授权服务，这个服务相当于项目的统一授权点，可用于 SPA、Native App 等。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;其它&lt;/h2&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Kestrel 和 HttpClient 的 HTTP/2 支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;应用的健康检查，比如内存消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;SignalR 支持使用 Java 和 C++ 链接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;详情请查看官方 ASP.NET Core 2.2 Roadmap:&lt;br/&gt;&lt;a href=&quot;https://github.com/aspnet/Announcements/issues/307&quot;&gt;https://github.com/aspnet/Announcements/issues/307&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 19 Sep 2018 17:19:00 +0000</pubDate>
<dc:creator>Liam Wang</dc:creator>
<og:description>今年 6 月份的时候时候 .NET 团队就在 GitHub 公布了 ASP.NET Core 2.2 版本的 Roadmap（文末有链接），而前两天 ASP.NET Core 2.2 预览版 2 已经</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willick/p/aspnetcore2-2-2.html</dc:identifier>
</item>
<item>
<title>分布式系列五: RMI通信 - 罪恶斯巴克</title>
<link>http://www.cnblogs.com/walkinhalo/p/9678139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/walkinhalo/p/9678139.html</guid>
<description>&lt;h2 id=&quot;rpcremote-procedure-call协议&quot;&gt;RPC(Remote Procedure Call)协议&lt;/h2&gt;
&lt;p&gt;RPC协议是一种通过网络从远程计算机上请求服务, 而不需要了解底层网络技术的协议, 在OSI模型中处在应用层和网络层.&lt;/p&gt;
&lt;p&gt;作为一个规范, 使用RPC协议的框架有很多, Dubbo,Hessian等均使用这个协议, RMI也使用该协议实现.&lt;/p&gt;
&lt;h2 id=&quot;rmiremote-method-invocation-远程方法调用&quot;&gt;RMI(Remote Method Invocation) 远程方法调用&lt;/h2&gt;
&lt;p&gt;RMI使用Java远程消息交换协议JRMP（Java Remote Messaging Protocol）进行通信,JRMP是纯java的.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;定义接口, 使其extends &lt;code&gt;Remote&lt;/code&gt;接口, 方法需要抛出异常&lt;code&gt;RemoteException&lt;/code&gt;, Remote是一个标记接口&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface IRmiTest extends Remote {
    String hello() throws RemoteException;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;实现接口, 使其extends &lt;code&gt;UnicastRemoteObject&lt;/code&gt;, 需要有构造方法, 并抛出异常&lt;code&gt;RemoteException&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class RmiTest extends UnicastRemoteObject implements IRmiTest {

    public RmiTest() throws RemoteException {

    }

    @Override
    public String hello() {
        return &quot;Hello ....&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;定义服务端, 注册和绑定&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class TestServer {
    public static void main(String[] args) throws RemoteException, AlreadyBoundException, MalformedURLException {
        IRmiTest rmiTest = new RmiTest();
        LocateRegistry.createRegistry(8888);
        Naming.bind(&quot;rmi://localhost:8888/hello&quot;,rmiTest);
        System.out.println(&quot;server started&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;定义客户端, lookup方法的参数url与服务端bind的必须一致. 接口需要定义为与服务端一致.&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class TestClient {
    public static void main(String[] args) throws RemoteException,  MalformedURLException, NotBoundException {
        IRmiTest rmiTest = (IRmiTest) Naming.lookup(&quot;rmi://localhost:8888/hello&quot;);
        System.out.println(rmiTest.hello());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;rmi实现机制&quot;&gt;RMI实现机制&lt;/h2&gt;
&lt;p&gt;RMI屏蔽了底层复杂的网络调用, 使得远程对象的方法调用变得透明, 就像调用本地方法一样方便.&lt;br/&gt;下面深入探究下jdk中rmi的实现原理, 看看底层是如何实现远程调用的.&lt;br/&gt;首先, 需要了解下比较重要的两个角色stub和skeleton, 这两个角色封装了与网络相关的代码. 原始的交互式这样的,客户端--网络--服务器--具体服务. 有了这两个角色之后的模型变为: 客户端--stub--网络--skeleton--服务器--服务.可以参考的图&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_remote_method_invocation&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面来看源码...&lt;/p&gt;
&lt;h3 id=&quot;一.实例化registryimpl初始化&quot;&gt;一.实例化RegistryImpl,初始化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LocateRegistry.createRegistry(8888);&lt;/code&gt;这句代码启动了一个注册器(其中有个Map对象来存储名称和服务的映射,这个后面再细看)&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static Registry createRegistry(int port) throws RemoteException {
    return new RegistryImpl(port);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法实例化了一个&lt;code&gt;RegistryImpl&lt;/code&gt;的实例,&lt;code&gt;RegistryImpl&lt;/code&gt;实现了&lt;code&gt;Registry&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public RegistryImpl(final int var1) throws RemoteException {
    if(var1 == 1099 &amp;amp;&amp;amp; System.getSecurityManager() != null) {
        try {
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Void run() throws RemoteException {
                    LiveRef var1x = new LiveRef(RegistryImpl.id, var1);
                    RegistryImpl.this.setup(new UnicastServerRef(var1x));
                    return null;
                }
            }, (AccessControlContext)null, new Permission[]{new SocketPermission(&quot;localhost:&quot; + var1, &quot;listen,accept&quot;)});
        } catch (PrivilegedActionException var3) {
            throw (RemoteException)var3.getException();
        }
    } else {
        LiveRef var2 = new LiveRef(id, var1);
        this.setup(new UnicastServerRef(var2));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;两个分支最终都调用了&lt;code&gt;setup()&lt;/code&gt;方法, 主要关注该方法.if分支中var1=1099是指默认端口并且存在安全管理器的时候不做校验, 这是为了性能考虑.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private void setup(UnicastServerRef var1) throws RemoteException {
    this.ref = var1; // UnicastServerRef继承了RemoteRef,this.ref的类型就是RemoteRef
    var1.exportObject(this, (Object)null, true); 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;setup方法的参数是包装后的&lt;code&gt;UnicastServerRef&lt;/code&gt;对象, &lt;code&gt;UnicastServerRef&lt;/code&gt;继承了&lt;code&gt;RemoteRef&lt;/code&gt;因此可以赋值给ref变量. 该方法将调用委托给&lt;code&gt;UnicastServerRef&lt;/code&gt;的方法&lt;code&gt;exportObject()&lt;/code&gt;&lt;br/&gt;如果是拿文章开头的代码进行调试, 会发现这个方法会走两次, 除了&lt;code&gt;RegistryImpl&lt;/code&gt;, 还有一次是&lt;code&gt;RmiTest&lt;/code&gt;也会走这个方法.不同的是&lt;code&gt;RegistryImpl&lt;/code&gt;会走下面代码中的&lt;code&gt;if(var5 instanceof RemoteStub)&lt;/code&gt;分支语句, 这个语句最终将生成一个Skeleton实例并设置给当前实例的域变量skel, 不过自jdk1.2之后skeleton就没什么用了.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public Remote exportObject(Remote var1, Object var2, boolean var3) throws RemoteException {
    Class var4 = var1.getClass();

    Remote var5;
    try {
        var5 = Util.createProxy(var4, this.getClientRef(), this.forceStubUse);
    } catch (IllegalArgumentException var7) {
        throw new ExportException(&quot;remote object implements illegal remote interface&quot;, var7);
    }

    if(var5 instanceof RemoteStub) {
        // 生成Skeleton实例并设置给当前实例的域变量skel
        this.setSkeleton(var1);
    }

    Target var6 = new Target(var1, this, var5, this.ref.getObjID(), var3);
    this.ref.exportObject(var6);  //ref是实例化UnicastServerRef的时候传入的
    this.hashToMethod_Map = (Map)hashToMethod_Maps.get(var4);
    return var5;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面方法首先根据&lt;code&gt;Remote&lt;/code&gt;的参数var1创建了一个代理对象var5, var1是&lt;code&gt;RegistryImpl&lt;/code&gt;类的实例. 然后实例化一个&lt;code&gt;Target&lt;/code&gt;的实例, 从参数可以看到,Target对象包含了几乎之前代码的所有对象.然后将这个对象作为参数,调用&lt;code&gt;LiveRef&lt;/code&gt;实例ref的&lt;code&gt;exportObject()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h3 id=&quot;二.-网络连接和对象传输&quot;&gt;二. 网络连接和对象传输&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void exportObject(Target var1) throws RemoteException {
    this.ep.exportObject(var1);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接上一步, &lt;code&gt;RemoteRef&lt;/code&gt;的方法最终委托给&lt;code&gt;TCPEndpoint&lt;/code&gt;的同名方法(委托模式), 到此代码将控制权传递给传输层.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    public void exportObject(Target var1) throws RemoteException {
        synchronized(this) {
            this.listen();
            ++this.exportCount;
        }

        boolean var2 = false;
        boolean var12 = false;

        try {
            var12 = true;
            super.exportObject(var1);
            var2 = true;
            var12 = false;
        } finally {
            if (var12) {
                if (!var2) {
                    synchronized(this) {
                        this.decrementExportCount();
                    }
                }

            }
        }

        if (!var2) {
            synchronized(this) {
                this.decrementExportCount();
            }
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法实现了网络通信, 首先&lt;code&gt;linsten()&lt;/code&gt;启动了一个&lt;code&gt;ServerSocket&lt;/code&gt;的线程,并开始监听端口. 然后调用父类的方法将&lt;code&gt;Target&lt;/code&gt;对象暴露出去, 此时服务端的初始化就完成了.&lt;/p&gt;
&lt;h3 id=&quot;三.-注册服务&quot;&gt;三. 注册服务&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Naming.bind(&quot;rmi://localhost:8888/hello&quot;,rmiTest);&lt;/code&gt; 完成名称和服务对象的绑定.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void bind(String name, Remote obj)
    throws AlreadyBoundException,
        java.net.MalformedURLException,
        RemoteException
{
    ParsedNamingURL parsed = parseURL(name);
    Registry registry = getRegistry(parsed);

    if (obj == null)
        throw new NullPointerException(&quot;cannot bind to null&quot;);

    registry.bind(parsed.name, obj);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码&lt;code&gt;Naming&lt;/code&gt;类, 调用的是注册器&lt;code&gt;Registry&lt;/code&gt;的&lt;code&gt;bind()&lt;/code&gt;方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void bind(String var1, Remote var2) throws RemoteException, AlreadyBoundException, AccessException {
    Hashtable var3 = this.bindings;
    synchronized(this.bindings) {
        Remote var4 = (Remote)this.bindings.get(var1);
        if (var4 != null) {
            throw new AlreadyBoundException(var1);
        } else {
            this.bindings.put(var1, var2);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注册使用的容器是一个&lt;code&gt;HashTable&lt;/code&gt;, 最终服务的名称和服务会被注册到这个map容器中.&lt;/p&gt;
&lt;p&gt;到此为止, 服务端的初始化完成. 首先实例化了一个实现&lt;code&gt;Register&lt;/code&gt;注册器的实例, 通过层层组装, 最终生成一个&lt;code&gt;Target&lt;/code&gt;对象, 其中包含了组装过程中生成的全部状态, 最后调用&lt;code&gt;RemoteRef&lt;/code&gt;的方法将对象转交给传输层对象&lt;code&gt;TCPEndpoint&lt;/code&gt;的实例, 最终由这个对象启动Socket开启通信连接. 注册服务是通过&lt;code&gt;Naming&lt;/code&gt;的方法委托调用&lt;code&gt;Register&lt;/code&gt;注册器的方法实现, 并将结果最终注册到&lt;code&gt;Register&lt;/code&gt;域的map对象中.&lt;/p&gt;
&lt;h3 id=&quot;四.-客户端远程调用&quot;&gt;四. 客户端远程调用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;IRmiTest rmiTest = (IRmiTest) Naming.lookup(&quot;rmi://localhost:8888/hello&quot;);&lt;/code&gt; 客户端通过&lt;code&gt;Naming&lt;/code&gt;的方法获取服务的实例&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static Remote lookup(String name)
    throws NotBoundException,
        java.net.MalformedURLException,
        RemoteException{
    ParsedNamingURL parsed = parseURL(name);
    Registry registry = getRegistry(parsed);

    if (parsed.name == null)
        return registry;
    return registry.lookup(parsed.name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与服务端注册时候使用&lt;code&gt;Naming.bind()&lt;/code&gt;方法一样, 这里&lt;code&gt;lookup()&lt;/code&gt;最终也会委托给&lt;code&gt;Registry&lt;/code&gt;的实例. 这个实例的实现不是用的服务端的&lt;code&gt;Register_Impl&lt;/code&gt;, 而是使用&lt;code&gt;RegistryImpl_Stub&lt;/code&gt;, 下面代码是&lt;code&gt;lookup()&lt;/code&gt;的实现, 可以看出这里封装了网络io的一些逻辑.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
    try {
        RemoteCall var2 = this.ref.newCall(this, operations, 2, 4905912898345647071L);

        try {
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(var1);
        } catch (IOException var17) {
            throw new MarshalException(&quot;error marshalling arguments&quot;, var17);
        }

        this.ref.invoke(var2);

        Remote var22;
        try {
            ObjectInput var4 = var2.getInputStream();
            var22 = (Remote)var4.readObject();
        } catch (IOException var14) {
            throw new UnmarshalException(&quot;error unmarshalling return&quot;, var14);
        } catch (ClassNotFoundException var15) {
            throw new UnmarshalException(&quot;error unmarshalling return&quot;, var15);
        } finally {
            this.ref.done(var2);
        }

        return var22;
    } catch (RuntimeException var18) {
        throw var18;
    } catch (RemoteException var19) {
        throw var19;
    } catch (NotBoundException var20) {
        throw var20;
    } catch (Exception var21) {
        throw new UnexpectedException(&quot;undeclared checked exception&quot;, var21);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此, 服务端和客户端的连接完成, 可以开始通信了.&lt;/p&gt;
&lt;p&gt;RMI自JDK1.1就已经提供了, 它提供了Java语言自己的RPC调用方式, 虽然有些老旧, 但依然经典. 目前有很多跨语言的技术或框架, 如后来的WebService, 再到目前的netty,shrift等基本已经取代了这种原始的调用方式, 他们是非阻塞的,且还能跨语言调用. 但熟悉RMI的实现方式对了解分布式系统的通信的实现原理有很大帮助.&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:41:00 +0000</pubDate>
<dc:creator>罪恶斯巴克</dc:creator>
<og:description>RPC(Remote Procedure Call)协议 RPC协议是一种通过网络从远程计算机上请求服务, 而不需要了解底层网络技术的协议, 在OSI模型中处在应用层和网络层. 作为一个规范, 使用R</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/walkinhalo/p/9678139.html</dc:identifier>
</item>
<item>
<title>ES6语法的学习与实践 - Peerless1029</title>
<link>http://www.cnblogs.com/peerless1029/p/9678130.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/9678130.html</guid>
<description>&lt;p&gt;　　ES6是JavaScript语言的新一代标准，是ECMAScript的第六个版本，加入了很多新的功能和语法，在很多框架，如在使用Vue,React等框架的项目中一般都采用ES6语法来编写的，下面对经常用到的ES6语法做简要的介绍。&lt;/p&gt;
&lt;p&gt;　　1.let,const&lt;/p&gt;
&lt;p&gt;　　let和const是ES6中新增的两个关键字，用来生命变量，let和const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读变量，一旦声明，常量的值就不可更改。与var声明的变量不同，var声明的是函数作用域，且存在变量提升。例如：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; let示例&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;   let b=2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; a;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; b;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ReferenceError:b is not undefined.&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const示例&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; const c=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; c=4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  Assignment to constant variable.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var 示例&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; d=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;声明提前后浏览器执行顺序为：
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt; d;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; d=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.箭头函数&lt;/p&gt;
&lt;p&gt;　　ES6允许使用“箭头”（=&amp;gt;）定义函数。这种函数创建的函数不需要函数关键字，并且还可以省略return关键字。与此同时，箭头函数内的this指向函数定义时所在的上下文对象。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; foo1=(a,b)=&amp;gt;a+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等价于 &lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; foo1=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a,b){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; a+&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在return只有一个表达式时，使用箭头函数可以省略return和{}&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name='jhon'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   name:&quot;tom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   sayName1:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     },500&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  sayName2:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     setTimeout(()=&amp;gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;       console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     },500&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; obj.sayName1(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; jhon&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; obj.sayName2(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个this值window对象，第二个方法里面指向当前的obj对象，&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　小结：1.使用箭头函数可以简写代码量；2.可以改变this的指向，可以替代apply,call,bind一些方法。&lt;/p&gt;
&lt;p&gt;　　3.模板字符串&lt;/p&gt;
&lt;p&gt;　　相信许多小伙伴在js里面用‘’，+拼接字符串很让人头疼了，如果字符串量比较少还好，一旦比较多，最后拼的自己都不认识了，而且严重影响代码的整洁优雅度。ES6的反引号（``）标识字符串，除了可以当做普通字符串使用外，还可以用来定义多行字符串，以及在字符串内嵌入变零，功能很强大。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 普通字符串&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;`Hello World`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多行字符串&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;`Hello World，
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   Hello JavaScript!
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;`
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串内嵌入变量&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; let name='Peer'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; `Hello,${name}`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4.解构赋值&lt;/p&gt;
&lt;p&gt;　　ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构。例如：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组解构&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; [a,b,c]=[1,2,3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; a &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; b &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; c &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象解构&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; let name='Peer'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; let age=23&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; let person=&lt;span&gt;{name,age};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; person &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{name:&quot;Peer&quot;,age:23}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 函数的参数也可以使用解构赋值，例如：&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组的参数解构&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum([x,y]){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; sum([1,2]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象的参数解构&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum2({x,y}){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; sum2({x:5,y:6}); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解构同样适用于嵌套的数组与对象&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 嵌套数组解构&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; let [a,[b],c]=[1,[2],3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; a; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; b; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; c: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 嵌套对象解构&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; let {person:{name,age},foo}={person:{name:&quot;Peer&quot;,age:23},foo:&quot;foo&quot;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; name;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;Peer&quot;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; age;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; foo; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;foo&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　小结：对象和数组的解构只需和声明好的对象数组形式保持一致即可，在获取对象里面的属性值还是很方便的，在Vue，React等框架的开发中也用的比较多，如:import { a , b , c } from 'component',所以不难理解这段代码，就是把component这个模块里面的啊，a,b,c属性对应的值取出来再分别赋值给a,b,c变量，确实大大简化了代码，提高了开发效率。&lt;/p&gt;
&lt;p&gt;5.rest参数&lt;/p&gt;
&lt;p&gt;　　rest打开软件翻译为：休息; 剩余部分; 支持物; 宁静，安宁。ES6引入rest参数（形式为...变零名）用于获取多数的多余参数，以替代arguments对象的使用。rest参数是一个数组，数组中的元素是多余的参数。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; printName(a,...names){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;  console.log(a);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;  console.log(names)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; printName(&quot;Peer&quot;,&quot;jhon&quot;,&quot;toom&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Peer&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;jhon&quot;, &quot;toom&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.扩展运算符&lt;/p&gt;
&lt;p&gt;　　扩展运算符是三个点（...）,它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(a,b,c){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; a+b+&lt;span&gt;c;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; sum(...[1,2,3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.import ,export&lt;/p&gt;
&lt;p&gt;　　ES6实现了自己的模块化表标准，在语言层面上实现了模块化，它逐渐取代了CommonJS和AMD规范。ES6的模块功能主要有两个关键字构成：export和import。export用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a.js&lt;/span&gt;
const a=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'this is a.js'&lt;span&gt;
}
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; b.js&lt;/span&gt;
const b=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'this is b.js'&lt;span&gt;
}
export {b}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; c.js&lt;/span&gt;
import a from './a'&lt;span&gt;;
import {b} from &lt;/span&gt;'./b'&lt;span&gt;;
console.log(a,b); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'this is a.js', 'this is b.js'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　小结：ES6的模块化解决了JavaScript没有模块化系统的缺陷，同时也使得各个模块相互独立，有独立的作用域。&lt;/p&gt;
&lt;p&gt;8.Class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义一个类&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;class Person{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  constructor(name,age){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  getName(){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; person=&lt;span&gt;new&lt;/span&gt; Person(&quot;Peer&quot;,23&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过extends 关键字实现继承&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;class Man extends Person{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  constructor(anme,age){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    super(name,age)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  getGender(){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 'male'
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; man=&lt;span&gt;new&lt;/span&gt; Man(&quot;Peer&quot;,23&lt;span&gt;)；&lt;br/&gt;23 man.getName(); //Peer&lt;br/&gt;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; console.dir(man);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201809/1103967-20180919221404440-969472432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从打印man对象的结构来看，getGender是Man原型的方法，getName是Man继承Person的构造方法，man.getName()方法首先再man.__proto__的原型上查找，如果没有就在man.__proto__.proto__上查找，于是一级一级就构成了作用域链。&lt;/p&gt;
&lt;p&gt;话说好记性不如烂笔头，书写文章也是自我反思与总结的过程。以上就是个人在项目开发中用的比较多的地方分享给大家，不足之处，多多指正。&lt;/p&gt;
&lt;p&gt;参考书籍：《React进阶之路》，《深入浅出Webpack》&lt;/p&gt;



</description>
<pubDate>Wed, 19 Sep 2018 14:39:00 +0000</pubDate>
<dc:creator>Peerless1029</dc:creator>
<og:description>ES6是JavaScript语言的新一代标准，是ECMAScript的第六个版本，加入了很多新的功能和语法，在很多框架，如在使用Vue,React等框架的项目中一般都采用ES6语法来编写的，下面对经常</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peerless1029/p/9678130.html</dc:identifier>
</item>
<item>
<title>浅谈final修饰的变量 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9678123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9678123.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;一直大概的知道final关键字的作用，但是自己实际工作中却很少用，除非在声明一些常量值的时候，今天忽然自己在项目中用一个map进行存储一些值。一开始我只是用private修饰的，心里想的是如果final修饰的话，应该不能修改了。毕竟被final修饰的变量不可变。今天回家后，做了下面的尝试，彻底暴露出自己基础的不扎实。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;final的作用&quot;&gt;final的作用&lt;/h3&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;被final修饰的类不可以被继承&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;被final修饰的方法不可以被重写&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;被final修饰的变量不可变&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;实战演示&quot;&gt;实战演示&lt;/h3&gt;
&lt;p&gt;1、首先看下面代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class FinalDemo {
    private static final Map&amp;lt;String, Object&amp;gt; NAME = new HashMap&amp;lt;&amp;gt;(16);
    private static final List&amp;lt;String&amp;gt; LIST = new ArrayList&amp;lt;&amp;gt;(10);
    private static final String[] TYPE = new String[15];
    private static final StringBuilder SB = new StringBuilder(&quot;22&quot;);
    private static final StringBuffer SBU = new StringBuffer(&quot;22&quot;);
    private static final String S = &quot;44&quot;;
    private static final int num = 44;
    private static final String S1 = new String();



    public void setName() {
        NAME.put(&quot;1&quot;, &quot;maomao&quot;);
        LIST.add(&quot;11&quot;);
        TYPE[0] = &quot;1&quot;;
        SB.append(&quot;12&quot;);
        SBU.append(&quot;32&quot;);
        System.out.println(NAME);
        System.out.println(LIST);
        System.out.println(Arrays.asList(TYPE));
        System.out.println(SB.toString());
        System.out.println(SBU.toString());
    }

    public static void main(String[] args) {
        FinalDemo finalDemo = new FinalDemo();
        finalDemo.setName();
    }


}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、运行结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{1=maomao}
[11]
[1, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
2212
2232
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、由此可见：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用了map、list、数组、StringBuilder 、StringBuffer .它们的内容是可以修改的。&lt;/li&gt;
&lt;li&gt;String和基本数据类型修饰的变量。同样final表示地址不能修改，但是地址的存储跟常量的值有关，给他重新赋值会指向另外一个对象，地址就改变了。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;被final修饰的变量，不可变的是&lt;strong&gt;变量的引用&lt;/strong&gt;，而不是变量的内容&lt;/p&gt;
&lt;p&gt;当然，final还有其他作用，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;被final修饰的常量，在编译阶段会存入调用类的常量池中&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一块暂时不先探讨，现在自己水平还没到。还需要继续努力。&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:38:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>浅谈final修饰的变量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9678123.html</dc:identifier>
</item>
<item>
<title>基于.net core webapi和mongodb的日志系统 - 去海边生活</title>
<link>http://www.cnblogs.com/betterlife/p/9676033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/betterlife/p/9676033.html</guid>
<description>&lt;p&gt;开发环境vs2017,数据写入到mongodb。思路就是1.提供接口写入日志，2.基于接口封装类库。3.引入类库使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要写它&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多开源项目像nlog、log4net、elk、exceptionless等都挺好的。就是除了引入所需类库，还要在项目中添加配置，不喜欢。elk在分布式海量数据收集和检索方面可能更能发挥它的优势，单纯记日志也可以，exceptionless就是基于elk的。就想着写一个简单易用的、可以发邮件报警的，直接引入类库就能用的一个记日志工具，所有的配置信息和入库都交给web api。这是当时问的问题，https://q.cnblogs.com/q/109489/。干脆就实现了先&lt;/p&gt;
&lt;p&gt;接下里的代码可能有很多可以优化的地方，如果有些地方觉得不妥或者可以用更好的方式实现或组织代码，请告诉说，我改。另外实现完的接口没有加访问限制，先默认内网使用，当然有热心网友给出实现的话就更好了，像ip限制或者签名等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、实现Web Api&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 新建.net core web api项目 【LogWebApi】&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为要发邮件和写入mongodb，先改配置文件appsettings.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
{
  &quot;ConnectionStrings&quot;: {
    &quot;ConnectionString&quot;: &quot;mongodb://yourmongoserver&quot;,
    &quot;Database&quot;: &quot;logdb&quot;,
    &quot;LogCollection&quot;: &quot;logdata&quot;
  },
  &quot;AllowedHosts&quot;: &quot;*&quot;,
  &quot;AppSettings&quot;: {
    &quot;SendMailInfo&quot;: {
      &quot;SMTPServerName&quot;: &quot;smtp.qiye.163.com&quot;,
      &quot;SendEmailAdress&quot;: &quot;发送人邮箱&quot;,
      &quot;SendEmailPwd&quot;: &quot;&quot;,
      &quot;SiteName&quot;: &quot;邮件主题&quot;,
      &quot;SendEmailPort&quot;: &quot;123&quot;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;实现依赖注入获取配置文件信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;创建目录结构如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919153536967-1336343169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;AppSettings类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppSettings
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SendMailInfo SendMailInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SendMailInfo
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SMTPServerName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailAdress { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailPwd { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SiteName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailPort { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DBSettings类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据库配置信息
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBSettings
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; mongodb connectionstring
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConnectionString { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; mongodb database
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Database { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志collection
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogCollection { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 接下来Here is how we modify Startup.cs to inject Settings in the Options accessor model:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {            
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.Configure&lt;/span&gt;&amp;lt;DBSettings&amp;gt;(Configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConnectionStrings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库连接信息&lt;/span&gt;
            services.Configure&amp;lt;AppSettings&amp;gt;(Configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppSettings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他配置信息            &lt;/span&gt;
&lt;span&gt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在项目中将通过IOptions 接口来获取配置信息，后面看代码吧&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt;
IOptions&lt;/span&gt;&amp;lt;DBSettings&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置文件信息获取算是准备完了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建日志信息Model&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在Model文件夹下创建类LogEventData，也就是存到mongodb的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventData
    {
        [BsonId]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ObjectId Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 时间
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [BsonDateTimeOptions(Representation = BsonType.DateTime, Kind =&lt;span&gt; DateTimeKind.Local)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime Date { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 类名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClassName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 方法名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MethodName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 完整信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FullInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 行号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LineNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 文件名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ip
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; IP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否发送邮件,不为空则发送邮件，多个接收人用英文逗号隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [JsonIgnore]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JsonConvert.SerializeObject(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;定义database Context&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;站点根目录新建文件夹Context和类，别忘了引用 MongoDB.Driver  nuget包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919161111480-1002467753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MongoContext
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IMongoDatabase _database = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _logCollection;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MongoContext(IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MongoClient(settings.Value.ConnectionString);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                _database &lt;/span&gt;=&lt;span&gt; client.GetDatabase(settings.Value.Database);
            _logCollection &lt;/span&gt;=&lt;span&gt; settings.Value.LogCollection;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IMongoCollection&amp;lt;LogEventData&amp;gt;&lt;span&gt; LogEventDatas
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _database.GetCollection&amp;lt;LogEventData&amp;gt;&lt;span&gt;(_logCollection);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;添加Repository&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;别纠结为什么叫这个名了，就是数据访问类，像是常用的DAL，创建目录如下，之后可以通过依赖注入来访问具体实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919162605014-1431221088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IRepository类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; IRepository&amp;lt;T&amp;gt; &lt;span&gt;where&lt;/span&gt; T:&lt;span&gt;class&lt;/span&gt;&lt;span&gt;
    {
        Task&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;span&gt; GetAll();
        Task&lt;/span&gt;&amp;lt;T&amp;gt; Get(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id);
        Task Add(T item);
        Task&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Remove(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id);
        Task&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Update(&lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; body);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;LogRepository类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LogRepository : IRepository&amp;lt;LogEventData&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; MongoContext _context = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; LogRepository(IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            _context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MongoContext(settings);
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Add(LogEventData item)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.LogEventDatas.InsertOneAsync(item);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt; GetList(QueryLogModel model)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = Builders&amp;lt;LogEventData&amp;gt;&lt;span&gt;.Filter;
            FilterDefinition&lt;/span&gt;&amp;lt;LogEventData&amp;gt; filter =&lt;span&gt; builder.Empty;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.Level))
            {
                filter &lt;/span&gt;= builder.Eq(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Level&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.Level);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.LogSource))
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Eq(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.LogSource);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.Message))
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Regex(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; BsonRegularExpression(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Regex(model.Message)));
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (DateTime.MinValue !=&lt;span&gt; model.StartTime)
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Gte(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.StartTime);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(DateTime.MinValue !=&lt;span&gt; model.EndTime)
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Lte(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.EndTime);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.LogEventDatas.Find(filter)
                 .SortByDescending(log &lt;/span&gt;=&amp;gt;&lt;span&gt; log.Date)
                 .Skip((model.PageIndex &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;) *&lt;span&gt; model.PageSize)
                 .Limit(model.PageSize).ToListAsync();
        }
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 未实现方法
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;LogEventData&amp;gt; Get(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt; GetAll()
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Remove(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Update(&lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; body)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        } 
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 为了通过DI model来访问LogRepository，修改Startup.cs ，ConfigureServices添加如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
services.AddTransient&amp;lt;IRepository&amp;lt;LogEventData&amp;gt;, LogRepository&amp;gt;();//数据访问
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 到这基本的数据写入和查询算是写完了，下面来实现Controller&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogController&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919164153001-1121233476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
[Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [ApiController]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; LogRepository _logRepository;
        IOptions&lt;/span&gt;&amp;lt;AppSettings&amp;gt;&lt;span&gt; _appsettings;        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; LogController(IRepository&amp;lt;LogEventData&amp;gt; logRepository,IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt; appsettings)
        {
            _logRepository &lt;/span&gt;=&lt;span&gt; (LogRepository)logRepository;
            _appsettings &lt;/span&gt;=&lt;span&gt; appsettings;
        }

        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Trace([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Debug([FromBody] LogEventData value)
        {
            Add(value);

        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Info([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Warn([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Error([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Fatal([FromBody] LogEventData value)
        {
            Add(value);
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(LogEventData data)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _logRepository.Add(data);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(data.Emails))
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; EmailHelpers(_appsettings).SendMailAsync(data.Emails, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;监测邮件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.ToString());
                }
            }
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getlist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ResponseModel&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; GetList([FromQuery] QueryLogModel model)
        {
            ResponseModel&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt; resp = &lt;span&gt;new&lt;/span&gt; ResponseModel&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt;();
            resp.Data &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _logRepository.GetList(model);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resp;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;控制器里整个逻辑很简单，除了向外提供不同日志级别的写入接口，也实现了日志查询接口给日志查看站点用，基本上够用了。到这编译的话会报错，有一些类还没加上，稍后加上。在Add方法内部，用到了new EmailHelpers。讲道理按.net core 对依赖注入的使用 ，这个 new是不应该出现在这的，就先这么着吧，下面补类：&lt;/p&gt;
&lt;p&gt;先创建Model文件夹下的两个类，很简单就不解释了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919165246984-1420520706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;QueryLogModel类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryLogModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _pageindex = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _pagesize = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; PageIndex
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _pageindex; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _pageindex =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; PageSize
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _pagesize; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _pagesize =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime StartTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime EndTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;ResponseModel类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ResponseModel&amp;lt;T&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; HttpStatusCode _resultCode =&lt;span&gt; HttpStatusCode.OK;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;        
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; T _data = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpStatusCode ResultCode
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._resultCode; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._resultCode =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 结果说明
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Message
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._message; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._message =&lt;span&gt; value; }
        }        
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回的数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; T Data
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._data; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._data =&lt;span&gt; value; }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 创建EmailHelpers类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919165724474-827162712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EmailHelpers
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SendMailInfo _mailinfo;
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; EmailHelpers(IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt; appsettings)
        {
            _mailinfo &lt;/span&gt;=&lt;span&gt; appsettings.Value.SendMailInfo;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 异步发送邮件
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;email地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;subject&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件标题&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendMailAsync(&lt;span&gt;string&lt;/span&gt; emails, &lt;span&gt;string&lt;/span&gt; subject, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; content)
        {
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                SendEmail(emails, subject, content);
            });
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 邮件发送方法
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;email地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;subject&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件标题&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendEmail(&lt;span&gt;string&lt;/span&gt; emails, &lt;span&gt;string&lt;/span&gt; subject, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; content)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] emailArray = emails.Split(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] { &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, StringSplitOptions.RemoveEmptyEntries);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fromSMTP = _mailinfo.SMTPServerName;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邮件服务器&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmail = _mailinfo.SendEmailAdress;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方邮件地址&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmailPwd = _mailinfo.SendEmailPwd;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方邮件地址密码&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmailName = _mailinfo.SiteName;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方称呼&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个MailMessage对象&lt;/span&gt;
                MailMessage aMessage = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailMessage();
                aMessage.From &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailAddress(fromEmail, fromEmailName);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; emailArray)
                {
                    aMessage.To.Add(item);
                }
                aMessage.Subject &lt;/span&gt;=&lt;span&gt; subject;
                aMessage.Body &lt;/span&gt;=&lt;span&gt; content;
                System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
                aMessage.BodyEncoding &lt;/span&gt;= Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                aMessage.IsBodyHtml &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                aMessage.Priority &lt;/span&gt;=&lt;span&gt; MailPriority.High;                
                aMessage.ReplyToList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailAddress(fromEmail, fromEmailName));
                SmtpClient smtp &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmtpClient();

                smtp.Host &lt;/span&gt;=&lt;span&gt; fromSMTP;
                smtp.Timeout &lt;/span&gt;= &lt;span&gt;20000&lt;/span&gt;&lt;span&gt;;
                smtp.UseDefaultCredentials &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                smtp.EnableSsl &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                smtp.DeliveryMethod &lt;/span&gt;=&lt;span&gt; SmtpDeliveryMethod.Network;
                smtp.Credentials &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; NetworkCredential(fromEmail, fromEmailPwd); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发邮件的EMIAL和密码&lt;/span&gt;
                smtp.Port = &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.Parse(_mailinfo.SendEmailPort);                
                smtp.Send(aMessage);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;到这接口基本上就可以用了。&lt;/p&gt;
&lt;p&gt;但是再加三个东西&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 添加全局异常捕获服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919171820883-1418685616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ExceptionMiddlewareExtensions类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 全局异常处理中间件
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionMiddlewareExtensions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ConfigureExceptionHandler(&lt;span&gt;this&lt;/span&gt; IApplicationBuilder app, IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            LogRepository _repository &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogRepository(settings);
            app.UseExceptionHandler(appError &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                appError.Run(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt; context =&amp;gt;&lt;span&gt;
                {
                    context.Response.StatusCode &lt;/span&gt;= (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)HttpStatusCode.InternalServerError;
                    context.Response.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contextFeature = context.Features.Get&amp;lt;IExceptionHandlerFeature&amp;gt;&lt;span&gt;();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (contextFeature != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; _repository.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventData
                        {
                            Message&lt;/span&gt;=&lt;span&gt; contextFeature.Error.ToString(),
                            Date&lt;/span&gt;=&lt;span&gt;DateTime.Now,
                            Level&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                            LogSource&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogWebApi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        }); 
                        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; context.Response.WriteAsync(context.Response.StatusCode + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Internal Server Error.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }
                });
            });
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;修改Startup.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env,IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {            
            app.ConfigureExceptionHandler(settings);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;添加&lt;a href=&quot;https://msgpack.org/&quot; target=&quot;_blank&quot;&gt;MessagePack&lt;/a&gt;扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;messagepack可以让我们在post数据的时候序列化数据，“压缩”数据传输大小,这个会结合针对接口封装的类库配合使用。&lt;/p&gt;
&lt;p&gt;引用nuget: WebApiContrib.Core.Formatter.MessagePack&lt;/p&gt;
&lt;p&gt;在ConfigureServices添加代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;services.AddMvcCore().AddMessagePackFormatters();
services.AddMvc().AddMessagePackFormatters();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扩展了&lt;a class=&quot;message&quot; title=&quot;corrected typo and added =&amp;gt; &amp;quot;application/msgpack&amp;quot; media type&quot; href=&quot;https://github.com/WebApiContrib/WebAPIContrib.Core/commit/f0d31ef6a6f4e9a3176586a97fea72b14d5eb5f7&quot; data-pjax=&quot;true&quot;&gt;media type&lt;/a&gt;，用以支持&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;application/x-msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;application/msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;，在接下来封装的类库中会使用&quot;application/x-msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;，在web api来引入这个东西就是为了能解析从客户端传过来的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加Swagger支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-s&quot;&gt;引用nuget:Swashbuckle.AspNetCore&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-s&quot;&gt;修改ConfigureServices&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
services.AddSwaggerGen(c =&amp;gt;&lt;span&gt;
            {
                c.SwaggerDoc(&quot;v1&quot;, new Info { Title = &quot;My API&quot;, Version = &quot;v1&quot;&lt;span&gt; });
            });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改Configure&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable middleware to serve generated Swagger as a JSON endpoint.&lt;/span&gt;
&lt;span&gt;            app.UseSwagger();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; specifying the Swagger JSON endpoint.&lt;/span&gt;
            app.UseSwaggerUI(c =&amp;gt;&lt;span&gt;
            {
                c.SwaggerEndpoint(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/swagger/v1/swagger.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;My API V1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                c.RoutePrefix &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Empty;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在应用的根 (&lt;/span&gt;&lt;span&gt;http://localhost&lt;/span&gt;&lt;span&gt;:&amp;lt;port&amp;gt;/) 处提供 Swagger UI&lt;/span&gt;
            });
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;到这整个web api站点算是写完了，编译不出错就ok了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919175124625-1668291958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;&lt;p class=&quot;postTitle&quot;&gt;&lt;strong&gt;二、实现类库&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;类库整体目录结构如下&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919213903454-1280239758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;1.新建类库LogApiHandler&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;2.实现&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;postTitle&quot;&gt;创建日志信息类，和WebApi那个对应，LogEventData&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; post到日志接口的数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventData
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 时间
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; DateTime Date { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 类名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClassName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 方法名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MethodName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 完整信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FullInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 行号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LineNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 文件名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ip
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; IP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不为空则发送邮件，多个接收人用英文分号 ; 隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;创建日志级别类，就是其他开源项目常见的Level&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogLevel
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Trace = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Debug = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Info = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Warn = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Error = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Fatal = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _ordinal;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _name;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LogLevel&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The log level name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ordinal&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The log level ordinal number.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; LogLevel(&lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ordinal)
        {
            _name &lt;/span&gt;=&lt;span&gt; name;
            _ordinal &lt;/span&gt;=&lt;span&gt; ordinal;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the name of the log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name =&amp;gt;&lt;span&gt; _name;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the ordinal of the log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Ordinal =&amp;gt;&lt;span&gt; _ordinal;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 请求地址
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LogApi
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (_name)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Returns the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;T:NLog.LogLevel&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; that corresponds to the supplied &lt;/span&gt;&lt;span&gt;&amp;lt;see langword=&quot;string&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;levelName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The textual representation of the log level.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The enumeration value.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; LogLevel FromString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; levelName)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(levelName));
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Trace;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Debug;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Info;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Warn;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Error;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Fatal;
            }

            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unknown log level: {levelName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上面代码是NLog Level源码,修改了一下，因为这个项目并不复杂，也不需要读配置。类里面有个LogApi属性会根据级别返回相应的日志接口，生产环境得在部署完WebApi站点以后，将里面的接口信息替换掉然后编译发布再用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建日志追踪信息类，行号、类名、文件等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;LogEventData类中有几个属性如下图，接下来创建的类就是为了获取它们&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919211738917-643555445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在项目中创建文件夹Core,结构如下，创建顺序为MethodItem、StackFrameItem、LocationInfo，它们层层相扣，最终由LocationInfo提供所需信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919211949080-1307514662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MethodItem类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MethodItem
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item for an unknown method.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem()
        {
            m_name &lt;/span&gt;=&lt;span&gt; NA;
            m_parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from the name of the method.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; MethodItem(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
        {
            m_name &lt;/span&gt;=&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from the name of the method and its parameters.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; MethodItem(&lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] parameters)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(name)
        {
            m_parameters &lt;/span&gt;=&lt;span&gt; parameters;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from a method base by determining the method name and its parameters.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;methodBase&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem(System.Reflection.MethodBase methodBase)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(methodBase.Name, GetMethodParameterNames(methodBase))
        {
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] GetMethodParameterNames(System.Reflection.MethodBase methodBase)
        {
            ArrayList methodParameterNames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                System.Reflection.ParameterInfo[] methodBaseGetParameters &lt;/span&gt;=&lt;span&gt; methodBase.GetParameters();

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; methodBaseGetParametersCount = methodBaseGetParameters.GetUpperBound(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;= methodBaseGetParametersCount; i++&lt;span&gt;)
                {
                    methodParameterNames.Add(methodBaseGetParameters[i].ParameterType &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; methodBaseGetParameters[i].Name);
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Error(declaringType, &quot;An exception ocurred while retreiving method parameters.&quot;, ex);&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;[])methodParameterNames.ToArray(&lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
        }

        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Name
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_name; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Parameters
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_parameters; }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] m_parameters;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the StackFrameItem class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(MethodItem);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;StackFrameItem类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackFrameItem
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; returns a stack frame item from a stack frame. This 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;frame&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackFrameItem(StackFrame frame)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set default values&lt;/span&gt;
            m_lineNumber =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_method &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodItem();
            m_className &lt;/span&gt;=&lt;span&gt; NA;

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; get frame values&lt;/span&gt;
                m_lineNumber =&lt;span&gt; frame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);
                m_fileName &lt;/span&gt;=&lt;span&gt; frame.GetFileName();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; get method values&lt;/span&gt;
                MethodBase method =&lt;span&gt; frame.GetMethod();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                    m_method &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodItem(method);
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set full info&lt;/span&gt;
            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_method.Name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ClassName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_className; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FileName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fileName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LineNumber
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_lineNumber; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem Method
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_method; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; All available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FullInfo
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fullInfo; }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Public Instance Properties

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_lineNumber;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fileName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_className;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fullInfo;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MethodItem m_method;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the StackFrameItem class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StackFrameItem);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;LocationInfo类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LocationInfo
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;callerStackBoundaryDeclaringType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The declaring type of the method that is
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the stack boundary into the logging system for this call.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LocationInfo&quot; /&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; class based on the current thread.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LocationInfo(Type callerStackBoundaryDeclaringType)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize all fields&lt;/span&gt;
            m_className =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; NA;
            m_methodName &lt;/span&gt;=&lt;span&gt; NA;
            m_fullInfo &lt;/span&gt;=&lt;span&gt; NA;

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; StackTrace isn't fully implemented for NETSTANDARD1_3 &lt;/span&gt;&lt;span&gt;https://github.com/dotnet/corefx/issues/1797&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (callerStackBoundaryDeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    StackTrace st &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StackTrace(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; frameIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames not from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType ==&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType !=&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; take into account the frames we skip above&lt;/span&gt;
                        &lt;span&gt;int&lt;/span&gt; adjustedFrameCount = st.FrameCount -&lt;span&gt; frameIndex;
                        ArrayList stackFramesList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(adjustedFrameCount);
                        m_stackFrames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem[adjustedFrameCount];
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = frameIndex; i &amp;lt; st.FrameCount; i++&lt;span&gt;)
                        {
                            stackFramesList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem(st.GetFrame(i)));
                        }

                        stackFramesList.CopyTo(m_stackFrames, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; now frameIndex is the first 'user' caller frame&lt;/span&gt;
                        StackFrame locationFrame =&lt;span&gt; st.GetFrame(frameIndex);

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (locationFrame != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            System.Reflection.MethodBase method &lt;/span&gt;=&lt;span&gt; locationFrame.GetMethod();

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                            {
                                m_methodName &lt;/span&gt;=&lt;span&gt; method.Name;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                {
                                    m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                                }
                            }
                            m_fileName &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileName();
                            m_lineNumber &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Combine all location info&lt;/span&gt;
                            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (System.Security.SecurityException)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This security exception will occur if the caller does not have 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; some undefined set of SecurityPermission flags.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Debug(declaringType, &quot;Security exception while trying to get caller stack frame. Error Ignored. Location Information Not Available.&quot;);&lt;/span&gt;
&lt;span&gt;                }
            }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义获取位置信息，异步线程内获取期望值
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;callerStackBoundaryDeclaringType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;st&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LocationInfo(Type callerStackBoundaryDeclaringType,StackTrace st)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize all fields&lt;/span&gt;
            m_className =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; NA;
            m_methodName &lt;/span&gt;=&lt;span&gt; NA;
            m_fullInfo &lt;/span&gt;=&lt;span&gt; NA;

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; StackTrace isn't fully implemented for NETSTANDARD1_3 &lt;/span&gt;&lt;span&gt;https://github.com/dotnet/corefx/issues/1797&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (callerStackBoundaryDeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;StackTrace st = new StackTrace(true);&lt;/span&gt;
                    &lt;span&gt;int&lt;/span&gt; frameIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames not from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType ==&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType !=&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; take into account the frames we skip above&lt;/span&gt;
                        &lt;span&gt;int&lt;/span&gt; adjustedFrameCount = st.FrameCount -&lt;span&gt; frameIndex;
                        ArrayList stackFramesList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(adjustedFrameCount);
                        m_stackFrames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem[adjustedFrameCount];
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = frameIndex; i &amp;lt; st.FrameCount; i++&lt;span&gt;)
                        {
                            stackFramesList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem(st.GetFrame(i)));
                        }

                        stackFramesList.CopyTo(m_stackFrames, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; now frameIndex is the first 'user' caller frame&lt;/span&gt;
                        StackFrame locationFrame =&lt;span&gt; st.GetFrame(frameIndex);

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (locationFrame != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            System.Reflection.MethodBase method &lt;/span&gt;=&lt;span&gt; locationFrame.GetMethod();

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                            {
                                m_methodName &lt;/span&gt;=&lt;span&gt; method.Name;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                {
                                    m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                                }
                            }
                            m_fileName &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileName();
                            m_lineNumber &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Combine all location info&lt;/span&gt;
                            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (System.Security.SecurityException)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This security exception will occur if the caller does not have 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; some undefined set of SecurityPermission flags.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Debug(declaringType, &quot;Security exception while trying to get caller stack frame. Error Ignored. Location Information Not Available.&quot;);&lt;/span&gt;
&lt;span&gt;                }
            }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;className&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The fully qualified class name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;methodName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The method name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fileName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The file name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;lineNumber&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The line number of the method within the file.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LocationInfo&quot; /&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; class with the specified data.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; LocationInfo(&lt;span&gt;string&lt;/span&gt; className, &lt;span&gt;string&lt;/span&gt; methodName, &lt;span&gt;string&lt;/span&gt; fileName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; lineNumber)
        {
            m_className &lt;/span&gt;=&lt;span&gt; className;
            m_fileName &lt;/span&gt;=&lt;span&gt; fileName;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; lineNumber;
            m_methodName &lt;/span&gt;=&lt;span&gt; methodName;
            m_fullInfo &lt;/span&gt;= m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName +
                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ClassName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_className; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FileName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fileName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LineNumber
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_lineNumber; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; MethodName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_methodName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; All available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FullInfo
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fullInfo; }
        }

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3)
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the stack frames from the stack trace of the caller making the log request
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackFrameItem[] StackFrames
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_stackFrames; }
        }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt; Public Instance Properties

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_className;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fileName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_lineNumber;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_methodName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fullInfo;
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3)
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; StackFrameItem[] m_stackFrames;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt; Private Instance Fields

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the LocationInfo class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LocationInfo);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;为什么会有这么多英文注释呢，因为这是copy的log4net源码。。。但是LocationInfo中重载了构造函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919212635520-2008789140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我需要先获取调用日志方法的StackTrace，然后传入方法，主要因为写入日志用到异步，如果在异步线程内用LocationInfo(Type callerStackBoundaryDeclaringType)，会导致获取不到我们期望的那几个追踪信息，因为StackFrame是在它内部new的，这会导致获取的是异步线程的信息。所以我要在进入异步线程前将StackTrace获取到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919213136854-1890994238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以也就有了下面这个类（LogEventDataAsync），一个传入异步线程的数据对象，里面保存着一些基本的初始日志信息&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogEventDataAsync&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志数据，传入异步执行方法的数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 主要为提前获取CallerStackBoundaryDeclaringType和CallerStackTrace，避免Core（log4net源码）下追踪信息在异步线程内与期望不一致
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventDataAsync
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 调用日志方法实例类型
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Type CallerStackBoundaryDeclaringType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; StackTrace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; StackTrace CallerStackTrace { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不为空则发送邮件，多个接收人用英文逗号隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;到目前为止日志信息的准备工作就做完了，下面来赋值写入mongodb&lt;/p&gt;
&lt;p&gt;先来创建两个帮助类吧，一个用于异步，一个是比较常见的请求类，都很简单&lt;/p&gt;
&lt;p&gt;创建Common文件夹，在下面创建两个类&lt;/p&gt;
&lt;p&gt;AsyncHelpers（NLog源码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AsyncHelpers
    {
        &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetManagedThreadId()
        {
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; NETSTANDARD1_3
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Environment.CurrentManagedThreadId;
&lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Thread.CurrentThread.ManagedThreadId;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }

        &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; StartAsyncTask(Action&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt; action, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; state)
        {
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; NET4_0 || NET4_5 || NETSTANDARD&lt;span&gt;
            System.Threading.Tasks.Task.Factory.StartNew(action, state, CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default);
&lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;&lt;span&gt;
            ThreadPool.QueueUserWorkItem(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WaitCallback(action), state);
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;RequestHelpers&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50.5&quot;&gt;&lt;img id=&quot;code_img_closed_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RequestHelpers
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 组装普通文本请求参数。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Key-Value形式请求参数字典&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;URL编码后的请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String BuildQuery(IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            StringBuilder postData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; hasParam = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            IEnumerator&lt;/span&gt;&amp;lt;KeyValuePair&amp;lt;String, String&amp;gt;&amp;gt; dem =&lt;span&gt; parameters.GetEnumerator();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (dem.MoveNext())
            {
                String name &lt;/span&gt;=&lt;span&gt; dem.Current.Key;
                String value &lt;/span&gt;=&lt;span&gt; dem.Current.Value;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 忽略参数名或参数值为空的参数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!String.IsNullOrEmpty(name) &amp;amp;&amp;amp; !&lt;span&gt;String.IsNullOrEmpty(value))
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hasParam)
                    {
                        postData.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }

                    postData.Append(name);
                    postData.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    postData.Append(HttpUtility.UrlEncode(value));
                    hasParam &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; postData.ToString();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 对参数值执行UrlEncode
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPost(String url, IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(BuildQuery(parameters));
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该方法在执行post时不对请求数据进行任何编码（UrlEncode）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPost(String url, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; data)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(data);
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; post数据 T messagepack序列化格式 减少传输数据大小
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;model&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DoPost&amp;lt;T&amp;gt;&lt;span&gt;(String url, T model)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessagePack.Resolvers.CompositeResolver.RegisterAndSetAsDefault(
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        NativeDateTimeResolver.Instance,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        ContractlessStandardResolver.Instance);&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; messagePackMediaTypeFormatter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessagePackMediaTypeFormatter(ContractlessStandardResolver.Instance);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpRequestMessage(HttpMethod.Post, url);
            request.Content &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObjectContent&amp;lt;T&amp;gt;&lt;span&gt;(
                model,messagePackMediaTypeFormatter);            
            request.Content.Headers.ContentType.MediaType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-msgpack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client.Timeout = new TimeSpan(0,0,5);&lt;/span&gt;
&lt;span&gt;            client.SendAsync(request);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该方法在执行post时不对请求数据进行任何编码（UrlEncode）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPostJson(String url, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; data)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            req.Accept &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(data);
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP GET请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoGet(String url, IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parameters != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; parameters.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (url.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                {
                    url &lt;/span&gt;= url + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; BuildQuery(parameters);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    url &lt;/span&gt;= url + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; BuildQuery(parameters);
                }
            }

            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HttpWebRequest GetWebRequest(String url, String method)
        {
            HttpWebRequest req &lt;/span&gt;=&lt;span&gt; (HttpWebRequest)WebRequest.Create(url);
            req.Method &lt;/span&gt;=&lt;span&gt; method;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; req;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 把响应流转换为文本。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;rsp&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;响应流对象&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;encoding&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;编码方式&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;响应文本&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String GetResponseAsString(HttpWebResponse rsp, Encoding encoding)
        {
            Stream stream &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            StreamReader reader &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以字符流的方式读取HTTP响应&lt;/span&gt;
                stream =&lt;span&gt; rsp.GetResponseStream();
                reader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(stream, encoding);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reader.ReadToEnd();
            }
            &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释放资源&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (reader != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) reader.Close();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (stream != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) stream.Close();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rsp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) rsp.Close();
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetUrlData(&lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; logSize)
        {
            logSize &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; return_value = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                HttpWebRequest wq &lt;/span&gt;= WebRequest.Create(url) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; HttpWebRequest;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (wq == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; return_value;
                }
                wq.Credentials &lt;/span&gt;=&lt;span&gt; CredentialCache.DefaultCredentials;
                wq.CookieContainer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CookieContainer();
                wq.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.Method &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.UserAgent &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.Host &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(url).Host;
                wq.Timeout &lt;/span&gt;= &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    HttpWebResponse rep &lt;/span&gt;= wq.GetResponse() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; HttpWebResponse;
                    logSize &lt;/span&gt;=&lt;span&gt; rep.ContentLength;
                    Stream responseStream &lt;/span&gt;=&lt;span&gt; rep.GetResponseStream();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rep.ContentEncoding.ToLower().Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gzip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                    {
                        responseStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GZipStream(responseStream, CompressionMode.Decompress);
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (rep.ContentEncoding.ToLower().Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deflate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                    {
                        responseStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DeflateStream(responseStream, CompressionMode.Decompress);
                    }
                    StreamReader reader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(responseStream, Encoding.GetEncoding(encoding));
                    return_value &lt;/span&gt;=&lt;span&gt; reader.ReadToEnd();

                    responseStream.Close();
                    reader.Close();
                    rep.Close();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nolog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (WebException ex)
            {
                return_value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; return_value;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在RequestHelpers中真正用到的是public static void DoPost&amp;lt;T&amp;gt;(String url, T model)方法，里面用到了MessagePack以及扩展的MediaType &quot;application/x-msgpack&quot;,所以这里要引用两个nuget包&lt;/p&gt;
&lt;p&gt;MessagePack和Sketch7.MessagePack.MediaTypeFormatter&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogWriter&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;LogWriter为调用Post方法的类，里面主要提供了异步调用的方法以及创建完整的日志信息功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogWriter
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; LogWriter() { }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取LogWriter实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; LogWriter GetLogWriter()
        {            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogWriter();
        }        
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Writer(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; logEventDataAsync)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; led =&lt;span&gt; GetLoggingEventData((LogEventDataAsync)logEventDataAsync);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; level =&lt;span&gt; LogLevel.FromString(led.Level);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; logapi =&lt;span&gt; level.LogApi;
            RequestHelpers.DoPost&lt;/span&gt;&amp;lt;LogEventData&amp;gt;(logapi, led);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessagePack进行数据压缩，减小传输数据&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取日志数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logEventDataAsync&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; LogEventData GetLoggingEventData(LogEventDataAsync logEventDataAsync)
        {
            LocationInfo locationInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LocationInfo(logEventDataAsync.CallerStackBoundaryDeclaringType, logEventDataAsync.CallerStackTrace);
            LogEventData logData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventData
            {
                Message &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Message,
                Date &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                Level &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Level,
                LogSource &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(logEventDataAsync.LogSource) ?&lt;span&gt; locationInfo.ClassName : logEventDataAsync.LogSource,
                ClassName &lt;/span&gt;=&lt;span&gt; locationInfo.ClassName,
                MethodName &lt;/span&gt;=&lt;span&gt; locationInfo.MethodName,
                LineNumber &lt;/span&gt;=&lt;span&gt; locationInfo.LineNumber,
                FileName &lt;/span&gt;=&lt;span&gt; locationInfo.FileName,
                IP &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Emails &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Emails,
                FullInfo&lt;/span&gt;=&lt;span&gt;locationInfo.FullInfo
            };
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; logData;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;GetLoggingEventData方法中就包含了LocationInfo的实例化，之所以放这里是因为这里异步执行，而获取追踪信息需要各种反射比较耗时，不然也就没有LogEventDataAsync这个类了，获取IP的方法没实现。。。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建Logger类&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个类是真正暴露给开发者使用的类，就像开源项目log.debug这样的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;&lt;img id=&quot;code_img_closed_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Logger
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Logger);
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志写入实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; LogWriter _logWriter = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 默认为调用方法所在类
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _logSource = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Logger()
        {
            _logWriter &lt;/span&gt;=&lt;span&gt; LogWriter.GetLogWriter();
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; Logger(&lt;span&gt;string&lt;/span&gt; logSource):&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
        {
            _logSource &lt;/span&gt;=&lt;span&gt; logSource;
        }        
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Logger实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 默认日志来源为调用方法所在类：namespace.classname
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger GetLogger(&lt;span&gt;string&lt;/span&gt; logSource=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Logger(logSource);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Trace(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Trace, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Trace(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            
            WriterToTargets(ex.ToString(), LogLevel.Trace, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Debug, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Debug, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Info, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Info, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Warn, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Warn, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Error, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Error, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Fatal, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Fatal, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 写日志
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;level&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;级别&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; WriterToTargets(&lt;span&gt;string&lt;/span&gt; message, LogLevel level,&lt;span&gt;string&lt;/span&gt; emails=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                LogEventDataAsync leda &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventDataAsync
                {
                    LogSource &lt;/span&gt;=&lt;span&gt; _logSource,
                    Level &lt;/span&gt;=&lt;span&gt; level.Name,
                    CallerStackBoundaryDeclaringType &lt;/span&gt;= GetType(),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前实例&lt;/span&gt;
                    CallerStackTrace = &lt;span&gt;new&lt;/span&gt; StackTrace(&lt;span&gt;true&lt;/span&gt;),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前StackTrace&lt;/span&gt;
                    Message =&lt;span&gt; message,
                    Emails &lt;/span&gt;=&lt;span&gt; emails
                };

                AsyncHelpers.StartAsyncTask(_logWriter.Writer, leda);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行异步写日志&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
            {
            }            
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;代码非常简单，重载了最常用的自定义信息和exception信息，以及邮件联系人。日志来源主要为了分类日志，像不同的服务、站点等等，可以方便入库后查询。到这已经可以编译使用了，但是为了在.net core中可以依赖注入这个Logger，最后添加一个扩展方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建Extensions文件夹及LoggerServiceExtension类&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志服务注入扩展类
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoggerServiceExtension
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 注入日志服务
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;service&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源，默认日志来源为调用方法所在类：namespace.classname&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddLoggerService(&lt;span&gt;this&lt;/span&gt; IServiceCollection service, &lt;span&gt;string&lt;/span&gt; logSource=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; service.AddTransient(factory =&amp;gt;&lt;span&gt; Logger.GetLogger(logSource));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.使用（引入类库）&lt;/p&gt;
&lt;p&gt;一般项目使用可以这样，比如控制台&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; Logger logger = LogApiHandler.Logger.GetLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            logger.Debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            Console.ReadLine();
        }        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;.net core的话比如web项目可以这样用依赖注入&lt;/p&gt;
&lt;p&gt;在Startup中，ConfigureServices添加一行代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
services.AddLoggerService(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TestApi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在其他类中就可以这么用了，当然也可以用new的方式使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValuesController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Logger _logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValuesController(Logger logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ActionResult&amp;lt;IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; Get()
        {
            _logger.Error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试依赖注入logger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddd@ddd.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大体使用方式就是这样了。&lt;/p&gt;
&lt;p&gt; 最后得需要自己写一个页面来调用web api的api/log/getlist接口查询显示日志&lt;/p&gt;
&lt;p&gt;mongodb客户端用的Robo 3T，安装完记得修改Options--Display Dates in--Local Timezone,不然默认utc,存入时的时间少8小时。mongodb存入数据就是下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919225438906-468150384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:16:00 +0000</pubDate>
<dc:creator>去海边生活</dc:creator>
<og:description>开发环境vs2017,数据写入到mongodb。思路就是1.提供接口写入日志，2.基于接口封装类库。3.引入类库使用 为什么要写它 很多开源项目像nlog、log4net、elk、exceptionl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/betterlife/p/9676033.html</dc:identifier>
</item>
<item>
<title>.NetCore实践篇：分布式监控Zipkin持久化之殇 - 范存威</title>
<link>http://www.cnblogs.com/fancunwei/p/9677952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9677952.html</guid>
<description>&lt;p&gt;本系列已写了四篇文章，读本篇之前，可以先读前面几篇。&lt;br/&gt;思考大纲：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9625841.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.Net架构篇:思考如何设计一款实用的分布式监控系统？&lt;/a&gt;&lt;br/&gt;实践篇一：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9637247.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：分布式监控客户端ZipkinTracer从入门到放弃之路&lt;/a&gt;&lt;br/&gt;实践篇二：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9649192.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：分布式监控系统zipkin踩坑之路（二）&lt;/a&gt;&lt;br/&gt;实践篇三：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9664749.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：成功解决分布式监控ZipKin聚合依赖问题（三）&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;zipkin&lt;/h2&gt;
&lt;p&gt;Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据&lt;br/&gt;&lt;a href=&quot;https://zipkin.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin官网&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;zipkin4Net&lt;/h2&gt;
&lt;p&gt;zipkin4net是.NET客户端库。&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin4net&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin4net&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;zipkin-dependencies&lt;/h2&gt;
&lt;p&gt;这是一个Spark作业，它将从您的数据存储区收集跨度，分析服务之间的链接，并存储它们以供以后在&lt;a href=&quot;https://github.com/openzipkin/zipkin/tree/master/zipkin-ui&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Web UI中&lt;/a&gt;呈现。&lt;/p&gt;
&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;p&gt;如果内存不足时，java后跟上-Xmx1024m -Xms1024m参数，JAVA_OPTS的一些参数可参考Oracle官方说明&lt;a href=&quot;https://docs.oracle.com/cd/E22289_01/html/821-1274/configuring-the-default-jvm-and-java-arguments.html#scrolltoc&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;配置默认JVM和Java参数&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;
$ STORAGE_TYPE=cassandra3 java -jar zipkin-dependencies.jar &lt;span class=&quot;hljs-string&quot;&gt;`date -uv-1d +%F`&lt;/span&gt;

$ STORAGE_TYPE=cassandra3 java -jar zipkin-dependencies.jar &lt;span class=&quot;hljs-string&quot;&gt;`date -u -d '1 day ago' +%F`&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;MySQL 存储&lt;/h3&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_DB`&lt;/span&gt;: 使用的数据库，默认是 &lt;span class=&quot;hljs-string&quot;&gt;&quot;zipkin&quot;&lt;/span&gt;.
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_USER`&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_PASS`&lt;/span&gt;: MySQL授权, 默认是空.
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_HOST`&lt;/span&gt;: 默认主机（域名/ip）是localhost
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_TCP_PORT`&lt;/span&gt;: 默认端口是 &lt;span class=&quot;hljs-number&quot;&gt;3306&lt;/span&gt;
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_USE_SSL`&lt;/span&gt;: 验证 &lt;span class=&quot;hljs-string&quot;&gt;`javax.net.ssl.trustStore`&lt;/span&gt; 和 &lt;span class=&quot;hljs-string&quot;&gt;`javax.net.ssl.trustStorePassword`&lt;/span&gt;,默认不验证。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;$ STORAGE_TYPE=mysql MYSQL_USER=root java -jar zipkin-dependencies.jar
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;详情参考：&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin-dependencies&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin-dependencies&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;创建使用数据库&lt;/h2&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; create database mytestdb;
Query OK, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; row affected (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; sec)
mysql&amp;gt; show databases;
+--------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| Database |&lt;/span&gt;
+--------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| information_schema |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| mysql |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| mytestdb |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| performance_schema |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| sys |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| ttt |&lt;/span&gt;
+--------------------+
&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; rows &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; sec)
mysql&amp;gt; use mytestdb
Database changed
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;使用sql语句创建zipkin表&lt;/h2&gt;
&lt;pre class=&quot;hljs javascript&quot;&gt;
&lt;code class=&quot;javascript&quot;&gt;CREATETABLE IF NOT EXISTS zipkin_spans (
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt; BIGINT NOT NULL DEFAULT &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'If non zero, this means the trace uses 128 bit traceIds instead of 64bit'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt; BIGINT NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt; BIGINT NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`name`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`parent_id`&lt;/span&gt; BIGINT,
&lt;span class=&quot;hljs-string&quot;&gt;`debug`&lt;/span&gt; BIT(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),
&lt;span class=&quot;hljs-string&quot;&gt;`start_ts`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Span.timestamp():epoch micros used for endTs query and to implement TTL'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`duration`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Span.duration():micros used for minDuration and maxDuration query'&lt;/span&gt;
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_spans ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt;) COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'ignore insert on duplicate'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forjoining with zipkin_annotations'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTracesByIds'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`name`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces and getSpanNames'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`start_ts`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces ordering andrange'&lt;/span&gt;;
CREATETABLE IF NOT EXISTS zipkin_annotations (
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt; BIGINT NOT NULL DEFAULT &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'If non zero, this means the trace uses 128 bit traceIds instead of 64bit'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt; BIGINT NOT NULL COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'coincideswith zipkin_spans.trace_id'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt; BIGINT NOT NULL COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'coincideswith zipkin_spans.id'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.key or Annotation.value if type == -1'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_value`&lt;/span&gt; BLOB COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.value(), which must be smaller than 64KB'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_type`&lt;/span&gt; INT NOT NULL COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.type() or -1 if Annotation'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_timestamp`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Used toimplement TTL; Annotation.timestamp or zipkin_spans.timestamp'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_ipv4`&lt;/span&gt; INT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_ipv6`&lt;/span&gt; BINARY(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null, or no IPv6 address'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_port`&lt;/span&gt; SMALLINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_service_name`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'Null when Binary/Annotation.endpoint is null'&lt;/span&gt;
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_annotations ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`a_timestamp`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Ignore insert on duplicate'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;)COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for joining with zipkin_spans'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTraces/ByIds'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_service_name`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTraces and getServiceNames'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`a_type`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'fordependencies job'&lt;/span&gt;;
CREATETABLE IF NOT EXISTS zipkin_dependencies (
&lt;span class=&quot;hljs-string&quot;&gt;`day`&lt;/span&gt; DATE NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`parent`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`child`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`call_count`&lt;/span&gt; BIGINT
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_dependencies ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`day`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`parent`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`child`&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建成功后，查询结果。&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; show tables;
+---------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| Tables_in_mytestdb |&lt;/span&gt;
+---------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_annotations |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_dependencies |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_spans |&lt;/span&gt;
+---------------------+
&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; rows &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; sec)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;启动zipkin-dependencies&lt;/h2&gt;
&lt;p&gt;最开始我的密码是【四个字母一个感叹号一个数字】，再执行启动命令时，&lt;span&gt;密码那块给我报错自动换成【四个字母rm -f】&lt;/span&gt;，我修改成【四个字母一个#号一个数字】就能执行了&lt;/p&gt;
&lt;p&gt;执行成功后，依然提示&lt;span&gt;Access denied for user 'root'@'localhost' (using password: NO)&lt;/span&gt;,但我在linux的命令中直接用mysql -u root -p相同密码是可以登录成功的。所以问题出现在哪呢？&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;[root@izwz9fwifc2eniq3lbdzmgz cusD]
Exception &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException: java.sql.SQLInvalidAuthorizationSpecException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.hasTraceIdHigh(MySQLDependenciesJob.java:233)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.run(MySQLDependenciesJob.java:184)
at zipkin2.dependencies.ZipkinDependenciesJob.main(ZipkinDependenciesJob.java:65)
Caused by: java.sql.SQLInvalidAuthorizationSpecException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
at org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.get(ExceptionMapper.java:173)
at org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.getException(ExceptionMapper.java:110)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1115)
at org.mariadb.jdbc.internal.util.Utils.retrieveProxy(Utils.java:502)
at org.mariadb.jdbc.MariaDbConnection.newConnection(MariaDbConnection.java:154)
at org.mariadb.jdbc.Driver.connect(Driver.java:86)
at java.sql.DriverManager.getConnection(DriverManager.java:664)
at java.sql.DriverManager.getConnection(DriverManager.java:247)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.hasTraceIdHigh(MySQLDependenciesJob.java:229)
... 2 more
Caused by: java.sql.SQLException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
Current charset is UTF-8. If password has been &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; using other charset, consider using option &lt;span class=&quot;hljs-string&quot;&gt;'passwordCharacterEncoding'&lt;/span&gt;
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.authentication(AbstractConnectProtocol.java:862)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.handleConnectionPhases(AbstractConnectProtocol.java:785)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connect(AbstractConnectProtocol.java:456)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1111)
... 8 more
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;追溯源码&lt;/h2&gt;
&lt;p&gt;逼不得已，走上查看源码之路，Idea打开zipkin-dependencies/mysql源码，查看相关部分代码。&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;{
Map&amp;lt;String, String&amp;gt; sparkProperties = ImmutableMap.of(
&lt;span class=&quot;hljs-string&quot;&gt;&quot;spark.ui.enabled&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;
);
String db = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_DB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zipkin&quot;&lt;/span&gt;);
String host = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_HOST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port = Integer.parseInt(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_TCP_PORT&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3306&quot;&lt;/span&gt;));
String user = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_USER&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);
String password = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_PASS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; maxConnections = Integer.parseInt(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_MAX_CONNECTIONS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;));
&lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; useSsl = Boolean.parseBoolean(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_USE_SSL&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;));

String sparkMaster = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SPARK_MASTER&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;local[*]&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; day = midnightUTC(System.currentTimeMillis());

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MySQLDependenciesJob &lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MySQLDependenciesJob(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
}
}

MySQLDependenciesJob(Builder builder) {
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.db = builder.db;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.day = builder.day;
SimpleDateFormat df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);
df.setTimeZone(TimeZone.getTimeZone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTC&quot;&lt;/span&gt;));
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.dateStamp = df.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(builder.day));
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.url = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://&quot;&lt;/span&gt;)
.append(builder.host).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;).append(builder.port)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).append(builder.db)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?autoReconnect=true&quot;&lt;/span&gt;)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;useSSL=&quot;&lt;/span&gt;).append(builder.useSsl).toString();
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.user = builder.user;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.password = builder.password;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SparkConf(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
.setMaster(builder.sparkMaster)
.setAppName(getClass().getName());
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (builder.jars != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) conf.setJars(builder.jars);
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, String&amp;gt; entry : builder.sparkProperties.entrySet()) {
conf.set(entry.getKey(), entry.getValue());
}
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.logInitializer = builder.logInitializer;
}
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;saveToMySQL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;DependencyLink&amp;gt; links)&lt;/span&gt; &lt;/span&gt;{
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (Connection con = DriverManager.getConnection(url, user, password)) {
PreparedStatement replace = con.prepareStatement(
&lt;span class=&quot;hljs-string&quot;&gt;&quot;REPLACE INTO zipkin_dependencies (day, parent, child, call_count, error_count) VALUES (?,?,?,?,?)&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (DependencyLink link : links) {
replace.setDate(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; java.sql.Date(day));
replace.setString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, link.parent());
replace.setString(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, link.child());
replace.setLong(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, link.callCount());
replace.setLong(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, link.errorCount());
replace.executeUpdate();
}
} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {
&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not save links &quot;&lt;/span&gt; + links, e);
}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然并卵，看完之后，没看出明显问题。难道还是我自己的mysql配置问题？还是启动部分的参数问题？代码部分也是有些疑惑,password和root为什么没放进url里，难道是为了安全考虑么？&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.url = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://&quot;&lt;/span&gt;)
.append(builder.host).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;).append(builder.port)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).append(builder.db)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?autoReconnect=true&quot;&lt;/span&gt;)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;useSSL=&quot;&lt;/span&gt;).append(builder.useSsl).toString();
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.user = builder.user;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.password = builder.password;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文中还提到 Current charset is UTF-8. If password has been set using other charset, consider using option 'passwordCharacterEncoding'，编码格式是否有不同呢？&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/shootercheng/p/5836657.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;查看mysql数据库及表编码格式&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; show variables like &lt;span class=&quot;hljs-string&quot;&gt;'character_set_database'&lt;/span&gt;;
+------------------------+---------+
&lt;span class=&quot;hljs-params&quot;&gt;| Variable_name |&lt;/span&gt; Value &lt;span class=&quot;hljs-params&quot;&gt;|
+------------------------+---------+
|&lt;/span&gt; character_set_database &lt;span class=&quot;hljs-params&quot;&gt;| utf8mb4 |&lt;/span&gt;
+------------------------+---------+
&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; row &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; sec)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://jira.mariadb.org/browse/CONJ-480&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://jira.mariadb.org/browse/CONJ-480&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://samebug.io/exceptions/2980875/java.sql.SQLInvalidAuthorizationSpecException/could-not-connect-access-denied-for-user&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://samebug.io/exceptions/2980875/java.sql.SQLInvalidAuthorizationSpecException/could-not-connect-access-denied-for-user&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11002827/passing-request-parameters-as-utf-8-encoded-strings&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;将请求参数作为UTF-8编码的字符串传递[重复]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/liaokailin/article/details/52077620&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/lindan1984/article/details/79325124&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin集成到node，C#&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/jek123456/article/details/78077112&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;微服务之分布式跟踪系统（springboot+zipkin+mysql）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/java-zhao/p/5858138.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;第二十九章 springboot + zipkin + mysql&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41186788/article/details/80462916&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Linux下的Mysql用命令执行sql文件&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.bitnami.com/installer/apps/liferay/administration/change-reset-password/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;修改MySQL管理员密码&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin/tree/master/zipkin-server&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于启动zipkin-dependencies链接mysql报&lt;span&gt;Access denied for user 'root'@'localhost' (using password: NO)&lt;/span&gt;错误，本次持久化之路最终失败。但由于我直接使用【mysql -u 用户 -p】是能登录成功的，所以我猜测了以下原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;客户端自己的bug,和我服务器mysql版本不兼容？&lt;/li&gt;
&lt;li&gt;编码问题，编码两者不符？&lt;/li&gt;
&lt;li&gt;用户名和密码没有共享全局，只对一个数据库有效？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;别人的博文是面向教学成功编程，我的是面向失败编程，也别有一番趣味。留下疑问，待日后解决调。虽然失败了，但我又收集了一堆链接，增添了mysql一些故障解决的认识。&lt;/p&gt;

&lt;p&gt;今天换了一款个人很喜欢的皮肤，会根据h1,h2自动生成目录，之前的博文我也都检查了下，有很大失位的我都调整了过来，不标准的暂时不改了，我以后的博文都按照要求的格式写，排版美观度提升了很多，感谢作者&lt;a href=&quot;https://www.cnblogs.com/bndong/&quot; title=&quot;bndong&quot;&gt;bndong&lt;/a&gt;，如果有打算使用这个皮肤的，一定要开启&lt;strong&gt;控件显示公告。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:06:00 +0000</pubDate>
<dc:creator>范存威</dc:creator>
<og:description>前言 本系列已写了四篇文章，读本篇之前，可以先读前面几篇。 思考大纲：.Net架构篇:思考如何设计一款实用的分布式监控系统？ 实践篇一：.NetCore实践篇：分布式监控客户端ZipkinTracer</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9677952.html</dc:identifier>
</item>
<item>
<title>机器学习：集成学习（ensemble learning）（一）——原理概述 - 流影心</title>
<link>http://www.cnblogs.com/lyxML/p/9670627.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyxML/p/9670627.html</guid>
<description>&lt;h3 id=&quot;集成学习ensemble-learning&quot;&gt;集成学习（ensemble learning）&lt;/h3&gt;
&lt;p&gt;集成学习通过构建多个个体学习器，然后再用某种策略将他们结合起来，产生一个有较好效果的强学习器来完成任务。基本原理如下图所示。这里主要有三个关键点：个体学习器的同质异质、个体学习器的生成方式、结合策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919165340759-844441675.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;同质异质&lt;/strong&gt;。首先需要明确的是个体学习器至少不差于弱学习器。弱学习器常指泛化性能略优于随机猜测的学习器，例如二分类问题中精度略高于50%的分类器。对于训练数据若集成中的个体学习器为同一类型，例如都为BP神经网络或者都为决策树，则称同质集成。同样的道理，若个体学习器类型不同，例如既有决策树又有神经网络，则称异质集成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个体学习器的生成方式&lt;/strong&gt;。主要可以分为两种，个体学习器之间存在强依赖关系、必须串行生成的序列化方法，以及个体学习器件不存在强依赖关系、可同时生成的并行化方法。前者代表是Boosting，后者代表是Bagging和随机森林（Random Forest）。&lt;br/&gt;&lt;strong&gt;1.Boosting基本原理如图所示&lt;/strong&gt;。大多数提升方法都是改变训练数据的概率分布（训练数据的权值分布），针对不同训练数据分布获得不同个体学习器，最终组合。因此需要解决两个问题，一是每一轮怎样改变权值分布的，二是如何将个体学习器进行组合的。Adaboost做法是，对于前者提高被前一轮预测错误样本的的权重，降低预测正确样本的的权重，对于后者加大误差率小的个体学习器的权值，减小误差率小的个体学习率的权值。&lt;strong&gt;Boosting算法要求个体学习器能够对特定的数据分布进行学习，这可以通过“重赋权法”实施，即在训练过程每一轮中，根据样本分布对每个样本重新赋予权重。对于无法接受带权样本的个体学习器（算法），可以通过“重采样法”来处理，即在每一轮学习中，根据样本分布对训练集重新采样，再用重采样得到的样本集对个体学习器进行训练。一般情况下两者差别不大。需要注意的是每一轮训练中需要检查当前生成的学习器是否满足基本条件，一旦不满足，则被抛弃，并且学习停止，此时可能还远远没有达到最大学习轮数，导致最终学习器性能欠佳。若采用“重采样法”，则会“重启动”，以避免过早停止。&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919172903466-158489530.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;2.Bagging基本原理如图所示&lt;/strong&gt;。要想得到泛华性较强的集成，其中每个学习器应尽量独立，在现实中无法做到，但可以设法使之差异较大。一种做法就是对训练集采样产生多个子集，对各个子集训练学习器，从而得到差异较大的学习器。但是我们还希望个体学习器不能太差，如果子集都完全不同，，每个学习器只学习到一小部分数据，无法确保产生比较好的学习器。为解决这个问题，我们考虑使用相互重叠的采用子集（&lt;strong&gt;有放回采样&lt;/strong&gt;）。自主采样法：给定包含m个样本的数据集，先随机取出一个放入采样集，再放回初始训练集，使得下次采样仍然可能被选中，这样，经过m次随机采样，可以得到含m个样本的采样集，初始训练集中有样本在采样集里多次出现，有的则从未出现。关于比例很好求，求极限，63.2%出现在采样集中。预测输出时，对于分类任务使用简单投票法，回归任务使用简单平均法。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919180638156-1666982913.png&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成的组合策略&lt;/strong&gt;。
&lt;ul&gt;&lt;li&gt;平均法。对于回归问题一般使用平均法，分为算术平均与加权平均等。&lt;span class=&quot;math display&quot;&gt;\[\begin{array}{l} G(x) = \frac{1}{T}\sum\limits_{i = 1}^T {{G_i}} (x)\\ G(x) = \sum\limits_{i = 1}^T {{\alpha _i}{G_i}} (x),{\alpha _i} \ge 0\;\;\;\;\sum\limits_{i = 1}^T {{\alpha _i} = 1} \end{array}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;投票法。对于分类问题一般使用投票法。相对多数投票法，取学习器分类结果中数目最多的类为最终类别。绝对多数投票法，票数最多，且必须大于半数。加权投票法。&lt;/li&gt;
&lt;li&gt;学习法。即通过一个学习器来进行组合。Stacking为典型代表。实际上上面两种方法可以看做其中的特例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;偏差方差与泛化误差&quot;&gt;偏差、方差与泛化误差&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;“偏差-方差分解”是解释学习算法泛化性能的一种重要工具。我们知道，算法在不同训练集上学得的结果可能不同，即便这些训练集来自同一分布。&lt;/li&gt;
&lt;li&gt;对测试样本&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;，令&lt;span class=&quot;math inline&quot;&gt;\(y_D\)&lt;/span&gt;为其在数据集D上的标记，&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;为其真实标记（因为由于噪声存在，会出现两者不等情况），&lt;span class=&quot;math inline&quot;&gt;\(f(x;D)\)&lt;/span&gt;为在训练集D上学得得模型&lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt;在&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;上的预测输出。&lt;/li&gt;
&lt;li&gt;由上有学习算法的期望预测&lt;span class=&quot;math display&quot;&gt;\[\bar f(x) = {{\rm E}_D}[f(x;D)]\]&lt;/span&gt;使用样本数相同的训练集产生的方差为&lt;span class=&quot;math display&quot;&gt;\[{\mathop{\rm var}} ( \cdot ) = {{\rm E}_D}[{(f(x;D) - \bar f(x))^2}]\]&lt;/span&gt;噪声满足&lt;span class=&quot;math display&quot;&gt;\[{\varepsilon ^2} = {{\rm E}_D}[{(\bar f(x) - {y_D})^2}]\]&lt;/span&gt;期望输出与真实标记的差别称为偏差,满足&lt;span class=&quot;math display&quot;&gt;\[bia{s^2}( \cdot ) = {(\bar f(x) - y)^2}\]&lt;/span&gt;为便于讨论，假定噪声期望为0，通过简单多项式计算，可对算法的期望泛华误差进行分解,最后得到&lt;span class=&quot;math display&quot;&gt;\[{\rm E}(f;D) = bia{s^2} + {\mathop{\rm var}} + {\varepsilon ^2}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;回顾三者含义。&lt;strong&gt;偏差度量学习算法的期望预测与真实结果的偏离程度，即刻画了算法本身的拟合程度。方差度量了同样大小的训练集的变动导致的预测偏离期望预测的能力（单纯从训练集来说，好的算法应该是变动较小的），刻画了数据扰动造成的影响。噪声则表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题本身的难度。偏差-方差分解说明，泛化性能由学习算法的能力，数据的充分性以及任务本身的难度共同决定。给定任务，为取得较好的泛化性能，则需偏差较小，即能充分拟合数据，并使方差较小，即使得数据扰动产生的误差较小。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般来说，两者是有冲突的，称为“偏差-方差窘境”&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919203153468-1219575055.png&quot;/&gt;&lt;/li&gt;
&lt;li&gt;偏差-方差分解，这种简单优美形式由[Geman et al., 1992]给出，仅在基于均方误差的回归任务中推导出，确实可以反映各种学习任务中的误差决定因素。对于分类任务，由于0/1损失函数跳变性，理论上推导出偏差-方差分解很难。但是已经有多种其他方法对偏差方差估计。&lt;/li&gt;
&lt;li&gt;从偏差-方差分解角度看，Boosting主要关注降低偏差，Bagging主要关注降低方差。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于集成学习的错误率分析以及研究核心&quot;&gt;关于集成学习的错误率分析以及研究核心&lt;/h3&gt;
&lt;p&gt;为便于分析，我们考虑二分类问题,正例为+1，负例为-1，真实函数为&lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt;，假定基分类器错误率为&lt;span class=&quot;math inline&quot;&gt;\(e\)&lt;/span&gt;，即对每个分类器&lt;span class=&quot;math inline&quot;&gt;\(G_i\)&lt;/span&gt;，有&lt;span class=&quot;math display&quot;&gt;\[P({G_i}(x) \ne f(x)) = e\]&lt;/span&gt;假设集成通过相对多数投票法结合T个分类器，因为二分类，那么超过半数学习器分类正确，集成分类器就正确，则集成分类器&lt;span class=&quot;math display&quot;&gt;\[G(x) = sign(\sum\limits_{i = 1}^T {{G_i}} (x))\]&lt;/span&gt;假设个体学习器错误率相互独立，则由Hoeffding不等式，&lt;span class=&quot;math display&quot;&gt;\[P(G(x) \ne f(x)) = \sum\limits_{i = 1}^{T/2} {\left( {\begin{array}{*{20}{c}} T\\ k \end{array}} \right)} {(1 - e)^k}{e^{T - k}} \le \exp ( - \frac{1}{2}T{(1 - 2e)^2})\]&lt;/span&gt;上式表明，随着个体学习器数目增大，集成错误率将指数级下降，最终趋于零。&lt;br/&gt;另外，我们注意到，上面的关键假设：学习器相互独立。实际上他们为解决同一问题训练出来的，显然不可能相互独立。事实上，个体学习器的准确性与多样性本身就存在冲突，如何产生并组合“好而不同”的学习器，恰恰是集成学习的研究核心。&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 13:28:00 +0000</pubDate>
<dc:creator>流影心</dc:creator>
<og:description>集成学习（ensemble learning） 集成学习通过构建多个个体学习器，然后再用某种策略将他们结合起来，产生一个有较好效果的强学习器来完成任务。基本原理如下图所示。这里主要有三个关键点：个体学</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyxML/p/9670627.html</dc:identifier>
</item>
<item>
<title>搭建SpringBoot+dubbo+zookeeper+maven框架（四） - 王者之巅</title>
<link>http://www.cnblogs.com/gaopengfirst/p/9677604.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaopengfirst/p/9677604.html</guid>
<description>&lt;p&gt; 今天我们完成框架的thymeleaf模板显示页面功能，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能，东西可能比较多，这个是我这两天在网上结合各种资源整合出来的，基本功能都已经实现，项目代码我会附在文章的最后面。&lt;/p&gt;&lt;p&gt;简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：&lt;/p&gt;&lt;p&gt;a、Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。&lt;/p&gt;&lt;p&gt;b、Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。&lt;/p&gt;&lt;p&gt;c、Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。&lt;/p&gt;&lt;div readability=&quot;168&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;3.0&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;thymeleaf-spring4&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;3.0&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在customer模块的resources下创建static、templates文件夹，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919181009516-958274237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在static下放置一些页面样式的js和css，在templates文件夹下放置html页面，此时在resources下的application.properties配置文件中配置thymeleaf，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#thymelea模板配置
spring.thymeleaf.prefix&lt;/span&gt;=classpath:/templates/&lt;span&gt;
spring.thymeleaf.suffix&lt;/span&gt;=&lt;span&gt;.html
spring.thymeleaf.mode&lt;/span&gt;=&lt;span&gt;HTML5
spring.thymeleaf.encoding&lt;/span&gt;=UTF-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
#热部署文件，页面不产生缓存，及时更新
spring.thymeleaf.cache&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
spring.resources.chain.strategy.content.enabled&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
spring.resources.chain.strategy.content.paths&lt;/span&gt;=&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时thymeleaf模板就配置完成了。&lt;/p&gt;

&lt;p&gt;2.页面的用户登陆，AES加密解密：&lt;/p&gt;
&lt;p&gt;关于AES的加密解密，我的实现思路是：首先用户在浏览器中输入网址跳转到登录页面，此时在页面中已经保存了从后台传过来的key，该key值是后台随机生成的，后台session中保存key值，前台页面的隐藏框中也要保存key值，用于前端页面的密码加密以及后端的密码解密，页面刷新或用户名、密码输入错误时，都会重新生成新的key值来替换原有保存的key。&lt;/p&gt;
&lt;p&gt;首先在pom.xml中添加依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;28&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/commons-codec/commons-codec --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.10&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用AES加密解密&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;a.前端加密用到的js有：aes.js和mode-ecb-min.js，就为了下载这两个js花了我30个积分呢，[/哭]，可以在static文件夹下创建一个aes文件夹，用于放置这两个js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在templates下创建login.html，代码如下：&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--&amp;lt;html xmlns:th=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;--&amp;gt;
&amp;lt;html xmlns=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.w3.org/1999/xhtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; xmlns:th=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      xmlns:sec&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;welcome&amp;lt;/title&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../jquery/jquery-1.11.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../jquery/jquery.easyui.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../aes/aes.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../aes/mode-ecb-min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; th:value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${model.loginToken}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signIn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               onkeydown&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13) $('#password').focus();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-envelope form-control-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               onkeydown&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13) login();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;
        &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-lock form-control-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;&lt;span&gt;
    [[${session.SESSION_LOGIN_FAILURE_COUNT}]]
    &lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; th:&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${session.SESSION_LOGIN_FAILURE_COUNT}&amp;lt;=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onkeydown=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13)  login();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width:120px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateCheckCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; align=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;middle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击刷新验证码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getCode()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cursor: pointer;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCodeSpan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: red;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-xs-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox icheck&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label&amp;gt;
                &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remember&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &amp;gt;&lt;span&gt;记住密码
            &lt;/span&gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- /.col --&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-xs-4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-primary btn-block btn-flat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- /.col --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
    function login(){
        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
            onSubmit: function(param){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm input[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(username)==&lt;span&gt;''&lt;/span&gt;&lt;span&gt;){
                    alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;账号不能为空！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm input[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; p = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(p)==&lt;span&gt;''&lt;/span&gt;&lt;span&gt;){
                    alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码不能为空！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; checkCodeInput = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCodeInput.length&amp;gt;&lt;span&gt;0&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断元素是否存在&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; checkCode =&lt;span&gt; checkCodeInput.val();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(checkCode)==&lt;span&gt;''&lt;/span&gt; || checkCode.length!=&lt;span&gt;4&lt;/span&gt;&lt;span&gt; ){
                        alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入4位验证码！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                        checkCodeInput.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;();
                        checkCodeInput.focus();
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    }
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; key = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#KEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; alert(&quot;key的值是：  &quot;+key);&lt;/span&gt;
                key =&lt;span&gt; CryptoJS.enc.Utf8.parse(key);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; alert(&quot;加密后key的值是：  &quot;+key);&lt;/span&gt;
                p =&lt;span&gt; CryptoJS.enc.Utf8.parse($.trim(p));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encrypted =&lt;span&gt; CryptoJS.AES.encrypt(p, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
                param.password &lt;/span&gt;=&lt;span&gt; encrypted.toString();
            },
            success:function(data){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = eval(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + data + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.success){
                    window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data.msg==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可能已经就登录了，无需再次登录&lt;/span&gt;
                        alert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录超时或已经登录！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;${request.contextPath}/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;==data.msg){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要验证码了&lt;/span&gt;
                        alert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;codeError&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;==data.msg){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码错误&lt;/span&gt;
&lt;span&gt;                        getCode();
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).&lt;span&gt;select&lt;/span&gt;&lt;span&gt;();
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录失败，更新login_token&lt;/span&gt;
                        $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#KEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val(data.data);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)){
                            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
                        }
                        alert(data.msg);
                    }
                }
            },

        }) ;
    }

    function getCode(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; img = document.getElementById(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateCheckCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        img.src &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode?nocache=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; $(&quot;#CreateCheckCode&quot;).attr('src',&quot;getValidateCode?nocache=&quot; + new Date().getTime());&lt;/span&gt;
&lt;span&gt;    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个坑，就是在html页面中引入js的时候路径的问题，可以看到我在页面中是这样写的：&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../jquery/jquery-1.11.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;，但是你仔细看应该是&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../static/jquery/jquery-1.11.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;才对，为什么会少一个static呢，这是因为thymeleaf模板本身引入js时的路径就是默认在static下的，要是加上static反而页面会报js404错误，不信大家可以试试看。&lt;/p&gt;
&lt;pre&gt;
var key = $('#KEY'&lt;span&gt;).val();
 // alert(&quot;key的值是：  &quot;+key);
key =&lt;span&gt; CryptoJS.enc.Utf8.parse(key);
// alert(&quot;加密后key的值是：  &quot;+key);
p =&lt;span&gt; CryptoJS.enc.Utf8.parse($.trim(p));
var encrypted =&lt;span&gt; CryptoJS.AES.encrypt(p, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
param.password =&lt;span&gt; encrypted.toString();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码就是通过AES将用户输入的明文密码和后台传过来的key加密成密文，放到input框中提交到后台。&lt;/p&gt;
&lt;p&gt;b.后台生成随机的key值，并将前台传过来的密文解密成明文密码，&lt;/p&gt;
&lt;p&gt;这里要在common模块中写几个工具类：EncryptUtil用于密码的加密解密，Helper用于记录一些常量，RandomUtil用于随机生成key值，Result用于向前台返回一个结果对象，样式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919202334580-866900058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;工具类代码如下：&lt;/p&gt;
&lt;p&gt;EncryptUtil：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

import sun.misc.BASE64Decoder;

import java.security.SecureRandom;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:30
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EncryptUtil {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcdefgabcdefg12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String ALGORITHMSTR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES/ECB/PKCS5Padding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String base64Encode(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] bytes){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Base64.encodeBase64String(bytes);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] base64Decode(String base64Code) throws Exception{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BASE64Decoder().decodeBuffer(base64Code);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] aesEncryptToBytes(String content, String encryptKey) throws Exception {
        KeyGenerator kgen &lt;/span&gt;= KeyGenerator.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        kgen.init(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;);
        Cipher cipher &lt;/span&gt;=&lt;span&gt; Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.ENCRYPT_MODE, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SecretKeySpec(encryptKey.getBytes(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; cipher.doFinal(content.getBytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String aesEncrypt(String content, String encryptKey) throws Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; base64Encode(aesEncryptToBytes(content, encryptKey));
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String aesDecryptByBytes(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] encryptBytes, String decryptKey) throws Exception {
        KeyGenerator kgen &lt;/span&gt;= KeyGenerator.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        SecureRandom secureRandom &lt;/span&gt;= SecureRandom.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SHA1PRNG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
        secureRandom.setSeed(decryptKey.getBytes());
        kgen.init(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;,secureRandom);

        Cipher cipher &lt;/span&gt;=&lt;span&gt; Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.DECRYPT_MODE, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SecretKeySpec(decryptKey.getBytes(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] decryptBytes =&lt;span&gt; cipher.doFinal(encryptBytes);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(decryptBytes);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String aesDecrypt(String encryptStr, String decryptKey) throws Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; aesDecryptByBytes(base64Decode(encryptStr), decryptKey);
    }


    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 测试
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) throws Exception {

        String content &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Test String么么哒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0gqIDaFNAAmwvv3tKsFOFf9P9m/6MWlmtB8SspgxqpWKYnELb/lXkyXm7P4sMf3e&lt;/span&gt;
        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加密前：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; content);

        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加密密钥和解密密钥：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; KEY);

        String encrypt &lt;/span&gt;=&lt;span&gt; aesEncrypt(content, KEY);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(encrypt.length()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:加密后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; encrypt);

        String decrypt &lt;/span&gt;=&lt;span&gt; aesDecrypt(encrypt, KEY);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;解密后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; decrypt);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Helper:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:08
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Helper {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_CHECKCODE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_CHECKCODE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_LOGIN_TOKEN = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_LOGIN_TOKEN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_USER = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_USER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_LOGIN_FAILURE_COUNT = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_LOGIN_FAILURE_COUNT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String logTypeSecurity = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logTypeSecurity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final Integer COUNT = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RandomUtil:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.util.Random;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:22
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomUtil {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String ALLCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String LETTERCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcdefghijkllmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String NUMBERCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机字符串(只包含大小写字母、数字)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        Random random &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(ALLCHAR.charAt(random.nextInt(ALLCHAR.length())));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateMixString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        Random random &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(LETTERCHAR.charAt(random.nextInt(LETTERCHAR.length())));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯大写字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateLowerString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; generateMixString(length).toLowerCase();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯小写字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateUpperString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; generateMixString(length).toUpperCase();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 生成一个定长的纯0字符串
     *
     * @param length
     *            字符串长度
     * @return 纯0字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateZeroString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 根据数字生成一个定长的字符串，长度不够前面补0
     *
     * @param num
     *            数字
     * @param fixdlenth
     *            字符串长度
     * @return 定长的字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String toFixdLengthString(&lt;span&gt;long&lt;/span&gt; num, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fixdlenth) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String strNum &lt;/span&gt;=&lt;span&gt; String.valueOf(num);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fixdlenth - strNum.length() &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            sb.append(generateZeroString(fixdlenth &lt;/span&gt;-&lt;span&gt; strNum.length()));
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;将数字&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + num + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;转化为长度为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; fixdlenth
                    &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的字符串发生异常！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        sb.append(strNum);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 每次生成的len位数都不相同
     *
     * @param param
     * @return 定长的数字
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getNotSimple(&lt;span&gt;int&lt;/span&gt;[] param, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len) {
        Random rand &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = param.length; i &amp;gt; &lt;span&gt;1&lt;/span&gt;; i--&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index =&lt;span&gt; rand.nextInt(i);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; tmp =&lt;span&gt; param[index];
            param[index] &lt;/span&gt;= param[i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
            param[i &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; tmp;
        }
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; len; i++&lt;span&gt;) {
            result &lt;/span&gt;= result * &lt;span&gt;10&lt;/span&gt; +&lt;span&gt; param[i];
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.util.Date;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 18:26
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Result {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Boolean success;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String msg;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String key;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Boolean getSuccess() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; success;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSuccess(Boolean success) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; success;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getMsg() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMsg(String msg) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; msg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getKey() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; key;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKey(String key) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result(Boolean b, String s){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; b;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; s;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result(Boolean b, String s, String k){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; b;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; s;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; k;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;在customer模块中的controller中拦截/login和/signIn路径的代码如下：&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    @GetMapping(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView login(HttpServletResponse response, HttpServletRequest request, Model model){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成login_token&lt;/span&gt;
&lt;span&gt;
        HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
        String key &lt;/span&gt;= RandomUtil.generateString(&lt;span&gt;16&lt;/span&gt;&lt;span&gt;);
        session.setAttribute(Helper.SESSION_LOGIN_TOKEN, key);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录令牌，用于密码加密的key，16位长度&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT, Helper.COUNT);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录剩余失败次数&lt;/span&gt;
&lt;span&gt;        }
        model.addAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,key);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传到前台的key值为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt; key);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;页面跳转到login.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return &quot;login&quot;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if(session.getAttribute(Helper.SESSION_USER) == null){&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ModelAndView(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,model);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        else
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            return &quot;redirect:/&quot;;&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
    @PostMapping(value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signIn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String signIn(String username,String password,boolean remember,String checkCode,HttpServletRequest request, HttpServletResponse response){
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(username+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+password+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+remember+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;checkCode);
        HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
        Object token &lt;/span&gt;= session.getAttribute(Helper.SESSION_LOGIN_TOKEN);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原始令牌&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt;(token==&lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录成功后token失效，则页面失效，客户端需要重定向到主界面&lt;/span&gt;
        Object countObj =&lt;span&gt; session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = countObj==&lt;span&gt;null&lt;/span&gt;?&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:Integer.parseInt(countObj.toString());
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;剩余次数：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;count);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码逻辑&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(count&amp;lt;=&lt;span&gt;0&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要验证码&lt;/span&gt;
            Object oldCode =&lt;span&gt; session.getAttribute(Helper.SESSION_CHECKCODE);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCode==&lt;span&gt;null&lt;/span&gt;||oldCode==&lt;span&gt;null&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该登录界面没有验证码字段，但是已经消耗掉了剩余次数，说明该页面是过期页面，需要重新登录&lt;/span&gt;
                System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chaoshila&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到主界面&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCode.trim().isEmpty()) &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入验证码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(oldCode.toString().equalsIgnoreCase(checkCode)){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证通过，可信客户端，给0次剩余次数&lt;/span&gt;
                count=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT,count);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;codeError&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码不正确，客户端需要刷新验证码&lt;/span&gt;
&lt;span&gt;            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            password &lt;/span&gt;= EncryptUtil.aesDecrypt(password,token.toString());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密后&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Decrypt:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;password);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到主界面&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录校验&lt;/span&gt;
        String loginKey = RandomUtil.generateString(&lt;span&gt;16&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新生成登录令牌,任何登录失败的操作都需要更新登录令牌&lt;/span&gt;
        User user =  &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            session.setAttribute(Helper.SESSION_LOGIN_TOKEN,loginKey);
            session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT,&lt;/span&gt;--count);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;剩余次数-1&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;剩余次数：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(count&amp;lt;=0) return JSON.toJSONString(new Result(false,&quot;checkCode&quot;,loginKey));&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到登录界面将验证码显示出来&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这里直接要返回了！！！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Result result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,loginKey);
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result对象的值是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; result.getKey());
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(JSON.toJSONString(result));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,loginKey));
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            if(user.getUserid()!=ConfigInfo.admin_id &amp;amp;&amp;amp; !user.getuStatus().equals(ConfigInfo.user_status_normal)) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                session.setAttribute(Helper.SESSION_LOGIN_TOKEN,key);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                return JSON.toJSONString(new Result(false,&quot;登录失败，该账号已被禁止使用！&quot;,key));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;
&lt;span&gt;            session.removeAttribute(Helper.SESSION_LOGIN_TOKEN);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            loginUser = user;&lt;/span&gt;
&lt;span&gt;            session.setAttribute(Helper.SESSION_USER,user);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            sysEventService.insertEventLog(Helper.logTypeSecurity,username+&quot; 登录系统&quot;);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre readability=&quot;6&quot;&gt;
上面生成key以及解密的部分都有注解，应该能看懂的。&lt;p&gt;c.&lt;span&gt;输错3次显示验证码&lt;br/&gt;&lt;/span&gt;这里要实现验证码功能，首先要在common中写一个工具类，用于生成验证码，代码如下：
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Random;

import javax.imageio.ImageIO;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 16:57
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValidateCode {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图片的宽度。&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; width = &lt;span&gt;160&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图片的高度。&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; height = &lt;span&gt;28&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码字符个数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; codeCount = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码干扰线数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; lineCount = &lt;span&gt;150&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String code = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码图片Buffer&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; BufferedImage buffImg = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] codeSequence = { &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; };

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValidateCode() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     *
     * @param width
     *            图片宽
     * @param height
     *            图片高
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ValidateCode(&lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; height) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.width =&lt;span&gt; width;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.height =&lt;span&gt; height;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     *
     * @param width
     *            图片宽
     * @param height
     *            图片高
     * @param codeCount
     *            字符个数
     * @param lineCount
     *            干扰线条数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ValidateCode(&lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt; codeCount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; lineCount) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.width =&lt;span&gt; width;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.height =&lt;span&gt; height;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.codeCount =&lt;span&gt; codeCount;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lineCount =&lt;span&gt; lineCount;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createCode() {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;, fontHeight = &lt;span&gt;0&lt;/span&gt;, codeY = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; red = &lt;span&gt;0&lt;/span&gt;, green = &lt;span&gt;0&lt;/span&gt;, blue = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

        x &lt;/span&gt;= width / (codeCount + &lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每个字符的宽度&lt;/span&gt;
        fontHeight = height - &lt;span&gt;2&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字体的高度&lt;/span&gt;
        codeY = height - &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图像buffer&lt;/span&gt;
        buffImg = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g &lt;/span&gt;=&lt;span&gt; buffImg.createGraphics();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成随机数&lt;/span&gt;
        Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将图像填充为白色&lt;/span&gt;
&lt;span&gt;        g.setColor(Color.WHITE);
        g.fillRect(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, width, height);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建字体&lt;/span&gt;
        Font font = &lt;span&gt;new&lt;/span&gt; Font(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fixedsys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Font.BOLD, fontHeight);
        g.setFont(font);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;干扰线&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; lineCount; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xs =&lt;span&gt; random.nextInt(width);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ys =&lt;span&gt; random.nextInt(height);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xe = xs + random.nextInt(width / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ye = ys + random.nextInt(height / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
            red &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            green &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            blue &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            g.setColor(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Color(red, green, blue));
            g.drawLine(xs, ys, xe, ye);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; randomCode记录随机产生的验证码&lt;/span&gt;
        StringBuffer randomCode = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 随机产生codeCount个字符的验证码。&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; codeCount; i++&lt;span&gt;) {
            String strRand &lt;/span&gt;=&lt;span&gt; String.valueOf(codeSequence[random.nextInt(codeSequence.length)]);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 产生随机的颜色值，让输出的每个字符的颜色值都将不同。&lt;/span&gt;
            red = random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            green &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            blue &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            g.setColor(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Color(red, green, blue));
            g.drawString(strRand, (i &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;) *&lt;span&gt; x, codeY);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将产生的四个随机数组合在一起。&lt;/span&gt;
&lt;span&gt;            randomCode.append(strRand);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将四位数字的验证码保存到Session中。&lt;/span&gt;
        code =&lt;span&gt; randomCode.toString();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(String path) throws IOException {
        OutputStream sos &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(path);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.write(sos);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(OutputStream sos) throws IOException {
        ImageIO.write(buffImg, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sos);
        sos.close();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BufferedImage getBuffImg() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffImg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCode() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; code;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
在customer模块中的controller，编写拦截/getValidateCode路径的请求，用于生成验证码，代码如下：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
 @GetMapping(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getValidateCode(HttpServletRequest reqeust, HttpServletResponse response) throws IOException {
        response.setContentType(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image/jpeg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 禁止图像缓存。&lt;/span&gt;
        response.setHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pragma&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        response.setHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cache-Control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        response.setDateHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Expires&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

        HttpSession session &lt;/span&gt;=&lt;span&gt; reqeust.getSession();

        ValidateCode vCode &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ValidateCode(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;28&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
        session.setAttribute(Helper.SESSION_CHECKCODE, vCode.getCode());
        vCode.write(response.getOutputStream());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证码在3次输入错误用户名密码后启动的逻辑代码在上面都已经贴出来了，这个3次是存储在session中的，前台页面要通过获取session中的“可输入错误剩余次数SESSION_LOGIN_FAILURE_COUNT”来判断&lt;/p&gt;
&lt;p&gt;至此，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能。演示效果如下：&lt;/p&gt;
&lt;p&gt;第一次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205508529-1454803281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205637091-152215797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205708035-545752487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三次以后的页面就有验证码了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205747421-1913339989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是该项目的源码下载地址：https://download.csdn.net/download/weixin_38340967/10677372&lt;/p&gt;
&lt;p&gt;文章参考文献：https://www.cnblogs.com/nicknailo/p/8947643.html&lt;/p&gt;
&lt;p&gt;http://itfish.net/article/64414.html&lt;/p&gt;





&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Wed, 19 Sep 2018 13:04:00 +0000</pubDate>
<dc:creator>王者之巅</dc:creator>
<og:description>今天我们完成框架的thymeleaf模板显示页面功能，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能，东西可能比较多，这个是我这两天在网上结合各种资源整合出来的，基本功能都已经实现，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gaopengfirst/p/9677604.html</dc:identifier>
</item>
<item>
<title>【朝花夕拾】Android Log篇 - 宋者为王</title>
<link>http://www.cnblogs.com/andy-songwei/p/9676823.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/andy-songwei/p/9676823.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;        &lt;/p&gt;
&lt;p&gt;        从事Android开发的这些年中，经常碰到这样一个现象：同一款app中，往往有好几种风格迥异的log处理方式，有时候会让维护者晕头转向。同时笔者也经常碰带一些模棱两可的问题：Log等级分好几种，到底什么情况下用哪个等级的log？什么情况下可以使用log，log怎么用，为什么要这么用？Android的log这么多，要怎么样高效地查看log？带着这些问题，笔者根据平时的开发经验、公司的log规范文档、网络中的相关资料，对log使用做了一定的整理。对于最基本的使用和log介绍，本文不做赘述，希望本文能帮助一部分人，也希望大牛们给出更牛的意见和建议，助我成长！&lt;/p&gt;
&lt;p&gt;       本文主要内容如下：&lt;/p&gt;
&lt;p&gt;         &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919203258785-48125582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 一、Log等级划分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    Android系统为开发者提供了良好的日志工具android.util.Log，常用的方法有如下5个，将log的输出等级也划分为了5个级别：&lt;/p&gt;
&lt;p&gt;    1、Log.v：这里的v代表Verbose啰嗦的意思，对应的log等级为VERVOSE。采用该等级的log，任何消息都会输出。&lt;/p&gt;
&lt;p&gt;    2、Log.d：这里的d代表Debug调试的意思，对应的log等级为DEBUG。采用该等级的log，除了VERBOSE级别的log外，剩余的4个等级的log都会被输出。&lt;/p&gt;
&lt;p&gt;    3、Log.i：这里的i代表information，为一般提示性的消息，对应的log等级为INFO。采用该等级的log，不会输出VERBOSE和DEBUG信息，只会输出剩余3个等级的信息。&lt;/p&gt;
&lt;p&gt;    4、Log.w：w代表warning警告信息，一般用于系统提示开发者需要优化android代码等场景，对应的等级为WARN。该级别log，只会输出WARN和ERROR的信息。&lt;/p&gt;
&lt;p&gt;    5、Log.e：e代表error错误信息，一般用于输出异常和报错信息。该级别的log，只会输出该级别信息。一般Android系统在输出crassh等致命信息的时候，都会采用该级别的log。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、Log使用规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    不同的公司，对Log的使用有不同的要求和规范，以下笔者就工作中碰到的规范来举例说明Log的使用规范：&lt;/p&gt;
&lt;p&gt;    1、在app中，一般不允许使用VERBOSE级别的log，对于INFO、WARN级别的log，允许极少量打印重要信息。这是工作中的要求，系统源码中其实对这三个等级用得也不少，例如，系统打印一般Exception信息时，就是用的WARN级别log&lt;/p&gt;
&lt;p&gt;    2、只有在出现极严重错误的时候，才允许使用ERROR级别，一般的信息要是用DEBUG级别。当系统报Fatal Exception的时候，就是用的ERROR级别的log。&lt;/p&gt;
&lt;p&gt;    3、用户的隐私信息禁止打印，比如：IMEI、手机号、密码、银行卡号等。在国外，一些法律也对Log内容做了严格的要求。&lt;/p&gt;
&lt;p&gt;    4、Log中不要打印太多具体实现的细节，这样会导致通过log就能猜到架构的设计和代码的实现。&lt;/p&gt;
&lt;p&gt;    5、Log中不能暴露核心算法或机制细节，比如核心算法相关信息、应用和框架间函数的调用流程等。&lt;/p&gt;
&lt;p&gt;    6、禁止在循环打印log。在循环条件、频繁操作、频繁调用的接口、ACTION_MOVE事件、重复打印等地方，一定要控制好log的使用。在单位时间内，不同性质的应用对log的数目有一定的要求，对每条log的大小也有一定的限制。因为大量或者频繁的log，对app的性能有一定的影响。即便是有log开关控制日志的输出与否，字符串的拼接也是会耗掉一些性能和资源的。&lt;/p&gt;
&lt;p&gt;    7、打印捕捉到的异常堆栈必须谨慎，如不需要打印堆栈就能定位问题，就尽量不要打印堆栈，若确实需要堆栈，在同一堆栈，尽量控制打印频度。&lt;/p&gt;
&lt;p&gt;    8、对于Android源码中自带的log，尽量不要修改。在Event Log中，就严禁修改源码自带的log。&lt;/p&gt;
&lt;p&gt;    9、Log中的TAG，一般以所划分的功能模块命名，log信息也最好用类名，方法名拼接为前缀。这样做的目的就是在查看log的时候，方便定位，对分析问题很有帮助。&lt;/p&gt;
&lt;p&gt;   上述不仅包含使用规范，也包含了部分log使用小技巧。这些规范中有些会根据不同公司，不同严格程度而有所不同，而有些则需要统一遵守其规范的，读者可以根据具体情况斟酌。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、Android Studio中查看log&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &lt;/strong&gt;Android Studio为开发者提供了良好的log查看工具，开发者可以通过如下方式打开log视图：View &amp;gt; Tool Windows &amp;gt; Logcat，或者用默认的快捷键 Alt+6 打开/隐藏 Logcat视图。下面简单介绍一下该工具的使用。&lt;/p&gt;
&lt;p&gt;    1、Logcat中选择筛选条件  &lt;/p&gt;
&lt;p&gt;        如下截图中，标注了Android Studio中使用Logcat视图的常用功能，开发者可以根据实际情况选择过滤条件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180918190203076-1953509104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    2、Log信息颜色设置&lt;/p&gt;
&lt;p&gt;        查看log的时候，有一个小技巧，为了便于查看不同等级的log，Android Studio对不同等级的log信息设置了不同的颜色。开发者也可以根据自己的爱好，自行设置颜色或者其他属性，这样，在查看log的时候，就容易对log等级进行区分，查看的时候就比较有层次感。设置路径为：File &amp;gt; Settings &amp;gt; Editor &amp;gt; Colors &amp;amp; Fonts &amp;gt; Android Logcat。如下截图所示：&lt;/p&gt;
&lt;p&gt;              &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180918191923717-1937214230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        设置完成后，用如下代码进行测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
1  private void&lt;span&gt; showLog(){
2         Log.v(TAG,&quot;Hello,I am VERBOSE&quot;&lt;span&gt;);
3         Log.d(TAG,&quot;Hello,I am DEBUG&quot;&lt;span&gt;);
4         Log.i(TAG,&quot;Hello,I am INFORMATION&quot;&lt;span&gt;);
5         Log.w(TAG,&quot;Hello,I am WARNNING&quot;&lt;span&gt;);
6         Log.e(TAG,&quot;Hello,I am ERROR&quot;&lt;span&gt;);
7     }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        logcat视图中打印的log信息如下：&lt;/p&gt;
&lt;p&gt;             &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180918191809642-765073212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        虽然开发者可以根据自己的爱好设置log的颜色等属性，但是笔者还是建议读者尽量遵守约定俗称的约定，比如，ERROR级别的log，就往往被设置为红色。&lt;/p&gt;
&lt;p&gt;     3、Logcat中的log信息说明&lt;/p&gt;
&lt;p&gt;        如下截图为笔者打印的某条log，对其中各个字段的进行了说明&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919110029466-1875037205.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、写一份便于使用的Log辅助类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    Log的基本使用技能很容易掌握，但是要能灵活地使用在项目中，仍然有很多技巧需要掌握。&lt;/p&gt;
&lt;p&gt;    1、开发者常碰到的场景&lt;/p&gt;
&lt;p&gt;    在具体的开发中，开发者往往会遇到如下的情形：&lt;/p&gt;
&lt;p&gt;    （1）调试的时候，往往会打印不少的log，用于辅助分析问题，但是要发布给用户使用的版本时，这些log必须要关闭掉。&lt;/p&gt;
&lt;p&gt;    （2）开发者往往会在代码中设置一个变量，比如 boolean isDebug等，来控制日志的打印/关闭。但是每次发布版本的时候，都需要手动去修改这个值，操作不便，甚至容易忘记。&lt;/p&gt;
&lt;p&gt;    （3）发布给用户使用的user版本，log被关闭了，出现bug需要分析的时候，log信息太少，往往又让开发者感到“巧妇难为无米之炊”，不利于分析问题。&lt;/p&gt;
&lt;p&gt;    （4）拿到log信息后，又往往不容易找到这条信息和哪个功能有关，从哪个类，哪个方法中打印出来的。&lt;/p&gt;
&lt;p&gt;    （5）有些log需要在user版本中关闭，但有些log需要一直保留，这两类log的处理，又需要区别对待。&lt;/p&gt;
&lt;p&gt;    ······&lt;/p&gt;
&lt;p&gt;    诸如此类的情形，想必开发者们都在不断地经历着。&lt;/p&gt;
&lt;p&gt;    2、辅助工具类代码&lt;/p&gt;
&lt;p&gt;        有经验的开发者一般都会写一个Log的辅助类来尽量规避这些麻烦，笔者在开发中也总结了一套代码，如下代码所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demos;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.os.Build;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.util.Log;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Logger {
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String TAG = &quot;FunctionName&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;功能模块名，比如你开发的是相机功能，这里可以命名为“Camera”，在查看log的时候，可以查看到该功能全部log&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isLogAnyTime = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;任何情况下都允许打印的log，无论当前手机固件版本为“user”、“userdebug”还是“eng”模式&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;     * 用于根据是否允许打印log来决定是否打印DEBUG等级的log
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; moduleTag  //输出该log处所在的类名
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; methodName //输出该log处所在的方法名
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; msg        //需要输出的信息
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; d(String moduleTag, String methodName, String msg) {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isTagLoggable(TAG, Log.DEBUG)) {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;            Log.d(TAG, createLogPrefix(moduleTag, methodName, msg));
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;     * 在代码层面，任何情况下都会打印DEBUG等级的日志（在手机系统中也可以设置允许log打印的等级，这种情况另当别论）
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; alwaysShowD(String moduleTag, String methodName, String msg) {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        Log.d(TAG, createLogPrefix(moduleTag, methodName, msg));
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; e(String moduleTag, String methodName, String msg) {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isTagLoggable(TAG, Log.ERROR)) {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;            Log.e(TAG, createLogPrefix(moduleTag, methodName, msg));
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; alwaysShowE(String moduleTag, String methodName, String msg) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;        Log.e(TAG, createLogPrefix(moduleTag, methodName, msg));
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;     * 用于打印方法的调用栈，即该函数一层一层的调用关系列表
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printStackTraceInfo() {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isTagLoggable(TAG, Log.DEBUG)) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             Log.d(TAG, Log.getStackTraceString(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Throwable()));
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;     * 获取捕捉到的Exception信息，并转化为字符串
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printExceptionInfo(Exception pEx) {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         String _exStr = pEx.toString() + &quot;\n&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         StackTraceElement[] stackTraceElements =&lt;span&gt; pEx.getStackTrace();
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (stackTraceElements == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            Log.w(TAG, _exStr);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (StackTraceElement se : stackTraceElements) {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             _exStr += (&quot;at &quot; + se.getClassName() + &quot;.&quot; + se.getMethodName() + &quot;(&quot; + se.getFileName() + &quot;:&quot; + se.getLineNumber() + &quot;)\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        Log.w(TAG, _exStr);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;     * 判断当前log是否允许输出
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;     * &lt;span&gt;对Log.isLoggable(tag,level)的使用，后文会做进一步的说明
&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tag   官方：the tag to check
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; level 官方：the level to check
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true 表示允许输出，false表示不允许输出
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isTagLoggable(String tag, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; level) {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; Log.isLoggable(tag, level) || isDebugMode() ||&lt;span&gt; isLogAnyTime;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;     * 将各个参数按照一定的格式组合，便于log查看
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; moduleTag  传入所在的类名
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; methodName 传入所在的方法名
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; msg        要输出的信息
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 组合后的字符串
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String createLogPrefix(String moduleTag, String methodName, String msg) {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         StringBuffer buffer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         buffer.append(&quot;[&quot;).append(moduleTag).append(&quot;]&quot;).append(methodName).append(&quot;:&quot;&lt;span&gt;).append(msg);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffer.toString();
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;     * 手机的系统一般有“user”、“userdebug”、“eng”版本，“user”版本是最终发给用户使用的版本，
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;     * 而另外两种为工程师调试的版本，可以对手机做更多的操作，比如root，remount等。往往开发者
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;     * 用于调试的大部分log，在发给用户使用时（机user版本），必须要关闭掉。
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true 表示当前手机系统版本为“eng”或者“userdebug”版本
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;     * false表示“user”版本
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isDebugMode() {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;eng&quot;.equals(Build.TYPE) || &quot;userdebug&quot;&lt;span&gt;.equals(Build.TYPE);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：这套代码是根据公司的log使用规范来实现的，笔者当前从事手机系统app的开发，上述的处理办法也相对偏向这方面，但是对于纯第三方app开发者而言，也是可以参考的。&lt;/p&gt;
&lt;p&gt;    3、辅助类的使用和说明。&lt;/p&gt;
&lt;p&gt;    （1）打印基本log&lt;/p&gt;
&lt;p&gt;         根据代码中的注释，想必对于这些方法的使用和含义，是很容易理解的。下面简单演示一下使用的例子&lt;/p&gt;
&lt;p&gt;         在需要打印log的地方调用 Logger.d(className,methodName,msg);即可，如下演示了输出后的log&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919160031845-1368984677.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    （2）打印函数调用栈printStackTraceInfo&lt;/p&gt;
&lt;p&gt;       以下截图展示了函数的调用栈，对于分析某个方法被调用的轨迹非常有用。第二行printStackTraceInfo()方法是最终捕捉调用栈的地方，可以清晰看到其调用轨迹。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919160347469-1717012785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    （3）打印异常信息printExceptionInfo(Exception pEx)&lt;/p&gt;
&lt;p&gt;       该方法主要用打印捕获的Exception信息，如下截图一清晰展示地展示了异常原因，发生的地方，已经调用栈等信息。sdk也自带了e.printStackTrace()方法，由系统自己打印(截图二)。但是其打印信息被拆分为多条信息打印，在按某个tag进行搜索时，只能搜索到其中含有该tag的信息，而不能整体显示，自定义的方法就克服了这一点，便于整体查看。当然，读者可以根据自己爱好来选择是否用sdk自带的函数。&lt;/p&gt;
&lt;p&gt;                 &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919161616634-2086002260.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                       　　　　　　         截图一：自定义的异常打印&lt;/p&gt;
&lt;p&gt;                 &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919162525280-1769938301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                         　　　　　　　　               截图二：sdk自带的异常打印&lt;/p&gt;
&lt;p&gt;    （4）使用Log.isLoggable(tagName, level)&lt;/p&gt;
&lt;p&gt;       本小结中第1点第（3）条中有提到，调试版本中的log，在user版本中被关闭，这极大地妨碍了对bug的分析。所以在判断是否允许打印log的条件isTagLoggable(...)中，添加了一个“或”条件，Log.isLoggable(tag, level)，就很好地解决了user版本中不能打印部分log的问题。加上这条件后，在user版本系统中，只要在命令框中执行如下命令即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 adb shell setprop log.tag.tagName level
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       命令中的tagName为辅助类中的TAG值,即FunctionName，level是指希望输出的log等级下限，比如，如果level为D，则除VERBOSE外，其他等级更高log都会输出；level为E，就只有ERROR等级log会输出。针对该辅助类的具体命令为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 adb shell setprop log.tag.FunctionName D
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入该命令后，凡是以“FunctionName”为tag名，等级在DEBUG及以上的log，就都会输出了。要想恢复到不可打印的状态，只要重启手机即可。&lt;/p&gt;
&lt;p&gt;       推荐阅读：&lt;a href=&quot;https://blog.csdn.net/qqxiaoqiang1573/article/details/72867776&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/qqxiaoqiang1573/article/details/72867776&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五、log的获取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt;设计好了log的输入策略，就可以获取log了。笔者接触到的获取log的方式主要有如下几种 &lt;/p&gt;
&lt;p&gt;    1、开发工具中获取。&lt;/p&gt;
&lt;p&gt;       比如上文中提到的Android Studio自带的Logcat视图，同样eclipse中也有该视图，都比较好用。这种方法主要被开发者使用，测试人员一般不会使用IDE中的类似工具。&lt;/p&gt;
&lt;p&gt;    2、adb自带工具 logcat&lt;/p&gt;
&lt;p&gt;       该命令功能也比较强大，使用起来非常方便，不需要额外的IDE，电脑上配置好adb，连接上手机，在命令框中输入命令即可。该工具的命令也不少，功能也比较强大，可惜，笔者对这个功能用得不多，主要使用IDE自带工具和手机的Mobile Log。&lt;/p&gt;
&lt;p&gt;       推荐阅读：&lt;a href=&quot;https://blog.csdn.net/liao277218962/article/details/50129009&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/liao277218962/article/details/50129009&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    3、手机自带抓log功能&lt;/p&gt;
&lt;p&gt;      一般手机也都自带了抓取log的工具，不同的品牌和机型，抓取系统log的方式和log的形式也不尽相同，下面以某比亚的某款机型为例来说明。&lt;/p&gt;
&lt;p&gt;      （1）在拨号盘中输入暗码（可以在网上搜，不同品牌暗码各不同，同一手机中抓取log的种类也多样）就会进入到log工具界面，如下所示：&lt;/p&gt;
&lt;p&gt;                     &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919184030697-1555813460.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;              可以看到，可以抓取的log种类非常多，咱们这里只打开MobileLog。开发者可以根据实际情况选择开启需要的log，笔者目前为止，只用到过MoboleLog，-_-&lt;/p&gt;
&lt;p&gt;      （2）在使用之前，先点击“清空”按钮清理掉之前的log文件， 以免无关log太多，影响查看有用信息。&lt;/p&gt;
&lt;p&gt;      （3）点击“开始”按钮，系统就开始抓取log了。&lt;/p&gt;
&lt;p&gt;      （4）开始操作手机，复现bug等，这段期间产生的log会被捕获到。&lt;/p&gt;
&lt;p&gt;      （5）操作完成后，点击“关闭”按钮，系统会生成日志文件，在最底部可以看到日志的存储路径，在该路径下获取即可。&lt;/p&gt;
&lt;p&gt;                     &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919184212716-1355248805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;六、查看及分析log&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     拿到日志文件后，就可以分析log了。在IDE的视图工具Logcat中，和adb logcat中获取的log，基本的查看基本上都会，这里不多说了。这里主要讲讲MobileLog中log分析。进入到log文件夹后，会看到如下的文件夹列表&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919185947124-1886036743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果开启了MobileLog，重启手机或暂停后重新开启，均会产生一个最新的日志文件夹。开发者从bug复现最近的一次log开始分析。选择某个时间段日志文件夹后点击，会看到如下界面&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919190438323-1606204368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般咱们只关注moblie文件夹的内容（笔者目前为止也只使用过该目录下的文件）。点击进入后，会显示log文件列表，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919190914512-1584714415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文件名中包含了机型、版本信息，以及文件中log的类型。一般咱们也只需要关注crash、main文件，有时候也会关注system日志文件。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;crash文件中收集了系统中crash的log，首先分析这个文件，看是否有和自己项目相关的crash信息。&lt;/li&gt;
&lt;li&gt;main文件，咱们前文中讲到的添加的log，允许打印的，都会被收集到该文件中。&lt;/li&gt;
&lt;li&gt;system文件，收集系统的log，系统框架中自带的log会体现在该文件中，偶尔有需要使用。&lt;/li&gt;
&lt;li&gt;其他文件使用得不多，笔者暂时还没有碰到要使用剩余这几个文件的场景。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;       在crash文件中，可以清晰地看到crash发生的时间，引起crash的进程及包名等信息。这里要注意crash的时间，如果和自己复现的场景时间差得比较远（比如10分钟以上），就可能和自己要分析的问题没太大的关联度。&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://img2018.cnblogs.com/blog/472002/201809/472002-20180919192147935-1134051874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        在main文件中，往往包含了大量的log信息。前面讲到的logcat视图或adb logcat捕获的log，以及不同机型手机中不同类型的log，其实基本结构基本相同。单条信息中也都包含了日期、时间、进程号、线程号、log等级、TAG，msg等信息。在分析这些log的时候，笔者这里提几个经常用的小技巧：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;选一个好用的文本编辑器。笔者和周围的同事基本上用的都是Notepad++，对查找信息非常有帮助，对于该工具的使用技巧，读者可以自己网上搜索一下。&lt;/li&gt;
&lt;li&gt;结合自己添加log的时候的设计，可以快速根据功能模块、类名、方法名等关键信息，筛选出关联度高的信息来。&lt;/li&gt;
&lt;li&gt;每一个app一般对应一个进程号，如果进程号中途变化了，说明中途该app发生了crash，可以在进程号变化点附近查找bug原因。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;   笔者对MobileLog的分析技巧也在学习和摸索中，此处慢慢积累经验，慢慢总结，慢慢更新吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;七、第三方工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;当前在app开发生，也出现了不少比较优秀的管理log的第三方工具，笔者使用过的有两款：log4j和腾讯的bugly，都比较好用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;八、结语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &lt;/strong&gt;log的使用算是anroid开发中一个比较基础的技能了，也一个非常实用的技能，是开发中时时刻刻都要用到的技能。本文所讲的内容大多都算比较基础，当然也包含了一些平时容易忽视的知识点，基本上没有什么讲原理的地方。笔者在MobileLog分析等不少方面，经验也还比较浅，也在不断学习摸索中和总结中，希望读者们能多多指教，万分感谢！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 12:15:00 +0000</pubDate>
<dc:creator>宋者为王</dc:creator>
<og:description>笔者从事android开发有好几年了，经常会碰到这样的现象：由于不同的程序员对log输出有着不同的处理风格，同一款app中，往往有着五花八门的处理方式。 同时，对于Android Log的使用也一直存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/andy-songwei/p/9676823.html</dc:identifier>
</item>
<item>
<title>天马行空-DevOps平台建设概述 - angie_hawk7</title>
<link>http://www.cnblogs.com/hrbeu05/p/9676806.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hrbeu05/p/9676806.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇主要概述的是Dev环节的支撑平台。如何一套Dev平台来同时支持传统企业交付模式以及互联网业务交付模式。关于支撑Ops阶段的平台涉及内容庞大复杂，后续从数据中心Ops的角度展开论述。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于本人对Dev与Ops环节的支撑平台的划分，大致为如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200420619-1022335779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;互联网业务的特点是自开发，自运维，标准的devops模式，从研发活动来看，涉及五个阶段，code，build，test，deploy，monitor。每个阶段的职责不同。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200451776-455963004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传统IT业务的特点是研发团队负责开发交付，IT技术支持团队负责实施（部署，升级），客户负责运维。且传统IT企业交付的往往是一整套完整的解决方案。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200526283-405794748.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相比较互联网业务模式，研发活动流程变为了如下，增加了assemble(装配过程)。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200545883-1224430577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是如何将开发团队的输出装配为面向客户交付的解决方案包。&lt;/p&gt;
&lt;p&gt;两种场景下的共同诉求都是devops理念中构建，测试，发布更加快捷，频繁，可靠。&lt;/p&gt;
&lt;h2&gt;Code阶段&lt;/h2&gt;
&lt;p&gt;核心目标是如何快速，低门槛的开发，同时对于QA来说，如何可进行统计度量（代码量，产出率等）。而快速，低门槛则尽可能让开发只聚焦与核心业务逻辑的实现，更多的工程相关的属性依托于可视化，自动化的构筑生成。因此需要契约化的工程结构，以支撑后续的运行维护管理。微服务架构模式下，微服务是最小的工程单元，因此也即是定义一种符合微服务的契约化的工程属性。微服务的特征要求具备独立可编译部署变更，对外需要清晰的API等。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200619098-1480365162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此可以定义譬如下面的开发工程的目录结构&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200652376-518173765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般一个微服务的开发顺序可参照如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200729701-1445459910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般在设计阶段就需要输出API定义，传统的往往是word或者excel等定义，用于评审，然后开发阶段需要编写代码去定义，此部分则可以完全简化，基于YAML/JSON定义API文件，并基于Swagger直接可视化展示API用于评审，开发阶段同样基于此文件直接生成API代码和到业务逻辑的调用。最终开发者直接编写API的实现单元即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;依托于契约化松耦合的目录结构，需要devops平台具备如下的能力：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1：微服务的初始化管理服务。微服务自身就是个后续需要被维护管理的对象，故而需要一个微服务管理的能力。包含：微服务定义，开发工程生成，以及关键指标的搜集（代码量，开发语言，责任人，提交次数等）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2：基于主流开发工具（Eclipse，IDEA）可一键式生成API代码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微服务初始化管理服务（后续简称codeinit）结构可大致表述为如下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200759058-87974267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此基于微服务管理服务的code过程变为：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200811647-435496671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Build阶段&lt;/h2&gt;
&lt;p&gt;核心目标是检查原始代码的质量并编译生成可执行的包。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200836143-553993739.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;下载代码：是指从代码仓库下载到编译服务器&lt;/li&gt;
&lt;li&gt;门禁检查：包含契约化目录规范的检查，圈复杂度检查，findbugs检查，代码样式检查等。&lt;/li&gt;
&lt;li&gt;编译：则是将原始代码生成二进制，使用语言自身的编译器完成，打包则是生成预期的最终可部署的包，其包含编译产生的二进制文件以及程序的配置文件等。&lt;/li&gt;
&lt;li&gt;推送：是指生成的包推送到包仓库(FTP服务器，镜像库等)。&lt;/li&gt;
&lt;li&gt;统计：贯穿在整个Build阶段，是指Build阶段的各种度量指标，譬如编译次数，编译成功率等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200858671-1340926750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;，&lt;/p&gt;
&lt;h2&gt;Assemble阶段&lt;/h2&gt;
&lt;p&gt;Assemble核心目标是微服务包到服务包，服务包到解决方案大包，或者微服务包到解决方案大包的自动化装配过程。&lt;/p&gt;
&lt;p&gt;需要一种契约化的包的装配规则的定义，包含目标包类型（解决方案，服务），包含的服务或者微服务。最终客户拿到的是一个基于部署系统可部署的完整的大包，不用自己手动下载组装配套的多个包。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200919422-1404701629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最终效果：研发团队视角提供微服务，形成一种原子能力的微服务池子，不同解决方案定义不同的微服务打包策略，基于devops平台自动装配不同的解决方案包。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200942799-1515351304.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Deploy阶段&lt;/h2&gt;
&lt;p&gt;Deploy阶段隶属于Ops范围，涉及上下文很多，后续详细展开论述，此部分只做概要介绍。&lt;/p&gt;
&lt;p&gt;部署系统的核心目标是可视化/自动化的将解决方案包/服务包/微服务包部署到不同的环境的节点上。这里面涉及几个名词：包，部署动作，环境，节点，需要展开论述。&lt;/p&gt;
&lt;p&gt;包指的是开发活动交付的软件的载体。可以是zip/镜像等。&lt;/p&gt;
&lt;p&gt;环境：指的是部署活动中涉及的Alpha（服务内自验证环境），Beta(服务间联调环境)，Gamma(类生产环境)，Gamma(生产环境)。&lt;/p&gt;
&lt;p&gt;节点：这里面定义的是在可直接部署包的介质，需要强调的是可直接部署性。一般性硬件和软件是分离的两拨人，一个数据中心内允许两次驻场，以此是设备采购到位后，硬件调测人员进驻进行硬件安装配置，其次是软件调测人员驻场，进行操作系统安装及其之后的过程，而对于部署系统来说，此处部署的是软件包，并不包括OS安装配置，故而也就引出了另一个系统：独立的装机服务，此即为部署系统的其中一个上下文，但并非属于部署系统。但是实际往往也可能没有独立的装机服务，譬如节点如果全是虚拟机，而一般企业往往虚拟机的生命周期管理存在与独立的云管理平台中（物理机的初始化，OS安装，虚拟机发放）。此时云管理平台即可承载此处所需的装机能力。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/532603/201809/532603-20180919200957484-1144045940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Monitor阶段&lt;/h2&gt;
&lt;p&gt;DevOps模式下的Monitor隶属于Ops范围，涉及内容和上下文很多，其内容包含监控（硬件，OS，业务的性能，调用链，拨测），告警，故障诊断等，上下文涉及变更，事件，报表，通道等后续详细展开论述。&lt;/p&gt;
&lt;p&gt;此处需要附加说明的是即使从Dev阶段也是需要Monitor能力的，也就是监控统计Code，Build，Assemble阶段的各个指标&lt;/p&gt;

&lt;h2&gt;Kubernates/Docker，&lt;/h2&gt;
&lt;h2&gt;Jekins&lt;/h2&gt;
&lt;h2&gt;Github&lt;/h2&gt;






</description>
<pubDate>Wed, 19 Sep 2018 12:11:00 +0000</pubDate>
<dc:creator>angie_hawk7</dc:creator>
<og:description>概述 DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它是一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hrbeu05/p/9676806.html</dc:identifier>
</item>
</channel>
</rss>