<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python笔记·第一章—— Python基础（一） - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/8060188.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/8060188.html</guid>
<description>&lt;h2&gt;1、Python的由来与版本&lt;/h2&gt;
&lt;h3&gt;1.1 &lt;strong&gt;python的由来&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.2  python版本&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　目前Python的主要版本为Python2.7与Python3.6 。&lt;/p&gt;
&lt;p&gt;　　Python2版本到2020年就不再维护。&lt;/p&gt;
&lt;h2&gt;2、Python是什么样的语言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;编程语言主要从以下几个角度为进行分类，编译型和解释型、静态语言和动态语言、强类型定义语言和弱类型定义语言，每个分类代表什么意思呢，我们一起来看一下。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;2.1 编译型语言和解释型语言&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;编译型语言&lt;/strong&gt;：当用户写完一段代码需要执行的时候，由编译器先把整段代码一次性编译成计算机能看懂的二进制文件，然后再执行。这个过程中，如果用户写的代码出错了，编译器就得整段从头开始编译，只是几行或者几页代码的情况下还感觉不出来，但是如果代码由成千上万行甚至上亿行，可想而知，会浪费很多时间，导致开发速度慢。而且，他不是跨平台的，编译过后的代码在不同操作系统上就无法执行。他的优点是运行快，因为一旦编译成功，每次调用只需直接执行即可&lt;/p&gt;
&lt;p&gt;　　编译型语言的代表：C语言、C++语言&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;解释型语言：&lt;/strong&gt;当用户写完一段代码需要执行的时候，由解释器一段一段的解释成计算机能看懂的二进制文件，然后直接执行。与编译型语言不同的是，如果用户写的代码出错了，解释器不需要从头开始，这就会大大节省了开发时间。而且他是可以移植的，不同操作系统由不同的解释器可以解释他。他的缺点是执行速度慢，每次执行都需要一行一行的解释。&lt;/p&gt;
&lt;p&gt;　　解释型语言的代表：JavaScript、PHP、Python&lt;/p&gt;

&lt;h3&gt;2.2 动态语言与静态语言&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;动态语言&lt;/strong&gt;：动态语言是指在运行的时候才去检查一个变量的数据类型，写程序的时候不需要先给一个变量指定类型。当第一次给变量赋值的时候，该语言会将该变量的数据类型存到内存当中。Python和Ruby就是典型的动态语言的代表。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;静态语言&lt;/strong&gt;：静态语言是指程序在编译的时候就要首先检查每个变量的数据类型，所以用户在写程序之前就要首先声明每个变量的数据类型。Java、C、C++都是静态语言的代表。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;2.3 强类型定义语言和弱类型定义语言&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　强类型定义语言：&lt;/strong&gt;一旦一个变量被赋值为一个数据类型，那么它将永远为该数据类型，除非它被强制转换（int()、str()）。比如说 a = 1 那么之后在给 a 赋值的时候也必须为整形。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;弱类型定义语言：&lt;/strong&gt;一个变量可以在不同的时候被赋予不同数据类型的值。所以，一个变量的数据类型可以被忽略。&lt;/p&gt;

&lt;h3&gt;综上所述，Python是一种动态解释型的强类型定义语言。&lt;/h3&gt;

&lt;h2&gt;3、Python的优缺点&lt;/h2&gt;
&lt;p&gt;　&lt;strong&gt;　  优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　▷ 优雅、明确、简洁&lt;/p&gt;
&lt;p&gt;　　　　▷ 可移植、可拓展、可潜入&lt;/p&gt;
&lt;p&gt;　　　　▷ 开发效率高&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;  缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;▷ 运行速度慢 &lt;/p&gt;
&lt;p&gt;　　　　▷ 代码不能加密&lt;/p&gt;
&lt;p&gt;　　　　▷ 不能多线程&lt;/p&gt;
&lt;h2&gt;4、Python的种类&lt;/h2&gt;
&lt;p&gt;　　 &lt;strong&gt;CPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　当我们从&lt;a href=&quot;https://www.python.org/&quot;&gt;Python官方网站&lt;/a&gt;下载并安装好Python 3.6后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行&lt;code&gt;python&lt;/code&gt;就是启动CPython解释器。&lt;/p&gt;
&lt;p&gt;　　　　CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　IPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调                 用了IE。&lt;/p&gt;
&lt;p&gt;　　　　CPython用&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;作为提示符，而IPython用&lt;code&gt;In [&lt;/code&gt;&lt;code&gt;序号&lt;/code&gt;&lt;code&gt;]:&lt;/code&gt;作为提示符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　 PyPy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用&lt;a href=&quot;http://en.wikipedia.org/wiki/Just-in-time_compilation&quot;&gt;JIT技术&lt;/a&gt;，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。&lt;/p&gt;
&lt;p&gt;               绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　Jython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　IronPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　 IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　小结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。&lt;/p&gt;

&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
　　
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;、下载安装包
    https://www.python.org/downloads/
2&lt;span&gt;、安装
    默认安装路径：C:\python27
3&lt;span&gt;、配置环境变量
    【右键计算机】--》【属性】--》【高级系统设置】--》【高级】--》【环境变量】--》【在第二个内容框中找到 变量名为Path 的一行，双击】 --&amp;gt;&lt;span&gt; 【Python安装目录追加到变值值中，用 ； 分割】
    如：原来的值;C:\python27，切记前面要有英文输入法状态下的分号&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1、编写以及运行Python代码的方法&lt;/h2&gt;
&lt;p&gt;　　▷ 在E盘创建一个文件名为test.py的文件，编写代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
print(&quot;Hello World!&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　▷ 按快捷键win+R打开运行窗口，然后输入cmd打开命令行窗口。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214191131420-733103242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　▷在命令行窗口里输入 python e:/test.py&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214191320420-105454220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上图可以看出，以及成功运行该文件代码并且打印出“Hello World！”&lt;/p&gt;

&lt;h2&gt;2、内容编码&lt;/h2&gt;
&lt;p&gt;　　解释器在执行代码的时候，需要将代码编译成机器能读懂的二进制码（由1和0组成），而python2版本在编译的时候默认以ASCII码的格式进行转换（也可以指定编码格式），而python3版本在编译的时候默认为utf-8格式进行转换。&lt;/p&gt;
&lt;p&gt;　　ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，其最多只能用 8 位来表示（一个字节），即：2**8 = 256，所以，ASCII码最多只能表示 256 个符号。&lt;/p&gt;
&lt;p&gt;　　然而，世界上的语言以及符号远远不止256个，所以当计算机传入世界各国的时候ASCII码已经不能满足大家的使用了，于是出现了Unicode（统一码、万国码、单一码），Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定虽有的字符和符号最少由 16 位来表示（2个字节），即：2 **16 = 65536，&lt;br data-filtered=&quot;filtered&quot;/&gt;
注：此处说的的是最少2个字节，可能更多&lt;/p&gt;
&lt;p&gt;　　但是问题来了，友谊Unicode至少2个字节，也就是16位，但是英文字母以及有些符号根本不需要这么多字节，所以统一用Unicode码的话会大大浪费宝贵的内存空间，于是又出现了一种新的编码：UTF-8.该编码格式是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类：ascii码中的内容用1个字节保存、欧洲的字符用2个字节保存，东亚的字符用3个字节保存...&lt;/p&gt;
&lt;p&gt;　　所以，python解释器在加载 .py 文件中的代码时，会对内容进行编码（默认ascill），如果是如下代码的话：&lt;/p&gt;
&lt;p&gt;报错：ascii码无法表示中文&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
print('你好，世界！')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法是，在代码的首行加入以下代码，用来指定编码格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#-*- ecoding:utf-8 -*-&lt;br/&gt;#这样，就能成功执行并打印出中文“你好，世界！”了。
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、注释&lt;/h2&gt;
&lt;p&gt; 　　　　单行注释：# 被注释内容&lt;/p&gt;
&lt;p&gt;　　　　 多行注释：'''被注释内容'''，或者&quot;&quot;&quot;被注释内容&quot;&quot;&quot;&lt;/p&gt;
&lt;h2&gt;4、变量&lt;/h2&gt;
&lt;p&gt;　　　　&lt;em&gt;变量就是把程序运行的中间结果，存到内存中，以待调用&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　　　▷&lt;strong&gt;声明变量&lt;/strong&gt;&lt;strong&gt;　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 # -*- coding: utf-8 -*-
2   
3 name = &quot;fuyong&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码声明了一个变量，变量名为： name，变量name的值为：&quot;fuyong&quot;&lt;/p&gt;
&lt;p&gt;变量的作用：昵称，其代指内存里某个地址中保存的内容&lt;/p&gt;


&lt;p&gt;▷变量的命名规则&lt;/p&gt;
&lt;p&gt;　　　1、由字母、下划线、数字组成&lt;/p&gt;
&lt;p&gt;　　　2、首字母不能是数字&lt;/p&gt;
&lt;p&gt;　　　3、不能是python中的关键字（以下为python关键字）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
 ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;▷变量的赋值&lt;/p&gt;
&lt;p&gt;变量的赋值其实是在内存中开辟一块数据，然后将该数据指向变量名，这样在调用变量名的时候就能找到该变量所对应的值。&lt;/p&gt;

&lt;p&gt;而如果将一个变量的值赋予给另一个变量，那么内存中还是只有一个数据值，只是将该数据指向了不同的两个变量而已&lt;/p&gt;

&lt;h2&gt;5、常量　　&lt;/h2&gt;
&lt;p&gt;　　　　常量即指不变的量，如pai 3.141592653..., 或在程序运行过程中不会改变的量&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　：Bir_of_China = &lt;span class=&quot;hljs-number&quot;&gt;1949　　　　　　　　　 &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;6、用户交互（input）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1 # -*- coding: utf-8 -*-
2   
3 # 将用户输入的内容赋值给 name 变量
4 name = input(&quot;请输入用户名：&quot;&lt;span&gt;)
5 
6 # 打印输入的内容
7 print(name,age)&lt;br/&gt;#执行脚本就会发现，程序会等待你输入姓名后再往下继续走。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;7、基础数据类型&lt;/h2&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;lang-py&quot; readability=&quot;13&quot;&gt;　　　　　　　▷ int  整形&lt;br/&gt;　　　　　　　　在32位的机器上，int的长度为32为，范围为 -2**31 -- 2**31-1 &lt;br/&gt;　　　　　　　　在64位的机器上，int的长度为64位，范围为 -2**63 -- 2**63-1&lt;p&gt;　　　　　　　▷ long 长整型 （python3版本已经没有该类型了，不管多长的数，全部为int类型）&lt;br/&gt;　　　　　　　　跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。&lt;br/&gt;　　　　　　　　该类型不用用户特别定义，当一个数字大到超过int数据类型的范围后将自动转化为long长整形。&lt;br/&gt;　　　　　　　　注意：python3版本没有long型了，全部为int类型&lt;/p&gt;&lt;p&gt;　　　　　　　▷ bool 布尔类型（True False）&lt;br/&gt;　　　　　　　　True ：1 、 1==1 、 2&amp;gt;1 、type（'a'） == str 的结果均为True&lt;br/&gt;　　　　　　　　False：0 、 1!=1 、 2&amp;gt;3 等等的结果均为False&lt;/p&gt;&lt;p&gt;　　　　　　　▷ str 字符串类型&lt;br/&gt;　　　　　　　　简单一句话，在python中，加了引号的字符都被认为是字符串，哪怕他是一个数字（‘123’）&lt;br/&gt;　　　　　　　　&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1 &amp;gt;&amp;gt;&amp;gt; name = &quot;Alex Li&quot; #双引号
2 &amp;gt;&amp;gt;&amp;gt; age = &quot;22&quot;       #只要加引号就是字符串
3 &amp;gt;&amp;gt;&amp;gt; age2 = 22          #int
4 &amp;gt;&amp;gt;&amp;gt; 
5 &amp;gt;&amp;gt;&amp;gt; msg = '''My name is Alex, I am 22 years old!'''  #我擦，3个引号也可以
6 &amp;gt;&amp;gt;&amp;gt; 
7 &amp;gt;&amp;gt;&amp;gt; hometown = 'ShanDong'   #单引号也可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　单引号双引号以及三引号都可以表示字符串&lt;/p&gt;
&lt;p&gt;　双引号和单引号可以搭配使用，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
msg = &quot;I'm a small birld&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三引号可以将一大段代码赋值给一个变量，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1 msg = '''
2 今天我想写首小诗，
3 歌颂我的同桌，
4 你看他那乌黑的短发，
5 好像一只炸毛鸡。
6 '''
7 print(msg)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;字符串可以用 + 拼接，但是两者必须都为字符串类型。如：&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 a = 'hello'
2 b = 'xiaomi'
3 c = a +&lt;span&gt; b
4 print(c)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果即为“helloxiaomi”&lt;/p&gt;
&lt;p&gt;字符串也可以与一个数字相乘，结果是将该字符串连续输入N遍，如：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
print('xyz' * 3)&lt;p&gt;#输出结果为‘xyzxyzxyz’
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;8、格式化输出&lt;/h2&gt;
&lt;p&gt;现有一练习需求，问用户的姓名、年龄、工作、爱好 ，然后打印成以下格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
------------ info of fuyong -----------&lt;span&gt;
Name  : fuyong
Age   : 29&lt;span&gt;
job   : none
Hobbie: girl
------------- end -----------------&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
 1 name = input(&quot;请输入您的姓名：&quot;&lt;span&gt;)
 2 age =  input(&quot;请输入您的年龄：&quot;&lt;span&gt;)
 3 job = input(&quot;请输入您的工作:&quot;&lt;span&gt;)
 4 hobbie = input(&quot;请输入您的爱好：&quot;&lt;span&gt;)
 5 
 6 info = ''' 
 7     ------------ info of %s ----------- #给一个占位符，等待传入name的值
 8     
 9     Name:%s  #给一个占位符，等待传入name的值
10 
11     Age :%s  #给一个占位符，等待传入age的值
12 
13     Job :%s  #给一个占位符，等待传入job的值
14 
15     Hobbie:%s #给一个占位符，等待传入hobbie的值
16 
17     ------------- end -----------------
18 
19 ''' %(name,name,age,job,hobbie) # 符号%后的括号里的值与上面的几个占为符号一一对应，将值分别传入
20 
21 print(info)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：如果字符串里需要出现‘%’的时候，需要用转义符号来实现，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
msg = &quot;我是%s,年龄%d,目前学习进度为80%%&quot;%('金鑫',18&lt;span&gt;)
print(msg)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　PS ：&lt;/p&gt;
&lt;p&gt;　　▷查看数据类型的方法为type()              如type(1) 的结果为int   type('a')的结果为str&lt;/p&gt;
&lt;p&gt;　　　　　　　▷如果一个变量位阿拉伯数字，则该数据可以在int类型与str类型之间互相转换&lt;/p&gt;
&lt;h2&gt;9.基本运算符&lt;/h2&gt;
&lt;p&gt;　　　　　　▷算数运算&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214210129342-1778413248.png&quot; alt=&quot;&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; 　　　　　　▷比较运算&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214210149529-1498691280.png&quot; alt=&quot;&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; 　　　　　　▷赋值运算&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214210202435-1998858016.png&quot; alt=&quot;&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; 　　　　　　▷逻辑运算&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-py&quot;&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214210214388-2068054688.png&quot; alt=&quot;&quot;/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　　　　　注意：在没有()的情况下，not的优先级大于and，and的优先级大于or。即 () &amp;gt; not &amp;gt; and &amp;gt; or 优先级相同的情况下从左向右计算&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1299859/201712/1299859-20171214211344404-373311729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;10、流程控制之判断&lt;/h2&gt;
&lt;p&gt;在现实中，我们往往由很多种选择，比如说走路遇到分叉口，我们只能选择走一条路，程序也是一样，如果遇到分支，就用if语句控制流程&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
if&lt;span readability=&quot;1.5&quot;&gt; 条件判断:   #条件判断可以是比较运算，逻辑运算，以及布尔运算   
    执行语句
else&lt;span readability=&quot;3&quot;&gt;:
    执行语句&lt;p&gt;#注意：if  以及else 后都由一个分号 ':'&lt;br/&gt;#　　　if 以及else 下面的一段执行语句必须缩进&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
name = input('请输入用户名：'&lt;span&gt;)
password = input('请输入您的密码'&lt;span&gt;)
    if name == 'fuyong' and password == '123'&lt;span&gt;:
        print('恭喜您，登录成功'&lt;span&gt;)
    else&lt;span&gt;:
        print('抱歉，用户名或者密码错误！')&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　if语句可以嵌套使用，如上面的代码可以改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
name = input('请输入用户名：'&lt;span&gt;)
password = input('请输入您的密码'&lt;span&gt;)
    if name == 'fuyong'&lt;span&gt; :
            if password == '123'
                print('恭喜您，登录成功'&lt;span&gt;)
    else&lt;span&gt;:
        print('抱歉，用户名或者密码错误！')        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　if else也可以由多个分支判断，用elif表示，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
num = input('请输入一个数字'&lt;span&gt;):

if num == 1&lt;span&gt;:
    
    print(&quot;您选择的是1号&quot;&lt;span&gt;)

elif  num == 2&lt;span&gt;:
    
    print(&quot;您选择的是2号&quot;&lt;span&gt;)

elif num == 3&lt;span&gt;:
    
    print('您选择的是3号'&lt;span&gt;)

else&lt;span&gt;:
       print('输入有误，请在1、2、3中选择')&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code class=&quot;lang-py&quot;&gt; 　　11、流程控制之循环　　　　&lt;br/&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;hljs-number&quot;&gt;　　 　　在写程序的过程中，有时候我们需要一段代码反复执行许多次，如果每次都重复写很多次，代码不但会占用很多篇幅，而且会变得非常不美观，这不符合python的‘优雅、明确、简洁’的宗旨，这个时候我们只需要用一个循环语句即可解决问题。格式为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
while&lt;span&gt; 判断条件: #与判断语句if一样，判断条件可以是比较运算，逻辑运算，以及布尔运算   &lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　循环体 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们通过判断条件控制循环的次数，如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
n =&lt;span&gt; 0
while n &amp;lt; 3
    print(&quot;这段话将被执行3次&quot;&lt;span&gt;)
    n = n+1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以通过关键字break 、continue来终止循环&lt;/p&gt;
&lt;p&gt;　　break是跳出整个循环，直接执行循环体外面的代码&lt;/p&gt;
&lt;p&gt;　　continue是跳出本次循环，重新返回循环的开头&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
count =&lt;span&gt; 0

while&lt;span&gt; True:
    print(&quot;如果不是count，我就会一直打印下去，直到你的电脑爆炸为止&quot;&lt;span&gt;)
    
    if count == 5&lt;span&gt;:
        break&lt;span&gt;
    
    count = count + 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的例子可以看到，只要出现break，不管判断条件是否依然为True，循环都要立即终止&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 1 n =&lt;span&gt; 0
 2 
 3 while n &amp;lt; 10&lt;span&gt;:
 4 
 5     n = n+1
 6 
 7     if n == 4&lt;span&gt; :
 8 
 9         continue
10         
11     print(n,&quot;就是不愿意打印'4'&quot;&lt;span&gt;)
12 
13     
14         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码执行结果为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 1 1 就是不愿意打印'4'
 2 2 就是不愿意打印'4'
 3 3 就是不愿意打印'4'
 4 5 就是不愿意打印'4'
 5 6 就是不愿意打印'4'
 6 7 就是不愿意打印'4'
 7 8 就是不愿意打印'4'
 8 9 就是不愿意打印'4'
 9 10 就是不愿意打印'4'
10 &amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的例子可以看出，出现了continue，就会跳出本次循环，但是还会跳到循环体的第一句，来判断条件是否为True&lt;/p&gt;

&lt;p&gt;　　其他的语言中的else一般只与if搭配，而python中，else还可以搭配while，格式为：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1 while&lt;span&gt; 条件判断:
2 
3 &lt;span&gt;　　　　循环体
4 else&lt;span&gt;:
5 
6 　　　　如果循环正常执行完毕，没有被break终止，则会执行本段代码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;1、使用while循环输入 1 2 3 4 5 6     8 9 10&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 
 3 while count &amp;lt; 10&lt;span&gt;:
 4 
 5     count = count + 1
 6     
 7     if count == 7&lt;span&gt;:
 8         continue
 9     
10     print(count)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2、求1-100的所有数的和&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 
 3 sum =&lt;span&gt; 0
 4 
 5 while count &amp;lt; 100&lt;span&gt;:
 6 
 7     count = count + 1
 8 
 9     sum = sum +&lt;span&gt; count
10 
11 print(sum)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、输出 1-100 内的所有奇数&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 
 3 
 4 while count &amp;lt; 100&lt;span&gt;:
 5 
 6     count = count + 1
 7 
 8     if count % 2 == 1&lt;span&gt;:
 9         print&lt;span&gt;(count)
10         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4、输出 1-100 内的所有偶数&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 
 3 
 4 while count &amp;lt; 100&lt;span&gt;:
 5 
 6     count = count + 1
 7 
 8     if count % 2 ==&lt;span&gt; 0:
 9         print&lt;span&gt;(count)
10         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5、求1-2+3-4+5 ... 99的所有数的和&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 sum =&lt;span&gt; 0
 3 
 4 while count &amp;lt; 99&lt;span&gt;:
 5 
 6     count = count + 1
 7 
 8     if count % 2 == 0: #如果是偶数的话，运算符号即为+
 9         sum = sum-&lt;span&gt;count
10 
11     else&lt;span&gt;:
12         sum = sum + count#如果是奇数的话，运算符号即为-
13 
14 print&lt;span&gt;(sum)
15         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6、用户登陆（三次机会重试）&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 1 count =&lt;span&gt; 0
 2 
 3 while&lt;span&gt; True:
 4 
 5     name = input('请输入您的用户名：'&lt;span&gt;)
 6     password = input('请输入您的密码：'&lt;span&gt;)
 7 
 8     if name == 'fuyong' and password == '123'&lt;span&gt;:
 9         print('恭喜您，登录成功！'&lt;span&gt;)
10 
11         break
12 
13     else&lt;span&gt;:
14         print('用户名或者密码错误，请重新输入：'&lt;span&gt;)
15 
16         count = count + 1
17 
18     if count == 3&lt;span&gt;:
19         print('对不起，您以及输入错误3次，登录程序终止'&lt;span&gt;)
20 
21         break&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 18 Dec 2017 14:56:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/8060188.html</dc:identifier>
</item>
<item>
<title>讲讲共线性问题 - JSong</title>
<link>http://www.cnblogs.com/gasongjian/p/8060086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gasongjian/p/8060086.html</guid>
<description>&lt;p&gt;作者：JSong，时间：2017.12.18，公众号：JSong老师&lt;/p&gt;
&lt;p&gt;多重共线性是使用线性回归算法时经常要面对的一个问题。在其他算法中，例如决策树和贝叶斯，前者的建模过程是逐步递进，每次拆分只有一个变量参与，这种建模机制含有抗多重共线性干扰的功能；后者干脆假定变量之间是相互独立的，因此从表面上看，也没有多重共线性的问题。但是对于回归算法，不论是一般回归，逻辑回归，或存活分析，都要同时考虑多个预测因子，因此多重共线性是不可避免需要面对的，在很多时候，多重共线性是一个普遍的现象。在构造预测模型时如何处理多重共线性是一个比较微妙的议题。既不能不加控制，又不能一刀切，认为凡是多重共线性就应该消除。&lt;/p&gt;
&lt;h2 id=&quot;共线性的原理&quot;&gt;1、共线性的原理&lt;/h2&gt;
&lt;p&gt;假设有k个自变量的多元线性回归模型：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[y=\theta_0+\theta_1x_1+\cdots+\theta_kx_k+\varepsilon=X\theta+\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中误差项是一个期望值为0且服从正态分布的随机变量：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\varepsilon\sim\mathcal{N}(0,\sigma^2)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则利用最小二乘法可得参数的估计值为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=X^{\dagger}y=(X^TX)^{-1}X^Ty\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该求解公式唯一的条件是矩阵X是列满秩的，不然会有无穷多解：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=X^{\dagger}y+(I-X^{\dagger}X)\xi\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当各变量之间存在共线性问题，即各变量之间存在部分线性相关时，例如：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[x_3=x_2+x_1+\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;易知此时X近乎是不满秩的（实际情况很难完全共线性），X^TX近乎是奇异的，X的最小奇异值会非常小，那它的影响到底有多大呢？我们先从&lt;strong&gt;矩阵计算&lt;/strong&gt;的角度来看。&lt;/p&gt;
&lt;h3 id=&quot;扰动分析&quot;&gt;1.1 扰动分析&lt;/h3&gt;
&lt;p&gt;对于一个方程或者系统而言，当输入有一个非常微小的扰动时，我们希望方程或系统的输出变化也非常微小，如果输出的变化非常大，且不能被控制，那这个系统的预测就无效了，蝴蝶效应讲的就是这个。在矩阵计算中，这叫做&lt;strong&gt;扰动分析&lt;/strong&gt;。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;【&lt;strong&gt;扰动分析定理&lt;/strong&gt;】设非奇异方阵A满足方程&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Ax=y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;它的精确解为 &lt;span class=&quot;math inline&quot;&gt;\(x^{*}\)&lt;/span&gt;，当A存在一个小扰动时，假设 &lt;span class=&quot;math inline&quot;&gt;\(\hat{x}\)&lt;/span&gt; 是新方程的解：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[(A+\delta\,A)\hat{x}=y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以证明 &lt;span class=&quot;math inline&quot;&gt;\(x^*\)&lt;/span&gt; 的扰动满足：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\frac{||\delta\,x||}{||\hat{x}||}\leq\kappa(A)\frac{||\delta\,A||}{||A||}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以看到矩阵的条件数越大，扰动就越大，即x的求解值会变得非常不准确。回到上面讲的线性回归问题，容易证明最小二乘法的解满足下面的正定方程：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[X^{T}X\hat{\theta}=X^{T}y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\kappa(X^{T}X)=\frac{\lambda_{max}(X^{T}X)}{\lambda_{min}(X^{T}X)}=\frac{\sigma^2_{max}(X)}{\sigma^2_{min}(X)}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当方程有共线性问题时，X的最小特征值非常小，相应的，上述的条件数会非常大。也就是说机器学习中的共线性问题实际上就是矩阵计算中的条件数问题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;从实际应用的角度，一般若K&amp;lt;100，则认为多重共线性的程度很小，若是100&amp;lt;=K&amp;lt;=1000，则认为存在一般程度上的多重共线性，若是K&amp;gt;1000，则就认为存在严重的多重共线性。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;方差分析&quot;&gt;1.2 方差分析&lt;/h3&gt;
&lt;p&gt;再从统计学的角度来看共线性。可以证明参数&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;的协方差矩阵为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Var(\hat{\theta})=Var(\hat{\theta}-\theta)=Var[(X^TX)^{-1}X^T\varepsilon]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;又对任意的常数矩阵A和随机变量x有&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Var(Ax)=A\cdot\,Var(x)\cdot\,A^T\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代入上式即可得&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Var(\hat{\theta})=\sigma^2(X^{T}X)^{-1}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;具体到每个参数，有：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Var(\hat{\theta_i})=\frac{\sigma^2}{(n-1)Var(x_j)}\cdot\frac{1}{1-R_i^2}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;span class=&quot;math inline&quot;&gt;\(R_i^2\)&lt;/span&gt;是将第i个变量&lt;span class=&quot;math inline&quot;&gt;\(x_i\)&lt;/span&gt;作为因变量，其他k-1个变量作为自变量进行线性回归获得的&lt;span class=&quot;math inline&quot;&gt;\(R^2\)&lt;/span&gt;，且令&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\text{VIF}_i=\frac{1}{1-R_i^2}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为&lt;strong&gt;方差膨胀因子&lt;/strong&gt;(variance inflation factor，VIF)。当&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[R_i^2\longrightarrow\,1\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;时，即当第i个变量和其他变量之间存在线性关系时，VIF趋于无穷大。所以 VIF 的大小反应了变量的共线性程度。一般地，当VIF大于5或10时，认为模型存在严重的共线性问题。&lt;/p&gt;
&lt;p&gt;同时考虑参数显著性检验的 &lt;strong&gt;t 统计量&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[t=\frac{\hat{\theta_i}}{std(\hat{\theta_i})}\sim\,t(n-k-1)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当存在共线性时，参数的标准差偏大，相应的 &lt;strong&gt;t 统计量&lt;/strong&gt; 会偏小，这样容易淘汰一些不应淘汰的解释变量，使统计检验的结果失去可靠性。&lt;/p&gt;
&lt;p&gt;另外考虑线性回归的残差&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\varepsilon}=y-X\hat{\theta}=M\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中M是一个投影矩阵，且满足&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[M=I-X(X^{T}X)^{-1}X^{T}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;易证明&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[||\hat{\varepsilon}||_{2}^{2}=\varepsilon^{T}M\varepsilon\leq||M||_F^2\cdot||\varepsilon||_2^2=(n-k)||\varepsilon||_2^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;而矩阵M的范数与X的条件数毫无关系，于是可以得出&lt;strong&gt;共线性并不影响模型的训练精度&lt;/strong&gt;。但是对于泛化精度，由于参数的估计已经不准确啦，所以泛化误差肯定要差些，具体差多少，我还很难用公式表示出来。&lt;/p&gt;
&lt;p&gt;总结一下，共线性问题对线性回归模型有如下影响：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;参数的方差增大；&lt;/li&gt;
&lt;li&gt;难以区分每个解释变量的单独影响；&lt;/li&gt;
&lt;li&gt;变量的显著性检验失去意义；&lt;/li&gt;
&lt;li&gt;回归模型缺乏稳定性。样本的微小扰动都可能带来参数很大的变化；&lt;/li&gt;
&lt;li&gt;影响模型的泛化误差。&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;共线性问题的解决方法&quot;&gt;2、共线性问题的解决方法&lt;/h2&gt;
&lt;p&gt;根据上一节的描述，共线性问题有如下几种检验方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;相关性分析&lt;/strong&gt;。检验变量之间的相关系数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方差膨胀因子VIF&lt;/strong&gt;。当VIF大于5或10时，代表模型存在严重的共线性问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件数检验&lt;/strong&gt;。当条件数大于100、1000时，代表模型存在严重的共线性问题。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当变量数不多，样本数不是很大时，上述的方法是没问题的，检验某个变量有共线性问题时，可以结合实际业务考虑直接剔除该变量。但是有的时候变量数大到有上千个，VIF的计算需要建立上千个回归模型（条件数仅能判定是否存在共线性，但不能找到对应的变量），这将耗费很长时间。&lt;/p&gt;
&lt;p&gt;事实上我们可以从模型角度来直接规避共线性问题。&lt;/p&gt;
&lt;h3 id=&quot;pca等降维法&quot;&gt;2.1 PCA等降维法&lt;/h3&gt;
&lt;p&gt;主成分分析法作为多元统计分析的一种常用方法在处理多变量问题时具有其一定的优越性，其降维的优势是明显的，主成分回归方法对于一般的多重共线性问题还是适用的，尤其是对共线性较强的变量之间。当采取主成分提取了新的变量后，往往这些变量间的组内差异小而组间差异大，起到了消除共线性的问题。&lt;/p&gt;
&lt;h3 id=&quot;逐步回归法&quot;&gt;2.2 逐步回归法&lt;/h3&gt;
&lt;p&gt;逐步回归（Stepwise Regression）是一种常用的消除多重共线性、选取“最优”回归方程的方法。其做法是将逐个引入自变量，引入的条件是该自变量经F检验是显著的，每引入一个自变量后，对已选入的变量进行逐个检验，如果原来引入的变量由于后面变量的引入而变得不再显著，那么就将其剔除。引入一个变量或从回归方程中剔除一个变量，为逐步回归的一步，每一步都要进行F 检验，以确保每次引入新变量之前回归方程中只包含显著的变量。这个过程反复进行，直到既没有不显著的自变量选入回归方程，也没有显著自变量从回归方程中剔除为止。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一&lt;/strong&gt;：建立全部变量的回归方程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二&lt;/strong&gt;：分别建立单独的回归方程，依照t检验和拟合度依次加入各变量来构建回归方程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三&lt;/strong&gt;：判断新引入的变量，对于之前的系数影响是否显著，是否符合实际以及对于拟合度的变量，来选择是否将变量引入模型中。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;岭回归l2正则化ridge-regression&quot;&gt;2.3 岭回归、L2正则化(ridge regression)&lt;/h3&gt;
&lt;p&gt;岭回归是一种可用于共线性数据分析的有偏估计回归方法，它是一种改良的最小二乘估计法，通过放弃最小二乘法的无偏性，以损失部分信息、降低精度为代价获得回归系数更为符合实际、更可靠的回归方法，对条件数很大（病态数据）的拟合要强于最小二乘法。&lt;/p&gt;
&lt;p&gt;在线性回归问题中，最小二乘法实际上是最小化问题：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=\arg_{\theta}\min||X\theta-y||^2_2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;而岭回归则是加入了L2惩罚项：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=\arg_{\theta}\min||X\theta-y||^2_2+C||\theta||^2_2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这样参数的方差不会过大，且随着惩罚项系数C的增大，共线性的影响将越来也小。在这个过程中，可以记录 &lt;span class=&quot;math inline&quot;&gt;\(\theta(k)\)&lt;/span&gt; (岭迹)的变化情况，通过对岭迹的波动来判断我们是否要剔除该变量。&lt;/p&gt;
&lt;p&gt;那为什么说岭回归能解决共线性问题呢？从矩阵计算的角度来看，L2正则化下方程的解为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=(X^{T}X+CI)^{-1}X^{T}y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在上一节我们讲到共线性代表正定矩阵X^T^X的条件数很大:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\kappa(X^{T}X)=\frac{\lambda_{max}(X^{T}X)}{\lambda_{min}(X^{T}X)}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;而当条件数很大时，矩阵的逆的数值计算也是非常不准确的，但是当我们给矩阵加上一个单位矩阵时，奇异性（不可逆）问题就完全没有啦。&lt;/p&gt;
&lt;p&gt;进一步考虑对惩罚项对奇异值的影响，假设X的奇异值（SVD）分解为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[X=U\Sigma\,V^{T}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则容易证明&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=(X^{T}X+CI)^{-1}X^{T}y=VDU^{T}y\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中D是对角矩阵，且满足&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[D_{ii}=\frac{\sigma_i}{\sigma_i^2+C}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其反应了惩罚项是如何影响到条件数的。&lt;/p&gt;
&lt;h3 id=&quot;lasso回归&quot;&gt;2.4 LASSO回归&lt;/h3&gt;
&lt;p&gt;LASSO回归和岭回归类似，只不过将惩罚项由L2范数改为了L1范数&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=\arg_{\theta}\min||X\theta-y||^2_2+C||\theta||^2_1\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;L1范数没有L2范数那么圆润，毕竟存在不可导点，而且在L1范数下LASSO回归也给不出解析解啦，但是相对于岭回归，LASSO估计的参数能更容易收敛到0&lt;/p&gt;
&lt;h3 id=&quot;elasticnet回归等&quot;&gt;2.5 ElasticNet回归等&lt;/h3&gt;
&lt;p&gt;ElasticNet回归同时兼顾了L1和L2惩罚项：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{\theta}=\arg_{\theta}\min||X\theta-y||^2_2+C_1||\theta||^2_1+C_2||\theta||^2_2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当许多变量是相关的时候，Elastic-net是有用的。Lasso一般会随机选择其中一个，而Elastic-net则会选在两个。&lt;/p&gt;
&lt;p&gt;除此之外，还有L0范数（非零元的个数）、L1/2范数等。&lt;/p&gt;
&lt;h2 id=&quot;python实践&quot;&gt;3、Python实践&lt;/h2&gt;
&lt;p&gt;首先捏造一份好的数据，样本量为100，特征数为8，且满足方程：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[y=5x_0+6x_1+7x_2+8x_3+9x_4+10x_5+11x_6+12x_7+\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中误差项是期望为0，标准差为1.5的正态分布随机变量。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;30&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; LinearRegression
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; sklearn &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; cross_validation

coef0&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;])
X1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.random.rand(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)
y&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.dot(X1,coef0)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;np.random.normal(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;fl&quot;&gt;1.5&lt;/span&gt;,size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
training&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.random.choice([&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;],p&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;fl&quot;&gt;0.8&lt;/span&gt;,&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;],size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
lr1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;LinearRegression()
lr1.fit(X1[training],y[training])
&lt;span class=&quot;co&quot;&gt;# 系数的均方误差MSE&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(((lr1.coef_&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;coef0)&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 测试集准确率（R2）&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(lr1.score(X1[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training],y[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training]))
&lt;span class=&quot;co&quot;&gt;# 平均测试集准确率&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(cross_validation.cross_val_score(lr1,X1,y,cv&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;).mean())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时平均准确率为0.934955，拟合的系数MSE为0.203657&lt;/p&gt;
&lt;p&gt;然后我们基于这份数据另外构造出两份数据，第二份数据增加两个随机的特征用作对比，第一份数据则增加两个共线性特征：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[x_8=x_0+x_1+\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[x_9=x_1+x_2+x_3+\varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;X2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.column_stack([X1,np.dot(X1[:,[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]],np.array([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]))&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;np.random.normal(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;fl&quot;&gt;0.05&lt;/span&gt;,size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)])
X2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.column_stack([X2,np.dot(X2[:,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]],np.array([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]))&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;np.random.normal(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;fl&quot;&gt;0.05&lt;/span&gt;,size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)])
X3&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.column_stack([X1,np.random.rand(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先来看下它们的条件数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(np.linalg.cond(X1))
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(np.linalg.cond(X2))
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(np.linalg.cond(X3))
&lt;span class=&quot;fl&quot;&gt;6.29077685383&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;110.930612408&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;7.25066276479&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到X2的条件数很搭，最小奇异值为0.213，此时还不至于完全共线性。&lt;/p&gt;
&lt;p&gt;拿这两份数据重新用线性回归拟合模型。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;lr2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;LinearRegression()
lr2.fit(X2[training],y[training])
&lt;span class=&quot;co&quot;&gt;# 系数的均方误差MSE&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(((lr2.coef_[:&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;coef0)&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 测试集准确率（R2）&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(lr2.score(X2[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training],y[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training]))
&lt;span class=&quot;co&quot;&gt;# 平均测试集准确率&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(cross_validation.cross_val_score(lr2,X2,y,cv&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;).mean())


lr3&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;LinearRegression()
lr3.fit(X3[training],y[training])
&lt;span class=&quot;co&quot;&gt;# 系数的均方误差MSE&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(((lr3.coef_[:&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;coef0)&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 测试集准确率（R2）&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(lr3.score(X3[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training],y[&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;training]))
&lt;span class=&quot;co&quot;&gt;# 平均测试集准确率&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(cross_validation.cross_val_score(lr3,X3,y,cv&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;).mean())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于第二份共线性构造数据X2，有平均测试集准确率为0.932070，拟合的参数MSE为7.697837。可以看到MSE增加了很多，准确率也下降了0.2%，测试拟合的系数为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(lr2.coef_)
[ &lt;span class=&quot;fl&quot;&gt;10.506618&lt;/span&gt;    &lt;span class=&quot;fl&quot;&gt;11.467777&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;6.35562175&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;7.56698262&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;9.44509206&lt;/span&gt;
   &lt;span class=&quot;fl&quot;&gt;9.81032939&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;11.66187822&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;12.29728702&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;5.07439399&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.02649089&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在来看对比用的数据X3，其平均测试集准确率为0.934952，参数MSE为0.171651，与X1无异。&lt;/p&gt;
&lt;p&gt;以上是直接的结果，我们再来看VIF&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; plt
clf&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;LinearRegression()
vif2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.zeros((&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;):
    tmp&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[k &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; k&lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt;i]
    clf.fit(X2[:,tmp],X2[:,i])
    vifi&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;clf.score(X2[:,tmp],X2[:,i]))
    vif2[i]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;vifi

vif3&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.zeros((&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;):
    tmp&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[k &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; k&lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt;i]
    clf.fit(X3[:,tmp],X3[:,i])
    vifi&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;clf.score(X3[:,tmp],X3[:,i]))
    vif3[i]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;vifi  
plt.figure()
ax &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; plt.gca()
ax.plot(vif2)
ax.plot(vif3)
plt.xlabel(&lt;span class=&quot;st&quot;&gt;'feature'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;st&quot;&gt;'VIF'&lt;/span&gt;)
plt.title(&lt;span class=&quot;st&quot;&gt;'VIF coefficients of the features'&lt;/span&gt;)
plt.axis(&lt;span class=&quot;st&quot;&gt;'tight'&lt;/span&gt;)
plt.show()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到第0、1、2、3、8、9个特征的VIF都过高。且可以看出第1个特征相对第0、2、3个特征的VIF较高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/802399/201712/802399-20171218222933521-648044465.png&quot; alt=&quot;10个特征的VIF&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后我们试着用模型的方法来检测共线性问题&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Ridge
plt.figure()
n_alphas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
alphas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.logspace(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,num&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;n_alphas)
coefs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; alphas:
    ridge &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Ridge(alpha&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;a, fit_intercept&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;)
    ridge.fit(X2, y)
    coefs.append(ridge.coef_)
ax &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; plt.gca()
ax.plot(alphas, coefs)
ax.set_xscale(&lt;span class=&quot;st&quot;&gt;'log'&lt;/span&gt;)
handles, labels &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ax.get_legend_handles_labels()
plt.legend(labels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;])
plt.xlabel(&lt;span class=&quot;st&quot;&gt;'alpha'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;st&quot;&gt;'weights'&lt;/span&gt;)
plt.title(&lt;span class=&quot;st&quot;&gt;'Ridge coefficients as a function of the regularization'&lt;/span&gt;)
plt.axis(&lt;span class=&quot;st&quot;&gt;'tight'&lt;/span&gt;)
plt.show()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/802399/201712/802399-20171218223003084-1662665008.png&quot; alt=&quot;岭回归各个系数的岭迹&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中当alpha取0.1时，岭回归估计的系数分别为&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(coefs[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])
[  &lt;span class=&quot;fl&quot;&gt;2.70748655&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.95748918&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;3.53687372&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;5.2073456&lt;/span&gt;    &lt;span class=&quot;fl&quot;&gt;8.70186695&lt;/span&gt;
   &lt;span class=&quot;fl&quot;&gt;9.84484102&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;10.67351759&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;11.74614246&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;2.46502016&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;3.19919212&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到第0、1、2、3、8、9个变量都出现了波动，代表它们之间存在一定的共线性。观察岭迹，我们可以考虑剔除其中波动比较大的第1、8、9个变量。&lt;/p&gt;
&lt;p&gt;另外Lasso回归类似，可以用sklearn中的linear_model.Lasso来学习，这里就不展示了。最后对于逻辑回归任务，sklearn函数内部提供了L1或L2正则化方案，通过它们也可以去检测共线性问题。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1]. &lt;a href=&quot;https://en.wikipedia.org/wiki/Variance_inflation_factor&quot;&gt;variance inflation factor&lt;/a&gt;&lt;br/&gt;[2]. &lt;a href=&quot;http://blog.csdn.net/liunian920305/article/details/73456741&quot;&gt;多重共线性的解决方法之——岭回归与LASSO&lt;/a&gt;&lt;br/&gt;[3]. &lt;a href=&quot;https://en.wikipedia.org/wiki/Tikhonov_regularization&quot;&gt;[ridge regression](https://en.wikipedia.org/wiki/Tikhonov_regularization)&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/802399/201712/802399-20171218223237084-1902603738.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Dec 2017 14:31:00 +0000</pubDate>
<dc:creator>JSong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gasongjian/p/8060086.html</dc:identifier>
</item>
<item>
<title>Scala入门系列（十一）：模式匹配 - 小丑进场</title>
<link>http://www.cnblogs.com/LiCheng-/p/8060059.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiCheng-/p/8060059.html</guid>
<description>&lt;div id=&quot;wmd-preview-section-8048&quot; readability=&quot;15&quot;&gt;
&lt;h2&gt;引言&lt;/h2&gt;
&lt;p&gt;模式匹配是Scala中非常有特色，非常强大的一种功能。&lt;/p&gt;
&lt;p&gt;类似于Java中的switch case语法，但是模式匹配的功能要比它强大得多，switch只能对值进行匹配，但是&lt;strong&gt;Scala的模式匹配除了可以对值进行匹配之外，还可以对类型进行匹配、对Array和List的元素情况进行匹配、对case class进行匹配甚至对有值或没值(Option)进行匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而且在Spark源码中也大量地使用了模式匹配功能。因此为了更好地编写Scala程序，并且更加通畅地看懂Spark源码，学好模式匹配是非常重要的。&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8049&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;基础语法&lt;/h2&gt;
&lt;p&gt;match case的语法如下：&lt;code&gt;变量 match { case 值 =&amp;gt; 代码}&lt;/code&gt;。如果值为下划线，则代表不满足以上所有情况下的默认情况如何处理。此外，match case中，只要一个case分支满足并处理了，就不会继续判断下一个case分支了。（这一点与java不同，java的switch case需要用break阻止）&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;对变量值进行匹配&lt;/h3&gt;
&lt;/p&gt;
&lt;div id=&quot;wmd-preview-section-8051&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 案例：成绩评价&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;judgeGrade&lt;/span&gt;&lt;/span&gt;(grade: &lt;span&gt;String&lt;/span&gt;) {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;grade &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Excellent&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Good&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Just so so&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(&lt;span&gt;&quot;you need work harder&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;judgeGrade: (grade: &lt;span&gt;String&lt;/span&gt;)&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;E&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;you need work harder&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;B&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Good&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;在模式匹配中使用if守卫&lt;/h3&gt;
&lt;/p&gt;
&lt;div id=&quot;wmd-preview-section-8053&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 案例：成绩评价（升级版）&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;def &lt;span&gt;judgeGrade&lt;/span&gt;&lt;span&gt;(name: String, grade: String)&lt;/span&gt;&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;grade match {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Excellent&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Good&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Just so so&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ &lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;&quot;leo&quot;&lt;/span&gt; =&amp;gt; println(name + &lt;span&gt;&quot;, you are a good boy, come on&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(&lt;span&gt;&quot;you need to work harder&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;judgeGrade: (name: String, grade: String)Unit&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;, &lt;span&gt;&quot;E&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;leo, you are a good boy, come on&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;, &lt;span&gt;&quot;E&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;you need to work harder&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8054&quot; readability=&quot;9&quot;&gt;
&lt;h3&gt;在模式匹配中进行变量赋值&lt;/h3&gt;
&lt;p&gt;模式匹配中可以将默认情况即下划线替换为一个变量名，这样模式匹配语法就会将要匹配的值赋值给这个变量，从而可以在后面的处理语句中使用要匹配的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8055&quot; readability=&quot;29&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 案例：成绩评价（升级版）&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;judgeGrade&lt;/span&gt;&lt;/span&gt;(grade: &lt;span&gt;String&lt;/span&gt;){&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;grade &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;you got A grade, excellent!&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;you got B grade, good&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;you got C grade, so so&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; badGrade =&amp;gt; println(&lt;span&gt;&quot;you got &quot;&lt;/span&gt; + badGrade + &lt;span&gt;&quot;grade, i hope that you can get C next time&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;judgeGrade: (grade: &lt;span&gt;String&lt;/span&gt;)&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;E&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;you got &lt;span&gt;Egrade&lt;/span&gt;, i hope that you can get &lt;span&gt;C&lt;/span&gt; next time&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeGrade(&lt;span&gt;&quot;F&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;you got &lt;span&gt;Fgrade&lt;/span&gt;, i hope that you can get &lt;span&gt;C&lt;/span&gt; next time&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8056&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;类型匹配&lt;/h2&gt;
&lt;p&gt;Scala的模式匹配强大之处就在于可以直接匹配类型而不仅仅是值，这也是Java中switch case绝对做不到的。&lt;/p&gt;
&lt;p&gt;匹配类型的语法为&lt;code&gt;case 变量 : 类型 =&amp;gt; 代码&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8057&quot; readability=&quot;29&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 案例：异常处理&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; java.io._&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;processException&lt;/span&gt;&lt;/span&gt;(e: &lt;span&gt;Exception&lt;/span&gt;){&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;e &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; e1:&lt;span&gt;IllegalArgumentException&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;you passed illegal argument, exception is : &quot;&lt;/span&gt; +e1)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; e2:&lt;span&gt;IOException&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;you got an error while doing IO operation!&quot;&lt;/span&gt; + e2)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _:&lt;span&gt;Exception&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;cannot know which exception you have&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;processException: (e: &lt;span&gt;Exception&lt;/span&gt;)&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试能否匹配类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; processException(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;IllegalArgumentException&lt;/span&gt;(&lt;span&gt;&quot;expect two arguments, but found only one&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;you passed illegal argument, exception is : java.lang.&lt;span&gt;IllegalArgumentException&lt;/span&gt;: expect two arguments&lt;/p&gt;
&lt;p&gt;, but found only one&lt;/p&gt;

&lt;p&gt;scala&amp;gt; processException(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArrayIndexOutOfBoundsException&lt;/span&gt;(&lt;span&gt;&quot;array is null.&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;cannot know which exception you have&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8058&quot; readability=&quot;8&quot;&gt;
&lt;h2&gt;对Array和List的元素进行匹配&lt;/h2&gt;
&lt;p&gt;对Array进行模式匹配，分别可以匹配带有指定元素的数组、带有指定个数的数组、以某元素打头的数组。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8059&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;def &lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;(arr: Array[String])&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;arr match {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Hi, Leo!&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;span&gt;(girl1,girl2,girl3)&lt;/span&gt;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Hi, girls, may I know you name? &quot;&lt;/span&gt;+girl1+&lt;span&gt;&quot; &quot;&lt;/span&gt;+girl2+&lt;span&gt;&quot; &quot;&lt;/span&gt;+&lt;/p&gt;
&lt;p&gt;girl3)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;span&gt;(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt;, _*)&lt;/span&gt;&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Hi, leo, please introduce your friends to me.&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(&lt;span&gt;&quot;hey, who are you?&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;greeting: (arr: Array[String])Unit&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; greeting(Array(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;Hi, Leo!&lt;/p&gt;

&lt;p&gt;scala&amp;gt; greeting(Array(&lt;span&gt;&quot;jen&quot;&lt;/span&gt;, &lt;span&gt;&quot;Alice&quot;&lt;/span&gt;, &lt;span&gt;&quot;lory&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;Hi, girls, may I know you name? jen Alice lory&lt;/p&gt;

&lt;p&gt;scala&amp;gt; greeting(Array(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;hey, who are you?&lt;/p&gt;
&lt;p&gt;  &lt;br/&gt;对List进行模式匹配，与Array类似，但是需要使用List特有的 &lt;code&gt;::&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8060&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt;&lt;/span&gt;(list: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;]){&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;list &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;Leo&quot;&lt;/span&gt; :: &lt;span&gt;Nil&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Hi, Leo!&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; girl1 :: girl2 :: girl3 ::&lt;span&gt;Nil&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Hi, girls, nice to meet you.&quot;&lt;/span&gt; + girl1 + &lt;span&gt;&quot; &quot;&lt;/span&gt; + gir&lt;/p&gt;
&lt;p&gt;l2 + &lt;span&gt;&quot; &quot;&lt;/span&gt; + girl3)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;Leo&quot;&lt;/span&gt; :: tail =&amp;gt; println(&lt;span&gt;&quot;Hi, Leo, please introduce your friends to me.&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(&lt;span&gt;&quot;hey, who are you?&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;greeting: (list: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;])&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; greeting(&lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hi&lt;/span&gt;, &lt;span&gt;Leo&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;scala&amp;gt; greeting(&lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;Marry&quot;&lt;/span&gt;, &lt;span&gt;&quot;Alice&quot;&lt;/span&gt;, &lt;span&gt;&quot;lory&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hi&lt;/span&gt;, girls, nice to meet you.&lt;span&gt;Marry&lt;/span&gt; &lt;span&gt;Alice&lt;/span&gt; lory&lt;/p&gt;

&lt;p&gt;scala&amp;gt; greeting(&lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;Sparks&quot;&lt;/span&gt;))&lt;/p&gt;
&lt;p&gt;hey, who are you?&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8061&quot; readability=&quot;15&quot;&gt;
&lt;h2&gt;case class匹配&lt;/h2&gt;
&lt;p&gt;Scala中提供了一种特殊的类，用case class进行声明，中文也可以称作样例类。&lt;strong&gt;case class其实有点类似于Java中的JavaBean的概念。即只定义field，并且由Scala编译时自动提供getter和setter方法，但是没有method&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;case class的主构造函数接收的参数通常不需要使用val或var修饰，Scala自动就会使用val修饰（但是如果你自己使用var修饰，那么还是会按照var来定义）&lt;/p&gt;
&lt;p&gt;Scala自动为case class定义了伴生对象，也就是object，并且定义了apply()方法，该方法接收主构造函数中相同的参数，并返回case class对象。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8062&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 定义case class&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Teacher&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;, subject: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;, classroom: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Worker&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;// 案例：学校门禁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;judgeIdentify&lt;/span&gt;&lt;/span&gt;(p: &lt;span&gt;Person&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;p &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Teacher&lt;/span&gt;(name, subject) =&amp;gt; println(&lt;span&gt;&quot;Teacher, name is &quot;&lt;/span&gt; +name+ &lt;span&gt;&quot;,subject is &quot;&lt;/span&gt; + subject)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(name, classroom) =&amp;gt; println(&lt;span&gt;&quot;Student, name is&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;, classroom is &quot;&lt;/span&gt; + classro&lt;/p&gt;
&lt;p&gt;om)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(&lt;span&gt;&quot;Illegal access, please go out of the school&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Teacher&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Worker&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;judgeIdentify: (p: &lt;span&gt;Person&lt;/span&gt;)&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;// 测试匹配效果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; leo: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;, &lt;span&gt;&quot;class1&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;leo: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;(leo,class1)&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; tom: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Teacher&lt;/span&gt;(&lt;span&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span&gt;&quot;Math&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;tom: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Teacher&lt;/span&gt;(tom,&lt;span&gt;Math&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; jack: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Worker&lt;/span&gt;(&lt;span&gt;&quot;jack&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;jack: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;Worker&lt;/span&gt;(jack)&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeIdentify(leo)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Student&lt;/span&gt;, name isleo, classroom is class1&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeIdentify(tom)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Teacher&lt;/span&gt;, name is tom,subject is &lt;span&gt;Math&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; judgeIdentify(jack)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Illegal&lt;/span&gt; access, please go out of the school&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8063&quot; readability=&quot;13&quot;&gt;
&lt;h2&gt;Option匹配&lt;/h2&gt;
&lt;p&gt;Scala中有一种特殊的类型，叫做Option。Option有两种值，一种是Some，表示有值，一种是None，表示没有值。&lt;/p&gt;
&lt;p&gt;Option通常会用于模式匹配中，用于判断某个变量是有值还是没有值，这比null来的更加简洁明了。&lt;/p&gt;
&lt;p&gt;Spark源码中大量地使用了Option，比如Some(a)、None这种语法。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-8064&quot; readability=&quot;30&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 案例：成绩查询&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;val&lt;/span&gt; grades = &lt;span&gt;Map&lt;/span&gt;(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;&quot;Jack&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt;, &lt;span&gt;&quot;Sparks&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getGrade&lt;/span&gt;&lt;/span&gt;(name: &lt;span&gt;String&lt;/span&gt;) {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; grade = grades.get(name)&lt;/p&gt;
&lt;p&gt;grade &lt;span&gt;match&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;Some&lt;/span&gt;(grade) =&amp;gt; println(&lt;span&gt;&quot;your grade is &quot;&lt;/span&gt; + grade)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;None&lt;/span&gt; =&amp;gt; println(&lt;span&gt;&quot;Sorry, your grade information is not in the system&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}、&lt;/p&gt;

&lt;p&gt;grades: scala.collection.immutable.&lt;span&gt;Map&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;String&lt;/span&gt;] = &lt;span&gt;Map&lt;/span&gt;(&lt;span&gt;Leo&lt;/span&gt; -&amp;gt; &lt;span&gt;A&lt;/span&gt;, &lt;span&gt;Jack&lt;/span&gt; -&amp;gt; &lt;span&gt;B&lt;/span&gt;, &lt;span&gt;Sparks&lt;/span&gt; -&amp;gt; &lt;span&gt;C&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;getGrade: (name: &lt;span&gt;String&lt;/span&gt;)&lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; getGrade(&lt;span&gt;&quot;Leo&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;your grade is &lt;span&gt;A&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; getGrade(&lt;span&gt;&quot;Sparks&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;your grade is &lt;span&gt;C&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; getGrade(&lt;span&gt;&quot;haha&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Sorry&lt;/span&gt;, your grade information is not in the system&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 18 Dec 2017 14:25:00 +0000</pubDate>
<dc:creator>小丑进场</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiCheng-/p/8060059.html</dc:identifier>
</item>
<item>
<title>【JavaScript】 - 小火星_Hirsi</title>
<link>http://www.cnblogs.com/smallmars/p/8053570.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smallmars/p/8053570.html</guid>
<description>&lt;h2 class=&quot;para&quot;&gt;1、简介及历史&lt;/h2&gt;
&lt;p class=&quot;para&quot;&gt;JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。&lt;/p&gt;
&lt;p class=&quot;para&quot;&gt;在1995年时，由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。&lt;/p&gt;
&lt;p class=&quot;para&quot;&gt;为了取得技术优势，微软推出了JScript，CEnvi推出ScriptEase，与JavaScript同样可在浏览器上运行。为了统一规格，因为JavaScript兼容于ECMA标准，因此也称为ECMAScript。&lt;/p&gt;
&lt;h2 class=&quot;para&quot;&gt;2、组成部分&lt;/h2&gt;
&lt;p&gt;一个完整的 JavaScript 实现是由以下 3 个不同部分组成的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;核心（ECMAScript），描述了该语言的语法和基本对象。&lt;/li&gt;
&lt;li&gt;文档对象模型（DOM） Document object model (整合js，css，html)，描述处理网页内容的方法和接口。&lt;/li&gt;
&lt;li&gt;浏览器对象模型（BOM） Broswer object model（整合js和浏览器），描述与浏览器进行交互的方法和接口。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;3、特点及用途&lt;/h2&gt;
&lt;p class=&quot;para&quot;&gt;JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。&lt;/p&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ol readability=&quot;11.5&quot;&gt;&lt;li class=&quot;para&quot; readability=&quot;2&quot;&gt;
&lt;p&gt;脚本语言。JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序的运行过程中逐行进行解释。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;para&quot; readability=&quot;2&quot;&gt;
&lt;p&gt;基于对象。JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;para&quot; readability=&quot;3&quot;&gt;
&lt;p&gt;简单。JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;para&quot; readability=&quot;3&quot;&gt;
&lt;p&gt;动态性。JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。在访问一个网页时,鼠标在网页中进行鼠标点击或上下移、窗口移动等操作JavaScript都可直接对这些事件给出相应的响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;para&quot; readability=&quot;4&quot;&gt;
&lt;p&gt;跨平台性。JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用,前提上机器上的浏览器支 持JavaScript脚本语言,目前JavaScript已被大多数的浏览器所支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;para&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;para&quot;&gt;用途：&lt;/p&gt;
&lt;ol class=&quot;custom_num para-list list-paddingleft-1&quot; readability=&quot;3&quot;&gt;&lt;li class=&quot;list-num-1-1 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;嵌入动态文本于HTML页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-2 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;对浏览器事件做出响应。 &lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-3 list-num-paddingleft-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;读写HTML元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-4 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;在数据被提交到服务器之前验证数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-5 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;检测访客的浏览器信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-6 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;控制cookies，包括创建和修改等。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-num-1-7 list-num-paddingleft-1&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;para&quot;&gt;基于Node.js技术进行服务器端编程。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;1、Js的引入方式&lt;/h2&gt;
&lt;pre&gt;
1 直接编写
    &amp;lt;script&amp;gt;
        alert('hello world')
    &amp;lt;/script&amp;gt;
2 导入文件
    &amp;lt;script src=&quot;hello.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; js的引入&lt;/span&gt;
&lt;span&gt;        alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;script src=&quot;demo.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2、声明变量&lt;/h2&gt;
&lt;p&gt;1、声明变量时不用声明变量类型. 全都使用var关键字;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var a;
a=3;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、&lt;span class=&quot;Apple-tab-span&quot;&gt;一行可以声明多个变量.并且可以是不同类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
var name=&quot;hirsi&quot;, age=20, job=&quot;techer&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、&lt;span class=&quot;Apple-tab-span&quot;&gt;声明变量时 可以不用var. 如果不用var 那么它是全局变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;span class=&quot;Apple-tab-span&quot;&gt;变量命名,首字符&lt;span class=&quot;Apple-tab-span&quot;&gt;只能是字母,下划线,$美元符 三选一，余下的字符可以是下划线、美元符号或任何字母或数字字符且区分大小写，x与X是两个变量　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1e0069ab-e41b-4637-8e36-c02194662ba0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1e0069ab-e41b-4637-8e36-c02194662ba0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1e0069ab-e41b-4637-8e36-c02194662ba0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   单行注释&lt;/span&gt;

         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         多行注释
          &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;


        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var name;      // 声明变量&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; name=&quot;alex&quot;;   // 为变量赋值&lt;/span&gt;
        &lt;span&gt;//
&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; // 简写：&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var age=23;&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多变量变量赋值: 默认以换行符作为语句的分割符,但是规范以分号作为语句分割副本&lt;/span&gt;
         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hirsi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; age&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;;
          alert(name)
        
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;声明变量&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;补充：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Camel 标记法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首字母是小写的，接下来的字母都以大写字符开头。例如：&lt;br/&gt;var myTestValue = 0, mySecondValue = &quot;hi&quot;;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Pascal 标记法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首字母是大写的，接下来的字母都以大写字符开头。例如：&lt;br/&gt;Var MyTestValue = 0, MySecondValue = &quot;hi&quot;;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;匈牙利类型标记法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在以 Pascal 标记法命名的变量前附加一个小写字母（或小写字母序列），说明该变量的类型。例如，i 表示整数，s 表示字符串，如下所示“&lt;br/&gt;Var iMyTestValue = 0, sMySecondValue = &quot;hi&quot;;&lt;/p&gt;

&lt;h2&gt;3、常量及标识符&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;直接在程序中出现的数据值&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;标识符：&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;由不以数字开头的字母、数字、下划线(_)、美元符号($)组成&lt;/li&gt;
&lt;li&gt;常用于表示函数、变量等的名称&lt;/li&gt;
&lt;li&gt;例如：_abc,$abc,abc,abc123是标识符，而1abc不是&lt;/li&gt;
&lt;li&gt;JavaScript语言中代表特定含义的词称为保留字，不允许程序再定义为标识符&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1152926/201712/1152926-20171217221725546-712826816.jpg&quot; alt=&quot;&quot; width=&quot;519&quot; height=&quot;478&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4、数据类型&lt;/h2&gt;
&lt;pre&gt;
基础数据类型:
             数字类型：number----&amp;gt;....
             字符串：string-----&amp;gt;...
             布尔值：boolean------&amp;gt; true,false
             undefined-----&amp;gt;undefined: 两种情况
                           1 变量只声明，未赋值，得到undefined
                           2 当一个函数没有返回值得时候
&lt;/pre&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  基础数据类型:
             数字类型：number----&amp;gt;....
             字符串：string-----&amp;gt;...
             布尔值：boolean------&amp;gt; true,false
             undefined-----&amp;gt;undefined: 两种情况
                           1 变量只声明，未赋值，得到undefined
                           2 当一个函数没有返回值得时候

         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 基础数据类型&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; f&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3.14&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello oldboy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

        console.log(i,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; i);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 10   &quot;number&quot;&lt;/span&gt;
&lt;span&gt;        console.log(f,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; f);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.14 &quot;number&quot;&lt;/span&gt;
&lt;span&gt;        console.log(s,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; s);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  hello oldboy string&lt;/span&gt;
&lt;span&gt;        console.log(b,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; b);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  true &quot;boolean&quot;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt;  n;
        console.log(n,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; n) ; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined &quot;undefined&quot;&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引用数据类型：数组 对象 {&quot;&quot;:&quot;&quot;}&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; arr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; var info={&quot;name&quot;:&quot;egon&quot;,&quot;age&quot;:1000};&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; info&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;};
        console.log(arr[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; arr);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    [11, 22, 33] &quot;object&quot;&lt;/span&gt;
&lt;span&gt;        console.log(info,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; info);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;egon&quot;, age: 1000} &quot;object&quot;&lt;/span&gt;
&lt;span&gt;        console.log(info[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; info);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;egon&quot;, age: 1000} &quot;object&quot;&lt;/span&gt;

        &lt;span&gt;//
&lt;/span&gt;


    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。&lt;/p&gt;

&lt;h2&gt;5、运算符&lt;/h2&gt;
&lt;p&gt;算术运算符：&lt;br/&gt;+ - * / % ++ --&lt;/p&gt;
&lt;p&gt;比较运算符：&lt;br/&gt;&amp;gt; &amp;gt;= &amp;lt; &amp;lt;= != == === !==&lt;/p&gt;
&lt;p&gt;逻辑运算符：&lt;br/&gt;&amp;amp;&amp;amp; || ！&lt;/p&gt;
&lt;p&gt;赋值运算符：&lt;br/&gt;= += -= *= /=&lt;/p&gt;
&lt;p&gt;字符串运算符：&lt;br/&gt;+ 连接，两边操作数有一个或两个是字符串就做连接运算&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 算术运算符：++   --&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;i+=1;   // i=i+1&lt;/span&gt;
&lt;span&gt;        i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; i=i+1&lt;/span&gt;
&lt;span&gt;        console.log(i);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 比较运算符： ===   !==&lt;/span&gt;
&lt;span&gt;        console.log(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;span&gt;        console.log(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;逻辑运算符：&amp;amp;&amp;amp;   ||   ！&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串的拼接 +&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NAN  ：属于Number类型的一个特殊值,当遇到将字符串转成数字无效时,就会得到一个NaN数据&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(+&quot;45abc&quot;)&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.自加自减&lt;/p&gt;
&lt;p&gt;假如x=2，那么x++表达式执行后的值为3，x--表达式执行后的值为1；i++相当于i=i+1，i--相当于i=i-1；&lt;br/&gt;递增和递减运算符可以放在变量前也可以放在变量后：--i&lt;/p&gt;

&lt;p&gt;2.单元运算符&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;javascript plain&quot;&gt;- 除了可以表示减号还可以表示负号  例如：x=-y&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;javascript plain&quot;&gt;+ 除了可以表示加法运算还可以用于字符串的连接  例如：&lt;/code&gt;&lt;code class=&quot;javascript string&quot;&gt;&quot;abc&quot;&lt;/code&gt;&lt;code class=&quot;javascript plain&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;javascript string&quot;&gt;&quot;def&quot;&lt;/code&gt;&lt;code class=&quot;javascript plain&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;javascript string&quot;&gt;&quot;abcdef&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.js不同于python，是一门弱类型语言&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;静态类型语言
一种在编译期间就确定数据类型的语言。大多数静态类型语言是通过要求在使用任一变量之前声明其数据类型来保证这一点的。Java 和 C 是静态类型语言。 
&lt;br/&gt;动态类型语言
一种在运行期间才去确定数据类型的语言，与静态类型相反。VBScript 和 Python 是动态类型的，因为它们确定一个变量的类型是在您第一次给它赋值的时候。 
&lt;br/&gt;强类型语言
一种总是强制类型定义的语言。Java 和 Python 是强制类型定义的。您有一个整数，如果不明确地进行转换 ，不能将把它当成一个字符串去应用。 
&lt;br/&gt;弱类型语言
一种类型可以被忽略的语言，与强类型相反。JS 是弱类型的。在JS中，可以将字符串 '12' 和整数 3 进行连接得到字符串'123'，然后可以把它看成整数 123 ，所有这些都不需要任何的显示转换。 
所以说 Python 既是动态类型语言 (因为它不使用显示数据类型声明)，又是强类型语言 (因为只要一个变量获得了一个数据类型，它实际上就一直是这个类型了)。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4. ==  ===  &lt;/p&gt;
&lt;p&gt;等号和非等号的同类运算符是全等号和非全等号。这两个运算符所做的与等号和非等号相同，只是它们在检查相等性前，不执行类型转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;         console.log(2==2);   #true
         console.log(2==&quot;2&quot;); #true
         console.log(2===&quot;2&quot;);#false
         console.log(2!==&quot;2&quot;);#true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.&lt;/p&gt;
&lt;p&gt;比较运算符两侧如果一个是数字类型,一个是其他类型,会将其类型转换成数字类型.&lt;/p&gt;
&lt;p&gt;比较运算符两侧如果都是字符串类型,比较的是最高位的asc码,如果最高位相等,继续取第二位比较.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var bResult = &quot;Blue&quot; &amp;lt; &quot;alpha&quot;;
alert(bResult); //输出 true　　
在上面的例子中，字符串 &quot;Blue&quot; 小于 &quot;alpha&quot;，因为字母 B 的字符代码是 66，字母 a 的字符代码是 97。
&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6、流程控制&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;顺序结构(从上向下顺序执行)&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;分支结构&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;if-else结构：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if (表达式){
   语句１;
   ......
   } else{
   语句２;
   .....
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;if-elif－else结构：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if (表达式1) {
    语句1;
}else if (表达式2){
    语句2;
}else if (表达式3){
    语句3;
} else{
    语句4;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;switch-case结构&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;switch基本格式
switch (表达式) {
    case 值1:语句1;break;
    case 值2:语句2;break;
    case 值3:语句3;break;
    default:语句4;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;循环结构&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;for循环：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;语法规则：

    for(初始表达式;条件表达式;自增或自减)
    {
            执行语句
            ……
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;for循环的另一种形式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for( 变量 in 数组或对象)
    {
        执行语句
        ……
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;while循环：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;while (条件){
    语句1；
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_7b7c2115-749b-427f-94de-87352ba23e2b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b7c2115-749b-427f-94de-87352ba23e2b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b7c2115-749b-427f-94de-87352ba23e2b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 流程控制语句： 分支控制语句  循环控制语句&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if 分支语句：&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var score=86;&lt;/span&gt;
        &lt;span&gt;//
&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if(score&amp;gt;90){&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     alert(&quot;优秀&quot;)&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; else if (score&amp;gt;80){&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     alert(&quot;凑活&quot;)&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; else {&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     alert(&quot;语句体不及格&quot;)&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        switch(6){&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 1:console.log(1);    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 2:2;    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 3:y=&quot;星期三&quot;;    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 4:y=&quot;星期四&quot;;    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 5:y=&quot;星期五&quot;;    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 6:console.log(999);    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            case 7:y=&quot;星期日&quot;;    break;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            default: y=&quot;未定义&quot;;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;            }&lt;/span&gt;
        
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环结构 :遍历循环  条件循环&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; while循环&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
              &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (count&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;){
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(count&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                       console.log(count);
                   }
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(count&lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;){
                       &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                   }
                   count&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
              }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;for 循环&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方式1： 推荐&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;){
                  console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;for:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,i)
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方式2:&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; arr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;657&lt;/span&gt;&lt;span&gt;];

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; arr){
           console.log(i,arr[i])
        }

        &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; for(var i=0;i&amp;lt;arr.length;i++){&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     console.log(arr[i])&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;

        

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;流程控制&lt;/span&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;异常处理&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;try {
    //这段代码从上往下运行，其中任何一个语句抛出异常该代码块就结束运行
}
catch (e) {
    // 如果try代码块中抛出了异常，catch代码块中的代码就会被执行。
    //e是一个局部变量，用来指向Error对象或者其他抛出的对象
}
finally {
     //无论try中代码是否有异常抛出（甚至是try代码块中有return语句），finally代码块中始终会被执行。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1152926/201712/1152926-20171218213239037-365292830.jpg&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;295&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1、函数&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function 函数名 (参数){ 
    函数体;
    return 返回值;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用 Function 类直接创建函数的语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
var 函数名 = new Function(&quot;参数1&quot;,&quot;参数n&quot;,&quot;function_body&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; func1(name){
        alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;span&gt;
    }
    
        ret&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;func1(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        alert(ret);
    
    
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; func2&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Function(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert(\&quot;hello\&quot;+name);&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    func2(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hirsi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;js的函数加载执行与python不同，它是整体加载完才会执行，所以执行函数放在函数声明上面或下面都可以&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;函数调用&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; func1(a,b){
        
            alert(a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;b);
        }
        
            func1(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;            func1(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;            func1(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NaN&lt;/span&gt;
&lt;span&gt;            func1();     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NaN&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;函数的内置对象arguments&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function add(a,b){

        console.log(a+b);//3
        console.log(arguments.length);//2
        console.log(arguments);//[1,2]

    }
    add(1,2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;匿名函数&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// 匿名函数
    var func = function(arg){
        return &quot;tony&quot;;
    }

// 匿名函数的应用
    (function(){
        alert(&quot;tony&quot;);
    } )()

    (function(arg){
        console.log(arg);
    })('123')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_f92c448b-0eb0-4c2f-9437-ea31816a240d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f92c448b-0eb0-4c2f-9437-ea31816a240d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f92c448b-0eb0-4c2f-9437-ea31816a240d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义函数   调用一个函数   函数的参数和返回值&lt;/span&gt;
&lt;span&gt;        foo();
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return &quot;hello&quot;;&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ret&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;foo();
        console.log(ret);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; add() {
            console.log(arguments);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   arguments是实参集合对象  [3,4,6,8]&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;arguments.length;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                s&lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt;arguments[i]
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return x+y;&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; var ret2=add(3,6,7,9);&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(ret2);&lt;/span&gt;



        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匿名函数&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        function (x) {
            console.log(x)
        }

        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匿名函数的调用&lt;/span&gt;
&lt;span&gt;        (&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x) {
            console.log(x)
        })(&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;)



    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;函数&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;2.Date对象&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//方法1：不指定参数
var nowd1=new Date();
alert(nowd1.toLocaleString( ));
//方法2：参数为日期字符串
var nowd2=new Date(&quot;2004/3/20 11:12&quot;);
alert(nowd2.toLocaleString( ));
var nowd3=new Date(&quot;04/03/20 11:12&quot;);
alert(nowd3.toLocaleString( ));
//方法3：参数为毫秒数
var nowd3=new Date(5000);
alert(nowd3.toLocaleString( ));
alert(nowd3.toUTCString());

//方法4：参数为年月日小时分钟秒毫秒
var nowd4=new Date(2004,2,20,11,12,0,300);
alert(nowd4.toLocaleString( ));//毫秒并不直接显示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;获取日期或时间的方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;getDate()                 获取日
getDay ()                 获取星期
getMonth ()               获取月（0-11）
getFullYear ()            获取完整年份
getYear ()                获取年
getHours ()               获取小时
getMinutes ()             获取分钟
getSeconds ()             获取秒
getMilliseconds ()        获取毫秒
getTime ()                返回累计毫秒数(从1970/1/1午夜)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;设置日期或时间的方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//设置日期和时间
//setDate(day_of_month)       设置日
//setMonth (month)                 设置月
//setFullYear (year)               设置年
//setHours (hour)         设置小时
//setMinutes (minute)     设置分钟
//setSeconds (second)     设置秒
//setMillliseconds (ms)       设置毫秒(0-999)
//setTime (allms)     设置累计毫秒(从1970/1/1午夜)
    
var x=new Date();
x.setFullYear (1997);    //设置年1997
x.setMonth(7);        //设置月7
x.setDate(1);        //设置日1
x.setHours(5);        //设置小时5
x.setMinutes(12);    //设置分钟12
x.setSeconds(54);    //设置秒54
x.setMilliseconds(230);        //设置毫秒230
document.write(x.toLocaleString( )+&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;);
//返回1997年8月1日5点12分54秒

x.setTime(870409430000); //设置累计毫秒数
document.write(x.toLocaleString( )+&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;);
//返回1997年8月1日12点23分50秒&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;日期或时间转换的方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;
getTimezoneOffset():8个时区×15度×4分/度=480;
返回本地时间与GMT的时间差，以分钟为单位
toUTCString()
返回国际标准时间字符串
toLocalString()
返回本地格式时间字符串
Date.parse(x)
返回累计毫秒数(从1970/1/1午夜到本地时间)
Date.UTC(x)
返回累计毫秒数(从1970/1/1午夜到国际时间)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、Math对象&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;
abs(x)    返回数的绝对值。
exp(x)    返回 e 的指数。
floor(x)对数进行下舍入。
log(x)    返回数的自然对数（底为e）。
max(x,y)    返回 x 和 y 中的最高值。
min(x,y)    返回 x 和 y 中的最低值。
pow(x,y)    返回 x 的 y 次幂。
random()    返回 0 ~ 1 之间的随机数。
round(x)    把数四舍五入为最接近的整数。
sin(x)    返回数的正弦。
sqrt(x)    返回数的平方根。
tan(x)    返回角的正切。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//方法练习:
        //alert(Math.random()); // 获得随机数 0~1 不包括1.
        //alert(Math.round(1.5)); // 四舍五入
        //练习：获取1-100的随机整数，包括1和100
             //var num=Math.random();
             //num=num*10;
             //num=Math.round(num);
             //alert(num)
        //============max  min=========================
        /* alert(Math.max(1,2));// 2
        alert(Math.min(1,2));// 1 */
        //-------------pow--------------------------------
        alert(Math.pow(2,4));// pow 计算参数1 的参数2 次方.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4、String对象&lt;/h2&gt;
&lt;p&gt;字符串创建(两种方式)&lt;br/&gt;       ① 变量 = “字符串”&lt;br/&gt;       ② 字串对象名称 = new String (字符串)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var str1=&quot;hello world&quot;;
var str1= new String(&quot;hello word&quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;s1&quot;&gt;字符串对象的属性和函数&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; x.length         －－－－获取字符串的长度
 x.toLowerCase()        －－－－转为小写
 x.toUpperCase()        －－－－转为大写
 x.trim()               －－－－去除字符串两边空格       


－－－－字符串查询方法

x.charAt(index) －－－－获取指定位置字符，其中index为要获取的字符索引

x.indexOf(findstr,index)－－－－查询字符串位置
x.lastIndexOf(findstr)  

x.match(regexp)         －－－－match返回匹配字符串的数组，如果没有匹配则返回null
x.search(regexp)        －－－－search返回匹配字符串的首字符位置索引

示例：
var str1=&quot;welcome to the world of JS!&quot;;
var str2=str1.match(&quot;world&quot;);
var str3=str1.search(&quot;world&quot;);
alert(str2[0]);  // 结果为&quot;world&quot;
alert(str3);     // 结果为15
                        

－－－－子字符串处理方法

x.substr(start, length) －－－－start表示开始位置，length表示截取长度
x.substring(start, end) －－－－end是结束位置

x.slice(start, end)     －－－－切片操作字符串
                       
 示例：
                           
 var str1=&quot;abcdefgh&quot;;
                           
 var str2=str1.slice(2,4);
                           
 var str3=str1.slice(4);
                          
  var str4=str1.slice(2,-1);
                          
 var str5=str1.slice(-3,-1);

                        
    alert(str2); //结果为&quot;cd&quot;
                            
                        
    alert(str3); //结果为&quot;efgh&quot;
                            
                         
   alert(str4); //结果为&quot;cdefg&quot;
                            
                        
    alert(str5); //结果为&quot;fg&quot;


x.replace(findstr,tostr) －－－－    字符串替换

x.split();                 －－－－分割字符串
                               
示例： 
 var str1=&quot;一,二,三,四,五,六,日&quot;; 
                             
   var strArray=str1.split(&quot;,&quot;);
                            
    alert(strArray[1]);//结果为&quot;二&quot;
                                
x.concat(addstr)         －－－－    拼接字符串&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5、Array（数组）对象&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;创建方式1:
var arrname = [元素0,元素1,….];          // var arr=[1,2,3];

创建方式2:
var arrname = new Array(元素0,元素1,….); // var test=new Array(100,&quot;a&quot;,true);

创建方式3:
var arrname = new Array(长度); 
           &lt;br/&gt;//  初始化数组对象:
                var cnweek=new Array(7);
                    cnweek[0]=&quot;星期日&quot;;
                    cnweek[1]=&quot;星期一&quot;;
                    ...
                    cnweek[6]=&quot;星期六&quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;数组的对象及方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;join方法：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;x.join(bystr)       －－－－将数组元素拼接成字符串

                var arr1=[1, 2, 3, 4, 5, 6, 7];
                var str1=arr1.join(&quot;-&quot;);
                alert(str1);  //结果为&quot;1-2-3-4-5-6-7&quot; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;concat方法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;x.concat(value,...)    －－－－ 用于连接两个或多个数组。
                   var a = [1,2,3];
                  var b=a.concat(4,5) ;
                  alert(a.toString());  //返回结果为1,2,3            
                  alert(b.toString());  //返回结果为1,2,3,4,5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;数组排序-reverse sort：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var arr1=[32, 12, 111, 444];
//var arr1=[&quot;a&quot;,&quot;d&quot;,&quot;f&quot;,&quot;c&quot;];

arr1.reverse(); //颠倒数组元素
alert(arr1.toString());
//结果为444,111,12,32

arr1.sort();    //排序数组元素
alert(arr1.toString());
//结果为111,12,32,444&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;数组切片操作：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//x.slice(start, end)

//x代表数组对象
//start表示开始位置索引
//end是结束位置下一数组元素索引编号
//第一个数组元素索引为0
//start、end可为负数，-1代表最后一个数组元素
//end省略则相当于从start位置截取以后所有数组元素

var arr1=['a','b','c','d','e','f','g','h'];
var arr2=arr1.slice(2,4);
var arr3=arr1.slice(4);
var arr4=arr1.slice(2,-1);

alert(arr2.toString());
//结果为&quot;c,d&quot; 
alert(arr3.toString());
//结果为&quot;e,f,g,h&quot;
alert(arr4.toString());
//结果为&quot;c,d,e,f,g&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;删除子数组：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//x. splice(start, deleteCount, value, ...)

//x代表数组对象
//splice的主要用途是对数组指定位置进行删除和插入
//start表示开始位置索引
//deleteCount删除数组元素的个数
//value表示在删除位置插入的数组元素
//value参数可以省略       
        
var a = [1,2,3,4,5,6,7,8];
a.splice(1,2);

alert(a.toString());//a变为 [1,4,5,6,7,8]

a.splice(1,1);

alert(a.toString());//a变为[1,5,6,7,8]

a.splice(1,0,2,3);

alert(a.toString());//a变为[1,2,3,5,6,7,8]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;数组的push和pop：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//push pop这两个方法模拟的是一个栈操作

//x.push(value, ...)  压栈
//x.pop()             弹栈      

//x代表数组对象
//value可以为字符串、数字、数组等任何值
//push是将value值添加到数组x的结尾
//pop是将数组x的最后一个元素删除


var arr1=[1,2,3];
arr1.push(4,5);
alert(arr1);
//结果为&quot;1,2,3,4,5&quot;
arr1.push([6,7]);
alert(arr1)
//结果为&quot;1,2,3,4,5,6,7&quot;
arr1.pop();
alert(arr1);
//结果为&quot;1,2,3,4,5&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;数组的shift和unshift：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//x.unshift(value,...)
//x.shift()
//使用注解

//x代表数组对象
//value可以为字符串、数字、数组等任何值
//unshift是将value值插入到数组x的开始
//shift是将数组x的第一个元素删除

var arr1=[1,2,3];
arr1.unshift(4,5);
alert(arr1);  //结果为&quot;4,5,1,2,3&quot;

arr1. unshift([6,7]);
alert(arr1);  //结果为&quot;6,7,4,5,1,2,3&quot;

arr1.shift();
alert(arr1);  //结果为&quot;4,5,1,2,3&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_94254e9f-811b-403c-a103-809def1ab21e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94254e9f-811b-403c-a103-809def1ab21e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94254e9f-811b-403c-a103-809def1ab21e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串对象&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello wolrd  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            console.log(s.toUpperCase());
            console.log(s.charAt(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;));    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过索引找字符&lt;/span&gt;
&lt;span&gt;            console.log(s.indexOf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过字符找索引&lt;/span&gt;
&lt;span&gt;            console.log(s.replace(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串的替换&lt;/span&gt;
&lt;span&gt;            console.log(s.split(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串分割成数组&lt;/span&gt;
&lt;span&gt;            console.log(s.substr(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;));   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  截断方法&lt;/span&gt;
&lt;span&gt;            console.log(s.substring(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 截断方法&lt;/span&gt;
&lt;span&gt;            console.log(s.slice(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 切片方法  s[2:-1]&lt;/span&gt;
&lt;span&gt;
            console.log(s.trim()) ;        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去除两端空格&lt;/span&gt;
&lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组对象  []&lt;/span&gt;
           &lt;span&gt;var&lt;/span&gt;&lt;span&gt; arr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;];
           console.log(arr[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历&lt;/span&gt;
           &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;arr.length;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
               console.log(arr[i])
           }

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; push pop      shift unshift&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var arr=[111,222,333,444];&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; arr.push(555);&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(arr);    // [111, 222, 333, 444, 555]&lt;/span&gt;
           &lt;span&gt;//
&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var ret=arr.pop();&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  console.log(ret);&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  console.log(arr);&lt;/span&gt;
           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;/ ===========&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt;&lt;span&gt; arr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;444&lt;/span&gt;&lt;span&gt;];
              arr.unshift(&lt;/span&gt;&lt;span&gt;555&lt;/span&gt;&lt;span&gt;);
              console.log(arr);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  [555, 111, 222, 333, 444]&lt;/span&gt;

              &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ret&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;arr.shift();
              console.log(ret);
              console.log(arr);

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; date对象&lt;/span&gt;
              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  当前时间对象&lt;/span&gt;
              &lt;span&gt;var&lt;/span&gt;&lt;span&gt; date&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
              console.log(date.toString()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sun Dec 17 2017 15:33:23 GMT+0800 (中国标准时间)&lt;/span&gt;
&lt;span&gt;              console.log(date.toLocaleString()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2017/12/17 下午3:36:09&lt;/span&gt;
             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体时间对象&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; date1&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2012,12,12 08:12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                console.log(date1.toString());
                console.log(date1.toLocaleString()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012/12/12 上午12:00:00&lt;/span&gt;

             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取时间片信息&lt;/span&gt;
&lt;span&gt;                console.log(date.getFullYear());  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017&lt;/span&gt;
&lt;span&gt;                console.log(date.getDate());     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 17号&lt;/span&gt;
&lt;span&gt;                console.log(date.getDay());      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;                console.log(date.getHours());    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;


           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Math对象&lt;/span&gt;
&lt;span&gt;

             console.log(Math.abs(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
             console.log(Math.random());
             console.log(Math.round(&lt;/span&gt;&lt;span&gt;3.64&lt;/span&gt;&lt;span&gt;));
             console.log(Math.floor(&lt;/span&gt;&lt;span&gt;3.14&lt;/span&gt;&lt;span&gt;));  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向下取整&lt;/span&gt;
&lt;span&gt;             console.log(Math.ceil(&lt;/span&gt;&lt;span&gt;3.64&lt;/span&gt;&lt;span&gt;));  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向上取整&lt;/span&gt;





    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;js的对象&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;补充：&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;1、定义&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;BOM（Browser Object Document）即浏览器对象模型。&lt;/p&gt;
&lt;p&gt;BOM提供了独立于内容 而与浏览器窗口进行交互的对象；&lt;/p&gt;
&lt;p&gt;由于BOM主要用于管理窗口与窗口之间的通讯，因此其核心对象是window；&lt;/p&gt;
&lt;p&gt;BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;window对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有浏览器都支持 window 对象。&lt;br/&gt;概念上讲.一个html文档对应一个window对象.&lt;br/&gt;功能上讲: 控制浏览器窗口的.&lt;br/&gt;使用上讲: window对象不需要创建对象,直接使用即可&lt;/p&gt;

&lt;h2&gt;2、windows对象的方法&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;alert()            显示带有一段消息和一个确认按钮的警告框。
confirm()          显示带有一段消息以及确认按钮和取消按钮的对话框。
prompt()           显示可提示用户输入的对话框。

open()             打开一个新的浏览器窗口或查找一个已命名的窗口。
close()            关闭浏览器窗口。

setInterval()      按照指定的周期（以毫秒计）来调用函数或计算表达式。
clearInterval()    取消由 setInterval() 设置的 timeout。
setTimeout()       在指定的毫秒数后调用函数或计算表达式。
clearTimeout()     取消由 setTimeout() 方法设置的 timeout。
scrollTo()         把内容滚动到指定的坐标。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、方法使用&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;alert confirm prompt以及open函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//----------alert confirm prompt----------------------------
    //alert('aaa');
    
    
    /* var result = confirm(&quot;您确定要删除吗?&quot;);
    alert(result); */

    //prompt 参数1 : 提示信息.   参数2:输入框的默认值. 返回值是用户输入的内容.

    // var result = prompt(&quot;请输入一个数字!&quot;,&quot;haha&quot;);
    // alert(result);


    方法讲解:    
        //open方法 打开和一个新的窗口 并 进入指定网址.参数1 : 网址.
        //调用方式1
            //open(&quot;http://www.baidu.com&quot;);
        //参数1 什么都不填 就是打开一个新窗口.  参数2.填入新窗口的名字(一般可以不填). 参数3: 新打开窗口的参数.
            open('','','width=200,resizable=no,height=100'); // 新打开一个宽为200 高为100的窗口
        //close方法  将当前文档窗口关闭.
            //close();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setInterval，clearInterval&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;语法：     setInterval(code,millisec)
其中，code为要调用的函数或要执行的代码串。millisec周期性执行或调用 code 之间的时间间隔，以毫秒计。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7b24052c-0f24-4e66-a298-d81c5b74bd02&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b24052c-0f24-4e66-a298-d81c5b74bd02&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b24052c-0f24-4e66-a298-d81c5b74bd02&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;ID1&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;begin()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;end()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;停止&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; showTime(){
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nowd2&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().toLocaleString();
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; temp&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ID1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
           temp.value&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;nowd2;

    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; ID;
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; begin(){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ID&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;undefined){
             showTime();
             ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;setInterval(showTime,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; end(){
        clearInterval(ID);
        ID&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;undefined;


    }

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;示例&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 18 Dec 2017 14:17:00 +0000</pubDate>
<dc:creator>小火星_Hirsi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smallmars/p/8053570.html</dc:identifier>
</item>
<item>
<title>Nginx 反向代理 负载均衡 虚拟主机配置 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/8059000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/8059000.html</guid>
<description>&lt;p&gt;通过本章你将学会利用Nginx配置多台虚拟主机，清楚代理服务器的作用，区分正向代理和反向代理的区别，搭建使用Nginx反向搭理和负载均衡，了解Nginx常用配置的说明。即学即用，你还在等什么？一睹为快先了解Nginx的三大功能&lt;br/&gt;Nginx 可以作为一台http服务器。可以做网站静态服务器，比如图片服务器，高效，减轻服务器压力。同时它也支持https服务。&lt;br/&gt;Nginx 可以配置多台虚拟主机。可以实现在一台服务器虚拟出多个网站效果，省钱。&lt;br/&gt;Nginx 最重要的是反向代理，负载均衡。在服务器集群中，通过Nginx通过反向代理让性能高的服务器分担更多的负载，从而实现负载均衡的效果，利用率高。&lt;/p&gt;
&lt;p&gt;效果图：包含基于ip的虚拟主机测试，基于域名的虚拟主机测试，反向代理和负载均衡的测试&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171218213222850-1797482676.gif&quot;/&gt;&lt;br/&gt;环境：CentOS 7 ， nginx-1.13.6 ，&lt;br/&gt;说明：Nginx 反向代理和负载均衡的操作前提都是基于域名的虚拟主机。不同的tomcat模拟不同的服务器，和生产环境最大的区别就是ip和port&lt;br/&gt;Nginx 安装：&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/7850985.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/itdragon/p/7850985.html&lt;/a&gt;&lt;br/&gt;Nginx http服务器：&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/7864916.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/itdragon/p/7864916.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置多台虚拟主机&quot;&gt;配置多台虚拟主机&lt;/h2&gt;
&lt;p&gt;虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机都可以独立对外提供www服务。从而实现一台主机能对外提供多个web服务，而且每个虚拟主机之间是互不影响的。&lt;br/&gt;Nginx提供了三种虚拟主机配置方式，1、基于ip的虚拟主机，2、基于端口的虚拟主机，3、基于域名的虚拟主机。最常用的是第三种，相对于 ip地址和端口号，域名更方便记忆和使用。&lt;/p&gt;
&lt;h3 id=&quot;基于ip的虚拟主机&quot;&gt;基于ip的虚拟主机&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;[root@itdragon ~]# cd /etc/sysconfig/network-scripts/
[root@itdragon network-scripts]# ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1
2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    inet 192.168.225.131/24 brd 192.168.225.255 scope global dynamic ens33
[root@itdragon network-scripts]# vim ifcfg-ens33    
# 添加
IPADDR1=&quot;192.168.225.132&quot;
IPADDR2=&quot;192.168.225.133&quot;
[root@itdragon network-scripts]# systemctl restart network
[root@itdragon network-scripts]# ip addr
2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    inet 192.168.225.131/24 brd 192.168.225.255 scope global dynamic ens33
    inet 192.168.225.132/24 brd 192.168.225.255 scope global secondary ens33
    inet 192.168.225.133/24 brd 192.168.225.255 scope global secondary ens33
[root@itdragon ~]# cd /usr/local/nginx
[root@itdragon nginx]# cp -r html/ html-131/
[root@itdragon nginx]# cp -r html/ html-132/
[root@itdragon nginx]# cp -r html/ html-133/
[root@itdragon nginx]# vim html-131/index.html
[root@itdragon nginx]# vim html-132/index.html
[root@itdragon nginx]# vim html-133/index.html
[root@itdragon nginx]# vim conf/nginx.conf
# 添加
server {
    listen       80;
    server_name  192.168.225.132;
    location / {
       root   html-132;
       index  index.html index.htm;
    }
}   
server {
    listen       80;
    server_name  192.168.225.133;
    location / {
       root   html-133;
       index  index.html index.htm;
    }
}
[root@itdragon nginx]# sbin/nginx -s reload&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：执行命令ip addr 打印协议地址,得知网卡名是ens33，ip地址是192.168.225.131&lt;br/&gt;第二步：进入到/etc/sysconfig/network-scripts/ 修改ifcfg-ens33 文件添加两个ip地址&lt;br/&gt;第三步：重启网络，并检查配置是否生效，发现ens33对应三个ip地址&lt;br/&gt;第四步：进入到/usr/local/nginx/ 目录下，拷贝三份html目录，并分别修改index.html 文件便于区分测试&lt;br/&gt;第五步：修改Nginx配置文件，监听的端口不变，修改server_name为对应ip地址，修改root为对应的html目录&lt;br/&gt;第六步：重启Nginx服务，在浏览器上分别访问三个ip地址，观察页面变化&lt;br/&gt;若你发现不同的ip地址打印不同页面，和效果图相似，则代表配置成功。&lt;/p&gt;
&lt;p&gt;基于端口的虚拟主机和基于ip的虚拟主机配置几乎一样，只是在修改Nginx配置文件时，只修改监听的端口和root对应的目录，其他的没有变。这里就不贴命令了。&lt;/p&gt;
&lt;h3 id=&quot;基于域名的虚拟主机&quot;&gt;基于域名的虚拟主机&lt;/h3&gt;
&lt;p&gt;这是Nginx比较常用的配置，也是有利于人类使用的配置方式。这里通过修改window系统下的host文件来模拟DNS服务器。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Windows
C:\Windows\System32\drivers\etc\hosts文件
# nginx 域名配置虚拟主机
192.168.225.131 www.itdragon.com
192.168.225.131 picture.itdragon.com
192.168.225.131 search.itdragon.com

# CentOS
[root@itdragon nginx]# cp -r html/ html-search
[root@itdragon nginx]# cp -r html/ html-picture
[root@itdragon nginx]# vim html-search/index.html 
[root@itdragon nginx]# vim html-picture/index.html
[root@itdragon nginx]# vim conf/nginx.conf
server {
    listen       80;
    server_name  search.itdragon.com;
    location / {
       root   html-search;
       index  index.html index.htm;
    }
}
server {
    listen       80;
    server_name  picture.itdragon.com;
    location / {
       root   html-picture;
       index  index.html index.htm;
    }
}
[root@itdragon nginx]# sbin/nginx -s reload&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：在window环境中，修改host文件，添加ip 域名映射关系，用来模拟DNS服务器&lt;br/&gt;第二步：进入到/usr/local/nginx/ 目录下，拷贝两份html目录，分别修改index.html 文件便于区分测试&lt;br/&gt;第三步：修改Nginx配置文件，监听的端口不变，修改server_name为对应域名地址，修改root为对应的html目录&lt;br/&gt;第四步：重启Nginx服务，在浏览器上分别访问两个域名地址，观察页面变化&lt;br/&gt;若你发现不同的域名地址打印不同页面，和效果图相似，则代表配置成功。&lt;/p&gt;
&lt;h2 id=&quot;nginx-反向代理&quot;&gt;Nginx 反向代理&lt;/h2&gt;
&lt;p&gt;在了解Nginx 反向代理之前，我们先熟悉一下什么是代理服务器&lt;br/&gt;&lt;strong&gt;代理服务器&lt;/strong&gt;：是一个夹在客户机和目标主机中间的服务器。能提高客户机访问响应速度，还能设置防火墙过滤不安全信息。&lt;br/&gt;&lt;strong&gt;响应速度快&lt;/strong&gt;：客户机发送请求，代理服务器接收请求后，再转发给目标主机。目标主机接收请求并将数据返回给代理服务器，代理服务器将数据返回给客户机同时也会保存数据到本地。若客户机下次有相同的请求，则直接从本地数据返回。从而提高了响应的速度。&lt;br/&gt;&lt;strong&gt;设置防火墙&lt;/strong&gt;：因为代理服务器夹在客户机和目标主机中间。客户机所有的请求都会经过代理服务器，所以如果在代理服务器上设置防火墙，则可以过滤一些不安全的信息，同时也方便管理。&lt;/p&gt;
&lt;p&gt;清楚了代理服务器后，我们再来了解正向代理和反向代理的区别&lt;br/&gt;&lt;strong&gt;正向代理&lt;/strong&gt;：顾客：&quot;服务员，我就要厨师A做的七彩红烧肉&quot;; 服务员：&quot;好嘞，我这就安排厨师A给您做！&quot;&lt;br/&gt;&lt;strong&gt;反向代理&lt;/strong&gt;：顾客：&quot;服务员，我要一份七彩红烧肉&quot;; 服务员：&quot;好嘞，我们的厨师B炒菜贼好吃！&quot;&lt;br/&gt;不知道大家看懂没有。顾客就是客户机，服务员就是代理服务器，厨师们就是目标主机。正向代理就相当于客户机明确指定目标主机提供服务(目标主机被动接收请求)。反向代理就相当于客户机提供需求，代理服务器从一群目标主机中找一台去实现该需求(目标主机主动接收请求)。&lt;/p&gt;
&lt;p&gt;现在开始配置Nginx的反向代理&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@itdragon ~]# vim /usr/local/solr/tomcat1/webapps/ROOT/index.jsp 
[root@itdragon ~]# vim /usr/local/solr/tomcat2/webapps/ROOT/index.jsp
[root@itdragon ~]# cd /usr/local/nginx
[root@itdragon nginx]# vim conf/nginx.conf
upstream searchserver {
    server 192.168.225.133:8081;
}
upstream pictureserver {
    server 192.168.225.133:8082;
}
server {
    listen       80;
    server_name  search.itdragon.com;
    location / {
       proxy_pass   http://searchserver;
       index  index.html index.htm;
    }
}
server {
    listen       80;
    server_name  picture.itdragon.com;
    location / {
       proxy_pass   http://pictureserver;
       index  index.html index.htm;
    }
}
[root@itdragon nginx]# sbin/nginx -s reload&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：准备两个tomcat服务器，端口分别是8081和8082，并分别修改index.jsp 文件便于区分测试&lt;br/&gt;第二步：进入到/usr/local/nginx/ 目录下，修改Nginx配置文件。upstream 定义每个设备的状态，server 配置服务，server_name 指定域名，proxy_pass 代理转发到那台设备上&lt;br/&gt;第三步：重启服务，在浏览器上输入不同的域名，会跳到对应的页面&lt;br/&gt;Nginx的反向代理其实是在做请求的转发，后台有多个http服务器提供服务，Nginx的功能就是把请求转发给后面的服务器，并决定把请求转发给哪台服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反向代理流程&lt;/strong&gt;&lt;br/&gt;浏览器访问search.itdragon.com，通过本地host文件域名解析，找到192.168.225.131 Nginx虚拟主机，Nginx接收客户机请求，找到server_name为search.itdragon.com的节点，再根据proxy_pass对应的http路径，将请求转发到upstream searchserver上，即端口号为8081的tomcat服务器。&lt;br/&gt;客户机访问 ---&amp;gt; search.itdragon.com ---&amp;gt; host ---&amp;gt; Nginx ---&amp;gt; server_name ---&amp;gt; proxy_pass ---&amp;gt; upstream---&amp;gt; tomcat&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171218145543459-1272979290.png&quot; alt=&quot;反向代理流程&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;nginx-负载均衡&quot;&gt;Nginx 负载均衡&lt;/h2&gt;
&lt;p&gt;负载均衡 在高性能的主机上分配更多的负载，在性能低的主机分配少一些的负载，充分利用主机的性能，将其服务器的总压力。Nginx的 upstream默认是以轮询的方式实现负载均衡，也可以分配权值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@itdragon ~]# vim /usr/local/solr/tomcat3/webapps/ROOT/index.jsp 
[root@itdragon ~]# vim /usr/local/solr/tomcat4/webapps/ROOT/index.jsp
[root@itdragon ~]# cd /usr/local/nginx
[root@itdragon nginx]# vim conf/nginx.conf
upstream pictureserver {
    server 192.168.225.133:8082 weight=2;
    server 192.168.225.133:8083 weight=1;
    server 192.168.225.133:8084 weight=1;
}
[root@itdragon nginx]# sbin/nginx -s reload&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：新增两个tomcat服务器，端口分别为8083和8084，并分别修改index.jsp 文件便于区分测试&lt;br/&gt;第二步：进入到/usr/local/nginx/ 目录下，修改Nginx配置文件，在pictureserver 内新增两个server&lt;br/&gt;第三步：重启服务&lt;br/&gt;负载均衡的配置是在反向代理的基础上修改的，所以请先完成反向代理的配置。&lt;/p&gt;
&lt;h2 id=&quot;常用配置说明&quot;&gt;常用配置说明&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;events {                                        # 工作模式
    worker_connections  1024;                   # 最大连接数
}
http {                                          # 配置http服务器
    include       mime.types;                   # 定义mime的文件类型
    default_type  application/octet-stream;     # 默认文件类型
    sendfile        on;                         # 开启 sendfile 函数（zero copy 方式）输出文件
    keepalive_timeout  65;                      # 连接超时时间,单位秒
    
    upstream pictureserver {                    # 定义负载均衡设备的ip和状态
        server 192.168.225.133:8081 ;           # 默认权重值为一
        server 192.168.225.133:8082 weight=2;   # 值越高，负载的权重越高
        server 192.168.225.133:8083 down;       # 当前server 暂时不参与负载
        server 192.168.225.133:8084 backup;     # 当其他非backup状态的server 不能正常工作时，才请求该server，简称热备
    }
    server {                                    # 设定虚拟主机配置
        listen  80;                             # 监听的端口
        server_name  picture.itdragon.com;      # 监听的地址，多个域名用空格隔开
        location / {                            # 默认请求 ，后面 &quot;/&quot; 表示开启反向代理，也可以是正则表达式
           root     html;                       # 监听地址的默认网站根目录位置
           proxy_pass   http://pictureserver;   # 代理转发
           index  index.html index.htm;         # 欢迎页面
           deny 127.0.0.1;                      # 拒绝的ip
           allow 192.168.225.133;               # 允许的ip
        }
        error_page   500 502 503 504  /50x.html;# 定义错误提示页面     
        location = /50x.html {                  # 配置错误提示页面
            root   html;
        }
    }
    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体配置详情可以参考：&lt;a href=&quot;http://blog.csdn.net/happydream_c/article/details/54943802&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/happydream_c/article/details/54943802&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;1 Nginx 通过修改nginx.conf server_name配置，达到配置多台基于ip，基于域名的虚拟主机&lt;br/&gt;2 Nginx 通过修改nginx.conf upstream 和 proxy_pass配置，达到反向代理效果&lt;br/&gt;3 Nginx 通过修改nginx.conf upstream server 状态，达到负载均衡效果&lt;br/&gt;4 代理服务器有提高客户端获取数据的速度，和方便管理设置防火墙的功能&lt;/p&gt;
&lt;p&gt;到这里Nginx的多虚拟主机，反向代理和负载均衡就结束了，感谢阅读！欢迎点赞！&lt;/p&gt;
</description>
<pubDate>Mon, 18 Dec 2017 13:48:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/8059000.html</dc:identifier>
</item>
<item>
<title>教你如何用 lib-flexible 实现移动端H5页面适配 - Pwcong</title>
<link>http://www.cnblogs.com/pwc1996/p/8059424.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pwc1996/p/8059424.html</guid>
<description>&lt;p&gt;好久没写教程了（可能会误导新手的菜鸟教程(￣▽￣)&quot;）。&lt;/p&gt;
&lt;blockquote readability=&quot;3.6263736263736&quot;&gt;
&lt;p&gt;这是我的github，欢迎前端大大们和我一起学习交流&lt;br/&gt;&lt;a href=&quot;https://github.com/pwcong&quot; class=&quot;uri&quot;&gt;https://github.com/pwcong&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近入职公司做前端实习，这几个星期来学到了移动端H5页面适配。（以前根本没做过移动端网页/(ㄒoㄒ)/~~，还是微信端的）&lt;/p&gt;
&lt;p&gt;所以把我学到的一个小知识点写下来，也分享给前端新手们。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;x00-大概说明&quot;&gt;0x00 大概说明&lt;/h2&gt;
&lt;p&gt;做移动端网页和pc端很大不同的便是现在移动端窗口分辨率繁多。&lt;/p&gt;
&lt;p&gt;很多时候UI给的设计图只有一份，还是按照iphone6设计的，这就让前端适配其他例如6plus或安卓等其他移动端头疼。&lt;/p&gt;
&lt;p&gt;还好，阿里巴巴2015年底公开了其成熟的适配方案，&lt;code&gt;lib-flexible&lt;/code&gt;，至于其可靠性可参考每年天猫活动的移动端页面。&lt;/p&gt;
&lt;p&gt;这个方案的用法大概是这样的，HTML 头部引入 &lt;code&gt;lib-flexible&lt;/code&gt; 的样式和js库，容器或组件宽高主要使用单位 &lt;code&gt;rem&lt;/code&gt; ，字体大小则不变仍然使用单位 &lt;code&gt;px&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还有一个约束是，因为只面向移动端，因此我们限制最外层包裹的div最大宽度为 640px&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;4.5942857142857&quot;&gt;
&lt;p&gt;我这里只简单介绍怎么使用 &lt;code&gt;lib-flexible&lt;/code&gt; 实现移动端适配，如果需要深入解释的知识，请阅读如下文章：&lt;br/&gt;&lt;a href=&quot;https://github.com/amfe/article/issues/17&quot; class=&quot;uri&quot;&gt;https://github.com/amfe/article/issues/17&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;x01-引入-lib-flexible&quot;&gt;0x01 引入 lib-flexible&lt;/h2&gt;
&lt;p&gt;最新的库文件可以到这里下载：&lt;br/&gt;&lt;a href=&quot;https://github.com/amfe/lib-flexible&quot; class=&quot;uri&quot;&gt;https://github.com/amfe/lib-flexible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;clone 下来后在 &lt;code&gt;build&lt;/code&gt; 目录下找到 &lt;code&gt;flexible.css&lt;/code&gt; 和 &lt;code&gt;flexible.js&lt;/code&gt; 在HTML头部引入即可，例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;lib-flexible demo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        ...

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;css/flexible.css&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;js/flexible.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

        ...

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;x02-计算rem值&quot;&gt;0x02 计算&lt;code&gt;rem&lt;/code&gt;值&lt;/h2&gt;
&lt;p&gt;谷歌 &lt;code&gt;rem&lt;/code&gt; 的用法后很多人应该大概了解 &lt;code&gt;rem&lt;/code&gt; 的原理了，大概就是 &lt;code&gt;rem&lt;/code&gt; 依赖 &lt;code&gt;font-size&lt;/code&gt; 的值，例如默认下 &lt;code&gt;1rem = 16px&lt;/code&gt;，因此通过在不同分辨率修改 &lt;code&gt;font-size&lt;/code&gt; 就可以达到适配不同分辨率的移动端了。&lt;/p&gt;
&lt;blockquote readability=&quot;3.0280373831776&quot;&gt;
&lt;p&gt;需要详细了解 rem 值计算可参考这篇文章 &lt;a href=&quot;http://www.cnblogs.com/azhai-biubiubiu/p/6003597.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/azhai-biubiubiu/p/6003597.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;rem&lt;/code&gt; 来做宽高定型有个最大的问题是，&lt;code&gt;font-size&lt;/code&gt; 如何计算的问题，如何算得的 &lt;code&gt;font-size&lt;/code&gt; 可以在不同分辨率下显示效果一致呢？&lt;/p&gt;
&lt;p&gt;不用担心，&lt;code&gt;lib-flexible&lt;/code&gt; 已经帮你算好了，在你调整窗口大小的时候自动计算调整 &lt;code&gt;rem&lt;/code&gt; 的基准，你只要做的是，按照设计图算出能适配不同分辨率的移动端的 &lt;code&gt;rem&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里有个关系图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722153312466?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;demo2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看不懂没关系，看那么多flexible的教程都放了我也就跟着放出来好了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假如UI给了这个设计图（找不到工作的UI (/▽＼)）：&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722152906616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;demo1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好，我这辣鸡一眼看出了：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;这是以iphone5为标准的ui设计稿，设备窗口宽度为 &lt;code&gt;640px&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中间一个色块，居中，背景色为 &lt;code&gt;#0075a9&lt;/code&gt;，margin-top 为 &lt;code&gt;100px&lt;/code&gt;， width 为 &lt;code&gt;240px&lt;/code&gt;，height 为 &lt;code&gt;120px&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;接下来，我们来计算rem值，计算公式很简单：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;需转换的px值 / 设计稿宽度px值 * 10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;上面的尺寸计算一下转换成下面的说法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;这是以iphone5为标准的ui设计稿，设备窗口宽度为 &lt;code&gt;10rem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中间一个色块，居中，背景色为 &lt;code&gt;#0075a9&lt;/code&gt;，margin-top 为 &lt;code&gt;1.5625rem&lt;/code&gt;， width 为 &lt;code&gt;3.75rem&lt;/code&gt;，height 为 &lt;code&gt;1.875rem&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;x03-按照找不到工作的ui给的设计稿敲出代码&quot;&gt;0x03 按照找不到工作的UI给的设计稿敲出代码&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;css/flexible.css&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;js/flexible.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        html, body&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        body&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow-x:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow-y:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;max-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;640px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1.5625rem&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;3.75rem&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1.875rem&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#0075a9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;x04-不同分辨率移动端下浏览效果&quot;&gt;0x04 不同分辨率移动端下浏览效果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722155437603?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;dev1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722155446209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;dev2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722155456120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;dev3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170722155505068?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHdjMTk5Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;dev4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以看到，在多个不同设备间，效果基本差不多&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;也许你会说，我这个案例 &lt;strong&gt;内容太少，没有什么说服力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么，大佬们快动起手来，在你的移动端网页项目中用上 &lt;code&gt;lib-flexible&lt;/code&gt; 看看能否解决移动端页面适配问题吧。&lt;/p&gt;
</description>
<pubDate>Mon, 18 Dec 2017 12:21:00 +0000</pubDate>
<dc:creator>Pwcong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pwc1996/p/8059424.html</dc:identifier>
</item>
<item>
<title>【译】使用Jwt身份认证保护 Asp.Net Core Web Api - RocketRobin</title>
<link>http://www.cnblogs.com/rocketRobin/p/8058760.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rocketRobin/p/8058760.html</guid>
<description>&lt;blockquote readability=&quot;2.0454545454545&quot;&gt;
&lt;p&gt;原文出自&lt;a href=&quot;http://www.blinkingcaret.com/author/ruidfigueiredo/&quot;&gt;Rui Figueiredo&lt;/a&gt;的博客，原文链接&lt;a href=&quot;http://www.blinkingcaret.com/2017/09/06/secure-web-api-in-asp-net-core/&quot;&gt;《Secure a Web Api in ASP.NET Core》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;摘要：这边文章阐述了如何使用 Json Web Token (Jwt)方式 来配置身份验证中间件。这种方式十分适合移动App 后端等不使用cookie的后端程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网络上有许多资源可以教你如何保护ASP.NET Core Web应用程序。我写过一些，例如 &lt;a href=&quot;http://www.blinkingcaret.com/2016/11/30/asp-net-identity-core-from-scratch/&quot;&gt;ASP.NET Core Identity From Scratch&lt;/a&gt; , &lt;a href=&quot;http://www.cnblogs.com/rocketRobin/p/8046259.html&quot;&gt;External Login Providers in ASP.NET Core&lt;/a&gt; and &lt;a href=&quot;http://www.blinkingcaret.com/2017/05/24/facebook-login-asp-net-core/&quot;&gt;Facebook Authentiation with ASP.NET Core.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过对于保护Asp.Net WebApi，网络上有用的信息似乎不多。所以在这篇博文中，我将介绍如何使用Json Web Tokens（JWT）来保护ASP.NET Core中的Web Api。我在github中有一个&lt;a href=&quot;https://github.com/ruidfigueiredo/WebApiJwtExample&quot;&gt;演示项目&lt;/a&gt;，你可以照着它来做。&lt;/p&gt;

&lt;p&gt;在一个Web应用程序中，如果你不打算使用供应外部调用（例如一个移动应用程序）的API，那么它通常使用一个cookie来表示一个已经登录的用户。&lt;/p&gt;
&lt;p&gt;一般的流程是：用户单击登录，进入登录页面，输入有效凭证后，服务器发送给用户浏览器的响应包含一个带有加密信息的 &lt;code&gt;Set-Cookie&lt;/code&gt; 头。&lt;/p&gt;
&lt;p&gt;cookie会被设置上domain 例如 blinkingcaret.com,每次浏览器向这个domain发送请求时，设置在这个domain上的cookie也会被带上。&lt;/p&gt;
&lt;p&gt;在服务器上，cookie将被解密，然后使用解密后的内容来创建用户的 &lt;code&gt;Identity&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果客户端是一个浏览器，这种方式将会非常非常适合。不过当我们的客户端是一个移动应用程序时候，那就另当别论了。&lt;/p&gt;

&lt;p&gt;我们可以使用什么来代替cookie呢？没错就是token。token也代表用户，但是当我们使用它的时候，我们不再依赖于浏览器的内置机制以及用它和cookie打交道。&lt;/p&gt;
&lt;p&gt;我们必须明确地向服务器要一个token，我们自己将它存储在某个地方，然后在每个请求发送时手动带上它。有一些方法可以使这个尽可能简单快捷，我会在后面讨论其中的一些方法。&lt;/p&gt;
&lt;p&gt;我将在这里讨论的token格式是&lt;a href=&quot;https://jwt.io/introduction/&quot;&gt;JWT&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JWT代表Json Web Token。JWTtoken具有以下格式 &lt;code&gt;base64-encoded-header.base64-encoded-payload.signature&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;一个heder的例子是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    “alg”: “HS265”,
    “typ”: “JWT”
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;payload包含一系列 &lt;a href=&quot;https://stackoverflow.com/questions/6786887/explain-claims-based-authentication-to-a-5-year-old&quot;&gt;claims&lt;/a&gt;，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;name&quot;: &quot;Rui&quot;,
    &quot;admin&quot;: true
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，通过采用“base64（header）.base64（payload）”创建签名，并使用头部指定的算法对签名其进行加密。例如 &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC-SHA256&lt;/a&gt;。签名部分会用到一个存储在server上的密钥，这个密钥是不会发给客户端的。&lt;/p&gt;
&lt;p&gt;下面是一个真正的JWT的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoicnVpIiwic3ViIjoidGVzdCIsIm5iZiI6MTUwMzYxNDU4NSwiZXhwIjoxNTA2MDMzNzg1LCJpc3MiOiJibGlua2luZ2NhcmV0IHN0cyIsImF1ZCI6ImJsaW5raW5nY2FyZXQgYXBwIn0.F7PFoYcQXez3zV98BFKLpyON6d_1p-6IAeihZRSv0VM&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你必须注意的是，JWT中包含的信息&lt;strong&gt;没有加密&lt;/strong&gt;。为了获得有效payload，你只需要base64解码。你甚至可以从你的开发者工具控制台（例如在Chrome中）这样做。使用atob方法并将payload作为参数传递。你会得到解密后的JSON 。signature只能保证如果有人篡改了payload，那么signature将会失效。如果有人想成功替换有效载荷并生成有效的token，他们需要知道签名中使用的密钥，但是该密钥永远不会被发送到客户端。&lt;/p&gt;
&lt;p&gt;所以，当你想往payload里放一些东西的时候，你一定要知道上面这些&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;译者注：就是不要把敏感信息放在payload里，比如：密码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要在ASP.NET Core中使用JWT，我们需要知道如何手动创建JWTtoken，如何验证它们以及如何创建端点以便客户端应用程序可以获得它们。&lt;/p&gt;
&lt;h2 id=&quot;如何创建jwttoken&quot;&gt;如何创建JWTtoken&lt;/h2&gt;
&lt;p&gt;首先你需要安装nuget包&lt;code&gt;System.IdentityModel.Tokens.Jwt&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ dotnet add package System.IdentityModel.Tokens.Jwt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后创建一个密钥。我们将使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&quot;&gt;&lt;code&gt;symmetric key&lt;/code&gt;&lt;/a&gt;（译者注：对称密钥），代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var secretKey = new SymmetricSecurityKey(Endoding.UTF8.GetBytes(&quot;a secret that needs to be at least 16 characters long&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;译者注：a secret that needs to be at least 16 characters long=&amp;gt;一个至少需要16个字符的密码，在验证签名时还会用到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的token将包含一组claims。所以让我们创建它们：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var claims = new Claim[] {
    new Claim(ClaimTypes.Name, &quot;John&quot;),
    new Claims(JwtRegisteredClaimNames.Email, &quot;john.doe@blinkingcaret.com&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我已经使用了两种claim类型 ：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;ClaimTypes（System.Security.Claims）&lt;/li&gt;
&lt;li&gt;JwtRegisteredClaimNames（System.IdentityModel.Tokens.Jwt）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;要强调的是JwtRegisteredClaimNames包含在&lt;a href=&quot;https://tools.ietf.org/html/rfc7519#page-9&quot;&gt;JWT RFC&lt;/a&gt;中列举的claims中。如果你打算使用不同编程语言或者框架生成的token，那么为了兼容性，你应该尽可能的使用这个。不过，有一些声明类型可以在ASP.NET中启用某些功能。例如，ClaimTypes.Name 是用户名（User.Identity.Name）的默认声明类型。另一个例子是ClaimTypes.Role，如果你在Authorize属性中使用Roles属性（例如[Authorize（Roles =“Administrator”）]），这个声明将会被检查用来确认权限。&lt;/p&gt;
&lt;p&gt;在创建我们想要在token中编码的claims列表之后，我们可以创建token本身，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var token = new JwtSecurityToken(
    issuer: &quot;your app&quot;,
    audience: &quot;the client of your app&quot;,
    claims: claims,
    notBefore: DateTime.Now,
    expires: DateTime.Now.AddDays(28),
    signingCredentials: new SigningCredentials(key, SecurityAlgorithms.HmacSha256)
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有一些我之前没有提到的概念，即发issue，audience和expiration dates。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;译者注： 发行者，受众/听众，过期时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发行者表示生成token的实体，在这个例子里它是ASP.NET Core Web应用程序。audience代表将要使用这些token的实体，例如 client。如果你依靠第三方创建token（不是现在所要用到的），这个issue和audience是重要的。验证token时，你可以验证issue和audience。&lt;/p&gt;
&lt;p&gt;notBefore 和 expire 定义了 token的有效时间区间，在notBefore之后expire之前。&lt;/p&gt;
&lt;p&gt;最后在signedCredentials中指定使用哪个安全密钥和什么算法来创建签名。在这个例子中我们使用了&lt;a href=&quot;http://www.cnblogs.com/rocketRobin/p/最后在signedCredentials中指定使用哪个安全密钥和什么算法来创建签名。在这个例子中我们使用了HMAC-SHA256。&quot;&gt;HMAC-SHA256&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你不关心issue和audience（在JWT规范中是可选的），你可以使用接受JwtSecurityHeader和JwtSecurityPayload的JwtSecurityToken的更简单的构造函数重载。不过你必须手动将expires和notBefore声明添加到有效内容中，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var claims = new Claim[] {
    new Claim(ClaimTypes.Name, &quot;John&quot;),
    new Claims(JwtRegisteredClaimNames.Email, &quot;john.doe@blinkingcaret.com&quot;),
    new Claim(JwtRegisteredClaimNames.Exp, $&quot;{new DateTimeOffset(DateTime.Now.AddDays(1)).ToUnixTimeSeconds()}&quot;),
    new Claim(JwtRegisteredClaimNames.Nbf, $&quot;{new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds()}&quot;)        
}

var token = new JwtSecurityToken(new JwtHeader(new SigningCredentials(key, SecurityAlgorithms.HmacSha256)), new JwtPayload(claims));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请注意Exp（expires）和Nbf（notBefore）声明的值是一个&lt;a href=&quot;http://www.unixtimestamp.com/&quot;&gt;Unix时间&lt;/a&gt;的字符串。将&lt;code&gt;DateTime&lt;/code&gt;转换为该格式的最简单方法是使用&lt;code&gt;DateTimeOffset&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在创建JwtSecurityToken的实例后，实际生成token的方法是调用JwtSecurityTokenHandler实例的WriteToken方法，并将JwtSecurityToken作为参数传递：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;string jwtToken = new JwtSecurityTokenHandler().WriteToken(token);&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;现在我们知道如何创建我们的JWT token了，我们还需要一种方法来让客户端获得它们。最简单的方法是创建一个期望发布请求的web api controller action 接受一个Post请求，例如下面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class TokenController : Controller
{
    [Route(&quot;/token&quot;)]
    [HttpPost]        
    public IActionResult Create(string username, string password)
    {
        if (IsValidUserAndPasswordCombination(username, password))
            return new ObjectResult(GenerateToken(username));
        return BadRequest();
    }
//...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;IsValidUserAndPasswordCombination&lt;/code&gt;中，你可以来验证用户的凭据例如使用例如ASP.NET Identity（如果你需要参考资料来学习ASP.NET Identity，你可以看这篇博客 &lt;a href=&quot;http://www.blinkingcaret.com/2016/11/30/asp-net-identity-core-from-scratch/&quot;&gt;ASP.NET Identity Core From Scratch&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GenerateToken&lt;/code&gt;我们刚刚在上一节中描述过。&lt;/p&gt;

&lt;p&gt;现在我们有了一种发行token的方法，我们还需要一种方法来验证它们。我们将使用ASP.NET Core的身份验证中间件，并将其配置为可接受JWT token。&lt;br/&gt;将&lt;code&gt;Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt; NuGet包添加到你的项目。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来打开Startup.cs并更新ConfigureServices方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    //...
    services.AddAuthentication(options =&amp;gt; {
        options.DefaultAuthenticateScheme = &quot;JwtBearer&quot;;
        options.DefaultChallengeScheme = &quot;JwtBearer&quot;;            
    })
    .AddJwtBearer(&quot;JwtBearer&quot;, jwtBearerOptions =&amp;gt;
    {                        
        jwtBearerOptions.TokenValidationParameters = new TokenValidationParameters
        {                            
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&quot;your secret goes here&quot;)),

            ValidateIssuer = true,
            ValidIssuer = &quot;The name of the issuer&quot;,

            ValidateAudience = true,
            ValidAudience = &quot;The name of the audience&quot;,

            ValidateLifetime = true, //validate the expiration and not before values in the token

            ClockSkew = TimeSpan.FromMinutes(5) //5 minute tolerance for the expiration date
        };
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你不熟悉ASP.NET Core的身份验证中间件，则建议你阅读&lt;a href=&quot;http://www.cnblogs.com/rocketRobin/p/8046259.html&quot;&gt;External Login Providers in ASP.NET Core&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;即使是关于如何使用Google，Facebook等进行外部登陆提供程序登录，但是这篇博客也含有有关身份验证中间件如何工作的详细说明。&lt;/p&gt;
&lt;p&gt;此外请注意，这是新的ASP.NET Core 2.0语法，其中通过ConfigureServices方法完全配置了身份验证，但概念是相同的。&lt;/p&gt;
&lt;blockquote readability=&quot;3.8571428571429&quot;&gt;
&lt;p&gt;译者注:&lt;a href=&quot;http://www.cnblogs.com/rocketRobin/p/8046259.html&quot;&gt;External Login Providers in ASP.NET Core&lt;/a&gt;这篇博客在撰写的时候使用的是 Asp.Net Core 1.x。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个例子中更重要的是 &lt;code&gt;TokenValidationParameters&lt;/code&gt; 类。这是你必须实例化的类，它将用来配置如何验证token。&lt;/p&gt;
&lt;p&gt;在Startup.cs中，你需要更新Configure方法并添加身份验证中间件：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    //...
    app.UseAuthentication(); //needs to be up in the pipeline, before MVC
    //...
    app.UseMvc(ConfigureRoutes);
//..&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;web api客户端可以是桌面应用程序，移动设备甚至是浏览器。我将要描述的例子是Web应用程序的登录、保存token、然后使用它来执行对请求的认证。你可以在这里找到一个可以正常工作的&lt;a href=&quot;https://github.com/ruidfigueiredo/WebApiJwtExample&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，为了能够登陆，你需要将用户名和密码发送POST请求到“/ token”（或者你设置的获取token的Web Api断点）。你可以很容易地使用jQuery来做到这一点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$.post(&quot;/token&quot;, $.param({username: &quot;the username&quot;, password: &quot;the password&quot;})).done(function(token){
    //save the token in local storage
    localStorage.setItem(&quot;token&quot;, token);
    //...
}).fail(handleError);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果一切顺利，则可以将获得JWT token，然后你可以将其保存在某个位置，通常在Web应用程序中，我们将它保存到 local storage 中。在移动设备上则取决于你使用的平台，但它们都具有允许你保存token的功能（例如Android的SharedPreferences）。&lt;/p&gt;
&lt;p&gt;对于上一节中的身份验证中间件，接受JWT token并将其转换为可以在控制器操作中访问的User，则该请求必须具有 Authorization header。header的值应该是“Bearer ”，然后是JWT token，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1l...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;尽管你可以“手动”将授权标头添加到每个请求，但通常有自动执行的方法。例如jQuery中有一个时间可以允许你在发送请求之前做一些操作，例如在这里检查是否存在 token，如果有就加到Authentication头里。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$.ajaxSetup({
    beforeSend: function(xhr) {
        if (localStorage.getItem(&quot;token&quot;) !== null) {
            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem(&quot;token&quot;));                      
        }
    }
});  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你使用其他框架，也有类似的机制，例如Angular有&lt;a href=&quot;https://angular.io/guide/http#intercepting-all-requests-or-responses&quot;&gt;HttpInterceptors&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，你只需要从本地存储中删除token即可注销：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;localStorage.removeItem(&quot;token&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的一件事情是，如果客户端执行的操作需要用户进行身份验证，并且请求中没有（有效）授权标头，则服务器将返回带有401状态码的响应。该响应还将具有WWW-Authenticate:Bearer header。如果你收到这样的响应，则你可以通知用户需要验证身份。&lt;/p&gt;
&lt;blockquote readability=&quot;2.3469387755102&quot;&gt;
&lt;p&gt;全文完&lt;/p&gt;
&lt;p&gt;原文出自&lt;a href=&quot;http://www.blinkingcaret.com/author/ruidfigueiredo/&quot;&gt;Rui Figueiredo&lt;/a&gt;的博客，原文链接&lt;a href=&quot;http://www.blinkingcaret.com/2017/09/06/secure-web-api-in-asp-net-core/&quot;&gt;《Secure a Web Api in ASP.NET Core》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 18 Dec 2017 12:10:00 +0000</pubDate>
<dc:creator>RocketRobin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rocketRobin/p/8058760.html</dc:identifier>
</item>
<item>
<title>JavaScript实现AOP（面向切面编程，装饰者模式） - 三十亿少女的梦</title>
<link>http://www.cnblogs.com/yonglin/p/8059183.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yonglin/p/8059183.html</guid>
<description>&lt;p&gt;&lt;strong&gt;什么是AOP？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　AOP(面向切面编程)的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来之后， 再通过“动态织入”的方式掺入业务逻辑模块中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOP能给我们带来什么好处？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　AOP的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript实现AOP的思路？&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 66&quot;&gt;
&lt;div class=&quot;layoutArea&quot;&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 67&quot;&gt;
&lt;div class=&quot;layoutArea&quot; readability=&quot;17.5&quot;&gt;
&lt;div class=&quot;column&quot; readability=&quot;39&quot;&gt;
&lt;p&gt;　　通常，在 JavaScript 中实现 AOP，都是指把一个函数“动态织入”到另外一个函数之中，具体的实现技术有很多，下面我用扩展 Function.prototype 来做到这一点。请看下面代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
 Function.prototype.before = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (beforefn) {
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _self = &lt;span&gt;this&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存原函数引用&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回包含了原函数和新函数的&quot;代理函数&quot;&lt;/span&gt;
           beforefn.apply(&lt;span&gt;this&lt;/span&gt;, arguments); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行新函数，修正this&lt;/span&gt;
           &lt;span&gt;return&lt;/span&gt; _self.apply(&lt;span&gt;this&lt;/span&gt;, arguments); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行原函数&lt;/span&gt;
&lt;span&gt;       }
   };

   Function.prototype.after &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (afterfn) {
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret = _self.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments);
           afterfn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments);
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
       }
   };

   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; func = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
       console.log(&lt;/span&gt;&quot;2&quot;&lt;span&gt;)
   }

   func &lt;/span&gt;= func.before(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
       console.log(&lt;/span&gt;&quot;1&quot;&lt;span&gt;);
   }).after(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
       console.log(&lt;/span&gt;&quot;3&quot;&lt;span&gt;);
   } )

   func();  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1091597/201712/1091597-20171218185924115-439356958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　我把负责打印数字1和打印数字3的两个函数通过AOP的方式动态植入func函数。通过执行上面的代码，我们看到控制台顺利地返回了执行结果1、2、3。&lt;/p&gt;
&lt;p&gt;　　这种使用AOP的方式来给函数添加职责，也是JavaScript语言中的一种非常特别的巧妙的装饰者模式实现，下面我们来试试Function.prototype.before的威力，请看下面代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    Function.prototype.before = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (beforefn) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; __self = &lt;span&gt;this&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存原函数的引用&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; () { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回包含了原函数和新函数的&quot;代理&quot;函数&lt;/span&gt;
            beforefn.apply(&lt;span&gt;this&lt;/span&gt;, arguments); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行新函数，且保证 this 不被劫持，新函数接受的参数 // 也会被原封不动地传入原函数，新函数在原函数之前执行&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; __self.apply(&lt;span&gt;this&lt;/span&gt;, arguments); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行原函数并返回原函数的执行结果， 2 // 并且保证 this 不被劫持&lt;/span&gt;
&lt;span&gt;        }
    }
    Function.prototype.after &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (afterfn) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; __self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret = __self.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments);
            afterfn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
        }
    };

    document.getElementById &lt;/span&gt;= document.getElementById.before(&lt;span&gt;function&lt;/span&gt;(){ alert (1&lt;span&gt;);
    });
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; button = document.getElementById( 'button' );
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1091597/201712/1091597-20171218202323459-1620479451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　我们给document.getElementById()做了一些装饰，以后我们每次调用这个方法之前都会先执行alert(&quot;1&quot;)这条语句，但是请注意我们这条语句并不是写在了document.getElementById()这个方法的源码中，而只是在他的外部给他加了装饰，这样带来好处就是我们可以在不改变原方法的源码的情况下为他添加一些新的行为。国际惯例，举个栗子：&lt;/p&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 232&quot;&gt;
&lt;div class=&quot;layoutArea&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;column&quot; readability=&quot;22&quot;&gt;
&lt;p&gt;　　我的同事写了一个函数可以输出当前时间，而我现在的需求是输出当前天气之后再输出当前时间，下面有两种解决思路：&lt;/p&gt;
&lt;p&gt;      （1）传统解决办法： 拿同事的函数过来，找到他输出时间的代码，在这些代码之前加入输出当前天气的代码&lt;/p&gt;
&lt;p&gt;      （2）装饰者模式解决办法：拿同事的函数过来，不用看他的源码，直接给他的函数装饰一下，装饰的东西也就是输出当前天气的代码。&lt;/p&gt;
&lt;p&gt;　　两种方法都解决了问题，但是他们的&lt;span&gt;出发点是完全不同的&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　（1）方法是改造原函数的内部，我们就需要去理解源代码，然后做修改。&lt;/p&gt;
&lt;p&gt;　　（2）方法是给原函数添加了一层外套，我们根本不用管原本函数的内部实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　　现在又有了新的需求：在输出当前时间之前，先输出当前温度&lt;/p&gt;
&lt;p&gt;　　（1）方法，我们在第一个需求已经把同事的代码改的面目全非了，现在又要重新理解函数内部，并加以修改（删除输出当前天气的代码，然后加入输出当前温度的代码）。&lt;/p&gt;
&lt;p&gt;      （2）方法，同事原本的函数是没有变的，我们现在给同事的函数换一件套（输出当前温度）就可以了。  &lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 18 Dec 2017 11:20:00 +0000</pubDate>
<dc:creator>三十亿少女的梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yonglin/p/8059183.html</dc:identifier>
</item>
<item>
<title>深度工作：充分使用每一份脑力 - FerventDesert</title>
<link>http://www.cnblogs.com/buptzym/p/8059121.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buptzym/p/8059121.html</guid>
<description>&lt;p&gt;浮躁已经成了普遍的社会现象。判断一个人是否浮躁非常容易，看他一天主动拿起手机的次数就可以了。据TED的演讲者说，这个值一般是50次，除了8小时的睡觉之外，基本上每20分钟就要去翻翻手机。&lt;/p&gt;
&lt;p&gt;你会去用手机做什么？看微信，票圈，微博，知乎，淘宝，或只是来回刷首页。我们不是名人，没人关心你在社交网络上的行动。然而在这短短几分钟，破坏了大脑辛苦构建的情境，放下手机后很可能忘记之前在做什么，然后很久都难以进入状态。碎片化阅读盛行，可是当你放下手机，还能记得些什么呢？&lt;/p&gt;
&lt;p&gt;我们还发现，几乎同时毕业的同学，在工作几年后会产生巨大的差距，有的人已经能够管理上百人的大团队，而有的人甚至连自己都无法管理，唯命是从，没有主动性。看似每个人都在工作，为何几年后职业发展，专业性和影响力方面都相差巨大呢？&lt;/p&gt;
&lt;p&gt;深度学习是人工智能（AI）中很重要的概念，意指结构够深，容量够大的模型才能完成复杂任务。借鉴这个概念，对人来说，深度工作就是高质量，有深度广度的工作和思考。虽然我们拥有如此强大的大脑，并不是每个人都擅长有深度的工作。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/287060/201712/287060-20171218185615912-801785843.png&quot;/&gt;&lt;br/&gt;（机器模型的深度在近几年突飞猛进）&lt;/p&gt;
&lt;h2 id=&quot;浮躁和焦虑&quot;&gt;浮躁和焦虑&lt;/h2&gt;
&lt;p&gt;浮躁的人，往往不能坚持阅读较长较难的文字，在独处的环境中坐立不安，不停地翻手机，经常追求短期价值而非长期收益。大脑不得不反复切换情境，越来越浮躁，进而恶性循环，且很容易疲劳：比如试着同时与10个人聊天，半小时就疲惫不堪了。&lt;/p&gt;
&lt;p&gt;不少同学调试代码的习惯并不好，沙漠君也一样，举个栗子：写代码很可能一次性写不对，出错后修改，再运行，再修改。每次运行都需要花一两分钟时间，那么就会习惯性地拿起手机，之后低头一看怎么又出错了。几经折腾，一上午倒是刷了不少知乎，却没干多少正经事情。大神是怎么写代码的呢？他们会专注地在大脑里模拟运行一遍，提前把发现的错误改掉，调试时非常专注。但两者效率差异大得令人咋舌。&lt;/p&gt;
&lt;p&gt;我们发现，懒惰的人难以生存。但不懒惰却浮躁也不见得好到哪里。我曾经把要做的事情做成列表，清理完列表即完成任务。之后郁闷地发现，越来越沉迷于完成列表的感觉，定的目标越来越琐碎，而不去深究任务的细节和高度。浮躁虽不是懒惰，看似很忙，实则质量低下。战术上的忙碌改变不了战略的懒惰。没想清楚问题就匆忙上路，瞎忙活。&lt;/p&gt;
&lt;p&gt;质量远比数量重要，成功从来不是依赖于足够多的事，改变取决于关键的几个要素。“一个人的命运啊,当然要靠自我奋斗,但是也要考虑到历史的进程。&quot; 长者完成了三件小事足以名垂千古，对大部分人来说，完成1件重要的事情就够了。&lt;/p&gt;
&lt;h2 id=&quot;深度工作的状态&quot;&gt;深度工作的状态&lt;/h2&gt;
&lt;p&gt;深度工作时，大脑是非常专注而高效的，有能力处理复杂问题。想象一种状态：在无人打断的长时间思考下，大脑会创建精密的立体信息网络，各种想法和创意会不断涌现，发现问题后去吸收信息的效率会非常高。&lt;/p&gt;
&lt;p&gt;一个看似简单的问题，背后实则有丰富的内涵，是否能想到足够的深度。举个数学的例子：对贝叶斯公式，它的概念简单，被很多理工科同学熟知。它最初用于解决什么问题，有什么条件，需要哪些背景知识，进一步，它的本质，有哪些推论和扩展，在哪些领域被成功应用。能把这些问题都讲清楚，足够去应聘顶级的算法工程师。&lt;/p&gt;
&lt;p&gt;专注是一种习惯，当你能在乏味或费解的问题上（比如看这篇文章）保持专注时，大脑会自然地习得这种技能，并逐渐适应。专注工作非常高效，虽然财富相差巨大，但人人时间平等，节约了工作时间就有更多空闲去浪。&lt;/p&gt;
&lt;p&gt;除了高质量地工作，深度思考还可以扩展到平时的空闲时间，当然并不是鼓励成为工作狂。很多好想法，并非来源于书桌前的正襟危坐，而是来自于生活中不经意的思维火花。当你对一个问题很感兴趣时，就会不自觉地在潜意识中思考它。不刻意的状态反而能促使它们浮上真正的意识。&lt;/p&gt;
&lt;p&gt;散步中思考非常有效，当然要保证安全。在冗长的通勤途中，让自己尽量不玩手机，想想有哪些问题还没有解决，原本抓狂无聊的等待反而进入了平静。想象周六傍晚，一个人安静地坐在西湖边的长椅上，周边空无一人，只有几只小猫在身边玩耍。望着平静的湖面陷入沉思：最近要完成的任务，有几种方案，优劣如何，资源是否能到位，会遇到的问题和解决方案，哪个妹子比较好看（又乱入了），进一步地，制定关键节点，任务产出和产生的影响。在半小时之内，不借助笔和纸，让大脑对问题的解决路径做完整的模拟。说不定能一下子想通困扰很久的问题。&lt;/p&gt;
&lt;p&gt;城市本来是无趣的，是人与人之间的生活，交流和竞争带来了趣味。你可以和大脑做朋友，它会为你构造漂亮的场景，创建记忆宫殿，记住令人惊讶的海量信息。大脑还可以模仿几个朋友帮你出谋划策，但千万不要陷入多重人格的陷阱啊（这个太酷了）。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/287060/201712/287060-20171218185654131-1379740777.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一次只做一件事&quot;&gt;一次只做一件事&lt;/h2&gt;
&lt;p&gt;不少知识和技能是很难在不同领域迁移的，但专注和深度却是任何领域都必备的素质。培养这种底层能力，便能对自身各方面都产生深远影响。问题是，如何才能保持专注？&lt;/p&gt;
&lt;p&gt;有人认为专注需要刻意锻炼。其实只要培养离开手机和不轻易走神的习惯，就能跨出有价值的一步： 想拿起手机了，忍住；难题想不通，淡定，画张图给自己再讲一遍。这样起码能保证以半小时为单位的专注工作。多数人的大脑并不擅长并行，因此保持专注串行完成反而会更有成效。引用XBOX游戏《光环》里的士官长经常讲的一句话：“一次只做一件事”。&lt;/p&gt;
&lt;p&gt;当然，如果要创造巨大的成果，则需要数以天计甚至以月为单位的艰辛劳动，如证明精妙的数学命题，这就需要天赋和兴趣，以及对专注度的刻苦锻炼。比尔盖茨曾抛弃所有，在8个星期里设计了BASIC语言，奠定了微软帝国的基础。他在这两个月内如此努力工作，极其疲惫时就睡一两个小时，被保罗艾伦称赞为“专注力的惊人之举”。对比看看，我们两个月能干什么呢？&lt;/p&gt;
&lt;p&gt;可以主动创造仪式感和环境，迫使自己进入专注状态。如果可能则关掉微信和钉钉；请健身教练，因为肉疼的价钱而训练地格外起劲；经常去心仪的咖啡馆读书写作，比在家里晃悠好得多。一家企业的办公环境也很大程度上决定了员工的做事风格，互联网公司的超大开间极大地促进了信息的交流，也一定程度上导致员工难以静下心来思考问题，比如我司。而充满小隔间的笼子虽然利于个人研究，但也会降低信息流通的效率。微软的办公区设计很值得借鉴，他们有宽敞的公共空间供开放讨论，每人也有独立的办公室供深度工作，因此微软学术研究产出颇丰。&lt;/p&gt;
&lt;p&gt;如果依然无法让自己静心和专注，那么可能就是身体的原因了。笔者最近晚上研读《黄帝内经》（有机会写篇读后感，做大数据算命），其中上古天真论中的16字令人深思：“&lt;strong&gt;恬淡虚无，真气从之，精神内守，病安从来&lt;/strong&gt;”。城市产生了太多的欲望和浮躁：很多人不顺应天地之气，手机电脑一天挂在眼前，各类辐射充斥周围，夏天空调巨冷冬天又很热，平日不锻炼吃得又油腻，导致虚火过旺，不能静心，更谈不上专注和深度了。反而处在田园农舍时，听着夜半知了的声音，很容易就能静下心来，然后就困得要睡觉了...&lt;/p&gt;
&lt;p&gt;也许你不相信中医，没关系，但是培养良好的生活习惯却是必需的。不得不说，深度工作非常消耗脑力，一两个小时的思考足够让大脑有燃烧的感觉。毕竟身体是革命的本钱。&lt;/p&gt;
&lt;h2 id=&quot;深度工作的意义&quot;&gt;深度工作的意义&lt;/h2&gt;
&lt;p&gt;深度工作不是成功学，更不是走向人生巅峰的灵丹妙药。它是认真对待生活，有效利用时间的态度。它并不意味着要与世隔绝不与外界交流。你可以按自己的习惯配置闭关和沟通的节奏，沟通的效率反而更高。对方会因为你之前的深度思考而感到惊喜，没有人会喜欢脱口而出的无意义观点。&lt;/p&gt;
&lt;p&gt;深度和专注会带来巨大的不同：一般环境下，只要认真工作，就足够成为佼佼者。然而在强手如林的竞争环境下，要想出人头地，就需要对业务，产品和算法有一穿到底的体系化理解，以及深度的工作，主动地行动。虽然大公司人才济济，我们却很容易发现大家有时忙过了头，最根本的细节被忽视的现象比比皆是。再回答前面的问题，因为强者能够想清楚并规划未来，专注导致主动，主动反哺专注。因此起点相同的人几年后会有巨大的差距。&lt;/p&gt;
&lt;p&gt;更何况，由于人力成本越来越高，AI发展日新月异，速度快成本低，且几乎不会出错，未来大量对脑力要求不高的工作将会被AI取代，尤其入门级的会计，程序员，美工等办公室白领，反而对需要与环境复杂交互的服务业冲击较小。要想在新的竞争形态中取得优势，不仅要与人竞争，还需要拥有AI不具备的模糊决策的深度思考能力。&lt;/p&gt;
&lt;p&gt;当然，道理谁都懂，能不能身体力行则是另外一回事了，这才是竞争的分水岭。比如发完这篇文章后，我一小时就能主动拿起手机50回，哎。&lt;/p&gt;
</description>
<pubDate>Mon, 18 Dec 2017 11:05:00 +0000</pubDate>
<dc:creator>FerventDesert</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buptzym/p/8059121.html</dc:identifier>
</item>
<item>
<title>大数据学习系列之五 ----- Hive整合HBase图文详解 - 虚无境</title>
<link>http://www.cnblogs.com/xuwujing/p/8059079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuwujing/p/8059079.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;在上一篇 &lt;a href=&quot;http://www.panchengming.com/2017/12/16/pancm61/&quot;&gt;大数据学习系列之四 ----- Hadoop+Hive环境搭建图文详解(单机)&lt;/a&gt; 和之前的&lt;a href=&quot;http://www.panchengming.com/2017/12/09/pancm57/&quot;&gt;大数据学习系列之二 ----- HBase环境搭建(单机)&lt;/a&gt; 中成功搭建了Hive和HBase的环境，并进行了相应的测试。本文主要讲的是如何将Hive和HBase进行整合。&lt;/p&gt;
&lt;h3 id=&quot;hive和hbase的通信意图&quot;&gt;Hive和HBase的通信意图&lt;/h3&gt;
&lt;p&gt;Hive与HBase整合的实现是利用两者本身对外的API接口互相通信来完成的，其具体工作交由Hive的lib目录中的hive-hbase-handler-*.jar工具类来实现，通信原理如下图所示。&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218181539512?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;hive整合hbase后的使用场景&quot;&gt;Hive整合HBase后的使用场景：&lt;/h3&gt;
&lt;p&gt;（一）通过Hive把数据加载到HBase中，数据源可以是文件也可以是Hive中的表。&lt;br/&gt;（二）通过整合，让HBase支持JOIN、GROUP等SQL查询语法。&lt;br/&gt;（三）通过整合，不仅可完成HBase的数据实时查询，也可以使用Hive查询HBase中的数据完成复杂的数据分析。&lt;/p&gt;
&lt;h2 id=&quot;一环境选择&quot;&gt;一、环境选择&lt;/h2&gt;
&lt;h3 id=&quot;服务器选择&quot;&gt;1，服务器选择&lt;/h3&gt;
&lt;p&gt;本地虚拟机&lt;br/&gt;操作系统:linux CentOS 7&lt;br/&gt;Cpu：2核&lt;br/&gt;内存：2G&lt;br/&gt;硬盘:40G&lt;/p&gt;
&lt;h3 id=&quot;配置选择&quot;&gt;2，配置选择&lt;/h3&gt;
&lt;p&gt;JDK:1.8 （jdk-8u144-linux-x64.tar.gz）&lt;br/&gt;Hadoop:2.8.2 (hadoop-2.8.2.tar.gz)&lt;br/&gt;Hive： 2.1 (apache-hive-2.1.1-bin.tar.gz)&lt;br/&gt;HBase:1.6.2 (hbase-1.2.6-bin.tar.gz)&lt;/p&gt;
&lt;h3 id=&quot;下载地址&quot;&gt;3，下载地址&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;官网地址&lt;/strong&gt;&lt;br/&gt;JDK：&lt;br/&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads&quot; class=&quot;uri&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads&lt;/a&gt;&lt;br/&gt;Hadopp:&lt;br/&gt;&lt;a href=&quot;http://www.apache.org/dyn/closer.cgi/hadoop/common&quot; class=&quot;uri&quot;&gt;http://www.apache.org/dyn/closer.cgi/hadoop/common&lt;/a&gt;&lt;br/&gt;Hive&lt;br/&gt;&lt;a href=&quot;http://mirror.bit.edu.cn/apache/hive/&quot; class=&quot;uri&quot;&gt;http://mirror.bit.edu.cn/apache/hive/&lt;/a&gt;&lt;br/&gt;HBase:&lt;br/&gt;&lt;a href=&quot;http://mirror.bit.edu.cn/apache/hbase/&quot; class=&quot;uri&quot;&gt;http://mirror.bit.edu.cn/apache/hbase/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度云盘&lt;br/&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1jIemIDC&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1jIemIDC&lt;/a&gt; 密码：uycu&lt;/p&gt;
&lt;h2 id=&quot;二服务器的相关配置&quot;&gt;二、服务器的相关配置&lt;/h2&gt;
&lt;p&gt;在配置Hadoop+Hive+HBase之前，应该先做一下配置。&lt;br/&gt;做这些配置为了方便，使用root权限。&lt;/p&gt;
&lt;h3 id=&quot;更改主机名&quot;&gt;1，更改主机名&lt;/h3&gt;
&lt;p&gt;首先更改主机名，目的是为了方便管理。&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hostname &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看本机的名称&lt;br/&gt;然后更改主机名为master&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hostnamectl set-hostname master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注:主机名称更改之后，要重启(reboot)才会生效。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;做ip和主机名的映射&quot;&gt;2，做IP和主机名的映射&lt;/h3&gt;
&lt;p&gt;修改hosts文件，做关系映射&lt;br/&gt;输入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/hosts&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加&lt;br/&gt;主机的ip 和 主机名称&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.238.128 master&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;关闭防火墙&quot;&gt;3，关闭防火墙&lt;/h3&gt;
&lt;p&gt;关闭防火墙，方便访问。&lt;br/&gt;&lt;strong&gt;CentOS 7版本以下输入:&lt;/strong&gt;&lt;br/&gt;关闭防火墙&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;service   iptables stop&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS 7 以上的版本输入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;systemctl stop firewalld.service&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;时间设置&quot;&gt;4，时间设置&lt;/h3&gt;
&lt;p&gt;查看当前时间&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;date&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看服务器时间是否一致，若不一致则更改&lt;br/&gt;更改时间命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;date -s ‘MMDDhhmmYYYY.ss’&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;整体的环境配置&quot;&gt;5，整体的环境配置&lt;/h3&gt;
&lt;p&gt;/etc/profile 的整体配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#Java Config
export JAVA_HOME=/opt/java/jdk1.8
export JRE_HOME=/opt/java/jdk1.8/jre
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib

# Scala Config
export SCALA_HOME=/opt/scala/scala-2.12.2


# Spark Config
export  SPARK_HOME=/opt/spark/spark1.6-hadoop2.4-hive

# Zookeeper Config
export ZK_HOME=/opt/zookeeper/zookeeper3.4

# HBase Config
export HBASE_HOME=/opt/hbase/hbase1.2

# Hadoop Config 
export HADOOP_HOME=/opt/hadoop/hadoop2.8
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;

# Hive Config
export HIVE_HOME=/opt/hive/hive2.1
export HIVE_CONF_DIR=${HIVE_HOME}/conf

export PATH=.:${JAVA_HOME}/bin:${SCALA_HOME}/bin:${SPARK_HOME}/bin:${HADOOP_HOME}/bin:${HADOOP_HOME}/sbin:${ZK_HOME}/bin:${HBASE_HOME}/bin:${HIVE_HOME}/bin:$PATH&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218182335894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:具体的配置以自己的为准，没有的不用配置。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;三hadoop的环境配置&quot;&gt;三、Hadoop的环境配置&lt;/h2&gt;
&lt;p&gt;Hadoop的具体配置在&lt;a href=&quot;http://www.panchengming.com/2017/11/26/pancm55/&quot;&gt;大数据学习系列之一 ----- Hadoop环境搭建(单机)&lt;/a&gt; 中介绍得很详细了。所以本文就大体介绍一下。&lt;br/&gt;&lt;strong&gt;注:具体配置以自己的为准。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;环境变量设置&quot;&gt;1，环境变量设置&lt;/h3&gt;
&lt;p&gt;编辑 /etc/profile 文件 :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/profile&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export HADOOP_HOME=/opt/hadoop/hadoop2.8
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;
export PATH=.:${JAVA_HOME}/bin:${HADOOP_HOME}/bin:$PATH&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置文件更改&quot;&gt;2，配置文件更改&lt;/h3&gt;
&lt;p&gt;先切换到 /home/hadoop/hadoop2.8/etc/hadoop/ 目录下&lt;/p&gt;
&lt;h4 id=&quot;修改-core-site.xml&quot;&gt;3.2.1 修改 core-site.xml&lt;/h4&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim core-site.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;/root/hadoop/tmp&amp;lt;/value&amp;gt;
        &amp;lt;description&amp;gt;Abase for other temporary directories.&amp;lt;/description&amp;gt;
   &amp;lt;/property&amp;gt;
   &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;fs.default.name&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;hdfs://master:9000&amp;lt;/value&amp;gt;
   &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;修改-hadoop-env.sh&quot;&gt;3.2.2修改 hadoop-env.sh&lt;/h4&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim hadoop-env.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将${JAVA_HOME} 修改为自己的JDK路径&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export   JAVA_HOME=${JAVA_HOME}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export   JAVA_HOME=/home/java/jdk1.8&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;修改-hdfs-site.xml&quot;&gt;3.2.3修改 hdfs-site.xml&lt;/h4&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim hdfs-site.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;property&amp;gt;
   &amp;lt;name&amp;gt;dfs.name.dir&amp;lt;/name&amp;gt;
   &amp;lt;value&amp;gt;/root/hadoop/dfs/name&amp;lt;/value&amp;gt;
   &amp;lt;description&amp;gt;Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
   &amp;lt;name&amp;gt;dfs.data.dir&amp;lt;/name&amp;gt;
   &amp;lt;value&amp;gt;/root/hadoop/dfs/data&amp;lt;/value&amp;gt;
   &amp;lt;description&amp;gt;Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
   &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
   &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
      &amp;lt;name&amp;gt;dfs.permissions&amp;lt;/name&amp;gt;
      &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
      &amp;lt;description&amp;gt;need not permissions&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;修改mapred-site.xml&quot;&gt;3.2.4 修改mapred-site.xml&lt;/h4&gt;
&lt;p&gt;如果没有 mapred-site.xml 该文件，就复制mapred-site.xml.template文件并重命名为mapred-site.xml。&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim mapred-site.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改这个新建的mapred-site.xml文件，在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;mapred.job.tracker&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;master:9001&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
      &amp;lt;name&amp;gt;mapred.local.dir&amp;lt;/name&amp;gt;
       &amp;lt;value&amp;gt;/root/hadoop/var&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
       &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
       &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hadoop启动&quot;&gt;3，Hadoop启动&lt;/h3&gt;
&lt;p&gt;启动之前需要先格式化&lt;br/&gt;切换到/home/hadoop/hadoop2.8/bin目录下&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./hadoop  namenode  -format&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;格式化成功后，再切换到/home/hadoop/hadoop2.8/sbin目录下&lt;br/&gt;启动hdfs和yarn&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;start-dfs.sh
start-yarn.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动成功后，输入jsp查看是否启动成功&lt;br/&gt;在浏览器输入 ip+8088 和ip +50070 界面查看是否能访问&lt;br/&gt;能正确访问则启动成功&lt;/p&gt;
&lt;h2 id=&quot;四hive的环境配置&quot;&gt;四、Hive的环境配置&lt;/h2&gt;
&lt;p&gt;Hive环境的具体配置在我的这篇&lt;a href=&quot;http://www.panchengming.com/2017/12/16/pancm61/&quot;&gt;大数据学习系列之四 ----- Hadoop+Hive环境搭建图文详解(单机)&lt;/a&gt; 以及介绍得很详细了。本篇就大概介绍下。&lt;/p&gt;
&lt;h3 id=&quot;修改hive-site.xml&quot;&gt;修改hive-site.xml&lt;/h3&gt;
&lt;p&gt;切换到 /opt/hive/hive2.1/conf 目录下&lt;br/&gt;将hive-default.xml.template 拷贝一份，并重命名为hive-site.xml&lt;br/&gt;然后编辑hive-site.xml文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cp hive-default.xml.template hive-site.xml
vim hive-site.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑hive-site.xml文件，在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 指定HDFS中的hive仓库地址 --&amp;gt;  
  &amp;lt;property&amp;gt;  
    &amp;lt;name&amp;gt;hive.metastore.warehouse.dir&amp;lt;/name&amp;gt;  
    &amp;lt;value&amp;gt;/root/hive/warehouse&amp;lt;/value&amp;gt;  
  &amp;lt;/property&amp;gt;  

&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hive.exec.scratchdir&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/root/hive&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;

  &amp;lt;!-- 该属性为空表示嵌入模式或本地模式，否则为远程模式 --&amp;gt;  
  &amp;lt;property&amp;gt;  
    &amp;lt;name&amp;gt;hive.metastore.uris&amp;lt;/name&amp;gt;  
    &amp;lt;value&amp;gt;&amp;lt;/value&amp;gt;  
  &amp;lt;/property&amp;gt;  

&amp;lt;!-- 指定mysql的连接 --&amp;gt;
 &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;javax.jdo.option.ConnectionURL&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;!-- 指定驱动类 --&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;javax.jdo.option.ConnectionDriverName&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
   &amp;lt;!-- 指定用户名 --&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;javax.jdo.option.ConnectionUserName&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;!-- 指定密码 --&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;javax.jdo.option.ConnectionPassword&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;123456&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
   &amp;lt;name&amp;gt;hive.metastore.schema.verification&amp;lt;/name&amp;gt;
   &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;
    &amp;lt;/description&amp;gt;
 &amp;lt;/property&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后将配置文件中所有的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;${system:java.io.tmpdir}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更改为 /opt/hive/tmp (如果没有该文件则创建)，&lt;br/&gt;并将此文件夹赋予读写权限，将&lt;br/&gt;&lt;code&gt;${system:user.name}&lt;/code&gt;&lt;br/&gt;更改为 root&lt;/p&gt;
&lt;p&gt;例如:&lt;br/&gt;更改之前的:&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171216092323706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;更改之后:&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171216092332426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置图:&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171216092358071?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注: 由于hive-site.xml 文件中的配置过多，可以通过FTP将它下载下来进行编辑。也可以直接配置自己所需的，其他的可以删除。 MySQL的连接地址中的master是主机的别名，可以换成ip。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改-hive-env.sh&quot;&gt;修改 hive-env.sh&lt;/h3&gt;
&lt;p&gt;修改hive-env.sh 文件，没有就复制 hive-env.sh.template ，并重命名为hive-env.sh&lt;/p&gt;
&lt;p&gt;在这个配置文件中添加&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export  HADOOP_HOME=/opt/hadoop/hadoop2.8
export  HIVE_CONF_DIR=/opt/hive/hive2.1/conf
export  HIVE_AUX_JARS_PATH=/opt/hive/hive2.1/lib&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;添加-数据驱动包&quot;&gt;添加 数据驱动包&lt;/h3&gt;
&lt;p&gt;由于Hive 默认自带的数据库是使用mysql，所以这块就是用mysql&lt;br/&gt;将mysql 的驱动包 上传到 /opt/hive/hive2.1/lib&lt;/p&gt;
&lt;h2 id=&quot;五hbase的环境配置&quot;&gt;五、HBase的环境配置&lt;/h2&gt;
&lt;p&gt;HBase环境的具体配置在我的这篇&lt;a href=&quot;http://www.panchengming.com/2017/12/09/pancm57/&quot;&gt;大数据学习系列之二 ----- HBase环境搭建(单机)&lt;/a&gt; 以及介绍得很详细了。本篇就大概介绍下。&lt;/p&gt;
&lt;h3 id=&quot;修改-hbase-env.sh&quot;&gt;修改 hbase-env.sh&lt;/h3&gt;
&lt;p&gt;编辑 hbase-env.sh 文件，添加以下配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export JAVA_HOME=/opt/java/jdk1.8
export HADOOP_HOME=/opt/hadoop/hadoop2.8
export HBASE_HOME=/opt/hbase/hbase1.2
export HBASE_CLASSPATH=/opt/hadoop/hadoop2.8/etc/hadoop
export HBASE_PID_DIR=/root/hbase/pids
export HBASE_MANAGES_ZK=false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:配置的路径以自己的为准。HBASE_MANAGES_ZK=false 是不启用HBase自带的Zookeeper集群。&lt;/p&gt;
&lt;h3 id=&quot;修改-hbase-site.xml&quot;&gt;修改 hbase-site.xml&lt;/h3&gt;
&lt;p&gt;编辑hbase-site.xml 文件，在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 存储目录 --&amp;gt;
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;hbase.rootdir&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;hdfs://test1:9000/hbase&amp;lt;/value&amp;gt;  
 &amp;lt;description&amp;gt;The directory shared byregion servers.&amp;lt;/description&amp;gt;  
&amp;lt;/property&amp;gt;  
&amp;lt;!-- hbase的端口 --&amp;gt;
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;hbase.zookeeper.property.clientPort&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;2181&amp;lt;/value&amp;gt;  
 &amp;lt;description&amp;gt;Property from ZooKeeper'sconfig zoo.cfg. The port at which the clients will connect.  
 &amp;lt;/description&amp;gt;  
&amp;lt;/property&amp;gt;  
&amp;lt;!--  超时时间 --&amp;gt;
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;zookeeper.session.timeout&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;120000&amp;lt;/value&amp;gt;  
&amp;lt;/property&amp;gt;  
&amp;lt;!--  zookeeper 集群配置。如果是集群，则添加其它的主机地址 --&amp;gt;
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;hbase.zookeeper.quorum&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;test1&amp;lt;/value&amp;gt;  
&amp;lt;/property&amp;gt;  
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;hbase.tmp.dir&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;/root/hbase/tmp&amp;lt;/value&amp;gt;  
&amp;lt;/property&amp;gt;  
&amp;lt;!-- false是单机模式，true是分布式模式  --&amp;gt;
&amp;lt;property&amp;gt;  
 &amp;lt;name&amp;gt;hbase.cluster.distributed&amp;lt;/name&amp;gt;  
 &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;  
&amp;lt;/property&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:hbase.rootdir：这个目录是region server的共享目录，用来持久化Hbase 。hbase.cluster.distributed ：Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面。&lt;/p&gt;
&lt;h2 id=&quot;六hive整合hbase的环境配置以及测试&quot;&gt;六、Hive整合HBase的环境配置以及测试&lt;/h2&gt;
&lt;h3 id=&quot;环境配置&quot;&gt;1，环境配置&lt;/h3&gt;
&lt;p&gt;因为Hive与HBase整合的实现是利用两者本身对外的API接口互相通信来完成的，其具体工作交由Hive的lib目录中的hive-hbase-handler-&lt;em&gt;.jar工具类来实现。所以只需要将hive的 hive-hbase-handler-&lt;/em&gt;.jar 复制到hbase/lib中就可以了。&lt;br/&gt;切换到hive/lib目录下&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cp hive-hbase-handler-*.jar /opt/hbase/hbase1.2/lib&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218183724094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;注: 如果在hive整合hbase中，出现版本之类的问题，那么以hbase的版本为主，将hbase中的jar包覆盖hive的jar包。&lt;/p&gt;
&lt;h3 id=&quot;hive和hbase测试&quot;&gt;2，hive和hbase测试&lt;/h3&gt;
&lt;p&gt;在进行测试的时候，确保hadoop、hbase、hive环境已经成功搭建好，并且都成功启动了。&lt;br/&gt;打开xshell的两个命令窗口&lt;br/&gt;一个进入hive，一个进入hbase&lt;/p&gt;
&lt;h4 id=&quot;在hive中创建映射hbase的表&quot;&gt;6.2.1在hive中创建映射hbase的表&lt;/h4&gt;
&lt;p&gt;在hive中创建一个映射hbase的表，为了方便，设置两边的表名都为t_student，存储的表也是这个。&lt;br/&gt;在hive中输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create table t_student(id int,name string) stored by 'org.apache.hadoop.hive.hbase.HBaseStorageHandler' with serdeproperties(&quot;hbase.columns.mapping&quot;=&quot;:key,st1:name&quot;) tblproperties(&quot;hbase.table.name&quot;=&quot;t_student&quot;,&quot;hbase.mapred.output.outputtable&quot; = &quot;t_student&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明：第一个t_student 是hive表中的名称，第二个t_student是定义在hbase的table名称 ，第三个t_student 是存储数据表的名称(&quot;hbase.mapred.output.outputtable&quot; = &quot;t_student&quot;这个可以不要，表数据就存储在第二个表中了) 。&lt;br/&gt;(id int,name string) 这个是hive表结构。如果要增加字段，就以这种格式增加。如果要增加字段的注释，那么在字段后面添加comment ‘你要描述的’。&lt;br/&gt;例如:&lt;br/&gt;create table t_student(id int comment ‘StudentId’,name string comment ‘StudentName’)&lt;br/&gt;org.apache.hadoop.hive.hbase.HBaseStorageHandler 这个是指定的存储器。&lt;br/&gt;hbase.columns.mapping 是定义在hbase的列族。&lt;br/&gt;例如:st1就是列族，name就是列。在hive中创建表t_student，这个表包括两个字段（int型的id和string型的name）。 映射为hbase中的表t_student，key对应hbase的rowkey，value对应hbase的st1:name列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表成功创建之后&lt;br/&gt;在hive、hbase分别中查看表和表结构&lt;br/&gt;hive中输入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;show tables；
describe t_student;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;hbase输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;list
describe ‘t_student’&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218183832950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218183855444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;可以看到表已经成功的创建了&lt;/p&gt;
&lt;h4 id=&quot;数据同步测试&quot;&gt;6.2.2数据同步测试&lt;/h4&gt;
&lt;p&gt;进入hbase之后&lt;br/&gt;在t_student中添加两条数据 然后查询该表&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;put 't_student','1001','st1:name','zhangsan'
put 't_student','1002','st1:name','lisi'
scan 't_student'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218183918611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后切换到hive中&lt;br/&gt;查询该表&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from t_student;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218183931544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在hive中删除该表&lt;br/&gt;&lt;strong&gt;注:因为做测试要看结果，所以将表删除了。如果同学们要做测试的话，是没有必要删除该表的，因为在后面还会使用该表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后查看hive和hbase中的表是否删除了&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;drop table t_student;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184133272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184155642?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;通过这些可以看到hive和hbase之间的数据成功同步！&lt;/p&gt;
&lt;h4 id=&quot;关联查询测试&quot;&gt;6.2.3关联查询测试&lt;/h4&gt;
&lt;h5 id=&quot;hive外部表测试&quot;&gt;hive外部表测试&lt;/h5&gt;
&lt;p&gt;先在hbase中建一张t_student_info表，添加两个列族&lt;br/&gt;然后查看表结构&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create 't_student_info','st1','st2'
describe 't_student_info'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184225337?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在hive中创建外部表&lt;br/&gt;&lt;strong&gt;说明:创建外部表要使用EXTERNAL 关键字&lt;/strong&gt;&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create external table t_student_info(id int,age int,sex string) stored by 'org.apache.hadoop.hive.hbase.HBaseStorageHandler' with serdeproperties(&quot;hbase.columns.mapping&quot;=&quot;:key,st1:age,st2:sex&quot;) tblproperties(&quot;hbase.table.name&quot;=&quot;t_student_info&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184240901?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在t_student_info 中添加数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;put 't_student_info','1001','st2:sex','man'
put 't_student_info','1001','st1:age','20'
put 't_student_info','1002','st1:age','18'
put 't_student_info','1002','st2:sex','woman'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184434573?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在hive中查询该表&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from t_student_info;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184443608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查询到数据之后，然后将t_student 和t_student_info进行关联查询。&lt;br/&gt;输入:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from t_student t join t_student ti where t.id=ti.id ;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171218184454815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;&lt;strong&gt;说明:通过关联查询，可以得出表之间是可以关联查询的。但是明显看到hive 使用默认的mapreduce 作为引擎是多么的慢。。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他说明:&lt;br/&gt;由于自己的虚拟机配置实在太渣，即使调大reduce内存，限制每个reduce处理的数据量，还是不行，最后没办法使用公司的测试服务进行测试。&lt;br/&gt;在查询一张表的时候，hive没有使用引擎，因此相对比较快，如果是进行了关联查询之类的，就会使用引擎，由于hive默认的引擎是mr，所以会很慢，也和配置有一定关系，hive2.x以后官方就不建议使用mr了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文到此结束，谢谢阅读！&lt;br/&gt;版权声明:&lt;br/&gt;作者：虚无境&lt;br/&gt;博客园出处：&lt;a href=&quot;http://www.cnblogs.com/xuwujing&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/xuwujing&lt;/a&gt;&lt;br/&gt;CSDN出处：&lt;a href=&quot;http://blog.csdn.net/qazwsxpcm&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/qazwsxpcm&lt;/a&gt;　　　　&lt;br/&gt;个人博客出处：&lt;a href=&quot;http://www.panchengming.com/&quot; class=&quot;uri&quot;&gt;http://www.panchengming.com&lt;/a&gt;&lt;br/&gt;原创不易，转载请标明出处，谢谢！&lt;/p&gt;
</description>
<pubDate>Mon, 18 Dec 2017 10:47:00 +0000</pubDate>
<dc:creator>虚无境</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuwujing/p/8059079.html</dc:identifier>
</item>
</channel>
</rss>