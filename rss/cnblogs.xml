<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>5分钟看懂svg path 路径的所有命令（更有API解释、有图、有图文对比解析） - 一个有梦想的年轻人</title>
<link>http://www.cnblogs.com/guxuelong/p/7743736.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guxuelong/p/7743736.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;友情提示：更多详情、每个命令的例子、参数变化对比图文详解，欢迎关注&lt;span&gt;&lt;a href=&quot;https://www.guxuelong.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;九十七度&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;的博客：&lt;span&gt;&lt;a href=&quot;https://www.guxuelong.com/design/svg-path.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;SVG《Path》命令详解&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M = moveto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;M x y 移动到指定坐标，xy分别为x轴和y轴的坐标点，类似画笔的起点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;path中的起点，必须存在（文档中虽然没有提到过，但是path的其他命令都需要依赖一个初始位置，而实际操作过程中也没有需要到可以不使用M的情况，后面发现有例外我再过来补充。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L = lineto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;L x y 在初始位置（M 画的起点）和xy确定的坐标画一条线。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;两点一线，直线，绘图中很常见的方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;H = horizontal lineto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;H x 沿着x轴移动一段位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;V = vertical lineto&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V y 沿着y轴移动一段位置&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;C = curveto&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;C x1 y1 x2 y2 x y&lt;/span&gt;&lt;br/&gt;&lt;span&gt;三次贝塞尔曲线&lt;/span&gt;&lt;br/&gt;&lt;span&gt;当前点为起点，xy为终点，起点和x1y1控制曲线起始的斜率，终点和x2y2控制结束的斜率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S = smooth curveto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S x2 y2 x y&lt;/span&gt;&lt;br/&gt;&lt;span&gt;简化的贝塞尔曲线&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.如果S命令跟在一个C命令或者另一个S命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.如果S命令单独使用，前面没有C命令或者另一个S命令，那么它的两个控制点就会被假设为同一个点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q = quadratic Bézier curve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q x1 y1 x y&lt;/span&gt;&lt;br/&gt;&lt;span&gt;二次贝塞尔曲线Q&lt;/span&gt;&lt;br/&gt;&lt;span&gt;只需要一个控制点，用来确定起点和终点的曲线斜率。因此它需要两组参数，控制点和终点坐标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T = smooth quadratic Bézier curveto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q命令的简写命令。&amp;lt;/br&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;与S命令相似，T也会通过前一个控制点，推断出一个新的控制点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.T命令前面必须是一个Q命令，或者是另一个T命令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.如果T单独使用，那么控制点就会被认为和终点是同一个点，所以画出来的将是一条直线&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A = elliptical Arc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A rx,ry x-axis-rotation large-arc-flag sweep-flag x,y&lt;/span&gt;&lt;br/&gt;&lt;span&gt;rx 弧的半长轴长度&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ry 弧的半短轴长度&lt;/span&gt;&lt;br/&gt;&lt;span&gt;x-axis-rotation 是此段弧所在的x轴与水平方向的夹角，即x轴的逆时针旋转角度，负数代表顺时针旋转角度。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;large-arc-flag 为1表示大角度弧线，0表示小角度弧线&lt;/span&gt;&lt;br/&gt;&lt;span&gt;sweep-flag 为1表示从起点到终点弧线绕中心顺时针方向，0表示逆时针方向。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;xy 是终点坐标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Z = closepath&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 从当前位置到起点画一条直线闭合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;友情提示：更多详情、每个命令的例子、参数变化对比图文详解，欢迎关注&lt;span&gt;&lt;a href=&quot;https://www.guxuelong.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;九十七度&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;的博客：&lt;span&gt;&lt;a href=&quot;https://www.guxuelong.com/design/svg-path.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;SVG《Path》命令详解&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/852896/201710/852896-20171027154802164-1253501656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 27 Oct 2017 07:51:00 +0000</pubDate>
<dc:creator>一个有梦想的年轻人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guxuelong/p/7743736.html</dc:identifier>
</item>
<item>
<title>对象转字典 iOS - 黄增松</title>
<link>http://www.cnblogs.com/huangzs/p/7743731.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangzs/p/7743731.html</guid>
<description>&lt;p&gt;最近在开发SDK,我开放给客户model类设置信息后，对象转字典，POST给后台。&lt;/p&gt;
&lt;p&gt;思路：通过Runtime访问属性列表，快速转换成字典。&lt;/p&gt;

&lt;p&gt;FRObjectToDictionary.h类&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;@interface FRObjectToDictionary : &lt;span class=&quot;s3&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;+ (&lt;span class=&quot;s3&quot;&gt;NSDictionary*)getObjectData:(&lt;span class=&quot;s2&quot;&gt;id)obj;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;@end&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt; &lt;/p&gt;
&lt;p&gt;FRObjectToDictionary.m类&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;#import &quot;FRObjectToDictionary.h&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;#import &amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;@implementation FRObjectToDictionary&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;+ (&lt;span class=&quot;s3&quot;&gt;NSDictionary*)getObjectData:(&lt;span class=&quot;s2&quot;&gt;id)obj&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;    NSMutableDictionary &lt;span class=&quot;s4&quot;&gt;*dic = [NSMutableDictionary &lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;dictionary&lt;span class=&quot;s4&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;unsigned &lt;span class=&quot;s2&quot;&gt;int propsCount;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span class=&quot;s3&quot;&gt;objc_property_t *props = &lt;span class=&quot;s5&quot;&gt;class_copyPropertyList([obj &lt;span class=&quot;s5&quot;&gt;class], &amp;amp;propsCount);&lt;span class=&quot;s6&quot;&gt;//获得属性列表&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;for(&lt;span class=&quot;s2&quot;&gt;int i = &lt;span class=&quot;s7&quot;&gt;0;i &amp;lt; propsCount; i++)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s3&quot;&gt;objc_property_t prop = props[i];&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;        &lt;span class=&quot;s3&quot;&gt;NSString &lt;span class=&quot;s4&quot;&gt;*propName = [&lt;span class=&quot;s3&quot;&gt;NSString &lt;span class=&quot;s4&quot;&gt;stringWithUTF8String&lt;span class=&quot;s4&quot;&gt;:property_getName&lt;span class=&quot;s4&quot;&gt;(prop)];&lt;span class=&quot;s6&quot;&gt;//获得属性的名称&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;id value = [obj &lt;span class=&quot;s5&quot;&gt;valueForKey:propName];&lt;span class=&quot;s6&quot;&gt;//kvc读值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;if(value == &lt;span class=&quot;s2&quot;&gt;nil)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            value = [&lt;span class=&quot;s3&quot;&gt;NSNull &lt;span class=&quot;s5&quot;&gt;null];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            value = [&lt;span class=&quot;s2&quot;&gt;self &lt;span class=&quot;s8&quot;&gt;getObjectInternal:value];&lt;span class=&quot;s6&quot;&gt;//自定义处理数组，字典，其他类&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        [dic &lt;span class=&quot;s5&quot;&gt;setObject:value &lt;span class=&quot;s5&quot;&gt;forKey:propName];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;return dic;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;+ (&lt;span class=&quot;s2&quot;&gt;id)getObjectInternal:(&lt;span class=&quot;s2&quot;&gt;id)obj&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;if&lt;span class=&quot;s4&quot;&gt;([obj isKindOfClass&lt;span class=&quot;s4&quot;&gt;:[&lt;span class=&quot;s3&quot;&gt;NSString &lt;span class=&quot;s4&quot;&gt;class&lt;span class=&quot;s4&quot;&gt;]]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       || [obj &lt;span class=&quot;s5&quot;&gt;isKindOfClass:[&lt;span class=&quot;s3&quot;&gt;NSNumber &lt;span class=&quot;s5&quot;&gt;class]]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       || [obj &lt;span class=&quot;s5&quot;&gt;isKindOfClass:[&lt;span class=&quot;s3&quot;&gt;NSNull &lt;span class=&quot;s5&quot;&gt;class]])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;return obj;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;if&lt;span class=&quot;s4&quot;&gt;([obj isKindOfClass&lt;span class=&quot;s4&quot;&gt;:[&lt;span class=&quot;s3&quot;&gt;NSArray &lt;span class=&quot;s4&quot;&gt;class&lt;span class=&quot;s4&quot;&gt;]])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s3&quot;&gt;NSArray *objarr = obj;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;        NSMutableArray &lt;span class=&quot;s4&quot;&gt;*arr = [NSMutableArray &lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;arrayWithCapacity&lt;span class=&quot;s4&quot;&gt;:objarr.count&lt;span class=&quot;s4&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;for(&lt;span class=&quot;s2&quot;&gt;int i = &lt;span class=&quot;s7&quot;&gt;0;i &amp;lt; objarr.&lt;span class=&quot;s3&quot;&gt;count; i++)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            [arr setObject&lt;span class=&quot;s4&quot;&gt;:[&lt;span class=&quot;s2&quot;&gt;self &lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;s8&quot;&gt;getObjectInternal&lt;span class=&quot;s4&quot;&gt;:[objarr objectAtIndex&lt;span class=&quot;s4&quot;&gt;:i]] atIndexedSubscript&lt;span class=&quot;s4&quot;&gt;:i];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;return arr;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;if&lt;span class=&quot;s4&quot;&gt;([obj isKindOfClass&lt;span class=&quot;s4&quot;&gt;:[&lt;span class=&quot;s3&quot;&gt;NSDictionary &lt;span class=&quot;s4&quot;&gt;class&lt;span class=&quot;s4&quot;&gt;]])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s3&quot;&gt;NSDictionary *objdic = obj;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;        NSMutableDictionary &lt;span class=&quot;s4&quot;&gt;*dic = [NSMutableDictionary &lt;span class=&quot;s4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;dictionaryWithCapacity&lt;span class=&quot;s4&quot;&gt;:[objdic &lt;span class=&quot;s5&quot;&gt;count&lt;span class=&quot;s4&quot;&gt;]];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;for(&lt;span class=&quot;s3&quot;&gt;NSString *key &lt;span class=&quot;s2&quot;&gt;in objdic.&lt;span class=&quot;s3&quot;&gt;allKeys)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            [dic &lt;span class=&quot;s5&quot;&gt;setObject:[&lt;span class=&quot;s2&quot;&gt;self &lt;span class=&quot;s8&quot;&gt;getObjectInternal:[objdic &lt;span class=&quot;s5&quot;&gt;objectForKey:key]] &lt;span class=&quot;s5&quot;&gt;forKey:key];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;return dic;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;return &lt;span class=&quot;s4&quot;&gt;[&lt;span class=&quot;s2&quot;&gt;self &lt;span class=&quot;s4&quot;&gt;getObjectData&lt;span class=&quot;s4&quot;&gt;:obj];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;@end&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt; &lt;/p&gt;
&lt;p&gt;调用时：&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[FRObjectToDictionary &lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;getObjectData&lt;span class=&quot;s1&quot;&gt;:aModel]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 27 Oct 2017 07:50:00 +0000</pubDate>
<dc:creator>黄增松</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangzs/p/7743731.html</dc:identifier>
</item>
<item>
<title>初学者易上手的SSH-hibernate03 三大状态与缓存 - 柯一</title>
<link>http://www.cnblogs.com/lzx2509254166/p/7743632.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzx2509254166/p/7743632.html</guid>
<description>&lt;p&gt;这章主要来浅的学习下hibernate三大状态与缓存。首先来看下三大状态:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171027095002805-611308036.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，三大状态分别为临时状态（Transient），持久化状态（Persistent），游离状态（Detached）。那么三大状态具体怎么来解释?&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Student stu = &lt;span&gt;new&lt;/span&gt; Student(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;学生1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;长沙&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码段，&lt;span&gt;&lt;strong&gt;new一个学生对象，内存中有了该对象，但数据库与session缓存中并不存在，即此时为临时状态&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        Student stu = &lt;span&gt;new&lt;/span&gt; Student(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;学生1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;长沙&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);
        
        session.saveOrUpdate(stu);&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; transaction.commit();&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;new出来的对象加入到session缓存中，并同过底层的sql语句操作对象到数据库中，即此时为持久化状态。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        session.close();
    
        sessionfactory.close();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 关闭session对象后，学生对象依然存在数据库中，但&lt;/strong&gt;却已不存在于&lt;/span&gt;session中，即脱离了session对象，此时为游离状态。&lt;/p&gt;

&lt;p&gt;接下来看缓存：&lt;/p&gt;
&lt;p&gt;缓存是介于物理数据源与应用程序之间，是对数据库中的数据复制一份临时放在内存中的容器，其作用是为了减少应用程序对物理数据源访问的次数，从而提高了应用程序的运行性能。Hibernate在进行读取数据的时候，根据缓存机制在相应的缓存中查询，如果在缓存中找到了需要的数据(我们把这称做“缓存命 中&quot;)，则就直接把命中的数据作为结果加以利用，避免了大量发送SQL语句到数据库查询的性能损耗。&lt;/p&gt;
&lt;p&gt;hibernate缓存分为一级缓存与二级缓存，一级缓存就是我们常用的session，而二级缓存就是SessionFactory。&lt;/p&gt;
&lt;p&gt;Session内置不能被卸载，Session的缓存是事务范围的缓存（Session对象的生命周期通常对应一个数据库事务或者一个应用事务）。&lt;br/&gt;一级缓存中，持久化类的每个实例都具有唯一的OID。&lt;/p&gt;
&lt;p&gt;由于SessionFactory对象的生命周期和应用程序的整个过程对应，因此Hibernate二级缓存是进程范围或者集群范围的缓存，有可能出现并发问题，因此需要采用适当的并发访问策略，该策略为被缓存的数据提供了事务隔离级别。&lt;br/&gt;第二级缓存是可选的，是一个可配置的插件，默认下SessionFactory不会启用这个插件。&lt;br/&gt;Hibernate提供了org.hibernate.cache.CacheProvider接口,它充当缓存插件与Hibernate之间的适配器。&lt;/p&gt;
&lt;p&gt;在通常情况下会将具有以下特征的数据放入到二级缓存中：&lt;/p&gt;
&lt;p&gt;●   很少被修改的数据。&lt;/p&gt;
&lt;p&gt;●   不是很重要的数据，允许出现偶尔并发的数据。&lt;/p&gt;
&lt;p&gt;●   不会被并发访问的数据。&lt;/p&gt;
&lt;p&gt;●   参考数据。&lt;/p&gt;
&lt;p&gt;       而对于具有以下特征的数据则不适合放在二级缓存中：&lt;/p&gt;
&lt;p&gt;●   经常被修改的数据。&lt;/p&gt;
&lt;p&gt;●   财务数据，绝对不允许出现并发。&lt;/p&gt;
&lt;p&gt;●   与其他应用共享的数据。&lt;/p&gt;
&lt;p&gt;那么来配置一个二级缓存吧。&lt;/p&gt;
&lt;p&gt;首先要导入ehcache包以及hibernate-ehcache包（对应hibernate版本），既然是maven项目，那么当然在pom.xml中引入依赖。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--hibernate-ehcache --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;hibernate-ehcache&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;5.2&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;.Final&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--net.sf.ehcache/ehcache --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;net.sf.ehcache&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;2.10&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来在hibernate.cfg.xml中进行配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &amp;lt;!-- 开启二级缓存 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cache.use_second_level_cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 开启查询二级缓存 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cache.use_query_cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- Hibernate4.0以上设置factory 缓存工具 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hibernate.cache.region.factory_class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&amp;lt;/property&amp;gt;
        &amp;lt;!-- 二级缓存 ehcache的配置文件位置 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hibernate.cache.provider_configuration_file_resource_path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;ehcache.xml&amp;lt;/property&amp;gt;
        &amp;lt;!-- 映射文件 --&amp;gt;
        &amp;lt;mapping resource=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com/entity/Student.hbm.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
        &amp;lt;!-- 需要缓存的类 --&amp;gt;
        &amp;lt;&lt;span&gt;class&lt;/span&gt;-cache usage=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;read-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.entity.Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的ehcache.xml文件放与hibernate.cfg.xml同级即可。ehcache.xml里面的元素可以直接在以下路径中找到，不需要自己写。项目-&amp;gt;Java Resources-&amp;gt;Libraries-&amp;gt;Maven Dependencies-&amp;gt;ehcache-2.10.4.jar-&amp;gt;ehcache-failsafe.xml&lt;/p&gt;
&lt;p&gt;找到后打开，全选copy复制，再把&amp;lt;diskStore path=&quot;java.io.tmpdir&quot;/&amp;gt;节点中path路径改成你自己定义的即可。最后测试二级缓存。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        Session session1 &lt;/span&gt;=&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据主键得到对象(查询单个记录)&lt;/span&gt;
        Student st = session.&lt;span&gt;get&lt;/span&gt;(Student.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 二级缓存&lt;/span&gt;
        List&amp;lt;Student&amp;gt; ls = session1.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setCacheable(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student s : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(s);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
&lt;span&gt;        factory.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
自己对缓存也不是很懂！&lt;br/&gt;本章结束。
&lt;/pre&gt;

</description>
<pubDate>Fri, 27 Oct 2017 07:37:00 +0000</pubDate>
<dc:creator>柯一</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzx2509254166/p/7743632.html</dc:identifier>
</item>
<item>
<title>树莓派.GPRS.短信接收器 - 幻河</title>
<link>http://www.cnblogs.com/visionsl/p/7742604.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/visionsl/p/7742604.html</guid>
<description>&lt;p&gt;&lt;strong&gt;起因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1199441/201710/1199441-20171027120629492-966828108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;曾经用过西门子出的短信猫, 好处是直接有SDK开发包, 不会硬件开发也能直接使用&lt;/p&gt;
&lt;p&gt;缺点也是明显的, 就是只支持Windows系统, 另外就是在Windows下工作很不稳定, 隔开几天就会出现收不到短信的毛病, 要断电重启设备才有机会恢复(还不是必然恢复)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1199441/201710/1199441-20171027121315508-1010612714.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后来在地府(DFRobot)发现了新品&quot;Gravity: UART A6 GSM &amp;amp; GPRS 无线通信模块&quot;，买来试了一下发现可用（不过不清楚地府的A6和外面常见的SIM800系列、SIM900系列有什么不同）， 而且可以自己写驱动支持Linux下运行，完美&lt;/p&gt;
&lt;p&gt;期间也碰到一些小坑， 记录一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需求清单&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 -&lt;span&gt; 自动初始化GPRS模块

 &lt;/span&gt;- 接收短信并能解析出重要元素(包括:来电号码/时间/&lt;span&gt;短信内容)

 &lt;/span&gt;-&lt;span&gt; 把解析到的短信内容上传到服务器保存

 &lt;/span&gt;-&lt;span&gt; 清除已阅短信

 &lt;/span&gt;- 支持Linux系统&lt;p&gt;- 开发语言:JAVA
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;硬件清单&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 -&lt;span&gt; 树莓派2代B型（3代串口使用上有区别，需要另外的方法处理）

 &lt;/span&gt;- Gravity: UART A6 GSM &amp;amp;&lt;span&gt; GPRS 无线通信模块

 &lt;/span&gt;-&lt;span&gt; USB无线网卡（可选）

 &lt;/span&gt;-&lt;span&gt; USB电源适配器2个（重要,为什么要2个后面会说明）

 &lt;/span&gt;- 16GB TF卡一张&lt;br/&gt;- 可以接收短信的手机卡1张(必须是移动或联通的卡, 电信的不支持)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;接线方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1199441/201710/1199441-20171027121645773-1683399885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（树莓派40PIN引脚图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1199441/201710/1199441-20171027121822492-1065821938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（A6引脚说明）&lt;/p&gt;

&lt;p&gt;树莓派　　　　　A6&lt;br/&gt;--------------------------------------&lt;/p&gt;
&lt;p&gt;GPIO15　　　　RX&lt;/p&gt;
&lt;p&gt;GPIO16　　　　TX&lt;/p&gt;
&lt;p&gt;GND　　　　　  GND&lt;/p&gt;

&lt;p&gt;重要： &lt;span&gt;A6模块的电源需要单独供电！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A6模块不能直接从树莓派上的GPIO 5V针脚接电，因为电流不足！&lt;/p&gt;
&lt;p&gt;最开始的时候， 我是从树莓派上取电供给A6， 结果串口怎么都无法通信，刚开始还以为是波特率的问题，结果折腾了半天后， 留意到A6上有个蓝灯（上面写着SLEEP）有明暗变化， 不稳定，感觉像是电压不稳定一样， 果断试了一下把A6外接电源，然后A6才正常工作！ 可以从蓝灯看得出来，亮度较高，且稳定（不闪烁）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;资料准备&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 -&lt;span&gt; 树莓派系统（用NOOBS或Raspbian都可以）

 &lt;/span&gt;-&lt;span&gt; pi4j （JAVA支持包）

 &lt;/span&gt;- AT指令知识
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;树莓派系统安装方法可以自行搜索，或看我之前发过的文章&lt;/p&gt;
&lt;p&gt;系统装好后还涉及到如何把GPIO15（TX）和GPIO16（RX）启用的问题， 见这篇文章：《&lt;a href=&quot;http://blog.sina.com.cn/s/blog_6b2252130102w4e7.html&quot; target=&quot;_blank&quot;&gt;两个树莓派通过串口通信&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;pi4j是个能让JAVA访问树莓派40个GPIO的支持包， 可以上官网下载安装，&lt;a href=&quot;http://pi4j.com/&quot; target=&quot;_blank&quot;&gt;传送门&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最重要和容易掉坑的是关于接收短信的AT指令部分，下面要详细讲解&lt;/p&gt;
&lt;p&gt;这里需要做的功能是利用A6接收短信，涉及到以下指令&lt;/p&gt;
&lt;p&gt;* 第一步：初始化GPRS.模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
* AT 　　　　　握手 /&lt;span&gt; SIM卡检测等
&lt;/span&gt;* AT+CPIN?&lt;span&gt; 　 查询是否检测到SIM卡
&lt;/span&gt;* AT+CSQ 　　 信号质量测试，值为0-&lt;span&gt;31&lt;/span&gt;&lt;span&gt;,31表示最好
&lt;/span&gt;* AT+&lt;span&gt;CCID  　 读取SIM的CCID(SIM卡背面20位数字)，可以检测是否有SIM卡或者是否接触良好
&lt;/span&gt;* AT+CREG?    检测是否注册网络
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;------以上指令用于初始化模块，一般接线没问题，波特率设置没问题的话都是比较容易调通&lt;/p&gt;
&lt;p&gt;* 第二步：初始化GPRS.设置短信模式及短信接收参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
* AT+CMGF=&lt;span&gt;1&lt;/span&gt;    　　　　　　　　  &lt;span&gt;0&lt;/span&gt;-PDU, &lt;span&gt;1&lt;/span&gt;-&lt;span&gt;文本格式
&lt;/span&gt;* AT+CSDH=&lt;span&gt;1&lt;/span&gt;
* AT+CPMS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    　 将信息保存在SIM卡中, SM-&lt;span&gt;表示存在SIM卡上
&lt;/span&gt;* AT+CNMI=&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;    　　　　 收接通知,并存在指定位置(与AT+CPMS设置有关)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;极易掉坑系列，逐个讲解：&lt;/p&gt;
&lt;p&gt;设置短信格式指令：AT+CMGF=1&lt;/p&gt;
&lt;p&gt;分2种短信格式： 0-PDU, 1-文本格式&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果设置的是PDU模式， 那么你收到的短信就是这样 的：&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
+CIEV: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MESSAGE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;

+CMT: ,&lt;span&gt;32&lt;/span&gt;&lt;span&gt;
0891683110200005F0040BA18126601728F00000710102610272230E74747A0E4ACF416110BD3CA703&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何读懂PDU要另外翻阅专业文章， 这里如果你不使用发短信功能的话，建议不要采用PDU格式&lt;/p&gt;
&lt;p&gt;PDU格式的好处是可以发中文短信！&lt;/p&gt;
&lt;p&gt;好， 如果设置是文本格式，收到的短信就类似下面这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
+CIEV: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MESSAGE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;

+CMT: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test again ，中文也试试&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接就能看到短信内容，中文也一样可以显示出来（注意它可以GB2312或GBK编码）&lt;/p&gt;
&lt;p&gt;然后就有问题产生了， 新短信来时是上面这样的格式， 短信内容是可以获取了， 但特么为什么看不出是谁（手机号）发来的呢？下面就是入坑的时候：&lt;/p&gt;
&lt;p&gt;看不到手机号怎么办， 你可以试试这个指令： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
AT+CMGL=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ALL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它能读出存在SIM卡上的短信(包括已读和未读,以及外发时存着的短信),执行后收到的内容大概是这个样子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
+CMGL: &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106907931100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/06/02,10:15:21+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;134&lt;/span&gt;&lt;span&gt;
【小米】[小米移动]您2017年5月共消费0.75元，当前余额99.05元。其中：数据流量费0.05元；语音通信费0.7元；短&lt;/span&gt;/彩信费+CMGL: &lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106907931100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/07/02,10:15:19+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
。查询账单 http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10046.mi.com 。+CMGL: 4,&quot;REC READ&quot;,&quot;106907931100&quot;,,&quot;2017/07/02,10:15:19+08&quot;,160,134&lt;/span&gt;
【小米】[小米移动]您2017年6月共消费1.32元，当前余额97.88元。其中：数据流量费1.32元；语音通信费0元；短/彩信费0元+CMGL: &lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106908761100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/08/02,10:15:30+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
。查询账单 http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10046.mi.com 。+CMGL: 6,&quot;REC READ&quot;,&quot;106908761100&quot;,,&quot;2017/08/02,10:15:30+08&quot;,160,134&lt;/span&gt;
【小米】[小米移动]您2017年7月共消费0.81元，当前余额97.01元。其中：数据流量费0.81元；语音通信费0元；短/彩信费0元AT+CMGD=&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好! 很明显你要的信息都有了, 来电号码/时间/短信内容, 似乎可以用了喔!&lt;/p&gt;
&lt;p&gt;但是这时你会发现刚收到的信息不一定在这个清单里! 这是怎么回事呢? 我反正查阅了很多资料,费了大量的时间也不知怎么回事&lt;/p&gt;
&lt;p&gt;后来才发现这个指令(查看SIM卡内存情况):&lt;/p&gt;

&lt;p&gt;执行后你可能会看到这个结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
+CPMS: &lt;span&gt;&quot;MT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;&quot;ME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;

OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重点关注&quot;SM&quot;后面第1个数字&quot;1&quot;代表当前存了多少条短信, 第2个数字&quot;50&quot;代表存储上限&lt;/p&gt;
&lt;p&gt;&quot;SM&quot;表示SIM卡, 其它2个一个代表手机设备, 另一个是手机内存&lt;/p&gt;
&lt;p&gt;然后你给A6发个新短信, 有可能发现这个&quot;1&quot;不会增加! 为什么收到的新短信不存到SIM卡上呢?&lt;/p&gt;
&lt;p&gt;然后就找到这个指令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
AT+CNMI＝&amp;lt;mode&amp;gt;,&amp;lt;mt&amp;gt;,&amp;lt;bm&amp;gt;,&amp;lt;ds&amp;gt;,&amp;lt;bfr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个指令比较复杂, 它负责设置收到新短信后的处理机制, 下面是参数含义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
    &amp;lt;mode&amp;gt;&lt;span&gt;控制通知TE的方式.
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; - 先将通知缓存起来,再按照&amp;lt;mt&amp;gt;&lt;span&gt;的值进行发送.
    &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; 在数据线空闲的情况下,通知TE,否则,不通知TE.
    &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; -&lt;span&gt; 数据线空闲时,直接通知TE;否则先将通知缓存起来,待数据线空闲时再行发送.
    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; -&lt;span&gt; 直接通知TE.在数据线被占用的情况下,通知TE的消息将混合在数据中一起传输.
 
    &lt;/span&gt;&amp;lt;mt&amp;gt;&lt;span&gt;设置短消息存储和通知TE的内容.
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; - 接受的短消息存储到默认的内存位置(包括class &lt;span&gt;3&lt;/span&gt;&lt;span&gt;),不通知TE.
    &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; - 接收的短消息储存到默认的内存位置,并且向TE发出通知(包括class &lt;span&gt;3&lt;/span&gt;).通知的形式为:+CMTI:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;lt;index&amp;gt;
    &lt;span&gt;2&lt;/span&gt; - 对于class 2短消息,储存到SIM卡,并且向TE发出通知;对于其他class,直接将短消息转发到TE:+CMT:[&amp;lt;alpha&amp;gt;],&amp;lt;length&amp;gt;&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&amp;lt;pdu&amp;gt;&lt;span&gt;(PDU模式)
         或者&lt;/span&gt;+CMT:&amp;lt;oa&amp;gt;,[&amp;lt;alpha&amp;gt;,]&amp;lt;scts&amp;gt;[,&amp;lt;tooa&amp;gt;,&amp;lt;fo&amp;gt;,&amp;lt;pid&amp;gt;,&amp;lt;dcs&amp;gt;,&amp;lt;sca&amp;gt;,&amp;lt;tosca&amp;gt;,&amp;lt;length&amp;gt;]&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&amp;lt;data&amp;gt;&lt;span&gt;(text模式)
    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; - 对于class 3短消息,直接转发到TE,同&amp;lt;mt&amp;gt;＝&lt;span&gt;2&lt;/span&gt;;对于其他class,同&amp;lt;mt&amp;gt;＝&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.
 
    &lt;/span&gt;&amp;lt;bm&amp;gt;&lt;span&gt;设置小区广播
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; -&lt;span&gt; 小区广播不通知
    &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; - 新的小区广播通知,返回+&lt;span&gt;CBM:;length;;CR;;LF;;pdu;
    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; - Class3格式的小区广播通知,使用bm=&lt;span&gt;2格式
    &lt;/span&gt;&amp;lt;ds&amp;gt;&lt;span&gt;状态报告
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; -&lt;span&gt; 状态报告不通知
    &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; - 新的状态报告通知,返回:+&lt;span&gt;CDS:;length;;CR;;LF;;pdu;
    &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; - 如果新的状态报告存储到ME,则返回:+CDSI:;mem;,;index;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相信看完你已经蒙圈, 我就是, 如果你看得懂, 那恭喜了!&lt;/p&gt;
&lt;p&gt;我在这里采用的参数是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
AT+CNMI=&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;        收接通知,并存在指定位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时再测试一下发条新短信给A6&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
+CIEV: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MESSAGE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;

+CMTI: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在不显示短信内容了(反正显示也没用, 因为没来电号码), 但&quot;SM&quot;后面仍然是0!&lt;/p&gt;
&lt;p&gt;这时再用AT+CMGL=&quot;ALL&quot; 你会发现短信依然没存到卡上, 结果当然也没法看到短信内容及来电号码等信息啦&lt;/p&gt;
&lt;p&gt;这是怎么回事裂&lt;/p&gt;
&lt;p&gt;后来发现这个AT+CNMI跟刚才说的指令(AT+CPMS)息息相关,再来查一下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
AT+CPMS?
+CPMS: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;

OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意看, 如果你看到的和上面差不多, 会发现有&quot;MT&quot;和&quot;ME&quot;存在, 这时收到短信虽然在CNMI告诉A6收到短信要存下来啊! 但是A6找不到&quot;MT&quot;和&quot;ME&quot;,结果存储失败!&lt;/p&gt;
&lt;p&gt;我们现在是希望它收到短信后能存在SIM卡上, 所以要设置一下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
AT+CPMS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再发条短信试试效果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
+CIEV: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MESSAGE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;

+CMTI: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在看到&quot;SM&quot;后面是1了! 后面这个1表示的是短信存储的SIM卡内存的位置&lt;/p&gt;
&lt;p&gt;然后可以用指令查看短信内容了, 这里有2种方法&lt;/p&gt;
&lt;p&gt;方法1,单条读取(AT+CMGR=index)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
AT+CMGR=&lt;span&gt;1&lt;/span&gt;

+CMGR: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC UNREAD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18620671820&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/10/26,11:37:03+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;161&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+8613010200500&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;145&lt;/span&gt;,&lt;span&gt;25&lt;/span&gt;&lt;span&gt;
test again ，中文也试试&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;方法2,全部读取(AT+CMGL=&quot;ALL&quot;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
+CMGL: &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106907931100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/06/02,10:15:21+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;134&lt;/span&gt;&lt;span&gt;
【小米】[小米移动]您2017年5月共消费0.75元，当前余额99.05元。其中：数据流量费0.05元；语音通信费0.7元；短&lt;/span&gt;/彩信费+CMGL: &lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106907931100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/07/02,10:15:19+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
。查询账单 http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10046.mi.com 。+CMGL: 4,&quot;REC READ&quot;,&quot;106907931100&quot;,,&quot;2017/07/02,10:15:19+08&quot;,160,134&lt;/span&gt;
【小米】[小米移动]您2017年6月共消费1.32元，当前余额97.88元。其中：数据流量费1.32元；语音通信费0元；短/彩信费0元+CMGL: &lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REC READ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;106908761100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017/08/02,10:15:30+08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;54&lt;/span&gt;&lt;span&gt;
。查询账单 http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10046.mi.com 。+CMGL: 6,&quot;REC READ&quot;,&quot;106908761100&quot;,,&quot;2017/08/02,10:15:30+08&quot;,160,134&lt;/span&gt;
【小米】[小米移动]您2017年7月共消费0.81元，当前余额97.01元。其中：数据流量费0.81元；语音通信费0元；短/彩信费0元AT+CMGD=&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;小结一下正确获取短信的姿势(流程):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
AT+CMGF=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
AT&lt;/span&gt;+CSDH=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
AT&lt;/span&gt;+CPMS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
AT&lt;/span&gt;+CNMI=&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 其中有一条指令没解释:AT+CSDH=1&lt;/p&gt;
&lt;p&gt;这个留给大家查资料&lt;/p&gt;

&lt;p&gt;好, 接下来只需要写出Java代码分析短信内容即可.&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;程序部分&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;177&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import java.io.IOException;
import java.util.Date;

import com.common.DateTimeUtil;
import com.common.StringUtil;
import com.pi4j.io.serial.Baud;
import com.pi4j.io.serial.DataBits;
import com.pi4j.io.serial.FlowControl;
import com.pi4j.io.serial.Parity;
import com.pi4j.io.serial.Serial;
import com.pi4j.io.serial.SerialConfig;
import com.pi4j.io.serial.SerialFactory;
import com.pi4j.io.serial.SerialPort;
import com.pi4j.io.serial.StopBits;
import com.pi4j.util.CommandArgumentParser;
import com.pi4j.util.Console;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * This example code demonstrates how to perform serial communications using the Raspberry Pi.
 *
 * @author Robert Savage
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SerialListenSMS {

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * This example program supports the following optional command arguments/options:
     *   &quot;--device (device-path)&quot;                   [DEFAULT: /dev/ttyAMA0]
     *   &quot;--baud (baud-rate)&quot;                       [DEFAULT: 38400]
     *   &quot;--data-bits (5|6|7|8)&quot;                    [DEFAULT: 8]
     *   &quot;--parity (none|odd|even)&quot;                 [DEFAULT: none]
     *   &quot;--stop-bits (1|2)&quot;                        [DEFAULT: 1]
     *   &quot;--flow-control (none|hardware|software)&quot;  [DEFAULT: none]
     *
     * @param args
     * @throws InterruptedException
     * @throws IOException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]) throws InterruptedException, IOException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; !! ATTENTION !!
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; By default, the serial port is configured as a console port
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for interacting with the Linux OS shell.  If you want to use
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the serial port in a software program, you must disable the
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; OS from using this port.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Please see this blog article for instructions on how to disable
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the OS console for this port:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;https://www.cube-controls.com/2015/11/02/disable-serial-port-terminal-output-on-raspbian/&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create Pi4J console wrapper/helper
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (This is a utility class to abstract some of the boilerplate code)&lt;/span&gt;
        final Console console = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Console();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; print program title/header&lt;/span&gt;
        console.title(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;-- The Pi4J Project --&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;监听串口(GPIO15-Tx / GPIO16-Rx)数据并写入Memcached中&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; allow for user to exit program using CTRL-C&lt;/span&gt;
&lt;span&gt;        console.promptForExit();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create an instance of the serial communications class&lt;/span&gt;
        final Serial serial =&lt;span&gt; SerialFactory.createInstance();
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt; [] data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据缓冲区        &lt;/span&gt;

        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create serial config object&lt;/span&gt;
            SerialConfig config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SerialConfig();

            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;SerialPort.getDefaultPort());
            config.device(SerialPort.getDefaultPort())        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;/dev/ttyACM0&quot;&lt;/span&gt;
&lt;span&gt;                  .baud(Baud._115200)
                  .dataBits(DataBits._8)
                  .parity(Parity.NONE)
                  .stopBits(StopBits._1)
                  .flowControl(FlowControl.NONE);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parse optional command argument options to override the default serial settings.&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(args.length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                config &lt;/span&gt;=&lt;span&gt; CommandArgumentParser.getSerialConfig(config, args);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; display connection details&lt;/span&gt;
            console.box(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Connecting to: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; config.toString(),
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Data received on serial port will be displayed below.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; open the default serial device/port with the configuration settings&lt;/span&gt;
&lt;span&gt;            serial.open(config);
            serial.flush();
            
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serial.isOpen():&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;serial.isOpen());
            
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*初始化GPRS模块*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            boolean isinit &lt;/span&gt;=&lt;span&gt; initGPRS(serial);
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; trydelay = &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;isinit){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;初始化GPRS模块不成功, 请检查模块工作状态灯, 以及SIM卡是否接触良好...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;trydelay);
                Thread.sleep(trydelay&lt;/span&gt;+=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                isinit &lt;/span&gt;=&lt;span&gt; initGPRS(serial);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(trydelay&amp;gt;(&lt;span&gt;10&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;)){&lt;span&gt;return&lt;/span&gt;;}        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测10次都不成功时, 退出程序&lt;/span&gt;
&lt;span&gt;            }
            
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*初始化短信参数*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            isinit &lt;/span&gt;=&lt;span&gt; initGPRS_SMS(serial);
            trydelay &lt;/span&gt;= &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;isinit){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;初始化短信参数不成功, 请检查模块工作状态灯, 以及SIM卡是否接触良好.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Thread.sleep(trydelay&lt;/span&gt;+=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                isinit &lt;/span&gt;=&lt;span&gt; initGPRS_SMS(serial);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(trydelay&amp;gt;(&lt;span&gt;10&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;)){&lt;span&gt;return&lt;/span&gt;;}        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测10次都不成功时, 退出程序&lt;/span&gt;
&lt;span&gt;            }
            
            
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次开机时尝试读取一次存储卡中的短信&lt;/span&gt;
            String res = &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGL=\&quot;ALL\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GBK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGL=\&quot;REC READ\&quot;.res:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;res);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面进入主程序&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进入短信监听程序:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; old_msg_delay = &lt;span&gt;60000&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置旧短信搜索间隔时间(毫秒),在SIM卡内存中搜索数据&lt;/span&gt;
            &lt;span&gt;long&lt;/span&gt; old_msg_count = &lt;span&gt;0&lt;/span&gt;;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;旧短信计时器&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            data &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;serial.isOpen()){
                    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;串口未打开, 退出程序&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }    
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(old_msg_count&amp;gt;=&lt;span&gt;old_msg_delay){
                    &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;                    System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送获取SIM卡内存中的所有信息的指令&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    sendCMD(serial, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGL=\&quot;ALL\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    old_msg_count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    old_msg_count&lt;/span&gt;+=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;old_msg_count...&quot;+old_msg_count);&lt;/span&gt;
&lt;span&gt;                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(serial.available()&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(serial.available()&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                        data&lt;/span&gt;=serial.read();                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处接收到的数据上限是1024
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.print(new String(serial.read(), &quot;utf-8&quot;));&lt;/span&gt;
&lt;span&gt;                    }
                    serial.flush();
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收到数据&lt;/span&gt;
                    String cc = &lt;span&gt;new&lt;/span&gt; String(data, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GBK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理中文&lt;/span&gt;
                    System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cc:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;cc);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cc!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !cc.trim().equals(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)){
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理数据&lt;/span&gt;

                        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
                         * 有新短信时:
                         *  +CIEV: &quot;MESSAGE&quot;,1
                         *  
                         *  +CMTI: &quot;SM&quot;,1
                         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;(cc.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+CMTI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                            index &lt;/span&gt;=&lt;span&gt; getIndexFromNewSMS(cc);
                            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发现新短信.index:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;index);
                            sendCMD(serial, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGR=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;index);
                        }
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cc.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+CMGR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                            String[] contents &lt;/span&gt;=&lt;span&gt; getContentFromIndex(index, cc);
                            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[AT+CMGR=index]读取存在卡上的短信内容.分析后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(contents!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;新短信内容:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String tt : contents){
                                    System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(tt);
                                }
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存读到的短信 -&amp;gt; 服务器&lt;/span&gt;
                                &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(sendDataToServer(contents)){
                                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除已读出的短信&lt;/span&gt;
                                    System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除已读出的新短信.index:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+contents[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
                                    delSMSByIndex(serial, Integer.parseInt(contents[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]));
                                }
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;新短信内容:null&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            }
                        }

                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
                         * 查询旧短信时:
                         * AT+CMGL=&quot;ALL&quot;
                         * 
                         * +CMGL: 1,&quot;REC READ&quot;,&quot;18620671820&quot;,,&quot;2017/10/26,11:37:03+08&quot;,161,25
                         * just because the people11
                         * +CMGL: 2,&quot;REC READ&quot;,&quot;18620671820&quot;,,&quot;2017/10/26,11:37:03+08&quot;,161,25
                         * just because the people11
                         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;(cc.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMGL:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第1条短信&lt;/span&gt;
                            String[] contents =&lt;span&gt; getContentFromStorageSMS(cc);
                            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[AT+CMGL=\&quot;ALL\&quot;]存在卡上的短信内容.分析后:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String tt : contents){
                                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(tt);
                            }
                            
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存读到的短信&lt;/span&gt;
                            &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(sendDataToServer(contents)){
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除已读出的短信&lt;/span&gt;
                                System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除已读出的旧短信.index:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+contents[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
                                delSMSByIndex(serial, Integer.parseInt(contents[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]));
                            }
                        }
                        
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(data));
                        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data(byte[]) 转换成 String时出错&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }
                    
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(cc!=null &amp;amp;&amp;amp; !cc.trim().equals(&quot;&quot;))System.out.println(cc);&lt;/span&gt;
                data = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
            }
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(IOException ex) {
            console.println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ==&amp;gt;&amp;gt; SERIAL SETUP FAILED : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.getMessage());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 把短信上传到服务器中
     * @param contents    数组
                [0] - 短信位置索引
                [1] - 电话号码
                [2] - 日期+时间 2017/10/26 11:37:03+08
                [3] - 短信内容
     * @return
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; boolean sendDataToServer(String[] contents){
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尝试上传短信数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除时间中的时区 +08   2017/10/26 12:38:14+08...2017-10-26 12:38:14&lt;/span&gt;
            String d = contents[&lt;span&gt;2&lt;/span&gt;].substring(&lt;span&gt;0&lt;/span&gt;,contents[&lt;span&gt;2&lt;/span&gt;].lastIndexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            d &lt;/span&gt;= d.replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;            StringBuffer url = &lt;span&gt;new&lt;/span&gt; StringBuffer(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.6.2:9080/webService.do?method=saveSMSBank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            String vno &lt;/span&gt;= DateTimeUtil.dateToString(&lt;span&gt;new&lt;/span&gt; Date(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            vno &lt;/span&gt;= StringUtil.encodePassword(vno, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MD5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;vno=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).append(vno);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;smstype=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;port=2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;recTime=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(d);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;need: 2013-12-05%2014:35:20&lt;/span&gt;
            url.append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;phone=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(contents[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;serialNo=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;nums=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;submitPort=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;sendid=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(contents[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;sendtype=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;sendNo=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            
            String xx &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(contents[&lt;span&gt;3&lt;/span&gt;].getBytes(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            url.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;txt=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(java.net.URLEncoder.encode(xx, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendDataToServer().url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;url.toString());

            String resurl &lt;/span&gt;=&lt;span&gt; StringUtil.getContentByUrl2(url.toString());
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendDataToServer().resurl:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;resurl);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(resurl.trim().equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据上传成功!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(resurl.trim().equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这个电话号码和短信内容已上传过, 数据重复!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;清除SIM卡上的短信!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 解析返回的短信内容
     * @return
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String[] getContentFromIndex(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index, String res){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尝试读取短信...getContentFromIndex.res:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;res);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取短信成功,解析内容...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
                 * +CMGR: &quot;REC READ&quot;,&quot;18620671820&quot;,,&quot;2017/10/26,11:37:03+08&quot;,161,17,0,0,&quot;+8613010200500&quot;,145,25
                 * just because the people11
                 * 
                 * +CMGR: &quot;REC READ&quot;,&quot;18620671820&quot;,,&quot;2017/10/26,11:37:03+08&quot;,161,17,0,0,&quot;+8613010200500&quot;,145,25
                 * ----------------  ------------- - ---------- -----------  --- -- - - ---------------- --- --
                 * [0]               [1]           [2] [3]      [4]          [5] [6][7][8] [9]           [10][11]
                 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                String[] ccs &lt;/span&gt;= res.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                String phone &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
                String sendDate &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
                String content &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
                boolean isvalid &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据获取成功&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;ccs.length;i++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ccs[i].indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMGR:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                        String[] temp1 &lt;/span&gt;= ccs[i].split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        phone &lt;/span&gt;= temp1[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                        sendDate &lt;/span&gt;= temp1[&lt;span&gt;3&lt;/span&gt;]+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;+temp1[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
                        content &lt;/span&gt;= ccs[i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                        isvalid &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只处理1条&lt;/span&gt;
&lt;span&gt;                    }
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!isvalid)&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理双引号&lt;/span&gt;
                phone = phone.substring(&lt;span&gt;1&lt;/span&gt;,phone.length()-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                sendDate &lt;/span&gt;= sendDate.substring(&lt;span&gt;1&lt;/span&gt;,sendDate.length()-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                String[] resu &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
                resu[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; String.valueOf(index);
                resu[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; phone.trim();
                resu[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; sendDate;
                resu[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] =&lt;span&gt; content;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resu;
                
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMS ERROR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CMS ERROR:321 表示所读取的内存位置出错,一般是指定位置无短信内容所致&lt;/span&gt;
                System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取短信失败,错误内容...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 有新短信时,获取短信内容: 
     *  +CIEV: &quot;MESSAGE&quot;,1
     *  
     *  +CMTI: &quot;SM&quot;,1
     *  
     *  @return index    短信所在的内存位置 index
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getIndexFromNewSMS(String cc){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            String[] ccs &lt;/span&gt;= cc.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String v : ccs){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(v.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMTI: \&quot;SM\&quot;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                    String c &lt;/span&gt;= v.substring(v.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Integer.parseInt(c);
                }
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 查询旧短信, 每次只抓1条:
     * +CMGL: 4,&quot;REC READ&quot;,&quot;106907931100&quot;,,&quot;2017/07/02,10:15:19+08&quot;
     * -------- ---------- --------------  ----------- ------------
     * [0]      [1]        [2]           [3] [4]        [5]
        【小米】[小米移动]您2017年6月共消费1.32元，当前余额97.88元。其中：数据流量费1.32元；语音通信费0元；短/彩信费0元
        
        +CMGL: 5,&quot;REC READ&quot;,&quot;106908761100&quot;,,&quot;2017/08/02,10:15:30+08&quot;
        。查询账单 &lt;/span&gt;&lt;span&gt;http://10046.mi.com&lt;/span&gt;&lt;span&gt; 。
        +CMGL: 6,&quot;REC READ&quot;,&quot;106908761100&quot;,,&quot;2017/08/02,10:15:30+08&quot;
        【小米】[小米移动]您2017年7月共消费0.81元，当前余额97.01元。其中：数据流量费0.81元；语音通信费0元；短/彩信费0元
        
        OK
        
        @return 数组
                [0] - 短信位置索引
                [1] - 电话号码
                [2] - 日期+时间
                [3] - 短信内容
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String[] getContentFromStorageSMS(String cc){
        String[] ccs &lt;/span&gt;= cc.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        String smsIndex &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
        String phone &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
        String sendDate &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
        String content &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;ccs.length;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ccs[i].indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMGL:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;smsIndex = Integer.parseInt(ccs[i].substring(ccs[i].indexOf(&quot;CMGL:&quot;)+5, ccs[i].indexOf(&quot;,&quot;)));&lt;/span&gt;
                smsIndex = ccs[i].substring(ccs[i].indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMGL:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)+&lt;span&gt;5&lt;/span&gt;, ccs[i].indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                String[] temp1 &lt;/span&gt;= ccs[i].split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                phone &lt;/span&gt;= temp1[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
                sendDate &lt;/span&gt;= temp1[&lt;span&gt;4&lt;/span&gt;]+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;+temp1[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;];
                content &lt;/span&gt;= ccs[i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只处理1条&lt;/span&gt;
&lt;span&gt;            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理双引号&lt;/span&gt;
        phone = phone.substring(&lt;span&gt;1&lt;/span&gt;,phone.length()-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        sendDate &lt;/span&gt;= sendDate.substring(&lt;span&gt;1&lt;/span&gt;,sendDate.length()-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        String[] res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
        res[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; smsIndex.trim();
        res[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; phone.trim();
        res[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; sendDate;
        res[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] =&lt;span&gt; content;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 删除指定位置上的短信
     * AT+CMGD=4
     * @param index    短信索引位置
     * @return
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; boolean delSMSByIndex(Serial serial, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index){
        String res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGD=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;index));
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGD=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+index+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;res);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(res.indexOf(&quot;OK&quot;)==-1){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    System.out.println(&quot;删除[&quot;+index+&quot;]位置的短信失败!&quot;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return false;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 
     *         初始化GPRS.模块
     *            AT        100ms 握手 / SIM卡检测等
     *            AT+CPIN?  100ms 查询是否检测到SIM卡
     *            AT+CSQ    100ms 信号质量测试，值为0-31,31表示最好
     *            AT+CCID   100ms 读取SIM的CCID(SIM卡背面20位数字)，可以检测是否有SIM卡或者是否接触良好
     *            AT+CREG?  500ms 检测是否注册网络
     * @return
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; boolean initGPRS(Serial serial){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!serial.isOpen()){&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;}        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;串口未准备好&lt;/span&gt;
        
        &lt;span&gt;byte&lt;/span&gt;[] buffs = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;128&lt;/span&gt;&lt;span&gt;];
        
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;try send AT to module...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;char cmd[] = {'A', 'T'};
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;byte cmd[] = &quot;AT&quot;.getBytes();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;buffs = sendCMD(serial, &quot;AT&quot;.getBytes());&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\nGPRS模块检测中...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            buffs &lt;/span&gt;= sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            String res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(buffs);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPRS模块未准备好, 请检查电源和串口波特率是否正确!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[正常]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;AT.res:&quot;+res);&lt;/span&gt;
&lt;span&gt;
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n检测SIM卡...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CPIN?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;READY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SIM卡未准备好!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[正常]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;AT+CPIN?.res:&quot;+res);&lt;/span&gt;
&lt;span&gt;            
            
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n信号质量测试，值为0-31,31表示最好...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CSQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;信号质量测试检测失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
             * +CSQ: 24,99
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            String[] vs &lt;/span&gt;= res.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String v : vs){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(v.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                    String x &lt;/span&gt;= v.substring(v.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;x:&quot;+x);&lt;/span&gt;
                    System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...信号强度:[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+x.trim()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;AT+CSQ.res:&quot;+res);&lt;/span&gt;
&lt;span&gt;            
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CCID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CCID.res:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;res);
            
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CREG?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CREG.res:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;res);
            
            
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 
     * 初始化GPRS.设置短信模式及短信接收参数
     *         AT+CMGF=1                0-PDU, 1-文本格式
     *        AT+CSDH=1
     *        AT+CPMS=&quot;SM&quot;,&quot;SM&quot;,&quot;SM&quot;    将信息保存在SIM卡中, SM-表示存在SIM卡上
     *        AT+CNMI=2,1,0,1,1        收接通知,并存在指定位置(与AT+CPMS设置有关)
     *    
     * 设置好后, 收到短信:
     *         +CIEV: &quot;MESSAGE&quot;,1
     *         +CMTI: &quot;SM&quot;,1            表示存储位置index=1
     * @return
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; boolean initGPRS_SMS(Serial serial){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!serial.isOpen()){&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;}        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;串口未准备好&lt;/span&gt;
        String res = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n设置短信格式...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CMGF=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[文本格式]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);

            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\nAT+CSDH=1...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CSDH=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[DONE]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);

            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n设置信息保存位置...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CPMS=\&quot;SM\&quot;,\&quot;SM\&quot;,\&quot;SM\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[SIM卡]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);

            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n收接通知,并存在指定位置...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(sendCMD(serial, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AT+CNMI=2,1,0,1,1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(res.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ...[DONE]\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
            
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public static byte[] sendCMD(Serial serial, byte[] cmd){&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] sendCMD(Serial serial, String cmd){
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; overtime = &lt;span&gt;10000&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每条指令超时上限 5秒&lt;/span&gt;
        &lt;span&gt;long&lt;/span&gt; timecount = &lt;span&gt;0&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计时器&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt;[] buffs = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;128&lt;/span&gt;&lt;span&gt;];

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            serial.writeln(cmd&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;serial.writeln(&quot;AT\r&quot;);&lt;/span&gt;
            timecount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(timecount&amp;lt;&lt;span&gt;overtime){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.print(serial.available());&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(serial.available()&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(serial.available()&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                        buffs &lt;/span&gt;=&lt;span&gt; serial.read();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.print(new String(serial.read()));
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.print(new String(buffs));&lt;/span&gt;
&lt;span&gt;                    }
                    serial.flush();
                    timecount &lt;/span&gt;= overtime;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;exit while&lt;/span&gt;
&lt;span&gt;                }
                timecount &lt;/span&gt;+= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                Thread.sleep(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(&quot;sendCMD:&quot;+new String(buffs));&lt;/span&gt;
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalStateException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffs;
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; END SNIPPET: serial-snippet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;程序中的方法: &lt;em id=&quot;__mceDel&quot;&gt;sendDataToServer()&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;主要是用于上传保存短信, 大家替换成自己的方式即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;完成&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 27 Oct 2017 06:49:00 +0000</pubDate>
<dc:creator>幻河</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/visionsl/p/7742604.html</dc:identifier>
</item>
<item>
<title>JAVA基础-XML的解析 - 阿拉巴洞</title>
<link>http://www.cnblogs.com/0813lichenyu/p/7743135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/0813lichenyu/p/7743135.html</guid>
<description>&lt;hr/&gt;
&lt;p&gt;　　 XML的全名为可扩展标记语言(Extensible Markup Language),XML的作用为：1、传输，2、存取数据，3、软&lt;br/&gt;件的配置文件。传输现在都用更轻量的Json，而存储则用数据库。所以软件的配置文件是现在的XML的主要用途。&lt;br/&gt;现在的一些主流框架都是使用XML进项配置的。&lt;/p&gt;
&lt;h2&gt;（一）XML的基本语法&lt;/h2&gt;
&lt;p&gt;　　1、XML的文档声明：通常出现在XML的第一行第一列的位置!&lt;br/&gt;  写法:&lt;br/&gt;　　　　&amp;lt;?xml 属性名=”属性值” 属性名=”属性值” ...?&amp;gt;&lt;br/&gt;　　　　* version :必须的. 使用”1.0”&lt;br/&gt;　　　　* encoding :字符集. 是使用浏览器打开的时候采用的默认的字符集的编码.&lt;br/&gt;　　　　* standalone :描述XML文档是否需要依赖其他的文件.&lt;br/&gt;  举例：&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;　　2、XML的注释&lt;br/&gt;  写法:&lt;br/&gt;　　　　&amp;lt;!-- XML的注释 --&amp;gt;&lt;br/&gt;　　3、XML的元素：xml中的元素其实就是一个个的标签 - a: 包含标签体（&amp;lt;&amp;gt;成对儿出现），b: 不包含标签体&lt;br/&gt;（&amp;lt;元素名 属性/&amp;gt;）&lt;br/&gt;  举例：&lt;/p&gt;
&lt;p&gt;  a: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;student&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zhangsan&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;18&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;student&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  b:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;student
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 　　　　&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;zhangsan&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;　　　　age&lt;/span&gt;&lt;span&gt;=&quot;18&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　元素的命名规范：&lt;br/&gt;　　　　* 严格区分大小写;&amp;lt;a&amp;gt;&amp;lt;A&amp;gt;&lt;br/&gt;　　　　* 只能以字母或下划线开头;abc _abc&lt;br/&gt;　　　　* 不能以xml(或XML、Xml等)开头;&lt;br/&gt;　　　　* 名称字符之间不能有空格或制表符;&lt;br/&gt;　　　　* 名称字符之间不能使用冒号;&lt;br/&gt;　　4、XML元素中的属性：一个元素可以有多个属性，每个属性都有它自己的名称和取值。&lt;br/&gt;  写法：&lt;br/&gt;　　　　* 属性值一定要用引号(单引号或双引号)引起来。&lt;br/&gt;　　　　* 属性名称的命名规范与元素的命名规范相同&lt;br/&gt;　　　　* 元素中的属性是不允许重复的&lt;br/&gt;　　5、XML的特殊字符和CDATA区&lt;br/&gt;  特殊字符：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1234932/201710/1234932-20171027141911008-1423698913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  CDATA区的写法：&lt;br/&gt;　　　　&amp;lt;![CDATA[ 内容 ]]&amp;gt;&lt;/p&gt;

&lt;p&gt;　　在XML中都是用户自定义的标签，若出现小小的错误，软件程序将不能正确地获取文件中的内容而报错。&lt;br/&gt;(如：Tomcat)，所以就可以编写一个文档来约束一个XML的书写规范，这个文档称之为约束。XML的约束就是&lt;br/&gt;用来约束XML的文档中可以出现哪些标签，不能出现哪些标签，标签中是否有顺序，出现的次数。XML的约束&lt;br/&gt;包括2种：1、DTD，2、Schema。&lt;br/&gt;  两者的区别：&lt;br/&gt;　　　　* 语法的不同，DTD的语法自成一体而Schema的语法则和XML类似。&lt;br/&gt;　　　　* Schema具有命名空间&lt;br/&gt;　　　　* Schema具有更强强的语义和约束&lt;br/&gt;　　　　* Schema能够更好地被解析器解析&lt;/p&gt;
&lt;h2&gt;（一）DTD约束&lt;/h2&gt;
&lt;p&gt;　　1、DTD中定义元素：在DTD文档中使用ELEMENT关键字来声明一个XML元素。&lt;br/&gt;  语法：&lt;br/&gt;　　　　&amp;lt;!ELEMENT 元素名称 使用规则&amp;gt;&lt;br/&gt;  元素的一些约束规则：&lt;br/&gt;　　　　* (#PCDATA):指示元素的主体内容只能是普通的文本.(Parsed Character Data)&lt;br/&gt;　　　　* EMPTY：用于指示元素的主体为空。比如&amp;lt;br/&amp;gt;&lt;br/&gt;　　　　* ANY:用于指示元素的主体内容为任意类型。&lt;br/&gt;　　　　* (子元素)：指示元素中包含的子元素&lt;br/&gt;　　　　* 如果子元素用逗号分开，说明必须按照声明顺序去编写XML文档&lt;br/&gt;　　　　* 如果子元素用&quot;|&quot;分开，说明任选其一。&lt;br/&gt;　　　　* 用+(至少一次)、&lt;br/&gt;　　　　　   *(可有可无，零次、一次或多次)、&lt;br/&gt;　　　　　  ？(可以有也可以无，有的话只能有一次。零次或一次)来表示元素出现的次数&lt;br/&gt;　　2、DTD中定义属性：在DTD文档中使用ATTLIST关键字来为一个元素声明属性。&lt;br/&gt;  写法：&lt;br/&gt;　　　　&amp;lt;!ATTLIST 元素名&lt;br/&gt;　　　　属性名1 属性值类型 设置说明&lt;br/&gt;　　　　属性名2 属性值类型 设置说明&lt;br/&gt;　　　　......&lt;br/&gt;　　　　&amp;gt;&lt;br/&gt;  属性的类型和约束：&lt;br/&gt;　　　　* CDATA：表示属性的取值为普通的文本字符串&lt;br/&gt;　　　　* ENUMERATED (DTD没有此关键字)：表示枚举，只能从枚举列表中任选其一&lt;br/&gt;　　　　* ID:表示属性的取值不能重复&lt;br/&gt;　　　　* #REQUIRED：表示该属性必须出现&lt;br/&gt;　　　　* #IMPLIED：表示该属性可有可无&lt;br/&gt;　　　　* #FIXED:表示属性的取值为一个固定值。语法：#FIXED &quot;固定值&quot;&lt;br/&gt;  例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;根元素有且只能有一个 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 例子 (数+)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 数 (1,2,3,4)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 1 (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 2 (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 3 (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT 4 (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、DTD的引用方式&lt;br/&gt;  * 内部引用DTD:&lt;br/&gt;　　　　&amp;lt;!DOCTYPE persons [&lt;/p&gt;&lt;p&gt;　　　　]&amp;gt;&lt;br/&gt;  * 外部引用DTD:&lt;br/&gt;　　* 本地DTD:&lt;br/&gt;　　　　&amp;lt;!DOCTYPE persons SYSTEM &quot;***.dtd&quot;&amp;gt;&lt;br/&gt;　　* 网络DTD:&lt;br/&gt;　　　　&amp;lt;!DOCTYPE persons PUBLIC &quot;url&quot; &quot;***.dtd&quot;&amp;gt;&lt;/p&gt;
&lt;h2&gt;（二）Schema约束&lt;/h2&gt;
&lt;p&gt;　　 一个XML Schema文档通常称之为模式文档(约束文档)，遵循这个文档书写的xml文件称之为实例文档。&lt;br/&gt;Schema约束自身就是一个XML文件，但它的扩展名通常为.xsd。Schema支持名称空间。名称空间：可以理&lt;br/&gt;解为JAVA里的package，约束文档:可以理解为一个JAVABean类，实例文档：就是通过JAVABean类创建的实&lt;br/&gt;例对象。&lt;br/&gt;　　可以通过命名空间来分辨出约束文档（W3C的命名空间：xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;）&lt;br/&gt;，实例文档（W3C的命名空间：xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;）W3C的命名空间&lt;br/&gt;后缀名为instance的为实力文档。&lt;br/&gt;  举例：&lt;br/&gt;　　*Schema文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;schema &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/span&gt;&lt;span&gt; targetNamespace&lt;/span&gt;&lt;span&gt;=&quot;http://www.itheima.com&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;elementFormDefault&lt;/span&gt;&lt;span&gt;=&quot;qualified&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;element &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;persons&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 复杂元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;complexType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 有序的，最大值不限定，最小值为一 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sequence &lt;/span&gt;&lt;span&gt;maxOccurs&lt;/span&gt;&lt;span&gt;=&quot;unbounded&quot;&lt;/span&gt;&lt;span&gt; minOccurs&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;element &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;person&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;complexType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sequence&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 简单表签 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;element &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;element&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;element &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;element&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;element &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;element&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sequence&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 属性，在有序和复杂元素之间 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;complexType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;element&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sequence&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;complexType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;element&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;schema&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　*实例文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p:persons &lt;/span&gt;&lt;span&gt;xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.itheima.com&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.itheima.com schame.xsd &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p:person&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p:name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;p:name&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p:name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p:age&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p:age&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p:sex&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;p:sex&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p:sex&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p:person&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p:persons&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　写的好约束文件可以使用eclipse自动引入：&lt;br/&gt;1、&lt;img src=&quot;http://images2017.cnblogs.com/blog/1234932/201710/1234932-20171027142635773-1520230339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;img src=&quot;http://images2017.cnblogs.com/blog/1234932/201710/1234932-20171027142709476-1438032955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　XML的解析一共有2种方式：DOM解析:（DOM:Document Object Model）SAX解析:（Simple Api for XML）&lt;br/&gt;　　　　* DOM：文档对象模型。这种方式是W3C推荐的处理XML的一种方式。&lt;br/&gt;　　　　* SAX：这种方式不是官方标准，属于开源社区XML-DEV，几乎所有的XML解析器都支持它。&lt;br/&gt;　　两者的解析方式的优缺点&lt;br/&gt;　　　　* DOM解析是一次把DOM树都加载到内存里进行解析，可以对其进行增删改，但是当解析的XML比较大的&lt;br/&gt;时候可能会造成内存溢出。&lt;br/&gt;　　　　* SAX解析是以事件驱动的方式一行一行进行解析的，不会造成内存的溢出，但是不能对XML进行修改。&lt;br/&gt;　　针对这两种解析的方式，不同的公司提供了不同的API的实现&lt;br/&gt;　　　　* JAXP :SUN公司提供的一套XML的解析的API.&lt;br/&gt;　　　　* JDOM :开源组织提供了一套XML的解析的API-jdom.&lt;br/&gt;　　　　* DOM4J :开源组织提供了一套XML的解析的API-dom4j.&lt;br/&gt;　　　　* pull :主要应用在Android手机端解析XML.&lt;br/&gt;　　java中常用的API为DOM4J。&lt;/p&gt;
&lt;h2&gt;（一）DOM4J&lt;/h2&gt;
&lt;p&gt;　　 DOM4J的常用的构造和方法：&lt;br/&gt;　　　　* 创建SAXReader对象：new SAXReader()&lt;br/&gt;　　　　* 设置读取路径返回Document对象对XML进行操作：&lt;br/&gt;　　　　　　reader.read(要读取XML的路径);&lt;br/&gt;　　　　* 创建OutputFormat对象设定输出格式: OutputFormat.createPrettyPrint()&lt;br/&gt;　　　　* 根据输出路径和输出格式创建输出对象：&lt;br/&gt;　　　　　　new XMLWriter(new FileOutputStream(输出路径, 输出格式);&lt;br/&gt;　　DOM4J的常用方法：&lt;br/&gt;　　　　* 获取根元素对象（根标签）:&lt;br/&gt;　　　　　　返回值类型 - Element,调用对象 - Document getRootElement();&lt;br/&gt;　　　　* 获取所有的子元素:&lt;br/&gt;　　　　　　返回值类型 - List ,调用对象 - Element elements();&lt;br/&gt;　　　　* 根据指定的元素名称来获取相应的所有的子元素:&lt;br/&gt;　　　　　　返回值类型 - List ,调用对象 - Element elements(String name);&lt;br/&gt;　　　　* 根据指定的子元素名称，来获取子元素中的文本:&lt;br/&gt;　　　　　　返回值类型 - String ,调用对象 - Element elementText(String name);&lt;br/&gt;　　　　* 获取当前元素对象的文本：&lt;br/&gt;　　　　　　返回值类型 - String ,调用对象 - Element getText();&lt;br/&gt;　　　　* 设置当前元素对象的文本：&lt;br/&gt;　　　　　　返回值类型 - void ,调用对象 - Element setText(String text);&lt;br/&gt;　　　　* 添加当前元素对象的文本:&lt;br/&gt;　　　　　　返回值类型 - Element ,调用对象 - Element addText(String text);&lt;br/&gt;　　　　* 根据指定的属性名称获取其对应的值:&lt;br/&gt;　　　　　　返回值类型 - String ,调用对象 - Element attributeValue(String name);&lt;br/&gt;　　　　* 根据指定的属性名称和值进行添加或者修改:&lt;br/&gt;　　　　　　返回值类型 - Element ,调用对象 - Element addAttribute(String name,String value);&lt;br/&gt;　　　　* 删除某一元素(需父类对象删除子元素)：&lt;br/&gt;　　　　　　返回值类型 - void ,调用对象 - Element remove(Element element);&lt;br/&gt;　　　　* 在目标节点中添加新的节点：&lt;br/&gt;　　　　　　返回值类型 - Element ,调用对象 - Element addElement(String name);&lt;br/&gt;　　　　* 创建一个新的元素对象：&lt;br/&gt;　　　　　　返回值类型 - Element，调用对象 - DocumentHelper DocumentHelper.createElement(String name);&lt;/p&gt;
&lt;h2&gt;（二）示例代码&lt;/h2&gt;
&lt;p&gt;　　* 目标XML文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;State &lt;/span&gt;&lt;span&gt;Code&lt;/span&gt;&lt;span&gt;=&quot;37&quot;&lt;/span&gt;&lt;span&gt; Name&lt;/span&gt;&lt;span&gt;=&quot;河南&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;郑州&quot;&lt;/span&gt;&lt;span&gt; GDP&lt;/span&gt;&lt;span&gt;=&quot;99999亿&quot;&lt;/span&gt;&lt;span&gt; YY&lt;/span&gt;&lt;span&gt;=&quot;你YY个啥劲儿&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;郑州&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Region&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;高薪区&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Region&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;普吉岛&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;三门峡&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;安阳&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;南阳&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;北京&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;City&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　* 工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dom4jUtils {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有构造&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Dom4jUtils() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Document对象&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Document creatDocument() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; SAXReader reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SAXReader();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; Document document = reader.read(&quot;src\\com\\xmldemo\\city.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; document;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建输出对象&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; write(Document d) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; OutputFormat format =&lt;span&gt; OutputFormat.createPrettyPrint();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; XMLWriter writer = &lt;span&gt;new&lt;/span&gt; XMLWriter(&lt;span&gt;new&lt;/span&gt; FileOutputStream(&quot;src\\com\\xmldemo\\city.xml&quot;&lt;span&gt;), format);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;writer.write(d);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　* 一顿操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;添加或修改属性,如果没有该属性就添加有的话就更新
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; method07() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为根元素添加YY属性和值&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; Element element = rootElement.addAttribute(&quot;YY&quot;, &quot;你YY个啥劲儿&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;Dom4jTUtils.write(document);
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;打印某一节点的属性
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; method06() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取Name属性的值&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; String value = rootElement.attributeValue(&quot;Name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;System.out.println(value);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;在某一标签位置添加新标签
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; method05() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个新元素对象&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; Element createElement = DocumentHelper.createElement(&quot;City&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为此元素设置值&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; createElement.setText(&quot;普吉岛&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; List&amp;lt;Element&amp;gt; list =&lt;span&gt; rootElement.elements();
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将此节点加入到list集合的指定位置&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; list.add(1&lt;span&gt;, createElement);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写回&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;Dom4jTUtils.write(document);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;像某已指定元素添加元素
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; method04() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在Root节点下添加一个新节点&quot;City&quot;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; Element addElement = rootElement.addElement(&quot;City&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为节点添加文本&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; addElement.addText(&quot;北京&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写回&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;Dom4jTUtils.write(document);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;删除某一元素
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; methed03() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; List&amp;lt;Element&amp;gt; list =&lt;span&gt; rootElement.elements();
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取要删除元素的父元素（删除只能由父亲删除儿子）&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; Element parent = list.get(2&lt;span&gt;).getParent();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; parent.remove(list.get(2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将document写回&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;Dom4jTUtils.write(document);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;修改某一标签的文本
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception（为了方便抛出大的异常）
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; medom02() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; Element rootElement =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; List&amp;lt;Element&amp;gt; list =&lt;span&gt; rootElement.elements();
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置第三个元素的文本&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; list.get(2).setText(&quot;青青草原&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用工具类将document写回XML文档&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;Dom4jTUtils.write(document);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;获取第一个元素的Name属性
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception（为了方便抛出大的异常）
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; method() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用工具类创建Document对象&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; Document document =&lt;span&gt; Dom4jTUtils.creatDocument();
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得根节点&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; Element element =&lt;span&gt; document.getRootElement();
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得根节点下的所有元素节点&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; List&amp;lt;Element&amp;gt; elements =&lt;span&gt; element.elements();
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个节点的Name属性文本&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; String name = elements.get(0).elementText(&quot;Name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;System.out.println(name);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;用递归的方式遍历所有元素
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; elements 根节点
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(Element elements) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印每个元素的名字&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;System.out.println(elements.getName());
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取每个节点&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; List&amp;lt;Element&amp;gt; elements2 =&lt;span&gt; elements.elements();
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归调用&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Element object : elements2) {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;run(object);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 27 Oct 2017 06:38:00 +0000</pubDate>
<dc:creator>阿拉巴洞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/0813lichenyu/p/7743135.html</dc:identifier>
</item>
<item>
<title>C#设计模式之十组合模式（Composite）【结构型】 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/7743118.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/7743118.html</guid>
<description>&lt;p&gt;一、引言&lt;/p&gt;&lt;p&gt;   今天我们要讲【结构型】设计模式的第四个模式，该模式是【组合模式】，英文名称是：Composite Pattern。当我们谈到这个模式的时候，有一个物件和这个模式很像，也符合这个模式要表达的意思，那就是“俄罗斯套娃”。“俄罗斯套娃”就是大的瓷器娃娃里面装着一个小的瓷器娃娃，小的瓷器娃娃里面再装着更小的瓷器娃娃，直到最后一个不能再装更小的瓷器娃娃的那个瓷器娃娃为止（有点绕，下面我会配图，一看就明白）。在我们的操作系统中有文件夹的概念，文件夹可以包含文件夹，可以嵌套多层，最里面包含的是文件，这个概念和“俄罗斯套娃”很像。当然还有很多的例子，例如我们使用系统的时候，会使用到“系统菜单”，这个东西是树形结构。这些例子包含的这些东西或者说是对象，可以分为两类，一类是：容器对象，可以包含其他的子对象；另一类是：叶子对象，这类对象是不能在包含其他对象的对象了。在软件设计中，我们该怎么处理这种情况呢？是每类对象分别对待，还是提供一个统一的操作方式呢。组合模式给我们提供了一种解决此类问题的一个途径，接下来我们就好好的介绍一下“组合模式”吧。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://images2017.cnblogs.com/blog/1048776/201710/1048776-20171027143433945-1645593536.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、组合模式的详细介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1、动机（Motivate）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   客户代码过多地依赖于对象容器（对象容器是对象的容器，细细评味）复杂的内部实现结构，对象容器内部实现结构（而非抽象接口）的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等方面的弊端。如何将“客户代码与复杂的对象容器结构”解耦？如何让对象容器自己来实现自身的复杂结构，从而使得客户代码就像处理简单对象一样来处理复杂的对象容器？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2、意图（Intent）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。　　       ——  《设计模式》GoF&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.3、结构图&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;      &lt;img src=&quot;http://images2017.cnblogs.com/blog/1048776/201710/1048776-20171027143412867-974161708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.4、模式的组成&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    组合模式中涉及到三个角色：&lt;/p&gt;&lt;p&gt;    . 抽象构件（Component）角色：这是一个抽象角色，它给参加组合的对象定义出了公共的接口及默认行为，可以用来管理所有的子对象（在透明式的组合模式是这样的）。在安全式的组合模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝结构对象给出。&lt;/p&gt;&lt;p&gt;    . 树叶构件（Leaf）角色：树叶对象是没有下级子对象的对象，定义出参加组合的原始对象的行为。（原始对象的行为可以理解为没有容器对象管理子对象的方法，或者 【原始对象行为】+【管理子对象的行为（Add，Remove等）】=面对客户代码的接口行为集合）&lt;/p&gt;&lt;p&gt;    . 树枝构件（Composite）角色：代表参加组合的有下级子对象的对象，树枝对象给出所有管理子对象的方法实现，如Add、Remove等。&lt;/p&gt;&lt;p&gt;   组合模式实现的最关键的地方是——简单对象和复合对象必须实现相同的接口。这就是组合模式能够将组合对象和简单对象进行一致处理的原因。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.5、组合模式的具体实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    组合模式有两种实现方式，一种是：透明式的组合模式，另外一种是：安全式的组合模式。在这里我就详细说一下何为“透明式”，何为“安全式”。所谓透明式是指“抽象构件角色”定义的接口行为集合包含两个部分，一部分是叶子对象本身所包含的行为（比如Operation），另外一部分是容器对象本身所包含的管理子对象的行为(Add,Remove)。这个抽象构件必须同时包含这两类对象所有的行为，客户端代码才会透明的使用，无论调用容器对象还是叶子对象，接口方法都是一样的，这就是透明，针对客户端代码的透明，但是也有他自己的问题，叶子对象不会包含自己的子对象，为什么要有Add,Remove等类似方法呢，调用叶子对象这样的方法可能（注意：我这里说的是可能，因为有些人会把这些方法实现为空，不做任何动作，当然也不会有异常抛出了，不要抬杠）会抛出异常，这样就不安全了，然后人们就提出了“安全式的组合模式”。所谓安全式是指“抽象构件角色”只定义叶子对象的方法，确切的说这个抽象构件只定义两类对象共有的行为，然后容器对象的方法定义在“树枝构件角色”上，这样叶子对象有叶子对象的方法，容器对象有容器对象的方法，这样责任很明确，当然调用肯定不会抛出异常了。大家可以根据自己的情况自行选择是实现为“透视式”还是“安全式”的，以下我们会针对这两种情况都有实现，具体实现如下：&lt;br/&gt;   &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; 透明式的组合模式的实现
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该抽象类就是文件夹抽象接口的定义，该类型就相当于是抽象构件Component类型
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Folder
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件夹或文件&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Folder folder);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹或者文件&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Remove(Folder folder);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件或者文件夹--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该Word文档类就是叶子构件的定义，该类型就相当于是Leaf类型，不能在包含子对象
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Word:Folder
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件夹或文件&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Folder folder)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;            Throw &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Word文档不具有该功能&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹或者文件&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Remove(Folder folder)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;            Throw &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Word文档不具有该功能&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;打开Word文档，开始进行编辑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;  
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SonFolder类型就是树枝构件，由于我们使用的是“透明式”，所以Add,Remove都是从Folder类型继承下来的
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SonFolder:Folder
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件夹或文件&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Folder folder)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件或者文件夹已经增加成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹或者文件&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Remove(Folder folder)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件或者文件夹已经删除成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件夹--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open()
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经打开当前文件夹&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;       &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这就是我们的饺子馅，需要装饰的房子&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;          Folder myword=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Word();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;          myword.Open();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件，处理文件&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt;          myword.Add(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;抛出异常&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;          myword.Remove(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;抛出异常&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;          Folder myfolder=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SonFolder();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;          myfolder.Open();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件夹&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;          myfolder.Add(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功增加文件或者文件夹&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;          myfolder.Remove(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功删除文件或者文件夹&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码就是“透明式的组合模式”实现，以下代码就是“安全式的组合模式”实现:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; 安全式的组合模式的实现
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该抽象类就是文件夹抽象接口的定义，该类型就相当于是抽象构件Component类型
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Folder &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该类型少了容器对象管理子对象的方法的定义，换了地方，在树枝构件也就是SonFolder类型&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件或者文件夹--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该Word文档类就是叶子构件的定义，该类型就相当于是Leaf类型，不能在包含子对象
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Word:Folder  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这类型现在很干净&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;打开Word文档，开始进行编辑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;  
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SonFolder类型就是树枝构件，现在由于我们使用的是“安全式”，所以Add,Remove都是从此处开始定义的
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SonFolder:Folder &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里可以是抽象接口，可以自己根据自己的情况而定&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件夹或文件&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Folder folder);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹或者文件&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Remove(Folder folder);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件夹--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经打开当前文件夹&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; NextFolder类型就是树枝构件的实现类
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NextFolder:SonFolder
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加文件夹或文件&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Folder folder)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件或者文件夹已经增加成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件夹或者文件&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Remove(Folder folder)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件或者文件夹已经删除成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件夹--该操作相当于Component类型的Operation方法&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Open()
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;            Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经打开当前文件夹&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;       &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这就是我们的饺子馅，需要装饰的房子&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;          Folder myword=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Word();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;          myword.Open();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件，处理文件&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt;          Folder myfolder=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; NextFolder();
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;          myfolder.Open();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件夹
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处要是用增加和删除功能，需要转型的操作，否则不能使用&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt;          (（SonFolder）myfolder).Add(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功增加文件或者文件夹&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt;          (（SonFolder）myfolder).Remove(&lt;span&gt;new&lt;/span&gt; SonFolder);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功删除文件或者文件夹&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;   这个模式不是很难，仔细体会实现关键点，最重要理解模式的意图，结合结构图，大家好好体会一下。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、组合模式的实现要点：&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    1、Composite模式采用树形结构来实现普遍存在的对象容器，从而将“一对多”的关系转化为“一对一”的关系，使得客户代码可以一致地处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。&lt;/p&gt;&lt;p&gt;    2、将“客户代码与复杂的对象容器结构”解耦是Composite模式的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的复杂内部实现结构——发生依赖关系，从而更能“应对变化”。&lt;/p&gt;&lt;p&gt;    3、Composite模式中，是将“Add和Remove等和对象容器相关的方法”定义在“表示抽象对象的Component类”中，还是将其定义在“表示对象容器的Composite类”中，是一个关乎“透明性”和“安全性”的两难问题，需要仔细权衡。这里有可能违背面向对象的“单一职责原则”，但是对于这种特殊结构，这又是必须付出的代价。ASP.Net控件的实现在这方面为我们提供了一个很好的示范。&lt;/p&gt;&lt;p&gt;    4、Composite模式在具体实现中，可以让父对象中的子对象反向追朔；如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、.NET 中组合模式的实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    其实组合模式在FCL里面运用还是很多的，不知道大家是不是有所感觉，这个模式大多数是运用在控件上或者是和界面操作、展示相关的操作上。这个模式在.NET 中最典型的应用就是应用与WinForms和Web的开发中，在.NET类库中，都为这两个平台提供了很多现有的控件，然而System.Windows.Forms.dll中System.Windows.Forms.Control类就应用了组合模式，因为控件包括Label、TextBox等这样的简单控件，这些控件可以理解为叶子对象，同时也包括GroupBox、DataGrid这样复合的控件或者叫容器控件，每个控件都需要调用OnPaint方法来进行控件显示，为了表示这种对象之间整体与部分的层次结构，微软把Control类的实现应用了组合模式（确切地说应用了透明式的组合模式）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;五、总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  我写文章，怎么也要3个小时，也要读上好几遍，防止有错字错句的出现。我也想把握的理解更好融进我写的文章中，但是能力有限，欢迎大家来批评指正，我也会从中收益。今天的文章就写到这里了，模式这个东西就像“独孤九剑”，不要死记硬背，要多看看别人的，多写写代码，要理解场景和意图，多写多练吧，你就有可能成为一代大侠。模式学无止境，我也是刚刚开始。&lt;/p&gt;
</description>
<pubDate>Fri, 27 Oct 2017 06:36:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/7743118.html</dc:identifier>
</item>
<item>
<title>JMeter性能测试，完整入门篇 - lovesoo</title>
<link>http://www.cnblogs.com/lovesoo/p/7742189.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovesoo/p/7742189.html</guid>
<description>&lt;p&gt;Apache JMeter是一款纯java编写负载功能测试和性能测试开源工具软件。相比Loadrunner而言，JMeter小巧轻便且免费，逐渐成为了主流的性能测试工具，是每个测试人员都必须要掌握的工具之一。&lt;/p&gt;&lt;p&gt;本文为JMeter性能测试完整入门篇，从Jmeter下载安装到编写一个完整性能测试脚本、最终执行性能测试并分析性能测试结果。&lt;/p&gt;&lt;p&gt;由于Jmeter是基于java开发，首先需要下载安装JDK （目前JMeter只支持到Java 8，尚不支持 Java 9）&lt;/p&gt;&lt;p&gt;2. 选择&lt;strong&gt;Java SE 8u151/ 8u152&lt;/strong&gt;，点击JDK下载&lt;/p&gt;&lt;p&gt;3. 安装下载的JDK&lt;/p&gt;&lt;p&gt;4. 配置系统环境变量&lt;/p&gt;&lt;p&gt;2. 下载最新JMeter 3.3版本：apache-jmeter-3.3.zip&lt;/p&gt;&lt;p&gt;3. 下载完成后解压zip包&lt;/p&gt;&lt;p&gt;4. 启动JMeter&lt;/p&gt;&lt;div readability=&quot;135.28714168714&quot;&gt;

&lt;p&gt;&lt;span&gt;我们选取最常见的百度搜索接口：&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;3.1 接口地址&lt;/span&gt;
&lt;p&gt;&lt;span&gt;http://www.baidu.com/s?ie=utf-8&amp;amp;wd=jmeter性能测试&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3.2 请求参数&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;ie：编码方式，默认为utf-8&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wd: 搜索词&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3.3 返回结果&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;搜索结果，我们可以通过校验结果中是否含有搜索词wd来判断本次请求成功或失败。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;4.1 添加线程组&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;右键点击“测试计划” -&amp;gt; “添加” -&amp;gt; “Threads(Users)” -&amp;gt; “线程组”&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140206133-635713654.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;这里可以配置线程组名称，线程数，准备时长（Ramp-Up Period(in seconds)）循环次数，调度器等参数：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140213008-328934523.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;线程组参数详解：&lt;/p&gt;
&lt;p&gt;1. 线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个线程数。&lt;/p&gt;
&lt;p&gt;2. Ramp-Up Period(in seconds)准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为10，准备时长为2，那么需要2秒钟启动10个线程，也就是每秒钟启动5个线程。&lt;/p&gt;
&lt;p&gt;3. 循环次数：每个线程发送请求的次数。如果线程数为10，循环次数为100，那么每个线程发送100次请求。总请求数为10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。&lt;/p&gt;
&lt;p&gt;4. Delay Thread creation until needed：直到需要时延迟线程的创建。&lt;/p&gt;
&lt;p&gt;5. 调度器：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为永远)&lt;/p&gt;
&lt;p&gt;持续时间（秒）：测试持续时间，会覆盖结束时间&lt;/p&gt;
&lt;p&gt;启动延迟（秒）：测试延迟启动时间，会覆盖启动时间&lt;/p&gt;
&lt;p&gt;启动时间：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。&lt;/p&gt;
&lt;p&gt;结束时间：测试结束时间，持续时间会覆盖它。&lt;/p&gt;

&lt;p&gt;因为接口调试需要，我们暂时均使用默认设置，待后面真正执行性能测试时再回来配置。&lt;/p&gt;
&lt;h2&gt;4.2 添加HTTP请求&lt;/h2&gt;
&lt;p&gt;右键点击“线程组” -&amp;gt; “添加” -&amp;gt; “Sampler” -&amp;gt; “HTTP请求”&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140259273-1510991394.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt; 对于我们的接口&lt;span&gt;http://www.baidu.com/s?ie=utf-8&amp;amp;wd=jmeter性能测试&lt;/span&gt;，可以参考下图填写：&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140307492-347021148.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;Http请求主要参数详解：&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;1. Web服务器&lt;/p&gt;
&lt;p&gt;协议：向目标服务器发送HTTP请求协议，可以是HTTP或HTTPS，默认为HTTP&lt;/p&gt;
&lt;p&gt;服务器名称或IP ：HTTP请求发送的目标服务器名称或IP&lt;/p&gt;
&lt;p&gt;端口号：目标服务器的端口号，默认值为80&lt;/p&gt;

&lt;p&gt;2.Http请求&lt;/p&gt;
&lt;p&gt;方法：发送HTTP请求的方法，可用方法包括GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE等。&lt;/p&gt;
&lt;p&gt;路径：目标URL路径（URL中去掉服务器地址、端口及参数后剩余部分）&lt;/p&gt;
&lt;p&gt;Content encoding ：编码方式，默认为ISO-8859-1编码，这里配置为utf-8&lt;/p&gt;

&lt;p&gt;3. 同请求一起发送参数&lt;/p&gt;
&lt;p&gt;在请求中发送的URL参数，用户可以将URL中所有参数设置在本表中，表中每行为一个参数（对应URL中的 name=value），注意参数传入中文时需要勾选“编码”&lt;/p&gt;
&lt;h2&gt;4.3 添加察看结果树&lt;/h2&gt;
&lt;p&gt;右键点击“线程组” -&amp;gt; “添加” -&amp;gt; “监听器” -&amp;gt; “察看结果树”&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140319258-966761370.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;这时，我们运行Http请求，修改响应数据格式为“HTML Source Formatted”，可以看到本次搜索返回结果页面标题为”jmeter性能测试_百度搜索“。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140532539-746436850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;4.4 添加用户自定义变量&lt;/h2&gt;
&lt;p&gt;我们可以添加用户自定义变量用以Http请求参数化，右键点击“线程组” -&amp;gt; “添加” -&amp;gt; “配置元件” -&amp;gt; “用户定义的变量”：&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140605430-1268843149.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;新增一个参数wd，存放搜索词：&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140612445-284376525.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;并在Http请求中使用该参数，格式为：${wd}&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027142440383-411258040.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;4.5 添加断言&lt;/h2&gt;
&lt;p&gt;右键点击“HTTP请求” -&amp;gt; “添加”-&amp;gt; “断言” -&amp;gt; “响应断言”&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140641898-37297868.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;我们校验返回的文本中是否包含搜索词，添加参数${wd}到要测试的模式中：&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140652367-2031213364.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;h2&gt;4.6 添加断言结果&lt;/h2&gt;
&lt;p&gt;右键点击“HTTP请求” -&amp;gt; “添加”-&amp;gt; “监听器” -&amp;gt; “断言结果”&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140746320-1682152745.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;这时，我们再运行一次就可以看到断言结果成功或失败了&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140801117-1841738517.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;h2&gt;4.7 添加聚合报告&lt;/h2&gt;
&lt;p&gt;右键点击“线程组” -&amp;gt; “添加” -&amp;gt; “监听器” -&amp;gt; “聚合报告”，用以存放性能测试报告&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140821930-1938293505.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就完成了一个完整Http接口的JMeter性能测试脚本编写。&lt;/p&gt;

&lt;h2&gt;5.1 配置线程组&lt;/h2&gt;
&lt;p&gt;点击线程组，配置本次性能测试相关参数：线程数，循环次数，持续时间等，这里我们配置并发用户数为10，持续时间为60s&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140835211-2041991555.png&quot; alt=&quot;&quot;/&gt;
&lt;h2&gt;5.2 执行测试&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;点击绿色小箭头按钮即可启动测试，测试之前需要点击小扫把按钮清除之前的调试结果。&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140859086-183557970.png&quot; alt=&quot;&quot;/&gt;

&lt;/div&gt;
&lt;p&gt;待性能测试执行完成后，打开聚合报告可以看到：&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171027140910148-1035669123.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;聚合报告参数详解：&lt;/p&gt;
&lt;p&gt;1. Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值&lt;/p&gt;
&lt;p&gt;2. #Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100&lt;/p&gt;
&lt;p&gt;3. Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以Transaction 为单位显示平均响应时间&lt;/p&gt;
&lt;p&gt;4. Median：中位数，也就是 50％ 用户的响应时间&lt;/p&gt;
&lt;p&gt;5. 90% Line：90％ 用户的响应时间&lt;/p&gt;
&lt;p&gt;6. Min：最小响应时间&lt;/p&gt;
&lt;p&gt;7. Max：最大响应时间&lt;/p&gt;
&lt;p&gt;8. Error%：错误率——错误请求数/请求总数&lt;/p&gt;
&lt;p&gt;9. Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数&lt;/p&gt;
&lt;p&gt;10. KB/Sec：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec&lt;/p&gt;

&lt;p&gt;一般而言，性能测试中我们需要重点关注的数据有： &lt;strong&gt;#Samples 请求数，Average 平均响应时间，Min 最小响应时间，Max 最大响应时间，Error% 错误率及Throughput 吞吐量&lt;/strong&gt;。&lt;/p&gt;


&lt;p&gt;至此，我们使用JMeter完成了一个完整的Http接口性能测试流程，从脚本编写，执行到最终结果分析。&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Fri, 27 Oct 2017 06:20:00 +0000</pubDate>
<dc:creator>lovesoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovesoo/p/7742189.html</dc:identifier>
</item>
<item>
<title>用 Smali 手写一个可运行的 HelloWorld！！！ - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/7742759.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/7742759.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/1d10b366afd499d93174a18310754c27&quot; alt=&quot;top&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;Android 的 App 实际上并不是运行在 Java 虚拟机中，而是运行在 Dalvik 虚拟机中。Dalvik 虚拟机对 Java 虚拟机做了一些额外的优化，让它更适用于移动设备。而 Dalvik 也有自己独特的汇编语言，Dalvik 就是通过这些汇编的指令集，来运行我们编译好的 Apk 程序。&lt;/p&gt;
&lt;p&gt;一般这些内容，我们正常开发 App 是接触不到的，但是如果你有反编译的需求，那你就需要花点时间研究一下它。本文不会介绍 Dalvik 的汇编指令集，它本身已经有完备的文档，没什么好说的。&lt;/p&gt;
&lt;p&gt;本文就从逆向思维的路子，教你如何写一个可在 Dalvik 上独立运行的 Hello World 程序。&lt;/p&gt;
&lt;p&gt;在这个过程中，我们需要了解 smali 语法，smali 是一种宽松的 Jasmin/dedexer 语法，它可以通过 baksmali 将我们已经编译好的 dex 格式的汇编语言，反汇编成 smali 文件，供我们阅读。&lt;/p&gt;
&lt;p&gt;那么，我们的第一个 Dalvik 版本的 Hello World ，就从一个编写一个 smali 文件开始吧。&lt;/p&gt;
&lt;h2 id=&quot;二开始编写-smali&quot;&gt;二、开始编写 Smali&lt;/h2&gt;
&lt;p&gt;既然是 smali 文件，当然是以 &lt;code&gt;.smali&lt;/code&gt; 为文件后缀，这里先创建一个 &lt;strong&gt;SmaliHello.smali&lt;/strong&gt; 文件，直接上代码，再来看每行的含义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/0408c0072adde82aa88cacd40c6159d3&quot; alt=&quot;smali-code&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第 1~3 行，实际上是声明了 smali 文件的头，每个 smali 文件都会有它们。&lt;code&gt;.class&lt;/code&gt; 表示类名，这里定义了一个 public 的类，全类名是 &lt;code&gt;com.cxmyDev.smalidemo.SmaliHelo&lt;/code&gt;。&lt;code&gt;.super&lt;/code&gt; 表示它的父类，这里是 Object。&lt;code&gt;.source&lt;/code&gt; 表示它对应的 Java 文件的文件名，这只是个标记，实际上在真实反编译的场景下，如果代码被混淆了，&lt;code&gt;.source&lt;/code&gt; 可能会没有值。&lt;/p&gt;
&lt;p&gt;第 6 行，定义了一个 &lt;code&gt;# direct methos&lt;/code&gt; ，它是 baksmali 为我们添加的一行注释，表示之后紧跟着这个类相对应的方法，需要注意的是，只会包含构造方法和静态方法，这里不展开讨论了。&lt;/p&gt;
&lt;p&gt;第 7~14 行，以一个 &lt;code&gt;.method&lt;/code&gt; 开始，&lt;code&gt;.end&lt;/code&gt; 结尾，表示它是一个方法，而 &lt;code&gt;publi constructor&lt;/code&gt; 表示它是一个公有的构造方法，这里其实就是 Java 类默认的构造方法，如果我们不声明构造方法，编译器会为我们创建一个无参的构造方法，这里就是它了。没啥好说的，直接写就好了。&lt;/p&gt;
&lt;p&gt;第 16~28 行，它也是一个方法，&lt;code&gt;public static&lt;/code&gt; 表示它是一个公有的静态方法，方法名是 main。而之后紧跟的 &lt;code&gt;([LJava/lang/String;])V&lt;/code&gt; 表示它需要传递一个 String 数组，并且返回值是 void。再来看看方法内部的代码，第 17 行，&lt;code&gt;.registers&lt;/code&gt; 表示寄存器的声明，这里声明了 3 个寄存器，供后面使用，&lt;code&gt;.param&lt;/code&gt; 表示了方法传递的参数，参数名叫 &lt;code&gt;args&lt;/code&gt; ，并且是一个 String 数组类型。&lt;code&gt;.prologue&lt;/code&gt; 表示一个开场，之后跟随的才是我们业务逻辑的代码。&lt;/p&gt;
&lt;p&gt;第 21 行，&lt;code&gt;sget-object&lt;/code&gt; 表示创建了一个 PrintStream 对象，并存入 v0 寄存器中。&lt;/p&gt;
&lt;p&gt;第 23 行，&lt;code&gt;const-string&lt;/code&gt; 表示什么了一个字符串 &quot;Hello CxmyDev!&quot;，并存入 v1 寄存器中。&lt;/p&gt;
&lt;p&gt;第 25行，&lt;code&gt;invoke-virtual&lt;/code&gt; 表示调用了 PrintStream 中的 &lt;code&gt;printIn()&lt;/code&gt; 方法，参数传递的是 v1 寄存器中的值，就是之前存储的 &quot;Hello CxmyDev!&quot;。&lt;/p&gt;
&lt;p&gt;到这里，smali 中的代码，我们已经逐行认清楚它是干嘛的了，有些细节就不展开讲了，不了解的可以看看 Dalvik 的语法和 smali 的语法，有兴趣可以先看看这两个链接。&lt;/p&gt;
&lt;blockquote readability=&quot;1.4834437086093&quot;&gt;
&lt;p&gt;Dalvik-bytecode:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://source.android.com/devices/tech/dalvik/dalvik-bytecode&quot; class=&quot;uri&quot;&gt;https://source.android.com/devices/tech/dalvik/dalvik-bytecode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dex 格式：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://source.android.com/devices/tech/dalvik/dex-format&quot; class=&quot;uri&quot;&gt;https://source.android.com/devices/tech/dalvik/dex-format&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;三编译-smali&quot;&gt;三、编译 smali&lt;/h2&gt;
&lt;p&gt;编写完 smali 代码之后，接下来就要将它编译成 dex 文件了，这就需要用到 smali.jar 这个工具。你可以在 Bitbucket 上直接下载到 jar 包。&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/JesusFreke/smali/downloads/&quot; class=&quot;uri&quot;&gt;https://bitbucket.org/JesusFreke/smali/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;smali.jar 最新的版本版本是 2.2.1，所以这里下载这个版本就可以了。（不方便下载的话，文末有下载方式）&lt;/p&gt;
&lt;p&gt;先来看看 smali.jar 的帮助文档，直接使用 &lt;code&gt;java -jar&lt;/code&gt; 命令即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/83560a2f4a869aa8c6ef7c30ec888756&quot; alt=&quot;smalijar-help&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们这里主要会用到它的 &lt;code&gt;assemble&lt;/code&gt; 命令，再来看看 assemble 的帮助文档，使用 &lt;code&gt;java -jar snali.jar a&lt;/code&gt; 命令即可查看，&lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;assemble&lt;/code&gt; 的缩写。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/f6b94210092715d272f0d17796644241&quot; alt=&quot;smalijar-a-help&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，使用 &lt;code&gt;-o&lt;/code&gt; 就可以指定输出的 dex 文件，然后再指定编译的 smali 文件即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;java&lt;/span&gt; -jar smali-2.2.1.jar a -o hello.dex SmaliHello.smali &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行完成，如果没有报错的话，可以在当前目录下，生成一个 &lt;strong&gt;hello.dex&lt;/strong&gt; 文件。如果有其它输出，应该就是报错了，查看一下报错信息解决它就好了。&lt;/p&gt;
&lt;p&gt;得到 &lt;strong&gt;hello.dex&lt;/strong&gt; 文件之后，我们还需要将它放到我们的 Android 设备上，才可以运行，这个非常简单，使用 &lt;code&gt;adb push&lt;/code&gt; 命令即可。&lt;/p&gt;
&lt;p&gt;最终运行这个 dex 文件，还需要使用到 dalvikvm ，使用 &lt;code&gt;adb shell dalvikvm -h&lt;/code&gt; 命令，查看帮助文档，文档比较长，这里截取关键部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/761ae23f42ebe9015ebf8d33e040a077&quot; alt=&quot;dalvik-help&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们主要是使用 &lt;code&gt;-cp&lt;/code&gt; 指定 classpath 即可执行，它后续接收的是类的完整签名，包含包名。&lt;/p&gt;
&lt;p&gt;然后我们就需要使用 &lt;code&gt;dalvikvm -cp&lt;/code&gt; 命令即可执行，主要指定要执行的类，需要包含包名的全类名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/556df00f7266cbb7c23be3f4955e75c3&quot; alt=&quot;smali-run&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，就可以输出我们之前编写的 Hello CxmyDev! 了。&lt;/p&gt;
&lt;p&gt;下面备份一下输入的命令。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb shell push hello.dex /sdcard/
adb shell dalvikvm -cp /sdcard/hello.dex com.cxmydev.smalidemo.SmaliHello &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四dex-的-java-代码&quot;&gt;四、Dex 的 Java 代码&lt;/h2&gt;
&lt;p&gt;到这里就算是将清楚，从零编写一个 smali 代码，到编译成 dex 并成功执行的所有过程了。&lt;/p&gt;
&lt;p&gt;我们再来看看，我们编辑的 smali 代码，到底用 Java 代码编写，是什么内容，可以帮助我们更好的理解它。&lt;/p&gt;
&lt;p&gt;其实很简单，再使用 jadx 工具，对 dex 进行反编译。因为我们这里也不涉及混淆，所以代码结构非常的清晰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/55b343c240e0003771d0fc6b80b2823e&quot; alt=&quot;java-code&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里就是初学 Java 的时候，一个标准的 Java 程序，有个 main 函数为程序的入口函数。&lt;/p&gt;
&lt;h2 id=&quot;五小结&quot;&gt;五、小结&lt;/h2&gt;
&lt;p&gt;本文到这里就算是完成了整个逆向的反逆向流程，相信能让你加深对反编译和 smali 的理解。&lt;/p&gt;
&lt;p&gt;有些工具如果不方便下载（原因你懂的），可以在承香墨影公众号回复 &lt;strong&gt;smali工具&lt;/strong&gt; 进行下载，可以下载到本文所有涉及到的资源文件。&lt;/p&gt;
&lt;p&gt;更多反编译的细节，可以在承香墨影公众号回复 &lt;strong&gt;Android反编译&lt;/strong&gt;，你将获得我整理好的一些关于反编译的资料。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;今天在&lt;strong&gt;承香墨影&lt;/strong&gt;公众号的后台，回复 &lt;strong&gt;成长&lt;/strong&gt;。我会送你一些我整理的学习资料，包含：Android反编译、算法、设计模式、Web项目源码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/9/8b7f5b0bec734584e62ce6f5e7c103aa&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 27 Oct 2017 05:33:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/plokmju/p/7742759.html</dc:identifier>
</item>
<item>
<title>创业到放弃 - 铁锅盖</title>
<link>http://www.cnblogs.com/harveybarray/p/7742765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/harveybarray/p/7742765.html</guid>
<description>&lt;p&gt;        今年6月，原公司一董事与公司高层有些不愉快，决定出来创业。当时主要是董事与一个主程在私下商量细节问题。决定好以后，才叫上我与另一个同事。当时董事说的是他有许多&lt;/p&gt;
&lt;p&gt;朋友自己出来搞了，都搞得好。弄得最好的 一个朋友月利润300W，收钱收的手软，但是下面的程序有钱了，都顾着买车买房，不想去搞新的产品。那边急需要新的产品，这边只要花2-3&lt;/p&gt;
&lt;p&gt;个月搞出产品，就可以让那边投资100吧万，拿过去运营了。当时考虑了好几天，做不了决定，心里都清楚：钱没有那么好挣。而且与董事、主程两人相处时间不长，许多信息都是董事,主程在商量。&lt;/p&gt;
&lt;p&gt;心里没有底，技术用的与以前干过的有些差别，行业也是web为主转到以游戏为主，知道2-3个月不可能出产品，工资可能只够勉强生活，而且成家了，也需要考虑家庭。&lt;/p&gt;
&lt;p&gt;       抱着一个可以学习的机会，初步答应参与创业，就进一步问其中的细节。开始说的是，主程拥有35%，我拥有10%股份，同事拥有5%，结果第二天正式谈的时候就变卦，将我改成5%，&lt;/p&gt;
&lt;p&gt;主程改成40%。心里好笑，一个干了4年的拿的份额与一个干了1年的一样。当时就火了，心里想着，不就是和主程在技术上闹过矛盾嘛，用的着这样子整。直接对主程说，自己以前做事情，&lt;/p&gt;
&lt;p&gt;BUG率都是很低，做事效率也很高。结果主程说，事情又不多，做的东西大同小异，新的东西不多，没什么可以拿来说的。出来创业我还出了钱的，而且我还要带你们，你们只是储备。&lt;/p&gt;
&lt;p&gt;当时我就不想做下去，董事与主程两人一起唱红白脸，最终我莫名其妙的自己承认出10%的资金，而且是股份占比是占研发30%中的10%。&lt;/p&gt;
&lt;p&gt;       正式开始项目，董事搞一些特效，主程负责前端代码，我负责游戏服务端，同事负责辅助功能。前期大家都学习，拿网上的例子来参考，慢慢的摸到了门路。期间与主程在技术有些分歧，&lt;/p&gt;
&lt;p&gt;主程强制要求做一些许多不可能的东西，没办法只有自己去做，做下来不可行才能继续推进。经过N次修改，尝试后端框架，才初步定下来，其中我还是获得许多技术收益 。前2个月，出来了&lt;/p&gt;
&lt;p&gt;一个可以玩的小游戏。期间问过主程，游戏是否要推出去。主程给的答复是游戏数量太少了，推不出去。问多了，就是一句话，不要管那么多，做项目就是。好吧，继续做吧。&lt;/p&gt;
&lt;p&gt;        后来又做了一个系列的游戏，服务端不到20天搞定，前端逻辑也不到1个月搞定，但是游戏特效迟迟无法推进。董事白天事多，基本上是晚上来做，最后董事与主程基本是晚上做事，&lt;/p&gt;
&lt;p&gt;又经常失眠，最后整的上午没什么效率。时间跨度也大。提议订制个时间作息表出来，但是董事说不要限制这么死，我们都是老板，不想做了就休息一下，但是隐形的上下级关系分的很严。&lt;/p&gt;
&lt;p&gt;最后就是，下面的人随叫随到，搞得下面人的也失眠，无工作效率。许多公司决定都是董事和主程在做，最多是决定出来了，再告知一下。很多信息也是董事和主程在交流，都没告知其他人员。&lt;/p&gt;
&lt;p&gt;自己出钱又出力，结果很多信息都是不知道的，造成信息严重不对等。想在工作室学习一下前端，直接遭到主程的隐形阻扰，感觉越来越放不开手脚。&lt;/p&gt;
&lt;p&gt;       期间与主程矛盾越来越激化。本来信息不对等，向董事说，董事都是看人员比重。项目没问题，其他事情与他无关，只要人在做事就好。第一次矛盾，主程发现问题，就直接丢给我改，&lt;/p&gt;
&lt;p&gt;许多问题直接在讨论群里面直接指名道姓说我这个有问题，需要改。结果多数是前端问题，只有忍，但是有时又忍不住，最后和不忍没区别了。使绊子久了，忍不住了就把事情闹到董事那去。&lt;/p&gt;
&lt;p&gt;借闹矛盾机会，提出BUG联调方式。有了BUG，一起调试，最后将效率增加了。第二次矛盾，就是因为作息时间不对等造成的。晚上一般到家基本10点过，有时忙一点回家就11点。主程习惯&lt;/p&gt;
&lt;p&gt;晚上在群里@我，提醒我第二天改BUG，但是基本是前端问题。主程又是一个没情商的，做事不考虑别人。一下忍不住，爆发了。叫董事制定个作息计划，懂事也没有制定。后面还在群里面&lt;/p&gt;
&lt;p&gt;发了一个分享，说的是强者不需要考虑别人的顾忌，直接了当是最好的。好吧直接了当，那就直接了当吧。想学前端，第二天给主程说，现在服务端已经比较完善了，进度也超前了，后期项目&lt;/p&gt;
&lt;p&gt;也差不多要1个月以后了，自己想学习一下前端的东西。结果是，安排你做后端，你就做后端。我心里一千个马，出钱又出力，还这样子。最后，董事又说等半年过去，公司大量招人需要预存&lt;/p&gt;
&lt;p&gt;几十万。到时候你们按比例给钱，不出钱再商量，想要更多的股份也可以商量。其实也了解到现在的行情，而且闹过两次这个隔阂也会更大，对以后公司的发展也没有什么信心了。生活中，&lt;/p&gt;
&lt;p&gt;或多或少的传输一些要百分之百信任带头人，要多忍耐，现在的矛盾以后不是事。做好自己的事，其他事情没安排的就不要做，不要管。做的事情是自己的，大家都是老板。以后工资会少点，&lt;/p&gt;
&lt;p&gt;股东都是靠分红的思想。&lt;/p&gt;
&lt;p&gt;       申请公司，主要是董事在经手，公司章程没有看到过，整个流程都是懂事与代理机构在操作。到了10月底了，产品还是没有产出的希望，按计划下去，18年下半年可能才会有产出，而且&lt;/p&gt;
&lt;p&gt;后期收益基本被运营商和董事,主程拿了，我要想收回成本 ，基本上要3年以上。最后真的厌倦了，就提出了离开。&lt;/p&gt;
&lt;p&gt;       在提出离开时，董事要求我把几个月拿的工资退回去。这个就当做是惩罚，我心里面想骂娘。公司没有产出，前期买办公用品和租办公区一次性投入+每个月10%投入+人力成本被咋个不算。&lt;/p&gt;
&lt;p&gt;最后，我的回答是，按法律程序办。&lt;/p&gt;
&lt;p&gt;       感想颇多，以前不觉得程序员情商低，但是这次以后真的承认了。没有丰富的社会阅历和较高情商，就努力去提升眼界和提升情商。真的面临法律问题，不要太感情用事。忍着不说出来，&lt;/p&gt;
&lt;p&gt;最终吃亏的还是自己。有矛盾，就不要共事。世界是公平的，没有谁对谁错，每个人都是自私的，吃亏都是自己没本事，怨不得其他人。今后几年，趁年轻努力工作，多照顾家庭，多锻炼身体。&lt;/p&gt;
&lt;p&gt;为今后自己的事业做准备。&lt;/p&gt;
&lt;p&gt;       创业其实是程序员们都关心的，把我的经历写出来，写的不好，希望给大家一点帮助。&lt;/p&gt;

</description>
<pubDate>Fri, 27 Oct 2017 05:33:00 +0000</pubDate>
<dc:creator>铁锅盖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/harveybarray/p/7742765.html</dc:identifier>
</item>
<item>
<title>C#基本功之泛型 - 黑色马提尼</title>
<link>http://www.cnblogs.com/gzb8/p/7742714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gzb8/p/7742714.html</guid>
<description>&lt;h3 id=&quot;一没有泛型之前&quot;&gt;一、没有泛型之前&lt;/h3&gt;
&lt;p&gt;在没有泛型之前，我们是怎么处理不同类型的相同操作的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例1
 //下面是一个处理string类型的集合类型
 public class MyStringList
    {
        string[] _list;
        public void Add(string x)
        {
            //将x添加到_list中，省略实现
        }
        public string this[int index]
        {
            get { return _list[index]; }
        }
    }
 //调用
 MyStringList myStringList = new MyStringList();
 myStringList.Add(&quot;abc&quot;);
 var str = myStringList[0];&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;示例2
    //如果我们需要处理int类型就需要复制粘贴然后把string类型替换为int类型：
    public class MyIntList
    {
        int [] _list;
        public void Add(int x)
        {
            //将x添加到_list中，省略实现
        }
        public int this[int index]
        {
            get { return _list[index]; }
        }
    }
   //调用
    MyIntList myIntList = new MyIntList();
    myIntList.Add(100);
    var num = myIntList[0];&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看得出我们的代码大部分是重复的，而作为有追求的程序员是不允许发生这样的事情的。&lt;br/&gt;于是乎，我们做了如下改变：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例3
 public class MyObjList
    {
        object[] _list;
        public void Add(object x)
        {
            //将x添加到_list中，省略实现
        }
        public object this[int index]
        {
            get { return _list[index]; }
        }
    }
 //调用
 MyObjList myObjList = new MyObjList();
myObjList.Add(100);
 var num = (int)myObjList[0];&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;从上面这三段代码中，我们可以看出一些问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;int和string集合类型的代码大量重复（维护难度大）。&lt;/li&gt;
&lt;li&gt;object集合类型发生了装箱和拆箱（损耗性能）。&lt;/li&gt;
&lt;li&gt;object集合类型是存在安全隐患的（类型不安全）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;问题1，虽然代码重复但是没有装箱、拆箱而且类型是安全的&lt;br/&gt;问题2，发生了装箱和拆箱，是损耗性能影响执行效率的。&lt;br/&gt;问题3，如果add的类型不是int类型，在编译器是不会检查出来的（编译通过），运行期就会报错,MyObjList类似于我们熟知的ArrayList&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-cef68276e3eee98f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;运行期报错&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在，我们必须解决如下问题&lt;/strong&gt;&lt;br/&gt;1、避免代码重复&lt;br/&gt;2、避免装箱和拆箱&lt;br/&gt;3、保证类型安全&lt;/p&gt;
&lt;p&gt;范型为我们提供了完美的解决方案&lt;/p&gt;
&lt;h3 id=&quot;二什么是泛型&quot;&gt;二、什么是泛型&lt;/h3&gt;
&lt;p&gt;如果你理解类是对象的模板（类是具有相同属性和行为的对象的抽象），那么泛型就很好理解了。&lt;br/&gt;泛型：generic paradigm（通用的范式），generic这个单词也很好的说明了模板这个概念：通用的，标准的。&lt;br/&gt;&lt;strong&gt;泛型是类型的模板&lt;/strong&gt;&lt;br/&gt;不同的是：作为模板的类是通过实例化产生不同的对象，而泛型是通过不同的类型实参产生&lt;strong&gt;不同的&lt;/strong&gt;类型&lt;br/&gt;泛型的基本概念介绍完，我们来看看泛型到底是怎么帮我们解决问题的&lt;/p&gt;
&lt;p&gt;  如何&lt;strong&gt;解决代码重复&lt;/strong&gt;：提取代码相同的部分，封装变换的部分——封装变化，而示例1和示例2中变换的部分就是int和string类型本身，如何将类型抽象呢&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例4
    //将示例3改装下
    public class MyList&amp;lt;T&amp;gt;
    {
        T [] _list;
        public void Add(T x)
        {
            //将x添加到_list中，省略实现
        }
        public T this[int index]
        {
            get { return _list[index]; }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;类型参数&lt;/strong&gt; T&lt;br/&gt;类型参数可以理解为泛型的&quot;形参&quot;（&quot;形参&quot;一般用来形容方法的），有“形参”就会有实参。如我们声明的List&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-a1d2d5c62fe57412.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;不同的类型&quot;/&gt;&lt;br/&gt;通过&lt;strong&gt;类型参数&lt;/strong&gt;解决了代码重复的问题&lt;/p&gt;
&lt;p&gt;  如何&lt;strong&gt;解决装箱、拆箱以及类型安全&lt;/strong&gt;的问题：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; //示例5
       List&amp;lt;int&amp;gt; list = new List&amp;lt;int&amp;gt;();
       list.Add(100);//强类型无需装箱
       //list.Add(&quot;ABC&quot;); 编译期安全检查报错
       int num = list[0];//无需拆箱   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-08eda25cff7db624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;编译期安全检查报错&quot;/&gt;&lt;/p&gt;
&lt;p&gt;声明泛型类型时，因为确定了&lt;strong&gt;类型实参&lt;/strong&gt;，所以操作泛型类型不需要装箱、拆箱，而且泛型将大量安全检查&lt;strong&gt;从运行时转移到了编译时&lt;/strong&gt;进行，保证了类型安全。&lt;br/&gt;注：C#为我们提供了5种泛型：类、结构、接口、委托和方法。&lt;/p&gt;
&lt;p&gt;在示例4中，自定义泛型集合只是添加和获取类型参数的实例，除此之外，没有对类型参数实例的成员做任何操作。C#的所有类型都继承自Object类型，也就是说，我们目前只能操作Object中的成员(Equals,GetType,ToString等)。但是，我自定义的泛型很多时候是需要操作类型更多的成员&lt;/p&gt;
&lt;p&gt;新需求，打印员工的信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例6
    public class Person
    {
        public string Name { get; set; }
        public int Age{ get; set; }
    }
    public class Employee : Person {  }
    public class PrintEmployeeInfo&amp;lt;T&amp;gt;
    {
        public void Print(T t)
        {
            Console.WriteLine(t.Name);//报错
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-25d0ae23a09dab4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;示例6：T未包含“Name”的定义&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们可以将类型参数T限定为Person类型，那么在泛型内部就可以操作Person类型的成员了。&lt;/p&gt;
&lt;h3 id=&quot;三泛型的约束&quot;&gt;三、泛型的约束&lt;/h3&gt;
&lt;p&gt;表格来至微软官方文档&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;where T：结构&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型参数必须是值类型。 可以指定除 Nullable 以外的任何值类型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;where T：类&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型参数必须是引用类型；这同样适用于所有类、接口、委托或数组类型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;where T：new()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;where T：&amp;lt;基类名称&amp;gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型参数必须是指定的基类或派生自指定的基类。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;where T：&amp;lt;接口名称&amp;gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;where T：U&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;
&lt;code&gt;示例7
 public class PrintEmployeeInfo&amp;lt;T&amp;gt; where T:Person
    {
        public void Print(T t)
        {
            Console.WriteLine(t.Name);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四协变和逆变很简单&quot;&gt;四、协变和逆变很简单&lt;/h3&gt;
&lt;p&gt;有一定工作经验的开发人员一定遇到过下面这样的情况：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例8
 List&amp;lt;Employee&amp;gt; list = new List&amp;lt;Employee&amp;gt;();
 list.Add(new Employee() { Age = 20, Name = &quot;小明&quot; });
 IEnumerable&amp;lt;Person&amp;gt; perList;
 perList = list;
 foreach (var item in perList)
 {
     Console.WriteLine(&quot;名字：&quot; + item.Name + &quot;,年龄：&quot; + item.Age);
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不是说，不同类型实参构造的泛型也是不同的吗，为啥可以将List&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;示例9
  public static void PrintEmployee(Person item)
  {
      Console.WriteLine(&quot;名字：&quot; + item.Name + &quot;,年龄：&quot; + item.Age);
  }

  Action&amp;lt;Employee&amp;gt; empAction = PrintEmployee;
  empAction(new Employee() { Age = 20, Name = &quot;小明&quot; });

  Action&amp;lt;Person&amp;gt; perAction = PrintEmployee;
  perAction(new Employee() { Age = 20, Name = &quot;小明&quot; });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果正常输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-0a95c2800fa7b865.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;正常输出&quot;/&gt;&lt;br/&gt;为什么可以将参数类型为Person的方法分别赋值给Action&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;类型参数分为输入参数（in）、输出参数（out）和不变参数（没有关键字）&lt;/li&gt;
&lt;li&gt;设计原则：里氏替换原则——派生类（子类）对象能够替换其基类（超类）对象被使用&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;IEnumerable的定义&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;public interface IEnumerable&amp;lt;out T&amp;gt; : IEnumerable&lt;/code&gt;&lt;br/&gt;示例8中IEnumerable&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-9e57fde2760630eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;编译错误&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2380505-71505e0ed899b6fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;清楚的错误信息&quot;/&gt;&lt;/p&gt;
&lt;p&gt;方法PrintEmployee需要的参数类型是Employee，而Action的输入参数是Person，显然Person不一定是Employee&lt;/p&gt;
&lt;p&gt;注：in和out关键字只适用于接口和委托类型&lt;/p&gt;
</description>
<pubDate>Fri, 27 Oct 2017 05:20:00 +0000</pubDate>
<dc:creator>黑色马提尼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gzb8/p/7742714.html</dc:identifier>
</item>
</channel>
</rss>