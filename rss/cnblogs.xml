<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用guava变形数据结构 - kangjianrong</title>
<link>http://www.cnblogs.com/kangjianrong/p/8435489.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kangjianrong/p/8435489.html</guid>
<description>&lt;p&gt;在java日常开发中，经常需要使用各种数据结构，在涉及到数据结构之间如何优雅的转换时，我们可以借助google的guava提供的相关功能来优雅的实现。以下记录一些开发中经常需要使用数据结构的变形，以便使用时方便查阅。&lt;br/&gt;一般我们的数据结构中存储的为对象，以下举例先构造一个类，用来存放中不同的数据结构中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age;

    &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(String name, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = age;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; age;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = age;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; MoreObjects.&lt;span class=&quot;fu&quot;&gt;toStringHelper&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;omitNullValues&lt;/span&gt;()
                .&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;, name)
                .&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;, age)
                .&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提供一个方法来构造一个对象list&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Collection&amp;lt;Person&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryPersion&lt;/span&gt;(){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Lists.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;(
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;kang&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;liu&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;),
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;han&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;)
        );
    }
&lt;span class=&quot;co&quot;&gt;//某个属性为null&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; List&amp;lt;Person&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryPersion2&lt;/span&gt;(){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Lists.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;(
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;kang&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;liu&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;),
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;han&quot;&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;),
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;)
        );
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;获取一组对象中的某个属性，存入一个list&lt;br/&gt;使用Lists.transform实现&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;Person&amp;gt; persons = &lt;span class=&quot;fu&quot;&gt;queryPersion&lt;/span&gt;();
    List&amp;lt;String&amp;gt; peopleNames = Lists.&lt;span class=&quot;fu&quot;&gt;transform&lt;/span&gt;(persons, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Function&amp;lt;Person, String&amp;gt;() {
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;(Person person) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        }
    });&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.5&quot;&gt;
&lt;p&gt;以优雅的方式过滤有null的值&lt;br/&gt;Iterables.filter第二个参数支持传入一个Predicate接口&lt;br/&gt;Predicates 是 Guava 中与 Predicate 接口配套使用的工具类，提供了一些非常有用的工具类&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Collection&amp;lt;Person&amp;gt; matchingPersons = &lt;span class=&quot;fu&quot;&gt;queryPersion2&lt;/span&gt;();
    Collection&amp;lt;String&amp;gt; peopleNames =
            Lists.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;(
                    Iterables.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;(
                            Iterables.&lt;span class=&quot;fu&quot;&gt;transform&lt;/span&gt;(matchingPersons, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Function&amp;lt;Person, String&amp;gt;() {
                                &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;(Person from) {
                                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; from.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                                }
                            }), Predicates.&lt;span class=&quot;fu&quot;&gt;notNull&lt;/span&gt;()
                    )
            );&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;使用filter过滤年龄大于25岁的人&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Collection&amp;lt;Person&amp;gt; persons = &lt;span class=&quot;fu&quot;&gt;queryPersion&lt;/span&gt;();
    List&amp;lt;Person&amp;gt; oldPeople = Lists.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;(Iterables.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;(persons, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Predicate&amp;lt;Person&amp;gt;() {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;(Person person) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person.&lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;() &amp;gt;= &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;;
        }
    }));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.5&quot;&gt;
&lt;p&gt;将list数据结构变形为map，将list中对象的某个属性提取出来，变为map中的key (开发中高频使用)&lt;br/&gt;需要注意的是这种使用方式，将list中某个对象的属性变为map的key时，该属性不能重复或者为null&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//name重复或者name为null时会报错&lt;/span&gt;
Collection&amp;lt;Person&amp;gt; yourList = &lt;span class=&quot;fu&quot;&gt;queryPersion&lt;/span&gt;();
    Map&amp;lt;String,Person&amp;gt; mappeds = Maps.&lt;span class=&quot;fu&quot;&gt;uniqueIndex&lt;/span&gt;(yourList, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Function&amp;lt;Person,String&amp;gt;() {
        &lt;span class=&quot;fu&quot;&gt;@Nullable&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;(Person from) {
            &lt;span class=&quot;co&quot;&gt;// do stuff here&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; from.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        }});   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.5&quot;&gt;
&lt;p&gt;将list数据结构变为ImmutableListMultimap&lt;br/&gt;如果list中某个对象的属性会重复时，可以使用如下方法转换，但转换的数据结构是一个ImmutableListMultimap，这是guava中提供的一个数据结构，简单的可以理解为map中的value为一个list&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Collection&amp;lt;Person&amp;gt; yourList = &lt;span class=&quot;fu&quot;&gt;queryPersion&lt;/span&gt;();
    ImmutableListMultimap&amp;lt;String, Person&amp;gt; mapping = Multimaps.&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;(yourList, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Function&amp;lt;Person,String&amp;gt;() {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;(Person input) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; input.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        }
    });&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;高效的创建list&lt;br/&gt;在可以预期一个list元素的个数时，可以使用如下方式创建，避免list在扩容时，造成性能衰减。注意的是这里只是传入一个预期的元素个数，实际情况中list中存放的元素个数并不需要完全等于预期值&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Lists.&lt;span class=&quot;fu&quot;&gt;newArrayListWithExpectedSize&lt;/span&gt;(size);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 09 Feb 2018 07:38:00 +0000</pubDate>
<dc:creator>kangjianrong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kangjianrong/p/8435489.html</dc:identifier>
</item>
<item>
<title>IntelliJ IDEA（七） ：Project Structure - JaJian</title>
<link>http://www.cnblogs.com/jajian/p/8081640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jajian/p/8081640.html</guid>
<description>&lt;h2&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;“ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;control&quot;&gt;&lt;span&gt;&lt;span&gt;项目结构”&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;对话框允许您管理项目和IDE级别的元素，例如Modules，Facets，Libraries&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;， Artifacts&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;和SDK。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209111323716-1321209466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在大多数情况下，左边部分有两个窗格实现了两级选择器。&lt;/span&gt;&lt;span&gt;唯一的例外是当你选择&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;control&quot;&gt;&lt;span&gt;&lt;span&gt;项目，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在这种情况下只有一个选择器窗格。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;打开方式有两种：&lt;/p&gt;
&lt;p&gt;1. 通过工具栏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209111449935-866506933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.通过快捷键&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Ctrl+Shift+Alt+S&lt;/span&gt; &lt;/p&gt;

&lt;h2&gt;Project&lt;/h2&gt;
&lt;p id=&quot;d431669e23&quot;&gt;&lt;span&gt;指定项目名称，SDK，语言级别和编译器输出路径。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209122610123-2076595315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li&gt;Project name：项目名，使用此字段编辑项目名称。&lt;/li&gt;
&lt;li&gt;Project SDK：项目SDK，选择项目SDK。如果所需SDK不在列表中，请单击“ &lt;strong&gt;New&lt;/strong&gt;”，然后选择所需的SDK类型。然后，在打开的对话框中，选择SDK主目录，然后单击确定。要查看或编辑所选SDK的名称和内容，请单击&quot;&lt;strong&gt;Edit&lt;/strong&gt;&quot;。（SDK页面将打开。）&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;Project language level：选择要支持的Java语言级别。选定的级别将被用作项目默认值。
&lt;p&gt;可用选项对应于JDK版本：&lt;br/&gt;1.3 - 普通的旧Java&lt;br/&gt;1.4 - “断言”关键字&lt;br/&gt;5.0 - 'enum'关键字，自动装箱等&lt;br/&gt;6.0 - @Override在接口&lt;br/&gt;7.0 - 钻石，ARM，多捕获等&lt;br/&gt;8.0 - Lambda支持，类型注释等&lt;br/&gt;可以为您的任何模块设置单独的语言级别 。&lt;br/&gt;请注意，如果目标级别没有明确定义（编译器选项-target），则认为它与源语言级别相同。&lt;br/&gt;因此，如果-target没有明确定义，它将与语言水平同步。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;Project compiler output：项目编译器输出，指定IntelliJ IDEA将存储编译结果的路径。单击选择路径对话框中browseButton 的目录。 
&lt;p&gt;指定目录中的两个子目录将被创建：&lt;br/&gt;production 为生产代码。&lt;br/&gt;test 为测试来源。&lt;br/&gt;在这些子目录中，将为每个模块创建单独的输出目录。输出路径可以在模块级重新定义。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Modules &lt;/h2&gt;
&lt;p&gt;指定项目名称，SDK，语言级别和编译器输出路径。在“  Project Structure”对话框中的类别中，现有groups, modules, facets以及Flash模块的build configurations显示在元素选择器窗格中。（Facets and build configurations显示为模块元素。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209131648232-1668801962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Name：项目名称&lt;/li&gt;
&lt;li&gt;Souces：这里对Module的开发目录进行文件夹分类，就是说这个module里有什么内容，说明了不同性质的内容放在哪里。&lt;br/&gt;注意，这些不同内容的标记代表了一个标准Java工程的各项内容，IntelliJ就是根据这些标记来识别一个Java工程的各项内容的，比如，它会用javac去编译标记为Sources的源码，打包的时候会把标记为Resources的资源拷贝到jar包中，并且忽略标记为Exluded的内容。左边显示的是在选中内容的预览。&lt;/li&gt;
&lt;li&gt;Paths：为模块配置编译器输出路径，还可以指定与模块关联的外部JavaDocs和外部注释的位置。&lt;/li&gt;
&lt;li&gt;Dependencies：在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Sources&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;对module的开发目录进行文件夹分类，以让idea明白怎么去对待他们，明确哪些是存放源代码的文件夹，哪些是存放静态文件的文件夹，哪些是存放测试代码的文件夹，哪些是被排除编译的文件夹。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209131621388-2004561378.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Language level&lt;/strong&gt;：语言级别列表，使用此列表为模块选择Java语言级别。可用选项对应于JDK版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209133014560-1317467445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Sources：源代码存放的文件，蓝色。&lt;/p&gt;
&lt;p&gt;Tests：设置测试代码存放的文件件，绿色。&lt;/p&gt;
&lt;p&gt;Resources：一般对应着Sources文件，一般放配置文件，如：log4j.properties，application.yml。&lt;/p&gt;
&lt;p&gt;Test Resources：这个对应着Tests文件夹，存放着Tests代码的配置文件。&lt;/p&gt;
&lt;p&gt;Excluded：设置配出编译检查的文件，例如我们在project模块设置的out文件夹。&lt;/p&gt;

&lt;h3&gt;Paths&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209133213373-1777019857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Compiler output&lt;/strong&gt;：编译输出路径。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;       1. Inherit project compile output path：继承项目编译输出路径 选择此选项以使用为项目指定的路径。即上面在Project选项中设置的out文件路径。&lt;/p&gt;
&lt;p&gt;       2. Use module compile output path:使用模块编译输出路径。&lt;/p&gt;
&lt;p&gt;           Output path：编译输出路径。&lt;/p&gt;
&lt;p&gt;           Test output path：测试代码编译输出路径。&lt;/p&gt;
&lt;p&gt;           Exclude output paths： 排除输出路径，选中此复选框可以排除输出目录。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JavaDoc&lt;/strong&gt;：使用可用控件组合与模块关联的外部JavaDocs存储位置的列表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Annotations&lt;/strong&gt;：外部注释。&lt;span&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/span&gt;&lt;img class=&quot;inline-icon-12&quot; title=&quot;新&quot; src=&quot;https://www.jetbrains.com/help/img/idea/2017.3/new.png&quot; alt=&quot;新&quot; width=&quot;12&quot; height=&quot;12&quot;/&gt;&lt;span&gt;&lt;span&gt; 和&lt;/span&gt;&lt;/span&gt;&lt;img class=&quot;inline-icon-12&quot; title=&quot;删除&quot; src=&quot;https://www.jetbrains.com/help/img/idea/2017.3/delete.png&quot; alt=&quot;删除&quot; width=&quot;12&quot; height=&quot;12&quot;/&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; 管理与模块关联的外部注释的位置（目录）列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209134735107-858169953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;Module SDK：模块SDK，选择模块SDK。
&lt;p&gt;（要将项目SDK与模块相关联，请选择Project SDK。请注意，如果稍后更改了项目SDK，模块SDK将相应更改。&lt;br/&gt;如果所需SDK不在列表中，请单击“ 新建”，然后选择所需的SDK类型。然后，在打开的对话框中，选择SDK主目录，然后单击确定。&lt;br/&gt;要查看或编辑所选SDK的名称和内容，请单击编辑。（SDK页面将打开。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;依赖列表&lt;/li&gt;
&lt;li&gt;相关性存储格式，选择用于存储依赖关系的格式（作为IntelliJ IDEA模块或Eclipse项目）。该选项对使用不同开发工具的团队有帮助。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt; &lt;span&gt;&lt;span&gt;在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209135652263-712820848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 首先，可以创建一个新的项目库，可以设置分类。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209142315420-1211582961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以添加本地jar包，网络来源的jar包，排除jar包，删除jar包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209143128670-1523642009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Facets&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;表示这个 &lt;span class=&quot;fontstyle2&quot;&gt;module &lt;span class=&quot;fontstyle0&quot;&gt;有什么特征，比如 &lt;span class=&quot;fontstyle2&quot;&gt;Web&lt;span class=&quot;fontstyle0&quot;&gt;，&lt;span class=&quot;fontstyle2&quot;&gt;Spring &lt;span class=&quot;fontstyle0&quot;&gt;和 &lt;span class=&quot;fontstyle2&quot;&gt;Hibernate &lt;span class=&quot;fontstyle0&quot;&gt;等；&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209150851826-975908564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Artifacts&lt;/h2&gt;
&lt;p&gt;Artifact 是 maven 中的一个概念，表示某个 module 要如何打包，例如 war exploded、war、jar、ear 等等这种打包形式；&lt;br/&gt;一个 module 有了 Artifacts 就可以部署到应用服务器中了！&lt;br/&gt;在给项目配置 Artifacts 的时候有好多个 type 的选项，exploed 是什么意思？&lt;br/&gt;explode 在这里你可以理解为展开，不压缩的意思。也就是 war、jar 等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。默认情况下，IDEA 的 Modules 和 Artifacts 的 output 目录 已经设置好了，不需要更改，&lt;br/&gt;打成 war 包 的时候会自动在 WEB-INF 目录 下生产 classes 目录 ，然后把编译后的文件放进去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209151253904-1028512381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;SDKS&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;系统开发工具 ，&lt;span class=&quot;fontstyle0&quot;&gt;全局 &lt;span class=&quot;fontstyle2&quot;&gt;SDK &lt;span class=&quot;fontstyle0&quot;&gt;配置 。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;Global libraries&lt;span class=&quot;fontstyle2&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;全局类库，可以配置一些常用的类库。&lt;/p&gt;

&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;问题，在项目异常的时候很有用，可以根据提示进行项目修复&lt;span class=&quot;fontstyle0&quot;&gt;（&lt;span class=&quot;fontstyle1&quot;&gt;FIXED&lt;span class=&quot;fontstyle0&quot;&gt;）&lt;span class=&quot;fontstyle0&quot;&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1162587/201802/1162587-20180209151641326-1256957972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 09 Feb 2018 07:19:00 +0000</pubDate>
<dc:creator>JaJian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jajian/p/8081640.html</dc:identifier>
</item>
<item>
<title>【前端开发】前端架构与具体的应用的矛盾，最终的简单才是王道。 - 张泰峰</title>
<link>http://www.cnblogs.com/ztfjs/p/software_2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ztfjs/p/software_2.html</guid>
<description>&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;　　年关将近，这年味愈加的浓烈了哈，似乎无心工作，似乎家乡的叨念从远远的方向传进了你的心里，坚持住哈，马上，就回家了。&lt;/p&gt;
&lt;p&gt;       进入正题，首先，我需要先解释下这个标题所表达的意思，以及它背后引出的具体的问题，&lt;strong&gt;前端架构与具体的应用的矛盾 &lt;/strong&gt;这句话为什么要这么说，相信大部分公司，不论你是创业型公司、外包公司或者是大一点儿的，上市的，在你们的前端技术栈中，react出现的频率应该不低，vue是更甚者吧，基于webpack、glub构建的应用应该很多了，甚至可以说，这些技术已经占领了前端的半个天下，但是笔者在这里呀，不禁要提出一个问题，那就是，你们的技术栈真的带给前端更简单的内容了吗？ 使用这些技术栈的时候，你们的应用是否会变得学习成本高昂、扩展能力差、依赖高阶程序员、文档不齐全、有没有测试用例？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/893115/201802/893115-20180209151239435-2036148343.jpg&quot; alt=&quot;&quot; width=&quot;523&quot; height=&quot;327&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;架构的本质&lt;/h2&gt;
&lt;p&gt;　　我认为架构的本质应该是什么？ 它应该是基于可能面临的风险构建的一套能够适应当前业务、扩展未来业务、行为可预测的、高可用性的。在能解决这些问题的前提下，架构应该是高度抽象的吧，一个优秀的架构，它一定要足够简单，基于一个或多个抽象的理解上构建出来的。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;简单才是本质&lt;/strong&gt;，spring为什么那么火，它足够简单。一旦你了解了它的抽象思维方式，整个开发极易上手，这就是一个优秀的架构应该有的表现力。如果你正在设计前端架构，我的忠告是，最好结合你的业务实际去实现它而不是去考虑最新的技术栈，盲目的追求渲染速度、组件式等。 &lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;前端一定要与业务接轨&lt;/strong&gt;，一个管理系统，你跟我谈什么渲染速度？一个正常的管理系统前端，它甚至都不需要webpack这样的工具构建，只需要一个裸的vue加上jquery就可以完成，这样的结构要优于大部分。为什么？ 贴合实际嘛！  后台系统你一个前端能维护多久呢？大部分时间，后台er在维护这个界面，如果你使用的技术太过复杂，增加了学习成本，还更容易使整个架构逆向发展。&lt;/p&gt;
&lt;p&gt;　　再例如，企业官方网站，企业商城，大型公司的门户，宣传网页，这些东西完全不需要用到打包、甚至vue你都要少用， 为什么？最重要的是它们不利于SEO，然后是不利于快速迭代，设计的再复杂些，vue技术栈全部捅上去，那有什么用嘞？除了给你自己的职业生涯添加一笔，对公司来说这就是技术的债务，公司需要招比你更厉害的人才能理解你写的这些高级的代码，而这些代码一旦在无数个迭代中膨胀，最后的选择只有推倒重来，改都没的改。&lt;/p&gt;

&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;结合业务再谈技术&lt;/h2&gt;
&lt;p&gt;　　什么前端路由系统，SPA 框架，你都要结合业务，后台系统使用SPA就是耍流氓。陡然增加前端的复杂性，让前端变成了一个比后台系统还复杂的系统。这很得不偿失。仅仅是为了前端开发的便利性，忽略的整个系统的复杂度，这样的架构怎么看都是不可取的。 &lt;/p&gt;
&lt;p&gt;　　什么时候能够使用这些技术栈？ 当然是业务允许、风险可以控制的情况下。  例如多终端，移动端，在移动端使用打包工具，SPA框架开发是很明智的，它们带来的优势，在渲染速度上，在使用性上，都是一流的。而且真正的实操中，这样的项目一般是重点维护的。&lt;/p&gt;
&lt;p&gt;　　要结合业务的实际选择技术，大部分时候，开发时间是有限的，实现的功能很多，盲目追求技术的新、快、是没有根据的。&lt;/p&gt;

&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;一些看法&lt;/h2&gt;
&lt;p&gt;　　推荐一些我个人开发时常用的几项前端架构，它们是我结合平时的开发实际，业务适应程度做出的技术栈调整。&lt;/p&gt;
&lt;p&gt;　　首先，如果项目大小一般，时间很紧急，我会毫不犹豫选择裸vue+jquery+bootstrap，快速开发完毕。&lt;/p&gt;
&lt;p&gt;　　如果项目中等的话，时间不多不少，我会看团队中，开发人员的比例，比如这个开发团队只有一两个前端，那么我会选择 require管理我的js模块，使用sass管理我的css模块，足够模块化，也有组件，同时开发速度够快，团队中的其他人理解起来也很快，在项目很赶的时候后台也可以帮一些忙，也不会担心他们破坏架构。具体到业务逻辑，首先了解业务的流程，例如我这个应用，面向的是企业管理人员，可能需要一些大数据展示，一些图形化界面。那么我很可能选择react+react-router+redux。&lt;/p&gt;
&lt;p&gt;　　大型项目需要依靠具体面临的可能风险，你需要调研清楚目标人群，宣传方式，例如使用SEO做搜索宣传，就不能选择打包技术，微信wap，选择vue技术栈是明智的选择等等。&lt;/p&gt;
&lt;p&gt;　　需要注意的是，&lt;strong&gt;最终的简单才是王道&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;　　希望大家一起探讨这方面的话题，我的观点也许是错误的，或者是有问题的，讨论一下，大家一起提升。&lt;/p&gt;

</description>
<pubDate>Fri, 09 Feb 2018 07:15:00 +0000</pubDate>
<dc:creator>张泰峰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ztfjs/p/software_2.html</dc:identifier>
</item>
<item>
<title>第一个 HTML5Plus 移动应用 - 代码实习生</title>
<link>http://www.cnblogs.com/xiaoyucoding/p/8435559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyucoding/p/8435559.html</guid>
<description>&lt;h2 id=&quot;什么是-html5plus-移动应用&quot;&gt;什么是 HTML5Plus 移动应用&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;HTML5 Plus移动App，简称5+App，是一种基于HTML、JS、CSS编写的运行于手机端的App，这种App可以通过扩展的JS API任意调用手机的原生能力，实现与原生App同样强大的功能和性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单一句就是，用开发 Web 的技术完成原生移动应用的开发。&lt;/p&gt;
&lt;h2 id=&quot;概念澄清&quot;&gt;概念澄清&lt;/h2&gt;
&lt;h3 id=&quot;html5&quot;&gt;HTML5+&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;HTML5+规范是一个开放规范，隶属于工信部，允许三方浏览器厂商或其他手机runtime制造商实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTML5+ 和 HTML5，名字只有一词之差，但是目前而言是完全两个不同的东西。&lt;/p&gt;
&lt;h3 id=&quot;app-与-移动-web&quot;&gt;5+App 与 移动 Web&lt;/h3&gt;
&lt;p&gt;虽然 5+App 与移动 Web 开发，采用的相关技术大体一致，但是两者的区别还是很明显的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;5+App 是 C/S 的，Web 是 B/S 的。&lt;/li&gt;
&lt;li&gt;5+App 是独立的客户端，应用资源通常只能是静态的文件。PHP、JSP 这些服务器模板，没有解析器去处理。&lt;/li&gt;
&lt;li&gt;5+App 打包后是 apk 及 ipa 后缀的包，也就是原生的移动应用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.plus&lt;/code&gt; 扩展的 API，依赖 5+Runtime 引擎。普通浏览器没有集成这个引擎，Web 开发通常用不了这些 API。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;以上说了这么多，目的就是帮助大家搞清楚 HTML5+ 是干什么的。作为开发者，首先搞清楚自己要开发移动应用还是 Web。别一看名字，就想当然地去用这个技术去开发 Web。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;
&lt;h3 id=&quot;开发工具&quot;&gt;开发工具&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dcloud.io/index.html&quot;&gt;HBuilder&lt;/a&gt; 内置了 5+App 的开发环境，因此需要先下载此 IDE。&lt;/p&gt;
&lt;h3 id=&quot;注册账号&quot;&gt;注册账号&lt;/h3&gt;
&lt;p&gt;下载并解压 HBuilder 后，启动 IDE。首次使用需要注册一个账号，方便之后管理应用以及在社区活动。&lt;/p&gt;
&lt;h3 id=&quot;设备&quot;&gt;设备&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;由于在下没有 iOS 设备以及 Mac OS 的机器，因此这个系列的分享都是以 Windows 系统下开发 Android 应用为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一台电脑，一部手机。手机最好是 Android 4.4 及以上的，不推荐用模拟器。USB 线也是必须的，当然 HBuilder 同样支持 WiFi 调试。&lt;/p&gt;
&lt;h2 id=&quot;第一个-5app&quot;&gt;第一个 5+App&lt;/h2&gt;
&lt;h3 id=&quot;新建应用&quot;&gt;新建应用&lt;/h3&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li&gt;启动 HBuilder，并且登录。&lt;/li&gt;
&lt;li&gt;菜单 -&amp;gt; 文件 -&amp;gt; 新建 -&amp;gt; 移动 App&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;模板暂时不需要调整，输入应用名“HelloWorld”，点击完成即可。&lt;/p&gt;
&lt;h3 id=&quot;index.html&quot;&gt;index.html&lt;/h3&gt;
&lt;p&gt;应用的入口页面，概念和 Web 的入口页类似。默认是应用根目录下的 index.html，这个可以调整。&lt;/p&gt;
&lt;h3 id=&quot;manifest.json&quot;&gt;manifest.json&lt;/h3&gt;
&lt;p&gt;5+App 的配置文件，用于配置应用的信息。HBuilder 对此文件做了特殊处理，并提供了可视化的编辑界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;应用信息&lt;/li&gt;
&lt;li&gt;应用名称：就是你的应用在手机桌面上显示的名字。&lt;/li&gt;
&lt;li&gt;appid：这个是 5+App 创建时分配的，不要修改。更不要和 iOS 的 AppID 或者其它第三方平台上的 appid 混淆。&lt;/li&gt;
&lt;li&gt;版本号：应用版本号&lt;/li&gt;
&lt;li&gt;页面入口：就是首页是哪个页面，可修改。&lt;/li&gt;
&lt;li&gt;应用描述：简单说明一下应用的信息&lt;/li&gt;
&lt;li&gt;图标配置&lt;/li&gt;
&lt;li&gt;就是应用的 logo，按照提示做一张符合规格的图，然后一键生成替换。&lt;/li&gt;
&lt;li&gt;启动图片&lt;/li&gt;
&lt;li&gt;splash 图就是应用启动的时候那张占位的图片，QQ 是个企鹅，微信是那个月球。&lt;/li&gt;
&lt;li&gt;启动选项：通常用默认的就行，根据需要调整。&lt;/li&gt;
&lt;li&gt;图片设置：按照需要，制作相应尺寸的 png 图，选择配置即可。&lt;/li&gt;
&lt;li&gt;SDK 配置&lt;/li&gt;
&lt;li&gt;如果用到了一些第三方的 SDK 的功能，就需要配置相应的信息。&lt;/li&gt;
&lt;li&gt;SDK 启用需填写的信息，去相应的第三方开放平台注册即可。&lt;/li&gt;
&lt;li&gt;模块权限配置&lt;/li&gt;
&lt;li&gt;某些模块的启用需要配置下权限&lt;/li&gt;
&lt;li&gt;页面引用关系&lt;/li&gt;
&lt;li&gt;不是特别懂，看说明书吧。&lt;/li&gt;
&lt;li&gt;代码视图&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;配置的源代码部分，不是所有配置都提供了可视化编辑视图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;真机运行&quot;&gt;真机运行&lt;/h3&gt;
&lt;p&gt;将手机连上电脑，HBuilder 会自动检测到连接到电脑上的设备。菜单 -&amp;gt; 运行 -&amp;gt; 真机运行，选择你的设备即可。首次使用会安装一个调试基座 HBuilder，如果 HBuilder IDE 版本变化的话，真机运行会覆盖旧版本的 HBuilder 基座。&lt;/p&gt;
&lt;h3 id=&quot;调试&quot;&gt;调试&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;页面的样式，推荐使用电脑的 Chrome 浏览器手机模式进行调试。&lt;/li&gt;
&lt;li&gt;Android 真机运行时，每次修改完文件并保存，手机端的基座会同步代码。&lt;/li&gt;
&lt;li&gt;Android 还是可以使用 Chrome RemoteDebugging 进行调试，但是需要是 Android 4.4 以上的设备并且首次需要FQ。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;调用-5api&quot;&gt;调用 5+API&lt;/h3&gt;
&lt;p&gt;简单封装一下扩展 API 加载完成的事件回调&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; plusReady &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(callback) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;plus&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'plusready'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，读取下当前设备连接的网络类型并输出到页面上。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;plusReady(function() {
  var netType = plus.networkinfo.getCurrentType();
  document.write('当前网络类型为：' + netType);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;真机运行，可以看到页面上的内容“当前网络类型为：3”，也就是 WiFi 网络环境。&lt;/p&gt;
&lt;h3 id=&quot;打包&quot;&gt;打包&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;确认 manifest.json 中的信息无误&lt;/li&gt;
&lt;li&gt;logo 及 splash 图不配置的话，会用默认的 HBuilder 相关图片。&lt;/li&gt;
&lt;li&gt;菜单 -&amp;gt; 发行 -&amp;gt; 云打包-打原生安装包&lt;/li&gt;
&lt;li&gt;勾选 Android，Android 的证书相对随意一些，用 DCloud 提供的现成的或者自己生成的都一样。&lt;/li&gt;
&lt;li&gt;包名要严格遵循 Android 包名的格式规范，不要乱写。这里调整一下，改为 &lt;code&gt;com.helo.html5plus&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果配置信息有错误，会有提示，必须修改正确才能继续。&lt;/li&gt;
&lt;li&gt;一切无误之后，点击“打包”，等待即可。&lt;/li&gt;
&lt;li&gt;打包完成后，会自动下载到相应的目录下。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;将云打包下载下来的 apk 安装到手机上，启动应用就可以查看当前网络状态信息。那么，我们的第一个 5+App 就顺利制作完成了。&lt;/p&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
</description>
<pubDate>Fri, 09 Feb 2018 07:08:00 +0000</pubDate>
<dc:creator>代码实习生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoyucoding/p/8435559.html</dc:identifier>
</item>
<item>
<title>iOS设备唯一标识的前世今生 - Zxiao..旭</title>
<link>http://www.cnblogs.com/taoxu/p/8377026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taoxu/p/8377026.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;设备唯一标识&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      估计很多开发都有被要求过获取一下设备的唯一标识，获取设备的唯一标识经常使用在我们做统计或者是在保证一台设备登录亦或者是做IM的时候可能会考虑去使用它，这一次在自己的需求当中就有一个“账号绑定设备”的需求，这个需求不讨论它的实用性怎样，需求还是需要我们自己去完成。&lt;/p&gt;
&lt;p&gt;      按照自己的理解针对这个设备的唯一标识，我还是建议少拿！当然说的是针对iOS的设备。下面就来总结一下这个唯一标识的发展过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一: UDID&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      UDID是什么？&lt;/p&gt;
&lt;p&gt;      你手机连接电脑的时候会弹出iTunes，通过它你就可以直观的看到一台设备的UDID，亦或者大家应该使用过“蒲公英”这个平台，要是你传到这个平台的ipa包要能安装在一台设备上的话就需要你在你自己的开发者证书当中添加到这台设备的UDID，这个过程在你直接使用Xcode连接设备的时候，Xcode也正确添加了开发者证书的前提下也是可以直接在你的开发者当中看到设备的UDID的，这个UDID是苹果给每一台设备配发的唯一标识，要是能直接使用它的话就可以直接解决上面我们的问题，可问题的关键是：&lt;/p&gt;
&lt;p&gt;      在iOS 5 之后苹果是禁止获取该UDID了，iOS 5有点遥远了。&lt;/p&gt;
&lt;p&gt;      比如下面是通过iTunes获取到的公司的测试机的设备信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/739006/201801/739006-20180129140339984-1454125483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      (有同事问我说为什么我iTunes的电话号码下面是序列号，不是UDID啊，你这是个假的iTunes吧！！哈哈....这怎么可能！你点击一下你的系列号试试！我把刀架在同事的脖子上问他是真的还是假的？)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二： IDFA&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      IDFA又是什么玩意？&lt;/p&gt;
&lt;p&gt;      IDFA俗称广告ID，估计在开发者里面提交用过应用的朋友都知道，在最后提交的时候苹果会问你有没有使用广告ID，不知道现在该有没有处于懵逼状态不懂苹果为什么要问这个的同行，看了我们这个就会清楚了为什么会这么问呢？这个广告ID就是IDFA。&lt;/p&gt;
&lt;p&gt;      这个IDFA既然是苹果的玩意，那是不是我们就可以安心的用了，答案肯定是不行的，苹果在用户隐私这一方面还是挺重视的，你肯定是不能用的！在手机设置中你是可以关闭这个按钮的，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/739006/201802/739006-20180206183157310-1031617201.png&quot; alt=&quot;&quot; width=&quot;387&quot; height=&quot;689&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       通过下面的一样代码你就能拿到这个IDFA：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
    #import &amp;lt;AdSupport/AdSupport.h&amp;gt;

    NSString *idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
    NSLog(@&quot;拿到的广告ID：%@&quot;,idfa);
        
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;三：MAC Address &lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      MAC地址用来表示互联网上每一个站点的标识符，采用十六进制数表示，共六个字节（48位）。其中，前三个字节是由IEEE的注册管理机构 RA负责给不同厂家分配的代码(高位24位)，也称为“编制上唯一的标识符” （Organizationally Unique Identifier)，后三个字节(低位24位)由各厂家自行指派给生产的适配器接口，称为扩展标识符（唯一性）。&lt;/p&gt;
&lt;p&gt;      MAC地址在网络上用来区分设备的唯一性，接入网络的设备都有一个MAC地址，他们肯定都是不同的，是唯一的。一部iPhone上可能有多个MAC地址，包括WIFI的、SIM的等，但是iTouch和iPad上就有一个WIFI的，因此只需获取WIFI的MAC地址就好了，也就是en0的地址。&lt;/p&gt;
&lt;p&gt;      MAC地址就如同我们身份证上的身份证号码，具有全球唯一性。这样就可以非常好的标识设备唯一性，听着上面的解释是不是感觉很完美？&lt;/p&gt;
&lt;p&gt;      but......&lt;/p&gt;
&lt;p&gt;      在iOS 7.0之后你再去请求MAC地址，返回的永远都是同一个值！被禁了......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四：IDFV 也就是UUID&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;     UUID这个你获取起来是比较容易的，但你要是想使用这个作为手机的唯一标识也是不行的，为什么？&lt;/p&gt;
&lt;p&gt;     我们用事实说明这个问题，下面的这些结论都是经过自己亲自测试的，在现有的版本中是没有问题的！！！&lt;/p&gt;
&lt;p&gt;     获取UUID，通过下面的方法：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
NSString *  strUUID = [UIDevice currentDevice].identifierForVendor.UUIDString
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     下一步：你把手机的应用删除了再测试一下，我们的结论是：  &lt;strong&gt;要是只是单纯的这样获取UUID，删除了应用在重新安装是会发生变化的！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五：UUID + KeyChain&lt;/strong&gt;     &lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      说了上面的这么多，这个就是这篇文章的重点内容了，你获取到UUID之后把UUID存在系统钥匙串中，你看到这个方案肯定也有下面这些疑问：&lt;/p&gt;
&lt;p&gt;      1、删除了应用这个标识会变吗？&lt;/p&gt;
&lt;p&gt;      2、升级了系统这个标识会变吗？&lt;/p&gt;
&lt;p&gt;      3、重置了系统之后呢？这个标识会变吗？&lt;/p&gt;
&lt;p&gt;      4、既然是使用到了系统钥匙串的东西，那要是我把手机越狱了，会有问题吗？&lt;/p&gt;

&lt;p&gt;      下面是我们这个方案的总的代码，先把代码给大家，完了我们再通过测试给上面的问题给出答案！给NSString添加一个UUID的类别：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
//
//  NSString+UUID.h
//  Encapsulation
//
//  Created by Zhangxu on 2018/1/26.
//  获取UUID并存储到keyChain

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface NSString (UUID)

+ (NSString *)getUUID;

@end


@interface KeyChainStore : NSObject

// 将UUID保存到钥匙串
+ (void)save:(NSString *)service data:(id)data;
// 读取保存到钥匙串的UUID
+ (id)load:(NSString *)service;
// 删除保存到钥匙串的UUID
+ (void)deleteKeyData:(NSString *)service;

@end
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      上面是.h文件，下面就是 NSString+UUID.m 的文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
//
//  NSString+UUID.m
//  Encapsulation
//  Created by Zhangxu on 2018/1/26.
//  获取UUID并存储到keyChain

#import &quot;NSString+UUID.h&quot;

@class KeyChainStore;

static NSString *  KEY_USERNAME_PASSWORD = @&quot;com.Zhushi.ShuangLongChessAndCard&quot;;

@implementation NSString (UUID)

+(NSString *)getUUID
{
    NSString * strUUID = (NSString *)[KeyChainStore load:KEY_USERNAME_PASSWORD];
    //首次执行该方法时，uuid为空
    if ([strUUID isEqualToString:@&quot;&quot;] || !strUUID)
    {
        //获取UUID
        strUUID = [UIDevice currentDevice].identifierForVendor.UUIDString;
        //将该uuid保存到keychain
        [KeyChainStore save:KEY_USERNAME_PASSWORD data:strUUID];
            
        //iPhone 8
        //11.2版本最初安装应用UUID FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE
        //11.2版本删除重装应用UUID FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE
        //升级系统11.2.5之后UUID  FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE
        
        //iPhone 6
        //10.3.3最初安装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7
        //10.3.3删除重装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7
        //升级11系统重装应用UUID    711CAC84-0540-4A44-80B4-26F87D2DD8B7
        //还原系统之后的应用UUID    1236FB53-CDCE-431E-999B-5C857C679B8A

    }
    return strUUID;
}

@end

#pragma mark -- KeyChainStore

@implementation KeyChainStore

+ (NSMutableDictionary *)getKeychainQuery:(NSString *)service
{
    return [NSMutableDictionary dictionaryWithObjectsAndKeys:
            (id)kSecClassGenericPassword,(id)kSecClass,
            service, (id)kSecAttrService,
            service, (id)kSecAttrAccount,
            (id)kSecAttrAccessibleAfterFirstUnlock,(id)kSecAttrAccessible,
            nil];
}

// 将UUID保存到钥匙串
+ (void)save:(NSString *)service data:(id)data
{
    //Get search dictionary
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    //Delete old item before add new item
    SecItemDelete((CFDictionaryRef)keychainQuery);
    //Add new object to search dictionary(Attention:the data format)
    [keychainQuery setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(id)kSecValueData];
    //Add item to keychain with the search dictionary
    SecItemAdd((CFDictionaryRef)keychainQuery, NULL);
}

// 读取保存到钥匙串的UUID
+ (id)load:(NSString *)service
{
    id ret = nil;
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    
    [keychainQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];
    [keychainQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];
    CFDataRef keyData = NULL;
    if (SecItemCopyMatching((CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;amp;keyData) == noErr)
    {
        @try{
            ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge NSData *)keyData];
        } @catch (NSException *e) {
            NSLog(@&quot;Unarchive of %@ failed: %@&quot;, service, e);
        } @finally {
        }
    }
    if (keyData)
        CFRelease(keyData);
    return ret;
}

// 删除保存到钥匙串的UUID
+ (void)deleteKeyData:(NSString *)service
{
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    SecItemDelete((CFDictionaryRef)keychainQuery);
}

@end
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      最后的结论：&lt;/p&gt;
&lt;p&gt;      通过上面的代码你可以看到整个代码不是多么的复杂，我们关心的还是上面提出的几个疑问，我们一一测试：&lt;/p&gt;
&lt;p&gt;      1、删除了应用之后这个标识会改变吗？&lt;/p&gt;
&lt;p&gt;      结论：&lt;strong&gt;只要不是越狱的设备，删除应用之后是不会改变这个标识的！（越狱设备后面说！）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      2、升级了系统这个标识会变吗？&lt;/p&gt;
&lt;p&gt;      下面是我把手机升级之后拿到的一组数据，测试机，就不给标识上码了...哈哈&lt;/p&gt;

&lt;p&gt;      iPhone 8&lt;/p&gt;
&lt;p&gt;      11.2版本最初安装应用UUID FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE&lt;/p&gt;
&lt;p&gt;      11.2版本删除重装应用UUID FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE&lt;/p&gt;
&lt;p&gt;      升级系统11.2.5之后UUID  FD6A5FE3-9EB4-422B-ADD3-17B313B9C8DE&lt;/p&gt;

&lt;p&gt;      iPhone 6&lt;/p&gt;
&lt;p&gt;      10.3.3最初安装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      10.3.3删除重装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      升级11系统重装应用UUID    711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      通过上面的这组数据，我们可以得到的结论是： &lt;strong&gt;在现有版本情况下，升级系统是不会改变这个标识的！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;      3、用于还原了设备会改变这个标识吗？我们再通过下面这组数据说明，拿我们的iPhone6当小白鼠，要是不知道怎样还原手机设备的看下面的： 设置 -&amp;gt; 通用 -&amp;gt;  还原&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/739006/201802/739006-20180209145306670-1589541552.jpg&quot; alt=&quot;&quot; width=&quot;273&quot; height=&quot;485&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      看我们在小白鼠上拿到的数据：&lt;/p&gt;

&lt;p&gt;      iPhone 6&lt;/p&gt;
&lt;p&gt;      10.3.3最初安装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      10.3.3删除重装应用UUID   711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      升级11系统重装应用UUID    711CAC84-0540-4A44-80B4-26F87D2DD8B7&lt;/p&gt;
&lt;p&gt;      还原系统之后的应用UUID    1236FB53-CDCE-431E-999B-5C857C679B8A&lt;/p&gt;
&lt;p&gt;      结论： &lt;strong&gt;还原系统之后我们这个标识符真的改变了！！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;      4、那要是设备越狱了呢？&lt;/p&gt;
&lt;p&gt;      结论：&lt;strong&gt;在越狱设备上经过测试，是偶尔可以，偶尔不行！！！没错，就是这个结论！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;      最后：&lt;/p&gt;
&lt;p&gt;             通过上面的对比数据分析，结果我们也给大家了，通过上面的结论，你就知道了使用 UUID + KeyChain 的利弊，在目前中你想要做唯一标识 UUID + KeyChain 暂时应该是最科学的！&lt;/p&gt;

</description>
<pubDate>Fri, 09 Feb 2018 07:04:00 +0000</pubDate>
<dc:creator>Zxiao..旭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taoxu/p/8377026.html</dc:identifier>
</item>
<item>
<title>Java中常见的排序方法 - 天生吾材</title>
<link>http://www.cnblogs.com/dz-boss/p/8435403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dz-boss/p/8435403.html</guid>
<description>&lt;p&gt;本博主要介绍Java中几种常见的排序算法；&lt;/p&gt;
&lt;p&gt;/*&lt;br/&gt;排序方法的演示&lt;br/&gt;1）插入排序（直接插入排序、希尔排序）&lt;br/&gt;2）交换排序（冒泡排序、快速排序）&lt;br/&gt;3）选择排序（直接选择排序、堆排序）&lt;br/&gt;4）归并排序&lt;br/&gt;5）分配排序（基数排序）&lt;br/&gt;所需辅助空间最多：归并排序&lt;br/&gt;所需辅助空间最少：堆排序&lt;br/&gt;平均速度最快：快速排序&lt;br/&gt;不稳定：快速排序，希尔排序，堆排序。&lt;br/&gt;*/&lt;/p&gt;
&lt;p&gt;其中，文字部分来自于网上整理，代码部分属于自己实现的（堆排序，归并排序，基数排序代码来自网上），主要用于自己学习，有空的时候翻翻老笔记看看&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;h2&gt;1.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　直接插入排序的基本操作是将一个记录插入到已经排好的有序表中，从而得到一个新的、记录数增1的有序表。对于给定的一组记录，初始时假定第一个记录自成一个有序序列，其余记录为无序序列。接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序序列中，直到最后一个记录插到有序序列中为止。&lt;/p&gt;
&lt;h2&gt;1.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　当最好的情况，也就是要排序的表本身就是有序的，此时只有数据比较，没有数据移动，时间复杂度为&lt;em&gt;O(n)&lt;/em&gt;。 &lt;br/&gt;当最坏的情况，即待排序的表是逆序的情况，此时需要比较次数为：&lt;em&gt;2+3+…+n=(n+2)(n-1)/2&lt;/em&gt; 次,而记录移动的最大值也达到了 &lt;em&gt;(n+4)(n-1)/2&lt;/em&gt; 次. &lt;br/&gt;如果排序记录是随机的，那么根据概率相同的原则，平均比较和移动次数约为次n&lt;sup&gt;2&lt;/sup&gt;/4，因此，得出直接插入排序发的时间复杂度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091101931&quot; alt=&quot;这里写图片描述&quot;/&gt;。从这里可以看出，同样的是时间复杂度&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091101931&quot; alt=&quot;这里写图片描述&quot;/&gt;，直接插入排序法比冒泡和简单选择排序的性能要好一些。&lt;/p&gt;
&lt;h2&gt;1.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest2 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data1 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:直接插入排序&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         System.out.println(&quot;插入排序：\t&quot; +&lt;span&gt; Arrays.toString(insertSort(data1)));
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:直接插入排序&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] insertSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; insertData = data[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 要插入到数组中的数据&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; j = i - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 临时脚标&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (j &amp;gt;= 0 &amp;amp;&amp;amp; insertData &amp;lt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 data[j + 1] = data[j];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将原始数据后移&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             data[j + 1] = insertData; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将如要插入的数据插入到此处&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　希尔排序也成为“缩小增量排序”，其基本原理是，现将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序列“基本有序”后，最后在对所有元素进行一次直接插入排序。因此，我们要采用跳跃分割的策略：将相距某个“增量”的记录组成一个子序列，这样才能保证在子序列内分别进行直接插入排序后得到的结果是基本有序而不是局部有序。希尔排序是对直接插入排序算法的优化和升级。 &lt;br/&gt;　　所谓的基本有序，就是小的关键字基本在前面，大的基本在后面，不大不小的基本在中间，例如｛2,1,3,6,4,7,5,8,9,｝就可以称为基本有序了。但像｛1,5,9,3,7,8,2,4,6｝这样，9在第三位，2在倒数第三位就谈不上基本有序。&lt;/p&gt;
&lt;h2&gt;2.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个子序列，实现跳跃式移动，使得排序的效率提高。需要注意的是，增量序列的最后一个增量值必须等于1才行。另外，由于记录是跳跃式的移动，希尔排序并不是一种稳定的排序算法。 &lt;br/&gt;希尔排序最好时间复杂度和平均时间复杂度都是&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091828581&quot; alt=&quot;这里写图片描述&quot;/&gt;，最坏时间复杂度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091837440&quot; alt=&quot;这里写图片描述&quot;/&gt;。&lt;/p&gt;
&lt;h2&gt;2.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest3 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:希尔排序&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         System.out.println(&quot;希尔排序：\t&quot; +&lt;span&gt; Arrays.toString(shellSort(data)));
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:希尔排序&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] shellSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 划分组&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; r = data.length / 2; r &amp;gt;= 1; r /= 2&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对每一组进行插入排序&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = r; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; insertData = data[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插入的数据&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; j = i - r;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 临时序号&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (j &amp;gt;= 0 &amp;amp;&amp;amp; data[j] &amp;lt;&lt;span&gt; insertData) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     data[j + r] =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     j -=&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 data[j + r] =&lt;span&gt; insertData;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。至此第一趟结束，将最大的数放到了最后。在第二趟：仍从第一对数开始比较（因为可能由于第2个数和第3个数的交换，使得第1个数不再小于第2个数），将小数放前，大数放后，一直比较到倒数第二个数（倒数第一的位置上已经是最大的），第二趟结束，在倒数第二的位置上得到一个新的最大数（其实在整个数列中是第二大的数）。如此下去，重复以上过程，直至最终完成排序。&lt;/p&gt;
&lt;p&gt;　　用二重循环实现，外循环变量设为i，内循环变量设为j。假如有n个数需要进行排序，则外循环重复n-1次，内循环依次重复n-1，n-2，...，1次。每次进行比较的两个元素都是与内循环j有关的，它们可以分别用a[j]和a[j+1]标识，i的值依次为1,2,...,n-1，对于每一个i，j的值依次为0,1,2,...n-i 。&lt;/p&gt;
&lt;p&gt;　　设数组长度为N：&lt;br/&gt;　　1．比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个数据交换。&lt;br/&gt;　　2．这样对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。&lt;br/&gt;　　3．N=N-1，如果N不为0就重复前面二步，否则排序完成。&lt;/p&gt;
&lt;h2&gt;3.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　时间复杂度分析。其外层循环执行 N - 1次。内层循环最多的时候执行N次，最少的时候执行1次，平均执行 &lt;code&gt;(N+1)/2&lt;/code&gt;次。&lt;br/&gt;　　所以循环体内的比较交换约执行 &lt;code&gt;(N - 1)(N + 1) / 2 = (N^2 - 1)/2&lt;/code&gt;（其中&lt;code&gt;N^2&lt;/code&gt;是仿照Latex中的记法，表示N的平方）。按照计算复杂度的原则，去掉常数，去掉最高项系数，其复杂度为&lt;code&gt;O(N^2)&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;3.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest4 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:冒泡排序&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;冒泡排序：\t&quot; +&lt;span&gt; Arrays.toString(bubbleSort(data)));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:冒泡排序&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] bubbleSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 冒泡次数&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 冒泡&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; data.length - i - 1; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt; data[j + 1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     data[j] = data[j + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     data[j + 1] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　快速排序是我们之前学习的冒泡排序的升级，他们都属于交换类排序，都是采用不断的比较和移动来实现排序的。快速排序是一种非常高效的排序算法，它的实现，增大了记录的比较和移动的距离，将关键字较大的记录从前面直接移动到后面，关键字较小的记录从后面直接移动到前面，从而减少了总的比较次数和移动次数。同时采用“分而治之”的思想，把大的拆分为小的，小的拆分为更小的，其原理如下：对于给定的一组记录，选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，直到序列中的所有记录均有序为止。&lt;/p&gt;
&lt;h2&gt;4.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;（1）最坏时间复杂度 &lt;br/&gt;　　最坏情况是指每次区间划分的结果都是基准关键字的左边（或右边）序列为空，而另一边区间中的记录仅比排序前少了一项，即选择的关键字是待排序记录的最小值或最大值。最坏情况下快速排序的时间复杂度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427085526407&quot; alt=&quot;这里写图片描述&quot;/&gt;。 &lt;br/&gt;（2）最好时间复杂度 &lt;br/&gt;　　最好情况是指每次区间划分的结果都是基准关键字的左右两边长度相等或者相差为1，即选择的基准关键字为待排序的记录的中间值。此时进行比较次数总共为 &lt;em&gt;nlogn&lt;/em&gt;，所以最好情况下快速排序的时间复杂度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427090542798&quot; alt=&quot;这里写图片描述&quot;/&gt;。 &lt;br/&gt;（3）平均时间复杂度 &lt;br/&gt;　　快速排序的平均时间复杂度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427090542798&quot; alt=&quot;这里写图片描述&quot;/&gt;。在所有平均时间复杂度为&lt;em&gt;O(nlogn)&lt;/em&gt;的算法中，快速排序的平均性能是最好的。 &lt;br/&gt;（4）空间复杂度 &lt;br/&gt;　　快速排序的过程中需要一个栈空间来实现递归。最好情况，递归树的深度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427085958586&quot; alt=&quot;这里写图片描述&quot;/&gt;，其空间复杂度也就是&lt;em&gt;O(nlogn)&lt;/em&gt;；最坏情况下，需要进行 &lt;em&gt;n-1&lt;/em&gt;次递归，其空间复杂度为&lt;em&gt;O(n)&lt;/em&gt;；平均情况，空间复杂度为&lt;em&gt;O(nlogn)&lt;/em&gt;. &lt;br/&gt;（5）基准关键字的选取，基准关键字的选取是决定快速排序算法的关键，常用的基准关键字的选取方式如下： &lt;br/&gt;　　第一种：三者取中。将序列首、尾和中间位置上的记录进行比较，选择三者中值作为基准关键字。 &lt;br/&gt;　　第二种：取left和right之间的一个随机数&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427090328262&quot; alt=&quot;这里写图片描述&quot;/&gt;，用&lt;em&gt;n[m]&lt;/em&gt;作为基准关键字。采用这种方法得到的快速排序一般称为随机的快速排序。&lt;/p&gt;
&lt;h2&gt;4.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest5 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:快速排序&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;快速排序：\t&quot; + Arrays.toString(quickSort(data, 0, data.length - 1&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:快速排序&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] quickSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; middle = getMiddle(data, low, high);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取中间值
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对两端的再次进行排序&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             quickSort(data, low, middle - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             quickSort(data, middle + 1&lt;span&gt;, high);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 快速排序：获取中间值&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getMiddle(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以第一个元素为基准&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[low];
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (low &amp;lt; high &amp;amp;&amp;amp; data[high] &amp;gt;&lt;span&gt; temp) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 high--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             data[low] =&lt;span&gt; data[high];
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (low &amp;lt; high &amp;amp;&amp;amp; data[low] &amp;lt;&lt;span&gt; temp) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 low++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             data[high] =&lt;span&gt; data[low];
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         data[low] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; low;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　选择排序是一种简单直观的排序算法，其基本原理如下：对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录的位置与第一个记录的位置交换；接着对不包括第一个记录以外的其他记录进行第二次比较，得到最小记录并与第二个位置记录交换；重复该过程，知道进行比较的记录只剩下一个为止。&lt;/p&gt;
&lt;h2&gt;5.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　从简单选择排序的过程来看，它最大的特点是交换移动数据次数相当少，这样就节约了相应的时间。分析它的时间复杂度发现，无论是最好最差情况，其比较次数都是一样多，第 &lt;em&gt;i&lt;/em&gt; 趟排序需要进行 &lt;em&gt;n-i&lt;/em&gt; 次关键字比较，此时需要比较次&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091425501&quot; alt=&quot;这里写图片描述&quot;/&gt;，对于交换次数而言，当最好的时候，交换&lt;em&gt;0&lt;/em&gt;次，最差的时候，也就是初始降时，交换次数为 &lt;em&gt;n-1&lt;/em&gt; 次，基于最终的时间排序与交换次数总和，因此，总的时间复杂度依然为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091455826&quot; alt=&quot;这里写图片描述&quot;/&gt;。 &lt;br/&gt;尽管与冒泡排序同为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427091455826&quot; alt=&quot;这里写图片描述&quot;/&gt;，但简单选择排序的性能要优于冒泡排序。&lt;/p&gt;
&lt;h2&gt;5.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest6 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:直接选择排序&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;直接排序：\t&quot; +&lt;span&gt; Arrays.toString(chooseSort(data)));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:直接选择排序&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] chooseSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环次数&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 逐个比较&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + 1; j &amp;lt; data.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[i] &amp;gt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     data[i] =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     data[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　堆排序就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是，将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根节点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的 &lt;em&gt;n-1&lt;/em&gt; 个序列重新构造成一个堆，这样就会得到 &lt;em&gt;n&lt;/em&gt; 个元素中次大的值。如此反复执行，便能得到一个有序序列了。 &lt;br/&gt;　　堆排序的实现需要解决的两个关键问题： &lt;br/&gt;（1）将一个无序序列构成一个堆。 &lt;br/&gt;（2）输出堆顶元素后，调整剩余元素成为一个新堆。&lt;/p&gt;
&lt;p&gt;堆排序的实现：&lt;/p&gt;
&lt;p&gt;① 初始化操作：将R[1..n]构造为初始堆； &lt;br/&gt;②每一趟排序的基本操作：将当前无序区的堆顶记录R[1]和该区间的最后一个记录交换，然后将新的无序区调整为堆(亦称重建堆)。&lt;/p&gt;
&lt;p&gt;注意： &lt;br/&gt;①只需做n-1趟排序，选出较大的n-1个关键字即可以使得文件递增有序。 &lt;br/&gt;②用小根堆排序与利用大根堆类似，只不过其排序结果是递减有序的。堆排序和直接选择排序相反：在任何时刻堆排序中无序区总是在有序区之前，且有序区是在原向量的尾部由后往前逐步扩大至整个向量为止。&lt;/p&gt;
&lt;h2&gt;6.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　堆排序的运行时间主要耗费在初始构建堆和在重建堆时反复筛选上。在构建对的过程中，因为我们是完全二叉树从最下层最右边的非终端节点开始构建，将它与其孩子进行比较和若有必要的互换，对每个非终端节点来说，其实最多进行两次比较和互换操作，因此整个构建堆的时间复杂度为&lt;em&gt;O(n)&lt;/em&gt;。 &lt;br/&gt;　　在正式排序时，第i次取堆顶记录重建堆需要用&lt;em&gt;O(logi)&lt;/em&gt;的时间（完全二叉树的某个节点到根节点的距离为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427183239770&quot; alt=&quot;这里写图片描述&quot;/&gt;），并且需要取&lt;em&gt;n-1&lt;/em&gt;次堆顶记录，因此，重建堆的时间复杂度为&lt;em&gt;O(nlogn)&lt;/em&gt;。 &lt;br/&gt;　　所以总体来说，堆排序的时间复杂度为&lt;em&gt;O(nlogn)&lt;/em&gt;，由于堆排序对原始记录的状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为&lt;em&gt;O(nlogn)&lt;/em&gt;。这在性能上显然要远远好过于冒泡、简单选择、直接插入的时间复杂度了。 &lt;br/&gt;　　空间复杂度上，它只有一个用来交换的暂存单元，也非常的不错。不过由于记录的比较与交换是跳跃式进行的，因此堆排序也是一种不稳定的排序方法。 &lt;br/&gt;　　另外，由于出事构建堆所需要的比较次数比较多，因此，他并不适合待排序序列个数较少的情况。&lt;/p&gt;
&lt;h2&gt;6.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest7 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:堆排序&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;堆排序：\t&quot; +&lt;span&gt; Arrays.toString(heapSort(data)));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] heapSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         data = buildMaxHeap(data); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始建堆，array[0]为第一趟值最大的元素&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.length - 1; i &amp;gt; 1; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp = data[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将堆顶元素和堆低元素交换，即得到当前最大元素正确的排序位置&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             data[0] =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             data[i] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             adjustDownToUp(data, 0, i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整理，将剩余的元素整理成堆&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构建大根堆：将array看成完全二叉树的顺序存储结构&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] buildMaxHeap(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从最后一个节点array.length-1的父节点（array.length-1-1）/2开始，直到根节点0，反复调整堆&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = (array.length - 2) / 2; i &amp;gt;= 0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            adjustDownToUp(array, i, array.length);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将元素array[k]自下往上逐步调整树形结构&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; adjustDownToUp(&lt;span&gt;int&lt;/span&gt;[] array, &lt;span&gt;int&lt;/span&gt; k, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; array[k];
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 2 * k + 1; i &amp;lt; length - 1; i = 2 * i + 1) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; i为初始化为节点k的左孩子，沿节点较大的子节点向下调整&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;lt; length &amp;amp;&amp;amp; array[i] &amp;lt; array[i + 1]) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取节点较大的子节点的下标&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                 i++; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果节点的右孩子&amp;gt;左孩子，则取右孩子节点的下标&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp &amp;gt;= array[i]) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点 &amp;gt;=左右子女中关键字较大者，调整结束&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点 &amp;lt;左右子女中关键字较大者&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                 array[k] = array[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将左右子结点中较大值array[i]调整到双亲节点上&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                 k = i; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 【关键】修改k值，以便继续向下调整&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         array[k] = temp; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 被调整的结点的值放人最终位置&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7.1.基本思想&lt;/h2&gt;
&lt;p&gt;　　归并排序就是利用归并的思想实现的排序方法。而且充分利用了完全二叉树的深度是&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427173332832&quot; alt=&quot;这里写图片描述&quot;/&gt;的特性，因此效率比较高。其基本原理如下：对于给定的一组记录，利用递归与分治技术将数据序列划分成为越来越小的半子表，在对半子表排序，最后再用递归方法将排好序的半子表合并成为越来越大的有序序列。 &lt;br/&gt;　　经过第一轮比较后得到最小的记录，然后将该记录的位置与第一个记录的位置交换；接着对不包括第一个记录以外的其他记录进行第二次比较，得到最小记录并与第二个位置记录交换；重复该过程，知道进行比较的记录只剩下一个为止。&lt;/p&gt;
&lt;h2&gt;7.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　一趟归并需要将数组 &lt;em&gt;a[]&lt;/em&gt;中相邻的长度为h的有序序列进行两两归并.并将结果放到temp[]中，这需要将待排序列中的所有记录扫描一遍，因此耗费&lt;em&gt;O(n)&lt;/em&gt;，而又完全二叉树的深度可知，整个归并排序需要进行（&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427173053324&quot; alt=&quot;这里写图片描述&quot;/&gt;）次，因此总的时间复杂度为&lt;em&gt;O(nlogn)&lt;/em&gt;，而且这是归并排序算法中最好、最坏、平均的时间性能。 &lt;br/&gt;由于归并排序在归并过程中需要与原始序列同样数量的存储空间存放归并结果以及递归时深度为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160427173053324&quot; alt=&quot;这里写图片描述&quot;/&gt;的栈空间，因此空间复杂度为&lt;em&gt;O(n+logn)&lt;/em&gt;. &lt;br/&gt;另外，对代码进行仔细研究，发现merge函数中有&lt;em&gt;if (a[i] &amp;lt; a[j])&lt;/em&gt; 的语句，说明它需要两两比较，不存在跳跃，因此归并排序是一种稳定的排序算法。 &lt;br/&gt;也就是说，归并排序是一种比较占内存，但却效率高且稳定的算法。&lt;/p&gt;
&lt;h2&gt;7.3.工作原理&lt;/h2&gt;
&lt;p&gt;（1）申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列 &lt;br/&gt;（2）设定两个指针，最初位置分别为两个已经排序序列的起始位置 &lt;br/&gt;（3）比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 &lt;br/&gt;（4）重复步骤3直到某一指针达到序列尾 &lt;br/&gt;（5）将另一序列剩下的所有元素直接复制到合并序列尾&lt;/p&gt;
&lt;h2&gt;7.4.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest8 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4.归并排序&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         mergeSort(data, 0, data.length - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         System.out.println(&quot;归并排序：\t&quot; +&lt;span&gt; Arrays.toString(data));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mergeSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; mid = (low + high) / 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左边&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            mergeSort(data, low, mid);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右边&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             mergeSort(data, mid + 1&lt;span&gt;, high);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左右归并&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            merge(data, low, mid, high);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; merge(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; mid, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] temp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[high - low + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = low;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左指针&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; j = mid + 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右指针&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; k = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把较小的数先移到新数组中&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;=&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (data[i] &amp;lt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 temp[k++] = data[i++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 temp[k++] = data[j++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把左边剩余的数移入数组&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;=&lt;span&gt; mid) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             temp[k++] = data[i++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把右边边剩余的数移入数组&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (j &amp;lt;=&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             temp[k++] = data[j++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把新数组中的数覆盖nums数组&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k2 = 0; k2 &amp;lt; temp.length; k2++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             data[k2 + low] =&lt;span&gt; temp[k2];
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8.1.基本思想&lt;/h2&gt;
&lt;p&gt;  　　像选择排序、插入排序、快速排序等都是基于两个元素的比较进行排序的。而基数排序无需进行元素比较，基于队列处理就能够达到排序的目的。&lt;/p&gt;
&lt;p&gt;　　基数排序不是基于排序关键字来比较排序项，而是基于排序关键字的结构。对于排序关键字中的每一个数字或字符的每一种可能取值，都会创建一个单独的队列。队列的数目就称为基数。&lt;/p&gt;
&lt;p&gt;　　例如：要排序全部由小写字母组成的字符串，则基数就是26，就会用到26个单独的队列。如果对十进制数进行排序，则基数应该是10.&lt;/p&gt;
&lt;h2&gt;8.2.复杂度分析&lt;/h2&gt;
&lt;p&gt;　　在基数排序中，没有任何元素的比较和交换，元素只是在每一轮中从一个队列移动到另一个队列。对于给定的基数，遍历数据的轮次是一个常数，它与排序关键字的数目无关，于是，基数排序算法的时间复杂度为O(n)&lt;/p&gt;
&lt;p&gt;1.基数排序算法要根据给定问题特别设计；&lt;br/&gt;2.如果排序关键字中的数字数目与列表中元素的数目接近，那么算法的时间复杂度接近O(n平方)；&lt;br/&gt;3.基数影响空间复杂度。&lt;/p&gt;
&lt;h2&gt;8.3.java实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest9 {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.分配排序（基数排序）&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.out.println(&quot;基数排序：\t&quot; +&lt;span&gt; Arrays.toString(radixSort(data, getMaxWeishu(data))));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 求得最大位数d&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getMaxWeishu(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] a) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max = a[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; a.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a[i] &amp;gt;&lt;span&gt; max)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 max =&lt;span&gt; a[i];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tmp = 1, d = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             tmp *= 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (max / tmp != 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 d++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; pos=1表示个位，pos=2表示十位&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getNumInPos(&lt;span&gt;int&lt;/span&gt; num, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pos) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tmp = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; pos - 1; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             tmp *= 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (num / tmp) % 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] radixSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; d) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][] array = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[10][data.length + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             array[i][0] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; array[i][0]记录第i行数据的个数&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; pos = 1; pos &amp;lt;= d; pos++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分配过程&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; row =&lt;span&gt; getNumInPos(data[i], pos);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; col = ++array[row][0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 array[row][col] =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; row = 0, i = 0; row &amp;lt; 10; row++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 收集过程&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; col = 1; col &amp;lt;= array[row][0]; col++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                     data[i++] =&lt;span&gt; array[row][col];
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 array[row][0] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 复位，下一个pos时还需使用&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述文字均来自网络的整理，接下来我会慢慢整理，根据个人理解优化文字部分；&lt;br/&gt;以下为上述代码的合集&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;137&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; MySort;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;上述文字均来自网络的整理，接下来我会慢慢整理，根据个人理解优化文字部分；
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;以下为上述代码的合集
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySortTest {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原始数据&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data1 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data2 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data3 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data4 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data5 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data6 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data7 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] data8 = { 1, 3, 6, 2, 4, 8, 9, 5, 12&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:直接插入排序&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         System.out.println(&quot;插入排序：\t&quot; +&lt;span&gt; Arrays.toString(insertSort(data1)));
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:希尔排序&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         System.out.println(&quot;希尔排序：\t&quot; +&lt;span&gt; Arrays.toString(shellSort(data2)));
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:冒泡排序&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         System.out.println(&quot;冒泡排序：\t&quot; +&lt;span&gt; Arrays.toString(bubbleSort(data3)));
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:快速排序&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         System.out.println(&quot;快速排序：\t&quot; + Arrays.toString(quickSort(data4, 0, data4.length - 1&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:直接选择排序&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;         System.out.println(&quot;直接排序：\t&quot; +&lt;span&gt; Arrays.toString(chooseSort(data5)));
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:堆排序&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         System.out.println(&quot;堆排序：\t&quot; +&lt;span&gt; Arrays.toString(heapSort(data6)));
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4.归并排序&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         mergeSort(data7, 0, data7.length - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         System.out.println(&quot;归并排序：\t&quot; +&lt;span&gt; Arrays.toString(data7));
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.分配排序（基数排序）&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         System.out.println(&quot;基数排序：\t&quot; +&lt;span&gt; Arrays.toString(radixSort(data8, getMaxWeishu(data8))));
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 求得最大位数d&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getMaxWeishu(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] a) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max = a[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; a.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (a[i] &amp;gt;&lt;span&gt; max)
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 max =&lt;span&gt; a[i];
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tmp = 1, d = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             tmp *= 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (max / tmp != 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 d++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; d;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; pos=1表示个位，pos=2表示十位&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getNumInPos(&lt;span&gt;int&lt;/span&gt; num, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pos) {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tmp = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; pos - 1; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             tmp *= 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (num / tmp) % 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] radixSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; d) {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][] array = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[10][data.length + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             array[i][0] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; array[i][0]记录第i行数据的个数&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; pos = 1; pos &amp;lt;= d; pos++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分配过程&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; row =&lt;span&gt; getNumInPos(data[i], pos);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; col = ++array[row][0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 array[row][col] =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; row = 0, i = 0; row &amp;lt; 10; row++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 收集过程&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; col = 1; col &amp;lt;= array[row][0]; col++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                     data[i++] =&lt;span&gt; array[row][col];
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 array[row][0] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 复位，下一个pos时还需使用&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mergeSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; mid = (low + high) / 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左边&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;            mergeSort(data, low, mid);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右边&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             mergeSort(data, mid + 1&lt;span&gt;, high);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左右归并&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            merge(data, low, mid, high);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; merge(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; mid, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] temp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[high - low + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = low;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左指针&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; j = mid + 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右指针&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; k = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把较小的数先移到新数组中&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;=&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (data[i] &amp;lt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 temp[k++] = data[i++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                 temp[k++] = data[j++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把左边剩余的数移入数组&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;=&lt;span&gt; mid) {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             temp[k++] = data[i++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把右边边剩余的数移入数组&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (j &amp;lt;=&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             temp[k++] = data[j++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把新数组中的数覆盖nums数组&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k2 = 0; k2 &amp;lt; temp.length; k2++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             data[k2 + low] =&lt;span&gt; temp[k2];
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; 
&lt;span&gt;133&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] heapSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         data = buildMaxHeap(data); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始建堆，array[0]为第一趟值最大的元素&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.length - 1; i &amp;gt; 1; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp = data[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将堆顶元素和堆低元素交换，即得到当前最大元素正确的排序位置&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;             data[0] =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             data[i] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             adjustDownToUp(data, 0, i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整理，将剩余的元素整理成堆&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构建大根堆：将array看成完全二叉树的顺序存储结构&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] buildMaxHeap(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array) {
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从最后一个节点array.length-1的父节点（array.length-1-1）/2开始，直到根节点0，反复调整堆&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = (array.length - 2) / 2; i &amp;gt;= 0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;            adjustDownToUp(array, i, array.length);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; 
&lt;span&gt;153&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将元素array[k]自下往上逐步调整树形结构&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; adjustDownToUp(&lt;span&gt;int&lt;/span&gt;[] array, &lt;span&gt;int&lt;/span&gt; k, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; array[k];
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 2 * k + 1; i &amp;lt; length - 1; i = 2 * i + 1) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; i为初始化为节点k的左孩子，沿节点较大的子节点向下调整&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;lt; length &amp;amp;&amp;amp; array[i] &amp;lt; array[i + 1]) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取节点较大的子节点的下标&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;                 i++; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果节点的右孩子&amp;gt;左孩子，则取右孩子节点的下标&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp &amp;gt;= array[i]) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点 &amp;gt;=左右子女中关键字较大者，调整结束&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根节点 &amp;lt;左右子女中关键字较大者&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;                 array[k] = array[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将左右子结点中较大值array[i]调整到双亲节点上&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;                 k = i; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 【关键】修改k值，以便继续向下调整&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         array[k] = temp; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 被调整的结点的值放人最终位置&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; 
&lt;span&gt;170&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.选择排序:直接选择排序&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] chooseSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环次数&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 逐个比较&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + 1; j &amp;lt; data.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[i] &amp;gt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[i];
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;                     data[i] =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;                     data[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; 
&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; 
&lt;span&gt;186&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; 
&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:快速排序&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] quickSort(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; middle = getMiddle(data, low, high);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取中间值
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对两端的再次进行排序&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;             quickSort(data, low, middle - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             quickSort(data, middle + 1&lt;span&gt;, high);
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; 
&lt;span&gt;196&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; 
&lt;span&gt;200&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 快速排序：获取中间值&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getMiddle(&lt;span&gt;int&lt;/span&gt;[] data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以第一个元素为基准&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[low];
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (low &amp;lt;&lt;span&gt; high) {
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (low &amp;lt; high &amp;amp;&amp;amp; data[high] &amp;gt;&lt;span&gt; temp) {
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;                 high--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;             data[low] =&lt;span&gt; data[high];
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (low &amp;lt; high &amp;amp;&amp;amp; data[low] &amp;lt;&lt;span&gt; temp) {
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;                 low++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;             data[high] =&lt;span&gt; data[low];
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;         data[low] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; low;
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; 
&lt;span&gt;218&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.交换排序:冒泡排序&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] bubbleSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 冒泡次数&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 冒泡&lt;/span&gt;
&lt;span&gt;223&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; data.length - i - 1; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt; data[j + 1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;                     data[j] = data[j + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                     data[j + 1] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; 
&lt;span&gt;234&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:希尔排序&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] shellSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 划分组&lt;/span&gt;
&lt;span&gt;237&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; r = data.length / 2; r &amp;gt;= 1; r /= 2&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对每一组进行插入排序&lt;/span&gt;
&lt;span&gt;239&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = r; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; insertData = data[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插入的数据&lt;/span&gt;
&lt;span&gt;241&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; j = i - r;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 临时序号&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (j &amp;gt;= 0 &amp;amp;&amp;amp; data[j] &amp;lt;&lt;span&gt; insertData) {
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;                     data[j + r] =&lt;span&gt; data[j];
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;                     j -=&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;                 data[j + r] =&lt;span&gt; insertData;
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; 
&lt;span&gt;252&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.插入排序:直接插入排序&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] insertSort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; data.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; insertData = data[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 要插入到数组中的数据&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; j = i - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 临时脚标&lt;/span&gt;
&lt;span&gt;257&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (j &amp;gt;= 0 &amp;amp;&amp;amp; insertData &amp;lt;&lt;span&gt; data[j]) {
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;                 data[j + 1] = data[j];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将原始数据后移&lt;/span&gt;
&lt;span&gt;259&lt;/span&gt;                 j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;             data[j + 1] = insertData; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将如要插入的数据插入到此处&lt;/span&gt;
&lt;span&gt;262&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; 
&lt;span&gt;266&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 09 Feb 2018 06:42:00 +0000</pubDate>
<dc:creator>天生吾材</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dz-boss/p/8435403.html</dc:identifier>
</item>
<item>
<title>11、需求分析师指南 - 软件项目角色指南系列文章 - lzhdim</title>
<link>http://www.cnblogs.com/lzhdim/p/8435337.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzhdim/p/8435337.html</guid>
<description>

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;需求分析师做为项目管理过程中的一个重要角色被项目经理所认知。需求分析师是配合项目经理的实际工作进行的，在项目需求管理中对需求做分析整理，形成需求功能书或者解决方案书，让项目组成员能够更好的理解需求，更好的做项目的下一步设计。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、工作职责&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师要做的工作不多，主要是在项目前期的需求阶段，工作内容相对比较简单，与需求方进行沟通并记录下调研内容，同时将调研内容记录成文档让项目组人员进行阅读，与项目经理沟通，协助项目经理对需求内容进行确认。&lt;/p&gt;
&lt;p&gt;l  与需求方沟通需求；&lt;/p&gt;
&lt;p&gt;l  配合项目经理记录并整理需求；&lt;/p&gt;
&lt;p&gt;l  在项目建设期对需求进行管理；&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、应具备的知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师需要对项目需求进行不断的更新记录补充，在项目管理过程中对需求进行确认，配合项目经理对需求进行整理记录。在工作过程中需要对项目涉及到的业务进行分析、确认和整理补充。需求分析师对于项目的需求进行分析，并且把需求内容进行详细记录。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、日常工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师的工作相对比较简单，主要就是对需求阶段的需求进行分析整理，配合项目经理对需求进行确认，对项目后期试运行期间的需求进行控制，防止相关的需求变更。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、经验提升的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师的工作不复杂，就是对项目的需求进行编写、分析和后期的需求变更进行控制。还有，需求分析师需要具备更多的项目业务知识，配合项目经理进行需求控制和变更管理。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、与其他角色的沟通&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师在项目中是一个贯穿项目全需求过程的角色。除了配合项目经理与客户负责人沟通需求，调研需求以外，其它的时间需求分析师主要对需求进行整理分析，对需求中的内容提出合理的要求。与项目组的其他成员对需求进行理解，更好的让项目组成员做好项目的所有工作内容。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;strong&gt;、应阅读的书籍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求分析师因为工作内容相对比较简单，所以需要了解的项目内容就比较少了，更多的是对项目的业务进行把控，对需求及时的分析和整理需求功能书。&lt;/p&gt;
&lt;p&gt;l  UML需求分析和设计；&lt;/p&gt;
&lt;p&gt;l  面向对象的需求分析方法；&lt;/p&gt;
&lt;p&gt;l  软件需求分析与建模；&lt;/p&gt;
&lt;p&gt;l  需求分析与系统设计；&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;strong&gt;、应铭记的话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l  多配合项目经理与客户负责人进行沟通；&lt;/p&gt;
&lt;p&gt;l  对需求进行分析，并将其中的内容与项目经理沟通整理；&lt;/p&gt;

</description>
<pubDate>Fri, 09 Feb 2018 06:29:00 +0000</pubDate>
<dc:creator>lzhdim</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzhdim/p/8435337.html</dc:identifier>
</item>
<item>
<title>由树到数据库索引 - 大魔王先生</title>
<link>http://www.cnblogs.com/wtzbk/p/8338263.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wtzbk/p/8338263.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、树查找&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt;在之间介绍数据结构的文章中我们介绍过二叉树查找，如果忘记的大家可以查看下这篇文章&lt;a href=&quot;http://www.cnblogs.com/wtzbk/p/7324984.html&quot;&gt;数据结构-树的那些事(四)&lt;/a&gt;，这里对二叉树就不做介绍，我们来说一下二叉排序树；&lt;/p&gt;
&lt;p&gt;     二叉排序树(Binary Search Tree):又被称为二叉查找树或者二叉搜索树，当然首先是二叉树，另外特点如下：&lt;/p&gt;
&lt;p&gt;     1.若它的左子树不为空，则左子树的结点小于它根节点的值；&lt;/p&gt;
&lt;p&gt;     2.若它的右子树不为空，则右子树的结点大于它根节点的值；&lt;/p&gt;
&lt;p&gt;     3.它的左、右子树也分别为二叉排序树；&lt;/p&gt;
&lt;p&gt;     明白特点接下来我们来说一下查找的性能，二叉排序树查找性能取决于二叉树的形状，但是二叉树排序的形状是不确定，最坏的情况查找性能为O(n)，最好情况查找性能为O(log&lt;em&gt;n&lt;/em&gt;)，如下图&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180130190108937-438577243.png&quot; alt=&quot;&quot; width=&quot;555&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     接下来我们谈一下二叉排序树的增加和删除操作，查询就没必要说明，就写下代码实现下就好；&lt;/p&gt;
&lt;p&gt;     增加操作:&lt;/p&gt;
&lt;p&gt;     1.若当前的二叉树排序树为空，则插入元素的根节点；&lt;/p&gt;
&lt;p&gt;     2.若插入的值小于根节点，则插入到左子树当中；&lt;/p&gt;
&lt;p&gt;     3.若插入的值大于根节点，则插入到右子树当中；&lt;/p&gt;
&lt;p&gt;     删除操作：&lt;/p&gt;
&lt;p&gt;     1.若删除的是子节点，则直接删除该结点；&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180130192338546-1325743042.png&quot; alt=&quot;&quot; width=&quot;622&quot; height=&quot;189&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     2.若删除的节点仅有左或者右子树的结点，则让该结点的子树与父亲节点相连，删除该结点即可；&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180130193311015-472102721.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     3.若删除的节点左子树和右子树都有子结点，如下面两幅图，这里面强调一下第二幅图，删除47以后用37或者48都可以满足二叉排序树，这里我们为什么选择47而要放弃37，是因为二叉排序树按照中序遍历以后形成的是一个有序序列(由小到大排序)，选择37以后不满足这个特征；&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180131131857343-649536137.png&quot; alt=&quot;&quot; width=&quot;772&quot; height=&quot;184&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180131133002437-529090345.png&quot; alt=&quot;&quot; width=&quot;530&quot; height=&quot;258&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201801/1005447-20180131133038375-589220709.png&quot; alt=&quot;&quot; width=&quot;255&quot; height=&quot;257&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     上面我们谈到二叉排序树性能问题，接下来我们来说一下平衡二叉树看如何处理二叉树性能问题，所有代码在介绍完成以后提供实现；&lt;/p&gt;
&lt;p&gt;     平衡二叉树(AVL树):首先平衡二叉树是一颗二叉树排序树，他的特点是每一个节点左子树和右子树的高度差至多等于1,这样就能避免照成单枝树，影响查询效率,来个看图识AVL树，下图中图二满足二叉排顺序树的特征，58节点的左子树大于59，图三58的左子树的高度为2，右子树的高度为0，高度差大于1，所以不满足平衡二叉树，接下来我们谈谈平衡二叉树插入和删除照成失衡以后的操作(平衡二叉树的旋转)。&lt;/p&gt;

&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180201084832750-264686371.png&quot; alt=&quot;&quot; width=&quot;749&quot; height=&quot;344&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      失衡以后操作:&lt;/p&gt;
&lt;p&gt;      失衡以后可能造成4种情况:LL(左左)、RR(右右)、LR(左右)、RL(右左)，接下来我们用图说话,看一下这4种情况；&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180201134340109-900685346.png&quot; alt=&quot;&quot; width=&quot;696&quot; height=&quot;518&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        对这4种情况进行统一整理就是：插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致&quot;根的左子树的高度&quot;比&quot;根的右子树的高度&quot;大2，导致AVL树失去了平衡。就用第一种说一下当插入D的时候导致，导致5左子树的高度为3，5的右子树为1，差值大于1，这个时候我们抓住3，使5进行右旋，3的右孩子变成5的左孩子这个时候平衡达成。&lt;/p&gt;
&lt;p&gt;       这里简单讲一下对应结点的抽象，不同于二叉树的情况就是这里要增加一个高度的属性，好用来判断左子树和右子树的差值；&lt;/p&gt;
&lt;p&gt;       B树:首先要明白B树要处理什么问题，我们上面提到过的AVL树、二叉排序树以及我们没有提到过的红黑树，这些都是在内存中内部查找树，而B树是前面平衡树算法的扩展，它支持保存在&lt;strong&gt;磁盘或者网络&lt;/strong&gt;上的符号表进行&lt;strong&gt;外部查找&lt;/strong&gt;，这些文件可能比我们以前考虑的输入要大的多（难以存入内存）。既然内容保存在磁盘中，那么自然会因为树的深度过大而造成磁盘I/O读写过于频繁（磁盘读写速率是有限制的），进而导致查询效率低下。那么降低树的深度自然很重要了。因此，我们引入了B树，多路查找树。&lt;/p&gt;
&lt;p&gt;       明白了B树是干什么用的，我们来个他下个定义，B树是一种平衡的多路查找树，结点最大的孩子数目为B树的阶，一个m阶的B树特征如下：&lt;/p&gt;
&lt;p&gt;       1.每个根节点至少有2个孩子节点；&lt;/p&gt;
&lt;p&gt;       2.每个非根的分支节点都包含k-1个元素和k个孩子，其中 m/2 &amp;lt;= k &amp;lt;= m；&lt;/p&gt;
&lt;p&gt;       3.每一个叶子节点都包含k-1个元素，其中 m/2 &amp;lt;= k &amp;lt;= m；&lt;/p&gt;
&lt;p&gt;       4.所有的叶子节点都位于同一层次；&lt;/p&gt;
&lt;p&gt;       5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划(这个在下面解释下);&lt;/p&gt;
&lt;p&gt;       接下来我们以3阶树为例子来说说上面这些特征是如何体现的，然后在讨论下B树的增加和删除节点情况，&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180202132114187-367645203.png&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       上图是一颗3阶树，首先最大的孩子数目为3，所以是3阶树，我们来看下12，这是2结点，包含1个根节点和2个孩子结点，满足第2，3条，左子树11小于12，右子树13、15大于12，接下来我们看2，6结点，3结点包含2、6两个元素，和3个孩子结点，左子树1小于2、6，右子树8大于2、6，3、5位于左、右子树中间，满足以上条件；&lt;/p&gt;
&lt;p&gt;       增加操作有3种情况：&lt;/p&gt;
&lt;p&gt;       1.对于空树，插入一个2结点即可；&lt;/p&gt;
&lt;p&gt;       2.插入到一个2结点的叶子上。这种情况考虑将其升级为3结点即可，这里进行解释一下，当插入3的时候，通过遍历会发现3比4小，只能插入到4的左子树，4有个子结点，这个时候只能将其升级为3结点，3比1大，插入到1的后继，这个时候形成右图样子。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205081649935-474961291.png&quot; alt=&quot;&quot; width=&quot;721&quot; height=&quot;153&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      3.插入3结点的情况相对比较麻烦，3结点是3阶树最大的容量，当向3结点插入的时候就要考虑拆分的情况，我们来看一下这几种情况。&lt;/p&gt;
&lt;p&gt;      第一种情况：向2结点满元素的子节点插入时候，左图满足这种情况，当向4的右孩子结点6，7插入5的时候，6、7已经是3结点的，不能在增加，这个时候发现4结点是2结点，就需要将其升级为3结点，于是讲6、7拆分，6与4组成3结点，5成为中间孩子，7成为右孩子，如右图。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205082453388-245023101.png&quot; alt=&quot;&quot; width=&quot;729&quot; height=&quot;148&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      第二种情况：当向3结点的满元素的子节点插入时候，左图满足这种情况，当向12、14的左孩子9、10插入11的时候，发现9、10已经满足3结点，不能在增加，但是父亲节点也是3结点，这个时候在向上查找，发现12、14的父亲结点8，还可以进行插入，这个时候讲8升级为3结点，将8与12合并，最终生成右图样子。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205083555216-1507599315.png&quot; alt=&quot;&quot; width=&quot;765&quot; height=&quot;155&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     再来看一种比较特殊的情况：当向4、6左孩子结点1、3插入元素的时候，发现都是3结点无法在进行拆分，这个是将1、3结点、4、6结点、8、12结点都进行拆分，形成右图样子；&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205084902029-1037143741.png&quot; alt=&quot;&quot; width=&quot;761&quot; height=&quot;157&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      删除操作:&lt;/p&gt;
&lt;p&gt;      1.删除位于3结点的叶子结点，删除改元素即可，不会影响到别的结构，如下图：&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205153757404-322441949.png&quot; alt=&quot;&quot; width=&quot;755&quot; height=&quot;168&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     2.删除元素位于一个2结点上，这里的情况比较复杂，我们分情况介绍：&lt;/p&gt;
&lt;p&gt;     第一种情况：该结点的双亲都是2结点，且拥有一个3结点的孩子，如下图，删除结点1，这种情况只需要左旋，6成为父亲节点，4成为6的左孩子，7成为6的右孩子。&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205154343248-1187791279.png&quot; alt=&quot;&quot; width=&quot;775&quot; height=&quot;169&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     第二种情况：该节点的双亲是2结点，右孩子也是2结点，如下图，删除4，左旋导致没有右孩子，不满足B树定义的第一条，所以这个时候需要对树的结构进行调整，首先将7进行左旋，将8进行左旋，9也进行左旋，形成图三所示的样子。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180205154949779-1874485644.png&quot; alt=&quot;&quot; width=&quot;864&quot; height=&quot;167&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      第三种情况：该结点双亲是一个3结点，如下图所示，删除10结点，12、14不能成为3结点，于是将此结点拆分，并将12、13合并成左孩子。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180206081624638-1741771848.png&quot; alt=&quot;&quot; width=&quot;609&quot; height=&quot;195&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      第四种情况：满二叉树的情况，删除任何一个叶子都会使整棵树不能满足第一条的定义，如下图所示，当删除8的时候，需要考虑将整棵树的层数减少，这个时候将6、7合并为9的左孩子，这个时候不满足第4条定义，需要将9、14合并为，最终形成右图所示。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180206082222560-299062583.png&quot; alt=&quot;&quot; width=&quot;636&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        3.删除的元素元素如果不是叶子结点，则考虑按照中序遍历后得到的该元素的前驱或者后继来进行替换该结点。这里我们就不上图来说明了。&lt;/p&gt;
&lt;p&gt;        接下来我们做一些思考，由二叉树查找、二叉树排序树、平衡二叉树、B树我们能得出一个结论，树的高度越小查找的速度越快，当元素的数目一定的时候，怎么样才能使树的高度降低，当然是扩展树的阶数才能降低树的高度，之前很火的什么４Y个URL中查询某个URL等之类的题，我想看到这里的时候大家会有一些想法了吧，等等以后我会对类问题进行一次总结，这次先不谈了。&lt;/p&gt;
&lt;p&gt;        再来做一个思考，对于n个关键字的m阶树，最坏需要需要几次查找？&lt;/p&gt;
&lt;p&gt;        1.因为根至少有两个孩子，因此第2层至少有两个结点。&lt;/p&gt;
&lt;p&gt;        2.除去跟结点和叶子外，每个分支的结点至少都有m/2个孩子；&lt;/p&gt;
&lt;p&gt;        3.第三层结点的个数2*m/2个节点；&lt;/p&gt;
&lt;p&gt;        4.第四层结点的个数2*(m/2)^2个结点；&lt;/p&gt;
&lt;p&gt;        5.第K+1层结点的个数2*(m/2)^k-1个结点，这里K+1层就是叶子结点；&lt;/p&gt;
&lt;p&gt;        6.B树有n个关键字，当你找到叶子节点，就等于查找不成功的结点为n+1,因此n+1&amp;gt;=2*(m/2)^k-1,即k&amp;lt;=log(m/2)((n+1)/2)+1；&lt;/p&gt;
&lt;p&gt;        7.结论根结点到关键字结点涉及的结点个数不操过k&amp;lt;=log(m/2)((n+1)/2)+1；&lt;/p&gt;
&lt;p&gt;        总结如下，一颗n个关键字结点的m阶树最大高度为k&amp;lt;=log(m/2)((n+1)/2)+1，B树的每个非根的分支节点m个孩子，其中 m/2 &amp;lt;= m&amp;lt;= m,随着m的增加，B树的高度下降，查找性能提升；&lt;/p&gt;
&lt;p&gt;        B+树：&lt;/p&gt;
&lt;p&gt;        接下来我们继续探讨一个问题，看下图，当我们对B树进行中序遍历的时候，假设每一个结点都在硬盘不同的页面上，这个时候必然会经过页2---页1--页3--页4--页1---页4---页1---页5，这样会导致每次那一个元素都要对结点的元素进行遍历，我们有没有什么办法让元素只被访问一次，带着这个问题我们来看下B+树。&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180206184251982-1150844344.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         接下来我们还是老套路看图说话，下图是一颗B+树，其有如下特点：出现在分支结点中的元素会被当作分支结点位置的中序后继结点再次列出，另外每个叶子结点都会保存一个执行后一个叶子结点的指针。&lt;/p&gt;
&lt;p&gt;         &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208151930607-1917623410.png&quot; alt=&quot;&quot; width=&quot;690&quot; height=&quot;195&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        一颗m阶树的B+树和m阶的B树差异如下：&lt;/p&gt;
&lt;p&gt;        1.n颗子树的结点包含n个关键字；&lt;/p&gt;
&lt;p&gt;        2.所有的叶子结点包含全部关键字的信息，以及指向这些关键字记录的指针，叶子结点本身按照从小到大的顺序进行排列；&lt;/p&gt;
&lt;p&gt;        3.所有分支结点都可以看成索引，结点中含有子树的最大(或最小)关键字。&lt;/p&gt;
&lt;p&gt;        如果上面的B+树看的还不是很直观，那么我们再来看一颗更直观一点的；这里我们就不谈什么页分裂问题，这个问题待索引的时候再来探讨，我们来说下B+树和B树在查找方面的比较，首先2者与二叉树比较，提升了磁盘I/O效率，但是B树没有解决遍历元素时效率低的问题，如同上面提出的那个问题，这里我们可以通过B+树来解决，B+树只需要通过叶子节点遍历就可以实现对整棵树的遍历。B+更大的优势在于范围查找，这一点是B树无法比较的，进行范围查找是只需要在叶子结点上遍历即可。B+树的插入和删除都与B树类似，但是插入和删除都是在叶子结点上进行。&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180206191445560-1672961561.png&quot; alt=&quot;&quot; width=&quot;478&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        上面介绍树的几种不同的数据结构，主要是为了引出B+树，明白这种结构的好处才能为我们后面数据库索引打下基础，另外这里没有介绍红黑树，这个等HashMap源码解读的时候再来看，Java代码实现主要提供平衡二叉树的实现，B树的实现还是给大家提供一个参考https://github.com/int32bit/algorithms/blob/master/B-Tree/src/BTree.java；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、Java代码实现&lt;/strong&gt;  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;&lt;img id=&quot;code_img_closed_9fb5f225-b738-402c-a246-ad032ea57ca4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9fb5f225-b738-402c-a246-ad032ea57ca4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9fb5f225-b738-402c-a246-ad032ea57ca4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;103&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AVLNode&amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; T key;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关键字&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; height;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;高度&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; lchild;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左孩子&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; rchilid;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右孩子&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt;  AVLNode(T key){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(key,&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; AVLNode(T key,AVLNode&amp;lt;T&amp;gt; lchild,AVLNode&amp;lt;T&amp;gt;&lt;span&gt; rchilid){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key=&lt;span&gt;key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lchild=&lt;span&gt;lchild;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rchilid=&lt;span&gt;rchilid;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.height=0&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AVLTree&amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt;&lt;span&gt; root;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; AVLNode&amp;lt;T&amp;gt;&lt;span&gt; getRoot() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;  AVLTree(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.root=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AVLTree(T key){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.root=&lt;span&gt;new&lt;/span&gt; AVLNode&amp;lt;T&amp;gt;&lt;span&gt;(key);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取树的高度&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; height(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node.height;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  0&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; height(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  height(root);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较两个值的大小&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; max(&lt;span&gt;int&lt;/span&gt; a,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a&amp;gt;b?&lt;span&gt;a:b;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归前序遍历&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; preOrder(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            System.out.print(node.key&lt;/span&gt;+&quot; &quot;&lt;span&gt;);
            preOrder(node.lchild);
            preOrder(node.rchilid);
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; preOrder(){
        preOrder(root);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;中序遍历&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; midOrder(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            midOrder(node.lchild);
            System.out.print(node.key&lt;/span&gt;+&quot; &quot;&lt;span&gt;);
            midOrder(node.rchilid);
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; midOrder(){
        midOrder(root);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后序遍历&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; postOrder(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            postOrder(node.lchild);
            postOrder(node.rchilid);
            System.out.print(node.key&lt;/span&gt;+&quot; &quot;&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; postOrder(){
        postOrder(root);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归查找key元素&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; search(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node,T key){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; compare=&lt;span&gt;key.compareTo(node.key);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (compare&amp;lt;0&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; search(node.lchild,key);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (compare&amp;gt;0&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  search(node.rchilid,key);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; AVLNode&amp;lt;T&amp;gt;&lt;span&gt; search(T key){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; search(root,key);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LL旋转&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; llRotation(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        AVLNode&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span&gt; newNode;
        newNode&lt;/span&gt;=&lt;span&gt;node.lchild;
        node.lchild&lt;/span&gt;=&lt;span&gt;newNode.rchilid;
        newNode.rchilid&lt;/span&gt;=&lt;span&gt;node;
        node.height&lt;/span&gt;=max(height(node.lchild),height(node.rchilid))+1&lt;span&gt;;
        newNode.height&lt;/span&gt;=max(height(node.lchild),node.height)+1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  newNode;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;RR旋转&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; rrRotation(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        AVLNode&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span&gt; newNode;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根结点右旋&lt;/span&gt;
        newNode=&lt;span&gt;node.rchilid;
        node.rchilid&lt;/span&gt;=&lt;span&gt;newNode.lchild;
        newNode.lchild&lt;/span&gt;=&lt;span&gt;node;
        node.height&lt;/span&gt;=max(height(node.lchild),height(node.rchilid))+1&lt;span&gt;;
        newNode.height&lt;/span&gt;=max(height(newNode.rchilid),node.height)+1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  newNode;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LR旋转&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; lrRotation(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        node.lchild&lt;/span&gt;=&lt;span&gt;rrRotation(node.lchild);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; llRotation(node);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;RL旋转&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; rlRotation(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        node.rchilid&lt;/span&gt;=&lt;span&gt;llRotation(node.rchilid);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rrRotation(node);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入结点&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; insert(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node,T key){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            node&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; AVLNode&amp;lt;T&amp;gt;&lt;span&gt;(key);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; cmp=key.compareTo(node.key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较节点的值&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (cmp&amp;lt;0){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小于插入左子树&lt;/span&gt;
                node.lchild=&lt;span&gt;insert(node.lchild,key);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否失衡
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向左侧插入结点只能照成ll或者lr情况&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (height(node.lchild)-height(node.rchilid)==2&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入的结点和当前结点的左子树比较
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大于说明是LR情况否者LL&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (key.compareTo(node.lchild.key)&amp;gt;0&lt;span&gt;)
                        node&lt;/span&gt;=&lt;span&gt;lrRotation(node);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        node&lt;/span&gt;=&lt;span&gt;llRotation(node);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (cmp&amp;gt;0&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上下面不做介绍&lt;/span&gt;
                node.rchilid=&lt;span&gt;insert(node.rchilid,key);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (height(node.rchilid)-height(node.lchild)==2&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key.compareTo(node.rchilid.key)&amp;gt;0&lt;span&gt;)
                        node&lt;/span&gt;=&lt;span&gt;rrRotation(node);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        node&lt;/span&gt;=&lt;span&gt;rlRotation(node);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                System.out.println(&lt;/span&gt;&quot;添加失败：不允许添加相同的节点！&quot;&lt;span&gt;);
            }

        }
        node.height&lt;/span&gt;=max(height(node.lchild),height(node.rchilid))+1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(T key){
        root&lt;/span&gt;=&lt;span&gt;insert(root,key);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找最大值&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; findMax(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node.rchilid!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            node&lt;/span&gt;=&lt;span&gt;node.rchilid;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T finMax(){
        AVLNode&lt;/span&gt;&amp;lt;T&amp;gt; p=&lt;span&gt;findMax(root);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (p!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  p.key;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找最小值&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; finMin(AVLNode&amp;lt;T&amp;gt;&lt;span&gt; node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node.lchild!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            node&lt;/span&gt;=&lt;span&gt;node.lchild;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T finMin(){
        AVLNode&lt;/span&gt;&amp;lt;T&amp;gt; p=&lt;span&gt;finMin(root);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (p!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  p.key;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除结点&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AVLNode&amp;lt;T&amp;gt; remove(AVLNode&amp;lt;T&amp;gt; node,AVLNode&amp;lt;T&amp;gt;&lt;span&gt; del){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node==&lt;span&gt;null&lt;/span&gt;||del==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除的结点和当前结点比较&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; cmp=&lt;span&gt;del.key.compareTo(node.key);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmp&amp;lt;0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归向左查找结点&lt;/span&gt;
            node.lchild=&lt;span&gt;remove(node.lchild,del);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在左子树中删除后该节点失衡，若失衡，则可以肯定的是该节点的右子树比左子树高&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (height(node.rchilid)-height(node.lchild)==2&lt;span&gt;){
                AVLNode&lt;/span&gt;&amp;lt;T&amp;gt; rTree=node.rchilid;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右子树失衡2种情况 右右和右左&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (height(rTree.lchild)&amp;gt;&lt;span&gt;height(rTree.rchilid))
                    node&lt;/span&gt;=&lt;span&gt;rlRotation(node);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    node&lt;/span&gt;=&lt;span&gt;rrRotation(node);
            }
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (cmp&amp;gt;0&lt;span&gt;){
            node.rchilid&lt;/span&gt;=remove(node.rchilid,del);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上相反左边失衡&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (height(node.lchild)-height(node.rchilid)==2&lt;span&gt;){
                AVLNode&lt;/span&gt;&amp;lt;T&amp;gt; lTree=&lt;span&gt;node.lchild;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (height(lTree.rchilid)&amp;gt;&lt;span&gt;height(lTree.lchild))
                    node&lt;/span&gt;=&lt;span&gt;lrRotation(node);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    node&lt;/span&gt;=&lt;span&gt;llRotation(node);
            }
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到了要删除的节点，该节点左右子树都不为空&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; ((node.lchild!=&lt;span&gt;null&lt;/span&gt;)&amp;amp;&amp;amp;(node.rchilid!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断左右孩子的高度&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (height(node.lchild)&amp;gt;&lt;span&gt;height(node.rchilid)){
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果左子树高度大于右子树
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;则找到左子树最大的结点替换当前结点
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这样操作会避免失衡&lt;/span&gt;
                    AVLNode&amp;lt;T&amp;gt; maxNode=&lt;span&gt;findMax(node.lchild);
                    node.key&lt;/span&gt;=&lt;span&gt;maxNode.key;
                    node.lchild&lt;/span&gt;=&lt;span&gt;remove(node.lchild,maxNode);
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
                    AVLNode&amp;lt;T&amp;gt; minNode=&lt;span&gt;finMin(node.rchilid);
                    node.key&lt;/span&gt;=&lt;span&gt;minNode.key;
                    node.rchilid&lt;/span&gt;=&lt;span&gt;remove(node.rchilid,minNode);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;单一结点则删除&lt;/span&gt;
                node=(node.lchild!=&lt;span&gt;null&lt;/span&gt;)?&lt;span&gt;node.lchild:node.rchilid;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove(T key){
        AVLNode&lt;/span&gt;&amp;lt;T&amp;gt; removeNode=&lt;span&gt;search(key);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (removeNode!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            root&lt;/span&gt;=&lt;span&gt;remove(root,removeNode);
    }

}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AVLTest {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; arr[]= {1,2,3,4,5,6,7,8,9,10,12,11,13,14,15&lt;span&gt;
    };
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        AVLTree&lt;/span&gt;&amp;lt;Integer&amp;gt; tree = &lt;span&gt;new&lt;/span&gt; AVLTree&amp;lt;Integer&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length;i++&lt;span&gt;){
            System.out.printf(&lt;/span&gt;&quot;%d &quot;&lt;span&gt;, arr[i]);
            tree.insert(arr[i]);
        }
        System.out.printf(&lt;/span&gt;&quot;\n前序遍历: &quot;&lt;span&gt;);
        tree.preOrder();
        System.out.printf(&lt;/span&gt;&quot;\n中序遍历: &quot;&lt;span&gt;);
        tree.midOrder();
        System.out.printf(&lt;/span&gt;&quot;\n后序遍历: &quot;&lt;span&gt;);
        tree.postOrder();
        System.out.printf(&lt;/span&gt;&quot;\n&quot;&lt;span&gt;);
        System.out.printf(&lt;/span&gt;&quot;高度: %d\n&quot;&lt;span&gt;, tree.height());
        System.out.printf(&lt;/span&gt;&quot;最小值: %d\n&quot;&lt;span&gt;, tree.finMin());
        System.out.printf(&lt;/span&gt;&quot;最大值: %d\n&quot;&lt;span&gt;, tree.finMax());
        tree.remove(&lt;/span&gt;7&lt;span&gt;);
        System.out.printf(&lt;/span&gt;&quot;\n高度: %d&quot;&lt;span&gt;, tree.height());
        System.out.printf(&lt;/span&gt;&quot;\n中序遍历: &quot;&lt;span&gt;);
        tree.midOrder();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三、数据库索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;已经探讨B+树的好处，接下来我们来看一下B+插入和删除操作；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;插入操作：&lt;/p&gt;
&lt;p&gt;       B+树插入必须保证插入后的叶子结点记录依然排序，另外还需要考虑插入到B+树的三种情况，接下来我们来谈一下这3种情况：&lt;/p&gt;
&lt;p&gt;       1.当Leaf Page和Index Page都未满的时候，直接将记录插入到叶子节点即可（Leaf Page和Index Page分别指的是叶子结点和父亲结点）;&lt;/p&gt;
&lt;p&gt;       当插入28这个值的时候，Leaf Page和Index Page都未满，直接插入到叶子节点&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208145720216-935128974.png&quot; alt=&quot;&quot; width=&quot;722&quot; height=&quot;196&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       2.当Leaf Page满，Index Page未满时候，首先拆分Leaf Page,将中间结点放入到Inde Page中，然后小于中间节点的放左边，大于或者等于中间结点的放右边；&lt;/p&gt;
&lt;p&gt;       再次插入70这个值的时候，Leaf Page已经满，但是Index Page还没满，在根节点插入叶子节点中间结点，然后在进行页分裂；&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208150250326-1417769107.png&quot; alt=&quot;&quot; width=&quot;672&quot; height=&quot;248&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       3.当Leaf Page和Index Page都满的时候，首先拆分Leaf Page，小于中间结点的记录放左边，大于或者等于中间结点的记录放右边，接下来拆分Index Page,相当于提升整颗树的高度，小于中间结点的放入到左边，大于或者等于中间结点的放入到右边，最后讲中间节点放入到上一层Index Page；&lt;/p&gt;
&lt;p&gt;       接下来插入95，这个时候Leaf Page和Index Page都满值，没办法插入，这个时候就需要进行2次拆分，首先拆分叶子结点，最后在拆分根结点。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208151632591-1223540005.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       以上图2和3都没有添加双向链表，主要是为让大家看明白分裂的情况。&lt;/p&gt;
&lt;p&gt;       删除操作:&lt;/p&gt;
&lt;p&gt;       B+树使用填充因子来控制树的删除删除变化，50%是填充因子可设置的最小的值，小于这个值这个时候就需要做合并操作，删除操作同时也必须保证删除后的结点依然排序。&lt;/p&gt;
&lt;p&gt;       1.Leaf Page和Index Page都大于填充因子，如果删除的是叶子节点直接删除就好，如果删除的是Index Page的元素，使用该结点的右结点代替；&lt;/p&gt;
&lt;p&gt;       如上图删除70这个节点，直接删除就可以了&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208154245701-326736949.png&quot; alt=&quot;&quot; width=&quot;711&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       2.Leaf Page小于填充因子，Index Page大于填充因子，这个时候合并叶子节点和他的兄弟节点，更新Index Page；&lt;/p&gt;
&lt;p&gt;       接下来删除25，在这个时候满足第一种情况，但是这个值又在Index Page中，删除25以后，还需要将右兄弟替换到Page Index中。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208154723341-1456668221.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       3.Leaf Page和Index Page都小于填充因子，这个时候需要叶子节点做合并，当删除掉Index Page结点以后Index Page也需要做合并。&lt;/p&gt;
&lt;p&gt;       接下来我们删除60，这个时候删除60以后Leaf Page不满足填充因子，进行合并，同时删除Index Page的值也需要做合并。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208155136185-1327560426.png&quot; alt=&quot;&quot; width=&quot;652&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       B+树索引的本质就是B+树在数据库中的实现，B+树在数据库中的高度一般为2-4层，这个怎么实现的我们先不要去管，但是我们要知道这样做就会导致我们查询速度很快，高度为2-4层意味着我们查找一个数据所需要做的IO操作为2-4次，磁盘每秒可以做100次的IO操作，这就意味着我们能在0.02-0.04秒查找出数据。是不是很快。数据库中分为聚集索引和非聚集索引，这两者的差别在于叶子节点是否存在一整行数据。&lt;/p&gt;
&lt;p&gt;       聚集索引：&lt;/p&gt;
&lt;p&gt;       这里思考一个问题，我们在建表的时候会建立一个主键，这是为什么？其实这个主键就是我们的聚集索引，要是不建立主键，那么我们存储的数据就会在无序的存在磁盘中，当然查询会慢，但是建立主键以后，数据库中的数据会按照B+树的特点进行构建，整个表变成一个索引，叶子节点存放的是表中的整行数据，这就是我们所说的聚集索引，非叶子节点的索引存放的是键值以及数据页的偏移量。聚集索引的好处在于，对于主键查找的和排序非常快，因为叶子节点存放的就是我们的数据，另外每个叶子节点之间的连接都是双向链表，不需要再一次进行查找。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208164318732-1851835552.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       非聚集索引：&lt;/p&gt;
&lt;p&gt;       非聚集索引的叶子节点并不包含所有行的数据，叶子节点除了包含键值以外，每个叶子节点的索引包含一个书签，用来保存相对应的行数据的聚集索引的键。所以当通过非聚集索引查询数据的时候，首先会遍历非聚集索引并通过叶子节点的指针获得指向聚集索引的键，然后通过聚集索引查找与之匹配的叶子节点。每次给表中增加一个非聚集索引，表中的字段就会被复制出来一份，生成索引，所以给表添加索引就会增加表空间，减慢插入时候的速度。&lt;/p&gt;
&lt;p&gt;       联合索引：&lt;/p&gt;
&lt;p&gt;       联合索引就是在表上的多个列建立索引，联合索引本质上还是一棵B+树，不同的是联合索引的键值数量不是1，而是大于等于2。为什么需要联合索引的存在？&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1005447/201802/1005447-20180208194333373-1483225885.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;173&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       1.假设(a,b)列建立索引，对于查询条件而言，当查询的条件为a和b,则可以使用，条件单独为a的时候也可以使用，但是为b的情况不可以使用；&lt;/p&gt;
&lt;p&gt;       2.对于(a,b)列建立的索引，第二个列是排序的，这样当我们按照b条件排序的时候就不需要进行排序操作；&lt;/p&gt;
&lt;p&gt;       明白了索引的原理我想大家以后在优化查询的时候也有清晰的思路了吧，以上是B-Tree索引介绍，另外Hash索引我们以后再聊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、结束语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt;  主要参考《大话数据结构》和《MySQL技术内幕：InnoDB存储引擎》&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt;  提前祝福大家新年快乐！今天是我的最后工作日了~可以回家看望父母了！另外有什么不懂可以进群咨询438836709~&lt;/p&gt;
</description>
<pubDate>Fri, 09 Feb 2018 06:00:00 +0000</pubDate>
<dc:creator>大魔王先生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wtzbk/p/8338263.html</dc:identifier>
</item>
<item>
<title>CSS3动画详解（超详细） - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8435182.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8435182.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8435182.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文主要内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;过渡：transition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2D 转换 transform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D 转换 transform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动画：animation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;过渡transition&quot;&gt;过渡：transition&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;的中文含义是&lt;strong&gt;过渡&lt;/strong&gt;。过渡是CSS3中具有颠覆性的一个特征，可以实现元素&lt;strong&gt;不同状态间的平滑过渡&lt;/strong&gt;（补间动画），经常用来制作动画效果。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://mux.alimama.com/posts/1009&quot;&gt;补间动画基础&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;transition 包括以下属性：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;transition-property: all;&lt;/code&gt; 如果希望所有的属性都发生过渡，就使用all。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;transition-duration: 1s;&lt;/code&gt; 过渡的持续时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition-timing-function: linear;&lt;/code&gt; 运动曲线。属性值可以是：
&lt;ul&gt;&lt;li&gt;&lt;code&gt;linear&lt;/code&gt; 线性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease&lt;/code&gt; 减速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in&lt;/code&gt; 加速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-out&lt;/code&gt; 减速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in-out&lt;/code&gt; 先加速后减速&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;transition-delay: 1s;&lt;/code&gt; 过渡延迟。多长时间后再执行这个过渡动画。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的四个属性也可以写成&lt;strong&gt;综合属性&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transition&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transition&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; all 3s linear 0s&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，&lt;code&gt;transition-property&lt;/code&gt;这个属性是尤其需要注意的，不同的属性值有不同的现象。我们来示范一下。&lt;/p&gt;
&lt;p&gt;如果设置 &lt;code&gt;transition-property: width&lt;/code&gt;，意思是只让盒子的宽度在变化时进行过渡。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1440.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果设置 &lt;code&gt;transition-property: all&lt;/code&gt;，意思是让盒子的所有属性（包括宽度、背景色等）在变化时都进行过渡。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1445.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;案例小米商品详情&quot;&gt;案例：小米商品详情&lt;/h3&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS 过渡&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#eeeeee&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;320px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;80px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;230px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#FFF&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 让溢出的内容隐藏起来。意思是让下方的橙色方形先躲起来 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;.5s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 从最初到鼠标悬停时的过渡 */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.item&lt;/span&gt; img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.desc&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-80px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ff6700&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;.5s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 鼠标悬停时，让 item 整体往上移动5px，且加一点阴影 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-5px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;box-shadow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#AAA&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 鼠标悬停时，让下方的橙色方形现身 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.desc&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./images/1.png&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./images/2.png&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./images/3.jpg&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1500.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;动画效果录制的比较差，但真实体验还是可以的。&lt;/p&gt;
&lt;p&gt;工程文件：&lt;/p&gt;
&lt;h2 id=&quot;d-转换&quot;&gt;2D 转换&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;转换&lt;/strong&gt;是 CSS3 中具有颠覆性的一个特征，可以实现元素的&lt;strong&gt;位移、旋转、变形、缩放&lt;/strong&gt;，甚至支持矩阵方式。&lt;/p&gt;
&lt;p&gt;转换再配合过渡和动画，可以取代大量早期只能靠 Flash 才可以实现的效果。&lt;/p&gt;
&lt;p&gt;在 CSS3 当中，通过 &lt;code&gt;transform&lt;/code&gt; 转换来实现 2D 转换或者 3D 转换。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;2D转换包括：缩放、移动、旋转。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们依次来讲解。&lt;/p&gt;
&lt;h3 id=&quot;缩放scale&quot;&gt;1、缩放：&lt;code&gt;scale&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释： x：表示水平方向的缩放倍数。y：表示垂直方向的缩放倍数。如果只写一个值就是等比例缩放。&lt;/p&gt;
&lt;p&gt;取值：大于1表示放大，小于1表示缩小。不能为百分比。&lt;/p&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1000px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;/&lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt; “宋体”&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*width: 500px;*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*height: 400px;*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; yellowgreen&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* transform:  css3中用于做变换的属性&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                scale(x,y)：缩放 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; scale(&lt;span class=&quot;dt&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1551.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图可以看到，给 box1 设置 2D 转换，并不会把兄弟元素挤走。&lt;/p&gt;
&lt;h3 id=&quot;位移translate&quot;&gt;2、位移：translate&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(水平位移&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 垂直位移)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;参数为百分比，相对于自身移动。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;正值：向右和向下。 负值：向左和向上。如果只写一个值，则表示水平移动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1000px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &amp;gt; div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* translate:(水平位移，垂直位移)*/&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2)&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translate(&lt;span class=&quot;dt&quot;&gt;-50%&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;-50%&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1600.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，因为我在操作的时候，鼠标悬停后，立即进行了略微的移动，所以产生了两次动画。正确的效果应该是下面这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1605.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用：&lt;/strong&gt;让绝对定位中的盒子在父亲里居中&lt;/p&gt;
&lt;p&gt;我们知道，如果想让一个&lt;strong&gt;标准流中的盒子在父亲里居中&lt;/strong&gt;（水平方向看），可以将其设置&lt;code&gt;margin: 0 auto&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;可如果盒子是绝对定位的，此时已经脱标了，如果还想让其居中（位于父亲的正中间），可以这样做：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    div {
        width: 600px;
        height: 60px;
        position: absolute;  绝对定位的盒子
        left: 50%;           首先，让左边线居中
        top: 0;
        margin-left: -300px;  然后，向左移动宽度（600px）的一半
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上方代码所示，我们先让这个宽度为600px的盒子，左边线居中，然后向左移动宽度（600px）的一半，就达到效果了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180116_1356.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，我们还可以利用偏移 translate 来做，这也是比较推荐的写法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    div &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 600px&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 60px&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       绝对定位的盒子
        &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%;&lt;/span&gt;               首先，让左边线居中
        &lt;span class=&quot;dt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    然后，利用translate，往左走自己宽度的一半【推荐写法】
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;旋转rotate&quot;&gt;3、旋转：rotate&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rotate&lt;/span&gt;(角度)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rotate&lt;/span&gt;(45deg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释：正值 顺时针；负值：逆时针。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;2s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 过渡：让盒子在进行 transform 转换的时候，有个过渡期 */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* rotate（角度）旋转 */&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-405deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 鼠标悬停时，让盒子进行旋转 */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1630.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意，上方代码中，我们给盒子设置了 transform 中的 rotate 旋转，但同时还要给盒子设置 transition 过渡。如果没有这行过渡的代码，旋转会直接一步到位，效果如下：（不是我们期望的效果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1635.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例1：&lt;/strong&gt;小火箭&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        html,body&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        body&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#DE8910&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.rocket&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;600px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;120px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt;translate(&lt;span class=&quot;dt&quot;&gt;-200px&lt;/span&gt; ,&lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;) rotate(&lt;span class=&quot;dt&quot;&gt;45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt;all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt; ease-in&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        body&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.rocket&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt;translate(&lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;-500px&lt;/span&gt;) rotate(&lt;span class=&quot;dt&quot;&gt;45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;  class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;rocket&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/rocket.png&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，我们将 transform 的两个小属性合并起来写了。&lt;/p&gt;
&lt;p&gt;小火箭图片的url：&lt;a href=&quot;http://img.smyhvae.com/20180208-rocket.png&quot; class=&quot;uri&quot;&gt;http://img.smyhvae.com/20180208-rocket.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例2：&lt;/strong&gt;扑克牌&lt;/p&gt;
&lt;p&gt;rotate 旋转时，默认是以盒子的正中心为坐标原点的。如果想&lt;strong&gt;改变旋转的坐标原点&lt;/strong&gt;，可以用&lt;code&gt;transform-origin&lt;/code&gt;属性。格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 水平坐标 垂直坐标&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 50px 50px&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; center bottom&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//旋转时，以盒子底部的中心为坐标原点&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来看一下 rotate 结合 transform-origin 的用法举例。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*background-color: #eee;*/&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;440px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1.5s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;/* 既然扑克牌是叠在一起的，那就都用绝对定位 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;transform-origin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*旋转时，以盒子底部的中心为坐标原点*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;box-shadow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#666&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(6) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-10deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(5) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-20deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(4) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-30deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-40deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-50deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-60deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(8) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;10deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(9) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;20deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(10) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;30deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(11) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;40deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(12) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;50deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(13) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;60deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk2.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/pk1.png&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1650.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;倾斜&quot;&gt;4、倾斜&lt;/h3&gt;
&lt;p&gt;暂略。&lt;/p&gt;
&lt;h2 id=&quot;d-转换-1&quot;&gt;3D 转换&lt;/h2&gt;
&lt;h3 id=&quot;旋转rotatexrotateyrotatez&quot;&gt;1、旋转：rotateX、rotateY、rotateZ&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3D坐标系（左手坐标系）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2010.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。拇指、食指和中指分别代表X、Y、Z轴的正方向，这样我们就建立了一个左手坐标系。&lt;/p&gt;
&lt;p&gt;浏览器的这个平面，是X轴、Y轴；垂直于浏览器的平面，是Z轴。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;旋转的方向：（左手法则）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;左手握住旋转轴，竖起拇指指向旋转轴的&lt;strong&gt;正方向&lt;/strong&gt;，正向就是&lt;strong&gt;其余手指卷曲的方向&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从上面这句话，我们也能看出：所有的3d旋转，对着正方向去看，都是顺时针旋转。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rotateX&lt;/span&gt;(360deg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//绕 X 轴旋转360度&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rotateY&lt;/span&gt;(360deg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//绕 Y 轴旋转360度&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rotateZ&lt;/span&gt;(360deg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//绕 Z 轴旋转360度&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;格式举例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）rotateX 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.rotateX&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;226px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 透视 :加给变换的父盒子*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 设置的是用户的眼睛距离 平面的距离*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 透视效果只是视觉上的呈现，并不是正真的3d*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;perspective:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;110px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 过渡*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; transform &lt;span class=&quot;dt&quot;&gt;2s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 所有的3d旋转，对着正方向去看，都是顺时针旋转*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.rotateX&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateX(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;rotateX&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/x.jpg&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2025.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上方代码中，我们最好加个透视的属性，方能看到3D的效果；没有这个属性的话，图片旋转的时候，像是压瘪了一样。&lt;/p&gt;
&lt;p&gt;而且，透视的是要加给图片的父元素 div，方能生效。我们在后面会讲解透视属性。&lt;/p&gt;
&lt;p&gt;（2）rotateY 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.rotateY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;237px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 透视 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;perspective:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;2s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;/* 过渡 */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.rotateY&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;rotateY&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/y.jpg&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2030.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）rotateZ 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.rotateZ&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;330px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;227px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 透视*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;perspective:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.rotateZ&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; img &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateZ(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;rotateZ&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/z.jpg&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2035.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例：&lt;/strong&gt;百度钱包&lt;/p&gt;
&lt;p&gt;现在有下面这张图片素材：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2055.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;要求做成下面这种效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2100.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面这张图片素材其实用的是精灵图。实现的代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; cornflowerblue&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*border: 1px solid #000;*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &amp;gt; div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*border: 1px solid #000;*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;2s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;backface-visibility:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*默认显示图片的左半边*/&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;180deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*让图片的右半边默认时，旋转180度，就可以暂时隐藏起来*/&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.box1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;180deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*让图片的左半边转消失*/&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;0deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*让图片的左半边转出现*/&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translateX&lt;/span&gt;(100px)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//沿着 X 轴移动&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translateY&lt;/span&gt;(360px)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//沿着 Y 轴移动&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;translateZ&lt;/span&gt;(360px)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//沿着 Z 轴移动&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;格式举例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）translateX 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2036.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）translateY 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateY(&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2037.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）translateZ 举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 给box的父元素加透视效果*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;perspective:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1000px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* translateZ必须配合透视来使用*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateZ(&lt;span class=&quot;dt&quot;&gt;400px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_2040.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上方代码中，如果不加透视属性，是看不到translateZ的效果的。&lt;/p&gt;
&lt;h3 id=&quot;透视perspective&quot;&gt;3、透视：perspective&lt;/h3&gt;
&lt;p&gt;电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。&lt;/p&gt;
&lt;p&gt;透视可以将一个2D平面，在转换的过程当中，呈现3D效果。但仅仅只是视觉呈现出3d 效果，并不是正真的3d。&lt;/p&gt;
&lt;p&gt;格式有两种写法：&lt;/p&gt;
&lt;h3 id=&quot;d呈现transform-style&quot;&gt;4、3D呈现（transform-style）&lt;/h3&gt;
&lt;p&gt;3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的&lt;strong&gt;父元素&lt;/strong&gt;设置&lt;code&gt;transform-style: preserve-3d&lt;/code&gt;来使其变成一个真正的3D图形。属性值可以如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    transform&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;style&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; preserve&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;3d&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;//让 子盒子 位于三维空间里&lt;/span&gt;

    transform&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;style&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; flat&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;co&quot;&gt;//让子盒子位于此元素所在的平面内（子盒子被扁平化）&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;案例：&lt;/strong&gt;立方体&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;dashed&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 让子盒子保持3d效果*/&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;transform-style:&lt;/span&gt; preserve-3d&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/*transform:rotateX(30deg) rotateY(-30deg);*/&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;animation:&lt;/span&gt; gun &lt;span class=&quot;dt&quot;&gt;8s&lt;/span&gt; linear infinite&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &amp;gt; div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#daa520&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 变换中心*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform-origin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 变换*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;90deg&lt;/span&gt;) translateX(&lt;span class=&quot;dt&quot;&gt;-125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform-origin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 变换*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateY(&lt;span class=&quot;dt&quot;&gt;90deg&lt;/span&gt;) translateX(&lt;span class=&quot;dt&quot;&gt;125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.forward&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateZ(&lt;span class=&quot;dt&quot;&gt;125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.back&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateZ(&lt;span class=&quot;dt&quot;&gt;-125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.up&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateX(&lt;span class=&quot;dt&quot;&gt;90deg&lt;/span&gt;) translateZ(&lt;span class=&quot;dt&quot;&gt;125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.down&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgba(99&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;66&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.3)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateX(&lt;span class=&quot;dt&quot;&gt;-90deg&lt;/span&gt;) translateZ(&lt;span class=&quot;dt&quot;&gt;125px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        @keyframes gun &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateX(&lt;span class=&quot;dt&quot;&gt;0deg&lt;/span&gt;) rotateY(&lt;span class=&quot;dt&quot;&gt;0deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            100% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotateX(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;) rotateY(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        }
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;up&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;上&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;down&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;下&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;左&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;右&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;前&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;back&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;后&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;动画&quot;&gt;动画&lt;/h2&gt;
&lt;p&gt;动画是CSS3中具有颠覆性的特征，可通过设置&lt;strong&gt;多个节点&lt;/strong&gt; 来精确控制一个或一组动画，常用来实现&lt;strong&gt;复杂&lt;/strong&gt;的动画效果。&lt;/p&gt;
&lt;h3 id=&quot;定义动画的步骤&quot;&gt;1、定义动画的步骤&lt;/h3&gt;
&lt;p&gt;（1）&lt;a href=&quot;mailto:通过@keyframes定义动画&quot;&gt;通过@keyframes定义动画&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;（2）将这段动画通过百分比，分割成多个节点；然后各节点中分别定义各属性；&lt;/p&gt;
&lt;p&gt;（3）在指定元素里，通过 &lt;code&gt;animation&lt;/code&gt; 属性调用动画。&lt;/p&gt;
&lt;p&gt;之前,我们在 js 中定义一个函数的时候，是先定义，再调用：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    js 定义函数：
        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 函数体 &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

     调用：
        &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样，我们在 CSS3 中&lt;strong&gt;定义动画&lt;/strong&gt;的时候，也是&lt;strong&gt;先定义，再调用&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    定义动画：
        @keyframes 动画名&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 初始状态 &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            to&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 结束状态 &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

     调用：
      animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 动画名称 持续时间；&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，animation属性的格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)

            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move1 1s  alternate linear &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move2 4s&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;定义动画的格式举例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 调用动画*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* animation: 动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。infinite 表示无限次*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*animation: move 1s  alternate linear 3;*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;animation:&lt;/span&gt; move2 &lt;span class=&quot;dt&quot;&gt;4s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 方式一：定义一组动画*/&lt;/span&gt;
        @keyframes move1 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;) rotate(&lt;span class=&quot;dt&quot;&gt;0deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
            to &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;) rotate(&lt;span class=&quot;dt&quot;&gt;555deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        }

        &lt;span class=&quot;co&quot;&gt;/* 方式二：定义多组动画*/&lt;/span&gt;
        @keyframes move2 &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;) translateY(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            25% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;) translateY(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/*动画执行到 50% 的时候，背景色变成绿色，形状变成圆形*/&lt;/span&gt;
            50% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;/* 虽然两个方向都有translate，但其实只是Y轴上移动了200px。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                因为X轴的500px是相对最开始的原点来说的。可以理解成此时的 translateX 是保存了之前的位移 */&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;) translateY(&lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            75% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;) translateY(&lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/*动画执行到 100% 的时候，背景色还原为红色，形状还原为正方形*/&lt;/span&gt;
            100% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;/*坐标归零，表示回到原点。*/&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translateX(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;) translateY(&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        }
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意好好看代码中的注释。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1001.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;动画属性&quot;&gt;2、动画属性&lt;/h3&gt;
&lt;p&gt;我们刚刚在调用动画时，animation属性的格式如下：&lt;/p&gt;
&lt;p&gt;animation属性的格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 定义的动画名称  持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)

            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move1 1s  alternate linear &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move2 4s&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出，这里的 animation 是综合属性，接下来，我们把这个综合属性拆分看看。&lt;/p&gt;
&lt;p&gt;（1）动画名称：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;name&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）执行一次动画的持续时间：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;duration&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 4s&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备注：上面两个属性，是必选项，且顺序固定。&lt;/p&gt;
&lt;p&gt;（3）动画的执行次数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;iteration&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;count&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;//iteration的含义表示迭代&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;属性值&lt;code&gt;infinite&lt;/code&gt;表示无数次。&lt;/p&gt;
&lt;p&gt;（3）动画的方向：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;direction&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; alternate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;属性值：normal 正常，alternate 反向。&lt;/p&gt;
&lt;p&gt;（4）动画延迟执行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;delay&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 1s&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）设置动画结束时，盒子的状态：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;fill&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;mode&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; forwards&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;属性值： forwards：保持动画结束后的状态（默认）， backwards：动画结束后回到最初的状态。&lt;/p&gt;
&lt;p&gt;（6）运动曲线：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    animation-timing-function: ease-in;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;属性值可以是：linear ease-in-out steps()等。&lt;/p&gt;
&lt;p&gt;注意，如果把属性值写成&lt;strong&gt;&lt;code&gt;steps()&lt;/code&gt;&lt;/strong&gt;，则表示动画&lt;strong&gt;不是连续执行&lt;/strong&gt;，而是间断地分成几步执行。我们接下来专门讲一下属性值 &lt;code&gt;steps()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;steps的效果&quot;&gt;steps()的效果&lt;/h3&gt;
&lt;p&gt;我们还是拿上面的例子来举例，如果在调用动画时，我们写成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    animation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; move2 4s &lt;span class=&quot;at&quot;&gt;steps&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1020.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有了属性值 &lt;code&gt;steps()&lt;/code&gt;，我们就可以作出很多不连续地动画效果。比如时钟；再比如，通过多张静态的鱼，作出一张游动的鱼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step()举例：&lt;/strong&gt;时钟的简易模型&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;transform-origin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;/* 旋转的中心点是底部 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;animation:&lt;/span&gt; myClock &lt;span class=&quot;dt&quot;&gt;60s&lt;/span&gt; steps(&lt;span class=&quot;dt&quot;&gt;60&lt;/span&gt;) infinite&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        @keyframes myClock &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;0deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            100% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;360deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        }
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码，我们通过一个黑色的长条div，旋转360度，耗时60s，分成60步完成。即可实现。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1030.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;动画举例摆动的鱼&quot;&gt;动画举例：摆动的鱼&lt;/h3&gt;
&lt;p&gt;现在，我们要做下面这种效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1245.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PS：图片的url是&lt;a href=&quot;http://img.smyhvae.com/20180209_1245.gif&quot; class=&quot;uri&quot;&gt;http://img.smyhvae.com/20180209_1245.gif&lt;/a&gt;，图片较大，如无法观看，可在浏览器中单独打开。&lt;/p&gt;
&lt;p&gt;为了作出上面这种效果，要分成两步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）第一步&lt;/strong&gt;：让鱼在原地摆动&lt;/p&gt;
&lt;p&gt;鱼在原地摆动并不是一张 gif动图，她其实是由很多张静态图间隔地播放，一秒钟播放完毕，就可以了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_shark.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面这张大图的尺寸是：宽 509 px、高 2160 px。&lt;/p&gt;
&lt;p&gt;我们可以理解成，每一帧的尺寸是：宽 509 px、高 270 px。&lt;code&gt;270 * 8 = 2160&lt;/code&gt;。让上面这张大图，在一秒内从 0px 的位置往上移动2160px，分成8步来移动。就可以实现了。&lt;/p&gt;
&lt;p&gt;代码是：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.shark&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;509px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;270px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*盒子的宽高是一帧的宽高*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/shark&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 让图片一开始位于 0 px的位置 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;animation:&lt;/span&gt; sharkRun &lt;span class=&quot;dt&quot;&gt;1s&lt;/span&gt; steps(&lt;span class=&quot;dt&quot;&gt;8&lt;/span&gt;) infinite&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 一秒之内，从顶部移动到底部，分八帧， */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        @keyframes sharkRun &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;/* 270 * 8 = 2160 */&lt;/span&gt;
            100% &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background-position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-2160px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 动画结束时，让图片位于最底部 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        }
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;sharkBox&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shark&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1250.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们不妨把上面的动画的持续时间从&lt;code&gt;1s&lt;/code&gt;改成 &lt;code&gt;8秒&lt;/code&gt;，就可以看到动画的慢镜头：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1330.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这下，你应该恍然大悟了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）第二步&lt;/strong&gt;：让鱼所在的盒子向前移动。&lt;/p&gt;
&lt;p&gt;实现的原理也很简单，我们在上一步中已经让&lt;code&gt;shark&lt;/code&gt;这个盒子实现了原地摇摆，现在，让 shark 所在的父盒子 &lt;code&gt;sharkBox&lt;/code&gt;向前移动，即可。完整版代码是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180209_1350.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大功告成。&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Feb 2018 05:54:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8435182.html</dc:identifier>
</item>
<item>
<title>React原理探索- @providesModule 模块系统 - natureless</title>
<link>http://www.cnblogs.com/natureless/p/8435037.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/natureless/p/8435037.html</guid>
<description>&lt;h3 id=&quot;providesmodule是什么&quot;&gt;@providesModule是什么&lt;/h3&gt;
&lt;p&gt;react抛出组件化的概念后，对于开发者而言，为了提高代码的可读性与结构性，通过文件目录结构去阐述组件嵌套关系无疑是一个很好的办法，但是目录级别的加深，同时让require的文件路径让人头疼。绝大多数公司会使用自己定制的alias工具，在脚手架入口配置文件中给相应的filePath赋予别名，pack时，进行统一替换。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;#&lt;span class=&quot;va&quot;&gt;ykit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;config&lt;/span&gt;

...
alias&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;'Common'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'./src/util/index.js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;'Component'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'src/components/index.js'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然也可以在文件中写入唯一的标识位，pack时将该标识位与当前声明标识位的filePath建立联系，&lt;a href=&quot;mailto:facebook提供的@providesmodule的就是这一策略&quot;&gt;facebook提供的@providesModule的就是这一策略&lt;/a&gt;。使用方法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;#&lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;* &lt;/span&gt;@providesModule&lt;span class=&quot;co&quot;&gt; Common&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; isArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
...
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; isObject &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
...
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

#&lt;span class=&quot;va&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;js&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; isArray &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Common'&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;isArray&lt;/span&gt;([])
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;如何实现providesmodule&quot;&gt;&lt;a href=&quot;mailto:如何实现@providesmodule&quot;&gt;如何实现@providesModule&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;fbjs-script/gulp:&lt;/p&gt;
&lt;p&gt;shared/provides-module.js中提供了这样一段正则，&lt;a href=&quot;mailto:用于匹配文件中是否有类似@providesmodule的标识符&quot;&gt;用于匹配文件中是否有类似@providesModule的标识符&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\r?\n&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\@&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;providesModule &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(\S+)(?&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\r?\n)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;modules-map.js 中：&lt;/p&gt;
&lt;p&gt;transform函数调用如上正则对读入文本进行解析，并将alias的别名与filePath建立映射关系&lt;/p&gt;
&lt;p&gt;flush函数将前面拿到的映射表进行处理加上统一前缀，并导入到json文件中&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;transform&lt;/span&gt;(file&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; enc&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; cb) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isNull&lt;/span&gt;()) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; file)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isStream&lt;/span&gt;()) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gutil&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PluginError&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'module-map'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Streaming not supported'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Get the @providesModule piece of out the file and save that.&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; matches &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;contents&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;match&lt;/span&gt;(PM_REGEXP)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (matches) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; matches[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;moduleMap&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasOwnProperty&lt;/span&gt;(name)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;emit&lt;/span&gt;(
&lt;span class=&quot;st&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gutil&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PluginError&lt;/span&gt;(
PLUGIN_NAME&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;'Duplicate module found: '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' at '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' and '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;
moduleMap[name]
)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
moduleMap[name] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(file)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;cb&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;flush&lt;/span&gt;(cb) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Keep it ABC order for better diffing.&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; map &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(moduleMap).&lt;span class=&quot;at&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(prev&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; curr) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Rewrite path here since we don't need the full path anymore.&lt;/span&gt;
prev[curr] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;basename&lt;/span&gt;(moduleMap[curr]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'.js'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; prev&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFile&lt;/span&gt;(moduleMapFile&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(map&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// avoid calling cb with fs.write callback data&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;cb&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后导出如下json(以fbjs build为例)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;BrowserSupportCore&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/BrowserSupportCore&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;CSSCore&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/CSSCore&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;CircularBuffer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/CircularBuffer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;DOMMouseMoveTracker&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/DOMMouseMoveTracker&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;DataTransfer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/DataTransfer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Deferred&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Deferred&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;ErrorUtils&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/ErrorUtils&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;EventListener&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/EventListener&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;ExecutionEnvironment&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/ExecutionEnvironment&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Heap&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Heap&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;IntegerBufferSet&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/IntegerBufferSet&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Keys&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Keys&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Locale&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Locale&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Map&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Map&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;PhotosMimeType&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/PhotosMimeType&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;PrefixIntervalTree&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/PrefixIntervalTree&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;Promise&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/Promise&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;PromiseMap&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;fbjs/lib/PromiseMap&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而后该做什么大家也清楚了，要么node脚本去把文件里require 对应别名的进行路径替换，要么通过babel替换，当然，facebook是通过babel玩的&lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;题外话&lt;/h3&gt;
&lt;p&gt;其实对于alias system目前提供的两种方法，各有利弊。fb提供的方法，使得使用上更加便利，但是由于alias遍地存在，声明冲突也变得家常便饭（当然可以通过统一前缀解决）。传统在脚手架配置文件中声明的方法，虽然能让你对alias的声明一目了然，但是使用上也繁琐很多&lt;/p&gt;
</description>
<pubDate>Fri, 09 Feb 2018 05:14:00 +0000</pubDate>
<dc:creator>natureless</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/natureless/p/8435037.html</dc:identifier>
</item>
</channel>
</rss>