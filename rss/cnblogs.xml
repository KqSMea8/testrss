<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>如何利用Python网络爬虫爬取微信朋友圈动态--附代码（下） - dcpeng</title>
<link>http://www.cnblogs.com/dcpeng/p/9030622.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dcpeng/p/9030622.html</guid>
<description>


&lt;p&gt;前天给大家分享了&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.toutiao.com/i6553461873956618766/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;如何利用Python网络爬虫爬取微信朋友圈数据的上篇（理论篇）&lt;/a&gt;，今天给大家分享一下代码实现（实战篇），接着上篇往下继续深入。&lt;/p&gt;
&lt;p&gt;一、代码实现&lt;/p&gt;
&lt;p&gt;1、修改Scrapy项目中的items.py文件。我们需要获取的数据是朋友圈和发布日期，因此在这里定义好日期和动态两个属性，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-157f53a60f11ae3e0f7689daf564369a_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;286&quot; data-original=&quot;https://pic3.zhimg.com/v2-157f53a60f11ae3e0f7689daf564369a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-157f53a60f11ae3e0f7689daf564369a_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、修改实现爬虫逻辑的主文件moment.py，首先要导入模块，尤其是要主要将items.py中的WeixinMomentItem类导入进来，这点要特别小心别被遗漏了。之后修改start_requests方法，具体的代码实现如下图。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-11ce628ff19429416cce6c5c846452d0_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;330&quot; data-original=&quot;https://pic2.zhimg.com/v2-11ce628ff19429416cce6c5c846452d0_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-11ce628ff19429416cce6c5c846452d0_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、修改parse方法，对导航数据包进行解析，代码实现稍微复杂一些，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-f1b5d3ce12f7980e939f0ff61b173433_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;372&quot; data-original=&quot;https://pic4.zhimg.com/v2-f1b5d3ce12f7980e939f0ff61b173433_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f1b5d3ce12f7980e939f0ff61b173433_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;l需要注意的是从网页中获取的response是bytes类型，需要显示的转为str类型才可以进行解析，否则会报错。&lt;/li&gt;
&lt;li&gt;l在POST请求的限定下，需要构造参数，需要特别注意的是参数中的年、月和索引都需要是字符串类型的，否则服务器会返回400状态码，表示请求参数错误，导致程序运行的时候报错。&lt;/li&gt;
&lt;li&gt;l在请求参数还需要加入请求头，尤其是Referer（反盗链）务必要加上，否则在重定向的时候找不到网页入口，导致报错。&lt;/li&gt;
&lt;li&gt;l上述的代码构造方式并不是唯一的写法，也可以是其他的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4、定义parse_moment函数，来抽取朋友圈数据，返回的数据以JSON加载的，用JSON去提取数据，具体的代码实现如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-1965271922c882037b6d16baad443a32_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;256&quot; data-original=&quot;https://pic3.zhimg.com/v2-1965271922c882037b6d16baad443a32_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1965271922c882037b6d16baad443a32_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5、在setting.py文件中将ITEM_PIPELINES取消注释，表示数据通过该管道进行处理。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-0b160d6492df67fc1de7134f98b040ac_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;226&quot; data-original=&quot;https://pic3.zhimg.com/v2-0b160d6492df67fc1de7134f98b040ac_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0b160d6492df67fc1de7134f98b040ac_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;6、之后就可以在命令行中进行程序运行了，在命令行中输入scrapy crawl moment -o moment.json，之后可以得到朋友圈的数据，在控制台上输出的信息如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-c06e1a151b78263e02514273d22fbc42_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;337&quot; data-original=&quot;https://pic3.zhimg.com/v2-c06e1a151b78263e02514273d22fbc42_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c06e1a151b78263e02514273d22fbc42_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;7、尔后我们得到一个moment.json文件，里面存储的是我们朋友圈数据，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-618a3a82ab7566a2ba75deae950cb8b1_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;135&quot; data-original=&quot;https://pic3.zhimg.com/v2-618a3a82ab7566a2ba75deae950cb8b1_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-618a3a82ab7566a2ba75deae950cb8b1_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;8、嗯，你确实没有看错，里边得到的数据确实让人看不懂，但是这个并不是乱码，而是编码的问题。解决这个问题的方式是将原来的moment.json文件删除，之后重新在命令行中输入下面的命令：scrapy crawl moment -o moment.json -s FEED_EXPORT_ENCODING=utf-8，此时可以看到编码问题已经解决了，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-83367d5ad769883c764a367d25635183_hd.jpg&quot; alt=&quot;&quot; width=&quot;554&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;151&quot; data-original=&quot;https://pic4.zhimg.com/v2-83367d5ad769883c764a367d25635183_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-83367d5ad769883c764a367d25635183_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下一篇文章，小编带大家将抓取到的朋友圈数据进行可视化展示，敬请关注~~&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 15:44:00 +0000</pubDate>
<dc:creator>dcpeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dcpeng/p/9030622.html</dc:identifier>
</item>
<item>
<title>虚拟机配置Openstack常见问题汇总 - Skylar_Zhan</title>
<link>http://www.cnblogs.com/skylarzhan/p/9030600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skylarzhan/p/9030600.html</guid>
<description>&lt;p&gt;&lt;span&gt;之前配置了openstack，遇到一些问题，现在将问题全部汇总记录在这里。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）问题：主机名字修改不了；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：没有进入root状态；或者没有正确打开文件，要打开的是/etc/hostname，结果忘记一个斜杠，直接/etc/hostname&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：1、进入root状态 ，使用命令行sudo su 后面输入密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     　　　  2、检查输入文件名字是否正确&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）问题：输入信息不进去&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：可能是linux的操作键盘个windows不一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方法：将光标移动到要输入的位置，然后按键盘 i ，然后进行输入，删除直接用delete键，&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）问题：修改文件保存不了&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：没有进入root状态，所以没有权限保存；未使用英文字符，导致保存命令无效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：1、进入root状态 ，使用命令行sudo su 后面输入密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、在vi 打开的情况下，使用esc+:wq!保存；如果使用gedit 打开文件，可以直接ctrl+x保存，但是要建立在管理员权限在才有效（gedit 命令适用于desktop版本）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;（4）问题：配置主机网络环境错误：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：没有查看本身自带的ifconfig，直接参照视频教程做&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：1、ifconfig ，然后查看到address IP地址，然后修改最后一个为基准，对IP地址进行修改，比如我的是192.168.17.129开始，逐渐递增130，131，132，133。网关要查看一下，使用nm-tool。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、如果参照视频教程，相应的也要把虚拟机的网络配置器修改为你所配置的网络IP Address&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（5）问题：openstack no command&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    原因：没有openstack 这个命令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：下载安装openstackclient ,也就是openstack的包，同时要记得加载source-openrc.sh&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（6）问题：ping 不通虚拟机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因1、检查物理链路是否正常，网线，交换机是否正常 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、网卡的状态是否为UP  (ip addr)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、查看配置是否IP地址是否正确&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、检查虚拟机是否重启，IP地址是否更改为设置的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：1、物理链路问题的话就要去虚拟机的网络编辑器设值好相应的IP地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、网卡状态显示为down ，即没有开启网卡，尝试开启；显示为unknown即为在配置主机网络环境时网络不稳定，由于网络自动分配，导致后期找不到，这种情况可能就要重装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、ifconfig，核对好自己本机的IP地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、配置好网络环境后要重启一下reboot，可能就成功了&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（7）问题：创建云硬盘失败 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：Ntp问题，各个节点时间不同步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：下载安装NTP或者chrony&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;(8)问题：出现错误但是找不到出错地方&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：可能遗漏某步骤或者在配置过程中不小心删除重要文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：每完成一个点尽量拍摄一个快照，这样子一旦出现配置错误，可以直接返回原先稳定状态。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;(9)问题：消息队列启动失败&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：1、/etc/hosts中IP是否正确，检查installrc和lib/hosts中IP是否正确 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：1、检查/etc/hosts中IP是否正确 ，采用脚本安装还需检查installrc和lib/hosts中IP是否正确 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;(10)问题：数据库启动失败 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：监听IP是否正确，如果采用脚本安装还需检查installrc和lib/hosts中IP是否正确 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;解决方案： 如都没问题，手动卸载数据库，并删除库文件rm -rf /var/lib/mysql/再次安装 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;(11)问题：执行source admin-openrc.sh后执行命令报错 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   原因：环境中有代理，或者其他环境变量干扰。此问题也和开发人员编程习    惯有关，在写代码是从不喜欢写绝对路径，环境中执行了该程序导致。出现问题是无从查起。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决解决方案： 重启物理机、或者将admin-openrc.sh内容拷贝出来在命令行中执行一遍&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;（12）错误内容：Therequest you have made requires authentication. (HTTP 401)&lt;/strong&gt; (Request-ID:req-70bb9d8c-a1ba-47e3-8dc4-ef2e63e269f4)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：401是未授权导致。密码或账号错误。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：填写创建用户时的密码。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;（13）错误内容：数据库同步错误，&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：一般原因是connection参数不对，或者密码错误，格式不对等。数据库未关闭时，往往会造成错误。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：重启数据库。检查connection的参数 &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;（14）错误内容：云主机 &quot;two&quot; 执行所请求操作失败，云主机处于错误状态。&lt;/strong&gt;: 请稍后再试 [错误: No valid host was found. Thereare not enough hosts available.].&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：多半是计算节点down，或者是计算节点上的资源不够用了&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：查看计算节点资源，查看计算节点是否启动：openstack compute service list novaservice-list&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;（15）错误内容：Fail toconnect vnc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：VNC配置错误，连接实例的ip地址不对（一般是因为控制节点两块网卡，而写入的IP地址不可用于通信）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：重启实例，修改VNC配置，换控制节点另一块网卡的IP地&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;（16）错误内容：路由删除不掉&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：多半是还有浮动IP在用的原因&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：删掉浮动IP&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;（17）错误内容：Dashboard登陆不上去，报错Unauthorization&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因一： 在/etc/keystone/keystone-paste.ini 中的 [pipeline:public_api], [pipeline:admin_api], and [pipeline:api_v3] 三个选项中未移除 admin_token_auth。这是临时授权，未移除会被警告。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因二：Dashboard配置文件 /etc/openstack-dashboard/local_settings.py。其中注意几点：时区可能未配置好，API版本不对&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：1、在/etc/keystone/keystone-paste.ini 中，移除admin_token_auth；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;2、时区如果不知道最好不要选；  OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; %OPENSTACK_HOST 中的V3 一定要改成V3&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;（18）错误内容：’module’ object has no attribute ‘SSL_ST_INIT’&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;原因：模块对象没有属性的ssl_st_init”&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;解决方案：pip uninstall pyopenssl&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;　　　　   pip install pyopenssL&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;配置Openstack的话，可以直接参照官网上的内容直接配置。一开始写着是需要三台虚拟机，但是后期实际在配置过程中，基本是compute节点跟controller节点上配置就可以了。配置openstack的话要求运行内存，存储容量都要足够，这样子才能保证后期都能完整进行。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;在前文提到过配置openstack有server版跟destop版；如果用server版要用secureCRT才能复制粘贴，这样子可以提高效率。用desktop版可以gedit打开文本编辑器，还可以查找，更快捷。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 15:34:00 +0000</pubDate>
<dc:creator>Skylar_Zhan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skylarzhan/p/9030600.html</dc:identifier>
</item>
<item>
<title>[备忘] 数学小定理相关 - YoungNeal</title>
<link>http://www.cnblogs.com/YoungNeal/p/9030575.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YoungNeal/p/9030575.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;由于上一篇&lt;a href=&quot;http://www.cnblogs.com/YoungNeal/p/8908187.html&quot;&gt;数学相关&lt;/a&gt;分版块记录定理及证明，对于小定理等略有繁琐，故新开一篇博客记录一些数学小芝士，以此备忘。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;关于质因子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(1-2\times 10^9\)&lt;/span&gt; 中任何数的不同质因子都不会超过 &lt;span class=&quot;math inline&quot;&gt;\(10\)&lt;/span&gt; 个，且所有质因子的指数总和不超过 &lt;span class=&quot;math inline&quot;&gt;\(30\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;证明：因为最小的 &lt;span class=&quot;math inline&quot;&gt;\(11\)&lt;/span&gt; &lt;span class=&quot;math inline&quot;&gt;\(2\times 3\times 5\times 7\times 11\times 13\times 17\times 19\times 23\times 29\times 31&amp;gt;2\times 10^9\)&lt;/span&gt;，所以 &lt;span class=&quot;math inline&quot;&gt;\(N\leq 2\times 10^9\)&lt;/span&gt; 不可能有多于 &lt;span class=&quot;math inline&quot;&gt;\(10\)&lt;/span&gt; 个不同质因子。&lt;br/&gt;因为即使只包含最小的质数，仍然有 &lt;span class=&quot;math inline&quot;&gt;\(2^{31}&amp;gt;2\times 10^9\)&lt;/span&gt; ，所以 &lt;span class=&quot;math inline&quot;&gt;\(N\leq 2\times 10^9\)&lt;/span&gt; 的质因子质数总和不会超过 &lt;span class=&quot;math inline&quot;&gt;\(30\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;欧拉函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\sum _{d\mid n}\phi(d)=n\]&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;欧拉定理可推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[gcd(a,n)=1\Rightarrow a^{\phi(n)}\equiv 1\quad (mod\;n)\Rightarrow a^b\equiv a^{b\;mod\;\phi(n)}\quad (mod\;n)\]&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;小引理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&quot;math inline&quot;&gt;\(gcd(a,n)=1\)&lt;/span&gt;，则满足 &lt;span class=&quot;math inline&quot;&gt;\(a^x\equiv 1\quad (mod\;n)\)&lt;/span&gt; 的最小正整数 &lt;span class=&quot;math inline&quot;&gt;\(x_0\)&lt;/span&gt; 是 &lt;span class=&quot;math inline&quot;&gt;\(\phi(n)\)&lt;/span&gt; 的约数。&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 15:25:00 +0000</pubDate>
<dc:creator>YoungNeal</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YoungNeal/p/9030575.html</dc:identifier>
</item>
<item>
<title>非正则表达式检验邮箱格式是否合法（Java代码实现） - 三号小学生</title>
<link>http://www.cnblogs.com/zjf1665119803/p/9030537.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjf1665119803/p/9030537.html</guid>
<description>&lt;h2&gt;一、邮箱格式需满足以下要求&lt;/h2&gt;
&lt;p&gt;                        1. 有且只有一个@&lt;br/&gt;                        2. @不能放在开头，也不能放在结尾&lt;br/&gt;                        3. @之后必须有.&lt;br/&gt;                        4. @之前或之后不能紧跟.&lt;br/&gt;                        5. @之前要有6个字符&lt;br/&gt;                        6. 以com、org、cn、net结尾&lt;/p&gt;
&lt;h2&gt;二、代码实现&lt;/h2&gt;
&lt;h3&gt;1. 实现代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; homework3;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;邮箱检验是否合格&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CheckEmail {

     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmail(String email) {
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否为空邮箱&lt;/span&gt;
         &lt;span&gt;int&lt;/span&gt; k = 0&lt;span&gt;;
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(email == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
          * 单引号引的数据 是char类型的 
                                    双引号引的数据 是String类型的 
                                    单引号只能引一个字符 
                                    而双引号可以引0个及其以上*
          &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否有仅有一个@且不能在开头或结尾&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;(email.indexOf(&quot;@&quot;) &amp;gt; 0 &amp;amp;&amp;amp; email.indexOf('@') == email.lastIndexOf('@') &amp;amp;&amp;amp; email.indexOf('@') &amp;lt; email.length()-1&lt;span&gt;) {
             k&lt;/span&gt;++&lt;span&gt;;
         }
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断&quot;@&quot;之后必须有&quot;.&quot;且不能紧跟&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;(email.indexOf('.',email.indexOf('@')) &amp;gt; email.indexOf('@')+1&lt;span&gt; ) {
             k&lt;/span&gt;++&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断&quot;@&quot;之前或之后不能紧跟&quot;.&quot;&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;(email.indexOf('.') &amp;lt; email.indexOf('@')-1 || email.indexOf('.') &amp;gt; email.indexOf('@')+1&lt;span&gt; ) {
             k&lt;/span&gt;++&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@之前要有6个字符&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;(email.indexOf('@') &amp;gt; 5&lt;span&gt; ) {
             k&lt;/span&gt;++&lt;span&gt;;
         }
         
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(email.endsWith(&quot;com&quot;) || email.endsWith(&quot;org&quot;) || email.endsWith(&quot;cn&quot;) ||email.endsWith(&quot;net&quot;&lt;span&gt;)) {
             k&lt;/span&gt;++&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(k == 5&lt;span&gt;) {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
         
     }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 测试代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; homework3;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Scanner;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EmailTest {
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
        { Scanner sc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Scanner(System.in);   
         System.out.println(&lt;/span&gt;&quot;请输入你的邮箱:&quot;&lt;span&gt;);   
         String str &lt;/span&gt;= sc.nextLine();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取字符串型输入   &lt;/span&gt;
         CheckEmail email = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CheckEmail();
         &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; result =&lt;span&gt; email.isEmail(str);
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(result) {
             System.out.println(&lt;/span&gt;&quot;邮箱地址合法&quot;&lt;span&gt;);
         }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
             System.out.println(&lt;/span&gt;&quot;邮箱地址不合法&quot;&lt;span&gt;);
         }
         System.out.println(&lt;/span&gt;&quot;  &quot;&lt;span&gt;);
    }
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. 测试结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381587/201805/1381587-20180512231620862-4272911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三、总结&lt;/h2&gt;
&lt;p&gt;        这是我在博客园上的第一篇文章，没有啥技术含量，但是却见证着我的学习与成长。&lt;br/&gt;        本人Java小白一枚，正在努力追赶，希望有志同道合的小伙伴可以共勉，一起努力学习，一起进步。&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 15:18:00 +0000</pubDate>
<dc:creator>三号小学生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjf1665119803/p/9030537.html</dc:identifier>
</item>
<item>
<title>SpringBoot19 集成SpringSecurity01 -&gt; 环境搭建、SpringSecurity验证 - CRUD_Architect</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/9030521.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/9030521.html</guid>
<description>
&lt;h2&gt;1 环境搭建&lt;/h2&gt;
&lt;h3&gt;　　1.1 创建一个SpringBoot项目&lt;/h3&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://gitee.com/wysfury/base_demo&quot; target=&quot;_blank&quot;&gt;项目脚手架 -&amp;gt; 点击前往&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;　　1.2 创建一个Restful接口&lt;/h3&gt;
&lt;p&gt;　　　　新建一个Controller类即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5b04841c-1d55-4c23-bdef-9b8a82b79210&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b04841c-1d55-4c23-bdef-9b8a82b79210&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b04841c-1d55-4c23-bdef-9b8a82b79210&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.wiremock.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-05-12 21:18
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
@RequestMapping(value &lt;/span&gt;= &quot;/security&quot;&lt;span&gt;)
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecurityController {

    @GetMapping(value &lt;/span&gt;= &quot;/connect&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String connect() {
        String result &lt;/span&gt;= &quot;前后台连接成功&quot;&lt;span&gt;;
        log.info(&lt;/span&gt;&quot;===&quot; +&lt;span&gt; result);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;SecurityController.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　1.3 引入SpringSecurity相关jar包&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;security相关&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　1.4 启动项目&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：由于我们引入了SpringSecurity相关的jar包，所以系统会默认开启SpringSecurity的相关配置&lt;/p&gt;
&lt;p&gt;　　　　技巧02：可以在配置文件中关掉这个配置（即：使SpringSecurity失效）&lt;/p&gt;
&lt;p&gt;　　　　技巧03：启动项目后会在控制台上打印出一个密码，因为默认的SpringSecurity配置会对所有的请求都进行权限验证，如果不通过就会跳转到 /login 请求，则是一个登陆页面或者一个登陆弹出窗口，默认登陆名为 user，默认登陆密码就是启动项目是控制台打印出来的字符串&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201805/1057762-20180512212803731-15360366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　1.5 访问接口&lt;/h3&gt;
&lt;p&gt;　　　　IP + 端口 + 上下文p径 + 请求路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http://127.0.0.1:9999/dev/security/connect
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　技巧01：SpringSecurity默认的配置会默认对所有的请求都进行权限验证，所以会跳转到 /login 请求路径，画面如下；输入正确的用户名和密码后跳转到之的请求所得到的响应&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201805/1057762-20180512213659953-108240678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　1.6 SpringSecurity的授权流程&lt;/h3&gt;
&lt;p&gt;　　　　所有请求url -&amp;gt; BasicAuthenticationFilter / UsernamePasswordAuthenticationFilter -&amp;gt; FilterSecurityInterceptor -&amp;gt; BasicAuthenticationFilter / UsernamePasswordAuthenticationFilter -&amp;gt; FilterSecurityInterceptor -&amp;gt; controller层&lt;/p&gt;
&lt;p&gt;　　　　所有请求都默认进入 BasicAuthenticationFilter 过滤器进行过滤，然后进入 FilterSecurityInterceptor 过滤器进行权限验证，如果在 FilterSecurityInterceptor 中权限验证就会跳转到 /login 请求进行处理，然后在进入 BasicAuthenticationFilter 或者 UsernamePasswordAuthenticationFilter 过滤器，再进入 FilterSecurityInterceptor，只有当 FilterSecurityInterceptor 过滤通过了才会跳转到之前的请求路径&lt;/p&gt;
&lt;p&gt;　　　　技巧01：如果在 FilterSecurityInterceptor 中抛出了异常就会跳转到 ExceptionTranslationFilter 进行相应的处理&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201805/1057762-20180512220410441-1325207921.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2 SpringSecurity验证&lt;/h2&gt;
&lt;p&gt;　　直接使用SpringSecurity默认的配置进行权限验证时只有一个用户，无法满足实际开发需求；在实际的开发中需要根据不同的用户判断其权限&lt;/p&gt;
&lt;p&gt;　　技巧01：直接继承一个UserDetailsService接口即可；该接口中有一个 loadUserByUsername 方法，该方法是通过用户名查找用户信息，然后在根据查到的用户信息来判断该用户的权限&lt;/p&gt;
&lt;h3&gt;　　2.1 实现 UserDetailsService&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：实现了 UserDetailsService接口的实现类必须在类级别上添加@Bean注解，目的上让Spring容器去管理这个Bean&lt;/p&gt;
&lt;p&gt;　　　　技巧02：可以在实现了 UserDetailsService接口的实现类中依赖注入其他Bean（例如：依赖注入持久层Bean来实现数据库操作）&lt;/p&gt;
&lt;p&gt;　　　　技巧03：如果实现了 UserDetailsService 接口就必须进行 SpringSecurity 配置，因为SpringSecurity会使用一个实现了PasswordEncoder接口的实现类去比较用户录入的密码和从数据库中获取到的密码是否相等&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_d99f9e43-1761-4696-a5e9-dcb27429f930&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d99f9e43-1761-4696-a5e9-dcb27429f930&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d99f9e43-1761-4696-a5e9-dcb27429f930&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.wiremock.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.extern.slf4j.Slf4j;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.AuthorityUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetails;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetailsService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UsernameNotFoundException;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;import org.springframework.security.crypto.password.PasswordEncoder;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-05-12 22:09
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
@Slf4j
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FuryUserDetailService &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserDetailsService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01 依赖注入持久层（用于查找用户信息）&lt;/span&gt;
&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; UserDetails loadUserByUsername(String username) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UsernameNotFoundException {

        log.info(&lt;/span&gt;&quot;用户名：&quot; + username); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 技巧01： /login 请求传过来的用户名会传到这里

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 02 根据用户名到数据库中查找数据&lt;/span&gt;
        String pwd = passwordEncoder.encode(&quot;123321&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 技巧02：此处是模拟的从数据库中查询到的密码

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 03 返回一个 User 对象（技巧01：这个User对象时实现了UserDetail接口的，这里利用的是Spring框架提供的User对象，也可以使用自定义但是实现了UserDetai接口的User对象）&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User(username, pwd, AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;admin&quot;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FuryUserDetailService&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;　　2.2 SpringSecurity配置&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：其实就是配置一个Bean而已，只不过这个Bean的返回类型是 PasswordEncoder 类型&lt;/p&gt;
&lt;p&gt;　　　　技巧02：可以使用实现了 PasswordEncoder接口的实现类 BCryptPasswordEncoder 作为返回类型，也可以使用自定义并且实现了  PasswordEncoder接口的类作为返回类型&lt;/p&gt;
&lt;p&gt;　　　　坑01：WebSecurityConfigurerAdapter 这个抽象类可能已经过时，&lt;a href=&quot;http://www.cnblogs.com/NeverCtrl-C/p/WebSecurityConfigurerAdapter&quot; target=&quot;_blank&quot;&gt;解决办法 -&amp;gt; 点击前往&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bf0ba20c-2a5e-4674-bf14-848fb0cc32b5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bf0ba20c-2a5e-4674-bf14-848fb0cc32b5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bf0ba20c-2a5e-4674-bf14-848fb0cc32b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.wiremock.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.NoOpPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BrowserSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return new MyPasswordEncoder();&lt;/span&gt;
&lt;span&gt;    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;BrowserSecurityConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.3 自定义加密类&lt;/h3&gt;
&lt;p&gt; 　　　　就是一个实现了 PasswordEncoder接口的类而已，我们可以通过该类来实现MD5加密或者一些其他的加密方式&lt;/p&gt;
&lt;h4&gt;　　　　2.3.2 加密类&lt;/h4&gt;
&lt;p&gt;　　　　　　用于实现自己的加密算法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e5336d6b-8634-4afa-ae1b-88e6e3b2a74c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5336d6b-8634-4afa-ae1b-88e6e3b2a74c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5336d6b-8634-4afa-ae1b-88e6e3b2a74c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.wiremock.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-05-12 22:41
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyPasswordEncoder &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; PasswordEncoder {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String encode(CharSequence charSequence) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; charSequence.toString();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; matches(CharSequence charSequence, String s) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (charSequence.toString().equals(s)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyPasswordEncoder.java&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　2.3.3 重新进行SrpingSecurity配置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_01006a47-a05a-48b9-9d82-1bb542254ab4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_01006a47-a05a-48b9-9d82-1bb542254ab4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_01006a47-a05a-48b9-9d82-1bb542254ab4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.wiremock.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.NoOpPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BrowserSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return new BCryptPasswordEncoder();&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyPasswordEncoder();
    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;BrowserSecurityConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.4 测试&lt;/h3&gt;
&lt;p&gt;　　　　启动项目后进入到登录页面&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201805/1057762-20180512230802962-1119449374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　技巧01：随便输入一个用户名（PS：由于后台没有实现根据用户名查询用户信息的逻辑，若依随便输入一个即可），输入一个固定的密码（PS：这个密码要和loadUserByUsername方法中返回的User对象中的password参数加密前的内容一致）&lt;/p&gt;
&lt;h3&gt;　　2.5 进阶&lt;/h3&gt;
&lt;p&gt;　　　　loadUserByUsername 方法的返回类型是一个User对象，这个User对象有两个默认的构造器，一个仅仅包含用户名、用户秘密和权限，另一个除了包含这些信息还包含一些用户的有效性信息&lt;/p&gt;
&lt;p&gt;　　　　技巧01：直接看 UserDetails 就知道了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48.5&quot;&gt;&lt;img id=&quot;code_img_closed_1cb289eb-429f-42d2-86d3-50ed65eae5e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1cb289eb-429f-42d2-86d3-50ed65eae5e8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1cb289eb-429f-42d2-86d3-50ed65eae5e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Source code recreated from a .class file by IntelliJ IDEA
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (powered by Fernflower decompiler)
&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.SortedSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.function.Function;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.Log;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.LogFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.CredentialsContainer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.AuthorityUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.SimpleGrantedAuthority;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.factory.PasswordEncoderFactories;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserDetails, CredentialsContainer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 500L&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Log logger = LogFactory.getLog(User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Set&amp;lt;GrantedAuthority&amp;gt;&lt;span&gt; authorities;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountNonExpired;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountNonLocked;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; credentialsNonExpired;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; enabled;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(String username, String password, Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(username, password, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, authorities);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(String username, String password, &lt;span&gt;boolean&lt;/span&gt; enabled, &lt;span&gt;boolean&lt;/span&gt; accountNonExpired, &lt;span&gt;boolean&lt;/span&gt; credentialsNonExpired, &lt;span&gt;boolean&lt;/span&gt; accountNonLocked, Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (username != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&quot;&quot;.equals(username) &amp;amp;&amp;amp; password != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.enabled =&lt;span&gt; enabled;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.accountNonExpired =&lt;span&gt; accountNonExpired;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.credentialsNonExpired =&lt;span&gt; credentialsNonExpired;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.accountNonLocked =&lt;span&gt; accountNonLocked;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.authorities =&lt;span&gt; Collections.unmodifiableSet(sortAuthorities(authorities));
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Cannot pass null or empty values to constructor&quot;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Collection&amp;lt;GrantedAuthority&amp;gt;&lt;span&gt; getAuthorities() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.password;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.username;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEnabled() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.enabled;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAccountNonExpired() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.accountNonExpired;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAccountNonLocked() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.accountNonLocked;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isCredentialsNonExpired() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.credentialsNonExpired;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eraseCredentials() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; SortedSet&amp;lt;GrantedAuthority&amp;gt; sortAuthorities(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
        Assert.notNull(authorities, &lt;/span&gt;&quot;Cannot pass a null GrantedAuthority collection&quot;&lt;span&gt;);
        SortedSet&lt;/span&gt;&amp;lt;GrantedAuthority&amp;gt; sortedAuthorities = &lt;span&gt;new&lt;/span&gt; TreeSet(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User.AuthorityComparator());
        Iterator var2 &lt;/span&gt;=&lt;span&gt; authorities.iterator();

        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(var2.hasNext()) {
            GrantedAuthority grantedAuthority &lt;/span&gt;=&lt;span&gt; (GrantedAuthority)var2.next();
            Assert.notNull(grantedAuthority, &lt;/span&gt;&quot;GrantedAuthority list cannot contain any null elements&quot;&lt;span&gt;);
            sortedAuthorities.add(grantedAuthority);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sortedAuthorities;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object rhs) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; rhs &lt;span&gt;instanceof&lt;/span&gt; User ? &lt;span&gt;this&lt;/span&gt;.username.equals(((User)rhs).username) : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.username.hashCode();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        StringBuilder sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
        sb.append(&lt;/span&gt;&lt;span&gt;super&lt;/span&gt;.toString()).append(&quot;: &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;Username: &quot;).append(&lt;span&gt;this&lt;/span&gt;.username).append(&quot;; &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;Password: [PROTECTED]; &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;Enabled: &quot;).append(&lt;span&gt;this&lt;/span&gt;.enabled).append(&quot;; &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;AccountNonExpired: &quot;).append(&lt;span&gt;this&lt;/span&gt;.accountNonExpired).append(&quot;; &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;credentialsNonExpired: &quot;).append(&lt;span&gt;this&lt;/span&gt;.credentialsNonExpired).append(&quot;; &quot;&lt;span&gt;);
        sb.append(&lt;/span&gt;&quot;AccountNonLocked: &quot;).append(&lt;span&gt;this&lt;/span&gt;.accountNonLocked).append(&quot;; &quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities.isEmpty()) {
            sb.append(&lt;/span&gt;&quot;Granted Authorities: &quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; first = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            Iterator var3 &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities.iterator();

            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(var3.hasNext()) {
                GrantedAuthority auth &lt;/span&gt;=&lt;span&gt; (GrantedAuthority)var3.next();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;first) {
                    sb.append(&lt;/span&gt;&quot;,&quot;&lt;span&gt;);
                }

                first &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                sb.append(auth);
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            sb.append(&lt;/span&gt;&quot;Not granted any authorities&quot;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; User.UserBuilder withUsername(String username) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder().username(username);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; User.UserBuilder builder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User.UserBuilder();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt; &lt;span&gt;@deprecated&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Deprecated
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; User.UserBuilder withDefaultPasswordEncoder() {
        logger.warn(&lt;/span&gt;&quot;User.withDefaultPasswordEncoder() is considered unsafe for production and is only intended for sample applications.&quot;&lt;span&gt;);
        PasswordEncoder encoder &lt;/span&gt;=&lt;span&gt; PasswordEncoderFactories.createDelegatingPasswordEncoder();
        User.UserBuilder var10000 &lt;/span&gt;=&lt;span&gt; builder();
        encoder.getClass();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; var10000.passwordEncoder(encoder::encode);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; User.UserBuilder withUserDetails(UserDetails userDetails) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired()).accountLocked(!userDetails.isAccountNonLocked()).authorities(userDetails.getAuthorities()).credentialsExpired(!userDetails.isCredentialsNonExpired()).disabled(!&lt;span&gt;userDetails.isEnabled());
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserBuilder {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;GrantedAuthority&amp;gt;&lt;span&gt; authorities;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountExpired;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountLocked;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; credentialsExpired;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; disabled;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Function&amp;lt;String, String&amp;gt;&lt;span&gt; passwordEncoder;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserBuilder() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.passwordEncoder = (password) -&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
            };
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User.UserBuilder username(String username) {
            Assert.notNull(username, &lt;/span&gt;&quot;username cannot be null&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User.UserBuilder password(String password) {
            Assert.notNull(password, &lt;/span&gt;&quot;password cannot be null&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder passwordEncoder(Function&amp;lt;String, String&amp;gt;&lt;span&gt; encoder) {
            Assert.notNull(encoder, &lt;/span&gt;&quot;encoder cannot be null&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.passwordEncoder =&lt;span&gt; encoder;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User.UserBuilder roles(String... roles) {
            List&lt;/span&gt;&amp;lt;GrantedAuthority&amp;gt; authorities = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(roles.length);
            String[] var3 &lt;/span&gt;=&lt;span&gt; roles;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; var4 =&lt;span&gt; roles.length;

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; var5 = 0; var5 &amp;lt; var4; ++&lt;span&gt;var5) {
                String role &lt;/span&gt;=&lt;span&gt; var3[var5];
                Assert.isTrue(&lt;/span&gt;!role.startsWith(&quot;ROLE_&quot;), role + &quot; cannot start with ROLE_ (it is automatically added)&quot;&lt;span&gt;);
                authorities.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SimpleGrantedAuthority(&quot;ROLE_&quot; +&lt;span&gt; role));
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities((Collection)authorities);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User.UserBuilder authorities(GrantedAuthority... authorities) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities((Collection)Arrays.asList(authorities));
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder authorities(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.authorities = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(authorities);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User.UserBuilder authorities(String... authorities) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities((Collection)AuthorityUtils.createAuthorityList(authorities));
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder accountExpired(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountExpired) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.accountExpired =&lt;span&gt; accountExpired;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder accountLocked(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; accountLocked) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.accountLocked =&lt;span&gt; accountLocked;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder credentialsExpired(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; credentialsExpired) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.credentialsExpired =&lt;span&gt; credentialsExpired;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User.UserBuilder disabled(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; disabled) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.disabled =&lt;span&gt; disabled;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserDetails build() {
            String encodedPassword &lt;/span&gt;= (String)&lt;span&gt;this&lt;/span&gt;.passwordEncoder.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.password);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;this&lt;/span&gt;.username, encodedPassword, !&lt;span&gt;this&lt;/span&gt;.disabled, !&lt;span&gt;this&lt;/span&gt;.accountExpired, !&lt;span&gt;this&lt;/span&gt;.credentialsExpired, !&lt;span&gt;this&lt;/span&gt;.accountLocked, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.authorities);
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorityComparator &lt;span&gt;implements&lt;/span&gt; Comparator&amp;lt;GrantedAuthority&amp;gt;&lt;span&gt;, Serializable {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 500L&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AuthorityComparator() {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(GrantedAuthority g1, GrantedAuthority g2) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (g2.getAuthority() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; g1.getAuthority() == &lt;span&gt;null&lt;/span&gt; ? 1&lt;span&gt; : g1.getAuthority().compareTo(g2.getAuthority());
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3dc854f2-4410-401c-9f0b-1d582cad1f87&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3dc854f2-4410-401c-9f0b-1d582cad1f87&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3dc854f2-4410-401c-9f0b-1d582cad1f87&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Source code recreated from a .class file by IntelliJ IDEA
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (powered by Fernflower decompiler)
&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserDetails &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Serializable {
    Collection&lt;/span&gt;&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; getAuthorities();

    String getPassword();

    String getUsername();

    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAccountNonExpired();

    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAccountNonLocked();

    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isCredentialsNonExpired();

    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEnabled();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserDetails.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　待更新......&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 15:15:00 +0000</pubDate>
<dc:creator>CRUD_Architect</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/9030521.html</dc:identifier>
</item>
<item>
<title>[NOI2015]程序自动分析 - ztz11</title>
<link>http://www.cnblogs.com/ztz11/p/9030504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ztz11/p/9030504.html</guid>
<description>&lt;h2&gt;题目描述&lt;/h2&gt;
&lt;p&gt;在实现程序自动分析的过程中，常常需要判定一些约束条件是否能被同时满足。&lt;/p&gt;
&lt;p&gt;考虑一个约束满足问题的简化版本：假设x1,x2,x3...代表程序中出现的变量，给定n个形如xi=xj或xi≠xj的变量相等/不等的约束条件，请判定是否可以分别为每一个变量赋予恰当的值，使得上述所有约束条件同时被满足。例如，一个问题中的约束条件为：x1=x2,x2=x3,x3=x4,x4≠x1，这些约束条件显然是不可能同时被满足的，因此这个问题应判定为不可被满足。&lt;/p&gt;
&lt;p&gt;现在给出一些约束满足问题，请分别对它们进行判定。&lt;/p&gt;
&lt;h2&gt;输入输出格式&lt;/h2&gt;
&lt;p&gt;输入格式：&lt;/p&gt;

&lt;p&gt;从文件prog.in中读入数据。&lt;/p&gt;
&lt;p&gt;输入文件的第1行包含1个正整数t，表示需要判定的问题个数。注意这些问题之间是相互独立的。&lt;/p&gt;
&lt;p&gt;对于每个问题，包含若干行：&lt;/p&gt;
&lt;p&gt;第1行包含1个正整数n，表示该问题中需要被满足的约束条件个数。接下来n行，每行包括3个整数i,j,e，描述1个相等/不等的约束条件，相邻整数之间用单个空格隔开。若e=1，则该约束条件为xi=xj；若�e=0，则该约束条件为xi≠xj；&lt;/p&gt;

&lt;p&gt;输出格式：&lt;/p&gt;

&lt;p&gt;输出到文件 prog.out 中。&lt;/p&gt;
&lt;p&gt;输出文件包括t行。&lt;/p&gt;
&lt;p&gt;输出文件的第 k行输出一个字符串“ YES” 或者“ NO”（不包含引号，字母全部大写），“ YES” 表示输入中的第k个问题判定为可以被满足，“ NO” 表示不可被满足。&lt;/p&gt;
&lt;h2&gt;思路：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这道题能作为NOI2015的题，我也是醉了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;难度还不如NOIP&lt;/p&gt;
&lt;p&gt;显而易见的这道题是一个带扩展域的并查集&lt;/p&gt;
&lt;p&gt;先把所有的满足用并查集跑一边，在跑不满足的&lt;/p&gt;
&lt;p&gt;如果不满足条件已经被满足，就说明肯定有冲突，输出即可&lt;/p&gt;
&lt;h3&gt;特别注意：&lt;/h3&gt;
&lt;p&gt;别看他数据范围大的吓人，其实没什么大不了的，模个数离散化一下即可&lt;/p&gt;
&lt;h2&gt;代码：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#define rii register int i
#define rij register int j
using namespace std;
int n,opt,t;
long long v1,v2;
int mod=926817;
int x[1000005],f[1000005],bcl1[1000005],jsq,bcl2[1000005];
int find(int x)//并查集标配
{
    if(f[x]!=x)
    {
        f[x]=find(f[x]);
        }
    return f[x];
}
int main()
{
        scanf(&quot;%d&quot;,&amp;amp;t);
        for(rii=1;i&amp;lt;=t;i++)
        {
                jsq=0;
                for(rij=1;j&amp;lt;=1000005;j++)
                {
                        f[j]=j;
                }
                scanf(&quot;%d&quot;,&amp;amp;n);
                for(rij=1;j&amp;lt;=n;j++)
                {
                        scanf(&quot;%lld%lld%d&quot;,&amp;amp;v1,&amp;amp;v2,&amp;amp;opt);
                        v1=v1%mod;
                        v2=v2%mod;
                        if(opt==1)
                        {
                                int ltt=find(v1);
                                int kkk=find(v2);
                                f[ltt]=kkk;
                        }
                        else
                        {
                                jsq++;
                                bcl1[jsq]=v1;//存拓展域（其实就是补集）
                                bcl2[jsq]=v2;
                        }
                }
                int bj=0;
                for(rij=1;j&amp;lt;=jsq;j++)
                {
                        if(find(bcl1[j])==find(bcl2[j]))
                        {
                                printf(&quot;NO\n&quot;);
                                bj=1;
                                break;
                        }
                }
                if(bj!=1)
                {
                        printf(&quot;YES\n&quot;);
                }
        }
} 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 12 May 2018 15:13:00 +0000</pubDate>
<dc:creator>ztz11</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ztz11/p/9030504.html</dc:identifier>
</item>
<item>
<title>NoHttp封装--03 缓存 - ganchuanpu</title>
<link>http://www.cnblogs.com/ganchuanpu/p/9030481.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ganchuanpu/p/9030481.html</guid>
<description>&lt;ul&gt;&lt;li&gt;1、&lt;code&gt;Default&lt;/code&gt;模式，也是没有设置缓存模式时的默认模式 这个模式实现http协议中的内容，比如响应码是304时，当然还会结合E-Tag和LastModify等头。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;StringRequest request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-k&quot;&gt;new &lt;span class=&quot;pl-smi&quot;&gt;StringRequest(url, method);
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.DEFAULT);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;2、 当请求服务器失败的时候，读取缓存 请求服务器成功则返回服务器数据，如果请求服务器失败，读取缓存数据返回。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;StringRequest request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-k&quot;&gt;new &lt;span class=&quot;pl-smi&quot;&gt;StringRequest(url, method);
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.REQUEST_NETWORK_FAILED_READ_CACHE);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;3、如果发现有缓存直接成功，没有缓存才请求服务器 ImageLoader的核心除了内存优化外，剩下一个就是发现把内地有图片则直接使用，没有则请求服务器。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;请求&lt;code&gt;String&lt;/code&gt;，缓存&lt;code&gt;String&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;StringRequest request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-k&quot;&gt;new &lt;span class=&quot;pl-smi&quot;&gt;StringRequest(url, method);
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;// 非标准Http协议，改变缓存模式为IF_NONE_CACHE_REQUEST_NETWORK
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.IF_NONE_CACHE_REQUEST_NETWORK);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请求图片，缓存图片：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;ImageRequest request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-k&quot;&gt;new &lt;span class=&quot;pl-smi&quot;&gt;ImageRequest(url, method);
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.IF_NONE_CACHE_REQUEST_NETWORK);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;4、仅仅请求网络 无论如何也只会请求网络，也不支持http 304这种默认行为。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;ImageRequest request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-k&quot;&gt;new &lt;span class=&quot;pl-smi&quot;&gt;ImageRequest(url, method);
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.ONLY_REQUEST_NETWORK);
&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;5、仅仅读取缓存 无论如何仅仅读取缓存，不会请求网络和其它操作。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;Request&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Bitmap&amp;gt; request &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-smi&quot;&gt;NoHttp&lt;span class=&quot;pl-k&quot;&gt;.createImageRequest(imageUrl);
request&lt;span class=&quot;pl-k&quot;&gt;.setCacheMode(&lt;span class=&quot;pl-smi&quot;&gt;CacheMode&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.ONLY_READ_CACHE);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果开发者想先得到缓存再请求网络，开发者可以先发起一个仅仅读取缓存的&lt;code&gt;Request&lt;/code&gt;，然后发起一个仅仅请求网络的&lt;code&gt;Request&lt;/code&gt;，&lt;strong&gt;不过本人已经在准备NoHttp2.0了，到时候将会以一个全新的面貌和开发者们见面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存模式支持缓存任何数据，因为&lt;code&gt;NoHttp&lt;/code&gt;保存数据是转为&lt;code&gt;byte[]&lt;/code&gt;，读取数据时是把&lt;code&gt;byte[]&lt;/code&gt;转为开发者想要的数据，因此&lt;code&gt;NoHttp&lt;/code&gt;的缓存可以支持任何自定义的&lt;code&gt;Request&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;服务器端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @WebServlet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CacheServlet extends BaseJsonServlet {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final &lt;span&gt;long&lt;/span&gt; serialVersionUID = &lt;span&gt;14646L&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CacheServlet() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        super();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String onResponse(HttpServletRequest request, HttpServletResponse response) throws Exception {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;返回新的数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NoHttp是最好用的Android网络框架。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * 服务端本接口的数据是否过期，没有过期则反悔相应头304，如果过期，会重新返回数据
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getLastModified(HttpServletRequest req) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里主要是告诉http框架我们的数据是否被修改过，或者说是否过期&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         String path = getServletContext().getRealPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(path).lastModified();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;客户端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CacheActivity extends Activity implements View.OnClickListener {
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;     * 标志请求是一般协议下的
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; nohttp_what_org = &lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;     * 标志请求是请求失败时读取缓存
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; nohttp_what_failed_read_cache = &lt;span&gt;0x02&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;     * 标志请求是仅仅读取缓存的
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; nohttp_what_only_read_cache = &lt;span&gt;0x03&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;     * 测试缓存图片
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; nohttp_what_only_read_cache_image = &lt;span&gt;0x04&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;     * 显示请求数据
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TextView mTvResult;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;     * 显示请求图片
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ImageView mIvImage;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        super.onCreate(savedInstanceState);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        setContentView(R.layout.activity_cache);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         findViewById(R.id.btn_request_org_cache).setOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         findViewById(R.id.btn_request_failed_read_cache).setOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         findViewById(R.id.btn_request_none_cache_request).setOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         findViewById(R.id.btn_request_only_read_cache).setOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         findViewById(R.id.btn_request_failed_read_cache_image).setOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         mTvResult =&lt;span&gt; (TextView) findViewById(R.id.tv_result);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         mIvImage =&lt;span&gt; (ImageView) findViewById(R.id.iv_image_cache);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (v.getId() ==&lt;span&gt; R.id.btn_request_org_cache) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一般请求，走http标准协议&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;             String url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.1.116/HttpServer/cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             Request&amp;lt;JSONObject&amp;gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FastJsonRequest(url);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为NoHttp本身就是RESTFUL风格的标准Http协议，所以这里不用设置或者设置为DEFAULT&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            request.setCacheMode(CacheMode.DEFAULT);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             CallServer.getInstance().add(&lt;span&gt;this&lt;/span&gt;, request, callBack, nohttp_what_org, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (v.getId() ==&lt;span&gt; R.id.btn_request_failed_read_cache) {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求失败的时候返回缓存&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             String url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.1.116/HttpServer/cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             Request&amp;lt;JSONObject&amp;gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FastJsonRequest(url);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非Http的标准协议，需要设置为REQUEST_FAILED_READ_CACHE&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            request.setCacheMode(CacheMode.REQUEST_FAILED_READ_CACHE);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             CallServer.getInstance().add(&lt;span&gt;this&lt;/span&gt;, request, callBack, nohttp_what_failed_read_cache, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (v.getId() ==&lt;span&gt; R.id.btn_request_none_cache_request) {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有缓存才去请求服务器，否则使用缓存&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             String url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.1.116/HttpServer/cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             Request&amp;lt;JSONObject&amp;gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FastJsonRequest(url);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非Http的标准协议，需要设置为IF_NONE_CACHE_REQUEST&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            request.setCacheMode(CacheMode.IF_NONE_CACHE_REQUEST);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             CallServer.getInstance().add(&lt;span&gt;this&lt;/span&gt;, request, callBack, nohttp_what_only_read_cache, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (v.getId() ==&lt;span&gt; R.id.btn_request_only_read_cache) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 仅仅请求缓存，不请求服务器&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             String url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.1.116/HttpServer/cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             Request&amp;lt;JSONObject&amp;gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FastJsonRequest(url);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非Http的标准协议，需要设置为ONLY_READ_CACHE&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;            request.setCacheMode(CacheMode.ONLY_READ_CACHE);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             CallServer.getInstance().add(&lt;span&gt;this&lt;/span&gt;, request, callBack, nohttp_what_only_read_cache, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (v.getId() ==&lt;span&gt; R.id.btn_request_failed_read_cache_image) {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果没有缓存才去请求服务器，否则使用缓存，缓存图片演示，这一点非常适合封装一个自己的Imageloader是来使用&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             Request&amp;lt;Bitmap&amp;gt; request = NoHttp.createImageRequest(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://image.tianjimedia.com/uploadImages/2013/214/CN267OUS22LM.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;            request.setCacheMode(CacheMode.REQUEST_FAILED_READ_CACHE);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             CallServer.getInstance().add(&lt;span&gt;this&lt;/span&gt;, request, imageBack, nohttp_what_only_read_cache_image, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;     * 结束图片的请求结果
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; HttpCallBack&amp;lt;Bitmap&amp;gt; imageBack = &lt;span&gt;new&lt;/span&gt; HttpCallBack&amp;lt;Bitmap&amp;gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSucceed(&lt;span&gt;int&lt;/span&gt; what, Response&amp;lt;Bitmap&amp;gt;&lt;span&gt; response) {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;             mIvImage.setImageBitmap(response.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;());
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             mTvResult.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求成功，是否来自缓存：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; response.isFromCache());
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; 
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onFailed(&lt;span&gt;int&lt;/span&gt; what, String url, Object tag, Exception exception, &lt;span&gt;int&lt;/span&gt; responseCode, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; networkMillis) {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;            mIvImage.setImageResource(R.drawable.ic_launcher);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             mTvResult.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;     * 处理JSONObject的请求结果
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;     * @param what 是哪个请求
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;     * @param response 请求对应的响应结果
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handlerResponse(&lt;span&gt;int&lt;/span&gt; what, Response&amp;lt;JSONObject&amp;gt;&lt;span&gt; response) {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         String result = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (what ==&lt;span&gt; nohttp_what_org) {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             result = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一般请求，&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (what ==&lt;span&gt; nohttp_what_failed_read_cache) {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             result = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败时返回缓存，&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (what ==&lt;span&gt; nohttp_what_only_read_cache) {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             result = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;仅仅请求缓存，&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         result += &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求是否来缓存&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + response.isFromCache() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;；结果是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + response.&lt;span&gt;get&lt;/span&gt;().getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        mTvResult.setText(result);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;     * 接受JSONObject的请求结果
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; HttpCallBack&amp;lt;JSONObject&amp;gt; callBack = &lt;span&gt;new&lt;/span&gt; HttpCallBack&amp;lt;JSONObject&amp;gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onSucceed(&lt;span&gt;int&lt;/span&gt; what, Response&amp;lt;JSONObject&amp;gt;&lt;span&gt; response) {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;            handlerResponse(what, response);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onFailed(&lt;span&gt;int&lt;/span&gt; what, String url, Object tag, Exception exception, &lt;span&gt;int&lt;/span&gt; responseCode, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; networkMillis) {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             mTvResult.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 12 May 2018 15:09:00 +0000</pubDate>
<dc:creator>ganchuanpu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ganchuanpu/p/9030481.html</dc:identifier>
</item>
<item>
<title>使用pypi-server搭建简单的PyPI源 - 不写日记</title>
<link>http://www.cnblogs.com/mithrilon/p/8954677.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mithrilon/p/8954677.html</guid>
<description>&lt;p&gt;&lt;em&gt;pypiserver&lt;/em&gt; 是一个最基本的PyPI服务器实现, 可以用来上传和维护python包. 本文介绍 &lt;em&gt;pypiserver&lt;/em&gt; 在ubuntu上的基本安装, 配置和使用.&lt;/p&gt;

&lt;h2 id=&quot;安装和启动&quot;&gt;1.1 安装和启动&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;pypiserver&lt;/em&gt; 可以在Python 2或者Python 3下运行. 使用&lt;code&gt;pip&lt;/code&gt;就可以安装:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install pypiserver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动 &lt;em&gt;pypiserver&lt;/em&gt; 使用以下命令:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在没有显示指定任何启动参数的时候, &lt;em&gt;pypiserver&lt;/em&gt; 是使用 &lt;em&gt;~/packages&lt;/em&gt; 来保存Python包, 同时监听8080端口来提供PyPI服务.&lt;/p&gt;
&lt;h2 id=&quot;上传python包&quot;&gt;1.2 上传Python包&lt;/h2&gt;
&lt;p&gt;此时, 在创建 &lt;em&gt;~/packages&lt;/em&gt; 目录后, 可以将Python包上传到此目录下. 比如, 有一个Python项目叫 &lt;em&gt;demo&lt;/em&gt; , 它的 &lt;em&gt;setup.py&lt;/em&gt; 文件内容如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from setuptools import setup

setup(
    name='demo',
    version='0.0.1',
    packages=['demo']
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在项目根目录下执行以下命令来生成Python代码分发包:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python setup.py sdist&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行完上面这条命令后, 可以在项目下的 &lt;em&gt;dist&lt;/em&gt; 目录找到分发包 &lt;em&gt;demo-0.0.1.tar.gz&lt;/em&gt;. 将分发包上传到 &lt;em&gt;~/packages&lt;/em&gt; 目录下, 接下来就可以访问 &lt;em&gt;pypiserver&lt;/em&gt; 上的Python包了.&lt;/p&gt;
&lt;h2 id=&quot;安装-pypiserver-上的python包&quot;&gt;1.3 安装 &lt;em&gt;pypiserver&lt;/em&gt; 上的Python包&lt;/h2&gt;
&lt;p&gt;在安装和启动 &lt;em&gt;pypiserver&lt;/em&gt; 后, 可以通过浏览器访问http://localhost:8080可以访问 &lt;em&gt;pypiserver&lt;/em&gt; 的默认欢迎页:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/682089/201805/682089-20180508201455705-1870827904.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问http://localhost:8080/simple/demo则可以看到刚上传的_demo-0.0.1.tar.gz_包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/682089/201805/682089-20180508201735016-138346762.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;pip&quot;&gt;1.3.1 &lt;em&gt;pip&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;在本地环境中, 可以使用 &lt;em&gt;pip&lt;/em&gt; 的 &lt;em&gt;index-url&lt;/em&gt; 参数来访问 &lt;em&gt;pypiserver&lt;/em&gt; 上的Python包:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# pip search -i http://localhost:8080 demo
# pip install -i http://localhost:8080 demo&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;easy_install&quot;&gt;1.3.2 &lt;em&gt;easy_install&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;同样也可以使用 &lt;em&gt;easy_install&lt;/em&gt; 来访问 &lt;em&gt;pypiserver&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# easy_install -i http://localhost:8080/simple demo&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;如果希望通过&lt;code&gt;python setup.py upload&lt;/code&gt;命令将本地项目代码上传到PyPI服务器, 可以通过以下步骤来完成.&lt;/p&gt;
&lt;h2 id=&quot;无密码上传项目包&quot;&gt;2.1 无密码上传项目包&lt;/h2&gt;
&lt;p&gt;默认情况下, &lt;em&gt;pypiserver&lt;/em&gt; 的上传操作是密码保护的, 不过可以通过以下启动参数来关闭密码保护:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server -P . -a .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述命令中的&lt;code&gt;-P&lt;/code&gt;参数用来指定密码文件, &lt;code&gt;-a&lt;/code&gt;用来指定需要密码保护的操作. 当这两个参数同时指定为&lt;code&gt;.&lt;/code&gt;时, 表示所有的操作都不需要密码保护.&lt;/p&gt;
&lt;p&gt;此时, 就可以在Python项目的根目录下, 执行远程安装命令来上传包. 比如在本地项目中, 执行以下命令:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python setup.py sdist upload -r http://localhost:8080&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时, &lt;em&gt;upload&lt;/em&gt; 命令仍然会提示输入密码, 此时直接回车确认就可以了.&lt;/p&gt;
&lt;h2 id=&quot;使用密码保护pypi源&quot;&gt;2.2 使用密码保护PyPI源&lt;/h2&gt;
&lt;p&gt;当希望使用密码来控制Python包的上传操作的时候, 需要使用Apache &lt;em&gt;htpasswd&lt;/em&gt; 文件.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pypiserver&lt;/em&gt; 需要 &lt;em&gt;passlib&lt;/em&gt; 包来读取 &lt;em&gt;htpasswd&lt;/em&gt; 文件. 使用以下命令来安装 &lt;em&gt;passlib&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install passlib&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要生成 &lt;em&gt;htpasswd&lt;/em&gt; 文件, 需要安装 &lt;em&gt;apache2-utils&lt;/em&gt; 工具包. 在Ubuntu上使用以下命令安装:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;apt-get install -y apache2-utils&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就可以用 &lt;em&gt;htpasswd&lt;/em&gt; 命令来生成密码文件. 假设密码文件路径为 &lt;em&gt;/root/.pypipasswd&lt;/em&gt; , 第一次生成密码文件的命令如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;htpasswd -c /root/.pypipasswd sam&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述命令中的最后一个参数&lt;code&gt;sam&lt;/code&gt;是用户名, 执行命令后, 会提示输入密码.&lt;/p&gt;
&lt;p&gt;当需要在已有的密码文件中添加新的用户名和密码时, 不能再使用&lt;code&gt;-c&lt;/code&gt;参数, 否则会将已有的数据覆盖. 比如, 要在上一步生成的文件里添加一个新用户名 &lt;em&gt;john&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;htpasswd /root/.pypipasswd john&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就可以使用密码文件来控制上传操作了. 当启动 &lt;em&gt;pypiserver&lt;/em&gt; 时, 通过&lt;code&gt;-P&lt;/code&gt;参数来指定所要使用的密码文件. 默认情况下, 上传操作会需要密码验证, 如果希望其他操作也需要密码验证, 可以使用&lt;code&gt;-a&lt;/code&gt;参数. 具体&lt;code&gt;-a&lt;/code&gt;参数的使用可以查阅_pypiserver_的启动命令帮助, 这里不再展开.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server -P /root/.pypipasswd&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来, 在需要上传Python包的系统中, 需要配置Distutils来指定上传操作所需要的用户名和密码.&lt;/p&gt;
&lt;p&gt;创建或者修改 &lt;em&gt;~/.pypirc&lt;/em&gt; 文件, 文件需要以下内容:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[distutils]
index-servers = localhost

[localhost]
repository: http://localhost:8080
username: sam
password: 123456&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置中的&lt;code&gt;[localhost]&lt;/code&gt; section就是 &lt;em&gt;pypiserver&lt;/em&gt; 的地址和用户名密码信息. &lt;code&gt;index-servers&lt;/code&gt;值中的&lt;code&gt;localhost&lt;/code&gt;就指定了名为&lt;code&gt;localhost&lt;/code&gt;的section. 接下来, 当我们向名为 &lt;em&gt;localhost&lt;/em&gt; 或者地址为 &lt;a href=&quot;http://localhost:8080/&quot; class=&quot;uri&quot;&gt;http://localhost:8080&lt;/a&gt; 的PyPI源上传Python包时, 用户名 &lt;em&gt;sam&lt;/em&gt; 和密码 &lt;em&gt;123456&lt;/em&gt; 就会被用来验证操作权限:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python setup.py sdist upload -r localhost&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;指定监听端口&quot;&gt;3.1 指定监听端口&lt;/h2&gt;
&lt;p&gt;默认情况下 &lt;em&gt;pypiserver&lt;/em&gt; 监听8080端口, 我们可以通过&lt;code&gt;-p&lt;/code&gt;参数来指定期望的端口:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server -p 9090&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;指定包目录&quot;&gt;3.2 指定包目录&lt;/h2&gt;
&lt;p&gt;默认情况下 &lt;em&gt;pypiserver&lt;/em&gt; 使用_~/packages_ 目录来读取和保存Python包. 我们可以使用&lt;code&gt;-P&lt;/code&gt;参数来修改:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server -P /opt/pypiserver/packages&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;请求转发&quot;&gt;3.3 请求转发&lt;/h2&gt;
&lt;p&gt;当请求的Python包, 在本地 &lt;em&gt;pypiserver&lt;/em&gt; 上没有找到时, 它会将请求转发到外部PyPI源, 默认为 &lt;a href=&quot;https://pypi.doubanio.com/simple&quot; class=&quot;uri&quot;&gt;https://pypi.doubanio.com/simple&lt;/a&gt; . 对于国内使用来说, 可以通过 &lt;code&gt;--fallback-url&lt;/code&gt; 参数将转发目的地址设置为豆瓣源:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pypi-server --fallback-url https://pypi.doubanio.com/simple&lt;/code&gt;
&lt;/pre&gt;

</description>
<pubDate>Sat, 12 May 2018 14:46:00 +0000</pubDate>
<dc:creator>不写日记</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mithrilon/p/8954677.html</dc:identifier>
</item>
<item>
<title>Reactor三种线程模型与Netty线程模型 - lvyahui</title>
<link>http://www.cnblogs.com/lvyahui/p/9030232.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvyahui/p/9030232.html</guid>
<description>&lt;p&gt;&lt;span&gt;文中所讲基本都是以非阻塞IO、异步IO为基础。对于阻塞式IO，下面的编程模型几乎都不适用&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;单线程模型&lt;/h2&gt;
&lt;p&gt;单个线程以非阻塞IO或事件IO处理所有IO事件，包括连接、读、写、异常、关闭等等。单线程Reactor模型基于同步事件分离器来分发事件，这个同步事件分离器，可以看做是一个单线程的while循环。下图描述了单线程模型的处理过程，看起来与网上大部分资料的图片不同，但本质是相同的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512223434832-507865796.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意上面的Selector之所以会有OP_ACEEPT事件，是因为在单线程模型中，Selector轮询的是监听套接字与已连接客户端套接字的所有IO事件。&lt;/p&gt;
&lt;p&gt;单线程处理所有IO事件的弊端很明显。没能利用计算机CPU多核的特性，一个线程某个时刻只能处理单个IO事件，此时如果有其他描述符有IO事件就绪（如来了一个新的连接），这些IO事件将暂时得不到处理。&lt;/p&gt;
&lt;p&gt;C++框架libevent中，基于event_base_loop做消息轮询，使用event_base_dispatch来分发IO消息，本质上是对上述模型的封装。如果不使用evthread_use_pthreads，则其默认就是单线程模型处理请求。&lt;/p&gt;
&lt;h2&gt;多线程模型&lt;/h2&gt;
&lt;p&gt;一个线程/进程接收连接、一组线程/进程处理IO读写事件。也就是将accept的线程与处理读、写等IO事件的线程分离，并且使用m多个线程、使用非阻塞IO或者事件IO来处理n个套接字的IO事件，这里的n一般远大于m，m一般取CPU逻辑核心数的1-3倍，而套接字数n则取决于请求数和进程可以打开的最大描述符个数。下图是多线程模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512223404148-511529933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里把客户端的已连接套接字，转交给某个IO线程之后，由此线程轮询处理其之后的所有IO事件，这实际参考了netty4的线程模型设计。实际reactor的多线程模型，并不需要将已连接套接字绑定在某个线程上，也可以统一放在连接池中，由多个IOWork线程从池中取连接进行轮询并处理，但这样会复杂很多，而且容易出问题，比如说不同线程从同一个channel收到了write事件，这就类似惊群问题了；并且多线程并发操作同一个channel，后续很可能需要你讲IO事件进行同步，与其如此，不如直接将channel绑定到一个线程，让channel上触发与处理IO事件逻辑上同步。netty3中channel（已连接套接字）入站事件由固定线程处理，出站事件由触发的线程处理，netty4中修改了设计，将channel绑定到固定的eventloop（线程）。&lt;/p&gt;
&lt;p&gt;另外一点，每个已连接套接字的IO事件由固定线程处理，不代表事件也一定由此线程触发，恰恰相反，实际业务中，读（入站）事件来自于客户端写数据触发，而写（出站）事件往往由别的线程触发，例如在发起一个异步mysql操作完成之后，在异步回调线程中写结果数据来触发套接字的出站。&lt;/p&gt;
&lt;h2&gt;从多线程模型&lt;/h2&gt;
&lt;p&gt;一组线程/进程接收连接、一组线程/进程处理IO读写事件。&lt;span&gt;它与多线程模型的主要区别在于其使用一组线程或进程在一个共享的监听套接字上accept连接&lt;/span&gt;。这么做的原因是为了应付单个线程/进程不足以快速处理内核中监听套接字的已连接套接字队列（并发量极大）的情况。如下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512223506384-1386558070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主从多线程模型，有可能引起惊群效应。不过这个问题已经渐渐被规避，内核可以保证连接只被唯一一个accept调用所获取，其余对此连接的accept调用将失败。&lt;/p&gt;

&lt;p&gt;Netty支持单线程、多线程模型、主从多线程模型。但经本人多次测试、调试发现，ServerBootstrap默认不会使用主从多线程模型。虽然server支持设置EventLoopGroup（多个EventLoop）。但实际对于一个本地地址（IP+端口）进行accept，netty只会绑定到一个EventLoop上，故只会创建一个线程处理。&lt;/p&gt;
&lt;p&gt;按本人的理解，&lt;span&gt;Boss EventLoopGroup（Master EventLoopGroup，参数nThreads不为1）的作用主要用在对共享的监听套接字或者多个本地地址监听，对多个本地地址进行监听一般表示一个JVM中有多个server，即有多个ServerBootStrap，这时，Boss EventLoopGroup可以通过共享给这多个ServerBootStrap起到作用（创建多个boss/master Thread）&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;以下面的代码为例&lt;span&gt;MASTER_THREAD_CNT为4&lt;/span&gt;，&lt;span&gt;但netty实际只会使用第一个EventLoop，只会给第一个EventLoop创建线程&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512221650890-1502195909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512221717635-722288525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;调试跟踪源码，可以明白netty的逻辑。&lt;/p&gt;
&lt;p&gt;在ServerBootstrap继承的initAndRegister方法中，调用MultithreadEventLoopGroup#register方法，&lt;strong&gt;&lt;span&gt;此方法调用this.next获取当前索引的下一个（索引位0，即是第一个）EventLoop。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512221726638-1340546471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512221744345-91526146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后register方法进一步调用register方法，在register中执行eventLoop.execute，这里才会真正为监听套接字创建第一个轮询线程。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635249/201805/635249-20180512221757598-662038443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题就在于在ServerBootstrap上调用bind方法，初始化监听socket并绑定EventLoop时，是调用的next方法。因此netty只会初始化第一个MasterEventLoop，如果想将MasterEventLoopGroup中的每个EventLoop都初始化，很显然，需要重复绑定多个监听套接字或者多次绑定一个可共享的套接字。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 14:30:00 +0000</pubDate>
<dc:creator>lvyahui</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvyahui/p/9030232.html</dc:identifier>
</item>
<item>
<title>Oracle数据库逻辑迁移之数据泵的注意事项 - AlfredZhao</title>
<link>http://www.cnblogs.com/jyzhao/p/9030126.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jyzhao/p/9030126.html</guid>
<description>&lt;p&gt;&lt;strong&gt;环境：&lt;/strong&gt;数据迁移，版本 11.2.0.4 -&amp;gt; 12.2.0.1&lt;br/&gt;&lt;strong&gt;思考：&lt;/strong&gt;&lt;br/&gt;对于DBA而言，常用物理方式的迁移，物理迁移的优势不必多说，使用这种方式不必担心对象前后不一致的情况，而这往往也解决了不懂业务的DBA最头疼的问题。&lt;br/&gt;对于开发而言，常用逻辑方式的迁移，比如传统的exp／imp或者现在的expdp／impdp，优势是简单方便，不需要了解过多的数据库运维知识。&lt;br/&gt;实际上，在某些数据库升级的场景下，针对业务数据量不大，停机时间充裕的迁移专项来说，也可以考虑采用数据泵逻辑迁移的方式。&lt;br/&gt;那么数据泵的导出导入究竟需要注意哪些事项呢？本文宗旨是通过构建一个简单的例子来说明。&lt;/p&gt;

&lt;p&gt;我的想法是，构建一个小的测试用例，但尽可能的包含更多类型的对象，从而模拟现实绝大部分的场景。&lt;br/&gt;那么，仔细的思考下，我们至少需要创建：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.1 用户的默认数据表空间、索引表空间、临时表空间&lt;/li&gt;
&lt;li&gt;1.2 多个用户schema，拥有不同的角色权限&lt;/li&gt;
&lt;li&gt;1.3 用户下建有表（普通堆表、索引组织表、全局临时表、分区表、簇表、外部表），表上的约束（主键、外键）&lt;/li&gt;
&lt;li&gt;1.4 用户下建有索引（B-Tree索引、bitmap索引、函数索引、分区索引）&lt;/li&gt;
&lt;li&gt;1.5 用户下有视图（普通视图、物化视图）&lt;/li&gt;
&lt;li&gt;1.6 用户下有同义词（public的同义词，private的同义词）&lt;/li&gt;
&lt;li&gt;1.7 用户下有dblink（public的dblink，private的dblink）&lt;/li&gt;
&lt;li&gt;1.8 用户下有存储过程、函数、触发器、包、包体、序列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.1 查询public database link&lt;/strong&gt;&lt;br/&gt;select dbms_metadata.get_ddl('DB_LINK',DB_LINK,'PUBLIC') FROM DBA_DB_LINKS where owner='PUBLIC';&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SYS@jyzhao1 &amp;gt;select dbms_metadata.get_ddl('DB_LINK',DB_LINK,'PUBLIC') FROM DBA_DB_LINKS where owner='PUBLIC';

SYS@jyzhao1 &amp;gt;set long 999999
SYS@jyzhao1 &amp;gt;/

DBMS_METADATA.GET_DDL('DB_LINK',DB_LINK,'PUBLIC')
--------------------------------------------------------------------------------

  CREATE PUBLIC DATABASE LINK &quot;TO_JYZHAO_LD&quot;
   CONNECT TO &quot;LUDAN&quot; IDENTIFIED BY VALUES ':1'
   USING 'JYZHAO'

SYS@jyzhao1 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.2 查询public synonym&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SYS@jyzhao1 &amp;gt;SELECT DBMS_METADATA.GET_DDL('SYNONYM',a.SYNONYM_NAME,a.owner) FROM DBA_SYNONYMS a where a.owner ='PUBLIC' and table_owner in ('JINGYU','LUDAN');

DBMS_METADATA.GET_DDL('SYNONYM',A.SYNONYM_NAME,A.OWNER)
--------------------------------------------------------------------------------

  CREATE OR REPLACE PUBLIC SYNONYM &quot;PUBIC_DEPT&quot; FOR &quot;JINGYU&quot;.&quot;DEPT&quot;


  CREATE OR REPLACE PUBLIC SYNONYM &quot;PUBIC_EMP&quot; FOR &quot;JINGYU&quot;.&quot;EMP&quot;


SYS@jyzhao1 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.3 查询外部表&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SYS@jyzhao1 &amp;gt;select * from dba_external_tables;

OWNER                          TABLE_NAME                     TYP TYPE_NAME                      DEF DEFAULT_DIRECTORY_NAME         REJECT_LIMIT                             ACCESS_
------------------------------ ------------------------------ --- ------------------------------ --- ------------------------------ ---------------------------------------- -------
ACCESS_PARAMETERS                                                                PROPERTY
-------------------------------------------------------------------------------- ----------
SH                             SALES_TRANSACTIONS_EXT         SYS ORACLE_LOADER                  SYS DATA_FILE_DIR                  100                                      CLOB
RECORDS DELIMITED BY NEWLINE CHARACTERSET US7ASCII                               ALL
    TERRITORY AMERICAN
    BADFILE log_file_dir:'ext_1v3.bad'
    LOGFILE log_file_dir:'ext_1v3.log'
    FIELDS TERMINATED BY &quot;|&quot; OPTIONALLY ENCLOSED BY '^' LDRTRIM
    ( PROD_ID         ,
      CUST_ID         ,
      TIME_ID         DATE(10) &quot;YYYY-MM-DD&quot;,
      CHANNEL_ID      ,
      PROMO_ID        ,
      QUANTITY_SOLD   ,
      AMOUNT_SOLD     ,
      UNIT_COST       ,
      UNIT_PRICE
    )

SYS@jyzhao1 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;主要测试逻辑迁移的可行性，为之后正式停机时的操作奠定基础。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--创建目录(两端)：
create directory xdump as '/public/xdump';
create directory xdump as '/public/xdump';

--expdp导出：
nohup expdp system/oracle schemas=JINGYU,LUDAN directory=xdump dumpfile=db1_zs_SCHEMA_%U.dmp logfile=expdp_db1_zs_SCHEMA.log PARALLEL=4 cluster=n &amp;amp;

--impdp导入：
nohup impdp system/oracle schemas=JINGYU,LUDAN directory=xdump REMAP_TABLESPACE=DBS_D_JINGYU:USERS,DBS_I_JINGYU:USERS,TEMP_JINGYU:TEMP table_exists_action=replace dumpfile=db1_zs_SCHEMA_%U.dmp logfile=impdp_db1_zs_SCHEMA.log parallel=4 cluster=n &amp;amp;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;正式迁移需要做的事情：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;4.1 锁定迁移的业务用户&lt;/li&gt;
&lt;li&gt;4.2 杀掉业务会话&lt;/li&gt;
&lt;li&gt;4.3 关闭job分别在两端&lt;/li&gt;
&lt;li&gt;4.4 源端导出并传送&lt;/li&gt;
&lt;li&gt;4.5 目标端准备并导入&lt;/li&gt;
&lt;li&gt;4.6 创建public对象&lt;/li&gt;
&lt;li&gt;4.7 解锁业务用户&lt;/li&gt;
&lt;li&gt;4.8 目标端开启job&lt;/li&gt;
&lt;li&gt;4.9 配合应用测试&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;--4.1 锁定迁移的业务用户
alter user JINGYU account lock;
alter user LUDAN account lock;

--4.2 杀掉业务会话
select * from v$session where username in ('JINGYU','LUDAN');
select 'alter system kill session ''' || sid || ',' || SERIAL# || ''';' from v$session where username in ('JINGYU','LUDAN');
ps -ef|grep LOCAL=NO|grep -v grep|xargs kill -9

--4.3 关闭job分别在两端
show parameter job_queue_process
SYS &amp;gt;alter system set job_queue_processes=0;

--4.4 源端导出并传送
nohup expdp system/oracle schemas=JINGYU,LUDAN directory=xdump dumpfile=db1_zs_SCHEMA_%U.dmp logfile=expdp_db1_zs_SCHEMA.log PARALLEL=4 cluster=n &amp;amp;

- 4.6 创建public对象
根据查询的public对象，直接创建即可。

- 4.7 解锁业务用户
在迁移升级失败，遭遇不可抗力，最终导致环境确实需要回退时才可以。
alter user JINGYU account unlock;
alter user LUDAN account unlock;

- 4.8 目标端开启job
SYS &amp;gt;alter system set job_queue_processes=1000;

- 4.9 配合应用测试
略&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;延伸MOS文档：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Oracle Server - Export DataPump and Import DataPump FAQ (文档 ID 556636.1)&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 12 May 2018 14:22:00 +0000</pubDate>
<dc:creator>AlfredZhao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jyzhao/p/9030126.html</dc:identifier>
</item>
</channel>
</rss>