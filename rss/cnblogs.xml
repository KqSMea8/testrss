<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>如何用 Graylog 管理日志？- 每天5分钟玩转 Docker 容器技术（93） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7821817.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7821817.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一节已经部署好了 Graylog，现在学习如何用它来管理日志。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先&lt;/span&gt;&lt;span&gt;启动&lt;/span&gt;&lt;span&gt;测试容器。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
docker run -d \&lt;br/&gt;--log-driver=gelf \&lt;br/&gt;--log-opt gelf-address=udp://localhost:12201 \&lt;br/&gt;--log-opt tag=&quot;log-test-container-A&quot; \&lt;br/&gt;busybox sh -c 'while true; do echo &quot;This is a log message from container A&quot;; sleep 10; done;'&lt;br/&gt;docker run -d \&lt;br/&gt;--log-driver=gelf \&lt;br/&gt;--log-opt gelf-address=udp://localhost:12201 \&lt;br/&gt;--log-opt tag=&quot;log-test-container-B&quot; \&lt;br/&gt;busybox sh -c 'while true; do echo &quot;This is a log message from container B&quot;; sleep 10; done;'&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;--log-driver=gelf&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;告诉 Docker 使用 GELF 的 logging driver。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;--log-opt gelf-address=localhost:12201&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;将容器日志发送到 Graylog 的日志接收端口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;--log-opt tag=&quot;log-test-container-A&quot;&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;和&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;--log-opt tag=&quot;log-test-container-B&quot;&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;在日志中添加一个可选的 tag，用于区分不同的容器。&lt;/p&gt;
&lt;p&gt;容器启动后，点击 Graylog 顶部菜单&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Search&lt;/span&gt;&lt;/code&gt;，就能够查询到容器的日志了。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471828983031487.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471828983031487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;与 Kibana 一样，Graylog 也提供了强大的查询功能，比如输入关键字&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;container B&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;能搜索出所有匹配的日志条目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471830620017089.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471830620017089.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 与前面 ELK 一样，这里我们只是简单的将日志导入到 Graylog。实际上 Graylog 也可以对日志进行归类汇总、分析聚合、创建 Dashboard 等。下面这张图可以感受一下 Graylog 的特性，更多的功能留给大家自己去探索。&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471829216005917.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510471829216005917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;小结&lt;/h3&gt;
&lt;p&gt;本章介绍了 Docker 日志管理的方案，我们由&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker logs&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;引出了 Docker logging driver；进而学习了 ELK 日志处理 stack；通过 fluentd logging driver，我们很容易地将 fluentd 接入到日志管理方案中；最后我们还实践了与 ELK 同等量级的 Graylog。&lt;/p&gt;
&lt;p&gt;与容器监控一样，容器日志管理也是一个百花齐放，高速迭代的技术领域。没有最好的，只有最适合的。&lt;/p&gt;
&lt;p&gt;不同企业有不同的部署规模，有自己的管理流程，有各自的业务目标；运维团队有不同的技术背景，人员结构和工作方式；唯有保持开放的心态，多看、多学、多实践，才能构建出适合自己的系统。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 12 Nov 2017 23:21:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7821817.html</dc:identifier>
</item>
<item>
<title>MySQL锁学习之UPDATE - 笑东风</title>
<link>http://www.cnblogs.com/TeyGao/p/7824684.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TeyGao/p/7824684.html</guid>
<description>&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;学MySQL也蛮长时间了，可一直停留在能干活但是不精通的状态，而且很多MySQL知识点受SQL Server的影响存在理解偏差，只能且行且努力吧！&lt;/p&gt;
&lt;p&gt;因为不懂源码，而MySQL也没提供很好的视图来验证以下观点，因此只能说说测试过程和实验结果，请各位报怀疑眼光阅读&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;问题点：&lt;/p&gt;
&lt;p&gt;当MySQL做UPDATE操作时，会如何加锁？&lt;/p&gt;
&lt;p&gt;测试方法：&lt;/p&gt;
&lt;p&gt;通过两个会话执行SQL是否有阻塞来推测。&lt;/p&gt;
&lt;p&gt;测试环境：&lt;/p&gt;
&lt;p&gt;MySQL：5.5.14-log Source distribution&lt;/p&gt;
&lt;p&gt;测试表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
CREATE TABLE &quot;t_test1&quot; (
  &quot;id&quot; int(11) NOT NULL AUTO_INCREMENT,
  &quot;c1&quot; int(11) DEFAULT NULL,
  &quot;c2&quot; int(11) DEFAULT NULL,
  &quot;c3&quot; int(11) DEFAULT NULL,
  &quot;c4&quot; int(11) DEFAULT NULL,
  PRIMARY KEY (&quot;id&quot;),
  KEY &quot;idx_c1_c2&quot; (&quot;c1&quot;,&quot;c2&quot;),
  KEY &quot;idx_c3&quot; (&quot;c3&quot;)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 当前表数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/174228/201711/174228-20171113054641093-620728176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试1：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：insert into t_test1(c1,c2,c3,c4)select 1,1,1,1;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：insert into t_test1(c1,c2,c3,c4)select 1,1,1,1;&lt;/p&gt;
&lt;p&gt;实验结果：回话2能正常执行，无阻塞。&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试2：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 set c4=1 where id=8;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 set c4=1 where id=9;&lt;/p&gt;
&lt;p&gt;实验结果：回话2能正常执行，无阻塞。虽然记录ID为8和9的C1和C2的数据相同且C1和C2上有索引。&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 set c4=0 where c1=1 and c2=1;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 set c4=0 where c1=1 and c2=1;&lt;/p&gt;
&lt;p&gt;实验结果：回话2不能正常执行，被阻塞。&lt;/p&gt;
&lt;p&gt;由于回话1和回话2要更新相同的记录，肯定存在锁问题，被阻塞完全可以理解。&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试4：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 set c4=0 where c1=1 and c2=1 and c4=8;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 set c4=0 where c1=1 and c2=1 and c4=9;&lt;/p&gt;
&lt;p&gt;实验结果：回话2不能正常执行，被阻塞。&lt;/p&gt;
&lt;p&gt;猜测：由于索引idx_c1_c2(c1,c2)的存在，回话1先按照条件c1=1 and c2=1在索引idx_c1_c2上找到“第一次匹配”的记录，然后加锁，再根据条件C4=8找到“最终匹配”记录，最后更新该记录，但由于“第一次匹配”时加锁导致回话2被阻塞&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试5：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 set c4=0 where c1=1 and c2=1 and id=8;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 set c4=0 where c1=1 and c2=1 and id=9;&lt;/p&gt;
&lt;p&gt;实验结果：回话2能正常执行，无阻塞。&lt;/p&gt;
&lt;p&gt;由于ID为唯一主键，即使回话1和回话2的WHERE条件中包含c1=1 and c2=1条件，仍不会造成阻塞。&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试6-1：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 force index(idx_c1_c2) set c4=1 where c1=1 and c2=2 and c3=8;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 force index(idx_c1_c2) set c4=1 where c1=1 and c2=2 and c3=9;&lt;/p&gt;
&lt;p&gt;实验结果：回话2不能正常执行，被阻塞。&lt;/p&gt;
&lt;p&gt;因为强制使用idx_c1_c2，先按照条件c1=1 and c2=1在索引idx_c1_c2上加锁，导致回话2被阻塞&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;测试6-2：&lt;/p&gt;
&lt;p&gt;回话1执行SQL但不提交：update t_test1 force index(idx_c3) set c4=1 where c1=1 and c2=2 and c3=8;&lt;/p&gt;
&lt;p&gt;回话2执行SQL：update t_test1 force index(idx_c3) set c4=1 where c1=1 and c2=2 and c3=9;&lt;/p&gt;
&lt;p&gt;实验结果：回话2能正常执行，无阻塞。&lt;/p&gt;
&lt;p&gt;因为强制使用idx_c3，先按照C3=8和C3=9两个条件在idx_c3上加锁，所以回话2没有被回话1阻塞&lt;/p&gt;
&lt;p&gt;##==============================================================================##&lt;/p&gt;
&lt;p&gt;打完收工&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/174228/201711/174228-20171113062231656-1748277088.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 22:23:00 +0000</pubDate>
<dc:creator>笑东风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TeyGao/p/7824684.html</dc:identifier>
</item>
<item>
<title>博客园文章编辑器5.0版本发布（markdown版） - liulun</title>
<link>http://www.cnblogs.com/liulun/p/7819059.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liulun/p/7819059.html</guid>
<description>&lt;h2 id=&quot;开篇&quot;&gt;开篇&lt;/h2&gt;
&lt;p&gt;废话少说，先上界面图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/other/28932/201711/28932-20171111161658200-1831766078.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/other/28932/201711/28932-20171111161753309-1063395721.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;10月25日，我发布了&lt;a href=&quot;http://www.cnblogs.com/liulun/p/7732415.html&quot;&gt;博客园文章编辑器的4.0版本&lt;/a&gt;，得到了很多朋友的支持，&lt;/p&gt;
&lt;p&gt;（后来我自己发现了一些问题，于是偷偷发了博客园文章编辑器的4.0.1版本，也没通知大家，不过好在有自动升级功能）&lt;/p&gt;
&lt;p&gt;当时有很多朋友问我，这个工具支持不支持markdown，&lt;/p&gt;
&lt;p&gt;我觉得写markdown的人还是挺多的，&lt;/p&gt;
&lt;p&gt;调查了博客园确实支持markdown编辑器，&lt;/p&gt;
&lt;p&gt;而且我开发了markdown的编辑器，对于那些使用HTML富文本编辑器的用户来说，也很容易上手，没太大改变，&lt;/p&gt;
&lt;p&gt;还能使他们通过我的编辑器学习一点markdown的语法知识，何乐而不为呢？！&lt;/p&gt;
&lt;h2 id=&quot;调研&quot;&gt;调研&lt;/h2&gt;
&lt;p&gt;说实话，我确实低估了开发这个东西的难度&lt;/p&gt;
&lt;p&gt;本打算到github上随便拉一个来，&lt;/p&gt;
&lt;p&gt;嵌到nwjs里去就可以了，&lt;/p&gt;
&lt;p&gt;然而看了几个高分项目，都不合我意。&lt;/p&gt;
&lt;p&gt;（不过，说真心话还是要感谢这些项目，我写这个工具参考了很多这些开源项目的源码）&lt;/p&gt;
&lt;p&gt;我觉得这个项目最主要的难点是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;找一个合适的编辑器&lt;/li&gt;
&lt;li&gt;编辑窗口与预览窗口滚动条同步&lt;/li&gt;
&lt;li&gt;和博客园官网通信通道打通&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;好在这些难点我都克服了&lt;/p&gt;
&lt;p&gt;现在你看到的东西，就是这一阵子断断续续努力的成果&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;功能&lt;/h2&gt;
&lt;p&gt;这里罗列的是所有的我觉得重要的功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;两栏布局，左边栏编写markdown内容，右边栏实时预览；&lt;/li&gt;
&lt;li&gt;左右两边栏滚动条同步滚动&lt;/li&gt;
&lt;li&gt;允许用户拖拽调整左右两边栏宽度&lt;/li&gt;
&lt;li&gt;支持最基本的markdown语法（链接、表格、标题、加粗、斜体、引用、有序无序列表，代码、横线等）&lt;/li&gt;
&lt;li&gt;博客登录（引入博客园的登录画面，使用官方提供的登录机制）&lt;/li&gt;
&lt;li&gt;检索历史文章（可以检索到你博客园内所有的随笔文章，支持分页）&lt;/li&gt;
&lt;li&gt;修改文章（你博客园内所有的历史随笔文章，都可以用此工具编辑修改）&lt;/li&gt;
&lt;li&gt;新增文章（从无到有撰写一篇新的随笔文章，默认保存为草稿）&lt;/li&gt;
&lt;li&gt;截图工具截图后直接黏贴到编辑器中&lt;/li&gt;
&lt;li&gt;纯客户端，直接与博客园服务端通信&lt;/li&gt;
&lt;li&gt;纯绿色版，不需要安装，没有额外的服务，体积更小；&lt;/li&gt;
&lt;li&gt;自动升级功能（我发布新版本之后，会提示您升级）；&lt;/li&gt;
&lt;li&gt;最最关键的还是开源！（照着这个代码写个淘宝下单器之类的东西，简直易如反掌）&lt;/li&gt;
&lt;li&gt;相对于上一个版本，做了一些UI/UE美化工作；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;开源地址：&lt;a href=&quot;https://gitee.com/xland/cnblogs&quot; class=&quot;uri&quot;&gt;https://gitee.com/xland/cnblogs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://gitee.com/xland/cnblogs/releases&quot; class=&quot;uri&quot;&gt;https://gitee.com/xland/cnblogs/releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;支持&quot;&gt;支持&lt;/h2&gt;
&lt;p&gt;强烈希望大家能给个star；&lt;/p&gt;
&lt;p&gt;这让我知道你在用；&lt;/p&gt;
&lt;p&gt;这让我有动力继续做一些对大家有用的东西；&lt;/p&gt;
&lt;h2 id=&quot;关键源码&quot;&gt;关键源码&lt;/h2&gt;
&lt;p&gt;第一段代码是用于控制滚动条同步滚动的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var editorScroll = function () {
                setTimeout(function () {
                    if (rightScrolling) {
                        return;
                    }
                    var scrollInfo = editor.getScrollInfo();
                    var lineNumber = editor.lineAtHeight(scrollInfo.top, 'local');
                    var range = editor.getRange({ line: 0, ch: null }, { line: lineNumber, ch: null });
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(marked(range), 'text/html');
                    var topLineIndex = doc.body.querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, pre, blockquote, hr, table').length;
                    var eles = document.getElementById(&quot;right&quot;).querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, pre, blockquote, hr, table');
                    var scTop = eles[topLineIndex].offsetTop;
                    $(&quot;.right&quot;).scrollTop(scTop);
                }, 800)
            }
editor.on(&quot;scroll&quot;, editorScroll);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二段代码，是用于插入markdown特有语法符号的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var wrapWidth = function (start, end) {
            if (!end) {
                end = start;
            }
            var arr = editor.doc.getSelections();
            var result = [];
            arr.forEach(item =&amp;gt; {
                var tempArr = item.split('\n');
                for (var i = 0; i &amp;lt; tempArr.length; i++) {
                    if (tempArr[i]) {
                        tempArr[i] = start + tempArr[i] + end;
                    }
                }
                result.push(tempArr.join('\n'));
            })
            editor.doc.replaceSelections(result);
        };&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 12 Nov 2017 21:28:00 +0000</pubDate>
<dc:creator>liulun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liulun/p/7819059.html</dc:identifier>
</item>
<item>
<title>逆向知识第七讲,三目运算符在汇编中的表现形式,以及编译器优化方式 - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/7824555.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/7824555.html</guid>
<description>&lt;p&gt;---恢复内容开始---&lt;/p&gt;
&lt;h3&gt;　　　　　　　　　　　　　　　　　　逆向知识第七讲,三目运算符在汇编中的表现形式&lt;/h3&gt;
&lt;h2&gt;一丶编译器优化方式&lt;/h2&gt;
&lt;p&gt;首先说一下编译器优化方式.&lt;/p&gt;
&lt;p&gt;1.常量折叠&lt;/p&gt;
&lt;p&gt;2.常量传播&lt;/p&gt;
&lt;p&gt;3.复写传播&lt;/p&gt;
&lt;p&gt;4.公共表达式&lt;/p&gt;
&lt;p&gt;5.去掉不可达到分支&lt;/p&gt;
&lt;p&gt;6.顺序代替分支&lt;/p&gt;
&lt;p&gt;7.数学变化&lt;/p&gt;
&lt;p&gt;8.代码外提&lt;/p&gt;
&lt;p&gt;9.减少变量.&lt;/p&gt;
&lt;p&gt;10 强度削弱.&lt;/p&gt;
&lt;h2&gt;优化方式解析&lt;/h2&gt;
&lt;h3&gt;1.常量折叠&lt;/h3&gt;
&lt;p&gt;　　常量折叠已经讲过, 就是两个常量相加  8 + 8 ,那么在编译前期就能计算出来.&lt;/p&gt;
&lt;h3&gt;2.常量传播&lt;/h3&gt;
&lt;p&gt;　　当一个变量,没有对齐进行写入或者更改的时候,这个时候可以当做常量.(优化为常量)&lt;/p&gt;
&lt;h3&gt;3.复写传播&lt;/h3&gt;
&lt;p&gt;　　这个需要好好说说了,我们都知道,C语言中,C调用约定都需要平栈.比如你调用完毕一个printf,那么就需要平栈.&lt;/p&gt;
&lt;p&gt;     而优化的时候,直接一起平栈了.&lt;/p&gt;
&lt;p&gt;就比如:&lt;/p&gt;
&lt;p&gt;　　int i = (a * a + b);&lt;/p&gt;
&lt;p&gt;　　int j = i * 5;&lt;/p&gt;
&lt;p&gt;那么此时可以变成  int j = (a * a + b) * 5 ;这样就会省掉一个变量(当然和去除变量不一样)&lt;/p&gt;
&lt;p&gt;call addr&lt;/p&gt;
&lt;p&gt;add esp,8&lt;/p&gt;
&lt;p&gt;call  addr&lt;/p&gt;
&lt;p&gt;add esp,8&lt;/p&gt;
&lt;p&gt;此时汇编代码可以变成&lt;/p&gt;
&lt;p&gt;call addr &lt;/p&gt;
&lt;p&gt;call addr&lt;/p&gt;
&lt;p&gt;add esp,16   这样就省掉了一个add 指令了.&lt;/p&gt;
&lt;h3&gt;4.公共表达式&lt;/h3&gt;
&lt;p&gt;公共表达式和复写传播有点不一样.(看着是相反的.但是不能说是相反的.)&lt;/p&gt;
&lt;p&gt;比如 int i = (a *a * b) * 7;&lt;/p&gt;
&lt;p&gt;　　int j = (a * a * b) * 7 * 3&lt;/p&gt;
&lt;p&gt;优化之后变成.&lt;/p&gt;
&lt;p&gt;int j = i * 3;&lt;/p&gt;
&lt;p&gt;什么是公共表达式,就是说,表达式用的都是一样的.重复使用,这样的时候,可以使用变量来存着了.或者中专一个寄存器保存其结果.&lt;/p&gt;
&lt;p&gt;这样效率会很快,不用重新计算了.&lt;/p&gt;
&lt;h3&gt;5.去掉不可达到分支&lt;/h3&gt;
&lt;p&gt;这个应该很好理解.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
{
    ......
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
{
    .....  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时if语句会成立,而else永远不会成立,那么编译器优化的时候就可以去掉else语句了.&lt;/p&gt;

&lt;h3&gt;6.顺序代替分支&lt;/h3&gt;
&lt;p&gt;这个下方讲解三木运算符的时候可以明白.&lt;/p&gt;
&lt;h3&gt;7.数学变化&lt;/h3&gt;
&lt;p&gt;这也很好理解.&lt;/p&gt;
&lt;p&gt;3a + 5a&lt;/p&gt;
&lt;p&gt;那么此时可以变为一条表达式计算直接变成8a&lt;/p&gt;
&lt;h3&gt;8.代码外提&lt;/h3&gt;
&lt;p&gt;也很好理解.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; (argc / &lt;span&gt;3&lt;/span&gt;);i++&lt;span&gt;)
{
            
    ..............
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;中间没有使用argc变量  &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中间没有使用argc变量.&lt;/p&gt;
&lt;p&gt;那么此时优化的时候,可能会用寄存器,也或者会用一个局部变量保存  (argc / 3)&lt;/p&gt;
&lt;p&gt;int j = (argc / 3);&lt;/p&gt;
&lt;p&gt;那么此时for循环的条件变成了  i &amp;lt; j即可.&lt;/p&gt;
&lt;p&gt;这样就不用每次循环一遍就计算一遍(argc / 3)了.&lt;/p&gt;
&lt;h3&gt;9.减少变量.&lt;/h3&gt;
&lt;p&gt;定义的变量没有使用,优化的时候自然就会消失了.(减少空间)&lt;/p&gt;
&lt;h3&gt;10 强度削弱.&lt;/h3&gt;
&lt;p&gt;很好理解.我们都知道除法的指令周期很长.所以前边讲解除法的时候各种套路,各种数学定理各种公式.&lt;/p&gt;
&lt;p&gt;目的是什么,目的就是为了让指令周期缩短一点.&lt;/p&gt;
&lt;p&gt;强度削弱指的就是,当时用高指令周期的指令的时候,可不可以使用低指令周期完成高指令周期做的事情.&lt;/p&gt;
&lt;p&gt;比如说:&lt;/p&gt;
&lt;p&gt;　　一个DIV指令是100指令周期(当然你可以想象成100秒)&lt;/p&gt;
&lt;p&gt;那么一个移位是10个指令周期&lt;/p&gt;
&lt;p&gt;此时我计算  一个公式  n  / 4;&lt;/p&gt;
&lt;p&gt;那么可以变成&lt;/p&gt;
&lt;p&gt;mov eax,[ebp - xxx]&lt;/p&gt;
&lt;p&gt;sar  eax,2&lt;/p&gt;
&lt;p&gt;也完成了DIV的作用.  如果看做是100秒时间,那么我们只用了10^n秒(n的取值看上面的指令,比如mov,占4个指令周期,举个例子,那么合起来才14个指令周期)&lt;/p&gt;
&lt;h2&gt;二丶三木运算符在汇编中的表现形式&lt;/h2&gt;
&lt;p&gt;高级代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stdafx.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyClass.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{
    unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; nVar_4 = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;nVar_4);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argc == &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;0&lt;/span&gt; : -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);　　　　　　　　　　　　　　第一种表达方式,判读为零还是为1的情况
    
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argc &amp;gt; &lt;span&gt;9&lt;/span&gt; ? argc*nVar_4 : nVar_4/&lt;span&gt;argc);　　　第二种表达方式，无法优化的表达方式．
    
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argc == &lt;span&gt;9&lt;/span&gt; ? &lt;span&gt;35&lt;/span&gt; : &lt;span&gt;98&lt;/span&gt;&lt;span&gt;);　　　　　　　　　　　　　第三种表达方式,利用0和-1来运算
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argc &amp;gt;= &lt;span&gt;9&lt;/span&gt; ? &lt;span&gt;35&lt;/span&gt; : &lt;span&gt;98&lt;/span&gt;&lt;span&gt;);　　　　　　　　　　　　　第四种表达方式,指令支持
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1.三木运算符第一种表达形式.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113002723169-57307296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有用的汇编代码就4行.&lt;/p&gt;
&lt;p&gt;1.变量给寄存器保存.&lt;/p&gt;
&lt;p&gt;2.寄存器内容求补码&lt;/p&gt;
&lt;p&gt;3.带进位的减法.&lt;/p&gt;
&lt;p&gt;首先说下什么意思.&lt;/p&gt;
&lt;p&gt;这里是无分支三木运算&lt;/p&gt;
&lt;p&gt;neg的意思就是求补, 但是运算的时候是 ecx = 0 - ecx值.&lt;/p&gt;
&lt;p&gt;neg只有 0 - 0的时候才不会借位. &lt;/p&gt;
&lt;p&gt;还原代码要从三方面考虑&lt;/p&gt;
&lt;h3&gt;为零的情况下&lt;/h3&gt;
&lt;p&gt;为零的时候,neg 一下,那么其结果还是 0,CF位没有借位.&lt;/p&gt;
&lt;p&gt;还原代码为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
{
     ecx  &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;为负数的时候:&lt;/h3&gt;
&lt;p&gt;如果为负数的时候,那么&lt;/p&gt;
&lt;p&gt;neg一下,其结果是 0 - 负数 (CF借位,则置位1)&lt;/p&gt;
&lt;p&gt;sbb  负数- 负数 -  CF   结果是-1&lt;/p&gt;
&lt;p&gt;还原代码为:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
{
    ecx &lt;/span&gt;= &lt;span&gt;-1&lt;/span&gt;&lt;span&gt;;
  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为正数的情况下&lt;/h3&gt;
&lt;p&gt;如果是正数&lt;/p&gt;
&lt;p&gt;neg一下  0 - 正数 = 负数, 那么CF借位了,其结果是1&lt;/p&gt;
&lt;p&gt;sbb一下.  负数- 负数 - CF   其结果是 -1  (负数- 负数= 0,0 - CF(1) = -1)&lt;/p&gt;
&lt;p&gt;还原代码:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
{
   ecx &lt;/span&gt;== -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结上面方面情况还原得出其还原代码为.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span&gt;0&lt;/span&gt;) ecx = &lt;span&gt;-1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(argc ==&lt;span&gt;0&lt;/span&gt;) ecx = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(argc &amp;gt; &lt;span&gt;0&lt;/span&gt;) ecx = -&lt;span&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果转化为三木运算符,这个就看自己爱怎么转化了&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;p&gt;　　argc ==0 ? 0 : -1&lt;/p&gt;
&lt;p&gt;ａ　?　 b :ｃ　以后分为ａ　ｂ　ｃ讲解，ａ代表表达式和条件　，ｂ和Ｃ代表其结果．&lt;/p&gt;
&lt;p&gt;其中,这种优化方式,则是顺序优化.也就是上面没说的.结果之后有一方成立&lt;/p&gt;
&lt;h3&gt;２．三木运算符的第二种表达方式&lt;/h3&gt;
&lt;p&gt; 高级代码：&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; printf(&quot;%d\r\n&quot;, argc &amp;gt; 9 ? argc*nVar_4 : nVar_4/&lt;span&gt;argc);&lt;br/&gt;这个代码，无法优化，因为不知道变量是多少．&lt;br/&gt;看下汇编代码把．&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113015237749-1808427058.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这个很简单了．&lt;/p&gt;
&lt;p&gt;１．局部变量给寄存器保存．&lt;/p&gt;
&lt;p&gt;２．和９比较&lt;/p&gt;
&lt;p&gt;３．小于怎么怎么做&lt;/p&gt;
&lt;p&gt;４．大于怎么怎么做．&lt;/p&gt;
&lt;h3&gt;3.三木运算符的高级汇编表示,利用0和-1&lt;/h3&gt;

&lt;p&gt;高级代码:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;printf(&quot;%d\r\n&quot;, argc == 9 ? 35 : 98&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;对应汇编代码:&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113030732296-1578778862.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这个汇编代码要分为两部分看，三部分代入.&lt;/p&gt;
&lt;p&gt;1.相等的情况下怎么走&lt;/p&gt;
&lt;p&gt;2.大于的时候怎么走&lt;/p&gt;
&lt;p&gt;3.小于的时候怎么走.&lt;/p&gt;
&lt;h3&gt;1.相等的时候怎么走（属于代入）&lt;/h3&gt;
&lt;p&gt;看第一部分代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113030911624-671218616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;看上面汇编代码解析&lt;/p&gt;
&lt;p&gt;这里的esi是argc变量，因为上下文关系，所以变量的值已经在esi保存了。&lt;/p&gt;
&lt;p&gt;现在我们带入走汇编指令&lt;/p&gt;
&lt;p&gt;当esi == 9的时候&lt;/p&gt;
&lt;p&gt;第二句   sub edx,9  (结果为0）&lt;/p&gt;
&lt;p&gt;第三句   neg edx    (0 - 0 还是0）&lt;/p&gt;
&lt;p&gt;第四句   sbb edx,edx (0 - 0 - CF, 此时因为neg所以CF = 0 所以就是 0 - 0 - 0 还是0&lt;/p&gt;
&lt;p&gt;接着看下方第二部分代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113031200874-96733096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为零的时候，edx 走到and之后，还是0&lt;/p&gt;
&lt;p&gt;然后接着add 那么其结果是23h&lt;/p&gt;
&lt;p&gt;由此还原汇编代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc == &lt;span&gt;9&lt;/span&gt;) edx = 23h
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.大于的时候怎么走&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113033143968-416190604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还是同上&lt;/p&gt;
&lt;p&gt;1.如果&amp;gt; 9,那么 sub后结果是正数&lt;/p&gt;
&lt;p&gt;2.neg之后. 0 - 正数= 负数  (0 - 正数的时候,借位了,所以CF位是1)&lt;/p&gt;
&lt;p&gt;3.sbb 之后 负数- 负数 = 0, 然后- CF位 = -1;&lt;/p&gt;
&lt;p&gt;4.如果是-1,那么and之后其结果是3FH&lt;/p&gt;
&lt;p&gt;5.接着add之后其结果是 (3fh + 23h)&lt;/p&gt;
&lt;p&gt;还原代码:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (argc &amp;gt; &lt;span&gt;9&lt;/span&gt;) edx = (3fh + 23h)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.小于的时候怎么走&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113033143968-416190604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.sub之后, 结果为负数&lt;/p&gt;
&lt;p&gt;2.neg之后( 0 - 负数 = 取负数的绝对值(负负得正),有借位,所以CF = 1)&lt;/p&gt;
&lt;p&gt;3.sbb 之后, 正数- 正数 - CF = 正数- 正数 - 1 = -1;&lt;/p&gt;
&lt;p&gt;4.结果为-1,那么and起作用&lt;/p&gt;
&lt;p&gt;5,执行add,加23h&lt;/p&gt;
&lt;p&gt;还原代码:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (argc &amp;lt; &lt;span&gt;9&lt;/span&gt;) edx = (0c1h + 23h)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;综上条件,换成三目运算其结果是:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span&gt;9&lt;/span&gt;) edx =&lt;span&gt; 3fh + 23h
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(argc ==&lt;span&gt;9&lt;/span&gt;)edx =&lt;span&gt; 23h
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(argc &amp;gt; &lt;span&gt;9&lt;/span&gt;) edx = (3fh + 23h)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么可以还原成:&lt;/p&gt;
&lt;p&gt;　　argc == 9 ? 23h : 62h&lt;/p&gt;
&lt;p&gt;注意这里的3Fh,这里的3Fh,是 c - b (如果条件取反,那么则是b-c)的结果.&lt;/p&gt;
&lt;h2&gt;四丶指令支持版本&lt;/h2&gt;
&lt;p&gt;高级代码:&lt;/p&gt;
&lt;pre&gt;
&lt;span readability=&quot;4&quot;&gt;printf(&quot;%d\r\n&quot;, argc &amp;gt;= 9 ? 35 : 98&lt;span readability=&quot;8&quot;&gt;);&lt;br/&gt;汇编代码:&lt;br/&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171113034311062-706472085.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;注意,esi还是 argc的值&lt;br/&gt;这里出现了新的指令 setl指令,这属于set系列&lt;br/&gt;和条件跳转指令一样&lt;br/&gt;比如 jns  jle(小于等于) jge(大于等于) ....&lt;br/&gt;这里setl  l代表小的意思也就是小于&lt;br/&gt;那么就很简单了.&lt;br/&gt;1.局部变量和9比较&lt;br/&gt;2.如果小于9,则al设置为1&lt;br/&gt;3.dec相减,结果为0&lt;br/&gt;4.根据0和非0的值去and,如果为零,则 and al 0c1h则没用&lt;br/&gt;5.最后add即可.&lt;br/&gt;也是三部分代入,这里和上面类似.我直接代入还原代码.&lt;br/&gt;但是需要注意,这里是如果小于则会设置al,那么就是小于的时候会走一个,而大于或者等于,其结果有不一样.&lt;p&gt;小于的情况下:&lt;br/&gt;　　1.和9比较&lt;br/&gt;　　2.小于9,al设置为1&lt;br/&gt;　　3.dec eax, 1 - 1 = 0;结果为零.&lt;br/&gt;　　4.为零,那么and执行之后还是0&lt;br/&gt;　　5.执行add&lt;br/&gt;还原代码:&lt;br/&gt;　　根据上面得知,小于9 会执行 add&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span&gt;9&lt;/span&gt;) reg32 = 62h
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　大于或者等于的情况下.&lt;/p&gt;
&lt;p&gt;1.和9比较,大于9&lt;/p&gt;
&lt;p&gt;2.大于9,则al不设置,结果为0&lt;/p&gt;
&lt;p&gt;3.dec eax, 0 - 1 = -1,其结果变成-1,也就是FFFFFFFF&lt;/p&gt;
&lt;p&gt;4.结果为-1,则and成立,其结果变为0C1H&lt;/p&gt;
&lt;p&gt;5.add eax,62 紧接着加上其结果&lt;/p&gt;
&lt;p&gt;还原代码&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;gt;=&lt;span&gt;9&lt;/span&gt;) reg32 = (c1 + 62h)注意这里会进位的.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;综上所述,可以得出:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span&gt;9&lt;/span&gt;) reg32 =&lt;span&gt; 62h
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(argc &amp;gt;= &lt;span&gt;9&lt;/span&gt;)reg32 = (0c1h + 62h);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(0c1h + 62)然后看结果,后八位(因为我们是32位系统)其结果是35&lt;/p&gt;
&lt;p&gt;还原三目运算符为:&lt;/p&gt;
&lt;p&gt;　　argc &amp;gt;= 9 ? 35:98&lt;/p&gt;


&lt;pre&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 12 Nov 2017 20:07:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/7824555.html</dc:identifier>
</item>
<item>
<title>AutoMapper IIS回收引发的 未将对象引用设置到对象实例 - 简玄冰</title>
<link>http://www.cnblogs.com/jianxuanbing/p/7823856.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jianxuanbing/p/7823856.html</guid>
<description>&lt;p&gt;最近使用&lt;code&gt;AutoMapper&lt;/code&gt;的时候，一段时间久会产生&lt;code&gt;System.NullReferenceException:未将对象引用设置到对象的实例。&lt;/code&gt;这个问题。后来通过测试，发现部署在&lt;code&gt;IIS&lt;/code&gt;上的站点，默认情况下，IIS会在每个间隔固定时间回收&lt;code&gt;AppPool&lt;/code&gt;，如果刚刚好有很多请求访问调用了&lt;code&gt;AutoMapper&lt;/code&gt;映射的接口，就会产生如下问题。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;System.NullReferenceException: 未将对象引用设置到对象的实例。
   在 AutoMapper.TypeMapFactory.&amp;lt;&amp;gt;c__DisplayClass3_0.&amp;lt;MapDestinationPropertyToSource&amp;gt;b__0(IMemberConfiguration _)
   在 System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)
   在 AutoMapper.TypeMapFactory.CreateTypeMap(Type sourceType, Type destinationType, IProfileConfiguration options, MemberList memberList)
   在 AutoMapper.ConfigurationStore.&amp;lt;&amp;gt;c__DisplayClass80_0.&amp;lt;CreateTypeMap&amp;gt;b__0(TypePair tp)
   在 System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   在 AutoMapper.ConfigurationStore.CreateMap[TSource,TDestination](String profileName, MemberList memberList)
   在 PaymentPlatform.Test.AutoMapperTest.ProcessRequest(HttpContext context)&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;方法一&quot;&gt;方法一&lt;/h2&gt;
&lt;p&gt;打开对应IIS站点的应用程序池，点击&lt;code&gt;高级设置&lt;/code&gt;。如下图：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/534030/201711/534030-20171113002139653-1964902198.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将上图中的&lt;code&gt;固定时间间隔(分钟)&lt;/code&gt;设置为0.&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;方法二&lt;/h2&gt;
&lt;p&gt;可在全局的&lt;code&gt;Application_Start&lt;/code&gt;中，定义所有的&lt;code&gt;AutoMapper&lt;/code&gt;类型映射。这样就可以保证映射关系的一次性初始化。后续代码无需再定义，只需关注对象转换就可以了。&lt;/p&gt;
&lt;h2 id=&quot;方法三&quot;&gt;方法三&lt;/h2&gt;
&lt;p&gt;也可使用&lt;a href=&quot;http://www.cnblogs.com/jianxuanbing/p/7122877.html&quot;&gt;AutoMapper扩展&lt;/a&gt;这种方式进行使用，对于不存在的配置，自动创建相关的映射。&lt;/p&gt;
</description>
<pubDate>Sun, 12 Nov 2017 16:23:00 +0000</pubDate>
<dc:creator>简玄冰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jianxuanbing/p/7823856.html</dc:identifier>
</item>
<item>
<title>hash算法与hashmap - unbelievableme</title>
<link>http://www.cnblogs.com/kundeg/p/7779002.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kundeg/p/7779002.html</guid>
<description>&lt;p&gt;参考博客：&lt;br/&gt;&lt;a href=&quot;http://zha-zi.iteye.com/blog/1124484&quot; class=&quot;uri&quot;&gt;http://zha-zi.iteye.com/blog/1124484&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3681042.html(%E5%8F%82%E8%80%83%E4%BA%86hashCode%E4%B8%8Eequals)&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3681042.html(参考了hashCode与equals)&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/leesf456/p/5242233.html(%E8%BD%AC%E8%BD%BD%E4%BA%86hashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/leesf456/p/5242233.html(转载了hashMap源码分析)&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/mengfanrong/p/4034950.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/mengfanrong/p/4034950.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/tanggao1314/article/details/51457585&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/tanggao1314/article/details/51457585&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/fan2012huan/article/details/51087722&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/fan2012huan/article/details/51087722&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一hash算法&quot;&gt;一、hash算法&lt;/h2&gt;
&lt;h3 id=&quot;hash简介&quot;&gt;1.1 hash简介&lt;/h3&gt;
&lt;p&gt;hash,一般翻译为散列，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出值就是散列值，这种转换是一种压缩映射，也就是散列的空间小于输入的空间，不同的输入可能会形成相同的输出，因此不可以通过散列值来唯一的确定输入值，简单的说就是把任意长度的消息压缩到某一固定长度的消息摘要的函数&lt;/p&gt;
&lt;h3 id=&quot;构造hash函数的方法&quot;&gt;1.2 构造hash函数的方法&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;23.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;直接寻址法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;取keyword或keyword的某个线性函数值为&lt;br/&gt;散列地址。即H(key)=key或H(key)=a•key&lt;br/&gt;+b，当中a和b为常数（这样的散列函数叫做&lt;br/&gt;自身函数）&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;地址集合的大小 = 关键字集合的大小&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;地址 A1 A2 ……A99 A100&lt;br/&gt;年龄(key) 1 2 ……99 100&lt;br/&gt;人数(value)980 800 ……495 107&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;11&quot;&gt;&lt;td&gt;数字分析法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;数字分析法是取数据元素关键字中某些取值较&lt;br/&gt;均匀的数字位作为哈希地址的方法。即当关键&lt;br/&gt;字的位数很多时，可以通过对关键字的各位进&lt;br/&gt;行分析，丢掉分布不均匀的位，作为哈希值。&lt;br/&gt;它只适合于所有关键字值已知的情况。通过分&lt;br/&gt;析分布情况把关键字取值区间转化为一个较小&lt;br/&gt;的关键字取值区间&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;能预先估计出全体关键字的每一位上各种数&lt;br/&gt;字出现的频度&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;存在关键字如下：&lt;br/&gt;K1=61317602 K2=61326875&lt;br/&gt;K3=62739628 K4=61343634&lt;br/&gt;K5=62706815 K6=62774638&lt;br/&gt;通过分析,key的前4位不宜作为hash值。&lt;br/&gt;从后面取四位中取两位即可&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;12&quot;&gt;&lt;td&gt;折叠法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;折叠法是将关键字从左到右分割成位数相等的&lt;br/&gt;几部分（最后一部分位数不够可以短一些），&lt;br/&gt;然后将这几部分叠加求和，并按散列表表长，&lt;br/&gt;取后几位作为散列地址&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关键字的数字位数特别多&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;当哈希表长为1000,关键字key=31119891,&lt;br/&gt;允许的地址空间为三位十进制数&lt;br/&gt;，则这两种叠加情况如下：&lt;br/&gt;移位叠加   边界叠加&lt;br/&gt;891     891&lt;br/&gt;119     911&lt;br/&gt;  31       31&lt;br/&gt;041     833&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;8&quot;&gt;&lt;td&gt;平方取中法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;这个方法是先取关键字的平方，然后根据可使&lt;br/&gt;用空间的大小，选取平方数是中间几位为哈希&lt;br/&gt;地址&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关键字中的每一位都有某些数字重复出现频&lt;br/&gt;度很高的现象&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;若设哈希表长为1000&lt;br/&gt;关键字 关键字的平方 哈希函数值&lt;br/&gt;1234  1522756    227&lt;br/&gt;2143  4592449    924&lt;br/&gt;4132  17073424    734&lt;br/&gt;3214  10329796    297&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9&quot;&gt;&lt;td&gt;除留余数法&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;函数公式为：f(key)=key mod p(p&amp;lt;=m)&lt;br/&gt;，m为地址空间大小，事实上，这方法不仅可&lt;br/&gt;以对关键字直接取模，也可以在折叠、平方取&lt;br/&gt;中后再取模&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;此方法重要的是p的选取&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;散列元素为（18，75，60，43，54，&lt;br/&gt;90，46）,表长m=10，假设p=7，则：&lt;br/&gt;h(18)=18%7=4 h(75)=75%7=5&lt;br/&gt;h(60)=60%7=4 h(43)=43%7=1&lt;br/&gt;h(54)=54%7=5 h(90)=90%7=6&lt;br/&gt;h(46)=46%7=4&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;散列表&quot;&gt;1.3 散列表&lt;/h3&gt;
&lt;p&gt;散列表也叫哈希表，是依据关键码值（key,value）而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中的一个位置来访问记录，以加快查找的速度，这个映射函数就是1.1中的hash函数，存放记录的数组叫做散列表。&lt;/p&gt;
&lt;h3 id=&quot;hash冲突&quot;&gt;1.4 hash冲突&lt;/h3&gt;
&lt;p&gt;不同的key的hash值相同的时候，就产生了冲突，这个时候就需要有解决冲突的方法，常见的有：&lt;/p&gt;
&lt;h4 id=&quot;开放地址法&quot;&gt;1. 开放地址法&lt;/h4&gt;
&lt;p&gt;通过H=H（key）产生冲突的时候，就使用这个公式：H = （H（key）+di）mod m（m为hash表的长度） 来重新确定key的hash值。&lt;br/&gt;1.当di取1，2，3，4 ...时，称为线性探测再散列&lt;br/&gt;2.当di取1^2，-1^2，2^2,-2^2,...，称为平方探测再散列&lt;br/&gt;3.当di取随机数时，称为随机探测再散列&lt;/p&gt;
&lt;h4 id=&quot;再哈希法&quot;&gt;2. 再哈希法&lt;/h4&gt;
&lt;p&gt;顾名思义，不止存在一个hash函数，当使用第一个hash函数产生冲突后，就使用其他的hash函数，直至不冲突为止&lt;/p&gt;
&lt;h4 id=&quot;链地址法&quot;&gt;3. 链地址法&lt;/h4&gt;
&lt;p&gt;就是下面即将提到的hashMap采用的解决冲突的方法，此处不累述&lt;/p&gt;
&lt;h3 id=&quot;java中的hash&quot;&gt;1.5 java中的hash&lt;/h3&gt;
&lt;p&gt;Java中的Object类中有一个方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public native int hashCode();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此对于没有重写hashCode方法的类来说，他的hash值就是通过本地算法计算而来的。&lt;/p&gt;
&lt;h4 id=&quot;hashcode的作用&quot;&gt;1. hashCode的作用&lt;/h4&gt;
&lt;p&gt;java常见的集合框架HashMap，HashTable，HashSet等，在保存对象的同时都会保存下来对象的hashCode，这样做的目的可以减少集合进行某些操作，例如：HashMap的判断是否包含key，查找等操作的时间复杂度&lt;/p&gt;
&lt;h4 id=&quot;hashcode与对象的关系&quot;&gt;2. hashCode与对象的关系&lt;/h4&gt;
&lt;p&gt;1.不同对象的hashCode可能相同（hash冲突），因此通过hashCode不能判断对象相同&lt;br/&gt;2.hashCode不同那么对象肯定不同，因此可以通过hashCode判断对象不同&lt;br/&gt;我们知道判断对象相同可以用equals方法，因此上述两句表示可以变为：&lt;br/&gt;1.对象equals为true,那么hashCode一定相同&lt;br/&gt;2.hashCode不同，那么equals一定为false&lt;/p&gt;
&lt;h2 id=&quot;二hashmap数据结构&quot;&gt;二、HashMap数据结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171103164609591-1999371905.png&quot;/&gt;&lt;br/&gt;　说明：上图很形象的展示了HashMap的数据结构（数组+链表+红黑树），桶中的结构可能是链表，也可能是红黑树，红黑树的引入是为了提高效率&lt;/p&gt;
&lt;h2 id=&quot;三-hashmap源码分析&quot;&gt;三 、HashMap源码分析&lt;/h2&gt;
&lt;h3 id=&quot;类的属性&quot;&gt;3.1 类的属性&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {
    // 序列号
    private static final long serialVersionUID = 362498820763181265L;    
    // 默认的初始容量是16
    static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4;   
    // 最大容量
    static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; 
    // 默认的填充因子
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    // 当桶(bucket)上的结点数大于这个值时会转成红黑树
    static final int TREEIFY_THRESHOLD = 8; 
    // 当桶(bucket)上的结点数小于这个值时树转链表
    static final int UNTREEIFY_THRESHOLD = 6;
    // 桶中结构转化为红黑树对应的table的最小大小
    static final int MIN_TREEIFY_CAPACITY = 64;
    // 存储元素的数组，总是2的幂次倍
    transient Node&amp;lt;k,v&amp;gt;[] table; 
    // 存放具体元素的集
    transient Set&amp;lt;map.entry&amp;lt;k,v&amp;gt;&amp;gt; entrySet;
    // 存放元素的个数，注意这个不等于数组的长度。
    transient int size;
    // 每次扩容和更改map结构的计数器
    transient int modCount;   
    // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容
    int threshold;
    // 填充因子
    final float loadFactor;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用下图表示loadFactor，capacity，threshold的关系：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171112131153169-1102930444.png&quot;/&gt;&lt;br/&gt;其中capacity为64（满足2的幂次倍），假设loadFactor为默认的0.75，那么threshold为54，当前size为10&amp;lt;54,因此不需要扩容，当size大于54时，会进行扩容&lt;/p&gt;
&lt;h3 id=&quot;类的构造函数&quot;&gt;3.2 类的构造函数&lt;/h3&gt;
&lt;p&gt;1.HashMap（int，float）型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(int initialCapacity, float loadFactor) {
    // 初始容量不能小于0，否则报错
    if (initialCapacity &amp;lt; 0)
        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +
                                            initialCapacity);
    // 初始容量不能大于最大值，否则为最大值
    if (initialCapacity &amp;gt; MAXIMUM_CAPACITY)
        initialCapacity = MAXIMUM_CAPACITY;
    // 填充因子不能小于或等于0，不能为非数字
    if (loadFactor &amp;lt;= 0 || Float.isNaN(loadFactor))
        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +
                                            loadFactor);
    // 初始化填充因子                                        
    this.loadFactor = loadFactor;
    // 初始化threshold大小
    this.threshold = tableSizeFor(initialCapacity);    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：tableSizeFor(initialCapacity)返回大于initialCapacity的最小的二次幂数值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static final int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 2;
        n |= n &amp;gt;&amp;gt;&amp;gt; 4;
        n |= n &amp;gt;&amp;gt;&amp;gt; 8;
        n |= n &amp;gt;&amp;gt;&amp;gt; 16;
        return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&amp;gt;&amp;gt;&amp;gt; 操作符表示无符号右移，高位取0&lt;br/&gt;2.HashMap(int)型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(int initialCapacity) {
    // 调用HashMap(int, float)型构造函数
    this(initialCapacity, DEFAULT_LOAD_FACTOR);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.HashMap()型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap() {
    // 初始化填充因子
    this.loadFactor = DEFAULT_LOAD_FACTOR; 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.HashMap(Map&amp;lt;? extends K&amp;gt;)型构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public HashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m) {
    // 初始化填充因子
    this.loadFactor = DEFAULT_LOAD_FACTOR;
    // 将m中的所有元素添加至HashMap中
    putMapEntries(m, false);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：putMapEntries(Map&amp;lt;? extends K, ? extends V&amp;gt; m, boolean evict)函数将m的所有元素存入本HashMap实例中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final void putMapEntries(Map&amp;lt;? extends K, ? extends V&amp;gt; m, boolean evict) {
    int s = m.size();
    if (s &amp;gt; 0) {
        // 判断table是否已经初始化
        if (table == null) { // pre-size
            // 未初始化，s为m的实际元素个数
            float ft = ((float)s / loadFactor) + 1.0F;
            int t = ((ft &amp;lt; (float)MAXIMUM_CAPACITY) ?
                    (int)ft : MAXIMUM_CAPACITY);
            // 计算得到的t大于阈值，则初始化阈值
            if (t &amp;gt; threshold)
                threshold = tableSizeFor(t);
        }
        // 已初始化，并且m元素个数大于阈值，进行扩容处理
        else if (s &amp;gt; threshold)
            resize();
        // 将m中的所有元素添加至HashMap中
        for (Map.Entry&amp;lt;? extends K, ? extends V&amp;gt; e : m.entrySet()) {
            K key = e.getKey();
            V value = e.getValue();
            putVal(hash(key), key, value, false, evict);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;重要函数分析&quot;&gt;3.3 重要函数分析&lt;/h3&gt;
&lt;p&gt;1.putVal&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, i;
    // table未初始化或者长度为0，进行扩容
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    // (n - 1) &amp;amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
    if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    // 桶中已经存在元素
    else {
        Node&amp;lt;K,V&amp;gt; e; K k;
        // 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
        if (p.hash == hash &amp;amp;&amp;amp;
            ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                // 将第一个元素赋值给e，用e来记录
                e = p;
        // hash值不相等，即key不相等；为红黑树结点
        else if (p instanceof TreeNode)
            // 放入树中
            e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
        // 为链表结点
        else {
            // 在链表最末插入结点
            for (int binCount = 0; ; ++binCount) {
                // 到达链表的尾部
                if ((e = p.next) == null) {
                    // 在尾部插入新结点
                    p.next = newNode(hash, key, value, null);
                    // 结点数量达到阈值，转化为红黑树
                    if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    // 跳出循环
                    break;
                }
                // 判断链表中结点的key值与插入的元素的key值是否相等
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    // 相等，跳出循环
                    break;
                // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表
                p = e;
            }
        }
        // 表示在桶中找到key值、hash值与插入元素相等的结点
        if (e != null) { 
            // 记录e的value
            V oldValue = e.value;
            // onlyIfAbsent为false或者旧值为null
            if (!onlyIfAbsent || oldValue == null)
                //用新值替换旧值
                e.value = value;
            // 访问后回调
            afterNodeAccess(e);
            // 返回旧值
            return oldValue;
        }
    }
    // 结构性修改
    ++modCount;
    // 实际大小大于阈值则扩容
    if (++size &amp;gt; threshold)
        resize();
    // 插入后回调
    afterNodeInsertion(evict);
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：HashMap并没有直接提供putVal接口给用户调用，而是提供的put函数，而put函数就是通过putVal来插入元素的。&lt;/p&gt;
&lt;p&gt;2.getNode&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final Node&amp;lt;K,V&amp;gt; getNode(int hash, Object key) {
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; int n; K k;
    // table已经初始化，长度大于0，根据hash寻找table中的项也不为空
    if ((tab = table) != null &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
        (first = tab[(n - 1) &amp;amp; hash]) != null) {
        // 桶中第一项(数组元素)相等
        if (first.hash == hash &amp;amp;&amp;amp; // always check first node
            ((k = first.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            return first;
        // 桶中不止一个结点
        if ((e = first.next) != null) {
            // 为红黑树结点
            if (first instanceof TreeNode)
                // 在红黑树中查找
                return ((TreeNode&amp;lt;K,V&amp;gt;)first).getTreeNode(hash, key);
            // 否则，在链表中查找
            do {
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：HashMap并没有直接提供getNode接口给用户调用，而是提供的get函数，而get函数就是通过getNode来取得元素的&lt;/p&gt;
&lt;p&gt;3.resize&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final Node&amp;lt;K,V&amp;gt;[] resize() {
    // 当前table保存
    Node&amp;lt;K,V&amp;gt;[] oldTab = table;
    // 保存table大小
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    // 保存当前阈值 
    int oldThr = threshold;
    int newCap, newThr = 0;
    // 之前table大小大于0
    if (oldCap &amp;gt; 0) {
        // 之前table大于最大容量
        if (oldCap &amp;gt;= MAXIMUM_CAPACITY) {
            // 阈值为最大整形
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        // 容量翻倍，使用左移，效率更高
        else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
            oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
            // 阈值翻倍
            newThr = oldThr &amp;lt;&amp;lt; 1; // double threshold
    }
    // 之前阈值大于0
    else if (oldThr &amp;gt; 0)
        newCap = oldThr;
    // oldCap = 0并且oldThr = 0，使用缺省值（如使用HashMap()构造函数，之后再插入一个元素会调用resize函数，会进入这一步）
    else {           
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    // 新阈值为0
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
    // 初始化table
    Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
    table = newTab;
    // 之前的table已经初始化过
    if (oldTab != null) {
        // 复制元素，重新进行hash
        for (int j = 0; j &amp;lt; oldCap; ++j) {
            Node&amp;lt;K,V&amp;gt; e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash &amp;amp; (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                    Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                    Node&amp;lt;K,V&amp;gt; next;
                    // 将同一桶中的元素根据(e.hash &amp;amp; oldCap)是否为0进行分割，分成两个不同的链表（如果e.hash &amp;amp; oldCap为1该entry可以分配到新的桶），完成rehash
                    do {
                        next = e.next;
                        if ((e.hash &amp;amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。扩容再hash的过程可以用下图表示：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171112125941731-1976919440.png&quot;/&gt;&lt;br/&gt;在resize的时候，oldtable数组结点可以分为三类：1.没有子链的非空结点（例如A1,A3）,2.空结点（例如A2）,3.带有子链的结点（例如A4）。&lt;br/&gt;对于第一种：resize后的位置根据 E.hash()&amp;amp;newCap-1 有两种可能，例如图中的：A1到B1或B5，A3到B3或 B7&lt;br/&gt;对于第二种：不必处理，例如A2&lt;br/&gt;对于第三种：数组结点以及子链上的结点，根据E.hash()&amp;amp;oldCap是否为0，分为两组，如果为0，根据图中的从A4到B4，如果不为0，从A4到A8&lt;/p&gt;
&lt;p&gt;4.hash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   static final int hash(Object key) {
        int h;
//返回Object的hashCode值的高十六位和低十六位的异或值
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之所以不直接使用hashCode值，是为了降低不同对象哈希值相同的可能，对象在table中序列值计算的算法是hash&amp;amp;（tab.length-1）。这就可以解释table的length为什么为2的幂次倍，图解如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053518/201711/1053518-20171109093044903-956091414.png&quot;/&gt;&lt;br/&gt;5.containsValue&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public boolean containsValue(Object value) {
        Node&amp;lt;K,V&amp;gt;[] tab; V v;
        if ((tab = table) != null &amp;amp;&amp;amp; size &amp;gt; 0) {
         //遍历每个桶
            for (int i = 0; i &amp;lt; tab.length; ++i) {
         //遍历某个桶中的所有结点
                for (Node&amp;lt;K,V&amp;gt; e = tab[i]; e != null; e = e.next) {
                    if ((v = e.value) == value ||
                        (value != null &amp;amp;&amp;amp; value.equals(v)))
                        return true;
                }
            }
        }
        return false;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四延伸&quot;&gt;四、延伸&lt;/h2&gt;
&lt;p&gt;在了解了HashMap之后，我们重新考虑下hashCode和equals的设计问题，例如有以下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class People{
    private String name;
    private int age;
     
    public People(String name,int age) {
        this.name = name;
        this.age = age;
    }  
     
    public void setAge(int age){
        this.age = age;
    }
 
public class Main {
 
    public static void main(String[] args) {
         
        People p1 = new People(&quot;Jack&quot;, 12);
        HashMap&amp;lt;People, Integer&amp;gt; hashMap = new HashMap&amp;lt;People, Integer&amp;gt;();
        hashMap.put(p1, 1);
         
        System.out.println(hashMap.get(new People(&quot;Jack&quot;, 12)));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述结果的输出值为Null,原因很简单，因为Object本地的hashCode方法与对象的地址有关，那么p1在hashMap中储存的数组序列号与new People(&quot;Jack&quot;,12)在hashMap中查找的位置不同，因此需要重写hashCode方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public int hashCode() {
        // TODO Auto-generated method stub
        return name.hashCode()*37+age;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行输出结果还是null，重写了hashCode方法我们保证了放和取的位置相同，但是getVal的细节是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (first.hash == hash &amp;amp;&amp;amp; // always check first node
                ((k = first.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                return first;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是==判断地址相同，显然(k = first.key) == key为false，那么(key != null &amp;amp;&amp;amp; key.equals(k))呢？由于我们没有重写equals方法，用的是Object的equals方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public boolean equals(Object obj) {
        return (this == obj);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很显然也返回false，结果返回不了，我们想到了重写equals方法，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    @Override
    public boolean equals(Object obj) {
        // TODO Auto-generated method stub
        return this.name.equals(((People)obj).name) &amp;amp;&amp;amp; this.age== ((People)obj).age;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候运行就成功输出1了，当然我们这里仅仅考虑了最简单的实现同时也是不规范的（同一对象的equals可能不同），没有考虑动态变化，例如：我们在将p1放进hashMap后，通过p1.setAge（11）改变age值，在调用hashMap.get（p1）也返回null，总的来说equals和hashCode的设计必须满足在前面所述的：&lt;br/&gt;1.对象equals为true,那么hashCode一定相同&lt;br/&gt;2.hashCode不同，那么equals一定为false&lt;/p&gt;
&lt;h2 id=&quot;五hashmap的优化&quot;&gt;五、HashMap的优化&lt;/h2&gt;
&lt;h3 id=&quot;扩容的效率问题&quot;&gt;4.1扩容的效率问题&lt;/h3&gt;
&lt;p&gt;从前面分析已知，当插入一个元素的时候size就加1，若size大于threshold的时候，就会进行扩容。假设我们的capacity大小为32，loadFator为0.75,则threshold为24 = 32 * 0.75，此时，插入了25个元素，并且插入的这25个元素都在同一个桶中，桶中的数据结构为红黑树，则还有31个桶是空的，为了元素能够更加均匀的分布在各个桶中，也会进行扩容处理，但是这次扩容可能对于之后元素的查询优化了一点点，可是扩容的代价可是巨大的，这也就是hashMap在使用的时候需要优化。&lt;/p&gt;
&lt;h3 id=&quot;hashmap优化&quot;&gt;4.2 hashMap优化&lt;/h3&gt;
&lt;p&gt;hashMap优化的目的主要有两个：1.减少hash冲突，减少查询的时间复杂度， 2.减少扩容的次数，因为扩容需要遍历所有的元素，这个代价是巨大的&lt;br/&gt;方法有以下几种：&lt;br/&gt;1.设计良好的hash函数是减少hash冲突的根本&lt;br/&gt;2.对于初始loadFactor和capacity的设定，有如下两种情况：&lt;br/&gt;1.如果知道大致需要的容量，把初始容量设置好以解决扩容损失；例如：现在有1000个数据，需要 1000/0.75 = 1333 ,又 1024 &amp;lt; 1333 &amp;lt; 2048，所以最好使用2048作为初始容量&lt;br/&gt;2.容量是动态变化的，我们尽量将capacity设置的大一点，loadFactor设置小一点，这既保证了hash冲突的可能性，也降低了扩容的可能性。&lt;/p&gt;
</description>
<pubDate>Sun, 12 Nov 2017 15:40:00 +0000</pubDate>
<dc:creator>unbelievableme</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kundeg/p/7779002.html</dc:identifier>
</item>
<item>
<title>express的学习，与使用 - 一灯evel</title>
<link>http://www.cnblogs.com/evaling/p/7823551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evaling/p/7823551.html</guid>
<description>&lt;p&gt;最近在学习vue的一个实战项目，碰到一个express,当时很萌，就随便看了看................&lt;/p&gt;
&lt;p&gt;expres是基于node 的一个web框架，&lt;/p&gt;
&lt;p&gt;首先可以找到它的官网照着学习&lt;/p&gt;
&lt;p&gt;这里只讲一些官网上没有的或者很晦涩的东西.........&lt;/p&gt;
&lt;p&gt;1）模版引擎的使用&lt;/p&gt;
&lt;p&gt;给出package.json的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{&lt;br/&gt;&quot;name&quot;: &quot;demo&quot;,&lt;br/&gt;&quot;version&quot;: &quot;1.0.0&quot;,&lt;br/&gt;&quot;description&quot;: &quot;&quot;,&lt;br/&gt;&quot;main&quot;: &quot;demo01.js&quot;,&lt;br/&gt;&quot;scripts&quot;: {&lt;br/&gt;&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;br/&gt;},&lt;br/&gt;&quot;author&quot;: &quot;&quot;,&lt;br/&gt;&quot;license&quot;: &quot;ISC&quot;,&lt;br/&gt;&quot;dependencies&quot;: {&lt;br/&gt;&quot;body-parser&quot;: &quot;^1.18.2&quot;,&lt;br/&gt;&quot;express&quot;: &quot;^4.16.2&quot;,&lt;br/&gt;&quot;hbs&quot;: &quot;~2.3.1&quot;,&lt;br/&gt;&quot;jade&quot;: &quot;^1.11.0&quot;&lt;br/&gt;}&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以npm install 一下，&lt;/p&gt;
&lt;p&gt;我这里要坐的就是使用express的路由兼模版引擎搭建一个小网站。&lt;/p&gt;
&lt;p&gt;2）首先你的建立几个文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112215641731-36750369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;node_modules：这个就不解释了，你稍微使用个就知道了。&lt;/p&gt;
&lt;p&gt;public：这个里面我们主要是放些css，images等文件&lt;/p&gt;
&lt;p&gt;views：是视图文件（主要放一些）&lt;/p&gt;
&lt;p&gt;blog.js：主要是数据（模拟数据）&lt;/p&gt;
&lt;p&gt;evel02.js：就是我的启动文件（大家习惯的是app.js）&lt;/p&gt;

&lt;p&gt;3）边看代码，遍解释&lt;/p&gt;
&lt;p&gt;evel02.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.jb51.net/article/58166.htm&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; bodyParser = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body-parser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; path = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app =&lt;span&gt; express();


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; hbs是express的众多模版之一，可以google一下去了解。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; hbs = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置模版引擎&lt;/span&gt;
app.&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view engine&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
app.engine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,hbs.__express);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载数据&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;var&lt;/span&gt; blogEngine = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./blog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);


&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;app.use(bodyParser());

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parse application/x-www-form-urlencoded&lt;/span&gt;
app.use(bodyParser.urlencoded({ extended: &lt;span&gt;false&lt;/span&gt;&lt;span&gt; }));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parse application/json&lt;/span&gt;
&lt;span&gt;app.use(bodyParser.json()) ;

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  res.render('index');&lt;/span&gt;
  res.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  {
    tile:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;最近的文章&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    entries:&lt;strong&gt;blogEngine.getBlogEntries()&lt;/strong&gt;
  });
});

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/about&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;res.render('about');&lt;br/&gt;　　//渲染页面&lt;/span&gt;
  res.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;about&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{title:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;自我介绍&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
});

app.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/article/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;res.render('article');&lt;/span&gt;
&lt;strong&gt;&lt;span&gt;var&lt;/span&gt; entry = blogEngine.getBlogEntry(req.&lt;span&gt;params&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;.id);&lt;/strong&gt;
res.render(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{title:entry.title,blog:entry});
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制定静态文件目录
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;app.use(express.static('public'));&lt;/span&gt;
app.use(express.&lt;span&gt;static&lt;/span&gt;(path.join(__dirname, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听3000端口&lt;/span&gt;
app.listen(&lt;span&gt;3000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;blog.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; entries =&lt;span&gt;[
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第一篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-1-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第二篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-2-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第三篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-3-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第四篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-4-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第五篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-5-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第六篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-6-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
  {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第七篇&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正文7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4-7-2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
];
&lt;span&gt;//倒出两个方法&lt;/span&gt;
exports.&lt;strong&gt;getBlogEntries &lt;/strong&gt;&lt;/span&gt;=&lt;span&gt; function(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries;
};

exports.&lt;strong&gt;getBlogEntry &lt;/strong&gt;&lt;/span&gt;=&lt;span&gt; function(id){
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;entries.length;i++&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(entries[i].id ==&lt;span&gt; id)
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries[i];
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;views（是express的默认视图文件夹）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112222127153-1541631088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;layout.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&lt;span&gt;
    {{{body}}}
   &lt;/span&gt;&amp;lt;footer&amp;gt;
      &amp;lt;p&amp;gt;
         &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt; - &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/about&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;自我介绍&amp;lt;/a&amp;gt;
      &amp;lt;/p&amp;gt;
   &amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;h1&amp;gt;文章列表&amp;lt;/h1&amp;gt;&lt;span&gt;
{{#each entries}}
   &lt;/span&gt;&amp;lt;p&amp;gt;
      &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/article/{{id}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{title}}&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&lt;span&gt;
      Published: {{published}}
   &lt;/span&gt;&amp;lt;/p&amp;gt;&lt;span&gt;
{{&lt;/span&gt;/&lt;span&gt;each}}  
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;article.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;&lt;span&gt;34333&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;span&gt;
    {{blog.title}}
  &lt;/span&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; --&amp;gt;


&amp;lt;h1&amp;gt;{{blog.title}}&amp;lt;/h1&amp;gt;&lt;span&gt;
Published: {{blog.published}}

&lt;/span&gt;&amp;lt;p/&amp;gt;&lt;span&gt;

{{blog.body}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;about.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;&lt;span&gt;
{{title}}
&lt;/span&gt;&amp;lt;p&amp;gt;正文&amp;lt;/p&amp;gt;
&amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt; --&amp;gt;


&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/css/style.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;h3&amp;gt;w文件上传递&amp;lt;/h3&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/pictures/upload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; enctype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multipart/form-data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
        Select an image to upload:
        &lt;/span&gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Upload Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里要解释一下，我的about.html模版是使用的html页面，当然你也可以使用hbs的模版&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;h1&amp;gt;自我介绍&amp;lt;/h1&amp;gt;&lt;span&gt;
{{title}}
&lt;/span&gt;&amp;lt;p&amp;gt;正文&amp;lt;/p&amp;gt;
&amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/images/q.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整学习实例参考：&lt;span&gt;&lt;span&gt;http://blog.csdn.net/ganxunzou/article/details/42918015&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;（知识共享，知识的搬运工）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;看完这片文章就在思考怎么将express与前端相结合起来呢？？？(我不轻易问问提的。。。。)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写个css的都知道前端框架有很多vue,angular,react，他们都有自己的路由机制，而且还是蛮好用的。。。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;探究一番。。。。&lt;/p&gt;
&lt;p&gt;文件目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112225022747-1799042157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;app.js&lt;/p&gt;
&lt;p&gt;(这个是没有使用express的模版引擎的，我要做的就是使用&lt;span&gt;express做接口数据层&lt;/span&gt;，&lt;span&gt;使用前端路由，访问接口地址，进行数据获取&lt;/span&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express = require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; path =require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routes = require(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./routes/index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);//

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app =&lt;span&gt; express();

app.use(express.&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;(path.join(__dirname,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)));

app.use(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,routes);

app.listen(&lt;/span&gt;&lt;span&gt;3001&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;routes/index.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; router =&lt;span&gt; express.Router();

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.render(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
    title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
  });
});

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.json({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});

router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.send({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});
router.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res,next){
  res.send({
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goinfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt;&lt;span&gt;
  })
});
module.exports &lt;/span&gt;=router;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看到这里可能有同学说这个和上面那个例子不是一样的吗？？？？&lt;/p&gt;
&lt;p&gt;不一样。。。区别就是res.send()，与res.render（）的区别，并且我也没用express的模板引擎&lt;/p&gt;
&lt;p&gt;res.send(),或者res.json（）是还回数据，res.render（）渲染页面&lt;/p&gt;
&lt;p&gt;public:(主要存放一些资源文件)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1137066/201711/1137066-20171112225702231-182477574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;p&gt;(使用vue框架，简单的搭建了几个页面，没有使用vue-cli,因为不是终点)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

    &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/vue2.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/vue_router.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../lib/axios.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

  &lt;span&gt;const&lt;/span&gt; Home=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is home page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; methods:{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   getData(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     axios.get('/').then(function(res){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       console.log(res);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }).catch(function(err){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       console.log(err);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     });
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; mounted(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   this.getData();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;
  };
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; foo=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is foo page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; bar=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is bar page&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;get('/bar'&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;.then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };

  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; goInfo=&lt;span&gt;{
    template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;this is foo goInfo&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    methods:{
      getData(){
        axios.&lt;/span&gt;&lt;strong&gt;&lt;span&gt;get('/goInfo'&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;.then(function(res){
          console.log(res);
        }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(function(err){
          console.log(err);
        });
      }
    },
    mounted(){
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getData();
    }
  };
   &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; router =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
       mode:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;history&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
       routes:
     [
        {
          path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
          name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
          component:Home,
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; children:[
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     {path:'foo',name:'foo',component:foo},
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;        },
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:foo},
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:bar},
        {path:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goinfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,component:goInfo},
     ]
   })

  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; mou = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    router,
    template:`
      &lt;/span&gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;h1&amp;gt;Name Routes&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;currnt route &amp;lt;/p&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'home'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;home&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'foo'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;foo&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'bar'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;bar&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;router-link :to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{name:'goinfo'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;goinfo&amp;lt;/router-link&amp;gt;
          &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
      &amp;lt;/div&amp;gt;&lt;span&gt;
    `
  });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后你直接在命令行输入： node app.js&lt;/p&gt;
&lt;p&gt;访问localhost:3000&lt;/p&gt;

&lt;p&gt;&lt;span&gt;主要的已经讲完了，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来补充几点：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若要设置HTTP头部信息&lt;/span&gt;
app.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/htp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,function(req,res){
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
  res.setHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/plain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  res.setHeader(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,body.length);
  res.setHeader(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;expire&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nocache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  res.send(body);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考例子：&lt;span&gt;&lt;span&gt;http://www.cnblogs.com/KevinSong/p/4495729.html#3837987&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;例子源码地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;https://github.com/EvalGitHub/myExpress&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:34:00 +0000</pubDate>
<dc:creator>一灯evel</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evaling/p/7823551.html</dc:identifier>
</item>
<item>
<title>java自定义注解 - 纯新手</title>
<link>http://www.cnblogs.com/alone-striver/p/7823550.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alone-striver/p/7823550.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;　　注解是Java 1.5引入的，目前已被广泛应用于各种Java框架，如Hibernate，&lt;a class=&quot;external&quot; href=&quot;http://www.journaldev.com/498/rest-using-jersey-complete-tutorial-with-jaxb-exception-handling-and-client-program&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Jersey&lt;/a&gt;，Spring。注解相当于是一种嵌入在程序中的元数据，可以使用注解解析工具或编译器对其进行解析，也可以指定注解在编译期或运行期有效。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Java SE5内置了&lt;span&gt;三种标准注解:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. &lt;strong&gt;@Override&lt;/strong&gt;——当我们想要复写父类中的方法时，我们需要使用该注解去告知编译器我们想要复写这个方法。这样一来当父类中的方法移除或者发生更改时编译器将提示错误信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. &lt;strong&gt;@Deprecated&lt;/strong&gt;——当我们希望编译器知道某一方法不建议使用时，我们应该使用这个注解。Java在javadoc 中推荐使用该注解，我们应该提供为什么该方法不推荐使用以及替代的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;strong&gt;@SuppressWarnings&lt;/strong&gt;——这个仅仅是告诉编译器忽略特定的警告信息，例如在泛型中使用原生数据类型。它的保留策略是SOURCE（译者注：在源文件中有效）并且被编译器丢弃。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　创建Java自定义注解，这里有&lt;span&gt;四种类型的元注解&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. &lt;strong&gt;@Documented&lt;/strong&gt; —— 指明拥有这个注解的元素可以被javadoc此类的工具文档化。这种类型应该用于注解那些影响客户使用带注释的元素声明的类型。如果一种声明使用&lt;strong&gt;Documented&lt;/strong&gt;进行注解，这种类型的注解被作为被标注的程序成员的公共API。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. &lt;strong&gt;@Target&lt;/strong&gt;——指明该类型的注解可以注解的程序元素的范围。该元注解的取值可以为TYPE,METHOD,CONSTRUCTOR,FIELD等。如果&lt;strong&gt;Target&lt;/strong&gt;元注解没有出现，那么定义的注解可以应用于程序的任何元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;strong&gt;@Inherited&lt;/strong&gt;——指明该注解类型被自动继承。如果用户在当前类中查询这个元注解类型并且当前类的声明中不包含这个元注解类型，那么也将自动查询当前类的父类是否存在&lt;strong&gt;Inherited&lt;/strong&gt;元注解，这个动作将被重复执行知道这个标注类型被找到，或者是查询到顶层的父类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4.&lt;strong&gt;@Retention&lt;/strong&gt;——指明了该Annotation被保留的时间长短。RetentionPolicy取值为SOURCE,CLASS,RUNTIME。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义注解的例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、新建自定义注解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112232932419-1595793792.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2、使用注解的类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112233105044-518342371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、提取注解的参数。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/762751/201711/762751-20171112233246575-112751966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:34:00 +0000</pubDate>
<dc:creator>纯新手</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alone-striver/p/7823550.html</dc:identifier>
</item>
<item>
<title>再学习之MyBatis - JMCui</title>
<link>http://www.cnblogs.com/jmcui/p/7801871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jmcui/p/7801871.html</guid>
<description>&lt;h2&gt;一、框架基本介绍&lt;/h2&gt;
&lt;h4&gt;1、概念&lt;/h4&gt;
&lt;p&gt;支持普通SQL查询、存储过程和高级映射，简化和实现了Java 数据持久化层的的开源框架，主要流行的原因在于他的简单性和易使用性。&lt;/p&gt;
&lt;h4&gt;2、特点&lt;/h4&gt;
&lt;p&gt;持久层 、ORM(对象关系映射) 、轻量级、支持SQL语句。&lt;/p&gt;
&lt;h4&gt;3、工作原理&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;应用程序读取mybatis的配置文件，形成配置对象。&lt;/li&gt;
&lt;li&gt;通过sqlsessionfactorybuilder读取配置对象，产生sqlsessionfactory&lt;/li&gt;
&lt;li&gt;通过sqlsessionfactory得到sqlsession&lt;/li&gt;
&lt;li&gt;通过sqlsession得到mapper映射器&lt;/li&gt;
&lt;li&gt;通过mapper读取对应的映射文件从而操作数据库&lt;/li&gt;
&lt;li&gt;处理事务&lt;/li&gt;
&lt;li&gt;释放sqlsession&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二、配置文件含义&lt;/h2&gt;
&lt;h3&gt;1、environment   &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0f40aa9f-d323-44d6-a6c8-e1ff16007c83')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0f40aa9f-d323-44d6-a6c8-e1ff16007c83',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0f40aa9f-d323-44d6-a6c8-e1ff16007c83&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;admin&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;transactionManager&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JNDI&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;admin&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 主要用来配置多个dataSource环境；在同一个环境中切换不同的dataSource时，需要为每个数据库创建一个SqlSessionFactory。对于每个环境 environment,我们需要配置 dataSource 和 transactionManager。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;1.1 DateSource&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;UNPOOLED:为每一个数据库操作创建一个新的连接，使用结束就关闭他。该方式适用于小规模数量的并发用户的简单应用程序上。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;POOLED:Mybatis会创建一个数据库连接池，连接池中的一个连接将会被用作数据库操作。一旦数据库操作完成，MyBatis 会将此连接返回给连接池。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;JNDI：MyBatis 从在应用服务器向配置好的 JNDI 数据源 dataSource 获取数据库连接。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;1.2 TransactionManager&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;JDBC：应用程序自己管理事务（Tomcat）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MANAGED：应用本身不去管理事务，而把事务管理交给应用所在的服务器进行管理。(JBoss、WebLogic、GlassFish)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2、properties&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3e7db1ce-76f8-4216-a5c3-b6b04b62a730')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3e7db1ce-76f8-4216-a5c3-b6b04b62a730',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3e7db1ce-76f8-4216-a5c3-b6b04b62a730&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;application.properties&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc.username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;db_user&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc.password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;verysecurepwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里，如果 application.properties 文件包含值 jdbc.username 和 jdbc.password，则上述定义的 username 和password 的值 db_user 和 verysecurepwd 将会被 application.properties 中定义的对应的 jdbc.username 和jdbc.password 值覆盖。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3、typeAliases&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;如果没有设置typeAliases的类型别名，对于resultType和parameterType属性值，我们需要使用JavaBean的完全限定名。所以，我们可以为完全限定名使用别名，通过typeAliases设置：&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;3.1 为每个JavaBean单独起别名&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ec36f25b-e2b8-40a9-9e77-e8b9f67ee29f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;alias&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain.Student&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;alias&lt;/span&gt;&lt;span&gt;=&quot;Tutor&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain.Tutor&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h5&gt;3.2 为JavaBean 所在的包起别名&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;当然也可以不用为每一个JavaBean 单独定义别名，你可以为提供需要起别名的JavaBean 所在的包，Mybatis会自动扫描包内定义的JavaBeans，然后分别为JavaBean注册一个小写字母开头的非完全限定的类名形式的别名。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cdcee050-6d21-4095-b097-a7f6e78dbdb0')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cdcee050-6d21-4095-b097-a7f6e78dbdb0',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cdcee050-6d21-4095-b097-a7f6e78dbdb0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.domain&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果 Student.java 和 Tutor.java 的 Bean 定义在 com.mybatis3.domain 包中，则 com.mybatis3.domain.Student的别名会被注册为 student。而 com.mybatis3.domain.Tutor 别名将会被注册为 tutor。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt; 3.3 利用注解的方式起别名&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;使用注解@Alias起别名，@Alias 注解将会覆盖配置文件中的&amp;lt;typeAliases&amp;gt;定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_61c73b1b-359a-4b4b-9b2b-0a3eb0ea22b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Alias(&quot;StudentAlias&quot;)
public class Student
{ }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;4、typeHandlers&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;MyBatis 对于以下的类型使用内建的类型处理器：所有的基本数据类型、基本类型的包装类型、 byte[]、java.util.Date、 java.sql.Date、 java,sql.Time、 java.sql.Timestamp、 java 枚举类型等。所以当 MyBatis 发现属性的类型属于上述类型，他会使用对应的类型处理器将值设置到PreparedStatement 中，同样地，当从 SQL 结果集构建 JavaBean 时，也有类似的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果，我们可以自定义一个类型处理器为我们子定义的Class服务。&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;一旦我们实现了自定义的类型处理器，我们需要在&lt;/span&gt; &lt;span class=&quot;fontstyle2&quot;&gt;&lt;span&gt;mybatis-config.xml&lt;/span&gt; &lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;中注册它：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d3ff08c5-57ad-4bb5-a4e1-0b04c4557362')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d3ff08c5-57ad-4bb5-a4e1-0b04c4557362',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d3ff08c5-57ad-4bb5-a4e1-0b04c4557362&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
 */
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PhoneTypeHandler &lt;span&gt;extends&lt;/span&gt; BaseTypeHandler&amp;lt;PhoneNumber&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setNonNullParameter(PreparedStatement preparedStatement, &lt;span&gt;int&lt;/span&gt; i, PhoneNumber phoneNumber, JdbcType jdbcType) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        preparedStatement.setString(i, phoneNumber.toString());
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(ResultSet resultSet, String s) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(resultSet.getString(s));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(ResultSet resultSet, &lt;span&gt;int&lt;/span&gt; i) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(resultSet.getString(i));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PhoneNumber getNullableResult(CallableStatement callableStatement, &lt;span&gt;int&lt;/span&gt; i) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhoneNumber(callableStatement.getString(i));
    }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;自定义类型处理器&lt;/span&gt; &lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d510128c-5256-4f41-ba05-869fa5009848')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d510128c-5256-4f41-ba05-869fa5009848',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d510128c-5256-4f41-ba05-869fa5009848&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeHandlers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeHandler &lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;=&quot;com.summersoft.ts.util.PhoneTypeHandler&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeHandlers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注册自定义类型处理器&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 时间类型：Mybatis 会将java.util.Data 类型转换成java.sql.Timestamp（时间戳）并设置。&lt;/p&gt;
&lt;h3&gt;5、&lt;span class=&quot;fontstyle0&quot;&gt;Mappers&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e0411f79-0d67-4040-953b-001e21d6a834')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e0411f79-0d67-4040-953b-001e21d6a834',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e0411f79-0d67-4040-953b-001e21d6a834&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/mybatis3/mappers/StudentMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;=&quot;file:///D:/mybatisdemo/app/mappers/TutorMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.mappers.TutorMapper&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.mybatis3.mappers&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;resource 属性用来指定在 classpath 中的 mapper 文件。&lt;/li&gt;
&lt;li&gt;url 属性用来通过完全文件系统路径或者 web URL 地址来指向 mapper 文件&lt;/li&gt;
&lt;li&gt;class 属性用来指向一个 mapper 接口&lt;/li&gt;
&lt;li&gt;package 属性用来指向可以找到 Mapper 接口的包名&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;三、映射文件讲解&lt;/h2&gt;
&lt;p&gt;  我们通过映射器配置文件配置了映射语句，同时创建一个完全对应的一个映射器接口。接口名跟配置文件名相同。接口所在包名也跟配置文件所在包名完全一 样。在配置文件中，其命名空间namespace 应该和接口的完全限定名保持一致。&lt;/p&gt;
&lt;h3&gt;1、INSERT&lt;/h3&gt;
&lt;p&gt;id： 对应接口的方法名&lt;br/&gt;parameterType： 输入参数&lt;br/&gt;useGeneratedKeys=&quot;true&quot; ：让数据库生成自增长的列&lt;br/&gt;keyProperty=&quot;属性名&quot;： 将生成的值设置到其中一个输入对象属性内&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是Oracle数据库，没有像MySQL那样的自增机制：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0ec1615c-0bfd-4b77-814c-aafd2d71db45')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0ec1615c-0bfd-4b77-814c-aafd2d71db45',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ec1615c-0bfd-4b77-814c-aafd2d71db45&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;BEFORE&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT ELEARNING.STUD_ID_SEQ.NEXTVAL FROM DUAL
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO STUDENTS(STUD_ID,NAME,EMAIL, PHONE)
        VALUES(#{studId},#{name},#{email},#{phone})
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;order=&quot;BEFORE&quot; 表示在插入语句发生前产生studId的值就赋给插入语句。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0e612462-f894-4e5b-975e-3a606dea5a66')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0e612462-f894-4e5b-975e-3a606dea5a66',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0e612462-f894-4e5b-975e-3a606dea5a66&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        INSERT INTO STUDENTS(NAME,EMAIL, PHONE)
        VALUES(#{name},#{email},#{phone})
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;selectKey &lt;/span&gt;&lt;span&gt;keyProperty&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; order&lt;/span&gt;&lt;span&gt;=&quot;AFTER&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            SELECT ELEARNING.STUD_ID_SEQ.CURRVAL FROM DUAL
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;selectKey&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; order=&quot;AFTER&quot; 表示在插入语句之后采用触发器(trigger)来设置主键值&lt;/p&gt;
&lt;h3&gt;2、SELECT&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2.1、&lt;/strong&gt; resultType='Student' 当 column名和对象property名一致时，会自动把相应的column填充上对象的property，如果查询记录返回多条，Mybatis 自动用 集合类来接收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2、&lt;/strong&gt;Mybatis根据集合的类型，会采用适当的集合实现：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于 List，Collection，Iterable 类型，MyBatis 将返回 java.util.ArrayList&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 Map 类型，MyBatis 将返回 java.util.HashMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 Set 类型，MyBatis 将返回 java.util.HashSet&lt;/span&gt;&lt;br/&gt;&lt;span&gt;对于 SortedSet 类型，MyBatis 将返回 java.util.TreeSet&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3、&lt;/strong&gt;ResultType 和 ResuleMap 不能同时使用，ResultMap的 id 在此命名空间内是唯一的 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4、&lt;/strong&gt;Resulttype=&quot;java.util.HashMap&quot;。在这种情况下，结果集中的列名将会作为Map中的key值，而列值作值将会作为Map的value值。如果查询记录返回多条，Mybatis自动用集合类来接收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5、&lt;/strong&gt;我们可以从另外一个&amp;lt;resultMap&amp;gt;,扩展出一个新的&amp;lt;resultMap&amp;gt;,这样原来的属性值可以扩展过来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.6、&lt;/strong&gt;一对一关联查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45980449-83c0-47d9-b851-c25692b97557')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('45980449-83c0-47d9-b851-c25692b97557',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45980449-83c0-47d9-b851-c25692b97557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;phone&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;phone&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address.country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一直接关联&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fb0aa9bf-2ba6-46a3-b267-3336e6768f78')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fb0aa9bf-2ba6-46a3-b267-3336e6768f78',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fb0aa9bf-2ba6-46a3-b267-3336e6768f78&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Address&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;AddressResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResultIn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;AddressResult&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一嵌套关联&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('90012de3-59ce-464e-b1f5-970781a6b842')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('90012de3-59ce-464e-b1f5-970781a6b842',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_90012de3-59ce-464e-b1f5-970781a6b842&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;StudentWithAddressResultHasOne&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;stud_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;address&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;Address&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;addrId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;addr_id&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;street&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;city&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;state&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;zip&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;country&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一对一内联关联has one&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.7、&lt;/strong&gt;一对多关联查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ad9660a5-85b2-4018-b368-619f1b413a9c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ad9660a5-85b2-4018-b368-619f1b413a9c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ad9660a5-85b2-4018-b368-619f1b413a9c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Course&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;course_id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;courseId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;start_date&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;startDate&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;end_date&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;endDate&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Tutor&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;TutorResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tutor_id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;tutorId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tutor_name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;courses&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.8、&lt;/strong&gt;在MyBatis的配置文件中，可以不指定输入参数。而采用#{param1}和#{param2}引用接口中方法的形参。&lt;/p&gt;
&lt;h3&gt; 3、动态SQL&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3.1&lt;/strong&gt; if 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('66a4b784-4f09-4a19-8b4b-66a08e916456')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('66a4b784-4f09-4a19-8b4b-66a08e916456',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_66a4b784-4f09-4a19-8b4b-66a08e916456&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
          SELECT * FROM COURSES
          WHERE TUTOR_ID= #{tutorId}
          &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND NAME LIKE #{courseName}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;startDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND START_DATE &amp;gt; #{startDate}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;endDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              AND END_DATE  &lt;/span&gt;&lt;span&gt;&amp;amp;lt;&lt;/span&gt;&lt;span&gt; #{endDate}
          &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;if 语句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.2&lt;/strong&gt; choose when条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fcb35f29-f68c-4188-92d6-837117e07af9')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fcb35f29-f68c-4188-92d6-837117e07af9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fcb35f29-f68c-4188-92d6-837117e07af9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCoursesTwo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;searchBy == 'Tutor'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;searchBy == 'CourseName'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                WHERE TUTOR start_date &amp;gt;= now()
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;choose when 条件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;choose&amp;gt;测试条件的值，且使用第一个值为TRUE的子句，如果没有条件为True，则使用&amp;lt;otherwise&amp;gt;内的字句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3&lt;/strong&gt; where 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d8453b14-f1f4-4ecc-8368-0887d9778fb6')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d8453b14-f1f4-4ecc-8368-0887d9778fb6',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d8453b14-f1f4-4ecc-8368-0887d9778fb6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt;
            resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot; tutorId != null &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;startDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND start_date &amp;gt;= #{startDate}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;endDate != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND end_date  &lt;/span&gt;&lt;span&gt;&amp;amp;lt;&lt;/span&gt;&lt;span&gt;= #{endDate}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Where 子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;where&amp;gt;元素只有在内部标签有返回内容时才会在动态语句上插入WHERE条件语句。并且，如果Where子句以AND 或者 OR 打头，则打头的AND 或 OR 将会被移除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.4&lt;/strong&gt; trim 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f37cddc4-35db-4125-ab5a-03a084b23446')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f37cddc4-35db-4125-ab5a-03a084b23446',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f37cddc4-35db-4125-ab5a-03a084b23446&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCourses&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;WHERE&quot;&lt;/span&gt;&lt;span&gt; prefixOverrides&lt;/span&gt;&lt;span&gt;=&quot;AND | OR&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            /*拼接成的字句前面加上WHERE，如果WHERE后面有AND 或者 OR，将去掉。suffix末尾加上，suffixOverrides 末尾去掉*/
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot; tutorId != null &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                TUTOR_ID= #{tutorId}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;courseName != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                AND name like #{courseName}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;trim 子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; &amp;lt;trim&amp;gt; 元素和 &amp;lt;where&amp;gt;元素类似，如果任意一个&amp;lt;if&amp;gt;条件为true，&amp;lt;trim&amp;gt;元素会插入WHERE，并且移除紧跟WHERE 后面的AND 或 OR&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.5&lt;/strong&gt; foreach 循环&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f58725b2-a4c4-478a-bf91-1fc05a2bd703')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f58725b2-a4c4-478a-bf91-1fc05a2bd703',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f58725b2-a4c4-478a-bf91-1fc05a2bd703&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;searchCoursesByTutors&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;CourseResult&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT * FROM COURSES
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;tutorIds != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;tutorId&quot;&lt;/span&gt;&lt;span&gt; collection&lt;/span&gt;&lt;span&gt;=&quot;tutorIds&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    OR tutor_id=#{tutorId}
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;foreach子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;它可以迭代遍历一个数组或者列表，构造AND/OR条件或者一个IN子句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.6&lt;/strong&gt; set 条件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('15eb9bd7-a0c4-451c-8acc-976d627315e9')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('15eb9bd7-a0c4-451c-8acc-976d627315e9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15eb9bd7-a0c4-451c-8acc-976d627315e9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateStudent&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        update students
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;name=#{name},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;email != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;email=#{email},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;phone != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;phone=#{phone},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        where stud_id=#{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;set子句&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;如果&amp;lt;if&amp;gt;条件返回了任何文本内容，&amp;lt;set&amp;gt;将会插入set关键字和其文本内容。并且会剔除末尾的&quot;,&quot;&lt;/p&gt;
&lt;h3&gt; 4、缓存&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;4.1、&lt;/strong&gt;第一级缓存：如果你使用同一个SqlSession 接口对象调用了相同的SELECT语句，则直接会从缓存中返回结果，而不是再查询一次数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2、&lt;/strong&gt;第二级缓存：我们可以在SQL映射器XML配置文件中使用&amp;lt;cache /&amp;gt;元素添加全局二级缓存。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;所有的在映射语句文件定义的&amp;lt;select&amp;gt;语句的查询结果都会被缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所有的在映射语句文件定义的&amp;lt;insert&amp;gt;,&amp;lt;update&amp;gt; 和&amp;lt;delete&amp;gt;语句将会刷新缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存根据最近最少被使用（Least Recently Used，LRU）算法管理&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存不会被任何形式的基于时间表的刷新（没有刷新时间间隔），即不支持定时刷新机制&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存将存储 1024 个 查询方法返回的列表或者对象的引用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;缓存是线程安全的&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然我们也可以 复写默认属性来自定义缓存的行为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;cache &lt;/span&gt;&lt;span&gt;eviction&lt;/span&gt;&lt;span&gt;=&quot;FIFO&quot;&lt;/span&gt;&lt;span&gt; flushInterval&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;512&quot;&lt;/span&gt;&lt;span&gt; readOnly&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eviction：LRU、FIFO、SOFT、WEAK&lt;br/&gt;readOnly：一个只读的缓存会向调用者返回被缓存对象的一份引用。一个读/写缓存cache将会返回改对象的一份拷贝。&lt;/p&gt;



</description>
<pubDate>Sun, 12 Nov 2017 15:30:00 +0000</pubDate>
<dc:creator>JMCui</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jmcui/p/7801871.html</dc:identifier>
</item>
<item>
<title>分页查询时，使用cookie保存上次的查询条件。jQuery实现方法以及中间遇到的坑 - 宇的季节</title>
<link>http://www.cnblogs.com/chenkeyu/p/7823528.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenkeyu/p/7823528.html</guid>
<description>&lt;p&gt;今天做分页查询时需要在跳转页面时保存上次查询的条件，如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171112232021934-1573825167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 实现的大致思路就是用cookie本地保存。&lt;/p&gt;
&lt;p&gt;其中需要用到jQuery.Cookie&lt;span&gt;插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用方法很简单：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　存数据：$.cookie(“key”,”value”);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　取数据：&lt;/span&gt;$.cookie(“key”);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的实现方法就是在每次点击&lt;/span&gt;“查询”按钮时，把查询的条件放入&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在页面初始化时，会调用&lt;/span&gt;jQuery&lt;span&gt;，这时把&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;存放的值从新放入表单中。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当点击提交时把查询的参数存到cookie&lt;/span&gt;
                $(&quot;#condition&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    $.cookie(&lt;/span&gt;'c_name', $(&quot;input[name='c_name']&quot;&lt;span&gt;).val());
                    $.cookie(&lt;/span&gt;'c_id', $(&quot;select[name='c_id']&quot;&lt;span&gt;).val());
                    $.cookie(&lt;/span&gt;'s_id', $(&quot;select[name='s_id']&quot;&lt;span&gt;).val());
                    
                })
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert($(&quot;select[name='c_id']&quot;).val()+&quot;:&quot;+$(&quot;select[name='s_id']&quot;).val())&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载页面时将之前提交的参数赋值&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;($.cookie('c_name')!=0&amp;amp;&amp;amp;$.cookie('c_name')!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;input[name='c_name']&quot;).val($.cookie('c_name'&lt;span&gt;));
                }
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.cookie('c_id')!=0&amp;amp;&amp;amp;$.cookie('c_id')!=&quot;null&quot;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;select[name='c_id']&quot;).val($.cookie('c_id'&lt;span&gt;));
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.cookie('s_id')!=0&amp;amp;&amp;amp;$.cookie('s_id')!=&quot;null&quot;&lt;span&gt;){
                    $(&lt;/span&gt;&quot;select[name='s_id']&quot;).val($.cookie('s_id'&lt;span&gt;));
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　实现步骤很简单，但是其中却有一个坑：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在把&lt;/span&gt;cookie&lt;span&gt;的值插入表单前，需要进行验证，看值是不是&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;或者空值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为第一次打开页面时&lt;/span&gt;cookie&lt;span&gt;是没有值，如果不验证就会出现下面这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171112232253778-1955638358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正常情况下进行非空验证需要下面两步：&lt;/p&gt;
&lt;p&gt;$.cookie('c_id')!=0 &amp;amp;&amp;amp; $.cookie('c_id')!=null&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是当我使用却发现即使没存值，&lt;/span&gt;.cookie(“c_id”)!=null&lt;span&gt;也返回&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;最后搞了很久发现，当&lt;/span&gt;null&lt;span&gt;值存入&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;时，是存入了一个&lt;/span&gt;”null”&lt;span&gt;的字符串。不仅如此，对&lt;/span&gt;true&lt;span&gt;、&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;，也是这样的处理，所以在进行比较时就需要加双引号：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$.cookie('c_id')!=0 &amp;amp;&amp;amp; $.cookie('c_id')!=”null”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这时我就思考了一下，可能不止&lt;/span&gt;cookie&lt;span&gt;，对于其他一些&lt;/span&gt;&lt;span&gt;key-value&lt;/span&gt;&lt;span&gt;类型的容器，对&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;等这些特殊符号可能也是做字符串处理，大家以后一定要注意。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 12 Nov 2017 15:26:00 +0000</pubDate>
<dc:creator>宇的季节</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenkeyu/p/7823528.html</dc:identifier>
</item>
</channel>
</rss>