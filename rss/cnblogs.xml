<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>google guava cache缓存基本使用讲解 - vikde</title>
<link>http://www.cnblogs.com/vikde/p/8045226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vikde/p/8045226.html</guid>
<description>&lt;p&gt;代码地址：https://github.com/vikde/demo-guava-cache&lt;/p&gt;
&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;guava cache是google guava中的一个内存缓存模块,用于将数据缓存到JVM内存中.实际项目开发中经常将一些比较公共或者常用的数据缓存起来方便快速访问.&lt;/p&gt;
&lt;p&gt;内存缓存最常见的就是基于HashMap实现的缓存,为了解决并发问题也可能也会用到ConcurrentHashMap等并发集合,但是内存缓存需要考虑很多问题,包括并发问题、缓存过期机制、缓存移除机制、缓存命中统计率等.&lt;/p&gt;
&lt;p&gt;guava cache已经考虑到这些问题,可以上手即用.通过CacheBuilder创建缓存、然后设置缓存的相关参数、设置缓存的加载方法等.本例子主要讲解guava cache的基本用法,详细的说明已在代码中说明.&lt;/p&gt;

&lt;h2&gt;二、代码示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.vikde.demo.guava.cache;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.CacheBuilder;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.CacheLoader;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.LoadingCache;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Random;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * google guava cache 缓存demo
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; vikde
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * @date 2017/12/14
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoGuavaCache {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         LoadingCache&amp;lt;Integer, String&amp;gt; cache =&lt;span&gt; CacheBuilder.newBuilder()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置并发级别为8，并发级别是指可以同时写缓存的线程数&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                                                           .concurrencyLevel(8&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存容器的初始容量为10&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                                                           .initialCapacity(10&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存最大容量为100，超过100之后就会按照LRU最近虽少使用算法来移除缓存项&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                                                           .maximumSize(100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否需要统计缓存情况,该操作消耗一定的性能,生产环境应该去除&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                                                          .recordStats()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置写缓存后n秒钟过期&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                                                           .expireAfterWrite(17&lt;span&gt;, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;.expireAfterAccess(17, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只阻塞当前数据加载线程，其他线程返回旧值
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;.refreshAfterWrite(13, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存的移除通知&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                                                           .removalListener(notification -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                                                               System.out.println(notification.getKey() + &quot; &quot; + notification.getValue() + &quot; 被移除,原因:&quot; +&lt;span&gt; notification.getCause());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                                                          })
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;build方法中可以指定CacheLoader，在缓存不存在时通过CacheLoader的实现自动加载缓存&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                                                           .build(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DemoCacheLoader());
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟线程并发&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;非线程安全的时间格式化工具&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             SimpleDateFormat simpleDateFormat = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;HH:mm:ss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 15; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                     String value = cache.get(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     System.out.println(Thread.currentThread().getName() + &quot; &quot; + simpleDateFormat.format(&lt;span&gt;new&lt;/span&gt; Date()) + &quot; &quot; +&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     TimeUnit.SECONDS.sleep(3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ignored) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }).start();
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             SimpleDateFormat simpleDateFormat = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;HH:mm:ss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                     String value = cache.get(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                     System.out.println(Thread.currentThread().getName() + &quot; &quot; + simpleDateFormat.format(&lt;span&gt;new&lt;/span&gt; Date()) + &quot; &quot; +&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                     TimeUnit.SECONDS.sleep(5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ignored) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }).start();
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存状态查看&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        System.out.println(cache.stats().toString());
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;     * 随机缓存加载,实际使用时应实现业务的缓存加载逻辑,例如从数据库获取数据
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DemoCacheLoader &lt;span&gt;extends&lt;/span&gt; CacheLoader&amp;lt;Integer, String&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; String load(Integer key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot; 加载数据开始&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             TimeUnit.SECONDS.sleep(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;             Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot; 加载数据结束&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;value:&quot; + random.nextInt(10000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三、策略分析&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;expireAfterWrite 写缓存后多久过期
expireAfterAccess 读写缓存后多久过期
refreshAfterWrite 写入数据后多久过期,只阻塞当前数据加载线程,其他线程返回旧值

这几个策略时间可以单独设置,也可以组合配置
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;expireAfterWrite与refreshAfterWrite单独使用与混合使用的策略分析&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;已知配置条件:
Thread-1 每 3 秒获取一次缓存id=1的数据
Thread-2 每 5 秒获取一次缓存id=1的数据
加载一次缓存加载数据耗时 8 秒
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;1、expireAfterWrite单独使用&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:04:07 value:6798
Thread-2 01:04:07 value:6798
Thread-1 01:04:10 value:6798
Thread-2 01:04:12 value:6798
Thread-1 01:04:13 value:6798
Thread-1 01:04:16 value:6798
Thread-2 01:04:17 value:6798
Thread-1 01:04:19 value:6798
Thread-1 01:04:22 value:6798
Thread-2 01:04:22 value:6798
1 value:6798 被移除,原因:EXPIRED
Thread-1 加载数据开始
Thread-1 加载数据结束
Thread-1 01:04:33 value:7836
Thread-2 01:04:33 value:7836
Thread-1 01:04:36 value:7836
Thread-2 01:04:38 value:7836
Thread-1 01:04:39 value:7836
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2本应该01:04:22后的5秒加载数据,但是Thread-1等待3秒后加载,数据加载耗时8秒,所以Thread-2在01:04:33时加载数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成.&lt;/p&gt;
&lt;h3&gt;2、refreshAfterWrite单独使用&lt;/h3&gt;
&lt;p&gt;refreshAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:13:32 value:551
Thread-2 01:13:32 value:551
Thread-1 01:13:35 value:551
Thread-2 01:13:37 value:551
Thread-1 01:13:38 value:551
Thread-1 01:13:41 value:551
Thread-2 01:13:42 value:551
Thread-1 01:13:44 value:551
Thread-1 01:13:47 value:551
Thread-2 01:13:47 value:551
Thread-1 加载数据开始
Thread-2 01:13:52 value:551
Thread-2 01:13:57 value:551
Thread-1 加载数据结束
1 value:551 被移除,原因:REPLACED
Thread-1 01:13:58 value:827
Thread-1 01:14:01 value:827
Thread-2 01:14:02 value:827
Thread-1 01:14:04 value:827
Thread-2 01:14:07 value:827
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2仍然按照策略获取到旧数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当没有数据的时候,其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成;如果有数据的情况下其他线程正在加载数据,当前线程返回旧数据.&lt;/p&gt;
&lt;h3&gt;3、expireAfterWrite与refreshAfterWrite一起使用情况一&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=13&lt;/p&gt;
&lt;p&gt;refreshAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:18:32 value:5901
Thread-2 01:18:32 value:5901
Thread-1 01:18:35 value:5901
Thread-2 01:18:37 value:5901
Thread-1 01:18:38 value:5901
Thread-1 01:18:41 value:5901
Thread-2 01:18:42 value:5901
Thread-1 01:18:44 value:5901
1 value:5901 被移除,原因:EXPIRED
Thread-1 加载数据开始
Thread-1 加载数据结束
Thread-2 01:18:55 value:1300
Thread-1 01:18:55 value:1300
Thread-1 01:18:58 value:1300
Thread-2 01:19:00 value:1300
Thread-1 01:19:01 value:1300
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2本应该01:18:42后的5秒加载数据,但是Thread-1等待3秒后加载,数据加载耗时8秒,所以Thread-2在01:18:55时加载数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成,与单独使用expireAfterWrite一样的效果.&lt;/p&gt;
&lt;h3&gt;4、expireAfterWrite与refreshAfterWrite一起使用情况二&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=17&lt;/p&gt;
&lt;p&gt;refreshAfterWrite=13&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:20:25 value:1595
Thread-2 01:20:25 value:1595
Thread-1 01:20:28 value:1595
Thread-2 01:20:30 value:1595
Thread-1 01:20:31 value:1595
Thread-1 01:20:34 value:1595
Thread-2 01:20:35 value:1595
Thread-1 01:20:37 value:1595
Thread-2 加载数据开始
Thread-1 01:20:40 value:1595
Thread-2 加载数据结束
Thread-1 01:20:48 value:2277
1 value:1595 被移除,原因:EXPIRED
Thread-2 01:20:48 value:2277
Thread-1 01:20:51 value:2277
Thread-2 01:20:53 value:2277
Thread-1 01:20:54 value:2277
Thread-1 01:20:57 value:2277
Thread-2 01:20:58 value:2277
Thread-1 01:21:00 value:2277
Thread-1 加载数据开始
Thread-2 01:21:03 value:2277
Thread-1 加载数据结束
Thread-2 01:21:11 value:3750
1 value:2277 被移除,原因:EXPIRED
Thread-1 01:21:11 value:3750
Thread-1 01:21:14 value:3750
Thread-2 01:21:16 value:3750
Thread-1 01:21:17 value:3750
Thread-1 01:21:20 value:3750
Thread-2 01:21:21 value:3750
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-2加载数据,Thread-1仍然按照策略在01:20:40获取到旧数据成功,但是本应该01:20:45继续获取一次数据但是等到01:20:48才获取成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当没有数据的时候,其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成; 如果有数据的情况下其他线程正在加载数据,已经超过refreshAfterWrite设置时间但是没有超过expireAfterWrite设置的时间时当前线程返回旧数据. 如果有数据的情况下其他线程正在加载数据,已经超过expireAfterWrite设置的时间时当前线程阻塞等待其他线程加载数据完成. 这种情况适合与设置一个加载缓冲区的情况,既能保证过期后加载数据,又能保证长时间没访问多个线程并发时获取到过期旧数据的情况.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 15:35:00 +0000</pubDate>
<dc:creator>vikde</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vikde/p/8045226.html</dc:identifier>
</item>
<item>
<title>Maven - Maven基础 - Anliven</title>
<link>http://www.cnblogs.com/anliven/p/7956581.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/anliven/p/7956581.html</guid>
<description>&lt;h2 id=&quot;maven---项目管理利器&quot;&gt;1.1 - Maven - 项目管理利器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/&lt;/a&gt;&lt;br/&gt;Apache组织的开源项目。&lt;br/&gt;Maven是一个基于POM(Project Object Model, 项目对象模型)的项目构建和管理工具。&lt;br/&gt;可以通过一小段描述信息来管理项目的构建、报告和文档，有助于开发者快速完成项目的配置，快速建立开发环境，从而提高开发效率。&lt;/p&gt;
&lt;p&gt;常用项目管理和构建工具：&lt;/p&gt;
&lt;h2 id=&quot;maven的下载及安装&quot;&gt;1.2 - Maven的下载及安装&lt;/h2&gt;
&lt;p&gt;以windows系统为例：&lt;/p&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li&gt;确认已安装JDK并配置系统变量JAVA_HOME&lt;/li&gt;
&lt;li&gt;安装Maven（解压安装包，例如：apache-maven-3.5.0-bin.zip）&lt;/li&gt;
&lt;li&gt;配置系统变量M2_HOME，指向maven的安装目录(例如&quot;D:\DownLoadFiles\apache-maven-3.5.0&quot;), 并将maven的安装目录的bin目录添加到系统path（例如&quot;%M2_HOME%\bin&quot;，注意前后的分号）&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;运行&quot;mvn -version&quot;命令测试是否安装成功，如果安装成功则显示Maven、Java、OS等相关版本信息：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;mvn&lt;/span&gt; -version
&lt;span class=&quot;kw&quot;&gt;Apache&lt;/span&gt; Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2017-04-04T03&lt;/span&gt;:39:06+08:00)
&lt;span class=&quot;kw&quot;&gt;Maven&lt;/span&gt; home: D:\DownLoadFiles\apache-maven-3.5.0
&lt;span class=&quot;kw&quot;&gt;Java&lt;/span&gt; version: 1.8.0_101, vendor: Oracle Corporation
&lt;span class=&quot;kw&quot;&gt;Java&lt;/span&gt; home: C:\Program Files\Java\jdk1.8.0_101\jre
&lt;span class=&quot;kw&quot;&gt;Default&lt;/span&gt; locale: en_US, platform encoding: GBK
&lt;span class=&quot;kw&quot;&gt;OS&lt;/span&gt; name: &lt;span class=&quot;st&quot;&gt;&quot;windows 7&quot;&lt;/span&gt;, version: &lt;span class=&quot;st&quot;&gt;&quot;6.1&quot;&lt;/span&gt;, arch: &lt;span class=&quot;st&quot;&gt;&quot;amd64&quot;&lt;/span&gt;, family: &lt;span class=&quot;st&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;安装后的目录结构:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- bin/  ： 包含mvn的运行脚本
- boot/ ： 包含一个类加载器的框架
- conf/ ： 配置文件目录，例如经常用到的settings.xml文件
- lib/  ： maven运行时用到的所有类库（包括maven自身和第三方的类库）
- LICENSE  : 许可信息
- NOTICE  ：版权信息
- README.txt  ：使用说明及其他信息&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;maven项目的默认目录结构&quot;&gt;1.3 - Maven项目的默认目录结构&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;pom.xml　　　　        Maven项目的核心配置文件，位于项目根目录

src                    源代码目录
  - src/main/java/ 　　　　    源文件（不包含测试）目录，存放主代码
  - src/main/resources/ 　    资源文件目录
  - src/test/java/　　  　    测试源文件目录，存放测试代码
  - src/test/resources/　　    测试资源文件目录

target    　　　　　    构建过程中的默认生成的临时目录
  - target/classes/            存放src/main/java目录下源文件编译出来的字节码文件（.class）
  - target/maven-archiver/
  - target/maven-status/
  - target/surefire-reports/  存放生成的测试报告
  - target/test-classes/      存放src/test/java目录下源文件编译出来的字节码文件（.class）
  - target/xxx-y.y.y-zzz.jar  生成的jar包&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;maven坐标&quot;&gt;2.1 - Maven坐标&lt;/h2&gt;
&lt;p&gt;在Maven中任何一个依赖、插件、项目构建的输出都可以被称为构件&lt;br/&gt;所有构件通过坐标所为其唯一的标识&lt;/p&gt;
&lt;p&gt;示例：一个基本坐标&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;anliven.testmaven02&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;testmaven02&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;maven资源仓库&quot;&gt;2.2 - Maven资源仓库&lt;/h2&gt;
&lt;p&gt;Maven资源库为依赖包提供来源。&lt;br/&gt;如果本地仓库中的没有相应的依赖包，默认继续在中央或远程仓库查找，下载后会放到本地仓库。如果都没有查找到，将提示报错。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;中央仓库（central）：Maven官方维护的仓库，例如“&lt;a href=&quot;http://central.maven.org/maven2/&quot; class=&quot;uri&quot;&gt;http://central.maven.org/maven2/&lt;/a&gt;”。&lt;/li&gt;
&lt;li&gt;远程仓库：在远程服务器上建立的私有性质仓库，本质类似于中央仓库，可通过setting.xml文件设置。&lt;/li&gt;
&lt;li&gt;本地仓库：包含下载的所有依赖包，默认位于用户目录（例如windows系统：C:\Users&amp;lt;username&amp;gt;.m2\repository），可通过setting.xml文件设置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;官方资源仓库&lt;/p&gt;
&lt;p&gt;阿里云资源仓库&lt;br/&gt;Nexus ： &lt;a href=&quot;http://maven.aliyun.com/nexus/&quot; class=&quot;uri&quot;&gt;http://maven.aliyun.com/nexus/&lt;/a&gt;&lt;br/&gt;Repositories： repositories &lt;a href=&quot;http://maven.aliyun.com/nexus/#view-repositories&quot; class=&quot;uri&quot;&gt;http://maven.aliyun.com/nexus/#view-repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查找jar包信息&lt;/p&gt;
&lt;p&gt;其他资源仓库&lt;/p&gt;
&lt;h2 id=&quot;设置本地maven仓库&quot;&gt;2.3 - 设置本地Maven仓库&lt;/h2&gt;
&lt;p&gt;本地仓库包含下载的所有依赖包，默认位于用户目录（例如windows系统：C:\Users&amp;lt;username&amp;gt;.m2\repository），可通过setting.xml文件设置。&lt;br/&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;localRepository&amp;gt;&lt;/span&gt;D:\DownLoadFiles\apache-maven-repo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设置镜像仓库&quot;&gt;2.4 - 设置镜像仓库&lt;/h2&gt;
&lt;p&gt;通过设置多个远程和中央仓库的镜像地址可以避免访问缓慢或无法访问的问题。&lt;br/&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;   &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库 --&amp;gt;&lt;/span&gt;    
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://central.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库1 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Human Readable Name for this Mirror.&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo1.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库2 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Human Readable Name for this Mirror.&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo2.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阿里云仓库 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;alimaven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pom&quot;&gt;3.1 - POM&lt;/h2&gt;
&lt;p&gt;POM文件是Maven项目中的核心配置和管理文件，也被称为Maven描述文件。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;POM(Project Object Model,项目对象模型)是描述项目构建信息的XML格式文件，位于项目的根目录。&lt;/li&gt;
&lt;li&gt;统一管理项目构建的关键信息，包括：开发规范、开发工具、项目代码、测试代码、资源、依赖的包等。&lt;/li&gt;
&lt;li&gt;pom之间实际上存在三种关系：继承、依赖、聚合。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;官网参考信息：&lt;a href=&quot;http://maven.apache.org/ref/3.5.0/maven-model/maven.html&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/ref/3.5.0/maven-model/maven.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解读pom.xml&quot;&gt;3.2 - 解读pom.xml&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;project POM文件的根元素，包含约束信息&lt;/li&gt;
&lt;li&gt;modelVersion 指定当前Maven模型的版本号，对于Maven2和Maven3只能设置为4.0.0&lt;/li&gt;
&lt;li&gt;groupId 项目的全球唯一标识符（整个系统的名称），一般是域名的反写&lt;/li&gt;
&lt;li&gt;artifactId 构件标识符（子模块名称），和groupId一起唯一标识一个构件，可以使用&quot;项目名-子模块名&quot;的命名方式&lt;/li&gt;
&lt;li&gt;version 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号；限定版本号可以设置为SNAPSHOT（开发），Laest（最新），Alpha（内部测试），Release（稳定），Beta（公测），GA（正式发布）等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;重要：groupId、artifactId、version三个元素构成基本坐标，可以唯一标识一个Maven项目。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;packaging 项目产生的构件类型（项目打包的类型），可以取值为jar、war、rar、ear、pom，也可以创建新类型；如果不设置，默认为jar&lt;/li&gt;
&lt;li&gt;name 项目的名称, Maven产生的文档用&lt;/li&gt;
&lt;li&gt;url 项目主页的URL, Maven产生的文档用&lt;/li&gt;
&lt;li&gt;description 项目的详细描述, Maven 产生的文档用&lt;/li&gt;
&lt;li&gt;developers 项目开发人员信息&lt;/li&gt;
&lt;li&gt;licenses 许可信息&lt;/li&gt;
&lt;li&gt;organization 组织信息&lt;/li&gt;
&lt;li&gt;dependencies 项目相关的所有依赖（dependency 包含一个依赖包的坐标信息）&lt;/li&gt;
&lt;li&gt;properties 定义配置属性，例如设置project.build.sourceEncoding为UTF-8，防止中文乱码&lt;/li&gt;
&lt;li&gt;build 定义构建项目需要的信息&lt;/li&gt;
&lt;li&gt;resources 描述项目相关或测试相关的所有资源路径&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;parent---继承&quot;&gt;3.3 - parent - 继承&lt;/h2&gt;
&lt;p&gt;应用在子项目中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。坐标包括group ID，artifact ID和 version。 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的构件标识符 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的全球唯一标识符 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的版本 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 父项目的pom.xml文件的相对路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/relativePath&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dependencies---依赖&quot;&gt;3.4 - dependencies - 依赖&lt;/h2&gt;
&lt;p&gt;官网信息：Dependency Scope&lt;br/&gt;&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;groupId 依赖项的groupId&lt;/li&gt;
&lt;li&gt;artifactId 依赖项的artifactId&lt;/li&gt;
&lt;li&gt;version 依赖项的版本&lt;/li&gt;
&lt;li&gt;exclusions 排除项目中的依赖冲突时使用。&lt;/li&gt;
&lt;li&gt;scope 依赖项的适用范围：
&lt;ul&gt;&lt;li&gt;compile，缺省值，适用于所有阶段，会随着项目一起发布。&lt;/li&gt;
&lt;li&gt;provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。&lt;/li&gt;
&lt;li&gt;runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。&lt;/li&gt;
&lt;li&gt;test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。&lt;/li&gt;
&lt;li&gt;system，类似provided，与本机系统相关联，可移植性差，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。&lt;/li&gt;
&lt;li&gt;import，导入的范围，只使用在dependencyManagement中，表示从其它的pom中导入dependecy的配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 --&amp;gt;&lt;/span&gt;         
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的group ID --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt; org.apache.maven &lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的artifact ID --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt; maven-artifact &lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt; 3.8.1 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。--&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt; jar &lt;span class=&quot;kw&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;classifier&amp;gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - compile ：默认范围，用于编译 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - runtime: 在执行时需要使用 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - test: 用于test任务时使用 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - system: 需要外在提供相应的元素。通过systemPath来取得 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - systemPath: 仅用于范围为system。提供相应的路径 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt; test &lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;systemPath&amp;gt;&amp;lt;/systemPath&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 排除依赖列表，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt; 
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt; spring-core &lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt; org.springframework &lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 可选依赖，如果在项目B中声明C依赖为可选，那么需要在依赖于B的项目A中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt; true &lt;span class=&quot;kw&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt;&lt;br/&gt;依赖管理。其中定义的多个依赖，并不会实际引入。&lt;br/&gt;应用在父模块中，供子模块所继承使用。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 参见dependencies/dependency元素 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;modules---聚合&quot;&gt;3.5 - modules - 聚合&lt;/h2&gt;
&lt;p&gt;可以通过一个大的项目来整合各个小的模块&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--子项目相对路径--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;module&amp;gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时需要将packaging设置为pom&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;pluginmanagement&quot;&gt;3.6 - pluginManagement&lt;/h2&gt;
&lt;p&gt;Plugin的配置，应用在父项目。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用的插件列表 。 --&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; 
             &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- plugin元素包含描述插件所需要的信息。 --&amp;gt;&lt;/span&gt; 
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 插件在仓库里的group ID --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 插件在仓库里的artifact ID --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被使用的插件的版本（或版本范围） --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
                
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- execution元素包含了插件执行需要的信息 --&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;phase&amp;gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 配置的执行目标 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 配置是否被传播到子POM --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;inherited&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/inherited&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 作为DOM对象的配置 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; 
                 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 项目引入插件所需要的额外依赖 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 参见dependencies/dependency元素 --&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 

                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 任何配置是否被传播到子项目 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;inherited&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/inherited&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 作为DOM对象的配置 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; 
     &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;resources&quot;&gt;3.7 - resources&lt;/h2&gt;
&lt;p&gt;Build时需要的资源文件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 描述了资源的相对路径（相对target/classes目录）。如果只是想把资源放到源码目录结构里，就不需要该配置。 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;targetPath&amp;gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;filtering&amp;gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 描述存放资源的目录，该路径相对POM路径 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;directory&amp;gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 包含的模式列表，例如**/*.xml. --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;include&amp;gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 排除的模式列表，例如**/*.xml --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;excludes&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclude&amp;gt;&amp;lt;/exclude&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/excludes&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;生命周期-1&quot;&gt;4.1 - 生命周期&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;clean 清理项目&lt;/li&gt;
&lt;li&gt;default 构建项目&lt;/li&gt;
&lt;li&gt;site 生成项目站点&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;完整的项目构建过程&quot;&gt;4.2 - 完整的项目构建过程&lt;/h2&gt;
&lt;p&gt;清理、编译、测试、打包、集成测试、验证、部署&lt;br/&gt;clean、compile、test、package、install&lt;br/&gt;注意：执行某个阶段时，其前面的阶段会顺序执行，但不会触发其他生命周期的另外阶段。&lt;/p&gt;
&lt;h2 id=&quot;clean的阶段&quot;&gt;4.3 - clean的阶段&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;pre-clean 执行清理前的工作&lt;/li&gt;
&lt;li&gt;clean 清理上一次构建生成的所有文件&lt;/li&gt;
&lt;li&gt;post-clean 执行清理后的文件&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;default构建项目最核心&quot;&gt;4.4 - default构建项目（最核心）&lt;/h2&gt;
&lt;p&gt;compile、test、package、install&lt;/p&gt;
&lt;h2 id=&quot;site的阶段&quot;&gt;4.5 - site的阶段&lt;/h2&gt;
&lt;p&gt;根据pom文件中信息自动生成站点&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pre-site 在生成项目站点前要完成的工作&lt;/li&gt;
&lt;li&gt;site 生成项目的站点文档&lt;/li&gt;
&lt;li&gt;post-site 在生成项目站点后要完成的工作&lt;/li&gt;
&lt;li&gt;site-deploy 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;查看帮助信息&quot;&gt;5.1 - 查看帮助信息&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mvn --help/-h&lt;/li&gt;
&lt;li&gt;mvn help:help 显示help插件的帮助信息&lt;/li&gt;
&lt;li&gt;mvn help:help -Ddetail=true 显示help插件的详细帮助信息&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven02
$ mvn help:help
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven02 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-help-plugin:2.2:help (default-cli) @ testmaven02 ---
[INFO] Maven Help Plugin 2.2
  The Maven Help plugin provides goals aimed at helping to make sense out of the
  build environment. It includes the ability to view the effective POM and
  settings files, after inheritance and active profiles have been applied, as
  well as a describe a particular plugin goal to give usage information.

This plugin has 9 goals:

help:active-profiles
  Displays a list of the profiles which are currently active for this build.

help:all-profiles
  Displays a list of available profiles under the current project.
  Note: it will list all profiles for a project. If a profile comes up with a
  status inactive then there might be a need to set profile activation
  switches/property.

help:describe
  Displays a list of the attributes for a Maven Plugin and/or goals (aka Mojo -
  Maven plain Old Java Object).

help:effective-pom
  Displays the effective POM as an XML for this build, with the active profiles
  factored in.

help:effective-settings
  Displays the calculated settings as XML for this project, given any profile
  enhancement and the inheritance of the global settings into the user-level
  settings.

help:evaluate
  Evaluates Maven expressions given by the user in an interactive mode.

help:expressions
  Displays the supported Plugin expressions used by Maven.

help:help
  Display help information on maven-help-plugin.
  Call mvn help:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt; to display parameter
  details.

help:system
  Displays a list of the platform details like system properties and environment
  variables.


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.409 s
[INFO] Finished at: 2017-10-24T14:43:49+08:00
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven02
$&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;查看插件的帮助信息&quot;&gt;5.2 - 查看插件的帮助信息：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;mvn &amp;lt;plug-in&amp;gt;:help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例：mvn dependency:help&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;使用maven-help-插件&quot;&gt;5.3 - 使用Maven Help 插件&lt;/h2&gt;
&lt;p&gt;mvn help:describe命令可以显示某个插件的信息&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-Dplugin=pluginName&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;-Dgoal(或-Dmojo)=goalName&lt;/li&gt;
&lt;li&gt;-Ddetail=true&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;mvn help:describe -Dplugin=help    # 使用help插件的describe目标来显示Maven Help插件的信息
mvn help:describe -Dplugin=help -Dfull    # 显示Maven Help插件所有可用目标
mvn help:describe -Dplugin=exec -Dfull    # 显示Maven Exec插件所有可用目标
mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull    # 获取单个目标的信息,显示Maven Compiler插件的compile目标信息
mvn help:effective-pom    # 查看实际pom信息&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;常用命令-1&quot;&gt;5.4 - 常用命令&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mvn -version/-v 查看maven版本&lt;/li&gt;
&lt;li&gt;mvn compile 编译源代码&lt;/li&gt;
&lt;li&gt;mvn test 运行测试&lt;/li&gt;
&lt;li&gt;mvn test-compile 编译测试代码&lt;/li&gt;
&lt;li&gt;mvn test -skipping compile -skipping test-compile # 只测试，不编译，也不测试编译；&lt;/li&gt;
&lt;li&gt;mvn package 打包（生成target目录，编译、测试代码，生成测试报告，生成jar/war文件）&lt;/li&gt;
&lt;li&gt;mvn package -Dmaven.test.skip=ture 打包时跳过测试&lt;/li&gt;
&lt;li&gt;mvn install 安装jar到本地Repository中&lt;/li&gt;
&lt;li&gt;mvn install -X 打开 Maven 的调试标记查看完整的依赖踪迹（包含被拒绝引入的构件）&lt;/li&gt;
&lt;li&gt;mvn clean 清除产生的项目（删除target目录及文件）&lt;/li&gt;
&lt;li&gt;mvn clean install 先清除，然后编译安装到本地仓库&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;mvn -e    # 显示详细错误信息
mvn validate    # 验证工程是否正确，所有需要的资源是否可用
mvn verify    # 运行任何检查，验证包是否有效且达到质量标准

mvn archetype:create -DgroupId=packageName -DartifactId=projectName    # 创建Maven的普通Java项目
mvn archetype:generate    # 反向生成maven项目的骨架（建议使用，简洁方便，根据提示操作即可）

mvn eclipse:eclipse    # 生成eclipse项目结构（将项目转化为Eclipse项目）
mvn eclipse:clean    # 清除Eclipse项目结构
mvn idea:idea    # 生成idea项目结构

mvn site    # 生成站点目录: 
mvn site-deploy    # 生成站点目录并发布

mvn deploy    # 上传到私有服务器

mvn jar:jar    # 只打jar包
mvn -Dtest package    # 只打包不测试
mvn source:jar    # 源码打包
mvn source:jar-no-fork    # 源码打包

mvn dependency:list    # 显示当前项目已被解析的依赖
mvn dependency:resolve    # 显示已解决依赖的列表
mvn dependency:tree    # 显示整个依赖树
mvn dependency:analyze    # 分析项目的依赖信息，作用等同于mvn dependency:tree&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;一些示例&quot;&gt;5.5 - 一些示例&lt;/h2&gt;
&lt;h3 id=&quot;mvn-compile-编译&quot;&gt;mvn compile 编译&lt;/h3&gt;
&lt;p&gt;如果是第一次运行mvn compile等命令时，将会下载很多的第三方和maven所依赖的jar包。&lt;br/&gt;在Maven项目根目录下，默认生成target目录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;target    　　　　　    构建过程中的默认生成的临时目录
  target/classes/            存放src/main/java目录下源文件编译出来的字节码文件（.class）
  target/maven-status/&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn compile
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.064 s
[INFO] Finished at: 2017-10-20T10:56:12+08:00
[INFO] Final Memory: 15M/292M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 1
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 10:56 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ls -l target/classes/anliven/testmaven01/HelloMaven.class
-rw-r--r-- 1 guowli 1049089 406 Oct 20 10:56 target/classes/anliven/testmaven01/HelloMaven.class&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-test-测试&quot;&gt;mvn test 测试&lt;/h3&gt;
&lt;p&gt;生成如下目录：&lt;br/&gt;target/surefire-reports/ 存放生成的测试报告&lt;br/&gt;target/test-classes/ 存放src/test/java目录下源文件编译出来的字节码文件（.class）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn test
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.286 s
[INFO] Finished at: 2017-10-20T11:01:06+08:00
[INFO] Final Memory: 16M/291M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 test-classes/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/surefire-reports/
total 9
-rw-r--r-- 1 guowli 1049089  282 Oct 20 11:01 anliven.testmaven01.HelloMavenTest.txt
-rw-r--r-- 1 guowli 1049089 6398 Oct 20 11:01 TEST-anliven.testmaven01.HelloMavenTest.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-package-打包&quot;&gt;mvn package 打包&lt;/h3&gt;
&lt;p&gt;生成如下目录及文件：&lt;br/&gt;target/maven-archiver/&lt;br/&gt;target/xxx-y.y.y-zzz.jar 生成的jar包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 test-classes/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn package
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ testmaven ---
[INFO] Building jar: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.437 s
[INFO] Finished at: 2017-10-20T11:13:48+08:00
[INFO] Final Memory: 16M/213M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 4
drwxr-xr-x 1 guowli 1049089    0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:13 maven-archiver/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:01 test-classes/
-rw-r--r-- 1 guowli 1049089 2151 Oct 20 11:13 testmaven-0.0.1-SNAPSHOT.jar&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-clean-删除target目录及文件&quot;&gt;mvn clean 删除target目录及文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ll
total 5
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 11:13 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn clean
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (0 B at 0 B/s)
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (0 B at 0 B/s)
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ testmaven ---
[INFO] Deleting D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.072 s
[INFO] Finished at: 2017-10-20T17:13:51+08:00
[INFO] Final Memory: 11M/245M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 1
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-install-安装jar包到本地仓库中&quot;&gt;mvn install 安装jar包到本地仓库中&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom (0 B at 0 B/s)
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar (0 B at 0 B/s)
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ testmaven ---
[INFO] Building jar: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.4:install (default-install) @ testmaven ---
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.pom (2.5 kB at 4.7 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus/3.1/plexus-3.1.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus/3.1/plexus-3.1.pom (19 kB at 24 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.pom (1.1 kB at 1.9 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-components/1.1.7/plexus-components-1.1.7.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-components/1.1.7/plexus-components-1.1.7.pom (5.0 kB at 8.9 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom (7.2 kB at 13 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom (7.3 kB at 13 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.jar
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.jar
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.jar (12 kB at 9.8 kB/s)
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.jar (230 kB at 179 kB/s)
[INFO] Installing D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar to D:\DownLoadFiles\apache-maven-repo\anliven\testmaven01\testmaven\0.0.1-SNAPSHOT\testmaven-0.0.1-SNAPSHOT.jar
[INFO] Installing D:\Anliven-Running\Zen\EclipseProjects\TestMaven\pom.xml to D:\DownLoadFiles\apache-maven-repo\anliven\testmaven01\testmaven\0.0.1-SNAPSHOT\testmaven-0.0.1-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.602 s
[INFO] Finished at: 2017-10-20T17:14:19+08:00
[INFO] Final Memory: 18M/210M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 5
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 17:14 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 4
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 classes/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 maven-archiver/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 maven-status/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 surefire-reports/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 test-classes/
-rw-r--r-- 1 guowli 1049089 2150 Oct 20 17:14 testmaven-0.0.1-SNAPSHOT.jar

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 15 Dec 2017 15:20:00 +0000</pubDate>
<dc:creator>Anliven</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/anliven/p/7956581.html</dc:identifier>
</item>
<item>
<title>41.Linux应用调试-修改内核来打印用户态的oops - LifeYx</title>
<link>http://www.cnblogs.com/lifexy/p/8045191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/8045191.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;.在之前&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8006748.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;第36章&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;里,我们学习了通过驱动的oops定位错误代码行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8006748.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;第36章的oops代码&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Unable to handle kernel paging request at &lt;span&gt;virtual&lt;/span&gt; address &lt;span&gt;56000050&lt;/span&gt;
　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无法处理内核页面请求的虚拟地址56000050&lt;/span&gt;&lt;span&gt;
pgd &lt;/span&gt;=&lt;span&gt; c3850000
[&lt;/span&gt;&lt;span&gt;56000050&lt;/span&gt;] *pgd=&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;
Internal error: Oops: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [#&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;内部错误oops&lt;/span&gt;&lt;span&gt;
Modules linked &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;: 26th_segmentfault
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示内部错误发生在26th_segmentfault.ko驱动模块里&lt;/span&gt;&lt;span&gt;
CPU: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;    Not tainted  (&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;22.6&lt;/span&gt; #&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
PC &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; at first_drv_open+&lt;span&gt;0x78&lt;/span&gt;/&lt;span&gt;0x12c&lt;/span&gt;&lt;span&gt; [26th_segmentfault]
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;PC值:程序运行成功的最后一次地址,位于first_drv_open()函数里,偏移值0x78,该函数总大小0x12c&lt;/span&gt;&lt;span&gt;
LR &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; at &lt;span&gt;0xc0365ed8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LR值&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;发生错误时的各个寄存器值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pc : [&lt;/span&gt;&amp;lt;bf000078&amp;gt;]    lr : [&amp;lt;c0365ed8&amp;gt;]    psr: &lt;span&gt;80000013&lt;/span&gt;&lt;span&gt;
sp : c3fcbe80  ip : c0365ed8  fp : c3fcbe94
r10: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;  r9 : c3fca000  r8 : c04df960
r7 : &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;  r6 : &lt;span&gt;00000000&lt;/span&gt;  r5 : bf000de4  r4 : &lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;
r3 : &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;  r2 : &lt;span&gt;56000050&lt;/span&gt;  r1 : &lt;span&gt;00000001&lt;/span&gt;  r0 : &lt;span&gt;00000052&lt;/span&gt;&lt;span&gt;

Flags: Nzcv  IRQs on  FIQs on  Mode SVC_32  Segment user
Control: c000717f  Table: &lt;/span&gt;&lt;span&gt;33850000&lt;/span&gt;  DAC: &lt;span&gt;00000015&lt;/span&gt;&lt;span&gt;
Process 26th_segmentfau (pid: &lt;/span&gt;&lt;span&gt;813&lt;/span&gt;, stack limit = &lt;span&gt;0xc3fca258&lt;/span&gt;&lt;span&gt;)
　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生错误时,进程名称为26th_segmentfault&lt;/span&gt;
&lt;span&gt;
Stack: (&lt;/span&gt;&lt;span&gt;0xc3fcbe80&lt;/span&gt; to &lt;span&gt;0xc3fcc000&lt;/span&gt;)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;栈信息,从栈底0xc3fcbe80到栈顶0xc3fcc000&lt;/span&gt;&lt;span&gt;
be80: c06d7660 c3e880c0 c3fcbebc c3fcbe98 c008d888 bf000010 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c04df960
bea0: c3e880c0 c008d73c c0474e20 c3fb9534 c3fcbee4 c3fcbec0 c0089e48 c008d74c
bec0: c04df960 c3fcbf04 &lt;/span&gt;&lt;span&gt;00000003&lt;/span&gt;&lt;span&gt; ffffff9c c002c044 c380a000 c3fcbefc c3fcbee8
bee0: c0089f64 c0089d58 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; c3fcbf68 c3fcbf00 c0089fb8 c0089f40
bf00: c3fcbf04 c3fb9534 c0474e20 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt; c3851000 &lt;span&gt;00000101&lt;/span&gt; &lt;span&gt;00000001&lt;/span&gt;&lt;span&gt;
bf20: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c3fca000 c04c90a8 c04c90a0 ffffffe8 c380a000 c3fcbf68 c3fcbf48
bf40: c008a16c c009fc70 &lt;/span&gt;&lt;span&gt;00000003&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt; c04df960 &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; be84ce38 c3fcbf94
bf60: c3fcbf6c c008a2f4 c0089f88 &lt;/span&gt;&lt;span&gt;00008588&lt;/span&gt; be84ce84 &lt;span&gt;00008718&lt;/span&gt; 0000877c &lt;span&gt;00000005&lt;/span&gt;&lt;span&gt;
bf80: c002c044 4013365c c3fcbfa4 c3fcbf98 c008a3a8 c008a2b0 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c3fcbfa8
bfa0: c002bea0 c008a394 be84ce84 &lt;/span&gt;&lt;span&gt;00008718&lt;/span&gt; be84ce30 &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; be84ce38 be84ce30
bfc0: be84ce84 &lt;/span&gt;&lt;span&gt;00008718&lt;/span&gt; 0000877c &lt;span&gt;00000003&lt;/span&gt; &lt;span&gt;00008588&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; 4013365c be84ce58
bfe0: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; be84ce28 0000266c 400c98e0 &lt;span&gt;60000010&lt;/span&gt; be84ce30 &lt;span&gt;30002031&lt;/span&gt; &lt;span&gt;30002431&lt;/span&gt;&lt;span&gt;

Backtrace:                                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回溯信息&lt;/span&gt;
&lt;span&gt;[&lt;/span&gt;&amp;lt;bf000000&amp;gt;] (first_drv_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x12c&lt;/span&gt; [26th_segmentfault]) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008d888&amp;gt;] (chrdev_open+&lt;span&gt;0x14c&lt;/span&gt;/&lt;span&gt;0x164&lt;/span&gt;&lt;span&gt;)
 r5:c3e880c0 r4:c06d7660
[&lt;/span&gt;&amp;lt;c008d73c&amp;gt;] (chrdev_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x164&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089e48&amp;gt;] (__dentry_open+&lt;span&gt;0x100&lt;/span&gt;/&lt;span&gt;0x1e8&lt;/span&gt;&lt;span&gt;)
 r8:c3fb9534 r7:c0474e20 r6:c008d73c r5:c3e880c0 r4:c04df960
[&lt;/span&gt;&amp;lt;c0089d48&amp;gt;] (__dentry_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x1e8&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089f64&amp;gt;] (nameidata_to_filp+&lt;span&gt;0x34&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&amp;lt;c0089f30&amp;gt;] (nameidata_to_filp+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089fb8&amp;gt;] (do_filp_open+&lt;span&gt;0x40&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;&lt;span&gt;)
 r4:&lt;/span&gt;&lt;span&gt;00000002&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&amp;lt;c0089f78&amp;gt;] (do_filp_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008a2f4&amp;gt;] (do_sys_open+&lt;span&gt;0x54&lt;/span&gt;/&lt;span&gt;0xe4&lt;/span&gt;&lt;span&gt;)
 r5:be84ce38 r4:&lt;/span&gt;&lt;span&gt;00000002&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&amp;lt;c008a2a0&amp;gt;] (do_sys_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0xe4&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008a3a8&amp;gt;] (sys_open+&lt;span&gt;0x24&lt;/span&gt;/&lt;span&gt;0x28&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&amp;lt;c008a384&amp;gt;] (sys_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x28&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c002bea0&amp;gt;] (ret_fast_syscall+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x2c&lt;/span&gt;&lt;span&gt;)
Code: bf000094 bf0000b4 bf0000d4 e5952000 (e5923000)

Segmentation fault &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1那为什么在&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8034277.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;上一章&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;,我们用错误的应用程序,却没有打印oops,如下图所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225201043-1067535292.png&quot; alt=&quot;&quot; width=&quot;388&quot; height=&quot;81&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来,我们便来配置内核,从而打印应用程序的oops&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.首先来搜索oops里的&lt;span&gt;:Unable to handle kernel&lt;/span&gt;打印语句,看在哪个函数打印的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,找到位于&lt;span&gt;__do_kernel_fault()&lt;/span&gt;函数中:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225208168-131107228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.继续找,发现__do_kernel_fault()被&lt;span&gt;do_bad_area()&lt;/span&gt;调用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225216824-1483387364.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;do_bad_area()&lt;/span&gt;函数,从字面上分析,表示代码执行到错误段位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中&lt;span&gt;user_mode(regs)&lt;/span&gt;函数,通过判断CPSR寄存器若是用户模式则返回0,否则返回正数.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我们上一章的错误的应用程序便会调用&lt;span&gt;__do_user_fault()函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.&lt;span&gt;__do_user_fault()&lt;/span&gt;函数如下所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225224824-5682509.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上图来看,要想打印应用程序的错误信息,还需要:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1配置内核,设置宏CONFIG_DEBUG_USER&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(只要宏是以&lt;strong&gt;&quot;CONFIG_&quot;&lt;/strong&gt;开头,都是与配置相关)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;/span&gt;在&lt;span&gt;make menuconfig&lt;/span&gt;里搜索&lt;span&gt;DEBUG_USER&lt;/span&gt;,如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225231652-1474023201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以将&lt;span&gt;Kernel hacking-&amp;gt; Verbose user fault messages&lt;/span&gt; 置为Y,并重新烧内核&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2使if (user_debug &amp;amp; UDBG_SEGV)为真&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;/span&gt;其中&lt;span&gt;user_debug&lt;/span&gt;定义如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225238761-402972935.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;显然当uboot传递进来的命令行字符里含有&lt;span&gt;&quot;user_debug=&quot;&lt;/span&gt;时,便会调用user_debug_setup()-&amp;gt;&lt;span&gt;get_option()&lt;/span&gt;,最终会将&quot;user_debug=&quot;后面带的字符串提取给user_debug变量.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:当命令行字符里含有&lt;span&gt;&quot;user_debug=0xff&quot;&lt;/span&gt;时,则user_debug变量等于0xff&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2)&lt;/span&gt;&lt;/strong&gt;其中&lt;span&gt;UDBG_SEGV&lt;/span&gt;定义如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; UDBG_UNDEFINED  (1 &amp;lt;&amp;lt; 0)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态的代码出现未定义指令(UNDEFINED)&lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_SYSCALL (1 &amp;lt;&amp;lt; 1)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态系统调用已过时(SYSCALL)     &lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_BADABORT    (1 &amp;lt;&amp;lt; 2)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态数据错误已中止(BADABORT) &lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_SEGV     (1 &amp;lt;&amp;lt; 3)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态的代码出现段错误(SEGV)&lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_BUS       (1 &amp;lt;&amp;lt; 4)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态访问忙(BUS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从上面的定义分析得出,我们只需要将user_debug设为0xff,上面的所有条件就都成立.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:当用户态的代码出现未定义指令时,由于user_debug最低位=1,所以打印出oops.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以,进入uboot,在uboot命令行里添加: &lt;span&gt;&quot;user_debug=0xff&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 启动内核,试验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,执行错误的应用程序,只打印了各个寄存器值,以及函数调用关系,而没有栈信息:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225304277-5123471.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.接下来,继续修改内核,使应用程序的oops也打印栈信息出来&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在驱动的oops里有&quot;Stack: &quot;这个字段,搜索&lt;span&gt;&quot;Stack: &quot;&lt;/span&gt;看看,位于哪个函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.1如下图所示, 找到位于__die()函数中:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225312386-733910600.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个__die()会被die()调用,die()又会被&lt;span&gt;__do_kernel_fault()&lt;/span&gt;调用,而我们应用程序调用的&lt;span&gt;__do_user_fault()&lt;/span&gt;里没有die()函数,所以没有打印出Stack栈信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上图里&lt;strong&gt;&lt;span&gt;dump_mem():&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
dump_mem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stack: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, regs-&amp;gt;ARM_sp,THREAD_SIZE + (unsigned &lt;span&gt;long&lt;/span&gt;)task_stack_page(tsk));　　　　//打印stack栈信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;主要是通过sp寄存器里存的栈地址,每打印一个栈地址里的32位数据, 栈地址便加4(一个地址存8位,所以加4)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;接下来我们便通过这个原理&lt;/strong&gt;,来修改应用程序调用的&lt;span&gt;__do_user_fault()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;5.2 在__do_user_fault(),添加以下&lt;/span&gt;&lt;span&gt;带红色的字:&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static void  __do_user_fault(struct task_struct *tsk, unsigned long addr,&lt;/span&gt;&lt;span&gt;unsigned int fsr, unsignedint sig, int code,struct pt_regs *regs)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       struct siginfo si;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;span&gt; unsigned long val ;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       int i=0;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#ifdef CONFIG_DEBUG_USER&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       if (user_debug &amp;amp; UDBG_SEGV) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              printk(KERN_DEBUG &quot;%s: unhandled page fault (%d) at 0x%08lx, code 0x%03x\n&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                     tsk-&amp;gt;comm, sig, addr, fsr);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              show_pte(tsk-&amp;gt;mm, addr);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              show_regs(regs);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt; printk(&quot;Stack: \n&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        while(i&amp;lt;1024)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;               &lt;span&gt;/* copy_from_user(): 检测该地址是否有效,如有效,便获取地址数据,否则break */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           if(copy_from_user(&amp;amp;val, (const void __user *)(regs-&amp;gt;ARM_sp+i*4), 4))&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           break;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            printk(&quot;%08x &quot;,val);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            i++;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            if(i%8==0)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            printk(&quot;\n&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        printk(&quot;\n END of Stack\n&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt;     }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.address = addr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.error_code = fsr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.trap_no = 14;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_signo = sig;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_errno = 0;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_code = code;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_addr = (void __user *)addr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       force_sig_info(sig, &amp;amp;si, tsk);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.重新烧写内核,试验&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225326043-310610831.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来,便来分析&lt;span&gt;PC值,Stack栈&lt;/span&gt;,到底如何调用的&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;7.首先来分析PC值,确定错误的代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1)生成反汇编：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
arm-linux-objdump -D test_debug &amp;gt; test_debug.dis
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2)搜索PC值&lt;span&gt;84ac&lt;/span&gt;,如下图所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225337683-1890094857.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上面看出,主要是将0x12(r3)放入地址0x00(r2)中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而0x00是个非法地址,所以出错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.分析Stack栈信息,确定函数调用过程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考: &lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8011966.html&quot;&gt;&lt;span&gt;&lt;strong&gt;37.Linux&lt;/strong&gt;&lt;strong&gt;驱动调试&lt;/strong&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;strong&gt;根据&lt;/strong&gt;&lt;strong&gt;oops&lt;/strong&gt;&lt;strong&gt;的栈信息&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;确定函数调用过程&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.1分析过程中,遇到main()函数的返回地址为:LR=40034f14&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;内核的虚拟地址是&lt;span&gt;c0004000~c03cebf4&lt;/span&gt;,而反汇编里也没有该地址,所以这是个&lt;span&gt;动态库的地址&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要用到&lt;span&gt;静态链接方法&lt;/span&gt;,接下来重新编译,反汇编,运行:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#arm-linux-gcc -o -&lt;span&gt;static&lt;/span&gt;&lt;span&gt;  test_debug test_debug.c
&lt;/span&gt;&lt;span&gt;          //&lt;/span&gt;&lt;span&gt;-static   静态链接,生成的文件会非常大, 好处在于不需要动态链接库,也可以运行&lt;/span&gt;&lt;span&gt;
#arm&lt;/span&gt;-linux-objdump -D test_debug &amp;gt; test_debug.dis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.2最终, 找到main()函数的返回地址在__lobc_start_main()里&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以函数出错时的调用过程:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 __lobc_start_main()-&amp;gt;&lt;span&gt;
    main()&lt;/span&gt;-&amp;gt;&lt;span&gt;
　　  A()&lt;/span&gt;-&amp;gt;&lt;span&gt;
        B()&lt;/span&gt;-&amp;gt;&lt;span&gt;
            C()  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将0x12(r3)放入地址0x00(r2)中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 15:14:00 +0000</pubDate>
<dc:creator>LifeYx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/8045191.html</dc:identifier>
</item>
<item>
<title>JMeter接口测试系列-关联参数 - janehost</title>
<link>http://www.cnblogs.com/LOVEYU/p/8045148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LOVEYU/p/8045148.html</guid>
<description>&lt;p&gt;这里主要记录一下A接口的返回结果经过md5加密之后作为另外B接口的参数，这个问题困扰了很久，找了不少资料，现在把解决方法记录如下：&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;p&gt;①JMeter 3.0&lt;/p&gt;
&lt;p&gt;②前置条件：将fastjson.jar包置于..\apache-jmeter-3.2\lib\下，并将该jar包添加到测试计划的Library中；否则会报：Typed variable declaration : Class: JSONObject not found in namespace的错误；&lt;/p&gt;
&lt;p&gt;fastjson.jar包下载地址：&lt;a href=&quot;https://github.com/alibaba/fastjson&quot; class=&quot;uri&quot;&gt;https://github.com/alibaba/fastjson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;③处理器：Beanshell处理器，&lt;code&gt;import com.alibaba.fastjson.JSON&lt;/code&gt;;(一般习惯使用到什么import什么，如：&lt;code&gt;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;&lt;/code&gt;这里需要用到[&lt;code&gt;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;&lt;/code&gt;])&lt;/p&gt;
&lt;p&gt;实现目标：&lt;/p&gt;
&lt;p&gt;A接口的响应结果result ，经过MD5(result+a+B+c+D)=ptoken，加密结果ptoken作为B接口的一个参数。&lt;/p&gt;
&lt;p&gt;如何实现？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在A接口之后首先添加使用BeanShell PostProcessor（后置处理器）,使用后置处理器获取响应结果result的值；&lt;/li&gt;
&lt;li&gt;在B接口中添加BeanShellSampler,导入md5加密的jar包，然后将返回的result+customerCode_timestamp+ytoken（这里说明一下customerCode、timestamp、ytoken已经在测试计划用户定义的变量添加）经过加密之后作为B接口的一个参数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面是根据上面的思路完成的实际操作&lt;br/&gt;这里是测试计划-用户定义的变量如图&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/F1JZ7S1.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在A接口中添加后置处理器截图所示&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/VqBFSck.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;响应结果的字符串形式如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vqfzCMJ.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要提取result的值&lt;code&gt;G0444260257&lt;/code&gt;&lt;br/&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

String json = prev.getResponseDataAsString(); //获取登录请求的响应信息
log.info(&quot;json=&quot;+json);
//利用上一步获取的字符串形式的JSON，结合Java处理Json的方法，将需要的键值提取出来；
JSONObject jso = JSON.parseObject(json);

String res = jso.getString(&quot;result&quot;);
log.info(&quot;res=&quot;+res);
//保存提取的结果为res
vars.put(&quot;res&quot;,res);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后添加一个BeanShell Sampler 计算md5加密之后，将值作为B接口的参数&lt;br/&gt;BeanShell Sampler的代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import com.test.mymd5;

//undefined customerCode
String customerCode = vars.get(&quot;customerCode&quot;);
//定义时间戳
String timestamp = vars.get(&quot;timestamp&quot;);
//定义机构中的serial_number_md5，临时会话验证
String ytoken = vars.get(&quot;ytoken&quot;);
String rest = vars.get(&quot;res&quot;);


//定义英文下划线_ underscores 
String underscores = vars.get(&quot;underscores&quot;);
log.info(&quot;underscores=&quot;+underscores);

log.info(&quot;customerCode=&quot;+customerCode);
log.info(&quot;timestamp=&quot;+timestamp);
log.info(&quot;rest=&quot;+rest);
log.info(&quot;ytoken=&quot;+ytoken);

String ptoken = mymd5.md5(rest+customerCode+underscores+timestamp+ytoken);
vars.put(&quot;ptoken&quot;,ptoken);
log.info(&quot;ptoken=&quot;+ptoken);

System.out.println(ptoken);
System.out.println(rest);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么接下来就是接口B参数的使用，这个可以使用${参数名}来直接使用该参数，如图&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/HCosu9a.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样接口参数都配置完成，如何增加断言该接口是成功的呢？&lt;br/&gt;这里使用的是jmeter中的响应断言，配置如图所示&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/rxmigw2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里断言的是接口响应结果code为0。&lt;/p&gt;
&lt;p&gt;关联参数我们上面使用的是BeanShell PostProcessor获取接口的响应结果。其实，&lt;a href=&quot;mailto:我们也可以使用正则表达式或是jp@gc-json&quot;&gt;我们也可以使用正则表达式或是jp@gc-JSON&lt;/a&gt; Path Extractor提取接口的响应结果作为下一个接口的参数，&lt;a href=&quot;mailto:如图配置的正则表达式和jp@gc-json&quot;&gt;如图配置的正则表达式和jp@gc-JSON&lt;/a&gt; Path Extractor提取：&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/4wEMJeA.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/F22jTCE.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:而使用jp@gc-json&quot;&gt;而使用jp@gc-JSON&lt;/a&gt; Path Assertion断言响应结果是否正确(和响应断言功能一致，也path extractor配合使用)，配置如图&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/69BLvkf.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是这里提取的响应结果是正确的，使用md5加密的时候，显示该参数是null，所以这里留了一个尾巴，暂时还没好的解决方法？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**博客：&lt;a href=&quot;https://www.cnblogs.com/xpp142857/p/7374281.html**&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/xpp142857/p/7374281.html**&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 14:59:00 +0000</pubDate>
<dc:creator>janehost</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LOVEYU/p/8045148.html</dc:identifier>
</item>
<item>
<title>Scala入门系列（十）：函数式编程之集合操作 - 小丑进场</title>
<link>http://www.cnblogs.com/LiCheng-/p/8045108.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiCheng-/p/8045108.html</guid>
<description>&lt;div id=&quot;wmd-preview-section-28652&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;1. Scala的集合体系结构&lt;/h2&gt;
&lt;p&gt;Scala中的集合体系主要包括（结构跟Java相似）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Iterable（所有集合trait的根trait）&lt;/li&gt;
&lt;li&gt;Seq（Range、ArrayBuffer、List等）&lt;/li&gt;
&lt;li&gt;Set（HashSet、LinkedHashSet、SortedSet等）&lt;/li&gt;
&lt;li&gt;Map （HashMap、SortedMap、LinkedHashMap等）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Scala中的集合分为可变和不可变两类集合，分别对应scala.collection.mutable和scala.collection.immutable两个包。&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28653&quot; readability=&quot;7&quot;&gt;
&lt;h2&gt;2. List&lt;/h2&gt;
&lt;p&gt;List代表一个不可变的列表。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;List有head和tail，head代表List的第一个元素，tail代表第一个元素之后的所有元素。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28654&quot; readability=&quot;21&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; list = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;list: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; list.head&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res33: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; list.tail&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res34: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;  &lt;br/&gt;案例：用递归函数给List中每个元素都加上指定的前缀并打印&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28655&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 如果List只有一个元素，那么他的tail就是Nil&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;decorator&lt;/span&gt;&lt;/span&gt;(list: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;], prefix: &lt;span&gt;String&lt;/span&gt;){&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt; (list != &lt;span&gt;Nil&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;println(prefix + list.head)&lt;/p&gt;
&lt;p&gt;decorator(list.tail, prefix)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;scala&amp;gt; decorator(list, &lt;span&gt;&quot;+&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;+&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;+&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;+&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;+&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;List有特殊的&lt;code&gt;::&lt;/code&gt;操作符，可以用于将head和tail合并成一个List。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28656&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; list&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res37: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;0&lt;/span&gt;::list&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res38: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;该操作符在Spark源码中有体现&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28657&quot; readability=&quot;9&quot;&gt;
&lt;h2&gt;&lt;code&gt;3. LinkedList&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;LinkedList代表一个可变的列表，其elem和next属性类似于List的head和tail。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;案例：使用while循环将LinkedList中每个一个元素乘以二。&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28658&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;val&lt;/span&gt; list = scala.collection.mutable.&lt;span&gt;LinkedList&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; currentList = list&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; first = &lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt;( currentList !=&lt;span&gt;Nil&lt;/span&gt; &amp;amp;&amp;amp; currentList.next != &lt;span&gt;Nil&lt;/span&gt;){&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(first) { currentList.elem *= &lt;span&gt;2&lt;/span&gt;; first = &lt;span&gt;false&lt;/span&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;currentList = currentList.next.next&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(currentList != &lt;span&gt;Nil&lt;/span&gt;) currentList.elem *= &lt;span&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;list: scala.collection.mutable.&lt;span&gt;LinkedList&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;LinkedList&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28679&quot; readability=&quot;7&quot;&gt;
&lt;h2&gt;&lt;code&gt;4. Set&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Set代表一个没有重复元素的集合&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28660&quot; readability=&quot;7&quot;&gt;
&lt;h3&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;不保证插入顺序，元素是乱序的&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28661&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; scala.collection.mutable.&lt;span&gt;HashSet&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;]()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;s: scala.collection.mutable.&lt;span&gt;HashSet&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;Set&lt;/span&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res40: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res41: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res42: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28662&quot; readability=&quot;7&quot;&gt;
&lt;h3&gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;保证插入顺序，底层使用链表&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28663&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; scala.collection.mutable.&lt;span&gt;LinkedHashSet&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;]()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;s: scala.collection.mutable.&lt;span&gt;LinkedHashSet&lt;/span&gt;[&lt;span&gt;Int&lt;/span&gt;] = &lt;span&gt;Set&lt;/span&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res43: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res44: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; s += &lt;span&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res45: s.&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;Set&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28664&quot; readability=&quot;7&quot;&gt;
&lt;h3&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;会自动根据key来进行排序（默认字母顺序）&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28665&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = scala.collection.mutable.&lt;span&gt;SortedSet&lt;/span&gt;(&lt;span&gt;&quot;orange&quot;&lt;/span&gt;, &lt;span&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span&gt;&quot;banana&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;s: scala.collection.mutable.&lt;span&gt;SortedSet&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;] = &lt;span&gt;TreeSet&lt;/span&gt;(apple, banana, orange)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28666&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;&lt;code&gt;5. 集合的函数式编程（重要！）&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Scala中集合的函数式编程最大的体现就是对于一系列高阶函数的使用。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;strong&gt;高阶函数的使用是Scala与Java最大的区别！因为Java中没有函数式编程，也肯定没有高阶函数，无法直接将函数传入一个方法，或者让一个方法返回一个函数。&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-28667&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 为List中的每个元素都添加一个前缀&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;, &lt;span&gt;&quot;spark&quot;&lt;/span&gt;,&lt;span&gt;&quot;peter&quot;&lt;/span&gt;).map(&lt;span&gt;&quot;name is &quot;&lt;/span&gt; + _)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res47: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(name is leo, name is spark, name is peter)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;// 拆分单词&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;Hello world&quot;&lt;/span&gt;, &lt;span&gt;&quot;your are my friend&quot;&lt;/span&gt;).flatMap(_.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res48: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;Hello&lt;/span&gt;, world, your, are, my, friend)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;// 打印每一个元素&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;Hello world&quot;&lt;/span&gt;, &lt;span&gt;&quot;your are my friend&quot;&lt;/span&gt;).foreach(println(_))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;Hello&lt;/span&gt; world&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;your are my friend&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;// 学生姓名和成绩进行关联&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;List&lt;/span&gt;(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;, &lt;span&gt;&quot;jen&quot;&lt;/span&gt;, &lt;span&gt;&quot;jack&quot;&lt;/span&gt;).zip(&lt;span&gt;List&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res50: &lt;span&gt;List&lt;/span&gt;[(&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;Int&lt;/span&gt;)] = &lt;span&gt;List&lt;/span&gt;((leo,&lt;span&gt;100&lt;/span&gt;), (jen,&lt;span&gt;30&lt;/span&gt;), (jack,&lt;span&gt;20&lt;/span&gt;))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h2&gt;&lt;code&gt;6. 综合案例：统计多个文本内的单词总数&lt;/code&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;div id=&quot;wmd-preview-section-28669&quot; readability=&quot;33.5&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 使用scala的IO包将文件文件内的数据读取出来&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; lines1 = scala.io.&lt;span&gt;Source&lt;/span&gt;.fromFile(&lt;span&gt;&quot;E://test.txt&quot;&lt;/span&gt;).mkString&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lines1: &lt;span&gt;String&lt;/span&gt; = hello my&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; lines2 = scala.io.&lt;span&gt;Source&lt;/span&gt;.fromFile(&lt;span&gt;&quot;E://test2.txt&quot;&lt;/span&gt;).mkString&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lines2: &lt;span&gt;String&lt;/span&gt; = you are a good boy&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;span&gt;// 使用List的伴生对象，将多个文件内的内容创建为一个List&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; lines = &lt;span&gt;List&lt;/span&gt;(lines1, lines2)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lines: &lt;span&gt;List&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;] = &lt;span&gt;List&lt;/span&gt;(hello my, you are a good boy)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;// 首先将所有元素以空格分割单词，接着将每个单词映射为(单词，1)元组, 然后再取出元组里的第二个元素(_._2表示取出元组中的第二个元素)，最后做累加&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scala&amp;gt; lines.flatMap(_.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;)).map((_, &lt;span&gt;1&lt;/span&gt;)).map(_._2).reduceLeft(_ + _)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;res51: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code&gt;注意：最后一行多个高阶函数的链式调用其实就是Scala函数式编程的精髓所在，也是Scala相较于Java等编程语言最大的功能优势所在。并且Spark的源码中大量使用了这种复杂的链式调用，Spark本身提供的开发API也完全沿用了Scala的函数式编程。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 15 Dec 2017 14:37:00 +0000</pubDate>
<dc:creator>小丑进场</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiCheng-/p/8045108.html</dc:identifier>
</item>
<item>
<title>05.haproxy+mysql负载均衡 整合 redis集群+ssm - cui5445</title>
<link>http://www.cnblogs.com/cuijiale/p/8045037.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cuijiale/p/8045037.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215215726449-1017402039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本篇重点讲解haproxy+mysql负载均衡，搭建完成后与之前搭建的redis+ssm进行整合&lt;/p&gt;
&lt;p&gt;（注：这里用到了两台mysql数据库，分别安装两台虚拟机上，已经成功实现主主复制，如果有需要，请查看我另外一篇博客：http://www.cnblogs.com/cuijiale/p/8039421.html）&lt;/p&gt;
&lt;p&gt;1、首先下载最新的的haproxy安装包：haproxy-1.7.9.tar.gz　　&lt;/p&gt;
&lt;p&gt;　　下载完成后cp到特定的目录下/usr/local&lt;/p&gt;
&lt;p&gt;2、安装haproxy&lt;/p&gt;
&lt;p&gt;　　解压“tar -zxvf haproxy-1.7.9.tar.gz”在本目录，压缩完成后“cd haproxy-1.7.9”&lt;/p&gt;
&lt;p&gt;　　执行安装命令“make TARGET=linux3100 CPU=x86_64 PREFIX=/usr/local/haproxy-1.7.9”&lt;/p&gt;
&lt;p&gt;　　　　　　　　“make install PREFIX=/usr/local/haproxy-1.7.9”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215201901543-12255973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215201944152-1919598043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、安装完成后配置启动&lt;/p&gt;
&lt;p&gt;　　在安装目录的根目录创建haproxy.cfg配置文件，启动时需要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215202234558-840126170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　进入haproxy.cfg文件修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;global
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        log 127.0.0.1   local2    #日志相关
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        maxconn 4096
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        chroot /var/lib/haproxy
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    pidfile     /var/run/haproxy.pid
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;           user haproxy
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        daemon
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    stats socket /var/lib/haproxy/stats
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        #debug
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        #quiet
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;defaults
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    mode                    tcp            #haproxy运行模式（http | tcp | health）
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    log                     global
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    option                  dontlognull
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    option                  redispatch     #serverId对应的服务器挂掉后,强制定向到其他健康的服务器
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    retries                 3              #三次连接失败则服务器不用
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    timeout http-request    10s
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    timeout queue           1m
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    timeout connect         10s            #连接超时
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    timeout client          1m             #客户端超时
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    timeout server          1m             #服务器超时
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    timeout http-keep-alive 10s
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    timeout check           10s            #心跳检测
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    maxconn                 600            #最大连接数
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;  
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;listen  mysql
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        bind 0.0.0.0:23306    #代理端口
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        mode tcp              #模式 TCP
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        option mysql-check user haproxy   #mysql健康检查  root为mysql登录用户名
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        balance roundrobin            #调度算法
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        server mysql1 192.168.40.128:3306 weight 1 check  inter 1s rise 2 fall 2 #健康检查加上check
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        server mysql2 192.168.40.130:3306 weight 1 check  inter 1s rise 2 fall 2
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;listen stats     #监控
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;           mode http
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;           bind 0.0.0.0:8888
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;           stats enable
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;           stats uri /dbs
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;           stats realm Global\ statistics
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;            stats auth admin:admin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置文件后，就可以启动了，不过在这之前，因为数据库是负载均衡，需要同步数据与访问数据，需要创建一个一模一样的帐号来应对访问需求，并且主主复制的帐号也需要改成一样的，为了方便直接赋予这个用户全部权限。语法查看我mysql相关博客：　　　　http://www.cnblogs.com/cuijiale/p/8034319.html，其中都有提到。ok该排的坑我们已经躺过了，这里我就启动服务（为了让haproxy监控两个数据库信息，需要分别创建一个haproxy用户，密码为空就好）。&lt;/p&gt;
&lt;p&gt;　　./usr/local/haproxy-1.7.9/sbin/haproxy -f /usr/local/haproxy-1.7.9/haproxy.cfg&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215205443433-1835224903.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　启动后可以通过命令去查看。启动一切正常&lt;/p&gt;
&lt;p&gt;　　远程使用“http://192.168.40.128:8888/dbs”查看监控情况这里用到的配置全部来自于&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215205827433-1683428243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215210240730-1036543252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　登录密码这里配置的是admin/admin可以看到我们配置的两台mysql已经被监控到了。&lt;/p&gt;
&lt;p&gt;4、整合smm&lt;/p&gt;
&lt;p&gt;　　上面配置图中可以看到我们让haproxy监听的23306端口，所以配置文件中需要连接这个端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215211044793-1932417455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一切就绪，启动redis集群&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215211200886-2122090181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215211449558-1645777043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;redis主从6个节点全部启动后，启动web服务访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060053/201712/1060053-20171215211557808-164017311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据也完美得到。一切ok，这样我们一个SSM WEB应用+redis集群+mysql负载均衡的高可用，高性能，高扩展的读写分离架构就搭建完成了，其中还有很多瑕疵，之后也会自己慢慢补齐，架构还需要使用nginx对web应用进行负载均衡，减轻应用服务器压力。&lt;/p&gt;
&lt;p&gt; 其中不对地方，还望各位能够指出，谢谢&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 14:01:00 +0000</pubDate>
<dc:creator>cui5445</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cuijiale/p/8045037.html</dc:identifier>
</item>
<item>
<title>【GISER&amp;&amp;Painter】WebGL渲染初体验（一） - ESCAGE</title>
<link>http://www.cnblogs.com/escage/p/8044760.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/escage/p/8044760.html</guid>
<description>&lt;p&gt;&lt;em&gt;基于上一篇OpenGL的渲染原理，这两周又陆续接触了一些关于WebGL绘图的一些内容，因为刚入门，很多东西又很晦涩，所以特意花了小半天的时间整理了一下，特此记录。&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一&lt;strong&gt;   画布和画笔：创建Canvas &amp;amp;&amp;amp; 获取WebGL的Context&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　在开始WebGL的绘制故事之前，我们得先来认识一下Canvas，因为这玩意是我们之后绘图的基础底板：“Canvas元素创造了一个固定大小画布，并提供了一个或多个渲染上下文，用来绘制和处理要展示的内容”（摘自MDN）。按照定义，我们可以将其理解为渲染任务的中转站，因为最终绘图的输出是要将数据交给屏幕展示的，Canvas只是作为中间暂存待渲染数据的中转站，具有仿屏幕像素矩阵数据结构的一个容器，类似于中间缓存一类的概念。那为啥不直接在屏幕上输出画出来呢？之前听过这样一个解释，缓存的作用在于下一帧没有及时渲染出来的时候（渲染时间超出了人眼的感知帧率，一般24帧），上一帧的数据就能够替代下一帧，以此来保证过程的完整性。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　WebGL的API提供了能够在支持的浏览器中无插件地绘制交互式的2D/3D图像，而WebGL的渲染上下文WebGLRenderingContext基于OpenGL ES 2.0的绘图上下文所实现，一般用于在HTML5的&amp;lt;canvas&amp;gt;元素内绘图。而WebGLRenderingContext可以看作是渲染任务的核心CPU，所有的操作：从视口剪裁、状态信息、数据缓冲区、着色器的创建和调用、缓冲区绘制等等，都和WebGLRenderingContext紧密关联，所以，在任何Web程序开始绘制之前，我们所需要做的第一件事情就是创建一个画布作为数据容器，并将其与WebGL的上下文进行绑定，这样一来，我们既有了画布，又有了画笔，就可以开始绘制我们想要的图形了。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;&lt;strong&gt;二  调色盘：着色器&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　在传统的OpenGL的固定管线中，我们对于渲染过程的控制力度是有限的。从上一篇OpenGL基础里来看，在顶点操作和图元装配、纹理化、片元着色等过程中，我们能控制的只有调用底层硬件厂商提供的接口参数，使用固定的程序去进行上述过程的处理。这种级别的控制非常弱，记得不久前在知乎上看到了一个关于固定管线控制的比喻：“扳开关”，我觉得十分贴切，这个概念有点类似于铁道上的扳道工，火车的前进方向只能在铺设好的轨道上选择，如果没有轨道的地方，火车自然就没法开到。渲染同理，如果对于渲染效果有更高更灵活的要求（或者你无法接受硬件厂商提供的复杂道可怕的渲染参数配置，想用更能让人接受的方式去定制属于自己的渲染结果），那么固定管线的处理方式就没法满足需求。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/692953/201712/692953-20171215203838949-624583178.jpg&quot; alt=&quot;&quot; width=&quot;479&quot; height=&quot;318&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;图1 扳开关　&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　可编程渲染管线的出现给上面遇到的难题带来的答案，从图2可以看出：可编程渲染管线中出现了两个处理器：顶点着色器vertex shader和片元着色器fragment shader。这两个处理器绕过了传统的顶点操作和图元装配、片元着色等过程，通过自身的可编程特性，分别接手控制了顶点坐标转换、像素颜色计算的工作：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1）在顶点着色器Vertex Shader的处理阶段，顶点数据从GPU显存中读取出来，顶点着色器VS可以对每个顶点进行模型视图变换、投影变换等顶点处理工作，替代了固定管线中的顶点处理管线；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; vertex shader &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;2d-vertex-shader&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;x-shader/x-vertex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    attribute vec2 a_position;
    attribute vec4 a_color;

    uniform mat3 u_matrix;

    varying vec4 v_color;

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; main() {
        gl_Position &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vec4((vec3(a_position, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)).xy, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

        v_color &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; a_color;
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;2）顶点着色器处理完之后，管线会对各个顶点进行光栅化处理。由于顶点着色器的计算次数由顶点的数量决定，所以，n个顶点对应着n个顶点像素颜色，但在一个由若干个像素组成的图元中，非顶点像素的颜色该如何确定呢？此时就需要给大家介绍一个新对象：数据类型Varyings，从下面一段简短的顶点着色器DEMO中可以看出来，我们在顶点着色器中定义了好几种数据类型，有attribute，uniform以及varying。但来得早不如来得巧，我们先来认识一下Varying。&lt;/p&gt;
&lt;p&gt;　　Varying是一个变量，作为一个信使连接着顶点着色器和片元着色器。在一般情况下，顶点着色器会计算出每个顶点的颜色、坐标等值，并用Varying变量来存储这些值。回到刚才提出的问题，非顶点的像素如何确定自己的值呢？这就需要片元着色器来理解这个信使了，好在片元着色器和顶点着色器之间有个光栅器牵线搭桥，当顶点着色器传来Varying类型的顶点值时，光栅器会指定一种插值模式，指导片元着色器按像素逐个进行渲染绘制。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3）片元着色器fragment shader在光栅化的指导下进行工作（片元在上一篇OpenGL基础中已经提到过了，所谓片元即指光栅化后的图元）。片元着色器fs的主要工作是为当前光栅化的像素提供颜色值，屏幕中的每一个像素都需要调用一次片元着色器fs，每次调用都会从一个特殊的全局变量gl_FragColor中获取颜色信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; fragment shader &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;2d-fragment-shader&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;x-shader/x-fragment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

    precision mediump &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;;

    varying vec4 v_color;

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; main() {
        gl_FragColor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; v_color;
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/692953/201712/692953-20171215204002090-876381704.jpg&quot; alt=&quot;&quot; width=&quot;595&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;图2 可编程渲染管线&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;&lt;strong&gt;三 轮廓骨架线&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　在前面的步骤大概能够初探一二之后，下一步就是在显存中创建顶点对象VBO了：所谓VBO，顶点缓冲区对象( Vertex buffer object )这个概念来自于OpenGL，其概念定义为一个将顶点Vertex的各类属性信息（如vertex坐标，vertex法向量以及颜色等）存储在显存的一块专用的缓存区中，在执行渲染命令时，可直接从显存中取出VBO。由于整个过程都是在GPU中进行，不同于之前传统的绘制方式（CPU命令GPU执行绘制动作，反复传输大量的顶点数据到GPU中，渲染速度较慢），所以一般将VBO视为一个能够改善数据传输效率的对象。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　那么VBO是如何在WebGL中应用的呢？我们通常第一步通过createBuffer方法创建一个缓存对象VBO，通过图3的MDN中的定义可以看出，返回值VBO可以是颜色或者顶点坐标值的缓冲对象。此时只需调用gl.bufferData向gl_ARRAY_BUFFER中写入数据，再使用gl. bindBuffer方法就可以把createBuffer中的buffer数据与gl上下文中的ARRAY_BUFFER关联起来，也就是把顶点数据成功地写入了GPU显存中。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/692953/201712/692953-20171215204507183-1231977868.png&quot; alt=&quot;&quot; width=&quot;267&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;图3 WebGLBuffer&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; main(){
    　　　　　　......
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create a buffer &amp;amp; bind buffer&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建buffer数据，并绑定到gl的上下文中&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; positionBuffer =&lt;span&gt; gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;set Geometry&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充buffer&lt;/span&gt;
&lt;span&gt;            setGeometry(gl);
    　　　　　　......
    }&lt;br/&gt;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setGeometry(gl) {
        gl.bufferData(
                gl.ARRAY_BUFFER,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Float32Array([
                      &lt;/span&gt;-150, -100&lt;span&gt;,
                       &lt;/span&gt;150, -100&lt;span&gt;,
                      &lt;/span&gt;-150,  100&lt;span&gt;,
                       &lt;/span&gt;150, -100&lt;span&gt;,
                      &lt;/span&gt;-150,  100&lt;span&gt;,
                       &lt;/span&gt;150,  100&lt;span&gt;]),
                    gl.STATIC_DRAW);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　进行到上述阶段为止，渲染之前的初始化工作基本完成：画布空间已创建  --&amp;gt;  将画布Canvas与WebGL环境绑定 ---&amp;gt; 创建并指定了相关自定义着色器填充顶点数据 ---&amp;gt; 创建顶点缓存VBO。一切准备就绪，千军万马一般的屏幕像素们都在等着一个明确渲染绘图指令，只待gl令旗一挥，在GPU的指挥下，千万个屏幕像素将会按照规定的位置和颜色，以迅雷不及掩耳之势一蹴而就，以你所希望的组合呈现在你的屏幕上。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;四 画！&lt;/strong&gt;&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;　　我们再来一起看看最后一步的绘图渲染命令是如何发出的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　简单来看，我们可以把绘图渲染部分分为以下三部分：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　1）画布清洁&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　2）指定环境&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　3）执行着色程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Rendering code: 渲染代码&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span readability=&quot;3&quot;&gt; drawScene() {&lt;p&gt;　　　　　　&lt;span&gt;　//-----------------------画布清洁---------------------&lt;/span&gt;
            webglUtils.resizeCanvasToDisplaySize(gl.canvas);
            
            &lt;/p&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;covert from clip space to pixels&lt;/span&gt;
            gl.viewport(0, 0&lt;span&gt;, gl.canvas.width, gl.canvas.height);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;clear canvas&lt;/span&gt;
&lt;span&gt;            gl.clear(gl.COLOR_BUFFER_BIT);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;direct to our program&lt;/span&gt;
&lt;span&gt;            gl.useProgram(program);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------指定环境-------------------------------&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开属性attribute开关&lt;/span&gt;
&lt;span&gt;            gl.enableVertexAttribArray(positionAttributeLocation);
        
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对当前状态进行绑定 ： 绑定已经完成填充点数据的buffer数据块positionBuffer&lt;/span&gt;
&lt;span&gt;            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; size = 2;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 components per iteration&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; type = gl.FLOAT;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the data is 32bit floats&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; normalize = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; don't normalize the data&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; stride = 0;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 步长（byte），每个顶点数据所占的字节数：0 = move forward size * sizeof(type) each iteration to get the next position&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; offset = 0;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; start at the beginning of the buffer&lt;/span&gt;
            
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;vertexAttribPointer:顶点属性指路牌&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;告诉显卡从当前绑定的缓冲区(drawScene方法中的bindBuffer)中读取顶点数据vertex data&lt;/span&gt;
&lt;span&gt;            gl.vertexAttribPointer(
                    positionAttributeLocation, size, type, normalize, stride, offset);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------------执行着色程序-------------------------------------&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Draw the geometry.&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; primitiveType = gl.TRIANGLES; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制图元模式&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; offset = 0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从缓冲区开始读取数据的首地址偏移first下标&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; count = 6;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制顶点数据的个数，即Shader代码的运行次数&lt;/span&gt;
&lt;span&gt;            gl.drawArrays(primitiveType, offset, count);    
        }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;==================================================================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt;　　具体的WebGLRenderingContext提供的接口我在这里就不赘述了，这篇仅仅只是为了带给大家一个如何在浏览器中绘制渲染图形的概念，之后应该会有针对各个环节的专题，毕竟才刚刚入坑，来日方长！(因为想下班了，下次再写哈哈&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 12:54:00 +0000</pubDate>
<dc:creator>ESCAGE</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/escage/p/8044760.html</dc:identifier>
</item>
<item>
<title>Python中创建ndarrary的20中方法 - 树上的waltsmith</title>
<link>http://www.cnblogs.com/waltsmith/p/8044726.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/waltsmith/p/8044726.html</guid>
<description>&lt;p&gt;本文完整示例：&lt;a href=&quot;https://github.com/waltsmith88/blogs-python-samples/blob/master/20%20methods%20of%20creating%20ndarrary%20in%20Python%20with%20NumPy.ipynb&quot;&gt;完整示例代码&lt;/a&gt;&lt;br/&gt;本文介绍了基础的、常用的创建ndarrary的多种方法，附带示例代码。&lt;/p&gt;
&lt;h3 id=&quot;一通过ndarray创建&quot;&gt;一、通过ndarray创建&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;一维数组&quot;&gt;1.1 一维数组&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])
a&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([1, 2, 3])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;二维数组&quot;&gt;1.2 二维数组&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.array([[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;],
       [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[1, 2, 3, 4],
       [2, 3, 4, 5]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;三维数组&quot;&gt;1.3 三维数组&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array([
    [
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]
    ],
    [
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;]
    ]
])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr1)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;(arr1))
arr1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[[[ 1  2 32 23]
  [23  3 23  3]]

 [[ 1  2  3  4]
  [23  3  4 32]]]
&amp;lt;class 'numpy.ndarray'&amp;gt;





array([[[ 1,  2, 32, 23],
        [23,  3, 23,  3]],

       [[ 1,  2,  3,  4],
        [23,  3,  4, 32]]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二创建ndarrary的常见函数&quot;&gt;二、创建ndarrary的常见函数&lt;/h3&gt;
&lt;h4 id=&quot;zeros函数指定一个维度元组形状参数返回全0的ndarrary&quot;&gt;2. zeros()函数，指定一个维度元组（形状参数），返回全0的ndarrary&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.zeros((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))
arr2&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;ones函数指定一个维度元组形状参数返回全1的ndarrary&quot;&gt;3. ones()函数，指定一个维度元组（形状参数），返回全1的ndarrary&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.ones((&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))
arr3&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;empty函数指定一个维度元组形状参数返回一个值垃圾值为被初始化的ndarrary&quot;&gt;4. empty()函数，指定一个维度元组（形状参数），返回一个值（垃圾值）为被初始化的ndarrary&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.empty((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
arr4&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[  7.89119642e-312,   4.22795269e-307],
       [  9.34608432e-307,   1.11258854e-306]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三其他创建ndarrary的方式&quot;&gt;三、其他创建ndarrary的方式&lt;/h3&gt;
&lt;h4 id=&quot;numpy.arangestart-stop-step-dtypenone函数左开右闭&quot;&gt;5. numpy.arange([start ], stop[, step ], dtype=None)函数，左开右闭&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
arr5&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.linspacestart-stop-num50-endpointtrue-retstepfalse-dtypenone函数-产生一个等差数列左闭右闭&quot;&gt;6. numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)函数， 产生一个等差数列，左闭右闭&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr6 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.linspace(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
arr6&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([ 0.,  1.,  2.,  3.,  4.])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.logspacestart-stop-num50-endpointtrue-base10.0-dtypenone函数底数默认为10&quot;&gt;7. numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)函数，底数默认为10&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr7 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.logspace(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, base&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
arr7&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([  1.,   2.,   4.,   8.,  16.])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.eyen-mnone-k0-dtype函数生成nxm的单位矩阵&quot;&gt;8. numpy.eye(N, M=None, k=0, dtype=&lt;/h4&gt;
&lt;p&gt;Return a 2-D array with ones on the diagonal and zeros elsewhere.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr8 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.eye(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
arr8&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.],
       [ 0.,  0.,  0.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.zeros_likea-dtypenone-orderk-suboktrue函数返回一个与a的形状参数一样的元素全部为0的数组&quot;&gt;9. numpy.zeros_like(a, dtype=None, order=’K’, subok=True)函数，返回一个与a的形状参数一样的元素全部为0的数组&lt;/h4&gt;
&lt;p&gt;Return an array of zeros with the same shape and type as a given array.&lt;br/&gt;参数subok,是否继承a的数据类型；&lt;br/&gt;参数order，指定返回的结果在内存中的存储布局，默认是'K'，表示尽可能与a相同。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 返回一个与arr8形状应的全0数组&lt;/span&gt;
arr9 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.zeros_like(arr8)
arr9&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.ones_likea-dtypenone-orderk-suboktrue函数&quot;&gt;10. numpy.ones_like(a, dtype=None, order=’K’, subok=True)函数，&lt;/h4&gt;
&lt;p&gt;返回一个与a的形状参数一样且元素全为0的数组&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 返回一个与ar9形状应的全0数组&lt;/span&gt;
arr10 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.ones_like(arr9)
arr10&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 1.,  1.,  1.],
       [ 1.,  1.,  1.],
       [ 1.,  1.,  1.],
       [ 1.,  1.,  1.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.empty_likea-dtypenone-orderk-suboktrue函数返回一个与a形状相同且全部值为垃圾值随机值的数组&quot;&gt;11. numpy.empty_like(a, dtype=None, order=’K’, subok=True)函数，返回一个与a形状相同且全部值为垃圾值（随机值）的数组&lt;/h4&gt;
&lt;p&gt;Return a new array with the same shape and type as a given array.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr11 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.empty_like(np.ones((&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)))
arr11&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[  7.89102294e-312,   6.27463370e-322,   0.00000000e+000,
          0.00000000e+000],
       [  8.45593933e-307,   5.30276956e+180,   7.70748458e-043,
          4.57487963e-071],
       [  3.45618033e-086,   3.35860426e-143,   6.01433264e+175,
          6.93885958e+218],
       [  5.56218858e+180,   3.94356143e+180,   4.75084178e-037,
          1.24689504e-047],
       [  3.85156077e-057,   2.06073242e+184,   4.71530148e-143,
          1.50008929e+248]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.copya-orderk函数返回与a一样的数组&quot;&gt;12. numpy.copy(a, order=’K’)函数，返回与a一样的数组&lt;/h4&gt;
&lt;p&gt;Return an array copy of the given object.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 属于深拷贝，修改复制数组，对原数组没有影响&lt;/span&gt;
arr12 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.copy(arr11)
arr12[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
arr12&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[  1.00000000e+000,   6.27463370e-322,   0.00000000e+000,
          0.00000000e+000],
       [  8.45593933e-307,   5.30276956e+180,   7.70748458e-043,
          4.57487963e-071],
       [  3.45618033e-086,   3.35860426e-143,   6.01433264e+175,
          6.93885958e+218],
       [  5.56218858e+180,   3.94356143e+180,   4.75084178e-037,
          1.24689504e-047],
       [  3.85156077e-057,   2.06073242e+184,   4.71530148e-143,
          1.50008929e+248]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.identityn-dtypenone函数返回一个n阶单位方阵&quot;&gt;13. numpy.identity(n, dtype=None)函数，返回一个n阶单位方阵&lt;/h4&gt;
&lt;p&gt;Return the identity array.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr13 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.identity(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
arr13&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([[ 1.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.],
       [ 0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  1.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.fromfunctionfunction-shape-kwargs返回一个数组元素的值由函数计算形状由shape元组限制-注意参数shape是一个元组shape元组中的元素个数需要与函数中的参数个数一致分别表示不同纬度&quot;&gt;14. numpy.fromfunction(function, shape, **kwargs)返回一个数组，元素的值由函数计算，形状由shape元组限制&lt;br/&gt;注意：参数shape是一个元组，shape元组中的元素个数需要与函数中的参数个数一致，分别表示不同纬度。&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr20 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.fromfunction(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x, y: x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;y, shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr20)
arr21 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.fromfunction(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x, y, z: x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;z, shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))
arr21&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[[ 0.  1.  2.]
 [ 1.  2.  3.]
 [ 2.  3.  4.]]





array([[[ 0.,  1.,  2.],
        [ 1.,  2.,  3.],
        [ 2.,  3.,  4.]],

       [[ 1.,  2.,  3.],
        [ 2.,  3.,  4.],
        [ 3.,  4.,  5.]],

       [[ 2.,  3.,  4.],
        [ 3.,  4.,  5.],
        [ 4.,  5.,  6.]]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.mgrid函数&quot;&gt;15. numpy.mgrid函数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr14 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.mgrid[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]    &lt;span class=&quot;co&quot;&gt;# 表示从-1开始，步长为1，取2个数字&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr14)
arr15 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.mgrid[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:2j]  &lt;span class=&quot;co&quot;&gt;# 当加'j'时，表示左闭右闭，且取到2个数字&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr15)
arr16 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.mgrid[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]    &lt;span class=&quot;co&quot;&gt;# 当指定两个参数时，功能与numpy.arange()函数一样&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr16)
arr18 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.mgrid[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;# 分别在两个维度上做填充&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr18)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[-1  1]
[-1.  3.]
[-1  0  1  2]
[[[0 0 0 0 0]
  [1 1 1 1 1]
  [2 2 2 2 2]
  [3 3 3 3 3]
  [4 4 4 4 4]]

 [[0 1 2 3 4]
  [0 1 2 3 4]
  [0 1 2 3 4]
  [0 1 2 3 4]
  [0 1 2 3 4]]]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.ogrid函数&quot;&gt;16. numpy.ogrid函数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr19 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.ogrid[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr19)
arr20 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.ogrid[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(arr20)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[1]
[array([[0],
       [1],
       [2],
       [3],
       [4]]), array([[0, 1, 2, 3, 4]])]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.fromstringstring-dtypefloat-count-1-sep函数从字符串创建一个一维ndarrary&quot;&gt;17. numpy.fromstring(string, dtype=float, count=-1, sep=’‘)函数，从字符串创建一个一维ndarrary&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;arr21 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.fromstring(&lt;span class=&quot;st&quot;&gt;'1 2 3 4'&lt;/span&gt;, sep&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;)
arr21&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([ 1.,  2.,  3.,  4.])&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;numpy.fromiteriterable-dtype-count-1函数返回一个一维数组&quot;&gt;18. numpy.fromiter(iterable, dtype, count=-1)函数，返回一个一维数组&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 需要指定数据类型dtype&lt;/span&gt;
iterable &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))
arr22 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.fromiter(iterable,dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;)
arr22&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([ 0.,  1.,  4.,  9.])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四其他方法&quot;&gt;四、其他方法&lt;/h3&gt;
&lt;h4 id=&quot;numpy.fromfilefile-dtypefloat-count-1-sep函数从文本文件或二进制文件中创建ndarrary&quot;&gt;19. numpy.fromfile(file, dtype=float, count=-1, sep=’‘)函数，从文本文件或二进制文件中创建ndarrary&lt;/h4&gt;

&lt;ol&gt;&lt;li&gt;本文完整示例：&lt;a href=&quot;https://github.com/waltsmith88/blogs-python-samples/blob/master/20%20methods%20of%20creating%20ndarrary%20in%20Python%20with%20NumPy.ipynb&quot;&gt;完整示例代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;能力有限，欢迎指错交流；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;欢迎关注个人微信公众号&lt;span&gt;WaltSmithML&lt;/span&gt;或新浪微博&lt;span&gt;WaltSmith&lt;/span&gt;，公众号提供机器学习、深度学习、Hadoop、Spark、Python、数学知识等免费视频教程。本人主要方向为机器学习和深度学习。非常欢迎一起交流学习哈，除了学习，还可免费帮忙download论文或者书籍哈==============&lt;/span&gt;&lt;br/&gt;♥♥♥微信公众号♥♥♥&lt;img src=&quot;http://img.blog.csdn.net/20171208213028218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmdjaGVuZzk1NTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;微信公众号WaltSmithML二维码&quot;/&gt;♥♥♥♥&lt;img src=&quot;http://img.blog.csdn.net/20171208213415196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmdjaGVuZzk1NTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;新浪微博WaltSmith二维码&quot;/&gt;♥♥新浪微博♥♥&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 12:28:00 +0000</pubDate>
<dc:creator>树上的waltsmith</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/waltsmith/p/8044726.html</dc:identifier>
</item>
<item>
<title>python项目依赖管理分享迁移后重建开发环境（一）virtualenv 和 pip - Panda Fang</title>
<link>http://www.cnblogs.com/lonkiss/p/rebuild-development-environment-with-virtualenv-and-pip.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lonkiss/p/rebuild-development-environment-with-virtualenv-and-pip.html</guid>
<description>&lt;blockquote readability=&quot;4.4401913875598&quot;&gt;
&lt;p&gt;作者:Panda Fang&lt;/p&gt;
&lt;p&gt;出处:&lt;a href=&quot;http://www.cnblogs.com/lonkiss/p/rebuild-development-environment-with-virtualenv-and-pip.html&quot;&gt;http://www.cnblogs.com/lonkiss/p/rebuild-development-environment-with-virtualenv-and-pip.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创文章，转载请注明作者和出处，未经允许不可用于商业营利活动&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;讲讲软件工程中写代码之外的知识。开发中我们往往遇到这些问题：&lt;/p&gt;
&lt;p&gt;1、一个项目写了不少代码。使用一些第三方包或者模块，对于这个项目来说已经能很好的工作了， 但是后来这些包或模板有了新版，改动较大，一旦升级，之前的很多代码要改，很痛苦。但是咱们也不能永远用老版本的，新开的项目还是想尝尝鲜，又或工作之外自己想先熟悉新技术。默认情况下，一个系统中只有一份第三方包或模块，无法做到。所以我们希望自己的电脑中能同时共存多个版本的模块或包&lt;/p&gt;
&lt;p&gt;2、自己写的项目源代码转移到别的机器上或者分享给别人，又或者从别人拿到项目，如何能快速重建开发环境呢， 项目用了哪些第三方包，什么版本。 如果这些搞不定，那么代码就跑不起来。 从github上下载的别人代码，是不包含第三方包的，有些人又不写文档，就算从代码报错中能找到缺少的第三方包或模块，也很难知道确切的版本，自己装的版本万一不合适又不行，有些代码中的模块名和在pip仓库中的名字也不一定相同，遇到自己不熟悉的pip install 也白搭，总之麻烦一大堆。&lt;/p&gt;


&lt;p&gt;java 中有maven 和 pom.xml ，android 有 gradle 和 build.gradle ， node.js 有 npm 和 package.json。 pom.xml、  build.gradle、package.json都是记录依赖包及其版本的配置文件。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;python 中解决第 1 个问题，就引出了 virtualenv 虚拟环境， 解决第 2 个问题，就需要pip 和 virtualenv 配合使用。&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;pip 是管理第三方包的，默认情况下，是装在全局系统里的，所有项目都共用同一个版本的第三方包&lt;/p&gt;
&lt;p&gt;有了 virtualenv 每个项目都能有自己独立第三方包，隔离了。一个项目用 v1.0  另一个项目能用 v2.0&lt;/p&gt;


&lt;h2&gt;如何使用 pip 常用功能&lt;/h2&gt;
&lt;p&gt;我使用的是windows 10 和 从python官网下载的 python 3.6.3 exe 安装包，别的系统和版本可能会遇到不同的问题。这个版本安装完成后，已经带上了pip。&lt;/p&gt;
&lt;p&gt;按  ❖  + R 然后输入cmd 进入命令行，输入  &lt;span class=&quot;cnblogs_code&quot;&gt;pip&lt;/span&gt;  将会显示pip 的用法， 如果出错，可能没有装上pip ，  参考 &lt;a href=&quot;https://www.baidu.com/s?wd=%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip&quot; target=&quot;_blank&quot;&gt;如何安装pip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正常情况下会显示如下内容（我这里只贴出部分）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Usage:
  pip &lt;/span&gt;&amp;lt;command&amp;gt;&lt;span&gt; [options]

Commands:
  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; requirements format.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  search                      Search PyPI &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; packages.
  wheel                       Build wheels &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; command completion.
  help                        Show help &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; commands.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面介绍pip 常用法，以requests 模块为例&lt;/p&gt;
&lt;p&gt;查看pip 版本&lt;/p&gt;


&lt;p&gt;安装第三方包 格式：  &lt;span class=&quot;cnblogs_code&quot;&gt;pip install &amp;lt;package&amp;gt;&lt;/span&gt;   &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 pip install requests  或者可以指定版本  pip install requests==2.18.0  输入完成后enter等待安装完成。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;想知道仓库中有哪些可选版本&lt;/p&gt;
&lt;p&gt;&amp;gt;= pip 9.0 以后&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install requests==
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;163&quot;&gt;
&lt;pre&gt;
Collecting requests==&lt;span&gt;
  Could &lt;/span&gt;&lt;span&gt;not&lt;/span&gt; find a version that satisfies the requirement requests== (&lt;span&gt;from&lt;/span&gt; versions: 0.2.0, 0.2.1, 0.2.2, 0.2.3, 0.2.4, 0.3.0, 0.3.1, 0.3.2, 0.3.3, 0.3.4, 0.4.0, 0.4.1, 0.5.0, 0.5.1, 0.6.0, 0.6.1, 0.6.2, 0.6.3, 0.6.4, 0.6.5, 0.6.6, 0.7.0, 0.7.1, 0.7.2, 0.7.3, 0.7.4, 0.7.5, 0.7.6, 0.8.0, 0.8.1, 0.8.2, 0.8.3, 0.8.4, 0.8.5, 0.8.6, 0.8.7, 0.8.8, 0.8.9, 0.9.0, 0.9.1, 0.9.2, 0.9.3, 0.10.0, 0.10.1, 0.10.2, 0.10.3, 0.10.4, 0.10.6, 0.10.7, 0.10.8, 0.11.1, 0.11.2, 0.12.0, 0.12.1, 0.13.0, 0.13.1, 0.13.2, 0.13.3, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.13.8, 0.13.9, 0.14.0, 0.14.1, 0.14.2, 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.1.0, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 2.0.0, 2.0.1, 2.1.0, 2.2.0, 2.2.1, 2.3.0, 2.4.0, 2.4.1, 2.4.2, 2.4.3, 2.5.0, 2.5.1, 2.5.2, 2.5.3, 2.6.0, 2.6.1, 2.6.2, 2.7.0, 2.8.0, 2.8.1, 2.9.0, 2.9.1, 2.9.2, 2.10.0, 2.11.0, 2.11.1, 2.12.0, 2.12.1, 2.12.2, 2.12.3, 2.12.4, 2.12.5, 2.13.0, 2.14.0, 2.14.1, 2.14.2, 2.15.1, 2.16.0, 2.16.1, 2.16.2, 2.16.3, 2.16.4, 2.16.5, 2.17.0, 2.17.1, 2.17.2, 2.17.3, 2.18.0, 2.18.1, 2.18.2, 2.18.3, 2.18.4&lt;span&gt;)
No matching distribution found &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; requests==
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt; pip 9.0  给一个无效的版本号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install requests==-1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装后想查看安装的什么版本、作者、存放位置等信息 格式  &lt;span class=&quot;cnblogs_code&quot;&gt;pip show &amp;lt;package&amp;gt;&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip show requests
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 卸载第三方包 格式  &lt;span class=&quot;cnblogs_code&quot;&gt;pip uninstall &amp;lt;package&amp;gt;&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip uninstall requests
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出所有已安装包及其版本&lt;/p&gt;


&lt;h2&gt;如何使用 virtualenv&lt;/h2&gt;
&lt;p&gt;python 3.6.3 Windows 安装包已经包含了这个功能。在桌面创建一个myapp的文件夹，作为我们的项目文件。 打开文件夹， 按下Alt + D ， 光标就会定位到地址栏， 输入cmd  enter，弹出cmd 窗口并在这个文件夹了，免去繁琐的cd。 注意以下过程中不要关闭cmd&lt;/p&gt;
&lt;p&gt; 输入 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
python -m venv venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这将会在 myapp 文件夹内创建一个 venv 文件夹。 第一个venv 是调用 virtualenv 功能， 第二个 venv 是文件夹的名称， 可以任意取一个自己喜欢的名称&lt;/p&gt;
&lt;p&gt;如果这步操作不行，可能是跟我的python版本不同， 或者安装的时候缺少了什么。那么需要换一种方式，输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后 输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
virtualenv venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样也能创建 venv 文件夹。 &lt;span class=&quot;cnblogs_code&quot;&gt;python -m venv venv&lt;/span&gt;   正常工作的不用管上面两步&lt;/p&gt;
&lt;p&gt;看看venv 文件夹 这里面就包含了一些独立运行需要的文件。&lt;/p&gt;
&lt;p&gt;有了这个文件夹之后， 使用 pip install ，仍然安装到全局系统中。那么如何才能工作在virtualenv 中呢，输入 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
venv\Scripts\activate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，原来的路径前面多了一个 (venv) ，如果你用的别的名字，就是别的。 如果关闭了cmd ，再打开仍然要用这种方式激活&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/363499/201712/363499-20171215192646011-123648451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;下面以requests 包为例写个例子项目， &lt;strong&gt;进入 virtualenv环境&lt;/strong&gt;后，输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
pip install requests
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个python 源文件 app.py ，输入以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

r &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.status_code)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后回到 cmd 输入 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
python app.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行代码网络通畅的情况下会输出 200&lt;/p&gt;
&lt;p&gt;为了证明使用了 virtualenv ，确实能隔离 第三方包依赖。 现在我们&lt;strong&gt;离开 virtualenv环境&lt;/strong&gt;，cmd 输入 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
venv\Scripts\deactivate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，路径前面的(venv) 没了，回到了全局系统 。 如果之前按照步骤执行过  pip uninstall requests  现在全局系统中就不存在这个第三方包了&lt;/p&gt;
&lt;p&gt;再次输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
python app.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
ModuleNotFoundError: No module named &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;requests&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;别的项目 也像 myapp 这样去处理，就可以依赖关系隔离了&lt;/p&gt;

&lt;h2&gt;如何迁移后恢复重建开发环境&lt;/h2&gt;
&lt;p&gt;一个项目要分享到github ， 或者开发组的其他成员， 又或者自己换了机器， 如何重建开发环境呢，装上一样的第三方包。 这里用自己的电脑模拟&lt;/p&gt;
&lt;p&gt;cmd 定位到刚才桌面上的myapp文件夹。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
venv\Scripts\activate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;激活virtualenv ， 输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导出了第三包的记录文件 。&lt;/p&gt;
&lt;p&gt;再在桌面创建一个test文件夹， 里面再创建一个myapp文件夹，把刚才Desktop\myapp里的 app.py 和 requirements.txt 文件复制到这个文件夹里。&lt;/p&gt;
&lt;p&gt;另外打开一个cmd 定位到新建的 myapp 文件夹 ，然后创建virtualenv&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
python -m venv venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用上面的命令创建好之后 激活&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
venv\Scripts\activate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;激活之后，注意现在工作在virtualenv里。使用pip 恢复安装依赖的第三方包，命令如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等待完成。 运行app.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
python app.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行代码网络通畅的情况下会输出 200&lt;/p&gt;
&lt;p&gt;至此恢复重建开发环境完成&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/363499/201712/363499-20171215192721246-1032406695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 参考资料：&lt;a href=&quot;https://stackoverflow.com/questions/43828879/simple-dependency-management-for-a-python-project&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/43828879/simple-dependency-management-for-a-python-project&lt;/a&gt; &lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 11:50:00 +0000</pubDate>
<dc:creator>Panda Fang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lonkiss/p/rebuild-development-environment-with-virtualenv-and-pip.html</dc:identifier>
</item>
<item>
<title>Hibernate框架进阶（中篇）之多表关系 - 风之之</title>
<link>http://www.cnblogs.com/fzz9/p/8043812.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzz9/p/8043812.html</guid>
<description>&lt;h2&gt;&lt;span&gt;导读&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Hibernate进阶主要分为上中下三篇，本文是中篇，主要讲解Hibernate框架中&lt;span&gt;多表关系的实现。我们知道多表关系有&lt;span&gt;一对一、&lt;span&gt;一对多（多对一）&lt;span&gt;和&lt;/span&gt;&lt;span&gt;多对&lt;span&gt;&lt;span&gt;多&lt;/span&gt;三种关系。而1对1关系一般合并为一个表处理，所以本文主要讲解1对多和多对多关系的实现。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、一对多关系&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;一对多的关系很多，比如人和籍贯就是一对多的关系，下面就用人和籍贯这个实例来展开说明。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、数据库的实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; 对于一对多关系的建立，我们通常是使用&lt;span&gt;外键&lt;/span&gt;（foreign key）来表示。外键列添加在一对多的“多”这一方。这里用person表和province表分别表示人和籍贯，所以这个外键就加入province表中，值就是person表的主键值。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、实体类的实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; 对应数据库表，实体类分别用Person类和Province类表示。而在实体类中就没有外键这种概念了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于Person类是“多对一”，即很多人属于同一个省份。所以怎么在Person类中表示所属的这&lt;span&gt;一个省份&lt;/span&gt;呢？使用类Province即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;反过来对于Province类是“一对多”，即一个省份有很多人。那么怎么表示&lt;span&gt;很多人&lt;/span&gt;呢？即很多Person类，所以我们很快想到使用集合来保存Person类，这里我们使用Set集合。（Set集合值不会重复更符合实际的需求）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，最终的类实现如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_e8f72511-3a03-486c-b8ac-453fa05393be&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e8f72511-3a03-486c-b8ac-453fa05393be&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e8f72511-3a03-486c-b8ac-453fa05393be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; domain;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Long per_id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省份证&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Integer age;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;年龄
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关系&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Province province;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所属省份&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getPer_id() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; per_id;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPer_id(Long per_id) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.per_id =&lt;span&gt; per_id;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Province getProvince() {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; province;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProvince(Province province) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.province =&lt;span&gt; province;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Person [per_id=&quot; + per_id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, province=&quot; + province + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Person&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4fcbf994-0fc7-43a8-8181-36e0a0053041&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4fcbf994-0fc7-43a8-8181-36e0a0053041&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4fcbf994-0fc7-43a8-8181-36e0a0053041&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; domain;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Province {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Long pro_id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省代码&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省名
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关系&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Set&amp;lt;Person&amp;gt; personSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;Person&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省份的人口集合&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getPro_id() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pro_id;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPro_id(Long pro_id) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pro_id =&lt;span&gt; pro_id;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Set&amp;lt;Person&amp;gt;&lt;span&gt; getPersonSet() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; personSet;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPersonSet(Set&amp;lt;Person&amp;gt;&lt;span&gt; personSet) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.personSet =&lt;span&gt; personSet;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Province [pro_id=&quot; + pro_id + &quot;, name=&quot; + name + &quot;, personSet=&quot; + personSet + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Province&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;3、数据库表和实体类的映射关系&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; &lt;span&gt;配置文件主要是orm元数据（映射关系）和主配置文件的配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1、orm元数据的配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;orm元数据的配置和之前的配置几乎一致，主要是如何在配置文件中表示外键。具体看下面的配置方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6597636e-cdbb-4112-8b32-8566b005a1d4&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6597636e-cdbb-4112-8b32-8566b005a1d4&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6597636e-cdbb-4112-8b32-8566b005a1d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Person&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;person&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;per_id&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;identity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 多对一关系的配置： &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;many-to-one &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;province&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;pro_id&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;Province&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;many-to-one&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Person.hbm.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d618133b-9a0f-4504-8dd0-7d111d6dd5f2&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d618133b-9a0f-4504-8dd0-7d111d6dd5f2&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d618133b-9a0f-4504-8dd0-7d111d6dd5f2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Province&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;province&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pro_id&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;identity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一对多关系的配置： &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;personSet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;key &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;pro_id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;one-to-many &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Person&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Province.hbm.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;多对一：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215181717496-196612355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一对多：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215182223465-351490848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.2、主配置文件的配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e39e0442-59b2-4338-8dc6-fb100619f871&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e39e0442-59b2-4338-8dc6-fb100619f871&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e39e0442-59b2-4338-8dc6-fb100619f871&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 导入约束 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 主配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLDialect
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLInnoDBDialect
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        #hibernate.dialect org.hibernate.dialect.MySQLMyISAMDialect
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        #hibernate.connection.driver_class com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        #hibernate.connection.url jdbc:mysql:///test
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        #hibernate.connection.username gavin
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        #hibernate.connection.password
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;          &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库驱动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.driver_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库url &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql:///hibernate&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接用户名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;root&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接密码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;password&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库方言 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.dialect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQLDialect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.current_session_context_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;thread&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.show_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.format_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.hbm2ddl.auto&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;update&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入orm元数据&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapping &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;domain/Person.hbm.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapping &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;domain/Province.hbm.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hibernate.cfg.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215182445808-338919842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4、Hibernate代码测试&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; Test;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Session;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Transaction;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; domain.Person;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; domain.Province;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; utils.HibernateUtils;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、创建对话session&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         Session session =&lt;span&gt; HibernateUtils.openSession();        
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、开启事务&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         Transaction tx =&lt;span&gt; session.beginTransaction();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、操作事务:假设张三和李四籍贯北京，现在讲数据持久化到数据库中
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实体对象&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         Province pro = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Province();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         pro.setName(&quot;北京&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         Person p1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         Person p2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         p1.setName(&quot;张三&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         p2.setName(&quot;李四&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立对象之间的关系
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一对多：&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        pro.getPersonSet().add(p1);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        pro.getPersonSet().add(p2);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;多对一&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        p1.setProvince(pro);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        p2.setProvince(pro);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将信息持久化到数据库&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        session.save(pro);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        session.save(p1);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        session.save(p2);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、提交事务&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        tx.commit();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、关闭资源 &lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        session.close();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215182636746-1277050663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215182707027-1465819096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5、扩展：cascade属性和reverse属性&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1）cascade属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cascade属性是配置&lt;span&gt;级&lt;span&gt;&lt;span&gt;联&lt;/span&gt;&lt;/span&gt;操作&lt;/span&gt;的一个配置属性，cascade的属性值有：save-update(级联保存)、delete（级联删除）、all（级联保存和删除）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;级联的意思是当你配置了这个属性，那么你操作这个对象时对应的关系对象也会进行相应操作。比如我在上面的Province映射关系中配置了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215183417683-1071815457.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么当我执行session.save(pro)时就不必再执行session.save(p1)和session.save(p2)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结论：该属性是用来简化书写的，如果要使用，&lt;span&gt;建议不要使用delete和all&lt;/span&gt;，因为级联删除存在很大风险，可能会无意中删除很多数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）reverse属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 另一个属性reverse在一对多关系中可以用来&lt;span&gt;优化性能&lt;/span&gt;。reverse有两个值：true和false。当选择true是表示放弃维护外键，默认是false。（&lt;span&gt;这个属性在多对&lt;/span&gt;多关系中必须使用，因为不能使用两个表来同时维护外键）。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二、多对多关系&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、数据库的实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; 多对多的关系是通过转换为两个一对多来实现的。例如学生选课这个关系，一个学生可以选多门课，每个课程又可以对应很多学生，即多对多关系。这样我们就可以在student表和course表之间增加一个&lt;span&gt;关系表&lt;span&gt;choose表（选课表），用来存储学生id和课程id，以此来建立对应关系。这样多对多的关系就变成了两个一对多的关系。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、实体类的实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; &lt;span&gt;实体类的创建和一对多是一样的道理。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ffa87fca-7ab4-46b4-9926-5761edb60268&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ffa87fca-7ab4-46b4-9926-5761edb60268&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ffa87fca-7ab4-46b4-9926-5761edb60268&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; domain;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Long sid;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;学号&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String sname;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Set&amp;lt;Course&amp;gt; courseSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;Course&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选课信息&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getSid() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sid;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSid(Long sid) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sid =&lt;span&gt; sid;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSname() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSname(String sname) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sname =&lt;span&gt; sname;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Set&amp;lt;Course&amp;gt;&lt;span&gt; getCourseSet() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; courseSet;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCourseSet(Set&amp;lt;Course&amp;gt;&lt;span&gt; courseSet) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.courseSet =&lt;span&gt; courseSet;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     
&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Student&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_33c5f8df-dae4-4aba-b827-806b2b8198b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_33c5f8df-dae4-4aba-b827-806b2b8198b8&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_33c5f8df-dae4-4aba-b827-806b2b8198b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; domain;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Course {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Long cid;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;课程代码&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String cname;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;课程名&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Set&amp;lt;Student&amp;gt; studentSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;Student&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;学生信息&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getCid() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cid;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCid(Long cid) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.cid =&lt;span&gt; cid;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCname() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCname(String cname) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.cname =&lt;span&gt; cname;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Set&amp;lt;Student&amp;gt;&lt;span&gt; getStudentSet() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentSet;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setStudentSet(Set&amp;lt;Student&amp;gt;&lt;span&gt; studentSet) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.studentSet =&lt;span&gt; studentSet;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Course&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;3、&lt;span&gt;数据库表和实体类的映射关系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; 这里的配置和之前的配置也是几乎不变，关键在于多对多关系的配置。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3851b9c6-0717-480f-a927-6fee0d6bfc7d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3851b9c6-0717-480f-a927-6fee0d6bfc7d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3851b9c6-0717-480f-a927-6fee0d6bfc7d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;identity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sname&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;sname&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 多对多关系的配置： &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;courseSet&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;choose&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;key &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;many-to-many &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Course&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;cid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;many-to-many&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Student.hbm.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_abb63f7b-3733-4cf2-b5be-4f1bb4114990&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_abb63f7b-3733-4cf2-b5be-4f1bb4114990&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_abb63f7b-3733-4cf2-b5be-4f1bb4114990&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;domain&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Course&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;course&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cid&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;identity&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cname&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;cname&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 多对多关系的配置： &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;studentSet&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;choose&quot;&lt;/span&gt;&lt;span&gt; inverse&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;key &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;cid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;many-to-many &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;many-to-many&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Course.hbm.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;变化：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Student.hbm.xml中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193418152-1288314541.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Course.hbm.xml中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193444324-504582524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主配置文件中：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193620293-969050493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5、测试&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Transaction;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; domain.Course;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; domain.Student;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; utils.HibernateUtils;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo2 {
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、创建对话session&lt;/span&gt;
        Session session =&lt;span&gt; HibernateUtils.openSession();        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、开启事务&lt;/span&gt;
        Transaction tx =&lt;span&gt; session.beginTransaction();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、操作事务:假设有语数外三门课，张三选了语文和数学，李四选了语文和英语，Tom选了数学。将上述信息持久化到数据库
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实体对象&lt;/span&gt;
        Course c1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Course();
        c1.setCname(&lt;/span&gt;&quot;语文&quot;&lt;span&gt;);
        Course c2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Course();
        c2.setCname(&lt;/span&gt;&quot;数学&quot;&lt;span&gt;);
        Course c3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Course();
        c3.setCname(&lt;/span&gt;&quot;英语&quot;&lt;span&gt;);
        
        Student s1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
        s1.setSname(&lt;/span&gt;&quot;张三&quot;&lt;span&gt;);
        Student s2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
        s2.setSname(&lt;/span&gt;&quot;李四&quot;&lt;span&gt;);
        Student s3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
        s3.setSname(&lt;/span&gt;&quot;Tom&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立对象之间的关系
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;课程对应学生&lt;/span&gt;
&lt;span&gt;        c1.getStudentSet().add(s1);
        c1.getStudentSet().add(s2);
        c2.getStudentSet().add(s2);
        c2.getStudentSet().add(s3);
        c3.getStudentSet().add(s2);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;学生对应课程&lt;/span&gt;
&lt;span&gt;        s1.getCourseSet().add(c1);
        s1.getCourseSet().add(c2);
        s2.getCourseSet().add(c2);
        s2.getCourseSet().add(c3);
        s3.getCourseSet().add(c2);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将信息持久化到数据库&lt;/span&gt;
&lt;span&gt;        session.save(c1);
        session.save(c2);
        session.save(c3);
        session.save(s1);
        session.save(s2);
        session.save(s3);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、提交事务&lt;/span&gt;
&lt;span&gt;        tx.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、关闭资源 &lt;/span&gt;
&lt;span&gt;        session.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193751918-1606802385.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193813793-1102119521.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250367/201712/1250367-20171215193847261-1094165372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 11:41:00 +0000</pubDate>
<dc:creator>风之之</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzz9/p/8043812.html</dc:identifier>
</item>
</channel>
</rss>