<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>EntityFramework Core 2.0执行原始查询如何防止SQL注入？ - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8481331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8481331.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;接下来一段时间我们来讲讲EntityFramework Core基础，精简的内容，深入浅出，希望为想学习EntityFramework Core的童鞋提供一点帮助。&lt;/p&gt;
&lt;h2&gt;EntityFramework Core执行原始查询&lt;/h2&gt;
&lt;p&gt;在EntityFramework Core中执行原始查询我们借助FromSql来实现，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227223221457-1141883474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是最简单且不带任何条件的查询方式，接下来我们看看有条件的查询我们应该如何查询，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter[]
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(){ ParameterName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@p0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Value = &lt;span&gt;1&lt;/span&gt;, SqlDbType =&lt;span&gt; System.Data.SqlDbType.Int }
                };

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders WHERE Id = @p0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, parameters)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227223741828-1137580802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除了以上利用参数化查询方式外，若我们还借助string.format或者C# 6.0出现的新特性字符串插值即美元符号$来查询最终生成的SQL是否仍然是以参数化查询呢，我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders WHERE Id = {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227224128787-269227215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上我们看出即使利用字符串插值最终仍然翻译成参数化SQL。接下来我们再来看看字符串拼接查询方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, CreatedTime, Url, ModifiedTime FROM dbo.Blogs &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WHERE Name = '&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + searchString + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227224743891-1467140498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们通过控制台打印能够看出最终生成的SQL语句是以字符串形式展示，在EntityFramework Core 2.0+上执行原始查询的APi即FromSql有重载方法，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IQueryable&amp;lt;TEntity&amp;gt; FromSql&amp;lt;TEntity&amp;gt;([NotNullAttribute] &lt;span&gt;this&lt;/span&gt; IQueryable&amp;lt;TEntity&amp;gt; source, [NotNullAttribute][NotParameterized] FormattableString sql) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们利用上述FromSql重载方法传递字符串参数，同时在查询字符串中添加对数据库表操作，验证EF Core是否能防止SQL注入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky; DROP TABLE dbo.Blogs;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, Url, CreatedTime, ModifiedTime FROM dbo.Blogs &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                    + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; WHERE Name = {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, searchString)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227225342266-1296989122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;经过验证您会发现上述我们注入上述Blogs表的SQL语句，最终表将不会删除。我们看到当未利用重载方法进行字符串拼接，此时参数将以字符串形式展示，这种情况极易引起SQL注入问题。C# 6.0引入了字符串插值（String Interpolation），此特性能够允许C#表达式直接嵌入到字符串文本中，为运行时构建字符串提供了一个很好的方法。在EF Core 2.0特性中，对FromSql和ExecuteSqlCommand方法都添加了对插入字符串的特殊支持。此新特性的支持允许以安全的方式使用C＃字符串插值。即防止在运行时动态构建SQL时可能发生SQL注入问题。&lt;/p&gt;
&lt;p&gt;是不是到了这里就这样结束了呢？显然不是这样，接下来咱们再来看看另外一种情况，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM Blogs WHERE Name = {author}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs.FromSql(query).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227230419562-1716297346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227230553142-494571917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的语法错误显而易见，我们需要用单引号将变量包含起来才能避免语法错误，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM Blogs WHERE Name = &lt;span&gt;'{author}'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs.FromSql(query).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述情况下，EF Core依然将执行明文字符串而不是作为变量查询并未以参数化执行。如果变量包含恶意字符串，那么EF Core将根本无法防范并保护SQL。因此，如果我们需要通过EF Core执行原始T-SQL，则应使用参数化SQL或利用FormatttableString，FromSql有两个重载，其一为通过FormatttableString可格式化字符串参数，其二为原始字符串且可传递查询参数。所以上述错误，我们可利用FormatttableString来执行，同时在利用FromSql方法查询过后我们仍可以继续进行查询，比如如下关联查询Posts表数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                FormattableString sql &lt;/span&gt;= &lt;span&gt;$&lt;/span&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, Url, CreatedTime, ModifiedTime FROM dbo.Blogs WHERE Name = {searchString}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql&lt;/span&gt;&lt;span&gt;(sql)
                    .Include(d &lt;/span&gt;=&amp;gt;&lt;span&gt; d.Posts)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227232807576-425298006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过【&lt;span&gt;$@&lt;/span&gt;】并利用FormattableString重载或者传递参数化变量来防止SQL注入问题，希望您发现EF Core 2.0中这个新特性，同时不要忘记它也用来承担更大的责任，由于SQL注入攻击，不会让我们所写代码存在漏洞。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本节我们详细讲解了EF Core 2.0中执行原始查询如何防止SQL注入问题，精简的内容，简单的讲解，希望能帮助到您。我们明天再会。&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 15:32:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8481331.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——33. 优先考虑类型安全的异构容器 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8481317.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8481317.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;泛型的常见用法包括集合，如&lt;code&gt;Set &amp;lt;E&amp;gt;&lt;/code&gt;和&lt;code&gt;Map &amp;lt;K，V&amp;gt;&lt;/code&gt;和单个元素容器，如&lt;code&gt;ThreadLocal &amp;lt;T&amp;gt;&lt;/code&gt;和&lt;code&gt;AtomicReference &amp;lt;T&amp;gt;&lt;/code&gt;。 在所有这些用途中，它都是参数化的容器。 这限制了每个容器只能有固定数量的类型参数。 通常这正是你想要的。 一个&lt;code&gt;Set&lt;/code&gt;有单一的类型参数，表示它的元素类型; 一个&lt;code&gt;Map&lt;/code&gt;有两个，代表它的键和值的类型；等等。&lt;/p&gt;
&lt;p&gt;然而有时候，你需要更多的灵活性。 例如，数据库一行记录可以具有任意多列，并且能够以类型安全的方式访问它们是很好的。 幸运的是，有一个简单的方法可以达到这个效果。 这个想法是参数化键（key）而不是容器。 然后将参数化的键提交给容器以插入或检索值。 泛型类型系统用于保证值的类型与其键一致。&lt;/p&gt;
&lt;p&gt;作为这种方法的一个简单示例，请考虑一个Favorites类，它允许其客户端保存和检索任意多种类型的&lt;code&gt;favorite&lt;/code&gt;实例。 该类型的Class对象将扮演参数化键的一部分。其原因是这&lt;code&gt;Class&lt;/code&gt;类是泛型的。 类的类型从字面上来说不是简单的&lt;code&gt;Class&lt;/code&gt;，而是&lt;code&gt;Class &amp;lt;T&amp;gt;&lt;/code&gt;。 例如，&lt;code&gt;String.class&lt;/code&gt;的类型为&lt;code&gt;Class &amp;lt;String&amp;gt;&lt;/code&gt;，&lt;code&gt;Integer.class的&lt;/code&gt;类型为&lt;code&gt;Class &amp;lt;Integer&amp;gt;&lt;/code&gt;。 当在方法中传递字面类传递编译时和运行时类型信息时，它被称为类型令牌（type token）[Bracha04]。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;类的API很简单。 它看起来就像一个简单Map类，除了该键是参数化的以外。 客户端在设置和获取&lt;code&gt;favorites&lt;/code&gt;实例时呈现一个Class对象。 这里是API：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - API
public class Favorites {
    public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance);
    public &amp;lt;T&amp;gt; T getFavorite(Class&amp;lt;T&amp;gt; type);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是一个演示&lt;code&gt;Favorites&lt;/code&gt;类，保存，检索和打印喜欢的&lt;code&gt;String&lt;/code&gt;，&lt;code&gt;Integer&lt;/code&gt;和&lt;code&gt;Class&lt;/code&gt;实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - client

public static void main(String[] args) {

    Favorites f = new Favorites();

    f.putFavorite(String.class, &quot;Java&quot;);

    f.putFavorite(Integer.class, 0xcafebabe);

    f.putFavorite(Class.class, Favorites.class);

     String favoriteString = f.getFavorite(String.class);

    int favoriteInteger = f.getFavorite(Integer.class);

    Class&amp;lt;?&amp;gt; favoriteClass = f.getFavorite(Class.class);

    System.out.printf(&quot;%s %x %s%n&quot;, favoriteString,

        favoriteInteger, favoriteClass.getName());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正如你所期望的，这个程序打印&lt;code&gt;Java cafebabe Favorites&lt;/code&gt;。 请注意，顺便说一下，Java的&lt;code&gt;printf&lt;/code&gt;方法与C语言的不同之处在于，应该使用&lt;code&gt;％n&lt;/code&gt;，而在C中使用&lt;code&gt;\n&lt;/code&gt;。&lt;code&gt;％n&lt;/code&gt;生成适用的特定于平台的行分隔符，该分隔符在很多但不是所有平台上都是&lt;code&gt;\n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;实例是类型安全的：当你请求一个字符串时它永远不会返回一个整数。 它也是异构的：与普通Map不同，所有的键都是不同的类型。 因此，我们将&lt;code&gt;Favorites&lt;/code&gt;称为类型安全异构容器（typesafe heterogeneous container.）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;的实现非常小巧。 这是完整的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - implementation
public class Favorites {
    private Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; favorites = new HashMap&amp;lt;&amp;gt;();

    public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance) {
        favorites.put(Objects.requireNonNull(type), instance);
    }

    public &amp;lt;T&amp;gt; T getFavorite(Class&amp;lt;T&amp;gt; type) {
        return type.cast(favorites.get(type));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有一些微妙的事情发生。 每个&lt;code&gt;Favorites&lt;/code&gt;实例都由一个名为&lt;code&gt;favorites&lt;/code&gt;私有的&lt;code&gt;Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;&lt;/code&gt;来支持。 你可能认为无法将任何内容放入此Map中，因为这是无限定的通配符类型，但事实恰恰相反。 需要注意的是通配符类型是嵌套的：它不是通配符类型的Map类型，而是键的类型。 这意味着每个键都可以有不同的参数化类型：一个可以是&lt;code&gt;Class &amp;lt;String&amp;gt;&lt;/code&gt;，下一个&lt;code&gt;Class &amp;lt;Integer&amp;gt;&lt;/code&gt;等等。 这就是异构的由来。&lt;/p&gt;
&lt;p&gt;接下来要注意的是，favorites的Map的值类型只是Object。 换句话说，Map不保证键和值之间的类型关系，即每个值都是由其键表示的类型。 事实上，Java的类型系统并不足以表达这一点。 但是我们知道这是真的，并在检索一个favorite时利用了这点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putFavorite&lt;/code&gt;实现很简单：只需将给定的Class对象映射到给定的favorites的实例即可。 如上所述，这丢弃了键和值之间的“类型联系（type linkage）”；无法知道这个值是不是键的一个实例。 但没关系，因为&lt;code&gt;getFavorites&lt;/code&gt;方法可以并且确实重新建立这种关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getFavorite&lt;/code&gt;的实现比&lt;code&gt;putFavorite&lt;/code&gt;更复杂。 首先，它从favorites Map中获取与给定Class对象相对应的值。 这是返回的正确对象引用，但它具有错误的编译时类型：它是Object（favorites map的值类型），我们需要返回类型&lt;code&gt;T&lt;/code&gt;。因此，&lt;code&gt;getFavorite&lt;/code&gt;实现动态地将对象引用转换为Class对象表示的类型，使用Class的&lt;code&gt;cast&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cast&lt;/code&gt;方法是Java的cast操作符的动态模拟。它只是检查它的参数是否由Class对象表示的类型的实例。如果是，它返回参数；否则会抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。我们知道，假设客户端代码能够干净地编译，&lt;code&gt;getFavorite&lt;/code&gt;中的强制转换不会抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。 也就是说，favorites map中的值始终与其键的类型相匹配。&lt;/p&gt;
&lt;p&gt;那么这个&lt;code&gt;cast&lt;/code&gt;方法为我们做了什么，因为它只是返回它的参数？ &lt;code&gt;cast&lt;/code&gt;的签名充分利用了Class类是泛型的事实。 它的返回类型是Class对象的类型参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Class&amp;lt;T&amp;gt; {
    T cast(Object obj);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这正是&lt;code&gt;getFavorite&lt;/code&gt;方法所需要的。 这正是确保Favorites类型安全，而不用求助一个未经检查的强制转换的&lt;code&gt;T&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;Favorites类有两个限制值得注意。 首先，恶意客户可以通过使用原始形式的Class对象，轻松破坏Favorites实例的类型安全。 但生成的客户端代码在编译时会生成未经检查的警告。 这与正常的集合实现（如HashSet和HashMap）没有什么不同。 通过使用原始类型HashSet（条目 26），可以轻松地将字符串放入&lt;code&gt;HashSet &amp;lt;Integer&amp;gt;&lt;/code&gt;中。 也就是说，如果你愿意为此付出一点代价，就可以拥有运行时类型安全性。 确保Favorites永远不违反类型不变的方法是，使&lt;code&gt;putFavorite&lt;/code&gt;方法检查该实例是否由type表示类型的实例，并且我们已经知道如何执行此操作。只需使用动态转换：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Achieving runtime type safety with a dynamic cast
public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance) {
    favorites.put(type, type.cast(instance));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt;中有一些集合包装类，可以发挥相同的诀窍。 它们被称为&lt;code&gt;checkedSet&lt;/code&gt;，&lt;code&gt;checkedList&lt;/code&gt;，&lt;code&gt;checkedMap&lt;/code&gt;等等。 他们的静态工厂除了一个集合（或Map）之外还有一个Class对象（或两个）。 静态工厂是泛型方法，确保Class对象和集合的编译时类型匹配。 包装类为它们包装的集合添加了具体化。 例如，如果有人试图将&lt;code&gt;Coin&lt;/code&gt;放入你的&lt;code&gt;Collection &amp;lt;Stamp&amp;gt;&lt;/code&gt;中，则包装类在运行时会抛出&lt;code&gt;ClassCastException&lt;/code&gt;。 这些包装类对于追踪在混合了泛型和原始类型的应用程序中添加不正确类型的元素到集合的客户端代码很有用。&lt;/p&gt;
&lt;p&gt;Favorites类的第二个限制是它不能用于不可具体化的（non-reifiable）类型（条目 28）。 换句话说，你可以保存你最喜欢的&lt;code&gt;String&lt;/code&gt;或&lt;code&gt;String []&lt;/code&gt;，但不能保存&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;。 如果你尝试保存你最喜欢的&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;，程序将不能编译。 原因是无法获取&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;的Class对象。 &lt;code&gt;List &amp;lt;String&amp;gt; .class&lt;/code&gt;是语法错误，也是一件好事。 &lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;和&lt;code&gt;List &amp;lt;Integer&amp;gt;&lt;/code&gt;共享一个Class对象，即&lt;code&gt;List.class&lt;/code&gt;。 如果“字面类型（type literals）”&lt;code&gt;List &amp;lt;String&amp;gt; .class&lt;/code&gt;和&lt;code&gt;List &amp;lt;Integer&amp;gt; .class&lt;/code&gt;合法并返回相同的对象引用，那么它会对Favorites对象的内部造成严重破坏。 对于这种限制，没有完全令人满意的解决方法。&lt;/p&gt;
&lt;p&gt;Favorites使用的类型令牌( type tokens)是无限制的：&lt;code&gt;getFavorite&lt;/code&gt;和&lt;code&gt;putFavorite&lt;/code&gt;接受任何Class对象。 有时你可能需要限制可传递给方法的类型。 这可以通过一个有限定的类型令牌来实现，该令牌只是一个类型令牌，它使用限定的类型参数（条目 30）或限定的通配符（条目 31）来放置可以表示的类型的边界。&lt;/p&gt;
&lt;p&gt;注解API（条目 39）广泛使用限定类型的令牌。 例如，以下是在运行时读取注解的方法。 此方法来自&lt;code&gt;AnnotatedElement&lt;/code&gt;接口，该接口由表示类，方法，属性和其他程序元素的反射类型实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public &amp;lt;T extends Annotation&amp;gt;
    T getAnnotation(Class&amp;lt;T&amp;gt; annotationType);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数&lt;code&gt;annotationType&lt;/code&gt;是表示注解类型的限定类型令牌。 该方法返回该类型的元素的注解（如果它有一个）；如果没有，则返回null。 本质上，注解元素是一个类型安全的异构容器，其键是注解类型。&lt;/p&gt;
&lt;p&gt;假设有一个&lt;code&gt;Class &amp;lt;?&amp;gt;&lt;/code&gt;类型的对象，并且想要将它传递给需要限定类型令牌（如&lt;code&gt;getAnnotation&lt;/code&gt;）的方法。 可以将对象转换为&lt;code&gt;Class&amp;lt;? extends Annotation&amp;gt;&lt;/code&gt;，但是这个转换没有被检查，所以它会产生一个编译时警告（条目 27）。 幸运的是，Class类提供了一种安全（动态）执行这种类型转换的实例方法。 该方法被称为&lt;code&gt;asSubclass&lt;/code&gt;，并且它转换所调用的Class对象来表示由其参数表示的类的子类。 如果转换成功，该方法返回它的参数；如果失败，则抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;以下是如何使用&lt;code&gt;asSubclass&lt;/code&gt;方法在编译时读取类型未知的注解。 此方法编译时没有错误或警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Use of asSubclass to safely cast to a bounded type token
static Annotation getAnnotation(AnnotatedElement element,
                                String annotationTypeName) {
    Class&amp;lt;?&amp;gt; annotationType = null; // Unbounded type token
    try {
        annotationType = Class.forName(annotationTypeName);
    } catch (Exception ex) {
        throw new IllegalArgumentException(ex);
    }
    return element.getAnnotation(
        annotationType.asSubclass(Annotation.class));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总之，泛型API的通常用法（以集合API为例）限制了每个容器的固定数量的类型参数。 你可以通过将类型参数放在键上而不是容器上来解决此限制。 可以使用Class对象作为此类型安全异构容器的键。 以这种方式使用的Class对象称为类型令牌。 也可以使用自定义键类型。 例如，可以有一个表示数据库行（容器）的&lt;code&gt;DatabaseRow&lt;/code&gt;类型和一个泛型类型&lt;code&gt;Column &amp;lt;T&amp;gt;&lt;/code&gt;作为其键。&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:22:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8481317.html</dc:identifier>
</item>
<item>
<title>用VSCode开发一个基于asp.net core 2.0/sql server linux(docker)/ng5/bs4的项目(1) - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/8478993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/8478993.html</guid>
<description>&lt;p&gt;最近使用vscode比较多. 学习了一下如何在mac上使用vscode开发asp.netcore项目.&lt;/p&gt;
&lt;p&gt;这里是我写的关于vscode的一篇文章: &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cgzl/p/8450179.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/8450179.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8450409.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8450409.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章写的是使用mac(linux)/win10开发一个基于asp.net core 2.0 web api, angular 5, bootstrap 4, sql server linux(使用到docker)的小项目.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;该文章大约分这几部分:&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;开发环境的搭建&lt;/li&gt;
&lt;li&gt;建立和配置asp.net core 2.0 web api&lt;/li&gt;
&lt;li&gt;建立和配置angular5项目&lt;/li&gt;
&lt;li&gt;开发基本的CRUD功能&lt;/li&gt;
&lt;li&gt;基于Unit Of Work和Repository等Pattern对项目重构&lt;/li&gt;
&lt;li&gt;其他业务功能的实现, 例如文件上传等&lt;/li&gt;
&lt;li&gt;授权和验证&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该文章涉及到以下技术:&lt;/p&gt;
&lt;p&gt;asp.net core, angular 5, vscode, docker, sql server on linux, bootstrap 4.&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;开发一个电视剧管理程序, 数据表有:&lt;/p&gt;
&lt;p&gt;TvNetworks(电视台), TvShows(电视剧), TvShowSeasons(电视剧分季), Tags(分类标签), TvShowTags(电视剧到分类标签).&lt;/p&gt;
&lt;p&gt;就是对电视台, 电视剧等信息进行CRUD维护的程序.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227151354541-1672873837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 安装.net core sdk:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到官网下载并安装相应平台的.net core sdk: &lt;a href=&quot;https://dotnet.github.io/&quot; target=&quot;_blank&quot;&gt;https://dotnet.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好之后, 打开命令行: 执行dotnet --version, 可以看到版本号, 这就说明安装成功了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 安装visual studio code:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官网: &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好之后, 可以选择把vscode添加到Path: &lt;/p&gt;
&lt;p&gt;使用command+option+p(mac)或者ctrl+shift+p(win)打开命令板, 输入path, 选择install code command in path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227152522792-1780373170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后打开命令行 输入 code . 如果vscode能打开当前目录, 那么说明操作成功了.&lt;/p&gt;
&lt;p&gt;我安装了如下扩展:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227153332047-209969426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然python扩展可以不用安装...🤣&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Sql Server&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;貌似目前没有mac版本到sql server. 所以采用docker.&lt;/p&gt;
&lt;p&gt;首先安装docker: &lt;a href=&quot;https://www.docker.com/docker-mac&quot; target=&quot;_blank&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt; 这个是mac版本到下载地址, 下载后按照说明安装即可.&lt;/p&gt;
&lt;p&gt;对于windows 10版到, 首先要确保您到windows 10要高于Home版. 因为docker win 10版依赖于hyper-v, 而win10 home版没有hyper-v.&lt;/p&gt;
&lt;p&gt;安装好之后, 需要调整以下docker的设置, 至少需要4G内存(sql server需要):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227154822067-1689232696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;docker的简介可以参考我写的这片入门级文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8458926.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8458926.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后下载sqlserver linux版的image (&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-linux/&quot; target=&quot;_blank&quot;&gt;https://hub.docker.com/r/microsoft/mssql-server-linux/&lt;/a&gt;), 命令行输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker pull microsoft/mssql-server-linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个操作在国内可能会很慢, 请耐心...&lt;/p&gt;
&lt;p&gt;下载好之后, 查看本地的images, 使用命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker images
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227155252807-550137934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来安装并运行这个image:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=一个复杂的密码' -p 1433:1433 -d microsoft/mssql-server-linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功后, 使用docker ps命令可以查看正在运行的进程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227155539580-1487330565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用docker ps -a 可以查看所有的进程, 包括已经停止的.&lt;/p&gt;
&lt;p&gt;然后我们使用vscode测试以下这个sqlserver, 在vscode里面添加一个xx.sql文件, 待vscode自动安装好相应的插件后, 使用cmd+opt+p打开命令板, 输入mssql, 选择mssql: connect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160016610-1546650034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果以前没有连接过的话, 就选择 Create Connection Profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160517167-111532654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后输入server的名字localhost:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160621315-385671583.png&quot; alt=&quot;&quot;/&gt;]&lt;/p&gt;
&lt;p&gt;接下来输入数据库名, 因为还没有建立任何数据库, 所以就输入master吧:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160721179-935339807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择登陆类型 SQL Login(如果是win10的话, 也可以选择integrated):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160750108-195154244.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户名sa:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160835919-455856736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;密码:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160901373-1476119570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择是否保存密码, 最后给这个连接起一个名字:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160948690-540084856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这些操作完成后, 就会尝试连接master数据库, 连接成功的话上面会有提示框, 右下角也可以看出来:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227161143021-311810917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写一个sql 语句测试以下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; dbo.sysdatabases;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击右键(cmd+shift+e)执行sql:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227161314956-223784590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok, 数据库安装成功.&lt;/p&gt;
&lt;p&gt;如果docker重启后, 可以使用“docker start (容器ID的前两位)”命令启动这个sql容器.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 安装angular cli:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先安装nodejs: &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后执行命令安装 angular cli:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install -g @angular-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;命令行执行命令, 建立文件夹和webapi项目:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mkdir Tv &amp;amp;&amp;amp; cd Tv &amp;amp;&amp;amp; dotnet new webapi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227162955754-1900860374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后执行dotnet run:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163036488-101977452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器访问http://localhost:5000/api/values:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163133617-1843743595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目建立成功了.&lt;/p&gt;
&lt;p&gt;然后在命令行输入code . 就可以用vscode打开该目录了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163447371-867013313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于asp.net core 2.0的简介可以参考我的文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/7637250.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/7637250.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境变量:&lt;/p&gt;
&lt;p&gt;运行dotnet run的时候, 可以看到这句话:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163902652-390580865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这表示当前的宿主环境变量为Production, 而我们可能需要用到Development或者Staging.&lt;/p&gt;
&lt;p&gt;有几种办法可以更改这个环境变量的值:&lt;/p&gt;
&lt;p&gt;1. 在执行dotnet run之前设置环境变量:&lt;/p&gt;
&lt;p&gt;mac: export ASPNETCORE_ENVIRONMENT=Development&lt;/p&gt;
&lt;p&gt;windows: set ASPNETCORE_ENVIRONMENT=&quot;Development&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227164253105-14786734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. windows下可以在控制面板--系统--高级设置里面设置环境变量的值&lt;/p&gt;
&lt;p&gt;3. mac下, 进入用户的home目录, 然后执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
code .bash_profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在该文件后面加上:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export ASPNETCORE_ENVIRONMENT=Development
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样也可以.&lt;/p&gt;
&lt;p&gt;4. 在项目的appSettings.json文件里面设置也可以:&lt;/p&gt;
&lt;p&gt;使用visual studio 2017的话, 可以在项目的launchSettings.json设置.&lt;/p&gt;
&lt;p&gt;使用vscode的话, 可以在项目目录的launch.json进行设置.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227165440409-1355253536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过这就需要使用vscode来启动项目了.&lt;/p&gt;
&lt;p&gt;安装.net watch tool&lt;/p&gt;
&lt;p&gt;经常开发前端的都知道, 前端项目开发的时候一般都采用hot module replacement技术, 就是文件有变化的时候, 自动重新编译并刷新浏览器.&lt;/p&gt;
&lt;p&gt;默认情况下dotnet run没有这个功能, 所以需要添加dotnet watch tool来实现类似的功能: &lt;a href=&quot;https://github.com/aspnet/DotNetTools/blob/dev/src/dotnet-watch/README.md&quot; target=&quot;_blank&quot;&gt;https://github.com/aspnet/DotNetTools/blob/dev/src/dotnet-watch/README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开Tv.csproj添加此行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;DotNetCliToolReference Include=&quot;Microsoft.DotNet.Watcher.Tools&quot; Version=&quot;2.0.0&quot; /&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dotnet restore
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就使用下面的命令来代替dotnet run:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dotnet watch run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以随便修改一点代码, 然后就可以看到项目被重新编译并运行了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debugging asp.net core&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考我这篇文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8450179.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8450179.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;切换到Debug画面, 然后注意选择到是.net core attach, 因为我们之前运行着dotnet watch run, 所以只能附加着去调试.&lt;/p&gt;
&lt;p&gt;点击绿色到调试箭头, 或者按F5, 需要选择相应到命令:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227202109981-1063068681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于dotnet watch run随时会build出新到Tv.dll, 所以attach到dotnet Tv.dll即可. (dotnet watch run 和 dotnet exec是两个不同到进程).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集成Git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目目录执行git init之后, 左边到Git菜单就会起作用了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227203035798-276743092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;常用都git命令都有对应的菜单. 不过这篇文章里, 其实并没有使用到git.&lt;/p&gt;
&lt;p&gt;-----------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;这一部分, 主要做以下几方面工作:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;建立api&lt;/li&gt;
&lt;li&gt;配置和使用entity framework core 2.0&lt;/li&gt;
&lt;li&gt;配置asp.net core&lt;/li&gt;
&lt;li&gt;使用automapper&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;建立domain models:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里有一些快捷操作, 如果是新手的话可能不知道, 那么这一段我使用视频. &lt;/p&gt;
&lt;p&gt;视频好像发布不出来, 请看连接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/u0560t3iwef.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/u0560t3iwef.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/w05600dxo8j.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/w05600dxo8j.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两个model的代码如下, Models/TvNetwork.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.ObjectModel;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvNetwork
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TvNetwork()
        {
            TvShows &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Collection&amp;lt;TvShow&amp;gt;&lt;span&gt;();
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ICollection&amp;lt;TvShow&amp;gt; TvShows { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意建立属性的快捷键是prop, 建立构造函数的快捷键是ctor.&lt;/p&gt;
&lt;p&gt;为了避免使用TvShows属性时出现NullReference Exception, 所以建议在构造函数里面初始化集合导航属性.&lt;/p&gt;

&lt;p&gt;Models/TvShow.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvShow
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TvNetworkId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvNetwork TvNetwork { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;添加Entity Framework Core&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里需要使用到dotnet ef 命令, 在项目目录下执行命令:&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227211351247-1333783041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;没有找到这个命令, 这是因为还没有添加ef到tools到项目.&lt;/p&gt;
&lt;p&gt;参考官方文档: &lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行命令: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet restore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后打开Tv.csproj添加一个引用:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.DotNet.Watcher.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.EntityFrameworkCore.Tools.DotNet&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再执行dotnet restore即可. 这时再执行dotnet ef命令, 就可以使用了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227211822116-1656134419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;创建DbContext&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;创建一个文件夹叫做Database, 然后在里面建立一个文件TvContext.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvContext(DbContextOptions&amp;lt;TvContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;根据官方文档, 就是这样建立dbcontext的.&lt;/p&gt;
&lt;p&gt;使用dbcontext的时候, 是需要依赖注入的. 所以需要在Startup.cs的ConfigureServices把TvContext注册到容器:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            &lt;span&gt;services.AddDbContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&quot;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;));&lt;/span&gt;
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/f056037xm2q.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/f056037xm2q.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常我们是在appSettings.json里面添加数据库连接字符串:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;server=localhost; database=tvdb; user id=sa; password=Bx@steel1;&quot;
  },
  &lt;/span&gt;&quot;Logging&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;IncludeScopes&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;Debug&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;LogLevel&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;Default&quot;: &quot;Warning&quot;&lt;span&gt;
      }
    },
    &lt;/span&gt;&quot;Console&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;LogLevel&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;Default&quot;: &quot;Warning&quot;&lt;span&gt;
      }
    }
  }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到Startup.cs, 可以使用这两种方式取得连接字符串: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            // services.AddDbContext&lt;/span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&lt;span&gt;Configuration[&quot;ConnectionStrings:Default&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;));
            services.AddDbContext&lt;/span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&lt;span&gt;Configuration.GetConnectionString(&quot;Default&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;));
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面, 就可以创建数据库了.&lt;/p&gt;
&lt;p&gt;创建数据库&lt;/p&gt;
&lt;p&gt;首先添加migrations:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations add Initial
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行成功后, 会在项目里生成一个Migrations文件夹:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214003747-2135354783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到Initial Migration文件里面什么也没有, 因为我忘记把Domain Model添加到TvContext里面了.&lt;/p&gt;
&lt;p&gt;所以使用命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations remove
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来移除上一次添加并且还未更新到数据库的migration, 注意这时候需要停止dotnet watch等操作, &lt;span&gt;还要注意的是, 在ef core里千万不要手动删除迁移文件, 因为这里多出了一个Snapshot文件, 它和所有的迁移是同步的.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214446298-713982079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相应的迁移文件也被删除了.&lt;/p&gt;
&lt;p&gt;修改TvContext:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Models;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvContext(DbContextOptions&amp;lt;TvContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {

        }

        &lt;/span&gt;&lt;span&gt;public DbSet&amp;lt;TvNetwork&amp;gt; TvNetworks { get; set; }
        public DbSet&amp;lt;TvShow&amp;gt; TvShows { get; set&lt;/span&gt;&lt;span&gt;&lt;span&gt;; }&lt;/span&gt;
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重新执行dotnet ef migrations add Initial:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214943502-1508963171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后执行生成数据库的命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef database update
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;数据库生成成功:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227215151932-2073779258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;今天先写到这, 过几天会继续写. &lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:04:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/8478993.html</dc:identifier>
</item>
<item>
<title>刚入职的新人如何快速了解公司业务 - 资深Tester_王豆豆</title>
<link>http://www.cnblogs.com/evangline/p/8481232.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evangline/p/8481232.html</guid>
<description>&lt;h2&gt;公司业务的重要性&lt;/h2&gt;
&lt;p&gt;公司业务的重要性对软件测试人员来说不用多说。作为软件测试人员需要对公司业务完全了解，仅仅是了解还不行，需要做到精通，熟悉公司业务流程、功能等需求，目的就是为了能够更好的进行测试活动。&lt;/p&gt;
&lt;p&gt;只有对软件测试需求完全掌握了，测试人员在测试过程中才能做到有的放矢，测试思维才能打开，测试过程中的细节才能被注意到。&lt;/p&gt;

&lt;p&gt;比如，你在测试过程中碰到一个场景，系统后台或界面给你一个错误的返回，若是你对需求完全熟悉，你一定知道这个地方的返回是有问题的，如果你对需求不熟悉，那你可能就视若无睹，白白放过这样一个bug。&lt;/p&gt;
&lt;p&gt;这种情况在测试过程中遇到的频率很高，若当时对需求不了解，可以向开发或最熟悉需求的测试人员请教，将这个点抛出来，大家一起讨论看否是一个bug，如果测试人员有意识抛出还算好，但如果根本就觉得这个返回就应该是这样呢，那埋下的隐患是不是就很大。&lt;/p&gt;

&lt;p&gt;那测试人员应该怎么做才能更好地了解业务？&lt;/p&gt;
&lt;p&gt;王豆豆去年新入职现在公司，公司业务比较复杂，虽然同属金融行业范畴，但是还是有大区别，同时公司业务根据行业规则不断变化，所以遇到不断学习，目前王豆豆也只算掌握了60%，但掌握业务的能力已被认可的，王豆豆就根据自身经验分享作为刚入职的新人如何快速去了解公司业务。&lt;/p&gt;

&lt;p&gt;刚入职的新人如何快速了解公司业务，王豆豆要从二个方面来分析如何快速掌握：&lt;/p&gt;
&lt;p&gt;第一个是业务流程；第二个业务细节&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;1.业务流程&lt;/h2&gt;
&lt;p&gt;对刚开始入职的新人来说，刚开始一定是先从公司业务框架和业务流程学起，&lt;strong&gt;这个时间段需要做的就多看，多问，多做。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;01 多看&lt;/p&gt;
&lt;p&gt;多看指的是多看公司需求文档，需求文档包括任何一切有关公司业务的文档，可能是公司业务背景，公司框架说明，以前的测试用例，测试报告，原型图，公司系统等等。&lt;/p&gt;
&lt;p&gt;尽自己的可能多找与公司业务相关的文档、数据查看。&lt;/p&gt;

&lt;p&gt;02 多问&lt;/p&gt;
&lt;p&gt;多问就是指多向同事请教，不是不耻下问，而是不要害羞上问，其他人都可能比你懂得多。&lt;/p&gt;
&lt;p&gt;现在企业对新人，可能会安排一个老同事带你，也可能没有，直接就安排你进项目做，但前期一定会给你留一点时间熟悉公司业务，如果有同事带你，那是好运，但要明确一件事情就是别人带你，并不是他的主要工作，而是额外工作；如果没有，也不必急，学会自己去梳理，去掌握需求。&lt;/p&gt;
&lt;p&gt;向同事问问题也是一门学问，不是遇到问题就开始问，也不是逮着谁都问，能自己解决的就最好自己解决，需要多观察，通过观察确定问问题的时机。&lt;/p&gt;
&lt;p&gt;刚才王豆豆说过带你的工作是额外工作，如果项目任务很忙的时候，带你的测试人员既要完成平时的工作，又要解决你的问题，会给他造成一定的困扰，所以一定不要有问题就问。&lt;/p&gt;

&lt;p&gt;王豆豆使用的办法就是：&lt;/p&gt;
&lt;p&gt;1.先将不紧急解决的问题记录下来，然后找一个时间统一问；&lt;/p&gt;
&lt;p&gt;2.紧急问题，如果这个问题不解决就没办法继续下面的流程，那这样的问题就必须立马解决，如果带你的人在忙着测试，那你可以先找其他人解决，如果不忙，那就正好。&lt;/p&gt;
&lt;p&gt;王豆豆就是很好运的那个，王豆豆能这么快掌握公司业务，很大程度上都是因为遇到很nice的同事，每遇到的一个问题都能很好解决，解决不仅仅是告诉答案，而是从流程，从结构，从根本原因，从设计目的去分析这个问题，解答很详尽，基本问一次就相当于把一个流程或一个功能点吃透。&lt;/p&gt;

&lt;p&gt;03 多做&lt;/p&gt;
&lt;p&gt;不管你问得再多，看得再多，如果自己不动手去尝试，那都是白费。&lt;/p&gt;

&lt;p&gt;第一个做：&lt;/p&gt;
&lt;p&gt;看文档或系统时，动手画出大致地系统流程图来，也可以是系统框架，系统功能模块等。&lt;/p&gt;

&lt;p&gt;第二个做：&lt;/p&gt;
&lt;p&gt;在问问题时，记录下自己问的所有问题，避免重复问，如果你是第一次，我能给你详细的解答，但如果是第二次，那我会记得我曾经给过你解答，如果还有第三次呢？那是不是我对你的印象就不会那么好，我会觉得你对工作根本不上心。&lt;/p&gt;

&lt;p&gt;第三个做：&lt;/p&gt;
&lt;p&gt;执行---跑业务流程，分析流程的动作背后原因&lt;/p&gt;
&lt;p&gt;假设公司业务有付款的功能，那就自己动手从用户注册-〉登录-〉账户存钱-〉付款的业务场景来做，一个个完整的流程跑，一边跑一边记录页面交互点，每一个动作引起界面或任务或数据库的变化，然后修改一点再跑再记录。&lt;/p&gt;
&lt;p&gt;比如付款账户有钱或没钱的界面返回，数据库的变化，同时了解每执行一个动作，所需要的前置条件，执行所需要的数据从哪些地方取等等。&lt;/p&gt;
&lt;p&gt;关注点较多时，不一定只执行一次就全部了解，可以多次重试，但最终结果是每一个动作，你都需要掌握，这也是我们业务细节部分需要掌握的。&lt;/p&gt;

&lt;hr/&gt;&lt;h2&gt;2.业务细节&lt;/h2&gt;

&lt;p&gt;这个阶段一定是建立在你对公司系统框架，业务流程，产品类型都是相当清楚的前提下再关注的点。&lt;/p&gt;
&lt;p&gt;首先要清楚什么是业务细节？&lt;/p&gt;
&lt;p&gt;王豆豆以为业务细节就是通过表象所看不出来的，而是需要根据数据，任务，动作共同去分析的。&lt;/p&gt;

&lt;p&gt;王豆豆目前觉得应该二个办法：&lt;/p&gt;
&lt;p&gt;第一个方法是多跑业务流程&lt;/p&gt;
&lt;p&gt;前面已经讲过了，根据前面所讲的方法来分析每一次执行动作，记录执行前的前置条件和取数据的表，以及执行后的变化，包含数据库，界面，测试环境记录的日志等。&lt;/p&gt;

&lt;p&gt;第二个方法是看代码&lt;/p&gt;
&lt;p&gt;学会看代码是每一个测试人员都应该掌握到的。&lt;/p&gt;

&lt;p&gt;如果公司没有完整的需求文档，测试人员可以通过看代码分析需求，业务流程的变化，自己就能梳理出需求来。&lt;/p&gt;
&lt;p&gt;看代码可以发现测试人员在前端和业务流程上发现不到的问题，同时还能提高测试人员在某类功能点上测试的效率。&lt;/p&gt;

&lt;p&gt;以测试人员测试Mapping类业务为例，大家都知道Mapping（映射）是指各系统或子系统中相同点的不同映射。&lt;/p&gt;
&lt;p&gt;例如1在A系统中表示小学生，在B系统中表示中学生，2在A系统中表示中学生，在B系统中表示小学生，在A系统中输入1，在B系统界面需要显示小学生。&lt;/p&gt;
&lt;p&gt;如果要测试这样的业务，功能测试至少需要二条测试用例来覆盖，那如果是看代码呢，是不是直接就可以看出来了，你又可能会说不就是多二条测试用例么？那如果这样的Mapping值很多呢，功能测试就需要测试很多次，而通过看代码能很快发现AB系统的映射是否正确，是不是效率提高很多。&lt;/p&gt;
&lt;p&gt;同时看代码可以清楚更多业务设计细节和流程的跳转及条件等。&lt;/p&gt;
&lt;p&gt;以前没有看过代码，刚开始看似确实很难，但看得越多就越容易，学会看代码的前提是对相应编程语言的基础了解，知道如何使用。&lt;/p&gt;

&lt;p&gt;以上就是王豆豆熟悉业务的方法，欢迎大家和我讨论更多更有效的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎关注王豆豆的微信公众号：资深Tester(zishentester)，了解更多好文，和王豆豆一起成长。。。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:00:00 +0000</pubDate>
<dc:creator>资深Tester_王豆豆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evangline/p/8481232.html</dc:identifier>
</item>
<item>
<title>Dynamics 365 Online-多选域 - YOBYRON</title>
<link>http://www.cnblogs.com/yobyron/p/MultiSelect.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yobyron/p/MultiSelect.html</guid>
<description>&lt;p&gt;　参与过Dynamics CRM相关工作的朋友们都知道，Dynamics 365之前并没有多选域字段，想要实现多选域，需要自己添加WebResource定制，而这也带来了一系列需要考虑的情况，比如额外的字段消耗，逻辑上复杂的转换规则等，更有甚者，会去改变涉及多选域情况的业务逻辑。但随着Dynamics 365 V9版本的发布，多选域的问题将不再复杂（针对简单的需求），因为MS终于把多选域字段添加了进来。&lt;/p&gt;
&lt;h4&gt;　　1. 添加多选域字段&lt;/h4&gt;
&lt;p&gt;　　与新建OptionSet的方式没有区别，选择字段类型“MultiSelect Option Set”，也可以创建一个Global Multiple Select Option Set&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227170408753-535939433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在创建完之后，我们把它Publish到Form上，来看看具体的选择效果是什么样的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227171221685-397383455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;支持全选/反全选&lt;/li&gt;
&lt;li&gt;支持搜索，是包含的查询结果&lt;/li&gt;
&lt;li&gt;“4 items”显示的是查询的结果数目，默认是所有&lt;/li&gt;
&lt;li&gt;可以通过点击“x”来去掉选项&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;　　2. Advanced Find&lt;/h4&gt;
&lt;p&gt;　　既然这是一个字段，那么当然可以通过Advanced Find查询，对比以前的规则条件，多选域多了两个规则：“Contains Values”，&quot;Does Not Contains Values&quot;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227172101786-286394348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么FetchXml也相应的有所改变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;fetch &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt; output-format&lt;/span&gt;&lt;span&gt;=&quot;xml-platform&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;logical&quot;&lt;/span&gt;&lt;span&gt; distinct&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entity &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;account&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;primarycontactid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;telephone1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;accountid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;order &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; descending&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;and&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;contain-values&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;not-contain-values&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000001&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;in&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000002&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　3. API调用&lt;/h4&gt;
&lt;p&gt;　　如果想执行多选域相关的操作，比如查询结果，这里需要引用最新版本的dll。在V9版本之后，MS将不再像以前那样提供SDK的下载包，Assembly直接通过Nuget添加，具体的名字：Microsoft.CrmSdk.CoreAssemblies。里面包含了需要用到的Microsoft.Xrm.Sdk.dll和Microsoft.Crm.Sdk.Proxy.dll&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227213045122-551124302.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接着我们看看多选域字段值到底是什么样的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227213800797-332789154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　多选域字段的值是一个集合：OptionSetValueCollection，每一个被选中的选项是一个OptionSetValue对象。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227214038471-2134227267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　并且像OptionSet一样，FormattedValues里可以得到所有被选中选项的Label值，但是这里需要注意一点，Label值是用“;”分号隔开，而且除了第一个值之外，后续的值的前面都会有个空格，在进行数据操作前，需要把空格去掉。&lt;/p&gt;
&lt;p&gt;　　再提醒一下，这里需要用到V9版本及以后的dll，不然多选域字段的Value都是空。&lt;/p&gt;
&lt;p&gt;　　之前说到Operation有更新，那么对应于Advanced Find里面的情况，API中的Operator值分别是ConditionOperator.ContainValues和ConditionOperator.DoesNotContainValues。&lt;/p&gt;







</description>
<pubDate>Tue, 27 Feb 2018 13:52:00 +0000</pubDate>
<dc:creator>YOBYRON</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yobyron/p/MultiSelect.html</dc:identifier>
</item>
<item>
<title>图书管理系统【用户、购买、订单模块、添加权限】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8481080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8481080.html</guid>
<description>&lt;p&gt;要登陆后才能购买，因此我们先写购买模块.&lt;/p&gt;
&lt;h2 id=&quot;设计实体&quot;&gt;设计实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String password;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String email;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String cellphone;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String address;

    &lt;span class=&quot;co&quot;&gt;//各种setter、getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计数据库表&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt; (

  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;        &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  username  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  cellphone &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  address   &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  email     &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;password&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;

);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;编写dao&quot;&gt;编写DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 用户的登录注册模块&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1：登陆&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 2：注册&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3：根据id查找具体的用户&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDaoImpl {



    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(User user) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO user (id,username,cellphone,address,email,password) VALUES(?,?,?,?,?,?)&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(),user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getCellphone&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getAddress&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getEmail&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;()});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(String username, String password) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM user WHERE username = ? AND password=?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{username, password}, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String id) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM user WHERE id=?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, id, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试dao&quot;&gt;测试DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDemo {
    UserDaoImpl userDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDaoImpl&lt;/span&gt;();

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;() {

        User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
        user.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhong&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setPassword&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setCellphone&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;10085&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setAddress&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;广州萝岗&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setEmail&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;40368324234234@QQ.com&quot;&lt;/span&gt;);

        userDao.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(user);
    }

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;() {

        String id = &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;;
        User user = userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getEmail&lt;/span&gt;());
    }

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;() {
        String username = &lt;span class=&quot;st&quot;&gt;&quot;zhong&quot;&lt;/span&gt;;
        String password = &lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;;
        User user = userDao.&lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(username, password);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getAddress&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;抽取dao&quot;&gt;抽取DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; UserDao {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(User user);

    User &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(String username, String password);

    User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String id);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;编写service&quot;&gt;编写Service&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; UserDao userDao = DaoFactory.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.dao.impl.UserDaoImpl&quot;&lt;/span&gt;, UserDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;registerUser&lt;/span&gt;(User user) {
        userDao.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(user);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;loginUser&lt;/span&gt;(String username,String password) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDao.&lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(username, password);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;findUser&lt;/span&gt;(String id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;前台样式&quot;&gt;前台样式&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    用户名：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    密码：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;登陆&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;register&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;注册&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;
&lt;span class=&quot;fl&quot;&gt;#body&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;#user&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;130px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;margin-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1364px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170416105452440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;实现登陆注册功能&quot;&gt;实现登陆注册功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;当点击登陆按钮的时候，把数据带过去给Servlet，让Servlet调用BusinessService方法，实现登陆&lt;/strong&gt;。注册同理.....因此，我们需要用到JavaScript代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${user==&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;div&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;User&quot;&lt;/span&gt;&amp;gt;
    用户名：&amp;lt;input&lt;span class=&quot;ot&quot;&gt; type&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;
    密码：&amp;lt;input&lt;span class=&quot;ot&quot;&gt; type&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;password&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;button&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;login()&quot;&lt;/span&gt;&amp;gt;登陆&amp;lt;/button&amp;gt;
    &amp;lt;button&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;register&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;register()&quot;&lt;/span&gt;&amp;gt;注册&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${user!=&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;div&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;User&quot;&lt;/span&gt;&amp;gt;
        &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;欢迎您：${user.username}&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;a&lt;span class=&quot;ot&quot;&gt; href&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${pageContext.request.contextPath}&lt;span class=&quot;dt&quot;&gt;/UserServlet?method=Logout&quot;&lt;/span&gt;&amp;gt;注销&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;javaScript代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;login&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//得到输入框的数据&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; username &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; password &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//跳转到相对应的Servlet上&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/UserServlet?method=login&amp;amp;username=&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; username &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;password=&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;register&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//跳转到注册页面&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/client/register.jsp&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;UserServlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        String method = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;method&quot;&lt;/span&gt;);

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;login&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;//得到页面传递过来的数据&lt;/span&gt;
                String username = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;);
                String password = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;);
                User user = service.&lt;span class=&quot;fu&quot;&gt;loginUser&lt;/span&gt;(username, password);

                request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;,user);
                request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/head.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);

            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;登陆失败了！&quot;&lt;/span&gt;);
                request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            }

        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;register&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;//得到JSP传递过来的数据，封装成Bean对象&lt;/span&gt;
                User user = WebUtils.&lt;span class=&quot;fu&quot;&gt;request2Bean&lt;/span&gt;(request, User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
                user.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;());

                service.&lt;span class=&quot;fu&quot;&gt;registerUser&lt;/span&gt;(user);

                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;注册成功了！&quot;&lt;/span&gt;);

            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;注册失败了！&quot;&lt;/span&gt;);
            }
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Logout&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;co&quot;&gt;//销毁session&lt;/span&gt;
            request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;invalidate&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//回到首页&lt;/span&gt;
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/head.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);

        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在显示图书的时候，顺便添加购买的超链接&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;购买&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计购物车实体&quot;&gt;设计购物车实体&lt;/h2&gt;
&lt;p&gt;如果不清楚为什么这样设计，可参考我之前的博文：&lt;a href=&quot;http://blog.csdn.net/hon_3y/article/details/56481439#t5&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/hon_3y/article/details/56481439#t5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cart实体&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Cart {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, CartItem&amp;gt; map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;


    &lt;span class=&quot;co&quot;&gt;//提供把商品添加到购物的功能&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addBook2Cart&lt;/span&gt;(Book book) {

        &lt;span class=&quot;co&quot;&gt;//得到对应的购物项&lt;/span&gt;
        CartItem cartItem = map.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;//如果是null，说明购物车还没有该购物项&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cartItem == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            cartItem = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CartItem&lt;/span&gt;();
            cartItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
            cartItem.&lt;span class=&quot;fu&quot;&gt;setBook&lt;/span&gt;(book);
            cartItem.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());

            &lt;span class=&quot;co&quot;&gt;//把购物项加到购物车中&lt;/span&gt;
            map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), cartItem);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//如果购物车有该购物项了，那么将购物项的数量+1&lt;/span&gt;
            cartItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;() + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        }
    }


    &lt;span class=&quot;co&quot;&gt;//购物车的价钱是购物项价钱的总和&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() {

        &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; totalPrice = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;String, CartItem&amp;gt; me : map.&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;()) {
            CartItem cartItem = me.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();
            totalPrice += cartItem.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;();
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; totalPrice;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, CartItem&amp;gt; &lt;span class=&quot;fu&quot;&gt;getMap&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; map;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setMap&lt;/span&gt;(Map&amp;lt;String, CartItem&amp;gt; map) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; = map;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;price&lt;/span&gt; = price;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计购物项实体&quot;&gt;设计购物项实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CartItem {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Book book;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;book&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() * &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;quantity&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;price&lt;/span&gt; = price;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Book &lt;span class=&quot;fu&quot;&gt;getBook&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; book;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setBook&lt;/span&gt;(Book book) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;book&lt;/span&gt; = book;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; quantity;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;quantity&lt;/span&gt; = quantity;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;处理用户想要买的书籍servlet&quot;&gt;处理用户想要买的书籍Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;.contextPath}/BuyServlet?book_id=${book.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;购买&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;BuyServlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//先检查该用户是否登陆了。&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没登陆，请登陆了再来购买&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
        }

        &lt;span class=&quot;co&quot;&gt;//如果登陆了...&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//得到该用户的购物车&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cart == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            cart = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cart&lt;/span&gt;();
            request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;, cart);
        }

        &lt;span class=&quot;co&quot;&gt;//得到用户想买的书籍&lt;/span&gt;
        String book_id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;book_id&quot;&lt;/span&gt;);
        Book book = service.&lt;span class=&quot;fu&quot;&gt;findBook&lt;/span&gt;(book_id);

        &lt;span class=&quot;co&quot;&gt;//把书籍添加到购物车中&lt;/span&gt;
        service.&lt;span class=&quot;fu&quot;&gt;buyBook&lt;/span&gt;(cart, book);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;该商品已添加到购物车中&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request,response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;提供显示购物车商品的servlet&quot;&gt;提供显示购物车商品的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//先判断该用户是否登陆了&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没有登陆呢！&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//如果登陆了.....&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//把该用户的购物车给JSP页面显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;, cart);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/listCart.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示购物车的jsp页面&quot;&gt;显示购物车的JSP页面&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${&lt;span class=&quot;kw&quot;&gt;empty&lt;/span&gt;(cart.map)}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    您还没有购买过任何商品哦！！！
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;


&amp;lt;table&lt;span class=&quot;ot&quot;&gt; border&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;1px&quot;&lt;/span&gt;&amp;gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${!&lt;span class=&quot;kw&quot;&gt;empty&lt;/span&gt;(cart.map)}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;h1&amp;gt;您购物车下有如下的商品：&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;书名：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;作者：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;数量：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;价钱：&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${cart.map}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;cartItme&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;


            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.book.name}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.book.author}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.quantity}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.price}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417092028520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在前台用户界面中，当用户要把购物车付款时，应该提供生成订单的超链接....&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417092656216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;设计订单实体&quot;&gt;设计订单实体&lt;/h2&gt;
&lt;p&gt;订单应该包含id,收货人信息,下单的时间，订单的总价,订单的状态【有无发货】..而不应该包含商品的信息的。商品的信息用一个专门的”订单项“来表示&lt;/p&gt;
&lt;p&gt;一个订单对应多个订单项，这是一对多的关系！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    
    &lt;span class=&quot;co&quot;&gt;//下单的时间、日期、状态&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state;
    
    &lt;span class=&quot;co&quot;&gt;//一个用户可以有多个订单，把用户记住&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String user_id;

    &lt;span class=&quot;co&quot;&gt;//一个订单中有多个订单项&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;OrderItem&amp;gt; items = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();

    &lt;span class=&quot;co&quot;&gt;//各种的setter和getter&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计订单项实体&quot;&gt;设计订单项实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;


    &lt;span class=&quot;co&quot;&gt;//一本书对应多个订单项，订单项一定是由书组成，记住书&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String book_id;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity;

    &lt;span class=&quot;co&quot;&gt;//各种的setter和getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计数据库表-1&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;mysql不能创建名为”order”的表，后边加个s就可以&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; orders (
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;      &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  &lt;span class=&quot;dt&quot;&gt;date&lt;/span&gt;    &lt;span class=&quot;dt&quot;&gt;DATE&lt;/span&gt;        &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  user_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  state   &lt;span class=&quot;dt&quot;&gt;BOOLEAN&lt;/span&gt;,
  price   &lt;span class=&quot;dt&quot;&gt;DOUBLE&lt;/span&gt;,
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; user_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (user_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;订单项表：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; orderItem (
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;       &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  price    &lt;span class=&quot;dt&quot;&gt;DOUBLE&lt;/span&gt;,
  quantity &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt;,
  order_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) ,
  book_id  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) ,
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; order_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (order_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; orders (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; book_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (book_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; book (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;表之间的结构：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417125604528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;设计dao&quot;&gt;设计Dao&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; OrderDaoImpl &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; zhongfucheng.&lt;span class=&quot;fu&quot;&gt;dao&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;OrderDao&lt;/span&gt; {

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(Order order) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());
        String sql1 = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO orders(id,ordertime,user_id,state,price) VALUES(?,?,?,?,?)&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//订单的基本信息&lt;/span&gt;
            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql1, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getOrdertime&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getUser_id&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;isState&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;()});

            &lt;span class=&quot;co&quot;&gt;//订单项的信息&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO orderItem(id,price,quantity,order_id,book_id) VALUES(?,?,?,?,?)&quot;&lt;/span&gt;;

            Set&amp;lt;OrderItem&amp;gt; items = order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;();

            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (OrderItem item : items) {
                queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql2, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{item.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getOrder_id&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getBook_id&lt;/span&gt;()});
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        Order order;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//找出订单的基本信息&lt;/span&gt;
            String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE id=?&quot;&lt;/span&gt;;
            order = (Order) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{id});

            &lt;span class=&quot;co&quot;&gt;//找出订单的所有订单项&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orderItem WHERE order_id=?&quot;&lt;/span&gt;;
            List&amp;lt;OrderItem&amp;gt; list = (List&amp;lt;OrderItem&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql2, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(OrderItem.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;()});

            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;这是数据库拿到的list集合：&quot;&lt;/span&gt;+list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());


            &lt;span class=&quot;co&quot;&gt;//将所有订单项装到订单里边&lt;/span&gt;
            order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(list);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;这是数据库拿到的&quot;&lt;/span&gt;+order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());


            &lt;span class=&quot;co&quot;&gt;//找出该订单是属于哪一个用户的&lt;/span&gt;
            String sql3 = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders o,user u WHERE o.user_id=u.id AND o.id=? &quot;&lt;/span&gt;;
            User user = (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql3, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;()});

            order.&lt;span class=&quot;fu&quot;&gt;setUser_id&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; order;


        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }


    &lt;span class=&quot;co&quot;&gt;//更新订单的状态&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(String id) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE orders SET state=? WHERE id=?&quot;&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;, id});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;co&quot;&gt;//查看已经发货或没发货的订单信息&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE state=? &quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (List&amp;lt;Order&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{state});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;co&quot;&gt;//通过用户的id查找用户的订单，可能不止一个&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE user_id=? &quot;&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; List&amp;lt;Order&amp;gt; queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user_id});

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }

    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;二次更新&quot;&gt;二次更新&lt;/h2&gt;
&lt;p&gt;在编写dao的时候，尤其是Add方法。它是将所有数据都封装到Order对象上，然后取出数据，把数据插入到数据表中&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其实，我们的Order和OrderItem的操作可以分开。OrderItem也可以另外编写一个Dao，那么我们在插入完Order对象之后，&lt;strong&gt;得到Order对象返回的主键，再调用OrderItemDao的方法来插入OrderItem的数据&lt;/strong&gt;，这样我觉得会让代码清晰一些。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在OrderItemDao中接收的是一个List&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;抽取成dao接口&quot;&gt;抽取成DAO接口&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; OrderDao {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(Order order);

    Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String id);

    List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state);

    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(String user_id);

    List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bussinessservice&quot;&gt;BussinessService&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; OrderDao orderDao = DaoFactory.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.dao.impl.OrderDaoImpl&quot;&lt;/span&gt;, OrderDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;createOrder&lt;/span&gt;(Cart cart, User user) {

        &lt;span class=&quot;co&quot;&gt;//订单的基本信息&lt;/span&gt;
        String order_id = WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;();
        Order order = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Order&lt;/span&gt;();
        order.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(order_id);
        order.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(cart.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());
        order.&lt;span class=&quot;fu&quot;&gt;setOrdertime&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date());
        order.&lt;span class=&quot;fu&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        order.&lt;span class=&quot;fu&quot;&gt;setUser_id&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());


        &lt;span class=&quot;co&quot;&gt;//订单项的基本信息&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//得到每个购物项，购物项就作为订单项&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;String, CartItem&amp;gt; me : cart.&lt;span class=&quot;fu&quot;&gt;getMap&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;()) {

            OrderItem orderItem = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;OrderItem&lt;/span&gt;();
            CartItem cartItem = me.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();

            orderItem.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setBook_id&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getBook&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setOrder_id&lt;/span&gt;(order_id);
            order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(orderItem);
        }

        orderDao.&lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(order);

    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String user_id) {

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(user_id);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(state);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sendOutOrder&lt;/span&gt;(String id) {

        orderDao.&lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(id);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(user_id);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;生成订单的servlet&quot;&gt;生成订单的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//检查该用户的购物车是否有商品&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cart == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您购物车没有商品，无法生成订单&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//如果有商品，得到当前用户&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        service.&lt;span class=&quot;fu&quot;&gt;createOrder&lt;/span&gt;(cart, user);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;订单已经生成了，准备好钱来收货把&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;用户查询自己的订单servlet&quot;&gt;用户查询自己的订单Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/LookOrder&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;查看订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//检查该用户是否登陆了&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没登陆，等您登陆了再来看把&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//用户登陆了！&lt;/span&gt;
        Order order = service.&lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;//交给相对应的JSP 显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;, order);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;,user);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/listOrder.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示订单数据的jsp&quot;&gt;显示订单数据的JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${order==&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    您还没有下过任何订单！！

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${order!=&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &amp;lt;table&lt;span class=&quot;ot&quot;&gt; border&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;1px&quot;&lt;/span&gt;&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;下单人：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单时间&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单状态&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单价钱&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;${user.username}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.ordertime}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.state==&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;?&lt;span class=&quot;st&quot;&gt;&quot;未发货&quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&quot;已发货&quot;&lt;/span&gt;}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.price}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

    &amp;lt;/table&amp;gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果-1&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417184449188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;后台查询订单的状况servlet&quot;&gt;后台查询订单的状况Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/OrderServlet?state=false&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;待处理订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/OrderServlet?state=true&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;已发货订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        String state = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;state&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;)) {
            List&amp;lt;Order&amp;gt; list = service.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;,list);

        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;)) {
            List&amp;lt;Order&amp;gt; list = service.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;, list);
        }


        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/background/listOrder.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示订单状况的jsp&quot;&gt;显示订单状况的JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${empty(list)}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    还没有任何订单哦！

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${!empty(list)}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;下单人：&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单时间&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单状态&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单价钱&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;操作&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${list}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.user_id}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.ordertime}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.state==false?&quot;未发货&quot;:&quot;已发货&quot;}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.price}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/orderItemServlet?order_id=${order.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;查看详细信息&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;删除&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;查看具体订单的详细信息servlet&quot;&gt;查看具体订单的详细信息Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到用户想要查看详细信息的表单&lt;/span&gt;
        String order_id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order_id&quot;&lt;/span&gt;);

        Order order = service.&lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(order_id);

        &lt;span class=&quot;co&quot;&gt;//将该order对象给相对应的JSP显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;, order);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/background/listDetail.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;查看具体订单的详细信息jsp&quot;&gt;查看具体订单的详细信息JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;书籍的编号&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;价钱&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;数量&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;操作&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${order.items}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.book_id}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.price}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.quantity}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/SendOutServlet?id=${order.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;发货&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;处理发货的servlet&quot;&gt;处理发货的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        String id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;);

        service.&lt;span class=&quot;fu&quot;&gt;sendOutOrder&lt;/span&gt;(id);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;已发货！&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果-2&quot;&gt;&lt;strong&gt;效果:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417185813025?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;目前为止，我们已经学习了动态代理技术和注解技术了。于是我们想要为之前的bookStore项目添加权限控制.....&lt;/p&gt;
&lt;p&gt;只有用户有权限的时候，后台管理才可以进行相对应的操作.....&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;实现思路&quot;&gt;实现思路&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425102852577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之前我们做权限管理系统的时候，是根据用户请求的URI来判断该链接是否需要权限的。这次我们使用动态代理的技术和注解来判断：&lt;strong&gt;用户调用该方法时，检查该方法是否需要权限...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据MVC模式，我们在web层都是调用service层来实现功能的。那么我们具体的思路是这样的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;web层调用service层的时候，&lt;strong&gt;得到的并不是ServiceDao对象，而是我们的代理对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在service层中的方法添加注解，如果方法上有注解，那么说明调用该方法需要权限...&lt;/li&gt;
&lt;li&gt;当web层调用代理对象方法的时候，代理对象会判断该方法是否需要权限，再给出相对应的提示....&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;设计实体数据库表&quot;&gt;设计实体、数据库表&lt;/h2&gt;
&lt;p&gt;上次我们做的权限管理系统是引入了角色这个概念的，这次主要为了练习动态代理和注解技术，就以简单为主，不引入角色这个实体。直接是&lt;strong&gt;用户和权限之间的关系&lt;/strong&gt;了。&lt;/p&gt;
&lt;h2 id=&quot;privilege实体&quot;&gt;Privilege实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Privilege {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id ;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(String id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;数据库表&quot;&gt;数据库表&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;privilege表&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;privilege&lt;/span&gt; (

  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  name &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;)

);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;privilege和user是多对多的关系，于是使用第三方表来维护他们的关系&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;user_privilege表&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; user_privilege (
  privilege_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;),
  user_id      &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;),

  &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (privilege_id, user_id),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; privilege_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (privilege_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;privilege&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; user_id_FK1 &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (user_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)

);
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;添加测试数据&quot;&gt;添加测试数据&lt;/h2&gt;
&lt;p&gt;为了方便，直接添加数据了。就不写详细的DAO了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在数据库中添加了两个权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425105424043?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为id为1的user添加了两个权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425105516226?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;编写dao-1&quot;&gt;编写DAO&lt;/h2&gt;
&lt;p&gt;后面在动态代理中，我们需要检查该用户是否有权限...那么就必须查找出&lt;strong&gt;该用户拥有的哪些权限&lt;/strong&gt;。再看看用户有没有相对应的权限&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;//查找用户的所有权限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Privilege&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserPrivilege&lt;/span&gt;(String user_id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT p.* FROM privilege p, user_privilege up WHERE p.id = up.privilege_id AND up.user_id = ?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (List&amp;lt;Privilege&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user_id}, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(Privilege.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;抽取到接口上&quot;&gt;&lt;strong&gt;抽取到接口上&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    List&amp;lt;Privilege&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserPrivilege&lt;/span&gt;(String user_id);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;注解模块&quot;&gt;注解模块&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;编写注解&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span class=&quot;fu&quot;&gt;RUNTIME&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; permission {
    String &lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在Service层方法中需要权限的地方添加注解CategoryServiceImpl&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*添加分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(Category category) {
        categoryDao.&lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(category);
    }


    &lt;span class=&quot;co&quot;&gt;/*查找分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(String id) {
        categoryDao.&lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(id);
    }

    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查找分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*查看分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Category&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; categoryDao.&lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;();
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;抽取service&quot;&gt;抽取Service&lt;/h2&gt;
&lt;p&gt;把Service的方法抽取成ServiceDao。在Servlet中，也是通过ServiceFactory来得到Service的对象【和DaoFactory是类似的】&lt;/p&gt;
&lt;h2 id=&quot;categoryservice&quot;&gt;CategoryService&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*添加分类*/&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(Category category);

    &lt;span class=&quot;co&quot;&gt;/*查找分类*/&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(String id);

    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查找分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*查看分类*/&lt;/span&gt; List&amp;lt;Category&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;servicefactory&quot;&gt;ServiceFactory&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ServiceDaoFactory {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ServiceDaoFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServiceDaoFactory&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServiceDaoFactory&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ServiceDaoFactory &lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; factory;
    }


    &lt;span class=&quot;co&quot;&gt;//需要判断该用户是否有权限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T &lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(String className, Class&amp;lt;T&amp;gt; clazz, &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; User user) {

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类进来了！&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//得到该类的类型&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; T t = (T) Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(className).&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();
            &lt;span class=&quot;co&quot;&gt;//返回一个动态代理对象出去&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (T) Proxy.&lt;span class=&quot;fu&quot;&gt;newProxyInstance&lt;/span&gt;(ServiceDaoFactory.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;(), t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getInterfaces&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; InvocationHandler() {

                &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(Object proxy, Method method, Object[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; NoSuchMethodException, InvocationTargetException, IllegalAccessException, PrivilegeException {
                    &lt;span class=&quot;co&quot;&gt;//判断用户调用的是什么方法&lt;/span&gt;
                    String methodName = method.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(methodName);

                    &lt;span class=&quot;co&quot;&gt;//得到用户调用的真实方法，注意参数！！！&lt;/span&gt;
                    Method method1 = t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(methodName,method.&lt;span class=&quot;fu&quot;&gt;getParameterTypes&lt;/span&gt;());

                    &lt;span class=&quot;co&quot;&gt;//查看方法上有没有注解&lt;/span&gt;
                    permission permis = method1.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(permission.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//如果注解为空，那么表示该方法并不需要权限，直接调用方法即可&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (permis == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, args);
                    }

                    &lt;span class=&quot;co&quot;&gt;//如果注解不为空，得到注解上的权限&lt;/span&gt;
                    String privilege = permis.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//设置权限【后面通过它来判断用户的权限有没有自己】&lt;/span&gt;
                    Privilege p = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Privilege&lt;/span&gt;();
                    p.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(privilege);

                    &lt;span class=&quot;co&quot;&gt;//到这里的时候，已经是需要权限了，那么判断用户是否登陆了&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {

                        &lt;span class=&quot;co&quot;&gt;//这里抛出的异常是代理对象抛出的，sun公司会自动转换成运行期异常抛出，于是在Servlet上我们根据getCause()来判断是不是该异常，从而做出相对应的提示。&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;对不起请先登陆&quot;&lt;/span&gt;);
                    }

                    &lt;span class=&quot;co&quot;&gt;//执行到这里用户已经登陆了，判断用户有没有权限&lt;/span&gt;
                    Method m = t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;findUserPrivilege&quot;&lt;/span&gt;, String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
                    List&amp;lt;Privilege&amp;gt; list = (List&amp;lt;Privilege&amp;gt;) m.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

                    &lt;span class=&quot;co&quot;&gt;//看下权限集合中有没有包含方法需要的权限。使用contains方法，在Privilege对象中需要重写hashCode和equals()&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!list.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(p)) {
                        &lt;span class=&quot;co&quot;&gt;//这里抛出的异常是代理对象抛出的，sun公司会自动转换成运行期异常抛出，于是在Servlet上我们根据getCause()来判断是不是该异常，从而做出相对应的提示。&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;您没有权限，请联系管理员！&quot;&lt;/span&gt;);
                    }

                    &lt;span class=&quot;co&quot;&gt;//执行到这里的时候，已经有权限了，所以可以放行了&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, args);
                }
            });

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;privilegeexcetption&quot;&gt;PrivilegeExcetption&lt;/h2&gt;
&lt;p&gt;当用户没有登陆或者没有权限的时候，我们应该给用户一些友好的提示....于是我们自定义了PrivilegeException&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PrivilegeException &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Exception {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(String message) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(message);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(String message, Throwable cause) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(message, cause);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(Throwable cause) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(cause);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们继承的是Exception，通过方法名抛出去。但是我们是&lt;strong&gt;通过代理对象调用方法的，于是sun公司的策略就是把它们转换成运行期异常抛出去&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，我们就在&lt;strong&gt;Servlet上得到异常，再给出友好的提示&lt;/strong&gt;。。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;效果-3&quot;&gt;效果：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;没有登陆的时候：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203417014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;登陆了，但是没有相对应的权限的时候&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203527812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;登陆了，并且有权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203633494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;要点总结&quot;&gt;要点总结&lt;/h2&gt;
&lt;p&gt;该权限控制是十分优雅的，&lt;strong&gt;只要我在Service层中添加一个注解...那么当web层调用该方法的时候就需要判断用户有没有该权限...&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;外界调用Service层的方法是代理调用invoke()方法，我们&lt;strong&gt;在invoke()方法可以对其进行增强！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;invoke()方法内部就是在查询调用该方法上有没有注解，如果没有注解，就可以直接调用。如果有注解，那么就得到注解的信息，判断该用户有没有权限来访问这个方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在反射具体方法的时候，必须记得要给出相对应的参数！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在invoke()方法抛出的编译时期异常，java会自动转换成运行期异常进行抛出...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用contains()方法时，就要重写该对象的hashCode()和equals()&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 27 Feb 2018 13:24:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8481080.html</dc:identifier>
</item>
<item>
<title>Linux 小记 — 网络管理 - 捷义</title>
<link>http://www.cnblogs.com/youclk/p/8470139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youclk/p/8470139.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前段时间需要配置一台私网 ECS 联外网，阿里云比较推荐的方案是创建一个 Nat 网关并绑定 EIP， 以此来统一所有 ECS 的网络出口。由于我已经拥有一台外网 ECS（不想多掏钱，且我自己的测试环境不需要严格的稳定性要求），因此我决定使用 Iptables 对私网 ECS 的请求进行源地址转换，这台外网 ECS 就作为其余私网 ECS 的跳板机和网络代理机。虽然原理和最后的解决方案都非常简单，但查资料的过程却废了一番周折，于是决定将网络管理和 Iptables 的知识点做一个简单的梳理。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180225184609967-870491773.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;osi-七层模型与-tcpip-四层模型&quot;&gt;1. OSI 七层模型与 TCP/IP 四层模型&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;（以下部分图片来自互联网，不知其最初作者，因此未标记来源。）&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;七层模型&quot;&gt;1.1 七层模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180225204859568-2008716898.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;四层模型&quot;&gt;1.2 四层模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180225205126670-7656275.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180225205148232-409083579.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;对应&quot;&gt;1.3 对应&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180225205327019-2011763828.png&quot;/&gt;&lt;br/&gt;这几幅图一目了然，不需要过多文字赘述了。举个写邮件的例子吧：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应用层：写邮件。&lt;/li&gt;
&lt;li&gt;表示层：加密和翻译为二进制。&lt;/li&gt;
&lt;li&gt;会话层：判断存储还是发送。&lt;/li&gt;
&lt;li&gt;传输层：选择 TCP 协议和发送端口。&lt;/li&gt;
&lt;li&gt;网络层：确定收发的 IP 地址和 MAC 地址。&lt;/li&gt;
&lt;li&gt;数据链路层：物理寻址，即确定每一个网关。&lt;/li&gt;
&lt;li&gt;物理层：各种硬件设备。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;地址与端口&quot;&gt;2. 地址与端口&lt;/h2&gt;
&lt;h3 id=&quot;ip-地址与子网掩码&quot;&gt;2.1 IP 地址与子网掩码&lt;/h3&gt;
&lt;p&gt;此二者必须结合使用，子网掩码的作用就是将某个IP地址划分成网络地址和主机地址两部分。&lt;br/&gt;IP 地址分类：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^7 -2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.0.0.0-126.255.255.255&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^24 -2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.0.0.0-10.255.255.255&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;center&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^14&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128.0.0.0-191.255.255.255&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^16 -2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;172.16.0.0-172.31.255.255&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^21&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.0.0.0-223.255.255.255&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2^8 -2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.0.0-192.168.255.255&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;子网掩码及子网规划：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;IP地址（172.16.2.121）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10101100&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00010000&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00000010&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;01111001&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;子网掩码（255.255.255.0）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11111111&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11111111&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11111111&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;网络地址&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10101100&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00010000&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00000010&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;广播地址&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10101100&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00010000&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;00000010&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11111111&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;网络地址 = IP 地址 &amp;amp; 子网掩码。&lt;br/&gt;广播地址 = 网络地址的主机位（子网掩码为0的部分）全换成1。&lt;br/&gt;（广播地址只是一个标识，在数据包里面，如果目的地址是广播地址的话，就会向整个同一网段的主机发送广播包。）&lt;/p&gt;
&lt;h3 id=&quot;其他地址&quot;&gt;2.2 其他地址&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;网关地址：具有路由功能的设备的IP地址，如：路由器、启用了路由协议的服务器（相当于路由器）、代理服务器（相当于路由器）。当网络中的主机发现数据包的目标主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给目标网络的网关。一般设置为一个网段的起始或终止值，例：172.16.2.1 或 172.16.2.254。&lt;/li&gt;
&lt;li&gt;MAC地址：Media Access Control，具有全球唯一性。&lt;/li&gt;
&lt;li&gt;DNS地址：Domain Name Server（域名服务器），百度：114.114.114.114，谷歌：8.8.8.8。&lt;/li&gt;
&lt;li&gt;DHCP：指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。提升地址的使用率。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;常用端口&quot;&gt;2.3 常用端口&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;FTP：20，21。&lt;/li&gt;
&lt;li&gt;SSH：22。&lt;/li&gt;
&lt;li&gt;Telnet：23。&lt;/li&gt;
&lt;li&gt;DNS：53。&lt;/li&gt;
&lt;li&gt;HTTP（s）：80（443）。&lt;/li&gt;
&lt;li&gt;SMTP：25。&lt;/li&gt;
&lt;li&gt;POP3：110。&lt;/li&gt;
&lt;li&gt;SOCKS：1080。&lt;/li&gt;
&lt;li&gt;Oracle：1521。&lt;/li&gt;
&lt;li&gt;SQL Server：1433。&lt;/li&gt;
&lt;li&gt;MySQL：3306。&lt;/li&gt;
&lt;li&gt;MongoDB：27017。&lt;/li&gt;
&lt;li&gt;Redis：6379。&lt;/li&gt;
&lt;li&gt;Memcached：11211。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;iptables&quot;&gt;3. Iptables&lt;/h2&gt;
&lt;h3 id=&quot;iptables-摘要&quot;&gt;3.1 Iptables 摘要&lt;/h3&gt;
&lt;p&gt;简单的说，Iptables 是一种能够轻易插入、修改和除去数据包过滤表中规则的工具，是netfilter项目的一部分。以下为使用方法和案例详解（只记录我认为的常用规则）：&lt;/p&gt;
&lt;p&gt;示意图：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180227161810070-1763035186.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命令结构：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; [-t 表名] [-AI 链名] [-I/o 网卡名] [-p  协议名] [-s 源IP/子网] [--sport 源端口] [-d 目标IP/子网] [--dport 目标端口] [-j 控制类型]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;filter：默认表，配置规则允许或不允许，用于防火墙。&lt;/li&gt;
&lt;li&gt;nat：地址转换，用于网关路由器。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;规则链：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PREROUTING 路由前（用于目标地址转换 DNAT）。&lt;/li&gt;
&lt;li&gt;INPUT：数据包流入口。&lt;/li&gt;
&lt;li&gt;PORWARD：转发管卡。&lt;/li&gt;
&lt;li&gt;OUTPUT：数据包出口。&lt;/li&gt;
&lt;li&gt;POSTOUTING：路由后（用于源地址转换 SNAT）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;控制类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ACCEPT/DROP/REJECT：接收/丢弃/重定向数据包。&lt;/li&gt;
&lt;li&gt;SNAT/DNAT：源地/目标址转换。&lt;/li&gt;
&lt;li&gt;MASQUERADE：IP伪装（NAT），用于ADSL。&lt;/li&gt;
&lt;li&gt;LOG：日志记录。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;iptables-实例&quot;&gt;3.2 Iptables 实例&lt;/h3&gt;
&lt;h4 id=&quot;查看与清除规则&quot;&gt;3.2.1 查看与清除规则&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; [-t tables] [-nv] [-L]
&lt;span class=&quot;co&quot;&gt;# 参数说明：&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;-t&lt;/span&gt; table：默认为 filter， 可指定 nat。
&lt;span class=&quot;kw&quot;&gt;-L&lt;/span&gt; ：列出当前 table 的规则。
&lt;span class=&quot;kw&quot;&gt;-n&lt;/span&gt; ：不进行 IP 与 HOSTNAME 的反查（速度更快）。
&lt;span class=&quot;kw&quot;&gt;-v&lt;/span&gt; ：列出更多的信息，包括通过该规则的封包总位数、相关的网络接口等。

&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; [-t tables] [-FXZ]
&lt;span class=&quot;co&quot;&gt;# 参数说明：&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;-F&lt;/span&gt; ：清空规则链。
&lt;span class=&quot;kw&quot;&gt;-X&lt;/span&gt; ：删除用户自定义的空链。
&lt;span class=&quot;kw&quot;&gt;-Z&lt;/span&gt; ：将所有链的计数与流量统计归零。&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;添加规则&quot;&gt;3.2.2 添加规则&lt;/h4&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;-A/I&lt;/span&gt; 链名：添加规则，-A为在原规则后追击&lt;span class=&quot;kw&quot;&gt;;-I&lt;/span&gt; 则为插入，若未指定行，则插入到第一行，例：iptables -I 2 INPUT -j ACCEPT。

&lt;span class=&quot;kw&quot;&gt;-i/o&lt;/span&gt; 网卡名：匹配网卡流入/出。

&lt;span class=&quot;kw&quot;&gt;-p&lt;/span&gt;  协议名：主要有tcp、udp、icmp 和 all。

&lt;span class=&quot;kw&quot;&gt;-s/d&lt;/span&gt; 源/目标 IP/子网：
   &lt;span class=&quot;kw&quot;&gt;-s&lt;/span&gt; 172.16.205.1
   &lt;span class=&quot;kw&quot;&gt;172.16.205.0/24&lt;/span&gt; 
   &lt;span class=&quot;kw&quot;&gt;172.16.205.0/255.255.255.0&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;IP&lt;/span&gt;：172.16.205.1
   &lt;span class=&quot;kw&quot;&gt;-s&lt;/span&gt; ! 172.16.205.0/24 
   
&lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上说明再结合 3.1 小节的命令结构足以满足大部分的应用场景了。&lt;/p&gt;
&lt;h4 id=&quot;配置私网-ecs-联外网&quot;&gt;3.2.3 配置私网 ECS 联外网&lt;/h4&gt;
&lt;p&gt;前言中说了一些与之相关的梗概，本小结进行实际操作。首先，在 VPC 专有网络中添加一条路由规则，如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201802/801714-20180227175349211-359192204.png&quot;/&gt;&lt;br/&gt;下一跳实例为外网 ECS 实例。&lt;br/&gt;其次，在外网 ECS（172.16.200.1）中开启内核路由转发功能：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 临时&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; 1 &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; /proc/sys/net/ipv4/ip_forward
&lt;span class=&quot;kw&quot;&gt;sysctl&lt;/span&gt; -p
&lt;span class=&quot;co&quot;&gt;# 永久&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'net.ipv4.ip_forward = 1'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;kw&quot;&gt;sysctl&lt;/span&gt; -p&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再根据 VPC 网段添加一条转发规则，例如我的是：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;iptables&lt;/span&gt; -t nat -A POSTROUTING -s 172.16.205.0/24 -j SNAT --to-source 172.16.200.1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，只要是在 &lt;code&gt;172.16.205.0/24&lt;/code&gt; 这个网段内的所有私网服务器都能联外网了。&lt;/p&gt;
&lt;h2 id=&quot;其他网络管理常用命令&quot;&gt;4. 其他网络管理常用命令&lt;/h2&gt;
&lt;p&gt;由于服务器都在“云上”，所以很多 Linux 最基本的网路配置命令几乎都用不着了，常用的就是一些测试或者查看的命令，暂时收录如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ping：&lt;/strong&gt; 发送ICMP报文，常用： &lt;code&gt;ping -ic&lt;/code&gt;，参数说明：interval、count。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;telnet：&lt;/strong&gt; 查看端口是否联通，格式： &lt;code&gt;telnet ip port&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;traceroute：&lt;/strong&gt; 路由跟踪，格式： &lt;code&gt;traceroute hostname&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ifconfig：&lt;/strong&gt; 查看网卡信息，其他的参数都不常用了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;netstat：&lt;/strong&gt; 监控 TCP/IP 网络，常用参数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;　　&lt;span class=&quot;kw&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 显示所有socket，包括正在监听的。&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 显示有在 Listen （监听） 的服务状态。&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 以网络IP地址代替名称，显示网络连接情形。&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 显示TCP协议的连接情况。&lt;/span&gt;
　　&lt;span class=&quot;kw&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 显示UDP协议的连接情况。&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常与 grep 结合使用，如 &lt;code&gt;netstat -atuln | grep '：80'&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;route：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;route&lt;/span&gt; -n &lt;span class=&quot;co&quot;&gt;# 查询路由状态。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;route&lt;/span&gt; add/del default gw 172.16.200.1 &lt;span class=&quot;co&quot;&gt;#添加/删除默认网关。&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;以上主要简述了 TCP/IP 模型和 Iptables 的使用，若汝以之为尚可，拜请赞之 ~：）&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 12:53:00 +0000</pubDate>
<dc:creator>捷义</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youclk/p/8470139.html</dc:identifier>
</item>
<item>
<title>SqlBulkCopy 参数配置示例 - 仰光</title>
<link>http://www.cnblogs.com/a_bu/p/8480111.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/a_bu/p/8480111.html</guid>
<description>
&lt;p&gt;   SqlBulkCopy  做为SQL Server 官方 批量入库类，性能不会太差。其事务部份官方说明较模糊，因此 针对事务配置做了一些测试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;  A. 先准备测试场景 ，关于&lt;code class=&quot;lang-csharp&quot; data-src=&quot;https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks%20SqlBulkCopy.DefaultTransaction/CS/source.cs&quot;&gt;SqlBulkCopyOptions.KeepIdentity&lt;/code&gt; 应用。  新建两张表 , 每张表列a 做为自增列，同时做为主键 ， 其中 test_sqlbulk 源表 ，先添加一组数据。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;test_sqlbulk&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;IDENTITY&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PK_test_sqlbulk&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;CLUSTERED&lt;/span&gt;&lt;span&gt; 
(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;ASC&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;&lt;span&gt;WITH&lt;/span&gt; (PAD_INDEX  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, STATISTICS_NORECOMPUTE  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, IGNORE_DUP_KEY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, ALLOW_ROW_LOCKS  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;, ALLOW_PAGE_LOCKS  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;




&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;test_sqlbulk_des&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;IDENTITY&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;CONSTRAINT&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PK_test_sqlbulk_des&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;CLUSTERED&lt;/span&gt;&lt;span&gt; 
(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;ASC&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;&lt;span&gt;WITH&lt;/span&gt; (PAD_INDEX  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, STATISTICS_NORECOMPUTE  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, IGNORE_DUP_KEY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;, ALLOW_ROW_LOCKS  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;, ALLOW_PAGE_LOCKS  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;) &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;添加数据:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227164025767-2009220958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;测试代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3c57e69b-560d-4f41-84de-054c2a91cc92')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_3c57e69b-560d-4f41-84de-054c2a91cc92&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c57e69b-560d-4f41-84de-054c2a91cc92&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3c57e69b-560d-4f41-84de-054c2a91cc92',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c57e69b-560d-4f41-84de-054c2a91cc92&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
 SqlConnection sqlConn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection( sourceConnection) ;
            sqlConn.Open() ;
            SqlCommand commandSourceData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from test_sqlbulk &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sqlConn);
            SqlDataReader reader &lt;/span&gt;=&lt;span&gt; commandSourceData.ExecuteReader();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set up the bulk copy object using the KeepIdentity option. &lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (SqlBulkCopy bulkCopy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlBulkCopy(
                       sourceConnection))
            {
                bulkCopy.BatchSize &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                bulkCopy.DestinationTableName &lt;/span&gt;=
                    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.test_sqlbulk_des&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write from the source to the destination.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This should fail with a duplicate key error
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; after some of the batches have been copied.&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    bulkCopy.WriteToServer(reader);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
                {
                    reader.Close();
                }
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;再看看目标表 &lt;span&gt;test_sqlbulk_des&lt;/span&gt; 结果 , 由于SqlBulkCopy  构造参数没有 &lt;code class=&quot;lang-csharp&quot; data-src=&quot;https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks%20SqlBulkCopy.DefaultTransaction/CS/source.cs&quot;&gt;KeepIdentity&lt;/code&gt; 标识，目标表自增列与源表不一致 :&lt;/p&gt;
&lt;p&gt;&lt;span&gt;test_sqlbulk_des&lt;/span&gt; 查询结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227164259728-453747350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; =&amp;gt;调整代码，增加 SqlBulkCopyOptions.KeepIdentity 选项，再次导入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
 using (SqlBulkCopy bulkCopy = new SqlBulkCopy(
                       sourceConnection, SqlBulkCopyOptions.KeepIdentity))
            {
                bulkCopy.BatchSize = 2;
                bulkCopy.DestinationTableName =
                    &quot;dbo.test_sqlbulk_des&quot;;

                // Write from the source to the destination.
                // This should fail with a duplicate key error
                // after some of the batches have been copied.
                try
                {
                    bulkCopy.WriteToServer(reader);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    reader.Close();
                }
            }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; =&amp;gt;目标表，源表自增列一致了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227164806771-460219348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B. 测试无事务，内部事务（&lt;code class=&quot;lang-csharp&quot; data-src=&quot;https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks%20SqlBulkCopy.InternalTransaction/CS/source.cs&quot;&gt;SqlBulkCopyOptions.UseInternalTransaction&lt;/code&gt;） ， 外部传入事务 之间区别 ， 以下所有测试均事先在目标表保留一行数据 使copy 过程中造成主键冲突，查看回退情况。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 无事务测试。初使化源表，目标表数据:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227165529191-1910855416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;测试代码 ， 不意外，如下代码最终会产生主键冲突错误， 执行结束后，再查询源表，目标表数据 。 BatchSize 设置为2 , 结果表明在第二批次主键冲突, 第一批次数据成功提交了（没有显示声明事务）, 再将 BatchSize 设置为3 验证结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
 SqlConnection sqlConn = new SqlConnection( sourceConnection) ;
            sqlConn.Open() ;
            SqlCommand commandSourceData = new SqlCommand(&quot;select * from test_sqlbulk &quot;, sqlConn);
            SqlDataReader reader = commandSourceData.ExecuteReader();

            // Set up the bulk copy object using the KeepIdentity option. 
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(
                       sourceConnection, SqlBulkCopyOptions.KeepIdentity))
            {
                bulkCopy.BatchSize = 2;
                bulkCopy.DestinationTableName =
                    &quot;dbo.test_sqlbulk_des&quot;;

                // Write from the source to the destination.
                // This should fail with a duplicate key error
                // after some of the batches have been copied.
                try
                {
                    bulkCopy.WriteToServer(reader);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    reader.Close();
                }
            }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BatchSize = 2 结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227165720819-571432489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;BatchSize = 3 结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227170149101-1402099223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;2.指定内部事务 ， 分别将 BatchSize 指定为 2 , 3, 4  。如下执行结果与上文示例 结果一致， 因此无论是否指定 SqlBulkCopyOptions.UseInternalTransaction 参数（不包括外部传入事务） ，SqlBulkCopy 内部按照一个批次一个事务。在出现异常时只回滚当前批次 ， 在此之前成功执行批次不回滚。 因此若需全部回退，需将  BatchSize 设为 总记录条数 ，此时所有数据做为一个批次提交 ，  异常回退批次，回退数据范围即全部数据。&lt;/p&gt;

&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
 // Set up the bulk copy object using the KeepIdentity option. 
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(
                       sourceConnection, SqlBulkCopyOptions.KeepIdentity | SqlBulkCopyOptions.UseInternalTransaction))
            {
                bulkCopy.BatchSize = 2;
                bulkCopy.DestinationTableName =
                    &quot;dbo.test_sqlbulk_des&quot;;

                // Write from the source to the destination.
                // This should fail with a duplicate key error
                // after some of the batches have been copied.
                try
                {
                    bulkCopy.WriteToServer(reader);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    reader.Close();
                }
            }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; =&amp;gt;BatchSize = 2  , 目标表结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227170658110-202907183.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; =&amp;gt;BatchSize = 3  , 目标表结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227170742931-832589110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3. 外部传入事务对象场景 , &lt;code&gt;如果 使用&lt;code class=&quot;lang-csharp&quot; data-src=&quot;https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks%20SqlBulkCopy.InternalTransaction/CS/source.cs&quot;&gt;SqlBulkCopy&lt;/code&gt;入库操作只做为本次业务处理一个子集，在整个业务处理环节中异常情况，需要回滚整个业务操作。 本次再新建一张表:test_sqlbulk_update ， 测试过程中，先对该表增加一条记录，再重复之前异常场景。 结束时，之前新增记录也回退了。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此&lt;/strong&gt;， 当外部传入事务对象时，SqlBulkCopy  内部不提交事务， 在异常情况，有可能会自动回滚。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0be46137-caf3-484f-a4c8-d7fd99ce7615')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0be46137-caf3-484f-a4c8-d7fd99ce7615&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0be46137-caf3-484f-a4c8-d7fd99ce7615&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0be46137-caf3-484f-a4c8-d7fd99ce7615',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0be46137-caf3-484f-a4c8-d7fd99ce7615&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;test_sqlbulk_update&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;IDENTITY&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:csharp;collapse:true;;gutter:true;&quot;&gt;
SqlConnection sqlConn = new SqlConnection( sourceConnection) ;
            sqlConn.Open() ;

            SqlTransaction tran = sqlConn.BeginTransaction();

            SqlCommand commandInsert = new SqlCommand(&quot;insert into [test_sqlbulk_update]( b ) values (1) &quot;, sqlConn, tran);

            int result = commandInsert.ExecuteNonQuery();

            SqlCommand commandSourceData = new SqlCommand(&quot;select * from test_sqlbulk &quot;, sqlConn, tran);
            
            SqlDataReader reader = commandSourceData.ExecuteReader();
            
            // Set up the bulk copy object using the KeepIdentity option. 
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConn, SqlBulkCopyOptions.KeepIdentity, tran))
            {
                bulkCopy.BatchSize = 2;
                bulkCopy.DestinationTableName =
                    &quot;dbo.test_sqlbulk_des&quot;;

                // Write from the source to the destination.
                // This should fail with a duplicate key error
                // after some of the batches have been copied.
                try
                {
                    bulkCopy.WriteToServer(reader);
                    reader.Close();
                    tran.Commit();
                }
                catch (Exception ex)
                {
                    reader.Close();
                    tran.Rollback();&lt;br/&gt;　　　　　　　　　　　　// tran.Commit(); 异常仍提交执行，同时注释上一行。
                }
               
            }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; =&amp;gt; 异常时执行 rollback， 最终结果:没做任何修改.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227173314553-2039327166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; 外部事务，Catch 中执行 Commint ,发生异常，因为自动回滚了，但在Catch 执行 Rollback 无异常。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0aa13ab7-6009-404d-8584-54e75d7c5daa')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0aa13ab7-6009-404d-8584-54e75d7c5daa&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0aa13ab7-6009-404d-8584-54e75d7c5daa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0aa13ab7-6009-404d-8584-54e75d7c5daa',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0aa13ab7-6009-404d-8584-54e75d7c5daa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
SqlTransaction tran =&lt;span&gt; sqlConn.BeginTransaction();


            SqlCommand commandSourceData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from test_sqlbulk &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(sourceConnection));
            
            SqlDataAdapter ada &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlDataAdapter(commandSourceData ) ;
            System.Data.DataSet ds &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Data.DataSet();
            ada.Fill(ds);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set up the bulk copy object using the KeepIdentity option. &lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (SqlBulkCopy bulkCopy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlBulkCopy(sqlConn, SqlBulkCopyOptions.KeepIdentity, tran))
            {
                bulkCopy.BatchSize &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                bulkCopy.DestinationTableName &lt;/span&gt;=
                    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.test_sqlbulk_des&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write from the source to the destination.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This should fail with a duplicate key error
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; after some of the batches have been copied.&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    
                    bulkCopy.WriteToServer(ds.Tables[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);

                    SqlCommand commandInsert &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into [test_sqlbulk_update]( b ) values ('a') &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sqlConn, tran);

                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result =&lt;span&gt; commandInsert.ExecuteNonQuery();


                    tran.Commit();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    tran.Commit();
                }
               
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104935/201802/104935-20180227184130459-1398019973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Feb 2018 09:41:00 +0000</pubDate>
<dc:creator>仰光</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/a_bu/p/8480111.html</dc:identifier>
</item>
<item>
<title>卷积神经网络(CNN)在句子建模上的应用 - 笨兔勿应</title>
<link>http://www.cnblogs.com/bentuwuying/p/8480045.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bentuwuying/p/8480045.html</guid>
<description>&lt;p&gt;之前的博文已经介绍了CNN的基本原理，本文将大概总结一下最近CNN在NLP中的句子建模（或者句子表示）方面的应用情况，主要阅读了以下的文献：&lt;/p&gt;
&lt;blockquote readability=&quot;34&quot;&gt;
&lt;p&gt;Kim Y. Convolutional neural networks for sentence classification[J]. arXiv preprint arXiv:1408.5882, 2014.&lt;/p&gt;
&lt;p&gt;Kalchbrenner N, Grefenstette E, Blunsom P. A convolutional neural network for modelling sentences[J]. arXiv preprint arXiv:1404.2188, 2014.&lt;/p&gt;
&lt;p&gt;Hu B, Lu Z, Li H, et al. Convolutional neural network architectures for matching natural language sentences[C]//Advances in Neural Information Processing Systems. 2014: 2042-2050.&lt;/p&gt;
&lt;p&gt;He H, Gimpel K, Lin J. Multi-perspective sentence similarity modeling with convolutional neural networks[C]//Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing. 2015: 1576-1586.&lt;/p&gt;
&lt;p&gt;Wenpeng Yin, Hinrich Schütze. Convolutional Neural Network for Paraphrase Identification. The 2015 Conference of the North American Chapter of the Association for Computational Linguistics&lt;/p&gt;
&lt;p&gt;Zhang Y, Wallace B. A Sensitivity Analysis of (and Practitioners’ Guide to) Convolutional Neural Networks for Sentence Classification[J]. arXiv preprint arXiv:1510.03820, 2015.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面对文献中CNN的结构和细节进行梳理。&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;Kim_Y’s_Paper&quot;&gt;Kim Y’s Paper&lt;/h3&gt;
&lt;h4 id=&quot;模型结构及原理&quot;&gt;模型结构及原理&lt;/h4&gt;
&lt;p&gt;模型的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/yxoZDt9.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/yxoZDt9.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说明如下：&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;如图所示，输入层是句子中的词语对应的word vector依次（从上到下）排列的矩阵，假设句子有 &lt;span id=&quot;MathJax-Element-1-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-1&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-2&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-3&quot; class=&quot;mi&quot;&gt;n &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;个词，vector的维数为 &lt;span id=&quot;MathJax-Element-2-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-4&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-5&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-6&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; ，那么这个矩阵就是 &lt;span id=&quot;MathJax-Element-3-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-7&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-8&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-9&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-10&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-11&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个矩阵的类型可以是静态的(static)，也可以是动态的(non static)。静态就是word vector是固定不变的，而动态则是在模型训练过程中，word vector也当做是可优化的参数，通常把反向误差传播导致word vector中值发生变化的这一过程称为&lt;strong&gt;&lt;code&gt;Fine tune&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于未登录词的vector，可以用0或者随机小的正数来填充。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一层卷积层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;输入层通过卷积操作得到若干个&lt;code&gt;Feature Map&lt;/code&gt;，卷积窗口的大小为 &lt;span id=&quot;MathJax-Element-4-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;h&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-12&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-13&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-14&quot; class=&quot;mi&quot;&gt;h&lt;span id=&quot;MathJax-Span-15&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-16&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; ，其中 &lt;span id=&quot;MathJax-Element-5-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;h&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-17&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-18&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-19&quot; class=&quot;mi&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 表示纵向词语的个数，而 &lt;span id=&quot;MathJax-Element-6-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-20&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-21&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-22&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;k 表示word vector的维数。通过这样一个大型的卷积窗口，将得到若干个列数为1的&lt;code&gt;Feature Map&lt;/code&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接下来的池化层，文中用了一种称为&lt;strong&gt;&lt;code&gt;Max-over-time Pooling&lt;/code&gt;&lt;/strong&gt;的方法。这种方法就是简单地从之前一维的&lt;code&gt;Feature Map&lt;/code&gt;中提出最大的值，文中解释最大值代表着最重要的信号。可以看出，这种Pooling方式可以解决可变长度的句子输入问题（因为不管&lt;code&gt;Feature Map&lt;/code&gt;中有多少个值，只需要提取其中的最大值）。&lt;/p&gt;
&lt;p&gt;最终池化层的输出为各个&lt;code&gt;Feature Map&lt;/code&gt;的最大值们，即一个一维的向量。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;全连接 + Softmax层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;池化层的一维向量的输出通过全连接的方式，连接一个Softmax层，Softmax层可根据任务的需要设置（通常反映着最终类别上的概率分布）。&lt;/p&gt;
&lt;p&gt;最终实现时，我们可以在倒数第二层的全连接部分上使用&lt;code&gt;Dropout&lt;/code&gt;技术，即对全连接层上的权值参数给予&lt;strong&gt;&lt;code&gt;L2正则化&lt;/code&gt;&lt;/strong&gt;的限制。这样做的好处是防止隐藏层单元自适应（或者对称），从而减轻过拟合的程度。&lt;/p&gt;
&lt;h4 id=&quot;实验部分&quot;&gt;实验部分&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. 数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实验用到的数据集如下（具体的名称和来源可以参考论文）：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/8VDJDDJ.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/8VDJDDJ.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 模型训练和调参&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修正线性单元(Rectified linear units)&lt;/li&gt;
&lt;li&gt;滤波器的h大小：3,4,5；对应的Feature Map的数量为100；&lt;/li&gt;
&lt;li&gt;Dropout率为0.5，L2正则化限制权值大小不超过3；&lt;/li&gt;
&lt;li&gt;mini-batch的大小为50；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些参数的选择都是基于SST-2 dev数据集，通过网格搜索方法(Grid Search)得到的最优参数。另外，训练过程中采用随机梯度下降方法，基于shuffled mini-batches之上的，使用了Adadelta update rule(Zeiler, 2012)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 预训练的Word Vector&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里的word vector使用的是公开的数据，即连续词袋模型(COW)在Google News上的训练结果。未登录次的vector值是随机初始化的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实验结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/sNpll24.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/sNpll24.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，前四个模型是上文中所提出的基本模型的各个变种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;CNN-rand&lt;/strong&gt;: 所有的word vector都是随机初始化的，同时当做训练过程中优化的参数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNN-static&lt;/strong&gt;: 所有的word vector直接使用无监督学习即Google的Word2Vector工具(COW模型)得到的结果，并且是固定不变的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNN-non-static&lt;/strong&gt;: 所有的word vector直接使用无监督学习即Google的Word2Vector工具(COW模型)得到的结果，但是会在训练过程中被&lt;code&gt;Fine tuned&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNN-multichannel&lt;/strong&gt;: CNN-static和CNN-non-static的混合版本，即两种类型的输入；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;博主自己下载了论文作者的实现程序(&lt;a href=&quot;https://github.com/yoonkim/CNN_sentence&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/a&gt;)，最终在MR数据集上的运行结果如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CNN-rand: 0.7669&lt;/li&gt;
&lt;li&gt;CNN-static: 0.8076&lt;/li&gt;
&lt;li&gt;CNN-non-static: 0.8151&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;和论文中的结果差不多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 结论&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;CNN-static&lt;/code&gt;&lt;/strong&gt;较与&lt;strong&gt;&lt;code&gt;CNN-rand&lt;/code&gt;&lt;/strong&gt;好，&lt;strong&gt;说明pre-training的word vector确实有较大的提升作用&lt;/strong&gt;（这也难怪，因为pre-training的word vector显然利用了更大规模的文本数据信息）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CNN-non-static&lt;/code&gt;&lt;/strong&gt;较于&lt;strong&gt;&lt;code&gt;CNN-static&lt;/code&gt;&lt;/strong&gt;大部分要好，&lt;strong&gt;说明适当的Fine tune也是有利的，是因为使得vectors更加贴近于具体的任务&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CNN-multichannel&lt;/code&gt;&lt;/strong&gt;较于&lt;strong&gt;&lt;code&gt;CNN-single&lt;/code&gt;&lt;/strong&gt;在小规模的数据集上有更好的表现，实际上&lt;strong&gt;&lt;code&gt;CNN-multichannel&lt;/code&gt;&lt;/strong&gt;体现了一种折中思想，即既不希望Fine tuned的vector距离原始值太远，但同时保留其一定的变化空间。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;值得注意的是，static的vector和non-static的相比，有一些有意思的现象如下表格：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/fW6pr0p.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/fW6pr0p.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;原始的word2vector训练结果中，&lt;code&gt;bad&lt;/code&gt;对应的最相近词为&lt;code&gt;good&lt;/code&gt;，原因是这两个词在句法上的使用是极其类似的（可以简单替换，不会出现语句毛病）；而在&lt;code&gt;non-static&lt;/code&gt;的版本中，&lt;code&gt;bad&lt;/code&gt;对应的最相近词为&lt;code&gt;terrible&lt;/code&gt;，这是因为在&lt;code&gt;Fune tune&lt;/code&gt;的过程中，vector的值发生改变从而更加贴切数据集（是一个情感分类的数据集），所以在情感表达的角度这两个词会更加接近；&lt;/li&gt;
&lt;li&gt;句子中的&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt;最接近一些表达形式较为激进的词汇，如&lt;code&gt;lush&lt;/code&gt;等；而&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;则接近于一些连接词，这和我们的主观感受也是相符的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Kim Y的这个模型很简单，但是却有着很好的性能。后续Denny用TensorFlow实现了这个模型的简单版本，可参考&lt;strong&gt;&lt;a href=&quot;http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;这篇博文&lt;/a&gt;&lt;/strong&gt;；以及Ye Zhang等人对这个模型进行了大量的实验，并给出了调参的建议，可参考&lt;strong&gt;&lt;a href=&quot;http://arxiv.org/abs/1510.03820&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;这篇论文&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面总结一下Ye Zhang等人基于Kim Y的模型做了大量的调参实验之后的结论：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;由于模型训练过程中的随机性因素，如随机初始化的权重参数，mini-batch，随机梯度下降优化算法等，造成模型在数据集上的结果有一定的浮动，如准确率(accuracy)能达到1.5%的浮动，而AUC则有3.4%的浮动；&lt;/li&gt;
&lt;li&gt;词向量是使用word2vec还是GloVe，对实验结果有一定的影响，具体哪个更好依赖于任务本身；&lt;/li&gt;
&lt;li&gt;Filter的大小对模型性能有较大的影响，并且Filter的参数应该是可以更新的；&lt;/li&gt;
&lt;li&gt;Feature Map的数量也有一定影响，但是需要兼顾模型的训练效率；&lt;/li&gt;
&lt;li&gt;1-max pooling的方式已经足够好了，相比于其他的pooling方式而言；&lt;/li&gt;
&lt;li&gt;正则化的作用微乎其微。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ye Zhang等人给予模型调参者的建议如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用&lt;strong&gt;&lt;code&gt;non-static&lt;/code&gt;&lt;/strong&gt;版本的&lt;strong&gt;&lt;code&gt;word2vec&lt;/code&gt;&lt;/strong&gt;或者&lt;strong&gt;&lt;code&gt;GloVe&lt;/code&gt;&lt;/strong&gt;要比单纯的&lt;code&gt;one-hot representation&lt;/code&gt;取得的效果好得多；&lt;/li&gt;
&lt;li&gt;为了找到最优的过滤器(Filter)大小，可以使用线性搜索的方法。通常过滤器的大小范围在&lt;strong&gt;&lt;code&gt;1-10&lt;/code&gt;&lt;/strong&gt;之间，当然对于长句，使用更大的过滤器也是有必要的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Feature Map&lt;/code&gt;&lt;/strong&gt;的数量在&lt;strong&gt;&lt;code&gt;100-600&lt;/code&gt;&lt;/strong&gt;之间；&lt;/li&gt;
&lt;li&gt;可以尽量多尝试激活函数，实验发现&lt;strong&gt;&lt;code&gt;ReLU&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;tanh&lt;/code&gt;&lt;/strong&gt;两种激活函数表现较佳；&lt;/li&gt;
&lt;li&gt;使用简单的&lt;strong&gt;&lt;code&gt;1-max pooling&lt;/code&gt;&lt;/strong&gt;就已经足够了，可以没必要设置太复杂的pooling方式；&lt;/li&gt;
&lt;li&gt;当发现增加&lt;code&gt;Feature Map&lt;/code&gt;的数量使得模型的性能下降时，可以考虑增大正则的力度，如调高&lt;code&gt;dropout&lt;/code&gt;的概率；&lt;/li&gt;
&lt;li&gt;为了检验模型的性能水平，多次反复的交叉验证是必要的，这可以确保模型的高性能并不是偶然。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;论文附录中还附上了各种调参结果，感兴趣的可以前往阅读之。&lt;/p&gt;
&lt;h3 id=&quot;Kalchbrenner’s_Paper&quot;&gt;Kalchbrenner’s Paper&lt;/h3&gt;
&lt;p&gt;Kal的这篇文章引用次数较高，他提出了一种名为DCNN(Dynamic Convolutional Neural Network)的网络模型，在上一篇（Kim’s Paper）中的实验结果部分也验证了这种模型的有效性。这个模型的精妙之处在于Pooling的方式，使用了一种称为&lt;strong&gt;&lt;code&gt;动态Pooling&lt;/code&gt;&lt;/strong&gt;的方法。&lt;/p&gt;
&lt;p&gt;下图是这个模型对句子语义建模的过程，可以看到底层通过组合邻近的词语信息，逐步向上传递，上层则又组合新的Phrase信息，从而使得句子中即使相离较远的词语也有交互行为（或者某种语义联系）。从直观上来看，这个模型能够通过词语的组合，提取出句子中重要的语义信息（通过Pooling），某种意义上来说，层次结构的&lt;strong&gt;&lt;code&gt;feature graph&lt;/code&gt;&lt;/strong&gt;的作用类似于一棵语法解析树。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/3IbLJX4.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/3IbLJX4.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DCNN能够处理可变长度的输入，网络中包含两种类型的层，分别是&lt;strong&gt;一维的卷积层&lt;/strong&gt;和&lt;strong&gt;动态k-max的池化层(Dynamic k-max pooling)&lt;/strong&gt;。其中，动态k-max池化是最大化池化更一般的形式。之前LeCun将CNN的池化操作定义为一种非线性的抽样方式，返回一堆数中的最大值，原话如下：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The max pooling operator is a non-linear subsampling function that returns the maximum of a set of values (LuCun et al., 1998).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而文中的k-max pooling方式的一般化体现在：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pooling的结果不是返回一个最大值，而是返回k组最大值，这些最大值是原输入的一个子序列；&lt;/li&gt;
&lt;li&gt;pooling中的参数k可以是一个动态函数，具体的值依赖于输入或者网络的其他参数；&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;模型结构及原理-1&quot;&gt;模型结构及原理&lt;/h4&gt;
&lt;p&gt;DCNN的网络结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/CNMa0VL.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/CNMa0VL.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络中的卷积层使用了一种称之为&lt;strong&gt;&lt;code&gt;宽卷积(Wide Convolution)&lt;/code&gt;&lt;/strong&gt;的方式，紧接着是动态的k-max池化层。中间卷积层的输出即&lt;code&gt;Feature Map&lt;/code&gt;的大小会根据输入句子的长度而变化。下面讲解一下这些操作的具体细节：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 宽卷积&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相比于传统的卷积操作，宽卷积的输出的&lt;code&gt;Feature Map&lt;/code&gt;的宽度(width)会更宽，原因是卷积窗口并不需要覆盖所有的输入值，也可以是部分输入值（可以认为此时其余的输入值为0，即填充0）。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/YgM3Tsg.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/YgM3Tsg.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax&quot;&gt;图中的右图即表示宽卷积的计算过程，当计算第一个节点即&lt;span id=&quot;MathJax-Element-7-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-23&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-24&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-25&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-26&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-27&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;时，可以假使&lt;span id=&quot;MathJax-Element-8-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-28&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-29&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-30&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-31&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-32&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;s1节点前面有四个输入值为0的节点参与卷积（卷积窗口为5）。明显看出，狭义上的卷积输出结果是宽卷积输出结果的一个子集。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. k-max池化&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax has-jax has-jax&quot;&gt;给出数学形式化的表述是，给定一个&lt;span id=&quot;MathJax-Element-9-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-33&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-34&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-35&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;值，和一个序列&lt;span id=&quot;MathJax-Element-10-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2208;&amp;lt;/mo&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-36&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-37&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-38&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-39&quot; class=&quot;mo&quot;&gt;∈&lt;span id=&quot;MathJax-Span-40&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-41&quot; class=&quot;mi&quot;&gt;R&lt;span id=&quot;MathJax-Span-42&quot; class=&quot;mi&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;(其中&lt;span id=&quot;MathJax-Element-11-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2265;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-43&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-44&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-45&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-46&quot; class=&quot;mo&quot;&gt;≥&lt;span id=&quot;MathJax-Span-47&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;)，&lt;code&gt;k-max pooling&lt;/code&gt;选择了序列&lt;span id=&quot;MathJax-Element-12-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-48&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-49&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-50&quot; class=&quot;mi&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;中的前&lt;span id=&quot;MathJax-Element-13-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-51&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-52&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-53&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;个最大值，这些最大值保留原来序列的次序（实际上是原序列的一个子序列）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;&lt;code&gt;k-max pooling&lt;/code&gt;的好处在于，既提取除了句子中的较重要信息（不止一个），同时保留了它们的次序信息（相对位置）。同时，由于应用在最后的卷积层上只需要提取出&lt;span id=&quot;MathJax-Element-14-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-54&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-55&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-56&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;个值，所以这种方法允许不同长度的输入（输入的长度应该要大于&lt;span id=&quot;MathJax-Element-15-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-57&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-58&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-59&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;）。然而，对于中间的卷积层而言，池化的参数&lt;span id=&quot;MathJax-Element-16-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-60&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-61&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-62&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;k不是固定的，具体的选择方法见下面的介绍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 动态k-max池化&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt;动态k-max池化操作，其中的&lt;span id=&quot;MathJax-Element-17-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-63&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-64&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-65&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;是&lt;code&gt;输入句子长度&lt;/code&gt;和&lt;code&gt;网络深度&lt;/code&gt;两个参数的函数，具体如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;MathJax-Element-18-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;K&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mo movablelimits=&amp;quot;true&amp;quot; form=&amp;quot;prefix&amp;quot;&amp;gt;max&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mo&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2308;&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mfrac&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;/mfrac&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2309;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mo&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-66&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-67&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-68&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-69&quot; class=&quot;mi&quot;&gt;K&lt;span id=&quot;MathJax-Span-70&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-71&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-72&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-73&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-74&quot; class=&quot;mo&quot;&gt;max&lt;span id=&quot;MathJax-Span-75&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-76&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-77&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-78&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-79&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-80&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-81&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-82&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-83&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-84&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-85&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-86&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-87&quot; class=&quot;mo&quot;&gt;⌈&lt;span id=&quot;MathJax-Span-88&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-89&quot; class=&quot;mfrac&quot;&gt;&lt;span id=&quot;MathJax-Span-90&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-91&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-92&quot; class=&quot;mo&quot;&gt;−&lt;span id=&quot;MathJax-Span-93&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-94&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-95&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-96&quot; class=&quot;mo&quot;&gt;⌉&lt;span id=&quot;MathJax-Span-97&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML MJX_Assistive_MathML_Block&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot; has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax&quot;&gt;其中&lt;span id=&quot;MathJax-Element-19-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-98&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-99&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-100&quot; class=&quot;mi&quot;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;l表示当前卷积的层数（即第几个卷积层），&lt;span id=&quot;MathJax-Element-20-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-101&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-102&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-103&quot; class=&quot;mi&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;是网络中总共卷积层的层数；&lt;span id=&quot;MathJax-Element-21-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-104&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-105&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-106&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-107&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-108&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-109&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-110&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-111&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-112&quot; class=&quot;mi&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;为最顶层的卷积层pooling对应的&lt;span id=&quot;MathJax-Element-22-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-113&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-114&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-115&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;k值，是一个固定的值。举个例子，例如网络中有三个卷积层，&lt;span id=&quot;MathJax-Element-23-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-116&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-117&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-118&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-119&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-120&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-121&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-122&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-123&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-124&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-125&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-126&quot; class=&quot;mn&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ktop=3，输入的句子长度为18；那么，对于第一层卷积层下面的pooling参数&lt;span id=&quot;MathJax-Element-24-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;12&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-127&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-128&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-129&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-130&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-131&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-132&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-133&quot; class=&quot;mn&quot;&gt;1&lt;span id=&quot;MathJax-Span-134&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-135&quot; class=&quot;mn&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，而第二层卷积层对于的为&lt;span id=&quot;MathJax-Element-25-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;6&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-136&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-137&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-138&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-139&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-140&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-141&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-142&quot; class=&quot;mn&quot;&gt;2&lt;span id=&quot;MathJax-Span-143&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-144&quot; class=&quot;mn&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，而&lt;span id=&quot;MathJax-Element-26-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-145&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-146&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-147&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-148&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-149&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-150&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-151&quot; class=&quot;mn&quot;&gt;3&lt;span id=&quot;MathJax-Span-152&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-153&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-154&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-155&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-156&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-157&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-158&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-159&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-160&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-161&quot; class=&quot;mn&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;动态k-max池化的意义在于，从不同长度的句子中提取出相应数量的语义特征信息，以保证后续的卷积层的统一性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 非线性特征函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pooling层与下一个卷积层之间，是通过与一些权值参数相乘后，加上某个偏置参数而来的，这与传统的CNN模型是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 多个Feature Map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和传统的CNN一样，会提出多个Feature Map以保证提取特征的多样性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 折叠操作(Folding)&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;之前的宽卷积是在输入矩阵&lt;span id=&quot;MathJax-Element-27-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-162&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-163&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-164&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-165&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-166&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;中的每一行内进行计算操作，其中&lt;span id=&quot;MathJax-Element-28-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-167&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-168&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-169&quot; class=&quot;mi&quot;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;是word vector的维数，&lt;span id=&quot;MathJax-Element-29-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-170&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-171&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-172&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;是输入句子的词语数量。而&lt;strong&gt;&lt;code&gt;Folding&lt;/code&gt;&lt;/strong&gt;操作则是考虑相邻的两行之间的某种联系，方式也很简单，就是将两行的vector相加；该操作没有增加参数数量，但是提前（在最后的全连接层之前）考虑了特征矩阵中行与行之间的某种关联。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;模型的特点&quot;&gt;模型的特点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;保留了句子中词序信息和词语之间的相对位置；&lt;/li&gt;
&lt;li&gt;宽卷积的结果是传统卷积的一个扩展，某种意义上，也是n-gram的一个扩展；&lt;/li&gt;
&lt;li&gt;模型不需要任何的先验知识，例如句法依存树等，并且模型考虑了句子中相隔较远的词语之间的语义信息；&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;实验部分-1&quot;&gt;实验部分&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. 模型训练及参数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;输出层是一个类别概率分布（即softmax），与倒数第二层全连接；&lt;/li&gt;
&lt;li&gt;代价函数为交叉熵，训练目标是最小化代价函数；&lt;/li&gt;
&lt;li&gt;L2正则化；&lt;/li&gt;
&lt;li&gt;优化方法：mini-batch + gradient-based (使用Adagrad update rule, Duchi et al., 2011)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2. 实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在三个数据集上进行了实验，分别是(1)电影评论数据集上的情感识别，(2)TREC问题分类，以及(3)Twitter数据集上的情感识别。结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/zuf2bSu.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/zuf2bSu.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/6lWY7zC.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/6lWY7zC.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/PX9N2JB.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/PX9N2JB.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看出，DCNN的性能非常好，几乎不逊色于传统的模型；而且，DCNN的好处在于不需要任何的先验信息输入，也不需要构造非常复杂的人工特征。&lt;/p&gt;
&lt;h3 id=&quot;Hu’s_Paper&quot;&gt;Hu’s Paper&lt;/h3&gt;
&lt;h4 id=&quot;模型结构与原理&quot;&gt;模型结构与原理&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. 基于CNN的句子建模&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇论文主要针对的是&lt;strong&gt;句子匹配(Sentence Matching)&lt;/strong&gt;的问题，但是基础问题仍然是句子建模。首先，文中提出了一种基于CNN的句子建模网络，如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/kG7AbW3.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/kG7AbW3.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中灰色的部分表示对于长度较短的句子，其后面不足的部分填充的全是0值(Zero Padding)。可以看出，模型解决不同长度句子输入的方法是规定一个最大的可输入句子长度，然后长度不够的部分进行0值的填充；图中的卷积计算和传统的CNN卷积计算无异，而池化则是使用Max-Pooling。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;卷积结构的分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下图示意性地说明了卷积结构的作用，作者认为卷积的作用是&lt;strong&gt;从句子中提取出局部的语义组合信息&lt;/strong&gt;，而多张&lt;code&gt;Feature Map&lt;/code&gt;则是从多种角度进行提取，也就是&lt;strong&gt;保证提取的语义组合的多样性&lt;/strong&gt;；而池化的作用是对多种语义组合进行选择，过滤掉一些置信度低的组合（可能这样的组合语义上并无意义）。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/yrFS2k1.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/yrFS2k1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 基于CNN的句子匹配模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是基于之前的句子模型，建立的两种用于两个句子的匹配模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 结构I&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/xaP0KNV.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/xaP0KNV.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，首先分别单独地对两个句子进行建模（使用上文中的句子模型），从而得到两个相同且固定长度的向量，向量表示句子经过建模后抽象得来的特征信息；然后，将这两个向量作为一个多层感知机(MLP)的输入，最后计算匹配的分数。&lt;/p&gt;
&lt;p&gt;这个模型比较简单，但是有一个较大的缺点：两个句子在建模过程中是完全独立的，没有任何交互行为，一直到最后生成抽象的向量表示后才有交互行为（一起作为下一个模型的输入），这样做使得句子在抽象建模的过程中会丧失很多语义细节，同时过早地失去了句子间语义交互计算的机会。因此，推出了第二种模型结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 结构II&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/NWvAPVr.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/NWvAPVr.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中可以看出，这种结构提前了两个句子间的交互行为。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一层卷积层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;第一层中，首先取一个固定的卷积窗口&lt;span id=&quot;MathJax-Element-30-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-173&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-174&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-175&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-176&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，然后遍历 &lt;span id=&quot;MathJax-Element-31-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-177&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-178&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-179&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-180&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-181&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-182&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-183&quot; class=&quot;mi&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 和 &lt;span id=&quot;MathJax-Element-32-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;y&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-184&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-185&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-186&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-187&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-188&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-189&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-190&quot; class=&quot;mi&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 中所有组合的二维矩阵进行卷积，每一个二维矩阵输出一个值（文中把这个称作为一维卷积，因为实际上是把组合中所有词语的vector排成一行进行的卷积计算），构成Layer-2。下面给出数学形式化表述：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/f3DqYsp.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/f3DqYsp.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一层卷积层后的Max-Pooling层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从而得到Layer-2，然后进行2×2的Max-pooling：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/DaFv3ps.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/DaFv3ps.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;后续的卷积层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;后续的卷积层均是传统的二维卷积操作，形式化表述如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/Pr5Mm9n.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/Pr5Mm9n.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;二维卷积结果后的Pooling层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;与第一层卷积层后的简单Max-Pooling方式不同，后续的卷积层的Pooling是一种&lt;strong&gt;动态Pooling方法&lt;/strong&gt;，这种方法来源于参考文献[1]。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;结构II的性质&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;保留了词序信息；&lt;/li&gt;
&lt;li&gt;更具一般性，实际上结构I是结构II的一种特殊情况（取消指定的权值参数）；&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;实验部分-2&quot;&gt;实验部分&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. 模型训练及参数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用基于排序的自定义损失函数(Ranking-based Loss)&lt;/li&gt;
&lt;li&gt;BP反向传播+随机梯度下降；&lt;/li&gt;
&lt;li&gt;mini-batch为100-200,并行化；&lt;/li&gt;
&lt;li&gt;为了防止过拟合，对于中型和大型数据集，会提前停止模型训练；而对于小型数据集，还会使用Dropout策略；&lt;/li&gt;
&lt;li&gt;Word2Vector：50维；英文语料为Wikipedia(~1B words)，中文语料为微博数据(~300M words)；&lt;/li&gt;
&lt;li&gt;使用ReLu函数作为激活函数；&lt;/li&gt;
&lt;li&gt;卷积窗口为3-word window；&lt;/li&gt;
&lt;li&gt;使用Fine tuning；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;2. 实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一共做了三个实验，分别是(1)句子自动填充任务，(2)推文与评论的匹配，以及(3)同义句识别；结果如下面的图示：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/wLIUAHW.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/wLIUAHW.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/fO0Xhnj.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/fO0Xhnj.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/qRfsoB0.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/qRfsoB0.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实结构I和结构II的结果相差不大，结构II稍好一些；而相比于其他的模型而言，结构I和结构II的优势还是较大的。&lt;/p&gt;
&lt;h3 id=&quot;He’s_Paper&quot;&gt;He’s Paper&lt;/h3&gt;
&lt;p&gt;第四篇论文即He的文章中所提出的模型，是所有基于NN的模型中，在Paraphrase identification任务标准数据集MSRP上效果最佳的。下面我们来学习一下这个模型。&lt;/p&gt;
&lt;h4 id=&quot;模型结构与原理-1&quot;&gt;模型结构与原理&lt;/h4&gt;
&lt;p&gt;模型主要分为两个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;句子的表征模型&lt;/strong&gt;：得到句子的表征(representation)，以供后续的相似度计算；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相似度计算模型&lt;/strong&gt;：使用多种相似度计算方法，针对句子表征后的局部进行相应的计算；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;模型不需要借助WordNet, 句法解析树等资源；但是可以选择性地使用词性标注、word embedding等方法来增强模型的性能；与之前的模型区别在于，文中的模型使用了多种类型的卷积、池化方法，以及针对得到的句子表征的局部进行相应的相似度计算。（这样做的优点在于能够更加充分地挖掘出句子中的特征信息，从而提升性能，但同时使得模型变得复杂、耗时）&lt;/p&gt;
&lt;p&gt;模型的整体框架如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/uz4z7le.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/uz4z7le.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面具体看看这两个模型是如何实现的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;句子的表征模型&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;模型是基于CNN的，卷积层有两种卷积方式，池化层则有三种。&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax has-jax&quot;&gt;假设模型的输入为二维矩阵 &lt;span id=&quot;MathJax-Element-33-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-191&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-192&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-193&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-194&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-195&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-196&quot; class=&quot;mi&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，&lt;span id=&quot;MathJax-Element-34-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2208;&amp;lt;/mo&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;D&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-197&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-198&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-199&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-200&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-201&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-202&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-203&quot; class=&quot;mo&quot;&gt;∈&lt;span id=&quot;MathJax-Span-204&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-205&quot; class=&quot;mi&quot;&gt;R&lt;span id=&quot;MathJax-Span-206&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-207&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-208&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-209&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-210&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-211&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-212&quot; class=&quot;mi&quot;&gt;D&lt;span id=&quot;MathJax-Span-213&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-214&quot; class=&quot;mi&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，其中 &lt;span id=&quot;MathJax-Element-35-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-215&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-216&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-217&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-218&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-219&quot; class=&quot;mi&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;len 表示句子切分为Token List后的长度(Token可以是词/字)，&lt;span id=&quot;MathJax-Element-36-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;D&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-220&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-221&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-222&quot; class=&quot;mi&quot;&gt;D&lt;span id=&quot;MathJax-Span-223&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-224&quot; class=&quot;mi&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 表示Token的Embedding表示的维度。由此有 &lt;span id=&quot;MathJax-Element-37-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-225&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-226&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-227&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-228&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-229&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-230&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-231&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-232&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-233&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-234&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;表示矩阵的第 &lt;span id=&quot;MathJax-Element-38-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-235&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-236&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-237&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 行，即输入中的第 &lt;span id=&quot;MathJax-Element-39-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-238&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-239&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-240&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 个Token的Embedding表示；&lt;span id=&quot;MathJax-Element-40-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;:&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-241&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-242&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-243&quot; class=&quot;mi&quot;&gt;S&lt;span id=&quot;MathJax-Span-244&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-245&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-246&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-247&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-248&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-249&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-250&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-251&quot; class=&quot;mo&quot;&gt;:&lt;span id=&quot;MathJax-Span-252&quot; class=&quot;mi&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 表示矩阵中的第 &lt;span id=&quot;MathJax-Element-41-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-253&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-254&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-255&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;到第 &lt;span id=&quot;MathJax-Element-42-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-256&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-257&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-258&quot; class=&quot;mi&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 行的一个切片，也是一个子矩阵；&lt;span id=&quot;MathJax-Element-43-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;[&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;]&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-259&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-260&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-261&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;Senti[k] 表示矩阵的第 &lt;span id=&quot;MathJax-Element-44-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-274&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-275&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-276&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 行第 &lt;span id=&quot;MathJax-Element-45-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-277&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-278&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-279&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;k 列的值，对应是Embedding的第 &lt;span id=&quot;MathJax-Element-46-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-280&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-281&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-282&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 个值；而 &lt;span id=&quot;MathJax-Element-47-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;S&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;:&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;[&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;]&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-283&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-284&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-285&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;Senti:j[k] 则是矩阵中第 &lt;span id=&quot;MathJax-Element-48-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-300&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-301&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-302&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 行到第 &lt;span id=&quot;MathJax-Element-49-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-303&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-304&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-305&quot; class=&quot;mi&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 行中的第 &lt;span id=&quot;MathJax-Element-50-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-306&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-307&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-308&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 列的一个切片。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;卷积层有两种卷积的方式：(1)粒度为word的卷积;(2)粒度为embedding 维度上的卷积。如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://i.imgur.com/26LDDfD.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://i.imgur.com/26LDDfD.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，第一种卷积方式与之前的Kim Y提出模型中的相同，相当于是&lt;em&gt;n-gram&lt;/em&gt;特征的抽取；而对于第二种卷积方式，论文作者给出的解释是，(1)这种方式有助于充分地提取出输入的特征信息；(2)由于粒度更小，所以在学习过程中的参数调整上，每一个维度能够得到不同程度的参数调整。（第二种卷积方式从直观上没有太多的物理意义，而作者也是直说不能够给出符合人直观想法上的解释）。&lt;/p&gt;
&lt;p&gt;模型除了使用传统的&lt;code&gt;max-pooling&lt;/code&gt;，还使用了&lt;code&gt;min-pooling&lt;/code&gt;和&lt;code&gt;mean-pooling&lt;/code&gt;方式。&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax has-jax has-jax has-jax&quot;&gt;假设 &lt;span id=&quot;MathJax-Element-51-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-309&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-310&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-311&quot; class=&quot;mi&quot;&gt;g&lt;span id=&quot;MathJax-Span-312&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-313&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-314&quot; class=&quot;mi&quot;&gt;u&lt;span id=&quot;MathJax-Span-315&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-316&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-317&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-318&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-319&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-320&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-321&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-322&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-323&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-324&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-325&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-326&quot; class=&quot;mi&quot;&gt;g&lt;span id=&quot;MathJax-Span-327&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-328&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-329&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-330&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-331&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-332&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 表示卷积宽度为 &lt;span id=&quot;MathJax-Element-52-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-333&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-334&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-335&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-336&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，使用 &lt;span id=&quot;MathJax-Element-53-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-337&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-338&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-339&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-340&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-341&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-342&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-343&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-344&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-345&quot; class=&quot;mi&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 池化函数，应用在输入的句子 &lt;span id=&quot;MathJax-Element-54-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-346&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-347&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-348&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-349&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-350&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-351&quot; class=&quot;mi&quot;&gt;t &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;上。我们使用了两种类型的&lt;strong&gt;&lt;code&gt;building block&lt;/code&gt;&lt;/strong&gt;，分别是 &lt;span id=&quot;MathJax-Element-55-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-352&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-353&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-354&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-355&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-356&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-357&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-358&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-359&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-360&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-361&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-362&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 和 &lt;span id=&quot;MathJax-Element-56-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-363&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-364&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-365&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-366&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-367&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-368&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-369&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-370&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-371&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-372&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-373&quot; class=&quot;mi&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;上，定义如下&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;MathJax-Element-57-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mo fence=&amp;quot;false&amp;quot; stretchy=&amp;quot;false&amp;quot;&amp;gt;{&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;:&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2208;&amp;lt;/mo&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mo fence=&amp;quot;false&amp;quot; stretchy=&amp;quot;false&amp;quot;&amp;gt;}&amp;lt;/mo&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-374&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-375&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-376&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-377&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-378&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-379&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-380&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-381&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-382&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-383&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-384&quot; class=&quot;mi&quot;&gt;A&lt;span id=&quot;MathJax-Span-385&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-386&quot; class=&quot;mo&quot;&gt;{&lt;span id=&quot;MathJax-Span-387&quot; class=&quot;mi&quot;&gt;g&lt;span id=&quot;MathJax-Span-388&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-389&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-390&quot; class=&quot;mi&quot;&gt;u&lt;span id=&quot;MathJax-Span-391&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-392&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-393&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-394&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-395&quot; class=&quot;mi&quot;&gt;A&lt;span id=&quot;MathJax-Span-396&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-397&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-398&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-399&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-400&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-401&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-402&quot; class=&quot;mi&quot;&gt;a&lt;span id=&quot;MathJax-Span-403&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-404&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-405&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-406&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-407&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-408&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-409&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-410&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-411&quot; class=&quot;mo&quot;&gt;:&lt;span id=&quot;MathJax-Span-412&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-413&quot; class=&quot;mo&quot;&gt;∈&lt;span id=&quot;MathJax-Span-414&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-415&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-416&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-417&quot; class=&quot;mi&quot;&gt;a&lt;span id=&quot;MathJax-Span-418&quot; class=&quot;mi&quot;&gt;x&lt;span id=&quot;MathJax-Span-419&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-420&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-421&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-422&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-423&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-424&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-425&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-426&quot; class=&quot;mi&quot;&gt;a&lt;span id=&quot;MathJax-Span-427&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-428&quot; class=&quot;mo&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML MJX_Assistive_MathML_Block&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot; has-jax has-jax&quot;&gt;这里 &lt;span id=&quot;MathJax-Element-58-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-429&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-430&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-431&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-432&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-433&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-434&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-435&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-436&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-437&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-438&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-439&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 有三组卷积层，卷积窗口的宽度一致(都是 &lt;span id=&quot;MathJax-Element-59-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-440&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-441&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-442&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-443&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-444&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-445&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-446&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-447&quot; class=&quot;mi&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; )，每一组对应一种池化操作。这里池化操作和卷积层是一一对应的，也就是说并不是一个卷积层上实施三种池化操作(虽然也可以这么做，作者没有这么做的原因是由于激活函数的存在，对每个卷积结果都进行&lt;code&gt;max-pooling&lt;/code&gt;和&lt;code&gt;min-pooling&lt;/code&gt;是没有必要的)。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt;而 &lt;span id=&quot;MathJax-Element-60-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-448&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-449&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-450&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-451&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-452&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-453&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-454&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-455&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-456&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-457&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-458&quot; class=&quot;mi&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 的定义如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;MathJax-Element-61-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mo fence=&amp;quot;false&amp;quot; stretchy=&amp;quot;false&amp;quot;&amp;gt;{&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;:&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2208;&amp;lt;/mo&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mo fence=&amp;quot;false&amp;quot; stretchy=&amp;quot;false&amp;quot;&amp;gt;}&amp;lt;/mo&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-459&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-460&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-461&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-462&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-463&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-464&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-465&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-466&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-467&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-468&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-469&quot; class=&quot;mi&quot;&gt;B&lt;span id=&quot;MathJax-Span-470&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-471&quot; class=&quot;mo&quot;&gt;{&lt;span id=&quot;MathJax-Span-472&quot; class=&quot;mi&quot;&gt;g&lt;span id=&quot;MathJax-Span-473&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-474&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-475&quot; class=&quot;mi&quot;&gt;u&lt;span id=&quot;MathJax-Span-476&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-477&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-478&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-479&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-480&quot; class=&quot;mi&quot;&gt;B&lt;span id=&quot;MathJax-Span-481&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-482&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-483&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-484&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-485&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-486&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-487&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-488&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-489&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-490&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-491&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-492&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-493&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-494&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-495&quot; class=&quot;mo&quot;&gt;)&lt;span id=&quot;MathJax-Span-496&quot; class=&quot;mo&quot;&gt;:&lt;span id=&quot;MathJax-Span-497&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-498&quot; class=&quot;mo&quot;&gt;∈&lt;span id=&quot;MathJax-Span-499&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-500&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-501&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-502&quot; class=&quot;mi&quot;&gt;a&lt;span id=&quot;MathJax-Span-503&quot; class=&quot;mi&quot;&gt;x&lt;span id=&quot;MathJax-Span-504&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-505&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-506&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-507&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-508&quot; class=&quot;mo&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML MJX_Assistive_MathML_Block&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot; has-jax has-jax has-jax has-jax&quot;&gt;这里 &lt;span id=&quot;MathJax-Element-62-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-509&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-510&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-511&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-512&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-513&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-514&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-515&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-516&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-517&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-518&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-519&quot; class=&quot;mi&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 有两组卷积层，卷积窗口的宽度为 &lt;span id=&quot;MathJax-Element-63-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-520&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-521&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-522&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-523&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-524&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-525&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-526&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-527&quot; class=&quot;mi&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，两组分别对应&lt;code&gt;max-pooling&lt;/code&gt;和&lt;code&gt;min-pooling&lt;/code&gt;的操作。值得说明的是，&lt;span id=&quot;MathJax-Element-64-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;g&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2217;&amp;lt;/mo&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-528&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-529&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-530&quot; class=&quot;mi&quot;&gt;g&lt;span id=&quot;MathJax-Span-531&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-532&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-533&quot; class=&quot;mi&quot;&gt;u&lt;span id=&quot;MathJax-Span-534&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-535&quot; class=&quot;mi&quot;&gt;p&lt;span id=&quot;MathJax-Span-536&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-537&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-538&quot; class=&quot;mi&quot;&gt;B&lt;span id=&quot;MathJax-Span-539&quot; class=&quot;mo&quot;&gt;(&lt;span id=&quot;MathJax-Span-540&quot; class=&quot;mo&quot;&gt;∗&lt;span id=&quot;MathJax-Span-541&quot; class=&quot;mo&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 中的卷积层对应有 &lt;span id=&quot;MathJax-Element-65-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;D&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-542&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-543&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-544&quot; class=&quot;mi&quot;&gt;D&lt;span id=&quot;MathJax-Span-545&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-546&quot; class=&quot;mi&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 个以&lt;code&gt;embedding dimension&lt;/code&gt;为粒度的卷积窗口，也就是对&lt;code&gt;embedding&lt;/code&gt;的每一维度做卷积运算。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里只所以要组合这些多样的卷积和池化操作，原因是希望能够从多个方面来提取出输入中的特征信息，以供后续的决策任务。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;多种窗口尺寸&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;与传统的&lt;em&gt;n-gram&lt;/em&gt;模型相似，这里在&lt;strong&gt;&lt;code&gt;building block&lt;/code&gt;&lt;/strong&gt;中使用了多种尺寸的卷积窗口。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/kRijNVc.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/kRijNVc.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;其中 &lt;span id=&quot;MathJax-Element-66-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-547&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-548&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-549&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-550&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws 表示卷积时卷积的&lt;em&gt;n-gram&lt;/em&gt;长度，而 &lt;span id=&quot;MathJax-Element-67-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x221E;&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-551&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-552&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-553&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-554&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-555&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-556&quot; class=&quot;mi&quot;&gt;∞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws=∞ 表示卷积窗口为整个&lt;code&gt;word embedding&lt;/code&gt;矩阵。&lt;span id=&quot;MathJax-Element-68-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-557&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-558&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-559&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-560&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws 的值及&lt;code&gt;Feature Map&lt;/code&gt; 的数量都是需要调参的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;相似度计算模型&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面介绍在得到句子的表征向量之后，如何计算它们的相似度。直观的想法是，我们可以使用传统的相似度计算方法如余弦相似度等来计算两个句子向量的相似度。但是，&lt;strong&gt;直接应用这种做法在两个句子向量上并不是最优的&lt;/strong&gt;，原因在于最后生成的句子向量中的每一个部分的意义各不相同，这样简单粗暴的计算势必会影响效果，所以做法是&lt;strong&gt;对句子向量中的各个部分进行相应的比较和计算(Structured Comparision)&lt;/strong&gt;。为了使得句子向量中的局部间的比较和计算更加有效，我们需要考虑如下方面：&lt;/p&gt;
&lt;p&gt;(1) 是否来自相同的&lt;code&gt;building block&lt;/code&gt;；&lt;br/&gt;(2) 是否来自相同卷积窗口大小下的卷积结果；&lt;br/&gt;(3) 是否来自相同的&lt;code&gt;pooling层&lt;/code&gt;；&lt;br/&gt;(4) 是否来自相同的&lt;code&gt;Feature Map&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;最终比较句子中的相应部分时，需要至少满足以上两个条件。为了识别句子中的哪些对应部分需要参与到相似度计算，文中提供了两种算法。&lt;/p&gt;
&lt;p&gt;2.1. &lt;strong&gt;相似度计算单元(Unit)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两种相似度计算单元如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/wttqwKe.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/wttqwKe.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.2. &lt;strong&gt;基于句子局部的相似度计算&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax has-jax has-jax&quot;&gt;算法1和算法2为句子表征向量的两种计算方法，其中算法1仅用在 &lt;span id=&quot;MathJax-Element-69-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-561&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-562&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-563&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-564&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-565&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-566&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-567&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-568&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-569&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-570&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-571&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;blockA 上；而算法2则都用在 &lt;span id=&quot;MathJax-Element-70-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-572&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-573&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-574&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-575&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-576&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-577&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-578&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-579&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-580&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-581&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-582&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;blockA 和 &lt;span id=&quot;MathJax-Element-71-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-583&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-584&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-585&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-586&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-587&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-588&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-589&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-590&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-591&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-592&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-593&quot; class=&quot;mi&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;blockB 上，两种算法都是针对相同类型(pooling和block类型)的输出做局部比较。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;给出如下的符号假设：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/0Oxsp9O.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/0Oxsp9O.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;算法的伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/pkDPaky.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/pkDPaky.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt;下面的图示说明了在 &lt;span id=&quot;MathJax-Element-72-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-594&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-595&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-596&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-597&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-598&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-599&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-600&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-601&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-602&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-603&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-604&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 上，两种算法的计算方式的区别，算法一表现了向量在水平方向上的比较；而算法二则是在垂直方向。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/f4qrseS.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/f4qrseS.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，在算法二中相同类型的pooling的输出groups中，向量是两两进行比较的（图中的红色虚线只是为了说明比较的方向，并不是只针对group中相同大小的卷积窗口作比较）；而算法一中的每一行都要作比较，不仅仅是第一行。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;模型的其他细节&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;相似度向量输出 + 全连接层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于句子局部的相似度计算之后，得到相应的相似度向量；然后这组向量之后连接一个全连接层，最后softmax对应输出。如果是计算相似度度量值，可以用softmax输出的类别概率值。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;激活函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用&lt;code&gt;tanh&lt;/code&gt;函数作为激活函数。&lt;/p&gt;
&lt;h4 id=&quot;实验部分-3&quot;&gt;实验部分&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;实验数据集&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;用于评测同义句检测 (Paraphrase Identification) 任务的经典数据集，数据集来源于新闻；包含5801对句子对，其中4076对用于模型训练，而1725对用于测试；每一对句子拥有一个标签，0或者1,0表示两个句子不是互为同义句，而1则表示两个句子互为同义句。因此这是一个二分类的任务。&lt;/p&gt;
&lt;p&gt;数据来源于2014年SemEval比赛，数据集有9927对句子对，其中4500对用于模型训练，500对用于模型验证，而剩下的4927对用于模型测试。这些句子都是在图片和视频描述中抽取得到的，每一对句子对有一个相关分数，区间在[1, 5]，分数越高表示句子越相关。&lt;/p&gt;
&lt;p&gt;数据集来源于2012年的SemEval比赛，包含1500对短文本（用于描述视频信息）。其中一般用于模型训练，一半用于模型测试，每一对句子有一个相关性分数，区间在[0, 5]，分数越高表示句子越相关。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;模型训练&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;针对MSRP和其他两个数据集，分别使用两种损失函数。对于MSRP数据集，损失函数（Hinge Loss）如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/jjQu3pY.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/jjQu3pY.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于其余两个数据集，损失函数（KL-divergence Loss）如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/kfVigMW.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/kfVigMW.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;实验参数设置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li class=&quot; has-jax has-jax&quot;&gt;&lt;strong class=&quot; has-jax&quot;&gt;&lt;span id=&quot;MathJax-Element-73-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-605&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-606&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-607&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-608&quot; class=&quot;mi&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws 的值&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;：&lt;span id=&quot;MathJax-Element-74-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2208;&amp;lt;/mo&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;[&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;]&amp;lt;/mo&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-609&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-610&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-611&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-612&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-613&quot; class=&quot;mo&quot;&gt;∈&lt;span id=&quot;MathJax-Span-614&quot; class=&quot;mo&quot;&gt;[&lt;span id=&quot;MathJax-Span-615&quot; class=&quot;mn&quot;&gt;1&lt;span id=&quot;MathJax-Span-616&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-617&quot; class=&quot;mn&quot;&gt;3&lt;span id=&quot;MathJax-Span-618&quot; class=&quot;mo&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws∈[1,3]和 &lt;span id=&quot;MathJax-Element-75-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mi mathvariant=&amp;quot;normal&amp;quot;&amp;gt;&amp;amp;#x221E;&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-619&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-620&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-621&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-622&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-623&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-624&quot; class=&quot;mi&quot;&gt;∞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;ws=∞.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word Embedding&lt;/strong&gt;: 300维的&lt;code&gt;GloVe word embedding&lt;/code&gt;；对于MSRP数据集，还额外使用了200维的&lt;code&gt;POS embedding&lt;/code&gt; (&lt;a href=&quot;http://nlp.stanford.edu/software/tagger.shtml&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Standford POS tagger&lt;/a&gt;)和25维的&lt;code&gt;Paragram Vectors&lt;/code&gt; (&lt;a href=&quot;http://ttic.uchicago.edu/~wieting/wieting2015TACL.pdf&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Wieting et al., 2015 PDF&lt;/a&gt;，&lt;a href=&quot;http://ttic.uchicago.edu/~wieting/paragram_vectors.txt&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;数据下载地址&lt;/a&gt;)。因此对于MSRP任务而言，&lt;code&gt;word embedding&lt;/code&gt;的维数为525维 (200+300+25)；而其余两个任务则对应是300维。&lt;/li&gt;
&lt;li&gt;在MSRP上使用了&lt;strong&gt;5-折交叉验证&lt;/strong&gt;的方式，对模型参数进行&lt;em&gt;tuning&lt;/em&gt;. &lt;em&gt;Tuning&lt;/em&gt;好的模型参数将会用在另外两个数据集任务上。&lt;/li&gt;
&lt;li&gt;只有在MSRP数据集任务上，允许模型参数进行更新。&lt;/li&gt;
&lt;li&gt;输出的全连接层，MSRP有250个神经元节点，而SICK和MSRVID则是150个。&lt;/li&gt;
&lt;li class=&quot; has-jax&quot;&gt;在 &lt;span id=&quot;MathJax-Element-76-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;A&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-625&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-626&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-627&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-628&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-629&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-630&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-631&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-632&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-633&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-634&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-635&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;blockA 中，&lt;code&gt;Feature Map&lt;/code&gt; 的数量与输入的&lt;code&gt;embedding&lt;/code&gt;维数相同，即MSRP是525个，而SICK和MSRVID则是300个。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;优化算法使用随机梯度下降方法。&lt;/li&gt;
&lt;li class=&quot; has-jax&quot;&gt;学习率为0.01，而正则化参数 &lt;span id=&quot;MathJax-Element-77-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03BB;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mn&amp;gt;10&amp;lt;/mn&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;4&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-636&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-637&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-638&quot; class=&quot;mi&quot;&gt;λ&lt;span id=&quot;MathJax-Span-639&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-640&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-641&quot; class=&quot;mn&quot;&gt;10&lt;span id=&quot;MathJax-Span-642&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-643&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-644&quot; class=&quot;mo&quot;&gt;−&lt;span id=&quot;MathJax-Span-645&quot; class=&quot;mn&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;λ=10−4.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;实验结果&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;MSRP数据集&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/CLF0SKJ.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/CLF0SKJ.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看出，文中的模型是所有基于NN的方法中在MSRP数据集上性能最好的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SICK数据集&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/16bJWHS.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/16bJWHS.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;MSRVID数据集&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/s89LYEb.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/s89LYEb.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而模型在SICK和MSRVID数据集上的表现也很好。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;模型的敏感度分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面的表格说明了在不使用某种技术下，模型性能在实验数据集上的变化情况。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/pmTY9TY.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/pmTY9TY.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从中可以得出以下结论：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于MSRP数据集任务而言，增加&lt;strong&gt;&lt;code&gt;POS Embedding&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;Paragram Vector&lt;/code&gt;&lt;/strong&gt;效果显著；&lt;/li&gt;
&lt;li&gt;移除相似度计算层的影响显著，说明结构化的句子局部比较方法是有效且必要的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Horizontal&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;Vertical&lt;/code&gt;&lt;/strong&gt;算法均有一定的提升效果，而&lt;strong&gt;&lt;code&gt;Vertical&lt;/code&gt;&lt;/strong&gt;算法的提升程度更高；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;max-pooling&lt;/code&gt;&lt;/strong&gt;方式确实要比&lt;strong&gt;&lt;code&gt;min-pooling&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;mean-pooling&lt;/code&gt;&lt;/strong&gt;强太多。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;文中的模型包含两个部分：卷积-池化模型和相似度计算模型。实验部分已经验证了模型的有效性，在MSRP数据集上模型取得了仅次于state-of-art的结果，并且在基于NN的方法中是最好的。模型中的相似度计算层是有必要的，因为对卷积池化处理后的句子成分进行了针对性的比较，从直观上要比直接扔进全连接层更合理，而实验结果也表明了这一点。&lt;/p&gt;
&lt;p class=&quot; has-jax&quot;&gt;然而，个人觉得，文中的模型结构较为复杂，而且其中有很多trick的地方，比如为什么要对word embedding中的每一维度做卷积，&lt;span id=&quot;MathJax-Element-78-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;b&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;B&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-646&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-647&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-648&quot; class=&quot;mi&quot;&gt;b&lt;span id=&quot;MathJax-Span-649&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-650&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-651&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-652&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-653&quot; class=&quot;mi&quot;&gt;k&lt;span id=&quot;MathJax-Span-654&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-655&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-656&quot; class=&quot;mi&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;blockB 中的&lt;code&gt;pooling&lt;/code&gt;方式为什么只用了max和min，不用mean的方式等问题，而这些方式或许是作者自己做了大量实验后，从果到因而使用的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;Yin’s_Paper&quot;&gt;Yin’s Paper&lt;/h3&gt;
&lt;p&gt;Yin的这篇论文提出了一种叫&lt;code&gt;Bi-CNN-MI&lt;/code&gt;的架构，其中&lt;code&gt;Bi-CNN&lt;/code&gt;表示两个使用&lt;code&gt;Siamese&lt;/code&gt;框架的CNN模型；&lt;code&gt;MI&lt;/code&gt;表示多粒度的交互特征。&lt;code&gt;Bi-CNN-MI&lt;/code&gt;包含三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;句子分析模型 (CNN-SM)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分模型主要使用了上述Kal在2014年提出的模型，针对句子本身提取出四种粒度的特征表示：词、短&lt;em&gt;ngram&lt;/em&gt;、长&lt;em&gt;ngram&lt;/em&gt;和句子粒度。多种粒度的特征表示是非常必要的，一方面提高模型的性能，另一方面增强模型的鲁棒性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;句子交互计算模型 (CNN-IM)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分模型主要是基于2011年Socher提出的RAE模型，做了一些简化，即仅对同一种粒度下的提取特征做两两比较。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;LR或Softmax网络层以适配任务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;模型结构&quot;&gt;模型结构&lt;/h4&gt;
&lt;p&gt;论文提出的模型主要是基于Kal的模型及Socher的RAE模型的结合体，如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/Ubku2XR.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/Ubku2XR.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过模型图可以看出模型的主要思想：一方面利用Kal的模型进行多种粒度上的特征提取，另一方面采取RAE模型的思想，对提取出来的特征进行两两的相似度计算，计算完成的结果通过&lt;code&gt;dynamic pooling&lt;/code&gt;的方式进一步提取少量特征，然后各个层次的&lt;code&gt;pooling&lt;/code&gt;计算结果平摊为一组向量，通过全连接的方式与LR(或者softmax)层连接，从而适配同义句检测任务本身。&lt;/p&gt;
&lt;p&gt;这个模型具体的计算细节不再赘述了，感兴趣的读者可以直接去看论文。除了提出这种模型结构之外，论文还有一个亮点在于使用了一种类似于语言模型的&lt;code&gt;CNN-LM&lt;/code&gt;来对上述CNN部分的模型进行预训练，从而提前确定模型的参数。&lt;code&gt;CNN-LM&lt;/code&gt;的网络结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/zMyzscM.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/zMyzscM.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CNN-LM&lt;/code&gt;模型的训练预料使用了最终的实验数据集，即MSRP；另外，由于MSRP的数据规模较小，所以作者又增加了100,000个英文句子语料。&lt;code&gt;CNN-LM&lt;/code&gt;模型最终能够得到word embedding, 模型权值等参数。需要注意的是，这些参数并不是固定的，在之后的句子匹配任务中是会不断更新的。从后面的实验结果中可以看出，&lt;code&gt;CNN-LM&lt;/code&gt;的作用是显著的。&lt;/p&gt;
&lt;h4 id=&quot;实验结果&quot;&gt;实验结果&lt;/h4&gt;
&lt;p&gt;论文仅使用了一种数据集，即公认的PI (Paraphrase Identification)任务数据集，MSRP。实验结果如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox&quot; href=&quot;http://imgur.com/Y67eY0a.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;http://imgur.com/Y67eY0a.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看出，&lt;code&gt;CNN-LM&lt;/code&gt;的预训练效果显著，预训练后的模型性能很强（但是结果上比之前He提出的模型稍差一些）。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文结束，感谢欣赏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎转载，请注明本文的链接地址：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jeyzhang.com/cnn-apply-on-modelling-sentence.html&quot;&gt;http://www.jeyzhang.com/cnn-apply-on-modelling-sentence.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] R. Socher, E. H. Huang, and A. Y. Ng. Dynamic pooling and unfolding recursive autoencoders for paraphrase detection. In Advances in NIPS, 2011.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://arxiv.org/abs/1510.03820&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;A Sensitivity Analysis of (and Practitioners’ Guide to) Convolutional Neural Networks for Sentence Classification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Implementing a CNN for Text Classification in TensorFlow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yoonkim/CNN_sentence&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Kim Y’s Implement: Convolutional Neural Networks for Sentence Classification&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Feb 2018 09:30:00 +0000</pubDate>
<dc:creator>笨兔勿应</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bentuwuying/p/8480045.html</dc:identifier>
</item>
<item>
<title>mysql读写分离 - Curry_30</title>
<link>http://www.cnblogs.com/lishun1005/p/8472358.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lishun1005/p/8472358.html</guid>
<description>&lt;p&gt;好久没有写过博客了，趁着年假还有一天，把去年项目所运用的读写分离在这里概述一下及其注意点，以防以后项目再有使用到;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 开发环境:window,idea,maven,spring boot,mybatis,druid(淘宝数据库连接池)&lt;/p&gt;
&lt;p&gt;2 数据库服务器:linux,mysql master(192.168.203.135),mysql salve(192.168.203.139)&lt;/p&gt;
&lt;p&gt;3 读写分离之前必须先做好数据库的主从复制，关于主从复制不是该篇幅的主要叙述重点,关于主从复制读者可以自行google或者百度，教程基本都是一样，可行&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180226110416933-121156168.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意以下几点:&lt;br/&gt;a:做主从复制时，首先确定两台服务器的mysql没任何自定义库(否则只可以配置完后之前的东西没法同步,或者两个库都有完全相同的库应该也是可以同步)&lt;br/&gt;b:server_id必须配置不一样&lt;br/&gt;c:防火墙不能把mysql服务端口给拦截了(默认3306)&lt;br/&gt;d:确保两台mysql可以相互访问&lt;br/&gt;e:重置master,slave。Reset master;reset slave;开启关闭slave,start slave;stop slave;&lt;br/&gt;f:主DB server和从DB server数据库的版本一致&lt;/p&gt;
&lt;p&gt;4 读写分离方式：&lt;/p&gt;
&lt;p&gt;　　4-1 基于程序代码内部实现: 在代码中根据select 、insert进行路由分类，这类方法也是目前生产环境下应用最广泛的。优点是性能较好，因为程序在代码中实现，不需要增加额外的硬件开支，缺点是需要开发人员来实现，运维人员无从下手。&lt;/p&gt;
&lt;p&gt;　　4-2 基于中间代理层实现: 代理一般介于应用服务器和数据库服务器之间，代理数据库服务器接收到应用服务器的请求后根据判断后转发到，后端数据库，有以下代表性的程序。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;　本文基于两种方式的叙述:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于应用层代码实现方式(内容都是通过代码体现，必要的说明存在代码中)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 配置pom.xml,导入需要的jar包&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.lishun&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql_master_salve&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql_master_salve&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.5.10.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;druid&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.18&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.43&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;overwrite&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;overwrite&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2 配置application.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
server.port=9022
#mybatis配置*mapper.xml文件和实体别名
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.lishun.entity

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.password=123456
spring.datasource.username=root

#写节点
spring.datasource.master.url=jdbc:mysql://192.168.203.135:3306/worldmap
#两个个读节点(为了方便测试这里用的是同一个服务器数据库,生产环境应该不使用)
spring.datasource.salve1.url=jdbc:mysql://192.168.203.139:3306/worldmap
spring.datasource.salve2.url=jdbc:mysql://192.168.203.139:3306/worldmap

# druid 连接池 Setting
# 初始化大小，最小，最大
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM rscipc_sys_user
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.logSlowSql=true
#End
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3 启动类(注意：其他需要spring管理的bean(service,config等)必须放在该启动类的子包下，不然会扫描不到bean，导致注入失败)&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@SpringBootApplication
@MapperScan(&quot;com.lishun.mapper&quot;) //!!!!!! 注意:扫描所有mapper
public class MysqlMasterSalveApplication {
        public static void main(String[] args) {
                SpringApplication.run(MysqlMasterSalveApplication.class, args);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4 动态数据源  &lt;strong&gt;DynamicDataSource&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * @author lishun
 * @Description:动态数据源, 继承AbstractRoutingDataSource
 * @date 2017/8/9
 */
public class DynamicDataSource extends AbstractRoutingDataSource {
        public static final Logger log = LoggerFactory.getLogger(DynamicDataSource.class);

        /**
         * 默认数据源
         */
        public static final String DEFAULT_DS = &quot;read_ds&quot;;
        private static final ThreadLocal&amp;lt;String&amp;gt; contextHolder = new ThreadLocal&amp;lt;&amp;gt;();
        public static void setDB(String dbType) {// 设置数据源名
                log.info(&quot;切换到{}数据源&quot;, dbType);
                contextHolder.set(dbType);
        }

        public static void clearDB() {
                contextHolder.remove();
        }// 清除数据源名
        @Override
        protected Object determineCurrentLookupKey() {
                return contextHolder.get();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5 线程池配置数据源　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Configuration
public class DruidConfig {
        private Logger logger = LoggerFactory.getLogger(DruidConfig.class);

        @Value(&quot;${spring.datasource.master.url}&quot;)
        private String masterUrl;

        @Value(&quot;${spring.datasource.salve1.url}&quot;)
        private String salve1Url;

        @Value(&quot;${spring.datasource.salve2.url}&quot;)
        private String salve2Url;

        @Value(&quot;${spring.datasource.username}&quot;)
        private String username;

        @Value(&quot;${spring.datasource.password}&quot;)
        private String password;

        @Value(&quot;${spring.datasource.driver-class-name}&quot;)
        private String driverClassName;

        @Value(&quot;${spring.datasource.initialSize}&quot;)
        private int initialSize;

        @Value(&quot;${spring.datasource.minIdle}&quot;)
        private int minIdle;

        @Value(&quot;${spring.datasource.maxActive}&quot;)
        private int maxActive;

        @Value(&quot;${spring.datasource.maxWait}&quot;)
        private int maxWait;

        @Value(&quot;${spring.datasource.timeBetweenEvictionRunsMillis}&quot;)
        private int timeBetweenEvictionRunsMillis;

        @Value(&quot;${spring.datasource.minEvictableIdleTimeMillis}&quot;)
        private int minEvictableIdleTimeMillis;

        @Value(&quot;${spring.datasource.validationQuery}&quot;)
        private String validationQuery;

        @Value(&quot;${spring.datasource.testWhileIdle}&quot;)
        private boolean testWhileIdle;

        @Value(&quot;${spring.datasource.testOnBorrow}&quot;)
        private boolean testOnBorrow;

        @Value(&quot;${spring.datasource.testOnReturn}&quot;)
        private boolean testOnReturn;

        @Value(&quot;${spring.datasource.filters}&quot;)
        private String filters;

        @Value(&quot;${spring.datasource.logSlowSql}&quot;)
        private String logSlowSql;

        @Bean
        public ServletRegistrationBean druidServlet() {

                logger.info(&quot;init Druid Servlet Configuration &quot;);
                ServletRegistrationBean reg = new ServletRegistrationBean();
                reg.setServlet(new StatViewServlet());
                reg.addUrlMappings(&quot;/druid/*&quot;);
                reg.addInitParameter(&quot;loginUsername&quot;, username);
                reg.addInitParameter(&quot;loginPassword&quot;, password);
                reg.addInitParameter(&quot;logSlowSql&quot;, logSlowSql);
                return reg;
        }

        @Bean
        public FilterRegistrationBean filterRegistrationBean() {
                FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();
                filterRegistrationBean.setFilter(new WebStatFilter());
                filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);
                filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);
                filterRegistrationBean.addInitParameter(&quot;profileEnable&quot;, &quot;true&quot;);
                return filterRegistrationBean;
        }

        @Bean
        public DataSource druidDataSource() {
                DruidDataSource datasource = new DruidDataSource();
                datasource.setUrl(masterUrl);
                datasource.setUsername(username);
                datasource.setPassword(password);
                datasource.setDriverClassName(driverClassName);
                datasource.setInitialSize(initialSize);
                datasource.setMinIdle(minIdle);
                datasource.setMaxActive(maxActive);
                datasource.setMaxWait(maxWait);
                datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
                datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
                datasource.setValidationQuery(validationQuery);
                datasource.setTestWhileIdle(testWhileIdle);
                datasource.setTestOnBorrow(testOnBorrow);
                datasource.setTestOnReturn(testOnReturn);
                try {
                        datasource.setFilters(filters);
                } catch (SQLException e) {
                        logger.error(&quot;druid configuration initialization filter&quot;, e);
                }

                Map&amp;lt;Object, Object&amp;gt; dsMap = new HashMap();
                dsMap.put(&quot;read_ds_1&quot;, druidDataSource_read1());
                dsMap.put(&quot;read_ds_2&quot;, druidDataSource_read2());

                dsMap.put(&quot;write_ds&quot;, datasource);

                DynamicDataSource dynamicDataSource = new DynamicDataSource();
                dynamicDataSource.setTargetDataSources(dsMap);
                return dynamicDataSource;
        }

        public DataSource druidDataSource_read1() {
                DruidDataSource datasource = new DruidDataSource();
                datasource.setUrl(salve1Url);
                datasource.setUsername(username);
                datasource.setPassword(password);
                datasource.setDriverClassName(driverClassName);
                datasource.setInitialSize(initialSize);
                datasource.setMinIdle(minIdle);
                datasource.setMaxActive(maxActive);
                datasource.setMaxWait(maxWait);
                datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
                datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
                datasource.setValidationQuery(validationQuery);
                datasource.setTestWhileIdle(testWhileIdle);
                datasource.setTestOnBorrow(testOnBorrow);
                datasource.setTestOnReturn(testOnReturn);
                try {
                        datasource.setFilters(filters);
                } catch (SQLException e) {
                        logger.error(&quot;druid configuration initialization filter&quot;, e);
                }
                return datasource;
        }
        public DataSource druidDataSource_read2() {
                DruidDataSource datasource = new DruidDataSource();
                datasource.setUrl(salve2Url);
                datasource.setUsername(username);
                datasource.setPassword(password);
                datasource.setDriverClassName(driverClassName);
                datasource.setInitialSize(initialSize);
                datasource.setMinIdle(minIdle);
                datasource.setMaxActive(maxActive);
                datasource.setMaxWait(maxWait);
                datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
                datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
                datasource.setValidationQuery(validationQuery);
                datasource.setTestWhileIdle(testWhileIdle);
                datasource.setTestOnBorrow(testOnBorrow);
                datasource.setTestOnReturn(testOnReturn);
                try {
                        datasource.setFilters(filters);
                } catch (SQLException e) {
                        logger.error(&quot;druid configuration initialization filter&quot;, e);
                }
                return datasource;
        }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6 数据源注解：在service层通过数据源注解来指定数据源&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * @author lishun
 * @Description: 读数据源注解
 * @date 2017/8/9
 */
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ReadDataSource {
        String vlaue() default &quot;read_ds&quot;;
}

/**
 * @author lishun
 * @Description: 写数据源注解
 * @date 2017/8/9
 */
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface WriteDataSource {
        String value() default &quot;write_ds&quot;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7 service aop切面来切换数据源&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * @author lishun
 * @Description: TODO
 * @date 2017/8/9
 */
@Component
@Aspect
public class ServiceAspect implements PriorityOrdered {
        @Pointcut(&quot;execution(public * com.lishun.service.*.*(..))&quot;)
        public void dataSource(){};

        @Before(&quot;dataSource()&quot;)
        public void before(JoinPoint joinPoint){
                Class&amp;lt;?&amp;gt; className = joinPoint.getTarget().getClass();//获得当前访问的class
                String methodName = joinPoint.getSignature().getName();//获得访问的方法名
                Class[] argClass = ((MethodSignature)joinPoint.getSignature()).getParameterTypes();//得到方法的参数的类型
                String dataSource = DynamicDataSource.DEFAULT_DS;
                try {
                        Method method = className.getMethod(methodName, argClass);// 得到访问的方法对象
                        if (method.isAnnotationPresent(ReadDataSource.class)) {
                                ReadDataSource annotation = method.getAnnotation(ReadDataSource.class);
                                dataSource = annotation.vlaue();
                                int i = new Random().nextInt(2) + 1;    /* 简单的负载均衡 */

                                dataSource = dataSource + &quot;_&quot; + i;
                        }else if (method.isAnnotationPresent(WriteDataSource.class)){
                                WriteDataSource annotation = method.getAnnotation(WriteDataSource.class);
                                dataSource = annotation.value();
                        }
                } catch (Exception e) {
                        e.printStackTrace();
                }
                DynamicDataSource.setDB(dataSource);// 切换数据源
        }

        /* 基于方法名
        @Before(&quot;execution(public * com.lishun.service.*.find*(..)) || execution(public * com.lishun.service.*.query*(..))&quot;)
        public void read(JoinPoint joinPoint){
                DynamicDataSource.setDB(&quot;read_ds&quot;);// 切换数据源
        }
        @Before(&quot;execution(public * com.lishun.service.*.insert*(..)) || execution(public * com.lishun.service.*.add*(..))&quot;)
        public void write(JoinPoint joinPoint){
                DynamicDataSource.setDB(&quot;write_ds&quot;);// 切换数据源
        }
        */

        @After(&quot;dataSource()&quot;)
        public void after(JoinPoint joinPoint){
                DynamicDataSource.clearDB();// 切换数据源
        }

        @AfterThrowing(&quot;dataSource()&quot;)
        public void AfterThrowing(){
                System.out.println(&quot;AfterThrowing---------------&quot; );
        }

        @Override
        public int getOrder() {
                return 1;//数值越小该切面先被执行,先选择数据源（防止事务aop使用数据源出现空异常)
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8 测试 mapper的代码就不贴了，主要是service和controller&lt;/p&gt;
&lt;p&gt;　　service&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Service
@Transactional
public class WmIpInfoServiceImpl implements WmIpInfoService {
        @Autowired
        public WmIpInfoMapper wmIpInfoMapper;

        @Override
        @ReadDataSource
        public WmIpInfo findOneById(String id) {
                //wmIpInfoMapper.selectByPrimaryKey(id);
                return wmIpInfoMapper.selectByPrimaryKey(id);
        }

        @Override
        @WriteDataSource
        public int insert(WmIpInfo wmIpInfo) {
                int result = wmIpInfoMapper.insert(wmIpInfo);
                return result;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　contrlloer&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@RestController
public class IndexController {
        @Autowired
        public WmIpInfoService wmIpInfoService;
        @GetMapping(&quot;/index/{id}&quot;)
        public WmIpInfo index(@PathVariable(value = &quot;id&quot;) String id){
                WmIpInfo wmIpInfo = new WmIpInfo();
                wmIpInfo.setId(UUID.randomUUID().toString());
                wmIpInfoService.insert(wmIpInfo);
                wmIpInfoService.findOneById(id);
                return null;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行spring boot 在浏览器输入http://localhost:9022/index/123456&lt;/p&gt;
&lt;p&gt;　　查看日志&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180227171529034-1025797692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;基于中间件方式实现读写分离(mycat：主要是mycat安装使用及其注意事项)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3-1 下载 http://dl.mycat.io/&lt;br/&gt;3-2 解压,配置MYCAT_HOME;&lt;br/&gt;3-3 修改文件 vim conf/schema.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mycat:schema &lt;/span&gt;&lt;span&gt;xmlns:mycat&lt;/span&gt;&lt;span&gt;=&quot;http://io.mycat/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;schema &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;worldmap&quot;&lt;/span&gt;&lt;span&gt; checkSQLschema&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; sqlMaxLimit&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt; dataNode&lt;/span&gt;&lt;span&gt;=&quot;worldmap_node&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;schema&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataNode &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;worldmap_node&quot;&lt;/span&gt;&lt;span&gt; dataHost&lt;/span&gt;&lt;span&gt;=&quot;worldmap_host&quot;&lt;/span&gt;&lt;span&gt; database&lt;/span&gt;&lt;span&gt;=&quot;worldmap&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; database:数据库名称 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataHost &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;worldmap_host&quot;&lt;/span&gt;&lt;span&gt; maxCon&lt;/span&gt;&lt;span&gt;=&quot;1000&quot;&lt;/span&gt;&lt;span&gt; minCon&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; balance&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; writeType&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; dbType&lt;/span&gt;&lt;span&gt;=&quot;mysql&quot;&lt;/span&gt;&lt;span&gt; dbDriver&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt; switchType&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; slaveThreshold&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;select user()&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;writeHost &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;hostM1&quot;&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&quot;192.168.203.135:3306&quot;&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;读写分离模式，写库：192.168.203.135，读库192.168.203.139&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
　　　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;readHost &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;hostR1&quot;&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&quot;192.168.203.139:3306&quot;&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;writeHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;writeHost &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;hostM2&quot;&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&quot;192.168.203.135:3306&quot;&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;主从切换模式,当hostM1宕机，读写操作在hostM2服务器数据库执行&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mycat:schema&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置说明：&lt;br/&gt;　　name:属性唯一标识dataHost标签，供上层的标签使用。&lt;br/&gt;　　maxCon:最大连接数&lt;br/&gt;　　minCon:最先连接数&lt;br/&gt;　　balance&lt;br/&gt;　　　　1、balance=0 不开启读写分离机制，所有读操作都发送到当前可用的writehost了 .&lt;br/&gt;　　　　2、balance=1 全部的readhost与stand by writeHost 参与select语句的负载均衡。简单的说，双主双从模式(M1àS1,M2àS2，并且M1和M2互为主备)，正常情况下，M1，S1，S2都参与select语句的复杂均衡。&lt;br/&gt;　　　　3、balance=2 所有读操作都随机的在readhost和writehost上分发&lt;/p&gt;&lt;p&gt;　　writeType 负载均衡类型，目前的取值有3种：&lt;br/&gt;　　　　1、writeType=&quot;0″, 所有写操作发送到配置的第一个writeHost。&lt;br/&gt;　　　　2、writeType=&quot;1″，所有写操作都随机的发送到配置的writeHost。&lt;br/&gt;　　　　3、writeType=&quot;2″，不执行写操作。&lt;/p&gt;
&lt;p&gt;　　switchType&lt;br/&gt;　　　　1、switchType=-1 表示不自动切换&lt;br/&gt;　　　　2、switchType=1 默认值，自动切换&lt;br/&gt;　　　　3、switchType=2 基于MySQL 主从同步的状态决定是否切换&lt;/p&gt;&lt;p&gt;　　dbType:数据库类型 mysql,postgresql,mongodb、oracle、spark等。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;　　heartbeat:用于和后端数据库进行心跳检查的语句。例如,MYSQL可以使用select user()，Oracle可以使用select 1 from dual等。&lt;br/&gt;　　　　　　这个标签还有一个connectionInitSql属性，主要是当使用Oracla数据库时，需要执行的初始化SQL语句就这个放到这里面来。例如：altersession set nls_date_format='yyyy-mm-dd hh24:mi:ss'&lt;br/&gt;　　　　　　当switchType=2 主从切换的语句必须是：show slave status&lt;/p&gt;&lt;p&gt;　　writeHost、readHost:这两个标签都指定后端数据库的相关配置给mycat，用于实例化后端连接池。唯一不同的是，writeHost指定写实例、readHost指定读实例，&lt;br/&gt;　　　　　　　　　　　　在一个dataHost内可以定义多个writeHost和readHost。但是，如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。&lt;br/&gt;　　　　　　　　　　　　另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去。&lt;/p&gt;&lt;p&gt;3-4 修改文件 vim conf/server.xml&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mycat:server &lt;/span&gt;&lt;span&gt;xmlns:mycat&lt;/span&gt;&lt;span&gt;=&quot;http://io.mycat/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123456&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;schemas&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;worldmap&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;与schema.xml相对应&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;readOnly&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;readOnly是应用连接中间件逻辑库所具有的权限。true为只读，false为读写都有，默认为false。&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mycat:server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3-5 启动 mycat start&lt;br/&gt;查看启动日志：logs/wrapper.log;，正常启动成功后会有mycat.log日志，如果服务未启动成功不会有对应日志&lt;/p&gt;
&lt;p&gt;3-6:对于开发人员mycat相当于一个新的数据库服务端(默认端口8066)，开发人员增删改查不再是直接连接数据库，而是连接数据库中间件，中间件通过其自带的lua脚本进行sql判断，来路由到指定数据库(实质根据selet,insert,update,delete关键字)&lt;/p&gt;
&lt;p&gt;3-7:测试读写分离&lt;/p&gt;
&lt;p&gt;　　读数据路由到 192.168.203.139&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180227172019096-1889568552.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　写数据路由到192.168.203.135　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180227172040250-516919727.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　当主库宕机，读写操作都在192.168.203.139&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180227172057208-484784339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/590770/201802/590770-20180227172109899-1616693912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3-8:注意事项&lt;br/&gt;一般使用框架都会用到事务，如果都要到事务那么就都会访问主服务器，达不到分离的效果，因此配置事务的时候要注意区分，比如只对包含增删改的进行事务配置&lt;/p&gt;

</description>
<pubDate>Tue, 27 Feb 2018 09:08:00 +0000</pubDate>
<dc:creator>Curry_30</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lishun1005/p/8472358.html</dc:identifier>
</item>
</channel>
</rss>