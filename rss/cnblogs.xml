<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>北上或者南下之被摆了一道 - 别先生</title>
<link>http://www.cnblogs.com/biehongli/p/9159905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/biehongli/p/9159905.html</guid>
<description>&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;迷茫的毕业季，迷茫的六月，迷茫的青春与岁月。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　------2018年6月9日&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　      ------菜鸟题记&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; 1、2018年6月5号，2018年6月6号，记于2018-06-09 16:28:21，发布于未知yyyy年MM月dd日 hh时mm分ss秒。首先谈谈标题，郁闷的毕业季，充满了迷茫与未知，自2017年7月3日实习至2018年4月6日实习结束，返回学校参加毕业答辩，在校呆了2个月，于2018年6月6日北上（实习期间和基友说好毕业后去杭州找工作，）。返回学校后不知道是抽了什么筋，竟然答应和室友去深圳（室友大四去深圳培训了Java，培训结束回学校玩了，没有找工作，开始他说他毕业后去深圳，我说我也跟你去吧，自己玩笑说的，后来他当真了，然后我想着去深圳也行，然后就打算2018年6月6号去深圳，让他复习复习，他自己玩的全忘完了，好吧，啰嗦了一大堆，他6.4号回家，他妈说不让他去深圳了，顿时我懵逼了，准备了一个月，说好去深圳的，最后回到学校说晚几天再去，我感觉凉了，摆了我一道，也许几天后还会这样，我不能拖着啊，四年了，感觉以不靠谱收尾，挺凉的，反正一首凉凉送给自己吧。反正就感觉酒肉朋友还行，真正工作呀，正事啊，哎，还是算了，自己就联系了北京的朋友（我男神，基友去了杭州，我想去一线城市看看），然后2018年6月5号晚上去北京了，次日中午到达，感觉自己被摆了一道，心里很凉，因为这个时候，好多同学培训的都早出去找工作了，拿到了12，甚至更高（培训加包装，好吧，我一样不占），自己一无所有，想着自己农村出身，室友家里有房，留在南阳，这也不能怪他，哎，晚上一个人收拾完东西，直接走了，就这样我的大学草草收场，四年前匆匆报道，四年后匆匆离开。也许共事的时候还是找靠谱的朋友更加靠谱些吧。不提了，难受）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、2018年6月7号，以第一人称题记，希望给应届生那怕一点点帮助，北上的日子也不好过，第一次来北京，到了都中午了（2018年6月6号上午12点零四），然后坐地铁去了香山，倒了好几趟地铁。（&lt;span&gt;2018年6月5号决定来北京之后，先和男神谈好，至少自己有一个落脚的地方先，然后投简历，保证自己来了有面试，好吧，简历投的很尴尬，作为一个应届生，上年实习用的智联，还好3天找到了工作，今年智联投的，邀请我面试都是其他工作，有客服，有销售，也怪我没看，因为时间紧，智联海投了，之前投的深圳，约了不少面试的了，哎，最后到了北京全部都推辞了，然后智联投的不行，就用boss直聘投，说实话，找工作软件基本都用了，拉钩，猎聘，脉脉，58，前程无忧，哎，真感觉还是boss直聘好用点，不说这个了&lt;/span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、2018年6月8号，然后约了几家面试的（&lt;span&gt;后来才知道基本都是培训和外包，哎，应届生都真惨，不包装都受欺负啊，如果你可以，包装确实可以减少你不少麻烦，比如说培训机构基本不会约你去面试吧，去北京的前两天都是培训机构，浪费我时间，一直走，累死求了，还约我复试，我还都去了，还被洗脑了，然而我tm内心深处真想骂人，不过包装被发现了，我感觉挺尴尬的，&lt;span&gt;不过这个社会啊，哎&lt;/span&gt;&lt;/span&gt;）。反正第一次来北京，挺迷茫和慌张的，第一次来建议办个地铁卡，可以刷公交和地铁，然后把要面试的信息整理一下，标记好几号去那家，如果自己和公司说那天上下午，最好错开，然后面试后，时间充足，随机应变调整面试时间，避免一些尴尬，反正我6.7号上下午面了3家培训机构，培训机构名称就不提了，自己面试前百度一下，都能找到，反正第一天吧，总比没有面试强，自欺欺人一下呗，自己不去交钱咋都行，看看别人问的啥，自己啥不会，回去多看看呗，就是走路走的累得慌，拿好充电宝，来了直接买了一张无限流量卡，反正面试时间越长就是内耗呗。第二天去了两家培训机构的复试，自己也是脑残，初试就问问，期望薪资，自我介绍，然后说些没少用的，说前几个月只能给2-3K，这种基本都是培训机构，最后还是让你交一万多，复试跑了半天，尼玛更坑的时，上午那家，hr还是我老乡，真想说CNM，第一天说前3个月给2千，之后给7-8，然后想着没包装，应届生，还行吧，慢慢来吧，第二天去了直接说招够了，我早上去之前还问了下，说来吧，真想CNM。然后还好的是，有一家在北大的公司让去面试，进北大也是尴尬，必须有学生卡，尴尬，最后还是给HR打了电话，HR给门卫打了电话，第二天走小门，哎，好学校都是好，感觉，在这里佩服一下考上的学霸和学神。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、2018年6月9号，早上北京下雨了，从香山去北大那家公司复试，走小门，拿出面试邀请，登记下身份证就可以了，然后面试官问了一些比较开阔的问题，就是问题的解决办法，没有问知识点，这里不说了。偶然发现&lt;a href=&quot;https://www.cnblogs.com/wenhongyu/p/9156271.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wenhongyu/p/9156271.html&lt;/a&gt;。这篇博客也许回帮助你，我也是6.9号看博客园看到的，希望对你有帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、也许我面试上，我感觉有几点吧（&lt;span&gt;发表于未知时间，等真正上班了，再发表吧，万一没去上班多尴尬，工资不是很高，但是希望自己可以好好发展吧，反正吧，工资这东西，主要是和自己的童鞋啊，比较一下，然后年龄大了，买房买车，有时候，感觉如果没有这些顾虑，不再为结婚，住房忧愁，我给你干活都好好的，踏踏实实的，不知道共产主义是不是这样，是不是自己太理想了&lt;/span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一，我实习做的都是政府项目，所以说你做技术开发，一个领域方向，也很重要，如果来回跨领域搞，过几年估计你在哪个领域都知道，但是不精通。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二，大学专业软件工程云计算方向，期间学习大数据知识，不断提升自己，也许做到精通的时候做到知识面广阔对你有好处，不过今年也吃了这方面的亏，本来初心找大数据的，反正各种时间啊，被摆了一道，直接来北京了，也没啥准备，最后找了Java，简历上面也写了会大数据，之所以找Java，因为公司打电话，聊天直接问会不会Spark streaming做实时项目，我也是一脸懵逼啊，做过离线分析，又没培训，说实话，学大数据，培训一下，速成还是比较划算的，哎。反正我是挺坎坷的，最后直接找Java了，简历上写会大数据，也许也是加分点吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三，公司项目紧急，缺人，我要的工资也不高，反正各种因素吧，也许找工作公司也对眼吧。加油吧。这家公司也是做大数据分析的，不过招聘岗位写的Java开发。所以我相信，努力可能会有汇报的吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 6、罗里吧嗦一大堆，写的乱七八糟的，算是自己对青春的记忆吧，去年2017年，从实习做Java开发，&lt;a href=&quot;https://www.cnblogs.com/biehongli/p/5754555.html&quot; target=&quot;_blank&quot;&gt;Java学习路线&lt;/a&gt;，然后工作了，受同事刺激，然后开始学习大数据知识，&lt;a href=&quot;https://www.cnblogs.com/biehongli/p/6639631.html&quot; target=&quot;_blank&quot;&gt;大数据学习路线&lt;/a&gt;，买内存条，然后双休周六周日都学习&lt;span&gt;（&lt;span&gt;&lt;span&gt;有时候女朋友会埋怨，为啥不多陪陪她，本来都异地，自己还学习，实习的时候，周六周日都学习了，都是晚上十点打电话，阿姨都说以后早点打电话，希望最后给女票一个好的交代吧&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;，当然了，大三快结束，迷上了王者农药，之前从不玩游戏的我，到玩到半夜三点。哎，然后吃鸡火了，陪同事玩吃鸡，也许这是我实时大数据项目没有学完的原因吧，花花世界，自己也会迷失，至此，希望自己加油，努力（技术迭代更新，不但加强自己），也希望看到人共勉。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;入职已经小半个月了，对公司关系也熟悉了，公司业务也慢慢熟悉了。然而突然发现做政府类项目，好多话欲言又止，先不说了，也许过几年或者辞职了，再出来拉拉吧。今天女票生日，希望她开开心心度过每一天。也希望自己加油吧，骚年。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 01 Jul 2018 07:48:00 +0000</pubDate>
<dc:creator>别先生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/biehongli/p/9159905.html</dc:identifier>
</item>
<item>
<title>ASP.NET MVC 异常Exception拦截 - 沉淀的风</title>
<link>http://www.cnblogs.com/xyb0226/p/9250334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xyb0226/p/9250334.html</guid>
<description>&lt;p&gt;&lt;span&gt;由于客户端的环境不一致，有可能会造成我们预计不到的异常错误，所以在项目中，友好的异常信息提示，是非常重要的。&lt;span&gt;&lt;span&gt;在&lt;/span&gt;&lt;span&gt;asp.net mvc&lt;/span&gt;&lt;span&gt;中实现异常属性拦截也非常简单，只需要继承另一个类&lt;/span&gt;&lt;span&gt;(System.Web.Mvc.FilterAttribute)&lt;/span&gt;&lt;span&gt;和一个接口&lt;/span&gt;&lt;span&gt;(System.Web.Mvc.IExceptionFilter)&lt;/span&gt;&lt;span&gt;，实现接口里面&lt;/span&gt;&lt;span&gt;OnException&lt;/span&gt;&lt;span&gt;方法，或者直接继承&lt;/span&gt;&lt;span&gt;Mvc&lt;/span&gt; &lt;span&gt;提供的类&lt;/span&gt;&lt;span&gt;System.Web.Mvc.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;HandleErrorAttribute&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;继承&lt;/span&gt;&lt;span&gt;System.Web.Mvc.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;HandleErrorAttribute&lt;/span&gt;&lt;span&gt;，重写了&lt;/span&gt;&lt;span&gt;OnException&lt;/span&gt;&lt;span&gt;方法，主要实现逻辑代码如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HandlerErrorAttribute : HandleErrorAttribute&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 控制器方法中出现异常，会调用该方法捕获异常&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;param name=&quot;context&quot;&amp;gt;提供使用&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnException(ExceptionContext context)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        WriteLog(context);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;base&lt;/span&gt;.OnException(context);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        context.ExceptionHandled = &lt;span&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (context.Exception &lt;span&gt;is&lt;/span&gt; UserFriendlyException)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            context.HttpContext.Response.StatusCode = (&lt;span&gt;int&lt;/span&gt;)HttpStatusCode.OK;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            context.Result = &lt;span&gt;new&lt;/span&gt; ContentResult { Content = &lt;span&gt;new&lt;/span&gt; AjaxResult { type = ResultType.error, message = context.Exception.Message }.ToJson() };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (context.Exception &lt;span&gt;is&lt;/span&gt; NoAuthorizeException)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            context.HttpContext.Response.StatusCode = (&lt;span&gt;int&lt;/span&gt;)HttpStatusCode.Unauthorized;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; (!context.HttpContext.Request.IsAjaxRequest())&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;                context.HttpContext.Response.RedirectToRoute(&quot;&lt;span&gt;Default&lt;/span&gt;&quot;, &lt;span&gt;new&lt;/span&gt; { controller = &quot;&lt;span&gt;Error&lt;/span&gt;&quot;, action = &quot;&lt;span&gt;Error401&lt;/span&gt;&quot;, errorUrl = context.HttpContext.Request.RawUrl });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;                context.Result = &lt;span&gt;new&lt;/span&gt; ContentResult { Content = context.HttpContext.Request.RawUrl };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;             context.HttpContext.Response.StatusCode = (&lt;span&gt;int&lt;/span&gt;)HttpStatusCode.InternalServerError;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             ExceptionMessage error = &lt;span&gt;new&lt;/span&gt; ExceptionMessage(context.Exception);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             var s = error.ToJson();&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             &lt;span&gt;if&lt;/span&gt; (!context.HttpContext.Request.IsAjaxRequest())&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;                 context.HttpContext.Response.RedirectToRoute(&quot;&lt;span&gt;Default&lt;/span&gt;&quot;, &lt;span&gt;new&lt;/span&gt; { controller = &quot;&lt;span&gt;Error&lt;/span&gt;&quot;, action = &quot;&lt;span&gt;Error500&lt;/span&gt;&quot;, data = WebHelper.UrlEncode(s) });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;                 context.Result = &lt;span&gt;new&lt;/span&gt; ContentResult { Content = WebHelper.UrlEncode(s) };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;             }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 写入日志（log4net）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;param name=&quot;context&quot;&amp;gt;提供使用&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; WriteLog(ExceptionContext context)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (context.Exception &lt;span&gt;is&lt;/span&gt; NoAuthorizeException || context.Exception &lt;span&gt;is&lt;/span&gt; UserFriendlyException)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;//友好错误提示,未授权错误提示，记录警告日志&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            LogHelper.Warn(context.Exception.Message);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;//异常错误，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            LogHelper.Error(context.Exception);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;////TODO :写入错误日志到数据库&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;p&gt;&lt;span&gt;我们看到，context.Exception 分为3种：UserFriendlyException，NoAuthorizeException 或 Exception；UserFriendlyException 是指友好异常，前端友好提示错误信息。NoAuthorizeException 为401未授权异常，当页面未被授权访问时，返回该异常，并携带有未授权的路径地址。其他异常统一返回500错误，并携带异常信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MVC的404异常处理，有几种方式，我们采用了在Global.asax全局请求函数中处理, 请查看以下代码&lt;/span&gt;&lt;/p&gt;&lt;div id=&quot;&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;/// 异常错误信息&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;[Serializable]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ExceptionMessage&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; ExceptionMessage()&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 构造函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 默认显示异常页面&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;param name=&quot;ex&quot;&amp;gt;异常对象&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; ExceptionMessage(Exception ex)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        :&lt;span&gt;this&lt;/span&gt;(ex, &lt;span&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 构造函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;param name=&quot;ex&quot;&amp;gt;异常对象&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;param name=&quot;isShowException&quot;&amp;gt;是否显示异常页面&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; ExceptionMessage(Exception ex, &lt;span&gt;bool&lt;/span&gt; isShowException)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        MsgType = ex.GetType().Name;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Message = ex.InnerException != &lt;span&gt;null&lt;/span&gt; ? ex.InnerException.Message : ex.Message;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;        StackTrace = ex.StackTrace.Length &amp;gt; 300 ? ex.StackTrace.Substring(0, 300) : ex.StackTrace;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Source = ex.Source;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Time = DateTime.Now.ToString(&quot;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Assembly = ex.TargetSite.Module.Assembly.FullName;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Method = ex.TargetSite.Name;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        ShowException = isShowException;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        var request = HttpContext.Current.Request;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        IP = Net.Ip;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        UserAgent = request.UserAgent;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        Path = request.Path;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        HttpMethod = request.HttpMethod;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 消息类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MsgType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 消息内容&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 请求路径&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Path { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 程序集名称&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Assembly { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 异常参数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ActionArguments { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 请求类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; HttpMethod { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 异常堆栈&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; StackTrace { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 异常源&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Source { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 服务器IP 端口&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; IP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 客户端浏览器标识&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserAgent { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 是否显示异常界面&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; ShowException { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 异常发生时间&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Time { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 异常发生方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Method { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;p&gt;在异常拦截关键代码中，我们发现友好异常（&lt;span&gt;UserFriendlyException&lt;/span&gt;）其实是返回了一个结果对象AjaxResult，&lt;/p&gt;&lt;div id=&quot;&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 表示Ajax操作结果&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AjaxResult&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 获取 Ajax操作结果类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; ResultType type { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 获取 Ajax操作结果编码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; errorcode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 获取 消息内容&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 获取 返回数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; resultdata { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// 表示 ajax 操作结果类型的枚举&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; ResultType&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 消息结果类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        info = 0,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 成功结果类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        success = 1,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 警告结果类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        warning = 2,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// 异常结果类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        error = 3&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;p&gt;在异常拦截的关键代码中，我们有看到，如果是ajax请求时，是执行不同的逻辑，这是因为ajax的请求，不能直接通过MVC的路由跳转，在请求时必须返回结果内容&lt;/p&gt;&lt;p&gt;然后在前端ajax的方法中，统一处理返回的错误，以下是我们项目中用到的ajax封装，对异常错误，进行了统一处理。&lt;/p&gt;&lt;div id=&quot;&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;(&lt;span&gt;function&lt;/span&gt; ($) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &quot;&lt;span&gt;use strict&lt;/span&gt;&quot;;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    $.httpCode = {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        success: &quot;&lt;span&gt;1&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        fail: &quot;&lt;span&gt;3&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;// http 通信异常的时候调用此方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpErrorLog = &lt;span&gt;function&lt;/span&gt; (msg) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        console.log('=====&amp;gt;' + &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;().getTime() + '&amp;lt;=====');&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        console.log(msg);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;// ajax请求错误处理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpError = &lt;span&gt;function&lt;/span&gt; (xhr, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (xhr.&lt;span&gt;status&lt;/span&gt; == 401) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;location&lt;/span&gt;.href = &quot;&lt;span&gt;/Error/Error401?errorUrl=&lt;/span&gt;&quot; + xhr.responseText;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (xhr.&lt;span&gt;status&lt;/span&gt; == 404) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;location&lt;/span&gt;.href = &quot;&lt;span&gt;/Error/Error404?errorUrl=&lt;/span&gt;&quot; + xhr.responseText;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (xhr.&lt;span&gt;status&lt;/span&gt; == 500) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;location&lt;/span&gt;.href = &quot;&lt;span&gt;/Error/Error500?data=&lt;/span&gt;&quot; + xhr.responseText;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/* get请求方法（异步）:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;    * url地址, param参数, callback回调函数 beforeSend 请求之前回调函数, complete 请求完成之后回调函数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 考虑到get请求一般将参数与url拼接一起传递，所以将param参数放置最后&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 返回AjaxResult结果对象&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpAsyncGet = &lt;span&gt;function&lt;/span&gt; (url, callback, beforeSend, complete, param) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        $.ajax({&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            url: url,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            data: param,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            type: &quot;&lt;span&gt;GET&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            dataType: &quot;&lt;span&gt;json&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            async: &lt;span&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            cache: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            success: &lt;span&gt;function&lt;/span&gt; (data) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; ($.isFunction(callback)) callback(data);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            error: &lt;span&gt;function&lt;/span&gt; (XMLHttpRequest, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;                $.httpError(XMLHttpRequest, textStatus, errorThrown);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            beforeSend: &lt;span&gt;function&lt;/span&gt; () {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; (!!beforeSend) beforeSend();&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            complete: &lt;span&gt;function&lt;/span&gt; () {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; (!!complete) complete();&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/* get请求方法（同步）:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    * url地址,param参数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 返回实体数据对象&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpGet = &lt;span&gt;function&lt;/span&gt; (url, param) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;var&lt;/span&gt; res = {};&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        $.ajax({&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            url: url,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            data: param,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            type: &quot;&lt;span&gt;GET&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            dataType: &quot;&lt;span&gt;json&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            async: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            cache: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            success: &lt;span&gt;function&lt;/span&gt; (data) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                res = data;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            error: &lt;span&gt;function&lt;/span&gt; (XMLHttpRequest, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;                $.httpError(XMLHttpRequest, textStatus, errorThrown);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/* post请求方法（异步）:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;    * url地址, param参数, callback回调函数 beforeSend 请求之前回调函数, complete 请求完成之后回调函数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 返回AjaxResult结果对象&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpAsyncPost = &lt;span&gt;function&lt;/span&gt; (url, param, callback, beforeSend, complete) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        $.ajax({&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            url: url,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            data: param,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            type: &quot;&lt;span&gt;POST&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            dataType: &quot;&lt;span&gt;json&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            async: &lt;span&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            cache: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            success: &lt;span&gt;function&lt;/span&gt; (data) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; ($.isFunction(callback)) callback(data);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            error: &lt;span&gt;function&lt;/span&gt; (XMLHttpRequest, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;                $.httpError(XMLHttpRequest, textStatus, errorThrown);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            beforeSend: &lt;span&gt;function&lt;/span&gt; () {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; (!!beforeSend) beforeSend();&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            complete: &lt;span&gt;function&lt;/span&gt; () {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; (!!complete) complete();&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/* post请求方法（同步）:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * url地址,param参数, callback回调函数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 返回实体数据对象&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpPost = &lt;span&gt;function&lt;/span&gt; (url, param, callback) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        $.ajax({&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            url: url,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            data: param,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            type: &quot;&lt;span&gt;POST&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            dataType: &quot;&lt;span&gt;json&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            async: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            cache: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            success: &lt;span&gt;function&lt;/span&gt; (data) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; ($.isFunction(callback)) callback(data);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            error: &lt;span&gt;function&lt;/span&gt; (XMLHttpRequest, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;                $.httpError(XMLHttpRequest, textStatus, errorThrown);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;/* ajax异步封装:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;    * type 请求类型, url地址, param参数, callback回调函数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    * 返回实体数据对象&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;    $.httpAsync = &lt;span&gt;function&lt;/span&gt; (type, url, param, callback) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        $.ajax({&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            url: url,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            data: param,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            type: type,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            dataType: &quot;&lt;span&gt;json&lt;/span&gt;&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            async: &lt;span&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            cache: &lt;span&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            success: &lt;span&gt;function&lt;/span&gt; (data) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; ($.isFunction(callback)) callback(data);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;            error: &lt;span&gt;function&lt;/span&gt; (XMLHttpRequest, textStatus, errorThrown) {&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;                $.httpError(XMLHttpRequest, textStatus, errorThrown);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            },&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;})(jQuery);&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;p&gt;至此，我们发现其实MVC的异常处理，真的很简单，只需要在过滤器中全局注册之后，然后重写OnException的方法，实现逻辑即可。关键是在于项目中Ajax请求，需要用统一的封装方法。&lt;/p&gt;</description>
<pubDate>Sun, 01 Jul 2018 07:48:00 +0000</pubDate>
<dc:creator>沉淀的风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xyb0226/p/9250334.html</dc:identifier>
</item>
<item>
<title>.netcore 整合 log4net - KING_GUOKUN</title>
<link>http://www.cnblogs.com/guokun/p/9250055.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guokun/p/9250055.html</guid>
<description>
&lt;p&gt;1.背景&lt;/p&gt;
&lt;p&gt;　　前两天，曾经的一个同事咨询我，怎样将log4net以中间件的形式整合到core里边去。我不假思索的回答，这种问题应该有人做过吧，他说没有。于是，我去博客园搜了下，发现还真没有，全部都是传统.NET那一套，直接LogManager.GetLogger，于是趁着周末有时间，决定调研下这个问题。去巨硬官网快速浏览了下，扩展第三方日志的核心就在于两个接口：ILogger和ILoggerProvider。于是建好解决方案，刷刷刷实现这两个接口，实现差不多了查相关资料时，猛然发现，卧槽，已经有国外同仁实现过了，我尼玛的辛苦写半天，这下彻底垮了。。。&lt;/p&gt;
&lt;p&gt;2.切换四路&lt;/p&gt;
&lt;p&gt;　　本着偷懒、鄙视瞎造轮子/装逼的心态， 直接把解决方案切换到开源实现。实际上顺便看了下第三方实现源码，四路也是一致的，实现那两个接口。&lt;/p&gt;
&lt;p&gt;解决方案如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701141745660-1146763121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;包引用如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701141852041-639805518.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最上边的不多说，第二个别问我，第三个就是core整合log4net的主角。关于这个，得特别说明下，最新版本是2.2.1，但我并没有引用最新的，而是2.1.0，因为目前有些第三方包最新版本引用的原子包是最新的，而上边第二个鬼东东Microsoft.AspNetCore.App这个框架包底层的原子包却并不是，所以如果引用最新的第三方包，很可能会报某个原子包依赖版本不对的错误。解决方案有二：1、哪个包报错，你单独安装哪个原子包的最新版本；2、切换第三方包的版本到较次，找到能够兼容当前Microsoft.AspNetCore.App的实现。解决方案1的问题是，你更新了这个原子包，它的依赖包又出错，你更新了它的依赖的依赖，它的依赖的依赖的依赖又出错。。。所以，方便起见，我直接用了Microsoft.Extensions.Logging.Log4Net.AspNetCore的较低版本。&lt;/p&gt;
&lt;p&gt; log4net.config不再截图或上代码，跟以前的德行没啥两样。&lt;/p&gt;
&lt;p&gt;接下来，注册log4net：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701143055446-1092919561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图中，前两行的作用是过滤掉System和Microsoft开头的命名空间下的组件产生的警告级别一下的日志，实际上主要就是一些框架性日志。第三行便是注册log4net中间件。&lt;/p&gt;
&lt;p&gt;接下来新建控制器，注入日志实践下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701143501761-836505764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图两个红框，上边一个是构造器注入日志接口，下边是调用日志组件记录日志。&lt;/p&gt;
&lt;p&gt;好，接下来我们去看看系统产生的日志，先调用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701143725951-1669139584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;控制台窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701143635419-367720705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OK，日志已经输出成功，接下来，我们看关键性的输出到文件：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/481360/201807/481360-20180701143746885-2115576329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到没有，日志已经成功经由log4net输出到文件。&lt;/p&gt;

&lt;p&gt;3.总结&lt;/p&gt;
&lt;p&gt;　　感觉没什么好总结的，.net core提供的扩展已经很开放了，虽然log4net目前比较操蛋，但这对咱大部分.NET开发者来说应该都不是事儿。&lt;/p&gt;

</description>
<pubDate>Sun, 01 Jul 2018 06:42:00 +0000</pubDate>
<dc:creator>KING_GUOKUN</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guokun/p/9250055.html</dc:identifier>
</item>
<item>
<title>写博客的个人建议 - 阳光温暖</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9250045.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9250045.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;最近新公司的领导们很注重大家写博客。三番五次的再群里各种劝大家写博客，各种鸡汤各种喂，身为一个刚刚入职不久的渣渣程序猿。果断干了各种鸡汤，还要给大家再来一碗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;写博客利器&quot;&gt;写博客利器&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面列的是我写博客经常用到各种利器，仅供参考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用makedown&quot;&gt;使用makedown&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;你如果经常上github这个神奇的网站。你会看到README.md ，没错，就是 makedown写的&lt;/li&gt;
&lt;li&gt;大家可以问问身边的大牛们，哪个不用makedown?就连渣渣程序猿的我也在用。&lt;/li&gt;
&lt;li&gt;用它写博客，你会感受到一个字：爽！如果你还没有用过makedown，听我的，抓紧试一试。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;使用七牛云&quot;&gt;使用七牛云&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;使用makedown的问题来了，图片存在哪？毕竟我们写博客会粘贴各种各样的图片，这个问题大家不用担心，我现在使用七牛云进行存储图片，免费的大约10G存储，应该够你用的了吧。我用了很久，一直很稳定。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;使用processon&quot;&gt;使用ProcessOn&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;身为程序员的我们，写文章肯定用到流程图，思维导图，UML类图等各种图，ProcessOn满足你所有的需求。&lt;/li&gt;
&lt;li&gt;ProcessOn是一个在线作图工具的聚合平台，它可以在线画流程图、思维导图、UI原型图、UML、网络拓扑图、组织结构图等等&lt;/li&gt;
&lt;li&gt;还可以把作品分享给团队成员或好友，无论何时何地大家都可以对作品进行编辑、阅读和评论&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;使用md2all&quot;&gt;使用md2all&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;如果大家平时还维护这自己的个人公众号，肯定知道公众号里面代码格式的痛苦，没关系。开源的世界大牛们已经为我们找到解决方案。使用md2all ,可以直接将makedown转成适应所有格式的文章。&lt;/li&gt;
&lt;li&gt;我们公司的编辑器就没有makedown，你完全可以用这个转换下。&lt;/li&gt;
&lt;li&gt;同时还有一个我感觉不错的转换makedown的。程序员DD写的&lt;a href=&quot;http://blog.didispace.com/tools/online-markdown/&quot;&gt;点击访问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果大家还有什么写博客的利器，欢迎留言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;写博客遇到的问题&quot;&gt;写博客遇到的问题&lt;/h3&gt;
&lt;h4 id=&quot;感觉没什么好写的也不知道写什么&quot;&gt;感觉没什么好写的？也不知道写什么？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;这个问题我现实中的同事也说过，不知道写什么？我感觉你可以写下工作中遇到的问题，为什么会出现这个问题。怎么解决的。&lt;/li&gt;
&lt;li&gt;学习新知识也可以记录下。比如你学习了单例模式，你可以记录下。 当然你在写的时候，尽量让读者能够读懂，站在读者的角度去想这篇文章怎么写才能让读者更加明白。&lt;/li&gt;
&lt;li&gt;不要老觉着自己技术差，写出的东西太基础，没有价值，不要这种担心，技术渣渣的我都敢去写博客。你为什么不敢呢？比如java中的for循环，你如果写一篇博客把它介绍的很详细，让读者一读就明白了for循环的执行顺序。也是一篇好的博客。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;写两天博客就不写了&quot;&gt;写两天博客就不写了&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;写博客最怕写了两天，就不写了。一定要坚持下去。比如你可以定个 目标，一个月至少写一篇博客。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其他的问题也不啰嗦了，抓紧写起来！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 01 Jul 2018 06:37:00 +0000</pubDate>
<dc:creator>阳光温暖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9250045.html</dc:identifier>
</item>
<item>
<title>进程内部的同步 - Pilgrim</title>
<link>http://www.cnblogs.com/pilgrim/p/9249981.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pilgrim/p/9249981.html</guid>
<description>&lt;p&gt;　　在线程里，如果需要共享数据，那么一定需要使用同步技术，确保一次只有一个线程访问和改变共享数据的状态。在.net中，lock语句、Interlocked类和Monitor类可用于进程内部的同步。&lt;/p&gt;
&lt;h2&gt;1、lock语句与线程安全&lt;/h2&gt;
&lt;p&gt;　　lock语句是设置锁定和解除锁定的一种简单方式。在使用lock语句之前，先进入另一个争用条件。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SharedState
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Job
{
    SharedState sharedState;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Job(SharedState sharedState)
    {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sharedState =&lt;span&gt; sharedState;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoTheJob()
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;50000&lt;/span&gt;; i++&lt;span&gt;)
        {
                sharedState.State &lt;/span&gt;+= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
}
&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; numTasks = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; state = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SharedState();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tasks = &lt;span&gt;new&lt;/span&gt; Task[numTasks];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义20个任务&lt;/span&gt;

    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; numTasks; i++&lt;span&gt;)
    {
        tasks[i] &lt;/span&gt;= Task.Run(() =&amp;gt; &lt;span&gt;new&lt;/span&gt; Job(state).DoTheJob());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动20个任务，同时对数据进行修改&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; numTasks; i++&lt;span&gt;)
    {
        tasks[i].Wait();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待所有任务结束&lt;/span&gt;
&lt;span&gt;    }

    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summarized {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, state.State);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;预想应该输出：summarized 1000000&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　实际上的输出与预想输出并不一致，每次运行的输出结果都不同，但没有一个是正确的。如果将线程数量减少，那么得到正确值的次数会增多，但也不是每次都正确。&lt;/p&gt;
&lt;p&gt;　　使用lock关键字，可以实现多个线程访问同一个数据时的同步问题。lock语句表示等待指定对象的锁定，该对象只能时引用类型。进行锁定后——只锁定了一个线程，就运行lock语句块中的代码，在lock块最后接触锁定，以便另一个线程可以锁定该对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(obj)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行代码&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;锁定静态成员，可以所以其类型（object）&lt;/span&gt;
&lt;span&gt;lock&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StaticCalss))
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行代码&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　所以修改以上的代码，使用SyncRoot模式。但是，如果是对属性的访问进行锁定：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SharedState
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; syncRoot = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; state = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; State
    {
        &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;lock&lt;/span&gt; (syncRoot) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; state; }
        &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;lock&lt;/span&gt; (syncRoot) state =&lt;span&gt; value; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　仍会出现前面的争用情况。在方法调用get存储器，以获得state的当前值，然后set存储器给state设置新值。在调用对象的get和set存储器期间，对象并没有锁定，另一个线程仍然可以获得临时值。最好的方法是在不改变SharedState类的前提下，在调用方法中，将lock语句添加到合适的地方：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SharedState
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Job
{
    SharedState sharedState;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Job(SharedState sharedState)
    {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sharedState =&lt;span&gt; sharedState;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoTheJob()
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;50000&lt;/span&gt;; i++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (sharedState)
            {
                sharedState.State &lt;/span&gt;+= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;在一个地方使用lock语句并不意味着访问对象的其他线程都在等待。必须对每个访问共享数据的线程显示使用同步功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　为使对state的修改作为一个原子操作，修改代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SharedState
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; state = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; state; } }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; IncrementState()
    {
        &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ++&lt;span&gt;state;
        }
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;外部访问&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DoTheJob()
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;50000&lt;/span&gt;; i++&lt;span&gt;)
    {
         sharedState.IncrementState();        
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2、Interlocked类&lt;/h2&gt;
&lt;p&gt;　　Interlocked类用于使变量的简单语句原子化。i++并非线程安全的，它涉及三个步骤：取值、自增、存值。这些操作可能被线程调度器打断。Interlocked类提供了以线程安全的方式递增、递减、交换和读取值的方法。Interlocked类只能用于简单的同步问题，而且很快。因此，上面的IncrementState()方法的代码可以改为：return Interlocked.Increment(ref state);&lt;/p&gt;
&lt;h2&gt;3、Monitor类&lt;/h2&gt;
&lt;p&gt;　　lcok语句最终会有C#编译器解析为使用Monitor类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(obj)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行代码&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　简单的lock(obj)语句会被解析为调用Enter()方法，该方法会一直等待，直到线程锁定对象。一次只有一个线程能锁定对象，只要解除锁定，线程就可以进入同步阶段。Monitor类的Exit()方法解除锁定。编译器把Exit()方法放在try块的finally中，不论是否抛出异常，都将在语句块运行末尾解除锁定。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Monitor.Enter(obj);
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行代码&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
{
    Monitor.Exit(obj);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　相对于lock语句，Mpnitor类可以设置一个等待被锁定的&lt;strong&gt;超时值&lt;/strong&gt;。这样就不会无限期的等待锁定，如果等待锁定时间超过规定时间，则返回false，表示未被锁定，线程不再等待，执行其他操作。也许以后，该线程会再次尝试获得锁定：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bool&lt;/span&gt; lockTaken = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
Monitor.TryEnter(obj,&lt;/span&gt;&lt;span&gt;500&lt;/span&gt;, &lt;span&gt;ref&lt;/span&gt; lockTaken);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在500ms内，是否锁定了对象&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (lockTaken)
{
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行代码&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
    {
        Monitor.Exit(obj);
    }
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;未获得锁定，执行代码&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　如果基于对象的锁定对象（Monitor）的系统开销由于垃圾回收而过高，可以使用SpinLock结构。，SpinLock结构适用于：有大量的锁定，而且锁定时间总是非常短的情况。应避免使用多个SpinLock结构，也不要调用任何可能阻塞的内容。&lt;/p&gt;
</description>
<pubDate>Sun, 01 Jul 2018 06:36:00 +0000</pubDate>
<dc:creator>Pilgrim</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pilgrim/p/9249981.html</dc:identifier>
</item>
<item>
<title>自己做悬浮拖拽按钮依赖 - CMusketeer</title>
<link>http://www.cnblogs.com/cmusketeer/p/9249982.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmusketeer/p/9249982.html</guid>
<description>&lt;h4&gt;PS：悬浮拖拽按钮的使用也是非常广的，就比如说上一个网站的时候就会弹出一个对话框，对话框可以随意拖动，那么安卓手机上可以实现吗，答案是可以的，这就用到了自定义view的按压点击等事件，本文的例子比较简单是继承FloatingActionButton，这个控件本身就做的很好了，点击效果，按压出的投影等都是可以调节的，所以继承他就可以省去写很多细节代码。网上也是有很多博友写了有关的文章，讲了原理也是很清楚的，写的都很好，也有很多写的代码基本上差不多，再怎么变MotionEvent方法的DOWN、MOVE、UP等是不会变的，里面无非是写了一些不兼容的问题，当时我写这个的时候也是有一些问题，比如说，锤子手机就不能用，或者华为手机5.0以上的不行等，在网上看了一些博友的文章借鉴，在这里首先感谢博客这个平台可以分享技术，其次就是博友的技术思路分享。煽情的话就到这了，这里就稍微说一下制作思路：&lt;/h4&gt;
&lt;h3&gt;思路：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;继承FloatingActionButton&lt;/li&gt;
&lt;li&gt;onTouchEvent()的重写&lt;/li&gt;
&lt;li&gt;MotionEvent.ACTION_DOWN:&lt;/li&gt;
&lt;li&gt;MotionEvent.ACTION_MOVE:&lt;/li&gt;
&lt;li&gt;MotionEvent.ACTION_UP:&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;当手指按下的时候记住悬浮按钮屏幕所在位置作为起始位置，当滑动的时候再次获取所在位置并且判断所滑动的不能超过屏幕（不判断有时会导致一半按钮在外，一半在内的现象），当超过时，就让它等于屏幕的最小值或者最大值，至于UP就是动画了，当手指抬起后判断在屏幕的哪边，左边就把x=0；右边 x=屏幕最大值。下面有我整理完后，做了一个AS依赖库，直接就可以用，想搞明白这一块的知识可以去查查别的资料，也可以直接拿着用。&lt;/h4&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1258190/201807/1258190-20180701134240421-1015611465.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1：添加依赖&lt;/h2&gt;
&lt;p&gt;自己做了一个依赖：根目录build.gradle中&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    allprojects {
        repositories {
            ...
            maven { url 'https://jitpack.io' }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在build.gradle中添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    dependencies {
            implementation &lt;/span&gt;'com.github.hahage001:LZTmusketeer:v1.0.0'&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2：使用&lt;/h2&gt;
&lt;p&gt;添加依赖的地址和本文的有所不同。（mus.cn.suspendbutton.DragFloatActionButton）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &amp;lt;&lt;span&gt;mus.cn.suspendbutton.DragFloatActionButton
        android:layout_width&lt;/span&gt;=&quot;200px&quot;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&quot;200px&quot;&lt;span&gt;
        android:src&lt;/span&gt;=&quot;@mipmap/ic_launcher&quot;&lt;span&gt;
        app:backgroundTint&lt;/span&gt;=&quot;#253aac&quot;&lt;span&gt;
        app:rippleColor&lt;/span&gt;=&quot;#33728dff&quot;&lt;span&gt;
        app:elevation&lt;/span&gt;=&quot;6dp&quot;&lt;span&gt;
        app:pressedTranslationZ&lt;/span&gt;=&quot;12dp&quot;&lt;span&gt;
        android:clickable&lt;/span&gt;=&quot;true&quot;&lt;span&gt;
        android:focusable&lt;/span&gt;=&quot;true&quot;
    /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 01 Jul 2018 06:13:00 +0000</pubDate>
<dc:creator>CMusketeer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmusketeer/p/9249982.html</dc:identifier>
</item>
<item>
<title>Springboot 启动详解 - XuMinzhe</title>
<link>http://www.cnblogs.com/xmzJava/p/9247950.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xmzJava/p/9247950.html</guid>
<description>&lt;h3&gt;1.前言&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;　　最近一直在看Springboot和springcloud代码，看了将近20多天，对这两个系统的认知总算是入了门。后续应该会有一个系列的文章，本文就先从Springboot的启动入手.&lt;/p&gt;
&lt;h3&gt;2.容器初始化&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201806/1138295-20180630170707138-468993092.png&quot; alt=&quot;&quot; width=&quot;852&quot; height=&quot;113&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的代码是Springboot的入口，现在从run方法进去&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201806/1138295-20180630170919294-2050812298.png&quot; alt=&quot;&quot; width=&quot;838&quot; height=&quot;93&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击进来后到了这里就会分成两步&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;.生成一个SpringApplication对象
&lt;/span&gt;2.调用生成的对象的run方法
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【&lt;strong&gt;2.1&lt;/strong&gt;】我们先看SpringApplication的构造器是如何生成一个SpringApplication对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701102832125-1911160148.png&quot; alt=&quot;&quot; width=&quot;847&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.推断程序类型，推断规则在2.1.1&lt;/p&gt;
&lt;p&gt;2.查找ApplicationContextInitializer的实现类，ApplicationContextInitializer是Spring框架的接口，在ApplicationContext的初始化之前，需要逐一调用ApplicationContextInitializer的实现类的initialize方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201806/1138295-20180630172911895-1863353232.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;95&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.查找中ApplicationListener的实现类，Springboot大量的采用了事件监听机制，ApplicationListener负责将监听事件并广播出去。后续我们会详细讲解&lt;/p&gt;
&lt;h4&gt;【2.1.1】判断程序类型&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701102911198-196816860.png&quot; alt=&quot;&quot; width=&quot;654&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 至此SpringApplication构造初始化就完成了。&lt;/p&gt;

&lt;h3&gt;3.容器启动&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;调用生成的对象的run方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701103349697-1207853939.png&quot; alt=&quot;&quot; width=&quot;782&quot; height=&quot;583&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【3.1】记录时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Springboot内部记录流程节点花费时间的工具类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3.2】获取ApplicationRunListener&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701104250210-626332796.png&quot; alt=&quot;&quot; width=&quot;724&quot; height=&quot;97&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里通过SpringApplicationRunListeners 封装了多个SpringApplicationRunListener。在容器的启动过程中，springboot将这个过程分为了五步&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701104952215-1343709630.png&quot; alt=&quot;&quot; width=&quot;760&quot; height=&quot;182&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;started(run方法执行的时候立马执行；对应事件的类型是ApplicationStartedEvent)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;
environmentPrepared(ApplicationContext创建之前并且环境信息准备好的时候调用；对应事件的类型是ApplicationEnvironmentPreparedEvent)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;
contextPrepared(ApplicationContext创建好并且在source加载之前调用一次；没有具体的对应事件)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;
contextLoaded(ApplicationContext创建并加载之后并在refresh之前调用；对应事件的类型是ApplicationPreparedEvent)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;
finished(run方法结束之前调用；对应事件的类型是ApplicationReadyEvent或ApplicationFailedEvent)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;同时，SpringApplicationRunListener 只有一个实现类 EventPublishingRunListener，所以上述5个步骤的最终实现都会在 EventPublishingRunListener中。&lt;/p&gt;
&lt;p&gt;我们看看start方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701105955957-1482038814.png&quot; alt=&quot;&quot; width=&quot;722&quot; height=&quot;64&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的 ApplicationStartedEvent 继承 SpringApplicationEvent&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701110259925-884071079.png&quot; alt=&quot;&quot; width=&quot;836&quot; height=&quot;100&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再看publishEvent是如何把Event推送出去的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701110427277-169199260.png&quot; alt=&quot;&quot; width=&quot;752&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到这边，发现最后发送event的还是ApplicationListener&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701110950589-246277196.png&quot; alt=&quot;&quot; width=&quot;727&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里一整套的封装，就是为了这边发送事件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701113242164-144938618.png&quot; alt=&quot;&quot; width=&quot;628&quot; height=&quot;72&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【3.3】创建容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701125628294-1205662212.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;955&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3.3.1】创建Environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701125822852-246120501.png&quot; alt=&quot;&quot; width=&quot;651&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3.3.2】创建容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701130112325-1333265832.png&quot; alt=&quot;&quot; width=&quot;910&quot; height=&quot;240&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【3.3.3】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;找到所有ApplicationContextInitializer的实现类，调用他们的initialize方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【3.3.4】加载mainsource到容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【3.3.5】refresh，BeanFactory的设置，BeanFactoryPostProcessor接口的执行、BeanPostProcessor接口的执行、自动化配置类的解析、条件注解的解析、国际化的初始化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【3.4】容器创建之后&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701134133570-1302126226.png&quot; alt=&quot;&quot; width=&quot;638&quot; height=&quot;131&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;【3.4.1】Runer实现类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;调用ApplicationRunner和CommandLineRunner的实现类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701134253917-587217498.png&quot; alt=&quot;&quot; width=&quot;779&quot; height=&quot;253&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;4.Springboot启动的扩展&lt;/strong&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt; 上述讲了springboot的启动流程，那如果我们想在启动的时候自定义一些操作，可以考虑以下几种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4.1】对容器的操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现  ApplicationContextInitializer 接口，重写initialize方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701135448391-316845977.png&quot; alt=&quot;&quot; width=&quot;813&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，这个bean需要在META-INF/spring.factories中注册上才可以被扫描到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701135623273-296808230.png&quot; alt=&quot;&quot; width=&quot;819&quot; height=&quot;58&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4.2】监听5大事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现 ApplicationListener&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701135855145-1116419464.png&quot; alt=&quot;&quot; width=&quot;637&quot; height=&quot;157&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4.3】实现 ApplicationRunner 或者 CommandLineRunner&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138295/201807/1138295-20180701140242212-809011501.png&quot; alt=&quot;&quot; width=&quot;635&quot; height=&quot;206&quot;/&gt;&lt;/p&gt;

&lt;p&gt;以上，就是Springboot的启动流程，里面还有几处细节，后续会慢慢更新&lt;/p&gt;
</description>
<pubDate>Sun, 01 Jul 2018 06:07:00 +0000</pubDate>
<dc:creator>XuMinzhe</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xmzJava/p/9247950.html</dc:identifier>
</item>
<item>
<title>ZooKeeper+Dubbo+SpringBoot 微服务Demo搭建 - 以梦为码</title>
<link>http://www.cnblogs.com/volare/p/9248836.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/volare/p/9248836.html</guid>
<description>&lt;p&gt;　1、　首先创建springBoot项目，springBoot是一堆组件的集合，在pom文件中对需要的组件进行配置。生成如下目录结构&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/623878/201807/623878-20180701122211923-1776309946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;创建test项目，同步在test创建dubbo-api,dubbo-consume,dubbo-provider三个Model&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;dubbo-provider 为服务的提供者，服务的实现层&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　dubbo-api 为服务提供者dubbo-provider的接口层 （此处dubbo-provider,dubbo-api相当于一个微服务，dubbo-api为对外接口，由消费者dubbo-consume调用）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　dubbo-consume 为服务的消费者，消费由dubbo-api提供的服务&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、配置pom.xml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　test中的pom.xml是其他三个Module的父文件，所以公共的部分在test中配置即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　test 中 pom.xml部分配置&lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a0095e59-8d7b-4e44-8660-cb47165328bc')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_a0095e59-8d7b-4e44-8660-cb47165328bc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0095e59-8d7b-4e44-8660-cb47165328bc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a0095e59-8d7b-4e44-8660-cb47165328bc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0095e59-8d7b-4e44-8660-cb47165328bc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-consume&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.3.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;com.alibaba.dubbo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;com.alibaba.dubbo.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;org.apache.zookeeper.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.4.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;org.apache.zookeeper.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;com.github.sgroschupf.zkclient.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;com.github.sgroschupf.zkclient.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;dubbo-api中pom.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c1647c9c-e46d-4b2c-9853-d08a7b7bc789')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1647c9c-e46d-4b2c-9853-d08a7b7bc789&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1647c9c-e46d-4b2c-9853-d08a7b7bc789&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c1647c9c-e46d-4b2c-9853-d08a7b7bc789',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1647c9c-e46d-4b2c-9853-d08a7b7bc789&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　dubbo-provider中pom.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3c33ad4a-7e99-45e6-8bc3-d09fe8012102')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3c33ad4a-7e99-45e6-8bc3-d09fe8012102&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c33ad4a-7e99-45e6-8bc3-d09fe8012102&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3c33ad4a-7e99-45e6-8bc3-d09fe8012102',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c33ad4a-7e99-45e6-8bc3-d09fe8012102&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provider&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-provide&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; dubbo &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${com.alibaba.dubbo.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${org.apache.zookeeper.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.sgroschupf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${com.github.sgroschupf.zkclient.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　dubbo-consume中pom.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('edfd965c-6cc1-4755-b534-8c4f92e6115f')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_edfd965c-6cc1-4755-b534-8c4f92e6115f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_edfd965c-6cc1-4755-b534-8c4f92e6115f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('edfd965c-6cc1-4755-b534-8c4f92e6115f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_edfd965c-6cc1-4755-b534-8c4f92e6115f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-consume&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-consume&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; dubbo &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${com.alibaba.dubbo.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${org.apache.zookeeper.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.sgroschupf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${com.github.sgroschupf.zkclient.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;3、dubbo-api　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/623878/201807/623878-20180701124843245-1177647969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　定义接口IDubboDemoService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IDubboDemoService {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getString();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4、dubbo-provider&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/623878/201807/623878-20180701125038681-545341061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先创建启动类，和dubbo配置文件启动类，mainConfig项目启动类就不多说了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('73ab4815-942e-4c48-b523-c5ebb6dfd1ec')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_73ab4815-942e-4c48-b523-c5ebb6dfd1ec&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_73ab4815-942e-4c48-b523-c5ebb6dfd1ec&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('73ab4815-942e-4c48-b523-c5ebb6dfd1ec',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_73ab4815-942e-4c48-b523-c5ebb6dfd1ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@PropertySource(&lt;/span&gt;&quot;classpath:dubbo-provider.properties&quot;&lt;span&gt;)
@ImportResource({ &lt;/span&gt;&quot;classpath:dubbo-provider.xml&quot;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DubboConfig {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;DubboConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;dubbo读取的两个配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先对dubbo进行配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#应用名称
dubbo.application.name=dubbo-provider
#注册中心类型
dubbo.registry.protocol=zookeeper
#注册中心地址
dubbo.registry.address=127.0.0.1:2181
#暴露服务方式
dubbo.protocol.name=dubbo
#暴露服务端口
dubbo.protocol.port=20880&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后对dubbo中的接口进行配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:dubbo&lt;/span&gt;&lt;span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 提供方应用信息，用于计算依赖关系 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:application &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.application.name}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注册中心暴露服务地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.170.219.98:2181,10.173.55.173:2181&quot; /&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:registry &lt;/span&gt;&lt;span&gt;protocol&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.registry.protocol}&quot;&lt;/span&gt;&lt;span&gt; address&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.registry.address}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 暴露服务 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:protocol &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.protocol.name}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.protocol.port}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
　　&amp;lt;!-- 暴露的接口 --&amp;gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:service &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;=&quot;com.example.service.IDubboDemoService&quot;&lt;/span&gt;&lt;span&gt;
                   ref&lt;/span&gt;&lt;span&gt;=&quot;dubboDemoServiceImpl&quot;&lt;/span&gt;&lt;span&gt; retries&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; timeout&lt;/span&gt;&lt;span&gt;=&quot;6000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：mainConfig.java和DubboConfg.java 两个文件要放在接口的上一层，否则加载时会找不到接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;接口实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DubboDemoServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IDubboDemoService {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String   getString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;成功&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 5、dubbo-consume&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/623878/201807/623878-20180701125937043-1048021074.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只来看下配置文件&lt;/p&gt;
&lt;p&gt;　　dubbo.consume.properties:消费者只需要知道注册中心的类型和地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#应用名称
dubbo.application.name=dubbo-consume
#注册中心类型
dubbo.registry.protocol=zookeeper
#注册中心地址
dubbo.registry.address=127.0.0.1:2181&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　dubbo-consume.xml:只需要配置消费方需要引用的接口即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:dubbo&lt;/span&gt;&lt;span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 提供方应用信息，用于计算依赖关系 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:application &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.application.name}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注册中心暴露服务地址 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.170.219.98:2181,10.173.55.173:2181&quot; /&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:registry &lt;/span&gt;&lt;span&gt;protocol&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.registry.protocol}&quot;&lt;/span&gt;&lt;span&gt; address&lt;/span&gt;&lt;span&gt;=&quot;${dubbo.registry.address}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:reference &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;consumeService&quot;&lt;/span&gt;&lt;span&gt; interface&lt;/span&gt;&lt;span&gt;=&quot;com.example.service.IDubboDemoService&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a5859f44-691b-4473-a040-8aa5ca892449')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_a5859f44-691b-4473-a040-8aa5ca892449&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a5859f44-691b-4473-a040-8aa5ca892449&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a5859f44-691b-4473-a040-8aa5ca892449',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a5859f44-691b-4473-a040-8aa5ca892449&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; @RequestMapping(&quot;/dubbo&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DubboDemoController {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        @Resource
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IDubboDemoService service;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;          
&lt;span&gt; 8&lt;/span&gt;         @RequestMapping(value = &quot;/getString&quot;, method =&lt;span&gt; RequestMethod.GET)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getString(){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; service.getString();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;DubboDemoController.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;  &lt;span&gt;到此简单的配置已经ok了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、&lt;/span&gt;&lt;span&gt;整个流程为 服务的提供者方面 dubbo将对外的服务注册到zooKeeper上，同时在zooKeeper生成相应的node,对其监控。消费方从zooKeeper中去拿服务，所以服务的接口必须到时提供者和消费者约定好的。这样就利用dubbo+zooKeeper实现的远程RPC调用&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 01 Jul 2018 05:13:00 +0000</pubDate>
<dc:creator>以梦为码</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/volare/p/9248836.html</dc:identifier>
</item>
<item>
<title>redis的bigkey扫描脚本 - mantu</title>
<link>http://www.cnblogs.com/mantu/p/9249683.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mantu/p/9249683.html</guid>
<description>&lt;p&gt;    众所周知，redis里面的大key存在是非常危险的一件事情。因为最近的工作转移到中间件相关的工作，因此关注了一下bigkey的扫描方法。首先介绍一下阿里云提供的扫描脚本：&lt;/p&gt;
&lt;p&gt;具体可见：https://yq.aliyun.com/articles/117042?t=t1&lt;/p&gt;
&lt;p&gt;    我对这个脚本进行了一个压力测试，在redis的内存为15G，key的数量为2KW，ops为40K到80K之间，在这种情况下，阿里云的脚本完全不能跑成功(估计跑出来的时间以天为单位)，主要原因是每确认一个key的情况，就需要与redis交互多次。因此，我对它的脚本进行了改造，加入了pipeline和debug object方法，脚本如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import sys
import redis


def find_big_key_normal(db_host, db_port, db_password, db_num):
  client = redis.StrictRedis(host=db_host, port=db_port, password=db_password, db=db_num)
  i=0
  temp = client.scan(cursor=i,count=1000)
  j =0
  while temp[0]&amp;gt;0 :
    i=temp[0]
    j=j+len(temp[1])
    try:
      r = client.pipeline(transaction=False)
      for k in temp[1]:
        r.debug_object(k)
      tempA = r.execute()
      x = 0
      for key in tempA:
        length = key.get(&quot;serializedlength&quot;)
        ##type = key.get(&quot;encoding&quot;)
        if length &amp;gt; 10240 :
          type = client.type(temp[1][x])
          print temp[1][x], type,length
        x=x+1
    except :
      print &quot;a execption come&quot;
    temp = client.scan(cursor=i,count=1000)

  
if __name__ == '__main__':
  if len(sys.argv) != 4:
     print 'Usage: python ', sys.argv[0], ' host port password '
     exit(1)
  db_host = sys.argv[1]
  db_port = sys.argv[2]
  db_password = sys.argv[3]
  r = redis.StrictRedis(host=db_host, port=int(db_port), password=db_password)
  nodecount = 1
  keyspace_info = r.info(&quot;keyspace&quot;)
  for db in keyspace_info:
    print 'check ', db, ' ', keyspace_info[db]
    find_big_key_normal(db_host, db_port, db_password, db.replace(&quot;db&quot;, &quot;&quot;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我对上面的脚本同样进行了一个压力测试，在redis的内存为15G，key的数量为2KW，ops为40K到80K之间，在这种情况下：&lt;/p&gt;
&lt;p&gt;脚本10分钟跑完，完全可用。&lt;/p&gt;
&lt;p&gt;    说明：阿里云的脚本是支持cluster的，我这个脚本是只支持单机的，大家有兴趣的可以自己去更改。&lt;/p&gt;
</description>
<pubDate>Sun, 01 Jul 2018 03:24:00 +0000</pubDate>
<dc:creator>mantu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mantu/p/9249683.html</dc:identifier>
</item>
<item>
<title>Lettuce同步命令源码分析 - wei_zw</title>
<link>http://www.cnblogs.com/wei-zw/p/9249632.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wei-zw/p/9249632.html</guid>
<description>&lt;p&gt;  Lettuce同步源码分析&lt;/p&gt;
&lt;p&gt;    在上一篇分享中分享了单机模式异步连接创建过程&lt;a id=&quot;post_title_link_9247193&quot; href=&quot;https://www.cnblogs.com/wei-zw/p/9247193.html&quot;&gt;Lettuce创建连接过程源码分析&lt;/a&gt;; 在本次分享内容主要介绍同步命令的处理过程.&lt;/p&gt;
&lt;p&gt;Lettuce是基于Netty的Redis高级客户端,对于异步命令来说是天然的,那么lettuce中是如何处理同步命令的呢?实际上同步连接还是对异步命令的一次封装;下面我们就通过源码进行分析看看Lettuce中的具体实现.&lt;/p&gt;
&lt;p&gt;   通过上一篇文章中可以知道在StatefulRedisConnectionImpl中创建 异步模式,同步模式以及响应式模式命令处理模式,那么我们就从 该处看起&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public StatefulRedisConnectionImpl(RedisChannelWriter writer, RedisCodec&amp;lt;K, V&amp;gt; codec, Duration timeout) {

        super(writer, timeout);

        this.codec = codec;
        //创建异步redis命令处理模式
        this.async = newRedisAsyncCommandsImpl();
        //创建redis命令同步处理模式
        this.sync = newRedisSyncCommandsImpl();
        //创建redis命令响应式处理模式
        this.reactive = newRedisReactiveCommandsImpl();
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   通过这里似乎看不出同步处理模式同异步处理模式有什么关联,那么我们在深入进去看一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
protected RedisCommands&amp;lt;K, V&amp;gt; newRedisSyncCommandsImpl() {
        return syncHandler(async(), RedisCommands.class, RedisClusterCommands.class);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这段代码中可以看到async(),这个就是redis命令异步处理模式,那么它是如何封装的呢?&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
protected &amp;lt;T&amp;gt; T syncHandler(Object asyncApi, Class&amp;lt;?&amp;gt;... interfaces) {
        //对异步API创建调用处理器
        FutureSyncInvocationHandler h = new FutureSyncInvocationHandler((StatefulConnection&amp;lt;?, ?&amp;gt;) this, asyncApi, interfaces);
        //创建动态代理
        return (T) Proxy.newProxyInstance(AbstractRedisClient.class.getClassLoader(), interfaces, h);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过上面对源码可以发现原来是对异步api创建了一个JDK动态代理;那么关键的逻辑还是在FutureSyncInvocationHandler中,对于动态代理的知识就不在展开了.&lt;/p&gt;
&lt;p&gt;在invoke处理是在AbstractInvocationHandler中完成的,它将一些基本公用的抽象在了基类中,将特殊的实现延迟到子类中实现.&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 public final Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //如果参数为null则 将args设置为&quot;{}&quot;
        if (args == null) {
            args = NO_ARGS;
        }
        //如果参数长度为0同时方法名称为hashCode则直接返回hashCode
        if (args.length == 0 &amp;amp;&amp;amp; method.getName().equals(&quot;hashCode&quot;)) {
            return hashCode();
        }
        //如果是equals
        if (args.length == 1 &amp;amp;&amp;amp; method.getName().equals(&quot;equals&quot;) &amp;amp;&amp;amp; method.getParameterTypes()[0] == Object.class) {
            Object arg = args[0];
            if (arg == null) {
                return false;
            }
            if (proxy == arg) {
                return true;
            }
            return isProxyOfSameInterfaces(arg, proxy.getClass()) &amp;amp;&amp;amp; equals(Proxy.getInvocationHandler(arg));
        }
        //如果是toString
        if (args.length == 0 &amp;amp;&amp;amp; method.getName().equals(&quot;toString&quot;)) {
            return toString();
        }
        return handleInvocation(proxy, method, args);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在FutureSyncInvocationHandler中实现了同步命令处理过程,其源码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 protected Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {

        try {
            //获取当前method在asyncApi 中对应的方法
            Method targetMethod = this.translator.get(method);
            //调用异步接口
            Object result = targetMethod.invoke(asyncApi, args);
            //如果返回结果是RedisFuture类型
            if (result instanceof RedisFuture&amp;lt;?&amp;gt;) {
               //类型强转
                RedisFuture&amp;lt;?&amp;gt; command = (RedisFuture&amp;lt;?&amp;gt;) result;
                  //如果不是事务控制方法 同时还在事务中则返回null
                if (isNonTxControlMethod(method.getName()) &amp;amp;&amp;amp; isTransactionActive(connection)) {
                    return null;
                }
                //是事务控制方法，或不在事务中则进行如下处理
                //等待超时或取消
                LettuceFutures.awaitOrCancel(command, connection.getTimeout().toNanos(), TimeUnit.NANOSECONDS);
               //返回结果,这里处理不是很好 上一步中就可以直接返回了
                return command.get();
            }
            //如果不是RedisFuture类型则直接返回
            return result;
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上文中有一段是获取获取指定方法在delegate中对应方法的处理,下面就看看这个处理是如何实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
     * 方法翻译器
     */
    protected static class MethodTranslator {

        private final static WeakHashMap&amp;lt;Class&amp;lt;?&amp;gt;, MethodTranslator&amp;gt; TRANSLATOR_MAP = new WeakHashMap&amp;lt;&amp;gt;(32);
        
        //真实方法和代理类中方法映射表
        private final Map&amp;lt;Method, Method&amp;gt; map;

        private MethodTranslator(Class&amp;lt;?&amp;gt; delegate, Class&amp;lt;?&amp;gt;... methodSources) {

            map = createMethodMap(delegate, methodSources);
        }

        /**
         * 通过指定代理类，和目标类创建方法翻译器
         */
        public static MethodTranslator of(Class&amp;lt;?&amp;gt; delegate, Class&amp;lt;?&amp;gt;... methodSources) {
            //同步代码块
            synchronized (TRANSLATOR_MAP) {
                //如果翻译器映射表中不存在delegate的翻译器则创建一个新的
                return TRANSLATOR_MAP.computeIfAbsent(delegate, key -&amp;gt; new MethodTranslator(key, methodSources));
            }
        }

        private Map&amp;lt;Method, Method&amp;gt; createMethodMap(Class&amp;lt;?&amp;gt; delegate, Class&amp;lt;?&amp;gt;[] methodSources) {

            Map&amp;lt;Method, Method&amp;gt; map;
            List&amp;lt;Method&amp;gt; methods = new ArrayList&amp;lt;&amp;gt;();
            //遍历源类，找到所有public方法
            for (Class&amp;lt;?&amp;gt; sourceClass : methodSources) {
                methods.addAll(getMethods(sourceClass));
            }

            map = new HashMap&amp;lt;&amp;gt;(methods.size(), 1.0f);

            //创建方法和代理类的方法的映射表
            for (Method method : methods) {

                try {
                    map.put(method, delegate.getMethod(method.getName(), method.getParameterTypes()));
                } catch (NoSuchMethodException ignore) {
                }
            }
            return map;
        }
       //获取目标方法中的所有方法
        private Collection&amp;lt;? extends Method&amp;gt; getMethods(Class&amp;lt;?&amp;gt; sourceClass) {

            //目标方法集合
            Set&amp;lt;Method&amp;gt; result = new HashSet&amp;lt;&amp;gt;();

            Class&amp;lt;?&amp;gt; searchType = sourceClass;
            while (searchType != null &amp;amp;&amp;amp; searchType != Object.class) {
                 //将目标类中所有public方法添加到集合中
                result.addAll(filterPublicMethods(Arrays.asList(sourceClass.getDeclaredMethods())));
                //如果souceClass是接口类型
                if (sourceClass.isInterface()) {
                    //获取souceClass的所有接口
                    Class&amp;lt;?&amp;gt;[] interfaces = sourceClass.getInterfaces();
                    //遍历接口，将接口的public方法也添加到方法集合中
                    for (Class&amp;lt;?&amp;gt; interfaceClass : interfaces) {
                        result.addAll(getMethods(interfaceClass));
                    }

                    searchType = null;
                } else {//如果不是接口则查找父类

                    searchType = searchType.getSuperclass();
                }
            }

            return result;
        }

        //获取给定方法集合中所有public方法
        private Collection&amp;lt;? extends Method&amp;gt; filterPublicMethods(List&amp;lt;Method&amp;gt; methods) {
            List&amp;lt;Method&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(methods.size());

            for (Method method : methods) {
                if (Modifier.isPublic(method.getModifiers())) {
                    result.add(method);
                }
            }

            return result;
        }

        public Method get(Method key) {
           //从方法映射表中获取目标方法
            Method result = map.get(key);
            //如果目标方法不为null则返回,否则抛出异常
            if (result != null) {
                return result;
            }
            throw new IllegalStateException(&quot;Cannot find source method &quot; + key);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sun, 01 Jul 2018 03:05:00 +0000</pubDate>
<dc:creator>wei_zw</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wei-zw/p/9249632.html</dc:identifier>
</item>
</channel>
</rss>