<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>OOAD之策略模式（1） - 一个待业码农的救赎</title>
<link>http://www.cnblogs.com/exceptionblog/p/8372941.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/exceptionblog/p/8372941.html</guid>
<description>&lt;p&gt;在引入策略模式之前。先用一个小项目解释为什么要有策略模式。这是一个模拟鸭子的小游戏。最开始需求为，所有的鸭子都会叫以及都会游泳且叫声游泳姿势都一样。因此我们用原始OO的思维去编写代码时很容易做到&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck{
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; yuck(){
        System.out.println(&lt;/span&gt;&quot;嘎嘎叫&quot;&lt;span&gt;);
    }

   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; swim(){
        Systrm.out.println(&lt;/span&gt;&quot;i am swim&quot;&lt;span&gt;)；
    }              

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是封装一个超类。然后设置两个子类通用的方法，叫和游泳。此时再编写程序需要的各种不同的鸭子子类。他们都能够叫和游泳。此时编写一个测试类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{

   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
       Duck gDuck &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GreenDuck();
       Duck rDuck  &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedDuck();
       
       gDuck.display();
       gDuck.yuck();
       gDuck.swim();

       rDuck.display();
       rDuck.yuck();
       rDuck.swim();
    
    }  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GreenHeadDuck &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Duck{

   @override
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display(){
        System.out.println(&lt;/span&gt;&quot;绿头鸭&quot;&lt;span&gt;);
    }
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RedHeadDuck &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Duck{
    
    @override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display(){
        System.out.println(&lt;/span&gt;&quot;红头鸭&quot;&lt;span&gt;);
    }
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类的结果为：绿头鸭   嘎嘎叫  i am swim    红头鸭  嘎嘎叫  i am swim。这个完全没有问题。好的，现在游戏上线，市场火热，新需求来了。鸭子要会飞。那我们继续用OO的思维去想，&lt;/p&gt;
&lt;p&gt;那么可以给超类Duck中设置一个通用的fly方法。让所有的鸭子都会飞。让我们把Duck的代码改一下。改成下面的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck{
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; yuck(){
        System.out.println(&lt;/span&gt;&quot;嘎嘎叫&quot;&lt;span&gt;);
    }

   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; swim(){
        Systrm.out.println(&lt;/span&gt;&quot;i am swim&quot;&lt;span&gt;)；
    }              

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display();

     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly(){
      System.out.println(&lt;/span&gt;&quot;i am flying&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的，现在的确实现了鸭子会飞的功能，但是这也引起了一些问题。因为事实上不是所有的鸭子都会飞。你在超类中定义了方法。影响的是全部的子类。容易导致溢出的问题，也就是。有些子类不需要。但是你给它强制加了。好，那如果现在有些子类不会飞。我们继续用OO的思维去解决。那么可以在不会飞的子类中用重写去覆盖掉父类给他的方法。我们加入绿头鸭不会飞，我们修改以下绿头鸭的代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GreenHeadDuck &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Duck{

   @override
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display(){
        System.out.println(&lt;/span&gt;&quot;绿头鸭&quot;&lt;span&gt;);
    }

    @override
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly(){
       System.out.println(&lt;/span&gt;&quot;i can't fly&quot;&lt;span&gt;)
    }
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好，可以通过在子类中覆盖来实现有些鸭子会费飞有些不会飞这个需求。但是在我们这个例子中鸭子种类少，这么玩没有关系。但如果由2000种鸭子呢。难道你要一个一个的去覆盖子类中的方法。&lt;/p&gt;
&lt;p&gt;很明显就能看出单纯的面向对象，也就是OO的思想在设计这个需求的时候并不完善。那也有些人说，那我不在超类Duck中定义fly的方法。我在子类中去定义，谁会飞我就给谁定义。这其实和上面一样。如果子类基数大。那么你写的重复代码也会很多。那么OO中的代码复用就完全没有体现出来了。&lt;/p&gt;


&lt;p&gt;因此，我们分析以下上面OO设计的问题所在。为什么会说这个设计不好。原因是在于它的行为和客户类没有分离。也就是“干什么” 和 “怎么干”没有分离开来。例如上面的例子。客户类中的fly是干什么，但是怎么干，fly里面怎么定义代码，他们没有分离。全部堆在客户类中，耦合度太高。导致，你的“怎么干“放在客户类中定义，无论你放在超类还是子类。都容易出问题，因此就导出了策略模式这个概念&lt;/p&gt;


&lt;p&gt;策略模式是干嘛的，是去耦合的。它所做的就是把”干什么“和”怎么干“分离开来。把”怎么干“封装到一个策略接口或者抽象类中。然后编写一系列的怎么干算法封装起来。客户类中只需要调用这个算法就ok了&lt;/p&gt;
&lt;p&gt;策略模式的两种标准点的定义：&lt;/p&gt;

&lt;p&gt;图视：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251553/201801/1251553-20180128234709537-2144696152.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　  环境对象(Context)：该类中实现了对抽象策略中定义的接口或者抽象类的引用。&lt;br/&gt;      抽象策略对象(Strategy)：它可由接口或抽象类来实现。&lt;br/&gt;      具体策略对象(ConcreteStrategy)：它封装了实现同不功能的不同算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换，策略模式让算法独立于使用它的客户而独立变化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使这些算法在客户端调用它们的时候能够互不影响地变化。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;strong&gt;策略模式：分别封装行为接口，实现算法族，超类中放行为接口对象。在子类中的构造方法中去实例化行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能族，让行为算法的变化独立于算法的使用者。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用策略模式的步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.分析变化的行为，拿出来进行封装成一个策略接口或者抽象类。然后定义该行为的多种实现算法。形成算法族&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在客户超类中放策略接口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.在子类的构造方法中去具体实例化具体的策略算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;下面让我们看看用策略模式修改模拟鸭子的这个项目。&lt;/p&gt;

&lt;p&gt;1.封装变化的部分。当前鸭子的变化行为为fly。有些会飞，有些不会飞。有些会飞的好，有些飞的不好。因此封装fly这个行为为一个策略接口。FlyObject&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; FlyObject{
   &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，编写项目中实现fly这个行为的多种算法。例如不会飞 nofly，飞的好，good fly，飞得不好 badfly。这三个行为族&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NoFly &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; FlyObject{
    
   @override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly(){
       System.out.println(&lt;/span&gt;&quot;不会飞&quot;&lt;span&gt;)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GoodFly &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; FlyObject{

    @override
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly(){
        System.out.println(&lt;/span&gt;&quot;Good fly&quot;&lt;span&gt;);
    }
}            &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47.5&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BadFly &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; FlyObject{

   @override
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly(){
       System.out.println(&lt;/span&gt;&quot;bad fly&quot;&lt;span readability=&quot;2&quot;&gt;);
    }
}&lt;p&gt;之后在客户类的超类也就是Duck中放置策略接口，也就是FlyObject。&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyh.strategy.duck;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.flybehavior.FlyBehavior;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.yuckbehavior.YuckBehavior;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck {

    FlyBehavior flybehavior;
    YuckBehavior yuckbehavior;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Duck() {
        
    };
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly() {
        flybehavior.fly();
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; yuck() {
        yuckbehavior.yuck();
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display();
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFlyBehavior(FlyBehavior fb) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.flybehavior =&lt;span&gt; fb;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setYuckBehavior(YuckBehavior yb) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.yuckbehavior =&lt;span&gt; yb;
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个方法子类通用，不会变化&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; swim() {
        System.out.println(&lt;/span&gt;&quot;i am swim&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;在客户类的子类中去实例化具体的策略接口算法。&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyh.strategy.duck;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.flybehavior.GoodFlyBehavior;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.yuckbehavior.GaGaYuckBehavior;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GreenHeadDuck &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Duck {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; GreenHeadDuck() {
        flybehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GoodFlyBehavior();
        yuckbehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GaGaYuckBehavior();
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
        System.out.println(&lt;/span&gt;&quot;绿头鸭&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyh.strategy.duck;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.flybehavior.NoFlyBehavior;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyh.strategy.yuckbehavior.NoYuckBehavior;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RedHeadDuck &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Duck {

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedHeadDuck() {
        flybehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoFlyBehavior();
        yuckbehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoYuckBehavior();
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
        System.out.println(&lt;/span&gt;&quot;红头鸭&quot;&lt;span&gt;);
    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;span readability=&quot;4&quot;&gt;因此，通过这种方式，能够实现客户类中的行为和客户类相分离。把变化的行为独立出来。抽象成接口。这样如果有新的行为需求，可以直接在行为族中加入。如果有新的客户类对象。也可以让他们&lt;br/&gt;具体选择的去实现行为族。达到降低耦合度的目的。&lt;p&gt;但是，策略模式也有缺点。也就是客户类必须了解策略行为族中的每一个算法的实现以及原理。只有全部知晓。客户类才能去区别调用他们而不会出错。这时策略模式必须要做到的一点。&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;我们什么时候使用策略模式：&lt;/strong&gt;这个没有具体的需求。一般而言。如果你定义的抽象父类中的一些方法是可变的。子类中不一定需要这些方法的时候。建议用策略模式将变化的行为封装起来。这其实也是一种方法的封装。你将行为封装，那么其他的类也可以去使用。&lt;/p&gt;

</description>
<pubDate>Sun, 28 Jan 2018 15:52:00 +0000</pubDate>
<dc:creator>一个待业码农的救赎</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/exceptionblog/p/8372941.html</dc:identifier>
</item>
<item>
<title>DALI调色温 - DALI2</title>
<link>http://www.cnblogs.com/zj813267849/p/8372923.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zj813267849/p/8372923.html</guid>
<description>&lt;p&gt;DALI调色温模块使用手册&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1118342/201801/1118342-20180128234011240-2074792062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1118342/201801/1118342-20180128234029162-1840877550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;709&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;公  司：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;深圳市万秀电子有限公司&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;网  站：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;http://www.wanxiucx.com&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;总  机：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;0755-23215689&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;联系人：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;张先生&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;手  机：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;13923882807&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;Q Q &lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;813267849&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;邮  箱：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;567&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;mike@wanxiucx.com&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;一、&lt;/strong&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;欢迎使用本公司的DALI解码模块，拥有“DALI第一套协议” （DALI 1.0），“DALI第二套协议”（DALI 2.0），“DALI NFC”，“DALI调色温”模块，具备10年的DALI行业经验，支持客户LED电源过DALI认证。&lt;/p&gt;
&lt;p&gt;该模块体积微小，采用了先进的控制技术，完美兼容TRIDONIC（锐高），OSRAM（欧司朗），PHILIPS（飞利浦），路创，欧华，施耐德，快思聪，西门子，ABB等任何国际知名品牌的DALI控制系统，把国际上广泛采用的DALI标准控制信号转换成PWM信号，使普通照明产品立即具备DALI接口，可广泛用于酒店，会堂，办公区域等各种需要调光控制的场合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、&lt;/strong&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DALI (数字可寻址灯光接口)是国际标准的、流行的灯光控制协议总线，它采用曼彻斯特编码的数字式传输，具有整体、分组调光、寻址调光和查询灯具状态等强大的功能。该数字总线与模拟式的0-10V调光总线相比，具有调光精确，可寻址、稳定，可集中控制，安装方便等特点。&lt;/p&gt;
&lt;p&gt;1、高性能&lt;/p&gt;
&lt;p&gt;      本模块采用进口IC设计，功耗低，性能强，工作稳定可靠。&lt;/p&gt;
&lt;p&gt;2、模块化&lt;/p&gt;
&lt;p&gt;模块化设计，超小体积， 引脚少，方便生产，与LED驱动电源，荧光灯电子镇流器集成更容易，可以以最快的速度设计出可靠稳定的DALI协议照明产品。&lt;/p&gt;
&lt;p&gt;3、DALI功能&lt;/p&gt;
&lt;p&gt;具备完整的DALI接口功能，符合IEC 60929/IEC 62386标准，兼容性好，可以兼容任何符合DALI协议的设备，通过输入标准的DALI信号，实现产品的开关、调光、场景、群组、编址等功能。&lt;/p&gt;
&lt;p&gt;4、灵活性&lt;/p&gt;
&lt;p&gt;本模块输出PWM调光信号，最大输出电流10mA，调光范围为0~100%(可调)，可以适应各种PWM/模拟调光接口的驱动芯片，设计更灵活。&lt;/p&gt;
&lt;p&gt;5、可定制&lt;/p&gt;
&lt;p&gt;为了满足客户的特殊需求，可定制相应的模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、电气特性&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&quot;PlainTable1&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;引脚&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;标识&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;电气参数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN1/2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;DA&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;DALI输入引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;652&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;DALI：DC+9.5～22.5V（接口电流&amp;lt;2mA）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;VSS&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;电源地输入引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot;&gt;
&lt;p align=&quot;left&quot;&gt;电源地&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN4&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;VCC&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;电源正极输入引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;DC +4.5～5.1V， 10mA，偏离5V越小越好。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;NC&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;备用引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;▲此引脚闲空，备用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN6&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PWM1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;冷色温&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;调光信号输出引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot; readability=&quot;8&quot;&gt;
&lt;p align=&quot;left&quot;&gt;输出电压为VCC，最大输出电流10mA，建议小于1mA，接收到DALI关灯信号时，输出低电平。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;PWM频率默认出货为1000Hz。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN7&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PWM2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;暖色温&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;调光信号输出引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot; readability=&quot;8&quot;&gt;
&lt;p align=&quot;left&quot;&gt;输出电压为VCC，最大输出电流10mA，建议小于1mA，接收到DALI关灯信号时，输出低电平。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;PWM频率默认出货为1000Hz。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td width=&quot;82&quot;&gt;
&lt;p align=&quot;center&quot;&gt;PIN8&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;128&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ERR&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;213&quot;&gt;
&lt;p align=&quot;center&quot;&gt;错误信号输入引脚&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;652&quot; readability=&quot;9&quot;&gt;
&lt;p align=&quot;left&quot;&gt;使用DALI指令读取产品工作状态时，显示的状态由此引脚决定，如果此引脚输入为高电平时，显示产品的工作状态错误（开路保护），输入电压范围是DC +4～5.1V，输入电流&amp;lt;1mA。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;▲不需要识别产品状态时，此引脚须接地（VSS）。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;更多信息欢迎随时联系我。&lt;/p&gt;
</description>
<pubDate>Sun, 28 Jan 2018 15:44:00 +0000</pubDate>
<dc:creator>DALI2</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zj813267849/p/8372923.html</dc:identifier>
</item>
<item>
<title>web前端学习（2）：开始编写HTML - 时习</title>
<link>http://www.cnblogs.com/shixizhi/p/8372351.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shixizhi/p/8372351.html</guid>
<description>&lt;p&gt; 　　&lt;span&gt;在第一章中，我们初步了解了上网的过程，同时也明白了所谓网页，其本质就是主要用HTML语言所写的一份文档。相信大多数人在了解HTML文件前，最先接触的是利用“记事本”所写的文档或者是利用办公软件“Word”所建的文档，身为初心者的你可能会问，HTML文档与这些文档又有何差别？在回答这个问题前，让我们尝试着创建这三种文档。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　创建我们熟悉的.txt文件，打开它并试着输入文本内容“学而时习之”：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128211548631-1262843585.png&quot; alt=&quot;&quot;/&gt;         &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128212849162-1006013314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　&lt;span&gt;　创建一个.docx文件，打开并输入文本内容“学而时习之”：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128211412490-88134431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128213307100-287468942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　好，现在让我们创建今天的主角——HTML文档。尝试着把“记事本”文档和Word文档的后缀名改为“html”：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128213719881-744751712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　&lt;span&gt;　你会发现他们“看上去”都一模一样了，那让我们打开试试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128214113162-2109000210.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　　　  &lt;span&gt;  “记事本”文档&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128214134100-1881064667.png&quot; alt=&quot;&quot;/&gt;    &lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　Word文档&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　&lt;span&gt;　我们可以通过后缀名改变文件类型，当我们将后缀名改为“html”后，实际上已经创建了“HTML文档”。但是改了文档后缀名后，我们发现出现了不同情况了。当我们将后缀名为“txt”的文档改为“html”后，双击打开文本内容仍然能够正常显示出来；但是，为什么将Word文档后缀名“docx”改为“html”后，双击后文档却显示一大片乱码呢。使用过Word的人应该都明白，Word文本是带有格式的文本，即我们不仅可以输入文本，同时默认地文本已经自带了格式，如字号字体行距等（当然我们还可以主动给文本内容设置各种格式）。显然地，Word文本区别于“记事本”文档以及“html”文档——我们通常将Word这种自带文本格式的文档成为“格式文本”，而剩余的称为“纯文本”。因为Word文档内还包含关于格式的数据，将其后缀名改为“html”后，这些数据难以解释出来，最终出现了乱码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由上我们可以知道，HTML文档便是纯文本文档。接下来，我将简单介绍HTML文档的主要结构，让我们试着写一个简单的的HTML页面吧!&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　如上图，整个HTML文档其实分为三个部分，包括&amp;lt;html&amp;gt;部,&amp;lt;head&amp;gt;部,&amp;lt;body&amp;gt;部;而带有左右尖括号括起来的部分被叫做标签，标签有开始标签和结束标签之分，结束标签就是在做尖括号后加“/”。一般开始标签和结束标签是成对出现的，他们标记在文本两端，必须要有他们来指明内容的结构。这就是所谓的超文本标记语言，标记两字的意义所在。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当我们将记事本文档改为HTML文档后，打开文档我们会发现文档内容能够显示出来，那如果我们想要用HTML语言显示同一文本，又该写下何处，如何写呢？如字面意义所言，文档内容部分，应该是这个网页的躯干，所以我们要将主体文档部分写入&amp;lt;body&amp;gt;部，如下图代码及效果图。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
学而时习之
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128224528069-1625506669.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;那么当我们想要说明一些不属于文档内容却有关于网页的信息时自然就该写进头部了。让我们在&amp;lt;head&amp;gt;部试着引入&amp;lt;title&amp;gt;标签吧！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;时习&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
学而时习之
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321569/201801/1321569-20180128225016178-1166469757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;和上图效果图对比，唯一的差别就在于网页的标题变了。这时我们并没有改变网页的文档内容，但是通过在&amp;lt;head&amp;gt;部写入&amp;lt;title&amp;gt;,我们改变了网页的标题。由此我们可以做一个今天的小总结了，作为纯文本文档的HTML文档由三个部分组成：&amp;lt;html&amp;gt;部,&amp;lt;head&amp;gt;部,&amp;lt;body&amp;gt;部；其中&amp;lt;body&amp;gt;部主要写网页文档内容，&amp;lt;head&amp;gt;部则写网页相关的信息；此外，必须要有标签指明内容的结构，标签一般有开始和结束两种。在练习过程中，你也许会发现少打了几个字或者&quot;/&quot;也能照常显示文档，那是因为HTML是较为宽容的语言，浏览器也会采用宽容模式，尽量将其解释并显示出来。但是如果想要减少错误，就应该从一开始就要有严谨的态度，养成良好的编程习惯。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今天我们开始接触了HTML文档并且亲自尝试了HTML语言编写自己的网页，同时也了解了标签。学习Web前端，首先我们要学超文本标记语言（HTML），这意味着我们以后将遇到更多标签，而当我们掌握得越多，我们将会对HTML理解得更深，同时，也希望你和我一样，能够在遵守一定规则下体会到略带“设计感”的乐趣。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 28 Jan 2018 15:29:00 +0000</pubDate>
<dc:creator>时习</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shixizhi/p/8372351.html</dc:identifier>
</item>
<item>
<title>Google免费GPU使用教程（亲测可用） - Infaraway</title>
<link>http://www.cnblogs.com/infaraway/p/8372881.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/infaraway/p/8372881.html</guid>
<description>&lt;p&gt;今天突然看到一篇推文，里面讲解了如何薅资本主义羊毛，即如何免费使用Google免费提供的GPU使用权。&lt;/p&gt;
&lt;p&gt;可以免费使用的方式就是通过Google Colab，全名Colaboratory。我们可以用它来提高Python技能，也可以用Keras、TensorFlow、PyTorch、OpenCV等等流行的深度学习库来练习开发深度学习的应用。&lt;/p&gt;
&lt;p&gt;现在我们介绍如何免费的使用这个非常非常给力的应用！！！&lt;/p&gt;
&lt;h2&gt; 一  项目建立与配置&lt;/h2&gt;
&lt;p&gt;（1）在Google Drive上创建文件夹：这项功能的使用主要是通过Google Drive，首先需要在Google Drive里面创建新的文件夹，因为我们所有的操作都是通过Google Drive文件的方式进行的，&lt;span&gt;这里我们创建了一个名为gpu的文件夹，然后打开文件夹；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（2）创建新的Colaboratory：右键更多选择Colaboratory， 如果更多没有的话，可以点击关联更多应用搜索添加即可！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128225457459-1965182599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;并且这里可以随意修改文件名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128230133600-1427162067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （3）设置后端Python版本和免费的GPU使用：然后就可以进行代码编写了~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128230320365-2061932740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;二   授权与挂载&lt;/h2&gt;
&lt;p&gt; （4）当完成基本的文件建立和配置后，就需要先运行下面这些代码，来安装必要的库、执行授权：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128230818350-1628850279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; !apt-get install -y -qq software-properties-common python-software-properties module-init-&lt;span&gt;tools
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; !add-apt-repository -y ppa:alessandro-strada/ppa 2&amp;gt;&amp;amp;1 &amp;gt; /dev/&lt;span&gt;null
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; !apt-get update -qq 2&amp;gt;&amp;amp;1 &amp;gt; /dev/&lt;span&gt;null
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; !apt-get -y install -qq google-drive-&lt;span&gt;ocamlfuse fuse
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; google.colab &lt;span&gt;import&lt;/span&gt;&lt;span&gt; auth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;auth.authenticate_user()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; oauth2client.client &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoogleCredentials
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; creds =&lt;span&gt; GoogleCredentials.get_application_default()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; getpass
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; !google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 |&lt;span&gt; grep URL
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; vcode =&lt;span&gt; getpass.getpass()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; !echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击运行可以看到如下结果：此时，点击链接地址，获取验证码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128230915428-1149877523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;点击链接地址，获取验证码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128231004990-78458639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 提示成功！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128231108772-501542830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （5）授权完成后，就可以挂载Google Drive了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; !mkdir -&lt;span&gt;p drive
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; !google-drive-ocamlfuse drive
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三   测试阶段&lt;/h2&gt;
&lt;p&gt;我们使用安装Keras中的测试样例代码进行效果的测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;87&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;Trains a simple convnet on the MNIST dataset.
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;Gets to 99.25% test accuracy after 12 epochs
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;(there is still a lot of margin for parameter tuning).
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;16 seconds per epoch on a GRID K520 GPU.
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;__future__&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; print_function
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; keras
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; keras.datasets &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mnist
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; keras.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Sequential
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; keras.layers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Dense, Dropout, Flatten
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; keras.layers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Conv2D, MaxPooling2D
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; keras &lt;span&gt;import&lt;/span&gt;&lt;span&gt; backend as K
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; batch_size = 128
&lt;span&gt;19&lt;/span&gt; num_classes = 10
&lt;span&gt;20&lt;/span&gt; epochs = 12
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; input image dimensions&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; img_rows, img_cols = 28, 28
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; the data, shuffled and split between train and test sets&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; (x_train, y_train), (x_test, y_test) =&lt;span&gt; mnist.load_data()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; K.image_data_format() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;channels_first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     x_train = x_train.reshape(x_train.shape[0], 1&lt;span&gt;, img_rows, img_cols)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     x_test = x_test.reshape(x_test.shape[0], 1&lt;span&gt;, img_rows, img_cols)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     input_shape = (1&lt;span&gt;, img_rows, img_cols)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     input_shape = (img_rows, img_cols, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; x_train = x_train.astype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; x_test = x_test.astype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; x_train /= 255
&lt;span&gt;40&lt;/span&gt; x_test /= 255
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x_train shape:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, x_train.shape)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(x_train.shape[0], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;train samples&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(x_test.shape[0], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test samples&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; convert class vectors to binary class matrices&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; y_train =&lt;span&gt; keras.utils.to_categorical(y_train, num_classes)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; y_test =&lt;span&gt; keras.utils.to_categorical(y_test, num_classes)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; model =&lt;span&gt; Sequential()
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; model.add(Conv2D(32, kernel_size=(3, 3&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                  activation=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;relu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                  input_shape=&lt;span&gt;input_shape))
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; model.add(Conv2D(64, (3, 3), activation=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;relu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; model.add(MaxPooling2D(pool_size=(2, 2&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; model.add(Dropout(0.25&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;model.add(Flatten())
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; model.add(Dense(128, activation=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;relu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; model.add(Dropout(0.5&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; model.add(Dense(num_classes, activation=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;softmax&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; model.compile(loss=&lt;span&gt;keras.losses.categorical_crossentropy,
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;               optimizer=&lt;span&gt;keras.optimizers.Adadelta(),
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;               metrics=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;model.fit(x_train, y_train,
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;           batch_size=&lt;span&gt;batch_size,
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;           epochs=&lt;span&gt;epochs,
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;           verbose=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;           validation_data=&lt;span&gt;(x_test, y_test))
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; score = model.evaluate(x_test, y_test, verbose=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test loss:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, score[0])
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test accuracy:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, score[1])&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里使用Google GPU的效率每个Epoch大概需要11s左右即可完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128231353834-37826241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 而我们使用实验室的工作站&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128231553990-560772689.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 每个率每个Epoch大概需要130s+完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/812218/201801/812218-20180128231614694-807036137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt; 四  相关命令&lt;/h2&gt;
&lt;p&gt;（1）查看是否使用GPU：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; tf.test.gpu_device_name()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）在使用哪个GPU：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tensorflow.python.client &lt;span&gt;import&lt;/span&gt;&lt;span&gt; device_lib
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; device_lib.list_local_devices()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）RAM大小：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; !cat /proc/meminfo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当然Google的使用需要自备FQ工具！&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d&quot; target=&quot;_blank&quot;&gt;https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 28 Jan 2018 15:25:00 +0000</pubDate>
<dc:creator>Infaraway</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/infaraway/p/8372881.html</dc:identifier>
</item>
<item>
<title>全栈开发之HTML快速入门（一） - skyflask</title>
<link>http://www.cnblogs.com/skyflask/p/8325035.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyflask/p/8325035.html</guid>
<description>&lt;h2&gt;一、HTML 是什么？&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;HTML 指的是超文本标记语言 (&lt;strong&gt;H&lt;/strong&gt;yper &lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;M&lt;/strong&gt;arkup &lt;strong&gt;L&lt;/strong&gt;anguage)&lt;/li&gt;
&lt;li&gt;HTML 不是一种编程语言，而是一种标记语言 (markup language)&lt;/li&gt;
&lt;li&gt;标记语言是一套标记标签 (markup tag)&lt;/li&gt;
&lt;li&gt;HTML 使用标记标签来描述网页&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二、HTML基本结构&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;html&amp;gt;                             ----根控制标记
    &amp;lt;head&amp;gt;                             ---头控制标记
        &amp;lt;title&amp;gt;这是标题&amp;lt;/title&amp;gt;       ----标题标记
    &amp;lt;/head&amp;gt;                            ----头控制标记
    &amp;lt;body&amp;gt;
                             ----- 我是Body！！！
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;                            ----根控制标记
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;1、head部分的标签&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;title&amp;gt;、&amp;lt;base&amp;gt;、&amp;lt;link&amp;gt;、&amp;lt;meta&amp;gt;、&amp;lt;script&amp;gt; 以及 &amp;lt;style&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义浏览器工具栏中的标题&lt;/li&gt;
&lt;li&gt;提供页面被添加到收藏夹时显示的标题&lt;/li&gt;
&lt;li&gt;显示在搜索引擎结果中的页面标题&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;meta&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;文档描述【网站在搜索时，进行描述。】
&lt;ul&gt;&lt;li&gt;&amp;lt;meta name=&quot;description&quot; content=&quot;在这里您可以详细浏览一汽-大众全线车型、一汽-大众授权经销商、一汽-大众二手车、一汽-大众服务等内容，体验一汽-大众精彩生活！&quot;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文档关键词【网站在搜索时，进行关键字匹配】
&lt;ul&gt;&lt;li&gt;&amp;lt;meta name=&quot;keywords&quot; content=&quot;一汽-大众,一汽大众官网,大众一汽,一汽官网,一汽-大众官方网站&quot;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重定向【页面重定向】
&lt;ul&gt;&lt;li&gt;&amp;lt;meta http-equiv=&quot;Refresh&quot;content=&quot;2;URL=https://www.baidu.com&quot;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;link用于导入css&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot; /&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;script用于导入js&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/code&gt;document.write(&quot;Hello World!&quot;)&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;style用于定义css&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;style&amp;gt;

p {

background-color:red;

font-size:15px;

　　}

&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;base:定义页面上所有链接的默认地址或默认目标.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;base href=&quot;http://www.w3school.com.cn/i/&quot; /&amp;gt;

&amp;lt;img src=&quot;eg_smile.gif&quot; /&amp;gt;&amp;lt;br /&amp;gt;  #引入图片时，会和base进行拼接后再查找图片。
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;2、body部分的标签&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;一、常用标签:&amp;lt;h1&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;h1~h6&amp;gt;:从大到小. 表示标题.

&amp;lt;p&amp;gt;: 段落标签. 包裹的内容被换行.并且也上下内容之间有一行空白.

&amp;lt;b&amp;gt; &amp;lt;strong&amp;gt;: 加粗标签.

&amp;lt;strike&amp;gt;: 为文字加上一条中线.

&amp;lt;em&amp;gt;: 文字变成斜体.

&amp;lt;sup&amp;gt;和&amp;lt;sub&amp;gt;: 上角标 和 下角表.

&amp;lt;br/&amp;gt;:换行. 单标签

&amp;lt;hr&amp;gt;:水平线

 &amp;lt;div&amp;gt; :块，主要用于布局

&amp;lt;span&amp;gt;：内联标签
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;块级标签和内联标签区别&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
块级标签和内联标签

块级标签：&amp;lt;p&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;table&amp;gt;&amp;lt;ol&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;form&amp;gt;&amp;lt;div&amp;gt;

内联标签：&amp;lt;a&amp;gt;&amp;lt;input&amp;gt;&amp;lt;img&amp;gt;&amp;lt;sub&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;textarea&amp;gt;&amp;lt;span&amp;gt;

block（块）元素的特点
① 占领一整行，新增元素新起一行；
② 高度，行高以及外边距和内边距都可调整；
③ 宽度缺省是它的容器的100%，除非设定一个宽度，一般都是占满一行。
④ 它可以容纳内联元素和其他块元素

inline元素的特点
① 和其他元素都在一行上；
② 高，行高及外边距和内边距不可改变；
③ 宽度就是它的文字或图片的宽度，不可改变
④ 内联元素只能容纳文本或者其他内联元素

对inline元素，需要注意如下 
设置宽度width 无效。
设置高度height 无效，可以通过line-height来设置。
设置margin 只有左右margin有效，上下无效。
设置padding 只有左右padding有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;二 、图形标签: &amp;lt;img&amp;gt; &lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;src: 要显示图片的路径.&lt;/li&gt;
&lt;li&gt;alt: 图片没有加载成功时的提示.&lt;/li&gt;
&lt;li&gt;title: 鼠标悬浮时的提示信息.&lt;/li&gt;
&lt;li&gt;width: 图片的宽&lt;/li&gt;
&lt;li&gt;height:图片的高 (宽高两个属性只用一个会自动等比缩放.)&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3school.com.cn/i/eg_tulip.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;花朵&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;图片标题&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100px&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;100px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128223829194-908098046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;三、 超链接标签:&amp;lt;a&amp;gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;href:要连接的资源路径 格式如下: href=&quot;http://www.baidu.com&quot; &lt;/li&gt;
&lt;li&gt;target: _blank : 在新的窗口打开超链接. 框架名称: 在指定框架中打开连接内容.&lt;/li&gt;
&lt;li&gt;name: 定义一个页面的书签.&lt;/li&gt;
&lt;li&gt;用于跳转 href : #书签名称.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击我跳转到百度哦&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;_blank&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击在本页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;四 、列表标签:&amp;lt;ul&amp;gt;&amp;lt;ol&amp;gt;&amp;lt;dl&amp;gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt;ul&amp;gt;: 无序列表&lt;/li&gt;
&lt;li&gt;&amp;lt;ol&amp;gt;:有序列表&lt;/li&gt;
&lt;li&gt;         &amp;lt;li&amp;gt;:列表中的每一项.&lt;/li&gt;
&lt;li&gt;&amp;lt;dl&amp;gt; 定义列表&lt;/li&gt;
&lt;li&gt;         &amp;lt;dt&amp;gt; 列表标题&lt;/li&gt;
&lt;li&gt;         &amp;lt;dd&amp;gt; 列表项&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;First term&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Definition&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Next term&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Definition&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;circle&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background:pink&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无序列表1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无序列表2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无序列表3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无序列表4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无序列表5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background:green&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有序列表1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有序列表2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有序列表3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有序列表4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有序列表5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224153897-1211653992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224213647-974603126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224224834-1788521803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;五 、表格标签: &amp;lt;table&amp;gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;border: 表格边框.&lt;/li&gt;
&lt;li&gt;cellpadding: 内边距&lt;/li&gt;
&lt;li&gt;cellspacing: 外边距.&lt;/li&gt;
&lt;li&gt;width: 像素 百分比.（最好通过css来设置长宽）&lt;/li&gt;
&lt;li&gt;&amp;lt;tr&amp;gt;: table row&lt;/li&gt;
&lt;li&gt;         &amp;lt;th&amp;gt;: table head cell&lt;/li&gt;
&lt;li&gt;         &amp;lt;td&amp;gt;: table data cell&lt;/li&gt;
&lt;li&gt;rowspan: 单元格竖跨多少行&lt;/li&gt;
&lt;li&gt;colspan:  单元格横跨多少列（即合并单元格）&lt;/li&gt;
&lt;li&gt;&amp;lt;th&amp;gt;: table header &amp;lt;tbody&amp;gt;(不常用): 为表格进行分区.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;20px&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;10px&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background:green&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;colspan&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:red&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;胖子 男占2列&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;rowspan&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:red&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;高个占2行&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;qq&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224136475-969879211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;六 、表单标签：&amp;lt;form&amp;gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;fieldset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;legend&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;legend&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
           用户名：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;='username' &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;defaultname&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
           密码:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;='password' &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
            性别:男&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;男&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                 女&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;女&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
            兴趣:篮球&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                 足球&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                 水球&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                 玻璃球&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
            上传文件:&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
            所属部门：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;department&quot;&lt;/span&gt;&lt;span&gt; multiple&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optgroup  &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;研发部&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;de_01&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;研发1部&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;de_02&quot;&lt;/span&gt;&lt;span&gt; selected&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;研发2部&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;de_03&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;研发3部&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optgroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optgroup &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;技术部&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;mercedes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;运维&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;audi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;开发&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optgroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           　　　　 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
            个人说明：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;textarea &lt;/span&gt;&lt;span&gt;cols&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt; rows&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是个人说明个人说明&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;textarea&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;fieldset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;fieldset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224311975-1563416911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;七、框架:&amp;lt;frameset&amp;gt; &lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;frameset &lt;/span&gt;&lt;span&gt;cols&lt;/span&gt;&lt;span&gt;=&quot;25%,50%,25%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;frame &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/example/html/frame_a.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;frame &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/example/html/frame_b.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;frame &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/example/html/frame_c.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;frameset&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128224540990-339371150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;八、布局:&amp;lt;div+css&amp;gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;div&amp;gt; 元素常用作布局工具，因为能够轻松地通过 CSS 对其进行定位。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
#header &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
#nav &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#eeeeee&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;          
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
#section &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;350px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;          
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
#footer &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    clear&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;both&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
   padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;          
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;中国&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nav&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
北京&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
上海&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
深圳&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;section&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;上海&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
上海市总面积6340平方公里，辖16个市辖区，属亚热带湿润季风气候，四季分明，日照充分，雨量充沛。
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
上海，简称“沪”或“申”，是gcd的诞生地，中华人民共和国直辖市，国家中心城市，超大城市，国际经济、金融、贸易、航运、科技创新中心[1]  ，首批沿海开放城市。上海地处长江入海口，是长江经济带的龙头城市，隔东中国海与日本九州岛相望，南濒杭州湾，北、西与江苏、浙江两省相接。

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
www.example.com
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/462684/201801/462684-20180128230213678-1051904799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 28 Jan 2018 15:06:00 +0000</pubDate>
<dc:creator>skyflask</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyflask/p/8325035.html</dc:identifier>
</item>
<item>
<title>Android查缺补漏（View篇）--事件分发机制源码分析 - codingblock</title>
<link>http://www.cnblogs.com/codingblock/p/8372807.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codingblock/p/8372807.html</guid>
<description>&lt;p&gt;在上一篇博文中分析了事件分发的流程及规则，本篇会从源码的角度更进一步理解事件分发机制的原理，如果对事件分发规则还不太清楚的童鞋，建议先看一下上一篇博文 &lt;a href=&quot;http://www.cnblogs.com/codingblock/p/8227647.html&quot;&gt;《Android查缺补漏（View篇）--事件分发机制》&lt;/a&gt; ，先来看一下本篇的分析思路，一会儿会按照事件传递的顺序，针对以下几点进行源码分析：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Activity对点击事件的分发过程&lt;/li&gt;
&lt;li&gt;PhoneWindow是如何处理点击事件的&lt;/li&gt;
&lt;li&gt;顶级View对点击事件的分发过程&lt;/li&gt;
&lt;li&gt;View对点击事件的处理过程&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;activity对点击事件的分发过程&quot;&gt;Activity对点击事件的分发过程&lt;/h3&gt;
&lt;p&gt;通过上一篇博文中我们就知道了当一个点击事件发生后，最先传递给当前的Activity，并有Activity的dispatchTouchEvent方法来分发，其具体的分发工作时由Activity内部的Window处理的。&lt;/p&gt;
&lt;p&gt;Activity的dispatchTouchEvent方法源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean dispatchTouchEvent(MotionEvent ev) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            onUserInteraction(); // 这是一个空方法，不用理会
        }
        if (getWindow().superDispatchTouchEvent(ev)) {
            return true;
        }
        return onTouchEvent(ev);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在dispatchTouchEvent内部我们看到通过getWindow获取了Window，然后将事件分发的处理操作交给了Window，通过上述源码我们即可看出从大的流程上Window将分发给顶级View，如果在getWindow().superDispatchTouchEvent(ev)这一步返回了true，那么事件循环就此结束，返回false意味着各界的View的onTouchEvent都返回了false，最终会去调用当前Activity的onTouchEvent。&lt;/p&gt;
&lt;h3 id=&quot;phonewindow是如何处理点击事件的&quot;&gt;PhoneWindow是如何处理点击事件的&lt;/h3&gt;
&lt;p&gt;接着详细看一下在getWindow().superDispatchTouchEvent(ev)中都干了啥，我们知道Window是一个抽象类，我们必须找出他们实现类才可以进行下一步分析，很简单，通过在Activity中搜索mWindow变量，很快我们就在Activity的attch方法中找到了它的赋值过程：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;final void attach(Context context, ActivityThread aThread,
            Instrumentation instr, IBinder token, int ident,
            Application application, Intent intent, ActivityInfo info,
            CharSequence title, Activity parent, String id,
            NonConfigurationInstances lastNonConfigurationInstances,
            Configuration config, String referrer, IVoiceInteractor voiceInteractor,
            Window window, ActivityConfigCallback activityConfigCallback) {
        attachBaseContext(context);

        mFragments.attachHost(null /*parent*/);

        mWindow = new PhoneWindow(this, window, activityConfigCallback);
        ...// 省略其他代码
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;没错，Window的实现类就是PhoneWindow，接下来直接去看PhoneWindow的superDispatchTouchEvent方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
public boolean superDispatchTouchEvent(MotionEvent event) {
    return mDecor.superDispatchTouchEvent(event);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PhoneWindow什么都没做，直接把DecorView，DecorView就是Activity的顶级View，在Activity中可以通过getWindow().getDecorView()获取。&lt;/p&gt;
&lt;h3 id=&quot;顶级viewdecorview对点击事件的分发过程&quot;&gt;顶级View（DecorView）对点击事件的分发过程&lt;/h3&gt;
&lt;p&gt;DecorView的superDispatchTouchEvent源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean superDispatchTouchEvent(MotionEvent event) {
    return super.dispatchTouchEvent(event);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实DecorView继承了FrameLayout，当然也是一个ViewGroup，所以这里我们再跳转到ViewGroup的dispatchTouchEvent方法中进一步分析，在上一篇博文&lt;a href=&quot;http://www.cnblogs.com/codingblock/p/8227647.html&quot;&gt;《Android查缺补漏（View篇）--事件分发机制》&lt;/a&gt; 中已经详细介绍了ViewGroup的dispatchTouchEvent对点击事件分发的流程，这里再通过源代码了解一下它的实现过程。&lt;/p&gt;
&lt;p&gt;这个方法非常长，但我们一步步分析还是能找到一些头绪的，请着重看代码中注释。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
public boolean dispatchTouchEvent(MotionEvent ev) {
    
    ...

    boolean handled = false;
    // 对事件进行安全过滤
    if (onFilterTouchEventForSecurity(ev)) {
        final int action = ev.getAction();
        final int actionMasked = action &amp;amp; MotionEvent.ACTION_MASK;

        // 初始化事件流的状态，当有down类型的touch事件传来时说明是一个新的事件流，此时需要重置事件状态。
        
        // Handle an initial down.
        if (actionMasked == MotionEvent.ACTION_DOWN) {
            // Throw away all previous state when starting a new touch gesture.
            // The framework may have dropped the up or cancel event for the previous gesture
            // due to an app switch, ANR, or some other state change.
            cancelAndClearTouchTargets(ev);
            resetTouchState();
        }

        // 检查是否拦截事件，当事件交由ViewGroup的子元素处理时，就会将mFirstTouchTarget赋值并指向子元素。
        // 更详细来说就是，当ViewGroup拦截事件时，mFirstTouchTarget为null，这时候除了down以外的事件类型到来时将不再调用onInterceptTouchEvent，同一事件流中的其他时间类型都会讲给ViewGroup处理。当ViewGroup不拦截事件时，mFirstTouchTarget将会被赋值指向为子元素。
        
        // Check for interception.
        final boolean intercepted;
        if (actionMasked == MotionEvent.ACTION_DOWN
                || mFirstTouchTarget != null) {
                // 这里包含了一种特殊情况，那就是在子View中可以通过requesetDisallowInterceptTouchEvent方法来干预ViewGroup对除了down以外的事件的分发过程，
                // 这里的FLAG_DISALLOW_INTERCEPT标记为就是通过在requestDisallowInterceptTouchEvent方法来设置的，FLAG_DISALLOW_INTERCEPT被设置后，ViewGroup就不在对事件拦截。
                // 当down事件传来后，在前面的resetTouchState方法中会对FLAG_DISALLOW_INTERCEPT重置，所以说子View无法影响ViewGroup对down事件的处理。
                
            final boolean disallowIntercept = (mGroupFlags &amp;amp; FLAG_DISALLOW_INTERCEPT) != 0;
            if (!disallowIntercept) {
                intercepted = onInterceptTouchEvent(ev);
                ev.setAction(action); // restore action in case it was changed
            } else {
                intercepted = false;
            }
        } else {
            // There are no touch targets and this action is not an initial down
            // so this view group continues to intercept touches.
            intercepted = true;
        }

        // If intercepted, start normal event dispatch. Also if there is already
        // a view that is handling the gesture, do normal event dispatch.
        if (intercepted || mFirstTouchTarget != null) {
            ev.setTargetAccessibilityFocus(false);
        }

        // Check for cancelation.
        final boolean canceled = resetCancelNextUpFlag(this)
                || actionMasked == MotionEvent.ACTION_CANCEL;

        // Update list of touch targets for pointer down, if needed.
        final boolean split = (mGroupFlags &amp;amp; FLAG_SPLIT_MOTION_EVENTS) != 0;
        TouchTarget newTouchTarget = null;
        boolean alreadyDispatchedToNewTouchTarget = false;
        if (!canceled &amp;amp;&amp;amp; !intercepted) {

            // If the event is targeting accessiiblity focus we give it to the
            // view that has accessibility focus and if it does not handle it
            // we clear the flag and dispatch the event to all children as usual.
            // We are looking up the accessibility focused host to avoid keeping
            // state since these events are very rare.
            View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()
                    ? findChildWithAccessibilityFocus() : null;

            if (actionMasked == MotionEvent.ACTION_DOWN
                    || (split &amp;amp;&amp;amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)
                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
                final int actionIndex = ev.getActionIndex(); // always 0 for down
                final int idBitsToAssign = split ? 1 &amp;lt;&amp;lt; ev.getPointerId(actionIndex)
                        : TouchTarget.ALL_POINTER_IDS;

                // Clean up earlier touch targets for this pointer id in case they
                // have become out of sync.
                removePointersFromTouchTargets(idBitsToAssign);

                final int childrenCount = mChildrenCount;
                if (newTouchTarget == null &amp;amp;&amp;amp; childrenCount != 0) {
                    final float x = ev.getX(actionIndex);
                    final float y = ev.getY(actionIndex);
                    // Find a child that can receive the event.
                    // Scan children from front to back.
                    final ArrayList&amp;lt;View&amp;gt; preorderedList = buildTouchDispatchChildList();
                    final boolean customOrder = preorderedList == null
                            &amp;amp;&amp;amp; isChildrenDrawingOrderEnabled();
                            
                            // 当ViewGroup不拦截事件的情况下，事件就会交给子View处理
                            // 首先遍历ViewGroup的所有子View，判断子View是否能够接收到点击事件：
                            // 判断的依据是：子元素是否在播放动画和点击事件的坐标是否落在子元素的范围内。
                            
                    final View[] children = mChildren;
                    for (int i = childrenCount - 1; i &amp;gt;= 0; i--) {
                        final int childIndex = getAndVerifyPreorderedIndex(
                                childrenCount, i, customOrder);
                        final View child = getAndVerifyPreorderedView(
                                preorderedList, children, childIndex);

                        // If there is a view that has accessibility focus we want it
                        // to get the event first and if not handled we will perform a
                        // normal dispatch. We may do a double iteration but this is
                        // safer given the timeframe.
                        if (childWithAccessibilityFocus != null) {
                            if (childWithAccessibilityFocus != child) {
                                continue;
                            }
                            childWithAccessibilityFocus = null;
                            i = childrenCount - 1;
                        }

                        if (!canViewReceivePointerEvents(child)
                                || !isTransformedTouchPointInView(x, y, child, null)) {
                            ev.setTargetAccessibilityFocus(false);
                            continue;
                        }

                        newTouchTarget = getTouchTarget(child);
                        if (newTouchTarget != null) {
                            // Child is already receiving touch within its bounds.
                            // Give it the new pointer in addition to the ones it is handling.
                            newTouchTarget.pointerIdBits |= idBitsToAssign;
                            break;
                        }

                        resetCancelNextUpFlag(child);
                        
                        /*
                         这里的dispatchTransformedTouchEvent方法实际调用的就是子元素的dispatchTouchEvent方法。
                         这个方法内部有一段逻辑是这样：
                            if (child == null) {
                                handled = super.dispatchTouchEvent(event);
                            } else {
                                handled = child.dispatchTouchEvent(event);
                            }
                        由于这里传入的child非null，所以此时事件就交给了子view处理。
                        
                        如果子View的dispatchTouchEvent方法返回了true，那么mFirstTouchTarget就会被赋值（在addTouchTarget()中被赋值），同时跳出for循环。
                        如果子View返回了false，那就继续循环，按同样的套路将调用下一个子View的dispatchTouchEvent方法。（例如：多个View重叠在一起时，这样在该区域就有多个满足接收点击事件的条件的控件）
                         
                         */
                         
                        if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {
                            // Child wants to receive touch within its bounds.
                            mLastTouchDownTime = ev.getDownTime();
                            if (preorderedList != null) {
                                // childIndex points into presorted list, find original index
                                for (int j = 0; j &amp;lt; childrenCount; j++) {
                                    if (children[childIndex] == mChildren[j]) {
                                        mLastTouchDownIndex = j;
                                        break;
                                    }
                                }
                            } else {
                                mLastTouchDownIndex = childIndex;
                            }
                            mLastTouchDownX = ev.getX();
                            mLastTouchDownY = ev.getY();
                            newTouchTarget = addTouchTarget(child, idBitsToAssign);
                            alreadyDispatchedToNewTouchTarget = true;
                            break;
                        }

                        // The accessibility focus didn't handle the event, so clear
                        // the flag and do a normal dispatch to all children.
                        ev.setTargetAccessibilityFocus(false);
                    }
                    if (preorderedList != null) preorderedList.clear();
                }

                if (newTouchTarget == null &amp;amp;&amp;amp; mFirstTouchTarget != null) {
                    // Did not find a child to receive the event.
                    // Assign the pointer to the least recently added target.
                    newTouchTarget = mFirstTouchTarget;
                    while (newTouchTarget.next != null) {
                        newTouchTarget = newTouchTarget.next;
                    }
                    newTouchTarget.pointerIdBits |= idBitsToAssign;
                }
            }
        }

        // Dispatch to touch targets.
        if (mFirstTouchTarget == null) {
            /*
            mFirstTouchTarget为null时，ViewGroup就会拦截接下来的同一序列中的所有事件。
            如果遍历了所有的子元素事件都没有被合适的处理（可能是因为该ViewGroup没有子View，或者在子View的dispatchTouchEvent方法返回了false），ViewGroup就会自己处理事件。
            
            这里的第三个参数传入了null，在dispatchTransformedTouchEvent中通过以下逻辑即可知道会调用super.dispatchTouchEvent(event);
            
            if (child == null) {
                handled = super.dispatchTouchEvent(event);
            } else {
                handled = child.dispatchTouchEvent(event);
            }
            */
        
            // No touch targets so treat this as an ordinary view.
            handled = dispatchTransformedTouchEvent(ev, canceled, null,
                    TouchTarget.ALL_POINTER_IDS);
        } else {
            ...
        }
        ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码是对顶级View（其实也是ViewGroup）事件分发的分析，接下来再看看当事件传递给View时，View对事件的处理代码。&lt;/p&gt;
&lt;h3 id=&quot;view对点击事件的处理过程&quot;&gt;View对点击事件的处理过程&lt;/h3&gt;
&lt;p&gt;从上面的分析我们可知，ViewGroup是通过调用View的dispatchTouchEvent方法将事件传递给View的，那么就来看一下View的dispatchTouchEvent方法源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean dispatchTouchEvent(MotionEvent event) {
    
    ...

    if (onFilterTouchEventForSecurity(event)) {
        if ((mViewFlags &amp;amp; ENABLED_MASK) == ENABLED &amp;amp;&amp;amp; handleScrollBarDragging(event)) {
            result = true;
        }
        //noinspection SimplifiableIfStatement
        ListenerInfo li = mListenerInfo;
        if (li != null &amp;amp;&amp;amp; li.mOnTouchListener != null
                &amp;amp;&amp;amp; (mViewFlags &amp;amp; ENABLED_MASK) == ENABLED
                &amp;amp;&amp;amp; li.mOnTouchListener.onTouch(this, event)) {
            result = true;
        }

        if (!result &amp;amp;&amp;amp; onTouchEvent(event)) {
            result = true;
        }
    }

    ...

    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的源码中，首先会获取View的ListenerInfo判断有没有设置OnTouchListener，如果设置了并且在OnTouchListener中的onTouch方法返回了true，那么就不再调用View自身的onTouchEvent方法，至此我们也找到了OnTouchListener监听器中的onTouch方法优先于onTouchEvent方法的原因。&lt;/p&gt;
&lt;p&gt;接着再看onTouchEvent方法的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean onTouchEvent(MotionEvent event) {
    final float x = event.getX();
    final float y = event.getY();
    final int viewFlags = mViewFlags;
    final int action = event.getAction();

    final boolean clickable = ((viewFlags &amp;amp; CLICKABLE) == CLICKABLE
            || (viewFlags &amp;amp; LONG_CLICKABLE) == LONG_CLICKABLE)
            || (viewFlags &amp;amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;
    
    // 从这段代码可知，即使不可用状态的控件也会消费事件。
    if ((viewFlags &amp;amp; ENABLED_MASK) == DISABLED) {
        if (action == MotionEvent.ACTION_UP &amp;amp;&amp;amp; (mPrivateFlags &amp;amp; PFLAG_PRESSED) != 0) {
            setPressed(false);
        }
        mPrivateFlags3 &amp;amp;= ~PFLAG3_FINGER_DOWN;
        // A disabled view that is clickable still consumes the touch
        // events, it just doesn't respond to them.
        return clickable;
    }
    
    // mTouchDelegate是View的代理，有代理的情况下回调用代理的onTouchEvent方法。
    
    if (mTouchDelegate != null) {
        if (mTouchDelegate.onTouchEvent(event)) {
            return true;
        }
    }

    // 从上面代码为clickable赋值时我们可以知道，不管View是不是disable状态，只要它的CLICKABLE和LONG_CLICKABLE有一个为true时，它就会消耗这个事件。

    if (clickable || (viewFlags &amp;amp; TOOLTIP) == TOOLTIP) {
        switch (action) {
            case MotionEvent.ACTION_UP:
                mPrivateFlags3 &amp;amp;= ~PFLAG3_FINGER_DOWN;
                if ((viewFlags &amp;amp; TOOLTIP) == TOOLTIP) {
                    handleTooltipUp();
                }
                if (!clickable) {
                    removeTapCallback();
                    removeLongPressCallback();
                    mInContextButtonPress = false;
                    mHasPerformedLongPress = false;
                    mIgnoreNextUpEvent = false;
                    break;
                }
                boolean prepressed = (mPrivateFlags &amp;amp; PFLAG_PREPRESSED) != 0;
                if ((mPrivateFlags &amp;amp; PFLAG_PRESSED) != 0 || prepressed) {
                    // take focus if we don't have it already and we should in
                    // touch mode.
                    boolean focusTaken = false;
                    if (isFocusable() &amp;amp;&amp;amp; isFocusableInTouchMode() &amp;amp;&amp;amp; !isFocused()) {
                        focusTaken = requestFocus();
                    }

                    if (prepressed) {
                        // The button is being released before we actually
                        // showed it as pressed.  Make it show the pressed
                        // state now (before scheduling the click) to ensure
                        // the user sees it.
                        setPressed(true, x, y);
                    }

                    if (!mHasPerformedLongPress &amp;amp;&amp;amp; !mIgnoreNextUpEvent) {
                        // This is a tap, so remove the longpress check
                        removeLongPressCallback();

                        // Only perform take click actions if we were in the pressed state
                        if (!focusTaken) {
                            // Use a Runnable and post this rather than calling
                            // performClick directly. This lets other visual state
                            // of the view update before click actions start.
                            if (mPerformClick == null) {
                                mPerformClick = new PerformClick();
                            }
                            if (!post(mPerformClick)) {
                            
                                // action_up事件会触发performClick方法，在performClick方法中调用了View的onClickListener监听器的onClick方法。
                                
                                performClick();
                            }
                        }
                    }

                    if (mUnsetPressedState == null) {
                        mUnsetPressedState = new UnsetPressedState();
                    }

                    if (prepressed) {
                        postDelayed(mUnsetPressedState,
                                ViewConfiguration.getPressedStateDuration());
                    } else if (!post(mUnsetPressedState)) {
                        // If the post failed, unpress right now
                        mUnsetPressedState.run();
                    }

                    removeTapCallback();
                }
                mIgnoreNextUpEvent = false;
                break;

            case MotionEvent.ACTION_DOWN:
                if (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) {
                    mPrivateFlags3 |= PFLAG3_FINGER_DOWN;
                }
                mHasPerformedLongPress = false;

                if (!clickable) {
                    checkForLongClick(0, x, y);
                    break;
                }

                if (performButtonActionOnTouchDown(event)) {
                    break;
                }

                // Walk up the hierarchy to determine if we're inside a scrolling container.
                boolean isInScrollingContainer = isInScrollingContainer();

                // For views inside a scrolling container, delay the pressed feedback for
                // a short period in case this is a scroll.
                if (isInScrollingContainer) {
                    mPrivateFlags |= PFLAG_PREPRESSED;
                    if (mPendingCheckForTap == null) {
                        mPendingCheckForTap = new CheckForTap();
                    }
                    mPendingCheckForTap.x = event.getX();
                    mPendingCheckForTap.y = event.getY();
                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());
                } else {
                    // Not inside a scrolling container, so show the feedback right away
                    setPressed(true, x, y);
                    checkForLongClick(0, x, y);
                }
                break;

            case MotionEvent.ACTION_CANCEL:
                if (clickable) {
                    setPressed(false);
                }
                removeTapCallback();
                removeLongPressCallback();
                mInContextButtonPress = false;
                mHasPerformedLongPress = false;
                mIgnoreNextUpEvent = false;
                mPrivateFlags3 &amp;amp;= ~PFLAG3_FINGER_DOWN;
                break;

            case MotionEvent.ACTION_MOVE:
                if (clickable) {
                    drawableHotspotChanged(x, y);
                }

                // Be lenient about moving outside of buttons
                if (!pointInView(x, y, mTouchSlop)) {
                    // Outside button
                    // Remove any future long press/tap checks
                    removeTapCallback();
                    removeLongPressCallback();
                    if ((mPrivateFlags &amp;amp; PFLAG_PRESSED) != 0) {
                        setPressed(false);
                    }
                    mPrivateFlags3 &amp;amp;= ~PFLAG3_FINGER_DOWN;
                }
                break;
        }

        return true;
    }

    return false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当action_up事件到来时会触发performClick方法，在performClick方法中调用了View的onClickListener监听器的onClick方法，所以至此我们应该知道onClick方法是在up事件发生后调用的，优先级最低。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean performClick() {
    final boolean result;
    final ListenerInfo li = mListenerInfo;
    if (li != null &amp;amp;&amp;amp; li.mOnClickListener != null) {
        playSoundEffect(SoundEffectConstants.CLICK);
        li.mOnClickListener.onClick(this);
        result = true;
    } else {
        result = false;
    }

    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);

    notifyEnterOrExitForAutoFillIfNeeded(true);

    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;到这里整个事件分发的源码基本分析完毕，大体总结一下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当点击事件产生后，会首先触发Activity的dispatchTouchEvent方法，在此方法中会将事件传递个PhoneWindow处理;&lt;/li&gt;
&lt;li&gt;在PhoneWindow的dispatch方法中又将事件传递个了DecorView的dispatchTouchEvent;&lt;/li&gt;
&lt;li&gt;接着DecorView又调用了父类ViewGroup的dispatchTouchEvent方法对事件进行了分发;&lt;/li&gt;
&lt;li&gt;在ViewGroup的dispatchTouchEvent方法中，首先先判断了自身是否拦截事件，如果拦截那么事件不再向其子View传递，如果不拦截就会遍历其所有的子View找到可以适合接收事件的子View并调用子View的dispatchTouchEvent方法。&lt;/li&gt;
&lt;li&gt;在子View的dispatchTouchEvent方法中对事件做相应处理。&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;&lt;em&gt;最后想说的是，本系列文章为博主对Android知识进行再次梳理，查缺补漏的学习过程，一方面是对自己遗忘的东西加以复习重新掌握，另一方面相信在重新学习的过程中定会有巨大的新收获，如果你也有跟我同样的想法，不妨关注我一起学习，互相探讨，共同进步！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参考文献：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;《Android开发艺术探索》&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 28 Jan 2018 15:04:00 +0000</pubDate>
<dc:creator>codingblock</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codingblock/p/8372807.html</dc:identifier>
</item>
<item>
<title>小白的Python之路 day5  logging模块 - 钱多多的妖孽人生</title>
<link>http://www.cnblogs.com/ManyQian/p/8372593.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/8372593.html</guid>
<description>

&lt;h2&gt;一、概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　很多程序都有记录日志的需求，并且日志中包含的信息即有正常的程序访问日志，还可能有错误、警告等信息输出，python的logging模块提供了标准的日志接口，你可以通过它存储各种格式的日志，logging的日志可以分为 &lt;span&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;debug()&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;info()&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;warning()&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;error()&lt;/span&gt;&lt;/code&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span&gt;critical()&lt;/span&gt; 5个级别，其中他们级别大小关系&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;strong&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;debug() &amp;lt;&lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;info() &lt;/span&gt;&lt;/code&gt;&amp;lt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;warning() &lt;/span&gt;&lt;/code&gt;&amp;lt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;error() &lt;/span&gt;&lt;/code&gt;&amp;lt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;critical()  级别越低打印的日记等级就越多&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面我们看一下他是怎样的用法。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;二、用法&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、最简单的用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; logging.debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; logging.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; logging.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user [qianduoduo] attempted wrong password more than 3 times&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; logging.error(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; logging.critical(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging critical&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; WARNING:root:user [qianduoduo] attempted wrong password more than 3&lt;span&gt; times
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;ERROR:root:logging error
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; CRITICAL:root:logging critical  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;root  就是默认的用户名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;重点：为什么上面debug和info没有输出，那是因为一个模块默认的日志级别是warning，比他级别低的就不会输出&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、日志级别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看一下这几个日志级别分别代表什么意思，如表：&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&quot;docutils&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;24%&quot;/&gt;&lt;col width=&quot;76%&quot;/&gt;&lt;/colgroup&gt;&lt;thead valign=&quot;bottom&quot;&gt;&lt;tr class=&quot;row-odd&quot;&gt;&lt;th class=&quot;head&quot;&gt;Level&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;When it’s used&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody valign=&quot;top&quot; readability=&quot;5.5&quot;&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;DEBUG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;详细的信息，通常只有在诊断问题时才感兴趣。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;INFO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;确认事情按预期工作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;WARNING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;3-0&quot; data-section=&quot;3&quot; data-sentence=&quot;0&quot;&gt;表明发生了意外的事情，或预示在不久的将来会出现一些问题(例如“磁盘空间低”)。&lt;span class=&quot;tgt&quot; data-group=&quot;3-1&quot; data-section=&quot;3&quot; data-sentence=&quot;1&quot;&gt;该软件仍按预期运行。&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;由于一个更严重的问题，软件无法执行某些功能。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;CRITICAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个严重的错误，表明程序本身可能无法继续运行。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3、将日记写入文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; logging.basicConfig(filename=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;duoduo.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,level=&lt;span&gt;logging.INFO)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; logging.debug(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;This message should go to the log file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; logging.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;So should this&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; logging.warning(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;And this, too&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#‘duoduo.log’文件&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;INFO:root:So should this
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; WARNING:root:And this, too   #这日记的级别设置在info，所以比他更低的debug不显示
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;重点： 如果我们想显示所有级别的日记就要把日记的等级设置为debug,就在level=logging.DEBUG，设置是级别的名称要大写&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、加入日期格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　感觉上面的日志格式忘记加上时间啦，日志不知道时间怎么行呢，下面就来加上&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; logging.basicConfig(filename=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;duoduo.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                     level=&lt;span&gt;logging.DEBUG,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     format=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;#&lt;/span&gt;&lt;span&gt;asctime字符串形式的当前时间，message用户输出的消息&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;                     datefmt=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %I:%M:%S %p &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; logging.debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; logging.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; logging.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user [qianduoduo] attempted wrong password more than 3 times&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; logging.error(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; logging.critical(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logging critical&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出到文件‘duoduo.log’&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 2018-01-27 07:33:30&lt;span&gt; PM  logging debug
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 2018-01-27 07:33:30&lt;span&gt; PM  logging info
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 2018-01-27 07:33:30 PM  user [qianduoduo] attempted wrong password more than 3&lt;span&gt; times
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 2018-01-27 07:33:30&lt;span&gt; PM  logging error
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 2018-01-27 07:33:30 PM  logging critical
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5、 format的日志格式&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td&gt;

&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;Logger的名字&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(levelno)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;数字形式的日志级别&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(levelname)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;文本形式的日志级别&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(pathname)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用日志输出函数的模块的完整路径名，可能没有&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(filename)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用日志输出函数的模块的文件名&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(module)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用日志输出函数的模块名&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(funcName)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用日志输出函数的函数名&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(lineno)d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;调用日志输出函数的语句所在的代码行&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(created)f&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;当前时间，用UNIX标准的表示时间的浮 点数表示&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(relativeCreated)d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;输出日志信息时的，自Logger创建以 来的毫秒数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(asctime)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(thread)d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;线程ID。可能没有&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(threadName)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;线程名。可能没有&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(process)d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;进程ID。可能没有&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;%(message)s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;用户输出的消息&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt; 6、log的&lt;span&gt;&quot;终极奥义&quot;&lt;/span&gt;用法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果想同时把log打印在屏幕和文件日志里，就需要了解一点复杂的知识 了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 使用logging模块记录日志涉及&lt;span&gt;四个主要类&lt;/span&gt;，使用官方文档中的概括最为合适：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、logger提供了应用程序可以直接使用的接口；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、handler将(logger创建的)日志记录发送到合适的目的输出；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、filter提供了细度设备来决定输出哪条日志记录；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、formatter决定日志记录的最终输出格式。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）、logger&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①每个程序在输出信息之前都需要获得一个logger。logger通常对应了程序的模块名，比如聊天工具的图形界面模块可以这样获得它的logger：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_596465&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;logging.getLogger(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;chat.gui&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;核心模块可以这样写：(自己想叫什么名称就叫什么名称)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_624521&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;logging.getLogger(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;chat.kernel&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;②logger.setLevel(lel)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：指定最低的日志级别，低于lel的级别将被忽略(debug是最低的内置级别，critical为最高)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_743411&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.setLevel(logging.DEBUG)  &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;③Logger.addFilter(filt)、Logger.removeFilter(filt)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：添加或删除指定的filter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;④logger.addHandler(hdlr)、logger.removeHandler(hdlr)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：增加或删除指定的handler&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_635795&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.addHandler(ch)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.removeHandler(ch) &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;⑤Logger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：可以设置的日志级别&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_335085&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.debug(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'debug message'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.info(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'info message'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.warn(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'warn message'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.error(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'error message'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;logger.critical(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'critical message'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;⑥获取handler个数&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_551504&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;div id=&quot;highlighter_551504&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_551504&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;handler_len &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;len&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(logger.handlers)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(handler_len)&lt;/code&gt;&lt;/p&gt;


&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2）、handler&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　handler对象负责发送相关的信息到指定目的地。Python的日志系统有多种Handler可以使用。有些Handler可以把信息输出到控制台，有些Logger可以把信息输出到文件，还有些 Handler可以把信息发送到网络上。如果觉得不够用，还可以编写自己的Handler。可以通过addHandler()方法添加多个多handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①Handler.setLevel(lel)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：指定被处理的信息级别，低于lel级别的信息将被忽略。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_730642&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;ch &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;logging.StreamHandler()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;ch.setLevel(logging.DEBUG)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;②Handler.setFormatter()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：给这个handler选择一个格式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_809610&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;ch_formatter &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;logging.Formatter(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;) &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;ch.setFormatter(ch_formatter) &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;③Handler.addFilter(filt)、Handler.removeFilter(filt)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：新增或删除一个filter对象&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;三、handler&quot;&lt;span&gt;终极奥义&lt;/span&gt;&quot;详解&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、logging.StreamHandler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息，也就是&lt;span&gt;屏幕输出&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它的构造函数是：StreamHandler([strm])，其中strm参数是一个文件对象，默认是sys.stderr。具体用法看下面代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; logger = logging.getLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TEST-LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)     
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;logger.setLevel(logging.DEBUG)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt; ch = logging.StreamHandler() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个StreamHandler对象&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; ch.setLevel(logging.DEBUG) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置输出StreamHandler日志级别&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;  
&lt;span&gt; 9&lt;/span&gt; ch_formatter = logging.Formatter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(name)s - %(levelname)s - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;格式&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; ch.setFormatter(ch_formatter)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;传入格式参数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; logger.addHandler(ch)       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;增加handler&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; logger.debug(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; logger.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; logger.warn(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warn message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; logger.error(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; logger.critical(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;critical message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;输出
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 2018-01-28 21:15:02,111 - TEST-LOG - DEBUG -&lt;span&gt; debug message
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 2018-01-28 21:15:02,112 - TEST-LOG - INFO -&lt;span&gt; info message
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 2018-01-28 21:15:02,112 - TEST-LOG - WARNING -&lt;span&gt; warn message
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 2018-01-28 21:15:02,112 - TEST-LOG - ERROR -&lt;span&gt; error message
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 2018-01-28 21:15:02,112 - TEST-LOG - CRITICAL - critical message
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2、logging.FileHandler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：和StreamHandler类似，用于向一个文件输出日志信息，不过FileHandler会帮你打开这个文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它的构造函数是：FileHandler(filename[,mode])。&lt;span&gt;filename是文件名，必须指定一个文件名。mode是文件的打开方式。&lt;/span&gt;参见Python内置函数open()的用法。默认是’a'，即添加到文件末尾。用法看下面代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;create logging&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; logger = logging.getLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TEST-LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;logger.setLevel(logging.DEBUG)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; fh = logging.FileHandler(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;日志输出到debug.log文件中&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; fh.setLevel(logging.INFO) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置FileHandler日志级别&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;  
&lt;span&gt;10&lt;/span&gt; fh_formatter = logging.Formatter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s %(module)s:%(levelname)s %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;fh.setFormatter(fh_formatter)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;logger.addHandler(fh)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; logger.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; logger.warning(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; logger.error(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; logger.critical(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;critical message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;文件debug.log里的输出：
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 2018-01-28 21:19:45,221&lt;span&gt; logging文件输出:INFO info message
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 2018-01-28 21:19:45,221&lt;span&gt; logging文件输出:WARNING warning message
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 2018-01-28 21:19:45,221&lt;span&gt; logging文件输出:ERROR error message
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 2018-01-28 21:19:45,221&lt;span&gt; logging文件输出:CRITICAL critical message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、logging.handlers.RotatingFileHandler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把 文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它的构造函数是：RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])，其中filename和mode两个参数和FileHandler一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;maxBytes用于指定日志文件的最大文件大小。&lt;span&gt;如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 用法看下面代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt; handlers  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;需要导入handlers&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; logger = logging.getLogger(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; log_file = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timelog.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按文件大小来分割，10个字节maxBytes，保留个数是3个&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3,encoding=&quot;utf-8&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; formatter = logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s %(module)s: %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;fh.setFormatter(formatter)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;logger.addHandler(fh)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test14&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;文件的结果就是
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; timelog.log     2018-01-28 21:31:38,513&lt;span&gt; logging文件个数保留: test15
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; timelog.log1   2018-01-28 21:31:38,500&lt;span&gt; logging文件个数保留: test14
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; timelog.log2    2018-01-28 21:31:38,487&lt;span&gt; logging文件个数保留: test13
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; timelog.log3    2018-01-28 21:31:38,471 logging文件个数保留: test12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4、logging.handlers.TimedRotatingFileHandler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，&lt;span&gt;不过新的文件不是附加数字，而是当前时间&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它的构造函数是：TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])，其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;interval是时间间隔。&lt;span&gt;when&lt;/span&gt;参数是一个字符串。&lt;span&gt;表示时间间隔的单位&lt;/span&gt;，不区分大小写。它有以下取值：&lt;span&gt;①S：秒②M：分③H：小时④D：天⑤W ：每星期（interval==0时代表星期一）⑥midnight：每天凌晨&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; logging &lt;span&gt;import&lt;/span&gt;&lt;span&gt; handlers
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  
&lt;span&gt; 5&lt;/span&gt; logger = logging.getLogger(“duoduo-&lt;span&gt;LOG”)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; log_file = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timelog.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按时间来分割文件，按5秒一次分割，保留日志个数是3个&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,interval=5,backupCount=3,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; formatter = logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s %(module)s: %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;fh.setFormatter(formatter)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;logger.addHandler(fh)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test14&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; logger.warning(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件输出&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这里就区分了两个，前面11,12,13属于一个文件的内容，后面14,15一个文件的内容，但是后面读秒少所以先创建的文件是后面的14,15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5、控制台和文件日志共同输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要什么样的输出，只需要添加相应的handler就ok了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/936656/201704/936656-20170413172847876-625973873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;create logging&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; logger = logging.getLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TEST-LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;logger.setLevel(logging.DEBUG)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;屏幕handler&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; ch =&lt;span&gt; logging.StreamHandler()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;ch.setLevel(logging.DEBUG)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件handler&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; fh = logging.FileHandler(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;fh.setLevel(logging.INFO)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;分别创建输出日志格式&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; ch_formatter = logging.Formatter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(name)s - %(levelname)s - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; fh_formatter = logging.Formatter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s %(module)s:%(levelname)s %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置handler的输出格式&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;ch.setFormatter(ch_formatter)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;fh.setFormatter(fh_formatter)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加handler&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;logger.addHandler(ch)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;logger.addHandler(fh)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;  
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'application' code&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; logger.debug(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; logger.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; logger.warn(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warn message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; logger.error(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; logger.critical(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;critical message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 注：如果添加时间分割或者文件大小分割，再修改上述代码写入文件的handler即可。&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 28 Jan 2018 14:01:00 +0000</pubDate>
<dc:creator>钱多多的妖孽人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/8372593.html</dc:identifier>
</item>
<item>
<title>引导图滤波（Guided Image Filtering）原理以及OpenCV实现 - 一棹烟波</title>
<link>http://www.cnblogs.com/riddick/p/8367591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/8367591.html</guid>
<description>&lt;p&gt;&lt;span&gt;引导图是一种自适应权重滤波器，能够在平滑图像的同时起到保持边界的作用，具体公式推导请查阅原文献《Guided Image Filtering》。这里只说一下自适应权重原理、C++实现灰度图像以及彩色图像的引导图滤波、验证结果。&lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;引导图为单通道&lt;br/&gt;分别算出I与P的均值图像，以及I²和I*P的均值图像；再求出I的方差图像，以及I*P的协方差图像；利用公式求出a和b的值；再窗口内对a和b求均值；再根据公式算出输出图像。&lt;br/&gt;这里又分为两种情况：&lt;br/&gt;①输入图为单通道：按照上述步骤计算即可。&lt;br/&gt;②输入图为三通道：先分离三个通道，对每个通道进行上述滤波操作，然后合并通道即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;引导图为三通道&lt;br/&gt;此时，将上述模型做了稍微修改，如下：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128211316037-1550480065.png&quot; alt=&quot;&quot; width=&quot;294&quot; height=&quot;156&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不同之处在于求a时将原来的方差σ替换为协方差3x3矩阵∑k，表示如下。U是3x3单位矩阵求出来的a将不再时一个值，而是一个1*3的向量，然后求b时，a为1*3的向量，μk为3*1的向量，相乘后为一常量，由此可以求得常量b的值。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128212010787-519098979.png&quot; alt=&quot;&quot; width=&quot;202&quot; height=&quot;107&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt;这里又分为两种情况：&lt;br/&gt;①输入图为单通道：按照上述步骤计算即可。&lt;br/&gt;②输入图为三通道：先分离三个通道，对每个通道进行上述滤波操作，然后合并通道即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;注：引导图为彩色图比引导图为灰度图，边界保护更加明显，见原文。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;效果验证&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;     &lt;/span&gt; &lt;span&gt;代码里面求均值部分，可以由OpenCV中的boxFilter（）函数实现，或者blur（）函数实现。总之是一个均值滤波器，之所以与窗口大小无关，是因为使用直方图实现的均值滤波，能够大大降低运算时间。VS2015+OpenCV3.4.0实现的代码放在我的码云code上：&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://gitee.com/rxdj/guidedFilter.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/rxdj/guidedFilter.git&lt;/a&gt;。&lt;br/&gt;      主要输入参数就是&lt;span&gt;引导图I，输入图P，窗口半径r，截断值&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ε，输出参数为滤波后图像Q。引导图I和输入图像P可以相同，也可以不同，比如stereo matching中常常用原参考图像作为引导图，对代价空间图进行引导图滤波以实现代价聚合。这样能尽量保留原图像边界区域的匹配代价，而平滑平坦区域的匹配代价。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;单通道灰度图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span readability=&quot;2.5&quot;&gt;&lt;span readability=&quot;5&quot;&gt;原图&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128213749756-1815434389.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;改变截断值ε&lt;br/&gt;  r=10, ε=0                            r=10,  ε=100            &lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128213609350-881361869.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128213319787-1336739389.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;r=10 , ε=800                          r=10, ε=2000 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128213429272-1030070354.png&quot; alt=&quot;&quot;/&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128215200240-1520345157.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;改变窗口半径r&lt;br/&gt; r=0， ε=500                                   r=5， ε=500 &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;           &lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214015256-343844990.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;    &lt;em id=&quot;__mceDel&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214032162-909343694.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;                      &lt;br/&gt;      &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;               r=10, ε=500                              r=20, ε=500 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;           &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214055084-531305935.png&quot; alt=&quot;&quot;/&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214115178-1766313194.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span readability=&quot;8.5&quot;&gt;&lt;span readability=&quot;17&quot;&gt;三通道彩色图&lt;br/&gt;原图&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214224162-1665821254.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;改变截断值ε&lt;br/&gt;  r=10, ε=0                            r=10,  ε=100                           &lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214408162-157423255.png&quot; alt=&quot;&quot;/&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214428022-2120795842.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;  &lt;br/&gt;r=10 , ε=800                          r=10, ε=2000 &lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214450506-618814567.png&quot; alt=&quot;&quot;/&gt;     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214506740-253431453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;改变窗口半径r&lt;br/&gt;r=0, ε=500                             r=5, ε=500                            &lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214532053-866952768.png&quot; alt=&quot;&quot;/&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214549256-1787624626.png&quot; alt=&quot;&quot;/&gt;    &lt;/p&gt;&lt;p&gt;r=10, ε=500                              r=20, ε=500 &lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214606740-1941773366.png&quot; alt=&quot;&quot;/&gt;    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1138496/201801/1138496-20180128214621694-2019568803.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 28 Jan 2018 13:51:00 +0000</pubDate>
<dc:creator>一棹烟波</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/8367591.html</dc:identifier>
</item>
<item>
<title>微软Azure AspNetCore微服务实战第2期 - 数据之巅</title>
<link>http://www.cnblogs.com/asxinyu/p/AzureAspNetCore_2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/asxinyu/p/AzureAspNetCore_2.html</guid>
<description>&lt;p&gt;2018年1月28日，虽然上海的大雪在城区已经见不到踪影，但还是很冷。不过天气再冷，也阻止不了小伙伴参加活动的热情。&lt;/p&gt;
&lt;p&gt;感谢王振，苏老师以及微软Azure API Management的产品经理Alvin，给大家带来微服务实战，企业级中后台前端解决方案和Auzre API相关新功能的讲解。&lt;/p&gt;
&lt;p&gt;下面分享活动照片和相关的PPT。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128210613100-1267936338.png&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;384&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128210642912-130860302.png&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;383&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128210748397-156119168.png&quot; alt=&quot;&quot; width=&quot;534&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128210816522-558024710.png&quot; alt=&quot;&quot; width=&quot;542&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128210940881-1717909722.png&quot; alt=&quot;&quot; width=&quot;563&quot; height=&quot;585&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128211719381-1794561708.png&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;719&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/79603/201801/79603-20180128211555194-850366620.png&quot; alt=&quot;&quot; width=&quot;549&quot; height=&quot;719&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面是活动的PPT讲义下载：&lt;a href=&quot;https://pan.baidu.com/s/1ggUOm8F&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1ggUOm8F&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 28 Jan 2018 13:18:00 +0000</pubDate>
<dc:creator>数据之巅</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/asxinyu/p/AzureAspNetCore_2.html</dc:identifier>
</item>
<item>
<title>Android之MaterialDesign应用技术 - CMusketeer</title>
<link>http://www.cnblogs.com/cmusketeer/p/8372062.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmusketeer/p/8372062.html</guid>
<description>&lt;p&gt;　　PS:纵观现在大大小小软件的界面都变的比较漂亮，还有一些系统了，比如小米的MIUI，华为的EMUI等，虽然底层都是安卓，但他们的界面多多少少都会不同，谷歌对这个UI也是非常重视的，&lt;a href=&quot;https://baike.baidu.com/item/Material%20Design/16011141?fr=aladdin&quot; target=&quot;_blank&quot;&gt;MaterialDesign&lt;/a&gt;就是今天的主角，首先在看这个的同时，要搞清楚什么是Material Design，百度百科解释，中文名：材料设计语言，是由&lt;a href=&quot;https://baike.baidu.com/item/Google&quot; target=&quot;_blank&quot;&gt;Google&lt;/a&gt;推出的全新的设计语言，谷歌表示，这种设计语言旨在为手机、平板电脑、台式机和“其他平台”提供更一致、更广泛的“外观和感觉”。design，中文是设计之意，即“设想和计划，设想是目的，计划是过程安排”，通常指有目标和计划的创作行为、活动。在这个竞争激烈的数字化信息时代，企业建立自己的网站已经刻不容缓。无论大、中、小型企业，都决不能被时代所淘汰，所以，建设网站是企业把握时代脉搏，衡量企业是否跟上时代的标准。精明的经营者懂得并擅于用最先进的媒体--互联网，树立企业形象，宣传企业产品。企业建立网站，是企业在&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%97%B6%E4%BB%A3&quot; target=&quot;_blank&quot;&gt;网络时代&lt;/a&gt;的企业舞台中展现自身实力和寻求发展的重要途径。&lt;/p&gt;
&lt;p&gt;　　网上冲浪，这是一个很有意思的事情，可以看到最新的工程师的动态，最新的技术和该技术的广泛性，网上有很多人写过这个design文章，但一般都没有写滑动删除和滑动标题悬浮等功能，这个标题悬浮和那个tablayout吸顶差不多一个概念，都是增强了用户的视觉，使用户有更好的体验。废话不多说，列重点&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;滑动删除及撤销（SwipeDismissBehavior，Snackbar）&lt;/li&gt;
&lt;li&gt;滑动列表控制控件消失和出现&lt;/li&gt;
&lt;li&gt;实现下滑动悬浮效果&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这之前，首先添加依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
　  compile 'com.android.support:appcompat-v7:25.3.1'
   compile 'com.android.support:support-v4:25.3.1'
   compile 'com.android.support:design:25.3.1'
   compile 'com.android.support:recyclerview-v7:25.3.1'
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1：滑动删除及撤销&lt;/h2&gt;
&lt;p&gt;例子：一个textview滑动消失，撤销恢复。&lt;/p&gt;
&lt;p&gt;　　效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180128172257865-422333674.gif&quot; alt=&quot;&quot; width=&quot;347&quot; height=&quot;555&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.1:创建布局文件design_main_layout.xml&lt;/p&gt;
&lt;p&gt;这个布局文件非常简单，只有一个CoordinatorLayout和TextView,但是CoordinatorLayout是重点，滑动控件什么的都和他有关，他也是一个布局，和线性布局什么的都一样用，该布局是协调控件之间的联系的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;!--协调者布局--&amp;gt;
&amp;lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    android:orientation=&quot;vertical&quot;&amp;gt;
    &amp;lt;TextView
        android:id=&quot;@+id/id_tv&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:textSize=&quot;30dp&quot;
        android:clickable=&quot;true&quot;
        android:layout_gravity=&quot;center&quot;
        android:background=&quot;#a8aace&quot;
        android:text=&quot;滑动我试试&quot;/&amp;gt;
&amp;lt;/android.support.design.widget.CoordinatorLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 1.2：Activity具体代码&lt;/p&gt;
&lt;p class=&quot;brush:java;gutter:true;&quot;&gt;SwipeDismissBehavior主要是控制控件的行为，LayoutParams是布局参数，textview这个控件是在协调者布局中滑动的，所以，要获取该布局的参数，然后再设置行为。behavior.setListener(this);这一行是必须写的，如果不写的话，就算滑掉了，按照原轨迹再滑过来，还是会显示的，他只是我们看不到了而且，通道还在。&lt;/p&gt;
&lt;p class=&quot;brush:java;gutter:true;&quot;&gt;ViewCompat.animate(tv1).alpha(1).start();则是显示滑掉的内容。&lt;/p&gt;
&lt;p class=&quot;brush:java;gutter:true;&quot;&gt;Snackbar的用法，我想大家一看就能懂，这就不多说了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
        tv1 = (TextView) findViewById(R.id.id_tv);
        CoordinatorLayout.LayoutParams cLayout=(CoordinatorLayout.LayoutParams) tv1.getLayoutParams();
        //第一种滑动方法
        SwipeDismissBehavior&amp;lt;TextView&amp;gt; behavior = new SwipeDismissBehavior&amp;lt;&amp;gt;();
        //如果不写监听的话,滑动消失后,还可再滑动出现。
        behavior.setListener(this);
        cLayout.setBehavior(behavior);

&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 该滑动删除还是比较简单的，相比那些还要计算坐标的方法简单多了，&lt;/p&gt;
&lt;p&gt;在这里有一个重点就是behavior的监听，有两个方法要重写，而且是关键方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 @Override
    public void onDismiss(View view) {
        view.setVisibility(View.GONE);
        Snackbar.make(view,&quot;删除控件&quot;,Snackbar.LENGTH_LONG)
                .setAction(&quot;撤销&quot;,new View.OnClickListener(){
                    @Override
                    public void onClick(View v) {
                        tv1.setVisibility(View.VISIBLE);
                        //显示,设置通道为1,因为Gone以后,通道就是0了。
                        ViewCompat.animate(tv1).alpha(1).start();
                    }
                }).show();
    }

    @Override
    public void onDragStateChanged(int state) {

    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2：滑动列表控制控件消失和出现&lt;/h2&gt;
&lt;p&gt;例子：一个recyclerview，往下滑，则返回顶部图标显示，往上滑图标不显示，&lt;/p&gt;
&lt;p&gt;原因:在很多段子软件中，会有大量的文字和图片，当用户往下翻的时候，也就是说内容会不断的在上方消失，下面的内容不算的刷新出来，这时右下角出现一个辅助用户回到顶部的按钮，因为在往上翻时候可能加载的了很多，有些用户就像一步到达顶部，这就出现了滑动监听。&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180128183651600-958044211.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.1：创建布局文件&lt;/p&gt;
&lt;p&gt;外层是协调者布局，中间就是一个类似于listview的RecyclerView，和一个右下角的返回顶部按钮。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;android.support.v7.widget.RecyclerView
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:id=&quot;@+id/id_rview&quot;
        app:layoutManager=&quot;LinearLayoutManager&quot;
        &amp;gt;&amp;lt;/android.support.v7.widget.RecyclerView&amp;gt;

    &amp;lt;ImageView
       
        android:id=&quot;@+id/id_img&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:textSize=&quot;30dp&quot;
        android:clickable=&quot;true&quot;
        android:layout_gravity=&quot;bottom|right&quot;
        android:layout_marginBottom=&quot;20dp&quot;
        android:layout_marginRight=&quot;20dp&quot;

        android:src=&quot;@mipmap/shoubu&quot;
        /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 2.2：创建自定义Adapter和Behavior&lt;/p&gt;
&lt;p&gt; 这里的适配器和继承baseadapter类似，里面都是数据和泛型，但是该适配器是写了Viewholder，onBindViewHolder返回数据项，onCreateViewHolder（）方法是加载控件的，也就是样式，返回值 是一个对象。&lt;/p&gt;
&lt;p&gt;适配器因为不是重点，这里就不多说了，大家知道这是一个传入list&amp;lt;String&amp;gt;的RecyclerView适配器就行&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class MyAdapter extends RecyclerView.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt;{
    public Context context;
    private List&amp;lt;String&amp;gt; list;
    public MyAdapter(Context context, List&amp;lt;String&amp;gt; list) {
        this.context = context;
        this.list = list;
    }
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        TextView view =new TextView(context);
        return new RecyclerView.ViewHolder(view){};
    }
    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        ((TextView)holder.itemView).setText(list.get(position));
    }
    @Override
    public int getItemCount() {
        return list.size();
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 行为：继承协调者布局中的Behavior,实现其中的两个方法。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
实现上下滑动监听处理方法，其中的scaleX（0）和Y（0）是不显示，为1则显示。两个方法都有关键作用，一个是滚动时，关心该事件，一个是开始滚动，监听该事件。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class MyBehavior extends CoordinatorLayout.Behavior {
    @Override
    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {//滚动发生时，关心该事件。
        return true;
    }

    /**滚动开始时，监听该事件。
     * 滚动监听*/
    @Override
    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {
        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);
        if(dy &amp;lt; 0){
            ViewCompat.animate(child).scaleX(0).scaleY(0).start();
        }else{
            ViewCompat.animate(child).scaleX(1).scaleY(1).start();//显示和不显示
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2.3：Activity中逻辑处理代码&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过id找到控件&lt;/li&gt;
&lt;li&gt;然后赋值&lt;/li&gt;
&lt;li&gt;然后添加适配器&lt;/li&gt;
&lt;li&gt;然后添加行为&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
        img = (ImageView) findViewById(R.id.id_img);
        final List&amp;lt;String&amp;gt; list=new ArrayList&amp;lt;&amp;gt;();
        //添加数据
        final RecyclerView recyclerView= (RecyclerView) findViewById(R.id.id_rview);
        for(int i=0;i&amp;lt;100;i++){
            list.add(&quot;wo shi &quot;+i);
        }
        myAdapter = new MyAdapter(this,list);
        recyclerView.setAdapter(myAdapter);
        CoordinatorLayout.LayoutParams cLayout=(CoordinatorLayout.LayoutParams) img.getLayoutParams();

        MyBehavior myBehavior=new MyBehavior();
        cLayout.setBehavior(myBehavior);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 关键来了，那么返回顶部的按钮代码怎么写呢，其实呢，这就是更新一下适配就行了，这里我把更新后的数据改了，为了的就让大家可以看清刷新了，&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 img.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
               myAdapter.notifyDataSetChanged();
                //为了显示出返回顶部成功,我把数据换了,可以让大家看清变化。
                list.clear();
                for(int i=0;i&amp;lt;100;i++){
                    list.add(&quot;更新后: &quot;+i);
                }
                myAdapter=new MyAdapter(DesignMainActivity.this,list);
                recyclerView.setAdapter(myAdapter);
                Toast.makeText(DesignMainActivity.this, &quot;顶部定位成功&quot;, Toast.LENGTH_SHORT).show();
            }
        });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;总结：该效果用普通的计算坐标方法也是可以实现的，但是这样的方法比较简单，起码不用太费脑子也能实现自己想要的方法。&lt;/p&gt;
&lt;h2&gt; 3:实现下滑动悬浮效果&lt;/h2&gt;
&lt;p&gt;悬浮效果和tablayout什么的效果是一样的，这个现象是为了让用户知道时时刻刻在浏览页面的标题是什么，增强的了用户的体验。&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180128203603350-1047086696.gif&quot; alt=&quot;&quot; width=&quot;373&quot; height=&quot;597&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个是总的效果图，根据属性的不通，实现的效果也是不一样的。比如说，toolbar在何时显示，可以选择只要是上滑就显示，也可以选择是滑到最上面的内容才显示，这个例子就是滑动到最上面的内容toolbar再显示。&lt;/p&gt;
&lt;p&gt;3.1：创建xml文件&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重点：一个是菜单列表----(悬停效果）这个textview 要写在toolbar下面，AppBarLayout里面，否侧不会出现这样的效果，app:layout_scrollFlags=&quot;scroll|enterAlwaysCollapsed&quot;这个就是说明toolbar在何时显示。RecyclerView中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;方法是必须写的，因为coordinatorlayout和帧布局相似，会覆盖，在帧布局中写上id然后说在某个控件下面或者上面就可以，这个布局就要写app:layout_behavior即可。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;android.support.design.widget.AppBarLayout
        android:layout_width=&quot;match_parent&quot;
        app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;
        android:layout_height=&quot;wrap_content&quot;&amp;gt;
        &amp;lt;android.support.v7.widget.Toolbar
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;?actionBarSize&quot;
            app:layout_scrollFlags=&quot;scroll|enterAlwaysCollapsed&quot;
            android:id=&quot;@+id/id_toolbar&quot;/&amp;gt;
        &amp;lt;TextView
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:text=&quot;----菜单列表----(悬停效果)&quot;/&amp;gt;
    &amp;lt;/android.support.design.widget.AppBarLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3.2：Activity中逻辑处理&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 Toolbar toolbar = (Toolbar) findViewById(R.id.id_toolbar);
        setSupportActionBar(toolbar);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加即可。这样就Ok了；  &lt;/p&gt;
&lt;p&gt;总结：这里的代码虽然看着少，那是因为大部分代码都被封装好了，我们一开始添加的依赖就是封装好的包，悬停效果能够给人一个很好的体验，当你在翻一个软件简介的时候，无论翻多少行，标题始终都会在上头悬浮，而且，悬浮的地方还可以添加点击监听，这都是可以自定义的。&lt;/p&gt;

</description>
<pubDate>Sun, 28 Jan 2018 12:50:00 +0000</pubDate>
<dc:creator>CMusketeer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmusketeer/p/8372062.html</dc:identifier>
</item>
</channel>
</rss>