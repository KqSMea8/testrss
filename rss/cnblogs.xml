<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JS刷题总结 - 汕大小吴</title>
<link>http://www.cnblogs.com/wuguanglin/p/SummaryOfJSDoAlgorithmProblem.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuguanglin/p/SummaryOfJSDoAlgorithmProblem.html</guid>
<description>&lt;p&gt;多总结，才能更好地进步，分享下最近的刷题总结给大家吧&lt;/p&gt;
&lt;h3&gt;关于缩减代码&lt;/h3&gt;
&lt;p&gt;1.善用js中的函数或者特性。&lt;/p&gt;
&lt;p&gt;（迭代、解构、set等等）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用箭头函数缩减代码&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;处理输入，可以用.map，需要注意其所有参数&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;此外其他迭代方法也需要掌握。&lt;/span&gt;
let line=readline().split(&quot; &quot;&lt;span&gt;);
line&lt;/span&gt;=line.map(e=&amp;gt;&lt;span&gt;parseInt(e));

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去重&lt;/span&gt;
arr=[...&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Set(arr)];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;升序,排序可以用sort，默认是字典序,并且可以根据需要定制，需要深入掌握&lt;/span&gt;
arr.sort((a,b)=&amp;gt;a-&lt;span&gt;b);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代输出&lt;/span&gt;
arr.forEach(i=&amp;gt;&lt;span&gt;console.log(i));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求最大值，使用扩展运算符...&lt;/span&gt;
max=&lt;span&gt;Math.max.call(...arr);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 复制数组&lt;/span&gt;
arr2=&lt;span&gt;arr.concat();
arr2&lt;/span&gt;=&lt;span&gt;arr.slice();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;善用解构&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;变量赋值&lt;/span&gt;
let [a,b,c,d,e]=[1,2,3,4,5];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a=1,b=2,c=3,d=4,e=5&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;交换变量值&lt;/span&gt;
[a,b]=&lt;span&gt;[b,a];&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;题外话：字符串中的字符是无法交换的&lt;/span&gt;
let str=&quot;ab&quot;&lt;span&gt;;
[str[&lt;/span&gt;0],str[1]]=[str[1],str[0]];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无效，&quot;ab&quot;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;不过可以将字符串拆成字符数组后就可以交换了&lt;/span&gt;
str=str.split(&quot;&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;a&quot;,&quot;b&quot;]&lt;/span&gt;
[str[0],str[1]]=[str[1],str[0]];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;b&quot;,&quot;a&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.善用位运算。&lt;/p&gt;
&lt;p&gt;（相信我，能用位运算的就用位运算）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求数组一半长度&lt;/span&gt;
halfLen=a.length&amp;gt;&amp;gt;1&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;~~等价于Math.floor(),|0也等价于Math.floor()&lt;/span&gt;
halfLen=~~(a.length/2);
halfLen=(a.length/2)|0;&lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断奇偶&lt;/span&gt;
evenNum&amp;amp;1==0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;偶数&lt;/span&gt;
oddNum&amp;amp;1==1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;奇数&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;善用异或&lt;/span&gt;
5^5=0
5^5^6^6^7=7
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.善用正则表达式。&lt;/p&gt;
&lt;p&gt;（只要关于字符串的题目都应该联想到用正则表达式）&lt;/p&gt;
&lt;p&gt;要会写正则，可以用正则表达式的几个函数也要掌握&lt;/p&gt;
&lt;p&gt;正则中：exec，test&lt;/p&gt;
&lt;p&gt;字符串中：search，match，replace，split&lt;/p&gt;
&lt;p&gt;具体例子可以看我的：&lt;a href=&quot;https://www.nowcoder.com/discuss/70412&quot; target=&quot;_blank&quot;&gt;百词斩题解第一题经验&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.少写函数。&lt;/p&gt;
&lt;p&gt;刷题不是写业务代码，没有说要封装重用，AC才是王道。&lt;/p&gt;
&lt;p&gt;并且写函数还要思考需要哪些参数，参数如何传递，会影响思考速度。&lt;/p&gt;
&lt;p&gt;我们尽量做到的是，思考清楚后直接敲，越快越好，而不是一遍敲一边思考。&lt;/p&gt;

&lt;p&gt;5.递归函数。&lt;/p&gt;
&lt;p&gt;前面情况有例外，比如要写递归，就要写函数。递归函数可以减少代码。&lt;/p&gt;
&lt;p&gt;不过还是建议用递归思想去想，用循环搭配数据结构（栈/队列）去解答&lt;/p&gt;

&lt;h3&gt;关于刷题方法&lt;/h3&gt;
&lt;p&gt;1.审题先判断陷阱。&lt;/p&gt;
&lt;p&gt;看到题目第一先看是否有时间复杂度、空间复杂度的要求。（比如大数问题、递归多了栈溢出等问题）&lt;/p&gt;
&lt;p&gt;根据自己猜测判断使用简单方法，还是复杂方法来做，毕竟我们没有时间去做两遍题目。&lt;/p&gt;
&lt;p&gt;然后再顺便看下是否需要判断边界条件（一般都需要出错判断）&lt;/p&gt;
&lt;p&gt;有时间复杂度要求的，可以优化排序、动态规划、以空间换时间等&lt;/p&gt;
&lt;p&gt;有空间复杂度要求的，可以用循环代替递归、动态规划代替递归等&lt;/p&gt;
&lt;p&gt;这里讲下为什么不说贪心，第一理论上所有贪心可以解决的问题都可以用动态规划来做，第二正因如此，许多公司难题也就只考到了动态规划。&lt;/p&gt;
&lt;p&gt;所以请一定一定要掌握&lt;span&gt;&lt;strong&gt;动态规划。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2.联想。&lt;/p&gt;
&lt;p&gt;我们遇到题目时要把题目和以前做过的题联想下，通过类似点，找出突破点。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;字符串问题====》正则&lt;/li&gt;
&lt;li&gt;链表、数组问题====》双指针&lt;/li&gt;
&lt;li&gt;数组问题====》利用数组下标来做====》有时需要额外数组&lt;/li&gt;
&lt;li&gt;多维数组问题====》降维来做。&lt;/li&gt;
&lt;li&gt;复杂问题、优化问题====》动态规划&lt;/li&gt;
&lt;li&gt;排列问题====》递归、回溯&lt;/li&gt;
&lt;li&gt;数论问题====》找规律、动态规划&lt;/li&gt;
&lt;li&gt;树的问题====》递归、深度遍历、广度遍历====》栈、队列&lt;/li&gt;
&lt;li&gt;次数问题====》哈希表存储（js中建议使用{}，而不要使用ES6中的Map）&lt;/li&gt;
&lt;li&gt;大小值问题====》栈、队列、哈希表做存储&lt;/li&gt;
&lt;li&gt;从前往后、从大到小比较复杂====》从后往前、从小到大思考。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态规划重点了解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位运算也了解一下&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.必须掌握算法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快排和归并排序、深度和广度遍历、二分查找（能手撕）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态规划、回溯法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要专门根据题目分类去刷这些算法。&lt;/p&gt;

&lt;p&gt;4.多画图。&lt;/p&gt;
&lt;p&gt;对于涉及数据结构的题目，如链表、二叉树等一定要画图。&lt;/p&gt;
&lt;p&gt;对于涉及概率的问题，可以画圈圈来交、并、补。&lt;/p&gt;
&lt;p&gt;对于点线的问题，可以画坐标系。&lt;/p&gt;

&lt;p&gt;5.多举例&lt;/p&gt;
&lt;p&gt;对于复杂问题可以举不复杂的小例子来分析步骤。&lt;/p&gt;
&lt;p&gt;对于数论问题可以举例子来找规律。&lt;/p&gt;
&lt;p&gt;退一万步来说，假设你实在不会做，你也可以通过举例，自己if-else生产很多测试用例去满足题意。&lt;/p&gt;
&lt;p&gt;这也是为什么我们刷题时，题目不会像剑指offer题目一样，告诉你的答案和题目的测试用例有哪些不同的原因。&lt;/p&gt;

&lt;p&gt;6.剩下的能淘汰你的只有智力题了。&lt;/p&gt;


&lt;p&gt;有些忘记了，暂时想到的先写这么多了，慢慢补充，有好的建议都可以发给我&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 23:48:00 +0000</pubDate>
<dc:creator>汕大小吴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuguanglin/p/SummaryOfJSDoAlgorithmProblem.html</dc:identifier>
</item>
<item>
<title>回收 PV - 每天5分钟玩转 Docker 容器技术（152） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8742573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8742573.html</guid>
<description>&lt;p&gt;&lt;span&gt;当 PV 不再需要时，可通过删除 PVC 回收。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408054950799-1493152200.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当 PVC &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypvc1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 被删除后，我们发现 Kubernetes 启动了一个新 Pod &lt;/span&gt;&lt;code&gt;&lt;span&gt;recycler-for-mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这个 Pod 的作用就是清除 PV &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的数据。此时 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的状态为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Released&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，表示已经解除了与 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypvc1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 Bound，正在清除数据，不过此时还不可用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当数据清除完毕，&lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的状态重新变为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Available&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，此时则可以被新的 PVC 申请。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408055010640-256851293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;/nfsdata/pv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件已经被删除了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;因为 PV 的回收策略设置为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Recycle&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，所以数据会被清除，但这可能不是我们想要的结果。如果我们希望保留数据，可以将策略设置为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Retain&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408055020148-213886399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 更新 PV：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408055032465-299781475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;回收策略已经变为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Retain&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，通过下面步骤验证其效果：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408055044689-679388318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;① 重新创建 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypvc1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;② 在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中创建文件 &lt;/span&gt;&lt;code&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;③ &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态变为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Released&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;④ Kubernetes 并没有启动 Pod &lt;/span&gt;&lt;code&gt;&lt;span&gt;recycler-for-mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ PV 中的数据被完整保留。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;虽然 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的数据得到了保留，但其 PV 状态会一直处于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Released&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，不能被其他 PVC 申请。为了重新使用存储资源，可以删除并重新创建 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。删除操作只是删除了 PV 对象，存储空间中的数据并不会被删除。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180408055059535-739397278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;新建的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mypv1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Available&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，已经可以被 PVC 申请。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;PV 还支持 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的回收策略，会删除 PV 在 Storage Provider 上对应存储空间。NFS 的 PV 不支持 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，支持 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 Provider 有 AWS EBS、GCE PD、Azure Disk、OpenStack Cinder Volume 等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们学习 PV 的动态供给功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 22:17:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8742573.html</dc:identifier>
</item>
<item>
<title>4-51单片机WIFI学习(开发板51单片机自动冷启动下载原理) - 杨奉武</title>
<link>http://www.cnblogs.com/yangfengwu/p/8757036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfengwu/p/8757036.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一篇链接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/8743936.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yangfengwu/p/8743936.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一篇说一下自己板子的51单片机自动冷启动下载原理,我挥舞着键盘和鼠标,发誓要把世界写个明明白白,突然想起来第一行代码的那句话了.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当接上usb线连接到电脑上的时候&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看一下RTS引脚的变化,这个信号是连络信号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408161407398-75420071.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以很多用继电器实现的自动下载在接上电的时候会先啪啪啪的动作一下继电器&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;说一下当点击下载的时候CH340G的RTS和DTR引脚的变化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先说一下平时RTS和DTR都是高电平,正常的串口通信也是高电平,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载的时候会变化,这样的时候也会变化 &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408161813455-1592428326.png&quot; alt=&quot;&quot; width=&quot;207&quot; height=&quot;214&quot;/&gt;不过只有第一次打开使用的时候才会有信号,其余都是高电平&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408160810938-1753796108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 按照上面的接法当点击&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408160855515-1746026239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408160938874-529371238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408161009081-610343045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408161037595-900325253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408161051576-687569063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;   &lt;span&gt;咱们就是利用这个信号,其实应该利用两个信号,我是为了简单实用所以只用的RTS信号&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的最初的想法是在RTS来一个下降沿的时候触发一个什么延时电路控制一个三极管或者场效应管(管子为51提供电源),断电,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408163242228-1573030369.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 不知道亲们看没看过我这篇文章&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/4933033.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yangfengwu/p/4933033.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用74hc123是最好的选择&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408163714174-1988466797.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我把RTS的信号接到123的A引脚上来一个下降沿Q引脚就会输出一个高脉冲,脉冲的时间利用电阻R和电容C控制,然后Q引脚接到PNP三极管&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或者P沟道的场效应管上就可以实现,点击一下下载单片机就会断电上电,然后程序就下进去了,自己没有用123是因为123的引脚太多...占空间................&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;  看一下我的原理图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408162242415-2135999603.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 先说NE555的电路&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408164156956-1498641310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;这种接法是NE555的2引脚来一个低电平3脚就会输出一个高脉冲(脉冲时间由C25和R66决定),记住2引脚是来一个低脉冲信号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408164326597-592872951.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果2引脚一直是低电平那么3脚就会一直输出高....&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里就不说大约延时的时间了亲们可以自己去查资料,或者直接示波器去量,因为我也不知道...................&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我的做法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408164803488-2116445832.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一开始稳定的时候2脚是高电平,当RTS来一个低电平,由于是突然一下子,电容(可以用一个电容就可以)以为是交流电呢,所以低电平就过来了,2脚是低电平,3脚开始输出高电平,如果RTS保持了低电平一会电容开始充电哈,然后2脚又变成了高电平,这样的话2脚就相当于来了一个低脉冲.3脚会根据延时多少再变回低电平.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408165301766-1122288881.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过呢实际的信号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408165927649-964211846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408174223180-1992000972.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408175103185-1776061810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180408174239328-891529976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;一通电的时候,2引脚是高电平而且电压大于了A2比较器的反向输入端  所以S输出高  S=1;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常理来讲&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409045704227-839973201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;6引脚和7引脚突然的一上电由于有电容C25(先给电容充电)所以6引脚和7引脚应该是低电平(不是真的低,是不太高的电平)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然5脚也接了一个电容,但是呢,容值小一点,所以5脚是大于6脚的,所以R也是1......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;都是1不定态..........现在就要看不定态输出的数高还是低了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我用示波器看的,测量的3引脚和6引脚,发现都是低电平,当然一上电的时候稍微有一点高的波动(电压不是很高大约0.5V的波动)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以一上电的时候Q输出的是1  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;里面的三极管导通&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以6,7引脚输出的都是低电平&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在呢让2引脚来一个低脉冲信号(只要小于1/3的VCC)就会小于比较器的反向输入端,记得哈是低脉冲信号,最后2是高电平,所以S输出0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;R咱知道是1,所以 &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409051408473-148645676.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后  &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409051427657-78664924.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经过了一个非门 所以3输出高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然因为Q是0所以三极管截止,,,开始给C25充电&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设2脚中途没有信号过来了,当充电达到6脚电压大于5脚电压的时候经过比较器,所以R==0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409051854387-1265294438.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在3脚就会输出低电平,三极管也会导通,又开始给电容放电......................然后又变成了原来的样子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设2引脚中途又有低脉冲信号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409052056914-1446478276.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2引脚先来下降沿的时候,按照上面说的3引脚确实输出1;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在呢又来了一个上升沿,来上升沿的时候6引脚的电压还没大于5引脚的电压呢,,,因为我放的电容和电阻较大,充电慢些,所以R输出1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;R=1,S=1,不定态,,,,,,一看3脚电压输出的是低................................不定态的时候Q输出的是1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以才会造成了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409053126655-1658578874.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当然可以前级加一些电路让它只有一个下降沿,我是为了用的芯片最少&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409053427490-873728206.png&quot; alt=&quot;&quot;/&gt;  这个电容最好是用有极性的,我用10UF是因为自己板子上常用10UF的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个充电的电阻最好大于20K,让单片机有充足的断电时间,单片机的电路可千万别加储能电容哈,,,,要是有的话还要考虑放电&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;亲们可以根据自己的信号去分析别人的一键下载哈,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有一个地方要说一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819239/201804/819239-20180409053855640-472490349.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4引脚接电容然后接5V和接GND,RTS,DTR产生的信号是不一样的,后期用示波器测量后补上,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有时候参考资料只是参考资料,很多东西还是要靠自己动手去实践,实践才出真知.很多人都喜欢用懒来给自己找借口,你自己不做出改变,谁都救不了你,你也别指望谁会救你,你要靠自救.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么我接电容然后5V,因为自己测试发现如果接一个电容接地,有时候会出现无法识别设备....&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 21:55:00 +0000</pubDate>
<dc:creator>杨奉武</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfengwu/p/8757036.html</dc:identifier>
</item>
<item>
<title>优秀程序员具备的高效习惯，你具备吗？ - 陈树义</title>
<link>http://www.cnblogs.com/chanshuyi/p/talke_about_active_passive_learning.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chanshuyi/p/talke_about_active_passive_learning.html</guid>
<description>&lt;p&gt;我在&lt;a href=&quot;http://www.cnblogs.com/chanshuyi/p/www.cnblogs.com/chanshuyi/p/alibaba_review_3_level.html&quot;&gt;《聊聊阿里面试的三个层次》&lt;/a&gt;中说到阿里的面试要求，其中有一个读者看完觉得很困惑，觉得这些知识点平时都用不着，如何去学习这些知识才能保证学习质量呢？&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我有个迷茫的地方在于，这些知识点如果在工作中都用不上，应该怎么保证学习的效果呢，面试的时候又该怎么聊呢。例如很多软件系统(ERP、财务、税务等内部信息系统)其实核心在于实现业务逻辑，就是基于业务的CRUD，高并发、分布式这些技术都用不上，做的时间长了技术深度广度都没有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现实中确实存在像这位读者说的情况，但我们稍微仔细想一下我们身边的人，你会发现总会有几个人，他们能不断进步。虽然他们起点低，但是通过不断努力，却可以取得不错的成绩。那他们到底掌握了什么学习技巧，能让他们不断进步呢？&lt;/p&gt;
&lt;p&gt;答案很简单，那就是主动学习。&lt;/p&gt;
&lt;h2 id=&quot;什么是主动学习&quot;&gt;什么是主动学习&lt;/h2&gt;
&lt;p&gt;我的一个朋友小黑，他在公司里做的任务都是一些业务性的需求，并且都是增删改查类型的，对于技术方面的历练比较少。但小黑并不因此而闷闷不乐，反而细致地把每一个需求都做好，并且需求做完都会思考怎么才能做得更好。&lt;/p&gt;
&lt;p&gt;而在工作之余，他也主动地学习 Spring、Dubbo 等开源框架的源码，了解这些框架的原理。就这样过了一段时间，公司因为后台架构调整，成立了架构组自行研发技术框架，这时候小黑因为之前对于开源框架的深入研究，比其他人有了更深刻的理解，而进入了架构组。&lt;/p&gt;
&lt;p&gt;从小黑身上我们可以看到，一个主动学习的人，他并不会局限于公司的层面，他除了学习公司本身的技术之外，还会思考怎么样去优化项目的技术，业界有什么更好的解决方案，从而不断学习不断成长。&lt;/p&gt;
&lt;p&gt;与主动学习密切相关的，是被动学习。&lt;/p&gt;
&lt;h2 id=&quot;什么是被动学习&quot;&gt;什么是被动学习&lt;/h2&gt;
&lt;p&gt;当小黑进入架构组之后，他会发现自己之前学习的东西还远远不够，要自行研发框架所需要学习更多的知识。于是在这样的压力之下，小黑又不断地学习更多的资料，更加深入地研究各个框架的源码。&lt;strong&gt;在外界（项目、排期、工作）的压迫之下，你不得不去学习的成长方式，就是被动学习。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个人只会被公司的项目推着走，公司需要什么知识，他就只学什么知识，那么久而久之他会发现自己一直处于原地踏步的状态，没有进步。这个时候如果遇到一些技术变动或者人事变动，就很容易产生辞职的念头。&lt;/p&gt;
&lt;p&gt;从小黑的例子来看，你会发现其实主动学习和被动学习都是相辅相成的。当你没有高并发的相关经验的时候，你需要主动地学习相关的理论知识，争取比别人掌握更多。而机会来临的时候，你能抓住这样一个机会，从而在实践中被动地掌握更多的知识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/talke_about_active_passive_learning_02.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何改变&quot;&gt;如何改变&lt;/h2&gt;
&lt;p&gt;就像文章开头的那位同学一样，也有许多人都跟我说：你说的我都懂，但是我看了没几天源码，我就看不下去了。&lt;/p&gt;
&lt;p&gt;而且我感觉这样学习效果都无法保证，自己看完之后还是懵懵懂懂的。&lt;/p&gt;
&lt;p&gt;那么我们到底应该如何去改变这一切，让自己习得「主动学习」这个搞笑的习惯呢？&lt;/p&gt;
&lt;p&gt;在这里我给大家几个建议，都是实实在在的能帮助大家改变的。&lt;/p&gt;
&lt;h3 id=&quot;改变对于工作的认识&quot;&gt;改变对于工作的认识&lt;/h3&gt;
&lt;p&gt;与一些刚入行的朋友沟通，我们了解到很多人期望从工作中学到一切，希望公司给与他们更好的学习机会。于是这些朋友一直没有找到很好的公司，很多都是没过几年就换一家公司。&lt;/p&gt;
&lt;p&gt;之所以会如此，是因为这种想法本身就是错误的。公司雇佣你是让你解决问题，不是让你来学习的。学习与成长，只是解决问题之后顺带的结果，而不是目标。如果你无法接受这个观点，那么你永远无法找到正确的学习通道。&lt;/p&gt;
&lt;p&gt;公司给你钱，你帮公司解决问题，其他的都是扯淡。成熟的公司为了留住员工，会建立一系列的培训机制，但这并不代表你就该把这种学习和成长当成理所当然。&lt;/p&gt;
&lt;h3 id=&quot;建立自己的学习圈子&quot;&gt;建立自己的学习圈子&lt;/h3&gt;
&lt;p&gt;当你接受这个观点之后，你自己会明白，工作不应该成为我学习的唯一渠道，我应该有自己的学习渠道，应该有我自己的学习圈子。而这个学习圈子才是一直伴随着你，能跟随你一直走下去的，无论你在 A 公司，还是在 B 公司，你都能不断进步。&lt;/p&gt;
&lt;p&gt;公司的成长是短期的，而学习圈子的成长是长久的。这两者的关系就像被动学习与主动学习一样，互相促进，相互融合。所以如果你希望长期不断进步，那么你就要建立自己的圈子，认识更多比自己厉害的人，跟着他们一起学习，一起成长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术路上是非常枯燥无味的，找到趣味相投的人一起学习，能让你们更容易坚持下去。&lt;/strong&gt;这条真理无论对于新手还是大神都是适用的，没有人会排斥与别人交流。像我一样，无论在哪个公司，我都会跟比我厉害的人学习，跟他们加微信探讨问题。现在我把他们都拉入了一个微信群，我们经常在里面探讨技术问题。很多时候一些很难解决的问题，就在你我讨论之间就解决了。&lt;/p&gt;
&lt;h3 id=&quot;努力努力再努力&quot;&gt;努力、努力、再努力&lt;/h3&gt;
&lt;p&gt;很多朋友其实都不明白自己为什么做技术，甚至不知道喜不喜欢做技术。其实我一开始也不清楚，也是因为生计而选择了开发这一行，我也一直迷茫要不要一直做下去。每次看到「面试基础题」里列出的一大串技术要点，我也困惑，到底要学到什么时候啊。&lt;/p&gt;
&lt;p&gt;其实很多人之所以厌恶做开发，是因为国内企业的加班成风，使得本来很有创造性的开发变得死气沉沉。但我们生活在这，我们可能在很长时间里无法去改变这种现状，我们只能调整自己的心态，让自己变得更加优秀，让自己热爱技术。当你技术达到一定高度的时候，或许你也不需要再加班，而能真正享受编程的乐趣了。&lt;/p&gt;
&lt;p&gt;但在那之前，你还必须调整自己的状态，让自己努力下去。&lt;strong&gt;即使在难搞的日子，也要笑出声来！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;比起技术知识上的积累，思维方式的改变更加重要。从现在停止幻想，拓宽自己的学习渠道，主动学习更多的知识，建立自己的学习圈子吧。&lt;/p&gt;
&lt;p&gt;如果你也是一个对技术有热情，希望不断精进自己技术的小伙伴，那就赶紧加入我的技术圈子，与众多优秀的小伙伴一起学习成长吧！（关注微信公众号获取入群二维码）&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 18:57:00 +0000</pubDate>
<dc:creator>陈树义</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chanshuyi/p/talke_about_active_passive_learning.html</dc:identifier>
</item>
<item>
<title>Django REST framework+Vue 打造生鲜超市（三） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8747961.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8747961.html</guid>
<description>&lt;h2&gt;四、xadmin后台管理&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1.xadmin添加富文本插件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）xadmin/plugins文件夹下新建文件ueditor.py&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; xadmin/plugins/ueditor.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; xadmin.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; DjangoUeditor.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; UEditorField
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; DjangoUeditor.widgets &lt;span&gt;import&lt;/span&gt;&lt;span&gt; UEditorWidget
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.conf &lt;span&gt;import&lt;/span&gt;&lt;span&gt; settings



&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; XadminUEditorWidget(UEditorWidget):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, **&lt;span&gt;kwargs):
        self.ueditor_options &lt;/span&gt;=&lt;span&gt; kwargs
        self.Media.js &lt;/span&gt;=&lt;span&gt; None
        super(XadminUEditorWidget,self).&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(kwargs)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UeditorPlugin(BaseAdminPlugin):

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get_field_style(self, attrs, db_field, style, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; style == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(db_field, UEditorField):
                widget &lt;/span&gt;=&lt;span&gt; db_field.formfield().widget
                param &lt;/span&gt;=&lt;span&gt; {}
                param.update(widget.ueditor_settings)
                param.update(widget.attrs)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;widget&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:XadminUEditorWidget(**&lt;span&gt;param)}
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; attrs

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; block_extrahead(self, context, nodes):
        js  &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(settings.STATIC_URL + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ueditor/ueditor.config.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        js &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(settings.STATIC_URL + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ueditor/ueditor.all.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        nodes.append(js)

xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)
xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）把插件添加到__init__.py里面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; xadmin/plugins/__init__.py&lt;/span&gt;
&lt;span&gt;
PLUGINS &lt;/span&gt;=&lt;span&gt; (
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;4.2.url配置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;配置xadmin和ueditor的路由&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; MxShop/urls.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path,include

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, xadmin.site.urls),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DjangoUeditor.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;4.3.注册app到xadmin后台&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;四个app下面都新建文件adminx.py，然后分别注册到后台&lt;/p&gt;
&lt;p&gt;（1）users/adminx.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; users/adminx.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; xadmin &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; VerifyCode


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseSetting(object):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加主题&lt;/span&gt;
    enable_themes =&lt;span&gt; True
    use_bootswatch &lt;/span&gt;=&lt;span&gt; True


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GlobalSettings(object):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;后台名字&lt;/span&gt;
    site_title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Derek生鲜超市&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    site_footer &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;版权Derek：http://www.cnblogs.com/derek1184405959/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;收起菜单&lt;/span&gt;
    menu_style = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;accordion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; VerifyCodeAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mobile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]


xadmin.site.register(VerifyCode, VerifyCodeAdmin)
xadmin.site.register(views.BaseAdminView, BaseSetting)
xadmin.site.register(views.CommAdminView, GlobalSettings)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改app名字为中文&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; users/apps.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.apps &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AppConfig


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersConfig(AppConfig):
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;app名字后台显示中文&lt;/span&gt;
    verbose_name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户管理&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还需要__init__.py中修改默认配置才生效&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; users/__init__.py&lt;/span&gt;
&lt;span&gt;
default_app_config &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;users.apps.UsersConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其它三个app一样的操作&lt;/p&gt;
&lt;p&gt;（2）goods&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; goods/adminx.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods, GoodsCategory, GoodsImage, GoodsCategoryBrand, Banner


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsAdmin(object):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示的列&lt;/span&gt;
    list_display = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;click_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sold_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fav_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;market_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_brief&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is_new&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is_hot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;搜索的字段&lt;/span&gt;
    search_fields = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, ]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在列表页可以直接编辑的&lt;/span&gt;
    list_editable = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is_hot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;过滤&lt;/span&gt;
    list_filter = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;click_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sold_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fav_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;market_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is_new&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;is_hot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category__name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用富文本编辑器&lt;/span&gt;
    style_fields = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ueditor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsImagesInline(object):
        model &lt;/span&gt;=&lt;span&gt; GoodsImage
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;排除add_time字段&lt;/span&gt;
        exclude = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
        extra &lt;/span&gt;= 1&lt;span&gt;
        style &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

    inlines &lt;/span&gt;=&lt;span&gt; [GoodsImagesInline]


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsCategoryAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parent_category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    list_filter &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parent_category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, ]


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsBrandAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]



&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BannerGoodsAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;

xadmin.site.register(Goods, GoodsAdmin)
xadmin.site.register(GoodsCategory, GoodsCategoryAdmin)
xadmin.site.register(Banner, BannerGoodsAdmin)
xadmin.site.register(GoodsCategoryBrand, GoodsBrandAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; goods/apps.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.apps &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AppConfig

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsConfig(AppConfig):
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; good/__init__.py&lt;/span&gt;
&lt;span&gt;
default_app_config &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods.apps.GoodsConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（3）trade&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; trade/adminx.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; trade.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; OrderInfo, OrderGoods


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderInfoAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order_sn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trade_no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pay_status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pay_script&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order_mount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pay_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderGoodsInline(object):
        model &lt;/span&gt;=&lt;span&gt; OrderGoods
        exclude &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, ]
        extra &lt;/span&gt;= 1&lt;span&gt;
        style &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

    inlines &lt;/span&gt;=&lt;span&gt; [OrderGoodsInline, ]

xadmin.site.register(OrderInfo, OrderInfoAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; trade/apps.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.apps &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AppConfig


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TradeConfig(AppConfig):
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;trade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;交易管理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; trade/__init__.py&lt;/span&gt;
&lt;span&gt;
default_app_config &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;trade.apps.TradeConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（4）user_operation&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_operation/adminx.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; UserFav, UserLeavingMessage, UserAddress


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserFavAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserLeavingMessageAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserAddressAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signer_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signer_mobile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;distrit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]

xadmin.site.register(UserFav, UserFavAdmin)
xadmin.site.register(UserAddress, UserAddressAdmin)
xadmin.site.register(UserLeavingMessage, UserLeavingMessageAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_operation/apps.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.apps &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AppConfig


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserOperationConfig(AppConfig):
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_operation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户操作管理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_operation/__init__.py&lt;/span&gt;
&lt;span&gt;
default_app_config &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_operation.apps.UserOperationConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180408223331821-316578981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）生成数据库表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py makemigrations

python manage.py migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;4.4.导入商品类别数据&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;由于分类和商品很多，就写个脚本导入数据&lt;/p&gt;
&lt;p&gt;&lt;span&gt;单独使用django的model,批量导入数据&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;db_tools下新建文件夹data，然后把前端的json文件（category_data和product_data）拷贝到里面&lt;/li&gt;
&lt;li&gt; 把brands和goods图片拷贝到media目录下&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;db_tools下新建文件 import_category_data.py&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; db_tools/data/import_category_data.py&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;独立使用django的model&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前文件的路径（运行脚本）&lt;/span&gt;
pwd = os.path.dirname(os.path.realpath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取项目的跟目录&lt;/span&gt;
sys.path.append(pwd+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;要想单独使用django的model，必须指定一个环境变量，会去settings配置找&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;参照manage.py里面就知道为什么这样设置了&lt;/span&gt;
os.environ.setdefault(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MxShop.settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; django
django.setup()

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoodsCategory

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; db_tools.data.category_data &lt;span&gt;import&lt;/span&gt;&lt;span&gt; row_data

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一级类&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; lev1_cat &lt;span&gt;in&lt;/span&gt;&lt;span&gt; row_data:
    lev1_intance &lt;/span&gt;=&lt;span&gt; GoodsCategory()
    lev1_intance.code &lt;/span&gt;= lev1_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    lev1_intance.name &lt;/span&gt;= lev1_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    lev1_intance.category_type &lt;/span&gt;= 1
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存到数据库&lt;/span&gt;
&lt;span&gt;    lev1_intance.save()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;二级类&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; lev2_cat &lt;span&gt;in&lt;/span&gt; lev1_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sub_categorys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]:
        lev2_intance &lt;/span&gt;=&lt;span&gt; GoodsCategory()
        lev2_intance.code &lt;/span&gt;= lev2_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
        lev2_intance.name &lt;/span&gt;= lev2_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
        lev2_intance.category_type &lt;/span&gt;= 2&lt;span&gt;
        lev2_intance.parent_category &lt;/span&gt;=&lt;span&gt; lev1_intance
        lev2_intance.save()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;三级类&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; lev3_cat &lt;span&gt;in&lt;/span&gt; lev2_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sub_categorys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]:
            lev3_intance &lt;/span&gt;=&lt;span&gt; GoodsCategory()
            lev3_intance.code &lt;/span&gt;= lev3_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
            lev3_intance.name &lt;/span&gt;= lev3_cat[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
            lev3_intance.category_type &lt;/span&gt;= 3&lt;span&gt;
            lev3_intance.parent_category &lt;/span&gt;=&lt;span&gt; lev2_intance
            lev3_intance.save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行脚本 import_category_data.py  数据就可以保存到数据库了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180409000944317-681444084.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180409001006942-1639209542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;4.5.导入商品&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 在data目录下新建import_goods_data.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os


pwd &lt;/span&gt;= os.path.dirname(os.path.realpath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;))
sys.path.append(pwd&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
os.environ.setdefault(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MxShop.settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; django
django.setup()

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods, GoodsCategory, GoodsImage

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; db_tools.data.product_data &lt;span&gt;import&lt;/span&gt;&lt;span&gt; row_data

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; goods_detail &lt;span&gt;in&lt;/span&gt;&lt;span&gt; row_data:
    goods &lt;/span&gt;=&lt;span&gt; Goods()
    goods.name &lt;/span&gt;= goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
    goods.market_price &lt;/span&gt;= float(int(goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;market_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;元&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)))
    goods.shop_price &lt;/span&gt;= float(int(goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sale_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;元&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)))
    goods.goods_brief &lt;/span&gt;= goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;if&lt;/span&gt; goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; None &lt;span&gt;else&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    goods.goods_desc &lt;/span&gt;= goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;if&lt;/span&gt; goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; None &lt;span&gt;else&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取第一张作为封面图&lt;/span&gt;
    goods.goods_front_image = goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;images&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][0] &lt;span&gt;if&lt;/span&gt; goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;images&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;else&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    category_name &lt;/span&gt;= goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;categorys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][-1&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取出当前子类对应的GoodsCategory对象，filter没有匹配的会返回空数组，不会抛异常。&lt;/span&gt;
    category = GoodsCategory.objects.filter(name=&lt;span&gt;category_name)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; category:
        goods.category &lt;/span&gt;=&lt;span&gt; category[0]
    goods.save()

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; goods_image &lt;span&gt;in&lt;/span&gt; goods_detail[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;images&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]:
        goods_image_instance &lt;/span&gt;=&lt;span&gt; GoodsImage()
        goods_image_instance.image &lt;/span&gt;=&lt;span&gt; goods_image
        goods_image_instance.goods &lt;/span&gt;=&lt;span&gt; goods
        goods_image_instance.save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行，把商品生产到数据库中&lt;/p&gt;
&lt;p&gt;配置media路径&lt;/p&gt;
&lt;p&gt;settings中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置上传文件的路径&lt;/span&gt;
MEDIA_URL=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/media/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
MEDIA_ROOT&lt;/span&gt;=os.path.join(BASE_DIR,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;media&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;urls.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path,include
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;#
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.views.static &lt;span&gt;import&lt;/span&gt;&lt;span&gt; serve
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; MxShop.settings &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MEDIA_ROOT

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, xadmin.site.urls),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DjangoUeditor.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; )),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件&lt;/span&gt;
    path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;media/&amp;lt;path:path&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,serve,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;document_root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:MEDIA_ROOT}),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 08 Apr 2018 18:18:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8747961.html</dc:identifier>
</item>
<item>
<title>理解原型与原型链 - 雨霖月寒</title>
<link>http://www.cnblogs.com/jofun/p/8746511.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jofun/p/8746511.html</guid>
<description>&lt;p&gt;原型与原型链是学习JavaScript这门语言不能不理解的两个重要概念，为什么？因为JavaScript是一门基于原型的语言。&lt;/p&gt;
&lt;p&gt;怎么理解“JavaScript是一门基于原型的语言”？在软件设计模式中，有一种模式叫做原型模式，JavaScript正是利用这种模式而被创建出来。先来了解下原型模式的概念：原型模式是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。原型模式的目的是用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。也就是说利用已有的一个原型对象，可以快速地生成和原型对象一样的新对象实例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原型到底是什么？原型是一个可以被复制（或者叫克隆）的一个类，通过复制原型可以创建一个一模一样的新对象。通俗的说，原型就是一个&lt;strong&gt;模板&lt;/strong&gt;，在设计语言中更准确的说是一个&lt;strong&gt;对象模板&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;看下面一段代码来理解原型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Person = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
}
            
Person.prototype.sayHi &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&quot;Hello! I am &quot; + &lt;span&gt;this&lt;/span&gt;.name + &quot;.&quot;&lt;span&gt;);
}
            
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; joe = &lt;span&gt;new&lt;/span&gt; Person(&quot;joe&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; john = &lt;span&gt;new&lt;/span&gt; Person(&quot;john&quot;&lt;span&gt;);
            
joe.sayHi();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am joe.&lt;/span&gt;
john.sayHi();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am john.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码可以看出来，&lt;strong&gt;原型（Person）定义了一些公用的属性和方法；利用原型（Person）创建出来的新对象实例（joe和john对象）会共享原型（Person）的所有属性和方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把代码修改一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Person = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
}
            
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; joe = &lt;span&gt;new&lt;/span&gt; Person(&quot;joe&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; john = &lt;span&gt;new&lt;/span&gt; Person(&quot;john&quot;&lt;span&gt;);

Person.prototype.sayHi &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&quot;Hello! I am &quot; + &lt;span&gt;this&lt;/span&gt;.name + &quot;.&quot;&lt;span&gt;);
}
            
joe.sayHi();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am joe.&lt;/span&gt;
john.sayHi();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am john.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次把新创建的对象（joe和John）提前到原型（Person）的sayHi方法定义之前，并使用严格模式。原型（Person）的sayHi方法依然会被共享出去，所以&lt;strong&gt;原型（Person）的属性和方法总是被原型实例所共享&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;再来修改下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Person = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
}

Person.prototype.sayHi &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&quot;Hello! I am &quot; + &lt;span&gt;this&lt;/span&gt;.name + &quot;.&quot;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; joe = &lt;span&gt;new&lt;/span&gt; Person(&quot;joe&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; john = &lt;span&gt;new&lt;/span&gt; Person(&quot;john&quot;&lt;span&gt;);

joe.sayHi();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am joe.&lt;/span&gt;
john.sayHi();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hello! I am john.&lt;/span&gt;
&lt;span&gt;
joe.getName &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}

joe.getName();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;joe&lt;/span&gt;
john.getName();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这次为新对象实例（joe)添加getName方法，最后只有实例（joe)拥有该方法，而另一个实例（john）并没有getName方法，这说明：&lt;strong&gt;通过原型创建的新对象实例是相互独立的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也正是因为这样对象的使用才能更加灵活、更加易于扩展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原型链：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在javascript中，所有的对象都拥有一个__proto__属性指向该对象的原型（prototype)。在上面的代码中，执行console.log(joe.__proto__)后在控制台可以看到输出了原型（Person），然后继续执行console.log(Person.__proto__)，控制台打印的结果是function(){}，为什么Person的原型是function呢？这是因为Person是一个构造函数，它的本质就是一个函数。在javascript中函数是一等对象。&lt;/p&gt;
&lt;p&gt;现在用箭头符号来表示上面原型创建的过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
joe.__proto__  =&amp;gt;&lt;span&gt;  Person,

Person.__proto__  &lt;/span&gt;=&amp;gt;  &lt;span&gt;function&lt;span&gt;(){}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由此可见，原型链记录了原型对象创建的整个过程，因此，我给原型链添加一个概念：&lt;strong&gt;原型链是原型对象创建过程的历史记录。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原型设计带来的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当查找一个对象的属性时，JavaScript 会根据原型链向上遍历对象的原型，直到找到给定名称的属性为止。直到到达原型链的顶部仍然没有找到指定的属性，就会返回 &lt;span class=&quot;text_color&quot;&gt;undefined。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;使用 for in 循环可以遍历对象所有的属性，包括该对象在原型链中的属性，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; A =&lt;span&gt; {
    a:&lt;/span&gt;1&lt;span&gt;,
    b:&lt;/span&gt;2&lt;span&gt;
};
                
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; B =&lt;span&gt; Object.create(A);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; C =&lt;span&gt; Object.create(B);
            
B.c &lt;/span&gt;= 3&lt;span&gt;;
C.d &lt;/span&gt;= 4&lt;span&gt;;

console.log(c)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{d:4}&lt;/span&gt;
            
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; c){
    console.log(c[key])
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;会在控制台中依次打印出4 3 1 2 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意在控制台中打印的顺序是 &lt;span class=&quot;text_color&quot;&gt;4 3 1 2，而不是 &lt;span class=&quot;text_color&quot;&gt;1 2 3 4。为什么？因为C的原型是B，B的原型是A。C对象只有一个d属性，执行for...in时先返回C.d，然后在从C的原型（B）中查找到并返回B.c，再从B的原型（A）中查找到并返回A.a和A.b，最后从A的原型（Object）中查找，发现Object中没有任何属性，于是结束for...in。所以最后的结果是 &lt;span class=&quot;text_color&quot;&gt;4 3 1 2。&lt;/span&gt;这就解释了原型链继承时查找属性的过程是先查找自身属性，当自身属性不存在时，会在原型链中逐级查找。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有时只需检查对象自身的属性，那么，这种消耗就是一种浪费，怎么解决呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hasOwnProperty 函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hasOwnProperty 函数可以用来检查对象自身是否含有某个属性，返回值是布尔值，当属性不存在时不会向上查找对象原型链。&lt;/p&gt;

&lt;p&gt;在上面的代码中添加下面的代码，看看 hasOwnProperty 和 for in 的区别：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;（&lt;span&gt;var&lt;/span&gt; &quot;a&quot; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; C){
    console.log(c[&lt;/span&gt;&quot;a&quot;]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性 a 是原型链上的属性， 输出 1&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;（C.hasOwnProperty(&quot;a&quot;&lt;span&gt;)){
    console.log(c[&lt;/span&gt;&quot;a&quot;]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性 a 不是自身属性，不会执行这一步&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hasOwnProperty 函数只能检查对象是否拥有某个属性，那如何遍历对象的自身属性？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getOwnPropertyNames 函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;getOwnPropertyNames 函数可以获取对象所有的自身属性，返回值是由对象自身属性名称组成的数组，同样不会向上查找对象原型链。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(Object.getOwnPropertyNames(C))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出 [&quot;d&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;利用getOwnPropertyNames 函数遍历所有对象所有自身属性，例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;（fucntion(){
&lt;/span&gt;&lt;span&gt;    var&lt;/span&gt;&lt;span&gt;
    o &lt;/span&gt;= {a:1, b:2&lt;span&gt;},
    propertys &lt;/span&gt;=&lt;span&gt; Object.getOwnPropertyNames(o),
    len &lt;/span&gt;=&lt;span&gt; propertys.length;

&lt;/span&gt;&lt;span&gt;    for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; len; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;        var&lt;/span&gt; key =&lt;span&gt; propertys[i];
        console.log(o[key])      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出 1, 2&lt;/span&gt;
&lt;span&gt;    }
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sun, 08 Apr 2018 17:04:00 +0000</pubDate>
<dc:creator>雨霖月寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jofun/p/8746511.html</dc:identifier>
</item>
<item>
<title>搭建一个web服务下载HDFS的文件 - OldTrafford</title>
<link>http://www.cnblogs.com/oldtrafford/p/8750270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oldtrafford/p/8750270.html</guid>
<description>&lt;h2 id=&quot;需求描述&quot;&gt;需求描述&lt;/h2&gt;
&lt;p&gt;为了能方便快速的获取HDFS中的文件，简单的搭建一个web服务提供下载很方便快速，而且在web服务器端不留临时文件，只做stream中转，效率相当高！&lt;br/&gt;使用的框架是SpringMVC+HDFS API&lt;/p&gt;
&lt;h3 id=&quot;关键代码&quot;&gt;关键代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/file&quot;)
public class FileDownloadController {
     
     private static final String BASE_DIR = &quot;/user/app/dump/&quot;;
    @RequestMapping(value = &quot;/download/{filename}&quot;, method = RequestMethod.GET)
    @ResponseBody
    public void fileDownload(@PathVariable(&quot;filename&quot;) String fileName, HttpServletRequest request, HttpServletResponse response) {
        try {
            response.setContentType(&quot;application/octet-stream; charset=utf-8&quot;);
            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + URLEncoder.encode(fileName + &quot;.csv&quot;, &quot;UTF-8&quot;));
            String path = BASE_DIR + fileName;
            HdfsUtils.copyFileAsStream(path, response.getOutputStream());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;hdfsutils.copyfileasstream-实现&quot;&gt;HdfsUtils.copyFileAsStream 实现&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;public class HdfsUtils {
    private static FileSystem hdfs = null;
    static {
        URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());
        Configuration conf=new Configuration();
        try {
            hdfs = FileSystem.get(URI.create(&quot;hdfs://xxxxxxx&quot;), conf, &quot;app&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        } 
    }

    public static void copyFileAsStream(String fpath, OutputStream out) throws IOException, InterruptedException {
        org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(fpath);
        FSDataInputStream fsInput = hdfs.open(path);
        IOUtils.copyBytes(fsInput, out, 4096, false);
        fsInput.close();
        out.flush();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是不是非常简单？ HDFS的文件流没落在web服务上，而是直接copy到了浏览器的OutputStream上&lt;/p&gt;
&lt;h3 id=&quot;更进一步提升性能压缩&quot;&gt;更进一步提升性能，压缩&lt;/h3&gt;
&lt;p&gt;修改 web端的代码, 用zip进行压缩，默认的压缩比例是1：5，大大减少了流在网络上传输量&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/file&quot;)
public class FileDownloadController {
     private static final String BASE_DIR = &quot;/user/app/dump/&quot;;
    
    @RequestMapping(value = &quot;/download/zip/{filename}&quot;, method = RequestMethod.GET)
    @ResponseBody
    public void hdfsDownload2(@PathVariable(&quot;filename&quot;) String fileName, HttpServletRequest request, HttpServletResponse response) {
        try {
            response.setContentType(&quot;application/octet-stream; charset=utf-8&quot;);
            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + URLEncoder.encode(fileName + &quot;.zip&quot;, &quot;UTF-8&quot;));

            ZipOutputStream zipOut = null;
            try {
                zipOut = new ZipOutputStream(new BufferedOutputStream(response.getOutputStream()));
                zipOut.putNextEntry(new ZipEntry(fileName + &quot;.csv&quot;));
            } catch (Exception e) {
                e.printStackTrace();
            }
            String path = BASE_DIR + fileName;
            HdfsUtils.copyFileAsStream(path, zipOut);
            zipOut.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;一些用的主要jar版本&quot;&gt;一些用的主要jar版本&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;spring.version&amp;gt;4.2.5.RELEASE&amp;lt;/spring.version&amp;gt;
    &amp;lt;hadoop.version&amp;gt;2.7.0&amp;lt;/hadoop.version&amp;gt;
&amp;lt;/properties&amp;gt;

&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;hadoop-client&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${hadoop.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;hadoop-common&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${hadoop.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 08 Apr 2018 16:44:00 +0000</pubDate>
<dc:creator>OldTrafford</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oldtrafford/p/8750270.html</dc:identifier>
</item>
<item>
<title>C# 使用 GDI+ 实现添加中心旋转(任意角度)的文字 - Dandelion_drq</title>
<link>http://www.cnblogs.com/dandelion-drq/p/csharp_use_gdiplus_to_rotate_text.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dandelion-drq/p/csharp_use_gdiplus_to_rotate_text.html</guid>
<description>&lt;p&gt;这篇文章是 &lt;code&gt;GDI+&lt;/code&gt; 总结系列的第三篇，如果对 &lt;code&gt;GDI+&lt;/code&gt; 的基础使用不熟悉的朋友可以先看第一篇文章&lt;a href=&quot;http://www.cnblogs.com/dandelion-drq/p/use-gdiplus-to-draw-image-in-csharp.html&quot;&gt;《C# 使用 GDI+ 画图》&lt;/a&gt;。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;需求是要实现给图片添加任意角度旋转的文字，文字的旋转中心要是在文字区域中央，就像 &lt;code&gt;CSS&lt;/code&gt; 的 &lt;code&gt;rotate&lt;/code&gt; 函数一样的效果。如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893839/201804/893839-20180409003501137-668295193.gif&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;Graphics&lt;/code&gt; 类有个 &lt;code&gt;RotateTransform&lt;/code&gt; 方法，可以传入任意角度的值来旋转画板。但是这个方法的旋转中心是画板的左上角，所以直接单单用这个方法不能满足我们的需求。此外，&lt;code&gt;Graphics&lt;/code&gt;类还有个 &lt;code&gt;TranslateTransform&lt;/code&gt; 方法可以改变坐标的原点，而且这个方法是沿着矩形的x,y轴平移的，即就算图片旋转了一定的角度后，再调用 &lt;code&gt;TranslateTransform&lt;/code&gt; 方法，它还是沿着x,y轴平移。于是通过以下三个步骤即可实现图片中心旋转。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;把画板(Graphics对象)原点平移到矩形中心位置(x, y)&lt;/li&gt;
&lt;li&gt;在(x, y)位置绕原点旋转画板N度&lt;/li&gt;
&lt;li&gt;画板退回(-x, -y)的距离&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;还是看不懂的同学看下面的图应该就明白了&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893839/201804/893839-20180409003511687-1191357578.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;明白了原理，那不容易推断出，如果要旋转的中心不是图片中心而是文字中心，那步骤还是一样的，只是把(x, y)改为文字中心的坐标就好了。&lt;/p&gt;
&lt;p&gt;除了上面说的方法，其实还有一个方法可以实现中心旋转，那就是使用 &lt;code&gt;Matrix&lt;/code&gt; 类。&lt;code&gt;Matrix&lt;/code&gt; 类的 &lt;code&gt;RotateAt&lt;/code&gt; 方法可以指定矩阵旋转的中心位置。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    //
    // 摘要:
    //     沿 point 参数中指定的点并通过预先计算该旋转，来顺时针旋转此 System.Drawing.Drawing2D.Matrix。
    //
    // 参数:
    //   angle:
    //     旋转角度（范围）（单位：度）。
    //
    //   point:
    //     一个 System.Drawing.PointF，表示旋转中心。
    [TargetedPatchingOptOut(&quot;Performance critical to inline this type of method across NGen image boundaries&quot;)]
    public void RotateAt(float angle, PointF point);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Graphics&lt;/code&gt; 类的 &lt;code&gt;Transform&lt;/code&gt; 属性返回的就是 &lt;code&gt;Matrix&lt;/code&gt; 对象，该属性可以 &lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;。因此我们先获取原来的画板的矩阵，然后使用 &lt;code&gt;RotateAt&lt;/code&gt; 方法旋转该矩阵，再把旋转后的矩阵赋值给画板就好了。&lt;/p&gt;
&lt;hr/&gt;
&lt;ul readability=&quot;20&quot;&gt;&lt;li readability=&quot;33&quot;&gt;
&lt;p&gt;添加任意角度文字方法&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 图片添加任意角度文字(文字旋转是中心旋转，角度顺时针为正)
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;imgPath&quot;&amp;gt;图片路径&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;locationLeftTop&quot;&amp;gt;文字左上角定位(x1,y1)&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;fontSize&quot;&amp;gt;字体大小，单位为像素&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;text&quot;&amp;gt;文字内容&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;angle&quot;&amp;gt;文字旋转角度&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;fontName&quot;&amp;gt;字体名称&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;添加文字后的Bitmap对象&amp;lt;/returns&amp;gt;
public Bitmap AddText(string imgPath, string locationLeftTop, int fontSize, string text, int angle = 0, string fontName = &quot;华文行楷&quot;)
{
    Image img = Image.FromFile(imgPath);

    int width = img.Width;
    int height = img.Height;
    Bitmap bmp = new Bitmap(width, height);
    Graphics graphics = Graphics.FromImage(bmp);
    // 画底图
    graphics.DrawImage(img, 0, 0, width, height);

    Font font = new Font(fontName, fontSize, GraphicsUnit.Pixel);
    SizeF sf = graphics.MeasureString(text, font); // 计算出来文字所占矩形区域

    // 左上角定位
    string[] location = locationLeftTop.Split(',');
    float x1 = float.Parse(location[0]);
    float y1 = float.Parse(location[1]);

    // 进行文字旋转的角度定位
    if (angle != 0)
    {
        #region 法一：TranslateTransform平移 + RotateTransform旋转

        /* 
            * 注意：
            * Graphics.RotateTransform的旋转是以Graphics对象的左上角为原点，旋转整个画板的。
            * 同时x，y坐标轴也会跟着旋转。即旋转后的x，y轴依然与矩形的边平行
            * 而Graphics.TranslateTransform方法，是沿着x，y轴平移的
            * 因此分三步可以实现中心旋转
            * 1.把画板(Graphics对象)平移到旋转中心
            * 2.旋转画板
            * 3.把画板平移退回相同的距离(此时的x，y轴仍然是与旋转后的矩形平行的)
            */
        //// 把画板的原点(默认是左上角)定位移到文字中心
        //graphics.TranslateTransform(x1 + sf.Width / 2, y1 + sf.Height / 2);
        //// 旋转画板
        //graphics.RotateTransform(angle);
        //// 回退画板x,y轴移动过的距离
        //graphics.TranslateTransform(-(x1 + sf.Width / 2), -(y1 + sf.Height / 2));

        #endregion

        #region 法二：矩阵旋转

        Matrix matrix = graphics.Transform;
        matrix.RotateAt(angle, new PointF(x1 + sf.Width / 2, y1 + sf.Height / 2));
        graphics.Transform = matrix;

        #endregion
    }

    // 写上自定义角度的文字
    graphics.DrawString(text, font, new SolidBrush(Color.Black), x1, y1);

    graphics.Dispose();
    img.Dispose();

    return bmp;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：这里简单解释一下为什么文字中心是 &lt;code&gt;(x1 + sf.Width / 2, y1 + sf.Height / 2)&lt;/code&gt;，因为 &lt;code&gt;(x, y)&lt;/code&gt; 是左上角，而 &lt;code&gt;sf.Width&lt;/code&gt;、&lt;code&gt;sf.Height&lt;/code&gt; 是文字矩形区域宽、高。如图：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893839/201804/893839-20180409003530061-510849222.jpg&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;测试调用&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private static void Main(string[] args)
{
    try
    {
        Console.WriteLine(&quot;Start drawing ...&quot;);
        DrawingEntity drawing = new DrawingEntity();
        System.Drawing.Bitmap bmp = drawing.AddText(@&quot;D:\test\1.png&quot;, &quot;176.94,150.48&quot;, 66, &quot;写点啥好呢&quot;, 30);
        bmp.Save(@&quot;D:\test\output.png&quot;);
        bmp.Dispose();
        Console.WriteLine(&quot;Done!&quot;);
    }
    catch (System.Exception ex)
    {
        Console.WriteLine(ex.ToString());
    }
    finally
    {
        System.Console.WriteLine(&quot;\nPress any key to continue ...&quot;);
        System.Console.ReadKey();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;最终效果&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;没有旋转时&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893839/201804/893839-20180409003544917-643141090.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中心旋转30度&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893839/201804/893839-20180409003555768-768280114.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;讲完了大家来思考一个问题，如果我想做图片绕任意位置为中心进行旋转应该怎么做呢？相信看完了上面的代码大家应该都会了吧。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lhtzbj12/article/details/54099572&quot;&gt;C#中基于GDI+(Graphics)图像处理系列之任意角度旋转图像&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/alicehyxx/article/details/17009271&quot;&gt;C#利用GDI+绘制旋转文字，矩形内可以根据布局方式排列文本&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;系列其他文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dandelion-drq/p/use-gdiplus-to-draw-image-in-csharp.html&quot;&gt;C# 使用 GDI+ 画图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dandelion-drq/p/csharp_use_gdiplus_to_add_text.html&quot;&gt;C# 使用 GDI+ 给图片添加文字，并使文字自适应矩形区域&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 16:36:00 +0000</pubDate>
<dc:creator>Dandelion_drq</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dandelion-drq/p/csharp_use_gdiplus_to_rotate_text.html</dc:identifier>
</item>
<item>
<title>客户端安全传输密码至服务端的实现改进 - linjisong</title>
<link>http://www.cnblogs.com/linjisong/p/8748683.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linjisong/p/8748683.html</guid>
<description>&lt;p&gt;两年前在做Java EE开发平台时，因为用户登录相关的模块是委托给另一位同事完成的，所以虽然知道大体概念，但是对客户端怎么安全传输密码到服务端的具体细节并不甚了解。然而这次在做4A系统（认证、授权、监控、审计）时，无论怎样都绕不过这一块内容了，于是在仔细研究了一下之前的方案，并参考网上的一些资料后，做了一些改进，特此记录一下。&lt;/p&gt;
&lt;h2 id=&quot;总体方案&quot;&gt;总体方案&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;服务端生成RSA密钥对，并将公钥返回给客户端&lt;/li&gt;
&lt;li&gt;客户端在提交登录时，将密码使用公钥加密，传输给服务端&lt;/li&gt;
&lt;li&gt;服务端收到登录请求后，使用私钥解密，并进行下一步处理&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;方案很简单，也很容易理解，只需要知道非对称加密的一般概念即可，但是在具体的实现时还是有一些细节需要注意的。&lt;/p&gt;
&lt;h2 id=&quot;原有的实现实际上同事也是参考了网上的资料&quot;&gt;原有的实现（实际上同事也是参考了网上的资料）&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;创建一个表&lt;code&gt;BF_KEY_CFG（module，public_empoent，private_empoent VARCHAR(200)）&lt;/code&gt;&lt;br/&gt;这里需要对RSA的具体实现有一点点了解，知道模、公钥指数、私钥指数等概念。&lt;/li&gt;
&lt;li&gt;引入加密工具包&lt;code&gt;bouncycastle-1.0.jar&lt;/code&gt;，在系统每次启动的时候，利用该工具包生成密钥对（模、公钥指数、私钥指数）并保存到数据库&lt;/li&gt;
&lt;li&gt;在客户端提交登录时，先从服务器获取公钥，然后再加密发送登录请求&lt;/li&gt;
&lt;li&gt;服务端在进行密码验证前，先用私钥解密，然后再进行其他认证处理&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这个实现有几个问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建的表包含三个字段（模、公钥指数、私钥指数）并不那么容易理解，不像公钥、私钥那么大众化&lt;/li&gt;
&lt;li&gt;需要额外引入第三方包&lt;/li&gt;
&lt;li&gt;多个服务端节点时，启动时会有潜在的冲突&lt;/li&gt;
&lt;li&gt;使用的JS加密算法，在服务端解密时，出现顺序颠倒的问题，因此也不能很好的处理中文等字符&lt;/li&gt;
&lt;li&gt;在提交登录时，是重写了原来的密码表单域的值，导致不能记住密码（每次加密的公钥不相同）&lt;/li&gt;
&lt;li&gt;在服务端，也不能很好的利用Spring MVC的表单校验，比如需要自己单独写逻辑判断密码长度不能大于16等&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;此外，网上的资料大都是你抄我、我抄你，一些基本的工具类代码都很丑陋，到处充斥着重复的代码。&lt;/p&gt;
&lt;h2 id=&quot;改进后的实现&quot;&gt;改进后的实现&lt;/h2&gt;
&lt;p&gt;改进主要是针对上面提到的问题进行的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先，表字段只保留&lt;code&gt;PUBLIC_KEY、PRIVATE_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其次，使用JDK原生的加密&lt;code&gt;provider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解决JS和JAVA加解密顺序颠倒的问题，从而也解决了中文加密问题&lt;/li&gt;
&lt;li&gt;在前端设置一个隐藏域，提交登录表单时，先将隐藏域的值设置为加密后的密码，然后将表单域设置为disable（从而不会传送至后台），最后再提交登录表单，登录失败返回登录页时重新启用密码域，这样可以解决记住密码，回退到登录页等许多问题&lt;/li&gt;
&lt;li&gt;在Spring MVC绑定参数后，进行参数校验前，进行解密，从而可以利用Spring MVC的原生校验&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这几个改进，前端使用JSEncrypt库配合jQuery非常容易实现&lt;/p&gt;
&lt;p&gt;后端则主要包括两个部分：加密工具类、Spring MVC参数绑定后和参数校验前的处理逻辑插入&lt;/p&gt;
&lt;h3 id=&quot;加密工具类&quot;&gt;（1）加密工具类：&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import java.security.NoSuchAlgorithmException;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.security.Provider;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.security.SecureRandom;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import javax.crypto.Cipher;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.crypto.NoSuchPaddingException;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.util.Base64Utils;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//在JDK8中可以直接使用JDK原生Base64工具类&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* package */&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CryptoUtils {

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; SecureRandom random = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; SecureRandom();

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 获取Provider对象：注意单例&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 方便使用其它的Provider&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Provider &lt;span class=&quot;fu&quot;&gt;getProvider&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;//provider;&lt;/span&gt;
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 字节转换为字符串&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param data&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;encodeToString&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] data) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Base64Utils.&lt;span class=&quot;fu&quot;&gt;encodeToString&lt;/span&gt;(data);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 字符串转换为字节&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param src&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;fu&quot;&gt;decodeFromString&lt;/span&gt;(String src) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Base64Utils.&lt;span class=&quot;fu&quot;&gt;decodeFromString&lt;/span&gt;(src);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 获取Cipher对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param keyAlgorithm&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Cipher &lt;span class=&quot;fu&quot;&gt;getCipher&lt;/span&gt;(String keyAlgorithm) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Provider provider = &lt;span class=&quot;fu&quot;&gt;getProvider&lt;/span&gt;();
            Cipher cipher = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == provider) {
                cipher = Cipher.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;(keyAlgorithm);
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                cipher = Cipher.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;(keyAlgorithm, provider);
            }
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cipher;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (NoSuchAlgorithmException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (NoSuchPaddingException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;

public class RSAUtils extends CryptoUtils {

    /**
     * 加密算法RSA
     */
    private static final String KEY_ALGORITHM = &quot;RSA&quot;;

    /**
     * 生成RSA密钥对
     */
    public static RsaKeyPair getRsaKeyPair() {
        try {
            KeyPairGenerator keyPairGen = null;
            Provider provider = getProvider();
            if (null == provider) {
                keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
            } else {
                keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM, provider);
            }
            keyPairGen.initialize(1024, random);
            KeyPair keyPair = keyPairGen.generateKeyPair();
            String privateKey = encodeToString(keyPair.getPrivate().getEncoded());
            String publicKey = encodeToString(keyPair.getPublic().getEncoded());
            return new RsaKeyPair(publicKey, privateKey);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 获取公钥
     * 
     * @param publicKey
     * @return
     */
    public static PublicKey getPublicKey(String publicKey) {
        try {
            byte[] bytes = decodeFromString(publicKey);
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(bytes);
            PublicKey pk = getKeyFactory().generatePublic(x509KeySpec);
            return pk;
        } catch (InvalidKeySpecException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 获取私钥
     * 
     * @param privateKey
     * @return
     */
    public static PrivateKey getPrivateKey(String privateKey) {
        try {
            byte[] bytes = decodeFromString(privateKey);
            PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(bytes);
            PrivateKey pk = getKeyFactory().generatePrivate(pkcs8KeySpec);
            return pk;
        } catch (InvalidKeySpecException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 公钥加密
     * 
     * @param plainText
     * @param publicKey
     * @return
     */
    public static String encryptByPublicKey(String plainText, String publicKey) {
        Cipher cipher = getCipher(true, publicKey, true);
        byte[] src = plainText.getBytes();
        byte[] datas = cipherData(cipher, src, 117);
        return encodeToString(datas);
    }

    /**
     * 私钥加密
     * 
     * @param plainText
     * @param privateKey
     * @return
     */
    public static String encryptByPrivateKey(String plainText, String privateKey) {
        Cipher cipher = getCipher(true, privateKey, false);
        byte[] src = plainText.getBytes();
        byte[] datas = cipherData(cipher, src, 117);
        return encodeToString(datas);
    }

    /**
     * 公钥解密
     * 
     * @param plainText
     * @param publicKey
     * @return
     */
    public static String decryptByPublicKey(String encryptText, String publicKey) {
        Cipher cipher = getCipher(false, publicKey, true);
        byte[] src = decodeFromString(encryptText);
        byte[] datas = cipherData(cipher, src, 128);
        return new String(datas);
    }

    /**
     * 私钥解密
     * 
     * @param encryptText
     * @param privateKey
     * @return
     */
    public static String decryptByPrivateKey(String encryptText, String privateKey) {
        Cipher cipher = getCipher(false, privateKey, false);
        byte[] src = decodeFromString(encryptText);
        byte[] datas = cipherData(cipher, src, 128);
        return new String(datas);
    }

    /**
     * 获取KeyFactory对象
     * 
     * @return
     */
    private static KeyFactory getKeyFactory() {
        try {
            Provider provider = getProvider();
            if (null == provider) {
                return KeyFactory.getInstance(KEY_ALGORITHM);
            } else {
                return KeyFactory.getInstance(KEY_ALGORITHM, provider);
            }
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 获取Cipher对象
     * 
     * @param encode
     * @param keyString
     * @param isPublicKey
     * @return
     */
    private static Cipher getCipher(boolean encode, String keyString, boolean isPublicKey) {
        try {
            Key key = isPublicKey ? getPublicKey(keyString) : getPrivateKey(keyString);
            Cipher cipher = getCipher(KEY_ALGORITHM);
            cipher.init(encode ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE, key);
            return cipher;
        } catch (InvalidKeyException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 加解密数据
     * 
     * @param cipher
     * @param src
     * @param blockSize
     * @return
     */
    private static byte[] cipherData(Cipher cipher, byte[] src, int blockSize) {
        ByteArrayOutputStream out = null;
        try {
            int inputLen = src.length;
            out = new ByteArrayOutputStream();
            int offSet = 0;
            byte[] cache;
            int i = 0;
            while (inputLen - offSet &amp;gt; 0) {
                if (inputLen - offSet &amp;gt; blockSize) {
                    cache = cipher.doFinal(src, offSet, blockSize);
                } else {
                    cache = cipher.doFinal(src, offSet, inputLen - offSet);
                }
                out.write(cache, 0, cache.length);
                i++;
                offSet = i * blockSize;
            }
            return out.toByteArray();
        } catch (IllegalBlockSizeException e) {
            throw new RuntimeException(e);
        } catch (BadPaddingException e) {
            throw new RuntimeException(e);
        } finally {
            if (null != out) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * RSA密钥对象
     */
    public static class RsaKeyPair implements Serializable {

        private static final long serialVersionUID = 2130689702406754025L;

        /**
         * 公钥
         */
        private String publicKey;

        /**
         * 私钥
         */
        private String privateKey;

        public RsaKeyPair() {}

        public RsaKeyPair(String publicKey, String privateKey) {
            this.publicKey = publicKey;
            this.privateKey = privateKey;
        }

        public String getPublicKey() {
            return publicKey;
        }

        public void setPublicKey(String publicKey) {
            this.publicKey = publicKey;
        }

        public String getPrivateKey() {
            return privateKey;
        }

        public void setPrivateKey(String privateKey) {
            this.privateKey = privateKey;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;参数绑定后校验前的逻辑插入&quot;&gt;（2）参数绑定后、校验前的逻辑插入&lt;/h3&gt;
&lt;p&gt;实际上只要跟踪调试一下，就可以发现关键在于&lt;code&gt;ExtendedServletRequestDataBinder&lt;/code&gt;，覆盖两个方法即可：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import javax.servlet.ServletRequest;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.MutablePropertyValues;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.validation.AbstractPropertyBindingResult;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinder;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* package */&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RelaxedServletRequestDataBinder &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ExtendedServletRequestDataBinder {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RelaxedServletRequestDataBinder&lt;/span&gt;(Object target) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(target);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RelaxedServletRequestDataBinder&lt;/span&gt;(Object target, String objectName) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(target, objectName);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 添加属性值提供器的相关处理&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(MutablePropertyValues mpvs, ServletRequest request) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(mpvs, request);
        PropertyValuesProviders.&lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(mpvs, request, &lt;span class=&quot;fu&quot;&gt;getTarget&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getObjectName&lt;/span&gt;());
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 常规绑定之后的处理&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(ServletRequest request) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(request);
        PropertyValuesProviders.&lt;span class=&quot;fu&quot;&gt;afterBindValues&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getPropertyAccessor&lt;/span&gt;(), request, &lt;span class=&quot;fu&quot;&gt;getTarget&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getObjectName&lt;/span&gt;());
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; AbstractPropertyBindingResult &lt;span class=&quot;fu&quot;&gt;createBeanPropertyBindingResult&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RelaxedBeanPropertyBindingResult&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getTarget&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getObjectName&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;isAutoGrowNestedPaths&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getAutoGrowCollectionLimit&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个类只是提供一个入口，真正的逻辑委托给了&lt;code&gt;PropertyValuesProviders&lt;/code&gt;处理。在我的实现中，这里提取了一个接口：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import javax.servlet.ServletRequest;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.MutablePropertyValues;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.PropertyAccessor;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; IPropertyValuesProvider {&lt;span class=&quot;co&quot;&gt;//感谢JDK8中的默认实现&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(MutablePropertyValues mpvs, ServletRequest request, Object target, String name) {};

    &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterBindValues&lt;/span&gt;(PropertyAccessor accessor, ServletRequest request, Object target, String name) {};
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import javax.servlet.ServletRequest;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.MutablePropertyValues;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.PropertyAccessor;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PropertyValuesProviders {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; List&amp;lt;IPropertyValuesProvider&amp;gt; providers;

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;(required = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setProviders&lt;/span&gt;(List&amp;lt;IPropertyValuesProvider&amp;gt; providers) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (providers != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            PropertyValuesProviders.&lt;span class=&quot;fu&quot;&gt;providers&lt;/span&gt; = providers;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(MutablePropertyValues mpvs, ServletRequest request, Object target, String name) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; != providers) {
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (IPropertyValuesProvider provider : providers) {
                provider.&lt;span class=&quot;fu&quot;&gt;addBindValues&lt;/span&gt;(mpvs, request, target, name);
            }
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterBindValues&lt;/span&gt;(PropertyAccessor accessor, ServletRequest request, Object target, String name) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; != providers) {
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (IPropertyValuesProvider provider : providers) {
                provider.&lt;span class=&quot;fu&quot;&gt;afterBindValues&lt;/span&gt;(accessor, request, target, name);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加RSA解密的实现：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import java.lang.reflect.Field;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.ArrayList;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Collections;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.ConcurrentHashMap;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import javax.servlet.ServletRequest;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.PropertyAccessor;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.autumn.platform.core.crypto.RSAUtils;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.autumn.platform.core.crypto.RSAUtils.RsaKeyPair;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.autumn.platform.core.logger.Logs;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.autumn.platform.web.annotation.RsaDecrypt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AbstractRsaDecryptPropertyValuesProvider &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; IPropertyValuesProvider {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, List&amp;lt;Field&amp;gt;&amp;gt; cache = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, List&amp;lt;Field&amp;gt;&amp;gt;();

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterBindValues&lt;/span&gt;(PropertyAccessor accessor, ServletRequest request, Object target, String name) {
        RsaKeyPair pair = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getRsaKeyPair&lt;/span&gt;(accessor, request, target, name);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == pair) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Class&amp;lt;?&amp;gt; cls = target.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;(); !cls.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;); cls = cls.&lt;span class=&quot;fu&quot;&gt;getSuperclass&lt;/span&gt;()) {
            List&amp;lt;Field&amp;gt; fields = &lt;span class=&quot;fu&quot;&gt;resolveFields&lt;/span&gt;(cls);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; != fields &amp;amp;&amp;amp; !fields.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
                &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Field field : fields) {
                    &lt;span class=&quot;fu&quot;&gt;setDecryptValue&lt;/span&gt;(target, pair, field);
                }
            }
        }
    }

    &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; RsaKeyPair &lt;span class=&quot;fu&quot;&gt;getRsaKeyPair&lt;/span&gt;(PropertyAccessor accessor, ServletRequest request, Object target, String name);

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDecryptValue&lt;/span&gt;(Object target, RsaKeyPair pair, Field field) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Object value = field.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(target);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (value &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; String) {
                String text = RSAUtils.&lt;span class=&quot;fu&quot;&gt;decryptByPrivateKey&lt;/span&gt;((String) value, pair.&lt;span class=&quot;fu&quot;&gt;getPrivateKey&lt;/span&gt;());
                field.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(target, text);
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            Logs.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;解密&quot;&lt;/span&gt; + field + &lt;span class=&quot;st&quot;&gt;&quot;的值时出现异常&quot;&lt;/span&gt;, e);
        }
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Field&amp;gt; &lt;span class=&quot;fu&quot;&gt;resolveFields&lt;/span&gt;(Class&amp;lt;?&amp;gt; cls) {
        List&amp;lt;Field&amp;gt; fieldList = cache.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(cls);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == fieldList) {
            fieldList = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Field&amp;gt;();
            Field[] fields = cls.&lt;span class=&quot;fu&quot;&gt;getDeclaredFields&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; != fields) {
                &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Field field : fields) {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (field.&lt;span class=&quot;fu&quot;&gt;isAnnotationPresent&lt;/span&gt;(RsaDecrypt.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)) {
                        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!field.&lt;span class=&quot;fu&quot;&gt;isAccessible&lt;/span&gt;()) {
                            field.&lt;span class=&quot;fu&quot;&gt;setAccessible&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
                        }
                        fieldList.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(field);
                    }
                }
            }
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (fieldList.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
                fieldList = Collections.&lt;span class=&quot;fu&quot;&gt;emptyList&lt;/span&gt;();
            }
            cache.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(cls, fieldList);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; fieldList;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;@RsaDecrypt&lt;/code&gt;注解是自定义的，用于表示这个表单字段在接受参数时，需要先使用RSA解密。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 16:34:00 +0000</pubDate>
<dc:creator>linjisong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linjisong/p/8748683.html</dc:identifier>
</item>
<item>
<title>spring MVC框架入门(外加SSM整合) - 佳先森</title>
<link>http://www.cnblogs.com/cailijia52o/p/8732906.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cailijia52o/p/8732906.html</guid>
<description>&lt;h2&gt;一、什么是spring MVC&lt;/h2&gt;
&lt;p&gt;　　Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　---------百度百科&lt;/p&gt;
&lt;p&gt;　　从spring官网中可以看出，Spring MVC原名叫&lt;span&gt;&lt;span&gt;Spring Web MVC，它是构建在Servlet API上的最初的Web框架，从一开始就包含在Spring框架中。&lt;/span&gt;&lt;span&gt;正式名称“Spring Web MVC”来自其源模块&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/tree/master/spring-webmvc&quot;&gt;&lt;span&gt;&lt;span&gt;spring-webmvc&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;的名称， &lt;/span&gt;&lt;span&gt;但它通常被称为“Spring MVC”。&lt;/span&gt;&lt;/span&gt;Spring web mvc&lt;span&gt;和&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;truts2都&lt;span&gt;属于&lt;/span&gt;&lt;span&gt;表现层&lt;/span&gt;&lt;span&gt;的框架&lt;/span&gt;,&lt;span&gt;它是&lt;/span&gt;Spring框架&lt;span&gt;的一部分。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、spring MVC框架的作用&lt;/h2&gt;
&lt;p&gt;　　从请求中接收传入的参数，将处理后的结果返回给页面展示&lt;/p&gt;
&lt;h2&gt;三、spring MVC执行流程&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180408104111661-1868347.png&quot; alt=&quot;&quot; width=&quot;798&quot; height=&quot;362&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;1)、 用户发送请求至前端控制器DispatcherServlet&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;2)、 DispatcherServlet&lt;span&gt;收到请求调用&lt;/span&gt;HandlerMapping处理器映射器。&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;3)、 &lt;span&gt;处理器映射器根据请求&lt;/span&gt;url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;4)、 DispatcherServlet通过HandlerAdapter处理器适配器&lt;span&gt;调用处理器&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;5)、 &lt;span&gt;执行处理器&lt;/span&gt;(Controller，也叫后端控制器)。&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;6)、 Controller执行完成返回ModelAndView&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;7)、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;8)、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;9)、 ViewReslover解析后返回具体View&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;10)   DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;11)   DispatcherServlet响应用户&lt;/p&gt;
&lt;h2&gt;四、快速开发&lt;/h2&gt;
&lt;p&gt;需求：显示商品列表&lt;/p&gt;
&lt;h3&gt;1、导入所需基本依赖jar包&lt;/h3&gt;
&lt;p&gt;　jar包下载地址：&lt;a title=&quot;jar包下载&quot; href=&quot;https://github.com/spring-projects/spring-framework&quot; target=&quot;_blank&quot;&gt;springMVC_jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407092912456-1365707541.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2、在项目工程上创建源码包，用来存放配置文件&lt;/h3&gt;
&lt;h3&gt;3、创建spring MVC核心配置文件，文件名就叫SpringMvc.xml&lt;/h3&gt;
&lt;p&gt;　　导入相应地约束&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:dubbo&lt;/span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;code.alibabatech.com/schema/dubbo &lt;/span&gt;&lt;span&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;         
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4、创建日志文件，用于打印日志(log4j.properties)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Global logging configuration
log4j.rootLogger&lt;/span&gt;=&lt;span&gt;DEBUG, stdout
# Console output...
log4j.appender.stdout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern&lt;/span&gt;=%5p [%t] - %m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5、定义Controller类&lt;/h3&gt;
&lt;p&gt;　　ItemController是一个普通的java类，不需要实现任何接口，只需要在类上添加@Controller注解即可。@RequestMapping&lt;span&gt;注解指定请求的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;，其中“&lt;/span&gt;&lt;span&gt;.action&lt;/span&gt;&lt;span&gt;”可以加     也可以不加。注意：1.这里的配置@Controller注解 2.@RequestMapping用于识别域名后缀 3.&lt;/span&gt;modelAndView.setViewName用于设置跳转页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在添加注解的同时，还得配置扫描&lt;/span&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemsController {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定url到请求方法的映射
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;url中输入一个地址，例如：localhost:8888/SpringMvc/list.action
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用以替代了struts中采用的配置文件进行匹配来调用那个方法从而识别跳转那个页面&lt;/span&gt;
   @RequestMapping(&quot;/list&quot;)   
   &lt;span&gt;public&lt;/span&gt; ModelAndView itemsList()&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
       List&lt;/span&gt;&amp;lt;Items&amp;gt; itemList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Items&amp;gt;&lt;span&gt;();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品列表&lt;/span&gt;
        Items items_1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Items();
        items_1.setName(&lt;/span&gt;&quot;联想笔记本_3&quot;&lt;span&gt;);
        items_1.setPrice(6000f);
        items_1.setDetail(&lt;/span&gt;&quot;ThinkPad T430 联想笔记本电脑！&quot;&lt;span&gt;);
        
        Items items_2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Items();
        items_2.setName(&lt;/span&gt;&quot;苹果手机&quot;&lt;span&gt;);
        items_2.setPrice(5000f);
        items_2.setDetail(&lt;/span&gt;&quot;iphone6苹果手机！&quot;&lt;span&gt;);
        
        itemList.add(items_1);
        itemList.add(items_2);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模型视图
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;model模型：模型对象中存放了返回给页面的数据
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;view视图：视图对象中指定给返回的页面的位置
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建modelandView对象&lt;/span&gt;
        ModelAndView modelAndView = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加model(将返回给页面的数据放入模型和视图对象中)&lt;/span&gt;
        modelAndView.addObject(&quot;itemList&quot;&lt;span&gt;, itemList);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加视图（指定给 返回页面的位置）&lt;/span&gt;
        modelAndView.setViewName(&quot;jsp/itemList.jsp&quot;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6、在SpringMvc.xml中配置注解扫描&lt;/h3&gt;
&lt;p&gt;　　这里controller类是创建在cn.clj.controller包下的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:dubbo&lt;/span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;code.alibabatech.com/schema/dubbo &lt;/span&gt;&lt;span&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;
        &amp;lt;!-- 配置@Controller注解扫描 --&amp;gt;
        &amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&quot;cn.clj.controller&quot;/&amp;gt;
         
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7、在web.xml中配置前端控制器&lt;/h3&gt;
&lt;p&gt;　　注意：指定核心配置文件名不能写错，否则会找不到Controller类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- springMvc前端控制器 --&amp;gt;
  &amp;lt;servlet&amp;gt;
     &amp;lt;servlet-name&amp;gt;springMvc&amp;lt;/servlet-name&amp;gt;
     &lt;span&gt;&amp;lt;!--路径:spring-webmvc-4.1.3.RELEASE.jar\org.springframework.web.servlet  --&amp;gt;&lt;/span&gt;
     &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
    &lt;span&gt; &amp;lt;!-- 如果没有指定springMvc核心配置文件那么默认会去找/WEB_INF/+&amp;lt;servlet-name&amp;gt;的内容+  -servlet.xml配置文件 --&amp;gt;
     &amp;lt;!-- 指定springMvc核心配置文件位置 --&amp;gt;&lt;/span&gt;
     &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;classpath:SpringMvc.xml&amp;lt;/param-value&amp;gt;
     &amp;lt;/init-param&amp;gt;
     &amp;lt;!-- tomcat启动时就加载这个servlet --&amp;gt;
     &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
     &amp;lt;servlet-name&amp;gt;springMvc&amp;lt;/servlet-name&amp;gt;
     &amp;lt;url-pattern&amp;gt;*.action&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　 DispatcherServlet的路径为：&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407094422978-1410545744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;8、配置jsp&lt;/h3&gt;
&lt;p&gt;　在WebRoot下创建jsp文件夹，用来存放jsp&lt;/p&gt;
&lt;p&gt;　 1.需引入jstl标签   2.因为传的是itemList，接收值不能写错&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;
&lt;pre readability=&quot;8&quot;&gt;
&amp;lt;%@taglib uri=&quot;http://java.sun.com/jstl/core_rt&quot; prefix=&quot;c&quot;%&amp;gt;&lt;p&gt;&amp;lt;body&amp;gt; 
&amp;lt;form action=&quot;${pageContext.request.contextPath }/search.action&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
查询条件：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;!-- 如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用--&amp;gt;
&amp;lt;td&amp;gt;商品名称:&amp;lt;input type=&quot;text&quot; name=&quot;items.name&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;商品价格:&amp;lt;input type=&quot;text&quot; name=&quot;items.price&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;查询&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;span&gt;
商品列表：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;商品名称&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品价格&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;生产日期&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品描述&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;c:forEach items=&quot;${itemList}&quot; var=&quot;item&quot;&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;${item.name}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.price}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;fmt:formatDate value=&quot;${item.createtime}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.detail}&amp;lt;/td&amp;gt;
    
    &amp;lt;td&amp;gt;&amp;lt;a href=&quot;${pageContext.request.contextPath }/itemEdit.action?id=${item.id}&quot;&amp;gt;修改&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;

&amp;lt;/tr&amp;gt;
&amp;lt;/c:forEach&amp;gt;

&amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;9、测试&lt;/h3&gt;
&lt;p&gt;　　此时在浏览器中输入http://localhost:8080/项目名/list.action，如果成功跳转到显示页面为成功&lt;/p&gt;
&lt;h2&gt;二、关于注解处理器映射器和注解处理器适配器&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;注解式处理器映射器&lt;/strong&gt;：&lt;span&gt;注解式处理器映射器，对类中标记&lt;/span&gt;@ResquestMapping&lt;span&gt;的方法进行映射，根据&lt;/span&gt;ResquestMapping&lt;span&gt;定义的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;匹配&lt;/span&gt;&lt;span&gt;ResquestMapping&lt;/span&gt;&lt;span&gt;标记的方法，匹配成功返回&lt;/span&gt;HandlerMethod&lt;span&gt;对象给前端控制器，&lt;/span&gt;HandlerMethod&lt;span&gt;对象中封装&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;对应的方法&lt;/span&gt;&lt;span&gt;Method&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;注解式处理器映射器：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;注解式处理器适配器，对标记&lt;/span&gt;@ResquestMapping&lt;span&gt;的方法进行适配。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　方式一：手动配置最新版本的映射器和适配器(缺点：随着版本更新的重新配置)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 配置最新版的注解的处理器映射器 --&amp;gt;
         &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&amp;gt;
         &amp;lt;!-- 配置最新版的注解的处理器适配器 --&amp;gt;
         &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　方式二：自动配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　全部代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:dubbo&lt;/span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;code.alibabatech.com/schema/dubbo &lt;/span&gt;&lt;span&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;
        &amp;lt;!-- 配置@Controller注解扫描 --&amp;gt;
        &amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&quot;cn.clj.controller&quot;/&amp;gt;
        
        &lt;span&gt;&amp;lt;!-- 如果没有显示配置处理器映射器和处理器适配器那个springMvc会默认的dispatcherServlet.properties中查找
        对应的处理器映射器和处理器适配器去使用,每个请求都要扫描一次的默认配置文件，效率非常低，会降低访问速度，所以显示的配置处理器映射器和处理器适配器
         --&amp;gt;
         &amp;lt;!-- 注解形式的处理器适配器
         &amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;/&amp;gt; --&amp;gt;
         &amp;lt;!-- 注解形式的处理器映射器 
         &amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver&quot;/&amp;gt;--&amp;gt;
         &amp;lt;!-- 配置最新版的注解的处理器映射器，以上已经过时
         &amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&amp;gt;--&amp;gt;
         &amp;lt;!-- 配置最新版的注解的处理器适配器 
         &amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&amp;gt;--&amp;gt;&lt;/span&gt;
         &amp;lt;!-- 注解驱动：能够自动配置最新版的处理器映射器和处理器适配器 --&amp;gt;
         &amp;lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;
       
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三、关于视图解析器&lt;/h2&gt;
&lt;h3&gt;1.分析情形&lt;/h3&gt;
&lt;p&gt; 在controller中，每次配置跳转页面时，都要配置跳转视图的全部路径，有点麻烦&lt;/p&gt;
&lt;h3&gt;2、配置视图解析器&lt;/h3&gt;
&lt;p&gt; 功能：在配置文件中配置全局跳转视图的前缀名和后缀名，在controller类只要写省去后缀的jsp名即可，配置如下：&lt;/p&gt;
&lt;p&gt; 1）在SpringMvc.xml文件中配置视图解析器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　　　　　&lt;span&gt;&amp;lt;!-- 配置视图解析器 --&amp;gt;
         &amp;lt;!-- 作用：在controller中指定页面路径的时候就不用写页面的完整路径名称，直接写去掉后缀的页面名 --&amp;gt;&lt;/span&gt;
         &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
             &amp;lt;!--真正页面路径=前缀+页面名称+后缀  --&amp;gt;
             &amp;lt;!-- 跳转视图前缀 --&amp;gt;
             &amp;lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot;&amp;gt;&amp;lt;/property&amp;gt;
             &amp;lt;!-- 跳转视图后缀 --&amp;gt;
             &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&amp;gt;&amp;lt;/property&amp;gt;
　　　　　　&amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2）更改conroller类中的写法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        //&lt;/span&gt;&lt;span&gt;添加视图（指定给 返回页面的位置）&lt;/span&gt;
       &lt;span&gt;// modelAndView.setViewName(&quot;jsp/itemList.jsp&quot;);
&lt;/span&gt;&lt;span&gt;        modelAndView.setViewName(&quot;itemList&quot;);    &lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; modelAndView;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四、SSM整合&lt;/h2&gt;
&lt;p&gt;      个人认为，SpringMvc与Mybatis整合其实就是SSM整合，因为Spring与SpringMvc同属于一家公司，无需整合，当然也需要用到Spring的IOC特性业务分配：此时控制层交给SpringMvc,持久层交给MyBatis，创建管理交给Spring&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;Dao&lt;span&gt;层：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;、SqlMapConfig.xml，空文件即可。需要文件头。

&lt;/span&gt;2、applicationContext-&lt;span&gt;dao.xml。

a) 数据库连接池

b) SqlSessionFactory对象，需要spring和mybatis整合包下的。

c) 配置mapper文件扫描器。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service&lt;span&gt;层：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1、applicationContext-&lt;span&gt;service.xml包扫描器，扫描@service注解的类。

&lt;/span&gt;2、applicationContext-trans.xml配置事务。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表现层：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Springmvc.xml

&lt;/span&gt;1&lt;span&gt;、包扫描器，扫描@Controller注解的类。

&lt;/span&gt;2&lt;span&gt;、配置注解驱动。

&lt;/span&gt;3&lt;span&gt;、视图解析器

Web.xml

配置前端控制器。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1、快速部署环境&lt;/h3&gt;
&lt;p&gt; 1)导入相应的依赖jar包&lt;/p&gt;
&lt;p&gt;此包含Mybatis依赖jar包与逆向工程依赖jar包、Spring依赖jar包与Spring-mybatis整合包、SpringMVc依赖包，数据库驱动包，第三方连接池&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407103553809-1508050852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　 　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407103613105-1356798636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 2）在工程项目下(非src)创建源码包，用来存放配置文件,包名为config&lt;/p&gt;
&lt;p&gt; 3）创建分层包，采用MVC模式开发，每个包的业务不同&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407104239717-1700902508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 4）创建db.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
jdbc.driver=&lt;span&gt;com.mysql.jdbc.Driver
jdbc.url&lt;/span&gt;=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;192.168.174.132:3306/SSM&lt;/span&gt;
jdbc.username=&lt;span&gt;root
jdbc.password&lt;/span&gt;=root
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 5)配置log4j.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Global logging configuration
log4j.rootLogger&lt;/span&gt;=&lt;span&gt;DEBUG, stdout
# Console output...
log4j.appender.stdout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout&lt;/span&gt;=&lt;span&gt;org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern&lt;/span&gt;=%5p [%t] - %m%n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 6）创建spring核心配置文件之applicationContext-dao.xml&lt;/p&gt;
&lt;p&gt;  此文件用来管理dao层业务：配置数据源，配置SqlSessionFactory与dao层mapper扫描&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
    xmlns:tx&lt;/span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/util &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/util/spring-util-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;

    &amp;lt;!-- 加载配置文件 --&amp;gt;
    &amp;lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&amp;gt;
    &amp;lt;!-- 数据库连接池 --&amp;gt;
    &amp;lt;bean id=&quot;dataSource&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;span&gt;
        destroy&lt;/span&gt;-method=&quot;close&quot;&amp;gt;
        &amp;lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&amp;gt;
        &amp;lt;property name=&quot;maxActive&quot; value=&quot;10&quot;/&amp;gt;
        &amp;lt;property name=&quot;maxIdle&quot; value=&quot;5&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- mapper配置 --&amp;gt;
    &amp;lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&amp;gt;
    &amp;lt;bean id=&quot;sqlSessionFactory&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
        &amp;lt;!-- 数据库连接池 --&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;
        &amp;lt;!-- 加载mybatis的全局配置文件 --&amp;gt;
        &amp;lt;property name=&quot;configLocation&quot; value=&quot;classpath:SqlMapConfig.xml&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!-- 配置Mapper扫描器 --&amp;gt;
    &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&amp;gt;
        &amp;lt;property name=&quot;basePackage&quot; value=&quot;cn.clj.dao&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 7)创建spring核心配置文件之applicationContext-service.xml&lt;/p&gt;
&lt;p&gt;  此文件主要是负责业务层：开启service注解扫描&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
    xmlns:tx&lt;/span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans 
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop &lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop/spring-aop-4.0.xsd &lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx &lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx/spring-tx-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/util &lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&amp;gt;&lt;/span&gt;
    &amp;lt;!-- @service扫描 --&amp;gt;
    &amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&quot;cn.clj.service&quot;&amp;gt;&amp;lt;/context:component-scan&amp;gt;
    
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 8）创建spring核心配置文件之applicationContext-transaction.xml&lt;/p&gt;
&lt;p&gt;  此文件主要负责事务：配置事务管理并注入数据源，配置事务通知与切面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&lt;/span&gt; 
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx &lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx/spring-tx-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/util &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/util/spring-util-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;

    &amp;lt;!-- 事务管理器 --&amp;gt;
    &amp;lt;bean id=&quot;transactionManager&quot;
        &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;
        &amp;lt;!-- 数据源 --&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;!-- 通知 --&amp;gt;
    &amp;lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&amp;gt;
        &amp;lt;tx:attributes&amp;gt;
            &amp;lt;!-- 传播行为 --&amp;gt;
            &amp;lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&amp;gt;
            &amp;lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&amp;gt;
            &amp;lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&amp;gt;
            &amp;lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&amp;gt;
            &amp;lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&amp;gt;
            &amp;lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&amp;gt;
        &amp;lt;/tx:attributes&amp;gt;
    &amp;lt;/tx:advice&amp;gt;
    
    &amp;lt;!-- 切面 --&amp;gt;
    &amp;lt;aop:config&amp;gt;
        &amp;lt;aop:advisor advice-ref=&quot;txAdvice&quot;&lt;span&gt;
            pointcut&lt;/span&gt;=&quot;execution(* cn.clj.service.*.*(..))&quot; /&amp;gt;
    &amp;lt;/aop:config&amp;gt;
    
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  9）创建SpringMvc核心配置文件之SpringMvc.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xmlns:p&lt;/span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
    xmlns:dubbo&lt;/span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;span&gt;
    xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;code.alibabatech.com/schema/dubbo &lt;/span&gt;&lt;span&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;/span&gt;
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;
       &lt;span&gt; &amp;lt;!-- 配置@Controller注解扫描 --&amp;gt;&lt;/span&gt;
        &amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&quot;cn.clj.controller&quot;/&amp;gt;
        
         &lt;span&gt;&amp;lt;!-- 注解驱动：能够自动配置最新版的处理器映射器和处理器适配器 --&amp;gt;&lt;/span&gt;
         &amp;lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;
        &lt;span&gt; &amp;lt;!-- 配置视图解析器 --&amp;gt;
         &amp;lt;!-- 作用：在controller中指定页面路径的时候就不用写页面的完整路径名称，直接写去掉后缀的页面名 --&amp;gt;&lt;/span&gt;
         &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
             &amp;lt;!--真正页面路径=前缀+页面名称+后缀  --&amp;gt;
             &amp;lt;!-- 跳转视图前缀 --&amp;gt;
             &amp;lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot;&amp;gt;&amp;lt;/property&amp;gt;
             &amp;lt;!-- 跳转视图后缀 --&amp;gt;
             &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&amp;gt;&amp;lt;/property&amp;gt;
         &amp;lt;/bean&amp;gt;
         
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  10）配置服务器启动扫描&lt;/p&gt;
&lt;p&gt;    整合后以上的配置文件，服务器不能自动识别加载，需要在web.xml文件中开启包扫描&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &amp;lt;!-- 开启spring各核心配置文件扫描 --&amp;gt;
  &amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;classpath:applicationContext-*.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;
  &amp;lt;listener&amp;gt;
    &amp;lt;listener-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-&lt;span&gt;class&lt;/span&gt;&amp;gt;
  &amp;lt;/listener&amp;gt;
  &amp;lt;!-- 开启SpringMVc拦截器--&amp;gt;
  &amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
    &amp;lt;!-- 配置SpringMvc核心配置文件所在路径  --&amp;gt;
    &amp;lt;init-param&amp;gt;
      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
      &amp;lt;param-value&amp;gt;classpath:SpringMvc.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;*.action&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上整合环境部署大致完成&lt;/p&gt;
&lt;h3&gt;2、整合开发&lt;/h3&gt;
&lt;p&gt; 需求1：从数据库查询到商品信息，并将数据返回到jsp中&lt;/p&gt;
&lt;p&gt;  1）开启逆向工程自动生成pojo类和mapper接口和映射文件&lt;/p&gt;
&lt;p&gt;　　 1.1: 导入逆向工程jar包mybatis-generator-core-1.3.2&lt;/p&gt;
&lt;p&gt;　　 1.2 :在config包下创建generatorConfig.xml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!&lt;span&gt;DOCTYPE generatorConfiguration
  PUBLIC &lt;/span&gt;&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&amp;gt;

&amp;lt;generatorConfiguration&amp;gt;
    &amp;lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&amp;gt;
        &amp;lt;commentGenerator&amp;gt;
            &amp;lt;!-- 是否去除自动生成的注释 &lt;span&gt;true&lt;/span&gt;：是 ： &lt;span&gt;false&lt;/span&gt;:否 --&amp;gt;
            &amp;lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&amp;gt;
        &amp;lt;/commentGenerator&amp;gt;
        &amp;lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&amp;gt;
        &amp;lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;&lt;span&gt;
            connectionURL&lt;/span&gt;=&quot;jdbc:mysql://192.168.174.132:3306/SSM&quot; userId=&quot;root&quot;&lt;span&gt;
            password&lt;/span&gt;=&quot;root&quot;&amp;gt;
        &amp;lt;/jdbcConnection&amp;gt;
        &amp;lt;!-- &amp;lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;&lt;span&gt;
            connectionURL&lt;/span&gt;=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;&lt;span&gt; 
            userId&lt;/span&gt;=&quot;yycg&quot;&lt;span&gt;
            password&lt;/span&gt;=&quot;yycg&quot;&amp;gt;
        &amp;lt;/jdbcConnection&amp;gt; --&amp;gt;

        &amp;lt;!--&lt;span&gt; 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
            NUMERIC 类型解析为java.math.BigDecimal &lt;/span&gt;--&amp;gt;
        &amp;lt;javaTypeResolver&amp;gt;
            &amp;lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/javaTypeResolver&amp;gt;

        &amp;lt;!-- targetProject:生成PO类的位置 --&amp;gt;
       &lt;span&gt; &amp;lt;javaModelGenerator targetPackage=&quot;cn.clj.pojo&quot;&lt;/span&gt;&lt;span&gt;
            targetProject&lt;/span&gt;=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
            &amp;lt;!-- 从数据库返回的值被清理前后的空格 --&amp;gt;
            &amp;lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&amp;gt;
        &amp;lt;/javaModelGenerator&amp;gt;
        &amp;lt;!-- targetProject:mapper映射文件生成的位置 --&amp;gt;
       &lt;span&gt; &amp;lt;sqlMapGenerator targetPackage=&quot;cn.clj.dao&quot;&lt;/span&gt;&lt;span&gt; 
            targetProject&lt;/span&gt;=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/sqlMapGenerator&amp;gt;
        &amp;lt;!-- targetPackage：mapper接口生成的位置 --&amp;gt;
        &amp;lt;javaClientGenerator type=&quot;XMLMAPPER&quot;&lt;span&gt;
            targetPackage=&quot;cn.clj.dao&quot;&lt;/span&gt;&lt;span&gt; 
            targetProject&lt;/span&gt;=&quot;.\src&quot;&amp;gt;
            &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
            &amp;lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&amp;gt;
        &amp;lt;/javaClientGenerator&amp;gt;
       &lt;span&gt; &amp;lt;!-- 指定数据库表 --&amp;gt;
        &amp;lt;table tableName=&quot;items&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table tableName=&quot;user&quot;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
        &amp;lt;!-- &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_user&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_role&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_permission&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_user_role&quot;&amp;gt;&amp;lt;/table&amp;gt;
        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_role_permission&quot;&amp;gt;&amp;lt;/table&amp;gt; --&amp;gt;
        
        &amp;lt;!--&lt;span&gt; 有些表的字段需要指定java类型
         &lt;/span&gt;&amp;lt;table schema=&quot;&quot; tableName=&quot;&quot;&amp;gt;
            &amp;lt;columnOverride column=&quot;&quot; javaType=&quot;&quot; /&amp;gt;
        &amp;lt;/table&amp;gt; --&amp;gt;
    &amp;lt;/context&amp;gt;
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.3:创建启动类&lt;/p&gt;
&lt;p&gt;　　这里需要配置generatorConfig.xml文件所在路径，并运行此类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.start;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.generator.api.MyBatisGenerator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.generator.config.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.generator.config.xml.ConfigurationParser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.generator.internal.DefaultShellCallback;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StartGenerator {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; generator() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        List&lt;/span&gt;&amp;lt;String&amp;gt; warnings = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; overwrite = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        File configFile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;config/generatorConfig.xml&quot;&lt;span&gt;); 
        ConfigurationParser cp &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationParser(warnings);
        Configuration config &lt;/span&gt;=&lt;span&gt; cp.parseConfiguration(configFile);
        DefaultShellCallback callback &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyBatisGenerator(config,
                callback, warnings);
        myBatisGenerator.generate(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            StartGenerator startService &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StartGenerator();
            startService.generator();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　自动生成的文件&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180407111350432-748884719.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2、定义接口和实现类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ItemsService {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Items&amp;gt; list() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 注意：这里注入了Mapper接口，并开启了自动扫描注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.dao.ItemsMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.ItemsExample;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ItemsServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ItemsService{
    &lt;span&gt;@Autowired
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsMapper itemsMapper;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Items&amp;gt; list() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;selectByExampleWithBLOBs(example)包含文本类型&lt;/span&gt;
        ItemsExample example=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ItemsExample();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.createCriteria()可以创建查询条件;如果无需任何查询条件，直接将example实例化即可&lt;/span&gt;
        List&amp;lt;Items&amp;gt;  list=&lt;span&gt;itemsMapper.selectByExampleWithBLOBs(example);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、创建conroller类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemController {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里可以使用Autowired：自动装配(缺点：当一个接口有两个实现类时就无法世识别)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Resource:值是取实现类中定义的注解值&lt;/span&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsService itemsService;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询所有&lt;/span&gt;
    @RequestMapping(&quot;/list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ModelAndView itemsList() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        List&lt;/span&gt;&amp;lt;Items&amp;gt; list=&lt;span&gt;itemsService.list();
        ModelAndView modelAndView&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        modelAndView.addObject(&lt;/span&gt;&quot;itemList&quot;&lt;span&gt;,list);
        modelAndView.setViewName(&lt;/span&gt;&quot;itemList&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 4、创建itemList.jsp接受参数&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%@taglib uri=&quot;http://java.sun.com/jstl/core_rt&quot; prefix=&quot;c&quot;%&amp;gt;&lt;/span&gt;
&amp;lt;body&amp;gt; 
&amp;lt;form action=&quot;${pageContext.request.contextPath }/search.action&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
查询条件：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;!-- 如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用--&amp;gt;
&amp;lt;td&amp;gt;商品名称:&amp;lt;input type=&quot;text&quot; name=&quot;items.name&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;商品价格:&amp;lt;input type=&quot;text&quot; name=&quot;items.price&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;查询&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;span&gt;
商品列表：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;商品名称&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品价格&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;生产日期&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品描述&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;c:forEach items=&quot;$&lt;span&gt;{itemList}&lt;/span&gt;&quot; var=&quot;item&quot;&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;${item.name}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.price}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;fmt:formatDate value=&quot;${item.createtime}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.detail}&amp;lt;/td&amp;gt;
    
    &amp;lt;td&amp;gt;&amp;lt;a href=&quot;${pageContext.request.contextPath }/itemEdit.action?id=${item.id}&quot;&amp;gt;修改&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;

&amp;lt;/tr&amp;gt;
&amp;lt;/c:forEach&amp;gt;

&amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 5、测试：http://localhost:8080/项目名/list.action&lt;/h3&gt;
&lt;h2&gt;五、SpringMvc值参数绑定&lt;/h2&gt;
&lt;h3&gt; 1、关于@RequestParam标签&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;  1) &lt;/span&gt;&lt;span&gt;使用&lt;/span&gt;@RequestParam&lt;span&gt;常用于处理简单类型的绑定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　如：jsp传入一个值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;input type=&quot;text&quot; name=&quot;item_id&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 controller接收&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; String editItem(@RequestParam(value=&quot;item_id&quot;,required=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) String id) {
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.1 ) value：参数名字，即入参的请求参数名字&lt;span&gt;,形参名称为&lt;/span&gt;id&lt;span&gt;，但是这里使用&lt;/span&gt;value=&quot;item_id&quot;限定请求的参数名为item_id，所以页面传递参数的名必须为item_id。&lt;span&gt;如果请求参数中没有&lt;/span&gt;item_id&lt;span&gt;将跑出异常：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HTTP Status 500 - Required Integer parameter 'item_id' is not present&lt;/p&gt;
&lt;p&gt;1.2)&lt;span&gt;这里通过&lt;/span&gt;required=true&lt;span&gt;限定&lt;/span&gt;item_id&lt;span&gt;参数为必需传递，如果不传递则报&lt;/span&gt;400&lt;span&gt;错误，可以使用&lt;/span&gt;&lt;span&gt;defaultvalue&lt;/span&gt;&lt;span&gt;设置默认值，即使&lt;/span&gt;&lt;span&gt;required=true&lt;/span&gt;&lt;span&gt;也可以不传&lt;/span&gt;&lt;span&gt;item_id&lt;/span&gt;&lt;span&gt;参数值&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;  2、绑定普通类型&lt;/h3&gt;
&lt;p&gt;  需求1：打开编辑界面，查看商品详情&lt;/p&gt;
&lt;p&gt;  环境：引用以上环境，当触发itemList.jsp中的修改按钮，根据超链接跳转，传入参数为商品id&lt;/p&gt;
&lt;p&gt;  1)、编写接口和实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Items findItemsById(Integer id) &lt;span&gt;throws&lt;/span&gt; Exception
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.dao.ItemsMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.ItemsExample;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ItemsServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ItemsService{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsMapper itemsMapper;&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Items findItemsById(Integer id) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Items items&lt;/span&gt;=&lt;span&gt;itemsMapper.selectByPrimaryKey(id);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items;
    }&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2)、编写controller&lt;/p&gt;
&lt;p&gt;  参数通过域名封装到请求中，此时可以在方法中定义HttpServletRequest、HttpSession、Model将参数获得&lt;/p&gt;
&lt;p&gt;  注意：这里设置返回页面是个字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpSession;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.service.ItemsService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.vo.QueryVo;

@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemController {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里可以使用Autowired：自动装配(缺点：当一个接口有两个实现类时就无法世识别)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Resource:值是取实现类中定义的注解值&lt;/span&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsService itemsService;&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * springMvc默认支持的参数类型，也就是说在controller方法中可以加入这些，也可以不加
     * HttpServletRequest
     * HttpServletResponse
     * HttpSession
     * Model
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;/itemEdit&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String itemEdit(HttpServletRequest request,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        String idStr&lt;/span&gt;=request.getParameter(&quot;id&quot;&lt;span&gt;);
        Items items&lt;/span&gt;=&lt;span&gt;itemsService.findItemsById(Integer.parseInt(idStr));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Model模型：模型中放入了返回给页面的数据
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Model底层就是用的request域传递数据，但是对request进行了扩展&lt;/span&gt;
        model.addAttribute(&quot;item&quot;&lt;span&gt;,items);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果springMvc方法返回一个简单的string字符串，那么springMvc就会认为这个字符串就是页面的名称&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;editItem&quot;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3)、创建editItem.jsp接受参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;&lt;/span&gt;
  
 &amp;lt;body&amp;gt; 
    &amp;lt;!-- 上传图片是需要指定属性 enctype=&quot;multipart/form-data&quot; --&amp;gt;
    &amp;lt;!-- &amp;lt;form id=&quot;itemForm&quot; action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt; --&amp;gt;
    &amp;lt;form id=&quot;itemForm&quot;    action=&quot;${pageContext.request.contextPath }/updateitem.action&quot; method=&quot;post&quot;&amp;gt;
        &amp;lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;${item.id }&quot; /&amp;gt;&lt;span&gt; 修改商品信息：
        &lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;商品名称&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;span&gt;${item.name }&lt;/span&gt;&quot; /&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;商品价格&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;price&quot; value=&quot;&lt;span&gt;${item.price }&lt;/span&gt;&quot; /&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;商品简介&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;textarea rows=&quot;3&quot; cols=&quot;30&quot; name=&quot;detail&quot;&amp;gt;&lt;span&gt;${item.detail }&lt;/span&gt;&amp;lt;/textarea&amp;gt;
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/table&amp;gt;

    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 绑定pojo类型&lt;/p&gt;
&lt;p&gt; 需求2、更新数据&lt;/p&gt;
&lt;p&gt; 1)、前提有pojo类(其中在修改界面中的接受的Items 的属性必须与pojo类中的属性保持一致)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.pojo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Items {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Float price;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pic;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createtime;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String detail;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略set/get方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 1)、创建接口和实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; updateItems(Items items) &lt;span&gt;throws&lt;/span&gt; Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ItemsServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ItemsService{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsMapper itemsMapper;&lt;/span&gt;&lt;span&gt;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; updateItems(Items items) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此方法包含大对象文本&lt;/span&gt;
&lt;span&gt;        itemsMapper.updateByPrimaryKeyWithBLOBs(items);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2)、创建conroller类定义方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemController {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里可以使用Autowired：自动装配(缺点：当一个接口有两个实现类时就无法世识别)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Resource:值是取实现类中定义的注解值&lt;/span&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemsService itemsService;&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 更新数据 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.springMvc可以直接接受基本数据类型，包括string,spring Mvc可以帮你自动进行类型转换
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;controller方法接受的参数的变量名称必须要等于页面上input框的name属性值
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.springMvc可以直接接受pojo类型，要求页面上input框的name属性名称必须等于pojo的属性名称&lt;/span&gt;
    @RequestMapping(&quot;/updateitem&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String updateitem(Items items) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{     &lt;span&gt; //方式二
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public String updateitem(Integer id,String name,Float price,String detail) throws Exception{   //方式一
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Items items=new Items();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        items.setId(id);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        items.setName(name);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        items.setPrice(price);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        items.setDetail(detail);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里jsp源代码中屏蔽了接受时间的框，是因为String类型可以转换为基本类型，但是string类型不能转换为Date类型&lt;/span&gt;
        items.setCreatetime(&lt;span&gt;new&lt;/span&gt; Date());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库字段定义为非空&lt;/span&gt;
&lt;span&gt;        itemsService.updateItems(items);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3)、创建success.jsp页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;body&amp;gt;
   &amp;lt;h3&amp;gt;更新成功&amp;lt;/h3&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 解决中文乱码问题&lt;/p&gt;
&lt;p&gt; 1）针对post请求&lt;/p&gt;
&lt;p&gt;　　post请求是封装于服务器端，请求参数不会在域名中出现&lt;/p&gt;
&lt;p&gt;　　在&lt;strong&gt;web.xml&lt;/strong&gt;中配置过滤器,当服务器启动时就对请求中的参数进行字符编码转换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 解决post乱码问题 --&amp;gt;
  &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;
    &amp;lt;init-param&amp;gt;
      &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
      &amp;lt;param-value&amp;gt;utf-8&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2）针对get请求&lt;/p&gt;
&lt;p&gt;　　get请求是响应在地址栏中，通过地址栏可以看到请求参数&lt;/p&gt;
&lt;p&gt;　　将controller类中接受到的包含中文参数进行字符编码转换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
String name=&lt;span&gt;new&lt;/span&gt; String(request.getAttribute(&quot;参数名&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;));　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 绑定包装类&lt;/p&gt;
&lt;p&gt; 需求3：使用包装类接受高级查询条件中所传过来的值&lt;/p&gt;
&lt;p&gt; 1) 定义VO&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.vo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 演示高级查询，封装指定pojo类中的指定属性
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 佳先森
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryVo {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Items items;&lt;br/&gt;　&lt;span&gt;　//省略set/get、toString方法&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2) 定义jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;form action=&quot;${pageContext.request.contextPath }/&lt;span&gt;search.action&lt;/span&gt;&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
查询条件：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;!-- 如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用--&amp;gt;
&amp;lt;td&amp;gt;商品名称:&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;items.name&lt;/span&gt;&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;商品价格:&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;items.price&lt;/span&gt;&quot;/&amp;gt;&amp;lt;/td&amp;gt;&lt;br/&gt;&amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;查询&quot;/&amp;gt;&amp;lt;/td&amp;gt; 
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3) controller类中定义方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemController {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用&lt;/span&gt;
    @RequestMapping(&quot;/search&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String search(QueryVo vo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(vo);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 自定义参数绑定&lt;/p&gt;
&lt;p&gt; 需求：接受参数为时间格式&lt;/p&gt;
&lt;p&gt; 分析：为什么输入框为时间格式的conroller接收时会报错呢，是因为spring MVC能够将自动将字符串转换为原始型和包装类型，但是它不能讲时间格式的转换为字符串(时间格式有多种)，不然会报错，这里只能为时间格式自定义参数绑定&lt;/p&gt;
&lt;p&gt; 1) 创建工具类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.controller.converter;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.ParseException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.convert.converter.Converter;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自定义全局字符串转日期转换器
 * param:s -source：源
 * param:T -target:目标
 * 还需在springMv中配置此工具类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 佳先森
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomGlobalStrToDateConverter &lt;span&gt;implements&lt;/span&gt; Converter&amp;lt;String,Date&amp;gt;&lt;span&gt;{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date convert(String source) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Date date&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;span&gt;).parse(source);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; date;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ParseException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　2) 在SpringMVc上创建自定义转换器，并将它配置到注解驱动上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &amp;lt;!-- 注解驱动：能够自动配置最新版的处理器映射器和处理器适配器 --&amp;gt;&lt;/span&gt;
         &amp;lt;mvc:annotation-driven &lt;span&gt;conversion-service=&quot;conversionService&quot;&lt;/span&gt;&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt; 
&lt;span&gt;&amp;lt;!-- 配置自定义转换器:用于将字符串转换为日期格式
             步骤：1.编写工具类  2.将自定义的转换器配置到注解驱动上
         --&amp;gt;&lt;/span&gt;
&amp;lt;bean id=&quot;&lt;span&gt;conversionService&lt;/span&gt;&quot;
        &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&amp;gt;
        &amp;lt;property name=&quot;converters&quot;&amp;gt;
            &amp;lt;set&amp;gt;
                &lt;span&gt; &amp;lt;!-- 指定自定义转换器的全路径名名称 --&amp;gt;&lt;/span&gt;
                &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;cn.controller.converter.CustomGlobalStrToDateConverter&quot;/&amp;gt;
            &amp;lt;/set&amp;gt;
        &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3) jsp界面&lt;/p&gt;
&lt;p&gt;　　注意引入jstl/fmt标签，这是能够在界面中对时间内容进行格式整理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;  prefix=&quot;fmt&quot;%&amp;gt;&lt;/span&gt;&lt;br/&gt;&amp;lt;form id=&quot;itemForm&quot;    action=&quot;${pageContext.request.contextPath }/updateitem.action&quot; method=&quot;post&quot;&amp;gt;
   &amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
       &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;商品生产日期&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;createtime&quot;&lt;span&gt;
                    value&lt;/span&gt;=&quot;&amp;lt;fmt:formatDate value=&quot;${item.createtime}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&quot; /&amp;gt;&amp;lt;/td&amp;gt;
       &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 4) controller接收方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    @RequestMapping(&quot;/updateitem&quot;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String updateitem(Items items,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{&lt;/span&gt;
&lt;span&gt;         itemsService.updateItems(items);&lt;/span&gt;
         &lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;六、spring MVC与struts 2区别&lt;/h2&gt;
&lt;p class=&quot;15&quot;&gt;1、 springmvc&lt;span&gt;的入口是一个&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;即前端控制器，而&lt;/span&gt;&lt;span&gt;struts2&lt;/span&gt;&lt;span&gt;入口是一个&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;过虑器。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;2、 springmvc&lt;span&gt;是基于方法开发&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;一个&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;对应一个方法&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;，请求参数传递到方法的形参，可以设计为单例或多例&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;建议单例&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;struts2&lt;/span&gt;&lt;span&gt;是基于类开发，传递参数是通过类的属性，只能设计为多例。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;3、 Struts&lt;span&gt;采用值栈存储请求和响应的数据，通过&lt;/span&gt;&lt;span&gt;OGNL&lt;/span&gt;&lt;span&gt;存取数据，&lt;/span&gt; &lt;span&gt;springmvc&lt;/span&gt;&lt;span&gt;通过参数解析器是将&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;请求内容解析，并给方法形参赋值，将数据和视图封装成&lt;/span&gt;&lt;span&gt;ModelAndView&lt;/span&gt;&lt;span&gt;对象，最后又将&lt;/span&gt;&lt;span&gt;ModelAndView&lt;/span&gt;&lt;span&gt;中的模型数据通过&lt;/span&gt;&lt;span&gt;reques&lt;/span&gt;&lt;span&gt;域传输到页面。&lt;/span&gt;Jsp&lt;span&gt;视图解析器默认使用&lt;/span&gt;&lt;span&gt;jstl&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;15&quot;&gt;&lt;span&gt;七、spring MVC高级参数绑定&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;15&quot;&gt;&lt;span&gt; 1、绑定数组&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 需求：演示批量删除&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 1) 定义jsp&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　jsp中包含一个form表单，多个input框前有个checkbox复选框&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;form action=&quot;${pageContext.request.contextPath }/&lt;span&gt;delAll.action&lt;/span&gt;&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
   查询条件：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
&lt;span&gt;&amp;lt;!-- 如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用--&amp;gt;&lt;/span&gt;
&amp;lt;td&amp;gt;商品名称:&amp;lt;input type=&quot;text&quot; name=&quot;items.name&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;商品价格:&amp;lt;input type=&quot;text&quot; name=&quot;items.price&quot;/&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;&lt;span&gt;&amp;lt;input type=&quot;submit&quot; value=&quot;批量删除&quot;/&amp;gt;&lt;/span&gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;span&gt;
商品列表：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;商品名称&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品价格&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;生产日期&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品描述&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;c:forEach items=&quot;${&lt;span&gt;itemList&lt;/span&gt;}&quot; var=&quot;item&quot;&amp;gt;
&amp;lt;tr&amp;gt;
  &lt;span&gt;  &amp;lt;!-- 批量删除：name属性名称等于vo中的接受的属性名称 --&amp;gt;&lt;/span&gt;
    &amp;lt;td&amp;gt;
        &amp;lt;inp&lt;span&gt;ut type=&quot;checkbox&quot;  name=&quot;&lt;span&gt;&lt;strong&gt;ids&lt;/strong&gt;&lt;/span&gt;&quot; value=&quot;${item.id}&quot;/&amp;gt;&lt;/span&gt;
    &amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.name}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.price}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;fmt:formatDate value=&quot;${item.createtime}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;${item.detail}&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;a href=&quot;${pageContext.request.contextPath }/itemEdit.action?id=${item.id}&quot;&amp;gt;修改&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/c:forEach&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 2)定义controller中的方法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　这里是通过复选框将选中的数据进行传送，controller方法中得用数组来接收&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;  方式一：数组作为参数进行接收：注意这里属性名(ids)要与复选框保持一致&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果批量删除，一堆input复选框，那么可以提交数据(只有被选中的时候才可以提交)&lt;/span&gt;
    @RequestMapping(&quot;/delAll&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String delAll(String[] &lt;strong&gt;ids&lt;/strong&gt;) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(ids.toString());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   方式二：将数组作为属性封装到VO对象中，将VO对象作为参数进行接收&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryVo {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Items items;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;批量删除&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer[] ids;
    
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略set/get方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果批量删除，一堆input复选框，那么可以提交数据(只有被选中的时候才可以提交)&lt;/span&gt;
    @RequestMapping(&quot;/delAll&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String delAll(QueryVo vo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(vo.getItems().getName());
                System.out.println(queryVo.getItems().getPrice());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
    }   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2、绑定集合(将表单的数据绑定到List中)&lt;/p&gt;
&lt;p&gt;　需求：对数据进行批量修改&lt;/p&gt;
&lt;p&gt;  1) 在pojo类中定义一个集合的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.vo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 演示高级查询，封装指定pojo类中的指定属性
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 佳先森
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryVo {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Items items;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户对象
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;。。。。
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;批量删除&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer[] ids;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;批量修改&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; List&amp;lt;Items&amp;gt;&lt;span&gt; itemsList;
    
    
&lt;/span&gt;&lt;span&gt;&lt;span&gt;    //省略set/get，toString()方法&lt;/span&gt;
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   2）更改jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;form action=&quot;${pageContext.request.contextPath }/updateAll.action&quot; method=&quot;post&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;
查询条件：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
&lt;span&gt;&amp;lt;!-- 如果controller接受的是vo，那么页面上input框中name属性值要等于vo属性.属性 (..)进行引用--&amp;gt;&lt;/span&gt;
&amp;lt;td&amp;gt;商品名称:&amp;lt;input type=&quot;text&quot; name=&quot;items.name&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;商品价格:&amp;lt;input type=&quot;text&quot; name=&quot;items.price&quot;/&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;&lt;span&gt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;批量修改&quot;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;span&gt;
商品列表：
&lt;/span&gt;&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;商品名称&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品价格&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;生产日期&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;商品描述&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;c:forEach items=&quot;${itemList}&quot; var=&quot;item&quot; varStatus=&quot;status&quot;&amp;gt;
  &amp;lt;tr&amp;gt;
  &lt;span&gt;  &amp;lt;!-- 如果批量修改，可以用List&amp;lt;pojo&amp;gt;来接受，页面上input框的name属性值=vo中的接受的属性名称+[list的下标]+.+list泛型属性的名称 --&amp;gt;&lt;/span&gt;
    &amp;lt;td&amp;gt;
        &amp;lt;input type=&quot;checkbox&quot;  &lt;span&gt;name=&quot;ids&quot; value=&quot;${item.id}&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;input type=&quot;hidden&quot;  name=&quot;itemsList[${status.index}].id&quot; value=&quot;${item.id}&quot;/&amp;gt;
    &amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;itemsList[${status.index}].name&lt;/span&gt;&quot; value=&quot;${item.name}&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;itemsList[${status.index}].price&lt;/span&gt;&quot; value=&quot;${item.price}&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;itemsList[${status.index}].createtime&lt;/span&gt;&quot; value=&quot;&amp;lt;fmt:formatDate value=&quot;${item.createtime}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&quot;/&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;&lt;span&gt;itemsList[${status.index}].detail&lt;/span&gt;&quot; value=&quot;${item.detail}&quot;/&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;&amp;lt;a href=&quot;${pageContext.request.contextPath }/itemEdit.action?id=${item.id}&quot;&amp;gt;修改&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/c:forEach&amp;gt;

&amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3）在controller类中创建接受方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;批量修改&lt;/span&gt;
    @RequestMapping(&quot;/updateAll&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String updateAll(QueryVo vo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(vo.&lt;/span&gt;getItems().getName()&lt;span&gt;); &lt;br/&gt;&lt;/span&gt;        System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(vo.getItems().getPrice());&lt;br/&gt;&lt;span&gt;              return&lt;/span&gt; &quot;&quot;&lt;span&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;八、关于spring MVC窄化请求映射&lt;/h2&gt;
&lt;p&gt;　　分析：在团队开发情况下，不同controller中可能出现一个或多个方法RequestMapping值相同，因为配置文件中采用的是包扫描的方法进行映射，就有可能在输入域名的时候跳错controller中的方法。此时，如果为了区分每个conroller中的每个方法，必须配置窄化请求映射，相当于给类起个名字，每当反问域名时，指定跳转方法uri前必须加上这个“类名”,通过此方法对类行进分类管理&lt;/p&gt;
&lt;p&gt;　　如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;窄化请求映射：为防止方法名重名，相当于在url中多加了一层目录，房子重名&lt;/span&gt;
@RequestMapping(&quot;/items&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ItemController {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;批量修改&lt;/span&gt;
    @RequestMapping(&quot;/updateAll&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String updateAll(QueryVo vo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(vo);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　如果以后要跳转到该方法，域名得写成http://localhost:8080/项目名/&lt;strong&gt;items&lt;/strong&gt;/updateAll.action&lt;/p&gt;
&lt;h2&gt;九、spring MVC之请求方法限定&lt;/h2&gt;
&lt;p&gt; 语法为&lt;span&gt;@RequestMapping(value=&quot;/XXX&quot;,&lt;/span&gt;&lt;span&gt;&lt;strong&gt;method=&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;RequestMethod.XX&lt;/strong&gt;&lt;/span&gt;),其中XX可以写GET或者POST，如果在方法中限定了请求方法而jsp中表单提交方式不是指定的，会报405错误&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
@RequestMapping(value=&quot;/list&quot;,&lt;span&gt;&lt;strong&gt;method=&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;RequestMethod.GET&lt;/strong&gt;&lt;/span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ModelAndView itemsList() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        List&lt;/span&gt;&amp;lt;Items&amp;gt; list=&lt;span&gt;itemsService.list();
        System.out.println(&lt;/span&gt;&quot;进入了&quot;&lt;span&gt;);
        ModelAndView modelAndView&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        modelAndView.addObject(&lt;/span&gt;&quot;itemList&quot;&lt;span&gt;,list);
        modelAndView.setViewName(&lt;/span&gt;&quot;itemList&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;十、controller类方法返回值&lt;/h2&gt;
&lt;p&gt;　　 controller方法返回值包含多种,一下介绍几种常用的：&lt;/p&gt;
&lt;h3&gt;　1、ModelAndView方式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    @RequestMapping(value=&quot;/list&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ModelAndView&lt;/span&gt; itemsList() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        List&lt;/span&gt;&amp;lt;Items&amp;gt; list=&lt;span&gt;itemsService.list();&lt;/span&gt;&lt;span&gt;
        ModelAndView modelAndView=new&lt;/span&gt;&lt;span&gt;&lt;span&gt; ModelAndView();&lt;/span&gt;
       &lt;span&gt; modelAndView.addObject(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;itemList&quot;,list);
        modelAndView.setViewName(&quot;itemList&quot;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　2、String方式(直接return一个字符串)，返回的数据由model完成&lt;/h3&gt;
&lt;p&gt;　种类一：放回普通字符串(去掉页面扩展名)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/search&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String search(QueryVo vo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(vo);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　种类二：请求转发方式&lt;/p&gt;
&lt;p&gt;　注意：这里是请求转发跳转到同一个Controller中的注解值为&lt;span&gt;itemEdit的方法，请求转发能够携带值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    @RequestMapping(&quot;/updateitem&quot;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String updateitem(Items items,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{&lt;/span&gt;
&lt;span&gt;         itemsService.updateItems(items);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求转发：浏览器中的url不发生改变，request域中的数据可以带到转发后的方法中&lt;/span&gt;
         model.addAttribute(&quot;id&quot;,items.getId());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者：request.setAttribute(&quot;id&quot;,items.getId())
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;springMvc中请求转发：返回的字符串以forward:开头的都是请求转发
         &lt;/span&gt;&lt;span&gt;return &quot;forward:itemEdit.action&quot;;&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　种类三：重定向方式&lt;/p&gt;
&lt;p&gt;　　注意：重定向的方式是不能携带值的，如果要传参数，得封装到域名中(如：return &quot;redirect:itemsEdit.action?id=&quot;+items.getId())&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    @RequestMapping(&quot;/updateitem&quot;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String updateitem(Items items,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{&lt;/span&gt;
&lt;span&gt;         itemsService.updateItems(items);&lt;/span&gt;
         model.addAttribute(&quot;id&quot;,items.getId());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在springMvc中凡是以redirect:字符串开头的的都是重定向&lt;/span&gt;
         &lt;span&gt;return&lt;/span&gt; &quot;redirect:itemsEdit.action&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　种类三：返回值为void&lt;/p&gt;
&lt;p&gt;　　这里演示的请求请求转发的方式(如果controller方法返回值为void，则不走SpringMvc组件，需要些完整的路径名称))&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    @RequestMapping(&quot;/updateitem&quot;&lt;span&gt;)
    &lt;/span&gt; &lt;span&gt;public void updateitem(Items items,HttpServletRequest request,HttpServletResponse response) throws Exception{&lt;/span&gt;
&lt;span&gt;        itemsService.updateItems(items);&lt;/span&gt;
        &lt;span&gt; request.setAttribute(&quot;id&quot;,items.getId())
         request.getRequestDispatcher(&quot;/jsp/success.jsp&quot;).forward(request, response);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;十一、spring MVC之全局异常处理&lt;/h2&gt;
&lt;p&gt;　　需求：当条件查询询信息时出现错误(没有该商品)，都会跳转到指定的错误页面&lt;/p&gt;
&lt;h3&gt;　　1、定义异常类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.vo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomerException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String message;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomerException(String message) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.message =&lt;span&gt; message;
    }
 &lt;span&gt; //省略set/get方法&lt;/span&gt;&lt;/span&gt;&lt;span&gt;   
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2、定义异常处理工具类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GlobalExceptionResolver &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerExceptionResolver{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView resolveException(HttpServletRequest request,
            HttpServletResponse response, Object handler, Exception ex) {
        ex.printStackTrace();
        CustomerException customerException&lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ex &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; CustomerException){
            customerException&lt;/span&gt;=&lt;span&gt;(CustomerException) ex;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            customerException&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; CustomerException(&quot;系统错误，请联系管理员&quot;&lt;span&gt;);
        }
        ModelAndView model&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        model.addObject(&lt;/span&gt;&quot;message&quot;&lt;span&gt;,customerException);
        model.setViewName(&lt;/span&gt;&quot;error&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; model;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　3、创建异常页面error.jsp&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;&lt;span&gt;
    您的操作出现错误如下：&lt;/span&gt;&amp;lt;br/&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;font color=&quot;red&quot;&amp;gt;${message}&amp;lt;/font&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　4、配置异常处理(在SpingMvc.xml文件中配置处理器)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 异常处理器 --&amp;gt;
&amp;lt;bean id=&quot;handlerExceptionResolver&quot; &lt;span&gt;class&lt;/span&gt;=&quot;cn.clj.vo.CustomerException&quot;/&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5、利用异常类&lt;/h3&gt;
&lt;p&gt;　　 在调用查询方法时，如果查询到的商品不存在，抛出自定义异常类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    @RequestMapping(&quot;/itemEdit&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String itemEdit(HttpServletRequest request,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        String idStr&lt;/span&gt;=request.getParameter(&quot;id&quot;&lt;span&gt;);
        Items items&lt;/span&gt;=&lt;span&gt;itemsService.findItemsById(Integer.parseInt(idStr));
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(items==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw new CustomerException(&quot;您查询的信息不存在&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;
        }&lt;/span&gt;
        model.addAttribute(&quot;item&quot;&lt;span&gt;,items);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;editItem&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　6、测试&lt;/h3&gt;
&lt;p&gt;　　当查询一个不存在的商品，如果成功跳转到自定义异常界面，表示配置成功&lt;/p&gt;
&lt;h2&gt;十二、spring MVC之上传图片&lt;/h2&gt;
&lt;p&gt;　　分析：企业中像那种高并发项目，都会有不同的服务器接受不同资源，利用nginx实现负载均衡。这里因为只上传图片，服务器只有tomcat，所以只能在tomcat中配置。&lt;/p&gt;
&lt;h3&gt;　　1、配置虚拟存储路径&lt;/h3&gt;
&lt;p&gt;　　此配置就是将上传的图片放置到指定的文件夹下&lt;/p&gt;
&lt;p&gt;　　做法：进入tomcat/conf/server.xml文件中，加入下面一条命令，表示到域名以pic结尾时，访问的目录为&lt;span&gt;E:\壁纸文件夹下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;Context docBase=&quot;E:\壁纸&quot; path=&quot;/pic&quot; reloadable=&quot;false&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2、加入文件上传依赖jar包&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180408224324435-1754544305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　3、在SqlMapConfig.xml中配置文件上传解析器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  &amp;lt;!-- 文件上传 --&amp;gt;
    &amp;lt;bean id=&quot;multipartResolver&quot;
        &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&amp;gt;
        &amp;lt;!-- 设置上传文件的最大尺寸为5MB --&amp;gt;
        &amp;lt;property name=&quot;maxUploadSize&quot;&amp;gt;
            &amp;lt;value&amp;gt;5242880&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　4、在Controller中创建文件上传处理方法&lt;/h3&gt;
&lt;p&gt;　　 文件上传是通过表单提交的，所提交的是一连串字符串，需对字符串进行处理,这里为了防止所存的图片文件重名，采用了随机字符串进行拼接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;演示上传图片:注意&quot;pictureFile&quot;是与jsp中文件上传属性保持一致&lt;/span&gt;
    @RequestMapping(&quot;/upload&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String upload(MultipartFile &lt;span&gt;pictureFile&lt;/span&gt;,Items items,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.获取图片完整名称&lt;/span&gt;
        String fileStr=&lt;span&gt;pictureFile.getOriginalFilename(); 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.使用随机生成的字符串+源图片扩张名组成新的图片名称，防止图片重名&lt;/span&gt;
        String newFileName=UUID.randomUUID().toString()+fileStr.substring(fileStr.lastIndexOf(&quot;.&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.将图片保存到硬盘&lt;/span&gt;
        pictureFile.transferTo(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\壁纸\\&quot;+&lt;span&gt;newFileName));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.将图片名称保存到数据库&lt;/span&gt;
&lt;span&gt;        items.setPic(newFileName);
         itemsService.updateItems(items);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5、创建具有图片上传的form表单的jsp页面&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;form id=&quot;itemForm&quot;    action=&quot;${pageContext.request.contextPath }/upload.action&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
　　　　&amp;lt;table width=&quot;100%&quot; border=1&amp;gt;&lt;br/&gt;　　　　&amp;lt;tr&amp;gt;
     　　　　 &amp;lt;td&amp;gt;商品图片&amp;lt;/td&amp;gt;
      　　　　&amp;lt;td&amp;gt;
       　　　　 &amp;lt;c:&lt;span&gt;if&lt;/span&gt; test=&quot;${item.pic!=null}&quot;&amp;gt;
          　　　　 &amp;lt;img src=&quot;/pic/${item.pic}&quot; width=100 height=100/&amp;gt;
          　　 　　 &amp;lt;br/&amp;gt;
        　　　　 &amp;lt;/c:&lt;span&gt;if&lt;/span&gt;&amp;gt;
         　　　　&amp;lt;input type=&quot;file&quot;  name=&quot;&lt;span&gt;pictureFile&lt;/span&gt;&quot;/&amp;gt; 
         　　&amp;lt;/td&amp;gt;
　　　　&amp;lt;/tr&amp;gt;
　　　　&amp;lt;tr&amp;gt;
         &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&amp;gt;
         &amp;lt;/td&amp;gt;
 　　  &amp;lt;/tr&amp;gt;&lt;br/&gt;　　 &amp;lt;/table&amp;gt;
 &amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;十三、spring MVC之Json&lt;/h2&gt;
&lt;p&gt;　spring MVC是支持Json格式的，需要配置@RequestBody&lt;/p&gt;
&lt;p&gt;　@RequestBody&lt;span&gt;注解用于读取&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;请求的内容&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;字符串&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;，通过&lt;/span&gt;&lt;span&gt;springmvc&lt;/span&gt;&lt;span&gt;提供的&lt;/span&gt;&lt;span&gt;HttpMessageConverter&lt;/span&gt;&lt;span&gt;接口将读到的内容转换为&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;等格式的数据并绑定到&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;方法的参数上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　需求：利用ajax传送json数据，contoller类定义方法进行接受，并进行相应&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　1、导入json依赖jar包&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201804/1226944-20180408230711722-1492624572.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;　　2、必须有注解驱动，基于上面环境已经配置，这里无须再配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 注解驱动：能够自动配置最新版的处理器映射器和处理器适配器 --&amp;gt;
         &amp;lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　3、导入jquery依赖jar包&lt;/h3&gt;
&lt;h3&gt;　　4、jsp中调用ajax请求&lt;/h3&gt;
&lt;p&gt;　　这里当触发input按钮，就会调用ajax请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;${pageContext.request.contextPath }/js/jquery-1.4.4.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    function sendJson(){
        $.ajax({
            type:&lt;/span&gt;&quot;post&quot;&lt;span&gt;,
            url:&lt;/span&gt;&quot;${pageContext.request.contextPath }/&lt;span&gt;sendJson&lt;/span&gt;.action&quot;&lt;span&gt;,&lt;br/&gt;　　　　　　　　&amp;lt;!--ajax默认以text文本形式传递，如果要传递json的指定为json--&amp;gt;
            contentType:&lt;/span&gt;&quot;application/&lt;span&gt;&lt;strong&gt;json&lt;/strong&gt;&lt;/span&gt;;charset=utf-8&quot;&lt;span&gt;,
            data:&lt;/span&gt;'{&quot;name&quot;:&quot;测试商品&quot;,&quot;price&quot;:99.9}'&lt;span&gt;,
            success:function(data){
                alert(data);
            }
        });
    
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;input type=&quot;button&quot; value=&quot;sendJson&quot; onClick=&quot;sendJson()&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5、参数接受&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入jackson的jar包在controller的方法中可以使用@RequestBody，
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让springMvc将json格式字符串自动转换我java中pojo
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：页面json中key要等于java中pojo的属性名称
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;controller方法返回pojo类型的对象并且用@ResponseBody注解，springMvc会自动将pojo对象转换为json格式字符串&lt;/span&gt;
        @RequestMapping(&quot;/sendJson&quot;&lt;span&gt;)
        @ResponseBody
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Items sendJson(@RequestBody Items items) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public void sendJson(@RequestBody Items items) throws Exception{&lt;/span&gt;
        System.out.println(items.getName()+&quot;\t&quot;+&lt;span&gt;items.getPrice());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方式一，返回值为void这里无须设置跳转页面，ajax会自动跳转
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方式二：返回值为Items pojo类，方法中参数必须配置@ResponseBody注解，会给界面返回Item 对象&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; items;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;十四、spring MVC之Restful风格&lt;/h2&gt;
&lt;h3&gt;　　1、什么是Restfull风格&lt;/h3&gt;
&lt;p&gt;　　一种软件架构风格，设计风格而&lt;strong&gt;不是&lt;/strong&gt;标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　------  360百科&lt;/p&gt;
&lt;p&gt;　　简而言之：Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格，是对http协议的诠释。&lt;br/&gt;　　资源定位：互联网所有的事物都是资源，要求url中没有动词，只有名词。没有参数&lt;br/&gt;　　Url格式：http://blog.csdn.net/beat_the_world/article/details/45621673&lt;br/&gt;　　资源操作：使用put、delete、post、get，使用不同方法对资源进行操作。分别对应添加、删除、修改、查询。一般使用时还是post和get。Put和Delete几乎不用。&lt;/p&gt;
&lt;h3&gt;　　2、怎么使用Restful&lt;/h3&gt;
&lt;p&gt;　　 需求：更改访问路径格式，采用Restful风格&lt;/p&gt;
&lt;p&gt;　　 1) 配置restful配置&lt;/p&gt;
&lt;p&gt;　　    此时需要更改web.xml文件中的拦截对象，以前是针对所有的action(&quot;*.action&quot;)，现在是针对所有对象(&quot;/&quot;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &amp;lt;!-- 开启SpringMVc拦截器--&amp;gt;
  &amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
    &amp;lt;!-- 配置SpringMvc核心配置文件所在路径  --&amp;gt;
    &amp;lt;init-param&amp;gt;
      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
      &amp;lt;param-value&amp;gt;classpath:SpringMvc.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;SpringMvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;!-- 
        *&lt;span&gt;.action:代表拦截后缀名为.action结尾的
        &lt;/span&gt;/&lt;span&gt;        :拦截所有但是不包括.jsp
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;        :拦截所有包括.jsp
     --&amp;gt;
   &lt;span&gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2) jsp请求书写规范&lt;/p&gt;
&lt;p&gt;　　这里是传递了一个id参数，请求域名中去掉了aciton或者特殊符号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;a href=&quot;${pageContext.request.contextPath }&lt;span&gt;/restful/${item.id}&lt;/span&gt;&quot;&amp;gt;修改&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3) 接受参数&lt;/p&gt;
&lt;p&gt;　　　通过&lt;em&gt;@RequestMapping(&quot;/restful/{id}&quot;)接收具有restful风格的域名;&lt;/em&gt;@PathVariable 接受参数值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;通过@PathVariable可以接收url中所传过来的参数
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RequestMapping(&quot;/restful/{id}/{张三}&quot;)传多参
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RequestMapping(&quot;/restful/{id}&quot;)中接受参数使用大括号中加上变量名称，@PathVariable中变量名称要和@RequestMapping中变量名称保持一致&lt;/span&gt;
        &lt;span&gt;@RequestMapping(&quot;/restful/{id}&quot;)
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String restful(&lt;span&gt;@PathVariable(&quot;id&quot;)&lt;/span&gt; Integer id,HttpServletRequest request,Model model) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        public String restful(@PathVariable(&quot;id&quot;) Integer id,@PathVariable(&quot;张三&quot;) String name,HttpServletRequest request,Model model) throws Exception{&lt;/span&gt;
            Items items=&lt;span&gt;itemsService.findItemsById(id);
            model.addAttribute(&lt;/span&gt;&quot;item&quot;&lt;span&gt;,items);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;editItem&quot;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;十五、spring MVC之拦截器&lt;/h2&gt;
&lt;h3&gt;　1、怎么定义一个拦截器&lt;/h3&gt;
&lt;p&gt;　 1) 创建一个自定义拦截器类，继承HandlerInterceptor接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.interceptor;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.HandlerInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Interceptor1 &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行实际：Controller以及执行，ModelAndView已经返回
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用场景：记录操作日志(如记录用户登录的ip，时间等)&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; afterCompletion(HttpServletRequest arg0,
            HttpServletResponse arg1, Object arg2, Exception arg3)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        System.out.println(&lt;/span&gt;&quot;afterCompletion&quot;&lt;span&gt;);
        
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行实际：Controller方法已经执行，ModelAndView还没返回
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用场景：可以再次方法中设置全局的数据处理业务，这里有个ModelAndView，可以添加全局参数&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; postHandle(HttpServletRequest arg0, HttpServletResponse arg1,
            Object arg2, ModelAndView arg3) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;postHandle&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回boolean值：如果返回true：放行；false：拦截
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行时机：controller方法没有被执行，ModelAndView没有被返回
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用场景：权限验证&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; preHandle(HttpServletRequest arg0, HttpServletResponse arg1,
            Object arg2) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;preHandle&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2) 在springMvc.xml配置拦截器(这里是配置全局拦截器)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 配置拦截器 --&amp;gt;
&amp;lt;mvc:interceptors&amp;gt;
        &amp;lt;mvc:interceptor&amp;gt;
        &lt;span&gt;&amp;lt;!--拦截请求的路径要拦截所有必须配置成/**&lt;/span&gt;&lt;span&gt;&lt;span&gt;(不能是/*，它只拦截一层目录) --&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;mvc:mapping path=&quot;/**&quot;/&amp;gt;
         指定拦截器的位置
        &amp;lt;bean class=&quot;cn.clj.interceptor.Interceptor1&quot;/&amp;gt;
        &amp;lt;/mvc:interceptor&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3)启动tomcat，就会自动调用拦截器&lt;/p&gt;
&lt;h3&gt;　　2、拦截器应用之登录(身份认证)&lt;/h3&gt;
&lt;p&gt;　　 分析：在登录界面中，当用户输入自己信息时，会调用后端方法，拦截器检查session中否存在这个用户，核对数据库是否有这个用户，然后进行处理放心还是拦截&lt;/p&gt;
&lt;p&gt;　　 1) 定义一个登录的拦截器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.interceptor;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpSession;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.HandlerInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; afterCompletion(HttpServletRequest arg0,
            HttpServletResponse arg1, Object arg2, Exception arg3)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;        
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; postHandle(HttpServletRequest arg0, HttpServletResponse arg1,
            Object arg2, ModelAndView arg3) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;        
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; preHandle(HttpServletRequest request, HttpServletResponse response,
            Object arg2) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断当前访问路径是否为登录的路径，如果是则放行&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(request.getRequestURI().indexOf(&quot;/login&quot;)&amp;gt;0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断session中是否有登录信息，如果没有则跳转到登录界面，如果有则放行&lt;/span&gt;
        HttpSession session=&lt;span&gt;request.getSession();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(session.getAttribute(&quot;username&quot;)!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        request.getRequestDispatcher(&lt;/span&gt;&quot;/jsp/login.jsp&quot;&lt;span&gt;).forward(request, response);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他则拦截&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2) 定义一个jsp登录界面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
   &amp;lt;form action=&quot;${pageContext.request.contextPath}/login/submit&quot; method=&quot;post&quot;&amp;gt;
       &amp;lt;table&amp;gt;
           &amp;lt;tr&amp;gt;
               &amp;lt;td&amp;gt;用户名：&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;/&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/br&amp;gt;
               &amp;lt;td&amp;gt;密    码:&amp;lt;input type=&quot;text&quot; name=&quot;password&quot;/&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/br&amp;gt;
               &amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&amp;gt;&amp;lt;/td&amp;gt;
           &amp;lt;/tr&amp;gt;
       &amp;lt;/table&amp;gt;
   
   &amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3) 定义处理登录的controller类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.clj.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpSession;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.PathVariable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestBody;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.multipart.MultipartFile;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.pojo.Items;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.service.ItemsService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.clj.vo.QueryVo;

@Controller
@RequestMapping(&lt;/span&gt;&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginController {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转到登录页面&lt;/span&gt;
    @RequestMapping(&quot;/login&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String login() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
    }
    @RequestMapping(&lt;/span&gt;&quot;/submit&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String submit(String username,String password,HttpServletRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        HttpSession session&lt;/span&gt;=&lt;span&gt;request.getSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断用户名密码正确性，如果正确则将登录信息放入session中
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里简写，真正项目中要去数据库中校验用户名和密码&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(username!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            session.setAttribute(&lt;/span&gt;&quot;username&quot;&lt;span&gt;, username);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转到列表页(注意：这里加了斜杠是用了绝对路径，因为
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;两者不属于同一个controller，如果跳转的conrtoller
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类前加了窄化请求映射，路径名得为redirect:/items/list)&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;redirect:/list&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;





















&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;通过此方法对&lt;/span&gt;url&lt;span&gt;进行分类管理。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 16:06:00 +0000</pubDate>
<dc:creator>佳先森</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cailijia52o/p/8732906.html</dc:identifier>
</item>
</channel>
</rss>