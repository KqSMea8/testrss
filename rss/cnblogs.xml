<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【ASP.NET MVC系列】数据验证和注解 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/8286465.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/8286465.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180114231237472-1175578725.png&quot; alt=&quot;&quot; width=&quot;216&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115085938412-636694043.png&quot; alt=&quot;&quot; width=&quot;1619&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一  概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于数据验证和数据注解，是任何软件系统不可小觑的必要模块，在软件系统中起到举足轻重的作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.从数据验证的验证方式来说，我们一般分为客户端验证和服务端验证（或者两种方式相结合）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.从数据验证的作用角度来说，数据验证起到很重要的作用，如防止漏洞注入，防止网络攻击（XSS等），确保数据安全，确保数据合理性，防止垃圾数据等作用；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.从数据验证的种类来书，一般分为第三方验证（如我们用Jquery写好验证插件，在客户端用AJAX验证）和基于ASP.NET MVC框架的数据验证；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.从数据注解的作用角度来说，如界面关键字段的友好设置和提示等；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说了那么多，那么本篇文章会讲解哪些内容呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇文章主要讲解基于ASP.NET MVC框架的数据验证特性和数据注解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115231825162-2020208858.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二  数据验证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（一）ASP.NET MVC 内置六大类数据验证特性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115233714506-2100336962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.在ASP.NET MVC中，验证特性定义在System.ComponentModel.DataAnnotations命名空间中，因此我们在使用验证特性前，需要引入命名空间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; System.ComponentModel.DataAnnotations;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.ASP.NET MVC内置了六大验证特性：Required,StringLength,RegularExpression,Range,Compare和Remote;&lt;/p&gt;
&lt;p&gt;3.数据验证使用单个验证特性：指数据验证只使用其中一个验证特性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;[Required]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.有些属性，单个验证特性无法满足，需要两个及其以上验证特性组合，如密码，至少要满足两个条件：&lt;/p&gt;
&lt;p&gt;(1)必填      (2)不少于6位&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.用代码演示一下五大验证特性(Remote除外)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115105600412-1371719027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Models：UserInfo.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Models
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义用户名必填&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         [StringLength(&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证两次输入的密码是否一致&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         [Compare(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;两次密码输入不一致&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConfirmPassword { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义邮件为必填，且满足邮件格式&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         [RegularExpression(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义年龄为必填，且1-130岁之间&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         [Range(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         
&lt;span&gt;35&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; Controller:DefaultController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e9b9e053-57a8-4615-b8f6-4f52e262a101')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e9b9e053-57a8-4615-b8f6-4f52e262a101',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; DataValidate.Models;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultController : Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Default&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;View:Index.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('06e24edc-1c0f-4ea7-8b06-f5a04516c41b')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('06e24edc-1c0f-4ea7-8b06-f5a04516c41b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model DataValidate.Models.UserInfo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    ViewBag.Title = &quot;Index&quot;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;@using (Html.BeginForm(&quot;DataValidateDemo&quot;, &quot;Default&quot;))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;用户名&quot;)： @Html.TextBoxFor(m=&amp;gt;m.UserName)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Html.ValidationMessageFor(m=&amp;gt;m.UserName)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;密码&quot;)：@Html.TextBox(&quot;Password&quot;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     @Html.ValidationMessageFor(m=&amp;gt;m.Password)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;确认密码&quot;)：@Html.TextBox(&quot;ConfirmPassword&quot;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     @Html.ValidationMessageFor(m=&amp;gt;m.ConfirmPassword)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;邮件&quot;)：@Html.TextBox(&quot;Email&quot;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Email)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;年龄&quot;)：@Html.TextBox(&quot;Age&quot;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Age)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们来看看测试结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115110232115-824071017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.为什么要把Remote剔出来单独讲解呢？&lt;/p&gt;
&lt;p&gt; 我们知道，除Remote以外的五大验证特性，命名空间均为System.ComponentModel.DataAnnotations，而Remote特性的命名空间却是System.Web.Mvc。&lt;/p&gt;
&lt;p&gt; Remote，从字面意思可以看出，“远程”，即远程验证。Remote特性指利用服务器端的回调函数执行客户端的验证逻辑(当执行到有Remote特性的元数据时，会自动地调用相应的控制器下的Action)。&lt;/p&gt;
&lt;p&gt; 举个例子：新会员注册时，一般手机号是不允许重复的，检查DB中是否已存在手机号，可以使用Remote特性来验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115121437678-1102784800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Model:UserInfo.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('294665d8-8577-4e75-a296-f33bc679b890')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('294665d8-8577-4e75-a296-f33bc679b890',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Models
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义用户名必填&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         [StringLength(&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证两次输入的密码是否一致&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         [Compare(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;两次密码输入不一致&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConfirmPassword { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义邮件为必填，且满足邮件格式&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         [RegularExpression(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义年龄为必填，且1-130岁之间&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         [Range(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         [System.Web.Mvc.Remote(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CheckTelephone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;手机号码已经存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Telephone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         
&lt;span&gt;39&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DefaultController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4276b382-d4a8-4c52-8dfa-9e722cca46e1')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4276b382-d4a8-4c52-8dfa-9e722cca46e1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; DataValidate.Models;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultController : Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Default&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ActionResult CheckTelephone(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; telephone)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (telephone==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13636595489&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;手机号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+telephone+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.AllowGet);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.AllowGet);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Index.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0dcec8c3-8102-4156-ae2b-6cb03a0b08ed')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0dcec8c3-8102-4156-ae2b-6cb03a0b08ed',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model DataValidate.Models.UserInfo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    ViewBag.Title = &quot;Index&quot;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    Html.EnableClientValidation();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    Html.EnableUnobtrusiveJavaScript();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;@using (Html.BeginForm(&quot;DataValidateDemo&quot;, &quot;Default&quot;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;用户名&quot;)： @Html.TextBoxFor(m =&amp;gt; m.UserName)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.UserName)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;密码&quot;)：@Html.TextBox(&quot;Password&quot;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Password)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;确认密码&quot;)：@Html.TextBox(&quot;ConfirmPassword&quot;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.ConfirmPassword)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;邮件&quot;)：@Html.TextBox(&quot;Email&quot;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Email)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;年龄&quot;)：@Html.TextBox(&quot;Age&quot;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Age)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;手机号码&quot;)：@Html.TextBox(&quot;Telephone&quot;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Telephone)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;@section scripts{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/jquery.validate.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/jquery.validate.unobtrusive.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122152037-1480726640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122313303-1261512935.png&quot; alt=&quot;&quot; width=&quot;64&quot; height=&quot;78&quot;/&gt; 给大家留一个思考题：如何验证多个参数？&lt;/p&gt;
&lt;p&gt;      在实际项目开发中，一般我们验证的不仅仅是一个参数，而是多个参数，如用户名和手机号，身份证号等一起验证，关于多参数验证，Remote验证特性又是怎么处理的呢？&lt;/p&gt;
&lt;p&gt; （二） 验证错误提示&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115071003256-1495361360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.什么是验证错误提示？&lt;/p&gt;
&lt;p&gt;指验证字段在验证不通过时，反馈给用户的提示信息，如密码不能低于6位，手机号必须为11位，年龄限制在1-130岁之间等，通过验证特性的ErroMessage实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;,ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码不能低于6位数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.错误验证提示大致分为两大类：默认错误提示和自定义错误提示。&lt;/p&gt;
&lt;p&gt; (1)默认错误提示：当我们不指定ErroMessage的值时，ASP.NET MVC框架会指定默认值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115211215334-1807011752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)自定义值：我们为ErrorMessage指定具体自定义的值“密码不能低于6位数”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;,ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码不能低于6位数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; Result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115211924521-457284495.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.为什么要有自定义错误提示？&lt;/p&gt;
&lt;p&gt;(1)为用户呈现友好提示，我们来看一下2中的默认值和自定义值；&lt;/p&gt;
&lt;p&gt;默认值：字段Password必须是一个字符串，其最小长度为6，最大长度为128（&lt;span&gt;这么一句话，要是给不懂程序的用户看了，肯定会疯掉，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;很简单，对程序员来说，“字段”二字再基础不过，&lt;/span&gt;&lt;span&gt;可对用户来说，他可能会问，字段是什么东东？&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;自定义值：密码不能低于6位数（&lt;span&gt;无论是程序员还是用户，都能看得明白&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt; (2)提高通用性，比如对美国提供英语提示，对俄罗斯提供俄语提示等；&lt;/p&gt;
&lt;p&gt;4.如何实现通用性国际化？&lt;/p&gt;
&lt;p&gt;在如上的自定义验证错误提示中，我们使用的是硬编码的形式，然而，面向国际市场开发的，这种硬编码错误消息提示是不实用的，因为我们要为不同地区显示&lt;/p&gt;
&lt;p&gt;不同内容，实现国际化，庆幸的是，所有验证特性都允许为本地化的错误消息提示指定资源类型名称和资源名称，感兴趣的读者朋友，请参照How to:Set the&lt;/p&gt;
&lt;p&gt;Cultrue and UI Cultrue for ASP.NET Page Globalization(sites:http://msdn.microsoft.com/en-us/library/bz9tc508.aspx)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122313303-1261512935.png&quot; alt=&quot;&quot; width=&quot;64&quot; height=&quot;78&quot;/&gt; 思考题，如何实现错误消息通用性国际化？&lt;/p&gt;
&lt;p&gt; （三）  验证原理&lt;/p&gt;
&lt;p&gt;关于数据验证，我们思考这样一个问题：验证是什么时候发生的？如何才能知道验证失败？&lt;/p&gt;
&lt;p&gt;本节我们将来回答这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115082254318-1219207697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 1.要想充分理解验证原理，我们应该先熟悉几个基本概念：模型绑定器，模型元数据，模型验证器和模型状态（这部分内容，本篇文章不论述，大家知道这几个概念即可，具体详情内容，&lt;/p&gt;
&lt;p&gt;将在接下来的文章中与大家分享：【ASP.NET MVC系列】浅谈ASP.NET MVC 模型）&lt;/p&gt;
&lt;p&gt; 2.默认情况下，ASP.NET MVC框架在模型绑定时就执行验证逻辑，在执行验证时，分为隐式执行和显示执行。&lt;/p&gt;
&lt;p&gt; (1)隐式执行：一般指在控制器的Action中带有参数时，就会隐式执行模型验证。如下方法带有参数，因此就隐式执行模型绑定。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; (2)显示执行：只利用控制器的UpdateModel或TryUpdateModel方式时，显示执行模型绑定。&lt;/p&gt;
&lt;p&gt;3.模型绑定器一旦使用新值更新模型属性时，就会利用当前的模型元数据获得模型的所有验证器；&lt;/p&gt;
&lt;p&gt;4.ASP.NET MVC运行时，DataAnnotationsModelValidator与数据验证一起工作；&lt;/p&gt;
&lt;p&gt;5.DataAnnotationsModelValidator验证器会找到所有的验证特性并执行它所包含的验证逻辑；&lt;/p&gt;
&lt;p&gt;6.模型绑定器捕获所有失败的验证规则，并把他们放入模型状态中；&lt;/p&gt;
&lt;p&gt;7.模型绑定主要的副产品是模型状态，模型状态包含如下内容：&lt;/p&gt;
&lt;p&gt;   (1)包含用户放入模型属性中的所有值；&lt;/p&gt;
&lt;p&gt;   (2)包含每个属性相关联的所有错误；&lt;/p&gt;
&lt;p&gt;  (3)包含所有与模型对象本身有关的错误；&lt;/p&gt;
&lt;p&gt;8.如果模型状态中存在错误，ModelState.IsValid就返回false;&lt;/p&gt;
&lt;p&gt;9.控制操作和验证错误是怎样执行的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115223604521-820609722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;控制器操作决定模型验证失败和验证成功时的执行流程。&lt;/p&gt;
&lt;p&gt;   (1)验证成功时：当验证成时，操作通常会执行必要的步骤来保存或更新用户信息；&lt;/p&gt;
&lt;p&gt;   (2)验证失败时：当验证失败时，操作一般会重新渲染提交模型值得视图；&lt;/p&gt;
&lt;p&gt;（四）自定义验证&lt;/p&gt;
&lt;p&gt;ASP.NET MVC之所以强大，在于其提供强大的自定义和扩展性，关于这个内容，会在后续的文章：“【SP.NET MVC系列】&lt;a&gt;浅谈ASP.NET MVC八大类扩展&lt;/a&gt;”中深入讲解这两个强大的特性。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115083436787-2057809305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 1.基于ASP.NET MVC的自定义验证，一般分为两大类型：将验证逻辑封装在自定义数据中和将验证逻辑封装在模型对象中。&lt;/p&gt;
&lt;p&gt;  (1)将验证逻辑封装在自定义数据中：复杂，但可复用性高；&lt;/p&gt;
&lt;p&gt;  (2)将验证逻辑封装在模型对象中：简单，但可复用性低；&lt;/p&gt;
&lt;p&gt; 2.将验证逻辑封装在自定数据中&lt;span&gt;(会在后续的文章：“【ASP.NET MVC系列】&lt;a&gt;&lt;span&gt;浅谈ASP.NET MVC八大类扩展&lt;/span&gt;&lt;/a&gt;”中深入讲解)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 3.将验证逻辑封装模型对象中&lt;span&gt;(会在后续的文章：“【ASP.NET MVC系列】&lt;a&gt;&lt;span&gt;浅谈ASP.NET MVC八大类扩展&lt;/span&gt;&lt;/a&gt;”中深入讲解)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三 数据注解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; （一）七大类型ASP.NET MVC内置数据注解&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115085113599-634777050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.Dispaly特性：(1)模型属性设置友好的显示名称  (2)控制UI上属性的显示顺序；&lt;/p&gt;
&lt;p&gt;2.ScaffoldColumn特性：隐藏HTML辅助方法；&lt;/p&gt;
&lt;p&gt;3.DisplayFormat特性：处理属性的各种格式化选项；&lt;/p&gt;
&lt;p&gt;4.ReadOnly特性:确保默认的模型绑定器不使用新值来更新；&lt;/p&gt;
&lt;p&gt;5.DataType特性：提供关于属性的特定信息；&lt;/p&gt;
&lt;p&gt;6.UIHint特性：(1)为ASP.NET MVC运行时提供模板名称，以备调用模板辅助方法渲染输出时使用  (2)自定义模板辅助方法；&lt;/p&gt;
&lt;p&gt;7.HiddenInput特性：渲染type为hidden的元素；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四   参考文献&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【01】ASP.NET MVC5 高级编程(Jon Galloway,Brad Wilson,K.Scott Allen,David Matson 著 ,孙远帅 译)&lt;/p&gt;
&lt;p&gt;【02】ASP.NET MVC5编程实战（第3版）（Dino Esposite 著，潘丽丞 译）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;五   版权区&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2098469527@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 15 Jan 2018 15:34:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/8286465.html</dc:identifier>
</item>
<item>
<title>LeetCode第[18]题(Java)：4Sum 标签：Array - 清风吹斜阳</title>
<link>http://www.cnblogs.com/Xieyang-blog/p/8290511.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Xieyang-blog/p/8290511.html</guid>
<description>&lt;p&gt;题目难度：Medium&lt;/p&gt;
&lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;Given an array &lt;em&gt;S&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers, are there elements &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;, and &lt;em&gt;d&lt;/em&gt; in &lt;em&gt;S&lt;/em&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; + &lt;em&gt;d&lt;/em&gt; = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;Note: The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;p&gt;给定一个n个整数的数组S，在S中是否存在有a、b、c、d的元素使得a+b+c+d=target?如果有，请找出数组中所有唯一的组合。&lt;/p&gt;
&lt;p&gt;注意:解决方案集不能包含重复的四胞胎。&lt;/p&gt;
&lt;p&gt;【其实和3Sum是一个意思】&lt;/p&gt;

&lt;p&gt;思路：既然是在3Sum的基础上加了一个数，那么请允许我可耻的想到了在外面再加。。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115222325459-1668283142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;。。。。。。可是我实在想不到别的了，，外面的循环没有一个标准，所以也不可能在外面再用一遍left与right双重指针。&lt;/p&gt;
&lt;p&gt;嗯，那就可耻地写吧&lt;/p&gt;
&lt;p&gt;【&lt;span&gt;注意：很多同学面对算法题其实并不是没有思路，而是多多少少有些思路，但是心里知道这个思路很low写了也没多大意思，干脆就不写了而迫不及待去看答案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就大错特错了，其实大多数的算法都是由简单算法演变而来的，只是在low算法的基础上或多或少地将冗余的步骤技巧性跳过了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;都不把自己的思路写出来，那么当面对一个从没见过的算法题时思路几乎永远是空白。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;况且，平时写简单地算时各种边界问题的处理也能使我们养成良好的编程习惯和对代码的掌控力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们不能为了刷题而刷题，应该是为了锻炼自己的思路。以上个人见解，欢迎讨论&lt;/span&gt;】&lt;/p&gt;

&lt;p&gt;Code：&lt;span id=&quot;result_progress&quot; class=&quot;ng-binding&quot;&gt;282 / 282 test cases passed.——72ms（beats 46.27%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; nums.length - 3; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + 1; j &amp;lt; nums.length - 2; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (j &amp;gt; i + 1 &amp;amp;&amp;amp; nums[j] == nums[j-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; sum = target - nums[i] -&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; left = j + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; right = nums.length -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (left &amp;lt;&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] ==&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; nums[left] == nums[left+1]) left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; nums[right] == nums[right-1])  right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         left ++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         right --&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] &amp;lt;&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                         right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 以上直接套用3sum那道题的“双指针法”，然后在外面加了一个for循环，没啥好说的。    3sum：&lt;a id=&quot;post_title_link_8242900&quot; href=&quot;http://www.cnblogs.com/Xieyang-blog/p/8242900.html&quot;&gt;LeetCode第[15]题(Java)：3Sum 标签：Array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 过程错误：&lt;/p&gt;
&lt;p&gt;1.命名错误：length 写成 leng&lt;/p&gt;
&lt;p&gt;2.忘记定义类名：直接写成了left = j+1; （left前少写了int）【这就是不建议用(My)Eclipse做算法题的原因，脱离IDE可以改掉很多不好的编码习惯，也对将来面试手写代码帮助不少】&lt;/p&gt;
&lt;p&gt;3.忘记写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] &amp;lt;&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这一部分了，导致最后输出为空，在写if的时候应该把所有的else if 和else都写完，以防止遗漏。&lt;span&gt;这也说明自己还是在凭借对之前用过的算法的记忆在写代码，而没有真正的做到理解后的运用自如，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以即使自信对某一个算法很熟悉，在写的时候也应该思考它的思想和逻辑，以防止出现关键性的遗漏。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;答案1——Cdoe：&lt;span&gt;282 / 282 test cases passed.——29ms（beats 81.40%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(nums.length&amp;lt;4) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;nums.length-3;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(i&amp;gt;0&amp;amp;&amp;amp;nums[i]==nums[i-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(nums[i]*4&amp;gt;target) &lt;span&gt;break&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Too Big!!&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(nums[i]+3*nums[nums.length-1]&amp;lt;target) &lt;span&gt;continue&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Too Small&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i+1;j&amp;lt;nums.length-2;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(j&amp;gt;i+1&amp;amp;&amp;amp;nums[j]==nums[j-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 
&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(nums[j]*3&amp;gt;target-nums[i]) &lt;span&gt;break&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Too Big&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(nums[j]+2*nums[nums.length-1]&amp;lt;target-nums[i]) &lt;span&gt;continue&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Too Small&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 
&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; begin=j+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; end=nums.length-1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;&lt;span&gt;end){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; sum=nums[i]+nums[j]+nums[begin]+&lt;span&gt;nums[end];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(sum==&lt;span&gt;target){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        res.add(Arrays.asList(nums[i],nums[j],nums[begin],nums[end]));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;end &amp;amp;&amp;amp; nums[begin]==nums[begin+1]){begin++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;end &amp;amp;&amp;amp; nums[end]==nums[end-1]){end--&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         begin++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         end--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (sum&amp;lt;&lt;span&gt;target){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         begin++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         end--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 和我的解法是一样的，但是多加了一些条件判断，去除了一些重复数据和不可能数据，这样在很多测试用例时能省下不少时间。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面试手写的时候大家可以秀一秀这样的操作，但是做公司的笔试题的时候因为做题时间有限，除非已经都AC，否则优先保证完整性即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这波强行解释怎么样！&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115231502928-1714484824.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;答案2——&lt;span&gt;Code：282 / 282 test cases passed.——28ms（beats 83.45%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;         ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; nums.length;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (nums == &lt;span&gt;null&lt;/span&gt; || len &amp;lt; 4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max = nums[len - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (4 * nums[0] &amp;gt; target || 4 * max &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, z;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i = 0; i &amp;lt; len; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;             z =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; 0 &amp;amp;&amp;amp; z == nums[i - 1])&lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (z + 3 * max &amp;lt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too small&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (4 * z &amp;gt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too large&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (4 * z == target) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is the boundary&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i + 3 &amp;lt; len &amp;amp;&amp;amp; nums[i + 3] ==&lt;span&gt; z)
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;                    res.add(Arrays.asList(z, z, z, z));
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;             threeSumForFourSum(nums, target - z, i + 1, len - 1&lt;span&gt;, res, z);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;     * Find all possible distinguished three numbers adding up to the target
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;     * in sorted array nums[] between indices low and high. If there are,
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;     * add all of them into the ArrayList fourSumList, using
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;     * fourSumList.add(Arrays.asList(z1, the three numbers))
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; threeSumForFourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt; target, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; high, ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt; fourSumList,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; z1) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low + 1 &amp;gt;=&lt;span&gt; high)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max =&lt;span&gt; nums[high];
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (3 * nums[low] &amp;gt; target || 3 * max &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, z;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i = low; i &amp;lt; high - 1; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             z =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; low &amp;amp;&amp;amp; z == nums[i - 1]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (z + 2 * max &amp;lt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too small&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (3 * z &amp;gt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too large&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (3 * z == target) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is the boundary&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i + 1 &amp;lt; high &amp;amp;&amp;amp; nums[i + 2] ==&lt;span&gt; z)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                    fourSumList.add(Arrays.asList(z1, z, z, z));
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;             twoSumForFourSum(nums, target - z, i + 1&lt;span&gt;, high, fourSumList, z1, z);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;     * Find all possible distinguished two numbers adding up to the target
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;     * in sorted array nums[] between indices low and high. If there are,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;     * add all of them into the ArrayList fourSumList, using
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;     * fourSumList.add(Arrays.asList(z1, z2, the two numbers))
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; twoSumForFourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt; target, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; high, ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt; fourSumList,
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; z1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; z2) {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;gt;=&lt;span&gt; high)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (2 * nums[low] &amp;gt; target || 2 * nums[high] &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = low, j =&lt;span&gt; high, sum, x;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             sum = nums[i] +&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum ==&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                fourSumList.add(Arrays.asList(z1, z2, nums[i], nums[j]));
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;                 x =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (++i &amp;lt; j &amp;amp;&amp;amp; x == nums[i]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                    ;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 x =&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (i &amp;lt; --j &amp;amp;&amp;amp; x == nums[j]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                    ;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum &amp;gt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;呃，还写了两个调用函数。。，&lt;/p&gt;
&lt;p&gt;它在主函数里面循环调用了3sum的算法，然后加了一些判断，其实就是和答案一也就是和我的也是一样的。。。。。。&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115232637271-538852043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 15:31:00 +0000</pubDate>
<dc:creator>清风吹斜阳</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Xieyang-blog/p/8290511.html</dc:identifier>
</item>
<item>
<title>js 实现复制剪切 - sjpqy</title>
<link>http://www.cnblogs.com/shenjp/p/8290490.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shenjp/p/8290490.html</guid>
<description>&lt;h2 id=&quot;toc_1&quot;&gt;原生js实现复制&lt;/h2&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;copy&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;span id='copy'&amp;gt;复制哈哈哈哈啊哈哈&amp;lt;/span&amp;gt;
&amp;lt;button id='btn'&amp;gt;复制&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    function copyText()
    {
        var Url2=document.getElementById(&quot;copy&quot;).innerText;
        var oInput = document.createElement('input');
        oInput.value = Url2;
        document.body.appendChild(oInput);
        oInput.select(); // 选择对象
        document.execCommand(&quot;Copy&quot;); // 执行浏览器复制命令
        oInput.className = 'oInput';
        oInput.style.display='none';
        alert('复制成功');
    }
    document.getElementById('btn').onclick = function() {
        copyText()
    }
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上线代码只是我在&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;a href=&quot;http://www.jb51.net/article/95835.htm&quot;&gt;脚本之家&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 看见的一段代码,上面还有很多实现复制的方法,这些方法如果只是用在PC端那么已经够了,如果要使用在移动端, Android高版本没有任何问题,但是IOS不管是什么版本都无法实现复制&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;clipboard.js实现复制&lt;/h2&gt;
&lt;h4 id=&quot;toc_3&quot;&gt;为什么要是用clipboard.js&lt;/h4&gt;
&lt;p&gt;复制文本到剪切板并不难, 它不需要很多个步骤或者加载很多KB的代码来完成, 最重要的是, 它不应该依赖于Flash或者任何臃肿的框架, 这就是clipboard.js开发的目的&lt;/p&gt;
&lt;h4 id=&quot;toc_4&quot;&gt;install&lt;/h4&gt;
&lt;p&gt;你可以通过npm来获取它&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;npm install clipboard --save&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你不用install, 可以&lt;a href=&quot;https://github.com/zenorocha/clipboard.js/archive/master.zip&quot;&gt;下载一个ZIP文件&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;toc_5&quot;&gt;创建&lt;/h4&gt;
&lt;p&gt;首先将dist上面的js或者&lt;a href=&quot;https://github.com/zenorocha/clipboard.js/wiki/CDN-Providers&quot;&gt;第三方提供的文件&lt;/a&gt;引入到网页中&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后需要通过传递DOM选择器,HTML元素或者HTML列表来实例化它&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;new Clipboard('.btn');&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在内部我们需要获取与你选择器所匹配的元素,并为每个元素添加监听器,但是有一个问题,如果你有数百个匹配项, 那这个方法会消耗大量的内存.&lt;/p&gt;
&lt;p&gt;基于这个问题, 我们可以用&lt;a href=&quot;https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation&quot;&gt;事件代理&lt;/a&gt;, 它只用一个监听器来代替多个监听器&lt;/p&gt;
&lt;h4 id=&quot;toc_6&quot;&gt;用法&lt;/h4&gt;
&lt;p&gt;我们可以利用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes&quot;&gt;HTML自定义属性&lt;/a&gt;来提高代码的可用性 一个非常常用的列子就是点击某个按钮复制另一个元素的内容,你可以通过&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;data-clipboard-target&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 自定义属性来实现&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;main&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;input id=&quot;foo&quot; value=&quot;https://github.com/zenorocha/clipboard.js.git&quot;&amp;gt;
    &amp;lt;!-- Trigger --&amp;gt;
    &amp;lt;button class=&quot;btn&quot; data-clipboard-target=&quot;#foo&quot;&amp;gt;
        &amp;lt;img src=&quot;assets/clippy.svg&quot; alt=&quot;Copy to clipboard&quot;&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Clipboard('.btn');
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;从一个元素中剪切文本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以定义一个属性&lt;code&gt;data-clipboard-action&lt;/code&gt;来指定是要&lt;code&gt;copy&lt;/code&gt;还是&lt;code&gt;cut&lt;/code&gt;, 如果省略这个属性,会默认设置&lt;code&gt;copy&lt;/code&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;main&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- Target --&amp;gt;
    &amp;lt;textarea id=&quot;bar&quot;&amp;gt;Mussum ipsum cacilds...&amp;lt;/textarea&amp;gt;
    &amp;lt;!-- Trigger --&amp;gt;
    &amp;lt;button class=&quot;btn&quot; data-clipboard-action=&quot;cut&quot; data-clipboard-target=&quot;#bar&quot;&amp;gt;
        Cut to clipboard
    &amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Clipboard('.btn');
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如你所想的一样,这个cut属性只适用于&lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从属性复制文本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上你不需要其他元素来复制它的内容,你可以再出发元素上包含一个&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;data-clipboard-text&lt;/code&gt;属性&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;main&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- Trigger --&amp;gt;
    &amp;lt;button class=&quot;btn&quot; data-clipboard-text=&quot;Just because you can doesn't mean you should — clipboard.js&quot;&amp;gt;
        Copy to clipboard
    &amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Clipboard('.btn');
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;toc_7&quot;&gt;事件&lt;/h4&gt;
&lt;p&gt;在实际开发用,你需要显示一些用户反馈,不如复制/剪切成功这样的提示语,这就是我们为什么要写一些事件,比如&lt;code&gt;success&lt;/code&gt;和&lt;code&gt;error&lt;/code&gt;一起来实现你的定制逻辑&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;main&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- Trigger --&amp;gt;
    &amp;lt;button class=&quot;btn&quot; data-clipboard-text=&quot;Just because you can doesn't mean you should — clipboard.js&quot;&amp;gt;
        Copy to clipboard
    &amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var clipboard = new Clipboard('.btn');

    clipboard.on('success', function(e) {
        console.info('Action:', e.action);
        console.info('Text:', e.text);
        console.info('Trigger:', e.trigger);

        e.clearSelection();
    });

    clipboard.on('error', function(e) {
        console.error('Action:', e.action);
        console.error('Trigger:', e.trigger);
    });
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;toc_8&quot;&gt;高级用法&lt;/h4&gt;
&lt;p&gt;如果你不想修改你的HTML,那么你可以使用一个非常方便的API, 所有你要做的一些事情都包含在一个function中, 在和这个函数中写你的逻辑,并且返回一个值&lt;/p&gt;
&lt;p&gt;列如你需要动态设置一个target,你需要返回一个节点&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;new Clipboard('.btn', {
    target: function(trigger) {
        return trigger.nextElementSibling;
    }
});&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你想动态设置一个text,你需要返回一个字符串&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;new Clipboard('.btn', {
    text: function(trigger) {
        return trigger.getAttribute('aria-label');
    }
});&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了在Bootstrap Modals或任何其他更改焦点的库中使用，您需要将聚焦的元素设置为container值&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;new Clipboard('.btn', {
    container: document.getElementById('modal')
});&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，如果您正在使用单页面应用程序，则可能需要更精确地管理DOM的生命周期。以下是清理我们创建的事件和对象的方法&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;var clipboard = new Clipboard('.btn');
clipboard.destroy();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;toc_9&quot;&gt;浏览器支持&lt;/h4&gt;
&lt;p&gt;这个库依赖于&lt;code&gt;Selection&lt;/code&gt;和&lt;code&gt;execCommand&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; API,第一个支持所有浏览器，第二个支持以下浏览器&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;chrome&lt;/th&gt;
&lt;th&gt;edg&lt;/th&gt;
&lt;th&gt;firefox&lt;/th&gt;
&lt;th&gt;IE&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;42+&lt;/td&gt;
&lt;td&gt;12+&lt;/td&gt;
&lt;td&gt;41+&lt;/td&gt;
&lt;td&gt;9+&lt;/td&gt;
&lt;td&gt;29+&lt;/td&gt;
&lt;td&gt;10+&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;如果你需要兼容低版本的浏览器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;clipboard .js&lt;/code&gt;会优雅降级&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;你所要做的就是显示一个工具提示，说明&lt;code&gt;Copied&lt;/code&gt;何时&lt;code&gt;success&lt;/code&gt;调用事件，以及&lt;code&gt;Press Ctrl+C to copy&lt;/code&gt;何时&lt;code&gt;error&lt;/code&gt;调用事件，因为文本已经被选中&lt;/p&gt;
&lt;p&gt;您还可以通过运行来检查是否支持&lt;code&gt;clipboard.js&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;Clipboard.isSupported()&lt;/code&gt;，这样您就可以隐藏UI中的复制/剪切按钮&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;toc_10&quot;&gt;参考链接&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://clipboardjs.com/&quot;&gt;官网地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zenorocha/clipboard.js/&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shenjp.top&quot; target=&quot;_blank&quot;&gt;我的个人博客,欢迎大家访问&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 15:23:00 +0000</pubDate>
<dc:creator>sjpqy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shenjp/p/8290490.html</dc:identifier>
</item>
<item>
<title>TextView 的新特性，Autosizing 到底是如何实现的？ | 源码分析 - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/8290394.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/8290394.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485c35279b0?w=900&amp;amp;h=500&amp;amp;f=jpeg&amp;amp;s=99933&quot; alt=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;Hi，大家好，我是承香墨影！&lt;/p&gt;
&lt;p&gt;前两天聊了一下 Autosizing 的使用，反映还不错。毕竟是这种能解决实际问题的新 Api，确实在需要的时候，用起来会很顺手。&lt;/p&gt;
&lt;p&gt;简单回顾一下，Autosizing 是在 Support v26 中新支持的功能，可以根据文本的内容和 TextView 的大小，自动适应齐内部文本的字体大小，来达到完全显示的效果。而这个功能，最低能兼容到 Api Level 14，可以说是一个诚意满满的新 Api。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa489d9ee5939?w=386&amp;amp;h=160&amp;amp;f=gif&amp;amp;s=567336&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还不了解 Autosizing 的朋友，可以看看之前的文章《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;amp;mid=2247485115&amp;amp;idx=1&amp;amp;sn=9332e60b7c668635984d853714c50b0a&amp;amp;chksm=97851f9aa0f2968ca780dc58fe6c42397487bd2048e18999dd1870d5be49ff1c220dde908a87#rd&quot;&gt;文字太多？控件太小？试试 TextView 的新特性 Autosizeing 吧！&lt;/a&gt;》，里面有使用它的详细介绍。&lt;/p&gt;
&lt;p&gt;我想，在没有 Autosizing 的时候，应该已经有人以这样的思路在实现功能了。那么，今天就来从源码的角度分析一下，Autosizing 的原理如何，看看它是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;二带着问题看源码&quot;&gt;二、带着问题看源码&lt;/h2&gt;
&lt;p&gt;分析源码也是讲究方式方法的，我主推的一个思路，就是带着问题看源码。&lt;/p&gt;
&lt;p&gt;很多大型项目，其实本身都是很复杂的，并且涵盖的功能点也非常的多，如果想要一次就把它完整的阅读屡清楚，还是很吃力的。&lt;/p&gt;
&lt;p&gt;所以我建议在阅读开源项目之前，你先阅读文档，尝试使用一下它，看看它能做什么，再自己思考一下，如果你是作者，你会如何去实现这些功能的，最后带着这些问题去阅读源码，以问题为出发点，看看那些大牛写的优秀的开源库，到底有什么值得我们借鉴的地方。&lt;/p&gt;
&lt;p&gt;总归一句话：阅读源码是为了更好的编写源码！&lt;/p&gt;
&lt;p&gt;当我看到到 Autosizing 这个新特性的时候，我有一些好奇的地方在于：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Android 8.0 的 TextView 和 Support 包中，Autosizing 的实现，有什么区别？&lt;/li&gt;
&lt;li&gt;Autosizing 是会在什么时机，去触发根据文本的内容，计算出一个适合的字体大小。&lt;/li&gt;
&lt;li&gt;Autosizing 是如何计算合适的字体大小的。&lt;/li&gt;
&lt;li&gt;脱离 Autosizing，源码中的功能，有什么能借鉴的使用场景。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;大概就是这些问题吧，接下来我们看看 Autosizing 是如何实现的。&lt;/p&gt;
&lt;h2 id=&quot;三autosizing-源码&quot;&gt;三、Autosizing 源码&lt;/h2&gt;
&lt;h3 id=&quot;实现的区别&quot;&gt;3.1 实现的区别&lt;/h3&gt;
&lt;p&gt;对于 Android 8.0 中和 Support v26 中，具体对于 Autosizing 的实现，有什么区别这一点，大致阅读一下两边的源码，你会发现大致上没区别。&lt;/p&gt;
&lt;p&gt;它们之间，和 Autosizing 相关的源码所在的源码文件也不一样：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Android 8.0 主要在 TextView 中。&lt;/li&gt;
&lt;li&gt;Support v26 主要在 AppCompatTextViewAutoSizeHelper。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;随手比对一下它们的 &lt;code&gt;setAutoSizeTextTypeWithDefaults()&lt;/code&gt; 方法，这个方法用来标记是否对 TextView 开启 Autosizing。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485c2a57c3e?w=1743&amp;amp;h=615&amp;amp;f=jpeg&amp;amp;s=226367&quot; alt=&quot;setAutoSizeDefaultDiff&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边是 Android 8.0 的 TextView ，右边是 AppCompatTextViewAutoSizeHelper。&lt;/p&gt;
&lt;p&gt;可以看到，整个代码的结构都是一致的，只是部分引用的类不一样而已，但是表达的意思是一致的。&lt;/p&gt;
&lt;p&gt;之所以说它们之前大致是一样的，是因为有一些 Api 是 &lt;code&gt;private&lt;/code&gt; 的或者被标记为 &lt;code&gt;@hide&lt;/code&gt; 了，这样，在外部是无法访问到的。对此 AppCompatTextViewAutoSizeHelper 的做法是用反射的形式去调用它。&lt;/p&gt;
&lt;p&gt;例如，实际去修改 TextView 尺寸的方法 &lt;code&gt;autoSizeText()&lt;/code&gt; ，看下面它们的区别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485c6584b9e?w=1744&amp;amp;h=764&amp;amp;f=jpeg&amp;amp;s=254412&quot; alt=&quot;autoSizeDiff&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边是 Android 8.0 的 TextView ，右边是 AppCompatTextViewAutoSizeHelper。&lt;/p&gt;
&lt;p&gt;两边都需要获取 mHorizontallyScrolling 的值，TextView 内部当然可以直接调用了，而 AppCompatTextViewAutoSizeHelper 的做法是，使用 &lt;code&gt;invokeAndReturnWithDefault()&lt;/code&gt; 方法，通过反射区获取这个值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485c1904ef3?w=703&amp;amp;h=387&amp;amp;f=jpeg&amp;amp;s=53574&quot; alt=&quot;invokeMethod&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，我们可以得出结论，两边的实现思路，大体上是没有区别的，只是有一些小细节，会不一样，但是我们不需要太在意这些。&lt;/p&gt;
&lt;p&gt;既然，两边的区别不大，之后我们就以 Support v26 中，关于 Autosizing 的源码实现来进行分析。&lt;/p&gt;
&lt;h3 id=&quot;触发-autosizing-的时机&quot;&gt;3.2 触发 Autosizing 的时机&lt;/h3&gt;
&lt;p&gt;首先这个时机让我自己来设计，也非常好理解。&lt;/p&gt;
&lt;p&gt;本质上 Autosizing 就是为了让 TextView 中的文本，能完全显示，在这个过程中会去调整 文本 的字体大小。&lt;/p&gt;
&lt;p&gt;那这样，触发它的时机，其实就很容易猜到了：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在 文本内容 变动的时候。&lt;/li&gt;
&lt;li&gt;在 TextView 大小变动的时候。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Support v26 中，之所以能保证兼容，本质上它会自动将 TextView 这样的控件，替换成 AppCompatTextView 来达到兼容的效果，这个过程中，开发者只需要使用 AppCompatActivity 就可以了，其它的不需要开发者来参与。这样，其实我们只需要关注 AppCompatTextView 中的实现逻辑就好了。&lt;/p&gt;
&lt;p&gt;前面提到，操作 Autosizing 的具体源码，在 AppCompatTextViewAutoSizeHelper 中。 而 AppCompatTextView 并不直接操作它。&lt;/p&gt;
&lt;p&gt;首先 AppCompatTextVIew 会持有 AppCompatTextHelper 这个帮助类，而这个帮助类，又去持有 AppCompatTextViewAutoSizeHelper，最终所有的逻辑都传递到 AppCompatTextViewAutoSizeHelper 中去处理。&lt;/p&gt;
&lt;p&gt;所以操作的流程大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485c5bce048?w=476&amp;amp;h=722&amp;amp;f=jpeg&amp;amp;s=44349&quot; alt=&quot;stream&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 Autosizing 真实去测量并修改字体大小的逻辑，都在 &lt;code&gt;autoSizeText()&lt;/code&gt; 方法中，我们只需要关心它在何时被调用，就能知道具体触发 Autosizing 的时机了。&lt;/p&gt;
&lt;p&gt;第一个触发点，它会在 AppCompatTextView 的 &lt;code&gt;onTextChanged()&lt;/code&gt; 方法中，直接调用 &lt;code&gt;autoSizeText()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485fc139008?w=783&amp;amp;h=154&amp;amp;f=jpeg&amp;amp;s=31613&quot; alt=&quot;AppCompatAutoTextSize&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个触发点，会监听 AppCompatTextView 的 &lt;code&gt;onLayout()&lt;/code&gt; 方法，在其中调用 AppCompatTextHelper 的 &lt;code&gt;onLayout()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa485fcc95e00?w=605&amp;amp;h=159&amp;amp;f=jpeg&amp;amp;s=23742&quot; alt=&quot;helper_onLayout&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，两个时机都找到了，也验证了我们之前的猜想。&lt;/p&gt;
&lt;h3 id=&quot;autosizing-如何计算大小&quot;&gt;3.3 Autosizing 如何计算大小&lt;/h3&gt;
&lt;p&gt;前面提到 Autosizing 实际上去修改 TextView 字体的方法，在 AppCompatTextViewAutoSizeHelper 的 &lt;code&gt;autoSizeText()&lt;/code&gt; 方法中，这里我们先来看看这个方法的实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa48600417f5d?w=787&amp;amp;h=702&amp;amp;f=jpeg&amp;amp;s=118779&quot; alt=&quot;autoSizeText&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这一段逻辑，就是 Autosizing 中，很重要的一个逻辑。先来看看它大体上的流程。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用它会使用 &lt;code&gt;isAutoSizeEnabled()&lt;/code&gt; 方法，判断当前是否开启 Autosizing 。&lt;/li&gt;
&lt;li&gt;判断 &lt;code&gt;mNeedsAutoSizeText&lt;/code&gt; 是否为 true，此处判断是主要是看是否存在可变动的尺寸。&lt;/li&gt;
&lt;li&gt;计算 TextView 本身的显示区域大小，存放在 &lt;code&gt;TEMP_RECTF&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;findLargestTextSizeWhichFits()&lt;/code&gt; 获取到一个合适当前文本长度的最大尺寸值。&lt;/li&gt;
&lt;li&gt;如果和当前 TextView 的 textSize 不一致，则使用 &lt;code&gt;setTextSizeInternal()&lt;/code&gt; 将其设置回去。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;大体步骤就是这样，接下来我们从细节出发看看它的具体实现。&lt;/p&gt;
&lt;p&gt;首先是 &lt;code&gt;isAutoSizeEnable()&lt;/code&gt; 方法，它去判断当前是否开启了 Autosizing，其实就是判断 mAutoSizeTextType 属性是否为 none。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa486008af4d5?w=740&amp;amp;h=219&amp;amp;f=jpeg&amp;amp;s=28123&quot; alt=&quot;isAutoSizeEnable&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;mNeedsAutoSizeText&lt;/code&gt; 这个判断，本质上其实是为了判断 &lt;code&gt;mAutoSizeTextSizesInPx&lt;/code&gt; 这个存放尺寸的数组里，是否有值，这个尺寸数组，在后面的 &lt;code&gt;findLargestTextSizeWhichFits()&lt;/code&gt; 方法中会用到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa486010412e5?w=776&amp;amp;h=61&amp;amp;f=jpeg&amp;amp;s=13024&quot; alt=&quot;px-array&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mAutoSizeTextSizesInPx&lt;/code&gt; 其实就是一个存放当前 TextView 预估能使用的尺寸数组，是被提前计算出来的，它会在对 Autosizing 受影响的相关的属性做出修改的时候，重新计算。例如：粒度（Granularity）、预设尺寸（PresetSizes）等变动，都会触发重新计算 &lt;code&gt;mAutoSizeTextSizesInPx&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TEMP_RECTF&lt;/code&gt; 就没有什么好说的了，无非就是从 TextView 的宽高和 Padding 等属性，计算出一个能用于显示 文本 区域大小。接下来就会去调用 &lt;code&gt;findLargestTextSizeWhichFits()&lt;/code&gt; 方法，找到一个当前 文本 内容，最合适的字体大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa48625b47a29?w=773&amp;amp;h=515&amp;amp;f=jpeg&amp;amp;s=79714&quot; alt=&quot;findLargestMethod&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里逻辑也很清晰，就是使用一个循环，通过 &lt;code&gt;suggestedSizeFitsInSpace()&lt;/code&gt; 方法判断取出来的尺寸是否合适。这里为了提高效率，使用了二分算法，去避免全部遍历 mAutoSizeTextSizesInPx 数组，从而提高效率。&lt;/p&gt;
&lt;p&gt;接下来就是 &lt;code&gt;suggestedSizeFitsInSpace()&lt;/code&gt; 方法，它会根据 TextView 的内容区域和 文本，判断当前给定的尺寸，是否能放的下这些内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/15/160fa48603721c2e?w=717&amp;amp;h=616&amp;amp;f=jpeg&amp;amp;s=111601&quot; alt=&quot;suggestedSizeMethod&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里首先使用了一个 TextPaint 对象 mTempTextPaint 来存放 TextView 的一些参数，然后根据 mTempTextPaint 去创建一个使用 StaticLayout 对象，来尝试对文本进行布局。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;StaticLayout 是一个为不可编辑的文本布局的类，这意味着一旦布局完成，文本内容就不可以改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最终，就能确定，传递进行的字体大小，是否能完全显示在这个区域内。&lt;/p&gt;
&lt;p&gt;经过这一通计算，&lt;code&gt;findLargestTextSizeWhichFits()&lt;/code&gt; 方法，最终将计算出来的一个合适的字体尺寸，返回回去，再通过 &lt;code&gt;setTextSizeInternal()&lt;/code&gt; 设置到 TextView，来达到修改字体大小的目的。&lt;/p&gt;
&lt;h2 id=&quot;四源码中能借鉴的功能&quot;&gt;四、源码中能借鉴的功能&lt;/h2&gt;
&lt;p&gt;现在来看，Autosizing 计算某段文本，在一个 固定的 TextView 中，将展示的单行宽度和行数这个功能，这些算是 Autosizing 中，比较有借鉴意义的功能了。&lt;/p&gt;
&lt;p&gt;其它的我暂时没有想到，你觉得还有什么可以借鉴的点呢？在留言中告诉我。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;今天在&lt;strong&gt;承香墨影&lt;/strong&gt;公众号的后台，回复『&lt;strong&gt;成长&lt;/strong&gt;』，我会送你一些特别的内容。&lt;/p&gt;
&lt;p&gt;我另外还维护了一个技术交流的微信群，有兴趣可以在公众号后台回复：&quot;加群&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/13/15fb3c95b1f1f263?w=600&amp;amp;h=600&amp;amp;f=jpeg&amp;amp;s=54770&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 14:57:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/plokmju/p/8290394.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——19. 如果使用继承则设计，并文档说明，否则不该使用 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8290126.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8290126.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;条目 18中提醒你注意继承没有设计和文档说明的“外来”类的子类化的危险。 那么为了继承而设计和文档说明一个类是什么意思呢？&lt;/p&gt;
&lt;p&gt;首先，这个类必须准确地描述重写这个方法带来的影响。 换句话说，该类必须文档说明可重写方法的自用性（self-use）。 对于每个公共或受保护的方法，文档必须指明方法调用哪些重写方法，以何种顺序以及每次调用的结果如何影响后续处理。 （重写方法，这里是指非final修饰的方法，无论是公开还是保护的。）更一般地说，一个类必须文档说明任何可能调用可重写方法的情况。 例如，后台线程或者静态初始化代码块可能会调用这样的方法。&lt;/p&gt;
&lt;p&gt;调用可重写方法的方法在文档注释结束时包含对这些调用的描述。 这些描述在规范中特定部分，标记为“Implementation Requirements,”，由Javadoc标签&lt;code&gt;@implSpec&lt;/code&gt;生成。 本节介绍该方法的内部工作原理。 下面是从&lt;code&gt;java.util.AbstractCollection&lt;/code&gt;类的规范中拷贝的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean remove(Object o)
Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that Objects.equals(o, e), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).

Implementation Requirements: This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator’s remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection’s iterator method does not implement the remove method and this collection contains the specified object.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从该集合中删除指定元素的单个实例（如果存在，&lt;code&gt;optional&lt;/code&gt;实例操作）。 更正式地说，如果这个集合包含一个或多个这样的元素，删除使得&lt;code&gt;Objects.equals(o, e)&lt;/code&gt;的一个元素e。 如果此集合包含指定的元素（或者等同于此集合因调用而发生了更改），则返回true。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现要求&lt;/strong&gt;：这个实现迭代遍历集合查找指定元素。 如果找到元素，则使用迭代器的&lt;code&gt;remove&lt;/code&gt;方法从集合中删除元素。 请注意，如果此集合的&lt;code&gt;iterator&lt;/code&gt;方法返回的迭代器未实现&lt;code&gt;remove&lt;/code&gt;方法，并且此集合包含指定的对象，则此实现将引发&lt;code&gt;UnsupportedOperationException&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;这个文档毫无疑问地说明，重写&lt;code&gt;iterator&lt;/code&gt;方法会影响&lt;code&gt;remove&lt;/code&gt;方法的行为。 它还描述了&lt;code&gt;iterator&lt;/code&gt;方法返回的Iterator行为将如何影响&lt;code&gt;remove&lt;/code&gt;方法的行为。 与条目 18中的情况相反，在这种情况下，程序员继承&lt;code&gt;HashSet&lt;/code&gt;并不能说明重写add方法是否会影响addAll方法的行为。&lt;/p&gt;
&lt;p&gt;但是，这是否违背了一个良好的API文档应该描述给定的方法是什么，而不是它是如何做的呢？ 是的，它确实！这是继承违反封装这一事实的不幸后果。要文档说明一个类以便可以安全地进行子类化，必须描述清楚那些没有详细说明的实现细节。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@implSpec&lt;/code&gt;标签是在Java 8中添加的，并且在Java 9中被大量使用。这个标签应该默认启用，但是从Java 9开始，除非通过命令行开关&lt;code&gt;-tag &quot;apiNote:a:API Note:”&lt;/code&gt;，否则Javadoc实用工具仍然会忽略它。&lt;/p&gt;
&lt;p&gt;设计继承涉及的不仅仅是文档说明自用的模式。 为了让程序员能够写出有效的子类而不会带来不适当的痛苦，一个类可能以明智选择的受保护方法的形式提供内部工作，或者在罕见的情况下，提供受保护的属性。 例如，考虑&lt;code&gt;java.util.AbstractList&lt;/code&gt;中的&lt;code&gt;removeRange&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void removeRange(int fromIndex, int toIndex)
Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex == fromIndex, this operation has no effect.)
This method is called by the clear operation on this list and its sublists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its sublists.
Implementation Requirements: This implementation gets a list iterator positioned before fromIndex and repeatedly calls ListIterator.nextfollowed by ListIterator.remove, until the entire range has been removed. Note: If ListIterator.remove requires linear time, this implementation requires quadratic time.
Parameters:
fromIndex       index of first element to be removed.

toIndex           index after last element to be removed.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从此列表中删除索引介于&lt;code&gt;fromIndex&lt;/code&gt;（包含）和&lt;code&gt;inclusive&lt;/code&gt;（不含）之间的所有元素。 将任何后续元素向左移（减少索引）。 这个调用通过&lt;code&gt;（toIndex - fromIndex）&lt;/code&gt;元素来缩短列表。 （如果&lt;code&gt;toIndex == fromIndex&lt;/code&gt;，则此操作无效。）&lt;/p&gt;
&lt;p&gt;这个方法是通过列表及其子类的clear操作来调用的。重写这个方法利用列表内部实现的优势，可以大大提高列表和子类的clear操作性能。&lt;/p&gt;
&lt;p&gt;实现要求：这个实现获取一个列表迭代器，它位于&lt;code&gt;fromIndex&lt;/code&gt;之前，并重复调用&lt;code&gt;ListIterator.remove&lt;/code&gt;和&lt;code&gt;ListIterator.next&lt;/code&gt;方法，直到整个范围被删除。 注意：如果&lt;code&gt;ListIterator.remove&lt;/code&gt;需要线性时间，则此实现需要平方级时间。&lt;/p&gt;
&lt;p&gt;参数：&lt;br/&gt;fromIndex 要移除的第一个元素的索引&lt;br/&gt;toIndex 要移除的最后一个元素之后的索引&lt;/p&gt;
&lt;p&gt;这个方法对List实现的最终用户来说是没有意义的。 它仅仅是为了使子类很容易提供一个快速clear方法。 在没有&lt;code&gt;removeRange&lt;/code&gt;方法的情况下，当在子列表上调用clear方法，子类将不得不使用平方级的时间，否则，或从头重写整个subList机制——这不是一件容易的事情！&lt;/p&gt;
&lt;p&gt;那么当你设计一个继承类的时候，你如何决定暴露哪些的受保护的成员呢？ 不幸的是，没有灵丹妙药。 所能做的最好的就是努力思考，做出最好的测试，然后通过编写子类来进行测试。 应该尽可能少地暴露受保护的成员，因为每个成员都表示对实现细节的承诺。 另一方面，你不能暴露太少，因为失去了保护的成员会导致一个类几乎不能用于继承。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试为继承而设计的类的唯一方法是编写子类&lt;/strong&gt;。 如果你忽略了一个关键的受保护的成员，试图编写一个子类将会使得遗漏痛苦地变得明显。 相反，如果编写的几个子类，而且没有一个使用受保护的成员，那么应该将其设为私有。 经验表明，三个子类通常足以测试一个可继承的类。 这些子类应该由父类作者以外的人编写。&lt;/p&gt;
&lt;p&gt;当你为继承设计一个可能被广泛使用的类的时候，要意识到你永远承诺你文档说明的自用模式以及隐含在其保护的方法和属性中的实现决定。 这些承诺可能会使后续版本中改善类的性能或功能变得困难或不可能。 因此，&lt;strong&gt;在发布它之前，你必须通过编写子类来测试你的类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，请注意，继承所需的特殊文档混乱了正常的文档，这是为创建类的实例并在其上调用方法的程序员设计的。 在撰写本文时，几乎没有工具将普通的API文档从和仅仅针对子类实现的信息，分离出来。&lt;/p&gt;
&lt;p&gt;还有一些类必须遵守允许继承的限制。 &lt;strong&gt;构造方法绝不能直接或间接调用可重写的方法&lt;/strong&gt;。 如果违反这个规则，将导致程序失败。 父类构造方法在子类构造方法之前运行，所以在子类构造方法运行之前，子类中的重写方法被调用。 如果重写方法依赖于子类构造方法执行的任何初始化，则此方法将不会按预期运行。 为了具体说明，这是一个违反这个规则的类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Super {
    // Broken - constructor invokes an overridable method
    public Super() {
        overrideMe();
    }
    public void overrideMe() {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是一个重写&lt;code&gt;overrideMe&lt;/code&gt;方法的子类，Super类的唯一构造方法会错误地调用它：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public final class Sub extends Super {
    // Blank final, set by constructor
    private final Instant instant;

    Sub() {
        instant = Instant.now();
    }

    // Overriding method invoked by superclass constructor
    @Override public void overrideMe() {
        System.out.println(instant);
    }

    public static void main(String[] args) {
        Sub sub = new Sub();
        sub.overrideMe();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可能期望这个程序打印两次&lt;code&gt;instant&lt;/code&gt;实例，但是它第一次打印出null，因为在Sub构造方法有机会初始化&lt;code&gt;instant&lt;/code&gt;属性之前，&lt;code&gt;overrideMe&lt;/code&gt;被Super构造方法调用。 请注意，这个程序观察两个不同状态的final属性！ 还要注意的是，如果&lt;code&gt;overrideMe&lt;/code&gt;方法调用了&lt;code&gt;instant&lt;/code&gt;实例中任何方法，那么当父类构造方法调用&lt;code&gt;overrideMe&lt;/code&gt;时，它将抛出一个&lt;code&gt;NullPointerException&lt;/code&gt;异常。 这个程序不会抛出&lt;code&gt;NullPointerException&lt;/code&gt;的唯一原因是&lt;code&gt;println&lt;/code&gt;方法容忍null参数。&lt;/p&gt;
&lt;p&gt;请注意，从构造方法中调用私有方法，其中任何一个方法都不可重写的，那么final方法和静态方法是安全的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cloneable&lt;/code&gt;和&lt;code&gt;Serializable&lt;/code&gt;接口在设计继承时会带来特殊的困难。 对于为继承而设计的类来说，实现这些接口通常不是一个好主意，因为这会给继承类的程序员带来很大的负担。 然而，可以采取特殊的行动来允许子类实现这些接口，而不需要强制这样做。 这些操作在条目 13和条目 86中有描述。&lt;/p&gt;
&lt;p&gt;如果你决定在为继承而设计的类中实现&lt;code&gt;Cloneable&lt;/code&gt;或&lt;code&gt;Serializable&lt;/code&gt;接口，那么应该知道，由于&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;readObjec&lt;/code&gt;t方法与构造方法相似，所以也有类似的限制：&lt;strong&gt;clone和readObject都不会直接或间接调用可重写的方法&lt;/strong&gt;。在&lt;code&gt;readObject&lt;/code&gt;的情况下，重写方法将在子类的状态被反序列化之前运行。 在&lt;code&gt;clone&lt;/code&gt;的情况下，重写方法将在子类的&lt;code&gt;clone&lt;/code&gt;方法有机会修复克隆的状态之前运行。 在任何一种情况下，都可能会出现程序故障。 在&lt;code&gt;clone&lt;/code&gt;的情况下，故障可能会损坏原始对象以及被克隆对象本身。 例如，如果重写方法假定它正在修改对象的深层结构的拷贝，但是尚未创建拷贝，则可能发生这种情况。&lt;/p&gt;
&lt;p&gt;最后，如果你决定在为继承设计的类中实现&lt;code&gt;Serializable&lt;/code&gt;接口，并且该类有一个&lt;code&gt;readResolve&lt;/code&gt;或&lt;code&gt;writeReplace&lt;/code&gt;方法，则必须使&lt;code&gt;readResolve&lt;/code&gt;或&lt;code&gt;writeReplace&lt;/code&gt;方法设置为受保护而不是私有。 如果这些方法是私有的，它们将被子类无声地忽略。 这是另一种情况，把实现细节成为类的API的一部分，以允许继承。&lt;/p&gt;
&lt;p&gt;到目前为止，&lt;strong&gt;设计一个继承类需要很大的努力，并且对这个类有很大的限制&lt;/strong&gt;。 这不是一个轻率的决定。 有些情况显然是正确的，比如抽象类，包括接口的骨架实现（skeletal implementations）（条目 20）。 还有其他的情况显然是错误的，比如不可变的类（条目 17）。&lt;/p&gt;
&lt;p&gt;但是普通的具体类呢？ 传统上，它们既不是final的，也不是为了子类化而设计和文档说明的，但是这种情况是危险的。每次修改这样的类，则继承此类的子类将被破坏。 这不仅仅是一个理论问题。 在修改非final的具体类的内部之后，接收与子类相关的错误报告并不少见，这些类没有为继承而设计和文档说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决这个问题的最好办法是，在没有想要安全地子类化的设计和文档说明的类中禁止子类化&lt;/strong&gt;。 有两种方法禁止子类化。 两者中较容易的是声明类为final。 另一种方法是使所有的构造方法都是私有的或包级私有的，并且添加公共静态工厂来代替构造方法。 这个方案在内部提供了使用子类的灵活性，在条目 17中讨论过。两种方法都是可以接受的。&lt;/p&gt;
&lt;p&gt;这个建议可能有些争议，因为许多程序员已经习惯于继承普通的具体类来增加功能，例如通知和同步等功能，或限制原有类的功能。 如果一个类实现了捕获其本质的一些接口，比如Set，List或Map，那么不应该为了禁止子类化而感到愧疚。 在条目 18中描述的包装类模式为增强功能提供了继承的优越选择。&lt;/p&gt;
&lt;p&gt;如果一个具体的类没有实现一个标准的接口，那么你可能会通过禁止继承来给一些程序员带来不便。 如果你觉得你必须允许从这样的类继承，一个合理的方法是确保类从不调用任何可重写的方法，并文档说明这个事实。 换句话说，完全消除类的自用（self-use）的可重写的方法。 这样做，你将创建一个合理安全的子类。 重写一个方法不会影响任何其他方法的行为。&lt;/p&gt;
&lt;p&gt;你可以机械地消除类的自我使用的重写方法，而不会改变其行为。 将每个可重写的方法的主体移动到一个私有的“帮助器方法”，并让每个可重写的方法调用其私有的帮助器方法。 然后用直接调用可重写方法的专用帮助器方法来替换每个自用的可重写方法。&lt;/p&gt;
&lt;p&gt;你可以机械地消除类的自用的重写方法，而不会改变其行为。 将每个可重写的方法的主体移到一个私有的“辅助方法（helper method）”，并让每个可重写的方法调用其私有的辅助方法。 然后用直接调用可重写方法的专用辅助方法来替换每个自用的可重写方法。&lt;/p&gt;
&lt;p&gt;总之，设计一个继承类是一件很辛苦的事情。 你必须文档说明所有的自用模式，一旦你文档说明了它们，必须承诺为他们的整个生命周期。 如果你不这样做，子类可能会依赖于父类的实现细节，并且如果父类的实现发生改变，子类可能会损坏。 为了允许其他人编写高效的子类，可能还需要导出一个或多个受保护的方法。 除非你知道有一个真正的子类需要，否则你可能最好是通过声明你的类为final禁止继承，或者确保没有可访问的构造方法。&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 13:50:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8290126.html</dc:identifier>
</item>
<item>
<title>[UWP]如何使用Fluent Design System (下) - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</guid>
<description>&lt;h2 id=&quot;兼容旧版本&quot;&gt;4. 兼容旧版本&lt;/h2&gt;
&lt;p&gt;FDS最常见的问题之一是如何与Fall Creators Update之前的版本兼容，其实做起来也挺简单的，&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;ColorfulBox&lt;/a&gt;就实现了Creators Update与Fall Creators Update之间的兼容。&lt;/p&gt;

&lt;p&gt;UWP Community Toolkit中的&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwpcommunitytoolkit/controls/hamburgermenu&quot;&gt;HamburgerMenu&lt;/a&gt;是以前制作汉堡包导航菜单最常用的方案，升级到2.0版本以后它会判断运行的Windows版本，如果是Fall Creators Update则加载基于NavigationView的ControlTemplate，反之则加载默认ControlTemplate。控件内源码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (menu.&lt;span class=&quot;fu&quot;&gt;UseNavigationViewWhenPossible&lt;/span&gt; &amp;amp;&amp;amp; HamburgerMenu.&lt;span class=&quot;fu&quot;&gt;IsNavigationViewSupported&lt;/span&gt;)
{
    ResourceDictionary dict = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ResourceDictionary&lt;/span&gt;();
    dict.&lt;span class=&quot;fu&quot;&gt;Source&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; System.&lt;span class=&quot;fu&quot;&gt;Uri&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ms-appx:///Microsoft.Toolkit.Uwp.UI.Controls/HamburgerMenu/HamburgerMenuNavViewTemplate.xaml&quot;&lt;/span&gt;);
    menu.&lt;span class=&quot;fu&quot;&gt;_previousTemplateUsed&lt;/span&gt; = menu.&lt;span class=&quot;fu&quot;&gt;Template&lt;/span&gt;;
    menu.&lt;span class=&quot;fu&quot;&gt;Template&lt;/span&gt; = dict[&lt;span class=&quot;st&quot;&gt;&quot;HamburgerMenuNavViewTemplate&quot;&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; ControlTemplate;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用条件xaml&quot;&gt;4.2 使用条件XAML&lt;/h3&gt;
&lt;p&gt;Reveal样式只在Fall Creators Update中提供，如果XAML中使用了Reveal样式，项目在Fall Creators Update前的版本运行将会报如下错误：“Cannot find a Resource with the Name/Key ButtonRevealStyle [Line: 396 Position: 9]””。&lt;/p&gt;
&lt;p&gt;对这种情况可以使用&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwp/debug-test-perf/conditional-xaml&quot;&gt;条件 XAML&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;条件 XAML 提供在 XAML 标记中使用 ApiInformation.IsApiContractPresent 方法的一种途径。它从Creators Update开始提供。 若要使用条件 XAML，Visual Studio 项目的最低版本必须设置为内部版本 15063（Creators Update）或更高版本，且目标版本设置为比最低版本更高的版本。&lt;/p&gt;
&lt;p&gt;上面这种情况，可以在XAML中添加条件命名空间：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;xmlns:fcu=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,5)&quot;
xmlns:cu=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,5)&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后使用条件命名空间前缀设置属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; fcu:Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段XAML中 &lt;code&gt;Style=&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/code&gt; 只在Fall Creators Update中生效，不影响以前版本。&lt;/p&gt;
&lt;h3 id=&quot;使用版本自适应代码&quot;&gt;4.3 使用版本自适应代码&lt;/h3&gt;
&lt;p&gt;对于Creators Update之前的版本，可以使用&lt;a href=&quot;https://docs.microsoft.com/en-us/uwp/api/Windows.Foundation.Metadata.ApiInformation&quot;&gt;ApiInformation类&lt;/a&gt;创建&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwp/debug-test-perf/version-adaptive-code&quot;&gt;版本自适应代码&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ApiInformation.&lt;span class=&quot;fu&quot;&gt;IsApiContractPresent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Windows.Foundation.UniversalApiContract&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;ActualTheme&lt;/span&gt;;
}
&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;RequestedTheme&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ApiContract的主版本号见下表，从RTM开始到秋季创意者更新的版本号分别为1到5。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232526518-1731704830.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;其它常见的问题&quot;&gt;5. 其它常见的问题&lt;/h2&gt;
&lt;h3 id=&quot;为什么acrylic和reveal没有生效&quot;&gt;5.1 为什么Acrylic和Reveal没有生效&lt;/h3&gt;
&lt;p&gt;在几种情况下这两个特效不会生效，AcrylicBrush变成纯色不透明的Brush，应用了ButtonRevealStyle的按钮变成普通的按钮。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;电脑电量不足，或开启了“节电模式”；&lt;/li&gt;
&lt;li&gt;运行于低端硬件；&lt;/li&gt;
&lt;li&gt;在“设置\个性化\颜色”中关闭了“透明效果”选项。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232550549-1403000394.png&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除此之外还有一个常见的情况：在没激活的Windows 10上Acrylic和Reveal都不会生效。大概和Windows7没激活时不能开启Aero一样。&lt;/p&gt;
&lt;h3 id=&quot;错误使用acrylic&quot;&gt;5.2 错误使用Acrylic&lt;/h3&gt;
&lt;p&gt;Acrylic有些难用，一般来说Acrylic只应该作为背景使用在菜单、弹出遮罩或Flyout等，程序的主体区域的背景不可以使用Acrylic。如果在应用在整个应用的背景使用Acrylic，除了使整个应用十分晃眼（以及程序员的自我满足）外没有任何积极意义。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232642409-240778977.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为例外，Widget或轻量级应用可以在整个应用的背景使用Acrylic，像计算器应用那样。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232648612-1579471974.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不要在使用了Acrylic的地方使用Accent Color作为文字的Foreground，看不清的。&lt;a href=&quot;https://github.com/Microsoft/WindowsTemplateStudio&quot;&gt;WindowsTemplateStudio&lt;/a&gt;在这点上也犯了错误。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232653878-866216029.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;错误使用reveal&quot;&gt;5.3 错误使用Reveal&lt;/h3&gt;
&lt;p&gt;简单来说：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只应该在可操作的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;不要在孤立的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;不要在大面积的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;静态元素（例如文字和背景）不应该使用Reveal。&lt;/li&gt;
&lt;li&gt;不应该让Reveal干扰重要的信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不在静态元素、孤立元素、大面积元素上使用Reveal，这倒不是为了性能考虑。光照一直是设计师梦寐以求的元素，它有其应用场景，不应该乱用导致UI杂乱无章。Reveal最大的作用是为一组元素提示其可操作区域，例如ListView，NavigationView，或类似计算器应用上的无边框按钮。如果整个UI都用上Reveal，对重要信息反而是种干扰。&lt;/p&gt;
&lt;h2 id=&quot;如何评价fluent-design-system&quot;&gt;6. 如何评价Fluent Design System&lt;/h2&gt;
&lt;h3 id=&quot;过去&quot;&gt;6.1 过去&lt;/h3&gt;
&lt;p&gt;Zune和WP的时代，局限于设备性能及屏幕尺寸，微软提出了MetroUI，提倡了扁平化设计、移除多余装饰元素，既好看又好用。&lt;/p&gt;
&lt;p&gt;Windows8时代，微软将MetroUI搬上桌面，依然十分好看，可各种问题马上浮现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MetroUI不能承载复杂信息，而且由于要顾及触摸操作，所有元素都设计得很大，导致UI显得更加简陋。&lt;/li&gt;
&lt;li&gt;在触屏时操作十分自然舒适的各种操作（典型的如横向移动）到了桌面的鼠标的操作变得十分别扭。&lt;/li&gt;
&lt;li&gt;MetroUI是一种难度很高的UI，在WP时代有大量让人惊艳的应用，但后来微软为了提高应用数量放松了大量粗制滥造的应用的验证，大大拉低了Metro的评价。&lt;/li&gt;
&lt;li&gt;微软自己都不清楚应该怎么使用MetroUI，更别提对它进行改进。&lt;/li&gt;
&lt;li&gt;为保证桌面和手机有相同的步伐，结果就是更新缓慢。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本来这些问题一直都存在，只是以前应用少用户少，而且没有跨设备，也没有强制用户使用Metro，所以问题不明显。Windows8让这些问题一口气爆发，种种错误导致一个超前的UI慢慢落后。&lt;/p&gt;
&lt;p&gt;但这不妨碍大量模仿MetroUI的桌面应用和网站，从这方面来看MetroUI本身还算是成功的。&lt;/p&gt;
&lt;p&gt;Windows10时代，ModernUI代替了MetroUI。这时手机市场已经可以忽略不计，放弃了各种Metro的特色后，勉强拼凑起来的ModernUI在Windows10桌面上运行起来还不错。但没有特色的ModernUI已经没有人去模仿了。&lt;/p&gt;
&lt;h3 id=&quot;现状&quot;&gt;6.2 现状&lt;/h3&gt;
&lt;p&gt;微软现在需要解决ModernUI的各种问题，他需要一个能跨设备，可持续发展，精雕细琢，适应各种输入输出而且又很好看的UI。自从提出FDS到现在都已经不短时间了，FDS还只是一个很美好的愿景，没什么出彩的应用，而且大致上就只是现在的UWP换了个发光发亮的皮肤，没变得更好用，不满意的地方倒是一堆。&lt;/p&gt;
&lt;p&gt;例如我就觉得Reveal样式的按钮婆婆妈妈拖拖拉拉软软绵绵的没有手感，Pressed状态慢悠悠做动画，而鼠标释放后再次慢悠悠地做动画，几秒后才回到PointerOver状态，这使整个操作看起来反应迟钝。按钮的天职是反应迅速，这样才能给用户愉悦的操作感受。单独地看这个按钮样式的话除了炫技术还不如普通按钮，希望以后可以改进吧。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109164004082-149552088.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另一方面，微软的宣传也有问题，现在很多媒体还将Acrylic说成Aero回归，明显是微软改名部不给力，起什么名不好，偏偏弄个这么复杂的英文。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;不得不再次点名批评改名部，看看以前Lumia、Metro、Modern，个个都好读好记；Fluent Design System什么鬼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档方面，Material Design有很详细的使用规范、指导原则，而且有面向设计师的文档，而FDS还太过空泛，文档主要是面向开发者的，各种规范分布在UWP的开发文档中。&lt;/p&gt;
&lt;p&gt;我觉得暂时来说，在设计师们还没有完全上手以前，只要规规矩矩用上新的Style、Brush、控件就可以让应用很好看了，可惜现在不少声称使用上FDS的应用为了炫技把各种新Control、新Brush、新Style用得乱七八糟还沾沾自喜。连微软自家的应用都不争气，例如我以前吐槽过的Mail应用，它还出过新闻高调宣传自己已经适配FDS了，结果好处没看到多少，倒是一大堆旧毛病都不处理。我还记得Windows8刚出的时候对官方应用感到十分惊艳，可惜现在的官方应用很多连基本的用色和对齐都没做好，都足够做反面教材了。&lt;/p&gt;
&lt;h3 id=&quot;未来&quot;&gt;6.3 未来&lt;/h3&gt;
&lt;p&gt;通过FDS的五个主题可以看出FDS的一个主要目的是让数字内容通过设备与真实世界链接，这是个很好的愿景。文章开头介绍的视频中展示了ParallaxView在MR中运行的效果，效果有趣很多：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106233727159-542437287.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即使只在桌面上运行，FDS也激发了不少创意。例如&lt;a href=&quot;https://stories.uplabs.com/12-fluent-designs-you-need-to-check-out-e109213e5e01&quot;&gt;这些设计:&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109141721910-1754684044.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相比起当年MetroUI在桌面上后劲不足，FDS看起来有很长远的发展计划，虽然现在还有各种问题，相信以后能给我们更多的惊喜。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;7. 结语&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dino623/p/IValueConverter.html&quot;&gt;上一篇文章&lt;/a&gt;承诺过尽量写短一些，但这篇文章的主题是个很庞大的话题，即使长话短说也短不了多少，所以分成两篇发布了。&lt;/p&gt;
&lt;p&gt;其实比起各种新控件新特效，我更希望FDS给出一个大的设计准则，一个严谨又包容多样性的规范。这几年随着Windows不再强势，设计师好像突然就忘了在桌面上怎么设计了。前两天看到一个运行在Windows上的系统的设计，系统的第一版和第二版都保持着“确定、取消”的按钮顺序，到最近的第三版就突然变成“取消、确定”，大概因为设计组的大佬们这两年都换了MacBook，而平时看的UI文档都是Google和Apple的，谁叫微软没有给设计师看的UI指导文档呢(如果不算&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ff728831(v=vs.85).aspx&quot;&gt;这份古老的文档&lt;/a&gt;的话)。&lt;/p&gt;
&lt;p&gt;本来关于Metro我还写了很多，但都删除了。写博客是为了传播新知识，无意为已经死去的Metro引起口水战。而且我对FDS已经喋喋不休抱怨了很多，再写下去就更像怨妇了。&lt;/p&gt;
&lt;p&gt;当年也曾热衷于在桌面上使用Metro，但现在对在WPF上使用FDS没什么兴趣。何况这个主题是讨论UWP中额FDS，不太想涉及WPF。上一篇文章的评论里提到FDS其中几种元素在WPF上的实现，有兴趣可以参考一下。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;8. 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://fluent.microsoft.com/&quot;&gt;Fluent Design System&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/fluent-design-system/index&quot;&gt;Fluent Design System for UWP apps&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/reveal&quot;&gt;Reveal highlight&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic&quot;&gt;Acrylic material&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/connected-animation&quot;&gt;Connected animation&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/parallax&quot;&gt;ParallaxView&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/navigationview&quot;&gt;Navigation view&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/conditional-xaml&quot;&gt;Conditional XAML&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/59724483&quot;&gt;如何评价微软在 Build 2017 上提出的 Fluent Design System？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;9. 源码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DinoChan/Fluent-Design-System-Sample&quot;&gt;Fluent-Design-System-Sample&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;Colorful-Box&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 13:03:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</dc:identifier>
</item>
<item>
<title>windows第七层负载均衡--基于IIS的ARR负载均衡 - 秃驴竟敢跟贫道抢师太</title>
<link>http://www.cnblogs.com/NET-BLOG/p/8286732.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NET-BLOG/p/8286732.html</guid>
<description>&lt;pre&gt;
{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ResultCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DetailError&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;595225a5bbccc61ff88e89a7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testttt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 17:30:13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-11-10 17:43:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[定位]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5952445ebbccc71ff8adf671&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:41:18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:48:47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5952463dbbccc71ff8adf67d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;巡视频么么哒哒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:49:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-12-20 19:47:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[定位]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59524c0ebbccc71ff8adf6ae&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rrrffff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 20:14:06&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 20:34:54&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6565&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531cdfbbccc414e8f6769f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;都纷纷fee俄方热热&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:05:03&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:05:13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531de5bbccc414e8f676a1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;天赋过人托管人&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:09:25&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:09:33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;呃呃呃&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531e40bbccc414e8f676a3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;热热&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:10:56&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 17:58:41&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59532140bbccc414e8f676a6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;会厌结核有机会好好&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:23:44&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:24:40&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;595321d3bbccc414e8f676a8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;656565656&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:26:11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 18:50:08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ggg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5954d0eebbccc40fecbea435&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-29 18:05:34&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;}]}
&lt;/pre&gt;</description>
<pubDate>Mon, 15 Jan 2018 12:51:00 +0000</pubDate>
<dc:creator>秃驴竟敢跟贫道抢师太</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NET-BLOG/p/8286732.html</dc:identifier>
</item>
<item>
<title>UML中类图的一些基本知识 - xcywt</title>
<link>http://www.cnblogs.com/xcywt/p/8289743.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xcywt/p/8289743.html</guid>
<description>&lt;p&gt;类（class）封装了数据和行为，是面向对象的重要组成部分，他是具有相同操作、属性、关系的对象集合的总称。&lt;/p&gt;
&lt;p&gt;在软件运行时，类被实例化成对象（object），对象对应某个具体的事物，是类的实例（instance）&lt;/p&gt;
&lt;p&gt;类图（class diagram）使用出现在系统中的不同类来描述系统的静态结构，它用来描述不同的类以及它们之间的关系。&lt;/p&gt;

&lt;p&gt;在系统分析和设计阶段，类通常可以分为三种，分别是实体类（Entity class）、控制类（Control Class）和边界类（Boundary Class）。&lt;/p&gt;
&lt;p&gt;1）实体类：对应系统中的每个实体，它们通常需要保存在永久存储体中，一般使用数据库或文件表来记录，实体类既包括存储和传递数据的类，还包括操作数据的类。实体类来源于需求说明中的名词，如学生、商品等。&lt;/p&gt;
&lt;p&gt;2）控制类：用于体现应用程序的执行逻辑，提供相应的业务操作，将控制 类抽象出来可以降低界面和数据库之间的耦合度。控制类一般是由动宾结构的短语（动词加名词）转化来的名词，比如增加商品类，用户注册类。&lt;/p&gt;
&lt;p&gt;3）边界类：用于对外部用户和系统之间的交互对象进行抽象，主要包括界面类，如对话框、窗口、菜单。&lt;/p&gt;


&lt;p&gt;一般是长方形（分三格），类名在最上面那格，中间是成员变量（属性），最下面是成员函数（行为）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性格式：&lt;/strong&gt; 可见性 名称:类型 [ = 缺省值]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为格式：&lt;/strong&gt; 可见性 名词（参数列表） [ : 返回类型]&lt;/p&gt;
&lt;p&gt;关于可见性： + public，- private，# protected&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201118053-798251501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在软件系统中，类表示孤立存在的，类与类之间存在各种关系，UML提供不提供表示方式。&lt;/p&gt;
&lt;h2&gt;1.关联关系（Association）：&lt;/h2&gt;
&lt;p&gt;最常用的一种关系，它是一种结构化关系，用于表示一类对象和另一对象之间有联系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;类图中，用实线连接有关联关系的对象所对应的类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际的场景：class A有一个成员对象b，b的类型是class B。那就可以表示为A与B用实线连接起来，箭头由A指向B。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201144271-1787898298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1.1双向关联：&lt;/h3&gt;
&lt;p&gt;默认情况下关联是双向的，也就是没有箭头指向的。&lt;/p&gt;
&lt;p&gt;比如顾客里面有商品，同时卖出的商品里面也可以有顾客。&lt;/p&gt;
&lt;h3&gt;1.2单向关联：&lt;/h3&gt;
&lt;p&gt;就像上面的例子一样，XHTTPServer有成员XTcp。&lt;/p&gt;
&lt;h3&gt;1.3自关联：&lt;/h3&gt;
&lt;p&gt;存在一些类的属性对象类型为该类本身。比如一个节点的成员也是节点类型的对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201208162-431756201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.4 多重性关联（Multiolicity）：&lt;/h3&gt;
&lt;p&gt;表示两个关联对象在数量上的对应关系。&lt;/p&gt;
&lt;p&gt;在UML中对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示。&lt;/p&gt;
&lt;p&gt;常见的多重性表示如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201342334-952313237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;比如一个界面（Form）可以拥有零个或多个按钮，一个按钮只能属于一个界面。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201336693-764638799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;1.5 聚合关系（Aggregation）：&lt;/h3&gt;
&lt;p&gt;表示整体与部分的关系。在聚合关系中，成员对象是整体对象的一部分，但是成员对象也可以脱离整体对象独立存在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中聚合关系用空心菱形的直线表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如汽车发动机是汽车的一部分，但是发动机也可以独立存在。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201328662-1063396303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;1.6 组合关系（composition）：&lt;/h3&gt;
&lt;p&gt;表示整体和部分的关系，但是在组合关系中整体对象可以控制成员对象的生命周期。一旦整体对象不在了，成员对象也就不在了。具有同生共死的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中用带实心菱形的直线表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，头是整体，嘴巴只是一个部分。嘴巴不能独立存在&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201318537-718159264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;2.依赖关系（Dependency）：&lt;/h2&gt;
&lt;p&gt;是一种使用关系，特定事物的改变有可能会影响到使用该事物的事物，在需要表示一个事物使用另一个事物的时就用到了依赖关系。&lt;/p&gt;
&lt;p&gt;比如：classA中的fun(B b)，方法fun中用到了class B对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中用带箭头的虚线表示，由依赖的一方指向被依赖的一方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201310662-112969464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;3.泛化关系（Generalization）：&lt;/h2&gt;
&lt;p&gt;也就是继承关系。描述父类与子类之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中使用带空性三角形的直线来表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201302068-1876963799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.接口与实现关系（Realization）&lt;/h2&gt;
&lt;p&gt;接口和类之间还存在一种实现关系。这种关系中，类实现了接口，类中的操作实现了接口中所做的声明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中类与接口之间的实现关系用带空心三角形的虚线来表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，下面的接口Vehicle，包含抽象操作move，类ship和类car都实现了该move操作，具体的细节会不一样而已。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201250849-1574784609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 关于上面的参考：http://www.uml.org.cn/oobject/201211231.asp&lt;/p&gt;
&lt;p&gt;关于如何用Enterprise Architect 8.0画类图可以参考：http://blog.csdn.net/cfeibiao/article/details/8545083&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 12:15:00 +0000</pubDate>
<dc:creator>xcywt</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xcywt/p/8289743.html</dc:identifier>
</item>
<item>
<title>8、ABPZero系列教程之拼多多卖家工具 添加手机注册登录功能 - 李子深</title>
<link>http://www.cnblogs.com/shensigzs/p/8289721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shensigzs/p/8289721.html</guid>
<description>&lt;p&gt;　　现在网站基本都用手机注册，很少用邮箱注册，本篇内容比较多，代码我会尽量加备注，有些操作需要连续添加几个文件才不报错，如果VS显示错误，请继续后续步骤。&lt;/p&gt;
&lt;p&gt;前面已经有一篇文章讲到集成短信发送模块：&lt;a href=&quot;http://www.cnblogs.com/shensigzs/category/1147235.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/shensigzs/category/1147235.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此基础上才能做手机注册功能，没有完成的同学请先去整合后再回来。&lt;/p&gt;

&lt;p&gt;AbpZeroTemplate-zh-CN.xml文件末尾添加如下键值对：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Core\Localization\AbpZeroTemplate\AbpZeroTemplate-zh-CN.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MobileRegister&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;手机注册&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;OccupiedMobilePhone&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;手机号码已注册或被占用&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MobilePhone&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;手机号码&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;在Web项目下Models\Account目录下添加MobileRegisterViewModel.cs，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abpweb\PddSellerAssistant\PddSellerAssistant.Web\Models\Account\MobileRegisterViewModel.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Auditing;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Authorization.Users;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Security;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Validation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.MultiTenancy;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Web.Models.Account
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MobileRegisterViewModel : IValidatableObject
    {
        [StringLength(Tenant.MaxTenancyNameLength)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TenancyName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机号码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [Required]
        [StringLength(User.MaxMobilePhoneLength)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MobilePhone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [Required]
        [StringLength(User.MobileCodeLength)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MobilePhoneCode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [StringLength(User.MaxPlainPasswordLength)]
        [DisableAuditing]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PasswordComplexitySetting PasswordComplexitySetting { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;ValidationResult&amp;gt;&lt;span&gt; Validate(ValidationContext validationContext)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(MobilePhone))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt; ValidationHelper().IsPhoneNumber(MobilePhone) == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ValidationResult(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入的手机号码无效 !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ValidationResult(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;手机号码不能为空 !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;User.cs类添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Core\Authorization\Users\User.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxMobilePhoneLength = &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MobileCodeLength = &lt;span&gt;6&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再打开ValidationHelper.cs，添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Core\Validation\ValidationHelper.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 验证手机号是否有效
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;phoneNumber&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsPhoneNumber(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; phoneNumber)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(phoneNumber))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; pattern = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Regex.IsMatch(phoneNumber, pattern);

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; UserStore.cs类添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abpweb\PddSellerAssistant\PddSellerAssistant.Core\Authorization\Users\UserStore.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IRepository&amp;lt;User, &lt;span&gt;long&lt;/span&gt;&amp;gt;&lt;span&gt; _userRepository;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IUnitOfWorkManager _unitOfWorkManager;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 _userRepository =&lt;span&gt; userRepository;
_unitOfWorkManager &lt;/span&gt;= unitOfWorkManager;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#region&lt;/span&gt; 扩展方法
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 按手机号码查询用户
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;phoneNumber&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt; FindByPhoneNumberAsync(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; phoneNumber)
        {

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userRepository.FirstOrDefaultAsync(
                user &lt;/span&gt;=&amp;gt; user.PhoneNumber ==&lt;span&gt; phoneNumber
                );
        }

        [UnitOfWork]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt; FindByPhoneNumberAsync(&lt;span&gt;int&lt;/span&gt;? tenantId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; phoneNumber)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; (_unitOfWorkManager.Current.SetTenantId(tenantId))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; FindByPhoneNumberAsync(phoneNumber);
            }
        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AbpZeroTemplateConsts.cs添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abpweb\PddSellerAssistant\PddSellerAssistant.Core\AbpZeroTemplateConsts.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#region&lt;/span&gt; 手机短信模板
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机短信验证码通用模板
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SmsTemplateCommonCode = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SMS_119088461&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;UserManager.cs 重写&lt;span&gt;CreateAsync、&lt;/span&gt;&lt;span&gt;CheckDuplicateUsernameOrEmailAddressAsync&lt;/span&gt;&lt;span&gt;方法，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Core\Authorization\Users\UserManager.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IdentityResult&amp;gt;&lt;span&gt; CreateAsync(User user)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; CheckDuplicateUsernameOrEmailAddressAsync(user.Id, user.UserName, user.EmailAddress);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;result.Succeeded)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(user.EmailAddress))
            {
                user.EmailAddress &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            }


            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tenantId =&lt;span&gt; GetCurrentTenantId();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tenantId.HasValue &amp;amp;&amp;amp; !&lt;span&gt;user.TenantId.HasValue)
            {
                user.TenantId &lt;/span&gt;=&lt;span&gt; tenantId.Value;
            }

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.CreateAsync(user);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
            {
                Console.WriteLine(e);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
            }

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IdentityResult&amp;gt; CheckDuplicateUsernameOrEmailAddressAsync(&lt;span&gt;long&lt;/span&gt;? expectedUserId, &lt;span&gt;string&lt;/span&gt; userName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; emailAddress)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = (&lt;span&gt;await&lt;/span&gt;&lt;span&gt; FindByNameAsync(userName));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; user.Id !=&lt;span&gt; expectedUserId)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; AbpIdentityResult.Failed(&lt;span&gt;string&lt;/span&gt;.Format(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Identity.DuplicateName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), userName));
            }


            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IdentityResult.Success;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;?&lt;span&gt; GetCurrentTenantId()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_unitOfWorkManager.Current != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _unitOfWorkManager.Current.GetTenantId();
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; AbpSession.TenantId;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; L(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; LocalizationManager.GetString(AbpZeroConsts.LocalizationSourceName, name);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MyAbpLoginResultType.cs添加这个类，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Authorization\MyAbpLoginResultType.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Authorization
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; MyAbpLoginResultType : &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机号码未验证
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        UserMobilePhoneNotConfirmed = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;LogInManager.cs扩展这个类，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Authorization\LogInManager.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IMultiTenancyConfig _multiTenancyConfig;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IUnitOfWorkManager _unitOfWorkManager;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IRepository&amp;lt;Tenant&amp;gt;&lt;span&gt; _tenantRepository;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; AbpUserManager&amp;lt;Role, User&amp;gt;&lt;span&gt; _userManager;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; UserStore _userStore;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LogInManager(
            UserManager userManager, 
            IMultiTenancyConfig multiTenancyConfig, 
            IRepository&lt;/span&gt;&amp;lt;Tenant&amp;gt;&lt;span&gt; tenantRepository, 
            IUnitOfWorkManager unitOfWorkManager, 
            ISettingManager settingManager, 
            IRepository&lt;/span&gt;&amp;lt;UserLoginAttempt, &lt;span&gt;long&lt;/span&gt;&amp;gt;&lt;span&gt; userLoginAttemptRepository, 
            IUserManagementConfig userManagementConfig, 
            IIocResolver iocResolver, 
            RoleManager roleManager,
            &lt;span&gt;UserStore userStore&lt;/span&gt;)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(
                  userManager, 
                  multiTenancyConfig, 
                  tenantRepository, 
                  unitOfWorkManager, 
                  settingManager, 
                  userLoginAttemptRepository, 
                  userManagementConfig, 
                  iocResolver, 
                  roleManager)
        {
            &lt;span&gt;_multiTenancyConfig &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= multiTenancyConfig;
            _unitOfWorkManager = unitOfWorkManager;
            _tenantRepository = tenantRepository;
            _userManager = userManager;
            _userStore =&lt;/span&gt;&lt;span&gt;&lt;span&gt; userStore;&lt;/span&gt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;AbpLoginResult&amp;lt;Tenant, User&amp;gt;&amp;gt; LoginByMobileAsync(&lt;span&gt;string&lt;/span&gt; mobilePhone, &lt;span&gt;string&lt;/span&gt; plainPassword, &lt;span&gt;string&lt;/span&gt; tenancyName = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; shouldLockout = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; LoginByMobileAsyncInternal(mobilePhone, plainPassword, tenancyName, shouldLockout);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; SaveLoginAttempt(result, tenancyName, mobilePhone);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;AbpLoginResult&amp;lt;Tenant, User&amp;gt;&amp;gt; LoginByMobileAsyncInternal(&lt;span&gt;string&lt;/span&gt; mobilePhone, &lt;span&gt;string&lt;/span&gt; plainPassword, &lt;span&gt;string&lt;/span&gt; tenancyName, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; shouldLockout)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mobilePhone.IsNullOrEmpty())
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(mobilePhone));
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (plainPassword.IsNullOrEmpty())
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(plainPassword));
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Get and check tenant&lt;/span&gt;
            Tenant tenant = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (_unitOfWorkManager.Current.SetTenantId(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;))
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_multiTenancyConfig.IsEnabled)
                {
                    tenant &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetDefaultTenantAsync();
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(tenancyName))
                {
                    tenant &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt; _tenantRepository.FirstOrDefaultAsync(t =&amp;gt; t.TenancyName ==&lt;span&gt; tenancyName);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tenant == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.InvalidTenancyName);
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;tenant.IsActive)
                    {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.TenantIsNotActive, tenant);
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tenantId = tenant == &lt;span&gt;null&lt;/span&gt; ? (&lt;span&gt;int&lt;/span&gt;?)&lt;span&gt;null&lt;/span&gt;&lt;span&gt; : tenant.Id;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; (_unitOfWorkManager.Current.SetTenantId(tenantId))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userStore.FindByPhoneNumberAsync(tenantId, mobilePhone);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.InvalidUserNameOrEmailAddress, tenant);
                }

                _userManager.InitializeLockoutSettings(tenantId);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.IsLockedOutAsync(user.Id))
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.LockedOut, tenant, user);
                }

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; verificationResult =&lt;span&gt; _userManager.PasswordHasher.VerifyHashedPassword(user.Password, plainPassword);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (verificationResult !=&lt;span&gt; PasswordVerificationResult.Success)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (shouldLockout)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;await&lt;/span&gt;&lt;span&gt; TryLockOutAsync(tenantId, user.Id))
                        {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.LockedOut, tenant, user);
                        }
                    }

                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.InvalidPassword, tenant, user);
                }

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.ResetAccessFailedCountAsync(user.Id);

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; CreateLoginByMobileResultAsync(user, tenant);
            }
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;AbpLoginResult&amp;lt;Tenant, User&amp;gt;&amp;gt; CreateLoginByMobileResultAsync(User user, Tenant tenant = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;user.IsActive)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(AbpLoginResultType.UserIsNotActive);
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;user.IsPhoneNumberConfirmed)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;((AbpLoginResultType)MyAbpLoginResultType.UserMobilePhoneNotConfirmed);
            }

            user.LastLoginTime &lt;/span&gt;=&lt;span&gt; Clock.Now;

            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.AbpStore.UpdateAsync(user);

            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _unitOfWorkManager.Current.SaveChangesAsync();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbpLoginResult&amp;lt;Tenant, User&amp;gt;&lt;span&gt;(
                tenant,
                user,
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie)
            );
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;CodeHelper.cs添加此类，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Helpers\CodeHelper.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成6位手机验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; SetNewPhoneCode()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; c = RandomHelper.GetRandom(&lt;span&gt;100000&lt;/span&gt;, &lt;span&gt;999999&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; c + &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AccountController.cs添加如下代码，大概351行位置：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Controllers\AccountController.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机注册
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;model&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult RegisterByMobile()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; MobileRegisterView(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MobileRegisterViewModel
            {
                TenancyName &lt;/span&gt;=&lt;span&gt; _tenancyNameFinder.GetCurrentTenancyNameOrNull(),
                PasswordComplexitySetting &lt;/span&gt;= JsonConvert.DeserializeObject&amp;lt;PasswordComplexitySetting&amp;gt;&lt;span&gt;(SettingManager.GetSettingValue(AppSettings.Security.PasswordComplexity))
            });

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult MobileRegisterView(MobileRegisterViewModel model)
        {
            CheckSelfRegistrationIsEnabled();

            ViewBag.IsMultiTenancyEnabled &lt;/span&gt;=&lt;span&gt; _multiTenancyConfig.IsEnabled;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RegisterByMobile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; [HttpPost]
        [UnitOfWork]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;gt;&lt;span&gt; RegisterByMobile(MobileRegisterViewModel model)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {

                CheckSelfRegistrationIsEnabled();
                VaildateMobile(model.MobilePhoneCode);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断手机号是否被占用&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; ur = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.Users.Where(
                u &lt;/span&gt;=&amp;gt; u.PhoneNumber ==&lt;span&gt; model.MobilePhone
                ).FirstOrDefaultAsync();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ur != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OccupiedMobilePhone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_multiTenancyConfig.IsEnabled)
                {
                    model.TenancyName &lt;/span&gt;=&lt;span&gt; Tenant.DefaultTenantName;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (model.TenancyName.IsNullOrEmpty())
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TenantNameCanNotBeEmpty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }

                CurrentUnitOfWork.SetTenantId(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tenant = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetActiveTenantAsync(model.TenancyName);

                CurrentUnitOfWork.SetTenantId(tenant.Id);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;await&lt;/span&gt; SettingManager.GetSettingValueForTenantAsync&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;(AppSettings.UserManagement.AllowSelfRegistration, tenant.Id))
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SelfUserRegistrationIsDisabledMessage_Detail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }

                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userPolicy.CheckMaxUserCountAsync(tenant.Id);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Getting tenant-specific settings&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; isNewRegisteredUserActiveByDefault = &lt;span&gt;await&lt;/span&gt; SettingManager.GetSettingValueForTenantAsync&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;(AppSettings.UserManagement.IsNewRegisteredUserActiveByDefault, tenant.Id);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isEmailConfirmationRequiredForLogin = &lt;span&gt;await&lt;/span&gt; SettingManager.GetSettingValueForTenantAsync&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;(AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin, tenant.Id);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User
                {
                    TenantId &lt;/span&gt;=&lt;span&gt; tenant.Id,
                    IsActive &lt;/span&gt;=&lt;span&gt; isNewRegisteredUserActiveByDefault,
                    PhoneNumber &lt;/span&gt;=&lt;span&gt; model.MobilePhone,
                    IsPhoneNumberConfirmed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                };

                ExternalLoginInfo externalLoginInfo &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名或密码为空，抛出异常&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (model.MobilePhone.IsNullOrEmpty() ||&lt;span&gt; model.Password.IsNullOrEmpty())
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FormIsNotValidMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }

                user.UserName &lt;/span&gt;=&lt;span&gt; model.MobilePhone;
                user.Password &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PasswordHasher().HashPassword(model.Password);

                user.Roles &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;UserRole&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; defaultRole &lt;span&gt;in&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; _roleManager.Roles.Where(r =&amp;gt;&lt;span&gt; r.IsDefault).ToListAsync())
                {
                    user.Roles.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserRole(tenant.Id, user.Id, defaultRole.Id));
                }
                
                CheckErrors(&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.CreateAsync(user));
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _unitOfWorkManager.Current.SaveChangesAsync();


                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _notificationSubscriptionManager.SubscribeToAllAvailableNotificationsAsync(user.ToUserIdentifier());
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _appNotifier.WelcomeToTheApplicationAsync(user);
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _appNotifier.NewUserRegisteredAsync(user);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果可能，直接登录&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (user.IsActive &amp;amp;&amp;amp;&lt;span&gt; user.IsPhoneNumberConfirmed)
                {
                    AbpLoginResult&lt;/span&gt;&amp;lt;Tenant, User&amp;gt;&lt;span&gt; loginResult;
                    loginResult &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetLoginByMobileResultAsync(user.UserName, model.Password, tenant.TenancyName);

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (loginResult.Result ==&lt;span&gt; AbpLoginResultType.Success)
                    {
                        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; SignInAsync(loginResult.User, loginResult.Identity);
                        
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Redirect(Url.Action(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Application&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    }

                    Logger.Warn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;新注册的用户无法登录。 这不应该是正常。 登录结果: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; loginResult.Result);
                }

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RegisterResult&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RegisterResultViewModel
                {
                    TenancyName &lt;/span&gt;=&lt;span&gt; tenant.TenancyName,
                    NameAndSurname &lt;/span&gt;= user.Name + &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; user.Surname,
                    UserName &lt;/span&gt;=&lt;span&gt; user.UserName,
                    EmailAddress &lt;/span&gt;=&lt;span&gt; user.EmailAddress,
                    IsActive &lt;/span&gt;=&lt;span&gt; user.IsActive,
                    IsEmailConfirmationRequired &lt;/span&gt;=&lt;span&gt; isEmailConfirmationRequiredForLogin
                });
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (UserFriendlyException ex)
            {
                ViewBag.IsMultiTenancyEnabled &lt;/span&gt;=&lt;span&gt; _multiTenancyConfig.IsEnabled;
                ViewBag.UseCaptcha &lt;/span&gt;=&lt;span&gt; UseCaptchaOnRegistration();
                ViewBag.ErrorMessage &lt;/span&gt;=&lt;span&gt; ex.Message;
                ViewBag.ErrorDetails &lt;/span&gt;=&lt;span&gt; ex.Details;

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RegisterByMobile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机验证码验证
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mobilePhoneCode&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; VaildateMobile(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; mobilePhoneCode)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mobilePhoneCode.Length !=&lt;span&gt; Authorization.Users.User.MobileCodeLength)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;验证码必须为 {0} 位！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Authorization.Users.User.MobileCodeLength));
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;手机验证码效验&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; phoneCode = Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; now = Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCodeDateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (phoneCode == &lt;span&gt;null&lt;/span&gt; || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(phoneCode.ToString()))
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入的验证码无效！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nowTime =&lt;span&gt; Convert.ToDateTime(now);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; t = DateTime.Now -&lt;span&gt; nowTime;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (t.TotalSeconds &amp;gt;= &lt;span&gt;180&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入的验证码无效！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;mobilePhoneCode.Equals(phoneCode.ToString()))
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入的验证码不正确！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;AbpLoginResult&amp;lt;Tenant, User&amp;gt;&amp;gt; GetLoginByMobileResultAsync(&lt;span&gt;string&lt;/span&gt; mobilePhone, &lt;span&gt;string&lt;/span&gt; password, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; tenancyName)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginResult = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _logInManager.LoginByMobileAsync(mobilePhone, password, tenancyName);

            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (loginResult.Result)
            {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; AbpLoginResultType.Success:
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; loginResult;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; _abpLoginResultTypeHelper.CreateExceptionForFailedLoginAttempt(loginResult.Result, mobilePhone, tenancyName);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;VerificationCodeController.cs添加此控制器，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Controllers\VerificationCodeController.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data.Entity;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Net.Sms;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.UI;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Authorization.Users;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.MultiTenancy;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Validation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Web.Helpers;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; MyCompanyName.AbpZeroTemplate.Web.Controllers
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; VerificationCodeController : AbpZeroTemplateControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; UserManager _userManager;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ISmsSender _smsSender;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; TenantManager _tenantManager;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IUserEmailer _userEmailer;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; VerificationCodeController(UserManager userManager,
            ISmsSender smsSender,
            TenantManager tenantManager,
            IUserEmailer userEmailer)
        {
            _userManager &lt;/span&gt;=&lt;span&gt; userManager;
            _smsSender &lt;/span&gt;=&lt;span&gt; smsSender;
            _tenantManager &lt;/span&gt;=&lt;span&gt; tenantManager;
            _userEmailer &lt;/span&gt;=&lt;span&gt; userEmailer;
        }
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 手机

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 注册时使用，发送手机验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;phoneNumber&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;JsonResult&amp;gt; SendMobileCode(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; phoneNumber)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ValidationHelper().IsPhoneNumber(phoneNumber))
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入了无效的手机号码！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查手机是否已被注册&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.Users.Where(
                u &lt;/span&gt;=&amp;gt; u.PhoneNumber ==&lt;span&gt; phoneNumber
                ).FirstOrDefaultAsync();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OccupiedMobilePhone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成6位数字验证码&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; code =&lt;span&gt; CodeHelper.SetNewPhoneCode();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送验证码&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt; _smsSender.SendAsync(phoneNumber, AbpZeroTemplateConsts.SmsTemplateCommonCode, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&quot;code\&quot;:\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + code + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储验证码、手机号、时间，以备验证使用&lt;/span&gt;
                Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; code;
                Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; phoneNumber;
                Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCodeDateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; DateTime.Now;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.DenyGet);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserFriendlyException(ex.Message);
            }
        }


        
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;验证手机时使用，发送手机验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;phoneNumber&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;JsonResult&amp;gt; SendMobileCodeByVerificationMobile(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; phoneNumber)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ValidationHelper().IsPhoneNumber(phoneNumber))
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您输入了无效的手机号码！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查手机是否已被注册&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.Users.Where(
                u &lt;/span&gt;=&amp;gt; u.PhoneNumber == phoneNumber &amp;amp;&amp;amp; u.Id !=&lt;span&gt; AbpSession.UserId
                ).FirstOrDefaultAsync();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OccupiedMobilePhone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成6位数字验证码&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; code =&lt;span&gt; CodeHelper.SetNewPhoneCode();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送验证码&lt;/span&gt;
                &lt;span&gt;await&lt;/span&gt; _smsSender.SendAsync(phoneNumber, AbpZeroTemplateConsts.SmsTemplateCommonCode, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&quot;code\&quot;:\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + code + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储验证码、手机号、时间，以备验证使用&lt;/span&gt;
                Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; code;
                Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneNumber&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; phoneNumber;
                Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PhoneCodeDateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; DateTime.Now;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.DenyGet);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserFriendlyException(ex.Message);
            }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; private
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 检查手机号码是否已被注册，未注册抛出异常
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mobilePhone&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt; GetUserByCheckingMobile(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; mobilePhone)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _userManager.Users.Where(
                u &lt;/span&gt;=&amp;gt; u.PhoneNumber ==&lt;span&gt; mobilePhone
                ).FirstOrDefaultAsync();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InvalidMobilePhone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
        }
        
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加RegisterByMobile.cshtml视图文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abpweb\PddSellerAssistant\PddSellerAssistant.Web\Views\Account\RegisterByMobile.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@model MyCompanyName.AbpZeroTemplate.Web.Models.Account.MobileRegisterViewModel
@using System.Web.Script.Serialization
@using Abp.Extensions
@using Abp.Web.Mvc.Extensions
@using MyCompanyName.AbpZeroTemplate.MultiTenancy
@using Recaptcha.Web
@using Recaptcha.Web.Mvc
@section Scripts
{
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        window.passwordComplexitySetting &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; @(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; JavaScriptSerializer().Serialize(Model.PasswordComplexitySetting).Replace(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    @Html.IncludeScript(&quot;~/Views/Account/RegisterByMobile.js&quot;)
}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;register-form&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;@Url.Action(&quot;&lt;/span&gt;&lt;span&gt;RegisterByMobile&quot;)&quot; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;MobileRegister&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

    @if (@ViewBag.ErrorMessage != null)
    {
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;alert alert-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-warning&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; @ViewBag.ErrorMessage
            @if (@ViewBag.ErrorDetails != null)
            {
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;@ViewBag.ErrorDetails
            }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    }

    @Html.AntiForgeryToken()

    @if (ViewBag.IsMultiTenancyEnabled)
    {
        if (Model.TenancyName.IsNullOrEmpty())
        {
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;hint&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @L(&quot;TenantInformations&quot;)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;control-label visible-ie8 visible-ie9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;TenancyName&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control placeholder-no-fix input-ltr&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;@L(&quot;&lt;/span&gt;&lt;span&gt;TenancyName&quot;)&quot; name&lt;/span&gt;&lt;span&gt;=&quot;TenancyName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@(Model.TenancyName ?? &quot;&lt;/span&gt;&lt;span&gt;&quot;)&quot; required maxlength&lt;/span&gt;&lt;span&gt;=&quot;@Tenant.MaxTenancyNameLength&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        }
        else
        {
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;hidden&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;TenancyName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;@Model.TenancyName&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
        }
    }

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;hint&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        @L(&quot;AccountSettings&quot;)
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;control-label visible-ie8 visible-ie9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;MobilePhone&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control placeholder-no-fix&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;@L(&quot;&lt;/span&gt;&lt;span&gt;MobilePhone&quot;)&quot; id&lt;/span&gt;&lt;span&gt;=&quot;MobilePhone&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;MobilePhone&quot;&lt;/span&gt;&lt;span&gt; required value&lt;/span&gt;&lt;span&gt;=&quot;@Model.MobilePhone&quot;&lt;/span&gt;&lt;span&gt; maxlength&lt;/span&gt;&lt;span&gt;=&quot;@MyCompanyName.AbpZeroTemplate.Authorization.Users.User.MaxMobilePhoneLength&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;input-group input-group-lg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;input-group-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control input-sm&quot;&lt;/span&gt;&lt;span&gt; autocomplete&lt;/span&gt;&lt;span&gt;=&quot;off&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;MobileCode&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;MobilePhoneCode&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; required placeholder&lt;/span&gt;&lt;span&gt;=&quot;验证码&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;input-group-btn btn-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;SendMobileCode&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn green-haze&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;发送验证码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;control-label visible-ie8 visible-ie9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;Password&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control placeholder-no-fix&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; autocomplete&lt;/span&gt;&lt;span&gt;=&quot;off&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;RegisterPassword&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;@L(&quot;&lt;/span&gt;&lt;span&gt;Password&quot;)&quot; name&lt;/span&gt;&lt;span&gt;=&quot;Password&quot;&lt;/span&gt;&lt;span&gt; required &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;control-label visible-ie8 visible-ie9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;PasswordRepeat&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control placeholder-no-fix&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; autocomplete&lt;/span&gt;&lt;span&gt;=&quot;off&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;@L(&quot;&lt;/span&gt;&lt;span&gt;PasswordRepeat&quot;)&quot; name&lt;/span&gt;&lt;span&gt;=&quot;PasswordRepeat&quot;&lt;/span&gt;&lt;span&gt; required &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-actions&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;@Url.Action(&quot;&lt;/span&gt;&lt;span&gt;Login&quot;, &quot;Account&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;register-back-btn&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;Back&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;@Url.Action(&quot;&lt;/span&gt;&lt;span&gt;Register&quot;,&quot;Account&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱注册&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;register-submit-btn&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-success uppercase pull-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@L(&quot;Submit&quot;)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;添加一个跟视图名称一样的JS文件 RegisterByMobile.js，代码如下：&lt;/p&gt;
&lt;p&gt; 文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Views\Account\RegisterByMobile.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; CurrentPage = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

    jQuery.validator.addMethod(&lt;/span&gt;&quot;customUsername&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value, element) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value === $('input[name=&quot;MobilePhoneCode&quot;]'&lt;span&gt;).val()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; !$.validator.methods.email.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments);
    }, abp.localization.localize(&lt;/span&gt;&quot;RegisterFormUserNameInvalidMessage&quot;&lt;span&gt;));

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _passwordComplexityHelper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; app.PasswordComplexityHelper();

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handleRegister = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

        $(&lt;/span&gt;'.register-form'&lt;span&gt;).validate({
            rules: {
                PasswordRepeat: {
                    equalTo: &lt;/span&gt;&quot;#RegisterPassword&quot;&lt;span&gt;
                },
                MobilePhone: {
                    required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                },
                MobileCode: {
                    required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                }
            },

            submitHandler: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (form) {
                form.submit();
            }
        });

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; $element = $('#RegisterPassword'&lt;span&gt;);
        _passwordComplexityHelper.setPasswordComplexityRules($element, window.passwordComplexitySetting);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
         发送验证码
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        $(sendMobileCodeBtn).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; phoneNumber = $(&quot;#MobilePhone&quot;&lt;span&gt;).val();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (checkMobile(phoneNumber) == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }

            curCount &lt;/span&gt;=&lt;span&gt; count;
            abp.ajax({
                contentType: app.consts.contentTypes.formUrlencoded,
                url: &lt;/span&gt;'/VerificationCode/SendMobileCode'&lt;span&gt;,
                data: { phoneNumber: phoneNumber }
            }).done(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (result) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.result == &quot;OK&quot;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置按钮显示效果，倒计时&lt;/span&gt;
                    $(sendMobileCodeBtn).attr(&quot;disabled&quot;, &quot;true&quot;&lt;span&gt;);
                    $(sendMobileCodeBtn).text(&lt;/span&gt;&quot;请在&quot; + curCount + &quot;秒内输入验证码&quot;&lt;span&gt;);
                    InterValObj &lt;/span&gt;= window.setInterval(SetRemainTime, 1000); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 启动计时器，1秒执行一次&lt;/span&gt;
                } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    $(sendMobileCodeBtn).val(&lt;/span&gt;&quot;重新发送验证码&quot;&lt;span&gt;);
                }
            });
        });


    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        init: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            handleRegister();
        }
    };

}();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; InterValObj; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;timer变量，控制时间&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; count = 60 * 3; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;间隔函数，1秒执行&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; curCount;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前剩余秒数&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; codeLength = 6;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码长度&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; sendMobileCodeBtn = $(&quot;#SendMobileCode&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;timer处理函数&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SetRemainTime() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (curCount == 0&lt;span&gt;) {
        window.clearInterval(InterValObj);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 停止计时器&lt;/span&gt;
        $(sendMobileCodeBtn).removeAttr(&quot;disabled&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 启用按钮&lt;/span&gt;
        $(sendMobileCodeBtn).text(&quot;重新发送验证码&quot;&lt;span&gt;);
        code &lt;/span&gt;= &quot;&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清除验证码。如果不清除，过时间后，输入收到的验证码依然有效&lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        curCount&lt;/span&gt;--&lt;span&gt;;
        $(sendMobileCodeBtn).text(&lt;/span&gt;&quot;请在&quot; + curCount + &quot;秒内输入验证码&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkMobile(phone) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(/^1[3|4|5|8][0-9]\d{4,8}$/&lt;span&gt;.test(phone))) {
        abp.message.error(&lt;/span&gt;'您输入了无效的手机号', '错误'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; Register.cshtml添加手机号注册连接，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Views\Account\Register.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-actions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Url.Action(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Login&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Account&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;register-back-btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Back&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/button&amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@Url.Action(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;RegisterByMobile&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;Account&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;手机号注册&amp;lt;/a&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;register-submit-btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-success uppercase pull-right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 保存生成项目，浏览器打开注册页面，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180115193435068-690882009.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180115193447974-1680304356.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180115195339756-736696649.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180115195346162-2026976336.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注册成功会自动登录系统，此时注销用户，再次登录会提示“登录失败”，接下来修改登录功能，使之同时支持手机、邮箱、用户名登录。&lt;/p&gt;


&lt;p&gt;AccountController.cs修改Login Post方法，143行位置代码修改如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Controllers\AccountController.cs&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
AbpLoginResult&amp;lt;&lt;span&gt;Tenant,
            Authorization.Users.User &lt;/span&gt;&amp;gt; loginResult = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ValidationHelper().IsPhoneNumber(loginModel.UsernameOrEmailAddress))
            {
                loginResult &lt;/span&gt;=
                    &lt;span&gt;await&lt;/span&gt;&lt;span&gt;
                        GetLoginByMobileResultAsync(loginModel.UsernameOrEmailAddress, loginModel.Password,
                            loginModel.TenancyName);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                loginResult &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetLoginResultAsync(loginModel.UsernameOrEmailAddress, loginModel.Password, loginModel.TenancyName);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AbpZeroTemplate-zh-CN.xml ，代码修改如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Core\Localization\AbpZeroTemplate\AbpZeroTemplate-zh-CN.xml  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;UserNameOrEmail&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;手机或用户名或邮箱地址&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 生成项目，再次以手机、邮箱、用户名登录，已经都可以正常登录。&lt;/p&gt;
&lt;p&gt;手机注册登录功能到这里修改完成，篇幅很多，基本把整个解决方案翻了一篇。&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;http://www.cnblogs.com/shensigzs/p/8277860.html&quot; target=&quot;_blank&quot;&gt;返回总目录&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 15 Jan 2018 12:11:00 +0000</pubDate>
<dc:creator>李子深</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shensigzs/p/8289721.html</dc:identifier>
</item>
<item>
<title>LevelDB的源码阅读（二） Open操作 - 雪球球</title>
<link>http://www.cnblogs.com/xueqiuqiu/p/8289046.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xueqiuqiu/p/8289046.html</guid>
<description>&lt;p&gt;&lt;span&gt;在&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/xueqiuqiu/p/8268814.html&quot;&gt;Linux上leveldb的安装和使用&lt;/a&gt;中我们写了一个测试代码，内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;leveldb/db.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cassert&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;iostream&amp;gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; leveldb;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    leveldb::DB &lt;/span&gt;*&lt;span&gt;db;
    leveldb::Options options;
    options.create_if_missing &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    leveldb::Status status &lt;/span&gt;= leveldb::DB::Open(options, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;db);
    assert(status.ok());

    status &lt;/span&gt;= db-&amp;gt;Put(WriteOptions(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    assert(status.ok());
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; res;
    status &lt;/span&gt;= db-&amp;gt;Get(ReadOptions(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;res);
    assert(status.ok());
    cout &lt;/span&gt;&amp;lt;&amp;lt; res &amp;lt;&amp;lt;&lt;span&gt; endl;

    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; db;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中db.h中定义了leveldb对外接口，定义了class DB,这个类只是一个接口类，&lt;/span&gt;&lt;span&gt;leveldb:&lt;/span&gt;:DB&lt;span&gt;::Open操作来自leveldb源代码db文件夹下db_impl.cc文件，源码内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
Status DB::Open(&lt;span&gt;const&lt;/span&gt; Options&amp;amp; options, &lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt;&amp;amp;&lt;span&gt; dbname,
                DB&lt;/span&gt;**&lt;span&gt; dbptr) {
  &lt;/span&gt;*dbptr =&lt;span&gt; NULL;

  DBImpl&lt;/span&gt;* impl = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DBImpl(options, dbname);
  impl&lt;/span&gt;-&amp;gt;&lt;span&gt;mutex_.Lock();
  VersionEdit edit;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Recover handles create_if_missing, error_if_exists&lt;/span&gt;
  &lt;span&gt;bool&lt;/span&gt; save_manifest = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
  Status s &lt;/span&gt;= impl-&amp;gt;Recover(&amp;amp;edit, &amp;amp;&lt;span&gt;save_manifest);
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s.ok() &amp;amp;&amp;amp; impl-&amp;gt;mem_ ==&lt;span&gt; NULL) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create new log and a corresponding memtable.&lt;/span&gt;
    uint64_t new_log_number = impl-&amp;gt;versions_-&amp;gt;&lt;span&gt;NewFileNumber();
    WritableFile&lt;/span&gt;*&lt;span&gt; lfile;
    s &lt;/span&gt;= options.env-&amp;gt;&lt;span&gt;NewWritableFile(LogFileName(dbname, new_log_number),
                                     &lt;/span&gt;&amp;amp;&lt;span&gt;lfile);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
      edit.SetLogNumber(new_log_number);
      impl&lt;/span&gt;-&amp;gt;logfile_ =&lt;span&gt; lfile;
      impl&lt;/span&gt;-&amp;gt;logfile_number_ =&lt;span&gt; new_log_number;
      impl&lt;/span&gt;-&amp;gt;log_ = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; log::Writer(lfile);
      impl&lt;/span&gt;-&amp;gt;mem_ = &lt;span&gt;new&lt;/span&gt; MemTable(impl-&amp;gt;&lt;span&gt;internal_comparator_);
      impl&lt;/span&gt;-&amp;gt;mem_-&amp;gt;&lt;span&gt;Ref();
    }
  }
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s.ok() &amp;amp;&amp;amp;&lt;span&gt; save_manifest) {
    edit.SetPrevLogNumber(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; No older logs needed after recovery.&lt;/span&gt;
    edit.SetLogNumber(impl-&amp;gt;&lt;span&gt;logfile_number_);
    s &lt;/span&gt;= impl-&amp;gt;versions_-&amp;gt;LogAndApply(&amp;amp;edit, &amp;amp;impl-&amp;gt;&lt;span&gt;mutex_);
  }
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
    impl&lt;/span&gt;-&amp;gt;&lt;span&gt;DeleteObsoleteFiles();
    impl&lt;/span&gt;-&amp;gt;&lt;span&gt;MaybeScheduleCompaction();
  }
  impl&lt;/span&gt;-&amp;gt;&lt;span&gt;mutex_.Unlock();
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
    assert(impl&lt;/span&gt;-&amp;gt;mem_ !=&lt;span&gt; NULL);
    &lt;/span&gt;*dbptr =&lt;span&gt; impl;
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; impl;
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;DB::Open函数创建的是一个DBImpl类，具体的操作由DBImpl类来处理.DBImpl构造函数如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
DBImpl::DBImpl(&lt;span&gt;const&lt;/span&gt; Options&amp;amp; raw_options, &lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt;&amp;amp;&lt;span&gt; dbname)
    : env_(raw_options.env), &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Env* const&lt;/span&gt;
      internal_comparator_(raw_options.comparator), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const InternalKeyComparator&lt;/span&gt;
      internal_filter_policy_(raw_options.filter_policy), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const InternalFilterPolicy&lt;/span&gt;
      options_(SanitizeOptions(dbname, &amp;amp;internal_comparator_, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const Options&lt;/span&gt;
                               &amp;amp;&lt;span&gt;internal_filter_policy_, raw_options)),
      owns_info_log_(options_.info_log &lt;/span&gt;!= raw_options.info_log), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool&lt;/span&gt;
      owns_cache_(options_.block_cache != raw_options.block_cache), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool&lt;/span&gt;
      dbname_(dbname), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const std::string&lt;/span&gt;
      db_lock_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; FileLock*&lt;/span&gt;
      shutting_down_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; port::AtomicPointer&lt;/span&gt;
      bg_cv_(&amp;amp;mutex_), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; port::CondVar&lt;/span&gt;
      mem_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; MemTable*&lt;/span&gt;
      imm_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; MemTable*&lt;/span&gt;
      logfile_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; WritableFile*&lt;/span&gt;
      logfile_number_(&lt;span&gt;0&lt;/span&gt;), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; uint64_t&lt;/span&gt;
      log_(NULL), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; log::Writer*&lt;/span&gt;
      seed_(&lt;span&gt;0&lt;/span&gt;), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; uint32_t&lt;/span&gt;
      tmp_batch_(&lt;span&gt;new&lt;/span&gt; WriteBatch), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; WriteBatch*&lt;/span&gt;
      bg_compaction_scheduled_(&lt;span&gt;false&lt;/span&gt;), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool&lt;/span&gt;
      manual_compaction_(NULL) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ManualCompaction*&lt;/span&gt;
&lt;span&gt;  has_imm_.Release_Store(NULL);

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reserve ten files or so for other uses and give the rest to TableCache.&lt;/span&gt;
  &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; table_cache_size = options_.max_open_files -&lt;span&gt; kNumNonTableCacheFiles;
  table_cache_ &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; TableCache(dbname_, &amp;amp;&lt;span&gt;options_, table_cache_size);

  versions_ &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; VersionSet(dbname_, &amp;amp;&lt;span&gt;options_, table_cache_,
                             &lt;/span&gt;&amp;amp;&lt;span&gt;internal_comparator_);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;以下是&lt;/span&gt;&lt;span&gt;成员变量的含义：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;env_, 负责所有IO, 比如建立文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;internal_comparator_, 用来比较不同key的大小&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;internal_filter_policy_, 可自定义BloomFilter&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;options_, 对调用者传入的options进行调整&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;db_lock_, 文件锁&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;shutting_down_, 基于memory barrier的原子指针&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;bg_cv_, 多线程的条件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mem_ =&lt;/span&gt; memtable&lt;/li&gt;
&lt;li&gt;imm &lt;span&gt;=&lt;/span&gt; immemtable&lt;/li&gt;
&lt;li&gt;&lt;span&gt;tmp_batch_, 所有Put都是以batch写入, 这里建立临时的batch&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;manual_compaction_, 内部开发者调用时的参数, 可以不用理会&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;has_imm_, 用于判断是否有等待或者正在写入硬盘的immemtable&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;table_cache_, SSTable查询缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;versions_, 数据库MVCC&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;接下来说一下memory barrier的问题.&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;程序经由编译器处理后变成了一条条的机器指令，每条指令又对应了更基础的几个硬件阶段，各个指令在这些硬件阶段里排队处理，组成流水线.由于不同指令对应的硬件阶段不同，导致有些时候流水线填不满，影响性能.因此硬件会主动的对指令顺序做微调，提升流水线的效率，也就是乱序执行.乱序执行是有规则的，在单线程下几乎不需要软件介入，但多线程就不一样了.比如说我们的程序这么写：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;thread1:
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: some_task = &lt;span&gt;123&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;: complete = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

thread2:
  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!complete) sleep(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;got %d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, task_result);
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;程序本意是等任务完成后输出 got 123，但结果很可能是 got 0，原因就是 1 和 2 两条指令被调整了顺序，乱序不当.为解决这样的问题，cpu 增加了用于控制乱序执行的指令，称为内存栅栏（memory barrier）.在 1、2 之间插入栅栏就会强制&lt;/span&gt; cpu &lt;span&gt;不做乱序，从而保证程序的正确性.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在leveldb中port文件夹下atomic_pointer.h里出现了memory barrier.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先是memory barrier的定义问题，leveldb提供了不同环境下的多种定义方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Define MemoryBarrier() if available
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Windows on x86&lt;/span&gt;
&lt;span&gt;#if&lt;/span&gt; defined(OS_WIN) &amp;amp;&amp;amp; defined(COMPILER_MSVC) &amp;amp;&amp;amp; defined(ARCH_CPU_X86_FAMILY)
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; windows.h already provides a MemoryBarrier(void) macro
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;http://msdn.microsoft.com/en-us/library/ms684208&lt;/span&gt;&lt;span&gt;(v=vs.85).aspx&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Mac OS&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(__APPLE__)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  OSMemoryBarrier();
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gcc on x86&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_X86_FAMILY) &amp;amp;&amp;amp; defined(__GNUC__)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; See &lt;/span&gt;&lt;span&gt;http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html&lt;/span&gt;&lt;span&gt; for a discussion on
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this idiom. Also see &lt;/span&gt;&lt;span&gt;http://en.wikipedia.org/wiki/Memory_ordering.&lt;/span&gt;
  __asm__ __volatile__(&lt;span&gt;&quot;&quot;&lt;/span&gt; : : : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sun Studio&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_X86_FAMILY) &amp;amp;&amp;amp; defined(__SUNPRO_CC)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; See &lt;/span&gt;&lt;span&gt;http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html&lt;/span&gt;&lt;span&gt; for a discussion on
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this idiom. Also see &lt;/span&gt;&lt;span&gt;http://en.wikipedia.org/wiki/Memory_ordering.&lt;/span&gt;
  asm &lt;span&gt;volatile&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt; : : : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ARM Linux&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_ARM_FAMILY) &amp;amp;&amp;amp; defined(__linux__)&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (*LinuxKernelMemoryBarrierFunc)(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The Linux ARM kernel provides a highly optimized device-specific memory
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; barrier function at a fixed memory address that is mapped in every
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; user-level process.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This beats using CPU-specific instructions which are, on single-core
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; devices, un-necessary and very costly (e.g. ARMv7-A &quot;dmb&quot; takes more
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; than 180ns on a Cortex-A8 like the one on a Nexus One). Benchmarking
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; shows that the extra function call cost is completely negligible on
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; multi-core devices.
&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;inline &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  (&lt;/span&gt;*(LinuxKernelMemoryBarrierFunc)&lt;span&gt;0xffff0fa0&lt;/span&gt;&lt;span&gt;)();
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ARM64&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_ARM64_FAMILY)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  asm &lt;/span&gt;&lt;span&gt;volatile&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dmb sy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : : : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; PPC&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_PPC_FAMILY) &amp;amp;&amp;amp; defined(__GNUC__)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO for some powerpc expert: is there a cheaper suitable variant?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Perhaps by having separate barriers for acquire and release ops.&lt;/span&gt;
  asm &lt;span&gt;volatile&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : : : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; MIPS&lt;/span&gt;
&lt;span&gt;#elif&lt;/span&gt; defined(ARCH_CPU_MIPS_FAMILY) &amp;amp;&amp;amp; defined(__GNUC__)&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MemoryBarrier() {
  __asm__ __volatile__(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : : : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; LEVELDB_HAVE_MEMORY_BARRIER

&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;例如，对于X86内存模型而言，__asm__ __volatile__(&lt;/span&gt;&quot; : : &lt;span&gt;: &quot;memory&quot;)的意思就是告诉编译器，memory在执行这端inline 汇编代码之后，已经失效了.也就是告诉编译器，不要在这个地方优化有关访问内存的指令.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在atomic_pointer.h中 memory barrier的使用方式如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; AtomicPointer built using platform-specific MemoryBarrier()&lt;/span&gt;
&lt;span&gt;#if&lt;/span&gt; defined(LEVELDB_HAVE_MEMORY_BARRIER)
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AtomicPointer {
 &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
  &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;*&lt;span&gt; rep_;
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
  AtomicPointer() { }
  &lt;/span&gt;&lt;span&gt;explicit&lt;/span&gt; AtomicPointer(&lt;span&gt;void&lt;/span&gt;*&lt;span&gt; p) : rep_(p) {}
  inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;* NoBarrier_Load() &lt;span&gt;const&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rep_; }
  inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; NoBarrier_Store(&lt;span&gt;void&lt;/span&gt;* v) { rep_ =&lt;span&gt; v; }
  inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;* Acquire_Load() &lt;span&gt;const&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;* result =&lt;span&gt; rep_;
    MemoryBarrier();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
  }
  inline &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; Release_Store(&lt;span&gt;void&lt;/span&gt;*&lt;span&gt; v) {
    MemoryBarrier();
    rep_ &lt;/span&gt;=&lt;span&gt; v;
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;DBImpl中的has_imm_就是上面描述的atomic pointer.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再次回到db_impl.cc文件，读完:DB::Open的源码：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
Status DB::Open(&lt;span&gt;const&lt;/span&gt; Options&amp;amp; options, &lt;span&gt;const&lt;/span&gt; std::&lt;span&gt;string&lt;/span&gt;&amp;amp;&lt;span&gt; dbname,
                DB&lt;/span&gt;**&lt;span&gt; dbptr) { 
  &lt;/span&gt;*dbptr = NULL; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置结果默认值, 指针传值&lt;/span&gt;
  DBImpl* impl = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DBImpl(options, dbname);
  impl&lt;/span&gt;-&amp;gt;mutex_.Lock(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据恢复时上锁, 禁止所有可能的后台任务&lt;/span&gt;
&lt;span&gt;  VersionEdit edit;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Recover handles create_if_missing, error_if_exists&lt;/span&gt;
  &lt;span&gt;bool&lt;/span&gt; save_manifest = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
  Status s &lt;/span&gt;= impl-&amp;gt;Recover(&amp;amp;edit, &amp;amp;save_manifest); &lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用DBImpl的恢复数据接口，读取元数据，恢复日志数据&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (s.ok() &amp;amp;&amp;amp; impl-&amp;gt;mem_ ==&lt;span&gt; NULL) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create new log and a corresponding memtable. 复位&lt;/span&gt;
    uint64_t new_log_number = impl-&amp;gt;versions_-&amp;gt;&lt;span&gt;NewFileNumber();
    WritableFile&lt;/span&gt;*&lt;span&gt; lfile;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建新的写操作日志文件&lt;/span&gt;
    s = options.env-&amp;gt;&lt;span&gt;NewWritableFile(LogFileName(dbname, new_log_number),
                                     &lt;/span&gt;&amp;amp;&lt;span&gt;lfile);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
      edit.SetLogNumber(new_log_number);
      impl&lt;/span&gt;-&amp;gt;logfile_ =&lt;span&gt; lfile;
      impl&lt;/span&gt;-&amp;gt;logfile_number_ =&lt;span&gt; new_log_number;
      impl&lt;/span&gt;-&amp;gt;log_ = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; log::Writer(lfile);
      impl&lt;/span&gt;-&amp;gt;mem_ = &lt;span&gt;new&lt;/span&gt; MemTable(impl-&amp;gt;&lt;span&gt;internal_comparator_);
      impl&lt;/span&gt;-&amp;gt;mem_-&amp;gt;&lt;span&gt;Ref();
    }
  }
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s.ok() &amp;amp;&amp;amp;&lt;span&gt; save_manifest) {
    edit.SetPrevLogNumber(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; No older logs needed after recovery.&lt;/span&gt;
    edit.SetLogNumber(impl-&amp;gt;&lt;span&gt;logfile_number_);
    s &lt;/span&gt;= impl-&amp;gt;versions_-&amp;gt;LogAndApply(&amp;amp;edit, &amp;amp;impl-&amp;gt;mutex_); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加VersionEdit,初始化时会将现在的VersionSet的状态写入新的manifest文件，并更新Current文件&lt;/span&gt;
&lt;span&gt;  }
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
    impl&lt;/span&gt;-&amp;gt;DeleteObsoleteFiles(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清理无用文件&lt;/span&gt;
    impl-&amp;gt;MaybeScheduleCompaction(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有写入就有可能要compact&lt;/span&gt;
&lt;span&gt;  }
  impl&lt;/span&gt;-&amp;gt;mutex_.Unlock(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化完毕&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (s.ok()) {
    assert(impl&lt;/span&gt;-&amp;gt;mem_ !=&lt;span&gt; NULL);
    &lt;/span&gt;*dbptr =&lt;span&gt; impl;
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; impl;
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考文献：&lt;/p&gt;
&lt;p&gt;1.https://zhuanlan.zhihu.com/jimderestaurant?topic=LevelDB&lt;/p&gt;
&lt;p&gt;2.https://www.zhihu.com/question/24301047&lt;/p&gt;
&lt;p&gt;3.https://www.zhihu.com/question/49039919&lt;/p&gt;
&lt;p&gt;4.http://blog.csdn.net/joeyon1985/article/details/47154249&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 12:06:00 +0000</pubDate>
<dc:creator>雪球球</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xueqiuqiu/p/8289046.html</dc:identifier>
</item>
</channel>
</rss>