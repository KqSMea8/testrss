<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Java项目使用oh-my-email发送邮件 - jimisun</title>
<link>http://www.cnblogs.com/jimisun/p/9850340.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimisun/p/9850340.html</guid>
<description>&lt;p&gt;本文使用Github开源项目oh-my-email进行测试邮件发送，并未进行更为深度的测试，如果想要快速使用，的确是一个很好的邮件发送组件。https://github.com/biezhi/oh-my-email&lt;/p&gt;
&lt;h3 id=&quot;oh-my-email仓库地址&quot;&gt;oh-my-email仓库地址&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.biezhi&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;oh-my-email&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置oh-my-email&quot;&gt;配置oh-my-email&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    // 配置一次即可，可以配置为静态方法
    OhMyEmail.config(SMTP_QQ(false), &quot;xxxx@qq.com&quot;, &quot;your@password&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;发送email&quot;&gt;发送Email&lt;/h3&gt;
&lt;p&gt;测试发送text邮件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Test
public void testSendText() throws MessagingException {
    OhMyEmail.subject(&quot;这是一封测试TEXT邮件&quot;)
            .from(&quot;小姐姐的邮箱&quot;)
            .to(&quot;xxxx@gmail.com&quot;)
            .text(&quot;信件内容&quot;)
            .send();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试发送html邮件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Test
public void testSendHtml() throws MessagingException {
    OhMyEmail.subject(&quot;这是一封测试HTML邮件&quot;)
            .from(&quot;小姐姐的邮箱&quot;)
            .to(&quot;xxxx@gmail.com&quot;)
            .html(&quot;&amp;lt;h1 font=red&amp;gt;信件内容&amp;lt;/h1&amp;gt;&quot;)
            .send();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试发送附件邮件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Test
public void testSendHtml() throws MessagingException {
    OhMyEmail.subject(&quot;这是一封测试HTML邮件&quot;)
            .from(&quot;小姐姐的邮箱&quot;)
            .to(&quot;xxxx@gmail.com&quot;)
            .html(&quot;&amp;lt;h1 font=red&amp;gt;信件内容&amp;lt;/h1&amp;gt;&quot;)
            .send();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试发送网络资源附件邮件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Test
public void testSendAttachURL() throws MessagingException {
    try {
        OhMyEmail.subject(&quot;这是一封测试网络资源作为附件的邮件&quot;)
                .from(&quot;小姐姐的邮箱&quot;)
                .to(&quot;xxxx@gmail.com&quot;)
                .html(&quot;&amp;lt;h1 font=red&amp;gt;信件内容&amp;lt;/h1&amp;gt;&quot;)
                .attachURL(new URL(&quot;https://avatars1.githubusercontent.com/u/2784452?s=40&amp;amp;v=4&quot;), &quot;测试图片.jpeg&quot;)
                .send();
    } catch (MalformedURLException e) {
        e.printStackTrace();
    }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 25 Oct 2018 07:50:00 +0000</pubDate>
<dc:creator>jimisun</dc:creator>
<og:description>使用github开源项目oh-my-email测试邮件发送。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimisun/p/9850340.html</dc:identifier>
</item>
<item>
<title>Java8虚拟机内存模型 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/9850300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/9850300.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.  Java虚拟机运行时数据区&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在JDK1.8之前，JVM运行时数据区分为堆、虚拟机栈、本地方法栈、方法区、程序计数器。如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201810/874963-20181025141841187-2032670242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;虚拟机栈&lt;/strong&gt;：线程私有，随线程创建而创建。栈里面是一个一个“栈帧”，每个栈帧对应一次方法调用。栈帧中存放了局部变量表（基本数据类型变量和对象引用）、操作数栈、方法出口等信息。当栈调用深度大于JVM所允许的范围，会抛出StackOverflowError的错误。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;本地方法栈&lt;/strong&gt;：线程私有，这部分主要与虚拟机用到的Native方法相关，一般情况下，并不需要关心这部分的内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;：也叫PC寄存器，JVM支持多个线程同时运行，每个线程都有自己的程序计数器。倘若当前执行的是 JVM 的方法，则该寄存器中保存当前执行指令的地址；倘若执行的是native方法，则PC寄存器中为空。&lt;span&gt;（PS：线程执行过程中并不都是一口气执行完，有可能在一个CPU时钟周期内没有执行完，由于时间片用完了，所以不得不暂停执行，当下一次获得CPU资源时，通过程序计数器就知道该从什么地方开始执行）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法区&lt;/strong&gt;：方法区存放类的信息（包括类的字节码，类的结构）、常量、静态变量等。字符串常量池就是在方法区中。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的是与Java堆区分开来。很多人都更愿意把方法区称为“永久代”（Permanent Generation）。从jdk1.7已经开始准备“去永久代”的规划，jdk1.7的HotSpot中，已经把原本放在方法区中的静态变量、字符串常量池等移到堆内存中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;堆&lt;/strong&gt;：堆中存放的是数组&lt;span&gt;（PS：数组也是对象）&lt;/span&gt;和对象。当申请不到空间时会抛出OutOfMemoryError。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.  PermGen（永久代）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“方法区”是JVM的规范，而“永久代”是方法区的一种实现，并且只有HotSpot才有“PermGen space”，而对于其他类型的虚拟机并没有“PermGen space”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在JDK1.8中，HotSpot已经没有“PermGen space”这个区间了，取而代之是Metaspace（元空间）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.  Metaspace（元空间）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在JDK1.8中，永久代已经不存在，存储的类信息、编译后的代码数据等已经移动到了MetaSpace（元空间）中，元空间并没有处于堆内存上，而是直接占用的本地内存（NativeMemory）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;元空间的本质和永久代类似，都是对JVM规范中方法区的实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过元空间与永久代之间最大的区别在于：&lt;strong&gt;元空间并不在虚拟机中，而是使用本地内存&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;元空间的大小仅受本地内存限制，可以通过以下参数来指定元空间大小：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:MaxMetaspaceSize，最大空间，默认是没有限制的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;4.  堆内存划分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在JDK1.7以及其前期的JDK版本中，堆内存通常被分为三块区域：Young Generation、Old Generation、Permanent Generation for VM Matedata&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201810/874963-20181025151130922-900417333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在JDK1.8中把存放元数据中的永久内存从堆内存中移到了本地内存中，JDK1.8中JVM堆内存结构就变成了如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201810/874963-20181025151614705-952116296.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.  堆统计信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/874963/201810/874963-20181025153851536-1480925626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.  其它相关&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9561375.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;利用jmap和MAT等工具查看JVM运行时堆内存&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7.  参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/qq_31337311/article/details/78799262&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://blog.csdn.net/qq_31337311/article/details/78799262&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/paddix/p/5309550.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.cnblogs.com/paddix/p/5309550.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/zwrlj527/article/details/79399715&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://blog.csdn.net/zwrlj527/article/details/79399715&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 07:46:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<og:description>1. Java虚拟机运行时数据区 在JDK1.8之前，JVM运行时数据区分为堆、虚拟机栈、本地方法栈、方法区、程序计数器。如下图所示： 虚拟机栈：线程私有，随线程创建而创建。栈里面是一个一个“栈帧”，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/9850300.html</dc:identifier>
</item>
<item>
<title>Visual Studio 2017中使用Libman管理客户端库 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/9850261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/9850261.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154132293-245033437.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;微软在Visual Studio 2017 15.8版本中内嵌了一个新的工具Library Manager。&lt;/p&gt;
&lt;p&gt;Library Manager(简称Libman)是一个客户端库管理工具， 使用它可以很容易的管理项目中使用的客户端js库, css库等，Libman相当于一个针对客户端库的Nuget，而且Libman并不是指针对.NET项目的，非.NET项目也可以使用。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意： 这个工具暂时只是一个实验阶段的工具。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们来通过一个小例子演示一下如何使用Libman&lt;/p&gt;
&lt;h2 id=&quot;添加项目&quot;&gt;添加项目&lt;/h2&gt;
&lt;p&gt;为了体现Libman并不只针对.NET项目，我们创建一个空文件夹&lt;code&gt;Code&lt;/code&gt;, 并在其中创建一个名为&lt;code&gt;libs&lt;/code&gt;的子目录, 并使用Visual Studio 2017以Website的方式打开它&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154010287-1301511645.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以右键点击code站点, 选择Manage Client-Side Library&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154016342-1506047280.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击之后，&lt;code&gt;code&lt;/code&gt;目录中就会生成一个&lt;code&gt;libman.json&lt;/code&gt;文件, &lt;code&gt;libman.json&lt;/code&gt;是Libman的配置文件，其默认内容如下&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;version&quot;: &quot;1.0&quot;,
  &quot;defaultProvider&quot;: &quot;cdnjs&quot;,
  &quot;libraries&quot;: []
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;libman.json&lt;/code&gt;中的配置项&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;defaultProvider&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个参数指定了默认使用客户端库的来源, Libman提供了3种可选的来源。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;cdnjs&lt;/code&gt; - 默认来源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem&lt;/code&gt; - 来自本地文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpkg&lt;/code&gt; - 一个全球cdn&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;defaultDestination&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;客户端库的默认存储位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;libraries&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;客户端库列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;添加jquery-3.3.1&quot;&gt;添加jQuery 3.3.1&lt;/h2&gt;
&lt;p&gt;下面我们修改&lt;code&gt;libraries&lt;/code&gt;节点中，添加对jquery 3.3.1的引用&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
  &quot;version&quot;: &quot;1.0&quot;,
  &quot;defaultProvider&quot;: &quot;cdnjs&quot;,
  &quot;libraries&quot;: [
    {
      &quot;library&quot;: &quot;jquery@3.3.1&quot;,
      &quot;destination&quot;: &quot;libs/jQuery_3.3.1&quot;,
      &quot;provider&quot;: &quot;cdnjs&quot;
    }
  ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;library&lt;/code&gt; - 客户端库的名称, 格式是“包名@版本号”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt; - 客户端库在当前项目中的存储位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider&lt;/code&gt; - 客户端库的来源&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里如果你不是粘贴代码话，手动输入会出现代码提示，Visual Studio会根据你的输入匹配最接近的包名并列出所有可用的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154025300-912146138.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;手动恢复客户端库&quot;&gt;手动恢复客户端库&lt;/h2&gt;
&lt;p&gt;修改完成后，我们右键点击libman.json， 选择Restore Client-Side Libraries&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154032411-31391999.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们所需的客户端库就自动下载并导入到项目指定目录中了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154037420-1123465693.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;build时自动恢复客户端库&quot;&gt;Build时自动恢复客户端库&lt;/h2&gt;
&lt;p&gt;除了手动恢复客户端库，Visual Studio还提供了一个Enable Restore Client-Side Libraries on Build的选项，即项目Build时自动恢复所需的客户端库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154044823-1279220156.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择该项之后，Visual Studio会弹出一下提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201810/65831-20181025154051851-492950468.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击确认之后，项目中会出现一个package.json, 里面添加了对&lt;code&gt;Microsoft.Web.LibraryManager.Build&lt;/code&gt;库的引用&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;packages&amp;gt;
  &amp;lt;package id=&quot;Microsoft.Web.LibraryManager.Build&quot; version=&quot;1.0.163&quot; targetFramework=&quot;net40&quot; /&amp;gt;
&amp;lt;/packages&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果当前是一个.NET项目，这个引用会出现在csproj文件中&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&amp;gt;  
  
&amp;lt;PropertyGroup&amp;gt;  
   &amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;  
&amp;lt;/PropertyGroup&amp;gt;  
  
&amp;lt;ItemGroup&amp;gt;  
   &amp;lt;PackageReference Include=&quot;Microsoft.AspNetCore.App&quot; /&amp;gt;  
   &amp;lt;PackageReference Include=&quot;Microsoft.Web.LibraryManager.Build&quot; Version=&quot;1.0.163&quot; /&amp;gt;  
&amp;lt;/ItemGroup&amp;gt;  
  
&amp;lt;/Project&amp;gt;  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Libman是对Visual Studio很好的补充(之前大部分都是使用bower等类似组件来管理), 它可以帮助开发人员管理客户端库，避免了开发人员手动下载并引入客户端库造成混乱，有兴趣的同学可以尝试一下。&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 07:42:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>什么是Libman 微软在Visual Studio 2017 15.8版本中内嵌了一个新的工具Library Manager。 Library Manager(简称Libman)是一个客户端库管理工</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/9850261.html</dc:identifier>
</item>
<item>
<title>微信小程序开发的基本流程 - jackson影琪</title>
<link>http://www.cnblogs.com/jackson-zhangjiang/p/9843696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jackson-zhangjiang/p/9843696.html</guid>
<description>&lt;h2&gt;一,微信小程序简介&lt;/h2&gt;
&lt;p&gt;1,微信小程序简称小程序，张小龙在微信公开课 Pro 上发布的小程序正式上线，时间是2017年1月9日。&lt;/p&gt;
&lt;p&gt;2,微信小程序这个词可以分解为“微信”和“小程序”两部分&lt;/p&gt;
&lt;p&gt;(1),其中“微信”可以理解为“微信中的”，指的是小程序的执行环境；当然微信在提供执行环境的同时也延长了用户使用微信的时间。&lt;/p&gt;
&lt;p&gt;(2),“小程序”是说它首先是程序，然后具备轻便的特征。小程序并不像其他应用那样，它不需要安装，而是通过扫描二维码等打开后直接执行；用完以后也不需要卸载。这就是所谓用完即走的原则。&lt;/p&gt;
&lt;p&gt;3,微信小程序，很多类似形态的应用都采用类似的架构：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用 JSON 技术来表现应用的配置信息。包含应用的基本信息，页面配置和路由，应用全体的信息等。&lt;/li&gt;
&lt;li&gt;使用经过定制 CSS+XML 技术来实现视图层的描述。画面元素，例如列表、按钮、文本框、选择框等都通过 XML 语言来描述，遵从 XML 语法，对于页面的共同风格，使用 CSS 进行定义。&lt;/li&gt;
&lt;li&gt;使用 JavaScript 语言来实现逻辑层结构。包括用户操作的处理，系统 API 的调用等。&lt;/li&gt;
&lt;li&gt;架构在视图层和逻辑层之间提供数据和事件传输功能，从而尽量减少难度。由于类似应有都属于轻应用，所以提供的功能都比较单一。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4,JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。它基于 ECMAScript（W3C 制定的 JavaScript 规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。&lt;/p&gt;
&lt;p&gt;5,XML（Extensible Markup Language），中文名为可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。&lt;/p&gt;
&lt;p&gt;在电子计算机中，标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种的信息，比如文章等。它可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。它非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。是 Internet 环境中跨平台的、依赖于内容的技术，也是当今处理分布式结构信息的有效工具。早在1998年，W3C 就发布了 XML1.0 规范，使用它来简化 Internet 的文档信息传输。&lt;/p&gt;
&lt;p&gt;6,CSS层叠样式表（英文全称：Cascading Style Sheets）是一种用来表现 HTML 或 XML 等文件样式的计算机语言。CSS 不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。&lt;/p&gt;
&lt;p&gt;7,JavaScript 一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML 网页上使用，用来给 HTML 网页增加动态功能。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二,注册微信小程序&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在创建自己的微信小程序之前,首先需要&lt;a href=&quot;https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;amp;lang=zh_CN&amp;amp;token=&quot; target=&quot;_blank&quot;&gt;注册小程序账号&lt;/a&gt;,有如下账号类型：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024152938958-219802348.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;具体的注册流程,可以参考官方的&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/&quot; target=&quot;_blank&quot;&gt;简易教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024153248919-1170205929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三,安装工具,创建项目&lt;/h2&gt;
&lt;p&gt;第一步：下载微信小程序开发者工具并安装，下载路径：&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进到下载界面后，根据自己的操作系统选择相应的链接进行下载，下载完成后进行安装。&lt;/p&gt;
&lt;p&gt;第二步：安装登录工具&lt;/p&gt;
&lt;p&gt;开发者工具安装完成后我们就可以将其打开，初次打开会需要用微信扫码登录，如下图，用手机微信扫一扫后确认登录就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024153527807-1416772009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三步：选择一个项目类型&lt;/p&gt;
&lt;p&gt;登录成功后，如果是第一次使用该工具会弹出选择项目类型的窗口，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024153609244-1841019093.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第四步：创建一个项目&lt;/p&gt;
&lt;p&gt;选择项目类型成功后，会弹出创建项目的窗口，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024153746804-334333681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​ 在创建过程中，如果选择的本地文件夹是个空文件夹会出来一个勾选项“建立云开发快速启动模版”，为方便初学者了解微信小程序的基本代码结构，请勾选此项，勾选后，开发者工具会帮助我们在开发目录里生成一个简单的 demo，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024153955011-819401752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;四,项目代码结构说明与开发&lt;/h2&gt;
&lt;h3&gt;4.1,项目代码结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024154147243-949864635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击开发者工具上侧导航的“编辑器”，我们可以看到这个项目，已经初始化并包含了一些简单的代码文件。最关键也是必不可少的，是 app.js、app.json、app.wxss 这三个。其中，&lt;code&gt;.js&lt;/code&gt;后缀的是脚本文件，&lt;code&gt;.json&lt;/code&gt;后缀的文件是配置文件，&lt;code&gt;.wxss&lt;/code&gt;后缀的是样式表文件。微信小程序会读取这些文件，并生成小程序实例。&lt;/p&gt;
&lt;p&gt;下面我们简单了解这三个文件的功能，方便修改以及从头开发自己的微信小程序。&lt;/p&gt;
&lt;p&gt;​ 1、app.js是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。调用框架提供的丰富的 API，如本例的同步存储及同步读取本地数据。&lt;/p&gt;
&lt;p&gt;2、​ app.json 是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。&lt;/p&gt;
&lt;p&gt;3、app.wxss 是整个小程序的公共样式表。我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则。&lt;/p&gt;
&lt;p&gt;　　我们注意到，在实例程序的代码中还有2个文件夹，一个是pages,一个是style,其中style是放通用样式的一个文件夹，pages是存放所有页面的文件夹。我们着重讲一下这个pages.&lt;/p&gt;
&lt;h3&gt;4.2,小程序页面文件构成&lt;/h3&gt;
&lt;p&gt;　在这个示例中，我们有七个页面，index 页面，即欢迎页，他们都在 pages 目录下。微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页。&lt;/p&gt;
&lt;p&gt; 每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。&lt;code&gt;.js&lt;/code&gt;后缀的文件是脚本文件，&lt;code&gt;.json&lt;/code&gt;后缀的文件是配置文件，&lt;code&gt;.wxss&lt;/code&gt;后缀的是样式表文件，&lt;code&gt;.wxml&lt;/code&gt;后缀的文件是页面结构文件。&lt;/p&gt;
&lt;p&gt;​ index.wxml 是页面的结构文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;index.wxml&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用户 openid &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;userinfo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;       &lt;span&gt;open-type&lt;/span&gt;&lt;span&gt;=&quot;getUserInfo&quot;&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;      bindgetuserinfo&lt;/span&gt;&lt;span&gt;=&quot;onGetUserInfo&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;      class&lt;/span&gt;&lt;span&gt;=&quot;userinfo-avatar&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;      style&lt;/span&gt;&lt;span&gt;=&quot;background-image: url({{avatarUrl}})&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson影琪&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;text-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 本例中使用了&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html?t=1474644083132&quot;&gt;&lt;code&gt;&amp;lt;view/&amp;gt;&lt;/code&gt;&lt;/a&gt;、&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/component/image.html?t=1474644083132&quot;&gt;&lt;code&gt;&amp;lt;button/&amp;gt;&lt;/code&gt;&lt;/a&gt;、&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/component/text.html?t=1474644083132&quot;&gt;&lt;code&gt;&amp;lt;text/&amp;gt;&lt;/code&gt;&lt;/a&gt;来搭建页面结构，绑定数据和交互处理函数。&lt;/p&gt;
&lt;p&gt;​ index.js 是页面的脚本文件，在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;index.js&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; const app =&lt;span&gt; getApp()
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;Page({
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     avatarUrl: './user-unlogin.png'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    userInfo: {},
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     logged: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     takeSession: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     requestResult: ''
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;   onLoad: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;wx.cloud) {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;      wx.redirectTo({
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         url: '../chooseLib/chooseLib'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;      })
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取用户信息&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    wx.getSetting({
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;       success: res =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (res.authSetting['scope.userInfo'&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;          wx.getUserInfo({
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             success: res =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;               &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;                avatarUrl: res.userInfo.avatarUrl,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;                userInfo: res.userInfo
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;              })
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;          })
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt;   onGetUserInfo: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;.logged &amp;amp;&amp;amp;&lt;span&gt; e.detail.userInfo) {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         logged: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        avatarUrl: e.detail.userInfo.avatarUrl,
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        userInfo: e.detail.userInfo
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;      })
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;   onGetOpenid: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用云函数&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;    wx.cloud.callFunction({
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;       name: 'login'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;      data: {},
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;       success: res =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         console.log('[云函数] [login] user openid: '&lt;span&gt;, res.result.openid)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         app.globalData.openid =&lt;span&gt; res.result.openid
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        wx.navigateTo({
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;           url: '../userConsole/userConsole'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;       fail: err =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         console.error('[云函数] [login] 调用失败'&lt;span&gt;, err)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        wx.navigateTo({
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;           url: '../deployFunctions/deployFunctions'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传图片&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;   doUpload: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选择图片&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    wx.chooseImage({
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;       count: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;       sizeType: ['compressed'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;       sourceType: ['album', 'camera'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;       success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        wx.showLoading({
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;           title: '上传中'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;         const filePath = res.tempFilePaths[0&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传图片&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         const cloudPath = 'my-image' + filePath.match(/\.[^.]+?$/)[0&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;        wx.cloud.uploadFile({
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;          cloudPath,
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;          filePath,
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;           success: res =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             console.log('[上传文件] 成功：'&lt;span&gt;, res)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;             app.globalData.fileID =&lt;span&gt; res.fileID
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             app.globalData.cloudPath =&lt;span&gt; cloudPath
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             app.globalData.imagePath =&lt;span&gt; filePath
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            wx.navigateTo({
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;               url: '../storageConsole/storageConsole'
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;          },
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;           fail: e =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;             console.error('[上传文件] 失败：'&lt;span&gt;, e)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            wx.showToast({
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;               icon: 'none'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;               title: '上传失败'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;          },
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;           complete: () =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            wx.hideLoading()
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;       fail: e =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        console.error(e)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.wxss 是页面的样式表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*index.wxss*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;page &lt;/span&gt;{
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;  background&lt;/span&gt;:&lt;span&gt; #f6f6f6&lt;/span&gt;;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;  flex-direction&lt;/span&gt;:&lt;span&gt; column&lt;/span&gt;;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;  justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;  8&lt;/span&gt; }
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;.userinfo, .uploader, .tunnel &lt;/span&gt;{
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;  margin-top&lt;/span&gt;:&lt;span&gt; 40rpx&lt;/span&gt;;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 140rpx&lt;/span&gt;;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;  background&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;  border&lt;/span&gt;:&lt;span&gt; 1px solid rgba(0, 0, 0, 0.1)&lt;/span&gt;;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;  border-left&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  border-right&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;  flex-direction&lt;/span&gt;:&lt;span&gt; row&lt;/span&gt;;
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;  align-items&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;  transition&lt;/span&gt;:&lt;span&gt; all 300ms ease&lt;/span&gt;;
&lt;span&gt; 21&lt;/span&gt; }
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;.userinfo-avatar &lt;/span&gt;{
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 100rpx&lt;/span&gt;;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 100rpx&lt;/span&gt;;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;  margin&lt;/span&gt;:&lt;span&gt; 20rpx&lt;/span&gt;;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;  border-radius&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;  background-size&lt;/span&gt;:&lt;span&gt; cover&lt;/span&gt;;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;  background-color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;
&lt;span&gt; 30&lt;/span&gt; }
&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;.userinfo-avatar:after &lt;/span&gt;{
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;  border&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 34&lt;/span&gt; }
&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;.userinfo-nickname &lt;/span&gt;{
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;  font-size&lt;/span&gt;:&lt;span&gt; 32rpx&lt;/span&gt;;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;  color&lt;/span&gt;:&lt;span&gt; #007aff&lt;/span&gt;;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;  background-color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;  background-size&lt;/span&gt;:&lt;span&gt; cover&lt;/span&gt;;
&lt;span&gt; 41&lt;/span&gt; }
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;.userinfo-nickname::after &lt;/span&gt;{
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;  border&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 45&lt;/span&gt; }
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;.uploader, .tunnel &lt;/span&gt;{
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;  padding&lt;/span&gt;:&lt;span&gt; 0 0 0 40rpx&lt;/span&gt;;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;  flex-direction&lt;/span&gt;:&lt;span&gt; column&lt;/span&gt;;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;  align-items&lt;/span&gt;:&lt;span&gt; flex-start&lt;/span&gt;;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;  box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt; 53&lt;/span&gt; }
&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;.uploader-text, .tunnel-text &lt;/span&gt;{
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;  line-height&lt;/span&gt;:&lt;span&gt; 52px&lt;/span&gt;;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;  font-size&lt;/span&gt;:&lt;span&gt; 34rpx&lt;/span&gt;;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;  color&lt;/span&gt;:&lt;span&gt; #007aff&lt;/span&gt;;
&lt;span&gt; 60&lt;/span&gt; }
&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;.uploader-container &lt;/span&gt;{
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 400rpx&lt;/span&gt;;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;  padding&lt;/span&gt;:&lt;span&gt; 20rpx 20rpx 20rpx 0&lt;/span&gt;;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;  align-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;  justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;  box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;  border-top&lt;/span&gt;:&lt;span&gt; 1px solid rgba(0, 0, 0, 0.1)&lt;/span&gt;;
&lt;span&gt; 71&lt;/span&gt; }
&lt;span&gt; 72&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;.uploader-image &lt;/span&gt;{
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 360rpx&lt;/span&gt;;
&lt;span&gt; 76&lt;/span&gt; }
&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;.tunnel &lt;/span&gt;{
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;  padding&lt;/span&gt;:&lt;span&gt; 0 0 0 40rpx&lt;/span&gt;;
&lt;span&gt; 80&lt;/span&gt; }
&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;.tunnel-text &lt;/span&gt;{
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;  color&lt;/span&gt;:&lt;span&gt; #222&lt;/span&gt;;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;  flex-direction&lt;/span&gt;:&lt;span&gt; row&lt;/span&gt;;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;  align-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;  justify-content&lt;/span&gt;:&lt;span&gt; space-between&lt;/span&gt;;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;  box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;  border-top&lt;/span&gt;:&lt;span&gt; 1px solid rgba(0, 0, 0, 0.1)&lt;/span&gt;;
&lt;span&gt; 91&lt;/span&gt; }
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;.tunnel-text:first-child &lt;/span&gt;{
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;  border-top&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 95&lt;/span&gt; }
&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;.tunnel-switch &lt;/span&gt;{
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;  right&lt;/span&gt;:&lt;span&gt; 20rpx&lt;/span&gt;;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;  top&lt;/span&gt;:&lt;span&gt; -2rpx&lt;/span&gt;;
&lt;span&gt;101&lt;/span&gt; }
&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;.disable &lt;/span&gt;{
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;  color&lt;/span&gt;:&lt;span&gt; #888&lt;/span&gt;;
&lt;span&gt;105&lt;/span&gt; }
&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;.service &lt;/span&gt;{
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;  right&lt;/span&gt;:&lt;span&gt; 40rpx&lt;/span&gt;;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;  bottom&lt;/span&gt;:&lt;span&gt; 40rpx&lt;/span&gt;;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 140rpx&lt;/span&gt;;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 140rpx&lt;/span&gt;;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;  border-radius&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;  background&lt;/span&gt;:&lt;span&gt; linear-gradient(#007aff, #0063ce)&lt;/span&gt;;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;  box-shadow&lt;/span&gt;:&lt;span&gt; 0 5px 10px rgba(0, 0, 0, 0.3)&lt;/span&gt;;
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;  align-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;  justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;  transition&lt;/span&gt;:&lt;span&gt; all 300ms ease&lt;/span&gt;;
&lt;span&gt;120&lt;/span&gt; }
&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;.service-button &lt;/span&gt;{
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;  top&lt;/span&gt;:&lt;span&gt; 40rpx&lt;/span&gt;;
&lt;span&gt;125&lt;/span&gt; }
&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;.service:active &lt;/span&gt;{
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;  box-shadow&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt;129&lt;/span&gt; }
&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;.request-text &lt;/span&gt;{
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;  padding&lt;/span&gt;:&lt;span&gt; 20rpx 0&lt;/span&gt;;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;  font-size&lt;/span&gt;:&lt;span&gt; 24rpx&lt;/span&gt;;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;  line-height&lt;/span&gt;:&lt;span&gt; 36rpx&lt;/span&gt;;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;  word-break&lt;/span&gt;:&lt;span&gt; break-all&lt;/span&gt;;
&lt;span&gt;136&lt;/span&gt; }
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;.text-title&lt;/span&gt;{
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;margin-top&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt;139&lt;/span&gt; }
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;.text-title text&lt;/span&gt;{
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;  font-size&lt;/span&gt;:&lt;span&gt; 96rpx&lt;/span&gt;;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;  font-family&lt;/span&gt;:&lt;span&gt; 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif&lt;/span&gt;;
&lt;span&gt;143&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面的样式表是非必要的。当有页面样式表时，页面的样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。如果不指定页面的样式表，也可以在页面的结构文件中直接使用 app.wxss 中指定的样式规则。&lt;/p&gt;
&lt;p&gt;​ index.json 是页面的配置文件：&lt;/p&gt;
&lt;p&gt;​ 页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json 中的默认配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; {
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  &quot;pages&quot;&lt;/span&gt;:&lt;span&gt; [
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;pages/index/index&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;pages/userConsole/userConsole&quot;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    &quot;pages/storageConsole/storageConsole&quot;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    &quot;pages/databaseGuide/databaseGuide&quot;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    &quot;pages/addFunction/addFunction&quot;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    &quot;pages/deployFunctions/deployFunctions&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    &quot;pages/chooseLib/chooseLib&quot;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  ],
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  &quot;window&quot;: {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    &quot;backgroundColor&quot;: &quot;#F6F6F6&quot;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    &quot;backgroundTextStyle&quot;: &quot;light&quot;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    &quot;navigationBarBackgroundColor&quot;: &quot;#F6F6F6&quot;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    &quot;navigationBarTitleText&quot;: &quot;jackson影琪&quot;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    &quot;navigationBarTextStyle&quot;: &quot;black&quot;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   }
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024162047704-1159291775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;手机预览&lt;/p&gt;
&lt;p&gt;​ 开发者工具上侧菜单栏，点击&quot;预览&quot;，扫码后即可在微信客户端中体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024161418718-1606060568.jpg&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1040068/201810/1040068-20181024161913433-1606460661.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 07:41:00 +0000</pubDate>
<dc:creator>jackson影琪</dc:creator>
<og:description>微信小程序开发的基本流程 一,微信小程序简介 1,微信小程序简称小程序，张小龙在微信公开课 Pro 上发布的小程序正式上线，时间是2017年1月9日。 2,微信小程序这个词可以分解为“微信”和“小程序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jackson-zhangjiang/p/9843696.html</dc:identifier>
</item>
<item>
<title>从壹开始微服务 [ DDD ] 之三 ║ 简单说说：领域、子域、限界上下文 - 老张的哲学</title>
<link>http://www.cnblogs.com/laozhang-is-phi/p/9845573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhang-is-phi/p/9845573.html</guid>
<description>&lt;p&gt;哈喽大家好，DDD领域驱动设计系列又开始了，前天周二的那篇入门文章中，也收到了一定的效果（写小说的除外），同时我也是倍感鸭梨，怎么说呢，DDD领域驱动设计已经有十年历史了，甚至更久，但是包括我在内的一批技术人员还是对其不是很明白，这几天我也是日思夜想，怎样才能说的明白，怎样才能把这个高高在上的思想落在实践上，可惜的是国内栗子比较少，国外文章比较少，只能硬啃了，所以更需要大家一起来讨论，这里要说一下，是一起讨论推动，而不是内心去拒绝，而一直和多层架构做对比，这样不仅不利于学习，也无法带动我的积极性，所以，这里恳请大家，多多评论，多多交流，比较我一个人很难扛得动这个DDD的大旗。&lt;/p&gt;
&lt;p&gt;好啦，言归正传，上次咱们说到了《&lt;a id=&quot;post_title_link_9832684&quot; href=&quot;https://www.cnblogs.com/laozhang-is-phi/p/9832684.html&quot;&gt;[ DDD ] 之二 ║ DDD入门 &amp;amp; 项目结构粗搭建&lt;/a&gt;》，其中主要说明了为什么使用DDD，以及如何简单的搭建一个基于领域的粗略层，颗粒度还是项目级别，还没有继续往下深究，今天呢，咱们就往下慢慢走，说一说整个项目下，是如何实现领域设计的。&lt;/p&gt;
&lt;p&gt;这里先给大家提一个问题，如果一个新的项目，比如一个小的问答系统交给你的手里，PM 刚刚和你简单的讨论了下需求，下一步你打算做些什么？&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;1、根据需求，立刻准备设计数据库，建表，脑中模拟场景；&lt;/p&gt;
&lt;p&gt;2、根据需求，立刻建立实体类（也就是model层），然后CodeFirst 生成数据库；&lt;/p&gt;
&lt;p&gt;3、找寻该领域专家（做过或者懂得类似产品的人），设计该问答领域下，有哪些子领域，制作限界上下文；&lt;/p&gt;
&lt;p&gt;4、啥都没有，直接网上找开源项目，下载下来看看；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老张说：这里没有正确与否的比较，只是一个习惯和优劣的分析，不用太在意，如果你比较好奇，那就往下看吧。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025105603017-447676341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;1、领域的概念&lt;/h3&gt;
&lt;p&gt; 这个概念相信很多人已经很明白了，而且也听到了无数遍，这里就再简单的说两句：&lt;/p&gt;
&lt;p&gt;领域（Domain）其实就是一个组织所要做的整个事情，已经这个事情下所包含的一切内容。这是一个范围概念，而且是面向业务的（注意这里不是面试技术的，更不是面向数据库的持久化的），每个组织都有自己的人员、自己的工作业务范围和做事方式，当你为该组织开发软件的时候，你面对的就是这个组织的领域。&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;就比如之前我在一家旅游公司进行开发工作，那我所进行的开发工作就是一个旅游行业，我必须要很清晰旅游行业的其中的领域知识，而且必须能和领域专家通过通用性语言进行沟通，这样能保证我开发出来的是他们想要的，而不是我单纯的从技术上实现，在领域设计上一塌糊涂。当然我们每天也都在做这样的事情，也许你感觉很正常，那我再举个例子：&lt;/p&gt;
&lt;p&gt;我在开发其中一个目的地（旅游景点）项目的时候，这是一个领域，后来在电商系统项目中，又是一个领域，但是在电商领域中，涉及到了景点领域的一些数据，那我如果不和领域专家沟通，有时候为了贪图技术上的方便，甚至把两个领域合并成一个，虽然都不大，合并以后大小也还可以，但是这样却完全打破了领域的这个概念，这个就是完全面向技术开发的，因为领域专家看不懂我这么写到底属于什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然上边的栗子有点儿牵强，咱们再说下以后我想做的一个基于DDD的问答项目，咱们先画一个框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025113213878-2113292443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就如图所示，咱们首先定义一个边界，至于里边有什么东西，咱们接着往下看，这个很简单。&lt;/p&gt;
&lt;h3&gt;2、如何定义一个领域&lt;/h3&gt;
&lt;p&gt;这个是更简单的一个问题，在领域设计中，有两个方法：战略设计和战术设计，其实我个人感觉可以定义两步走，这两个是有先后之分的，&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;战略设计中定义了，一个领域就是一个问题空间，我们在业务中所遇到的所有的问题与挑战；&lt;/p&gt;
&lt;p&gt;在战术设计中，一个领域就算一个解决问题空间，用来解决在问题空间的所有问题；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，其实一个领域就是一个我们建立的一个解决方案，一个项目，在我们的问答项目中，整个解决方案就是一个问答领域。&lt;/p&gt;


&lt;h3&gt;1、子域 / 核心子领域 / 通用子领域&lt;/h3&gt;
&lt;p&gt;什么是子域（SubDomain）呢？这个很好理解，就是在整个领域中，我们如何对其进行拆分，然后满足我们的业务逻辑。一个子域可能是一个 dll ，一个命名空间的形式存在。&lt;/p&gt;
&lt;p&gt;我们定义好领域，并且划分好限界后，就开始考虑如何进行实现，这里大家想一想如何设计与划分，这里就说说我自己的之前的想法：&lt;/p&gt;
&lt;p&gt;在我们的问答领域设计中，我们的思路一定是有客户来 =》验证是否有发问题的权限 =》 然后发布一个问题 =》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025130150967-1995137906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这仅仅是一个发布问题的流程，也仅仅是一个顾客认证的过程，很简单，我们一般会怎么分子领域呢，可能会这么分，这个就是 &lt;strong&gt;消息发布子领域&lt;/strong&gt;，里边有我们的发布模型，用户模型，讨论模型，日历模型等等，大概就是这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025131624690-1523643430.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为我们会这么想：“用户和权限这两个模型，和我们的消息子领域有何紧密的关系，你看，发布+回复+讨论+日历（指自己新建一个日历功能，具体待定），这些模型肯定都需要用户登陆认证吧，甚至有些是需要授权的，分在一个子领域有什么不对么？”，这样的代码逻辑应该是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025141353268-125529913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果是你看到这里，首先明白了什么是子领域了吧，也知道如何划分了，但是你感觉这个划分对么？ 如果你感觉很正常，那就请往下看吧。&lt;/p&gt;

&lt;h3&gt;2、核心子领域 / 通用子领域 / 支撑子领域&lt;/h3&gt;
&lt;p&gt;我们再来分析一下，我们的问答领域中的有哪些内容，首先：肯定有消息发布子领域，这个也是上边说到的，这个毋庸置疑，一个问答系统，消息发布是肯定的（这里说明下：发布问题，回答问题，讨论问题等都属于一个消息的发布，这个应该理解），而且这个子领域是&lt;strong&gt;缺少它不可&lt;/strong&gt;的，这个就是我们的&lt;strong&gt;核心子领域&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;再来看看，还有一些其他的，比如日志记录，数据操作痕迹记录（哪个管理员修改了哪些数据），这些子领域贯穿着我们真个领域系统，&lt;strong&gt;被其他领域共用&lt;/strong&gt;，我们称之为 &lt;strong&gt;通用子领域&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;当然，我们还有一些站内的即时消息，wiki百科，通知提醒，活动跟踪，等等，这些都不是我们的核心子域，因为没有这些，我们依然可以进行问答，但是这些确是&lt;strong&gt;支撑着我们核心子域的相关功能&lt;/strong&gt;，我们就把这些命名为 &lt;strong&gt;支撑子领域&lt;/strong&gt;，这个时候你会问，这些支持子领域要不要再拆开，我个人表示没有很大的必要。&lt;/p&gt;
&lt;p&gt;最后我们再来看看我们上边的用户认证授权问题，在上边我们把他们柔和到了消息核心子域里，但是这里要说明，这两者是没有关系的：&lt;/p&gt;
&lt;p&gt;为什么没有关系呢？诚然，我们的软件是必须有用户参与的，但是我们应该将不同的用户种类区别对待，因为在不同的上下文（下边会说到）中，他们的作用和任务是不一样的，在消息核心子域中，我们关注的是角色，不管他是谁或者有什么权限，如果我们有一天把权限模型修改了，那我们的问答模型也一定要修改，你想想是不是，因为两者业务逻辑已经耦合了！&lt;/p&gt;
&lt;p&gt;这个时候我们应该明白，发布信息和“谁可以发，在什么条件下发”其实没有太大的关系，我的问答，只关心的是“有一个顾客发布了一个问题”这样就可以了，我们关心的是发布消息这个过程，而不能把用户权限涉及进来，这个时候我们应该把用户权限单拿出来一个子领域，就叫安全子领域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025145459906-1398944230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3、隔离内核&lt;/h3&gt;
&lt;p&gt;其实上边说的可能有点儿朦胧，但是我们应该都已经用到了，如果你看了我的上一个系列教程，你应该知道有一个JWT权限验证那一章节，很多人就是不很理解，是如何进行授权验证的，其实采用的就是隔离内容，以前我们写逻辑，就算直接在控制器里，判断当前用户权限，但是现在我们是通过一个中间件，判断 Token 所包含的用户Role 是否有这个权限，再进行下一步，只不过在DDD中，把这一块单拿出来形成了一个安全子领域了，这个时候你应该明白了吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除一个顾客信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        [HttpPost, ActionName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Authorize(Policy &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CanRemoveCustomerData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customer-management/remove-customer/{id:guid}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [ValidateAntiForgeryToken]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult DeleteConfirmed(Guid id)
        {
            _customerAppService.Remove(id);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!IsValidOperation()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(_customerAppService.GetById(id));

            ViewBag.Sucesso &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Customer Removed!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个时候，可能还不是很明白，为什么好好的程序要拆分，这么做的目的又是为了什么，直接在需要用到的权限的地方写业务逻辑不就行了么，这个往下看，咱们说说限界上下文。&lt;/p&gt;


&lt;h3&gt; 1、限界上下文是显示的，有语义的&lt;/h3&gt;
&lt;p&gt;限界上下文（Bounded Context）定义了每个模型的应用范围，在每个Bounded Context中确保领域模型的一致性。不同的限界上下文中，领域模型可以不用保证一致性。通常我们根据团队的组织、软件系统的每个部分的用法及物理表现（如组件划分，数据库模式）来设置模型的边界。&lt;/p&gt;
&lt;p&gt;概念还是有点儿朦胧，那就举例来说：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在电商系统中，销售子域是核心域，商品子域和物流子域为支撑子域。在这三个子域中，都要和商品打交道。如果把商品抽象为Product对象的话，按我们一般的常规思路（抛开子域的划分）来说，不管是商品销售还是发货，我们都可以共用同一个Product对象。&lt;br/&gt;但在DDD中，在商品子域和销售子域中，可以共享这个Product对象，但在物流子域，就有点大材小用。为什么呢？因为毕竟物流子域关注的是商品的发货处理和物流跟踪。针对发货流程而言，我只关心商品的数量、大小、重量等规格，而不必了解商品的价格等其他信息。所以说物流子域应该关注的是货物的发货处理而不是商品。&lt;br/&gt;那为什么我们之前的开发思路会共用同一个Product对象呢？&lt;br/&gt;答案很简单，没有进行领域的划分。把整个项目一概而论，统一建模导致的结果。&lt;br/&gt;在DDD的思想下，当划分子域之后，每个子域都对应有各自的上下文。在销售子域和商品子域所在的上下文语境中，商品就是商品，无二义性。在物流子域的上下文语境中，我们也可以说商品的发货处理，但这时的商品就特指货物了。确定了真实面目之后，我想我们也会不由自主的抽象一个新的Cargo对象来处理物流相关的业务。这也是DDD带来的好处，让我们更清晰的建模。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;2、定义限界上下文&lt;/h3&gt;
&lt;p&gt; 在我们上边的子域定义中，我们出现了三个子域，我这里同时也定义了三个限界上下文（这里说下，两者不是一对一的关系），总体来说，我们不应该按技术架构或者开发任务来创建限界上下文，应该按照语义的边界来考虑。&lt;/p&gt;
&lt;p&gt;我们的实践是，考虑产品所讲的通用语言，从中提取一些术语称之为概念对象，寻找对象之间的联系；或者从需求里提取一些动词，观察动词和对象之间的关系；我们将紧耦合的各自圈在一起，观察他们内在的联系，从而形成对应的界限上下文。形成之后，我们可以尝试用语言来描述下界限上下文的职责，看它是否清晰、准确、简洁和完整。简言之，限界上下文应该从需求出发，按领域划分。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025151926369-1028349043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3、上下文都包含哪些内容&lt;/h3&gt;
&lt;p&gt;一个限界上下文不是只有领域模型，当然这个是必不可少的，它总体来说是一个系统，一个应用程序，或者一个业务服务，它里边会有实体，值对象，领域事件（一个个方法事件组成，比如用户注册，修改密码，验证信息等等都是该上下文中的领域事件），在我们的身份和访问上下文中，是这样定义的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181025153435326-2063024321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;感觉写到这里还是没有写的很透彻，因为我们还没有涉及到代码，可能通过代码的设计会比较好。&lt;/p&gt;


&lt;p&gt; 本文主要是通过DDD领域设计的思想，来说明如何对一个项目进行细分的过程，这个再想想文章开头提出的问题，是不是稍微有些感触，只不过在没有代码的讲解下，一起总是很空洞，下次咱们直接通过基础设施层中的上下文定义，来进一步了解领域设计的思想吧。 &lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 07:40:00 +0000</pubDate>
<dc:creator>老张的哲学</dc:creator>
<og:description>前言 哈喽大家好，DDD领域驱动设计系列又开始了，前天周二的那篇入门文章中，也收到了一定的效果（写小说的除外），同时我也是倍感鸭梨，怎么说呢，DDD领域驱动设计已经有十年历史了，甚至更久，但是包括我在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laozhang-is-phi/p/9845573.html</dc:identifier>
</item>
<item>
<title>MySQL 常用函数 - 不该相遇在秋天</title>
<link>http://www.cnblogs.com/fengyumeng/p/9848954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengyumeng/p/9848954.html</guid>
<description>&lt;h3&gt;一、序言&lt;/h3&gt;
&lt;p&gt;本人博客并非教材，只会以自己的方式记一些自己觉得有必要记录的东西，请勿介意。&lt;/p&gt;
&lt;p&gt;比如本篇内容，我就觉得简洁的表格比详细的使用示例更好。&lt;/p&gt;
&lt;h3&gt;二、字符串函数&lt;/h3&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr&gt;&lt;td&gt;函数&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;CONCAT(str1,str2,.....)&lt;/td&gt;
&lt;td&gt;字符串连接，连接目标个数不限&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;INSERT(str,x,y,instr)&lt;/td&gt;
&lt;td&gt;将字符串str从第x位置开始，y个字符长的子串替换为字符串instr  &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LOWER(str)&lt;/td&gt;
&lt;td&gt;转小写&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UPPER(str)&lt;/td&gt;
&lt;td&gt;转大写&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;LEFT(str,x)&lt;/td&gt;
&lt;td&gt;返回字符串str最左边的x个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;RIGHT(str,x)&lt;/td&gt;
&lt;td&gt;返回字符串str最右边的x个字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;LPAD(str,n,pad)&lt;/td&gt;
&lt;td&gt;用字符串pad对str最左边进行填充，直到长度为n个字符长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;RPAD(str,n,pad)&lt;/td&gt;
&lt;td&gt;用字符串pad对str最右边进行填充，直到长度为n个字符长度&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;LTRIM(str)&lt;/td&gt;
&lt;td&gt;去除字符串str左边的空格&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;RTRIM(str)&lt;/td&gt;
&lt;td&gt;去除字符串str右边的空格&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;TRIM(str)&lt;/td&gt;
&lt;td&gt;去除字符串两边的空格&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;REPEAT(str,x)&lt;/td&gt;
&lt;td&gt;返回str重复x次的结果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;REPLACE(str,a,b)&lt;/td&gt;
&lt;td&gt;把字符串str中所有的a替换成b&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;STRCMP(str1,str2)&lt;/td&gt;
&lt;td&gt;比较两个字符串，大于为1 小于为-1 等于为0&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;SUBSTRING(str,x,y)&lt;/td&gt;
&lt;td&gt;返回str字符串从x开始y个长度的字符串&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;


















&lt;h3&gt;三、数值函数&lt;/h3&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;函数&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ABS(x)&lt;/td&gt;
&lt;td&gt;返回x的绝对值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;CEIL(x)&lt;/td&gt;
&lt;td&gt;返回大于x的最小整数值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;FLOOR(x)&lt;/td&gt;
&lt;td&gt;返回小于x的最大整数值&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MOD(x,y)&lt;/td&gt;
&lt;td&gt;返回x/y的模&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;RAND()&lt;/td&gt;
&lt;td&gt;返回0-1之间的随机数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ROUND(x,y)&lt;/td&gt;
&lt;td&gt;返回x的四舍五入保留y位小数的结果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;TRUNCATE(x,y)&lt;/td&gt;
&lt;td&gt;返回数字x截断为y位小数的结果&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;









&lt;h3&gt;四、时间日期函数&lt;/h3&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;函数&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;NOW()&lt;/td&gt;
&lt;td&gt;返回当前日期和时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CURDATE()&lt;/td&gt;
&lt;td&gt;返回当前日期&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CURTIME()&lt;/td&gt;
&lt;td&gt;返回当前时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UNIX_TIMESTAMP(date)&lt;/td&gt;
&lt;td&gt;返回date的时间戳&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;FROM_UNIXTIME(time)&lt;/td&gt;
&lt;td&gt;返回时间戳的date值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;WEEK(date)&lt;/td&gt;
&lt;td&gt;返回日期date为一年中的第几周&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;YEAR(date)&lt;/td&gt;
&lt;td&gt;返回日期date的年份&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HOUR(time)&lt;/td&gt;
&lt;td&gt;返回time的小时值&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MINUTE(time)&lt;/td&gt;
&lt;td&gt;返回time的分钟值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;MONTHNAME(date)&lt;/td&gt;
&lt;td&gt;返回date的月份名称 英文名&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DATE_FORMAT(date,fmt)&lt;/td&gt;
&lt;td&gt;返回按字符串fmt格式化日期date值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DATEDIFF(expr,expr2)&lt;/td&gt;
&lt;td&gt;返回起始时间和结束时间之间的天数&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;














&lt;p&gt;这个函数 DATE_FORMAT(date,fmt)  其中的fmt 可以使用的格式符如下表&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;格式符&lt;/td&gt;
&lt;td&gt;格式说明&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%S和%s&lt;/td&gt;
&lt;td&gt;两位数字形式的秒&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%i&lt;/td&gt;
&lt;td&gt;两位数字形式的分&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%H&lt;/td&gt;
&lt;td&gt;两位数字形式的小时 24小时制&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%h和%I&lt;/td&gt;
&lt;td&gt;两位数字形式的小时 12小时制&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%T&lt;/td&gt;
&lt;td&gt;24小时的时间形式 14:19:41&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;两位数字表示天&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%m&lt;/td&gt;
&lt;td&gt;两位数字表示的月份&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%Y&lt;/td&gt;
&lt;td&gt;四位数字表示的年份&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%y&lt;/td&gt;
&lt;td&gt;两位数字表示的年份&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;










&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 格式化当前时间&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt; DATE_FORMAT(NOW(),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%i:%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 2018-10-25 14:26:01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 现在到过年还有多少天&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;DATEDIFF&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2019-02-05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,NOW())
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 103&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;五、流程函数&lt;/h3&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;函数&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;IF(value,a,b)&lt;/td&gt;
&lt;td&gt;如果value是真，那么返回a，否则返回b&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;IFNULL(value1,value2)&lt;/td&gt;
&lt;td&gt;如果value1是null，那么返回value2，否则返回value1本身&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;CASE WHEN [value] THEN [result1] ... ELSE [default_value] END&lt;/td&gt;
&lt;td&gt;如果value是真，返回result1，【可以跟上多个WHEN-THEN匹配】否则返回default_value&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;CASE [value] WHEN [a1] THEN [result1] ... ELSE [default_value] END&lt;/td&gt;
&lt;td&gt;匹配value的值，如果等于a1，那么返回result1，也可以跟上多个匹配，否则default_value&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;






&lt;p&gt;示例两种case用法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;CASE&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;WHEN&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; &quot;这是9&quot; &lt;span&gt;WHEN&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; &quot;这是10&quot; &lt;span&gt;ELSE&lt;/span&gt; &quot;全错&quot; &lt;span&gt;END&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 这是10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;CASE&lt;/span&gt; &lt;span&gt;WHEN&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; &quot;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;12对&quot; &lt;span&gt;WHEN&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; &quot;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;9对&quot; &lt;span&gt;ELSE&lt;/span&gt; &quot;全错&quot; &lt;span&gt;END&lt;/span&gt; 
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 10&amp;gt;9对&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;六、其他函数&lt;/h3&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;函数&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DATABASE()&lt;/td&gt;
&lt;td&gt;返回当前数据库名&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;VERSION()&lt;/td&gt;
&lt;td&gt;返回当前数据库版本&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;USER()&lt;/td&gt;
&lt;td&gt;返回当前登录用户名&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;INET_ATON(ip)&lt;/td&gt;
&lt;td&gt;返回IP地址的数字表示&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;INET_NTOA(num)&lt;/td&gt;
&lt;td&gt;返回数字代表的Ip地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;PASSWORD(str)&lt;/td&gt;
&lt;td&gt;返回字符串str的加密版本&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MD5(str)&lt;/td&gt;
&lt;td&gt;返回字符串的MD5值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 25 Oct 2018 07:39:00 +0000</pubDate>
<dc:creator>不该相遇在秋天</dc:creator>
<og:description>一、序言 本人博客并非教材，只会以自己的方式记一些自己觉得有必要记录的东西，请勿介意。 比如本篇内容，我就觉得简洁的表格比详细的使用示例更好。 二、字符串函数 三、数值函数 四、时间日期函数 这个函数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fengyumeng/p/9848954.html</dc:identifier>
</item>
<item>
<title>商品中心中台支持系统-总体架构设计 - 无涯Ⅱ</title>
<link>http://www.cnblogs.com/wlandwl/p/goods.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wlandwl/p/goods.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wlandwl/p/goods.html#商品中心中台支持系统-总体架构设计&quot;&gt;商品中心中台支持系统-总体架构设计&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wlandwl/p/goods.html#修订记录&quot;&gt;修订记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wlandwl/p/goods.html#目录&quot;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wlandwl/p/goods.html#商品中心&quot;&gt;1、商品中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;商品中心中台支持系统-总体架构设计&quot;&gt;商品中心中台支持系统-总体架构设计&lt;/h2&gt;
&lt;h3 id=&quot;修订记录&quot;&gt;修订记录&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;header&quot;&gt;&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;章节&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;作者&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;2018-10-25&lt;/td&gt;
&lt;td&gt;V1.0&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;初始版本&lt;/td&gt;
&lt;td&gt;无涯&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;
&lt;h3 id=&quot;商品中心&quot;&gt;1、商品中心&lt;/h3&gt;
&lt;p&gt;本文讲述电商系统构建中，商品中心中台模块设计。中台概念参考阿里巴巴的中台模式，对商品专门独立为一个数据中心，集中做各个业务平台的商品信息管理。&lt;/p&gt;
&lt;h4 id=&quot;商品中心思维导图&quot;&gt;1.1、商品中心思维导图&lt;/h4&gt;
&lt;p&gt; 商品中心主要分为商品相关基础数据管理模块和商品应用数据管理模块。基础数据包括品牌模块，规格模块，属性模块和分类模块。商品应用数据包括商品基础信息管理，商品销售信息管理模块。每一个模块均有详细的模块设计文档，请参考具体模块设计文档。&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/4952ab9ba7b7baa8ab594eea2b655401&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/5999ac201f459ad683c6a701a37f1018&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;应用分组&quot;&gt;1.2、应用分组&lt;/h4&gt;
&lt;p&gt;为支持商品中心数据的管理，开发了如下应用模块用于操作人员管理商品数据。&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/36dc645fb53434f8bffcc37174b76cd1&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据库模型图&quot;&gt;1.3、数据库模型图&lt;/h4&gt;
&lt;p&gt;为搭建独立的商品中心支持系统，需设计商品中心基础数据存储表。&lt;br/&gt;本次设计中，只包括商品应用中最基础的商品基础信息管理。对于组合商品，商品营销应用，搜索应用等模块均不包括。&lt;br/&gt;&lt;strong&gt;1.品牌与规格数据管理&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/69feb3558edf06c893cecf4dc1c55182&quot;/&gt;&lt;br/&gt;&lt;strong&gt;2.属性数据管理管理&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/34b36f30cd18c4d05683b980c91d38c8&quot;/&gt;&lt;br/&gt;&lt;strong&gt;3.分类关系数据管理&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/56ae36a4125aa1b0777c77981ba5d5ea&quot;/&gt;&lt;br/&gt;&lt;strong&gt;4.商品数据管理&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://apidoc.epetbar.com/upload/c8b024fc5736babb78ce7108f9c6c56e&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;设计原则说明&quot;&gt;1.4、设计原则说明&lt;/h4&gt;
&lt;p&gt;中心数据表设计原则：&lt;br/&gt;1.基础信息字段细分独立。&lt;br/&gt;2.业务归类。&lt;br/&gt;3.不同业务数据严格做表区分。&lt;br/&gt;4.对于商品与规格，属性，分类等的关系，任何关系数据严格设置为一个关系一条记录的key-value模式。&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 07:08:00 +0000</pubDate>
<dc:creator>无涯Ⅱ</dc:creator>
<og:description>商品中心中台支持系统 总体架构设计 修订记录 |日期|版本|章节|描述|作者| | | | | | | | 2018 10 25 | V1.0 | | 初始版本 | 无涯| 目录 [TOC] 1、商品</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wlandwl/p/goods.html</dc:identifier>
</item>
<item>
<title>甘果移动老甘：移动互联网变迁中的App和小程序 - 又拍云</title>
<link>http://www.cnblogs.com/upyun/p/9849780.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/upyun/p/9849780.html</guid>
<description>&lt;p&gt;2018 年 10 月13 日，由又拍云和知晓云联合主办的 Open Talk 丨2018 小程序开发者沙龙系列活动广州站拉开帷幕，甘果移动的 CEO 路文杰（老甘）在沙龙上做了《移动互联网变迁中的 App和小程序》的分享。“2018 小程序开发者沙龙”是又拍云 Open Talk 继“2018 音视频技术沙龙”后推出的重磅活动，与大部分偏重营销、流量的小程序活动不同，本系列活动更热衷于分享小程序开发过程的种种有趣经历和有益的经验。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-15f0f4aaa7c630bc7b58e69d39050fac_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;824&quot; data-original=&quot;https://pic4.zhimg.com/v2-15f0f4aaa7c630bc7b58e69d39050fac_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-15f0f4aaa7c630bc7b58e69d39050fac_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;路文杰(老甘) 甘果移动创始人&amp;amp;CEO，珠三角技术沙龙 Techparty 主席，广州科技创业 &amp;amp; 技术社区积极推动者，在电商技术、移动互联网和团队管理方面有着丰富的经验。&lt;/p&gt;
&lt;p&gt;以下是分享内容：&lt;/p&gt;

&lt;p&gt;我主要是讲三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;除了原生 APP 之外还有什么&lt;/li&gt;
&lt;li&gt;微信小程序现状&lt;/li&gt;
&lt;li&gt;未来&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;除了原生 APP 还有什么？&lt;/h2&gt;
&lt;p&gt;目前在 Mobile Web（HTML5）方面，比较多的是公众号，前两年小程序没推出的时候数量更多，主要是一些宣传类、订餐、电商的 H5。电商类的例如有赞，早期的版本基本上全部只针对公众号，整个微信生态带动了 H5 的发展。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-acd0bc1c867457c58140b45c49cfe177_hd.jpg&quot; alt=&quot;&quot; width=&quot;740&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;740&quot; data-rawheight=&quot;220&quot; data-original=&quot;https://pic1.zhimg.com/v2-acd0bc1c867457c58140b45c49cfe177_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-acd0bc1c867457c58140b45c49cfe177_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;React Native 是用 JS 和 React JS 来写成原生类的代码，发布有 2-3 年，开始的时候大家很热爱，因为终于有一套代码是 Android 和 iOS 的平台通用的。但经过我的体验它还不如纯粹混合式的原生加 JS 体验好。React Native 做了 JS 到原生的编译，在编译过程中，兼容性上存在很多的问题，随着 iOS 和 Android 版本的升级，甚至在一些本地资源的调用方面也出现问题。前几个月 Airbnb 技术团队宣布放弃使用 React Native，所以它的处境现在有一点尴尬。小程序类包括微信小程序从技术的角度看和 Reart Native 差不多，但是微信小程序有非常好的安装量，而且微信小程序的兼容度比它要好很多。因为它要写很多原生代码，比如调用一些底层接口等，不仅要写 JS，还要写 iOS 和 Android 的代码，本来 1 个程序员搞定两个平台的事，最后发现这个东西需要 3 个程序员。&lt;/p&gt;

&lt;p&gt;阿里开源的 WeeX 和 React Native 算是异曲同工，它只是在一些 JS 的代码方式不一样。WeeX 去年加入了 Apache 的基金会，现在更新速度还行，但是很多人使用了之后发现坑也不少。WeeX 在阿里内部应用得比较多，因为电商更新的密度非常大，所以在内部用还好。现在开源之后，它和 React Native 都还在维护，但未来都是一个比较尴尬的局面，它们想从 1.0 到 2.0，但其实目前可以理解成只有 1.5 的版本，想兼容旧的东西，但又想去用一些新的方法实现，基本上会碰到很多的坑。&lt;/p&gt;

&lt;p&gt;轻应用是 Android 联盟做的，有小米、oppo 和华为等，是纯 Android 系的。它在 Android 的一些商店和平台里面有应用，但其实只是减少了一点点的工作量，显得比 App 稍轻以外，没有办法跨平台，等于最终变成 Android 的各个厂家做了一个 Android 的联盟，但是整个移动互联网 iPhone 的占有率是非常高的，目前的处境也比较尴尬。&lt;/p&gt;

&lt;p&gt;支付宝小程序已经对外正式发布了，现在基本上论生态、整个环境和“微信小程序”是比较像的，只是它毕竟是一个后来者，国内对它的需求还比较少。一些政务、支付宝强相关产品如“携程旅行”可能会做支付宝的小程序，但普通创业类的产品很少去做支付宝小程序，因为整个的支付宝偏生活类，比如去挂号、点餐、购物可能比较适合，基本上支付宝小程序和微信小程序能够站在一个比较好的位置去做，但是这一块也存在很大的变数，目前支付宝小程序的开发者很少，因为它生态都还没有形成。&lt;/p&gt;

&lt;p&gt;PWA 是由谷歌主导的，我认为 PWA 以及 HTTP/2.0 可能是未来的趋势，因为它能够真正实现在浏览器里像打开原生 App 一样打开纯 JS 纯网页的应用。它不会和微信有很多的绑定，是一个比较开放的平台，从国际化的趋势来说肯定是 PWA。国内微信在整个移动端构建了一个国中国，微信本身有很大的流量以及感染力，但是 PWA 做了一个更开放的标准，如果你要开发一个小程序你会受限制于很多的微信条款，但是从最早的传统互联网，包括 Web1.0、Web 2.0，其实更多的是一个开放的平台。所以我想是以后让更多的开发者、创业者、企业有更多的选择，PWA 至少在未来 3-4 年左右有非常可期的未来，他的标准现在在一些测试版本可以体验到。&lt;/p&gt;

&lt;h2&gt;微信小程序&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-f1fd59a5f16d30cc767863d971570009_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;447&quot; data-original=&quot;https://pic3.zhimg.com/v2-f1fd59a5f16d30cc767863d971570009_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f1fd59a5f16d30cc767863d971570009_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;微信小程序从预热到真正发布有两年左右的时间了，这两年发展非常快，小程序和小游戏都非常火，吸引了很多的投资。半年前大家拼命把原来很多 H5 或者更复杂的游戏做成了小游戏，他们的导量都还是挺好的，但发展过程还是有很多的问题。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-d6c97b6d2370588f71d96ebf7ef015ef_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;629&quot; data-original=&quot;https://pic4.zhimg.com/v2-d6c97b6d2370588f71d96ebf7ef015ef_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d6c97b6d2370588f71d96ebf7ef015ef_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ 小游戏——跳一跳&lt;/p&gt;
&lt;p&gt;现在小程序的热度基本上回归正常，小游戏还处在比较热的阶段，其实小游戏的存活机率是非常低的，一个新的平台出来想去弯道超车，抢占风口，但是如果之前积累的经验不够或者没有游戏行业的经验，想弯道超车还是比较难的。搜索整个小游戏，可以发现里面大部分是猜歌名、拼图、生肖等，国内确实有很多三、四、五线的城市的人需要一些很简单的小游戏来消遣，但这类游戏很难持续，特别现在有很多的小游戏是拿国外的游戏改一改，十几款类似的小游戏就上线了，所以小游戏总体是偏热的。&lt;/p&gt;
&lt;p&gt;很多人说小程序是”用完就走“，但怎么在微信里找到自己想要的小程序呢？如果不是常用的小程序还是挺复杂的，需要去搜索寻找。有一些小程序有线下的二维码，但是更多的小程序是纯线上的，比如通过微信群或者二维码去传播，那么你的产品或小程序如何去吸引用户呢？比如他只是要投个票，投完票就走了，很多用户都不知道投票小程序是谁做的，当然这也是小程序的优势，对用户进行非常小的干扰，但是也意味着你要提高产品的核心竞争力，才能让更多的用户把你的小程序收藏起来使用。这半年以来很多原来做移动互联网的人，开始围绕小程序做很多工具，这块最终还是要回到产品的本质。&lt;/p&gt;
&lt;p&gt;创业公司试错是可以用小程序，但是上了规模后不建议使用小程序，因为会有很多政策风险，比如牵扯到恶意的转发或者发布比较敏感的内容，随时都会被下架，微信小程序的下架门槛非常低。目前很多小程序，其实是在原有的业务基础上进行扩展，或者原来有电商平台，比如有赞原来 H5 做的非常好，做小程序版本对于他们这个体量的企业是很容易做到的，但如果你想获得更多的用户以及更大规模的时候，还是要做 H5 的或者 App 的版本。&lt;/p&gt;
&lt;p&gt;虽然现在小游戏还很热，动不动很多创业团队就拿到投资了，但是整个小游戏行业的存活以及用户在过了新鲜感之后的沉淀还是不太乐观的，所以一下子出来几百个小游戏的公司，但是这种肯定最终要回归到小游戏本身，或者小程序中本身去产生的价值。&lt;/p&gt;
&lt;p&gt;有些小程序只是来引导和跟风，像当时的 H5 有“ 2048 ”、围住神经猫等，基本上火了不到三个月，我们叫现象级传播类的小游戏和小程序，这种是不持续的，用户量上的快，掉的也快，我们要从更长期的角度去看这个产品本身，传播类或诱导分享，不可持续。&lt;/p&gt;
&lt;p&gt;大家都需要比较理性去对待包括小程序、小游戏、公众号的 H5 等，整个市场不断有新的东西出来，都要理性。不管是在一般的创业期还是已经形成成熟的商业模式，一定要兼顾更多的用户，无论是 App 或者 H5，在它的技术优势与生态之外要有更多的东西。小程序生态很重要，但也不是全部，所以一定要理性看待小程序和小游戏。&lt;/p&gt;

&lt;h2&gt;未来&lt;/h2&gt;
&lt;p&gt;小程序适合很多创业团队试错，当小程序每个月能够带来足够多的利润，做得足够好之后，通常都会做 App。有很多例子，比如之前公众号“毒舌电影”由于某一些政策原因公众号被下架，但是他们也做了 App 和小程序。当你有好的内容和产品，你需要在各个环节做足够多的布局，才能保证不会被别人突然卡死，防止本来流量是一个月几百万，突然一夜之间变成零。&lt;/p&gt;
&lt;p&gt;中大型的项目，App 是可控最好的选择，但这个过程中将面临成本的控制，其实这是一种平衡。&lt;/p&gt;
&lt;p&gt;PWA 是未来不错的选择，一两年以后可能很多人又回归到 JS 本身，他们会用 JS 来做更多的应用，以后在像 Safari、Chrome 或者一些更成熟的浏览器里可能就会看到更多轻应用的影子。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;演讲视频及ppt：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;LinkCard LinkCard--hasImage&quot; href=&quot;https://link.zhihu.com/?target=https%3A//opentalk.upyun.com/402.html&quot; target=&quot;_blank&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-3dcddac155bb9e2646a6f18be990ea82_180x120.jpg&quot; data-image-width=&quot;1024&quot; data-image-height=&quot;768&quot; data-za-detail-view-id=&quot;172&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;移动互联网变迁中的 App 和小程序&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 06:48:00 +0000</pubDate>
<dc:creator>又拍云</dc:creator>
<og:description>2018 年 10 月13 日，由又拍云和知晓云联合主办的 Open Talk 丨2018 小程序开发者沙龙系列活动广州站拉开帷幕，甘果移动的 CEO 路文杰（老甘）在沙龙上做了《移动互联网变迁中的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/upyun/p/9849780.html</dc:identifier>
</item>
<item>
<title>使用465端口加密发邮件 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/9849645.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/9849645.html</guid>
<description>&lt;h2&gt;一、问题描述&lt;/h2&gt;
&lt;p&gt;今天由于服务需求，需要服务器需要发送邮件；但是不论用什么办法，发送邮件总是失败；最终发现原因：阿里云实例服务器默认禁止了25端口；&lt;/p&gt;
&lt;p&gt;阿里云回复：&lt;/p&gt;
&lt;p&gt;　　由于国际与国内均对垃圾邮件进行严格管控，我国《互联网信息服务管理办法》、《中国互联网协会反垃圾邮件规范》均对垃圾邮件进行说明与管理规范。 鉴于服务器25端口被大量垃圾邮件充斥，严重影响广大用户正常使用。为了共同维护良好的网络环境，自即日起阿里云新购服务器&lt;strong&gt;不再提供25端口邮件服务&lt;/strong&gt;， 建议您尝试使用465加密端口发送邮件。&lt;/p&gt;
&lt;p&gt;所以研究了一下465端口发送邮件&lt;/p&gt;

&lt;h2&gt;二、使用465端口加密发送邮件&lt;/h2&gt;
&lt;h3&gt;1、关闭其它的邮件工具&lt;/h3&gt;
&lt;p&gt;[root@along ~]# systemctl stop sendmail&lt;br/&gt;[root@along ~]# systemctl stop postfix&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;2、安装mailx&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[root@along ~]# yum install mailx&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3、开启smtp&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; 在任何邮箱平台中开启smtp，开启后会得到一个授权码，这个授权码就代替了密码（自行去邮箱开启）。我使用的是163邮箱&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;4、请求数字证书（这里用的163邮箱，所以向163请求证书）&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[root@along ~]# mkdir .certs&lt;/p&gt;
&lt;p&gt;[root@along ~]# echo -n | openssl s_client -connect smtp.163.com:465 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &amp;gt; /root/.certs/163.crt&lt;/p&gt;
&lt;p&gt;[root@along ~]# certutil -A -n &quot;GeoTrust SSL CA&quot; -t &quot;C,,&quot; -d /root/.certs -i /root/.certs/163.crt&lt;/p&gt;
&lt;p&gt;[root@along ~]# certutil -A -n &quot;GeoTrust Global CA&quot; -t &quot;C,,&quot; -d /root/.certs -i /root/.certs/163.crt&lt;/p&gt;
&lt;p&gt;[root@along ~]# certutil -A -n &quot;GeoTrust SSL CA - G3&quot; -t &quot;Pu,Pu,Pu&quot; -d /root/.certs/./ -i /root/.certs/163.crt&lt;/p&gt;
&lt;p&gt;Notice: Trust flag u is set automatically if the private key is present.&lt;/p&gt;
&lt;p&gt;[root@along ~]# ls /root/.certs/&lt;/p&gt;
&lt;p&gt;163.crt  cert8.db  key3.db  secmod.db&lt;/p&gt;
&lt;p&gt;[root@along ~]# certutil -L -d /root/.certs&lt;/p&gt;
&lt;p&gt;Certificate Nickname                                         Trust Attributes&lt;/p&gt;
&lt;p&gt;                                                             SSL,S/MIME,JAR/XPI&lt;/p&gt;

&lt;p&gt;GeoTrust SSL CA                                              P,P,P&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;5、配置/etc/mail.rc&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[root@along ~]# vim /etc/mail.rc&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;=xxx@&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #之前设置好的邮箱地址
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; smtp=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smtps://smtp.163.com:465&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; #邮件服务器
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; smtp-auth-user=xxx@&lt;span&gt;163&lt;/span&gt;&lt;span&gt;.com #之前设置好的邮箱地址
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; smtp-auth-password=&lt;span&gt;xxxx #授权码
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; smtp-auth=&lt;span&gt;login #默认login即可
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; ssl-verify=&lt;span&gt;ignore #ssl认证方式
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; nss-config-dir=/root/.certs #证书所在目录
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;6、发送邮件测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[root@along ~]# echo &quot;&lt;span&gt;邮件正文&lt;/span&gt;&lt;span&gt;&quot; | mail -s &quot;&lt;/span&gt;&lt;span&gt;邮件主题&lt;/span&gt;&lt;span&gt;&quot; xxx@qq.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;邮件发送成功&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 06:31:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<og:description>一、问题描述 今天由于服务需求，需要服务器需要发送邮件；但是不论用什么办法，发送邮件总是失败；最终发现原因：阿里云实例服务器默认禁止了25端口； 阿里云回复： 由于国际与国内均对垃圾邮件进行严格管控，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/9849645.html</dc:identifier>
</item>
<item>
<title>Akka-Cluster（1）- Cluster Singleton 单例节点 - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/9849428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/9849428.html</guid>
<description>&lt;p&gt;&lt;span&gt;   关于cluster-singleton我在&lt;a href=&quot;https://www.cnblogs.com/tiger-xc/p/7144879.html&quot; target=&quot;_blank&quot;&gt;前面的博文&lt;/a&gt;已经介绍过，在这篇我想回顾一下它的作用和使用方法。首先，cluster-singleton就是集群某个节点上的一个actor。任何时间在集群内保证只会有一个这种actor的实例。它可以是在任何节点上，具体位置由akka-cluster系统的leader节点根据一定规则选定。当cluster-singleton所处的节点停止运作时leader会选择另一个节点，然后系统会将cluster-singleton迁移到新的节点上来保证集群中一定有一个活着的cluster-singleton实例，不过值得注意的是迁移的actor会丢失它的内部状态。在编程实践中常常会需要保证一项程序功能只能由唯一的actor来运行的情况，比如我们需要保证某种运算的顺序，这时在集群环境里就可以使用cluster-singleton了。下面是cluster-singleton可能的一些使用场景：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、在集群中的一个单点运算决策角色，或者是集群各节点交互运算的协调角色&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、集群与外界软件唯一的接口点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、单一主角，多个从属&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、中央命名机制，或者中央路由逻辑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cluster-singleton的工作原理是：在集群的所有节点上都部署一个能产生、启动某singleton类型的ClusterSingletonManager，这样可以保证singleton可以迁移到任何节点。集群中的leader节点动态决定singleton的具体生存节点并指示该节点上的ClusterSingletonManager创建singleton实例。其它actor与singleton的交互是通过这个singleton类型的ClusterSingletonProxy进行的，这是cluster系统提供的一项与singleton交互的渠道服务，在需要接触singleton时可以创建ClusterSingletonProxy实例，然后把它当作目标发送操作消息，这样就可以保证cluster-singleton的位置透明特性了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们就用个简单的例子来示范cluster-singleton的使用看看它的唯一性和自动迁移特点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;构建一个简单的actor：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SingletonActor extends Actor with ActorLogging {
  import SingletonActor._
  import akka.cluster._
  &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Greeting(msg) =&amp;gt;&lt;span&gt;
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*********got {} from {}********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, msg, sender().path.address)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Relocate =&amp;gt;&lt;span&gt;
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*********I'll move from {}********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self.path.address)
      val cluster &lt;/span&gt;=&lt;span&gt; Cluster(context.system)
      cluster.leave(cluster.selfAddress)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Die =&amp;gt;&lt;span&gt;
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*******I'm shutting down ... ********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      self &lt;/span&gt;!&lt;span&gt; PoisonPill
  }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;把SingletonActor包嵌在ClusterSingletonManager里：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bject SingletonActor {
  trait SingletonMsg {}
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Greeting(msg: String) extends SingletonMsg
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; Relocate extends SingletonMsg
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; Die extends SingletonMsg

&lt;span&gt;  def props &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= Props(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SingletonActor)

  def createSingleton(port: Int) &lt;/span&gt;=&lt;span&gt; {
    val config &lt;/span&gt;= ConfigFactory.parseString(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.netty.tcp.port=$port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      .withFallback(ConfigFactory.parseString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.cluster.roles=[singleton]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      .withFallback(ConfigFactory.load())
    val singletonSystem &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,config)

    val singletonManager &lt;/span&gt;=&lt;span&gt; singletonSystem.actorOf(ClusterSingletonManager.props(
      singletonProps &lt;/span&gt;=&lt;span&gt; props,
      terminationMessage &lt;/span&gt;=&lt;span&gt; Die,
      settings &lt;/span&gt;=&lt;span&gt; ClusterSingletonManagerSettings(singletonSystem)
        .withRole(Some(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;singleton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只部署在角色是singleton的节点上&lt;/span&gt;
&lt;span&gt;    ),
      name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;singletonManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    )
  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：singletonManager就是一个actor，所以是用actorOf(...)来构建的。现在这个singletonManager只能部署在singleton角色的节点上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调用SingletonActor是通过ClusterSingletonProxy进行的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; SingletonUser {
  import SingletonActor._
  def sendToSingleton(msg: SingletonMsg) &lt;/span&gt;=&lt;span&gt; {
    val config &lt;/span&gt;= ConfigFactory.parseString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.cluster.roles=[greeter]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      .withFallback(ConfigFactory.load())

    val system &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,config)
    val singletonProxy &lt;/span&gt;=&lt;span&gt; system.actorOf(ClusterSingletonProxy.props(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user/singletonManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      ClusterSingletonProxySettings(system).withRole(None)
    ))

    singletonProxy &lt;/span&gt;!&lt;span&gt; msg
  }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;withRole(None)代表singletonProxy可以部署在任何节点上。下面是测试代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import SingletonActor._
import SingletonUser._
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; SingletonDemo extends App {

  createSingleton(&lt;/span&gt;&lt;span&gt;2551&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;seednode&lt;/span&gt;
  createSingleton(&lt;span&gt;2552&lt;/span&gt;&lt;span&gt;)
  createSingleton(&lt;/span&gt;&lt;span&gt;2553&lt;/span&gt;&lt;span&gt;)
  createSingleton(&lt;/span&gt;&lt;span&gt;2554&lt;/span&gt;&lt;span&gt;)

  scala.io.StdIn.readLine()

  sendToSingleton(Greeting(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello from tiger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  scala.io.StdIn.readLine()

  sendToSingleton(Relocate)
  scala.io.StdIn.readLine()

  sendToSingleton(Greeting(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello from cat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  scala.io.StdIn.readLine()

  sendToSingleton(Die)
  scala.io.StdIn.readLine()

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;检验一下输出简要：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;25.642&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;3&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:51660/user/$a] Singleton identified at [akka.tcp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/user/singletonManager/singleton]&lt;/span&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;25.654&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;20&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/user/singletonManager/singleton] *********got hello from tiger from akka.tcp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:51660********&lt;/span&gt;
&lt;span&gt;

[INFO] [&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;10.839&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;3&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/user/singletonManager/singleton] *********I'll move from akka:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem********&lt;/span&gt;
INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.885&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;2&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:51670/user/$a] Singleton identified at [akka.tcp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2552/user/singletonManager/singleton]&lt;/span&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.886&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;3&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2552/user/singletonManager/singleton] *********got hello from cat from akka.tcp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:51670********&lt;/span&gt;
&lt;span&gt;
[INFO] [&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.156&lt;/span&gt;] [ClusterSingletonSystem-akka.actor.&lt;span&gt;default&lt;/span&gt;-dispatcher-&lt;span&gt;16&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/user/singletonManager/singleton] *******I'm shutting down ... ********&lt;/span&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.177&lt;/span&gt;] [ClusterSingletonSystem-akka.remote.&lt;span&gt;default&lt;/span&gt;-remote-dispatcher-&lt;span&gt;18&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.&lt;/span&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.178&lt;/span&gt;] [ClusterSingletonSystem-akka.remote.&lt;span&gt;default&lt;/span&gt;-remote-dispatcher-&lt;span&gt;18&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.&lt;/span&gt;
[INFO] [&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;25&lt;/span&gt;/&lt;span&gt;2018&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;18.215&lt;/span&gt;] [ClusterSingletonSystem-akka.remote.&lt;span&gt;default&lt;/span&gt;-remote-dispatcher-&lt;span&gt;14&lt;/span&gt;] [akka.tcp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClusterSingletonSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 25 Oct 2018 06:03:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<og:description>关于cluster-singleton我在前面的博文已经介绍过，在这篇我想回顾一下它的作用和使用方法。首先，cluster-singleton就是集群某个节点上的一个actor。任何时间在集群内保证只</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/9849428.html</dc:identifier>
</item>
</channel>
</rss>