<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>mongodb高级聚合查询 - 单曲荨环</title>
<link>http://www.cnblogs.com/zhoujie/p/mongo1.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoujie/p/mongo1.html</guid>
<description>&lt;p&gt;　　在工作中会经常遇到一些mongodb的聚合操作，特此总结下。mongo存储的可以是复杂类型，比如数组、对象等mysql不善于处理的文档型结构，并且聚合的操作也比mysql复杂很多。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：&lt;/span&gt;本文基于 mongodb v3.6&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;mongo与mysql聚合类比&lt;/li&gt;
&lt;li&gt;aggregate简介&lt;/li&gt;
&lt;li&gt;aggregate语法&lt;/li&gt;
&lt;li&gt;aggregate常用pipeline stage介绍(本文核心)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于理解，先将常见的mongo的聚合操作和mysql的查询做下类比：&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;SQL 操作/函数   &lt;/td&gt;
&lt;td&gt;mongodb聚合操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;$match&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;group by&lt;/td&gt;
&lt;td&gt;$group&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;having&lt;/td&gt;
&lt;td&gt;$match&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;$project&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;order by&lt;/td&gt;
&lt;td&gt;$sort&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;limit　&lt;/td&gt;
&lt;td&gt;$limit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sum()&lt;/td&gt;
&lt;td&gt;$sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;count()&lt;/td&gt;
&lt;td&gt;$sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$lookup  &lt;/p&gt;
&lt;p&gt;（v3.2 新增）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;










&lt;p&gt;下面举了一些常用的mongo聚合例子和mysql对比，假设有一条如下的数据库记录（表名：orders）作为例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  cust_id: &quot;abc123&quot;,
  ord_date: ISODate(&quot;&lt;/span&gt;&lt;span&gt;2012&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;02T17:&lt;span&gt;04&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt;&lt;span&gt;.102Z&quot;),
  status: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  price: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
  items: &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; { sku: &quot;xxx&quot;, qty: 25, price: 1 },
           { sku: &quot;yyy&quot;, qty: 25, price: 1 } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 统计orders表所有记录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: null,
        count: { $sum: 1 }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;   &lt;span&gt;FROM&lt;/span&gt; orders
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.对orders表计算所有price求和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: null,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt; total  &lt;span&gt;FROM&lt;/span&gt; orders
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.对每一个唯一的cust_id, 计算price总和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.对每一个唯一对cust_id和ord_date分组，计算price总和，不包括日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        },
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql：
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       ord_date,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id,
         ord_date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.对于有多个记录的cust_id，返回cust_id和对应的数量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        count: { $sum: 1 }
     }
   },
   { $match: { count: { $gt: 1 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.对每个唯一的cust_id和ord_date分组，计算价格总和，并只返回price总和大于250的记录，且排除日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        },
        total: { $sum: &quot;$price&quot; }
     }
   },
   { $match: { total: { $gt: 250 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       ord_date,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id,
         ord_date
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; total &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;250&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.对每个唯一的cust_id且status=A，计算price总和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $match: { status: 'A' } },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.对每个唯一的cust_id且status=A，计算price总和并且只返回price总和大于250的记录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $match: { status: 'A' } },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   },
   { $match: { total: { $gt: 250 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:&lt;br/&gt;&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; total &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;250&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;9.对于每个唯一的cust_id，将与orders相关联的相应订单项order_lineitem的qty字段进行总计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $unwind: &quot;$items&quot; },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        qty: { $sum: &quot;$items.qty&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(li.qty) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; qty
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders o,
     order_lineitem li
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; li.order_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; o.id
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;10.统计不同cust_id和ord_date分组的数量，排除日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        }
     }
   },
   {
     $group: {
        _id: null,
        count: { $sum: 1 }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id, ord_date
      &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
      &lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id, ord_date)
      &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; DerivedTable
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　db.collection.aggregate()是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。&lt;/p&gt;
&lt;p&gt;通过这张图，可以了解Aggregate处理的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619212647050-925796422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、db.collection.aggregate() 可以用多个构件创建一个管道，对于一连串的文档进行处理。这些构件包括：筛选操作的match、映射操作的project、分组操作的group、排序操作的sort、限制操作的limit、和跳过操作的skip。&lt;br/&gt;2、db.collection.aggregate()使用了MongoDB内置的原生操作，聚合效率非常高,支持类似于SQL Group By操作的功能，而不再需要用户编写自定义的JavaScript例程。&lt;br/&gt;3、 每个阶段管道限制为100MB的内存。如果一个节点管道超过这个极限,MongoDB将产生一个错误。为了能够在处理大型数据集,可以设置allowDiskUse为true来在聚合管道节点把数据写入临时文件。这样就可以解决100MB的内存的限制。&lt;br/&gt;4、db.collection.aggregate()可以作用在分片集合，但结果不能输在分片集合，MapReduce可以 作用在分片集合，结果也可以输在分片集合。&lt;br/&gt;5、db.collection.aggregate()方法可以返回一个指针（cursor），数据放在内存中，直接操作。跟Mongo shell 一样指针操作。&lt;br/&gt;6、db.collection.aggregate()输出的结果只能保存在一个文档中，BSON Document大小限制为16M。可以通过返回指针解决，版本2.6中后面：DB.collect.aggregate()方法返回一个指针，可以返回任何结果集的大小。&lt;/p&gt;

&lt;p&gt;基本格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
db.collection.aggregate(pipeline, options)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;3.3496932515337&quot;&gt;&lt;tr&gt;&lt;td&gt;参数         &lt;/td&gt;
&lt;td&gt;类型           &lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5531914893617&quot;&gt;&lt;td&gt;pipeline&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td readability=&quot;6.4494382022472&quot;&gt;
&lt;p&gt;一系列数据聚合操作或阶段。详见&lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/&quot; target=&quot;_blank&quot;&gt;聚合管道操作符&lt;/a&gt;&lt;br/&gt;在版本2.6中更改：该方法仍然可以将流水线阶段作为单独的参数接受，而不是作为数组中的元素;但是，如果不将管道指定为数组，则不能指定options参数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;document  &lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;可选。 aggregate()传递给聚合命令的其他选项。&lt;br/&gt;2.6版中的新增功能：仅当将管道指定为数组时才可用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;使用db.collection.aggregate()直接查询会提示错误，但是传一个空数组如db.collection.aggregate([])则不会报错，且会和find一样返回所有文档。&lt;/p&gt;

&lt;p&gt;pipeline有很多stage，但这里我只记录我经常用到的几个，如果后续用到再补充。stage详见&lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/group/&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来介绍这几个常用的stage:&lt;/p&gt;
&lt;p&gt;$count , $group,  $match, $project,  $unwind, $limit, $skip,  $sort, $sortByCount,  $lookup, $out, $addFields&lt;/p&gt;

&lt;h2&gt;$count&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;返回包含输入到stage的文档的计数，理解为返回与表或视图的find()查询匹配的文档的计数。&lt;/p&gt;
&lt;p&gt;db.collection.count()方法不执行find()操作，而是计数并返回与查询匹配的结果数。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{ $&lt;span&gt;count&lt;/span&gt;: &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$count阶段相当于下面$group+$project的序列：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.collection.aggregate( [
   { $group: { _id: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, myCount: { $&lt;span&gt;sum&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt; } } }, #这里myCount自定义，相当于mysql的select count(*&lt;span&gt;) as myCount
   { $project: { _id: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; } }  # 返回不显示_id字段
] )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
{ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;88&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;92&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;97&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;71&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;79&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;83&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;p&gt;1）$match 阶段排除score小于等于80的文档，将大于80的文档传到下个阶段&lt;/p&gt;
&lt;p&gt;2）$count阶段返回聚合管道中剩余文档的计数，并将该值分配给名为passing_scores的字段。&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619222124883-288829809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;$group&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。&lt;/p&gt;
&lt;p&gt;输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{ $group: { _id: &amp;lt;expression&amp;gt;, &amp;lt;field1&amp;gt;: { &amp;lt;accumulator1&amp;gt; : &amp;lt;expression1&amp;gt; }, ... } }
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;_id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。&lt;/li&gt;
&lt;li&gt;剩余的计算字段是可选的，并使用&amp;lt;accumulator&amp;gt;运算符进行计算。&lt;/li&gt;
&lt;li&gt;_id和&amp;lt;accumulator&amp;gt;表达式可以接受任何有效的&lt;a href=&quot;https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#aggregation-expressions&quot; target=&quot;_blank&quot;&gt;表达式&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;accumulator操作符&lt;/h4&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;名称                      &lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;td&gt;类比sql&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$avg&lt;/td&gt;
&lt;td&gt;计算均值     &lt;/td&gt;
&lt;td&gt;avg&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;$first&lt;/td&gt;
&lt;td&gt;返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。&lt;/td&gt;
&lt;td&gt;limit 0,1&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;$last&lt;/td&gt;
&lt;td&gt;返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$max&lt;/td&gt;
&lt;td&gt;根据分组，获取集合中所有文档对应值得最大值。&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$min&lt;/td&gt;
&lt;td&gt;根据分组，获取集合中所有文档对应值得最小值。&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$push&lt;/td&gt;
&lt;td&gt;将指定的表达式的值添加到一个数组中。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$addToSet &lt;/td&gt;
&lt;td&gt;将表达式的值添加到一个集合中（无重复值，无序）。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$sum&lt;/td&gt;
&lt;td&gt;计算总和&lt;/td&gt;
&lt;td&gt;sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$stdDevPop&lt;/td&gt;
&lt;td&gt;返回输入值的总体标准偏差（population standard deviation）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$stdDevSamp&lt;/td&gt;
&lt;td&gt;返回输入值的样本标准偏差（the sample standard deviation）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;$group阶段的内存限制为100M。默认情况下，如果stage超过此限制，$group将产生错误。但是，要允许处理大型数据集，请将allowDiskUse选项设置为true以启用$group操作以写入临时文件。&lt;/p&gt;
&lt;p&gt;在版本2.6中进行了更改：对于$group阶段，MongoDB引入了100M内存的限制以及allowDiskUse选项来处理大数据集的操作。&lt;/p&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
{ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-01T08:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jkl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;20&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-01T09:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-15T09:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;20&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-04-04T11:21:39.736Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-04-04T21:23:13.331Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1. 以下汇总操作使用$group阶段按月份，日期和年份对文档进行分组，并计算total price和average quantity，并计算每个组的文档数量：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225349108-1276973299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;15.0&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;15&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. group null  , &lt;span lang=&quot;zh-CN&quot;&gt;以下聚合操作将指定组_id为null，计算集合中所有文档的总价格和平均数量以及计数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225601745-274714329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 查询distinct values &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;以下汇总操作使用$group阶段按item对文档进行分组以检索不同的项目值：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225917904-343833521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 数据转换&lt;/p&gt;
&lt;p&gt;1）将集合中的数据按price分组转换成item数组&lt;/p&gt;
&lt;p&gt;返回的数据id值是group中指定的字段，items可以自定义，是分组后的列表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619231004975-287610370.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）下面聚合操作实用系统变量$$ROOT按item对文档进行分组，&lt;span lang=&quot;zh-CN&quot;&gt;生成的文档不得超过BSON文档大小限制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619231315308-577090097.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;xyz&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 3,
            &quot;item&quot; : &quot;xyz&quot;,
            &quot;price&quot; : 5,
            &quot;quantity&quot; : 10,
            &quot;date&quot; : ISODate(&quot;2014-03-15T09:00:00.000Z&quot;)
        }, 
        {
            &quot;_id&quot; : 4,
            &quot;item&quot; : &quot;xyz&quot;,
            &quot;price&quot; : 5,
            &quot;quantity&quot; : 20,
            &quot;date&quot; : ISODate(&quot;2014-04-04T11:21:39.736Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;jkl&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 2,
            &quot;item&quot; : &quot;jkl&quot;,
            &quot;price&quot; : 20,
            &quot;quantity&quot; : 1,
            &quot;date&quot; : ISODate(&quot;2014-03-01T09:00:00.000Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;abc&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 1,
            &quot;item&quot; : &quot;abc&quot;,
            &quot;price&quot; : 10,
            &quot;quantity&quot; : 2,
            &quot;date&quot; : ISODate(&quot;2014-03-01T08:00:00.000Z&quot;)
        }, 
        {
            &quot;_id&quot; : 5,
            &quot;item&quot; : &quot;abc&quot;,
            &quot;price&quot; : 10,
            &quot;quantity&quot; : 10,
            &quot;date&quot; : ISODate(&quot;2014-04-04T21:23:13.331Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;$match&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;过滤文档，仅将符合指定条件的文档传递到下一个管道阶段。&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;
$match接受一个指定查询条件的文档。查询语法与读操作查询语法相同。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;zh-CN&quot;&gt;语法：&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{ $match: { &lt;span&gt;&amp;lt;&lt;/span&gt;query&lt;span&gt;&amp;gt;&lt;/span&gt; } }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;管道优化：&lt;/h4&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;$match用于对文档进行筛选，之后可以在得到的文档子集上做聚合，$match可以使用除了地理空间之外的所有常规查询操作符，&lt;strong&gt;在实际应用中尽可能将$match放在管道的前面位置&lt;/strong&gt;。这样有两个好处：一是可以快速将不需要的文档过滤掉，以&lt;strong&gt;减少管道的工作量&lt;/strong&gt;；二是如果再投射和分组之前执行$match，&lt;strong&gt;查询可以使用索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;限制：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;不能在$ match查询中使用$作为聚合管道的一部分。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;要在$match阶段使用$text，$match阶段必须是管道的第一阶段。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;视图不支持文本搜索。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : ObjectId(&quot;512bc95fe835e68f199c8686&quot;), &quot;author&quot; : &quot;dave&quot;, &quot;score&quot; : &lt;span&gt;80&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;100&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;512bc962e835e68f199c8687&quot;), &quot;author&quot; : &quot;dave&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;85&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;521&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a192d4bede9ac365b257&quot;), &quot;author&quot; : &quot;ahn&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a192d4bede9ac365b258&quot;), &quot;author&quot; : &quot;li&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;55&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;5000&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b259&quot;), &quot;author&quot; : &quot;annT&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;50&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b25a&quot;), &quot;author&quot; : &quot;li&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;94&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;999&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b25b&quot;), &quot;author&quot; : &quot;ty&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;95&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;1000&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.使用 $match做简单的匹配查询&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619234118950-569445436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : ObjectId(&quot;512bc95fe835e68f199c8686&quot;),
    &quot;author&quot; : &quot;dave&quot;,
    &quot;score&quot; : &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;,
    &quot;views&quot; : &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : ObjectId(&quot;512bc962e835e68f199c8687&quot;),
    &quot;author&quot; : &quot;dave&quot;,
    &quot;score&quot; : &lt;/span&gt;&lt;span&gt;85&lt;/span&gt;&lt;span&gt;,
    &quot;views&quot; : &lt;/span&gt;&lt;span&gt;521&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. &lt;span lang=&quot;zh-CN&quot;&gt;使用$match管道选择要处理的文档，然后将结果输出到$group管道以计算文档的计数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619234018261-1141135850.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;5.0&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;$unwind&lt;/h2&gt;
&lt;h4&gt;&lt;span lang=&quot;zh-CN&quot;&gt;释义：&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;从输入文档解构数组字段以输出每个元素的文档。简单说就是 &lt;/span&gt;可以将数组拆分为单独的文档。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{ $unwind: &lt;span&gt;&amp;lt;&lt;/span&gt;field path&lt;span&gt;&amp;gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要指定字段路径，在字段名称前加上$符并用引号括起来。&lt;/p&gt;
&lt;p&gt;v3.2+支持如下语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  $unwind:
    {
      path: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;field path&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,
      includeArrayIndex: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;      preserveNullAndEmptyArrays: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;boolean&lt;span&gt;&amp;gt; #可选，default :false，若为true,&lt;/span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;如果路径为空，缺少或为空数组，则$unwind输出文档&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt; } &lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果为输入文档中不存在的字段指定路径，或者该字段为空数组，则$unwind默认会忽略输入文档，并且不会输出该输入文档的文档。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;版本3.2中的新功能：要输出数组字段丢失的文档，null或空数组，请使用选项preserveNullAndEmptyArrays。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;1. 示例数据1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : &lt;span&gt;1&lt;/span&gt;, &quot;item&quot; : &quot;ABC1&quot;, sizes: &lt;span&gt;[&lt;/span&gt;&lt;span&gt; &quot;S&quot;, &quot;M&quot;, &quot;L&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;以下聚合使用$unwind为sizes数组中的每个元素输出一个文档：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
db.getCollection(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).aggregate(
 &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; { $unwind : &quot;$sizes&quot; } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
)

返回：
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &quot;item&quot; : &quot;ABC1&quot;,
    &quot;sizes&quot; : &quot;S&quot;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &quot;item&quot; : &quot;ABC1&quot;,
    &quot;sizes&quot; : &quot;M&quot;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &quot;item&quot; : &quot;ABC1&quot;,
    &quot;sizes&quot; : &quot;L&quot;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;每个文档与输入文档相同，除了sizes字段的值是原始sizes数组的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;2. 再如下示例数据：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : &lt;span&gt;1&lt;/span&gt;, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot;: &lt;span&gt;[&lt;/span&gt;&lt;span&gt; &quot;S&quot;, &quot;M&quot;, &quot;L&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &quot;item&quot; : &quot;EFG&quot;, &quot;sizes&quot; : &lt;span&gt;[&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;IJK&quot;, &quot;sizes&quot;: &quot;M&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;LMN&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &quot;item&quot; : &quot;XYZ&quot;, &quot;sizes&quot; : &lt;span&gt;null&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1）以下$unwind操作使用includeArrayIndex选项来输出数组元素的数组索引。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
db.getCollection(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt; { $unwind: { path: &quot;$sizes&quot;, includeArrayIndex: &quot;arrayIndex&quot; } } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

返回：
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;S&quot;, &quot;arrayIndex&quot; : NumberLong(0) }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;M&quot;, &quot;arrayIndex&quot; : NumberLong(1) }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;L&quot;, &quot;arrayIndex&quot; : NumberLong(2) }&lt;br/&gt;{ &quot;_id&quot; : 3, &quot;item&quot; : &quot;IJK&quot;, &quot;sizes&quot; : &quot;M&quot;, &quot;arrayIndex&quot; : null }&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Tue, 19 Jun 2018 15:32:00 +0000</pubDate>
<dc:creator>单曲荨环</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoujie/p/mongo1.html</dc:identifier>
</item>
<item>
<title>增删改查 - 所爱隔山隔海</title>
<link>http://www.cnblogs.com/zhengleilei/p/9201702.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhengleilei/p/9201702.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1387013/201806/1387013-20180619232103720-853949016.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;增删改查：&lt;/p&gt;
&lt;p&gt;index页面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-UA-Compatible&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ie=edge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;link rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../bootstrap-3.3.7-dist/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;public/jquery-3.2.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../bootstrap-3.3.7-dist/js/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
        .add{
            width: 100px;
            height: 30px;
            text&lt;/span&gt;-&lt;span&gt;align: center;
            line&lt;/span&gt;-&lt;span&gt;height: 30px;
            border&lt;/span&gt;-&lt;span&gt;radius: 5px;        
            background&lt;/span&gt;-color: #&lt;span&gt;245580&lt;/span&gt;&lt;span&gt;;
            color: white;
        }
        
    &lt;/span&gt;&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-toggle=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#myModal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加&amp;lt;/div&amp;gt;
    &amp;lt;form &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-inline&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
     &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;id:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入查询的id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;sex:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入查询的sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cha(this)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;查询&amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;table &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; border=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; cellspacing=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; cellpadding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        
    &amp;lt;/table&amp;gt;
    
    &amp;lt;!--=============添加=================--&amp;gt;

&amp;lt;!-- 模态框 --&amp;gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal fade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myModal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-dialog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
 
      &amp;lt;!-- 模态框头部 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加&amp;lt;/h4&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-dismiss=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
 
      &amp;lt;!-- 模态框主体 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;form&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;id:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;name:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;sex:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;jiguan:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;xueyuan:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
      &amp;lt;/div&amp;gt;
 
      &amp;lt;!-- 模态框底部 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-footer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-secondary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-dismiss=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
 
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
            &amp;lt;!--========修改====================--&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal fade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiuxiu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-dialog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
 
      &amp;lt;!-- 模态框头部 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;修改&amp;lt;/h4&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-dismiss=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
 
      &amp;lt;!-- 模态框主体 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;form&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;id:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;readonly&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;name:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;sex:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;jiguan:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;xueyuan:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
      &amp;lt;/div&amp;gt;
 
      &amp;lt;!-- 模态框底部 --&amp;gt;
      &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-footer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-secondary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-dismiss=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiugai()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;修改&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
 
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &lt;span&gt;var&lt;/span&gt; biao = document.getElementsByTagName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; colorattr = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table-danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table-warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table-info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table-active&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    loadData(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
    
        function cha(qq){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sex = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
                loadData(id,sex);
        }
    function loadData(a,b){
        $.ajax({
        type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chuli.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        data:{
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chaxun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:a,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:b
        },
        dataType:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        success:function(data){
        
            str &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;全选&amp;lt;input  type='checkbox' onclick='qx(this)'/&amp;gt;&amp;lt;span onclick='pl()'&amp;gt;批量删除&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;id&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;name&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;sex&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;jiguan&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;xueyuan&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;CZ&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;data.length;i++&lt;span&gt;){
                str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;tr class=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+colorattr[i]+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&amp;lt;input class='bb' type='checkbox' value='&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+data[i][&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;;j&amp;lt;data[i].length;j++&lt;span&gt;){
                    str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+data[i][j]+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;td&amp;gt;&amp;lt;button type='button' class='btn btn-info' onclick='shanchu(\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+data[i][&lt;span&gt;0&lt;/span&gt;]+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;)'&amp;gt;删除&amp;lt;/button&amp;gt; &amp;lt;button type='button' class='btn btn-warning'data-toggle='modal' data-target='#xiuxiu' onclick='xiu(\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+data[i].join(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;)'&amp;gt;修改&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                str &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            biao.innerHTML &lt;/span&gt;=&lt;span&gt; str;
        }
    });
    }    
    function add(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  sex = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jiguan = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  xueyuan = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        $.ajax({
            type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chuli.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            data:{
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tianjia&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:id,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:name,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:sex,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:jiguan,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:xueyuan
            },
            dataType:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            success:function(data){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;添加成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                loadData(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
          }
        }
      });
    }
    function xiu(aa){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; attr = aa.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; attr_id = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;attr.length;i++&lt;span&gt;){
            document.getElementById(attr_id[i]).value &lt;/span&gt;=&lt;span&gt; attr[i];
        }
    }
    function xiugai(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  sex = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jiguan = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jiguan1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  xueyuan = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xueyuan1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        
        $.ajax({
            type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chuli.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            data:{
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiugai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:id,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:name,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:sex,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jiguan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:jiguan,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xueyuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:xueyuan
            },
            dataType:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            success:function(data){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                loadData(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
                
          }
        }
      });
    }
    function shanchu(aa){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        $.ajax({
        type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chuli.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        data:{
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shanchu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
             &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:id
        },
        dataType:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        success:function(data){
            
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                loadData(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
            }
        }
    });
    }
        function qx(cc){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bb = document.getElementsByClassName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cc.&lt;span&gt;checked&lt;/span&gt; == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;bb.length;i++&lt;span&gt;){
                bb[i].&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            } 
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;bb.length;i++&lt;span&gt;){
                bb[i].&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            } 
        }
    }
    function pl(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bb = document.getElementsByClassName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;bb.length;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(bb[i].&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;){
            str &lt;/span&gt;+= bb[i].value+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;','&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
        }
        str &lt;/span&gt;= str.substr(&lt;span&gt;0&lt;/span&gt;,str.length-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        $.ajax({
        type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chuli.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        data:{
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:str
        },
        dataType:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        success:function(data){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;批量删除成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                loadData(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
            }
        }
    });
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; PHP页面  利用   switch(){&lt;em id=&quot;__mceDel&quot;&gt;case &quot;&quot;:break         来实现分着处理sql语句&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;?php&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$type = $_POST['type'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$conn = new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;&quot;,&quot;ceshi&quot;);&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$conn-&amp;gt;connect_error?die(&quot;连接失败&quot;):&quot;&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;switch($type){&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;case &quot;chaxun&quot;:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$id = $_POST['id'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sex = $_POST['sex'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sql = &quot;select * from student where id like '%{$id}%' and sex like '%{$sex}%'&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$result = $conn-&amp;gt;query($sql);&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$attr = $result-&amp;gt;fetch_all();&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;echo json_encode($attr);&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;break;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;case &quot;tianjia&quot;:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$id = $_POST['id'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$name = $_POST['name'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sex = $_POST['sex'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$jiguan = $_POST['jiguan'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$xueyuan = $_POST['xueyuan'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sql = &quot;insert into student values('{$id}','{$name}','{$sex}','{$jiguan}','{$xueyuan}')&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;if($result = $conn-&amp;gt;query($sql)){&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;echo &quot;ok&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;break;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;case &quot;xiugai&quot;:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$id = $_POST['id'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$name = $_POST['name'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sex = $_POST['sex'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$jiguan = $_POST['jiguan'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$xueyuan = $_POST['xueyuan'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sql = &quot;update student set name = '{$name}',sex = '{$sex}',jiguan = '{$jiguan}',xueyuan = '{$xueyuan}' where id = '{$id}'&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;if($result = $conn-&amp;gt;query($sql)){&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;echo &quot;ok&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;break;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;case &quot;shanchu&quot;:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$id = $_POST['id'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sql = &quot;delete from student where id = '{$id}'&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;if($result = $conn-&amp;gt;query($sql)){&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;echo &quot;ok&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;break;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;case &quot;pl&quot;:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$str = $_POST['str'];&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;$sql = &quot;delete from student where id in ('{$str}')&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;if($result = $conn-&amp;gt;query($sql)){&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;echo &quot;ok&quot;;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;break;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;?&amp;gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 15:30:00 +0000</pubDate>
<dc:creator>所爱隔山隔海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhengleilei/p/9201702.html</dc:identifier>
</item>
<item>
<title>JVM学习十：JVM之垃圾收集器及GC参数 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/9201625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/9201625.html</guid>
<description>&lt;p&gt;&lt;span&gt;接近两个月左右没有写博客，主要是因为小孩过来后，回家比较忙，现在小孩端午送回家了，开始继续之前的JVM学习之路，前面学习了GC的算法和种类，那么本章则是基于算法来产生实际的用途，即垃圾收集器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、堆的回顾&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新生代中的98%对象都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是&lt;strong&gt;将内存分为一块比较大的Eden空间和两块较小的Survivor空间&lt;/strong&gt;，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖于老年代进行分配担保，所以大对象直接进入老年代。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;堆的结构如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225002674-1661261950.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;垃圾收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果说收集算法时内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然我们在对各种收集器进行比较，但并非为了挑出一个最好的收集器。因为直到现在位置还没有最好的收集器出现，更加没有万能的收集器，所以&lt;strong&gt;我们选择的只是对具体应用最合适的收集器&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、串行收集器：&lt;strong&gt;Serial收集器&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;最古老，最稳定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;简单而高效&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能会产生较长的停顿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseSerialGC&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;新生代、老年代都会使用串行回收&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新生代复制算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;老年代标记-整理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总结：&lt;strong&gt;Serial收集器&lt;/strong&gt;对于&lt;strong&gt;运行在Client模式下&lt;/strong&gt;的虚拟机来说是一个很好的选择。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个收集器是一个单线程的收集器，但它的单线程的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。收集器的运行过程如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225326678-747770356.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、并行收集器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、ParNew收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ParNew收集器其实就是Serial收集器新生代的并行版本。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;多线程，需要多核支持。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParNewGC&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　新生代并行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　老年代串行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:ParallelGCThreads 限制线程数量&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225456403-1368923997.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、Parallel Scanvenge收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;类似ParNew，但更加关注&lt;strong&gt;吞吐量&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParallelGC  使用Parallel Scanvenge收集器：&lt;strong&gt;新生代并行，老年代串行&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、Parallel Old收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Parallel Old收集器是Parallel Scanvenge收集器的老年代版本&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParallelGC  使用Parallel Old收集器：&lt;strong&gt;新生代并行，老年代并行&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225623319-1400481328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;各种参数设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:MaxGCPauseMills&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　　　最大停顿时间，单位毫秒&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　GC尽力保证回收时间不超过设定值&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:GCTimeRatio&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　　　0-100的取值范围&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　垃圾收集时间占总时间的比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　默认99，即最大允许1%时间做GC&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：这两个参数是矛盾的。因为&lt;strong&gt;停顿时间和吞吐量不可能同时调优&lt;/strong&gt;。我们一方买希望停顿时间少，另外一方面希望吞吐量高，其实这是矛盾的。因为：在GC的时候，垃圾回收的工作总量是不变的，如果将停顿时间减少，那频率就会提高；既然频率提高了，说明就会频繁的进行GC，那吞吐量就会减少，性能就会降低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值&lt;/strong&gt;，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注2：以上所有的收集器当中，当执行GC时，都会stop the world，但是下面的CMS收集器却不会这样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、CMS收集器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CMS收集器（Concurrent Mark Sweep：&lt;strong&gt;并发标记清除&lt;/strong&gt;）是一种&lt;strong&gt;以获取最短回收停顿时间为目标&lt;/strong&gt;的收集器。适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Concurrent Mark Sweep 并发标记清除，并发低停顿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;标记-清除算法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并发阶段会降低吞吐量（因为停顿时间减少了，于是GC的频率会变高）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;老年代收集器&lt;/strong&gt;（新生代使用ParNew）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseConcMarkSweepGC   打开这收集器&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注：这里的并发指的是与用户线程一起执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、CMS收集器运行过程：（着重实现了标记的过程）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）&lt;strong&gt;初始标记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根可以直接关联到的对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;速度快&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）&lt;strong&gt;并发标记&lt;/strong&gt;（和用户线程一起）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主要标记过程，标记全部对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）&lt;strong&gt;重新标记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）&lt;strong&gt;并发清除&lt;/strong&gt;（和用户线程一起）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于标记结果，直接清理对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个过程如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225916562-869426377.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中，初始标记和重新标记时，需要stop the world。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个过程中耗时最长的是并发标记和并发清除，这两个过程都可以和用户线程一起工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打印GC日志举例如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619230007246-7589019.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、CMS收集器特点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）尽可能降低停顿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）会影响系统整体吞吐量和性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如，在用户线程运行过程中，分一半CPU去做GC，系统性能在GC阶段，反应速度就下降一半&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）清理不彻底&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为在清理阶段，用户线程还在运行，会产生新的垃圾，无法清理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）因为和用户线程一起运行，不能在空间快满时再清理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingOccupancyFraction设置触发GC的阈值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不幸内存预留空间不够，就会引起concurrent mode failure&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们来看一下concurrent mode failure的日志：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619230043411-1603012919.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;碰到上图中的情况，我们需要使用串行收集器作为后备。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、既然标记清除算法会造成内存空间的碎片化，CMS收集器为什么使用标记清除算法而不是使用标记整理算法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    CMS收集器更加关注停顿，它在做GC的时候是和用户线程一起工作的（并发执行），如果使用标记整理算法的话，那么在清理的时候就会去移动可用对象的内存空间，那么应用程序的线程就很有可能找不到应用对象在哪里。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了解决碎片的问题，CMS收集器会有一些整理上的参数，接下来就来讲这个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、整理时的各种参数：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:+ UseCMSCompactAtFullCollection     &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Full GC后，进行一次整理。整理过程是独占的，会引起停顿时间变长&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:+CMSFullGCsBeforeCompaction&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;设置进行几次Full GC后，进行一次碎片整理&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:ParallelCMSThreads&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;设定CMS的线程数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、GC参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseSerialGC：在新生代和老年代使用串行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:SurvivorRatio：设置eden区大小和survivior区大小的比例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:NewRatio:新生代和老年代的比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParNewGC：在新生代使用并行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParallelGC ：新生代使用并行回收收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParallelOldGC：老年代使用并行回收收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:ParallelGCThreads：设置用于垃圾回收的线程数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseConcMarkSweepGC：新生代使用并行收集器，老年代使用CMS+串行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:ParallelCMSThreads：设定CMS的线程数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingOccupancyFraction：设置CMS收集器在老年代空间被使用多少后触发&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseCMSCompactAtFullCollection：设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSFullGCsBeforeCompaction：设定进行多少次CMS垃圾回收后，进行一次内存压缩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+CMSClassUnloadingEnabled：允许对类元数据进行回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingPermOccupancyFraction：当永久区占用率达到这一百分比时，启动CMS回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:UseCMSInitiatingOccupancyOnly：表示只在到达阀值的时候，才进行CMS回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了减轻GC压力，我们需要注意些什么？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;软件如何设计架构（性能的根本在应用）&lt;/li&gt;
&lt;li&gt;GC参数属于微调（设置不合理会影响性能，产生大的延时）&lt;/li&gt;
&lt;li&gt;堆空间如何管理和分配&lt;/li&gt;
&lt;li&gt;代码如何写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;《深入JVM内核原理诊断与优化》视频学习  &lt;/p&gt;
&lt;p&gt; http://www.cnblogs.com/smyhvae &lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 15:06:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/9201625.html</dc:identifier>
</item>
<item>
<title>Spring Cloud（十一）声名式服务调用：Feign的使用 （第一部分） - 东北小狐狸</title>
<link>http://www.cnblogs.com/hellxz/p/9201608.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hellxz/p/9201608.html</guid>
<description>&lt;h2 id=&quot;一写在前边&quot;&gt;一、写在前边&lt;/h2&gt;
&lt;p&gt;最近开发任务比较忙，下班也开始锻炼了，这个系列的文章就放了很久，看github我提交的Feign的入门程序已经好久了，今天正好得空，这就更上一贴，准备分几部分写&lt;/p&gt;
&lt;p&gt;注意：之前几个项目中，笔者忽略了一个问题，pom文件中如果parent节点下的是spring-cloud-starter-parent而不是spring-boot-starter-parent的话，这样就可以不用写如下代码了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Camden.SR3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;二feign简介&quot;&gt;二、Feign简介&lt;/h2&gt;
&lt;p&gt;通过前面的学习对Ribbon和Hystrix来进行开发，通过这两个重磅武器学会了如何在微服务实现客户端的负载均衡、服务调用和断路保护，实践中我们发现这两个基础工具总是成对出现的，那么有没有更高层次的封装来简化开发呢？&lt;/p&gt;
&lt;p&gt;Spring为我们提供了Spring Cloud Feign就是这样的一个工具，基于Netflix Feign实现，除了负载均衡、服务调用和断路保护的功能外，还提供了声明式Web服务客户端的定义方式以及兼容SpringMVC的注解支持。&lt;/p&gt;
&lt;h2 id=&quot;三快速入门&quot;&gt;三、快速入门&lt;/h2&gt;
&lt;p&gt;继续使用之前的整个项目，没有这个项目的同学请clone下来代码，地址：&lt;a href=&quot;https://github.com/HellxZ/SpringCloudLearn.git&quot; class=&quot;uri&quot;&gt;https://github.com/HellxZ/SpringCloudLearn.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新建一个项目名为&lt;code&gt;FeignCustomer&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225901126-865885965.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;pom.xml如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;project&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;         xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;         xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.cnblogs.hellxz&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;FeignCustomer&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Dalston.SR5&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Hystrix，Feign是基于Hystrix的--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-hystrix&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Eureka依赖，连接注册中心的都需要有这个依赖 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Feign依赖，声明式开发 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-feign&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- SpringMVC依赖 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如同常规在&lt;code&gt;resources&lt;/code&gt;包下创建&lt;code&gt;application.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;server:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;port:&lt;/span&gt; 9001
&lt;span class=&quot;fu&quot;&gt;spring:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;application:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;name:&lt;/span&gt; feign-customer
&lt;span class=&quot;fu&quot;&gt;eureka:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;client:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;serviceUrl:&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;defaultZone:&lt;/span&gt; http://peer1:1111/eureka&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建主类，相较于其他只需添加&lt;code&gt;@EnableFeignClients&lt;/code&gt;来开启Feign的支持&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.SpringApplication;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.client.SpringCloudApplication;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.netflix.feign.EnableFeignClients;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@EnableFeignClients&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//开启Feign&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SpringCloudApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FeignApp {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(FeignApp.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了以上的我们需要一个用来调用服务提供者的工具，在Ribbon那几章我们使用的是RestTemplate，Feign是一种声明式调用工具，下面就来探索一下&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;com.cnblogs.hellxz.client&lt;/code&gt;创建&lt;code&gt;EurekaServiceFeign&lt;/code&gt;,这个是用来当做Service一样的用法，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz.client;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.netflix.feign.FeignClient;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 服务提供者的Feign&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 这个接口相当于把原来的服务提供者项目当成一个Service类，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 我们只需在声明它的Feign-client的名字，会自动去调用注册中心的这个名字的服务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 更简单的理解是value相当于MVC中的Controller类的父路径，通过&quot;父路径+子路径和参数来调用服务&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@FeignClient&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;eureka-service&quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;//其中的value的值为要调用服务的名称&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; EurekaServiceFeign {

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 第一个Feign代码&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Feign中没有原生的@GetMapping/@PostMapping/@DeleteMapping/@PutMapping，要指定需要用method进行&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/hello&quot;&lt;/span&gt;, method=RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;helloFeign&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚才说过我们可以使用这个Feign当做Service来使用服务提供者的方法，得出返回值，这里我们写一个Controller来示范一下使用&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz.controller;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.cnblogs.hellxz.client.EurekaServiceFeign;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Controller;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.GetMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.ResponseBody;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;feign&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloController {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; EurekaServiceFeign eurekaServiceFeign; &lt;span class=&quot;co&quot;&gt;//注入Feign&lt;/span&gt;

    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;sayHello&lt;/span&gt;(){
        &lt;span class=&quot;co&quot;&gt;//在方法中调用feign的方法&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;helloFeign&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，我们分别启动注册中心、服务提供者、还有这个Feign项目&lt;/p&gt;
&lt;p&gt;使用postman进行测试，使用Get请求访问&lt;code&gt;http://localhost:9001/feign/hello&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225926844-294811203.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四参数绑定&quot;&gt;四、参数绑定&lt;/h2&gt;
&lt;p&gt;Spring官方在整合NetFlix Feign的时候，加入了SpringMVC的注解支持，这使得Feign让习惯了SpringMVC的程序员更好的过渡过来，下面我举几个例子，就举项目中最常用的吧。&lt;/p&gt;
&lt;h4 id=&quot;pathvariable&quot;&gt;1. @PathVariable&lt;/h4&gt;
&lt;p&gt;扩充&lt;code&gt;EurekaServiceFeign&lt;/code&gt;，添加如下代码，注释很详细，不多说&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 在服务提供者我们有一个方法是用直接写在链接，SpringMVC中用的@PathVariable&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里边和SpringMVC中有些有一点点出入，SpringMVC中只有一个参数而且参数名的话是不用额外指定参数名的，而feign中必须指定&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/greet/{dd}&quot;&lt;/span&gt;,method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;greetFeign&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;dd&quot;&lt;/span&gt;) String dd);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code&gt;HelloController&lt;/code&gt;中也添加对应的代码，用来调用上边的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 注意这里是SpringMVC，URL中的参数与方法中的参数名相同无需在注解中注明参数名&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/greet/{test}&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; String test){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;greetFeign&lt;/span&gt;(test);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试这个方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225957947-1294559184.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;requestparam&quot;&gt;2. &lt;code&gt;@RequestParam&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;为声名为Feign的类添加方法，调用服务提供者的方法&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如下代码中使用的User类是从服务提供者模块中复制出来的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里说下@RequestParam 注解和SpringMVC中差别也是不大，我认为区别在于Feign中的是参数进入URL或请求体中，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 而SpringMVC中是参数从请求体中到方法中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param ids &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;id串，比如“1，2，3”&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/users&quot;&lt;/span&gt;,method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsersByIds&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ids&quot;&lt;/span&gt;) List&amp;lt;Long&amp;gt; ids);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用这个方法的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 调用Feign中使用@RequestParam的方法&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/users&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUserListByIds&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ids&quot;&lt;/span&gt;) List&amp;lt;Long&amp;gt; ids){
      &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getUsersByIds&lt;/span&gt;(ids);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230022084-1918464379.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里是为请求的Header中加入参数的注解，但是之前我们的服务提供者并没有这个方法，这里为&lt;code&gt;GetRequestController&lt;/code&gt;添加一个方法如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getParamByRequestHeader&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们为Feign这个类添加一个调用上边方法的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里是将参数添加到Headers中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param name &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Controller中，添加代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(name);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230038236-303919996.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;requestbody&quot;&gt;5. &lt;code&gt;@RequestBody&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;使用这个注解需要使用Post请求，这里简单举例&lt;/p&gt;
&lt;p&gt;Feign类中添加方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 调用服务提供者的post方法,接收回来再被服务提供者丢回来&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param user &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;User对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/user&quot;&lt;/span&gt;, method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;POST&lt;/span&gt;)
    User &lt;span class=&quot;fu&quot;&gt;getUserByRequestBody&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; User user);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller中添加&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@PostMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/requestBody&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;getParamByRequestBody&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; User user){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getUserByRequestBody&lt;/span&gt;(user);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230103964-1313086076.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;需要注意的是&lt;code&gt;@RequestParam&lt;/code&gt;和&lt;code&gt;@RequestHeader&lt;/code&gt;，以及最先提到的&lt;code&gt;@PathVariable&lt;/code&gt;这三个注解都需要写明参数名称，这点与SpringMVC中不同，否则会报IllegalStateException异常，所以一定要指明参数名！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间不早了，明天继续更&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 15:02:00 +0000</pubDate>
<dc:creator>东北小狐狸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hellxz/p/9201608.html</dc:identifier>
</item>
<item>
<title>云计算测试技术体系及发展方向(一) - 大卡尔</title>
<link>http://www.cnblogs.com/jinsdu/p/9201413.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinsdu/p/9201413.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;得益于过去几年移动互联网红利，移动测试圈也发展的如火如荼，催生了很多的测试框架，解决方案，甚至测试相关的技术大会。然而云计算测试这块却探讨的不多，原因会有很多，比如从业门槛高，技术一般特性强(非测试专属)，行业中搞云计算的企业也不多等等因素。&lt;/p&gt;
&lt;p&gt;笔者近几年一直活动在云计算领域，在此想结合这几年的切身体会，给大家介绍下云计算领域的测试技术体系，以及各自的发展方向。有些跟传统的质量保证方向一样，有些稍有些区别。一家之言，以飨大家。&lt;/p&gt;
&lt;h2 id=&quot;总起&quot;&gt;总起&lt;/h2&gt;
&lt;p&gt;一定要明确，不管是什么业务形态，所有的测试技术一定是为&lt;strong&gt;保障产品质量，提高迭代效率&lt;/strong&gt;而存在的。这是主线方向，不能丢。所以沿着此条思路，任何产品形态的测试技术发展脉络就都是有迹可循，云计算也不例外。如果我们将产品从代码形态到最终服务线上客户这个过程看成是一条流水线的话，那么保证产品质量的过程基本可分为&lt;strong&gt;保障代码质量，构建业务测试场景并不断提高测试覆盖率，到最终的构建质量监测与评估的全套闭环&lt;/strong&gt;。每一步都是有足够的纵深可以挖掘，每一步做好了都会非常出彩。&lt;/p&gt;
&lt;h2 id=&quot;保障代码质量&quot;&gt;保障代码质量&lt;/h2&gt;
&lt;p&gt;很多传统企业甚至外企，测试作为质量保证的最终一环，在追求高质量的前提下，会将测试这一环建设的比较重。研发测试比一直居高不下，有时可能会达到夸张的2比1，甚至1比1的情况，然而，在日益严重的人力资源成本下，这种模式很明显难以为继。同样在云计算领域，这种模式更加的不可能。云计算技术为了应对海量用户，高并发场景等，会广泛的使用分布式技术。服务的多实例化，天然的支持灰度升级。在这种模式下，小步快跑，快速迭代才是王道。&lt;/p&gt;
&lt;p&gt;同样在这样的形式，利用有限的测试人力，去获得更大的质量保证成果，就成为必然，这也是我们一直思考的方向。在此形势下，&lt;strong&gt;质量必须是全员建设&lt;/strong&gt;，且围绕业务质量，将质量保证体系前移，是我们探索出的一个非常有利的手段。而生产高质量的代码，就是其中非常重要的一环。那么如何保障代码质量呢？笔者认为，通常绕不开以下三个方面: &lt;strong&gt;构建语言的编程规范，能够快速检测语言层面的代码缺陷，以及构建强大友好的单测服务支撑&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;构建语言的编程规范&quot;&gt;构建语言的编程规范&lt;/h4&gt;
&lt;p&gt;所有的工程师都明白，遵守良好的编程规范对保证代码质量，加强团队协作具有不可估量的价值。大多数语言，围绕其语法语义层面都会有基本的编程规范推荐, 比如go语言的gofmt。同样，作为代码可读性考量，业界也会有其通用性的规范。这一块的落实，大家多数是通过Code Review方式来进行。当然也有做的比较好，直接落实在工具，IDE层面，比如阿里巴巴，不光出了JAVA开发手册，还同时配套主流编程工具IntelliJ IDEA，eclipse的相关辅助插件。&lt;/p&gt;
&lt;p&gt;我们做质量保证体系的，这块就非常有责任去相应的推动落实，以更好的工具化，服务化的方式提供给大家使用。不一定每样都要自行研发，最好结合公司的研发资源，以最佳实践方式来落地。这块搞好了，不光有实际收益，对团队，公司的技术影响力也会有很大的提升。&lt;/p&gt;
&lt;h4 id=&quot;检测语言层面的代码缺陷&quot;&gt;检测语言层面的代码缺陷&lt;/h4&gt;
&lt;p&gt;同样，语言层面的静态分析，也是检测缺陷的有力手段。不同于传统测试手段，静态分析可以在不运行代码的前提下，通过一定的词法分析，语法分析等来快速检测代码的规范性，安全性等问题。这类工具的一大特性就是快，可以想想，如果我们能提供一个比较好用的类似工具，在工程师提交PR时，就检测到他们代码中的问题，工程师立马改正，这种效率可就远胜于集成测试阶段发现问题然后再改了！&lt;/p&gt;
&lt;p&gt;不过搞静态分析难度系数较大，且很多时候准确率不高，要想做好这块，需要有较大的技术投入才行。&lt;/p&gt;
&lt;h4 id=&quot;构建强大友好的单测服务支撑&quot;&gt;构建强大友好的单测服务支撑&lt;/h4&gt;
&lt;p&gt;搞质量的多数都熟悉测试金字塔理论，应该知道单测的投入产出比是最大的，所以从如何促进研发写单测角度，来进行一定的工程投入是非常值得的。甚至采用一些商业服务，也不为过。比如我司，所有的代码都托管在github上，单测跑在travis里，非常方便。&lt;/p&gt;
&lt;p&gt;除此之外，我们还可以考虑出一些单测工具，最佳实践，各种例子来辅助，教习研发写单测。实践发现，很多时候并不是研发不愿意写单测，而是其不会写，又或者发现写某些单测的投入较大，于是他们就放弃了。而这些都应该是质量体系要解决的问题。&lt;/p&gt;
&lt;p&gt;好的单测服务，不光是辅助研发如何写单测，同时也可以起到激励作用。比如，如果我们将单测结果能友好的量化出来，去推动不同研发之间的比拼意识，服务之间的比拼意识，甚至团队之间的比拼意识，那么就能起到非常好的良性促进作用。&lt;/p&gt;
&lt;p&gt;这块整体的难度系数较低，收益又很明显，应当做为质量保证体系中很重要的一环去建设。&lt;/p&gt;
&lt;h2 id=&quot;构建业务测试覆盖&quot;&gt;构建业务测试覆盖&lt;/h2&gt;
&lt;p&gt;前面谈了主要从如何保证代码质量的角度，提出了3个测试技术发展方向。但光关注代码这一层一定是不够的，我们还应该从业务角度去关注我们的产品质量到底如何。这个阶段是绝大多数QA人员比较熟悉的。可能不少QA同学会把这个阶段说成API测试，集成测试等，但这是动作。我认为这里主要应该强调目的，所以我把该阶段抽象为&lt;strong&gt;构建业务测试覆盖&lt;/strong&gt;。我们不断的测试或者写自动化，其目标就是尽可能的覆盖各种业务场景，各种新需求，避免发布到线上出问题。&lt;/p&gt;
&lt;p&gt;这块的测试技术发展上当遵循两大方向: &lt;strong&gt;接口自动化，故障注入。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;构建接口自动化&quot;&gt;构建接口自动化&lt;/h4&gt;
&lt;p&gt;绝大多数云计算服务都是通过API方式，对外暴漏，所以从业务测试角度，我们就需要通过调用这些API，模拟业务请求来测试这些服务。在实际场景中，为了做好这些，通常需要一套完善的自动化测试框架，当然实操上也比较简单。不管哪个测试框架，主要解决以下问题，比如，需要好用的Http客户端来发送HTTP请求和处理Response，方便灵活的Assert库，测试用例的组织和执行。这是基本的需求，当case数量到一定量级，还需要做完善的测试报告，统一的log方便定位问题，以及灵活的业务SDK。&lt;/p&gt;
&lt;p&gt;测试框架不建议从头自己写，选择热门开源的项目可以快速的开展工作。比如，go语言，就可以使用Ginkgo+Gomega+Gorequest+Glog的组合。&lt;/p&gt;
&lt;p&gt;云服务接口因为要应对海量并发场景，单纯的功能测试需求，不够完善，还需要针对每个接口进行高并发测试。笔者之前分享过一篇&lt;a href=&quot;http://www.cnblogs.com/jinsdu/p/6347572.html&quot;&gt;GO并发编程实践&lt;/a&gt;， 里面的例子都可以融合到这些测试框架里，方便在实际的迭代中使用，以提高效率。稍加改造这些例子，完全可以应对更高的并发场景，以及基准测试等需求。相对与jmeter等工具会轻便很多。&lt;/p&gt;
&lt;p&gt;另外，还有些公司因为绝大多数测试同学都是手工测试，为了提高这部分同学的效率，可能会专门为他们做些更简易的封装，提供UI界面。这些属于锦上添花型，在绝大多数QA同学都是测试开发的云计算行业，有点鸡肋，不建议花太多精力在这个方面。&lt;/p&gt;
&lt;p&gt;不过，所有的这些方式其实都是常规的测试模式，需要人工一条条的补充业务测试场景。但是人就有可能犯错，有可能遗漏测试场景。并且在常规的迭代中，多数同学比较容易关注新需求，有时候就会遗漏旧有的业务场景组合，容易造成回归问题遗漏。所以针对接口自动化这个方向，如何能更好的提高业务测试覆盖率，才是需要QA同学持续探索的。&lt;/p&gt;
&lt;p&gt;此方向，笔者将会在下篇中更深入分析，此处按下不表。&lt;/p&gt;
&lt;h4 id=&quot;引入故障注入机制&quot;&gt;引入故障注入机制&lt;/h4&gt;
&lt;p&gt;说到云计算的测试技术，就不得不提起&lt;strong&gt;Fault Injection&lt;/strong&gt;。前面提到的接口自动化，思考的逻辑是从业务角度，保证系统在正常的情形下做正确的事。但还里，还有个很大的问题就是如果服务所依赖的环境不符合预期了，系统还能正常工作吗？&lt;/p&gt;
&lt;p&gt;实践发现，在面对多机房，海量机器的场景下，云计算基础设施出问题的概率是非常大的。比较常见的如磁盘损坏，网络故障，机器宕机等等，可能时时刻刻都在发生，每一种故障都有可能引发数据丢失，系统雪崩等重大灾难，对业务造成难以估量的损失。云计算系统需要在各种故障场景下仍能正常工作，做到高可用，高可靠需要投入巨大的精力。同样，如何更灵活验收这些场景，如何能模拟更多的故障场景，也是测试技术需要投入的巨大课题。&lt;/p&gt;
&lt;p&gt;好的故障注入方式一定是朝着&lt;strong&gt;Simulate everything automatically, and be able to reproduce the fault again&lt;/strong&gt;方向去的。从常规的服务挂掉，到机器宕机，坏盘，磁盘高负载，网络延迟，丢包，不通等等情况，通过工具或者命令我们都可以手动模拟的，但是模拟一次系统不出问题，不代表就一定不出问题，云计算的复杂业务调用关系就决定了故障注入必须是常态化的运行，这样才能在长时间，高频次的测试下，增大问题检出概率。所以故障注入系统应该构建成自动化的方式，并且每次执行还要记录详细的故障注入步骤，这样在检测出问题时，方便复现和修复后的再次验证。&lt;/p&gt;
&lt;h2 id=&quot;质量监测体系&quot;&gt;质量监测体系&lt;/h2&gt;
&lt;p&gt;前面我们从代码质量和业务验证角度，阐述了云计算测试技术的几个方向。但实践中发现，还有些场景和问题，上述场景并不能很好的覆盖到。比如句柄和内存泄露等问题，这种问题需要一定的时间的发酵，且单纯的从业务角度，感知也不会太明显。再比如，前面说到的故障注入，那故障发生后，如何判断系统是否工作正常？如何判断一个故障对系统的影响范围？这些问题必须明确，因为只有这样，我们才能更好的分析问题，明确问题的修复优先级。&lt;/p&gt;
&lt;p&gt;实践发现，要解决上述问题，我们还需要构建完善的&lt;strong&gt;质量监测体系&lt;/strong&gt;，辅助做好业务质量的测试和评估。&lt;/p&gt;
&lt;h4 id=&quot;业务质量监测&quot;&gt;业务质量监测&lt;/h4&gt;
&lt;p&gt;为了更好的运营系统，服务客户，所有云计算系统一般都会有一整套的线上监控体系。但在测试环境同样运营这一套系统的却很少，我认为这是很大缺失的。测试环境我们可以不照搬线上完整的一套，但是入口级的业务质量必须要有。这样在做故障模拟测试时，就可以及时的感知系统的整体质量。同样上面提到一些服务本身的内建质量也应该加上，比如内存，句柄等等。真正能在集成测试和灰度验收时，检测到更多的问题。&lt;/p&gt;
&lt;p&gt;传统的验收测试，比较关注业务本身的&quot;true与false&quot;,但在实际生产的复杂场景，还有更多的指标需要关注。比如响应时间。如果说业务验收从E2E角度来考虑，那么业务质量监测就是从整个系统端来考量。各有各的优势，在质量保证体系里，二者缺一不可。&lt;/p&gt;
&lt;h2 id=&quot;云计算测试技术体系图&quot;&gt;云计算测试技术体系图&lt;/h2&gt;
&lt;p&gt;总结我上面描述的测试技术体系，可以用下面这个图来概况:&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/293394/201806/293394-20180619224028180-1152982931.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;里程碑&quot;&gt;里程碑&lt;/h2&gt;
&lt;p&gt;很多时候，很多测试团队会做着做着，把自己做成人力外包团队，输出QA 人力 Resource，这是是非常low的。七牛的CEO老许曾说过，七牛的所有团队都应该是产品团队，包括HR。Can't agree more!! 我认为理想中的测试团队不光要拥有业务质量的全局视角，还要能深入到业务构建的底层技术细节，然后围绕业务质量方向，打造核心产品或平台，以此来提供高价值的质量保证服务。测试不在于人，而在于服务。测试服务不是测试同学的玩物，应该是围绕解决如何保证业务质量的难题。同时，单个人，或者单个组织来做质量保证必有其局限性，质量全员建设才是王道。&lt;/p&gt;
&lt;p&gt;需要明确的是，上面总结的是测试技术体系，并不是完整的质量保证体系。完整的质量保证体系，不光有技术层面，还要有一定的流程规范来约束。&lt;/p&gt;
&lt;p&gt;另一方面，要达到我上面所说的测试技术体系，常规的测试团队很难完成，而应该结合基础设施团队共同构建才能达到。这里不是常规的缺乏质量sense的基础设施团队，而应该是真正的Test Infrastructure Team。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;童鞋，点个赞吧(⊙o⊙)？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Email: &lt;a href=&quot;mailto:jinsdu@outlook.com&quot;&gt;jinsdu@outlook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blog: &lt;a href=&quot;http://www.cnblogs.com/jinsdu/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/jinsdu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/CarlJi&quot; class=&quot;uri&quot;&gt;https://github.com/CarlJi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎: &lt;a href=&quot;https://www.zhihu.com/people/jinsdu/posts&quot; class=&quot;uri&quot;&gt;https://www.zhihu.com/people/jinsdu/posts&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Tue, 19 Jun 2018 14:43:00 +0000</pubDate>
<dc:creator>大卡尔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinsdu/p/9201413.html</dc:identifier>
</item>
<item>
<title>带你玩转七牛云存储——高级篇 - 王磊的博客</title>
<link>http://www.cnblogs.com/vipstone/p/9201525.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/9201525.html</guid>
<description>&lt;ol&gt;&lt;li&gt;支持各种尺寸的图片缩放；&lt;/li&gt;
&lt;li&gt;支持图片自动压缩；&lt;/li&gt;
&lt;li&gt;支持水印添加：图片水印、文字水印两种模式；&lt;/li&gt;
&lt;li&gt;图片防盗链，限制访问来源；&lt;/li&gt;
&lt;li&gt;设置ip黑白名单，防止恶意盗刷、攻击；&lt;/li&gt;
&lt;li&gt;自定义图片域名，看起来更具有归属性；&lt;/li&gt;
&lt;li&gt;统计图片的各种访问数据；&lt;/li&gt;
&lt;li&gt;支持上传日志文件，可保存30天，便于排除程序问题；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;灵活的水印配置：可设置位置、透明度等，同时支持图片和文字两种水印模式，如图：&lt;br/&gt;&lt;img src=&quot;http://icdn.apigo.cn/blog/%E6%B0%B4%E5%8D%B0.png?imageView2/0/w/500/h/500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://icdn.apigo.cn/blog/%E4%B8%83%E7%89%9B%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E9%85%8D%E7%BD%AE.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图片处理里面最好用的是生成各种缩略图，超好用只需要加参数就好。&lt;/p&gt;
&lt;p&gt;比如我需要得到一张图等比200*200的缩略图，只需要在原有连接的基础上加上“?imageView2/0/w/200/h/200”即可，全部路径如下：&lt;a href=&quot;http://icdn.apigo.cn/68.jpg?imageView2/0/w/200/h/200&quot; class=&quot;uri&quot;&gt;http://icdn.apigo.cn/68.jpg?imageView2/0/w/200/h/200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多详细文档：&lt;a href=&quot;https://developer.qiniu.com/dora/manual/1279/basic-processing-images-imageview2&quot; class=&quot;uri&quot;&gt;https://developer.qiniu.com/dora/manual/1279/basic-processing-images-imageview2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传步骤&quot;&gt;上传步骤&lt;/h3&gt;
&lt;p&gt;简单来说，图片上传分为两步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据AccessKey + SecretKey （可在个人中心=》秘钥管理查看） + bucket（存储空间名称），生成token；&lt;/li&gt;
&lt;li&gt;使用图片源（文件流/文件地址）和token提交信息到七牛存储图片；&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;上传途径&quot;&gt;上传途径&lt;/h3&gt;
&lt;p&gt;上传途径分为两种：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;服务器端上传：分为本地文件上传、字节数组上传；&lt;/li&gt;
&lt;li&gt;客户端上传：Base64直接上传；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文服务器端使用nodejs开发，客户端使用javascript开发。&lt;/p&gt;
&lt;h3 id=&quot;服务器端-nodejs上传&quot;&gt;服务器端-nodejs上传&lt;/h3&gt;
&lt;p&gt;在开始上传之前，首先需要获取一下七牛的token，也就是上传步骤的第一步，这个token是通用的，不管是服务器上传还是客户端上传token值都是通用的，实现代码也是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取token&lt;/strong&gt;&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用npm安装七牛SDK：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install qiniu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用下面代码获取uploadToken：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;var accessKey = 'xxx'; //可在个人中心=》秘钥管理查看
var secretKey = 'xxx'; //可在个人中心=》秘钥管理查看
var bucket = &quot;apigo&quot;;  //存储空间名称
var mac = new qiniu.auth.digest.Mac(accessKey, secretKey);
var options = {
  scope: bucket
}
var putPolicy = new qiniu.rs.PutPolicy(options);
var uploadToken = putPolicy.uploadToken(mac);
return this.jsonp({ 'token': uploadToken });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：下面所有的实现方面里的uploadToken都是从本方法获取的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：本地文件上传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var config = new qiniu.conf.Config();
config.zone = qiniu.zone.Zone_z1; // 空间对应的机房
var formUploader = new qiniu.form_up.FormUploader(config);
var putExtra = new qiniu.form_up.PutExtra();

var key='test.png';  //上传到服务器的名称
var localFile = &quot;D:\\img\\test.png&quot;; // 本地文件路径
formUploader.putFile(uploadToken, key, localFile, putExtra, function (respErr,
  respBody, respInfo) {
  if (respErr) {
    throw respErr;
  }
  if (respInfo.statusCode == 200) {
    console.log(respBody);
  } else {
    console.log(respInfo.statusCode);
    console.log(respBody);
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，机房对应的对象如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;华东 qiniu.zone.Zone_z0&lt;/li&gt;
&lt;li&gt;华北 qiniu.zone.Zone_z1&lt;/li&gt;
&lt;li&gt;华南 qiniu.zone.Zone_z2&lt;/li&gt;
&lt;li&gt;北美 qiniu.zone.Zone_na0&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;方式二：字节数组上传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完整实现思路：前台页面input[type=file]Post请求到后台，后台转换读取文件流对象传递给七牛云，使用putStream保存文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前台代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;form action=&quot;http://127.0.0.1:8360/qiniu/upload&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
    &amp;lt;input name=&quot;f&quot; type=&quot;file&quot; /&amp;gt;
    &amp;lt;button type=&quot;submit&quot;&amp;gt;提交&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;nodejs服务器端代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var _file = this.file(&quot;f&quot;); //前台type=file post过来的文件
var putExtra = new qiniu.form_up.PutExtra();
var config = new qiniu.conf.Config();
config.zone = qiniu.zone.Zone_z1; // 空间对应的机房
var formUploader = new qiniu.form_up.FormUploader(config);
var key = &quot;test1.png&quot;;
var readStream = fs.createReadStream(_file.path); //文件流对象
formUploader.putStream(uploadToken, key, readStream, putExtra, function (respErr,
  respBody, respInfo) {
  if (respErr) {
    throw respErr;
  }
  if (respInfo.statusCode == 200) {
    console.log(respBody);
  } else {
    console.log(respInfo.statusCode);
    console.log(respBody);
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方式三：Base64转字节数组上传&lt;/strong&gt;&lt;br/&gt;前后台使用Base64进行数据传递也是比较常用的方式之一，尤其是不同平台的传值，比如手机、平板Post数据给PC，类似方式二的实现方式，我们只是把前台传递给我们的Base64转换成文件流对象，使用putStream进行上传，具体nodejs代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import { Duplex } from 'stream';

var b64string = 'xxx';   //base64必须去掉头文件（data:image/png;base64,）
var buff = new Buffer(b64string, 'base64')
var stream = new Duplex();
stream.push(buff);
stream.push(null);

var putExtra = new qiniu.form_up.PutExtra();
var config = new qiniu.conf.Config();
config.zone = qiniu.zone.Zone_z1; // 空间对应的机房
var formUploader = new qiniu.form_up.FormUploader(config);
var key = &quot;test.png&quot;;
formUploader.putStream(uploadToken, key, stream, putExtra, function (respErr,
  respBody, respInfo) {
  if (respErr) {
    throw respErr;
  }
  if (respInfo.statusCode == 200) {
    console.log(respBody);
  } else {
    console.log(respInfo.statusCode);
    console.log(respBody);
  }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的一点是base64字符串必须去掉头文件（&lt;a href=&quot;data:image/png;base64&quot; class=&quot;uri&quot;&gt;data:image/png;base64&lt;/a&gt;,）才能进行字节流的转换。&lt;/p&gt;
&lt;h3 id=&quot;客户端-javascript上传&quot;&gt;客户端-javascript上传&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;步骤一：引用qiniu.min.js&lt;/strong&gt;&lt;br/&gt;先引入qiniu.min.js文件，格式：&lt;a href=&quot;https://unpkg.com/qiniu-js@&quot; class=&quot;uri&quot;&gt;https://unpkg.com/qiniu-js@&lt;/a&gt;/dist/qiniu.min.js&lt;/p&gt;
&lt;p&gt;其中为版本号，查看发布的版本版：&lt;a href=&quot;https://github.com/qiniu/js-sdk/releases&quot; class=&quot;uri&quot;&gt;https://github.com/qiniu/js-sdk/releases&lt;/a&gt; ，示例：&lt;a href=&quot;https://unpkg.com/qiniu-js@2.3.0/dist/qiniu.min.js&quot; class=&quot;uri&quot;&gt;https://unpkg.com/qiniu-js@2.3.0/dist/qiniu.min.js&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://unpkg.com/qiniu-js@2.3.0/dist/qiniu.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;步骤二：获取uploadToken&lt;/strong&gt;&lt;br/&gt;参考上文获取uploadToken通用方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤三：base64模式直接上传&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//base64模式直接上传
var base64 = 'xxx'.replace('data:image/png;base64,', '');
var imgName = toBase64('xxx.png'); //自定义文件名必须是base64格式的
var url = &quot;http://upload.qiniup.com/putb64/-1/key/&quot; + imgName; //非华东空间需要根据注意事项-修改上传域名(upload.qiniup.com)
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function () {
    if (xhr.readyState == 4) {
        //上传成功，返回信息
        console.log(xhr.responseText);
    }
}
xhr.open(&quot;POST&quot;, url, true);
xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;);
xhr.setRequestHeader(&quot;Authorization&quot;, &quot;UpToken &quot; + uploadToken);
xhr.send(base64);


function toBase64(data) {
    var toBase64Table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var base64Pad = '=';
    var result = '';
    var length = data.length;
    var i;
    // Convert every three bytes to 4 ascii characters.                                                   

    for (i = 0; i &amp;lt; (length - 2); i += 3) {
        result += toBase64Table[data.charCodeAt(i) &amp;gt;&amp;gt; 2];
        result += toBase64Table[((data.charCodeAt(i) &amp;amp; 0x03) &amp;lt;&amp;lt; 4) + (data.charCodeAt(i + 1) &amp;gt;&amp;gt; 4)];
        result += toBase64Table[((data.charCodeAt(i + 1) &amp;amp; 0x0f) &amp;lt;&amp;lt; 2) + (data.charCodeAt(i + 2) &amp;gt;&amp;gt; 6)];
        result += toBase64Table[data.charCodeAt(i + 2) &amp;amp; 0x3f];
    }

    // Convert the remaining 1 or 2 bytes, pad out to 4 characters.     
    if (length % 3) {
        i = length - (length % 3);
        result += toBase64Table[data.charCodeAt(i) &amp;gt;&amp;gt; 2];
        if ((length % 3) == 2) {
            result += toBase64Table[((data.charCodeAt(i) &amp;amp; 0x03) &amp;lt;&amp;lt; 4) + (data.charCodeAt(i + 1) &amp;gt;&amp;gt; 4)];
            result += toBase64Table[(data.charCodeAt(i + 1) &amp;amp; 0x0f) &amp;lt;&amp;lt; 2];
            result += base64Pad;
        } else {
            result += toBase64Table[(data.charCodeAt(i) &amp;amp; 0x03) &amp;lt;&amp;lt; 4];
            result += base64Pad + base64Pad;
        }
    }
    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意点:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;url参数注意空间存储区域，不同地域url地址不同，华东upload.qiniup.com，华北upload-z1.qiniu.com，华南upload-z2.qiniu.com，北美upload-na0.qiniu.com；&lt;/li&gt;
&lt;li&gt;文件名（imgName）必须是base64格式的；&lt;/li&gt;
&lt;li&gt;请求头Authorization的值格式：&quot;UpToken &quot; + uploadToken（服务器端获取uploadToken，见上文）；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;更多开发语言：&lt;a href=&quot;https://developer.qiniu.com/sdk#official-sdk&quot; class=&quot;uri&quot;&gt;https://developer.qiniu.com/sdk#official-sdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文档：&lt;br/&gt;&lt;a href=&quot;https://developer.qiniu.com/kodo/kb/1326/how-to-upload-photos-to-seven-niuyun-base64-code&quot; class=&quot;uri&quot;&gt;https://developer.qiniu.com/kodo/kb/1326/how-to-upload-photos-to-seven-niuyun-base64-code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注册链接：&lt;a href=&quot;https://portal.qiniu.com/signup?code=3li1yhz9s7qky&quot; class=&quot;uri&quot;&gt;https://portal.qiniu.com/signup?code=3li1yhz9s7qky&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 14:32:00 +0000</pubDate>
<dc:creator>王磊的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipstone/p/9201525.html</dc:identifier>
</item>
<item>
<title>【java多线程】（6）---ThreadLocal - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9201038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9201038.html</guid>
<description>&lt;p&gt; 什么是ThreadLocal？&lt;/p&gt;
&lt;p&gt;        顾名思义它是local variable（&lt;span&gt;线程局部变量&lt;/span&gt;）。&lt;span&gt;它的功用非常简单，就是为每一个使用该变量的线程都提供一个变量值的副本，是每一个线程都可以独立地改变自己的副本，而不会和其它线程的副本冲突。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从线程的角度看，就好像每一个线程都完全拥有该变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;：ThreadLocal不是用来解决共享对象的多线程访问问题的。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、多线程共享成员变量&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt; 在多线程环境下，之所以会有并发问题，就是因为不同的线程会同时访问同一个共享变量，同时进行一系列的操作。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1、例如下面的形式&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个意思很简单，创建两个线程，a线程对全局变量+10，b线程对全局变量-10&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MultiThreadDemo {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Number {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt; value = 0&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;   &lt;span&gt;void&lt;/span&gt; increase() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个变量对于该线程属于局部变量&lt;/span&gt;
                value = 10&lt;span&gt;;
            Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot;increase value: &quot; +&lt;span&gt; value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;    &lt;span&gt;void&lt;/span&gt; decrease() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同样这个变量对于该线程属于局部变量       &lt;/span&gt;
              value = -10&lt;span&gt;;
            Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot;decrease value: &quot; +&lt;span&gt; value);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Number number = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Number();
        Thread a &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    number.increase();
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread b &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    number.decrease();
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        a.start();
        b.start();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思考：可能运行的结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('99f98119-ee06-4063-8c00-b7cad27d1d16')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_99f98119-ee06-4063-8c00-b7cad27d1d16&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_99f98119-ee06-4063-8c00-b7cad27d1d16&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('99f98119-ee06-4063-8c00-b7cad27d1d16',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_99f98119-ee06-4063-8c00-b7cad27d1d16&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;运行结果(一种可能)
increase value: -10
decrease value: -10
 * 
 *你或许在想不对啊，按常理不是一个输出10，一个输出-10嘛
 *原因分析：
 *其实很简单，就是当a执行value = 10时,还没有等到下面输出，这个时候
 * b线程获得cpu执行权value = -10;这个时候a在获得cpu执行权的时候输出当然是-10。
 * 这里的根本原因是线程的赋值和输出一起不是原子性的。
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;运行结果&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;为了验证我上面的原因分析，我修改下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;    &lt;span&gt;void&lt;/span&gt; decrease() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我在decrease()新添加这个输出，看下输出结果&lt;/span&gt;
            System.out.println(&quot;increase value: &quot; +&lt;span&gt; value);
              value &lt;/span&gt;= -10&lt;span&gt;;
            Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot;decrease value: &quot; +&lt;span&gt; value);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再看运行结果：（和上面分析的一样）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201806/1090617-20180619201602431-826730100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思考：如果在 private volatile  int value = 0;在这里加上volatile关键字结果如何？&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('859a870d-c7af-4be5-af74-567d56348aaa')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_859a870d-c7af-4be5-af74-567d56348aaa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_859a870d-c7af-4be5-af74-567d56348aaa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('859a870d-c7af-4be5-af74-567d56348aaa',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_859a870d-c7af-4be5-af74-567d56348aaa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;结果会和上面没有任何区别，为什么
 *volatile的特点是保证可见性，但不保证原子性，你这a获得cpu改成value = 10，
 *这个时候b获得线程，它是知道value变成10了，但不影响它在把值赋值成-10。
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;volatile结果&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;所以总的来说：&lt;/p&gt;
&lt;p&gt;      a线程和b线程会操作同一个 number 中 value，那么输出的结果是不可预测的，因为当前线程修改变量之后但是还没输出的时候，变量有可能被另外一个线程修改.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当如如果要保证输出我当前线程的值呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     其实也很简单：在 increase() 和 decrease() 方法上加上 &lt;span&gt;synchronized&lt;/span&gt; 关键字进行同步，这种做法其实是将 value 的 赋值 和 打印 包装成了一个原子操作，也就是说两者要么同时进行，要不都不进行，中间不会有额外的操作。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、多线程不共享全局变量&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;     上面的例子我们可以看到a线程操作全局变量,b在去去全局成员变量是a已经修改过的。&lt;/p&gt;
&lt;p&gt;      如果我们需要 value 只属于 increase 线程或者 decrease 线程，而不是被两个线程共享，那么也不会出现竞争问题。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1、方式一&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;     很简单，为每一个线程定义一份只属于自己的局部变量。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; increase() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为每一个线程定义一个局部变量，这样当然就是线程私有的&lt;/span&gt;
     &lt;span&gt;int&lt;/span&gt; value = 10&lt;span&gt;;
     Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
     System.out.println(&lt;/span&gt;&quot;increase value: &quot; +&lt;span&gt; value);
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    不论 value 值如何改变，都不会影响到其他线程，因为在每次调用 increase 方法时，都会创建一个 value 变量，该变量只对当前调用 increase 方法的线程可见。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、方式二&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    借助于上面这种思想，我们可以创建一个map，将当前线程的 id 作为 key，副本变量作为 value 值，下面是一个实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleImpl {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个相当于工具类&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomThreadLocal {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Map&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; Map&amp;lt;Long, Integer&amp;gt; cacheMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; defaultValue ;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CustomThreadLocal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value) {
            defaultValue &lt;/span&gt;=&lt;span&gt; value;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行封装一层，其实就是通过key得到value&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer get() {
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; id =&lt;span&gt; Thread.currentThread().getId();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cacheMap.containsKey(id)) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cacheMap.get(id);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; defaultValue;
        }
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同样存放key，value&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; set(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value) {
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; id =&lt;span&gt; Thread.currentThread().getId();
            cacheMap.put(id, value);
        }
    }
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个类引用工具类，当然也可以在这里写map。&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Number {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; CustomThreadLocal value = &lt;span&gt;new&lt;/span&gt; CustomThreadLocal(0&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; increase()  {
            value.set(&lt;/span&gt;10&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(&lt;/span&gt;&quot;increase value: &quot; +&lt;span&gt; value.get());
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; decrease()  {
            value.set(&lt;/span&gt;-10&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Thread.sleep(&lt;/span&gt;10&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(&lt;/span&gt;&quot;decrease value: &quot; +&lt;span&gt; value.get());
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Number number = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Number();
        Thread a &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                    number.increase();     
            }
        });

        Thread b &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {              
                    number.decrease();            
            }
        });

        a.start();
        b.start();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思考，运行结果如何？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;运行结果（其中一种）：&lt;/span&gt;
increase value: 0&lt;span&gt;
decrease value: &lt;/span&gt;-10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      按照常理来讲应该是一个10，一个-10，怎么都想不通会出现0，也没有想明白是哪个地方引起的这个线程不同步，毕竟我这里两个线程各放各的key和value值，而且key也不一样&lt;/p&gt;
&lt;p&gt;为什么出现有一个不存在key值，而取出默认值0。&lt;/p&gt;
&lt;p&gt;     其实原因就在HashMap是线程不安全的，并发的时候设置值，可能导致冲突，另一个没设置进去。&lt;span&gt;如果这个改成Hashtable,就发现永远输出10和-10两个值&lt;/span&gt;。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;三、ThreadLocal&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;     其实上面的方式二实现的功能和ThreadLocal像，只不过ThreadLocal肯定更完美。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1、了解ThreadLocal类提供的几个方法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;public&lt;/span&gt;&lt;span&gt; T get() { }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; set(T value) { }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove() { }
   &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; T initialValue() { }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  &lt;span&gt;  get()方法&lt;/span&gt;：获取ThreadLocal在当前线程中保存的变量副本。&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;set()方法：&lt;/span&gt;用来设置当前线程中变量的副本。&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;remove()方法&lt;/span&gt;：用来移除当前线程中变量的副本。&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;initialValue()方法&lt;/span&gt;：是一个protected方法，一般是用来在使用时进行重写的，它是一个延迟加载方法，下面会详细说明。&lt;/p&gt;
&lt;p&gt;这里主要看get和set方法源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; set(T value) {
        Thread t &lt;/span&gt;=&lt;span&gt; Thread.currentThread();
        ThreadLocalMap map &lt;/span&gt;=&lt;span&gt; getMap(t);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (map != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            map.set(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, value);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            createMap(t, value);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T get() {
        Thread t &lt;/span&gt;=&lt;span&gt; Thread.currentThread();
        ThreadLocalMap map &lt;/span&gt;=&lt;span&gt; getMap(t);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (map != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            ThreadLocalMap.Entry e &lt;/span&gt;= map.getEntry(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                @SuppressWarnings(&lt;/span&gt;&quot;unchecked&quot;&lt;span&gt;)
                T result &lt;/span&gt;=&lt;span&gt; (T)e.value;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; setInitialValue();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这个可以总结出：&lt;/p&gt;
&lt;p&gt;  （1）&lt;span&gt;get和set底层还是一个ThreadLocalMap实现存取值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  （2）&lt;span&gt;我们在放的时候只放入value值，那么它的key其实就是ThreadLocal类的实例对象（也就是当前线程对象）&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、小案例&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建两个ThreadLocal对象&lt;/span&gt;
    ThreadLocal&amp;lt;Long&amp;gt; longLocal = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Long&amp;gt;&lt;span&gt;();
    ThreadLocal&lt;/span&gt;&amp;lt;String&amp;gt; stringLocal = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt;&lt;span&gt;();   
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Test test = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Test();
        ExecutorService  executors&lt;/span&gt;= Executors.newFixedThreadPool(2&lt;span&gt;);
        executors.execute(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {        
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                test.longLocal.set(Thread.currentThread().getId());
                test.stringLocal.set(Thread.currentThread().getName());
                System.out.println(test.longLocal.get());
                System.out.println(test.stringLocal.get());
            }
        });
        executors.execute(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {        
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                test.longLocal.set(Thread.currentThread().getId());
                test.stringLocal.set(Thread.currentThread().getName());
                System.out.println(test.longLocal.get());
                System.out.println(test.stringLocal.get());
            }
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思考，运行结果如何？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('416c5be9-e7df-467a-894d-6609c078fd83')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_416c5be9-e7df-467a-894d-6609c078fd83&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_416c5be9-e7df-467a-894d-6609c078fd83&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('416c5be9-e7df-467a-894d-6609c078fd83',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_416c5be9-e7df-467a-894d-6609c078fd83&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;运行结果（其中一种可能）&lt;/span&gt;
11
10&lt;span&gt;
pool&lt;/span&gt;-1-thread-2&lt;span&gt;
pool&lt;/span&gt;-1-thread-1
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明已经实现了共享变量私有&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;运行结果&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;四、ThreadLocal的应用场景&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt;   最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1、 数据库连接管理&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;同一事务多DAO共享同一Connection，必须在一个共同的外部类使用ThreadLocal保存Connection。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnectionManager {    
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ThreadLocal&amp;lt;Connection&amp;gt; connectionHolder = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;Connection&amp;gt;&lt;span&gt;() {    
        @Override    
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Connection initialValue() {    
            Connection conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;    
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {    
                conn &lt;/span&gt;=&lt;span&gt; DriverManager.getConnection(    
                        &lt;/span&gt;&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;username&quot;&lt;span&gt;,    
                        &lt;/span&gt;&quot;password&quot;&lt;span&gt;);    
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {    
                e.printStackTrace();    
            }    
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; conn;    
        }    
    };    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Connection getConnection() {    
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; connectionHolder.get();    
    }    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setConnection(Connection conn) {    
        connectionHolder.set(conn);    
    }    
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这样就保证了一个线程对应一个数据库连接，保证了事务。因为事务是依赖一个连接来控制的，如commit,rollback,都是数据库连接的方法。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、Session管理&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ThreadLocal threadSession = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ThreadLocal();
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Session getSession() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InfrastructureException {
    Session s &lt;/span&gt;=&lt;span&gt; (Session) threadSession.get();
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            s &lt;/span&gt;=&lt;span&gt; getSessionFactory().openSession();
            threadSession.set(s);
        }
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (HibernateException ex) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InfrastructureException(ex);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;参考&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;     1、&lt;a href=&quot;https://www.cnblogs.com/zhangjk1993/p/6641745.html&quot; target=&quot;_blank&quot;&gt;【Java 并发】详解 ThreadLocal&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;     2、&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3920407.html&quot; target=&quot;_blank&quot;&gt;Java并发编程：深入剖析ThreadLocal &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;     3、&lt;a href=&quot;https://www.cnblogs.com/xzwblog/p/7227509.html&quot; target=&quot;_blank&quot;&gt;对ThreadLocal中的key和value &lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。少校【12】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 12:54:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9201038.html</dc:identifier>
</item>
<item>
<title>漫谈反射在业务代码中的应用 - jy的blog</title>
<link>http://www.cnblogs.com/jy107600/p/9200816.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jy107600/p/9200816.html</guid>
<description>&lt;p&gt;    很多人都觉得写业务代码很枯燥，没有什么技术含量，大部分就是if-else逻辑的叠加。写业务代码确实没有写中间件来的高大上，但是我觉得不管是写什么代码，想要写出好的代码都不是一件容易的事情。这不，最近我们生产系统的版本迭代过程中一个需求就让我思考了很多，并且在实现方式上做得更加的优雅。&lt;/p&gt;
&lt;p&gt;   场景如下：我们在生产系统中需要维护各个游戏的状态，当需要上线一个游戏时，需要对该游戏的各方面的信息做一遍检查，当检查所有的字段都达到要求之后，再切换该游戏的状态为已上线。首先，针对安卓游戏，我们需要检查该游戏的资质审核状态，运营包地址和渠道包地址是否分发完成，基本信息中的必填字段是否非空，是否接入公司的sdk，若接入sdk，则还需要检查该游戏的支付信息中的必填字段是否已经完成等等，针对ios游戏，h5游戏以及网页游戏，我们需要检查的字段各不相同。&lt;/p&gt;
&lt;p&gt;   首先看到这个需求，给人的第一感觉是很繁琐，每个游戏的字段很多，由于在后台使用了mbg，游戏的支付信息，安装包信息和基本信息等字段并不在同一个bean中，并且我们还要区分游戏的类型，不同的游戏要检查的字段也不尽相同，最后，关于游戏的基本信息，支付信息等信息的必填字段还在不断的增加，这一部分的业务的变化也较为频繁。若后续的必填字段有调整或者新增，那这里的代码也要做改动。&lt;/p&gt;
&lt;p&gt;   好了，我们立马动手写，取出这个游戏的所有的字段，为需要校验的字段去一个个的判断是否符合要求......这时候，我们发现字段太多了，写起来很累，而且这段代码无论是从可读性和可扩展性上来讲，都做的不够好。在非常沮丧的时候，我想到了反射，如果把反射用在这里，是不是使得代码中避免了大量的if(XXX == null)这样的语句呢，赶紧动手写。代码如下：&lt;/p&gt;
&lt;p&gt;   首先把最核心的判断解决了，如果该游戏有一个字段不符合要求，直接抛出我们自定义的异常传给前端展示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 通过反射比较配置的必填字段和数据库取出的bean，找出必填的字段是不是空，传入gameId便于直接返回ajax信息
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tGameInfo
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; gameRequiredInfoConfig
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; gameId
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; gameInfoType
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; GameRequiredInfoException
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; reflectCheckRequiredInfo(Object tGameInfo, List&amp;lt;String&amp;gt; gameRequiredInfoConfig, &lt;span&gt;long&lt;/span&gt; gameId, &lt;span&gt;int&lt;/span&gt; gameInfoType) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; GameRequiredInfoException {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 反射model，校验gameInfo的必填属性的值是不是空&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             Field[] gameInfoFields =&lt;span&gt; tGameInfo.getClass().getDeclaredFields();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Field gameInfoField : gameInfoFields) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 gameInfoField.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (gameRequiredInfoConfig.contains(gameInfoField.getName()) &amp;amp;&amp;amp;&lt;span&gt;&lt;span&gt; Objects.isNull(gameInfoField.get(tGameInfo)&lt;/span&gt;)) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (gameInfoType ==&lt;span&gt; GameInfoType.BASE.getValue()) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; GameRequiredInfoException(&quot;该游戏基本信息不完整，请前往&amp;lt;a href=\'&quot; + applicationConfig.getBaseUrl() + &quot;/game/editBaseInfo?gameId=&quot; + gameId + &quot;\' target=\&quot;_blank\&quot;&amp;gt;游戏详情&amp;lt;/a&amp;gt;页面完善资料后重试！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (gameInfoType ==&lt;span&gt; GameInfoType.PAY.getValue()) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; GameRequiredInfoException(&quot;该游戏支付信息不完整，请前往&amp;lt;a href=\'&quot; + applicationConfig.getBaseUrl() + &quot;/game/editInterfaceInfo?gameId=&quot; + gameId + &quot;\' target=\&quot;_blank\&quot;&amp;gt;游戏详情&amp;lt;/a&amp;gt;页面完善资料后重试！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (gameInfoType ==&lt;span&gt; GameInfoType.PACKAGE.getValue()) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; GameRequiredInfoException(&quot;该游戏安装包信息不完整，请前往&amp;lt;a href=\'&quot; + applicationConfig.getBaseUrl() + &quot;/game/editPackageInfo?gameId=&quot; + gameId + &quot;\' target=\&quot;_blank\&quot;&amp;gt;游戏详情&amp;lt;/a&amp;gt;页面完善资料后重试！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalAccessException e) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; GameRequiredInfoException(&quot;获取字段信息失败，后台配置错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  稍微解释一下：tGameInfo是我们通过mbg从数据库取出来的bean，通过反射我们可以查看这个字段的值是否符合要求，gameRequiredInfoConfig是我们将需要校验的字段做成了一个spring配置，gameInfoType是我们自定义的枚举类型，便于个性化的向前端展示校验的结果。GameRequiredInfoException是我们自定义的异常，便于我们在上层调用时统一捕捉这个异常。&lt;/p&gt;
&lt;p&gt;下面是我们做的spring的配置，配置了不同类型的游戏需要校验的字段信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;gameRequiredInfoConfig&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.jy.game.gamecms.config.GameRequiredInfoConfig&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;所有游戏必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;baseGameRequiredInfo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;gameName&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;initial&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                ...
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;安卓游戏必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;androidGameRequiredInfo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;needAuth&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;capture&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;captureAspectRatio&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                ...
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ios游戏必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        ...
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;web游戏必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;       ...
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;h5游戏必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        ...
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ios安装包信息必填字段&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        ...
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面开始执行检查流程：对于所有的游戏，都要检查基本信息的必填字段：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 校验游戏基本信息必填字段
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tGameInfo
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; GameRequiredInfoException
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; checkBaseGameRequiredInfo(TGameInfo tGameInfo) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; GameRequiredInfoException {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先校验公共字段&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         List&amp;lt;String&amp;gt; baseGameRequiredInfo =&lt;span&gt; gameRequiredInfoConfig.getBaseGameRequiredInfo();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接入sdk，还要校验sdk类型&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (1 ==&lt;span&gt; tGameInfo.getIqiyiSdk().intValue()) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             baseGameRequiredInfo.add(&quot;sdkType&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        reflectCheckRequiredInfo(tGameInfo, baseGameRequiredInfo, tGameInfo.getGameId(), GameInfoType.BASE.getValue());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验安卓特殊必填字段&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (tGameInfo.getTerminal().intValue() ==&lt;span&gt; Terminal.ANDROID.getValue()) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             List&amp;lt;String&amp;gt; androidGameRequiredInfo =&lt;span&gt; gameRequiredInfoConfig.getAndroidGameRequiredInfo();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            reflectCheckRequiredInfo(tGameInfo, androidGameRequiredInfo, tGameInfo.getGameId(), GameInfoType.BASE.getValue());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验ios特殊必填字段&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (tGameInfo.getTerminal().intValue() ==&lt;span&gt; Terminal.IOS.getValue()) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验h5特殊必填字段&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (tGameInfo.getTerminal().intValue() == Terminal.ANDROID_H5.getValue()&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验pc_web特殊必填字段&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (tGameInfo.getTerminal().intValue() ==&lt;span&gt; Terminal.PC_WEB.getValue()) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以看到，只需要从数据库取出这个游戏的信息，再根据游戏的类型，一起和我们做成的配置作为参数传入我们上面封装好的方法中，就可以完成所有的字段校验。&lt;/p&gt;
&lt;p&gt;最后，我们只需要在service里根据需求执行校验流程，调用相应的方法即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行检查流程&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;安卓检验运营包信息&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (dbGameInfo.getTerminal().intValue() ==&lt;span&gt; Terminal.ANDROID.getValue()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    checkAndroidOperatePackage(dbGameInfo);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查基本必填字段&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                checkBaseGameRequiredInfo(dbGameInfo);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接入sdk还要检查支付必填字段&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (dbGameInfo.getIqiyiSdk().intValue() == 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    checkGamePayRequiredInfo(dbGameInfo.getGameId());
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;IOS要校验安装包的必填信息&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (dbGameInfo.getTerminal() ==&lt;span&gt; Terminal.IOS.getValue()) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    checkIosPackageInfo(dbGameInfo.getGameId());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (GameRequiredInfoException e) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; AjaxResult.fail(e.getMessage());
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个实现方案，最大的好处就是，后面的扩展和修改特别的方便，只需要改动配置就行，避免了硬编码，做到了业务和代码的解耦，并且可读性很高，实现起来逻辑简单明了。&lt;/p&gt;
&lt;p&gt;当然，缺点也是有的，那就是反射的性能没有手动去判断的实现方式高，并且，增加了代码运行的不确定性。&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 12:45:00 +0000</pubDate>
<dc:creator>jy的blog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jy107600/p/9200816.html</dc:identifier>
</item>
<item>
<title>Python爬虫之多线程下载豆瓣Top250电影图片 - jclian91</title>
<link>http://www.cnblogs.com/jclian91/p/9200948.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jclian91/p/9200948.html</guid>
<description>[unable to retrieve full-text content]爬虫项目介绍  本次爬虫项目将爬取豆瓣Top250电影的图片，其网址为：https://movie.douban.com/top250， 具体页面如下图所示：  本次爬虫项目将分别不使用多线程和使用多线程来完成，通过两者的对比，显示出多线程在爬虫项目中的巨</description>
<pubDate>Tue, 19 Jun 2018 12:31:00 +0000</pubDate>
<dc:creator>jclian91</dc:creator>
<dc:identifier>http://www.cnblogs.com/jclian91/p/9200948.html</dc:identifier>
</item>
<item>
<title>[java源码解析]对HashMap源码的分析（二） - 蕉爷</title>
<link>http://www.cnblogs.com/Alear/p/9200904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Alear/p/9200904.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Alear/p/9196726.html&quot;&gt;上文&lt;/a&gt;我们讲了HashMap那骚骚的逻辑结构，这一篇我们来吹吹它的实现思想，也就是算法层面。有兴趣看下或者回顾上一篇HashMap逻辑层面的，可以看下&lt;a href=&quot;https://www.cnblogs.com/Alear/p/9196726.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;HashMap源码解析（一）&lt;/a&gt;。&lt;br/&gt;使用了哈希表得“拉链法”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/777890/201806/777890-20180619200802478-1540169922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我打算按这个顺序来讲HashMap：几个关键属性 -&amp;gt; 构造方法-&amp;gt; 存取元素方法 -&amp;gt;解决hash冲突方法-&amp;gt;HashMap扩容问题。&lt;/p&gt;
&lt;p&gt;4个关键属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *HashMap的存储大小
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * HashMap的大小临界值，如果达到这个值就需要重新分配大小
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; threshold;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 负载因子(默认值一般是0.75)，哈希表在其容量自动增加之前可以达到多满的一种尺度。
     *当哈希表中的条目数超出了 负载因子与当前容量的乘积时，
     *则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。
     *负载因子过高虽然减少了空间开销，但同时也增加了查询成本
     *    static final float DEFAULT_LOAD_FACTOR = 0.75f;
     * &lt;/span&gt;&lt;span&gt;@serial&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * HashMap修改总数（修改数+删除数）
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; modCount;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;构造方法 ：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;对四个构造函数的简单描述 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认构造函数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashMap();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定“容量大小”的构造函数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; initialCapacity);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  指定“容量大小”和“负载因子’‘的构造函数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) ;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 包含”子Map的构造函数’&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; HashMap(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt; m);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    详细描述：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
  *&lt;span&gt;默认构造 
     &lt;/span&gt;*使用默认负载因子DEFAULT_LOAD_FACTOR（0.75&lt;span&gt;）以及
     &lt;/span&gt;*&lt;span&gt;默认容量大小  DEFAULT_INITIAL_CAPACITY
     &lt;/span&gt;*/
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashMap() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *指定负载因子以及容量大小构造函数（前三个构造函数以这个构造函数为核心对‘容量大小’和‘负载因子’进行不同的赋值，来达到不同构造函数的效果)
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  initialCapacity the initial capacity 容量大小
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  loadFactor      the load factor 负载因子值
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IllegalArgumentException if the initial capacity is negative
     * or the load factor is nonpositive
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 容量大小不能小于0 &lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;lt; 0&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal initial capacity: &quot; +&lt;span&gt;
                                               initialCapacity);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HashMap最大容量不能超过MAXIMUM_CAPACITY&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt;&lt;span&gt; MAXIMUM_CAPACITY)
            initialCapacity &lt;/span&gt;=&lt;span&gt; MAXIMUM_CAPACITY;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (loadFactor &amp;lt;= 0 ||&lt;span&gt; Float.isNaN(loadFactor))
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal load factor: &quot; +&lt;span&gt;
                                               loadFactor);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; loadFactor;
        threshold &lt;/span&gt;=&lt;span&gt; initialCapacity;
        init();
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 包含子Map的构造函数
     * 主要对通过对子Map的容量大小的处理给本HashMap的容量大小赋值
     *以及clone子Map给本HashMap
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; HashMap(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt;&lt;span&gt; m) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子Map的条目数/负载因子+1会大致等于子 Map的容量大小，通过比较当前子Map的容量大小和
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认容易大小对比，找出最大的那个作为该HashMap的容量大小&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;(Math.max((&lt;span&gt;int&lt;/span&gt;) (m.size() / DEFAULT_LOAD_FACTOR) + 1&lt;span&gt;,
                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不让容量大小超过MAXIMUM_CAPACITY ，让容量大小一直保持为2的幂次方&lt;/span&gt;
&lt;span&gt;        inflateTable(threshold);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将子Map的元素全部添加到本HashMap中。&lt;/span&gt;
&lt;span&gt;        putAllForCreate(m);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;HashMap的存取方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　既然是线性数组，为什么能随机存取？这里HashMap用了一个小算法，大致是这样实现：&lt;/p&gt;
&lt;p&gt;　　// 存储时:&lt;br/&gt;　　int hash = key.hashCode(); // 这个hashCode方法这里不详述,只要理解每个key的hash是一个固定的int值&lt;br/&gt;　　int index = hash % Entry[].length;&lt;br/&gt;　　Entry[index] = value;&lt;/p&gt;
&lt;p&gt;　　// 取值时:&lt;br/&gt;　　int hash = key.hashCode();&lt;br/&gt;　　int index = hash % Entry[].length;&lt;br/&gt;　　return Entry[index];&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一些工具方法的解析：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *计算hash值
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash(Object k) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashSeed表示一个与当前实例关联并且可以减少哈希碰撞概率应用于键的哈希码计算的随机种子。&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; h =&lt;span&gt; hashSeed;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (0 != h &amp;amp;&amp;amp; k &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; String) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sun.misc.Hashing.stringHash32((String) k);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对h和键的哈希码进行‘异或’并赋值运算&lt;/span&gt;
        h ^=&lt;span&gt; k.hashCode();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;h右移20位 异或 h右移12位  ，下一行同理。运算过程看下图2&lt;/span&gt;
        h ^= (h &amp;gt;&amp;gt;&amp;gt; 20) ^ (h &amp;gt;&amp;gt;&amp;gt; 12&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; h ^ (h &amp;gt;&amp;gt;&amp;gt; 7) ^ (h &amp;gt;&amp;gt;&amp;gt; 4&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;返回索引值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  h 通过hash(Object k)方法计算得来的哈希码
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  length     表示桶的数量（即数组的长度）
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; indexFor(&lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将哈希码和length进行按位与运算&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; h &amp;amp; (length-1&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/777890/201806/777890-20180619201418711-663920306.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;取元素：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过key获取value&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
        如果key为null，则返回null键的值
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getForNullKey();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取键为key的实体类&lt;/span&gt;
        Entry&amp;lt;K,V&amp;gt; entry =&lt;span&gt; getEntry(key);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; == entry ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : entry.getValue();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据键找到对应的实体类
     * 实现思路：①：通过计算key的hash值，用indexFor(key，table.length)获取所在数组位置的下标。
     *          ②：通过寻找处于该下标位置链表”上查找“键值等于key”的元素。
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Entry&amp;lt;K,V&amp;gt;&lt;span&gt; getEntry(Object key) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
      
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算key的hash值&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; hash = (key == &lt;span&gt;null&lt;/span&gt;) ? 0&lt;span&gt; : hash(key);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e =&lt;span&gt; table[indexFor(hash, table.length)];
             e &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
             e &lt;/span&gt;=&lt;span&gt; e.next) {
            Object k;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;&lt;span&gt;
                ((k &lt;/span&gt;= e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找不到则返回null&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取null键的值
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; V getForNullKey() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;null键一般在table下标为0的位置&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = table[0]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.value;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;存元素：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;往HashMap存储元素
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key 键
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value 值    
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     *             
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止table的容量为0；&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (table ==&lt;span&gt; EMPTY_TABLE) {
            inflateTable(threshold);
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果key为null，则判断该hashMap的null键是否有值，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有，则将这个新value存入覆盖老的value，返回老的value&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; putForNullKey(value);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算key的哈希值&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; hash =&lt;span&gt; hash(key);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过key的哈希值以及数组的长度计算索引&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; indexFor(hash, table.length);

        找到数组此索引下的链表，一个一个得找，看有没有找到键值&lt;/span&gt;==&lt;span&gt;该key的元素
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = table[i]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
            Object k;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有，则用新value覆盖老的value  oldValue，并返回oldValue;&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp; ((k = e.key) == key ||&lt;span&gt; key.equals(k))) {
                V oldValue &lt;/span&gt;=&lt;span&gt; e.value;
                e.value &lt;/span&gt;=&lt;span&gt; value;
                e.recordAccess(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有，则modCount++，并添加新元素&lt;/span&gt;
&lt;span&gt;
        modCount&lt;/span&gt;++&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加新元素，具体实现思路，看下面该函数得定义&lt;/span&gt;
&lt;span&gt;        addEntry(hash, key, value, i);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
      * 新增Entry
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; addEntry(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; bucketIndex) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果size比临界值大，而且该下标元素不为空，则对HashMap进行扩容，然后新增一个Entry实例&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ((size &amp;gt;= threshold) &amp;amp;&amp;amp; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; table[bucketIndex])) {
            resize(&lt;/span&gt;2 *&lt;span&gt; table.length);
            hash &lt;/span&gt;= (&lt;span&gt;null&lt;/span&gt; != key) ? hash(key) : 0&lt;span&gt;;
            bucketIndex &lt;/span&gt;=&lt;span&gt; indexFor(hash, table.length);
        }

        createEntry(hash, key, value, bucketIndex);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 
     *新增一个Entry实例，并将该实例得next指向原来得table[bucketIndex];
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; createEntry(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; bucketIndex) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置“e”为“新Entry的下一个节点”&lt;/span&gt;
        Entry&amp;lt;K,V&amp;gt; e =&lt;span&gt; table[bucketIndex];
        table[bucketIndex] &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Entry&amp;lt;&amp;gt;&lt;span&gt;(hash, key, value, e);
        size&lt;/span&gt;++&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解决hash冲突方法：下面只具体讲了拉链法，其它有兴趣可自行了解~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开放定址法（线性探测再散列，二次探测再散列，伪随机探测再散列）&lt;br/&gt;再哈希法&lt;br/&gt;链地址法 ：就是在冲突的位置上简历一个链表，然后将冲突的元素插入到链表尾端。&lt;br/&gt;建立一个公共溢出区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap扩容：resize方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 重新调整HashMap中桶的数量
     *
     *通过判断新容量大小值，
     *如果 oldCapacity 超过Entty数量的最大值，则将Integer.MAX_VALUE赋给临界值（阀值），
     *直接返回不进行扩容（这样以后都不会扩容）
     *如果 oldCapacity 不超过Entty数量的最大值，则创建一个新的数组，将数据转移到新的数组里
     *并重新修改阀值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; newCapacity the new capacity, 新容量大小值
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; resize(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; newCapacity) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引用扩容前的Entry数组  &lt;/span&gt;
        Entry[] oldTable =&lt;span&gt; table; 
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; oldTable.length;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩容前的数组大小如果已经达到最大(2^30)了 &lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (oldCapacity ==&lt;span&gt; MAXIMUM_CAPACITY) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了  &lt;/span&gt;
            threshold =&lt;span&gt; Integer.MAX_VALUE;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        Entry[] newTable &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Entry[newCapacity];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将原有Entry数组的元素拷贝到新的Entry数组里&lt;/span&gt;
&lt;span&gt;        transfer(newTable, initHashSeedAsNeeded(newCapacity));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HashMap的table属性引用新的Entry数组  &lt;/span&gt;
        table =&lt;span&gt; newTable;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改阈值  &lt;/span&gt;
        threshold = (&lt;span&gt;int&lt;/span&gt;)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 将原有Entry数组的元素拷贝到新的Entry数组里
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt; transfer(Entry[] newTable, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; rehash) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; newCapacity =&lt;span&gt; newTable.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt;&lt;span&gt; e : table) {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; e) {
                Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; next =&lt;span&gt; e.next;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (rehash) {
                    e.hash &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt; == e.key ? 0&lt;span&gt; : hash(e.key);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新计算每个元素在数组中的位置 &lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; indexFor(e.hash, newCapacity);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记[1]  &lt;/span&gt;
                e.next =&lt;span&gt; newTable[i];
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将元素放在数组上 &lt;/span&gt;
                newTable[i] =&lt;span&gt; e;
                &lt;/span&gt;&lt;span&gt;////&lt;/span&gt;&lt;span&gt;访问下一个Entry链上的元素  &lt;/span&gt;
                e =&lt;span&gt; next;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是对HashMap的实现思路的基本分析。HashMap能讲的太多了。比如*线程，遍历迭代，红黑树*......每一部分都能独立开篇来讲。以后有机会出&lt;/p&gt;
&lt;p&gt;以上是本人对HashMap的一点理解，有什么理解不当欢迎指出~&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 12:16:00 +0000</pubDate>
<dc:creator>蕉爷</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Alear/p/9200904.html</dc:identifier>
</item>
</channel>
</rss>