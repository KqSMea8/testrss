<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Android studio安装与配置 - 独王</title>
<link>http://www.cnblogs.com/xiadewang/p/7820377.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiadewang/p/7820377.html</guid>
<description>&lt;p&gt;1、首先下载Android studio安装包，可以从&lt;a href=&quot;http://www.android-studio.org/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%87%E7%94%A83.0%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E6%BC%94%E7%A4%BA%EF%BC%8C%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%BAandroid-studio-ide-171.4408382-windows.exe&quot;&gt;http://www.android-studio.org/下载最新版本，这里采用3.0版本进行演示，对应安装包为android-studio-ide-171.4408382-windows.exe&lt;/a&gt;，安装包大小681 MB，安装包不带SDK&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231536841-252934706.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;525&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、下载好该安装包之后，点击进行安装，依次出现以下界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231625950-2062278670.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231657903-64000800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231711919-54401756.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p&gt;在这里自己选择程序安装路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231759856-1267892948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231811466-1742785898.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111231820528-1221556260.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232042481-1330170635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里Android studio程序安装完毕，但是还需要继续对其进行配置；勾选Start Android Studio，然后点击finish启动AS，出现下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232111919-672018704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;选择第二项，然后点击ok，出现下面的启动界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232131684-65108139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在启动的时候会弹出下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232147950-1605880221.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击cancel，然后进入到了AS的安装向导界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232206841-1950207162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击next进入UI界面主题选择界面，可以选择自己喜欢的风格，这里选择Darcula风格&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232225013-1508764848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232243825-458379470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要指定SDK的本地路径，如果之前电脑中已经存在SDK，可以指定该路径，后续就可以不用下载SDK；我这里演示本地没有安装过SDK的场景，这里暂时可以指定一个后续将保存SDK的路径；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232301684-1120408845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232324669-1402743307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Finish后，开始自动下载SDK（注意，此时需要保证电脑联网）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232343122-133023002.png&quot; alt=&quot;&quot; width=&quot;615&quot; height=&quot;461&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232401872-687804195.png&quot; alt=&quot;&quot; width=&quot;618&quot; height=&quot;462&quot;/&gt;&lt;/p&gt;



&lt;p&gt;下载完成SDK后，点击Finish进入AS的欢迎界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232447575-43461062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、配置AS第一次运行环境，并且能成功编译运行一个APP，以helloworld为例。&lt;/p&gt;
&lt;p&gt;点击上图中的Start a new Android Studio project新建一个工程，进入下面的界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232509653-367356961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232521481-194431519.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232529153-450261890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232539122-1426892596.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232546981-1498506635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此，一个工程建立完成，第一次建立的工程会发现卡在下面的启动界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232602622-2106064754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一次建立工程卡在该界面的时候，是因为在从网上下载gradle构建工具，由于从国外站点下载，网速很慢，这里点击取消关闭该界面，采用手动配置gradle；&lt;/p&gt;
&lt;p&gt;首先找到.gradle文件夹的路径，一般是在用户账号文件夹下，比如我这里是C:\Users\issuser\.gradle&lt;/p&gt;
&lt;p&gt;会发现该文件夹下生成了下图中的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232640731-536724217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这里的gradle-4.1,指的是版本，它会根据你的AS版本自动生成，此时我们可以去网上下载一个gradle-4.1-all.zip压缩包，然后放到该路径下并且进行解压，注意一定要放到这个随机生成的一长串字符的文件夹下面，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232703638-1101875301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232713294-1387011987.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
此时点击图中下方的链接进行&lt;span lang=&quot;EN-US&quot;&gt;SDK下载，这里可能一次下载之后，执行&lt;span lang=&quot;EN-US&quot;&gt;Try again之后这里还是会显示报错，那么就再点击下载一次，然后再点击&lt;span lang=&quot;EN-US&quot;&gt;Try again，直到报错解除。（除了该解决办法，还可以手动更改&lt;span lang=&quot;EN-US&quot;&gt;build.gradle文件中的&lt;span lang=&quot;EN-US&quot;&gt;compileSdkVersion，&lt;span lang=&quot;EN-US&quot;&gt;buildToolsVersion&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span lang=&quot;EN-US&quot;&gt;targetSdkVersion为对应的&lt;span lang=&quot;EN-US&quot;&gt;27也可以进行解决，这个后续再讲）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232746841-673079056.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232752747-1097539050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232805153-1234890467.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232828091-429636493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上述gradle构建完成之后，就可以点击下图中的build apk编译打包apk文件了，生成的apk文件路径如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232849622-1383854035.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成apk文件之后，导出该apk文件到模拟器或者真机上面进行安装，运行效果图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/890216/201711/890216-20171111232909059-1462861577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;至此，Android Studio的安装以及开发环境就配置好了。&lt;/p&gt;



</description>
<pubDate>Sat, 11 Nov 2017 15:31:00 +0000</pubDate>
<dc:creator>独王</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiadewang/p/7820377.html</dc:identifier>
</item>
<item>
<title>消息中间件ActiveMQ及Spring整合JMS的介绍 - 兮夜那么美</title>
<link>http://www.cnblogs.com/likemebee/p/activeMQ.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/likemebee/p/activeMQ.html</guid>
<description>&lt;h2&gt;1.1 消息中间件&lt;/h2&gt;
&lt;h3&gt;1.1.1 什么是消息中间件&lt;/h3&gt;
&lt;p&gt;消息中间件利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。对于消息中间件，常见的角色大致也就有Producer（生产者）、Consumer（消费者）&lt;/p&gt;
&lt;p&gt;常见的消息中间件产品：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;strong&gt;ActiveMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。我们在本次课程中介绍 ActiveMQ的使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）RabbitMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AMQP协议的领导实现，支持多种场景。淘宝的MySQL集群内部有使用它进行通讯，OpenStack开源云平台的通信组件，最先在金融行业得到运用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）ZeroMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;史上最快的消息队列系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）Kafka&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apache下的一个子项目 。特点：高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统。适合处理海量数据。&lt;/p&gt;
&lt;h3&gt;1.1.2 使用&lt;strong&gt;ActiveMQ的场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;进程间通讯，比如在分布式系统中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;解耦，比如像我们公司有许多开发团队，每个团队负责业务的不同模块，各个开发团队可以使用MQ来通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在一些高并发场景下，使用MQ的异步特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(欢迎补充)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt; 1.2 JMS简介&lt;/h2&gt;
&lt;h3&gt;1.2.1什么是JMS&lt;/h3&gt;
&lt;p&gt;　　JMS（&lt;a title=&quot;Java 知识库&quot; href=&quot;http://lib.csdn.net/base/java&quot; target=&quot;http://blog.csdn.net/apanious/article/details/_blank&quot;&gt;&lt;strong&gt;Java &lt;/strong&gt;&lt;/a&gt;Messaging Service）是Java平台上有关面向消息中间件的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。&lt;/p&gt;
&lt;p&gt;       JMS本身只定义了一系列的接口规范，是一种与厂商无关的 API，用来访问消息收发系统。它类似于 JDBC(&lt;a title=&quot;Java 知识库&quot; href=&quot;http://lib.csdn.net/base/java&quot; target=&quot;http://blog.csdn.net/apanious/article/details/_blank&quot;&gt;&lt;strong&gt;java &lt;/strong&gt;&lt;/a&gt;Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系&lt;a title=&quot;MySQL知识库&quot; href=&quot;http://lib.csdn.net/base/mysql&quot; target=&quot;http://blog.csdn.net/apanious/article/details/_blank&quot;&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/a&gt;的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商目前都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JML 客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。&lt;/p&gt;
&lt;p&gt;JMS 定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一&lt;/p&gt;
&lt;p&gt;些不同形式的数据，提供现有消息格式的一些级别的兼容性。&lt;/p&gt;
&lt;p&gt;· TextMessage--一个字符串对象&lt;/p&gt;
&lt;p&gt;· MapMessage--一套名称-值对&lt;/p&gt;
&lt;p&gt;· ObjectMessage--一个序列化的 Java 对象&lt;/p&gt;
&lt;p&gt;· BytesMessage--一个字节的数据流&lt;/p&gt;
&lt;p&gt;· StreamMessage -- Java 原始值的数据流&lt;/p&gt;

</description>
<pubDate>Sat, 11 Nov 2017 15:28:00 +0000</pubDate>
<dc:creator>兮夜那么美</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/likemebee/p/activeMQ.html</dc:identifier>
</item>
<item>
<title>全球领先的redis客户端：SFedis - 周游(Michael Chow)</title>
<link>http://www.cnblogs.com/naturemickey/p/7820252.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/naturemickey/p/7820252.html</guid>
<description>&lt;p&gt;零、背景&lt;/p&gt;
&lt;p&gt;　　这个客户端起源于我们一个系统的生产问题。&lt;/p&gt;

&lt;p&gt;一、问题的发生&lt;/p&gt;
&lt;p&gt;　　在我们的生产环境上发生了两次redis服务端连接数达到上限（我们配置的单节点连接数上限为8000）导致无法创建连接的情况。由于这个系统生产环境的redis集群的tps达到百万级，所以发生了这个情况的后果是非常严重的，有的业务会发生缓存穿透的情况，有的业务会直接报错。&lt;/p&gt;

&lt;p&gt;二、问题分析&lt;/p&gt;
&lt;p&gt;　　在生产环境上每个redis节点的tps上限在50000左右，我们监控redis的slowlog的阀值设置为0.1ms，也就是说如果服务端慢到10000tps时就会触发报警，但在问题发生当时并没有报警。实际上这是我们的一个失误：如果redis一个服务节点是独享一个cpu核的，那么按照redis的机制是可以推测出slowlog是不可能会有“慢”的结果的。那么如果慢一定不是在redis本身的处理上，有可能是塞在epoll上或者网络上。但我们并没有发现有任何地方有异常（包括网络）。&lt;/p&gt;
&lt;p&gt;　　我们并没有查到故障发生在哪里，但故障的确就发生了，这是很离奇的。&lt;/p&gt;
&lt;p&gt;　　最后我们只能进行了推测：正常情况下整个集群的速度是非常快的。监控设置的0.1ms的阀值虽然看起来是非常快（万分之一秒），但和正常情况下的平均响应时长来说还是慢了5倍的差距。也就是说，我们检测每一个地方都没有看到问题，可能只是因为检测的标准以及检测工具的能力（精确度）的问题。比如说：平时单节点平均处理能力在0.02ms每个命令，但当慢（无论慢在哪里）到0.05ms的时候我们是没能监控出来的，而实际上这个时候问题已经发生了。假设网络因未知原因卡了一秒钟，那么就会有几十万到一百万个请求塞在网络上，客户端因请求还没有返回，新的请求就会向连接池申请新的连接，如果服务端没有保留足够的buffer来处理瞬间多出来的请求，那么很有可能在这个时候发生一个雪崩效应——连接数瞬间达到上限。&lt;/p&gt;

&lt;p&gt;三、临时解决&lt;/p&gt;
&lt;p&gt;　　当时在故障处理时，我们采取了比较粗爆但有效的办法：减少客户端的数量。我们停掉了相关服务的一半节点，使所有运行节点的线程池即使全部打满也不会达到redis服务端的上限，这样当业务消费一段时间后，请求降下来了，再启动被关掉的服务。&lt;/p&gt;
&lt;p&gt;　　当天晚上我们对redis集群进行了扩容，保留了更大的buffer，使应对异常冲击的能力提高一些。&lt;/p&gt;
&lt;p&gt;　　这些只是临时的解决方案，治标不治本的。所以还是需要更进一步研究更好的解决方案。&lt;/p&gt;
&lt;p&gt;　　这里需要说明一点：为什么服务可以停掉一半？如果服务停掉了一半，前端的请求会不会把服务的cpu打满，导致服务挂掉呢？&lt;/p&gt;
&lt;p&gt;　　这里是因为：&lt;/p&gt;
&lt;p&gt;　　1.服务端对所有的rest/http接口以及rpc接口都做了隔离限流，每任何一个接口超过一定的并发之后，后面的请求就会马上报错，保证服务的安全。&lt;/p&gt;
&lt;p&gt;　　2.用户端是移动App，在移动端我们对所有重要业务做了统一的重试机制，如果没有传上来的，可以在一定时间之后再次重试。&lt;/p&gt;
&lt;p&gt;　　所以这里服务端减少服务能力的情况下，并不会导致严重的业务问题，但是会使业务数据上传变慢一些。&lt;/p&gt;

&lt;p&gt;四、原理分析&lt;/p&gt;
&lt;p&gt;　　当时我们的客户端用的是jedis，连接的管理用的是jedis自带的。&lt;/p&gt;
&lt;p&gt;　　因为redis服务端的每个节点的数据是不同的，所以在长时间的调用下，每个客户端一定会访问到每个服务端节点。这样的话，服务端每个节点的连接数就并不取决于服务端集群的大小，而取决于客户端集群的大小。&lt;/p&gt;
&lt;p&gt;　　如下图所示：如果客户端有2个，每个客户端的连接池上限是40个连接，那么无论服务端是多少个节点，每个节点的连接数量的上限应该是40*2=80个。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/623874/201711/623874-20171111125825434-1791224214.png&quot; alt=&quot;&quot; width=&quot;561&quot; height=&quot;292&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么问题来了：服务端的每个节点处理能力是有限的，连接数过多是没有意义的，如果每个服务端的连接上限是10000个，每个客户端的连接池上限是100个，那么在理论上要保证连接安全，客户端的节点数上限是10000/100=100个。但如果我们需要更大的业务处理能力（业务应用集群的节点数需要超过100个）的情况下，怎么办呢？&lt;/p&gt;

&lt;p&gt;五、一个想法&lt;/p&gt;
&lt;p&gt;　　从理论上说，1个连接是可以达到一个网卡的带宽极限的，那么是否有可能做到每个redis客户端只有一个连接，却可以达到原来n多个连接一样的性能（甚至更好）呢？&lt;/p&gt;

&lt;p&gt;六、研究业界现有方案&lt;/p&gt;
&lt;p&gt;　　带着问题，我们用了两个月时间来研究测试各种业界公认的成熟方案（除了当时正在用的jedis客户端之外，还研究了twemproxy、Codis、redis 4.0 (cluster)、redisson），发现这些方案并没有让我们满意。下面说一下我们为什么不选择这些方案：&lt;/p&gt;
&lt;p&gt;　　twemproxy：代理并不能完全解决连接数的问题，它只能让连接数少一些，而且代理大约有20%的性能损耗。&lt;/p&gt;
&lt;p&gt;　　Codis：1.代理和twemproxy的差不多，也不能完全解决连接数的问题；2.Codis新版本没有节点失效的检测的能力；3.整个方案的部署比较麻烦。4.在增加节点时，集群会自动迁移数据（当然，这个不能说是缺点，但如果整个集群的内存达到几个T的情况下，内存的数据迁移会有什么后果不好预料（迁移数据导致网络塞住怎么办？迁移数据时服务会中段多长时间？））。&lt;/p&gt;
&lt;p&gt;　　Redis cluster：1.必须做主备，当主备都挂了的情况下，不能自动摘除节点；2.在增加节点时，集群会自动迁移数据——这一点和Codis一样——我们宁可缓存穿透，也不希望他迁移数据（如果实现了一致性hash，那么会穿透的数据还是很少的——比如：如果我们服务已经有了100个节点，再加一个节点最多只会导致1%的数据失效）；&lt;/p&gt;
&lt;p&gt;　　redisson：这个客户端用了nio机制，在异步操作的情况下的确会大大减少连接数，并且异步的性能非常好（极端的情况下，有可能是jedis的十倍）。但在同步的情况下就没那么乐观，还是需要多个连接才能勉强追得上jedis的速度。如果我们改用redisson的异步形式，则需要改业务代码，这是很难接受的——不过这里我认为是redisson的开发者们对代码的优化没有做到极致，因为在基础原理上nio可以达到的程度绝对可以比现在的redisson更好。&lt;/p&gt;
&lt;p&gt;　　另外，如果采用短连接的形式的话，对性能的影响比较大，所以我们也不想牺牲长连接的优势。&lt;/p&gt;
&lt;p&gt;　　既然找不到已经实现好的成熟方案，那么我们是否可以自己实现一个呢？&lt;/p&gt;

&lt;p&gt;七、自己开发&lt;/p&gt;
&lt;p&gt;　　目标很清晰：一个“新的jedis”，但每个客户端在连接每个服务节点时只连一个连接，最重要的是性能绝不可以比jedis差。&lt;/p&gt;
&lt;p&gt;　　虽然目标很清晰，并且在基础原理上是可以达到的，但具体的技术细节确并不容易。目标是我定的，但我给不出在技术细节上的实现方案，后来我们部门内的一个码神想到了一个很好的实现方案。&lt;/p&gt;
&lt;p&gt;　　具体原理是这样的：&lt;/p&gt;
&lt;p&gt;　　1.redis的通信协议是tcp，这就提供了异步请求的基础——如果是同步的网络请求，客户端就需要等待服务端的响应，那么在等待这段时间里，带宽是空着的，这样要打满带宽就必然需要多个连接，所以，如果我们需要用一个连接打满带宽就必然需要用异步。&lt;/p&gt;
&lt;p&gt;　　2.redis的命令协议上是没有在发送与接收之间建立对应关系的（没有msg_id之类的属性），这如果不停的发送与接收命令，应该如何告诉业务哪个接收到的数据属于应用事例的哪个线程呢？这里我们找到了一个很巧妙的对应关系：顺序。redis服务端是单线程的，那么服务端先接收到的命令必然先返回，同时，tcp协议又是保证顺序的，这就决定了我们可以用“顺序”做为“发”与“收”之间的对应协议。&lt;/p&gt;
&lt;p&gt;　　3.为了不修改业务，我们必须用“新的原理”来实现“老的接口”，老接口都是同步操作的，那么这里的阻塞动作就一定要在客户端框架中来实现了。这里就要用到Future了。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/623874/201711/623874-20171111214958497-212382821.png&quot; alt=&quot;&quot; width=&quot;633&quot; height=&quot;275&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最终的实现结果是：我们自己实现的新redis客户端框架SFedis访问每个服务节点只用1个连接，却比业界广泛使用的Jedis用多个连接还要快一点。&lt;/p&gt;
&lt;p&gt;　　我们现在还没有实现异步接口，如果我们真的实现了异步接口，那么估计比redisson还要快。&lt;/p&gt;
&lt;p&gt;　　另：在十一月的新书《决战618》我看到书中有写到京东也有用nio实现自己的redis客户端来解决连接数的问题，不过书中只有一句话讲这个，完全没有任何细节。&lt;/p&gt;

&lt;p&gt;八、结果展示&lt;/p&gt;
&lt;p&gt;　　我们有两个服务共用一个redis集群，下图是其中一个服务上线后的连接数监控图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/623874/201711/623874-20171111220214403-1941294719.png&quot; alt=&quot;&quot; width=&quot;669&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里可以看到：一个服务上线之后的几天比上线前的几天，redis连接数直接腰斩了。&lt;/p&gt;
&lt;p&gt;　　下图是另一个服务也上线之后的连接数监控图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/623874/201711/623874-20171111220346247-1330105262.png&quot; alt=&quot;&quot; width=&quot;656&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到在第二个服务上线之后，连接数已经完全不再波动了（这里千万别误会：后面三天的线是平的，不代表没有服务。服务是正常运行的，而且运行得很健康），这里连接数停留在应用实例的个数上（58个）。&lt;/p&gt;
&lt;p&gt;　　这里声明一下：这个系统是有做灰度的，在生产上有多个环境在跑不同的版本，上面的两个截图是一个小环境上线前后的监控情况，所以节点数比较少，只有58个。而且这个小环境在性能上留的buffer是比较充足的，所以平时的redis连接数也不高。在大的生产环境上这个图会显得更猛一些。&lt;/p&gt;

&lt;p&gt;九、开源计划&lt;/p&gt;
&lt;p&gt;　　目前这个客户端还没有开源，但开源已在计划之中。后续开源之后会公布出来。&lt;/p&gt;

&lt;p&gt;十、人员招募&lt;/p&gt;
&lt;p&gt;　　我们团队正在招人，岗位有：Android开发、Java后台开发、架构师、测试。欢迎大家推荐或自荐！&lt;/p&gt;
&lt;p&gt;　　简历请发我邮箱：zhouyou@sf-express.com&lt;/p&gt;

</description>
<pubDate>Sat, 11 Nov 2017 14:39:00 +0000</pubDate>
<dc:creator>周游(Michael Chow)</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/naturemickey/p/7820252.html</dc:identifier>
</item>
<item>
<title>初识React-Redux之粗暴理解入门 - 大兄弟竹子</title>
<link>http://www.cnblogs.com/joeymary/p/7820047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joeymary/p/7820047.html</guid>
<description>&lt;h2 id=&quot;权当暂记&quot;&gt;权当暂记&lt;/h2&gt;
&lt;p&gt;    日后再行补充完善，若有阅读者，请翻到下文黄色标题‘从这里开始’起阅读。本文以一个最简单的demo进行注释性理解，全部拷贝下去，就能运行的一个demo。&lt;br/&gt;    Rudex在我看来最本质做的事情就是将所有的State属性统一存储（一个属性就是一个注册到store的Reducer），然后用户触发事件，通过Redux修改State的状态（这里一定记住State只有一个，唯一唯一唯一），通过State状态影响Props状态，Props是与视图（JSX）直接挂钩的，从而达到刷新渲染视图的目的。&lt;br/&gt;    然后其中的关键就是修改State的状态，Redux构建出了Action,Reducer,connect(mapStateToProps,mapDispatchToProps)(component)，container等这些玩意儿搞了一套规则进行“规矩化”的修改状态，其实也就是分工了下，分成了几个层级。暂且理解到这，新手学习，拙见若有误，前端娱乐圈的朋友请不要怜惜我，评论处见。一切为了学习进步。斗胆拿这个上首页。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/776708/201711/776708-20171111221914653-974663503.png&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Provider&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// React component 视图组件（component）的实现，定义了props（包括简单的数值，字符串还有函数对象）&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; onIncreaseClick &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;value&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;button onClick={onIncreaseClick}&amp;gt;Increase&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//对props进行限定，如类型限定&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;Counter.propTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    value: PropTypes.number.isRequired,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    onIncreaseClick: PropTypes.func.isRequired&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;// Action 可以看作reducer中业务逻辑的路由，在mvc里不也是你要定义几个接口，就写几个action嘛，这个完全可以看作把action的名称单独拿出来作为一个路由的存在了，以至于这里没有单独的如mvc里的路由模块。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; increaseAction &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'increase'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;areducer-定义了初始化了state初始化了state一个reducer就是一个state里的一个属性属性类型也是这里定义的这个demo如果console.logstate则结果为statecountercount0&quot;&gt;1.2、 a、Reducer 定义了（初始化了）state，初始化了state（一个Reducer就是一个state里的一个属性，属性类型也是这里定义的，这个demo如果console.log(state);则结果为state:{counter:{count:0}}&lt;/h4&gt;
&lt;p&gt;//所有注册在store中的Reducer名称组合起来就是全局的state对象）才可以在下面的connect中的mapStateToProps、mapDispatchToProps中使用state&lt;br/&gt;// b、Reducer 定义了一个或多个action的处理逻辑，而这多个action的处理逻辑怎么区分的呢，是靠传进来的参数action的一个属性字段type进行唯一性区分（可以将换这个type看作action之于Reducer的路由）&lt;br/&gt;// c、&lt;br/&gt;//这么看，其实Reducer就相当于一个controller，里面有多个action处理逻辑。&lt;br/&gt;//好的，再回头看provider， Provider在根组件（App）外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。&lt;br/&gt;//一结束，看二。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;counter&lt;/span&gt;(state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; action) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; count &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;action&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'increase'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; count &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;store-顶级全局唯一根据reducer生成的store实例暂且只看作一个与reducer进行匹配的一种模式不深究其作为状态树什么的地位&quot;&gt;1.1、 Store 顶级，全局唯一，根据reducer生成的store“实例”，暂且只看作一个与reducer进行匹配的一种模式，不深究其作为状态树什么的地位。&lt;/h4&gt;
&lt;p&gt;//所以主要是看reducer（这里的ruducer实例：counter）里有什么。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(counter)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;map-redux-state-to-component-props-prop对象用state的值进行操作后赋上值这里的state对象里面有什么哪儿定义的呢就是最上面讲store的时候store里的reducer里定义的想起来了吧&quot;&gt;2.2、 Map Redux state to component props prop对象用state的值进行操作后赋上值，这里的state对象里面有什么，哪儿定义的呢？就是最上面讲store的时候，store里的reducer里定义的。想起来了吧。&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapStateToProps&lt;/span&gt;(state) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;map-redux-actions-to-component-props事件绑定但是呢不直接写逻辑而是用dispatch与事先定义的action进行关联action相当于节点路由了根据路由action.type在reducer相当于controller找到对应处理逻辑&quot;&gt;2.3、Map Redux actions to component props事件绑定，但是呢，不直接写逻辑，而是用dispatch与事先定义的action进行关联。action相当于节点路由了，根据路由（action.type）在reducer（相当于controller）找到对应处理逻辑。&lt;/h4&gt;
&lt;p&gt;// 这样一来，事先定义的action--&amp;gt;reducer--&amp;gt;store就跟我们最顶层的dom关联起来了。说白了就是定义了套规则，在我粗鄙的看来，也是个mvc。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapDispatchToProps&lt;/span&gt;(dispatch) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;onIncreaseClick&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(increaseAction)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;connected-component-看了这行代码先不管其中的参数啥意义我们首先了解这行代码意义是什么就是前面说的关联&quot;&gt;2.1Connected Component 、看了这行代码，先不管其中的参数啥意义，我们首先了解这行代码意义是什么，就是前面说的关联。&lt;/h4&gt;
&lt;p&gt;// Counter是上面定义的视图组件，你就直接看成这个是dom，dom里面需要显示东西（props）跟触发事件（函数类型props），显示跟触发这些东西就是定义在其中两个参数中。&lt;br/&gt;// 第一个参数mapStateToProps作用:显示东西。简答说就是通过state作为输入参数，进行一堆操作或者不操作，给props赋值（因为我们显示东西总是跟props关联的）&lt;br/&gt;// 第二个参数mapDispatchToProps作用：事件绑定。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; App &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(mapStateToProps&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mapDispatchToProps)(Counter)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;这里开始看起&quot;&gt;这里开始看起&lt;/h3&gt;
&lt;p&gt;//一、Provider是react-redux提供的，先不深究。 store实例作为根节点元素与我们的组件进行‘绑定’，往上看啥是strore&lt;br/&gt;//二、上面说的主要是定义了一堆规则进行状态state，action及其处理逻辑，现在要跟我们的组件结合起来，即上面最终的处理逻辑如何关联我们某个dom的事件触发（如onClick），这是我们最关心的。&lt;br/&gt;// 所以看我们的App组件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RudexDemo &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;App /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/Provider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;ss&quot;&gt;export default RudexDemo;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结注意点&quot;&gt;总结注意点：&lt;/h2&gt;
&lt;p&gt;1、State的初始化在哪儿呢？答案：所有的Reducer（注意是要注册要Store上的）构成了这个State，Reducer名称为State属性的名称，Reducer中第一个参数State里定义的参数类型就是State属性的类型。这个很重要！&lt;br/&gt;2、State是一个全局的状态对象，这个对象是唯一的唯一的唯一的，跟component，Reducer什么的没有直接关联。记住就一个State，我们所有的操作都是为了改变这个State里面的部分属性值，从而达到刷新渲染页面的目的。&lt;br/&gt;3、所有在component中需要与reducer挂钩的事情，都通过props让containers里去进行调用。这样分离合乎规矩。&lt;br/&gt;原文：&lt;a href=&quot;http://www.cnblogs.com/joeymary/p/7820047.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/joeymary/p/7820047.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人公众号（看别人也这么贴，我也贴，脸皮得厚）：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/776708/201711/776708-20171111222541872-626671935.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 11 Nov 2017 13:33:00 +0000</pubDate>
<dc:creator>大兄弟竹子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joeymary/p/7820047.html</dc:identifier>
</item>
<item>
<title>HBase流量限制和表负载均衡剖析 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/7819867.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/7819867.html</guid>
<description>&lt;p&gt;　　在HBase-1.1.0之前，HBase集群中资源都是全量的。用户、表这些都是没有限制的，看似完美实则隐患较大。今天，笔者就给大家剖析一下HBase的流量限制和表的负载均衡。&lt;/p&gt;

&lt;p&gt;　　也许有同学有疑问，为啥要做流量限制，无限制全量跑不是更好吗？举个例子，比如今天的双十一日，数据流量是非常大的。如果不限制用户和表的流量，某些重要的核心业务，需要在资源有限的情况下优先保证正常运行。如果非核心业务在此期间其QPS一直降不下来，严重消耗系统资源，影响核心业务的正常运作。&lt;/p&gt;
&lt;p&gt;　　针对上述问题，可以采取以下方案来解决：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;资源限制：针对用户、命名空间及表的请求大小和QPS进行限制。&lt;/li&gt;
&lt;li&gt;资源隔离：将不同表中的数据通过物理隔离，均衡到不同的RegionServer上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　开启HBase资源限制是有条件，其中包含以下两个条件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;版本必须在1.1.0以上，或者在低版本中打上了HBase对应的Patch（&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11598&quot; target=&quot;_blank&quot;&gt;HBASE-11598&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;HBase的资源限制开关默认是关闭的，需要在HBase的配置文件中进行开启。添加内容如下所示：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 编辑HBase配置文件
&lt;/span&gt;&lt;span&gt;vi&lt;/span&gt; $HBASE_HONE/conf/hbase-&lt;span&gt;site.xml

# 添加如下内容
 &lt;/span&gt;&amp;lt;property&amp;gt;
   &amp;lt;name&amp;gt;hbase.quota.enabled&amp;lt;/name&amp;gt;
   &amp;lt;value&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/value&amp;gt;
 &amp;lt;/property&amp;gt;&lt;span&gt;

# 退出编辑并保存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果不是在首次启动时配置的，需要额外重启HMaster服务进程才能使之生效。&lt;/p&gt;
&lt;h2&gt;3.1 Quota语句&lt;/h2&gt;
&lt;p&gt;　　HBase中限流是通过Quota语句来操作的，限流的方式有两种，一种是针对用户进行限流；另一种是针对表来进行限流。操作命令如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 限制用户u1每秒请求10次
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10req/sec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制用户u1每秒的读请求为10次
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, THROTTLE_TYPE =&amp;gt; READ, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10req/sec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制用户u1每天的请求量为10M
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10M/day&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制用户u1的写请求量每秒为10M
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, THROTTLE_TYPE =&amp;gt; WRITE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10M/sec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制用户u1在操作表t2时，每分钟的请求量为5K
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, TABLE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5K/min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制用户u1在操作表t2时，每秒的读请求为10次
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, THROTTLE_TYPE =&amp;gt; READ, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, TABLE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10req/sec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 删除用户u1在命令空间ns2的请求限制
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, NAMESPACE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt;&lt;span&gt; NONE

# 限制在命名空间ns1中每小时的请求为10次
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, NAMESPACE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10req/hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 限制表t1每小时的请求为10T
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, TABLE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10T/hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 删除用户u1的所有请求限制
hbase&lt;/span&gt;&amp;gt; set_quota TYPE =&amp;gt; THROTTLE, USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, LIMIT =&amp;gt;&lt;span&gt; NONE

# 显示用户u1在命名空间ns2中的所有限制详情
hbase&lt;/span&gt;&amp;gt; list_quotas USER =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u1, NAMESPACE =&amp;gt; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;ns2&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;
# 显示命令空间ns2的所有限制详情
hbase&lt;/span&gt;&amp;gt; list_quotas NAMESPACE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 显示表t1的所有限制详情
hbase&lt;/span&gt;&amp;gt; list_quotas TABLE =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 显示所有限制详情
hbase&lt;/span&gt;&amp;gt; list_quotas
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从操作的命令中可以看出，HBase限制流量支持表和用户。可以通过THROTTLE_TYPE来控制READ（读）、WRITE（写）操作，这类操作在HBase中是随机进行限制的。而LIMIT关键字，可以从两个维度进行资源限制，分别是req/time和size/time。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;req/time：这种表示限制单位时间内的请求次数，time可以是秒、分、时、天，req表示次数。&lt;/li&gt;
&lt;li&gt;size/time：这种表示单位时间内请求数据的量，time可以是秒、分、时、天，size可以时B (bytes), K (kilobytes), M (megabytes), G (gigabytes), T (terabytes), P (petabytes)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　LIMIT限制默认大小是：10req/day 或 100P/hour。对于命令set_quota来说，执行这条命令仅仅是限制单个RegionServer上的流量，并不是整个集群的限制总量（集群限制总量=每个RegionServer的限制量*RegionNum）。另外，执行set_quota命令后，默认是需要等待300000秒（5分钟）才会生效。如果觉得时间太长，可以将生效时间缩短，通过hbase-site.xml文件中的参数hbase.quota.refresh.period来设置时间，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 一分钟后生效
hbase.quota.refresh.period&lt;/span&gt;=&lt;span&gt;60000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.2 限制命名空间中的表个数&lt;/h2&gt;
&lt;p&gt;　　在创建命名空间中的表个数，可以在创建命名空间时指定，也可以在创建之后在此修改表个数，同样也可以删除表限制。通过设置hbase.namespace.quota.maxtables属性值来改变。操作内容如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 创建一个命令空间最大包含5个表
hbase&lt;/span&gt;&amp;gt; create_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxtables&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}

# 修改一个已存在的命令空间所允许的表数量大小为8个
hbase&lt;/span&gt;&amp;gt; alter_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {METHOD =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxtables&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}

# 显示命令空间下的所有详情
hbase&lt;/span&gt;&amp;gt; describe_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 删除命令空间中表个数的限制
hbase&lt;/span&gt;&amp;gt; alter_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {METHOD =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;unset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, NAME=&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxtables&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.3 限制命名空间的Region&lt;/h2&gt;
&lt;p&gt;　　在创建命名空间时 ，可以限制Region的个数。在创建之后也可以通过命令来修改个数的上限值。具体操作如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 创建一个命名空间最大包含10个Region
hbase&lt;/span&gt;&amp;gt; create_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxregions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 显示命令空间中详情
hbase&lt;/span&gt;&amp;gt; describe_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 修改命名空间中最大Region个数为20个
hbase&lt;/span&gt;&amp;gt; alter_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {METHOD =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxregions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}

# 删除命名空间中Region个数的限制
hbase&lt;/span&gt;&amp;gt; alter_namespace &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ns2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {METHOD =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;unset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, NAME=&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hbase.namespace.quota.maxregions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里也许有些同学在操作的过程当中遇到过，在请求操作限制阀值时，日志没有打印出错误信息，这是由于默认日志输出时INFO级别，不会打印这类异常，如果要查看，可以通过修改log4j的日志级别为DEBUG，这样就可以查看到对应的异常信息了。&lt;/p&gt;

&lt;p&gt;　　在HBase中可以通过资源隔离的方式来间接的限流。将请求均衡到多个RegionServer中去。通过balance_switch命令来实现自动均衡操作。命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 查看自动均衡状态
balance_switch status

# 停止自动均衡
balance_switch stop

# 开启自动均衡
balance_switch start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在实际业务中，如果HBase某个表的RegionServer全部集中在一个上，这时候可以考虑使用move命令手动均衡操作，具体操作语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# move手动操作语法
move [region &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;] [ServerName]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/666745/201711/666745-20171111200528138-1501838448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/666745/201711/666745-20171111200557372-1667257130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从图中一个Table Region来说，”t2,,1510401809742.bd015fc10e75b70a52adc0c32a2321c2.“其中region id为”bd015fc10e75b70a52adc0c32a2321c2“。我们可以在HBase集群客户端执行以下命令来手动指定region。命令如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# 将该Region（dn3）移动到Region（dn1）&lt;br/&gt;echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;move 'bd015fc10e75b70a52adc0c32a2321c2','dn1,16020,1510401268652'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;|hbase shell
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在往HBase表中写数据的时候，默认是往一个Region中写数据，当数据量很大时，才会自动拆分成多个Region，拆分的规则和RowKey设计有关。为了防止出现这种情况，我们可以在创建表的时候进行预分区操作。命令如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
# 创建表的预分区（6个Region），RegionTotals = SPLITS.length + 1&lt;br/&gt;create &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, SPLITS =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0002&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0004&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0005&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样我们可以拆分成6个Region，这里也许有同学要问，为什么是6个Region。其实，从上图中就可以看出，表分区中第一个Region是没有StartKey，最后一个Region是没有EndKey的。为什么会出现这种情况，下面就给大家来剖析这个原因。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/666745/201711/666745-20171111210103481-1534184476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从图中可知，在第一个Region中只有EndKey，没有StartKey。第一个Region中的EndKey(0001)，就是第二个Region的StartKey，以此类推，到最后一个Region就只有StartKey(0005)了。这就是为什么第一个Region没有StartKey，最后一个Region没有EndKey的原因。&lt;/p&gt;
&lt;p&gt;　　其实，我们在使用HBase的Java API获取Region的StartKey和EndKey的时候，有时会出现Null，也就是这个原因。&lt;/p&gt;

&lt;p&gt;　　在使用Quota命令进行限流时，需要确保hbase-site.xml文件中的限流属性开启。另外，在对表做手动均衡操作时，使用move命令即可。HBase是有自动均衡的策略的，均衡的Region取决于设计分割的Key，Key的产生又和HBase中中Rowkey的设计息息相关。所以，HBase中表的RowKey设计的是否优秀，决定了Region均衡时，分割Key的选取。&lt;/p&gt;

&lt;p&gt;　　这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉。&lt;/p&gt;
</description>
<pubDate>Sat, 11 Nov 2017 12:55:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smartloli/p/7819867.html</dc:identifier>
</item>
<item>
<title>双11大促期间服务可用率突然降到50%以下 - 杉枫</title>
<link>http://www.cnblogs.com/freedommovie/p/7819965.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freedommovie/p/7819965.html</guid>
<description>[unable to retrieve full-text content]线上一个服务0:00-0:20没有任何问题，0:20之后突然一个服务调用量增加（不合理接口调用量应该都是0:00开始猛地暴涨）， 接口可用率降到50%以下。如果是核心交易接口，那么订单将影响一半以上，很可怕。还好，不是核心业务，是一个辅助展示 业务，并且业务本来不应该打开。 那么为什么配置被打开？为</description>
<pubDate>Sat, 11 Nov 2017 12:55:00 +0000</pubDate>
<dc:creator>杉枫</dc:creator>
<dc:identifier>http://www.cnblogs.com/freedommovie/p/7819965.html</dc:identifier>
</item>
<item>
<title>ORM框架SQLAlchemy与权限管理系统的数据库设计 - 不辣不辣</title>
<link>http://www.cnblogs.com/sl-swift/p/7819896.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sl-swift/p/7819896.html</guid>
<description>&lt;td id=&quot;main&quot;&gt;
&lt;div id=&quot;post_detail&quot;&gt;
&lt;div class=&quot;post&quot;&gt;
&lt;div class=&quot;postTitle&quot;&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/sl-swift/p/7819896.html&quot;&gt;ORM框架SQLAlchemy与权限管理系统的数据库设计&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;postText&quot; readability=&quot;51.697697244243&quot;&gt;
&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;133.22098905247&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SQLAlchemy&lt;/span&gt;&lt;/strong&gt;是&lt;a href=&quot;http://baike.baidu.com/subview/21087/21087.htm&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;编程语言下的一款ORM框架，该框架建立在数据库API之上，使用对象关系映射进行数据库操作，即：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1239760/201711/1239760-20171111120820544-487738679.png&quot; alt=&quot;&quot; width=&quot;635&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行流程：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;1、使用者通过ORM对象提交命令
2、将命令交给SQLAlchemy Core（Schema/Types  SQL Expression Language）转换成SQL
3、使用 Engine/ConnectionPooling/Dialect 进行数据库操作
4、匹配使用者事先配置好的egine
5、egine从连接池中取出一个链接
6、基于该链接通过Dialect调用DB API，将SQL转交给它去执行&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;1、关于DB API&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SQLAlchemy本身无法操作数据库，其必须依赖pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;line number13 index12 alt2&quot; readability=&quot;9.8209718670077&quot;&gt;
&lt;p&gt;&lt;span&gt;1、MySQL-Python&lt;/span&gt;&lt;br/&gt;&lt;span&gt;mysql+mysqldb://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;[:&amp;lt;port&amp;gt;]/&amp;lt;dbname&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、pymysql&lt;/span&gt;&lt;br/&gt;&lt;span&gt;mysql+pymysql://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;/&amp;lt;dbname&amp;gt;[?&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3、MySQL-Connector&lt;/span&gt;&lt;br/&gt;&lt;span&gt;mysql+mysqlconnector://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;[:&amp;lt;port&amp;gt;]/&amp;lt;dbname&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4、cx_Oracle&lt;/span&gt;&lt;br/&gt;&lt;span&gt;oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;amp;key=value...]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/en/latest/dialects/index.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;更多详见&lt;/span&gt;：http://docs.sqlalchemy.org/en/latest/dialects/index.html&lt;/a&gt;&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、创建表操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在ORM框架下的Alchemy中，&lt;span&gt;类==&amp;gt;表table&lt;/span&gt;　　&lt;span&gt;对象==&amp;gt;数据行column ；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四张表:业务线,服务,用户,角色，利用ORM创建出它们，并建立好它们直接的关系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55.5&quot;&gt;&lt;img id=&quot;code_img_closed_878a5675-8134-4cd5-ac59-3df5a54d41bb&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_878a5675-8134-4cd5-ac59-3df5a54d41bb&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_878a5675-8134-4cd5-ac59-3df5a54d41bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;106&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; create_engine
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy.ext.declarative &lt;span&gt;import&lt;/span&gt;&lt;span&gt; declarative_base
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Column,Integer,String,DateTime,Enum,ForeignKey,UniqueConstraint,ForeignKeyConstraint,Index
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sessionmaker

egine&lt;/span&gt;=create_engine(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_overflow=5&lt;span&gt;)

Base&lt;/span&gt;=&lt;span&gt;declarative_base()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建单表:业务线&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Business(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;business&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    bname&lt;/span&gt;=Column(String(32),nullable=False,index=&lt;span&gt;True)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;多对一:多个服务可以属于一个业务线,多个业务线不能包含同一个服务&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Service(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    sname&lt;/span&gt;=Column(String(32),nullable=False,index=&lt;span&gt;True)
    ip&lt;/span&gt;=Column(String(15),nullable=&lt;span&gt;False)
    port&lt;/span&gt;=Column(Integer,nullable=&lt;span&gt;False)

    business_id&lt;/span&gt;=Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;business.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;__table_args__&lt;/span&gt;=&lt;span&gt;(
        UniqueConstraint(ip,port,name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uix_ip_port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        Index(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ix_id_sname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,id,sname)
    )

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一对一:一种角色只能管理一条业务线,一条业务线只能被一种角色管理&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    rname&lt;/span&gt;=Column(String(32),nullable=False,index=&lt;span&gt;True)
    priv&lt;/span&gt;=Column(String(64),nullable=&lt;span&gt;False)

    business_id&lt;/span&gt;=Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;business.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),unique=&lt;span&gt;True)


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;多对多:多个用户可以是同一个role,多个role可以包含同一个用户&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Users(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    uname&lt;/span&gt;=Column(String(32),nullable=False,index=&lt;span&gt;True)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Users2Role(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users2role&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    uid&lt;/span&gt;=Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    rid&lt;/span&gt;=Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;role.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;__table_args__&lt;/span&gt;=&lt;span&gt;(
        UniqueConstraint(uid,rid,name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uix_uid_rid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_db():
    Base.metadata.create_all(egine)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; drop_db():
    Base.metadata.drop_all(egine)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    init_db()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;示例代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3、对于表的增删改查&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_23b9def1-975c-494f-bf41-5bccce9b9530&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23b9def1-975c-494f-bf41-5bccce9b9530&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23b9def1-975c-494f-bf41-5bccce9b9530&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; create_engine
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy.ext.declarative &lt;span&gt;import&lt;/span&gt;&lt;span&gt; declarative_base
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Column,Integer,String,ForeignKey
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sessionmaker

egine&lt;/span&gt;=create_engine(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_overflow=5&lt;span&gt;)

Base&lt;/span&gt;=&lt;span&gt;declarative_base()

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dep(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    dname&lt;/span&gt;=Column(String(64),nullable=False,index=&lt;span&gt;True)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Emp(Base):
    &lt;/span&gt;&lt;span&gt;__tablename__&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;emp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    id&lt;/span&gt;=Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
    ename&lt;/span&gt;=Column(String(32),nullable=False,index=&lt;span&gt;True)
    dep_id&lt;/span&gt;=Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dep.id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_db():
    Base.metadata.create_all(egine)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; drop_db():
    Base.metadata.drop_all(egine)

drop_db()
init_db()
Session&lt;/span&gt;=sessionmaker(bind=&lt;span&gt;egine)
session&lt;/span&gt;=Session()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;示例代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;【增】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有两种row增加的方式：单行增加session.add( )；多行增加session.addall( )&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_4fc54764-c508-40a6-a46c-65383e9b1ed0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4fc54764-c508-40a6-a46c-65383e9b1ed0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4fc54764-c508-40a6-a46c-65383e9b1ed0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;增&lt;/span&gt;
row_obj=Dep(dname=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;销售&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按关键字传参,无需指定id,因其是自增长的&lt;/span&gt;
&lt;span&gt;session.add(row_obj)
session.add_all([
    Dep(dname&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;技术&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    Dep(dname&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;运营&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    Dep(dname&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;人事&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
])

session.commit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;【删】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_0c1cd8e8-bbc4-4ab4-a759-6355f1b8be8f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0c1cd8e8-bbc4-4ab4-a759-6355f1b8be8f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0c1cd8e8-bbc4-4ab4-a759-6355f1b8be8f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
session.query(Dep).filter(Dep.id &amp;gt; 3&lt;span&gt;).delete()
session.commit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;【改】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_51cfe096-e119-4e41-8a53-7585a6f5681b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_51cfe096-e119-4e41-8a53-7585a6f5681b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_51cfe096-e119-4e41-8a53-7585a6f5681b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;改&lt;/span&gt;
session.query(Dep).filter(Dep.id &amp;gt; 0).update({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;哇哈哈&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
session.query(Dep).filter(Dep.id&lt;/span&gt;&amp;gt;&lt;span&gt;0).update
({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:Dep.dname+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_SB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;},synchronize_session=&lt;span&gt;False)
session.query(Dep).filter(Dep.id&lt;/span&gt;&amp;gt;&lt;span&gt;0).update
({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:Dep.id*100},synchronize_session=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;evaluate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

session.commit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;使用Alchemy 进行增、删、改的操作时最后都需要进行向数据库提交数据：&lt;span&gt;session.commit( )&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【查】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_fb9a9a82-d78e-4bcf-b38b-564dbd845ebd&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fb9a9a82-d78e-4bcf-b38b-564dbd845ebd&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fb9a9a82-d78e-4bcf-b38b-564dbd845ebd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查所有,取所有字段&lt;/span&gt;
res=session.query(Dep).all() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;for row in res:print(row.id,row.dname)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查所有,取指定字段&lt;/span&gt;
res=session.query(Dep.dname).order_by(Dep.id).all() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;for row in res:print(row.dname)&lt;/span&gt;
&lt;span&gt;
res&lt;/span&gt;=&lt;span&gt;session.query(Dep.dname).first()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(res) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ('哇哈哈_SB',)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;过滤查&lt;/span&gt;
res=session.query(Dep).filter(Dep.id &amp;gt; 1,Dep.id &amp;lt;1000) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;逗号分隔,默认为and&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;([(row.id,row.dname) &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; res])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4、子查询&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;个人感觉使用连表操作能很大程度代替子查询的工作量，而且Alchemy实现起来也很方便！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;详细内容参考海峰老师博客，链接：http://www.cnblogs.com/linhaifeng/articles/7560153.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5、权限管理系统的设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1. 登陆、注册、找回密码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2. 权限管理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3. 角色管理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4. 角色分配权限&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5. 动态显示当前登陆用户权限菜单&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;143&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; create_engine
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sqlalchemy.ext.declarative &lt;span&gt;import&lt;/span&gt;&lt;span&gt; declarative_base
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sqlalchemy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Column,Integer,ForeignKey,CHAR,VARCHAR,UniqueConstraint
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sessionmaker
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;建立链接&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; engine = create_engine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql+pymysql://root:761379545@127.0.0.1:3306/test_db?charset=utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, max_overflow=5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; Base =&lt;span&gt; declarative_base()
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; Session = sessionmaker(bind=&lt;span&gt;engine)
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; session =&lt;span&gt; Session()
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建用户信息表&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User(Base):
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;__tablename__&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     uid = Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     name = Column(CHAR(20),nullable=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     pwd = Column(CHAR(20),nullable=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     roll_id = Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;roll.rid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;__table_args__的参数必须是元组的形式&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;__table_args__&lt;/span&gt; =&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         UniqueConstraint(name,pwd,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uni_np&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用户名和密码不能重复！&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建权限表&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Authority(Base):
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;__tablename__&lt;/span&gt; =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;authority&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     aid = Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     auth = Column(VARCHAR(255),nullable=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建角色表&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Roll(Base):
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;__tablename__&lt;/span&gt; =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;roll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;     rid = Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;     dep = Column(VARCHAR(255),nullable=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;角色权限关系表&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Ro_au(Base):
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;__tablename__&lt;/span&gt; =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ro_au&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;     id = Column(Integer,primary_key=True,autoincrement=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     rid = Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;roll.rid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     aid = Column(Integer,ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;authority.aid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建原始关系表&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; original_table():
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    session.add_all([
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;项目经理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;技术部&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;运营部&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;人事部&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;后勤部&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         Roll(dep=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通员工&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看个人信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;更改用户信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;删除用户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;设定项目整体方案&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看项目进度&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看项目经费&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看项目计划&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;项目技术方案&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;项目支出管理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;项目人事安排&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         Authority(auth=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;项目后勤保障&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    ])
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    session.commit()
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    session.add_all([
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3714&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=1&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=2&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;761379545&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=2&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eric&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=3&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=4&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;john&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=5&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         User(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kaka&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pwd=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,roll_id=6&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    ])
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    session.add_all([
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         Ro_au(rid=1,aid=1),Ro_au(rid=1,aid=5),Ro_au(rid=1,aid=6&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         Ro_au(rid=2, aid=1),Ro_au(rid=2, aid=4),Ro_au(rid=2, aid=8&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         Ro_au(rid=3, aid=1),Ro_au(rid=3, aid=5),Ro_au(rid=3, aid=6),Ro_au(rid=3, aid=7&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         Ro_au(rid=4, aid=1),Ro_au(rid=4, aid=2),Ro_au(rid=4, aid=3&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         Ro_au(rid=5, aid=1),Ro_au(rid=5, aid=9),Ro_au(rid=5, aid=11&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         Ro_au(rid=6, aid=1&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;    ])
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    session.commit()
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建数据库所有表&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; creat_db():
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    Base.metadata.create_all(engine)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除数据库所用表&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; drop_db():
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    Base.metadata.drop_all(engine)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示个人权限&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; show_auth(user_name):
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     user_roll_id = session.query(User.roll_id).filter(User.name ==&lt;span&gt; user_name).subquery()
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     user_dep_list = session.query(Roll.dep).filter(Roll.rid ==&lt;span&gt; user_roll_id).all()
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; user_dep_list:
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         user_dep =&lt;span&gt; row[0]
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您当前所属部门名称：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, user_dep)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\33[33m您具有的权限如下:\33[37m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     auth_list = session.query(Authority.auth).join(Ro_au).filter(Ro_au.rid ==&lt;span&gt; user_roll_id).all()
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     count = 1
&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; auth &lt;span&gt;in&lt;/span&gt;&lt;span&gt; auth_list:
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(count, auth[0])
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         count += 1
&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示所有部门信息&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; show_department():
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;公司现有部门如下：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     dep_list =&lt;span&gt; session.query(Roll).all()
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; dep &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dep_list:
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(dep[0],dep[1&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         user_name = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入用户名【返回B】：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; user_name.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;         user_pwd = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入用户密码【返回B】：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; user_pwd.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         user_list =&lt;span&gt; session.query(User.name,User.pwd).all()
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user_name,user_pwd) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; user_list:
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登陆成功！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             choice = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;【1、进入个人权限界面】&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;                            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n【2、查看公司具有的所有部门】&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;                            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n【B、返回主界面】&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; choice == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                show_auth(user_name)
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; choice == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;                show_department()
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或者密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用户注册&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; register():
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;         user_name = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入用户名【返回B】：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; user_name:&lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; user_name.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;         name_list =&lt;span&gt; session.query(User.name).all()
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user_name,) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; name_list:
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;该用户名已经存在！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             user_pwd = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入用户密码：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; user_pwd:&lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;             dep_list =&lt;span&gt; session.query(Roll.rid,Roll.dep).all()
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dep_list:
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(row.rid,row.dep)
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;             user_roll = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入所属部门序号：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; user_roll:
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;部门序号不能为空，请重新开始！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; user_roll.isdigit():
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                 session.add(User(name=user_name,pwd=user_pwd,roll_id=int(user_roll))) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;写入数据库&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt; &lt;span&gt;                session.commit()
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新的员工信息已经注册成功！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您选择的部门有误，请重新选择！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; 
&lt;span&gt;170&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找回密码&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; find_pwd():
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;         user_name =input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入用户名【返回B】：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; user_name:&lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; user_name.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         name_list =&lt;span&gt;session.query(User.name).all()
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user_name,) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; name_list:
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             pwd_list =session.query(User.pwd).filter(User.name==&lt;span&gt;user_name).all()
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您的密码为：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; pwd &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pwd_list:
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(pwd[0])
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您输入的用户名不存在！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; 
&lt;span&gt;186&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;         creat_tab_choice = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否要在数据库中创建原始关系表？第一次请选择是！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;                                  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;**此操作会删除已添加的数据！**【是Y否N】：\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; creat_tab_choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;            drop_db()
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;            creat_db()
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;            original_table()
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;基本权限管理原始表已创建！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; creat_tab_choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;             &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您的操作有误，请重新选择！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;欢迎进入权限管理系统！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.center(21, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;             choice = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录L\t注册R\t找回密码F\t退出Q:\n&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功退出权限管理系统，欢迎您再次使用！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;                login()
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;                register()
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; choice.lower() == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;                find_pwd()
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您输入的指令有误，请重新选择！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt;         &lt;span&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;数据库中的逻辑结构图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1239760/201711/1239760-20171111202203231-1445590774.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;278&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/1239760/201711/1239760-20171111202227794-352948616.png&quot; alt=&quot;&quot; width=&quot;249&quot; height=&quot;278&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/1239760/201711/1239760-20171111202247028-1011503543.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/1239760/201711/1239760-20171111202312106-425823379.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　通过该模块内容的学习，对ORM有了深刻的认识，通过Alchemy语句映射SQL语句来达到我们操作数据库的目的！&lt;/span&gt;&lt;/p&gt;




&lt;/div&gt;



&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/td&gt;
</description>
<pubDate>Sat, 11 Nov 2017 12:28:00 +0000</pubDate>
<dc:creator>不辣不辣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sl-swift/p/7819896.html</dc:identifier>
</item>
<item>
<title>微服务化路上的只言片语 - fairjm</title>
<link>http://www.cnblogs.com/fairjm/p/microservice-thought.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fairjm/p/microservice-thought.html</guid>
<description>&lt;p&gt;类似于杂谈性质的文，总结下公司实行微服务化上遇到的一些问题。&lt;br/&gt;虽然参与了开发过程，但整体更像是个旁观者，前期还是大家讨论怎么做，后来慢慢就由负责架构的同事专职做规划，拆分任务去完成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244488/201711/1244488-20171111185303966-1783146899.png&quot;/&gt;&lt;br/&gt;最初的架构(数据库和其他部分都做了简化)&lt;/p&gt;
&lt;p&gt;初衷并不是为了赶时髦，为了团队KPI之类的，而是遇到了一个很现实的问题。&lt;br/&gt;研发团队慢慢从几个人发展为十几，几十人，所有人都在一个项目上开发，代码仓库越来越大，merge冲突越来越频繁，部署时也往往会因为一些bug导致全站部署拖延。&lt;br/&gt;再加上访问量越来越高，带来的不确定性越来越大，一些流量较大的业务可能会导致整站都挂掉。&lt;br/&gt;内部和外部都出现了问题。&lt;/p&gt;
&lt;p&gt;当时虽然研发团队的人比较多了，但大家都基本是做业务兼做非业务的东西，没有成立专门的非业务部门。&lt;br/&gt;大家都是在业务开发之外安排了微服务化相关的开发，这导致了进程缓慢，并且也隐式确定了微服务化不能影响现有业务开发。&lt;/p&gt;
&lt;p&gt;最开始设想划分粒度应该粗一些，按照各个大频道来划分（有点类似于分子站）。&lt;br/&gt;但遇上了一个问题，BL和DAL层的代码是共用的，再加上之前的模块化不合理，导致一个模块直接使用了属于另一个模块的业务代码。&lt;br/&gt;让这更糟糕的是业务还在飞快迭代，这两层的代码也会发生很大的改变。&lt;br/&gt;这时就有两种选择：&lt;br/&gt;一种是复制，把需要的BL和DAL层代码复制到各服务中；&lt;br/&gt;另一种是抽取依赖，把BL和DAL层代码抽离成一个单独的jar，被各个服务依赖。&lt;/p&gt;
&lt;p&gt;前者会需要做频繁的同步，容易出现问题，很耗费精力。&lt;br/&gt;当时我们选择了后者，先将他变为一个技术债解决现在的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244488/201711/1244488-20171111190838825-2019097568.png&quot;/&gt;&lt;br/&gt;结构就成为了这样&lt;br/&gt;组内也有同事开始脱离业务，慢慢专注在微服务化这一方向上，随后从业务组中慢慢抽离出了一个基础架构组（简称基架）。&lt;/p&gt;

&lt;p&gt;这一部分我就基本是路人了，会更接近于讲故事。&lt;br/&gt;现在，&lt;code&gt;spring cloud&lt;/code&gt;已经成为了一个比较成熟的解决方案，&lt;code&gt;dubbo&lt;/code&gt;也重新被维护。&lt;br/&gt;但当时，比较靠谱的选择只有&lt;code&gt;dubbo&lt;/code&gt;，可能是出于对今后自己维护方便的考虑，基架最后的方案是参考&lt;code&gt;dubbo&lt;/code&gt;，再结合一些现有的技术来实现自己的服务注册中心和服务请求路由。&lt;br/&gt;注册中心用zk实现，里面存储服务版本、各个微服务名称、微服务版本以及服务器列表和&lt;code&gt;API&lt;/code&gt;。&lt;br/&gt;服务间调用使用了&lt;code&gt;netty&lt;/code&gt;，&lt;code&gt;ribbon&lt;/code&gt;等框架。&lt;br/&gt;具体细节在这里不做过多描述了。&lt;br/&gt;除了保留session处理相关、文件上传下载相关服务等接口以及页面渲染，原来的主站变为了一个&lt;code&gt;gateway&lt;/code&gt;。&lt;br/&gt;于是变成了以下这样：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244488/201711/1244488-20171111192904138-445418165.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至此其实已经稍微有点微服务的样子了... ...&lt;br/&gt;但还存在很多问题。&lt;br/&gt;细心的朋友可能发现了上图中所有的服务还都依赖一个db！（以及对应的只读实例等）&lt;br/&gt;所以...存储挂了，该挂的还是都挂了。&lt;br/&gt;于是再接下来的一段时间里，基架那边进行了一些比较大的业务拆分，将一些核心业务进行了分表分库使用单独的存储，这工作今日还在进行，为网站的稳定做出来很大贡献。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244488/201711/1244488-20171111194311809-309411812.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其实还有很多东西都没有(链路监控已经做好了...插不进上面 这里说下):&lt;br/&gt;一些服务间直接调用的解耦，举个例子，一个用户发完帖子后，现在是在代码里依次调用其他服务去执行一些操作，其实这里应该用消息发布的模式去做；&lt;br/&gt;配置中心；&lt;br/&gt;安全性；&lt;br/&gt;等等。&lt;br/&gt;其实想一想这些是现在的spring cloud开箱即用的功能，如果当时这方案已经成熟或许可以少走一些弯路也说不定。&lt;/p&gt;

&lt;p&gt;和技术和业务无关。&lt;br/&gt;专门成立了基架组其实有好处也有坏处，好处是有一部分人可以专门攻坚网站遇到的问题，坏处是其他人怎么办。&lt;br/&gt;首先这并不是说业务组没有机会做一些技术相关的事，而是业务组做这些事的机会其实减少了，这给人带来的技术提升也不一样。&lt;br/&gt;那在业务组怎么提升自己的技术能力呢？&lt;br/&gt;这也是我一直思考的问题。&lt;/p&gt;
&lt;p&gt;我现在的一些方式无非就是课余多看书看资料，增长自己的知识和视野。&lt;br/&gt;但其实这样也挺容易迷茫的，如何实用化呢，怎么确保自己所学落地呢？&lt;br/&gt;我的想法以及之后的做法会是直接在项目里用上，但这也不是说随便往项目中加入不必要的东西，而是要加入会带来性能提升潜力的东西，至于能否提升就要看自己的实战了。&lt;br/&gt;书看完就过，没有自己的想法和思考终究只是表面上的东西，会随着时间漫漫淡忘，昨天在看NIO.2的笔记，14年记的现在基本已经忘却了，这就很糟糕了。&lt;br/&gt;最悲惨的不是学过后忘记了相关知识，而是忘记了曾经自己学过。&lt;/p&gt;
</description>
<pubDate>Sat, 11 Nov 2017 12:13:00 +0000</pubDate>
<dc:creator>fairjm</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fairjm/p/microservice-thought.html</dc:identifier>
</item>
<item>
<title>小议webpack下的AOP式无侵入注入 - 大转转FE</title>
<link>http://www.cnblogs.com/zhuanzhuanfe/p/7775320.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuanzhuanfe/p/7775320.html</guid>
<description>&lt;p&gt;说起来, 面向切面编程(AOP)自从诞生之日起，一直都是计算机科学领域十分热门的话题，但是很奇怪的是，在前端圈子里，探讨AOP的文章似乎并不是多，而且多数拘泥在给出理论，然后实现个片段的定式）难免陷入了形而上学的尴尬境地，本文列举了两个生产环境的实际例子论述webpack和AOP预编译处理的结合，意在抛砖引玉。当然，笔者能力有限，如果有觉得不妥之处，还请大家积极的反馈出来， 共同进步哈。&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;重要的概念&lt;/h3&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;AOP: 面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。&lt;/p&gt;
&lt;p&gt;Joint point：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。&lt;/p&gt;
&lt;p&gt;Advice：Advice 定义了在 pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过前面的定义，我们可以提炼出一句更简单的定义，利用静/动态的方式使代码块在何时/何地运行。&lt;/p&gt;
&lt;h3 id=&quot;-1&quot;&gt;性能统计&lt;/h3&gt;
&lt;p&gt;项目的背景是一个利用vue+webpack打造的多页面应用 （多入口点），她的结构大概是这个样子的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; baseConf =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; code here&lt;/span&gt;
&lt;span&gt;entry: {
index: &lt;/span&gt;'src/index'&lt;span&gt;,
list: &lt;/span&gt;'src/list'&lt;span&gt;,
detail: &lt;/span&gt;'src/detail'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; and so on ...&lt;/span&gt;
&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; code here&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后以index入口点举例，大概代码为src/index/index.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
import App from &lt;/span&gt;'./app'
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
el: &lt;/span&gt;'#app'&lt;span&gt;,
render: h &lt;/span&gt;=&amp;gt;&lt;span&gt; h(App)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;期望引入一个vue插件，能够自动的监控当前页面的性能，于是，代码看起来像是这个样子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
Vue.use(performance) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;性能统计&lt;/span&gt;
import App from './app'
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
el: &lt;/span&gt;'#app'&lt;span&gt;,
render: h &lt;/span&gt;=&amp;gt;&lt;span&gt; h(App)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于这种方式意味着每个入口点均需要进行修改，(实际上这个项目的入口点超过30个，而且随时可能继续增加下去)简直就是一个体力活。所以，让我们用AOP的思想来考虑一下如何处理这个问题&lt;/p&gt;
&lt;p&gt;首先观察入口点逻辑&lt;/p&gt;
&lt;p&gt;原：引入vue -&amp;gt; 引入app组件 -&amp;gt; 实例化vue组件&lt;/p&gt;
&lt;p&gt;新：引入vue -&amp;gt; 应用性能统计组件 -&amp;gt; 引入app组件 -&amp;gt; 实例化vue组件&lt;/p&gt;
&lt;p&gt;套用到我们的定义上，可以轻松的得到&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Joint point(何处) 引入vue&lt;/li&gt;
&lt;li&gt;advice(何时) 之后&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这样理论上的东西似乎闭着眼睛都可以推论出来，但是如何将这样的步骤替换到每一个入口点就是一个大问题了orz。幸运的是这是一个import，而翻阅webpack的文档恰好有着这样一个神奇的属性--alias&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;resolve: {
alias: {
&lt;/span&gt;'vue$': resolve('src/vueHook.js'&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;src/vueHook.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import vue from 'vue/dist/vue.common'&lt;span&gt;
vue.use(performance)
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; vue
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就完成了一个vue的全局钩子模块，我们按照步骤归纳，并且找到注入的位置 ，最后利用替换的方式成功的完成了无侵入式的组件应用&lt;/p&gt;
&lt;h3 id=&quot;codespliting&quot;&gt;code spliting&lt;/h3&gt;
&lt;p&gt;可能上面的例子有点小打小闹的感觉，那么我们换一个案例，再来体验一下这种静态替换式的注入的威力，我们采用官方支持较差的react作为参考(vue在code spliting方面做得真心是超级棒~)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
import SingleImage from '../../component-modules/magic-single-image/src/index'&lt;span&gt;;
import DoubleImage from &lt;/span&gt;'../../component-modules/magic-double-image/src/index'&lt;span&gt;;
import ThreeImage from &lt;/span&gt;'../../component-modules/magic-three-image/src/index'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; many component here&lt;/span&gt;
&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (componentName) {
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'SingleImage'&lt;span&gt;:
PreviewingComponent &lt;/span&gt;=&lt;span&gt; SingleImage;
&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'DoubleImage'&lt;span&gt;:
PreviewingComponent &lt;/span&gt;=&lt;span&gt; DoubleImage;
&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'ThreeImage'&lt;span&gt;:
PreviewingComponent &lt;/span&gt;=&lt;span&gt; ThreeImage;
&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; many component here&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;(&amp;lt;PreviewingComponent&amp;gt;&amp;lt;/PreviewingComponent&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一段中规中矩的代码，对吧？相信大家已经发现了，在上述的代码里面似乎并不是每个组件都是必须的，那么，基于以上的思考，可以对上面组件进行按需加载处理。 Bundle.jsx&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
import React, { Component, PropTypes } from 'react'&lt;span&gt;;
class Bundle extends Component {
static propTypes &lt;/span&gt;=&lt;span&gt; {
load: PropTypes.func,
children: PropTypes.func,
}
state &lt;/span&gt;=&lt;span&gt; {
mod: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
}
componentWillMount() {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.load(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props);
}
componentWillReceiveProps(nextProps) {
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nextProps.load !== &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.load) {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.load(nextProps);
}
}
load(props) {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
mod: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
});
props.load().then((mod) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; handle both es imports and cjs&lt;/span&gt;
mod: mod.&lt;span&gt;default&lt;/span&gt; ? mod.&lt;span&gt;default&lt;/span&gt;&lt;span&gt; : mod,
});
});
}
render() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.state.mod ? &lt;span&gt;this&lt;/span&gt;.props.children(&lt;span&gt;this&lt;/span&gt;.state.mod) : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}
}
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; Bundle;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以及相应的alias hook&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&amp;lt;&lt;span&gt;Bundle
load&lt;/span&gt;={() =&amp;gt; import(&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; webpackChunkName: &quot;widget&quot; &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
`..&lt;/span&gt;/../component-modules/magic-single-image/src/index`
&lt;span&gt;)}
&lt;/span&gt;&amp;gt;&lt;span&gt;
{Widget &lt;/span&gt;=&amp;gt; &amp;lt;Widget {...props} /&amp;gt;}
&amp;lt;/Bundle&amp;gt;
)
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;思考，当组件多的时候每一个模块都需要一个人口点吗，可以从webpack.context角度简化这个问题吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上两个例子均是模块引用作为join point来进行注入操作的，而且完成了无侵入式的功能增强，这得益于webpack将js模块作为一等公民。我们拥有着超多的权利完成静态式的注入工作。 本文并没有在技术上涉及太多，还是那句话，抛砖引玉哈~~~&lt;/p&gt;

&lt;div id=&quot;cnblogs_post_body&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;strong&gt; 如果你喜欢我们的文章，关注我们的公众号和我们互动吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1203274/201709/1203274-20170929105350169-1798795184.jpg&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;344&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们是转转FE团队，欢迎大家关注公众号 大转转FE 。更多的了解我们。官网 http://zzfe.org&lt;/p&gt;
</description>
<pubDate>Sat, 11 Nov 2017 12:00:00 +0000</pubDate>
<dc:creator>大转转FE</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuanzhuanfe/p/7775320.html</dc:identifier>
</item>
<item>
<title>Nginx实现负载均衡&amp;Nginx缓存功能 - 珂儿吖</title>
<link>http://www.cnblogs.com/keerya/p/7819842.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/keerya/p/7819842.html</guid>
<description>[unable to retrieve full-text content]一、Nginx是什么 Nginx (engine x) 是一个 高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器 。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</description>
<pubDate>Sat, 11 Nov 2017 11:59:00 +0000</pubDate>
<dc:creator>珂儿吖</dc:creator>
<dc:identifier>http://www.cnblogs.com/keerya/p/7819842.html</dc:identifier>
</item>
</channel>
</rss>