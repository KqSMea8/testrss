<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>基于SpringBoot搭建应用开发框架(二) —— 登录认证 - bojiangzhou</title>
<link>http://www.cnblogs.com/chiangchou/p/springboot-2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chiangchou/p/springboot-2.html</guid>
<description>&lt;h2&gt;&lt;span&gt;零、前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本文基于《&lt;a href=&quot;http://www.cnblogs.com/chiangchou/p/sunny-1.htmlhttp://www.cnblogs.com/chiangchou/p/sunny-1.html&quot; target=&quot;_blank&quot;&gt;基于SpringBoot搭建应用开发框架(一)——基础架构&lt;/a&gt;》，通过该文，熟悉了SpringBoot的用法，完成了应用框架底层的搭建。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在开始本文之前，底层这块已经有了很大的调整，主要是SpringBoot由之前的 1.5.9.RELEASE 升级至 2.1.0.RELEASE 版本，其它依赖的三方包基本也都升级到目前最新版了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其次是整体架构上也做了调整：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　sunny-parent&lt;/strong&gt;：sunny 项目的顶级父类，sunny-parent 又继承自 spring-boot-starter-parent ，为所有项目统一 spring 及 springboot 版本。同时，管理项目中将用到的大部分的第三方包，统一管理版本号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　sunny-starter&lt;/strong&gt;：项目中开发的组件以 starter 的方式进行集成，按需引入 starter 即可。sunny-starter 下以 module 的形式组织，便于管理、批量打包部署。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　sunny-starter-core：核心包，定义基础的操作类、异常封装、工具类等，集成了 mybatis-mapper、druid 数据源、redis 等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　sunny-starter-captcha：验证码封装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　sunny-cloud&lt;/strong&gt;：spring-cloud 系列服务，微服务基础框架，本篇文章主要集中在 sunny-cloud-security上，其它的以后再说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　sunny-cloud-security：认证服务和授权服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　sunny-admin&lt;/strong&gt;：管理端服务，业务中心。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015230050923-1693993124.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇将会一步步完成系统的登录认证，包括常规的用户名+密码登录、以及社交方式登录，如QQ、微信授权登录等，一步步分析 spring-security 及 oauth 相关的源码。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、SpringSecurity 简介&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;SpringSecurity 是专门针对基于Spring项目的安全框架，充分利用了AOP和Filter来实现安全功能。它提供全面的安全性解决方案，同时在 Web 请求级和方法调用级处理身份确认和授权。他提供了强大的企业安全服务，如：认证授权机制、Web资源访问控制、业务方法调用访问控制、领域对象访问控制Access Control List（ACL）、单点登录（SSO）等等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;核心功能&lt;/strong&gt;：认证（你是谁）、授权（你能干什么）、攻击防护（防止伪造身份）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;基本原理&lt;/strong&gt;：SpringSecurity的核心实质是一个过滤器链，即一组Filter，所有的请求都会经过这些过滤器，然后响应返回。每个过滤器都有特定的职责，可通过配置添加、删除过滤器。&lt;/span&gt;&lt;span&gt;过滤器的排序很重要，因为它们之间有依赖关系。有些过滤器也不能删除，如处在过滤器链最后几环的ExceptionTranslationFilter(处理后者抛出的异常)，FilterSecurityInterceptor(最后一环，根据配置决定请求能不能访问服务)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二、标准登录&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;使用 用户名+密码 的方式来登录，用户名、密码存储在数据库，并且支持密码输入错误三次后开启验证码，通过这样一个过程来熟悉 spring security 的认证流程，掌握 spring security 的原理。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、基础环境&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 创建 sunny-cloud-security 模块，端口号设置为 8010，在sunny-cloud-security模块引入security支持以及sunny-starter-core：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003202611989-127395357.png&quot; alt=&quot;&quot; width=&quot;1273&quot; height=&quot;365&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003201211050-437870985.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 开发一个TestController&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003203900547-469380981.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ③ 不做任何配置，启动系统，然后访问 localhost:8010/test 时，会自动跳转到SpringSecurity默认的登录页面去进行认证。那这登录的用户名和密码从哪来呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003201955146-212006990.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启动项目时，从控制台输出中可以找到生成的 security 密码，从 UserDetailsServiceAutoConfiguration 可以得知，使用的是基于内存的用户管理器，默认的用户名为 user，密码是随机生成的UUID。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003202849350-202944974.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004021935238-1836227686.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003203530613-698479141.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;269&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们也可以修改默认的用户名和密码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/856154/201803/856154-20180326002517093-1000676357.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 使用 user 和生成的UUID密码登录成功后即可访问 /test 资源，最简单的一个认证就完成了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003204207607-2054587740.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在不做任何配置的情况下，security会把服务内所有资源的访问都保护起来，需要先进行身份证认证才可访问， 使用默认的表单登录或http basic认证方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过这种默认方式肯定无法满足我们的需求，我们的用户名和密码都是存在数据库的。下面我们就来看看在 spring boot 中我们如何去配置自己的登录页面以及从数据库获取用户数据来完成用户登录。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、自定义登录页面&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 首先开发一个登录页面，由于页面中会使用到一些动态数据，决定使用 thymeleaf 模板引擎，只需在 pom 中引入如下依赖，使用默认配置即可，具体有哪些配置可从 ThymeleafProperties 中了解到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003214521450-841006912.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 同时，在 resources 目录下，建 static 和 templates 两个目录，static 目录用于存放静态资源，templates 用于存放 thymeleaf 模板页面，同时配置MVC的静态资源映射。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003214756158-1145118181.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003215045382-1048605824.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 开发后台首页、登录页面的跳转地址，/login 接口用于向登录页面传递登录相关的数据，如用户名、是否启用验证码、错误消息等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('62a7ad5b-8971-4f1e-87aa-f6a358475b82')&quot; readability=&quot;35.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_62a7ad5b-8971-4f1e-87aa-f6a358475b82&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_62a7ad5b-8971-4f1e-87aa-f6a358475b82&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('62a7ad5b-8971-4f1e-87aa-f6a358475b82',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_62a7ad5b-8971-4f1e-87aa-f6a358475b82&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpSession;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.WebAttributes;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaImageHelper;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.base.Result;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.message.MessageAccessor;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.userdetails.CustomUserDetails;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.userdetails.DetailsHelper;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.util.Results;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.constant.SecurityConstants;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.ConfigService;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/03/28
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecurityController {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGIN_PAGE = &quot;login&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String INDEX_PAGE = &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FIELD_ERROR_MSG = &quot;errorMsg&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FIELD_ENABLE_CAPTCHA = &quot;enableCaptcha&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CaptchaImageHelper captchaImageHelper;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ConfigService configService;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     @RequestMapping(&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index() {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; INDEX_PAGE;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     @GetMapping(&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(HttpSession session, Model model) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         String errorMsg =&lt;span&gt; (String) session.getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         String username =&lt;span&gt; (String) session.getAttribute(User.FIELD_USERNAME);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(errorMsg)) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            model.addAttribute(FIELD_ERROR_MSG, errorMsg);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(username)) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            model.addAttribute(User.FIELD_USERNAME, username);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             User user =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 model.addAttribute(FIELD_ERROR_MSG, MessageAccessor.getMessage(&quot;login.username-or-password.error&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (configService.isEnableCaptcha(user.getPasswordErrorTime())) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                     model.addAttribute(FIELD_ENABLE_CAPTCHA, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; LOGIN_PAGE;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt;     @GetMapping(&quot;/public/captcha.jpg&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; captcha(HttpServletResponse response) {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;        captchaImageHelper.generateAndWriteCaptchaImage(response, SecurityConstants.SECURITY_KEY);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt;     @GetMapping(&quot;/user/self&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result test() {
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;         CustomUserDetails details =&lt;span&gt; DetailsHelper.getUserDetails();
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Results.successWithData(details);
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; 
&lt;span&gt;88&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; ④  从 spring boot 官方文档可以得知，spring security 的核心配置都在 WebSecurityConfigurerAdapter 里，我们只需继承该适配器覆盖默认配置即可。首先来看看默认的登录页面以及如何配置登录页面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过 HttpSecurity 配置安全策略，首先开放了允许匿名访问的地址，除此之外都需要认证，通过 formLogin() 来启用表单登录，并配置了默认的登录页面，以及登录成功后的首页地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004000249267-2128808929.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启动系统，访问资源跳转到自定义的登录页面了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181006195334081-1117806073.png&quot; alt=&quot;&quot; width=&quot;1060&quot; height=&quot;596&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ 那么默认的登录页面是怎么来的呢，以及做了哪些默认配置？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从 formLogin() 可以看出，启用表单登录即启用了表单登录的配置 FormLoginConfigurer：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003222802733-771542088.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从 FormLoginConfigurer 的构造函数中可以看出，表单登录用户名和密码的参数默认配置为 username 和 password，所以，我们的登录页面中需和这两个参数配置成一样，当然了，我们也可以在 formLogin() 后自定义这两个参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时，可以看出开启了 UsernamePasswordAuthenticationFilter 过滤器，用于 用户名+密码 登录方式的认证，这个之后再说明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003222852217-482154708.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从初始化配置中可以看出，默认创建了 DefaultLoginPageGeneratingFilter 过滤器用于生成默认的登录页面，从该过滤器的初始化方法中我们也可以了解到一些默认的配置。这个过滤器只有在未配置自定义登录页面时才会生效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181003224359020-332482179.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3、SpringSecurity基本原理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在进行后面的开发前，先来了解下 spring security 的基本原理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spring security 的核心是过滤器链，即一组 Filter。所有服务资源的请求都会经过 spring security 的过滤器链，并响应返回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们从控制台中可以找到输出过滤器链的类 DefaultSecurityFilterChain，在现有的配置上，可以看到当前过滤器链共有13个过滤器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个过滤器主要做什么可以参考：&lt;/span&gt;&lt;a href=&quot;https://blog.csdn.net/dushiwodecuo/article/details/78913113&quot; target=&quot;_blank&quot;&gt;Spring Security 核心过滤器链分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004000513857-1841557899.png&quot; alt=&quot;&quot; width=&quot;1635&quot; height=&quot;979&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;过滤器链的创建是通过 HttpSecurity 的配置而来，实际上，每个 HttpSecurity 的配置都会创建相应的过滤器链来处理对应的请求，每个请求都会进入 FilterChainProxy 过滤器，根据请求选择一个合适的过滤器链来处理该请求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181107125143844-393927348.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;过滤器的顺序我们可以从 FilterComparator 中得知，并且可以看出 spring security 默认有25个过滤器(自行查看)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004002209111-603455399.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 不难发现，几乎所有的过滤器都直接或间接继承自 GenericFilterBean，通过这个基础过滤器可以看到都有哪些过滤器，通过每个过滤器的名称我们能大概了解到 spring security 为我们提供了哪些功能，要启用这些功能，只需通过配置加入相应的过滤器即可，比如 oauth 认证。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004004023191-1504224257.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;过滤器链中，绿色框出的这类过滤器主要用于用户认证，这些过滤器会根据当前的请求检查是否有这个过滤器所需的信息，如果有则进入该过滤器，没有则不会进入下一个过滤器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如这里，如果是表单登录，要求必须是[POST /login]，则进入 UsernamePasswordAuthenticationFilter 过滤器，使用用户名和密码进行认证，不会再进入BasicAuthenticationFilter；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004022934528-994484302.png&quot; alt=&quot;&quot; width=&quot;808&quot; height=&quot;573&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004022955277-521067515.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果使用 http basic 的方式进行认证，要求请求头必须包含 &lt;/span&gt;Authorization，且值以 basic 打头，&lt;span&gt;则进入 BasicAuthenticationFilter 进行认证。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004003217123-1078256984.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经过前面的过滤器后，最后会进入到 FilterSecurityInterceptor，这是整个 spring security 过滤器链的最后一环，在它身后就是服务的API。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个过滤器会去根据配置决定当前的请求能不能访问真正的资源，主要一些实现功能在其父类AbstractSecurityInterceptor中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004011700120-2081397517.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[1] 拿到的是权限配置，会根据这些配置决定访问的API能否通过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[2] 当前上下文必须有用户认证信息 Authentication，就算是匿名访问也会有相应的过滤器来生成 Authentication。不难发现，不同类型的认证过滤器对应了不同的 Authentication。使用用户名和密码登录时，就会生成 UsernamePasswordAuthenticationToken。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004013030335-1382773324.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[3] 用户认证，首先判断用户是否已认证通过，认证通过则直接返回 Authentication，否则调用认证器进行认证。认证通过之后将 Authentication 放到 Security 的上下文，这就是为何我们能从 SecurityContextHolder 中取到 Authentication 的源头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004013329747-1437099387.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认证管理器是默认配置的 ProviderManager，ProviderManager 则管理者多个 AuthenticationProvider 认证器 ，认证的时候，只要其中一个认证器认证通过，则标识认证通过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004014425654-1317448251.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认证器：表单登录默认使用 DaoAuthenticationProvider，我们想要实现从数据库获取用户名和密码就得从这里入手。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004014615549-1414848667.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[4] 认证通过后，使用权限决定管理器 AccessDecisionManager 判断是否有权限，管理器则管理者多个 权限投票器 AccessDecisionVoter，通过投票器来决定是否有权限访问资源。因此，我们也可以自定义投票器来判断用户是否有权限访问某个API。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004015413774-425365710.png&quot; alt=&quot;&quot; width=&quot;975&quot; height=&quot;730&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，如果未认证通过或没有权限，FilterSecurityInterceptor 则抛出相应的异常，异常会被 ExceptionTranslationFilter 捕捉到，进行统一的异常处理分流，比如未登录时，重定向到登录页面；没有权限的时候抛出403异常等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004020257082-1712057404.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4、用户认证流程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;从 spring security 基本原理的分析中不难发现，用户的认证过程涉及到三个主要的组件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;AbstractAuthenticationProcessingFilter：&lt;/strong&gt;它在基于web的认证请求中用于处理包含认证信息的请求，创建一个部分完整的Authentication对象以在链中传递凭证信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;AuthenticationManager：&lt;/strong&gt;它用来校验用户的凭证信息，或者会抛出一个特定的异常（校验失败的情况）或者完整填充Authentication对象，将会包含了权限信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;AuthenticationProvider：&lt;/strong&gt;它为AuthenticationManager提供凭证校验。一些AuthenticationProvider的实现基于凭证信息的存储，如数据库，来判定凭证信息是否可以被认可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们从核心的 AbstractAuthenticationProcessingFilter 入手，来分析下用户认证的流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[1] 可以看到，首先会调用 attemptAuthentication 来获取认证后的 Authentication。attemptAuthentication 是一个抽象方法，在其子类中实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004202940456-1184641112.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 前面提到过，启用表单登录时，就会创建 UsernamePasswordAuthenticationFilter 用于处理表单登录。后面开发 oauth2 认证的时候则会用到 OAuth2 相关的过滤器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004203306258-238219594.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从 attemptAuthentication 的实现中可以看出，主要是将 username 和 password 封装到 UsernamePasswordAuthenticationToken。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004203608280-564361833.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从当前 UsernamePasswordAuthenticationToken 的构造方法中可以看出，此时的 Authentication 设置了未认证状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004203810501-944946010.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 【#】通过 setDetails 可以向 UsernamePasswordAuthenticationToken  中加入 Details 用于后续流程的处理，稍后我会实现AuthenticationDetailsSource 将验证码放进去用于后面的认证。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004204135595-134587899.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后，通过 AuthenticationManager 进行认证，实际是 ProviderManager 管理着一些认证器，这些配置都可以通过 setter 方法找到相应配置的位置，这里就不赘述了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不难发现，用户认证器使用的是 AbstractUserDetailsAuthenticationProvider，流程主要涉及到 retrieveUser  和 additionalAuthenticationChecks 两个抽象方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【#】AbstractUserDetailsAuthenticationProvider 默认只有一个实现类 DaoAuthenticationProvider，获取用户信息、用户密码校验都是在这个实现类里，因此我们也可以实现自己的 AbstractUserDetailsAuthenticationProvider 来处理相关业务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004210511535-1147599033.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【#】从 retrieveUser 中可以发现，主要使用 UserDetailsService 来获取用户信息，该接口只有一个方法 loadUserByUsername，我们也会实现该接口来从数据库获取用户信息。如果有复杂的业务逻辑，比如锁定用户等，还可以覆盖 retrieveUser 方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004211603446-258365134.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004211819862-1100861669.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 用户返回成功后，就会通过 PasswordEncoder 来校验用户输入的密码和数据库密码是否匹配。注意数据库存入的密码是加密后的密码，且不可逆。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004212356021-928531470.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 用户、密码都校验通过后，就会创建已认证的 Authentication，从此时 UsernamePasswordAuthenticationToken 的构造方法可以看出，构造的是一个已认证的 Authentication。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004213039708-481854217.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004213138740-464749962.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[2] 如果用户认证失败，会调用 AuthenticationFailureHandler 的 onAuthenticationFailure 方法进行认证失败后的处理，我们也会实现这个接口来做一些失败后逻辑处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004213708998-2108623967.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[3] 用户认证成功，将 Authentication 放入 security 上下文，调用 AuthenticationSuccessHandler 做认证成功的一些后续逻辑处理，我们也会实现这个接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004214105924-1985961063.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5、用户认证代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;通过 spring security 基本原理分析和用户认证流程分析，我们已经能够梳理出完成认证需要做哪些工作了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 首先设计并创建系统用户表：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181004215244585-402580456.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;② &lt;/span&gt;CustomUserDetails&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义 UserDetails，根据自己的需求将一些常用的用户信息封装到 UserDetails 中，便于快速获取用户信息，比如用户ID、昵称等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f5665975-f752-49a1-97bb-d7314f5a99cc')&quot; readability=&quot;36.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_f5665975-f752-49a1-97bb-d7314f5a99cc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5665975-f752-49a1-97bb-d7314f5a99cc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f5665975-f752-49a1-97bb-d7314f5a99cc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_f5665975-f752-49a1-97bb-d7314f5a99cc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.userdetails;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Objects;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.User;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * 定制的UserDetail对象
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/02
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomUserDetails &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = -4461471539260584625L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long userId;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String nickname;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String language;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomUserDetails(String username, String password, Long userId, String nickname, String language,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                              Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(username, password, authorities);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.nickname =&lt;span&gt; nickname;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.language =&lt;span&gt; language;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getUserId() {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserId(Long userId) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getNickname() {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nickname;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setNickname(String nickname) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.nickname =&lt;span&gt; nickname;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLanguage() {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; language;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLanguage(String language) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.language =&lt;span&gt; language;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object o) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; o) {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!(o &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; CustomUserDetails)) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.equals(o)) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;         CustomUserDetails that =&lt;span&gt; (CustomUserDetails) o;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Objects.equals(userId, that.userId)) {
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.hashCode();
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         result = 31 * result +&lt;span&gt; userId.hashCode();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         result = 31 * result +&lt;span&gt; nickname.hashCode();
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;         result = 31 * result +&lt;span&gt; language.hashCode();
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;③ &lt;/span&gt;CustomUserDetailsService&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;自定义 UserDetailsService 来从数据库获取用户信息，并将用户信息封装到 &lt;/span&gt;CustomUserDetails&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('77f43753-9091-43de-966e-e4408aa20ccd')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_77f43753-9091-43de-966e-e4408aa20ccd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_77f43753-9091-43de-966e-e4408aa20ccd&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('77f43753-9091-43de-966e-e4408aa20ccd',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_77f43753-9091-43de-966e-e4408aa20ccd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.SimpleGrantedAuthority;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetails;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetailsService;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UsernameNotFoundException;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.message.MessageAccessor;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.userdetails.CustomUserDetails;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt; * 加载用户信息实现类
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/03/25
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomUserDetailsService &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserDetailsService {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; UserDetails loadUserByUsername(String username) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UsernameNotFoundException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         User user =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UsernameNotFoundException(MessageAccessor.getMessage(&quot;login.username-or-password.error&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         Collection&amp;lt;GrantedAuthority&amp;gt; authorities = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         authorities.add(&lt;span&gt;new&lt;/span&gt; SimpleGrantedAuthority(&quot;ROLE_USER&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomUserDetails(username, user.getPassword(), user.getId(),
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                user.getNickname(), user.getLanguage(), authorities);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;④ CustomWebAuthenticationDetails&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义 WebAuthenticationDetails 用于封装传入的验证码以及缓存的验证码，用于后续校验。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('111d99b9-3679-408a-a95e-66a6b2b1c11d')&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_111d99b9-3679-408a-a95e-66a6b2b1c11d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_111d99b9-3679-408a-a95e-66a6b2b1c11d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('111d99b9-3679-408a-a95e-66a6b2b1c11d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_111d99b9-3679-408a-a95e-66a6b2b1c11d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaResult;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.WebAuthenticationDetails;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * 封装验证码
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/18
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomWebAuthenticationDetails &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebAuthenticationDetails {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FIELD_CACHE_CAPTCHA = &quot;cacheCaptcha&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String inputCaptcha;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cacheCaptcha;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomWebAuthenticationDetails(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(request);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         cacheCaptcha =&lt;span&gt; (String) request.getAttribute(FIELD_CACHE_CAPTCHA);
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         inputCaptcha =&lt;span&gt; request.getParameter(CaptchaResult.FIELD_CAPTCHA);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInputCaptcha() {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; inputCaptcha;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCacheCaptcha() {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cacheCaptcha;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object object) {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; object) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (object == &lt;span&gt;null&lt;/span&gt; || getClass() !=&lt;span&gt; object.getClass()) {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.equals(object)) {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;         CustomWebAuthenticationDetails that =&lt;span&gt; (CustomWebAuthenticationDetails) object;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; inputCaptcha != &lt;span&gt;null&lt;/span&gt; ? inputCaptcha.equals(that.inputCaptcha) : that.inputCaptcha == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.hashCode();
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         result = 31 * result + (inputCaptcha != &lt;span&gt;null&lt;/span&gt; ? inputCaptcha.hashCode() : 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaResult;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.WebAuthenticationDetails;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt; * 封装验证码
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/18
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomWebAuthenticationDetails &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebAuthenticationDetails {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FIELD_CACHE_CAPTCHA = &quot;cacheCaptcha&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String inputCaptcha;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cacheCaptcha;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomWebAuthenticationDetails(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(request);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         cacheCaptcha =&lt;span&gt; (String) request.getAttribute(FIELD_CACHE_CAPTCHA);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         inputCaptcha =&lt;span&gt; request.getParameter(CaptchaResult.FIELD_CAPTCHA);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInputCaptcha() {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; inputCaptcha;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCacheCaptcha() {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cacheCaptcha;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object object) {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; object) {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (object == &lt;span&gt;null&lt;/span&gt; || getClass() !=&lt;span&gt; object.getClass()) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.equals(object)) {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;         CustomWebAuthenticationDetails that =&lt;span&gt; (CustomWebAuthenticationDetails) object;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; inputCaptcha != &lt;span&gt;null&lt;/span&gt; ? inputCaptcha.equals(that.inputCaptcha) : that.inputCaptcha == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.hashCode();
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         result = 31 * result + (inputCaptcha != &lt;span&gt;null&lt;/span&gt; ? inputCaptcha.hashCode() : 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑤ &lt;/span&gt;CustomAuthenticationDetailsSource&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当然了，还需要一个构造验证码的 &lt;/span&gt;AuthenticationDetailsSource&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a327e358-9871-4b4f-a6c8-763829c90820')&quot; readability=&quot;34&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_a327e358-9871-4b4f-a6c8-763829c90820&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a327e358-9871-4b4f-a6c8-763829c90820&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a327e358-9871-4b4f-a6c8-763829c90820',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_a327e358-9871-4b4f-a6c8-763829c90820&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationDetailsSource;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.WebAuthenticationDetails;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaImageHelper;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.constant.SecurityConstants;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * 自定义获取AuthenticationDetails 用于封装传进来的验证码
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/18
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomAuthenticationDetailsSource &lt;span&gt;implements&lt;/span&gt; AuthenticationDetailsSource&amp;lt;HttpServletRequest, WebAuthenticationDetails&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CaptchaImageHelper captchaImageHelper;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; WebAuthenticationDetails buildDetails(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         String cacheCaptcha =&lt;span&gt; captchaImageHelper.getCaptcha(request, SecurityConstants.SECURITY_KEY);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        request.setAttribute(CustomWebAuthenticationDetails.FIELD_CACHE_CAPTCHA, cacheCaptcha);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomWebAuthenticationDetails(request);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑥ &lt;/span&gt;CustomAuthenticationProvider&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义认证处理器，主要加入了验证码的检查，如果用户密码输入错误三次以上，则需要验证码。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('690db9b3-b695-4125-a095-e3b843ffca33')&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_690db9b3-b695-4125-a095-e3b843ffca33&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_690db9b3-b695-4125-a095-e3b843ffca33&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('690db9b3-b695-4125-a095-e3b843ffca33',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_690db9b3-b695-4125-a095-e3b843ffca33&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationServiceException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.BadCredentialsException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.AuthenticationException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetails;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.ConfigService;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * 自定义认证器
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/09
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomAuthenticationProvider &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractUserDetailsAuthenticationProvider {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomUserDetailsService detailsService;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ConfigService configService;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如有其它逻辑处理，可在此处进行逻辑处理...&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; detailsService.loadUserByUsername(username);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         String username =&lt;span&gt; userDetails.getUsername();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         User user =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查验证码&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (authentication.getDetails() &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; CustomWebAuthenticationDetails) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (configService.isEnableCaptcha(user.getPasswordErrorTime())) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 CustomWebAuthenticationDetails details =&lt;span&gt; (CustomWebAuthenticationDetails) authentication.getDetails();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 String inputCaptcha =&lt;span&gt; details.getInputCaptcha();
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 String cacheCaptcha =&lt;span&gt; details.getCacheCaptcha();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(inputCaptcha) || !&lt;span&gt;StringUtils.equalsIgnoreCase(inputCaptcha, cacheCaptcha)) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AuthenticationServiceException(&quot;login.captcha.error&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 authentication.setDetails(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查密码是否正确&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         String password =&lt;span&gt; userDetails.getPassword();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         String rawPassword =&lt;span&gt; authentication.getCredentials().toString();
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; match =&lt;span&gt; passwordEncoder.matches(rawPassword, password);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;match) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BadCredentialsException(&quot;login.username-or-password.error&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑦ &lt;/span&gt;CustomAuthenticationSuccessHandler&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义认证成功处理器，用户认证成功，将密码错误次数置零。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4460323c-4121-46d4-a692-17d893c53208')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_4460323c-4121-46d4-a692-17d893c53208&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4460323c-4121-46d4-a692-17d893c53208&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4460323c-4121-46d4-a692-17d893c53208',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_4460323c-4121-46d4-a692-17d893c53208&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.Authentication;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt; * 登录认证成功处理器
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/03/29
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomAuthenticationSuccessHandler &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SavedRequestAwareAuthenticationSuccessHandler {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                     Authentication authentication) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, ServletException {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         User user =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        userService.loginSuccess(user.getId());
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onAuthenticationSuccess(request, response, authentication);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑧ &lt;/span&gt;CustomAuthenticationFailureHandler&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户认证失败，记录密码错误次数，并重定向到登录页面。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a18555cc-1bc7-4d3b-923d-8bb145e5fe3e')&quot; readability=&quot;36.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_a18555cc-1bc7-4d3b-923d-8bb145e5fe3e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a18555cc-1bc7-4d3b-923d-8bb145e5fe3e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a18555cc-1bc7-4d3b-923d-8bb145e5fe3e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_a18555cc-1bc7-4d3b-923d-8bb145e5fe3e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpSession;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.BadCredentialsException;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.AuthenticationException;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.DefaultRedirectStrategy;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.RedirectStrategy;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.WebAttributes;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.AuthenticationFailureHandler;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.message.MessageAccessor;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.config.SecurityProperties;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * 登录失败处理器
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/03/29
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomAuthenticationFailureHandler &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; AuthenticationFailureHandler {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SecurityProperties securityProperties;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; RedirectStrategy redirectStrategy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultRedirectStrategy();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     AuthenticationException exception) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, ServletException {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         HttpSession session = request.getSession(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (session != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             session.setAttribute(&quot;username&quot;&lt;span&gt;, username);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            session.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                            MessageAccessor.getMessage(exception.getMessage(), exception.getMessage()));
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (exception &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BadCredentialsException) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             User user =&lt;span&gt; userService.getUserByUsername(username);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            userService.loginFail(user.getId());
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         redirectStrategy.sendRedirect(request, response, securityProperties.getLoginPage() + &quot;?username=&quot; +&lt;span&gt; username);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑨ 配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面的开发完成当然还需做配置，通过 formLogin() 来配置认证成功/失败处理器等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过 AuthenticationManagerBuilder 配置自定义的认证器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SpringSecurity提供了一个 PasswordEncoder 接口用于处理加密解密。该接口有两个方法 encode 和 matches 。encode 对密码加密，matches 判断用户输入的密码和加密的密码(数据库密码)是否匹配。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('61080477-d5e9-46db-bfaf-ab730ffc582f')&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_61080477-d5e9-46db-bfaf-ab730ffc582f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_61080477-d5e9-46db-bfaf-ab730ffc582f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('61080477-d5e9-46db-bfaf-ab730ffc582f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_61080477-d5e9-46db-bfaf-ab730ffc582f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.lyyzoo.sunny.security.core.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * Security 主配置器
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; @EnableConfigurationProperties(SecurityProperties.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SecurityConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SecurityProperties properties;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationDetailsSource authenticationDetailsSource;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationProvider authenticationProvider;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationSuccessHandler authenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationFailureHandler authenticationFailureHandler;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        http
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            .authorizeRequests()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             .antMatchers(&quot;/static/**&quot;, &quot;/webjars/**&quot;, &quot;/public/**&quot;, &quot;/login&quot;, &quot;/favicon.ico&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             .permitAll() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 允许匿名访问的地址&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             .and() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用and()方法相当于XML标签的关闭，这样允许我们继续配置父类节点。&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            .authorizeRequests()
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            .anyRequest()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             .authenticated() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其它地址都需进行认证&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            .and()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             .formLogin() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 启用表单登录&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;             .loginPage(properties.getLoginPage()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录页面&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             .defaultSuccessUrl(&quot;/index&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认的登录成功后的跳转地址&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            .authenticationDetailsSource(authenticationDetailsSource)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            .successHandler(authenticationSuccessHandler)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            .failureHandler(authenticationFailureHandler)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            .and()
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            .csrf()
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            .disable()
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;     * 设置认证处理器
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        auth.authenticationProvider(authenticationProvider);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(auth);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;     * 密码处理器
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑩ 登录页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181007004705365-2139345184.png&quot; alt=&quot;&quot; width=&quot;1046&quot; height=&quot;639&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;三、手机短信登录&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;经过前面用户名+密码的登录流程分析后，现在再来开发手机号+短信验证码的方式登录。手机短信登录无法直接使用标准登录的流程，所以需要模拟标准登录流程开发。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、流程分析&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;类比标准登录流程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 登录请求 [POST /login] 在 UsernamePasswordAuthenticationFilter 过滤器中封装未认证的 UsernamePasswordAuthenticationToken；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　短信登录时，请求 [POST /authentication/mobile] 进行登录认证，自定义 SmsAuthenticationFilter 短信认证过滤器，生成未认证的 SmsAuthenticationToken；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 调用 AuthenticationManager 进行认证；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 认证时，使用自定义的 CustomAuthenticationProvider 进行用户信息认证；短信登录则自定义短信认证器 SmsAuthenticationProvider ；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 认证器使用自定义的 CustomUserDetailsService 来获取用户信息；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ 认证成功后，生成已认证的 UsernamePasswordAuthenticationToken；短信登录时则生成已认证的 SmsAuthenticationToken；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181007013731816-467036658.png&quot; alt=&quot;&quot; width=&quot;1021&quot; height=&quot;669&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 短信登录专用 Authentication&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参照 UsernamePasswordAuthenticationToken，两个构造方法，认证前，放入手机号；认证成功之后，放入用户信息。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('57a058be-0017-45fb-a808-12ef00214524')&quot; readability=&quot;33&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_57a058be-0017-45fb-a808-12ef00214524&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_57a058be-0017-45fb-a808-12ef00214524&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('57a058be-0017-45fb-a808-12ef00214524',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_57a058be-0017-45fb-a808-12ef00214524&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AbstractAuthenticationToken;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * 短信认证用到的 Authentication，封装登录信息。 认证前，放入手机号；认证成功之后，放入用户信息。
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * 参考 {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; UsernamePasswordAuthenticationToken}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/22
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SmsAuthenticationToken &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractAuthenticationToken {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 手机号&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Object principal;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationToken(Object principal) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.principal =&lt;span&gt; principal;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         setAuthenticated(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; SmsAuthenticationToken(Object principal, Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(authorities);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.principal =&lt;span&gt; principal;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;.setAuthenticated(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getCredentials() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getPrincipal() {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.principal;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAuthenticated(&lt;span&gt;boolean&lt;/span&gt; isAuthenticated) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IllegalArgumentException {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isAuthenticated) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalArgumentException(
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                             &quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;.setAuthenticated(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eraseCredentials() {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.eraseCredentials();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;② 短信登录认证过滤器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参照 UsernamePasswordAuthenticationFilter，注意在构造方法中配置短信登录的地址 [POST /authentication/mobile]，只有与这个地址匹配的才会进入这个过滤器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时，定义 SmsAuthenticationDetails 封装用户输入的手机验证码，在认证器里校验验证码正确性。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9697c8da-b57a-4827-9239-fb03f143dd4b')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_9697c8da-b57a-4827-9239-fb03f143dd4b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9697c8da-b57a-4827-9239-fb03f143dd4b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9697c8da-b57a-4827-9239-fb03f143dd4b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_9697c8da-b57a-4827-9239-fb03f143dd4b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationServiceException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.Authentication;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.AuthenticationException;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.util.matcher.AntPathRequestMatcher;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * 短信登录认证过滤器
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; * 参考 {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; UsernamePasswordAuthenticationFilter}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/22
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SmsAuthenticationFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractAuthenticationProcessingFilter {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SUNNY_SMS_MOBILE_KEY = &quot;mobile&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String mobileParameter =&lt;span&gt; SUNNY_SMS_MOBILE_KEY;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; postOnly = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;     * 仅匹配 [POST /authentication/mobile]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationFilter() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; AntPathRequestMatcher(&quot;/authentication/mobile&quot;, &quot;POST&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Authentication attemptAuthentication(HttpServletRequest request,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                                                 HttpServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (postOnly &amp;amp;&amp;amp; !request.getMethod().equals(&quot;POST&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthenticationServiceException(
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                     &quot;Authentication method not supported: &quot; +&lt;span&gt; request.getMethod());
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         String mobile =&lt;span&gt; obtainMobile(request);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (mobile == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             mobile = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;         mobile =&lt;span&gt; mobile.trim();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;         SmsAuthenticationToken authRequest = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationToken(mobile);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Allow subclasses to set the &quot;details&quot; property&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        setDetails(request, authRequest);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getAuthenticationManager().authenticate(authRequest);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String obtainMobile(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; request.getParameter(mobileParameter);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDetails(HttpServletRequest request, SmsAuthenticationToken authRequest) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMobileParameter(String mobileParameter) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         Assert.hasText(mobileParameter, &quot;Mobile parameter must not be empty or null&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.mobileParameter =&lt;span&gt; mobileParameter;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPostOnly(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; postOnly) {
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.postOnly =&lt;span&gt; postOnly;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String getMobileParameter() {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mobileParameter;
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;③ 短信登录认证器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考 DaoAuthenticationProvider，覆盖父类的 authenticate 方法，根据手机号获取用户信息，校验用户输入的验证码是否正确。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;覆盖 supports 方法，只有 {@link SmsAuthenticationToken} 类型才使用该认证器，ProviderManager 里将会调用该方法寻找合适的认证器来认证。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('dd91694c-0b69-49aa-8253-87806ce59852')&quot; readability=&quot;42&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_dd91694c-0b69-49aa-8253-87806ce59852&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dd91694c-0b69-49aa-8253-87806ce59852&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('dd91694c-0b69-49aa-8253-87806ce59852',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_dd91694c-0b69-49aa-8253-87806ce59852&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaMessageHelper;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaResult;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.constant.SecurityConstants;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.exception.CaptchaException;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationProvider;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.dao.DaoAuthenticationProvider;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.Authentication;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.AuthenticationException;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.mapping.NullAuthoritiesMapper;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetails;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UserDetailsService;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt; * 短信登录认证器
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt; * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt; * 参考 {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; AbstractUserDetailsAuthenticationProvider}，{&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; DaoAuthenticationProvider}
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/22
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SmsAuthenticationProvider &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; AuthenticationProvider {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(SmsAuthenticationProvider.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserDetailsService userDetailsService;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; GrantedAuthoritiesMapper authoritiesMapper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullAuthoritiesMapper();
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CaptchaMessageHelper captchaMessageHelper;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationProvider(UserDetailsService userDetailsService, CaptchaMessageHelper captchaMessageHelper) {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userDetailsService =&lt;span&gt; userDetailsService;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.captchaMessageHelper =&lt;span&gt; captchaMessageHelper;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Authentication authenticate(Authentication authentication) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         Assert.isInstanceOf(SmsAuthenticationToken.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, authentication,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                         &quot;Only SmsAuthenticationToken is supported&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;         String mobile = (authentication.getPrincipal() == &lt;span&gt;null&lt;/span&gt;) ? &quot;NONE_PROVIDED&quot;&lt;span&gt; : authentication.getName();
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;         UserDetails user =&lt;span&gt; retrieveUser(mobile, (SmsAuthenticationToken) authentication);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         Assert.notNull(user, &quot;retrieveUser returned null - a violation of the interface contract&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; 
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        additionalAuthenticationChecks(user, (SmsAuthenticationToken) authentication);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; createSuccessAuthentication(user, authentication, user);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; UserDetails retrieveUser(String mobile, SmsAuthenticationToken authentication)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                     &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getUserDetailsService().loadUserByUsername(mobile);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; additionalAuthenticationChecks(UserDetails userDetails, SmsAuthenticationToken authentication)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                     &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         Assert.isInstanceOf(SmsAuthenticationDetails.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, authentication.getDetails());
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         SmsAuthenticationDetails details =&lt;span&gt; (SmsAuthenticationDetails) authentication.getDetails();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         String mobile = (authentication.getPrincipal() == &lt;span&gt;null&lt;/span&gt;) ? &quot;NONE_PROVIDED&quot;&lt;span&gt; : authentication.getName();
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查验证码&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         String inputCaptcha =&lt;span&gt; details.getInputCaptcha();
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         String captchaKey =&lt;span&gt; details.getCaptchaKey();
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isAnyEmpty(inputCaptcha, captchaKey)) {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CaptchaException(&quot;login.mobile-captcha.null&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         CaptchaResult captchaResult =&lt;span&gt; captchaMessageHelper.checkCaptcha(captchaKey, inputCaptcha, mobile,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                         SecurityConstants.SECURITY_KEY, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         authentication.setDetails(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;captchaResult.isSuccess()) {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CaptchaException(captchaResult.getMessage());
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Authentication createSuccessAuthentication(Object principal, Authentication authentication,
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                    UserDetails user) {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         SmsAuthenticationToken result =
&lt;span&gt; 86&lt;/span&gt;                         &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationToken(principal, authoritiesMapper.mapAuthorities(user.getAuthorities()));
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;        result.setDetails(authentication.getDetails());
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;     * 只有 {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; SmsAuthenticationToken} 类型才使用该认证器
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; supports(Class&amp;lt;?&amp;gt;&lt;span&gt; authentication) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (SmsAuthenticationToken.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.isAssignableFrom(authentication));
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserDetailsService getUserDetailsService() {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; userDetailsService;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserDetailsService(UserDetailsService userDetailsService) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userDetailsService =&lt;span&gt; userDetailsService;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CaptchaMessageHelper getCaptchaMessageHelper() {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; captchaMessageHelper;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCaptchaMessageHelper(CaptchaMessageHelper captchaMessageHelper) {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.captchaMessageHelper =&lt;span&gt; captchaMessageHelper;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;3、短信登录配置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;短信登录的配置可以参考表单登录的配置 FormLoginConfigurer，在使用 formLogin() 时就会启用该配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义 SmsLoginConfigurer，创建短信登录配置时，创建短信认证过滤器，在 configure 中配置该过滤器的认证成功/失败处理器。最重要的一点，将短信认证过滤器加到 UsernamePasswordAuthenticationFilter 之后。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a5adab89-d451-4ae7-b17c-8e698a8117ff')&quot; readability=&quot;36&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_a5adab89-d451-4ae7-b17c-8e698a8117ff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a5adab89-d451-4ae7-b17c-8e698a8117ff&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a5adab89-d451-4ae7-b17c-8e698a8117ff',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_a5adab89-d451-4ae7-b17c-8e698a8117ff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationDetailsSource;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationManager;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.SecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.DefaultSecurityFilterChain;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.AuthenticationFailureHandler;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.AuthenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.util.matcher.AntPathRequestMatcher;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.web.util.matcher.RequestMatcher;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * 短信登录配置
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/09/23
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;extends&lt;/span&gt; SecurityConfigurerAdapter&amp;lt;DefaultSecurityFilterChain, HttpSecurity&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SMS_DEFAULT_LOGIN_PROCESS_URL = &quot;/authentication/mobile&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SmsAuthenticationFilter authFilter;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; AuthenticationDetailsSource&amp;lt;HttpServletRequest, ?&amp;gt;&lt;span&gt; authenticationDetailsSource;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; AuthenticationSuccessHandler successHandler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SavedRequestAwareAuthenticationSuccessHandler();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AuthenticationFailureHandler failureHandler;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;     * 默认手机+短信验证码 登录处理地址 [POST &quot;/authentication/mobile&quot;]. 默认手机参数 - mobile
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         authFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationFilter();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        loginProcessingUrl(SMS_DEFAULT_LOGIN_PROCESS_URL);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         mobileParameter(&quot;mobile&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer mobileParameter(String mobileParameter) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        authFilter.setMobileParameter(mobileParameter);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer loginProcessingUrl(String loginProcessingUrl) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        authFilter.setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl));
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer authenticationDetailsSource(
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                     AuthenticationDetailsSource&amp;lt;HttpServletRequest, ?&amp;gt;&lt;span&gt; authenticationDetailsSource) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.authenticationDetailsSource =&lt;span&gt; authenticationDetailsSource;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer successHandler(AuthenticationSuccessHandler successHandler) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.successHandler =&lt;span&gt; successHandler;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer failureHandler(AuthenticationFailureHandler failureHandler) {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.failureHandler =&lt;span&gt; failureHandler;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; RequestMatcher createLoginProcessingUrlMatcher(String loginProcessingUrl) {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AntPathRequestMatcher(loginProcessingUrl, &quot;POST&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         Assert.notNull(successHandler, &quot;successHandler should not be null.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         Assert.notNull(failureHandler, &quot;failureHandler should not be null.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         authFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;        authFilter.setAuthenticationSuccessHandler(successHandler);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        authFilter.setAuthenticationFailureHandler(failureHandler);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (authenticationDetailsSource != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;            authFilter.setAuthenticationDetailsSource(authenticationDetailsSource);
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将短信认证过滤器加到 UsernamePasswordAuthenticationFilter 之后&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt;         http.addFilterAfter(authFilter, UsernamePasswordAuthenticationFilter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;之后，需要在 WebSecurityConfigurerAdapter 中调用 HttpSecurity.apply() 应用该配置。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1e481d93-8994-49be-a430-8bc59ecf858e')&quot; readability=&quot;40.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_1e481d93-8994-49be-a430-8bc59ecf858e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1e481d93-8994-49be-a430-8bc59ecf858e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1e481d93-8994-49be-a430-8bc59ecf858e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_1e481d93-8994-49be-a430-8bc59ecf858e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.config;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.captcha.CaptchaMessageHelper;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; com.lyyzoo.sunny.security.core.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms.SmsAuthenticationDetailsSource;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms.SmsAuthenticationFailureHandler;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms.SmsAuthenticationProvider;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.sms.SmsLoginConfigurer;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt; * Security 主配置器
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; @EnableConfigurationProperties(SecurityProperties.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SecurityConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SecurityProperties properties;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationDetailsSource authenticationDetailsSource;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationProvider authenticationProvider;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationSuccessHandler authenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomAuthenticationFailureHandler authenticationFailureHandler;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomUserDetailsService userDetailsService;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CaptchaMessageHelper captchaMessageHelper;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        http
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            .authorizeRequests()
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             .antMatchers(&quot;/static/**&quot;, &quot;/webjars/**&quot;, &quot;/public/**&quot;, &quot;/favicon.ico&quot;, &quot;/login&quot;, &quot;/authentication/**&quot;, &quot;/*.html&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             .permitAll() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 允许匿名访问的地址&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             .and() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用and()方法相当于XML标签的关闭，这样允许我们继续配置父类节点。&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            .authorizeRequests()
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            .anyRequest()
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             .authenticated() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其它地址都需进行认证&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            .and()
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             .formLogin() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 启用表单登录&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             .loginPage(properties.getLoginPage()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录页面&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             .defaultSuccessUrl(&quot;/index&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认的登录成功后的跳转地址&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            .authenticationDetailsSource(authenticationDetailsSource)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;            .successHandler(authenticationSuccessHandler)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            .failureHandler(authenticationFailureHandler)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;            .and()
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            .authenticationProvider(authenticationProvider)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            .csrf()
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            .disable()
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (properties.isEnableSmsLogin()) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置短信登录&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;             SmsLoginConfigurer smsLoginConfigurer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsLoginConfigurer();
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            smsLoginConfigurer
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;                    .authenticationDetailsSource(smsAuthenticationDetailsSource())
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                    .successHandler(authenticationSuccessHandler)
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    .failureHandler(smsAuthenticationFailureHandler())
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;            ;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            http.apply(smsLoginConfigurer);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;            http.authenticationProvider(smsAuthenticationProvider());
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;     * 密码处理器
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     @ConditionalOnProperty(prefix = SecurityProperties.PREFIX, name = &quot;enable-sms-login&quot;, havingValue = &quot;true&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 matchIfMissing = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationFailureHandler smsAuthenticationFailureHandler() {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationFailureHandler();
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     @ConditionalOnProperty(prefix = SecurityProperties.PREFIX, name = &quot;enable-sms-login&quot;, havingValue = &quot;true&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             matchIfMissing = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationDetailsSource smsAuthenticationDetailsSource() {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationDetailsSource();
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     @ConditionalOnProperty(prefix = SecurityProperties.PREFIX, name = &quot;enable-sms-login&quot;, havingValue = &quot;true&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             matchIfMissing = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmsAuthenticationProvider smsAuthenticationProvider() {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsAuthenticationProvider(userDetailsService, captchaMessageHelper);
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;短信登录页面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181007021017848-1782017704.png&quot; alt=&quot;&quot; width=&quot;1134&quot; height=&quot;654&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;四、三方QQ登录&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、OAuth协议&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;OAuth 是一个授权协议，它的目的是让用户不用给客户端应用提供服务提供商(如QQ、微信)的账号和密码的情况下，让客户端应用可以有权限去访问用户在服务提供商的资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于 OAuth 介绍建议直接看《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot;&gt;阮一峰 - &lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot;&gt;理解OAuth 2.0&lt;/a&gt;》，深入浅出，容易理解，这里就不赘述了。我这里主要看下源码及流程实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;OAuth协议中的各种角色：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务提供商（Provider）：谁提供令牌谁就是服务提供商，比如微信、QQ。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;资源所有者（Resource Owner）：即用户，我们要获取的即用户的资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三方应用（Client）：指获取授权的应用，一般就是我们自己开发的应用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认证服务器（Authorization Server）：即服务提供商专门用来处理认证的服务器，认证用户的身份并产生令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;资源服务器（Resource Server）：即服务提供商存放用户生成的资源的服务器。认证服务器和资源服务器虽然是两个角色，但他们一般也可以在同一个应用，同一台机器上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;各种角色联系在一起构成 OAuth 的认证流程（授权码模式）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015222318724-1201030824.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、Spring Social&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;spring social 将 OAuth 认证的整个流程封装并实现，它已经提供了对主流社交网站的支持，只需要简单配置即可。针对上面的流程，来看下spring social 相关源码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 pom 中引入 spring-social 的依赖，版本使&lt;/span&gt;&lt;span&gt;用 2.0.0.M4：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4d134266-2fe9-4d6b-a133-cf3a0d8a4fc6')&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_4d134266-2fe9-4d6b-a133-cf3a0d8a4fc6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4d134266-2fe9-4d6b-a133-cf3a0d8a4fc6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4d134266-2fe9-4d6b-a133-cf3a0d8a4fc6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_4d134266-2fe9-4d6b-a133-cf3a0d8a4fc6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &amp;lt;dependency&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.social&amp;lt;/groupId&amp;gt;
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-social-core&amp;lt;/artifactId&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;/dependency&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;dependency&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.social&amp;lt;/groupId&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-social-config&amp;lt;/artifactId&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &amp;lt;/dependency&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;dependency&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.social&amp;lt;/groupId&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-social-security&amp;lt;/artifactId&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;/dependency&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;dependency&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.social&amp;lt;/groupId&amp;gt;
&lt;span&gt;15&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-social-web&amp;lt;/artifactId&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;① 首先是服务提供商，对应 ServiceProvider ，这是一个顶层的接口定义。默认使用 AbstractOAuth2ServiceProvider。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015232911318-508056230.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015234528846-41776464.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 从 AbstractOAuth2ServiceProvider 不难看出，需要提供 OAuth2Operations，OAuth2Operations 接口封装了 OAuth2 认证的整个标准流程，默认实现为 OAuth2Template。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015234913272-1056651314.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ AbstractOAuth2ServiceProvider 还需要提供一个 Api 接口，因为每个服务提供商返回的用户信息都是有差别的，这需要我们自己定义相关接口来获取用户信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spring social 提供了一个默认的抽象类 AbstractOAuth2ApiBinding，从其定义可以看出我们可以使用第6步中获取的服务提供商的令牌，使用 RestTemplate 发送请求来获取数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181015235719275-542156496.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 使用 Api 获取到用户信息后，就需要使用 Connection 来封装用户信息，默认实现为 OAuth2Connection。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016000225360-1737232248.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ Connection 又是由 ConnectionFactory 创建出来的，默认使用 OAuth2ConnectionFactory。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016000503497-1387627150.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑥ ConnectionFactory 又需要 ServiceProvider 和 ApiAdapter：&lt;/span&gt;&lt;span&gt;ServiceProvider 用来走认证流程，获取用户信息；&lt;/span&gt;&lt;span&gt;ApiAdapter 则用来适配不同服务提供商返回来的用户数据，将其转换成标准的 Connection。最终，ConnectionFactory 就可以构建出 Connection。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016000828933-1134536952.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑦ 获取到三方应用的用户信息后，就需要和客户端应用的用户进行关联，获取客户端应用中用户的接口即为 UsersConnectionRepository。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016001230747-721775812.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3、流程分析&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Social 认证是通过向 spring security 过滤器链加入 SocialAuthenticationFilter 过滤器来完成的，通过这个过滤器来了解下 spring-social 的认证流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 通过判断是否需要认证的方法 requiresAuthentication 可以看出，认证的地址必须是 **/{filterProcessesUrl}/{providerId} 的形式，比如 www.lyyzoo.com/auth/qq。这里的 qq 即为 providerId，auth 为过滤器处理地址 filterProcessesUrl，这个值默认为 auth。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024224407272-1674658392.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 再看看认证的方法 attemptAuthentication，首先会检测用户是否拒绝授权，如果用户拒绝授权则直接抛出异常。然后获取 providerId 及对应的认证服务类，用于处理认证。认证失败，则重定向到一个地址去。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024230527425-2033278003.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过 detectRejection 可以看出，我们在请求登录时，不要随意设置参数，否则会被错误认为是用户拒绝授权的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024231334830-1156101758.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 认证方法中，从注释也可以了解到，第一次请求时，会抛出 AuthenticationRedirectException 异常，重定向到服务提供商的认证地址去。用户确认授权后，重定向回来时，就是第二次请求，就会拿着授权码去服务提供商那获取令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024232245223-1612035498.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在获取 SocialAuthenticationToken 的方法中可以看到，如果请求的参数中没有 code(授权码)，则重定向到服务提供商那。通过 buildReturnToUrl 和 buildAuthenticateUrl 可以看出，会自动帮我们构造回调地址以及重定向到认证服务器的地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;buildReturnToUrl 会构造回调地址，所以本地测试要使用域名访问，可以在 hosts 中配置域名映射。否则你访问 localhost 是重定向不回来的，而且域名必须与QQ互联上配置的域名保持一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024233414778-364739290.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;buildAuthenticateUrl 会构造服务提供商的认证地址，会自动帮我们把 redirect_uri、state 等参数拼接上，在创建 OAuth2Template 时我们提供一个基础地址即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024234147075-1378006216.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 第二次请求时，有了授权码，则会用授权码去获取令牌 AccessGrant 用于构造 Connection，最终构造 SocialAuthenticationToken（注意此时的 SocialAuthenticationToken 是未认证的） 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通过 exchangeForAccess 方法，可以发现，会自动帮我们带上获取令牌的参数，如果要带上 client_id、client_secret 需配置 &lt;/span&gt;useParametersForClientAuthentication=true。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取到令牌后会自动帮我们将令牌封装到 AccessGrant 里，默认返回的数据结构为 Map，所以如果服务提供商返回令牌信息时不是 Map 结构的还需定制化处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181028133401503-860091248.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181028133436616-54099773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181024235500626-1548698253.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ 创建好 AccessGrant 后，通过 OAuth2ConnectionFactory 创建 Connection，实际是创建 OAuth2Connection 对象。initApi() 方法会获取 ServiceProvider 中配置的Api。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181025000852854-1495052731.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;initKey() 用于生成服务提供商用户唯一的 key，根据 providerId 和 providerUserId(服务提供商的用户ID，即openId) 创建。而 providerUserId 则是通过 ApiAdapter 适配器来获取，这需要我们自行设置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181025001534011-993483319.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181025001605796-649824790.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑥ 获取到 SocialAuthenticationToken 后，相当于服务提供商那边认证完成，接着就会调用 doAuthentication 进行客户端用户认证。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与标准登录流程类似，同样可以自定义 AuthenticationDetailsSource；接着调用认证器进行认证，spring social 的认证器默认使用 SocialAuthenticationProvider 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181028131255179-1687515463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;从其认证方法可以看出，将通过之前得到的 providerId 和 providerUserId 来获取 userId (客户端用户ID)，这里 spring social 默认有一张表来存储 userId、providerId、providerUserId 之间的关系，可配置 &lt;/span&gt;JdbcUsersConnectionRepository 来维护对应的关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果没有获取到对应的 userId，将抛出 &lt;/span&gt;BadCredentialsException，在 doAuthentication 里拦截到这个异常后，默认将重定向到 signupUrl 这个注册页面的地址，让用户先注册或绑定三方账号。signupUrl 默认为 &quot;/signup&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取到对应的 userId后，就根据 userId 查询用户信息，这需要我们自定义 SocialUserDetailsService 及 SocialUserDetails。获取到用户后，就会创建已认证的 SocialAuthenticationToken。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181025003540443-35140885.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181028002325647-1607074609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑦ 通过 toUserId() 可以发现，根据 Connection 查找系统 userId 时，&lt;/span&gt;JdbcUsersConnectionRepository 默认的处理方式是：如果未查询到关联的 userId，可以自定义一个 ConnectionSignUp 用于注册用户并返回一个 userId，并且会调用 addConnection 添加关联。所以对于用户如果未注册，使用三方账号扫码自动注册用户的需求，就可以使用这种方式实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181028153740124-1319269127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑧ 客户端这边认证成功后，就会通过 updateConnections 或 addConnection 将用户的 access_token、refresh_token、secret、用户和服务商的关联 等更新到数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181025004737557-1916627017.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4、QQ登录准备工作&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 社交登录必须要有一个外网能访问的域名，所以首先需要自己申请一个域名，然后备案，再将域名指向一台可访问的服务器，将服务部署到这台服务器上。推荐在阿里云上完成这一整套的配置，就不在这里细说了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 到 [&lt;a href=&quot;https://connect.qq.com/manage.html&quot; target=&quot;_blank&quot;&gt;QQ互联&lt;/a&gt;] 上申请成为开发者，然后通过创建应用获取QQ的appId和appKey。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181019233417485-1120214475.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 在创建应用时，网站地址 填写公网可访问的域名即可；网站回调域 即请求QQ后回调的地址，这个后面再做详细说明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181019233704057-1303061481.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 获取授权码地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考QQ互联 &lt;a href=&quot;http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token&quot; target=&quot;_blank&quot;&gt;使用Authorization_Code获取Access_Token&lt;/a&gt; 可以得知获取授权码的地址：[https://graph.qq.com/oauth2.0/authorize]，注意请求的参数有 response_type、client_id、redirect_uri、state 等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;client_id 即你申请的 appId，redirect_uri 即网站回调域。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认证的时候，用户成功授权，则会跳转到指定的回调地址，即参数 &amp;lt;redirect_uri&amp;gt;，也即创建应用时填写的 &amp;lt;网站回调域&amp;gt;，这二者必须保持一致，否则会提示重定向地址非法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181019235334932-1508792956.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 获取令牌地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以得到授权码地址 [https://graph.qq.com/oauth2.0/token] ，注意 grant_type、client_id、client_secret、code、redirect_uri 这些必须参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;client_id 即 appId，client_secret 即 appKey，code 为获取的授权码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181020000604091-267863111.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ QQ访问用户资料API&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QQ互联上提供了如下的一些API，其中访问用户资料的API是不需要申请的。[&lt;a href=&quot;http://wiki.connect.qq.com/api%E5%88%97%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;QQ互联API列表&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016010646675-737065447.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从文档中可以得到访问用户资料的地址：[ https://graph.qq.com/user/get_user_info ]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016005624126-138524330.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而要调用这个接口则必须带上获取的令牌(access_token)，客户端应用申请的 appId，以及 openId，即用户的QQ号，可以使用 [ https://graph.qq.com/oauth2.0/me?access_token=YOUR_ACCESS_TOKEN ] 地址来获取QQ号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016005848193-441572017.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用 [ https://graph.qq.com/user/get_user_info?access_token=YOUR_ACCESS_TOKEN&amp;amp;oauth_consumer_key=YOUR_APP_ID&amp;amp;openid=YOUR_OPENID ] 地址来获取用户资料。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016011201575-1485306532.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回参数，这些参数将封装到特定的 UserInfo 中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016011247118-203550355.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，通过返回码来判断是成功还是失败。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181016232425359-1582848314.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5、QQ登录实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;从 SpringSocial 的源码分析中可以得知，我们主要目的就是获取服务提供商的用户信息，用户信息则封装到 Connection 中，想要获得 Connection 就需要 ConnectionFactory，想要构造一个 ConnectionFactory 就需要 ServiceProvider 和 ApiAdapter，ServiceProvider 又需要 OAuth2Operations 和 Api。下面来一步步实现获取QQ用户资料从而登录的流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 构建 Api&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先根据获取QQ用户信息的接口封装QQ用户信息以及QQApi接口。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c7e4ea77-2cef-459c-8db8-2828abb35a72')&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_c7e4ea77-2cef-459c-8db8-2828abb35a72&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c7e4ea77-2cef-459c-8db8-2828abb35a72&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c7e4ea77-2cef-459c-8db8-2828abb35a72',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_c7e4ea77-2cef-459c-8db8-2828abb35a72&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.annotation.JsonIgnoreProperties;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * QQ 用户信息
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/16
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; @JsonIgnoreProperties(ignoreUnknown = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QQUser {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ret;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String msg;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String openId;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String nickname;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String figureurl;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String gender;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;getter setter&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('575d6294-5915-46f4-99ac-23008b125a8e')&quot; readability=&quot;32&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_575d6294-5915-46f4-99ac-23008b125a8e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_575d6294-5915-46f4-99ac-23008b125a8e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('575d6294-5915-46f4-99ac-23008b125a8e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_575d6294-5915-46f4-99ac-23008b125a8e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * QQ API
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/16
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; QQApi {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * 获取QQ用户信息
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    QQUser getQQUser();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;提供 Api 默认实现，继承 AbstractOAuth2ApiBinding，用户信息api需要参数 appId 及 openId，而想要获取 openId 就要使用 access_token 获取用户 openId。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2ae4604f-eac5-4d41-9446-8cf8f9bc19b2')&quot; readability=&quot;39&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_2ae4604f-eac5-4d41-9446-8cf8f9bc19b2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2ae4604f-eac5-4d41-9446-8cf8f9bc19b2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2ae4604f-eac5-4d41-9446-8cf8f9bc19b2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_2ae4604f-eac5-4d41-9446-8cf8f9bc19b2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.oauth2.AbstractOAuth2ApiBinding;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.oauth2.TokenStrategy;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.databind.ObjectMapper;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.core.exception.CommonException;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.exception.ProviderUserNotFoundException;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * QQ API 默认实现，继承 {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; AbstractOAuth2ApiBinding}。
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; * 由于 Api 会使用得到的令牌来获取信息，每个用户的令牌是不同的，所以该类不是一个单例对象，每次访问 Api 都需要新建实例。
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/16
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DefaultQQApi &lt;span&gt;extends&lt;/span&gt; AbstractOAuth2ApiBinding &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; QQApi {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(DefaultQQApi.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;     * QQ 获取 openId 的地址
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL_GET_OPEN_ID = &quot;https://graph.qq.com/oauth2.0/me?access_token={accessToken}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;     * QQ 获取用户信息的地址
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL_GET_USER_INFO = &quot;https://graph.qq.com/user/get_user_info?oauth_consumer_key={appId}&amp;amp;openid={openId}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;     * 客户端 appId
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String appId;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;     * openId
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String openId;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; ObjectMapper mapper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectMapper();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultQQApi(String accessToken, String appId) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(accessToken, TokenStrategy.ACCESS_TOKEN_PARAMETER);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.appId =&lt;span&gt; appId;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.openId =&lt;span&gt; getOpenId(accessToken);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QQUser getQQUser() {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         String result = getRestTemplate().getForObject(URL_GET_USER_INFO, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, appId, openId);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         QQUser user = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             user = mapper.readValue(result, QQUser.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             LOGGER.error(&quot;parse qq UserInfo error.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ProviderUserNotFoundException(&quot;login.provider.user.not-found&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        user.setOpenId(openId);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;     * 获取用户 OpenId
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String getOpenId(String accessToken) {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回结构：callback( {&quot;client_id&quot;:&quot;YOUR_APPID&quot;,&quot;openid&quot;:&quot;YOUR_OPENID&quot;} );&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;         String openIdResult = getRestTemplate().getForObject(URL_GET_OPEN_ID, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, accessToken);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (StringUtils.isBlank(openIdResult) || openIdResult.contains(&quot;code&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CommonException(&quot;获取QQ账号错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解析 openId&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;         String[] arr = StringUtils.substringBetween(openIdResult, &quot;{&quot;, &quot;}&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;).split(&quot;,&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         String openid = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String s : arr) {
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (s.contains(&quot;openid&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;                 openid = s.split(&quot;:&quot;)[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; openid;
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;② 构建QQApiAdapter 适配器，在QQApi 与 Connection之间做适配。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7603277a-0849-4c0a-a7c5-ff64064ad6d0')&quot; readability=&quot;33.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_7603277a-0849-4c0a-a7c5-ff64064ad6d0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7603277a-0849-4c0a-a7c5-ff64064ad6d0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7603277a-0849-4c0a-a7c5-ff64064ad6d0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_7603277a-0849-4c0a-a7c5-ff64064ad6d0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.connection;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api.QQApi;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api.QQUser;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.ApiAdapter;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.ConnectionValues;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.UserProfile;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * QQApi 适配器
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QQApiAdapter &lt;span&gt;implements&lt;/span&gt; ApiAdapter&amp;lt;QQApi&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * 测试Api连接是否可用
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; api QQApi
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; test(QQApi api) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;     * QQApi 与 Connection 做适配
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; api QQApi
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; values Connection
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setConnectionValues(QQApi api, ConnectionValues values) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         QQUser user =&lt;span&gt; api.getQQUser();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        values.setDisplayName(user.getNickname());
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        values.setImageUrl(user.getFigureurl());
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        values.setProviderUserId(user.getOpenId());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserProfile fetchUserProfile(QQApi api) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateStatus(QQApi api, String message) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;③ 定制化 QQOAuth2Template，因为标准的 OAuth2Template 处理令牌时，要求返回的数据结构为 Map，而QQ返回的令牌是一个字符串，因此需要定制处理。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e1969ce0-ad26-4477-9b0d-7a7b25a66bda')&quot; readability=&quot;41&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_e1969ce0-ad26-4477-9b0d-7a7b25a66bda&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e1969ce0-ad26-4477-9b0d-7a7b25a66bda&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e1969ce0-ad26-4477-9b0d-7a7b25a66bda',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_e1969ce0-ad26-4477-9b0d-7a7b25a66bda&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.connection;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.http.converter.StringHttpMessageConverter;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.oauth2.AccessGrant;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.oauth2.OAuth2Template;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.MultiValueMap;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.client.RestClientException;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.client.RestTemplate;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.base.Charsets;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * 定制 OAuth2Template
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/26
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QQOauth2Template &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; OAuth2Template {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(QQOauth2Template.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QQOauth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(clientId, clientSecret, authorizeUrl, accessTokenUrl);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置带上 client_id、client_secret&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         setUseParametersForClientAuthentication(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;     * 解析 QQ 返回的令牌
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AccessGrant postForAccessGrant(String accessTokenUrl, MultiValueMap&amp;lt;String, String&amp;gt;&lt;span&gt; parameters) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回格式：access_token=FE04********CCE2&amp;amp;expires_in=7776000&amp;amp;refresh_token=88E4***********BE14&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         String result = getRestTemplate().postForObject(accessTokenUrl, parameters, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isBlank(result)) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RestClientException(&quot;access token endpoint returned empty result&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         LOGGER.debug(&quot;==&amp;gt; get qq access_token: &quot; +&lt;span&gt; result);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         String[] arr = StringUtils.split(result, &quot;&amp;amp;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         String accessToken = &quot;&quot;, expireIn = &quot;&quot;, refreshToken = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String s : arr) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (s.contains(&quot;access_token&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 accessToken = s.split(&quot;=&quot;)[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (s.contains(&quot;expires_in&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 expireIn = s.split(&quot;=&quot;)[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (s.contains(&quot;refresh_token&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 refreshToken = s.split(&quot;=&quot;)[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; createAccessGrant(accessToken, &lt;span&gt;null&lt;/span&gt;, refreshToken, Long.valueOf(expireIn), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;     * QQ 响应 ContentType=text/html;因此需要加入 text/html; 的处理器
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; RestTemplate createRestTemplate() {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         RestTemplate restTemplate = &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.createRestTemplate();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         restTemplate.getMessageConverters().add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringHttpMessageConverter(Charsets.UTF_8));
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; restTemplate;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;④ 通过 QQOAuth2Template 和 QQApi 构造 QQServiceProvider，创建 OAuth2Template 时，需传入获取授权码的地址和获取令牌的地址。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('257b7eeb-fcb5-4711-abbf-d6d82a05ed76')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_257b7eeb-fcb5-4711-abbf-d6d82a05ed76&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_257b7eeb-fcb5-4711-abbf-d6d82a05ed76&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('257b7eeb-fcb5-4711-abbf-d6d82a05ed76',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_257b7eeb-fcb5-4711-abbf-d6d82a05ed76&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.connection;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api.DefaultQQApi;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api.QQApi;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.oauth2.AbstractOAuth2ServiceProvider;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * QQ 服务提供商
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QQServiceProvider &lt;span&gt;extends&lt;/span&gt; AbstractOAuth2ServiceProvider&amp;lt;QQApi&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     * 获取授权码地址(引导用户跳转到这个地址上去授权)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL_AUTHORIZE = &quot;https://graph.qq.com/oauth2.0/authorize&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * 获取令牌地址
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String URL_GET_ACCESS_TOKEN = &quot;https://graph.qq.com/oauth2.0/token&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String appId;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QQServiceProvider(String appId, String appSecret) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; QQOauth2Template(appId, appSecret, URL_AUTHORIZE, URL_GET_ACCESS_TOKEN));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.appId =&lt;span&gt; appId;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QQApi getApi(String accessToken) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultQQApi(accessToken, appId);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑤ 通过QQServiceProvider和QQApiAdapter构造 QQConnectionFactory。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cd474789-e117-4f8e-9feb-69233122af3f')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_cd474789-e117-4f8e-9feb-69233122af3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cd474789-e117-4f8e-9feb-69233122af3f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cd474789-e117-4f8e-9feb-69233122af3f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_cd474789-e117-4f8e-9feb-69233122af3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.connection;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.api.QQApi;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.support.OAuth2ConnectionFactory;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * QQ Connection 工厂
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QQConnectionFactory &lt;span&gt;extends&lt;/span&gt; OAuth2ConnectionFactory&amp;lt;QQApi&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QQConnectionFactory(String providerId, String appId, String appSecret) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;(providerId, &lt;span&gt;new&lt;/span&gt; QQServiceProvider(appId, appSecret), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QQApiAdapter());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑥ 自定义 CustomSocialUserDetails 及 CustomSocialUserDetailsService，封装 Social 专用的 UserDetails 对象。与 CustomUserDetails 和 CustomUserDetailsService 类似。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('19fc8ef2-805c-4f7b-a15f-2140b7531546')&quot; readability=&quot;36&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_19fc8ef2-805c-4f7b-a15f-2140b7531546&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19fc8ef2-805c-4f7b-a15f-2140b7531546&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('19fc8ef2-805c-4f7b-a15f-2140b7531546',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_19fc8ef2-805c-4f7b-a15f-2140b7531546&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.common;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.User;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SocialUserDetails;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * 定制 SocialUserDetails 封装 Social 登录用户信息
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomSocialUserDetails &lt;span&gt;extends&lt;/span&gt; User &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SocialUserDetails {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userId;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String nickname;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String language;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomSocialUserDetails(String username, String password, String userId, String nickname, String language,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                              Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; GrantedAuthority&amp;gt;&lt;span&gt; authorities) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(username, password, authorities);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.nickname =&lt;span&gt; nickname;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.language =&lt;span&gt; language;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserId() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getNickname() {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nickname;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLanguage() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; language;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cd9e9278-15a8-42f8-851c-e86bbc38f7c2')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_cd9e9278-15a8-42f8-851c-e86bbc38f7c2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cd9e9278-15a8-42f8-851c-e86bbc38f7c2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cd9e9278-15a8-42f8-851c-e86bbc38f7c2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_cd9e9278-15a8-42f8-851c-e86bbc38f7c2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.common;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.GrantedAuthority;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.authority.SimpleGrantedAuthority;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.core.userdetails.UsernameNotFoundException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SocialUserDetails;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SocialUserDetailsService;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.User;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.UserService;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.exception.AccountNotExistsException;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt; * 定制 Social UserDetailsService 用于获取系统用户信息
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomSocialUserDetailsService &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SocialUserDetailsService {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; SocialUserDetails loadUserByUserId(String userId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UsernameNotFoundException {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         User user =&lt;span&gt; userService.select(Long.valueOf(userId));
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AccountNotExistsException(&quot;login.username-or-password.error&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         Collection&amp;lt;GrantedAuthority&amp;gt; authorities = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         authorities.add(&lt;span&gt;new&lt;/span&gt; SimpleGrantedAuthority(&quot;ROLE_USER&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomSocialUserDetails(user.getUsername(), user.getPassword(), userId, user.getNickname(),
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                        user.getLanguage(), authorities);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑥ 自定义 social 配置器，支持设置Social过滤器处理地址&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45af95a3-5ba0-4af9-b7c4-991774aec4fe')&quot; readability=&quot;33&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_45af95a3-5ba0-4af9-b7c4-991774aec4fe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45af95a3-5ba0-4af9-b7c4-991774aec4fe&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('45af95a3-5ba0-4af9-b7c4-991774aec4fe',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_45af95a3-5ba0-4af9-b7c4-991774aec4fe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SocialAuthenticationFilter;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SpringSocialConfigurer;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * social 配置器，支持设置Social过滤器处理地址.
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * &amp;lt;pre&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *  SpringSocialConfigurer socialConfigurer = new CustomSocialConfigurer();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *  http.apply(socialConfigurer);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * &amp;lt;/pre&amp;gt;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/19
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomSocialConfigurer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SpringSocialConfigurer {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_FILTER_PROCESSES_URL = &quot;/openid&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String filterProcessesUrl =&lt;span&gt; DEFAULT_FILTER_PROCESSES_URL;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomSocialConfigurer() { }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomSocialConfigurer(String filterProcessesUrl) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         Assert.notNull(filterProcessesUrl, &quot;social filterProcessesUrl should not be null.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.filterProcessesUrl =&lt;span&gt; filterProcessesUrl;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt;&lt;span&gt; T postProcess(T object) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         SocialAuthenticationFilter filter =  (SocialAuthenticationFilter) &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.postProcess(object);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        filter.setFilterProcessesUrl(filterProcessesUrl);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (T) filter;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;⑦ social 配置，加入 QQConnectionFactory。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置增删改查用户三方关系的 UsersConnectionRepository，使用 JdbcUsersConnectionRepository，并设置表前缀，可在源码包里找到初始化脚本，会自动帮我们增删改查用户与第三方账号的关联。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ae8f7821-ead1-4e89-a78d-b86567090ac1')&quot; readability=&quot;36.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_ae8f7821-ead1-4e89-a78d-b86567090ac1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ae8f7821-ead1-4e89-a78d-b86567090ac1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ae8f7821-ead1-4e89-a78d-b86567090ac1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_ae8f7821-ead1-4e89-a78d-b86567090ac1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.core.CustomSocialAuthenticationSuccessHandler;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.core.CustomSocialUserDetailsService;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.qq.connection.QQConnectionFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.social.wechat.connection.WechatConnectionFactory;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.env.Environment;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.encrypt.Encryptors;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.UserIdSource;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.config.annotation.ConnectionFactoryConfigurer;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.config.annotation.EnableSocial;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.config.annotation.SocialConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.ConnectionFactoryLocator;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.ConnectionSignUp;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.UsersConnectionRepository;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.connect.web.ProviderSignInUtils;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.AuthenticationNameUserIdSource;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.social.security.SocialUserDetailsService;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt; * social 配置
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/10/17
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;@EnableSocial
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; @EnableConfigurationProperties(SocialProperties.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SocialConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SocialConfigurerAdapter {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SocialProperties properties;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSource dataSource;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     @Autowired(required = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ConnectionSignUp connectionSignUp;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addConnectionFactories(ConnectionFactoryConfigurer connectionFactoryConfigurer, Environment environment) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; QQ&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         SocialProperties.Qq qq =&lt;span&gt; properties.getQq();
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNoneBlank(qq.getAppId(), qq.getAppSecret())) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            connectionFactoryConfigurer.addConnectionFactory(
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                             &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QQConnectionFactory(qq.getProviderId(), qq.getAppId(), qq.getAppSecret()));
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         JdbcUsersConnectionRepository usersConnectionRepository =
&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置表前缀&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         usersConnectionRepository.setTablePrefix(&quot;sys_&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ConnectionSignUp 需自定义&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        usersConnectionRepository.setConnectionSignUp(connectionSignUp);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; usersConnectionRepository;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserIdSource getUserIdSource() {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthenticationNameUserIdSource();
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SocialUserDetailsService socialUserDetailsService() {
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomSocialUserDetailsService();
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; 
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomSocialAuthenticationSuccessHandler socialAuthenticationSuccessHandler() {
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomSocialAuthenticationSuccessHandler();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Bean
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;public CustomSocialAuthenticationFailureHandler customSocialAuthenticationFailureHandler() {
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return new CustomSocialAuthenticationFailureHandler();
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt; 
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ProviderSignInUtils providerSignInUtils(ConnectionFactoryLocator connectionFactoryLocator,
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; &lt;span&gt;                                                   UsersConnectionRepository connectionRepository) {
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProviderSignInUtils(connectionFactoryLocator, connectionRepository);
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt; 
&lt;span&gt;93&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑧ 如果用户未绑定QQ账号，则会默认跳转到 /signup 进行新用户注册或者账号绑定，账号绑定会用到 Social 提供的一个工具类 &lt;/span&gt;ProviderSignInUtils，会自动帮我们创建关联关系，并且在绑定后继续认证用户信息。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3270ed39-1493-4fe8-a551-3af3918cc4ec')&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_3270ed39-1493-4fe8-a551-3af3918cc4ec&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3270ed39-1493-4fe8-a551-3af3918cc4ec&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3270ed39-1493-4fe8-a551-3af3918cc4ec',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_3270ed39-1493-4fe8-a551-3af3918cc4ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;extends&lt;/span&gt; BaseService&amp;lt;User&amp;gt; &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProviderSignInUtils providerSignInUtils;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; bindProvider(String username, String password, HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; login&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         User user =&lt;span&gt; select(User.FIELD_USERNAME, username);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (user == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;passwordEncoder.matches(password, user.getPassword())) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CommonException(&quot;user.error.login.username-or-password.error&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         providerSignInUtils.doPostSignUp(user.getId().toString(), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServletWebRequest(request));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;6、实现效果&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 在登录页面点击QQ登录，实际就是访问 /openid/qq。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104135155456-319186892.png&quot; alt=&quot;&quot; width=&quot;855&quot; height=&quot;466&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 跳转到QQ授权页面进行授权&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104135409636-1177705250.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 用户授权之后，跳转回来，将根据 providerId (qq) 和 providerUserId (openid) 查询系统用户ID，然而 sys_userconnection 表中并没有对应的关系，于是自动跳转到注册页面，用户可以选择注册新用户并绑定，或者直接绑定已有账号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104135517177-661205252.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④用户绑定系统账号后，sys_userconnection 表中就会新增一条关联数据，代表系统用户和QQ用户已绑定，下次再登录时就不会再要求进行绑定了。还可以在用户个人中心提供绑定第三方账号的功能，这里就不在演示了，原理是类似的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104135858637-1665929070.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;五、Session 管理&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、Session 超时处理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;可以通过设置 server.servlet.session.timeout 来设置 Session 超时时间，默认为30分钟&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181029235405466-1844622004.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181030000143963-762029714.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当你设置超时时间小于60秒的时候，实际默认最小为 1 分钟。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181029235707619-1519188337.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以在 HttpSecurity 的配置中设置Session失效后跳转的地址，这里配置直接跳转到登录页。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181029235946073-2029754026.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、Session 并发控制&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;用户登录时，如果只想让用户在一处登录，可设置 Session 并发数量来控制，并且可以设置当后一次登录挤掉前一次登录时的处理策略。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181030004643195-1051562735.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果用户已经登录，在其它地方登录时则不允许登录，可设置 maxSessionsPreventsLogin=true 即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181030005013432-230742333.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：如果发现设置不生效，请检查 UserDetails ，要重写 hashCode、equals、toString 方法，因为判断是否属于同一个用户是通过这几个方法来判断的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201810/856154-20181030005507559-1592700915.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3、集群Session管理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在服务集群中，已经在 serverA 上登录了，登录后的Session是在 serverA 上，再访问 serverB 时，则会要求再次登录，因为没有Session。因此在集群中，可以将Session放到服务之外进行管理，让 Session 在集群中可以共享。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 SpringBoot 中可以很容易做到这件事，目前可以支持以下几种类型的 Session 存储，我这里使用 Redis 进行 Session 存储。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181101135433131-1499972445.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只需在 pom 中加入 spring-session 依赖，然后在配置中启用某种类型的 session 存储即可，最终会启用相关配置类。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring-session Session集群共享 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.session&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-session-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.session&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-session-data-redis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181101151421357-812752937.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再次登录时就会发现 Session 已经存储到 redis 中了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181101151630369-2076585761.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;4、退出登录&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;默认退出地址为 /logout，退出后会跳转到登录地址+?logout，这些就不介绍了，看源码很容易发现这些配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以通过 HttpSecurity的logout()来自定义登出的配置，实际会启用 LogoutConfigurer 的配置，注意登出成功地址和登出成功处理器不能同时配置，同时配置了则以后一个生效。可以在登出成功处理器返回 JSON，也可以做一些自定义的逻辑处理等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181101222233136-936162276.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;六、OAuth登录&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;前面实现的登录认证方式，登录成功后，登录信息是存储在服务器的 Session 里的，每次浏览器访问服务时，实际是在 Cookie 中带着 JSESSIONID 去访问服务，服务根据 JSESSIONID 来获取用户 Session，这种方式是基于服务器 Session 来保存用户信息。&lt;/span&gt;&lt;span&gt;但在前后端分离或开发移动APP的时候，前端是单独部署在一台服务器上，用户实际访问的是 WebServer，所有的服务API请求再间接由 Web Server 发起。用户不再通过浏览器直接访问我们的后端应用，而是通过第三方的应用来访问。&lt;/span&gt;&lt;span&gt;这种时候就不便于使用 Cookie + Session 的方式来保存用户信息，Cookie 存在跨域的问题，使用这种开发方式繁琐，安全性差。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是就有了OAuth，类似于 QQ、微信认证那样，我们自己也可以作为服务提供商，前端应用或APP则作为第三方客户端，通过给客户端发放令牌，客户端在http参数中带着令牌来访问服务，服务端则通过令牌得到用户信息。&lt;/span&gt;&lt;span&gt;Spring Social 封装了第三方客户端访问服务提供商时要做的大部分操作，而 Spring Security OAuth 则封装了服务提供商为第三方客户端提供令牌所要做的绝大部分操作，使用 Spring Security OAuth 我们可以快速搭建起一个服务提供商程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要实现服务提供商程序，实际就是实现 认证服务器和资源服务器，作为认证服务器，可以使用 OAuth 的四种授权模式，来生成令牌并存储、发放。作为资源服务器，OAuth2 通过向 SpringSecurity 过滤器链上加入 OAuth2AuthenticationProcessingFilter 来对资源进行认证，解析令牌，根据令牌获取用户信息等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在开始本章之前，建议先熟悉 OAuth2 的认证流程及授权模式等：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、OAuth 认证服务器&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 只需在配置中加上 @EnableAuthorizationServer 就可启用简单的 OAuth2 认证服务器功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实际上，该注解引入的 AuthorizationServerSecurityConfiguration 做了一个 oauth 的 HttpSecurity 配置，创建了一条专用于处理获取令牌（/oauth）相关请求的过滤器链，这个可自行查看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181107130112436-123650521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 通过其导入的配置可以发现，主要启用了两个端点：授权端点（AuthorizationEndpoint）和令牌端点（TokenEndpoint）。授权端点用于用户授权给第三方客户端，就像我们在QQ授权页面登录授权一样。令牌端点则用于给用户发放令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102210338437-233196175.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102210453577-889861575.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、OAuth 授权流程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;下面通过授权码模式来了解OAuth的授权流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102213357102-2063664066.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 在程序启动时，已生成默认的 client-id 和 client-secret（基于内存的方式），第三方客户端将用户重定向到认证服务器上（/oauth/authorize?client_id=xxx&amp;amp;response_type=code..... ） 获取用户授权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时默认会跳转到我们之前配置的登录页去进行登录，因为该请求匹配标准登录的过滤器链，发现用户没有认证，则跳转到登录页进行登录。用户确认登录即是向客户端授权，登录成功后就会进入 authorize 端点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102221335277-1703229477.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 可以看出：response_type 参数必须设置为 token 或者 code，可见该端点只用于 授权码模式（authorization code） 和 简化模式（implicit grant type）；且必须传入 client_id，客户端ID一般由服务提供商提供给客户端应用；同时要求用户必须已经登录且已认证通过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102222403562-1125876875.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 之后，通过 client_id 获取 ClientDetails，这里我们就需要做客制化了，我们需要添加自己的客户端应用库，从数据库获取客户端信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102223221469-383649423.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后会从参数中获取重定向回客户端的 redirect_uri，然后处理重定向地址，客户端（client）是可以配置授权类型的，默认就有这五种类型：authorization_code、password、client_credentials、implicit、refresh_token。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102224115501-581149963.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看出，能进行重定向回客户端的只支持 授权码模式（authorization code） 和 简化模式（implicit grant type）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102224319419-1851687896.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确认可以重定向之后，就会获取 client 配置的重定向地址，如果 client 的重定向地址不为空，就会跟客户端传入的 redirect_uri 进行比对，如果 redirect_uri 为空，则直接返回 client 配置的重定向地址；如果不为空，则要求二者必须保持一致，这也是需要注意的地方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102224752062-29810926.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181102224854609-1013605961.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 设置完重定向地址后，接着就检查 scope，即客户端申请访问的权限范围，如果检查发现不需要用户授权，则重定向回去，否则会跳转到一个默认的授权页面让用户授权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181103004426185-1645808733.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181103005114524-37630897.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 client 中有与请求的 scope 对应的授权范围或者用户允许授权（Approve），则会生成授权码并存储起来，然后重定向到之前设置的地址上去，并返回授权码，以及原样返回 state 参数。之后客户端就可以带着授权码去获取令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181103005750222-2030952100.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181103005205144-203033992.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3、发放令牌&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181103162545217-578780592.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 客户端得到授权码后，就可以带上授权码去获取令牌（/oauth/token?grant_type=authorization_code&amp;amp;code=xxx&amp;amp;redirect_uri=xxx&amp;amp;client_id=xxx），这里用 Postman 来测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意发起表单请求时，要配置客户端允许表单认证，将向 oauth 过滤器链中加入 ClientCredentialsTokenEndpointFilter 客户端过滤器来拦截用户请求，根据 client_id 和 client_secret 创建 Authentication 。跟标准的用户名密码登录流程一样，只不过这里是校验 client_id 和 client_secret。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104202740357-1460986570.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104203136476-1484977098.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104202547963-24283062.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② client_id 和 client_secret 认证通过后，就会进入获取令牌的端点，首先根据 client_id 获取 Client ，然后创建 TokenRequest。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104204343754-1559685379.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看出，获取令牌端点是不支持简化模式的，简化模式是访问 /authorize 端点时直接发放令牌的，这个稍后再说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104204427518-99899454.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 之后就会调用 TokenGranter 进行授权，授权成功将创建 OAuth2AccessToken，最后返回到客户端。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104204633279-1371634017.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;授权时，实际就是调用五种授权类型的 TokenGranter，使用匹配的授权器来创建 AccessToken。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104204829074-995328247.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104205140856-860110271.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 创建 AccessToken 时，首先是根据授权码获取用户信息（创建授权码的时候会把授权的用户信息序列化存储起来）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104205430051-365046401.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从存储中获取 AccessToken，先判断该用户是否已经存在 AccessToken，如果存在且没有过期，则刷新再返回。tokenStore 我们可以配置成数据库存储、Redis 存储等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104210008881-643570128.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不存在，则创建 refreshToken 和 accessToken，并存储起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104210443936-940045969.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⑤ 之后就可以看到返回给客户端的令牌，之后我们就可以带着令牌访问服务的资源了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104210608797-1159828967.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4、资源服务器&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;获取到令牌后，还无法直接通过令牌获访问资源服务，还需启用资源服务功能才能解析令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 启用资源服务器，只需在配置类上加上 @EnableResourceServer 即可，同样会创建一条 oauth 过滤器链，并向该过滤器链中加入 OAuth2AuthenticationProcessingFilter 过滤器来处理令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里配置该过滤器链仅对 [/open/**] 的请求做处理，其它请求还是走标准的过滤器链。你也可以配置所有请求都通过令牌来访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181107132155800-1390044436.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 在这个过滤器中，将从请求中根据令牌解析 Authentication ，默认的令牌解析器使用 BearerTokenExtractor。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110001432607-945508301.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解析令牌时，首先检查请求头是否包含 [Authorization: Bearer token.....]，没有的话就判断请求的参数是否包含 access_token，因此我们可以使用这两种方式携带 access_token 去访问资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104211817763-1178706794.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 得到 Authentication 后，就对 Authentication 进行认证，在认证过程中，会调用 DefaultTokenServices 获取用户信息，首先读取 AccessToken，并判断令牌是否过期，最后根据令牌得到用户信息。最终放入到 SecurityContextHolder 上下文中表示认证通过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110002037689-486089793.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110002325879-438938414.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;5、刷新令牌&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;令牌是存在过期时间的，一般会设置一个小时或两个小时过期。在用户使用过程中，如果令牌过期，则又需要用户重新登录，用户体验不好。因此可以使用得到的更新令牌去重新获取访问令牌而不需要重新登录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110004331812-1694590646.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;6、简化模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;一般来说，我们自己内部的系统并不需要使用两步的授权码模式来获取授权，我们可以使用简化模式（implicit grant type）来获取授权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只需将response_type改为token即可： host/oauth/authorize?client_id=client&amp;amp;response_type=token&amp;amp;scope=default&amp;amp;state=test。用户确认授权后，就会在地址中将令牌带回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110005045864-465670561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181110005011646-1102915247.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;7、代码实现&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 自定义客户端服务类，从数据库获取 Client&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f2819ca9-4900-4879-8fba-1c27b7f04dd2')&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_f2819ca9-4900-4879-8fba-1c27b7f04dd2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f2819ca9-4900-4879-8fba-1c27b7f04dd2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f2819ca9-4900-4879-8fba-1c27b7f04dd2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_f2819ca9-4900-4879-8fba-1c27b7f04dd2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.oauth;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Optional;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.databind.ObjectMapper;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.entity.Client;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.domain.service.ClientService;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.ClientDetails;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.ClientDetailsService;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.ClientRegistrationException;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.NoSuchClientException;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.StringUtils;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt; * 自定义 ClientDetailsService
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/11/03
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomClientDetailsService &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ClientDetailsService {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(CustomClientDetailsService.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ClientService clientService;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; OAuthProperties properties;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomClientDetailsService(ClientService clientService, OAuthProperties properties) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.clientService =&lt;span&gt; clientService;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.properties =&lt;span&gt; properties;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; ObjectMapper mapper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObjectMapper();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ClientDetails loadClientByClientId(String clientId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ClientRegistrationException {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         Client client =&lt;span&gt; clientService.selectByClientId(clientId);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (client == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NoSuchClientException(&quot;No client with requested id: &quot; +&lt;span&gt; clientId);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         CustomClientDetails clientDetails = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomClientDetails();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        clientDetails.setClientId(client.getClientId());
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        clientDetails.setClientSecret(client.getClientSecret());
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        clientDetails.setAuthorizedGrantTypes(StringUtils.commaDelimitedListToSet(client.getGrantTypes()));
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        clientDetails.setResourceIds(StringUtils.commaDelimitedListToSet(client.getResourceIds()));
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        clientDetails.setScope(StringUtils.commaDelimitedListToSet(client.getScope()));
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        clientDetails.setRegisteredRedirectUri(StringUtils.commaDelimitedListToSet(client.getRedirectUris()));
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        clientDetails.setAuthorities(Collections.emptyList());
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; accessTokenValiditySeconds =&lt;span&gt; Optional
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                .ofNullable(client.getAccessTokenValidity())
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                .orElse(properties.getAccessTokenValiditySeconds());
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        clientDetails.setAccessTokenValiditySeconds(accessTokenValiditySeconds);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; refreshTokenValiditySeconds =&lt;span&gt; Optional
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                .ofNullable(client.getRefreshTokenValidity())
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                .orElse(properties.getRefreshTokenValiditySeconds());
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        clientDetails.setRefreshTokenValiditySeconds(refreshTokenValiditySeconds);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        clientDetails.setAutoApproveScopes(StringUtils.commaDelimitedListToSet(client.getAutoApproveScopes()));
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         String json =&lt;span&gt; client.getAdditionalInformation();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (org.apache.commons.lang3.StringUtils.isNotBlank(json)) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 Map&amp;lt;String, Object&amp;gt; additionalInformation = mapper.readValue(json, Map.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                clientDetails.setAdditionalInformation(additionalInformation);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                 LOGGER.warn(&quot;parser addition info error: {}&quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; clientDetails;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/856154/201811/856154-20181104213529152-93203787.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 认证服务器配置，主要是针对授权服务端口的配置，配置使用Redis来存储令牌。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c42abfa5-efa3-4393-b22c-f7839a9f1504')&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_c42abfa5-efa3-4393-b22c-f7839a9f1504&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c42abfa5-efa3-4393-b22c-f7839a9f1504&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c42abfa5-efa3-4393-b22c-f7839a9f1504',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_c42abfa5-efa3-4393-b22c-f7839a9f1504&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.core.CustomUserDetailsService;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.lyyzoo.sunny.security.oauth.CustomClientDetailsService;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.redis.connection.RedisConnectionFactory;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.authentication.AuthenticationManager;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.NoOpPasswordEncoder;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt; * 认证服务器配置
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; bojiangzhou 2018/11/02
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;@EnableAuthorizationServer
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorizationServerConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizationServerConfigurerAdapter {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerSecurityConfigurer security) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        security
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                .passwordEncoder(NoOpPasswordEncoder.getInstance())
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                .allowFormAuthenticationForClients()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FIELD_ACCESS_TOKEN = &quot;oauth2:access_token:&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AuthenticationManager authenticationManager;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomClientDetailsService clientDetailsService;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomUserDetailsService userDetailsService;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSource dataSource;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; RedisConnectionFactory redisConnectionFactory;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationServerConfiguration(AuthenticationConfiguration authenticationConfiguration,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                                            CustomClientDetailsService clientDetailsService,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                                            CustomUserDetailsService userDetailsService,
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                                            DataSource dataSource,
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                                             RedisConnectionFactory redisConnectionFactory) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.authenticationManager =&lt;span&gt; authenticationConfiguration.getAuthenticationManager();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.clientDetailsService =&lt;span&gt; clientDetailsService;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.userDetailsService =&lt;span&gt; userDetailsService;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.dataSource =&lt;span&gt; dataSource;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.redisConnectionFactory =&lt;span&gt; redisConnectionFactory;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerEndpointsConfigurer endpoints) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        endpoints
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                 .authorizationCodeServices(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; JdbcAuthorizationCodeServices(dataSource))
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                .tokenStore(tokenStore())
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                .userDetailsService(userDetailsService)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;                .authenticationManager(authenticationManager)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(ClientDetailsServiceConfigurer clients) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        clients.withClientDetails(clientDetailsService);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;     @ConditionalOnMissingBean(RedisTokenStore.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedisTokenStore tokenStore() {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         RedisTokenStore redisTokenStore = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisTokenStore(redisConnectionFactory);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;        redisTokenStore.setPrefix(FIELD_ACCESS_TOKEN);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisTokenStore;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;七、总结&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、参考文档&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://springcloud.cc/spring-security-zhcn.html&quot; target=&quot;_blank&quot;&gt;Spring Security 参考手册&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/dushiwodecuo/article/details/78913113&quot; target=&quot;_blank&quot;&gt;Spring Security 核心过滤器链分析&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-security&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Spring boot security&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/spring-security/&quot; target=&quot;_blank&quot;&gt;初识 Spring Security&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;page-title&quot; class=&quot;asset-name entry-title&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&quot; target=&quot;_blank&quot;&gt;JSON Web Token 入门教程&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-4.1&quot; target=&quot;_blank&quot;&gt;The OAuth 2.0 Authorization Framework&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.jianshu.com/p/68f22f9a00ee&quot; target=&quot;_blank&quot;&gt;Spring Security 与 OAuth2&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;title&quot;&gt;&lt;span&gt;2、总结&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;title&quot;&gt;&lt;span&gt;本篇主要讲述了基于SpringSecurity和OAuth2的几种登录认证方式，主要是分析了整个流程以及相关的源码、原理。前后端分离部分目前只是使用 Postman 简单测试了下，后面有时间考虑使用 Vue 做前端框架，搭建一个前端出来，后面再完善。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;&lt;span&gt;本来还要做SSO单点登录和授权相关的内容的，考虑到时间精力有限，就不在这里做介绍了。通过前面对源码的分析梳理，相信这部分内容也不在话下。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;&lt;span&gt;下一步计划是做 Spring cloud 这部分的内容，开发微服务中的注册中心（Eureka）、网关（Gateway）等等，通过开发这些服务，去熟悉spring cloud 的使用、熟悉部分核心代码及原理。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;&amp;lt;-------------------------------------------------------------------------------------------------------------&amp;gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 17:52:00 +0000</pubDate>
<dc:creator>bojiangzhou</dc:creator>
<og:description>基于 SpringSecurity 实现标准用户名密码登录，基于 SpringSocial 实现QQ登录，基于 OAuth2 实现认证服务器。在完成登录功能的同时，一步步分析 spring secur</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chiangchou/p/springboot-2.html</dc:identifier>
</item>
<item>
<title>【译】理解JavaScript中的柯里化 - LINJIAJUN</title>
<link>http://www.cnblogs.com/GeniusLyzh/p/9937829.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GeniusLyzh/p/9937829.html</guid>
<description>&lt;h2 id=&quot;译文开始&quot;&gt;译文开始&lt;/h2&gt;
&lt;p&gt;函数式编程是一种编程风格，这种编程风格就是试图将传递函数作为参数（即将作为回调函数）和返回一个函数，但没有函数副作用（函数副作用即会改变程序的状态）。&lt;br/&gt;有很多语言采用这种编程风格，其中包括JavaScript、Haskell、Clojure、Erlang和Scala等一些很流行的编程语言。&lt;br/&gt;函数式编程凭借其传递和返回函数的能力，带来了许多概念：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;纯函数&lt;/li&gt;
&lt;li&gt;柯里化&lt;/li&gt;
&lt;li&gt;高阶函数&lt;br/&gt;其中一个我们将要看到的概念就是柯里化。&lt;br/&gt;在这篇文章，我们将看到柯里化是如何工作以及它如何在我们作为软件开发者的工作中发挥作用。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;什么是柯里化&quot;&gt;什么是柯里化&lt;/h2&gt;
&lt;p&gt;柯里化是函数式编程中的一种过程，可以将接受具有多个参数的函数转化为一个的嵌套函数队列，然后返回一个新的函数以及期望下一个的内联参数。它不断返回一个新函数（期望当前参数，就像我们之前说的那样）直到所有参数都用完为止。这些参数会一直保持“存活”不会被销毁（利用闭包的特性）以及当柯里化链中最后的函数返回并执行时，所有参数都用于执行。&lt;/p&gt;
&lt;blockquote readability=&quot;5.6648044692737&quot;&gt;
&lt;p&gt;柯里化就是将具有多个arity的函数转化为具有较少的arity的函数。——&lt;a href=&quot;https://medium.com/@kbrainwave&quot;&gt;kbrainwave&lt;/a&gt;&lt;br/&gt;备注：术语arity（元数）：指的是函数的参数个数，例如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;function fn(a, b) {
    //...
}
function _fn(a, b, c) {
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数fn有两个参数（即 2-arity函数）以及_fn有三个参数（即3-arity函数）。&lt;br/&gt;因此，柯里化将一个具有多个参数的函数转化为一系列只需一个参数的函数。&lt;br/&gt;下面，我们看一个简单的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function multiply(a, b, c) {
    return a * b * c;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数接收三个数字并且相乘，然后返回计算结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;multiply(1,2,3); // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来看看，我们如何用完整参数调用乘法函数。我们来创建一个柯里化版本的函数，然后看看如何在一系列调用中调用相同的函数（并且得到同样的结果）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function multiply(a) {
    return (b) =&amp;gt; {
        return (c) =&amp;gt; {
            return a * b * c
        }
    }
}
log(multiply(1)(2)(3)) // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们已经将multiply(1,2,3)函数调用形式转化为multiply(1)(2)(3)多个函数调用的形式。&lt;br/&gt;一个单独的函数已经转化为一系列的函数。为了得到三个数字1、2、3的乘法结果，这些数字一个接一个传递，每个数字会预先填充用作下一个函数内联调用。&lt;br/&gt;我们可以分开这个multiply(1)(2)(3)函数调用步骤，更好理解一点。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const mul1 = multiply(1);
const mul2 = mul1(2);
const result = mul2(3);
log(result); // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来一个接一个地传递参数。首先传参数1到multiply函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let mul1 = multiply(1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码执行会返回一个函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;return (b) =&amp;gt; {
        return (c) =&amp;gt; {
            return a * b * c
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在，变量mul1会保持以上的函数定义，这个函数接收参数b。&lt;br/&gt;我们调用函数mul1，传入参数2：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let mul2 = mul1(2);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数mul1执行后会返回第三个函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;return (c) =&amp;gt; {
            return a * b * c
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个返回的函数现在保存在变量mul2中。&lt;br/&gt;本质上，变量mul2可以这么理解：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mul2 = (c) =&amp;gt; {
            return a * b * c
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当传入参数3调用函数mul2时，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const result = mul2(3);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会使用之前传入的参数进行计算：a=1，b=2，然后结果为6。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;log(result); // 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;作为一个嵌套函数，mul2函数可以访问外部函数的变量作用域，即multiply函数和mul1函数。&lt;br/&gt;这就是为什么mul2函数能使用已经执行完函数中定义的变量中进行乘法计算。虽然函数早已返回而且已经在内存中执行垃圾回收。但是它的变量还是以某种方式保持“存活”。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;备注：以上变量保持存活是闭包特性，不明白可以查看闭包相关文章了解更多&lt;br/&gt;你可以看到三个数字每次只传递一个参数应用于函数，并且每次都返回一个新的函数，值得所有的参数用完为止。&lt;br/&gt;下面来看一个其他的例子：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;function volume(l,w,h) {
    return l * w * h;
}
const aCylinder = volume(100,20,90) // 180000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面是一个计算任何实心形状体积的函数。&lt;br/&gt;这个柯里化版本将接受一个参数以及返回一个函数，该函数同样也接受一个参数和返回一个新的函数。然后一直这样循环/继续，直到到达最后一个参数并返回最后一个函数。然后执行之前的参数和最后一个参数的乘法运算。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function volume(l) {
    return (w) =&amp;gt; {
        return (h) =&amp;gt; {
            return l * w * h
        }
    }
}
const aCylinder = volume(100)(20)(90) // 180000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就像之前的multiply函数那样，最后的函数只接受一个参数h，但是仍然会对那些早已执行完返回的函数作用域中里的其他变量执行操作。能这样操作是因为有闭包的特性。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;译者注：以上写的很啰嗦，感觉另外的例子完全就是重复说明。&lt;br/&gt;柯里化背后的想法其实是获取一个函数并派生出一个返回特殊函数的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;柯里化在数学方面的应用&quot;&gt;柯里化在数学方面的应用&lt;/h2&gt;
&lt;p&gt;我有点喜欢数学说明👉&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Currying&quot;&gt;维基百科&lt;/a&gt;进一步展示了柯里化的概念。下面用我们的例子来进一步看下柯里化。&lt;br/&gt;假设有一个方程&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(x,y) = x^2 + y = z&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有两个变量x和y，如果这两个变量分别赋值x=3和y=4，可以得到z的值。&lt;br/&gt;下面我们在函数f(x,y)中替换变量的值为y=4和x=3：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(x,y) = f(3,4) = x^2 + y = 3^2 + 4 = 13 = z&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;得到z的结果为13&lt;br/&gt;我们也可以将f(x,y)柯里化，在一系列的函数里提供这些变量。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;h = x^2 + y = f(x,y)
hy(x) = x^2 + y = hx(y) = x^2 + y
[hx =&amp;gt; w.r.t x] and [hy =&amp;gt; w.r.t y]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：hx表示h下标为x的标识符，同理hy表示h下标为y的标识符。w.r.t(with respect to)，数学符号，表示关于，常用于求导，或者满足一定条件之类的情况&lt;/p&gt;
&lt;p&gt;我们使方程f(x,y)=x^2+y的变量x=3，它将返回一个以y为变量的新方程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;h3(y) = 3^2 + y = 9 + y
注：h3 表示h下标为3的标识符&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也等同于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;h3(y) = h(3)(y) = f(3,y) = 3^2 + y = 9 + y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数的结果还是没有确定的，而是返回一个期望其他变量y的一个新方程 9+y。&lt;br/&gt;下一步，我们传入y=4&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;h3(4) = h(3)(4) = f(3,4) = 9 + 4 = 13&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;变量y是变量链中的最后一个，然后与前一个保留的变量x=3执行加法运算，值最后被解析，结果是12。&lt;br/&gt;所以基本上，我们将这个方程f(x,y)=3^2+y柯里化为一系列的方程式，在最终结果得到之前。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;3^2 + y -&amp;gt; 9 + y
f(3,y) = h3(y) = 3^2 + y = 9 + y
f(3,y) = 9 + y
f(3,4) = h3(4) = 9 + 4 = 13&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，这就是柯里化在数学方面的一些应用，如果你觉得这些说明得还不够清楚。可以在&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Currying&quot;&gt;维基百科&lt;/a&gt;阅读更详细的内容。&lt;/p&gt;
&lt;h2 id=&quot;柯里化和部分应用函数&quot;&gt;柯里化和部分应用函数&lt;/h2&gt;
&lt;p&gt;现在，有些人可能开始认为柯里化函数的嵌套函数的数量取决于它接受的参数。是的，这就是柯里化。&lt;br/&gt;我可以设计一个这样的柯里化函数volume：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function volume(l) {
    return (w, h) =&amp;gt; {
        return l * w * h
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以，可以像这样去调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const hCy = volume(70);
hCy(203,142);
hCy(220,122);
hCy(120,123);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者是这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;volume(70)(90,30);
volume(70)(390,320);
volume(70)(940,340);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们刚刚定义了专门的函数，用于计算任何长度(l)，70圆柱体积。&lt;br/&gt;它接受3个参数和有2层嵌套函数，跟之前的接受3个参数和有3层嵌套函数的版本不一样。&lt;br/&gt;但是这个版本并不是柯里化。我们只是做了一个部分应用的volume函数。&lt;br/&gt;柯里化和部分应用函数有关联，但是它们是不同的概念。&lt;br/&gt;部分应用函数是将一个函数转化为具有更少的元素（即更是的参数）的函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function acidityRatio(x, y, z) {
    return performOp(x,y,z)
}
|
V
function acidityRatio(x) {
    return (y,z) =&amp;gt; {
        return performOp(x,y,z)
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;注：我故意没有实现performOp函数。因为这里，这个不是必要的。你所需要知道的是柯里化和部分应用函数背后的概念就可以。&lt;br/&gt;这是acidityRatio函数的部分应用，并没有涉及柯里化。acidityRatio函数应用于接受更少的元数，比原来的函数期望更少的参数。&lt;br/&gt;柯里化可以这样实现：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;function acidityRatio(x) {
    return (y) = &amp;gt; {
        return (z) = &amp;gt; {
            return performOp(x,y,z)
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;柯里化是根据函数的参数数量创建嵌套函数，每个函数接受一个参数。如果没有参数，那就没有柯里化。&lt;br/&gt;可能存在一种情况，即柯里化和部分应用彼此相遇。假设我们有一个函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function div(x,y) {
    return x/y;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果写出部分应用形式，得到的结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function div(x) {
    return (y) =&amp;gt; {
        return x/y;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样地，柯里化也是同样地结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function div(x) {
    return (y) =&amp;gt; {
        return x/y;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然柯里化和部分应用函数给出同样地结果，但它们是两个不同的存在。&lt;br/&gt;像我们之前说的，柯里化和部分应用是相关的，但设计上实际是完全不一样的。相同之处就是它们都依赖闭包。&lt;/p&gt;
&lt;h2 id=&quot;函数柯里化有用吗&quot;&gt;函数柯里化有用吗？&lt;/h2&gt;
&lt;p&gt;当然有用，柯里化马上能派上用场，如果你想：&lt;/p&gt;
&lt;h3 id=&quot;编写轻松重用和配置的小代码块就像我们使用npm一样&quot;&gt;1、编写轻松重用和配置的小代码块，就像我们使用npm一样：&lt;/h3&gt;
&lt;p&gt;举个例子，比如你有一间士多店并且你想给你优惠的顾客给个10%的折扣（即打九折）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function discount(price, discount) {
    return price * discount
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当一位优惠的顾客买了一间价值$500的物品，你给他打折：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const price = discount(500,0.10); // $50 
// $500  - $50 = $450&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可以预见，从长远来看，我们会发现自己每天都在计算10%的折扣：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const price = discount(1500,0.10); // $150
// $1,500 - $150 = $1,350
const price = discount(2000,0.10); // $200
// $2,000 - $200 = $1,800
const price = discount(50,0.10); // $5
// $50 - $5 = $45
const price = discount(5000,0.10); // $500
// $5,000 - $500 = $4,500
const price = discount(300,0.10); // $30
// $300 - $30 = $270&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以将discount函数柯里化，这样我们就不用总是每次增加这0.01的折扣。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function discount(discount) {
    return (price) =&amp;gt; {
        return price * discount;
    }
}
const tenPercentDiscount = discount(0.1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在，我们可以只计算你的顾客买的物品都价格了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tenPercentDiscount(500); // $50
// $500 - $50 = $450&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样地，有些优惠顾客比一些优惠顾客更重要-让我们称之为超级客户。并且我们想给这些超级客户提供20%的折扣。&lt;br/&gt;可以使用我们的柯里化的discount函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const twentyPercentDiscount = discount(0.2);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们通过这个柯里化的discount函数折扣调为0.2（即20%），给我们的超级客户配置了一个新的函数。&lt;br/&gt;返回的函数twentyPercentDiscount将用于计算我们的超级客户的折扣：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;twentyPercentDiscount(500); // 100
// $500 - $100 = $400
twentyPercentDiscount(5000); // 1000
// $5,000 - $1,000 = $4,000
twentyPercentDiscount(1000000); // 200000
// $1,000,000 - $200,000 = $600,000&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;避免频繁调用具有相同参数的函数&quot;&gt;2、避免频繁调用具有相同参数的函数&lt;/h3&gt;
&lt;p&gt;举个例子，我们有一个计算圆柱体积的函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function volume(l, w, h) {
    return l * w * h;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;碰巧仓库所有的气缸高度为100米，你将会看到你将重复调用此函数，h为100米&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;volume(200,30,100) // 2003000l
volume(32,45,100); //144000l
volume(2322,232,100) // 53870400l&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要解决以上问题，你可以将volume函数柯里化（像我们之前做的）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function volume(h) {
    return (w) =&amp;gt; {
        return (l) =&amp;gt; {
            return l * w * h
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以定义一个专门指定圆柱体高度的的函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const hCylinderHeight = volume(100);
hCylinderHeight(200)(30); // 600,000l
hCylinderHeight(2322)(232); // 53,870,400l&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;通用的柯里化函数&quot;&gt;通用的柯里化函数&lt;/h2&gt;
&lt;p&gt;我们来开发一个函数，它接受任何函数并返回一个柯里化版本的函数。&lt;br/&gt;要做到这点，我们将有这个（虽然你的方法可能跟我的不一样）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function curry(fn, ...args) {
    return (..._arg) =&amp;gt; {
        return fn(...args, ..._arg);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码做了什么？curry函数接受一个我们想要柯里化的函数（fn）和 一些可变数量的参数（…args）。剩下的操作用于将fn之后的参数数量收集到…args中。&lt;br/&gt;然后，返回一个函数，同样地将余下的参数收集为…&lt;em&gt;args。这个函数调用原始函数fn通过使用spread运算符作为参数传入... args和...&lt;/em&gt; args，然后，将值返回给使用。&lt;br/&gt;现在我们可以用curry函数来创建特定的函数啦。&lt;br/&gt;下面我们用curry函数来创建更多计算体检的特定函数（其中一个就是计算高度100米的圆柱体积函数）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function volume(l,h,w) {
    return l * h * w
}
const hCy = curry(volume,100);
hCy(200,900); // 18000000l
hCy(70,60); // 420000l&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;闭包使JavaScript柯里化成为可能。能够保留已经执行的函数的状态，使我们能够创建工厂函数 - 可以为其参数添加特定值的函数。柯里化、闭包和函数式编程是很棘手的。但是我可以保证，投入时间和练习，你就会开始掌握它，看看它多么有价值。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Currying&quot;&gt;柯里化-维基百科&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Partial_application&quot;&gt;部分应用函数&lt;/a&gt;&lt;br/&gt;（完）&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;以上译文仅用于学习交流，水平有限，难免有错误之处，敬请指正。&lt;/p&gt;
&lt;h2 id=&quot;原文&quot;&gt;原文&lt;/h2&gt;
&lt;p&gt;https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 16:35:00 +0000</pubDate>
<dc:creator>LINJIAJUN</dc:creator>
<og:description>译文开始 函数式编程是一种编程风格，这种编程风格就是试图将传递函数作为参数（即将作为回调函数）和返回一个函数，但没有函数副作用（函数副作用即会改变程序的状态）。 有很多语言采用这种编程风格，其中包括J</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GeniusLyzh/p/9937829.html</dc:identifier>
</item>
<item>
<title>python函数的参数细节 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9937828.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9937828.html</guid>
<description>&lt;h2 id=&quot;按指针传递&quot;&gt;按&quot;指针&quot;传递&lt;/h2&gt;
&lt;p&gt;python中&lt;strong&gt;变量赋值、参数传递都是通过&quot;指针&quot;拷贝的方式进行的&lt;/strong&gt;。除了按&quot;指针&quot;拷贝，还有一种按值拷贝的方式，关于按值、按指针拷贝的细节，参见&lt;a href=&quot;https://www.cnblogs.com/f-ck-need-u/p/9928418.html&quot;&gt;按值传递 vs. 按指针传递&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以在python中，变量赋值、参数传递，都只是拷贝了源数据的一个地址，而不会拷贝内存中完整的数据对象副本。所以，如果在函数内部修改变量指向的数据对象，会影响函数外部的数据。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x):
    print(x+3)
a=4
f(a)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在将&lt;code&gt;a&lt;/code&gt;赋值给本地变量x的时候，只是拷贝了a目前保存的地址给x，使得x也保存了内存中数据对象4的地址。&lt;/p&gt;
&lt;p&gt;如果传递的数据对象是可变数据对象(例如列表)，那么在函数内部修改它，会影响函数外部的原始数据对象：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;L1=[11,22,33,44]
def f(x):
    x[0] += 1

f(L1)
print(L1)   # 输出：[12, 22, 33, 44]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，在函数内部修改&lt;code&gt;x[0]&lt;/code&gt;的值，函数外部原始的L1也发生了改变。因为L1赋值给x的时候，只是拷贝了一份L1所指向列表的地址给x，使得x也指向这个列表。&lt;/p&gt;
&lt;p&gt;为了避免这种情况，可以新创建一份列表的副本，然后传递给函数参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;L1=[11,22,33,44]
def f(x):
    x[0] += 1

f(L1[:])
print(L1)   # 输出：[11, 22, 33, 44]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面传递给函数参数x的是&lt;code&gt;L1[:]&lt;/code&gt;，它会在内存中创建一个新的列表副本，所以x指向的是这个新的副本列表，修改它不会影响原始的列表L1。&lt;/p&gt;
&lt;h2 id=&quot;函数参数&quot;&gt;函数参数&lt;/h2&gt;
&lt;p&gt;Python的函数对参数和返回值方面非常宽松，参数变量可以是任意数据类型，返回值也一样，只需使用变量名代替它们即可。&lt;/p&gt;
&lt;p&gt;例如，下面的参数x可以是任意类型的结构，可以是数值、字符串、列表、字典等等类型。返回值语句return同理。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x):
    print(x)
    return x

f(2)
f(&quot;haha&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，上面调用函数时是按照参数位置进行传参对本地变量x进行赋值的。除此之外，还可以指定为&lt;code&gt;key=value&lt;/code&gt;的方式进行传参。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(x=2)
f(x=&quot;haha&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;按位置传参&quot;&gt;按位置传参&lt;/h2&gt;
&lt;p&gt;如果是多个参数，则按从左到右的顺序进行参数变量的赋值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,y,z):
    print(x)
    print(y)
    print(z)

f(2,3,4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用&lt;code&gt;f(2,3,4)&lt;/code&gt;的时候，会按照从左向右的位置方式对本地变量x、y、z赋值：&lt;code&gt;x=2,y=3,z=4&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;按关键字keyvalue方式传值&quot;&gt;按关键字key/value方式传值&lt;/h2&gt;
&lt;p&gt;python还支持&lt;code&gt;key=value&lt;/code&gt;的方式设置函数调用时的参数，使用&lt;code&gt;key=value&lt;/code&gt;的方式赋值时，顺序不重要。这种函数调用时的传值方式称为&quot;关键字传值&quot;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,y,z):
    print(x)
    print(y)
    print(z)
    
f(x=3,y=&quot;haha&quot;,z=4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以打乱顺序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(x=3,z=4,y=&quot;haha&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还可以将&lt;code&gt;key=value&lt;/code&gt;和位置传参的方式进行混合：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(3,&quot;haha&quot;,z=4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但混合按位置传参方式的时候，&lt;strong&gt;位置参数必须在其它传参方式的前面&lt;/strong&gt;，不仅此处结合&lt;code&gt;key=value&lt;/code&gt;时如此，后文中&lt;strong&gt;位置参数结合其它方式传参也都如此：位置参数必须在最前面&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，下面的传参方式是错的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(z=4,3,&quot;haha&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参数默认值&quot;&gt;参数默认值&lt;/h2&gt;
&lt;p&gt;在def或lambda声明函数的时候，可以通过&lt;code&gt;var=default&lt;/code&gt;的方式指定参数的默认值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x=3):
    print(x)

f(4)
f(&quot;haha&quot;)
f()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的&lt;code&gt;f(4)&lt;/code&gt;和&lt;code&gt;f(&quot;haha&quot;)&lt;/code&gt;都对函数f()的本地变量x进行了赋值。但是最后一个调用语句&lt;code&gt;f()&lt;/code&gt;未赋值，而是使用参数的默认值3。&lt;/p&gt;
&lt;p&gt;设置参数默认值时，如果函数有多个参数，则带默认值参数后面必须放在最后面。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 正确
def f(x,y,z=4)
def f(x,y=1,z=4)

# 错误
def f(x,y=4,z)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只要为参数设置了默认值，那么调用函数的时候，这个参数就是可选的，可有可无的，如果没有，则采用默认值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,y=2,z=4):
    print(x)
    print(y)
    print(z)

# 不采用任何默认值
f(2,3,4)

# 采用z的默认值
f(2,3)

# 采用y的默认值
# 此时z必须按key=value的方式传值
f(2,z=5)

# y、z都采用默认值
f(2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;变长参数&quot;&gt;变长参数：*&lt;/h2&gt;
&lt;p&gt;对于任意长度的参数，可以在&lt;code&gt;def&lt;/code&gt;声明的函数中使用&lt;code&gt;*&lt;/code&gt;将各&lt;strong&gt;位置参数&lt;/strong&gt;收集到一个元组中。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(*args):
    print(args)

f(1,2,3,4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面调用&lt;code&gt;f(1,2,3,4)&lt;/code&gt;的时候，将所有参数都收集到了一个名为args的元组中。所以上面的函数将输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(1, 2, 3, 4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;既然是元组，就可以对参数进行迭代遍历：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(*args):
    for arg in args:
        print(arg)

f(1,2,3,4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;必须注意，&lt;code&gt;*&lt;/code&gt;是按位置收集参数的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,y,*args):
    print(x)
    print(y)
    for arg in args:
        print(arg)

f(1,2,3,4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照从左向右的传参规则，首先将1赋值给x，将2赋值给y，然后将剩余所有的&lt;strong&gt;位置参数&lt;/strong&gt;收集到args元组中，所以&lt;code&gt;args=(3,4)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;*&lt;/code&gt;后面还有参数，则调用函数的时候，后面的参数必须使用&lt;code&gt;key=value&lt;/code&gt;的方式传递，否则会收集到元组中，从而导致参数缺少的问题：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,*args,y):
    print(x)
    print(y)
    for arg in args:
        print(arg)

# 正确
f(1,3,4,y=2)

# 错误
f(1,2,3,4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面调用&lt;code&gt;f(1,3,4,y=2)&lt;/code&gt;的时候，会按照位置参数对x赋值为1，然后将所有位置参数收集到元组args中，因为&lt;code&gt;y=2&lt;/code&gt;是非位置参数传值方式，所以&lt;code&gt;args=(3,4)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果为上面的y设置默认值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,*args,y=2)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么&lt;code&gt;f(1,2,3,4)&lt;/code&gt;会将&lt;code&gt;(2,3,4)&lt;/code&gt;都收集到元组args中，然后y采用默认值2。&lt;/p&gt;
&lt;h2 id=&quot;变长参数-1&quot;&gt;变长参数：**&lt;/h2&gt;
&lt;p&gt;除了可以使用&lt;code&gt;*&lt;/code&gt;将位置参数收集到元组中，还可以使用&lt;code&gt;**&lt;/code&gt;将&lt;code&gt;key=value&lt;/code&gt;格式的参数收集到字典中。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,**args):
    print(x)
    print(args)

f(1,a=11,b=22,c=33,d=44)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面首先按位置传参的方式赋值&lt;code&gt;x=1&lt;/code&gt;，然后将剩余的所有&lt;code&gt;key=value&lt;/code&gt;参数收集到名为args的字典中。所以，args字典的内容为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'a': 11, 'b': 22, 'c': 33, 'd': 44}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;既然是将参数收集到字典中，就可以使用字典类的工具操作这个字典。例如，遍历字典。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;**&lt;/code&gt;的&lt;strong&gt;后面不能出现任何其它类型的参数&lt;/strong&gt;。例如，下面的都是错误的def定义方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,**args,y)
def f(x,**args,y=3)
def f(x,**args,*t)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只能将位置参数或者&lt;code&gt;*&lt;/code&gt;的收集放在&lt;code&gt;**&lt;/code&gt;的前面。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(x,y,**args)
def f(x,*args1,**args2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;函数调用时的和&quot;&gt;函数调用时的*和**&lt;/h2&gt;
&lt;p&gt;除了在def定义函数时，参数中可以使用&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;**&lt;/code&gt;收集参数，在&lt;strong&gt;函数调用&lt;/strong&gt;的时候也可以使用&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;**&lt;/code&gt;分别解包元组(列表或其它对象)、字典。一定要注意区分函数定义和函数调用时的&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;**&lt;/code&gt;，它们的用法是不通用的。&lt;/p&gt;
&lt;p&gt;例如，解包元组：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,b,c,d):
    print(a)
    print(b)
    print(c)
    print(d)

T=(1,2,3,4)
f(*T)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;除了可以解包元组，还可以解包其它可迭代对象，例如列表。甚至是字典也能解包，只不过&lt;code&gt;*&lt;/code&gt;解包的字典得到的&lt;strong&gt;是key组成的参数列表&lt;/strong&gt;，和value无关：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;D=dict(a=11,b=22,c=33,d=44)
f(*D)

# 输出：
a
b
c
d&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而&lt;code&gt;**&lt;/code&gt;解包的字典则是&lt;code&gt;key=value&lt;/code&gt;组成的参数列表。以下是函数调用时使用&lt;code&gt;**&lt;/code&gt;进行解包，字典D中的key名称必须和def中定义的参数名称相同：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,b,c,d):
    print(a)
    print(b)
    print(c)
    print(d)

D=dict(a=11,b=22,c=33,d=44)
f(**D)

# 输出：
11
22
33
44&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在函数调用时，可以混合位置参数、关键字参数、&lt;code&gt;*&lt;/code&gt;解包参数、&lt;code&gt;**&lt;/code&gt;解包参数。用法非常的灵活：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,b,c,d):
    print(a)
    print(b)
    print(c)
    print(d)

f(*(1,2),**{'d':4,'c':3})

f(1,*(2,3),**{'d':4})

f(1,c=3,*(2,),**{'d':4})

f(1,*(2,3),d=4)

f(1,*(2,),c=3,**{'d':4})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面调用函数时的效果都等同于&lt;code&gt;f(1,2,3,4)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;keyword-only参数形式&quot;&gt;keyword-only参数形式&lt;/h2&gt;
&lt;p&gt;keyword-only的参数传值方式表示def中如果使用了&lt;code&gt;*&lt;/code&gt;，那么在调用函数时，&lt;strong&gt;它后面的参数必须只能使用关键字传值&lt;/strong&gt;。其实在前面的内容中已经出现过几次与之相关的说明。&lt;/p&gt;
&lt;p&gt;另外注意，&lt;code&gt;*&lt;/code&gt;才是keyword-only开关，&lt;code&gt;**&lt;/code&gt;不是，虽然&lt;code&gt;**&lt;/code&gt;也有自己的一些语法限制：任意类型的参数定义都必须在&lt;code&gt;**&lt;/code&gt;之前，包括keyword-only类型的参数。这个前面已经解释过了。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,*b,c):
    print(a,b,c)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按照keyword-only的规则，被&lt;code&gt;*b&lt;/code&gt;收集的位置参数不包括c，这个c必须只能使用关键字的方式传值，否则就被当作位置参数被收集到元组b中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 正确
f(1,2,3,c=4)

# 错误
f(1,2,3,4)

# 错误
f(1,c=4,2,3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中最后一个错误和如何def的定义无关，而是函数调用时的语法错误，前面已经解释过：位置参数必须放在最前面。&lt;/p&gt;
&lt;p&gt;还可以直接使用&lt;code&gt;*&lt;/code&gt;而非&lt;code&gt;*args&lt;/code&gt;的方式，这表示&lt;strong&gt;不收集任何参数，但却要求它后面的参数必须按照关键字传值的方式&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,*,b,c):
    print(a,b,c)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是正确和错误的调用方式示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 正确
f(1,b=2,c=3)
f(1,c=3,b=2)
f(b=2,c=3,a=1)

# 错误
f(1,2,3)
f(1,2,c=3)
f(1,b=2,3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，keyword-only后面的参数可以使用参数默认值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,*,b,c=3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么c是可选的，但如果给定，则必须按关键字方式传值。&lt;/p&gt;
&lt;h2 id=&quot;参数定义和参数传值的规则&quot;&gt;参数定义和参数传值的规则&lt;/h2&gt;
&lt;p&gt;对于&lt;strong&gt;函数定义中的参数&lt;/strong&gt;，有3种方式：普通位置参数、&lt;code&gt;*&lt;/code&gt;开启的keyword-only参数、&lt;code&gt;**args&lt;/code&gt;收集参数。它们之间的规则是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;**args&lt;/code&gt;必须在最后面&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;*args&lt;/code&gt;后面可以是普通参数，但是函数调用传值时，它后面的参数必须按照关键字的方式指定&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以，函数定义时参数的通用形式为：其中c和d必须使用关键字传值方式&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,b,  *,c,d,  **dicts)
def f(a,b,  *args,c,d,  **dicts)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于函数调用中的参数，有：普通位置参数、关键字参数、&lt;code&gt;*&lt;/code&gt;解包参数、&lt;code&gt;**&lt;/code&gt;解包参数。它们之间的规则时：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;普通位置参数必须在最前面&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;解包必须在最后面&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;关键字参数和&lt;code&gt;*&lt;/code&gt;解包参数只要求在上述两种参数形式中间，顺序可以随意&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以，函数调用时的传参形式为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(a,b,c,  *(d,e,f),g=1,h=2,  **dict(j=3,k=4))
f(a,b,c,  d=1,e=2,*(f,g,h),  **dict(j=3,k=4))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a,*b,c,**d):
    print(a,b,c,d)

f(1,  2,3,  c=4,  x=5,y=6)
f(1,  c=4,*(2,3),  **dict(x=5,y=6))
f(1,  *(2,3),c=4,  **dict(x=5,y=6))
f(1,  *(2,3),      **dict(c=4,x=5,y=6))
f(1,  2,3,         **dict(c=4,x=5,y=6))&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;函数注解annotations&quot;&gt;函数注解(annotations)&lt;/h2&gt;
&lt;p&gt;python函数有一个名为&lt;code&gt;__annotations__&lt;/code&gt;的属性(可以使用dir(Func_Name)来查看)。它表示函数的注解。&lt;/p&gt;
&lt;p&gt;函数的注解使得参数变得更规范、更通用，它有点类似于强调数据类型。但&lt;strong&gt;它们仅仅只是注解，只是给人看，用来起提示作用的，不会对实际的调用有任何影响&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，下面是没有给注解的函数参数，也就是平时见到的参数方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def myfunc(a,b,c):
    return a+b+c

myfunc(1,2,3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数的注解分两种：参数注解和返回值注解。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;参数注解：定义在各参数名之后，使用冒号分隔参数和参数的注解&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;返回值注解：定义在参数列表之后，冒号之前，使用瘦箭头&lt;code&gt;-&amp;gt;&lt;/code&gt;分隔&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def myfunc(a:'string',b:[1,5],c:int)-&amp;gt;int:
    return a+b+c

print( myfunc(1,2,3) )
print( myfunc(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) )&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然上面的函数注解提示了参数a是一个字符串，b是一个列表，c是一个int类型的数据，以及返回值是一个int类型的值，但在函数调用的时候，这些&quot;强调&quot;并没有发生影响，只不过在使用该函数的时候，如果使用IDE编写代码，会有代码提示。&lt;/p&gt;
&lt;p&gt;可以通过函数的&lt;code&gt;__annotations__&lt;/code&gt;属性查看函数的注解：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print(myfunc.__annotations__)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'a': 'string', 'b': [1, 5], 'c': &amp;lt;class 'int'&amp;gt;, 'return': &amp;lt;class 'int'&amp;gt;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以只对其中一个或多个参数进行注解。&lt;/p&gt;
&lt;p&gt;如果使用了注解，还要设置参数的默认值，则默认值需要在注解的后面。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f(a:'string'=4):&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;函数注解只对def语句有效，对lambda无效，因为lambda已经限制了函数的定义方式。&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 16:33:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>按</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9937828.html</dc:identifier>
</item>
<item>
<title>Okam(奥卡姆)：小程序开发框架，支持百度小程序、微信小程序、支付宝小程序 - xiaohong_oath</title>
<link>http://www.cnblogs.com/xiao-hong/p/9937780.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiao-hong/p/9937780.html</guid>
<description>&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;* @file 小程序入口
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;* @author &amp;lt;author&amp;gt;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt; 'use strict'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    config: {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        pages: [
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             'pages/home/index'
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;          
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        window: {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             navigationBarBackgroundColor: '#211E2E'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             navigationBarTextStyle: 'white'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             backgroundTextStyle: 'light'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             enablePullDownRefresh: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             backgroundColor: '#ccc'
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;          
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        networkTimeout: {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             request: 30000
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;      
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    $promisifyApis: []
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; };
&lt;/pre&gt;</description>
<pubDate>Fri, 09 Nov 2018 16:04:00 +0000</pubDate>
<dc:creator>xiaohong_oath</dc:creator>
<og:description>Okam(奥卡姆)：小程序开发框架，支持百度小程序、微信小程序、支付宝小程序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiao-hong/p/9937780.html</dc:identifier>
</item>
<item>
<title>BZOJ 3108: [cqoi2013]图的逆变换 - SongHL</title>
<link>http://www.cnblogs.com/songorz/p/9937744.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songorz/p/9937744.html</guid>
<description>&lt;center&gt;&lt;span class=&quot;green&quot;&gt;Time Limit: 10 Sec  &lt;span class=&quot;green&quot;&gt;Memory Limit: 128 MB&lt;br/&gt;&lt;span class=&quot;green&quot;&gt;Submit: 627  &lt;span class=&quot;green&quot;&gt;Solved: 415&lt;br/&gt;[&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/submitpage.php?id=3108&quot;&gt;Submit&lt;/a&gt;][&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problemstatus.php?id=3108&quot;&gt;Status&lt;/a&gt;][&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/bbs.php?id=3108&quot;&gt;Discuss&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/center&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;36&quot;&gt;
&lt;p&gt;给一个n结点m条边的有向图D，可以这样构造图E：给D的每条边u-&amp;gt;v，在E中建立一个点uv，然后对于D中的两条边u-&amp;gt;v和v-&amp;gt;w，在E中从uv向vw连一条有向边。E中不含有其他点和边。&lt;/p&gt;
&lt;p&gt;输入E，你的任务是判断是否存在相应的D。注意，D可以有重边和自环。&lt;/p&gt;

&lt;/div&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;第一行包含测试数据个数T（T&amp;lt;=10）。每组数据前两行为D的边数（即E的点数）m和E的边数k（0&amp;lt;=m&amp;lt;=300）。以下&lt;em&gt;k&lt;/em&gt;行每行两个整数x, y，表示E中有一条有向边x-&amp;gt;y。E中的点编号为0~m-1。&lt;/p&gt;

&lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;

&lt;p&gt;对于每组数据输出一行。如果存在，输出Yes，否则输出No。&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Sample Input&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;sampledata&quot;&gt;4&lt;br/&gt;2&lt;br/&gt;1&lt;br/&gt;0 1&lt;br/&gt;5&lt;br/&gt;0&lt;br/&gt;4&lt;br/&gt;3&lt;br/&gt;0 1&lt;br/&gt;2 1&lt;br/&gt;2 3&lt;br/&gt;3&lt;br/&gt;9&lt;br/&gt;0 1&lt;br/&gt;0 2&lt;br/&gt;1 2&lt;br/&gt;1 0&lt;br/&gt;2 0&lt;br/&gt;2 1&lt;br/&gt;0 0&lt;br/&gt;1 1&lt;br/&gt;2 2&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;sampledata&quot;&gt;Yes&lt;br/&gt;Yes&lt;br/&gt;No&lt;br/&gt;Yes&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;content&quot; readability=&quot;65&quot;&gt;
&lt;p&gt; 题解：暴力搜索+剪枝；&lt;/p&gt;
&lt;h3&gt;整理一下判断条件：&lt;/h3&gt;
&lt;p&gt;1.这一行是否有重复的数&lt;/p&gt;
&lt;p&gt;2.这一列是否有重复的数&lt;/p&gt;
&lt;p&gt;3.这一个小九宫格中是否有重复的数&lt;/p&gt;
&lt;p&gt;4.是否符合大于小于的条件&lt;/p&gt;
&lt;p&gt;现在我分别用 &lt;em&gt;h[i][j] ,l[i][j] ,g[i][j] &lt;/em&gt;来表示第i行，第i列，第i个小九宫格中数字j是否重复。还有一个大于小于号的问题后面再说，让我们先来看一下读入。&lt;/p&gt;
&lt;p&gt;输入格式： 一共15行，包含一个新数独的实例。第奇数行包含左右方向的符号（&amp;lt;和&amp;gt;），第偶数行包含上下方向的符号（^和v）&lt;/p&gt;
&lt;p&gt;说是奇数行包含左右方向的符号，偶数行包含上下方向的符号，其实如果你仔细的看一下题目或者样例输入的话，应该不难发现输入格式的描述略有问题，有的行与输入描述是相反的。。。（如果已经改过来了就当我没说）&lt;/p&gt;
&lt;p&gt;其实可以这样看：输入是有15行的，你可以把这15行分成3组，每组5行，这样描述就对了，每一组的奇数行和偶数行按描述进行读入即可。&lt;/p&gt;
&lt;p&gt;读入符号之后，先看这个符号属于哪一个小九宫格（因为不同小九宫格的符号是不相关的），然后就要用到下面这个数组了:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;f[i][x][y]&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;它表示第i个小九宫格中第x个数和第y个数是否有大小关系。&lt;br/&gt;读入的时候如果是&quot;&amp;gt;&quot;或者&quot;v&quot;就在相应的位置保存1，如果是&quot;&amp;lt;&quot;或&quot;^&quot;就保存2。&lt;/p&gt;
&lt;p&gt;那么这样一来符号的问题就不是问题了，在选数的时候多加一个循环判断一下这个数周围的大小关系是否合法不就行了？&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;参考代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;55&quot;&gt;
&lt;pre class=&quot;brush:cpp;collapse:true;;gutter:true;&quot;&gt;
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
int a[10][10],h[10][10],l[10][10],g[10][10],m,n,c,f[10][10][10]; 
void dfs(int x,int y)
{
    if(x==9&amp;amp;&amp;amp;y==10) 
    {
       for(int i=1;i&amp;lt;=9;++i) 
       {
                for(int j=1;j&amp;lt;=9;++j) printf(&quot;%d &quot;,a[i][j]);
                cout&amp;lt;&amp;lt;endl;
       }
       return;
    }   
    if(y==10) x=x+1,y=1;
    for(int i=1;i&amp;lt;=9;++i)
    {   
        bool bl=0;
        int g1=((x-1)/3)*3,g2=(y-1)/3,g3=g1+g2;  
        if(g[g3][i]==1||h[x][i]==1||l[y][i]==1) continue;
        for(int j=1;j&amp;lt;=9;++j)
        {
            int ii=(x-1)%3*3+(y-1)%3+1;  
            if(f[g3][ii][j]==1) 
            {
                int xj=g3/3*3+(j-1)/3+1,yj=g3%3*3+(j-1)%3+1;  
                if(a[xj][yj]!=0)
                if(i&amp;lt;a[xj][yj]) 
                                {
                    bl=1; 
                                        break;
                }
            }
            if(f[g3][ii][j]==2) 
            {
                int xj=g3/3*3+(j-1)/3+1,yj=g3%3*3+(j-1)%3+1;
                if(a[xj][yj]!=0)
                if(i&amp;gt;a[xj][yj])
                                {
                    bl=1; 
                                        break;
                } 
            }     
        }
        if(bl==1) continue;
        g[g3][i]=1;h[x][i]=1;l[y][i]=1;
        a[x][y]=i;   
        dfs(x,y+1); 
        a[x][y]=0;   
        g[g3][i]=0;h[x][i]=0;l[y][i]=0;  
    }

}
int main()
{
    int ci=0;
    char s;
    for(int i=1;i&amp;lt;=3;++i)
    {
        for(int k=1;k&amp;lt;=5;++k)  
        {
            if(k%2==1)
            {
                for(int j=1;j&amp;lt;=6;++j)
                {
                    int q1=(i-1)*3,q2=(j-1)/2,q3=q1+q2; 
                    cin&amp;gt;&amp;gt;s;
                    if(s=='&amp;gt;')  
                    {
                        int qq=(k-1)/2*3+(j-1)%2+1; 
                        f[q3][qq][qq+1]=1;    
                        f[q3][qq+1][qq]=2;
                    }
                    else
                    {
                        int qq=(k-1)/2*3+(j-1)%2+1;
                        f[q3][qq][qq+1]=2;
                        f[q3][qq+1][qq]=1;
                    }
                }   
            }
            else
            {
                for(int j=1;j&amp;lt;=9;++j)
                {
                    int q1=(i-1)*3,q2=(j-1)/3,q3=q1+q2;
                    cin&amp;gt;&amp;gt;s;
                    if(s=='v')  
                    {
                        int qq=(k-1)/2*3+(j-1)%3+1;
                        f[q3][qq][qq+3]=1;
                        f[q3][qq+3][qq]=2;
                    } 
                    else
                    {
                        int qq=(k-1)/2*3+(j-1)%3+1;
                        f[q3][qq][qq+3]=2;
                        f[q3][qq+3][qq]=1;
                    }
                }   
            }
        }
    }
    dfs(1,1);
    return 0;
}
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 09 Nov 2018 15:46:00 +0000</pubDate>
<dc:creator>SongHL</dc:creator>
<og:description>Description 给一个n结点m条边的有向图D，可以这样构造图E：给D的每条边u-&gt;v，在E中建立一个点uv，然后对于D中的两条边u-&gt;v和v-&gt;w，在E中从uv向vw连一条有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songorz/p/9937744.html</dc:identifier>
</item>
<item>
<title>全景图转小行星视角投影原理详解 - 一棹烟波</title>
<link>http://www.cnblogs.com/riddick/p/9937729.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/9937729.html</guid>
<description>&lt;p&gt;全景图是2:1比例的图片，一般是多张图像拼接而成。全景图2:1的比例可以很方便的映射到球面，而球坐标可以很方便的实现各种有趣的投影。比如小行星，水晶球，局部透视投影等。&lt;/p&gt;
&lt;p&gt;今天来说说怎么将全景图投影到小行星视图：&lt;/p&gt;

&lt;p&gt;首先，要有一副2:1的全景图，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109225520995-1642097544.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;

&lt;p&gt;风景秀丽是不是。&lt;/p&gt;
&lt;p&gt;然后，将全景图按照经纬展开法重新贴到球面，图像的宽就是纬度0-2π，图像的高就是经度0-π。&lt;/p&gt;
&lt;p&gt;接下来，需要一种下面这样的投影。将一个球面上的坐标投影到平面上。投影中心在球心到球面之间。&lt;/p&gt;
&lt;p&gt;从百度百科上盗的图，各位将就着看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109230619668-770511698.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种投影方式中，下半球面会全部投影在平面图中的一个圆内，上半球面会全部投影到圆的外面，并且分布越来越稀疏。&lt;/p&gt;
&lt;p&gt;投影过程可以理解为：&lt;/p&gt;
&lt;p&gt;1. 首先建立球坐标系，将经纬度的全景图贴到球面上，这个过程我之前的一篇博客中鱼眼图转经纬图讲过，原理一样。只不过是逆过程。&lt;/p&gt;
&lt;p&gt;2. 设定投影中心点的坐标，然后连接投影中心点和球面上一点，得到一条直线。当然此时需要设置一个视场角FOV，即选择投影的视场角是多大。视场角越大，最后得到的小行星视图中间图像被挤压的越厉害。&lt;/p&gt;
&lt;p&gt;3. 建立投影平面，以上图为例，该投影平面与球面相切与南极点。计算该直线与该投影平面的交点，即可得到投影后的平面坐标。&lt;/p&gt;
&lt;p&gt;4. 上述三步均在球坐标系下完成，得到各个球面点的平面坐标后，根据具体想要得到的平面图像尺寸，将平面坐标转换为图像坐标。至此完成。&lt;/p&gt;
&lt;p&gt;上述是正向投影过程，如果采用反向投影，原理类似，不过倒过来从原全景图像素点取值即可。&lt;/p&gt;

&lt;p&gt;上述过程可以很方便用C++代码实现，读取图像的操作可以用OpenCV：&lt;/p&gt;
&lt;p&gt;投影后得到的小行星视图如下，FOV和投影中心位置都会影响小行星在图像中的大小：&lt;/p&gt;
&lt;p&gt;这个是投影点在北极点，FOV设置的120度&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109232608751-853445966.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;投影点在北极点，FOV=170度，则如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109232857418-445849828.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;投影点在北极点与球心的中点，FOV=120度，则如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109233026558-2003378149.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;同样道理，如果投影点在南极点，投影平面放在北极，则如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1138496/201811/1138496-20181109233746492-1199179591.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;p&gt;同理，如果在球体内随意移动投影点，投影得到的效果也会不同，可以实现不同视角的小行星。&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 15:40:00 +0000</pubDate>
<dc:creator>一棹烟波</dc:creator>
<og:description>全景图是2:1比例的图片，一般是多张图像拼接而成。全景图2:1的比例可以很方便的映射到球面，而球坐标可以很方便的实现各种有趣的投影。比如小行星，水晶球，局部透视投影等。 今天来说说怎么将全景图投影到小</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/9937729.html</dc:identifier>
</item>
<item>
<title>flask基础之请求处理核心机制(五) - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/9917239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/9917239.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;总结一下flask框架的请求处理流程。&lt;/p&gt;
&lt;h2 id=&quot;系列文章&quot;&gt;系列文章&lt;/h2&gt;
&lt;h2 id=&quot;wsgi协议&quot;&gt;WSGI协议&lt;/h2&gt;
&lt;p&gt;一般来说http服务器和框架需要进行解耦，http专门负责接受HTTP请求、解析HTTP请求、发送HTTP，响应请求等；而web框架负责处理请求的逻辑，和数据库的交互等等，那么它们之间需要约定一套接口使得http服务器能够调用web框架的处理逻辑，这个协议就是WSGI协议。&lt;/p&gt;
&lt;p&gt;WSGI协议要求http服务器接收到http请求后经过处理得到两个参数，一个是请求数据封装的字典environ，另一个是需要框架回调的方法start_response。&lt;/p&gt;
&lt;p&gt;在flask框架中，服务器对每个请求调用一次app的wsgi_app方法返回结果，而wsgi_app方法的执行过程就是请求的处理流程。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class Flask(object):
    def wsgi_app(self, environ, start_response):
        ctx = self.request_context(environ)
        ctx.push()
        error = None
        try:
            try:
                response = self.full_dispatch_request()
            except Exception as e:
                error = e
                response = self.handle_exception(e)
            except:
                error = sys.exc_info()[1]
                raise
            return response(environ, start_response)
        finally:
            if self.should_ignore_error(error):
                error = None
            ctx.auto_pop(error)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;第一步服务器启动&quot;&gt;第一步：服务器启动&lt;/h2&gt;
&lt;p&gt;服务器启动后，假设服务器是基于线程的，此时app对象被创建，加载了相关的初始化参数，这时代理对象如current_app、g、session、request等会被创建，但是它们目前并没有代理任何的对象，如果此时使用它们会报错，需要在第一次接收到请求后才会真正地代理上下文。那么服务器启动究竟干了什么事呢？&lt;/p&gt;
&lt;p&gt;详细请参考：&lt;a href=&quot;https://www.cnblogs.com/cwp-bg/p/9917203.html&quot;&gt;flask之app初始化&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二步接收请求创建上下文入栈&quot;&gt;第二步：接收请求，创建上下文，入栈&lt;/h2&gt;
&lt;p&gt;服务器收到一个http请求后，使用app上下文和请求数据创建一个线程，调用app的request_context(self, environ)方法，将解包后封装的http请求数据当做environ参数传入，返回一个RequestContext实例对象，每一个请求都有一个RequestContext实例对象，&lt;strong&gt;同时他们都拥有各自的app上下文，也就是说在本线程中的app应用是服务器初始化app的一个引，因此我们可以动态修改app的属性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将RequestContext对象push进_request_ctx_stack里面，_request_ctx_stack是一个栈对象，此时代理对象request指向栈顶的RequestContext对象的request属性，该request是一个Request对象，而session此时指向栈顶的RequestContext对象的session属性。&lt;/p&gt;
&lt;p&gt;判断_app_ctx_stack栈顶是否存在应用上下文对象AppContext，不存在就创建，同时将AppContext推送到_app_ctx_stack栈对象中，此时current_app指向栈顶AppContext对象的app属性，而g变量指向栈顶AppContext对象的g属性，本质上是一个_AppCtxGlobals对象，数据结构是一个字典。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应用上下文和请求上下文存放的栈对象&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;_request_ctx_stack = LocalStack()
_app_ctx_stack = LocalStack()&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;动态修改app的属性&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from flask import Flask

app = Flask(__name__)

@app.route('/test1')
def test1():
    &quot;&quot;&quot;
    动态添加一个视图函数
    &quot;&quot;&quot;
    @app.route('/test2')
    def test2():
        return 'test2'
    return 'OK'&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;应用上下文和请求上下文源码分析&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;class Flask(object):
    def app_context(self):
        return AppContext(self)
    def request_context(self, environ):
        return RequestContext(self, environ)

class AppContext(object):
    def __init__(self, app):
        self.app = app
        self.url_adapter = app.create_url_adapter(None)
        self.g = app.app_ctx_globals_class()
    def push(self):
        self._refcnt += 1
        if hasattr(sys, 'exc_clear'):
            sys.exc_clear()
        _app_ctx_stack.push(self) # 将自己推送到栈中
        appcontext_pushed.send(self.app)

class RequestContext(object):
    def __init__(self, app, environ, request=None):
        self.app = app
        if request is None:
            request = app.request_class(environ)
        self.request = request
        self.url_adapter = app.create_url_adapter(self.request)
        self.flashes = None
        self.session = None
    def push(self):
        pass&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;第三步请求分派&quot;&gt;第三步：请求分派&lt;/h2&gt;
&lt;p&gt;分发请求并执行处理逻辑的函数为full_dispatch_request，其返回一个Response对象。处理的过程为：&lt;/p&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;先执行app对象before_first_request_funcs列表中的所有方法，这是针对app的第一次请求需要的预处理方法，执行该列表中的所有方法是一个原子操作，被加了线程锁，如果不是第一次请求就跳过；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;然后执行app对象的url_value_preprocessors字典中对应蓝图的列表中的所有方法，对所有的URL进行预处理；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;执行app对象的before_request_funcs列表中的所有方法，其会按照加载的顺序链执行，并且如果中间有任何一个方法返回的结果不是None，那么执行中断，直接返回结果，不再执行视图函数。这是针对app所有的请求都会执行的方法，当然也可以通过蓝图来进行管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过request对象的url_rule(Rule)找到app中的url_map中对应的视图函数执行，返回一个元组的结果rv，就是我们平时写视图函数时返回的元组；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;调用make_response函数，以返回的结果rv作为参数构建一个Response对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;执行app对象中的after_request_funcs列表的所有方法，以构建的Response对象作为参数，每个方法必须都返回Response类型的对象，最后调用session保存本次的状态信息；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;第四步出栈&quot;&gt;第四步：出栈&lt;/h2&gt;
&lt;p&gt;先执行app对象的teardown_request_funcs列表中的所有的方法，其方法和after_request_funcs中的一样，只不过是在出栈前才触发，&lt;strong&gt;这意味着即使处理逻辑的部分出错，这里方法也会执行，&lt;/strong&gt;然后从_request_ctx_stack中弹出RequestContext请求上下文，然后执行app对象中的teardown_appcontext_funcs列表的所有方法，最后从_app_ctx_stack中弹出AppContext应用上下文。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class AppContext:
    def pop(self, exc=_sentinel):
        app_ctx = self._implicit_app_ctx_stack.pop() 

        try:
            clear_request = False
            if not self._implicit_app_ctx_stack:
                self.preserved = False
                self._preserved_exc = None
                if exc is _sentinel:
                    exc = sys.exc_info()[1]
                self.app.do_teardown_request(exc) # 调用请求钩子
                if hasattr(sys, 'exc_clear'):
                    sys.exc_clear()

                request_close = getattr(self.request, 'close', None)
                if request_close is not None:
                    request_close()
                clear_request = True
        finally:
            rv = _request_ctx_stack.pop() # 弹出请求上下文
            if clear_request:
                rv.request.environ['werkzeug.request'] = None
            if app_ctx is not None:
                app_ctx.pop(exc) # 弹出应用上下文&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;flask请求处理最简代码模型&quot;&gt;flask请求处理最简代码模型&lt;/h2&gt;
&lt;p&gt;假设服务器使用的是多进程模式。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from multiprocessing import Process, Pool
class Flask(object):
    def __call__(self, environ, start_response):
        &quot;&quot;&quot;定义app对请求的处理过程&quot;&quot;&quot;
        pass

def listen_port():
    &quot;&quot;&quot;假设这是端口监听并解析http请求的方法&quot;&quot;&quot;
    pass

def run_web():
    &quot;&quot;&quot;假设这是程序主循环&quot;&quot;&quot;
    app = Flask() # 创建一个app，这是app初始化做的
    pool = Pool(10)
    while True:
        # 获取一个http请求的数据
        environ, start_response = listen_port()
        # 调用app处理请求
        pool.apply_async(app, args=(environ, start_response))

if __name__ == '__main__':
    run_web()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;无论是gunicorn服务器还是uwsgi服务器，其启动后加载了app对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;当收到http请求后，按照http协议解析数据，将数据打包成一个字典，将其和响应函数一起作为参数调用app对象的wsgi_app方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;wsgi_app方法按照接收请求，创建上下文，入栈，请求分发，出栈的步骤处理完业务逻辑返回响应数据；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
<pubDate>Fri, 09 Nov 2018 15:37:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<og:description>前言 总结一下flask框架的请求处理流程。 系列文章</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/9917239.html</dc:identifier>
</item>
<item>
<title>总结：JavaScript异步、事件循环与消息队列、微任务与宏任务 - 正伟</title>
<link>http://www.cnblogs.com/ZavierTang/p/ZavierTang.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ZavierTang/p/ZavierTang.html</guid>
<description>&lt;blockquote readability=&quot;5.9253112033195&quot;&gt;
&lt;p&gt;本人正在努力学习前端，内容仅供参考。由于各种原因（不喜欢博客园的UI），大家可以移步我的github阅读体验更佳：&lt;a href=&quot;https://github.com/ZavierTang/zavier-notes/blob/master/JavaScript/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%8F%E4%BB%BB%E5%8A%A1.md&quot;&gt;传送门&lt;/a&gt;，喜欢就点个star咯，或者我的博客：&lt;a href=&quot;https://blog.tangzhengwei.me/&quot; class=&quot;uri&quot;&gt;https://blog.tangzhengwei.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;3&quot;&gt;
&lt;p&gt;掘金：&lt;a href=&quot;https://juejin.im/user/5b0a64d8f265da0dc82324da&quot;&gt;传送门&lt;/a&gt;，segmentfault：&lt;a href=&quot;https://segmentfault.com/blog/zaviertang&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Philip Roberts&lt;/em&gt; 在演讲 &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;great talk at JSConf on the event loop&lt;/a&gt; 中说：要是用一句话来形容 JavaScript，我可能会这样：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;“JavaScript 是单线程、异步、非阻塞、解释型脚本语言。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;单线程 ?&lt;/li&gt;
&lt;li&gt;异步 ? ?&lt;/li&gt;
&lt;li&gt;非阻塞 ? ? ?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后，这又牵扯到了事件循环、消息队列，还有微任务、宏任务这些。&lt;/p&gt;
&lt;p&gt;作为一个初学者，对这些了解甚少。&lt;/p&gt;
&lt;p&gt;这几天翻阅了不少资料，似乎了解到了一二，是时候总结一下了，它们困扰了我好一段时间，就像学高数那会儿自己去理解一个概念一样。&lt;/p&gt;
&lt;h2 id=&quot;单线程与多线程&quot;&gt;单线程与多线程&lt;/h2&gt;
&lt;p&gt;单线程语言：JavaScript 的设计就是为了处理浏览器网页的交互（DOM操作的处理、UI动画等），决定了它是一门单线程语言。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果有多个线程，它们同时在操作 DOM，那网页将会一团糟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript 是单线程的，那么处理任务是一件接着一件处理，从上往下顺序执行：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('script start')
console.log('do something...')
console.log('script end')

// script start
// do something...
// script end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码会依次打印: &quot;script start&quot; &amp;gt;&amp;gt; &quot;do something...&quot; &amp;gt;&amp;gt; &quot;script end&quot;&lt;/p&gt;
&lt;p&gt;那如果一个任务的处理耗时（或者是等待）很久的话，如：网络请求、定时器、等待鼠标点击等，后面的任务也就会被阻塞，也就是说会阻塞所有的用户交互（按钮、滚动条等），会带来极不友好的体验。&lt;/p&gt;
&lt;p&gt;但是：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('script start')

console.log('do something...')

setTimeout(() =&amp;gt; {
  console.log('timer over')
}, 1000)

// 点击页面
console.log('click page')

console.log('script end')

// script start
// do something...
// click page
// script end
// timer over&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&quot;timer over&quot;&lt;/code&gt; 在 &lt;code&gt;&quot;script end&quot;&lt;/code&gt; 后再打印，也就是说计时器并没有阻塞后面的代码。那，发生了什么？&lt;/p&gt;
&lt;p&gt;其实，JavaScript 单线程指的是浏览器中负责解释和执行 JavaScript 代码的只有一个线程，即为&lt;strong&gt;JS引擎线程&lt;/strong&gt;，但是浏览器的渲染进程是提供多个线程的，如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JS引擎线程&lt;/li&gt;
&lt;li&gt;事件触发线程&lt;/li&gt;
&lt;li&gt;定时触发器线程&lt;/li&gt;
&lt;li&gt;异步http请求线程&lt;/li&gt;
&lt;li&gt;GUI渲染线程&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;4.0909090909091&quot;&gt;
&lt;p&gt;浏览器渲染进程参考&lt;a href=&quot;https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-6&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当遇到计时器、DOM事件监听或者是网络请求的任务时，JS引擎会将它们直接交给 webapi，也就是浏览器提供的相应线程（如定时器线程为setTimeout计时、异步http请求线程处理网络请求）去处理，而JS引擎线程继续后面的其他任务，这样便实现了 &lt;strong&gt;异步非阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;定时器触发线程也只是为 &lt;code&gt;setTimeout(..., 1000)&lt;/code&gt; 定时而已，时间一到，还会把它对应的回调函数(callback)交给 &lt;strong&gt;消息队列&lt;/strong&gt; 去维护，JS引擎线程会在适当的时候去消息队列取出消息并执行。&lt;/p&gt;
&lt;p&gt;JS引擎线程什么时候去处理呢？消息队列又是什么？&lt;/p&gt;
&lt;p&gt;这里，JavaScript 通过 &lt;strong&gt;事件循环&lt;/strong&gt; &lt;strong&gt;event loop&lt;/strong&gt; 的机制来解决这个问题。&lt;/p&gt;
&lt;p&gt;这个放在后面再讨论吧！&lt;/p&gt;
&lt;h2 id=&quot;同步与异步&quot;&gt;同步与异步&lt;/h2&gt;
&lt;p&gt;上面说到了异步，JavaScript 中有同步代码与异步代码。&lt;/p&gt;
&lt;p&gt;下面便是同步：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('hello 0')

console.log('hello 1')

console.log('hello 2')

// hello 0
// hello 1
// hello 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它们会依次执行，执行完了后便会返回结果（打印结果）。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;setTimeout(() =&amp;gt; {
  console.log('hello 0')
}, 1000)

console.log('hello 1')

// hello 1
// hello 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的 &lt;code&gt;setTimeout&lt;/code&gt; 函数便不会立刻返回结果，而是发起了一个异步，setTimeout 便是异步的发起函数或者是注册函数，() =&amp;gt; {...} 便是异步的回调函数。&lt;/p&gt;
&lt;p&gt;这里，JS引擎线程只会关心异步的发起函数是谁、回调函数是什么？并将异步交给 webapi 去处理，然后继续执行其他任务。&lt;/p&gt;
&lt;p&gt;异步一般是以下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;网络请求&lt;/li&gt;
&lt;li&gt;计时器&lt;/li&gt;
&lt;li&gt;DOM时间监听&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;事件循环与消息队列&quot;&gt;事件循环与消息队列&lt;/h2&gt;
&lt;p&gt;回到事件循环 event loop&lt;/p&gt;
&lt;p&gt;其实 &lt;strong&gt;事件循环&lt;/strong&gt; 机制和 &lt;strong&gt;消息队列&lt;/strong&gt; 的维护是由事件触发线程控制的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件触发线程&lt;/strong&gt; 同样是浏览器渲染引擎提供的，它会维护一个 &lt;strong&gt;消息队列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;JS引擎线程遇到异步（DOM事件监听、网络请求、setTimeout计时器等...），会交给相应的线程单独去维护异步任务，等待某个时机（计时器结束、网络请求成功、用户点击DOM），然后由 &lt;strong&gt;事件触发线程&lt;/strong&gt; 将异步对应的 &lt;strong&gt;回调函数&lt;/strong&gt; 加入到消息队列中，消息队列中的回调函数等待被执行。&lt;/p&gt;
&lt;p&gt;同时，JS引擎线程会维护一个 &lt;strong&gt;执行栈&lt;/strong&gt;，同步代码会依次加入执行栈然后执行，结束会退出执行栈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/ZavierTang/static/images/stack.png&quot; alt=&quot;Stack&amp;amp;Queue&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果执行栈里的任务执行完成，即执行栈为空的时候（即JS引擎线程空闲），事件触发线程才会从消息队列取出一个任务（即异步的回调函数）放入执行栈中执行。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;消息队列是类似队列的数据结构，遵循先入先出(FIFO)的规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行完了后，执行栈再次为空，事件触发线程会重复上一步操作，再取出一个消息队列中的任务，这种机制就被称为事件循环（event loop）机制。&lt;/p&gt;
&lt;p&gt;还是上面的代码：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('script start')

setTimeout(() =&amp;gt; {
  console.log('timer over')
}, 1000)

// 点击页面
console.log('click page')

console.log('script end')

// script start
// click page
// script end
// timer over&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行过程：&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li&gt;主代码块（script）依次加入执行栈，依次执行，主代码块为：
&lt;ul&gt;&lt;li&gt;console.log('script start')&lt;/li&gt;
&lt;li&gt;setTimeout()&lt;/li&gt;
&lt;li&gt;console.log('click page')&lt;/li&gt;
&lt;li&gt;console.log('script end')&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;console.log() 为同步代码，JS引擎线程处理，打印 &quot;script start&quot;，出栈；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;遇到异步函数 &lt;code&gt;setTimeout&lt;/code&gt;，交给定时器触发线程（异步触发函数为：&lt;code&gt;setTimeout&lt;/code&gt;，回调函数为：&lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt;），JS引擎线程继续，出栈；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;console.log() 为同步代码，JS引擎线程处理，打印 &quot;click page&quot;，出栈；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;console.log() 为同步代码，JS引擎线程处理，打印 &quot;script end&quot;，出栈；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;执行栈为空，也就是JS引擎线程空闲，这时从消息队列中取出（如果有的话）一条任务（callback）加入执行栈，并执行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复第6步。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;（此步的位置不确定）某个时刻（1000ms后），定时器触发线程通知事件触发线程，事件触发线程将回调函数 &lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt; 加入消息队列队尾，等待JS引擎线程执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;可以看出，setTimeout异步函数对应的回调函数( &lt;code&gt;() =&amp;gt; {}&lt;/code&gt; )会在执行栈为空，主代码块执行完了后才会执行。&lt;/p&gt;
&lt;p&gt;零延时：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('script start')

setTimeout(() =&amp;gt; {
  console.log('timer 1 over')
}, 1000)

setTimeout(() =&amp;gt; {
  console.log('timer 2 over')
}, 0)

console.log('script end')

// script start
// script end
// timer 2 over
// timer 1 over&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里会先打印 &quot;timer 2 over&quot;，然后打印 &quot;timer 1 over&quot;，尽管 timer 1 先被定时器触发线程处理，但是 timer 2 的callback会先加入消息队列。&lt;/p&gt;
&lt;p&gt;上面，timer 2 的延时为 0ms，HTML5标准规定 setTimeout 第二个参数不得小于4（不同浏览器最小值会不一样），不足会自动增加，所以 &quot;timer 2 over&quot; 还是会在 &quot;script end&quot; 之后。&lt;/p&gt;
&lt;p&gt;就算延时为 0ms，只是 timer 2 的回调函数会立即加入消息队列而已，回调的执行还是得等执行栈为空（JS引擎线程空闲）时执行。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;其实 setTimeout 的第二个参数并不能代表回调执行的准确的延时事件，它只能表示回调执行的最小延时时间，因为回调函数进入消息队列后需要等待执行栈中的同步任务执行完成，执行栈为空时才会被执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;宏任务与微任务&quot;&gt;宏任务与微任务&lt;/h2&gt;
&lt;p&gt;以上机制在ES5的情况下够用了，但是ES6会有一些问题。&lt;/p&gt;
&lt;p&gt;Promise同样是用来处理异步的：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;console.log('script start')

setTimeout(function() {
    console.log('timer over')
}, 0)

Promise.resolve().then(function() {
    console.log('promise1')
}).then(function() {
    console.log('promise2')
})

console.log('script end')

// script start
// script end
// promise1
// promise2
// timer over&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;WTF?? &quot;promise 1&quot; &quot;promise 2&quot; 在 &quot;timer over&quot; 之前打印了？&lt;/p&gt;
&lt;p&gt;这里有一个新概念：&lt;code&gt;macrotask&lt;/code&gt;（宏任务） 和 &lt;code&gt;microtask&lt;/code&gt;（微任务）。&lt;/p&gt;
&lt;p&gt;所有任务分为 &lt;code&gt;macrotask&lt;/code&gt; 和 &lt;code&gt;microtask&lt;/code&gt;:&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;macrotask：主代码块、setTimeout、setInterval等（可以看到，事件队列中的每一个事件都是一个 macrotask，现在称之为宏任务队列）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;microtask：Promise、process.nextTick等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JS引擎线程首先执行主代码块。&lt;/p&gt;
&lt;p&gt;每次执行栈执行的代码就是一个宏任务，包括任务队列(宏任务队列)中的，因为执行栈中的宏任务执行完会去取任务队列（宏任务队列）中的任务加入执行栈中，即同样是事件循环的机制。&lt;/p&gt;
&lt;p&gt;在执行宏任务时遇到Promise等，会创建微任务（.then()里面的回调），并加入到微任务队列队尾。&lt;/p&gt;
&lt;p&gt;microtask必然是在某个宏任务执行的时候创建的，而在下一个宏任务开始之前，浏览器会对页面重新渲染(&lt;code&gt;task&lt;/code&gt; &amp;gt;&amp;gt; &lt;code&gt;渲染&lt;/code&gt; &amp;gt;&amp;gt; &lt;code&gt;下一个task&lt;/code&gt;(从任务队列中取一个))。同时，在上一个宏任务执行完成后，渲染页面之前，会执行当前微任务队列中的所有微任务。&lt;/p&gt;
&lt;p&gt;也就是说，在某一个macrotask执行完后，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）。&lt;/p&gt;
&lt;p&gt;这样就可以解释 &quot;promise 1&quot; &quot;promise 2&quot; 在 &quot;timer over&quot; 之前打印了。&quot;promise 1&quot; &quot;promise 2&quot; 做为微任务加入到微任务队列中，而 &quot;timer over&quot; 做为宏任务加入到宏任务队列中，它们同时在等待被执行，但是微任务队列中的所有微任务都会在开始下一个宏任务之前都被执行完。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在node环境下，process.nextTick的优先级高于Promise，也就是说：在宏任务结束后会先执行微任务队列中的nextTickQueue，然后才会执行微任务中的Promise。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行机制：&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行一个宏任务（栈中没有就从事件队列中获取）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行过程中如果遇到微任务，就将它添加到微任务的任务队列中&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;渲染完毕后，JS引擎线程继续，开始下一个宏任务（从宏任务队列中获取）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;JavaScript 是单线程语言，决定于它的设计最初是用来处理浏览器网页的交互。浏览器负责解释和执行 JavaScript 的线程只有一个（所有说是单线程），即JS引擎线程，但是浏览器同样提供其他线程，如：事件触发线程、定时器触发线程等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;异步一般是指：
&lt;ul&gt;&lt;li&gt;网络请求&lt;/li&gt;
&lt;li&gt;计时器&lt;/li&gt;
&lt;li&gt;DOM事件监听&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;事件循环机制：
&lt;ul&gt;&lt;li&gt;JS引擎线程会维护一个执行栈，同步代码会依次加入到执行栈中依次执行并出栈。&lt;/li&gt;
&lt;li&gt;JS引擎线程遇到异步函数，会将异步函数交给相应的Webapi，而继续执行后面的任务。&lt;/li&gt;
&lt;li&gt;Webapi会在条件满足的时候，将异步对应的回调加入到消息队列中，等待执行。&lt;/li&gt;
&lt;li&gt;执行栈为空时，JS引擎线程会去取消息队列中的回调函数（如果有的话），并加入到执行栈中执行。&lt;/li&gt;
&lt;li&gt;完成后出栈，执行栈再次为空，重复上面的操作，这就是事件循环(event loop)机制。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ZavierTang/zavier-notes/blob/master/JavaScript/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%8F%E4%BB%BB%E5%8A%A1.md&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 15:20:00 +0000</pubDate>
<dc:creator>正伟</dc:creator>
<og:description>关于JavaScript异步、事件循环与消息队、微任务与宏任务的总结</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ZavierTang/p/ZavierTang.html</dc:identifier>
</item>
<item>
<title>python-函数基础 - 程序灬波</title>
<link>http://www.cnblogs.com/chengxubo/p/9937607.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengxubo/p/9937607.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;函数简介&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;函数使用&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;定义函数格式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; 函数名([参数列表]):
    函数体&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;[]表示可选，参数可以有，也可以没有，也可以是多个。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数名：&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数调用：&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;函数分类(参数与返回值)&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无参无返回值&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; print_hello():
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print_hello()&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 带参数无返回值&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; print_n_hello(n):
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(n):
         &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
   
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print_n_hello(5)&lt;/span&gt;
&lt;span&gt;​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 带参有返回值&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add(m, n):
    c &lt;/span&gt;= m +&lt;span&gt; n
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用return返回需要返回的值，不返回默认为None&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; c   
​
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(add(3, 5))
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;分类的标准是按照有无参数，以及有无返回值。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;函数参数&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;3.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;形参：形式参数，就是写在函数定义出的参数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;实参：实际参数，就是在函数调用时传递的参数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;位置参数：也叫必传参数，没有默认值的参数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;默认参数：定义时有默认值，调用时可以不传，必须写在最后&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;关键字参数：在函数调用时指定参数名字，参数的位置就无所谓。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;6.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;可变长度参数：函数调用时可以传递比定义处更多的参数，多出来的参数会保存在args和kwargs中&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; var_len_args(a, b, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goudan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, *args, **&lt;span&gt;kwargs):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a, b)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是一个元组，保存多传的位置参数&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(args)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是一个字典，保存多传的关键字参数&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(kwargs)
​
var_len_args(&lt;/span&gt;1, 2, 3, 4, age=10)
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;3&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;*的使用：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; show(a, b):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a, b)
​
lt &lt;/span&gt;= [1, 2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 需要从列表根据下表获取元素，然后作为参数传递&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; show(lt[0], lt[1])&lt;/span&gt;
show(*&lt;span&gt;lt)
​
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; show2(aa=11, bb=22&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(aa, bb)
   
d &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 123, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 456&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; show2(aa=d['aa'], bb=d['bb'])&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 上下等价&lt;/span&gt;
show2(**d)
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;函数进阶&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数的定义位置是随意的？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数的名字可以相同吗？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数内容能否再定义函数？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;变量的作用域&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;块级作用域&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;&lt;span&gt; True:
    name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ergou&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 能够在块的外部使用，说明没有块级作用域&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(name)
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;局部作用域&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
    a &lt;/span&gt;= 10&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不能再函数外部使用，此处会报错&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(a)
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;全局作用域&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
num = 10&lt;span&gt;
​
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; show():
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 声明使用的时外部的同名变量&lt;/span&gt;
    &lt;span&gt;global&lt;/span&gt;&lt;span&gt; num
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 只能使用，不能修改，若想修改协议进行全局声明&lt;/span&gt;
    num = 20
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(num)
​
show()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(num)
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;ol class=&quot;ol-list&quot; start=&quot;&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;函数内部可以使用外部变量，但是不能修改&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;若修改需要使用&lt;span&gt;&lt;code&gt;global&lt;/code&gt;&lt;span&gt;进行全局声明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;当函数内部与外部出现同名变量，默认使用的时内部变量&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;nonlocal使用&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wai():
    n &lt;/span&gt;= 10
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; nei():
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 声明使用非本地变量，外部函数的局部变量&lt;/span&gt;
&lt;span&gt;        nonlocal n
        n &lt;/span&gt;= 20
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
    nei()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
​
wai()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;递归函数(了解)&lt;/span&gt;&lt;/h3&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;常用函数&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;2&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;内置函数(无需导入)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;：打印，输出
input：输入
abs：求绝对值
type：获取变量的类型
chr：将ASCII数值转换为字符
ord：将字符转换为对应的ASCII
id：获取变量地址
len：统计元素个数
range：产生连续整数的可迭代对象
enumerate：枚举可迭代对象
​
强制类型转换：
int
float
str
list
tuple
set
dict
​
max：求多个参数的最大值，或可迭代对象中的最大元素
min：最小值
sum：求和，可迭代对象元素求和
pow：求幂，pow(&lt;/span&gt;2, 3)等价于2 ** 3&lt;span&gt;
round：四舍五入，可以指定保留位数
​
hex：16进制
oct：8进制
bin：2进制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;3.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;模块函数(需要导入)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;time：
    sleep：休眠指定的秒数，可以是小数
math：
    e：自然对数
    pi：圆周率
    ceil：向上取整
    floor：向下取整
    sqrt：开方(请平方根)
    degrees：弧度转换为度
    radians：度转换为弧度
sys：
    argv：运行程序时所有的命令行参数列表，第一个是程序文件名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;md-fences md-end-block ty-contain-cm modeLoaded&quot;&gt;
&lt;span&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;&lt;br/&gt;&lt;span&gt;&lt;span class=&quot;cm-tab&quot;&gt;    练习：完成一个计算器，支持加、减、乘、除运算&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;练习：&lt;/span&gt;&lt;/h3&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;2&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;前面练习全部以函数形式进行封装&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;终端计算器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;删除列表中的重复元素&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;统计一个字符串中字母、数字及其他字符的个数，返回一个元组即可&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;返回一个列表中第二大的数&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;完整列表的排序函数(sort)，支持逆序&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-0.5&quot;&gt;
&lt;p class=&quot;md-end-block&quot;&gt;&lt;span&gt;号码归属地查询：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;5582|1860101|010|北京市|北京联通GSM卡
5583|1860100|010|北京市|北京联通GSM卡
5584|1368141|010|北京市|北京移动神州行卡
5585|1860111|010|北京市|北京联通GSM卡
5586|1358198|010|北京市|北京移动动感地带卡
5587|1361139|010|北京市|北京移动预付费卡
5588|1361138|010|北京市|北京移动神州行卡
5591|1360110|010|北京市|北京移动全球通卡
5748|1364110|010|北京市|北京移动神州行卡
10186|1581584|020|广东省广州市|广东移动全球通卡
15046|1391897|021|上海市|上海移动全球通卡
17250|1502207|022|天津市|天津移动全球通卡
21137|1345272|023|重庆市万州|重庆移动大众卡
22700|1347812|024|辽宁省沈阳市|辽宁移动大众卡
24256|1377065|025|江苏省南京市|江苏移动全球通卡
26360|1898606|027|湖北省武汉市|湖北电信CDMA卡
28709|1860802|028|四川省成都市|四川联通GSM卡
30641|1552961|029|陕西省西安市|陕西联通GSM卡
31700|1563007|0310|河北省邯郸市|河北联通GSM卡
33360|1583396|0311|河北省石家庄市|河北移动全球通卡
34825|1508122|0312|河北省保定市|河北移动全球通卡
35363|1551235|0313|河北省张家口|河北联通GSM卡
37700|1331326|0316|河北省廊坊市|河北电信CDMA卡
43500|1350358|0358|山西省吕梁市|山西移动全球通卡
43908|1553625|0359|山西省运城市|山西联通GSM卡
44521|1335360|0370|河南省商丘市|河南电信CDMA卡
50078|1509369|0378|河南省开封市|河南移动全球通卡
53603|1583981|0398|河南省三门峡|河南移动全球通卡
53916|1335897|0410|辽宁省铁岭市|辽宁电信CDMA卡
55248|1554254|0411|辽宁省大连市|辽宁联通GSM卡
58618|1374272|0427|辽宁省盘锦市|辽宁移动全球通卡
58932|1554183|0429|辽宁省葫芦岛|辽宁联通GSM卡
60268|1340475|0431|吉林省长春市|吉林移动大众卡&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
​&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 09 Nov 2018 14:58:00 +0000</pubDate>
<dc:creator>程序灬波</dc:creator>
<og:description>函数基础 函数简介 定义：就是具有特定功能的一段代码 优点： 解决代码的重复书写 可以将功能的实现着和使用者分开，提高开发效率 分类： 库函数：print、input、abs等 自定义：用户自己封装的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengxubo/p/9937607.html</dc:identifier>
</item>
<item>
<title>Windows下使用Rtools编译R语言包 - 静若清池</title>
<link>http://www.cnblogs.com/liugh/p/9937489.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liugh/p/9937489.html</guid>
<description>&lt;p&gt;    使用devtools安装github中的R源代码时，经常会出各种错误，索性搜了一下怎么在Windows下直接打包，网上的资料也是参差不齐，以下是自己验证通过的。&lt;/p&gt;
&lt;p&gt;一、下载Rtools&lt;/p&gt;
&lt;p&gt;   下载地址：&lt;a href=&quot;https://cran.r-project.org/bin/windows/Rtools/&quot; target=&quot;_blank&quot;&gt;https://cran.r-project.org/bin/windows/Rtools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109213004905-633481977.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     根据自己安装的R版本，下载兼容的Rtools即可，我下载的是&lt;span&gt;Rtools35.exe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;二、安装Rtools&lt;/p&gt;
&lt;p&gt;     Windows下的安装都是傻瓜式的，一步步点确定即可，有两个地方需要注意：&lt;/p&gt;
&lt;p&gt;    2.1 安装路径&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109213321354-30827021.png&quot; alt=&quot;&quot; width=&quot;436&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    第一次安装的时候，没有使用这个默认路径（C:\Rtools），选择了其他的路径，结果在后面安装R包时，报找不到&quot;c:/Rtools/mingw_32/bin/g++&quot;的异常。&lt;/p&gt;
&lt;p&gt;    卸载Rtools后，重新安装时，就用这个默认路径了，后面就OK了。&lt;/p&gt;
&lt;p&gt;   2.2 设置环境变量&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109213753146-1676594695.png&quot; alt=&quot;&quot; width=&quot;442&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    选中上面的“Add rtools to system PATH”，就省了自己在Windows中设置环境变量了。 &lt;/p&gt;
&lt;p&gt;三、编译R语言代码&lt;/p&gt;
&lt;p&gt;    以编译Twitter的&lt;span&gt;BreakoutDetection&lt;/span&gt;为例（https://github.com/twitter/BreakoutDetection），将源代码下载到本地，放到R语言SDK的bin目录下（也可以放到其他目录，只是使用命令时加上路径即可）：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109215256111-1866432537.png&quot; alt=&quot;&quot; width=&quot;304&quot; height=&quot;437&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    通过cmd命令，切换到上述目录，执行如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Rcmd build BreakoutDetection-1.0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    输出信息为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;* checking for file 'BreakoutDetection-1.0.1/DESCRIPTION' ... OK
* preparing 'BreakoutDetection':
* checking DESCRIPTION meta-information ... OK
* cleaning src
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
* looking to see if a 'data/datalist' file should be added
&lt;/span&gt;* building &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BreakoutDetection_1.0.1.tar.gz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   会发现在本地生成了一个&lt;span&gt;BreakoutDetection_1.0.1.tar.gz，这就是我们要安装的包，但不是传说中的zip包，是典型的Linux下的.tar.gz包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;四、安装R语言代码包&lt;/p&gt;
&lt;p&gt;    打开R语言SDK的RGui，选择“Packages”--&amp;gt;&quot;Install package(s) from local files&quot;，如下所示：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109220052663-37025031.png&quot; alt=&quot;&quot; width=&quot;445&quot; height=&quot;186&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  浏览选择前一步骤生成的包（BreakoutDetection_1.0.1.tar.gz），如下所示：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109220341536-1197156458.png&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;463&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    安装完后，会在library下发现安装好的包，通过library(BreakoutDetection)命令，即可使用该包中的功能了。&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109220658452-219159648.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;五、Rcmd的一些命令参数&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201811/380081-20181109221325717-2033147693.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;459&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Nov 2018 14:17:00 +0000</pubDate>
<dc:creator>静若清池</dc:creator>
<og:description>使用devtools安装github中的R源代码时，经常会出各种错误，索性搜了一下怎么在Windows下直接打包，网上的资料也是参差不齐，以下是自己验证通过的。 一、下载Rtools 下载地址：htt</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liugh/p/9937489.html</dc:identifier>
</item>
</channel>
</rss>