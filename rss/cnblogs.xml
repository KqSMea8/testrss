<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>2018/3/2晚11点30分写的程序(C++) - 荒野之狼</title>
<link>http://www.cnblogs.com/huangyezhilang/p/8495497.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangyezhilang/p/8495497.html</guid>
<description>&lt;p&gt;程序目标：输入一个字符串，竖向输出该字符串。使用string和动态分配内存机制。代码如下：&lt;/p&gt;
&lt;p&gt;#include&amp;lt;iostream&amp;gt;&lt;br/&gt;#include &quot;stdafx.h&quot;&lt;br/&gt;#include&amp;lt;cstring&amp;gt;&lt;br/&gt;int main()&lt;br/&gt;{&lt;br/&gt;using namespace std;&lt;br/&gt;string s= cin.getline;&lt;br/&gt;char * a = new char[sizeof(s)];&lt;br/&gt;for (int m = 0;m &amp;lt; sizeof(s);m++)&lt;br/&gt;a[m] = s[m];&lt;br/&gt;for (int n = 0;n &amp;lt; sizeof(s);n++)&lt;br/&gt;cout &amp;lt;&amp;lt; a[n] &amp;lt;&amp;lt; endl;&lt;br/&gt;delete[] a;&lt;br/&gt;cin.get();&lt;br/&gt;cin.get();&lt;br/&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;编译器：Visual Studio 2015 &lt;/p&gt;
&lt;p&gt;显示编译错误，但是不知道怎么修改。先记录在这。希望大神不吝赐教。&lt;/p&gt;
&lt;p&gt;错误信息：&lt;/p&gt;
&lt;p&gt;严重性 代码 说明 项目 文件 行 禁止显示状态&lt;br/&gt;错误 C2146 语法错误: 缺少“;”(在标识符“s”的前面) MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2228 “.getline”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 11&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 12&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 13&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 14&lt;br/&gt;错误 C2065 “cout”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 15&lt;br/&gt;错误 C2065 “endl”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 15&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 17&lt;br/&gt;错误 C2228 “.get”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 17&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 18&lt;br/&gt;错误 C2228 “.get”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 18&lt;/p&gt;
&lt;p&gt;####希望用一个错误来开始我的博客园之旅，只有不停的纠错，才能提高####&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 15:43:00 +0000</pubDate>
<dc:creator>荒野之狼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangyezhilang/p/8495497.html</dc:identifier>
</item>
<item>
<title>nodejs的基础概念 - 萌新啊萌新是我</title>
<link>http://www.cnblogs.com/lilinzhiyu/p/8494264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lilinzhiyu/p/8494264.html</guid>
<description>&lt;hr/&gt;

&lt;p&gt;类似于控制台，可以输入命令，并接受系统的响应。&lt;/p&gt;
&lt;p&gt;REPL 的功能：&lt;/p&gt;
&lt;p&gt;　　1.读取：读取用户输入，解析输入的 js 数据结构，并存储在内存中。&lt;/p&gt;
&lt;p&gt;　　2.执行：执行输入的数据结构。&lt;/p&gt;
&lt;p&gt;　　3.打印：输出结果。&lt;/p&gt;
&lt;p&gt;　　4.循环：可以循环1、2、3操作指导ctrl+c两次退出。&lt;/p&gt;
&lt;p&gt;开启 Node 终端：node 即可开启。&lt;/p&gt;
&lt;p&gt;运算符：+、-、*、/，还支持括号改变优先级。&lt;/p&gt;
&lt;p&gt;变量定义：使用var来定义变量。常用的输出 API：console.log()。&lt;/p&gt;
&lt;p&gt;多行表达式：这里指的是循环，与在 js 中做的循环是一致的。每输出一行回车就可以，node 会自动检测是否为连续多行表达式。&lt;/p&gt;
&lt;p&gt;下划线_变量：可以使用下划线变量来获取上一个表达式的运算结果。&lt;/p&gt;
&lt;p&gt;REPL 命令：&lt;/p&gt;
&lt;p&gt;　　Ctrl+c 退出当前终端。&lt;/p&gt;
&lt;p&gt;　　Ctrl+c 连续两次，退出Node REPL&lt;/p&gt;
&lt;p&gt;　　Ctrl+d 退出 Node REPL&lt;/p&gt;
&lt;p&gt;　　向上/向下键-查看输入的历史命令。&lt;/p&gt;
&lt;p&gt;　　tab 键 列出当前命令&lt;/p&gt;
&lt;p&gt;　　.help 列出使用命令&lt;/p&gt;
&lt;p&gt;　　.break 退出多行表达式&lt;/p&gt;
&lt;p&gt;　　.clear 退出多行表达式&lt;/p&gt;
&lt;p&gt;　　.save filename 保存当前的 Node REPL 会话到指定文件。&lt;/p&gt;
&lt;p&gt;　　.load filename 载入当前 Node REPL 会话的文件内容。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js异步编程的直接体现就是回调。&lt;/p&gt;
&lt;p&gt;异步编程依托于回调来实现，但是不能说使用回调就是异步化。&lt;/p&gt;
&lt;p&gt;回调函数在完成任务后就会调用，Node使用了大量的回调函数，Node所有的API都支持回调函数。&lt;/p&gt;
&lt;p&gt;注：阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们需要写在回调函数内。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js是单进程单线程应用，但是通过事件和回调支持并发， 所以性能很高。&lt;/p&gt;
&lt;p&gt;Node.js的每一个API都是异步的（这里个人认为表达的意思应该是每一个API都是支持回调。参考第三部分），并作为一个独立线程运行，使用异步函数调用，并处理并发。&lt;/p&gt;
&lt;p&gt;Node.js基本上所有的事件机制都是用设计模式中的观察者模式实现的。&lt;/p&gt;
&lt;p&gt;Node.js单线程类似进入一个while(true)的事件循环，直到没有事件,观察者退出，每个异步事件都生成一个事件观察者。如果有事件发生就调用该回调函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302204524798-1818393710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Node.js中内置多个事件，可以引入events模块，并通过实例化EventEmitter类来绑定和监听事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302204220728-808668573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在Node中：执行异步操作的函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302203801253-567083253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js 所有的异步I/O操作在完成时都会发送一个事件到事件队列。&lt;/p&gt;
&lt;p&gt;Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件，一个fs.readStream对象会在文件被打开的时候发出一个事件。所有产生的事件的对象都是events.EventEmitter的实例。&lt;/p&gt;
&lt;p&gt;EventEmitter类&lt;/p&gt;
&lt;p&gt;events模块只提供了一个对象，events.EventEmitter。EventEmitter的核心就是事件触发与事件监听器功能的封装。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入 events 模块&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; events = require('events'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建 eventEmitter 对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; eventEmitter = &lt;span&gt;new&lt;/span&gt; events.EventEmitter();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EventEmitter对象如果再实例化时发生错误，就会触发error事件。当添加新的监听器时，newListener事件会触发，当监听器被移除时，removeListener事件被触发。&lt;/p&gt;
&lt;p&gt;简例说明EventEmitter用法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;event.js文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; EventEmitter = require('events'&lt;span&gt;).EventEmitter;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EventEmitter();
event.on(&lt;/span&gt;'some_evnet', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    console.log(&lt;/span&gt;'some_event 事件触发'&lt;span&gt;);    
});
setTimeOut(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    event.emit(&lt;/span&gt;'some_event'&lt;span&gt;);
}, &lt;/span&gt;1000);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302205726049-754425321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;EventEmitter的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的含义，对于每个事件EventEmitter支持若干个事件监听器。&lt;/p&gt;
&lt;p&gt;当事件触发时，注册到这个事件的监听器被依次调用，事件参数作为回调函数参数传递。&lt;/p&gt;
&lt;p&gt;简例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;event.js文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; events = require('events'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; emitter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; events.EventEmitter();
emitter.on(&lt;/span&gt;'someEvent',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arg1, arg2) {
    console.log(&lt;/span&gt;'listener1'&lt;span&gt;,arg1,arg2);
});
emitter.on(&lt;/span&gt;'someEvent',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arg1, arg2) {
   console.log(&lt;/span&gt;'listener2'&lt;span&gt;,arg1,arg2); 
})
emitter.emit(&lt;/span&gt;'someEvent', 'arg1参数', 'arg2参数');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302210620864-200214674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在上述例子中，emitter为事件注册了两个监听器，然后触发了事件。这是最简单的EventEmitter的用法。&lt;/p&gt;
&lt;p&gt;EventEmitter提供了多个属性，如on用于事件绑定，emit用于触发一个事件。&lt;/p&gt;
&lt;p&gt;具体的&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-event.html&quot; target=&quot;_blank&quot;&gt;API&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;error事件&lt;/h3&gt;
&lt;p&gt;EventEmitter定义了一个特殊的事件error，它包含了错误的语义，我们在遇到异常时，通常会触发error事件。&lt;/p&gt;
&lt;p&gt;当error被触发时，EventEmitter规定如果没有响应的监听器，Node.js会把它当做异常，退出程序并输出错误信息。&lt;/p&gt;
&lt;p&gt;我们一般要为会触发error事件的对象设置监听器，避免出现错误后整个程序崩溃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302212134915-1536133053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于EventEmitter，&lt;/p&gt;
&lt;p&gt;我们大多时候只会在对象中继承它，包括fs、net、http在内的。只要是支持事件响应的核心模块都是EventEmitter的子类。原因有二：&lt;/p&gt;
&lt;p&gt;1.具有某个实体功能的对象实现事件符合语义，事件的监听和发生应该是一个对象的方法。&lt;/p&gt;
&lt;p&gt;2.js的对象机制是基于原型的，支持部分多继承，继承EventEmitter不会打乱对象原有的继承关系。&lt;/p&gt;
&lt;p&gt;注：补充：实践队列中出现一个未绑定事件会触发error事件，若未绑定error事件则程序抛出异常结束。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;js只有字符串数据类型，没有二进制数据类型。但是在处理流时，必须使用二进制数据，因此在Node.js中定义了Buffer类，该类用来创建一个专门存放二进制数据的缓存区。&lt;/p&gt;
&lt;h3&gt;Buffer与字符编码&lt;/h3&gt;
&lt;p&gt; Buffer实例一般用于表示编码字符的序列，比如UTF-8、UCS2、Base64、或者十六进制编码的数据，通过使用显式的字符编码，就可以在Buffer实例与普通的JavaScript字符串之间进行相互转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
const buf = Buffer.from('runoob','ascii'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出72756e6f6f62&lt;/span&gt;
console.log(buf.toString('hex'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出cnVub29i&lt;/span&gt;
console.log(buf.toString('base64'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Node.js目前支持的字符编码包括：&lt;/p&gt;
&lt;p&gt;　　ascII　　仅支持7位ASCII数据。如果设置去掉高位的话，这种编码是非常快。&lt;/p&gt;
&lt;p&gt;　　utf8　　多字节编码的Unicode字符，许多网页和其他文档格式都使用UTF-8。&lt;/p&gt;
&lt;p&gt;　　utf16le　　2或4个字节，小字节编码的Unicode字符。支持代理对(U+100000至U+10FFF)。&lt;/p&gt;
&lt;p&gt;　　usc2　　utf16le的别名。&lt;/p&gt;
&lt;p&gt;　　base64　　Base64编码。&lt;/p&gt;
&lt;p&gt;　　latin1　　一种把Buffer编码成一字节编码的字符串的方式。&lt;/p&gt;
&lt;p&gt;　　binary　　Latin1的别名。&lt;/p&gt;
&lt;p&gt;　　hex　　将两个字节编码为两个十六进制字节。&lt;/p&gt;
&lt;h3&gt;创建Buffer类&lt;/h3&gt;
&lt;p&gt;Buffer提供了以下API创建Buffer类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302215307060-54121046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且用0填充的buffer&lt;/span&gt;
const buf1 = buffer.alloc(10&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且用0x1填充的buffer。&lt;/span&gt;
const buf2 = Buffer.alloc(10,1&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且未初始化的Buffer。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;这个方法比调用Buffer.alloc()更快。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;但返回的Buffer实例可能包含旧数据。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;因此需要使用fill()或write()重写。&lt;/span&gt;
const buf3 = Buffer.allocUnsafe(10&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个包含[0x1, 0x2, 0x3]的Buffer&lt;/span&gt;
const buf4 = Buffer.from([1,2,3&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。&lt;/span&gt;
const buf5 = Buffer.from('tést'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。&lt;/span&gt;
const buf6 = Buffer.from('tést', 'latin1');
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;写入缓冲区&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;写入Node缓冲区的语法如下所示：&lt;/p&gt;
&lt;p&gt;buf.write(string[, offset[, length]][,encoding])&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302220124225-1423341608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据encoding的字符编码写入string到buf中的offset位置。length参数是写入的字节数。如果buf没有足够的空间保存整个字符串，则只会写入string的一部分，只部分解码的字符不会被写入。&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;返回实际写入的大小。如果buffer空间不足，则只会写入部分字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302220603297-98208885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;从缓存区读取数据&lt;/h3&gt;
&lt;p&gt;语法读取Node缓冲区数据的语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
buf.toString([encoding[, start[,end]]])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302221227514-532726877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
buf = Buffer.alloc(26&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; 26; i++&lt;span&gt;) {
    buf[i] &lt;/span&gt;= i + 97&lt;span&gt;;
}

console.log(buf.toString(&lt;/span&gt;'ascii'));        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：abcdefghijklmnopqrstuvwxyz&lt;/span&gt;
console.log(buf.toString('ascii', 0, 5));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: abcde&lt;/span&gt;
console.log(buf.toString('utf8', 0 ,5));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：abcde&lt;/span&gt;
console.log(buf.toString(undefined, 0, 5)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用 'utf8' 编码, 并输出: abcde&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302221758141-1743726569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;将Buffer转换为JSON对象&lt;/h3&gt;
&lt;p&gt;语法：将Node Buffer转换为JSON对象的函数语法格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
buf.toJSON()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当字符串化为一个Buffer实例时，JSON.stringify()会隐式地调用该toJson();&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302222133128-474749655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5&lt;span&gt;]);
const json &lt;/span&gt;=&lt;span&gt; JSON.stringify(buf);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}&lt;/span&gt;
&lt;span&gt;console.log(json);

const copy &lt;/span&gt;= JSON.parse(json, (key, value) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; value &amp;amp;&amp;amp; value.type === 'Buffer' ?&lt;span&gt;
    Buffer.from(value.data) :
    value;
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: &amp;lt;Buffer 01 02 03 04 05&amp;gt;&lt;/span&gt;
console.log(copy);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302222306616-813254844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;缓冲区合并&lt;/h3&gt;
&lt;p&gt; 语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Buffer.concat(list[, totalLength])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223028977-206090415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; buffer1 = Buffer.from(('菜鸟教程'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer2 = Buffer.from(('www.runoob.com'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer3 =&lt;span&gt; Buffer.concat([buffer1,buffer2]);
console.log(&lt;/span&gt;&quot;buffer3 内容: &quot; + buffer3.toString());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223102931-1438788044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;缓冲区比较&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
buf.compare(otherBuffer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223159931-1209654768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; buffer1 = Buffer.from('ABC'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer2 = Buffer.from('ABCD'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; buffer1.compare(buffer2);

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(result &amp;lt; 0&lt;span&gt;) {
   console.log(buffer1 &lt;/span&gt;+ &quot; 在 &quot; + buffer2 + &quot;之前&quot;&lt;span&gt;);
}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(result == 0&lt;span&gt;){
   console.log(buffer1 &lt;/span&gt;+ &quot; 与 &quot; + buffer2 + &quot;相同&quot;&lt;span&gt;);
}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
   console.log(buffer1 &lt;/span&gt;+ &quot; 在 &quot; + buffer2 + &quot;之后&quot;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223333041-232284911.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223859666-434478920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223915759-161903395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223928764-1216016896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 14:40:00 +0000</pubDate>
<dc:creator>萌新啊萌新是我</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lilinzhiyu/p/8494264.html</dc:identifier>
</item>
<item>
<title>集成 solr6.5.1到 tomcat7（8） 中 （解决java.lang.NoSuchMethodError问题） - 思维焦点</title>
<link>http://www.cnblogs.com/xiezhidong/p/6906662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiezhidong/p/6906662.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣下载solr安装包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣安装solr&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣solr应用部署到tomcat下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣配置web.xml&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣在&lt;/strong&gt;tomcat7&lt;/span&gt;启动&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;♣改为在tomcat8启动&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;♣在自带的Jetty里启动&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;♣建立第一个Core&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 安装环境：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526130833747-1794896415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1.下载.&lt;/strong&gt;  SOLR下载地址:&lt;a href=&quot;http://archive.apache.org/dist/lucene/solr/&quot; target=&quot;_blank&quot;&gt;http://archive.apache.org/dist/lucene/solr/&lt;/a&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   官网：&lt;a href=&quot;http://lucene.apache.org/solr/&quot; target=&quot;_blank&quot;&gt;http://lucene.apache.org/solr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526132257404-1632402839.png&quot; alt=&quot;&quot; width=&quot;728&quot; height=&quot;407&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 2.安装solr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.1&lt;/strong&gt;  建立solrHome文件夹，路径随意，我的路径是&lt;span&gt;E:/javaEdit/solrHome&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.2&lt;/strong&gt;  在solrHome中新建文件夹solrCore：&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.3&lt;/strong&gt;  从solr-6.5.1/server/solr下的把下面&lt;span&gt;三个文件&lt;/span&gt;copy到solrHome中，如下图:&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526015619904-399759326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526015758497-594263833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt; 2.4&lt;/strong&gt;将solr-6.5.1\server\solr\configsets\basic_configs下的conf文件夹copy到solrCore中，如下图&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526020502591-234269840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.solr应用部署到tomcat下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.1&lt;/strong&gt;  在Tomcat文件夹webapps下，建立一个目录：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526001939247-1489044342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt; &lt;/strong&gt;拷贝Solr下面的server\solr-webapp\webapp里的所有文件到新建的目录下： &lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526002250888-2135854252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;3.2&lt;/strong&gt;添加需要的扩展依赖包&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.2.1&lt;/strong&gt;从\solr-6.5.1\server\lib\ext下将所有的jar包复制到tomcat的webapps下的solr项目的lib目录中&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526020951919-457276455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.2.2&lt;/strong&gt;复制\solr-6.5.1\solr-6.5.1\server\lib下的metrics-先关的jar包到webapps下的solr项目中&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021105529-806508083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;3.3添加log4j的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;从\solr-6.5.1\server\resources下将log4j配置文件复制到tomcat的webapps下的classes文件夹中，classes文件夹没有则新建一个&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021325591-1469072049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021503997-1888864636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;4.配置web.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   配置web.xml指定solrHome的位置&lt;/p&gt;
&lt;p&gt;   打开apache-tomcat-7.0.70\webapps\solr\WEB-INF\web.xml&lt;/p&gt;
&lt;p&gt;   增加如下节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;env-entry&amp;gt;
       &amp;lt;env-entry-name&amp;gt;solr/home&amp;lt;/env-entry-name&amp;gt;
       &amp;lt;env-entry-value&amp;gt;E:/javaEdit/solrHome&amp;lt;/env-entry-value&amp;gt;
       &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
    &amp;lt;/env-entry&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526004449950-1846619040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;5.启动tomcat7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   浏览器中输入： http://localhost/solr/index.html&lt;/p&gt;
&lt;p&gt;   若出现403的错误，修改solr项目中的web.xml，将169行左右的security-constraint代码注释掉&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526022139091-1532251998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526022148747-1439093354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    若出现错误：java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526124211216-1754345727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;  是tomcat7的lib下的servlet-api.jar下没有该方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;由于solr5.5.0及其以上版本部署在tomcat7下的时候，会报&lt;/p&gt;

&lt;p&gt;    Java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z的错误，&lt;span&gt;&lt;strong&gt;&lt;span&gt;这个是serverlet3.1才有的方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;    最终搭配：solr5.5及其以上+tomcat8&lt;/p&gt;
&lt;p&gt;                  solr5.4及其以下+tomcat7&lt;/p&gt;
&lt;p&gt;    所以，只能&lt;span&gt;换tomcat8或者降solr版本到5.5以下了&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527004044919-1279317252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;改为在tomcat8下测试&lt;/strong&gt;&lt;/span&gt;，注意换tomcat的时候要在环境变量里的CATALINA_BASE和CATALINA_HOME&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526130508591-1927706813.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt; 重启tomcat，浏览器中输入： http://localhost/solr/index.html ，可以看到solr界面，说明solr已经配置成功：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526123752185-1074867843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 6.&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;建立第一个Core&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;   &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;进入solr管理页面，点击左侧的core admin，然后点击add core，在name 和instanceDir下都输入solrCore，点击add core即可 &lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527120952544-574433731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 进入到solrHome/solrCore目录，此时会发现多了一个data文件夹和一个properties文件，如图&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527121001169-909833961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   solr界面, 在左侧即可看见刚刚建立的core &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527121009529-1616500678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Fri, 02 Mar 2018 14:36:00 +0000</pubDate>
<dc:creator>思维焦点</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiezhidong/p/6906662.html</dc:identifier>
</item>
<item>
<title>Java基础系列--集合之ArrayList - 唯一浩哥</title>
<link>http://www.cnblogs.com/V1haoge/p/8494618.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/V1haoge/p/8494618.html</guid>
<description>&lt;p&gt; 原创作品，可以转载，但是请标注出处地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Java基础系列--集合之ArrayList&quot; href=&quot;http://www.cnblogs.com/V1haoge/p/8494618.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/V1haoge/p/8494618.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一、概述&lt;/p&gt;
&lt;p&gt;　　ArrayList是Java集合体系中最常使用，也是最简单的集合类，是以数组实现的线性表。&lt;/p&gt;
&lt;p&gt;　　数组在内存中是以一段连续的内存来进行存放的，同样，ArrayList也是如此，初始化时可以指定初始容量，也可以以默认容量（10）创建底层数组，由于ArrayList属于可变长列表，采用可变数组实现，数组本身是不变的，一旦定义就无法变长，可变数组使用创建新数组拷贝旧数据的方式间接实现可变长，习惯称为扩容。&lt;/p&gt;
&lt;p&gt;　　ArrayList底层数组的扩容算法依据的是一个扩容算法来计算新的数组长度，扩容的条件是当前底层数组不足以容纳新的元素。&lt;/p&gt;
&lt;p&gt;二、继承结构 &lt;/p&gt;
&lt;p&gt;　　ArrayList的类结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302132419069-1720473261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、底层实现&lt;/p&gt;
&lt;p&gt;3.1 底层结构&lt;/p&gt;
&lt;p&gt;　　如前所述，ArrayList底层采用的是数组结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Object[] elementData;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　elementData就是定义在ArrayList底层的数组，而数组就是一连串连续的内存，其逻辑结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302134147548-901544498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图表示初始容量为10的ArrayList的底层数组，默认的初始容量为10，而列表长度用size来定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个表示的是列表中元素的数量，与数组的长度不同，size默认为0，表示列表为空。&lt;/p&gt;
&lt;p&gt;3.2 添加元素&lt;/p&gt;
&lt;p&gt;　　初始化的ArrayList的底层数组是没有元素的，即数组的各位均为null。使用add方法我们可以为列表添加元素，ArrayList中的添加单个元素有两种方式，一种是直接添加，另一种是定位添加。还有添加一组元素的两种方法，一种是定组直接添加，一种是定位定组添加&lt;/p&gt;
&lt;p&gt;3.2.1 直接添加&lt;/p&gt;
&lt;p&gt;　　所谓直接添加就是将新元素添加到列表末尾，其实现逻辑如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         ensureCapacityInternal(size + 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         elementData[size++] =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的逻辑很简单，首先进行列表容量检测（容后详述），然后直接将新元素放置到底层数组中即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302141105518-1628936795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中显示添加新元素到列表中，添加之后size的值会增加，这个size即指向数组最新空位的下标，有代表数组中元素的个数。&lt;/p&gt;
&lt;p&gt;3.2.2 定位添加&lt;/p&gt;
&lt;p&gt;　　所谓定位添加，就是我们将新元素，添加到列表指定下标处。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index, E element) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheckForAdd(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         ensureCapacityInternal(size + 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         System.arraycopy(elementData, index, elementData, index + 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                          size -&lt;span&gt; index);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         elementData[index] =&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，校验通过后进行列表容量检测（容后详述），然后将指定下标处开始到结尾的所以元素整体后移以为，下标处空出来后填充新添加的元素。这个添加操作涉及到一部分元素的整体移动，较为耗时，具体视实际移动的元素数量而定。&lt;/p&gt;
&lt;p&gt;　　实例：原始列表中由e1-e5共5个元素，现在执行add(2,e6)，表示在下标2处添加元素e6，执行步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302151817218-1636111289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：add(int,E)方法底层数组元素的后移操作采用的是System.arraycopy()方法实现的，不仅此处，后面还会多次使用这个方法来实现数组元素的拷贝。&lt;/p&gt;
&lt;p&gt;3.2.3 定组直接添加&lt;/p&gt;
&lt;p&gt;　　定组直接添加方法为：addAll(Collection&amp;lt;? extends E&amp;gt;)，直接将给定的集合中的元素依次添加到当前列表的后面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; addAll(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         Object[] a =&lt;span&gt; c.toArray();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numNew =&lt;span&gt; a.length;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         ensureCapacityInternal(size + numNew);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         System.arraycopy(a, 0&lt;span&gt;, elementData, size, numNew);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         size +=&lt;span&gt; numNew;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; numNew != 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行集合转化，将其转化为数组，获取其长度（元素个数），进行列表容量检测（容后详述），将转化好的数组元素复制到当前列表的底层数组后面，计算size。&lt;/p&gt;
&lt;p&gt;　　明显类似于直接添加，只是添加的数量不同而已，做个简单的图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302164415617-369555113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　只是这里讲给定的集合简化为数组形式，其实在源码中我们也能发现，在第2行对集合进行了数组转化，便于操作。元素的添加还是使用数组拷贝的形式实现。&lt;/p&gt;
&lt;p&gt;3.2.4 定位定组添加&lt;/p&gt;
&lt;p&gt; 　　定位定组添加类似于定位添加，同样只是添加的元素个数不同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; addAll(&lt;span&gt;int&lt;/span&gt; index, Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        rangeCheckForAdd(index);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Object[] a =&lt;span&gt; c.toArray();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numNew =&lt;span&gt; a.length;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         ensureCapacityInternal(size + numNew);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size -&lt;span&gt; index;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.arraycopy(elementData, index, elementData, index +&lt;span&gt; numNew,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         System.arraycopy(a, 0&lt;span&gt;, elementData, index, numNew);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         size +=&lt;span&gt; numNew;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; numNew != 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后将集合转化为数组，获取其中元素个数numNew，再进行列表容量检测，获取需要后移的元素的个数，使用数组复制的方式将这些元素后移，再将转化的数组元素复制迁移到空出的空位处。计算size。&lt;/p&gt;
&lt;p&gt;　　参照下方实例，原始列表有两个元素：e1、e2，现在给定集合包含3个元素，e3、e4、e5，现在执行add(1,Collection&amp;lt;? extends E&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302165426069-1797128005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　也就是将给定集合的元素嵌入到当前列表中。&lt;/p&gt;
&lt;p&gt; 3.3 获取元素&lt;/p&gt;
&lt;p&gt;　　获取指定下标处的元素，复杂度O(1)，只要获取数组执行下标处的元素就可以。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后获取返回数组执行下标的元素。&lt;/p&gt;
&lt;p&gt;3.4 修改元素&lt;/p&gt;
&lt;p&gt;　　修改元素需要提供修改下标和新值，直接用新值替换旧值即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E set(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index, E element) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         E oldValue =&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         elementData[index] =&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后保存指定下标的旧值，替换为新值，将旧值返回。&lt;/p&gt;
&lt;p&gt;3.5 删除元素&lt;/p&gt;
&lt;p&gt;　　删除元素的操作挺多的，针对不同的情况：&lt;/p&gt;
&lt;p&gt;3.5.1 定位删除&lt;/p&gt;
&lt;p&gt;　　定位删除，即删除指定下标的元素，需要提供删除的元素的下标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E remove(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         E oldValue =&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size - index - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             System.arraycopy(elementData, index+1&lt;span&gt;, elementData, index,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         elementData[--size] = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work　　&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，modCount自增1，保存指定下标处的旧值，然后将指定下标的下一个元素到结尾的元素整体前移一位，后面元素覆盖前面元素，指定下标处的旧值被删除，然后将原来的末尾元素置空，size自减1，最后将旧值返回。&lt;/p&gt;
&lt;p&gt;　　同样数组元素的移动采用数组复制的方式实现。&lt;/p&gt;
&lt;p&gt;　　实例：原始列表拥有5个元素，e1-e5，现移除下标2处的元素：remove(2)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302151453492-2143059901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 3.5.2 定元素删除&lt;/p&gt;
&lt;p&gt;　　指定要删除的元素的值，在列表中查询该值，删除查询到的第一个。即该方法只会删除符合条件的首个元素（即使列表中存在多个符合条件的元素）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; remove(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; index = 0; index &amp;lt; size; index++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[index] == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                    fastRemove(index);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; index = 0; index &amp;lt; size; index++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[index])) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    fastRemove(index);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; fastRemove(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size - index - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             System.arraycopy(elementData, index+1&lt;span&gt;, elementData, index,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         elementData[--size] = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　指定元素进行删除的情况，较为复杂，需要针对元素的情况进行分析，如果指定元素为null，则删除第一个null元素，若指定元素非null，则查询首个符合条件的元素进行删除。&lt;/p&gt;
&lt;p&gt;　　欲删除元素，必须先找到要删除元素的下标，这个过程由循环实现（第3行和第9行），找到下标之后，调用内部方法fastRemove(int)，进行指定下标元素的删除，即定位删除，然后返回true，表示删除成功。&lt;/p&gt;
&lt;p&gt;　　还有一种情况那就是指定的元素在列表中查询不到，这是直接返回false即可。&lt;/p&gt;
&lt;p&gt;　　这种删除底层使用的仍然是定位删除。不在画图举例了。&lt;/p&gt;
&lt;p&gt; 3.5.3 定组删除&lt;/p&gt;
&lt;p&gt;　　所谓定组删除，就是删除当前列表中所以与给定集合中元素相同的元素，该操作需要制定一个欲要删除的元素的集合（Collection）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; removeAll(Collection&amp;lt;?&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; batchRemove(c, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; batchRemove(Collection&amp;lt;?&amp;gt; c, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; complement) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Object[] elementData = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.elementData;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; r = 0, w = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; modified = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (; r &amp;lt; size; r++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (c.contains(elementData[r]) ==&lt;span&gt; complement)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     elementData[w++] =&lt;span&gt; elementData[r];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Preserve behavioral compatibility with AbstractCollection,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; even if c.contains() throws.&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (r !=&lt;span&gt; size) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                System.arraycopy(elementData, r,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                                 elementData, w,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                                  size -&lt;span&gt; r);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 w += size -&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (w !=&lt;span&gt; size) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = w; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     elementData[i] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 modCount += size -&lt;span&gt; w;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 size =&lt;span&gt; w;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 modified = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; modified;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　定组删除的complement传值为false，用于第11行比较，表示如果给定集合中不包含当前列表的当前下标的元素的情况下，执行内部语句块，将这个元素保留下来（亦即若包含该元素则不保留该元素，最后查遗补漏时，会将其消失【finally块逻辑】）&lt;/p&gt;
&lt;p&gt;实例：当前列表是包含5个元素e1-e5，给定集合元素包括e2,e3,e5三个元素，则定位删除的图示为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302161246108-30146776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从第二步开始循环，每次循环结束，r就会自增1，而w表示的是下一个保留元素的下标或者保留元素的个数。循环在第七步r自增到5，不满足循环条件时结束，最后r=5，w=2，亦即共删除3个元素，modCount需要自增（r-w=5-2=3）次。&lt;/p&gt;
&lt;p&gt;　　最后finally中执行第二个if块，将多余的元素位置置null，再计算modCount和size。&lt;/p&gt;
&lt;p&gt;3.5.4 定组保留删除&lt;/p&gt;
&lt;p&gt;　　定组保留删除逻辑与定组删除正好相反，需要将给定集合中包含的当前列表的元素保留下来，将不包含的删除。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; retainAll(Collection&amp;lt;?&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; batchRemove(c, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　实例，同上，图示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302162939842-1837988788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　执行过程同上。&lt;/p&gt;
&lt;p&gt;3.5.5 范围删除&lt;/p&gt;
&lt;p&gt;　　ArrayList中还有一个范围删除方法：removeRange(int,int)，根据给定的两个下标，删除下标范围之内的所有元素。该方法是protected修饰的，那么很明显，这个方法并不是面向ArrayList使用者的，而是面向JDK实现者的，这里只做简单介绍。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; removeRange(&lt;span&gt;int&lt;/span&gt; fromIndex, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; toIndex) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size -&lt;span&gt; toIndex;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        System.arraycopy(elementData, toIndex, elementData, fromIndex,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                         numMoved);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newSize = size - (toIndex-&lt;span&gt;fromIndex);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (size !=&lt;span&gt; newSize)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             elementData[--size] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　很简单，将toIndex到结尾的元素复制到fromIndex，空出的位置全部置空即可。&lt;/p&gt;
&lt;p&gt;3.6 查找元素&lt;/p&gt;
&lt;p&gt;　　查找元素包括3个方法：&lt;/p&gt;
&lt;p&gt;　　　　contains(Object)　　检查当前列表是否包含某个元素&lt;/p&gt;
&lt;p&gt;　　　　indexOf(Object)　　检查给定元素在当前列表中首次出现的下标&lt;/p&gt;
&lt;p&gt;　　　　lastIndexOf(Object)　　检查给定元素在当前列表中最后出现的下标&lt;/p&gt;
&lt;p&gt;3.6.1 包含方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; contains(Object o) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; indexOf(o) &amp;gt;= 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好家伙，自己啥也不干，就靠后面了...&lt;/p&gt;
&lt;p&gt;3.6.2 前序查找&lt;/p&gt;
&lt;p&gt;　　前序查找就是从头开始查找元素，返回首次出现的下标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; indexOf(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[i]==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[i]))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　源码显示，需要分两种情况考虑，如果给定元素为null，则查找首个null元素的下标并返回，如果给定元素非null，则查找首次出现的下标并返回，如果列表中不包含该元素，则返回-1。&lt;/p&gt;
&lt;p&gt;3.6.3 后序查找&lt;/p&gt;
&lt;p&gt; 　　后序查找就是前序查找的反向查找方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; lastIndexOf(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size-1; i &amp;gt;= 0; i--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[i]==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size-1; i &amp;gt;= 0; i--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[i]))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　参考前后查找的源码不难发现，模式一致，只是查找的方向不同而已。&lt;/p&gt;
&lt;p&gt;3.7 列表扩容&lt;/p&gt;
&lt;p&gt;　　列表的扩容是底层自动进行的，对列表的使用者是完全透明的，因此其方法都是私有的。扩容的条件与算法并不复杂：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureCapacityInternal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow-conscious code&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (minCapacity - elementData.length &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            grow(minCapacity);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; grow(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow-conscious code&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; elementData.length;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newCapacity - minCapacity &amp;lt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             newCapacity =&lt;span&gt; minCapacity;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             newCapacity =&lt;span&gt; hugeCapacity(minCapacity);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; minCapacity is usually close to size, so this is a win:&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         elementData =&lt;span&gt; Arrays.copyOf(elementData, newCapacity);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hugeCapacity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (minCapacity &amp;lt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OutOfMemoryError();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            Integer.MAX_VALUE :
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            MAX_ARRAY_SIZE;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　扩容条件：拿给定的容量（长度值）minCapacity与当前列表的底层数组的容量elementData.length进行比较，如果前者大，则说明容量不足，需要扩容，调用grow(minCapacity)进行扩容。&lt;/p&gt;
&lt;p&gt;　　扩容算法：扩容时存在三种情况，第一种就是普通的自动扩容，按照oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1&lt;span data-mce-=&quot;&quot;&gt;)算法进行扩容，上式计算得出的即为新的数组容量，一般针对的是单个元素添加的情况，即直接添加和定位添加的情况，这种情况下，每次只添加一个元素，不会出现第14行成功的可能，但是如果是定组直接添加和定位定组添加的时候，由于添加的集合元素数量未知，一旦给定的minCapacity比计算得出的新容量要大，说明计算得出的容量不足以容纳所有的元素，这是直接使用minCapacity作为新容量进行扩容。即优先使用算法计算的容量进行扩容，一旦计算容量还不足以容纳新元素，则使用给定的容量进行扩容。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　还有一种特殊情况，当本次扩容时，计算得到的容量，或者给定的容量大于MAX_ARRAY_SIZE（=Integer.MAX_VALUE - 8）的情况下，需要调用hugeCapacity(minCapacity)方法进行人为限制容量超限，将容量限制在整形的最大值之内。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　最后进行数组扩容，创建新数组，拷贝数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;3.8 迭代器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　列表的迭代必不可少，而且这里还会用到一个出现很久的变量modCount，此前我们对它一无所知。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　modCount记录的是列表结构发生变化的次数，所谓结构变化包括：新增元素，删除元素，清空元素，扩容等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　ArrayList的迭代器有两种，ListIterator和Iterator。二者虽然都是迭代器，但是还是有些不同的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;（待续）&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 13:44:00 +0000</pubDate>
<dc:creator>唯一浩哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/V1haoge/p/8494618.html</dc:identifier>
</item>
<item>
<title>Docker容器技术 - 酷酷的二连长</title>
<link>http://www.cnblogs.com/lyq863987322/p/8494969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyq863987322/p/8494969.html</guid>
<description>&lt;h2&gt;什么是容器&lt;/h2&gt;
&lt;p&gt;Linux容器是与系统其他部分隔离开的一系列进程，从另一个系统镜像运行，并由该镜像提供支持进程所需的全部文件。&lt;/p&gt;
&lt;p&gt;容器镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://www.redhat.com/zh/topics/containers/whats-a-linux-container&quot; target=&quot;_blank&quot;&gt;https://www.redhat.com/zh/topics/containers/whats-a-linux-container&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;容器就是虚拟化吗？&lt;/h3&gt;
&lt;p&gt;虚拟化使得许多操作系统可同时在单个系统上运行。&lt;/p&gt;
&lt;p&gt;容器只能共享操作系统内核,将应用进程与系统其他部分,隔离开。&lt;/p&gt;
&lt;h2&gt;容器和虚拟化的区别&lt;/h2&gt;
&lt;p&gt;linux容器技术，容器虚拟化和kvm虚拟化的区别&lt;/p&gt;
&lt;p&gt;kvm虚拟化：需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级(开机启动流程)&lt;/p&gt;
&lt;p&gt;容器虚拟化：不需要硬件的支持。不需要模拟硬件，共用宿主机的内核，启动时间秒级(没有开机启动流程)&lt;/p&gt;
&lt;p&gt;容器总结：&lt;/p&gt;
&lt;p&gt;（1）与宿主机使用同一个内核，性能损耗小；&lt;/p&gt;
&lt;p&gt;（2）不需要指令级模拟；&lt;/p&gt;
&lt;p&gt;（3）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；&lt;/p&gt;
&lt;p&gt;（4）避免了准虚拟化和系统调用替换中的复杂性；&lt;/p&gt;
&lt;p&gt;（5）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302170949527-1632146782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;chroot技术，新建一个子系统&lt;/h2&gt;
&lt;p&gt;chroot，即 change root directory (更改 root 目录)。在 linux 系统中，系统默认的目录结构都是以 `/`，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为 `/` 位置。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-cn-chroot/&quot; target=&quot;_blank&quot;&gt;https://www.ibm.com/developerworks/cn/linux/l-cn-chroot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用chroot监狱限制SSH用户访问指定目录和使用指定命令：&lt;a href=&quot;https://linux.cn/article-8313-1.html&quot; target=&quot;_blank&quot;&gt;https://linux.cn/article-8313-1.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;lxc部署&lt;/h2&gt;
&lt;p&gt;Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。&lt;/p&gt;
&lt;h3&gt;安装lxc&lt;/h3&gt;
&lt;p&gt;需要使用epel源&lt;/p&gt;
&lt;p&gt;#安装epel源&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install epel-release -y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;#编译epel源配置文件&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
vi  /etc/yum.repos.d/&lt;span&gt;epel.repo
[epel]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; -&lt;span&gt; $basearch
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;
&lt;span&gt;
[epel&lt;/span&gt;-&lt;span&gt;debuginfo]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; - $basearch -&lt;span&gt; Debug
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch/debug&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

[epel&lt;/span&gt;-&lt;span&gt;source]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; - $basearch -&lt;span&gt; Source
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;##安装lxc&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install lxc-* -&lt;span&gt;y
yum install libcgroup&lt;/span&gt;* -&lt;span&gt;y
yum install bridge&lt;/span&gt;-utils.x86_64 -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;交接网卡&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@controller ~]# cat /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;eth0 
TYPE&lt;/span&gt;=&lt;span&gt;Ethernet
BOOTPROTO&lt;/span&gt;=&lt;span&gt;none
NAME&lt;/span&gt;=&lt;span&gt;eth0
DEVICE&lt;/span&gt;=&lt;span&gt;eth0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
BRIDGE&lt;/span&gt;=&lt;span&gt;br0

[root@controller &lt;/span&gt;~]# cat /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;br0 
TYPE&lt;/span&gt;=&lt;span&gt;Bridge
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static&lt;/span&gt;&lt;span&gt;
NAME&lt;/span&gt;=&lt;span&gt;br0
DEVICE&lt;/span&gt;=&lt;span&gt;br0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
IPADDR&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;&lt;span&gt;
NETMASK&lt;/span&gt;=&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;&lt;span&gt;
DNS1&lt;/span&gt;=&lt;span&gt;223.5&lt;/span&gt;.&lt;span&gt;5.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改lxc默认配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vi /etc/lxc/&lt;span&gt;default&lt;/span&gt;&lt;span&gt;.conf
修改第2行为：lxc.network.link &lt;/span&gt;= br0
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动cgroup服务&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl enable cgconfig.service
systemctl start cgconfig.service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建lxc容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;方法1:
lxc&lt;/span&gt;-create -t download -n centos7 -- --server mirrors.tuna.tsinghua.edu.cn/lxc-images -d centos -r &lt;span&gt;7&lt;/span&gt; -&lt;span&gt;a amd64
方法2：
lxc&lt;/span&gt;-create -t centos -n test
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为容器指定ip和网关&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vi /&lt;span&gt;var&lt;/span&gt;/lib/lxc/centos7/&lt;span&gt;config
lxc.network.name &lt;/span&gt;=&lt;span&gt; eth0
lxc.network.ipv4 &lt;/span&gt;= &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.111&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;&lt;span&gt;
lxc.network.ipv4.gateway &lt;/span&gt;= &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
lxc-start -n centos7
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;lxc实操&lt;/h3&gt;
&lt;p&gt;#查看虚拟机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker opt]# lxc-&lt;span&gt;ls   
centos7  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改子系统root密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker opt]# chroot /&lt;span&gt;var&lt;/span&gt;/lib/lxc/centos7/&lt;span&gt;rootfs passwd    
Changing password &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; user root. 
New password: 
BAD PASSWORD: The password &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; shorter than &lt;span&gt;8&lt;/span&gt;&lt;span&gt; characters
Retype &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; password: 
passwd: all authentication tokens updated successfully.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动子系统&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker opt]# lxc-start -&lt;span&gt;n centos7   
systemd &lt;/span&gt;&lt;span&gt;219&lt;/span&gt; running &lt;span&gt;in&lt;/span&gt; system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +&lt;span&gt;IDN)
Detected virtualization lxc.
Detected architecture x86&lt;/span&gt;-&lt;span&gt;64&lt;/span&gt;&lt;span&gt;.

Welcome to CentOS Linux &lt;/span&gt;&lt;span&gt;7&lt;/span&gt; (Core)!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检测&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker ~]# lxc-&lt;span&gt;checkconfig     
Kernel configuration not found at &lt;/span&gt;/proc/&lt;span&gt;config.gz; searching...
Kernel configuration found at &lt;/span&gt;/boot/config-&lt;span&gt;3.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;327&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;--- Namespaces ---&lt;span&gt;
Namespaces: enabled
Utsname &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Ipc &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Pid &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
User &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
newuidmap &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; not installed
newgidmap &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; not installed
Network &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Multiple &lt;/span&gt;/dev/&lt;span&gt;pts instances: enabled

&lt;/span&gt;--- Control groups ---&lt;span&gt;
Cgroup: enabled
Cgroup clone_children flag: enabled
Cgroup device: enabled
Cgroup sched: enabled
Cgroup cpu account: enabled
Cgroup memory controller: enabled
Cgroup cpuset: enabled

&lt;/span&gt;--- Misc ---&lt;span&gt;
Veth pair device: enabled
Macvlan: enabled
Vlan: enabled
Bridges: enabled
Advanced netfilter: enabled
CONFIG_NF_NAT_IPV4: enabled
CONFIG_NF_NAT_IPV6: enabled
CONFIG_IP_NF_TARGET_MASQUERADE: enabled
CONFIG_IP6_NF_TARGET_MASQUERADE: enabled
CONFIG_NETFILTER_XT_TARGET_CHECKSUM: enabled

&lt;/span&gt;--- Checkpoint/Restore ---&lt;span&gt;
checkpoint restore: enabled
CONFIG_FHANDLE: enabled
CONFIG_EVENTFD: enabled
CONFIG_EPOLL: enabled
CONFIG_UNIX_DIAG: enabled
CONFIG_INET_DIAG: enabled
CONFIG_PACKET_DIAG: enabled
CONFIG_NETLINK_DIAG: enabled
File capabilities: enabled

Note : Before booting a &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; kernel, you can check its configuration
usage : CONFIG&lt;/span&gt;=/path/to/config /usr/bin/lxc-checkconfig
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Docker是通过内核虚拟化技术（namespaces及cgroups cpu、内存、磁盘io等）来提供容器的资源隔离与安全保障等。由于Docker通过操作系统层的虚拟化实现隔离，所以Docker容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。&lt;/p&gt;
&lt;p&gt;docker的主要目标是&quot;Build,Ship and Run any App,Angwhere&quot;,构建，运输，处处运行&lt;/p&gt;
&lt;p&gt;构建：做一个docker镜像&lt;/p&gt;
&lt;p&gt;运输：docker pull&lt;/p&gt;
&lt;p&gt;运行：启动一个容器&lt;/p&gt;
&lt;p&gt;每一个容器，他都有自己的文件系统rootfs.&lt;/p&gt;
&lt;p&gt;kvm解决了硬件和操作系统之间的依赖&lt;/p&gt;
&lt;p&gt;docker解决了软件和操作系统环境之间的依赖，能够让独立服务或应用程序在不同的环境中，得到相同的运行结果。&lt;/p&gt;
&lt;p&gt;docker容器是一种轻量级、可移植、自包含的软件打包技术，使应用程序可以在几乎任何地方以相同的方式运行。开发人员在自己笔记本上创建并测试好的容器，无需任何修改就能够在生产系统的虚拟机、物理服务器或公有云主机上运行。&lt;/p&gt;
&lt;h2&gt;Docker的部署&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
wget -O /etc/yum.repos.d/docker-ce.repo https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;
&lt;span&gt;
sed &lt;/span&gt;-i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#download.docker.com#mirrors.ustc.edu.cn/docker-ce#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/yum.repos.d/docker-&lt;span&gt;ce.repo

yum install docker&lt;/span&gt;-ce -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;docker的主要组成部分&lt;/h3&gt;
&lt;p&gt;docker是传统的CS架构分为docker client和docker server,向mysql一样&lt;/p&gt;
&lt;p&gt;命令：docker version&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@controller ~&lt;span&gt;]# docker version 
Client:
 Version:    &lt;/span&gt;&lt;span&gt;17.12&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;ce
 API version:    &lt;/span&gt;&lt;span&gt;1.35&lt;/span&gt;&lt;span&gt;
 Go version:    go1.&lt;/span&gt;&lt;span&gt;9.2&lt;/span&gt;&lt;span&gt;
 Git commit:    c97c6d6
 Built:    Wed Dec &lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
 OS&lt;/span&gt;/Arch:    linux/&lt;span&gt;amd64

Server:
 Engine:
  Version:    &lt;/span&gt;&lt;span&gt;17.12&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;ce
  API version:    &lt;/span&gt;&lt;span&gt;1.35&lt;/span&gt; (minimum version &lt;span&gt;1.12&lt;/span&gt;&lt;span&gt;)
  Go version:    go1.&lt;/span&gt;&lt;span&gt;9.2&lt;/span&gt;&lt;span&gt;
  Git commit:    c97c6d6
  Built:    Wed Dec &lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
  OS&lt;/span&gt;/Arch:    linux/&lt;span&gt;amd64
  Experimental:    &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;设置docker远程执行&lt;/h3&gt;
&lt;p&gt;systemd详解：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html&quot; target=&quot;_blank&quot;&gt;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;在linux-node1设置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /usr/lib/systemd/system/&lt;span&gt;docker.service
ExecStart&lt;/span&gt;=/usr/bin/dockerd -H unix:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;var/run/docker.sock -H tcp://10.0.0.11:2375&lt;/span&gt;
&lt;br/&gt;systemctl daemon-&lt;span&gt;reload
systemctl restart docker.service
&lt;br/&gt;ps &lt;/span&gt;-ef检查
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;在linux-node2设置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
wget -O /etc/yum.repos.d/docker-ce.repo https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;
&lt;span&gt;
sed &lt;/span&gt;-i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#download.docker.com#mirrors.ustc.edu.cn/docker-ce#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/yum.repos.d/docker-&lt;span&gt;ce.repo

yum install docker&lt;/span&gt;-ce -&lt;span&gt;y

docker &lt;/span&gt;-H &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt; info 　　　　&lt;span&gt;---  远程执行 info 展示docker的信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker主要组件有：镜像、容器、仓库&lt;/p&gt;
&lt;h4&gt;启动第一个容器&lt;/h4&gt;
&lt;p&gt;命令：docker run -d -p 80:80 nginx&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx
Unable to find image &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nginx:latest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; locally
latest: Pulling &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; library/&lt;span&gt;nginx
e7bb522d92ff: Pull complete 
6edc05228666: Pull complete 
cd866a17e81f: Pull complete 
Digest: sha256:285b49d42c703fdf257d1e2422765c4ba9d3e37768d6ea83d7fe2043dad6e63d
Status: Downloaded newer image &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; nginx:latest
e1cb110a537622e4a5c885161bca69478adc5d218e6eb4e0307c7fe0c1350012
&lt;span&gt;#run： 创建并运行一个容器，
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;#-d：放在后台
#-p：端口映射
#80:80：前面是宿主机的，后面是容器的
#nginx：镜像的名字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;docker的镜像管理&lt;/h2&gt;
&lt;h3&gt;搜索镜像&lt;/h3&gt;
&lt;p&gt;命令：docker search&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker search centos
NAME&lt;span&gt;（镜像名）&lt;/span&gt;     DESCRIPTION&lt;span&gt;（说明）&lt;/span&gt;             STARS&lt;span&gt;（送心数）&lt;/span&gt;  OFFICIAL&lt;span&gt;（是否是官方的）&lt;/span&gt;    AUTOMATED&lt;span&gt;（是否自动）&lt;/span&gt;
centos             The official build of CentOS.   &lt;/span&gt;&lt;span&gt;3992&lt;/span&gt;               [OK]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获取镜像&lt;/h3&gt;
&lt;p&gt;命令：docker pull&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker pull centos   &lt;span&gt; ---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 拉取一个镜像centos（不指定版本默认为最新版，只写名字默认在官方拉取）&lt;/span&gt;
Using &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; tag: latest
latest: Pulling &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; library/&lt;span&gt;centos
af4b0a2388c6: Pull complete 
Digest: sha256:2671f7a3eea36ce43609e9fe7435ade83094291055f1c96d9d1d1d7c0b986a5d
Status: Downloaded newer image &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; centos:latest
[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker images 
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拉取非官网的镜像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191022981-394457539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191107875-321530900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191122762-1878215836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191153498-1632356332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker pull index.tenxcloud.com/tenxcloud/httpd:&lt;span&gt;2.4&lt;/span&gt;
&lt;span&gt;2.4&lt;/span&gt;: Pulling &lt;span&gt;from&lt;/span&gt; tenxcloud/&lt;span&gt;httpd
8b87079b7a06: Downloading  &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;.53MB/&lt;span&gt;51&lt;/span&gt;&lt;span&gt;.36MB
a3ed95caeb02: Download complete 
0c30bf087cf7: Download complete 
79f2be53847c: Downloading  &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;.14MB/&lt;span&gt;11&lt;/span&gt;&lt;span&gt;.7MB
7063c4b35837: Download complete 
5c27df81ae71: Download complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;镜像加速&lt;/h3&gt;
&lt;p&gt;镜像加速器：阿里云加速器，daocloud加速器，中科大加速器，Docker 中国官方镜像加速：https://registry.docker-cn.com&lt;/p&gt;
&lt;p&gt;镜像加速配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vi /etc/docker/&lt;span&gt;daemon.json
{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;registry-mirrors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://registry.docker-cn.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第三方docker镜像仓库，使用方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker pull index.tenxcloud.com/tenxcloud/httpd:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;镜像操作&lt;/h3&gt;
&lt;h4&gt;查看镜像 &lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker images
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;删除镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker rmi  &lt;span&gt;例子：docker image rm centos:latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker image rm centos:latest &lt;span&gt;（名字：版本）&lt;/span&gt;
Untagged: centos:latest
Untagged: centos@sha256:2671f7a3eea36ce43609e9fe7435ade83094291055f1c96d9d1d1d7c0b986a5d
Deleted: sha256:ff426288ea903fcf8d91aca97460c613348f7a27195606b45f19ae91776ca23d
Deleted: sha256:e15afa4858b655f8a5da4c4a41e05b908229f6fab8543434db79207478511ff7
[root@docker &lt;/span&gt;~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;导出镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker save  &lt;span&gt;例子：docker image save centos &amp;gt; docker-centos7.4.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker image save centos &amp;gt; docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz
[root@docker &lt;/span&gt;~]# ls docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz
docker&lt;/span&gt;-centos7.&lt;span&gt;4&lt;/span&gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;导入镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker load  &lt;span&gt;例子：docker image load -i docker-centos7.4.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker image load -i docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz 
e15afa4858b6: Loading layer  &lt;/span&gt;&lt;span&gt;215&lt;/span&gt;.8MB/&lt;span&gt;215&lt;/span&gt;&lt;span&gt;.8MB
Loaded image: centos:latest
[root@docker &lt;/span&gt;~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;查看镜像详细信息&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6c9cf415-b929-45c7-a505-f7a88bea194c')&quot; readability=&quot;64.5&quot;&gt;&lt;img id=&quot;code_img_closed_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6c9cf415-b929-45c7-a505-f7a88bea194c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;124&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker image inspect centos
[
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:ff426288ea903fcf8d91aca97460c613348f7a27195606b45f19ae91776ca23d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RepoTags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;centos:latest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RepoDigests&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comment&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Created&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-08T19:58:27.63047329Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dd31c81a4b47b90a14cf6d1c7389465060e390f12a0b71189d181a0458d8443f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContainerConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dd31c81a4b47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#(nop) &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMD [\&quot;/bin/bash\&quot;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:5a28642a68c5af8083107fca9ffbc025179211209961eae9b1f40f928331fa90&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build-date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20180107&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPLv2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS Base Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DockerVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;17.06.2-ce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:5a28642a68c5af8083107fca9ffbc025179211209961eae9b1f40f928331fa90&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build-date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20180107&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPLv2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS Base Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Architecture&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Os&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;207191530&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VirtualSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;207191530&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GraphDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-8:2-667845-6de21ff18b07a4a121111b78d105af3ae3d1eccf0d5bcf3dff957e3640a79dac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10737418240&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RootFS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Layers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:e15afa4858b655f8a5da4c4a41e05b908229f6fab8543434db79207478511ff7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ]
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastTagTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0001-01-01T00:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
    }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看镜像详细信息&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Docker的容器管理&lt;/h2&gt;
&lt;h3&gt;启动一个容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看启动的容器（两种方法）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp   inspiring_euler

[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/tcp   inspiring_euler
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;显示所有状态的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker ps -&lt;span&gt;a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours               &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp   inspiring_euler
e1cb110a5376        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;3&lt;/span&gt; hours ago                        thirsty_brattain
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示容器id&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker ps -a -&lt;span&gt;q
7cef098bebc7
75516b38df19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查看容器ip&lt;/h3&gt;
&lt;p&gt;docker container inspect id或name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9f0b1d14-03e1-4c3b-83ce-b125ab322b2e')&quot; readability=&quot;109&quot;&gt;&lt;img id=&quot;code_img_closed_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9f0b1d14-03e1-4c3b-83ce-b125ab322b2e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;213&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker container inspect 75516b38df19
[
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Created&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-31T12:12:06.387035752Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Args&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;daemon off;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Paused&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Restarting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OOMKilled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dead&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;19388&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExitCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StartedAt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-31T12:12:06.710448922Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FinishedAt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0001-01-01T00:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:3f8a4339aadda5897b744682f5f774dc69991a81af8d715d37a616bb4c99edf5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ResolvConfPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/resolv.conf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostnamePath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostsPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/hosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3-json.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/inspiring_euler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestartCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Platform&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MountLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ProcessLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppArmorProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExecIDs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Binds&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContainerIDFile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json-file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {}
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PortBindings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                    {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostIp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                ]
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestartPolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MaximumRetryCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoRemove&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VolumeDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VolumesFrom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CapAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CapDrop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DnsOptions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DnsSearch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtraHosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GroupAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IpcMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shareable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cgroup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Links&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OomScoreAdj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PidMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Privileged&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PublishAllPorts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReadonlyRootfs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecurityOpt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTSMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UsernsMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ShmSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;67108864&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Runtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsoleSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Isolation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuShares&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NanoCpus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CgroupParent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioWeight&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioWeightDevice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceReadBps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceWriteBps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceReadIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceWriteIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuPeriod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuQuota&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuRealtimePeriod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuRealtimeRuntime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpusetCpus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpusetMems&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Devices&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceCgroupRules&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DiskQuota&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KernelMemory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemoryReservation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemorySwap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemorySwappiness&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OomKillDisable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PidsLimit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ulimits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuPercent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IOMaximumIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IOMaximumBandwidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GraphDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-8:2-667845-d7559a9d1629b837315264d5191776a3583b745cbb270be66f15126659ea266d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10737418240&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mounts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75516b38df19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExposedPorts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {}
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NGINX_VERSION=1.13.8-1~stretch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NJS_VERSION=1.13.8.0.1.15-1~stretch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;daemon off;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maintainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NGINX Docker Maintainers &amp;lt;docker-maint@nginx.com&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StopSignal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SIGTERM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkSettings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bridge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SandboxID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;33eb47f2321af718ee6a7564f8ae8c9841719051efebb2dfdb8a206d19e83004&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HairpinMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LinkLocalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LinkLocalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ports&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                    {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostIp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                ]
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SandboxKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/run/docker/netns/33eb47f2321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondaryIPAddresses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondaryIPv6Addresses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EndpointID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a4a179b29fb9cda0c6332579460dddc5fbc6e7f29dd5608ae9f5742701d4202e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPPrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPv6Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MacAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;02:42:ac:11:00:02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Networks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bridge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAMConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Links&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Aliases&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12e101b4dd9dd0078bab6ed9ce9aaf2d7cca2e00e4a66b5629f088732d6698d0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EndpointID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a4a179b29fb9cda0c6332579460dddc5fbc6e7f29dd5608ae9f5742701d4202e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPPrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPv6Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MacAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;02:42:ac:11:00:02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DriverOpts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                }
            }
        }
    }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看容器&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;停止容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;docker container stop id或name
docker container &lt;/span&gt;&lt;span&gt;kill&lt;/span&gt; id或name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker container stop 75516b38df19
75516b38df19
[root@docker&lt;/span&gt;-node1 ~]# docker container &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;ps&lt;/span&gt; -&lt;span&gt;a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds ago                       inspiring_euler
e1cb110a5376        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;3&lt;/span&gt; hours ago                          thirsty_brattain
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：docker容器内的第一个进程必须一直处于前台运行的状态，否则这个容器，就会处于退出状态！&lt;/p&gt;
&lt;h3&gt;删除已关闭的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker container &lt;span&gt;rm&lt;/span&gt;&lt;span&gt; e1cb110a5376
e1cb110a5376&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;批量删除：&lt;/p&gt;
&lt;p&gt;docker rm -f `docker ps -a -q`    -- 强制删除全部，包括启动中的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker &lt;span&gt;rm&lt;/span&gt; `docker &lt;span&gt;ps&lt;/span&gt; -a -&lt;span&gt;q`    &lt;span&gt;#只删除关闭状态的&lt;/span&gt;
7cef098bebc7
75516b38df19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;交互式进入容器，分配终端&lt;/h3&gt;
&lt;p&gt;docker run -it nginx:latest /bin/bash&lt;/p&gt;
&lt;p&gt;-i -t：--interactive --tty（直接进入容器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker run -it nginx:latest /bin/&lt;span&gt;bash
root@7cef098bebc7:&lt;/span&gt;/# &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
bin   dev  home  lib64    mnt  proc  run     srv  tmp  var
boot  etc  lib     media    opt  root  sbin  sys  usr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;进入容器的方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -it --&lt;span&gt;name erlianzhang centos:latest 
[root@b07f6aad08cd &lt;/span&gt;/]#
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;进入到存活的容器中&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker attach erlianzhang 
[root@b07f6aad08cd &lt;/span&gt;/]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exec方式必须指定起始命令 --- 推荐使用exec&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker exec -it erlianzhang /bin/&lt;span&gt;bash
[root@abcadd1250cb &lt;/span&gt;/]# &lt;span&gt;ps&lt;/span&gt; -&lt;span&gt;ef
UID         PID   PPID  C STIME TTY          TIME CMD
root          &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /bin/&lt;span&gt;bash
root         &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; pts/&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /bin/&lt;span&gt;bash
root         &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;13&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; pts/&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; &lt;span&gt;ps&lt;/span&gt; -ef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：进入容器中第一个命令一定要让容器夯住，否则会变成退出状态&lt;/p&gt;
&lt;p&gt;暂时退出容器：ctrl+p，ctrl+q&lt;/p&gt;
&lt;p&gt;回到容器：docker attach id或name&lt;/p&gt;
&lt;h2&gt;docker容器的网络访问&lt;/h2&gt;
&lt;p&gt;指定映射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    -&lt;span&gt;p hostPort:containerPort
    &lt;/span&gt;-&lt;span&gt;p ip:hostPort:containerPort 
    &lt;/span&gt;-&lt;span&gt;p ip::containerPort
    &lt;/span&gt;-&lt;span&gt;p hostPort:containerPort:udp
    &lt;/span&gt;-p &lt;span&gt;81&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; –p &lt;span&gt;443&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机映射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker run -P
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操&lt;/p&gt;
&lt;p&gt;docker run -d -p 888:80 nginx:latest&lt;/p&gt;
&lt;p&gt;docker run -d -p 10.0.0.11:80:80 nginx:latest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -d -p &lt;span&gt;888&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx:latest 
1b177e8c6357ed08ddabb745b902a4e577e8c25e154a4b891dfa900b108dd4bd
[root@docker&lt;/span&gt;-node1 opt]# netstat -&lt;span&gt;lntup
Active Internet connections (only servers)
Proto Recv&lt;/span&gt;-Q Send-Q Local Address           Foreign Address         State       PID/&lt;span&gt;Program name    
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1406&lt;/span&gt;/&lt;span&gt;sshd           
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;2375&lt;/span&gt;          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;19206&lt;/span&gt;/&lt;span&gt;dockerd       
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;22&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;1406&lt;/span&gt;/&lt;span&gt;sshd           
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;888&lt;/span&gt;                  :::*                    LISTEN      &lt;span&gt;21455&lt;/span&gt;/docker-proxy  
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;docker的数据卷管理&lt;/h2&gt;
&lt;p&gt;数据卷(文件或目录)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
    -v /&lt;span&gt;data
    &lt;/span&gt;-v src:dst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据卷容器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
    --volumes-from
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：挂载数据卷在容器宿主机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -v /data:/usr/share/nginx/&lt;span&gt;html nginx:latest
884b2c093c5c59897bd55b0dcec36c882abdc99134f8fffed4cb5decda17327d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建数据卷&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 data]# docker volume &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
DRIVER              VOLUME NAME
local               qingge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;手动将容器保存为镜像（制作镜像）&lt;/h2&gt;
&lt;p&gt;命令：docker commit&lt;/p&gt;
&lt;h3&gt;特权容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run --privileged  -ti -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container=docker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  -v /sys/fs/cgroup:/sys/fs/cgroup  centos:latest  /usr/sbin/init
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;保存为镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker commit ebfdf46f9f12 centos6-&lt;span&gt;ssh&lt;/span&gt;&lt;span&gt;
sha256:b917ca49263af6d4435dc3c144c214af29c56dad7256e4de7978ffd9a7e24f39
[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos6&lt;/span&gt;-&lt;span&gt;ssh&lt;/span&gt;         latest              b917ca49263a        &lt;span&gt;5&lt;/span&gt;&lt;span&gt; seconds ago       315MB
httpd               &lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;                 2e202f453940        &lt;span&gt;5&lt;/span&gt;&lt;span&gt; days ago          179MB
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; weeks ago         108MB
centos              &lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt; months ago        195MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;dockerfile自动构建docker镜像&lt;/h2&gt;
&lt;p&gt;dockerfile主要组成部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    基础镜像信息       FROM：centos:&lt;span&gt;6.8&lt;/span&gt;&lt;span&gt;
    制作镜像操作指令   RUN &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; openssh-server -&lt;span&gt;y
    容器启动时执行指令 CMD [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dockerfile常用指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    FROM        &lt;span&gt;这个镜像的妈妈是谁？  （指定基础镜像）&lt;/span&gt;
    MAINTAINER &lt;span&gt; 告诉别人，谁负责养它？（指定维护者信息，可以没有）&lt;/span&gt;
    RUN         &lt;span&gt;你想让它干啥         （在命令前面加上RUN即可）&lt;/span&gt;
    ADD         &lt;span&gt;给它点创业资金       （COPY文件，会自动解压）&lt;/span&gt;
    WORKDIR     &lt;span&gt;我是cd,今天刚化了妆  （设置当前工作目录）&lt;/span&gt;
    VOLUME      &lt;span&gt;给它一个存放行李的地方（设置卷，挂载主机目录）&lt;/span&gt;
    EXPOSE      &lt;span&gt;它要打开的门是啥     （指定对外的端口）&lt;/span&gt;
    CMD         &lt;span&gt;奔跑吧，兄弟！       （指定容器启动后的要干的事情）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dockerfile其他指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    COPY             &lt;span&gt;复制文件&lt;/span&gt;
    ENV             &lt;span&gt; 环境变量&lt;/span&gt;
    ENTRYPOINT       &lt;span&gt;容器启动后执行的命令&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;此处在CMD处执行的是一个脚本，脚本内容大致是开启ssh服务并让ssh服务夯住，参数是-D，开启httpd服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;cat&lt;/span&gt; /opt/base/&lt;span&gt;Dockerfile 
FROM centos:&lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;&lt;span&gt;
RUN &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;wget&lt;/span&gt; &lt;span&gt;unzip&lt;/span&gt; php* httpd openssh-server -&lt;span&gt;y
RUN cd &lt;/span&gt;/var/www/html/ &amp;amp;&amp;amp; &lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;static.kodcloud.com/update/download/kodexplorer4.25.zip &amp;amp;&amp;amp; unzip kodexplorer4.25.zip &lt;/span&gt;
RUN &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root:123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;|&lt;span&gt;chpasswd
RUN &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ServerName 127.0.0.1:80&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt;&amp;gt;/etc/httpd/conf/&lt;span&gt;httpd.conf
RUN &lt;/span&gt;/etc/init.d/&lt;span&gt;sshd start
RUN &lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; -Rf &lt;span&gt;777&lt;/span&gt; /var/www/html/&lt;span&gt;
RUN &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#Options Indexes FollowSymLinks#Options FollowSymLinks#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/httpd/conf/httpd.conf -&lt;span&gt;i
COPY init.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt; /init.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
EXPOSE &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp
EXPOSE &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;/&lt;span&gt;tcp
CMD [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/init.sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
[root@docker&lt;/span&gt;-node1 ~]# ll /opt/base/&lt;span&gt;
total &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;528&lt;/span&gt; Feb  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;06&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;&lt;span&gt; Dockerfile
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;82&lt;/span&gt; Feb  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt; init.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
[root@docker&lt;/span&gt;-node1 ~]# docker image build -t centos6-yun .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker image build -t centos6-yun /opt/base/Dockerfile&lt;/p&gt;
&lt;p&gt;docker image build -t 指定一个自动构建的镜像标签 Dockerfile文件路径&lt;/p&gt;
&lt;p&gt;参考其他的dockerfile&lt;/p&gt;
&lt;p&gt;官方dockerfile或者时速云镜像广场&lt;/p&gt;
&lt;h2&gt;容器间的互联&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx
    docker run &lt;/span&gt;-it --link quirky_brown:web01 qstack/centos-&lt;span&gt;ssh&lt;/span&gt; /bin/&lt;span&gt;bash
    &lt;/span&gt;&lt;span&gt;ping&lt;/span&gt; web01
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用docker运行zabbix-server&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
docker run --name mysql-server -&lt;span&gt;t \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d mysql:&lt;span&gt;5.7&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--character-set-server=utf8 --collation-server=&lt;span&gt;utf8_bin

docker run &lt;/span&gt;--name zabbix-java-gateway -&lt;span&gt;t \
      &lt;/span&gt;-d zabbix/zabbix-java-&lt;span&gt;gateway:latest

docker run &lt;/span&gt;--name zabbix-server-mysql -&lt;span&gt;t \
      &lt;/span&gt;-e DB_SERVER_HOST=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql-server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e ZBX_JAVAGATEWAY=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix-java-gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--link mysql-&lt;span&gt;server:mysql \
      &lt;/span&gt;--link zabbix-java-gateway:zabbix-java-&lt;span&gt;gateway \
      &lt;/span&gt;-p &lt;span&gt;10051&lt;/span&gt;:&lt;span&gt;10051&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d zabbix/zabbix-server-&lt;span&gt;mysql:latest

docker run &lt;/span&gt;--name zabbix-web-nginx-mysql -&lt;span&gt;t \
      &lt;/span&gt;-e DB_SERVER_HOST=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql-server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--link mysql-&lt;span&gt;server:mysql \
      &lt;/span&gt;--link zabbix-server-mysql:zabbix-&lt;span&gt;server \
      &lt;/span&gt;-p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d zabbix/zabbix-web-nginx-mysql:latest
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;普通的registry&lt;/h2&gt;
&lt;h3&gt;启动registry容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run -d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; --restart=always --name registry -v /opt/myregistry:/var/lib/registry  registry
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改配置文件&lt;/h3&gt;
&lt;p&gt;/etc/docker/daemon.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;registry-mirrors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://registry.docker-cn.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insecure-registries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.0.0.11:5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&quot;insecure-registries&quot;: [&quot;10.0.0.11:5000&quot;]   &lt;span&gt;---- 将https转换成http&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;重启docker服务&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
systemctl restart docker.service
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为镜像打标签&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker tag centos6-yun:latest &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;push推送镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;带basic认证的registry&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /opt/registry-var/auth/ -&lt;span&gt;p
htpasswd  &lt;/span&gt;-Bbn oldboy &lt;span&gt;123456&lt;/span&gt;  &amp;gt;&amp;gt; /opt/registry-var/auth/&lt;span&gt;htpasswd
docker run &lt;/span&gt;-d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; -v /opt/registry-var/auth/:/auth/ -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH=htpasswd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;实操&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; httpd-tools.x86_64 -&lt;span&gt;y

[root@docker&lt;/span&gt;-node1 ~]# &lt;span&gt;mkdir&lt;/span&gt; /opt/registry-var/auth/ -&lt;span&gt;p
ASSWD_PATH&lt;/span&gt;=/auth/htpasswd registry&lt;br/&gt;[root@docker-node1 ~]# htpasswd  -Bbn erlianzhang &lt;span&gt;123456&lt;/span&gt; d&amp;gt;&amp;gt; /opt/registry-var/auth/&lt;span&gt;htpassw 
[root@docker&lt;/span&gt;-node1 ~]# docker run -d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; -v /opt/registry-var/auth/:/auth/ -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH=htpasswd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/&lt;span&gt;htpasswd registry
589820e671fa51114bf9ccf143375bce7351a80f7035e571f4e8524a1096edbb
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;ps&lt;/span&gt;&lt;span&gt; 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
589820e671fa        registry            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/entrypoint.sh /etc…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;11&lt;/span&gt; seconds ago      Up &lt;span&gt;11&lt;/span&gt; seconds       &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;-&amp;gt;&lt;span&gt;5000&lt;/span&gt;/&lt;span&gt;tcp   confident_visvesvaraya
[root@docker&lt;/span&gt;-node1 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest   &lt;span&gt;---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 不验证就不能上传&lt;/span&gt;
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun]
f8508dc392c8: Preparing 
f85b7909a4bc: Preparing 
8b2d1868cde8: Preparing 
ad87982f4b1b: Preparing 
ac521dbe8cd3: Preparing 
3d169f2d5cff: Waiting 
6bad9d62f12a: Waiting 
f28db075daf0: Waiting 
e00c9229b481: Waiting 
no basic auth credentials
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;login&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;    &lt;span&gt;---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 验证一下&lt;/span&gt;
Username: erlianzhang
Password: 
Login Succeeded
[root@docker&lt;/span&gt;-node1 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun:latest  &lt;span&gt; --- 再次上传就可以了&lt;/span&gt;
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun]
f8508dc392c8: Pushed 
f85b7909a4bc: Pushed 
8b2d1868cde8: Pushed 
ad87982f4b1b: Pushed 
ac521dbe8cd3: Pushed 
3d169f2d5cff: Pushed 
6bad9d62f12a: Pushed 
f28db075daf0: Pushed 
e00c9229b481: Pushed 
latest: digest: sha256:46e0409381ef7c5922bc5c37b5888015ab415c0e7248e463323db361318e93bf size: &lt;/span&gt;&lt;span&gt;2205&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;cat&lt;/span&gt; .docker/&lt;span&gt;config.json 
{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;auths&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.0.0.11:5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;auth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b2xkYm95OjEyMzQ1Ng==&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HttpHeaders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Docker-Client/17.12.0-ce (linux)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;docker-compose简介&lt;/h2&gt;
&lt;p&gt;一句话：docker-compose是用来做docker的多容器控制&lt;/p&gt;
&lt;h3&gt;docker-compose 是什么&lt;/h3&gt;
&lt;p&gt;docker-compose是一个用来把docker自动化的东西。&lt;/p&gt;
&lt;p&gt;有了docker-compose你可以把所有繁复的docker操作全都一条命令，自动化的完成。&lt;/p&gt;
&lt;p&gt;详细指令参考：&lt;a href=&quot;https://www.jianshu.com/p/2217cfed29d7&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/2217cfed29d7&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装python环境&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y python2-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细指令：&lt;a href=&quot;http://www.jianshu.com/p/2217cfed29d7&quot; target=&quot;_blank&quot;&gt;http://www.jianshu.com/p/2217cfed29d7&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;配置pip加速&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; .pip
[root@docker&lt;/span&gt;-node1 ~]# vim ~/.pip/&lt;span&gt;pip.conf
[global]
index&lt;/span&gt;-url = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/pypi/simple/&lt;/span&gt;
&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt;]
trusted&lt;/span&gt;-host=&lt;span&gt;mirrors.aliyun.com&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip &lt;span&gt;install&lt;/span&gt; docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;p&gt;该配置文件是部署wordpress博客网站的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd my_wordpress/
&lt;span&gt;vi&lt;/span&gt; docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

services:
   db:
     image: mysql:&lt;/span&gt;&lt;span&gt;5.7&lt;/span&gt;&lt;span&gt;
     volumes:
       &lt;/span&gt;- /data/db_data:/var/lib/&lt;span&gt;mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       &lt;/span&gt;-&lt;span&gt; db
     image: wordpress:latest
     volumes:
       &lt;/span&gt;- /data/web_data:/var/www/&lt;span&gt;html
     ports: 
       &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8000:80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动服务&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#启动
docker&lt;/span&gt;-&lt;span&gt;compose up
#后台启动
docker&lt;/span&gt;-compose up -d
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;灰度重启容器，防止因为更新业务全部关闭容器&lt;/p&gt;
&lt;h2&gt;安装haproxy&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; haproxy -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;p&gt;vi /etc/haproxy/haproxy.cfg&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global
    log         &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt; local2
    &lt;/span&gt;&lt;span&gt;chroot&lt;/span&gt;      /var/lib/&lt;span&gt;haproxy
    pidfile     &lt;/span&gt;/var/run/&lt;span&gt;haproxy.pid
    maxconn     &lt;/span&gt;&lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
    user        haproxy
    group       haproxy
    daemon
    stats socket &lt;/span&gt;/var/lib/haproxy/&lt;span&gt;stats level admin
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http&lt;/span&gt;-server-&lt;span&gt;close
    option forwardfor       except &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
    option                  redispatch
    retries                 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    timeout http&lt;/span&gt;-&lt;span&gt;request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http&lt;/span&gt;-keep-&lt;span&gt;alive 10s
    timeout check           10s
    maxconn                 &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
listen stats
    mode http
    bind &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;8888&lt;/span&gt;&lt;span&gt;
    stats enable
    stats uri     &lt;/span&gt;/haproxy-&lt;span&gt;status 
    stats auth    admin:&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;
frontend frontend_www_example_com
    bind &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;8000&lt;/span&gt;&lt;span&gt;
    mode http
    option httplog
    log global
    default_backend backend_www_example_com
backend backend_www_example_com
    option forwardfor header X&lt;/span&gt;-REAL-&lt;span&gt;IP
    option httpchk HEAD &lt;/span&gt;/ HTTP/&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
    balance roundrobin
    server web&lt;/span&gt;-node1  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;32768&lt;/span&gt; check inter &lt;span&gt;2000&lt;/span&gt; rise &lt;span&gt;30&lt;/span&gt; fall &lt;span&gt;15&lt;/span&gt;&lt;span&gt;
    server web&lt;/span&gt;-node2  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;32769&lt;/span&gt; check inter &lt;span&gt;2000&lt;/span&gt; rise &lt;span&gt;30&lt;/span&gt; fall &lt;span&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
systemctl start haproxy
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;安装socat&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; socat.x86_64 -&lt;span&gt;y
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;disable server backend_www_example_com/web-node3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;|socat stdio /var/lib/haproxy/&lt;span&gt;stats
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enable server backend_www_example_com/web-node3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;|socat stdio /var/lib/haproxy/stats
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用测试页测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
    &amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;PHP测试&amp;lt;/title&amp;gt;
    &amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;?php  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;Hello World &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; ?&amp;gt;
        &amp;lt;?php  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问的服务器地址是:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;fontcolor=red&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$_SERVER[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_ADDR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问的服务器域名是:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;fontcolor=red&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$_SERVER[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302202024055-1443649308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;不为容器配置任何网络功能，没有网络 --net=none&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Container&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;与另一个运行中的容器共享Network Namespace，--net=container:containerID&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;与主机共享Network Namespace，--net=host&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Bridge&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Docker设计的NAT网络模型&lt;strong&gt;（默认类型）&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt;默认docker网络隔离基于网络命名空间，在物理机上创建docker容器时会为每一个docker容器分配网络命名空间，并且把容器IP桥接到物理机的虚拟网桥上。&lt;/p&gt;
&lt;h2&gt;不为容器配置网络功能 &lt;/h2&gt;
&lt;p&gt;此模式下创建容器是不会为容器配置任何网络参数的，如：容器网卡、IP、通信路由等，全部需要自己去配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network none busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt; 
/&lt;span&gt; # ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;与其他容器共享网络配置(Container）&lt;/h2&gt;
&lt;p&gt;此模式和host模式很类似，只是此模式创建容器共享的是其他容器的IP和端口而不是物理机，此模式容器自身是不会配置网络和端口，创建此模式容器进去后，你会发现里边的IP是你所指定的那个容器IP并且端口也是共享的，而且其它还是互相隔离的，如进程等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network container:mywordpress_db_1  busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt; 
/&lt;span&gt; # ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;: eth0@if106: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/ether &lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:ac:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt;&lt;span&gt; brd ff:ff:ff:ff:ff:ff
    inet &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;0.3&lt;/span&gt;/&lt;span&gt;16&lt;/span&gt; brd &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;&lt;span&gt; scope global eth0
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;使用宿主机网络&lt;/h2&gt;
&lt;p&gt;此模式创建的容器没有自己独立的网络命名空间，是和物理机共享一个Network Namespace，并且共享物理机的所有端口与IP，并且这个模式认为是不安全的。、&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network host  busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看网络列表&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker01 ~&lt;span&gt;]# docker network list 
NETWORK ID          NAME                  DRIVER              SCOPE
b15e8a720d3b        bridge                bridge              local
345d65b4c2a0        host                  host                local
bc5e2a32bb55        mywordpress_default   bridge              local
ebf76eea91bb        none                  &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;                local
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;用PIPEWORK为docker容器配置独立IP&lt;/h2&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;http://blog.csdn.net/design321/article/details/48264825&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/design321/article/details/48264825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a href=&quot;https://github.com/jpetazzo/pipework&quot; target=&quot;_blank&quot;&gt;https://github.com/jpetazzo/pipework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;宿主环境：centos7.2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、安装pipework&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/jpetazzo/pipework/archive/master.zip&lt;/span&gt;
&lt;span&gt;unzip&lt;/span&gt; master.&lt;span&gt;zip&lt;/span&gt;
&lt;span&gt;cp&lt;/span&gt; pipework-master/pipework  /usr/local/bin/
&lt;span&gt;chmod&lt;/span&gt; +x /usr/local/bin/pipework
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、配置网桥连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装桥接工具&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; bridge-utils.x86_64 -y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;修改网卡配置，实现桥接&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;# 修改eth0配置，让br0实现桥接&lt;/span&gt;
[root@docker01 &lt;/span&gt;~]# &lt;span&gt;cat&lt;/span&gt; /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;eth0
TYPE&lt;/span&gt;=&lt;span&gt;Ethernet
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static
NAME&lt;/span&gt;=&lt;span&gt;eth0
DEVICE&lt;/span&gt;=&lt;span&gt;eth0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
BRIDGE&lt;/span&gt;=&lt;span&gt;br0

[root@docker01 &lt;/span&gt;~]# &lt;span&gt;cat&lt;/span&gt; /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;br0
TYPE&lt;/span&gt;=&lt;span&gt;Bridge
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static
NAME&lt;/span&gt;=&lt;span&gt;br0
DEVICE&lt;/span&gt;=&lt;span&gt;br0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
IPADDR&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
NETMASK&lt;/span&gt;=&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;&lt;span&gt;
DNS1&lt;/span&gt;=&lt;span&gt;223.5&lt;/span&gt;.&lt;span&gt;5.5&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
# 重启网络&lt;/span&gt;
[root@docker01 &lt;/span&gt;~]# /etc/init.d/network restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、运行一个容器镜像测试：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pipework br0 $(docker run -d -it -p &lt;span&gt;6880&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; --name  httpd_pw httpd) &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在其他主机上测试端口及连通性&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# curl &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;span&gt;
[root@docker01 &lt;/span&gt;~]# &lt;span&gt;ping&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt; -c &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
PING &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt; (&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;) &lt;span&gt;56&lt;/span&gt;(&lt;span&gt;84&lt;/span&gt;&lt;span&gt;) bytes of data.
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; bytes from &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;: icmp_seq=&lt;span&gt;1&lt;/span&gt; ttl=&lt;span&gt;64&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;=&lt;span&gt;0.043&lt;/span&gt; ms
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、再运行一个容器，设置网路类型为none&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pipework br0 $(docker run -d -it --net=none --name test httpd:&lt;span&gt;2.4&lt;/span&gt;) &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.221&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;进行访问测试&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# curl &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.221&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、重启容器后需要再次指定：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pipework br0 testduliip  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.113&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.1&lt;/span&gt;&lt;span&gt;
pipework br0 testduliip01  &lt;/span&gt;&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.112&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Docker跨主机通信之macvlan&lt;/h2&gt;
&lt;h3&gt;创建macvlan网络&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker network create --driver macvlan --subnet &lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; --gateway &lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt; -o parent=eth0 macvlan_1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;设置eth0的网卡为混杂模式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ip link set eth0 promisc on
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建使用macvlan网络的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -it --network macvlan_1 --ip=&lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.210&lt;/span&gt; busybox:latest /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基于macvlan网络，还存有overlay网络&lt;/p&gt;
&lt;p&gt;Dcoker跨主机通信之overlay 参考文档：&lt;a href=&quot;http://www.cnblogs.com/CloudMan6/p/7270551.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/CloudMan6/p/7270551.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302205803829-1874030209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Harbor 是一个企业级的 Docker Registry，可以实现 images 的私有存储和日志统计权限控制等功能，并支持创建多项目(Harbor 提出的概念)，基于官方 Registry V2 实现。 通过地址：&lt;a href=&quot;https://github.com/vmware/harbor/releases&quot; target=&quot;_blank&quot;&gt;https://github.com/vmware/harbor/releases&lt;/a&gt; 可以下载最新的版本。  官方提供了两种版本：在线版和离线版。&lt;/p&gt;
&lt;h2&gt;安装步骤&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;容器管理&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 harbor]# pwd
/opt/harbor
[root@docker01 harbor]# docker-compose stop
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第一步：安装docker和docker-compose&lt;/h3&gt;
&lt;p&gt;下载harbor-offline-installer-v1.3.0.tgz&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /opt &amp;amp;&amp;amp; https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.3.0.tgz
tar xf harbor-offline-installer-v1.3.0.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第二步：修改主机及web界面密码&lt;/h3&gt;
&lt;p&gt;修改harbor.cfg配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@docker01 harbor]# vim harbor.cfg 
    ···
    &lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt; = &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
    harbor_admin_password &lt;/span&gt;=&lt;span&gt; 123456
    ···&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第三步：执行install.sh&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 harbor]# ./&lt;span&gt;install&lt;/span&gt;.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第四步：web登陆测试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302204959846-613224933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302204448705-678832972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 镜像推送到仓库的指定项目&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker02 ~]# docker  tag centos:&lt;span&gt;6.8&lt;/span&gt;  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
[root@docker02 &lt;/span&gt;~&lt;span&gt;]#  
[root@docker02 &lt;/span&gt;~&lt;span&gt;]# docker images 
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
busybox                     latest              5b0d59026729        &lt;/span&gt;&lt;span&gt;8&lt;/span&gt; days ago          &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.15MB
&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;   &lt;span&gt;1.0&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt;&lt;span&gt; months ago        195MB
centos                      &lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt;&lt;span&gt; months ago        195MB
[root@docker02 &lt;/span&gt;~]# docker &lt;span&gt;login&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
Username: admin
Password: 
Login Succeeded&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;推送镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker02 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;&lt;span&gt; 
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]
e00c9229b481: Pushing  &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;.53MB/&lt;span&gt;194&lt;/span&gt;.5MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 转载注明出处，写这篇很累！！！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:55:00 +0000</pubDate>
<dc:creator>酷酷的二连长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyq863987322/p/8494969.html</dc:identifier>
</item>
<item>
<title>css渲染（二） 文本 - 柴小智</title>
<link>http://www.cnblogs.com/chaixiaozhi/p/8495066.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaixiaozhi/p/8495066.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、文本样式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;首行缩进　　text-indent&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　首行缩进是将段落的第一行缩进，这是常用的文本格式化效果。一般地，中文写作时开头空两格。&lt;span class=&quot;Apple-tab-span&quot;&gt;[注意]该属性可以为负值；应用于: 块级元素(包括block和inline-block)　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &amp;lt;div&amp;gt;
            &amp;lt;p style=&quot;&lt;span&gt;text-indent: 2em&lt;/span&gt;&quot;&amp;gt;亚冠联赛是亚洲最高等级的俱乐部赛事&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;相当于欧洲的欧洲冠军联赛及南美洲的南美解放者杯&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302200149295-107411050.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;anchor3&quot;&gt;&lt;strong&gt;字间隔  word-spacing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　字间隔是指&lt;span&gt;单词间距&lt;/span&gt;，用来设置文字或单词之间的间距。&lt;span&gt;[注意]字间隔可为负值；单词之间的间距 = word-spacing + 空格大小；必须加空格才生效&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;div&amp;gt;
        &amp;lt;div style=&quot;width: 100px;&quot;&amp;gt;购买数量：&amp;lt;/div&amp;gt;
        &amp;lt;div style=&quot;width: 100px;&lt;span&gt;word-spacing: 27px&lt;/span&gt;&quot;&amp;gt;运 费：&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302194716862-766169734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字母间隔 letter-spacing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　字母间隔是指&lt;span&gt;字符间距&lt;/span&gt;，[注意]字母间隔可为负值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;div style=&quot;width: 200px;&lt;span&gt;letter-spacing: 5px&lt;/span&gt;&quot;&amp;gt;购买数量：&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302195147160-1859523181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p id=&quot;anchor5&quot;&gt;&lt;strong&gt;文本转换　text-transform&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　文本转换用于处理英文的大小写转换&lt;/p&gt;
&lt;p&gt;　　值: uppercase(全大写) | lowercase(全小写) | capitalize(首字母大写) | none | inherit&lt;/p&gt;
&lt;p&gt;　　初始值: none&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;div style=&quot;text-transform: uppercase&quot;&amp;gt;test one&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;anchor6&quot;&gt;&lt;strong&gt;文本修饰　text-decoration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　文本修饰用于为文本提供修饰线　　[注意]文本修饰线的颜色与文本颜色相同&lt;/p&gt;
&lt;p&gt;　　值: none | [underline(下划线) || overline(上划线) || line-through(中划线)] | inherit&lt;/p&gt;
&lt;p&gt;　　初始值: none&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;div style=&quot;text-decoration: underline&quot;&amp;gt;test one&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 空白符　　white-space&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　空白符是指空格、制表符和回车；HTML默认已经把所有空白符合并成一个空格&lt;/p&gt;
&lt;p&gt;white-space&lt;/p&gt;
&lt;p&gt;　　值: normal | nowrap | pre | pre-wrap | pre-line | inherit&lt;/p&gt;
&lt;p&gt;　　初始值: normal&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
normal: 合并空白符，允许自动换行
&lt;span&gt;nowrap: 合并空白符，不允许自动换行&lt;/span&gt;
pre-line: 合并空白符(不包括换行符)，允许自动换行
pre: 不合并空白符，不允许自动换行
pre-wrap: 不合并空白符，允许自动换行(在pre基础上，保留自动换行) 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;div style=&quot;width: 200px;white-space: nowrap&quot;&amp;gt;&lt;span&gt;
        They can stay 72-hours
        within the Shandong      province after they have entered China via the Qingdao International Airport.
    &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302201216183-821425609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p id=&quot;anchor2&quot;&gt;&lt;strong&gt;文本换行　word-wrap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　浏览器自身带有文本自动换行的功能，文本容器的右侧可以实现自动换行&lt;/p&gt;
&lt;p&gt;　　对于英文来说，浏览器会在半角空格或连字符的地方自动换行，而不会在单词的中间突然换行&lt;/p&gt;
&lt;p&gt;　　对于中文来说，可以在任何一个文字后面换行，但浏览器碰到标点符号时，通常将标点符号以及其前一个文字作为一个整体进行换行。&lt;/p&gt;
&lt;p&gt;word-wrap&lt;/p&gt;
&lt;p&gt;　　word-wrap属性用来实现长单词或URL地址的自动换行&lt;/p&gt;
&lt;p&gt;　　值: normal | break-word&lt;/p&gt;
&lt;p&gt;　　初始值: normal&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
word-wrap:normal(浏览器只在半角空格或连字符的地方进行换行)
word-wrap:break-word&lt;span&gt;(截断单词换行，长单词从下一行开始)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;[注意]当white-space的值是nowrap或pre时，word-break和word-wrap属性都失效&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &amp;lt;div style=&quot;width: 50px; word-wrap: break-word&quot;&amp;gt;&lt;span&gt;
        abc
        fffffffffffffffffff
        jkl
    &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 不加的时候　　　　　　　　　　　　加了的时候&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302202157617-1299631054.png&quot; alt=&quot;&quot;/&gt;　　　　　　  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302202231325-1541293459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、文本溢出　　&lt;/strong&gt;&lt;strong&gt;text-overflow&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        长英文
        fffffffffffffffffff
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        .text&lt;/span&gt;{&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 80px&lt;/span&gt;;&lt;span&gt;
            background&lt;/span&gt;:&lt;span&gt; red&lt;/span&gt;;&lt;span&gt;
            overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
            white-space&lt;/span&gt;:&lt;span&gt; nowrap&lt;/span&gt;;&lt;span&gt;
            text-overflow&lt;/span&gt;:&lt;span&gt; ellipsis&lt;/span&gt;;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不加的时候　　　　　　　　　　加了的时候&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302204558997-1117349611.png&quot; alt=&quot;&quot;/&gt;  　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302204625136-1154179699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、文本阴影　　text-shadow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　类似于盒子阴影，文本阴影也有x轴偏移、y轴偏移、模糊半径和阴影颜色这四个值，但是并没有阴影尺寸和内部阴影这两个值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;text-shadow&lt;/p&gt;
&lt;p&gt;　　值: none | (h-shadow v-shadow blur color)+&lt;/p&gt;
&lt;p&gt;　　初始值: none&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
h-shadow: 水平阴影位置(必须)
v-shadow: 垂直阴影位置(必须)
blur:     模糊距离(该值不能为负值，可选)
color:    阴影颜色，默认和文本颜色一致(可选) 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试文字&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        .text&lt;/span&gt;{&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 100px&lt;/span&gt;;&lt;span&gt;
            height&lt;/span&gt;:&lt;span&gt; 100px&lt;/span&gt;;&lt;span&gt;
            text-shadow&lt;/span&gt;:&lt;span&gt; 2px 2px 3px green&lt;/span&gt;;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201803/1047894-20180302205208953-1931746866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 12:54:00 +0000</pubDate>
<dc:creator>柴小智</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chaixiaozhi/p/8495066.html</dc:identifier>
</item>
<item>
<title>Jquery就是这么简单 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8495025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8495025.html</guid>
<description>&lt;p&gt;Jquey就是一款&lt;strong&gt;跨主流浏览器的JavaScript库，简化JavaScript对HTML操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就是封装了JavaScript，能够简化我们写代码的一个JavaScript库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我觉得非常重要的理由就是：&lt;strong&gt;它能够兼容市面上主流的浏览器，&lt;/strong&gt;我们学习AJAX就知道了，IE和FireFox获取异步对象的方式是不一样的，而Jquery能够屏蔽掉这些不兼容的东西...&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;（1）&lt;strong&gt;写少代码,做多事情&lt;/strong&gt;【write less do more】&lt;/li&gt;
&lt;li&gt;（2）免费，开源且轻量级的js库，容量很小&lt;/li&gt;
&lt;li&gt;注意：项目中，提倡引用min版的js库&lt;/li&gt;
&lt;li&gt;（3）兼容市面上主流浏览器，例如 IE，Firefox，Chrome&lt;/li&gt;
&lt;li&gt;注意：&lt;strong&gt;jQuery不是将所有JS全部封装，只是有选择的封装&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;（4）能够处理HTML/JSP/XML、CSS、DOM、事件、实现动画效果，也能提供异步AJAX功能&lt;/li&gt;
&lt;li&gt;（5）文档手册很全，很详细&lt;/li&gt;
&lt;li&gt;（6）成熟的插件可供选择&lt;/li&gt;
&lt;li&gt;（7）提倡对主要的html标签提供一个id属性，但不是必须的&lt;/li&gt;
&lt;li&gt;（8）&lt;strong&gt;出错后，有一定的提示信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;（9）不用再在html里面通过&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签插入一大堆js来调用命令了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript定位到HTML的控件有三种基本的方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;（A）通过ID属性：document.getElementById()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;（B）通过NAME属性：document.getElementsByName()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;（C）通过标签名：document.getElementsByTagName()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们发现，&lt;strong&gt;JavaScript的方法名太长了，不易于书写代码&lt;/strong&gt;......&lt;/p&gt;
&lt;h2 id=&quot;section&quot;&gt;封装优化&lt;/h2&gt;
&lt;p&gt;这些方法名太长了，获取ID属性、NAME属性、标签名属性的控件也用不着三个方法，我们定义下规则就好了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;传入的参数是&quot;#&quot;号开头的字符串，那么就是id属性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传入的参数是没有&quot;#&quot;号开头的字符串，也没有前缀修饰的字符串就是标签名属性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;到这里，我们就可以&lt;strong&gt;根据传入的参数判断它是获取ID属性的控件还是标签名的控件了&lt;/strong&gt;。在内部还是调用document.getElementById()这些方法。我们&lt;strong&gt;真正在使用的时候直接写上我们自定义规则的字符串就可以获取对应的控件了。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
                //$()表示定位指定的标签
                function $(str){
                        //获取str变量的类型
                        var type = typeof(str);
                        //如果是string类型的话
                        if(type == &quot;string&quot;){
                                //截取字符串的第一个字符
                                var first = str.substring(0,1);
                                //如果是#号的话
                                if(&quot;#&quot; == first){
                                        //获取#号之后的所有字符串
                                        var end = str.substring(1,str.length);
                                        //根据id定位标签
                                        var element = document.getElementById(end);
                                        //如果找到了
                                        if(element != null){
                                                //返回标签
                                                return element;
                                        }else{
                                                alert(&quot;查无此标签&quot;);
                                        }
                                }else{
                                
                                }
                        }else{
                                alert(&quot;参数必须是字符串类型&quot;);
                        }
                }
        &amp;lt;/script&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;用JavaScript语法创建的对象叫做JavaScript对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用JQurey语法创建的对象叫做JQuery对象&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Jquery对象只能调用Jquery对象的API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript对象只能调用JavaScript对象的API&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170518190422448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JQuery对象与JavaScript对象是可以互相转化的&lt;/strong&gt;，一般地，由于Jquery用起来更加方便，我们都是&lt;strong&gt;将JavaScript对象转化成Jquery对象&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;jqueryjavascript-1&quot;&gt;Jquery转成JavaScript对象&lt;/h2&gt;
&lt;p&gt;在Jquery中对象都是当成是数组的。因此Jquery转成JavaScript对象语法如下：&lt;strong&gt;获取数组的下标，出来的结果就是JavaScript对象了。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;jQuery对象[下标，从0开始]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jQuery对象.get(下标，从0开始)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;再次重申：&lt;strong&gt;Jquery对象只能调用Jquery对象的API，JavaScript对象只能调用JavaScript对象的API&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;javascriptjquery&quot;&gt;JavaScript对象转成Jquery&lt;/h2&gt;
&lt;p&gt;值得注意的是：&lt;strong&gt;在JavaScript脚本内，this是代表JavaScript对象的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;JavaScript对象转成Jquery对象语法也非常简单：&lt;strong&gt;在$内写上JavaScript对象，就变成了JQuery对象了。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;语法：$(js对象)----&amp;gt;jQuery对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一般地，我们&lt;strong&gt;习惯在Jquery对象的变量前面写上$，表示这是JQuery对象&lt;/strong&gt;\&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jquery提供了九个选择器给我们用来定位HTML控件..&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;目的：通过九类选择器，&lt;strong&gt;能定位web页面（HTML/JSP/XML）中的任何标签&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;（1）基本选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;直接定位id、类修修饰器、标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（2）层次选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;有父子，兄弟关系的标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（3）增强基本选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;大于、小于、等于、奇偶数的标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（4）内容选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;定义内容为XXX、内容中是否有标签器、含有子元素或者文本的标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（5）可见性选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;可见或不可见的标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（6）属性选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;与属性的值相关&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（7）子元素选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;匹配父标签下的子标签&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（8）表单选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;匹配表单对应的控件属性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（9）表单对象属性选择器
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;匹配表单属性具体的值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;通过这九种的选择器，我们基本可以能获取HTML中任何位置的标签。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170518191852016?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;前面使用Jquery的选择器来获取到了HTML标签，&lt;strong&gt;单纯得到标签是没有用的。我们要对其进行增删改，这样在网页上才能做出“动态”的效果&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;JavaScript的DOM能够操作CSS,HTML从而在网页上做出动态的效果..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170519131638899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;**Jquery是对JavaScript的封装，那么Jquery在得到HTML标签后，也有对应的方法来获取标签的内容，动态创建、删除、修改标签。**从而在网页上做出动态的效果&lt;/p&gt;
&lt;h2 id=&quot;section-2&quot;&gt;追加&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;append()：追加到父元素之后&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prepend()：追加到父元素之前&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;after()：追加到兄弟元素之后&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;before()：追加到兄弟元素之前&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;section-3&quot;&gt;查询层次关系&lt;/h2&gt;
&lt;p&gt;我们发现在选择器上就有层次关系的选择器，在API上也有层次关系的方法。&lt;strong&gt;一般地，我们用方法来定位到对应的控件比较多&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;children()：只查询子节点，不含后代节点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next()：下一下兄弟节点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prev()：上一下兄弟节点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;siblings()：上下兄弟节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;css&quot;&gt;css样式&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;addClass()：增加已存在的样式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;removeClass()：删除已存在的样式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasClass()：判断标签是否有指定的样式，true表示有样式，false表示无样式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toggleClass()：如果标签有样式就删除，否则增加样式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;section-4&quot;&gt;动画效果&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;往这些方法下设置参数，那么就可以控制它的隐藏、显示时间&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;show()：显示对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hide()：隐藏对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fadeIn()：淡入显示对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fadeOut()：淡出隐藏对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slideUp()：向上滑动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slideDown()：向下滑动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slideToggle()：上下切换滑动，速度快点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;css-1&quot;&gt;CSS尺寸属性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;直接调用无参就是获取，给指定的参数就是修改&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;offset()：获取对象的left和top坐标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset({top:100,left:200})：将对象直接定位到指定的left和top坐标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;width()：获取对象的宽&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;width(300)：设置对象的宽&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;height()：获取对象的高&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;height(500)：设置对象的高&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;section-5&quot;&gt;标签内容和属性&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;val()：获取value属性的值&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;val(&quot;&quot;)：设置value属性值为&quot;&quot;空串，相当于清空&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;text()：获取HTML或XML标签之间的值&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;text(&quot;&quot;)：设置HTML或XML标签之间的值为&quot;&quot;空串&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;html()：得到标签下HTML的值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;**attr(name,value)：给符合条件的标签添加key-value属性对 **&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;removeAttr()：删除已存在的属性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;section-6&quot;&gt;增删改标签&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;**&lt;code&gt;$(&quot;&amp;lt;div id='xxID'&amp;gt;HTML代码&amp;lt;/div&amp;gt;&quot;)&lt;/code&gt;：创建元素，属性，文本 **&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remove()：删除自已及其后代节点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clone()：只复制样式，不复制行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clone(true)：既复制样式，又复制行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;replaceWith()：替代原来的节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;section-7&quot;&gt;迭代&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;由于Jquery对象都是被看成是一个数组，each()方法就是专门用来操作数组的&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;each()：是jQuery中专用于迭代数组的方法，参数为一个处理函数，this表示当前需要迭代的js对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;JavaScript一大特性就是事件驱动，当用户用了执行了某些动作以后，JavaScript就会响应事件，在事件的方法上，我们就可以对用户的动作“回馈”一些信息给用户！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jquery也对JavaScript事件进行了封装&lt;/strong&gt;，我们看一下以下的API：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;window.onload：在浏览器加载web页面时触发，&lt;strong&gt;可以写多次onload事件，但后者覆盖前者&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ready：在浏览器加载web页面时触发，可以写多次ready事件，&lt;strong&gt;不会后者覆盖前者，依次从上向下执行，我们常用$(函数)简化&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ready和onload同时存在时，二者都会触发执行，ready快于onload&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change：当内容改变时触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;focus：焦点获取&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;select：选中所有的文本值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyup/keydown/keypress：演示在IE和Firefox中获取event对象的不同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mousemove：在指定区域中不断移动触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mouseover：鼠标移入时触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mouseout：鼠标移出时触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;submit：在提交表单时触发，true表示提交到后台，false表示不提交到后台&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;click：单击触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dblclick：双击触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blur：焦点失去&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;值得注意的是：&lt;strong&gt;当用户执行动作的时候，浏览器会自动创建事件对象，传递进去给响应事件的方法【类似与监听器的原理】&lt;/strong&gt;，那么我们在&lt;strong&gt;响应方法上就可以获取一些属性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170519153752298?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们在开始使用JavaScript学习AJAX的时候，创建异步对象时，&lt;strong&gt;需要根据不同的浏览器来创建不同的对象....装载XML文件的时候，也有兼容性的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jquery就很好地屏蔽了浏览器不同的问题，不需要考虑浏览器兼容的问题&lt;/strong&gt;，这是非常非常方便我们开发的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;**$.ajax([options]) **&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;load(url, [data], [callback])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;**$.get(url, [data], [fn], [type]) **&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$post(url, [data], [callback], [type])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serialize()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;前4个方法的功能都是差不多的，都是向服务器发送请求，得到服务器返回的数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后一个是对表单的数据进行封装，将表单的数据封装成JSON格式&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;首先，我们来使用一下load()这个方法吧。&lt;strong&gt;在文档中对它的解释是这样子的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521210742491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我来补充一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一个参数：表示的是要请求的路径&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二个参数：要把哪些参数带过去给服务器端，需要的是JSON格式的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三个参数：回调方法，服务器返回给异步对象的时候，会调用该方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;回调方法也有三个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;回调函数中参数一：backData表示返回的数据，它是js对象&lt;/li&gt;
&lt;li&gt;回调函数中参数二：textStatus表示返回状态的文本描述，例如：success，error，&lt;/li&gt;
&lt;li&gt;回调函数中参数三：xmlHttpRequest表示ajax中的核心对象&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一般地，我们只需要用到第一个参数！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们来使用这个方法来&lt;strong&gt;获取当前的时间&lt;/strong&gt;，对这个方法熟悉一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用load方法的jquery对象，返回结果自动添加到jQuery对象代表的标签中间&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;如果带参数就自动使用post，不带参数自动使用get。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用load方法时，自动进行编码，无需手工编码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;%--
  Created by IntelliJ IDEA.
  User: ozc
  Date: 2017/5/18
  Time: 13:36
  To change this template use File | Settings | File Templates.
--%&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;

&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;$Title$&amp;lt;/title&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  当前时间是：&amp;lt;span id=&quot;time&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;获取当前时间&quot;&amp;gt;

  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

    $(&quot;#button&quot;).click(function () {


      //请求服务器端的路径
      var url = &quot;${pageContext.request.contextPath}/TimeServlet?time?&quot; + new Date().getTime();

      //没有要参数要带过去
      //var sendData = null;

      /*
           * function方法的三个参数：   
               * 第一个参数表示服务器端带回来的数据，是JS对象
               * 第二个参数表示的是返回状态的文字描述【用处不大】
               * 第三个参数表示的是异步对象，一般我们用来看服务器端返回的JSON的值是什么【用处还行】
               *       因为第一个参数返回的是JS对象，因此我们是看不见具体JSON的值是什么，所以有的时候要用第三个参数
       *
       * 值得注意的是：
       *       要想使用第三个参数，就必须把前两个参数给写上！
       *       调用load方法的jquery对象，返回结果自动添加到jQuery对象代表的标签中间
       * */
      $(&quot;#time&quot;).load(url);

    });

  &amp;lt;/script&amp;gt;


  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Servlet代码：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;

    protected void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException, IOException {

        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);

        String date = dateFormat.format(new Date());

        PrintWriter writer = response.getWriter();
        writer.write(date);

        writer.flush();
        writer.close();

    }

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521215411948?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;get&quot;&gt;&lt;code&gt;$.get()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;上面的load()方法，当我们带参数给服务器的时候，就自动转化成post、不带参数的时候就转换成get。&lt;strong&gt;$.get()就是指定是get方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;load()方法是使用Jquery对象来调用的，并且调用过后，会把数据自动填充到Jquery对象的标签中间，而$.get()并不是特定的Jquery对象来调用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$.get(url, [data], [fn], [type])参数和load()是完全类似的，我们在上面的例子中该一下就行了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于$.get()是没有将返回的数据自动填充到标签之中，因此需要手动地添加到指定的标签之中！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;
      $.get(url, function (backData) {

        //得到客户端返回的数据【JS对象】

        $(&quot;#time&quot;).append(backData);
      });

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521220224099?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;post&quot;&gt;&lt;code&gt;$.post()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;math&quot;&gt;.post()和&lt;/span&gt;.get()是十分类似的，只不过是把请求方式改变了，一般情况下，我们有参数传递给服务器的时候，都是用post方式的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用$.post()方法是需要设定编码的，它和load()方法是不一样的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面使用&lt;strong&gt;检查用户名和密码是否合法&lt;/strong&gt;的案例来说明这两个方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;%--
  Created by IntelliJ IDEA.
  User: ozc
  Date: 2017/5/18
  Time: 13:36
  To change this template use File | Settings | File Templates.
--%&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;$Title$&amp;lt;/title&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;%--使用异步操作，表单的form和method都不是必须的，如果指定了，还是会根据后面Jquery的方法和参数来决定--%&amp;gt;
&amp;lt;form&amp;gt;

    &amp;lt;table&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;用户名：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;密码：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;password&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;button&quot; value=&quot;检查&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;span id=&quot;backData&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

    $(&quot;:button&quot;).click(function () {

        var url = &quot;${pageContext.request.contextPath}/UserServlet?time=&quot; + new Date().getTime();

        //要传送过去的数据必须是JSON格式的
        var sendData = {
            username: $(&quot;:text&quot;).val(),
            password: $(&quot;:password&quot;).val()
        };

        $.post(url, sendData, function (backData) {

            //得到返回的数据，填充到相对应的位置
            $(&quot;#backData&quot;).text(backData);

        });


    });


&amp;lt;/script&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Servlet代码：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Created by ozc on 2017/5/21.
 */
@WebServlet(name = &quot;UserServlet&quot;,urlPatterns = &quot;/UserServlet&quot;)
public class UserServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        //设定编码
        request.setCharacterEncoding(&quot;UTF-8&quot;);
        response.setContentType(&quot;text/html;charset=UTF-8&quot;);

        String username = request.getParameter(&quot;username&quot;);
        String password = request.getParameter(&quot;password&quot;);

        String backData = &quot;用户名和密码合法&quot;;
        if (&quot;哈哈&quot;.equals(username) &amp;amp;&amp;amp; &quot;123&quot;.equals(password)) {

            backData = &quot;用户名或密码不合法&quot;;
        }

        response.getWriter().write(backData);

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        this.doPost(request, response);

    }
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521222304580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521222317033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;serialize&quot;&gt;&lt;code&gt;serialize()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;上面在介绍参数的时候已经说了，发送给服务器端的参数是需要JSON格式的，但是呢，&lt;strong&gt;如果我在表单中有很多很多的参数呢？？？那不是要我自己一个一个地去拼接&lt;/strong&gt;？？？？&lt;/p&gt;
&lt;p&gt;于是乎，&lt;strong&gt;Jquery也提供了serialize()这么一个方法，给我们自动把表单中的数据封装成JSON格式的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用之前要注意的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;为每个jQuery对象设置一个name属性，因为name属性会被认为请求参数名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;必须在&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标签元素之内&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;根据上面的例子，我们来使用一下，&lt;strong&gt;我们调用serialize()方法，不自己去拼接JSON&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;%--
  Created by IntelliJ IDEA.
  User: ozc
  Date: 2017/5/18
  Time: 13:36
  To change this template use File | Settings | File Templates.
--%&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;$Title$&amp;lt;/title&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;%--使用异步操作，表单的form和method都不是必须的，如果指定了，还是会根据后面Jquery的方法和参数来决定--%&amp;gt;
&amp;lt;form&amp;gt;
    &amp;lt;table&amp;gt;


        &amp;lt;%--要想使用serialize这个方法，就必须在表单之内，并且给上对应的name属性--%&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;用户名：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;密码：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;password&quot; name=&quot;password&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;button&quot; value=&quot;检查&quot;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;span id=&quot;backData&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

    $(&quot;:button&quot;).click(function () {

        var url = &quot;${pageContext.request.contextPath}/UserServlet?time=&quot; + new Date().getTime();

        //要传送过去的数据必须是JSON格式的
/*        var sendData = {
            username: $(&quot;:text&quot;).val(),
            password: $(&quot;:password&quot;).val()
        };*/

        var sendData = $(&quot;form&quot;).serialize();
        $.post(url, sendData, function (backData) {

            //得到返回的数据，填充到相对应的位置
            $(&quot;#backData&quot;).text(backData);

        });
        
    });


&amp;lt;/script&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170521223037291?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;ajax&quot;&gt;&lt;code&gt;$.ajax()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;对于这个方法，我们又使用二级联动这个案例来讲解吧。我们曾经使用过JavaScript来解析XML、JSON来实现二级联动。这次我使用&lt;strong&gt;Jquery+Struts2+JSON来实现二级联动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$.ajax()这个方法&lt;strong&gt;接收的参数是一个JSON类型&lt;/strong&gt;，JSON里面有几个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;type【请求类型】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;url【请求路径】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data【发送给服务器的数据，也是一个JSON类型】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;success【回调函数】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里遇到的问题：&lt;strong&gt;动态获取选择下拉框的值时候，调用的是val()而不是text()....&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;省份-城市，基于jQuery的AJAX二级联动&amp;lt;/title&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;%--############前台页面##############################--%&amp;gt;
&amp;lt;select name=&quot;province&quot; id=&quot;provinceId&quot;&amp;gt;
    &amp;lt;option&amp;gt;请选择省份&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;广东&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;北京&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;select name=&quot;city&quot; id=&quot;cityId&quot;&amp;gt;
    &amp;lt;option&amp;gt;请选择城市&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;


&amp;lt;%--############监听省份##############################--%&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    $(&quot;#provinceId&quot;).change( function() {

        //每次调用的时候，把城市的值清空，除了第一项
        $(&quot;#cityId option:gt(0)&quot;).remove();


        //得到具体选择的值，讲道理这里应该是test的，可是test()没反应，要用val()
        var province = $(&quot;#provinceId option:selected&quot;).val();

        //如果不是“请选择省份”，才触发事件
        if (&quot;请选择省份&quot; != province) {

            //它接收的是一个JSON类型的数据
            $.ajax(
                    {
                        type: &quot;POST&quot;,
                        url: &quot;${pageContext.request.contextPath}/findCityByProvince?time=&quot; + new Date().getTime(),
                        data: {&quot;province&quot;: province},
                        success: function (backData, aaa, ajax) {

                            //看下服务器带过来的数据是什么样的，然后再对JSON进行解析
                            //alert(ajax.responseText);

                            //得到服务器返回的数据,是一个JSON格式数据
                            var array = backData.city;
                            for(var i=0;i&amp;lt;array.length;i++) {

                                //动态创建option节点，添加到城市下拉框中
                                var $option  = $(&quot;&amp;lt;option&amp;gt;&quot; + array[i] + &quot;&amp;lt;/option&amp;gt;&quot;);
                                $(&quot;#cityId&quot;).append($option);
                            }
                        }
                    }
            );
        }
    });
    
&amp;lt;/script&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
import com.opensymphony.xwork2.ActionSupport;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by ozc on 2017/5/18.
 */
public class ProvinceAction  extends ActionSupport{

    //自动封装数据
    private String province;

    public String getProvince() {
        return province;
    }
    public void setProvince(String province) {
        this.province = province;
    }
    
    //封装城市的集合
    private List&amp;lt;String&amp;gt; city = new ArrayList&amp;lt;&amp;gt;();
    public List&amp;lt;String&amp;gt; getCity() {
        return city;
    }


    public String findCityByProvince() throws Exception {

        if (&quot;广东&quot;.equals(province)) {
            city.add(&quot;广州&quot;);
            city.add(&quot;珠海&quot;);
            city.add(&quot;从化&quot;);
        } else if (&quot;北京&quot;.equals(province)) {
            city.add(&quot;一环&quot;);
            city.add(&quot;二环&quot;);
            city.add(&quot;三环&quot;);
            city.add(&quot;四环&quot;);

        } else {
            System.out.println(&quot;没有你选择的地区&quot;);

        }
        return &quot;ok&quot;;
    }

}

&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Struts.xml配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;

&amp;lt;!DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&amp;gt;


&amp;lt;struts&amp;gt;
   &amp;lt;package name=&quot;province&quot; extends=&quot;json-default&quot; namespace=&quot;/&quot;&amp;gt;

        &amp;lt;global-results&amp;gt;
            &amp;lt;result name=&quot;ok&quot; type=&quot;json&quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;/global-results&amp;gt;
        &amp;lt;action name=&quot;findCityByProvince&quot; class=&quot;ProvinceAction&quot; method=&quot;findCityByProvince&quot;&amp;gt;
        &amp;lt;/action&amp;gt;

    &amp;lt;/package&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170522103847480?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;section-8&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;load()方法是使用Jquery的对象来进行调用的，得到服务器的结果自动会把结果嵌套到所在的标签中。&lt;/li&gt;
&lt;li&gt;get()方法不是使用Jquery对象来调用，因此需要手动把结果放在想要放的位置&lt;/li&gt;
&lt;li&gt;post()方法是用来把参数带过去给服务器的，因此我们需要在Servlet上手动设置编码。用法与get()方法一样&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serialize()是非常好用的一个方法，不需要我们手动去拼接参数，会自动把form表单的参数封装成JSON格式的数据。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;至于$.ajax()方法，实际上就是集合了get()和post()方法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LLBttnf.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0YIBhFH.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XgeyCU7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:37:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8495025.html</dc:identifier>
</item>
<item>
<title>MySQL之表的数据类型 - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/8495001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/8495001.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;官网：https://dev.mysql.com/doc/refman/5.7/en/char.html&lt;/span&gt;
&lt;span&gt;CHAR 和 VARCHAR 是最常使用的两种字符串类型。
一般来说
CHAR(N)用来保存固定长度的字符串，对于 CHAR 类型,N 的范围 为 0 &lt;/span&gt;~ 255&lt;span&gt;
VARCHAR(N)用来保存变长字符类型，对于 VARCHAR 类型,N 的范围为 0 &lt;/span&gt;~ 65 535&lt;span&gt;
CHAR(N)和 VARCHAR(N) 中的 N 都代表字符长度,而非字节长度。
ps：对于 MySQL &lt;/span&gt;4.1 之前的版本,如 MySQL 3.23 和 MySQL 4.0&lt;span&gt;,CHAR(N)和 VARCHAR (N)中的 N 代表字节长度。

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;CHAR类型&lt;/span&gt;
&lt;span&gt;对于 CHAR 类型的字符串,MySQL 数据库会自动对存储列的右边进行填充(Right Padded)操作,直到字符串达到指定的长度 N。而在读取该列时,MySQL 数据库会自动将 填充的字符删除。有一种情况例外,那就是显式地将 SQL_MODE 设置为 PAD_CHAR_TO_ FULL_LENGTH,例如:
mysql&lt;/span&gt;&amp;gt; CREATE TABLE t ( a CHAR(10&lt;span&gt;));
      Query OK, 0 rows affected (&lt;/span&gt;0.03&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt; INSERT INTO t SELECT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      Query OK, &lt;/span&gt;1 row affected (0.03&lt;span&gt; sec)
      Records: &lt;/span&gt;1&lt;span&gt;  Duplicates: 0  Warnings: 0
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SELECT a,HEX(a),LENGTH(a) FROM t\G;
      &lt;/span&gt;*************************** 1. row ***************************&lt;span&gt;
              a: abc
         HEX(a): &lt;/span&gt;616263&lt;span&gt;
      LENGTH (a): &lt;/span&gt;3
      1 row &lt;span&gt;in&lt;/span&gt; set (0.00&lt;span&gt; sec)
      mysql&lt;/span&gt;&amp;gt; SET SQL_MODE=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PAD_CHAR_TO_FULL_LENGTH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      Query OK, 0 rows affected (&lt;/span&gt;0.00&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SELECT a,HEX(a),LENGTH(a) FROM t\G;
      &lt;/span&gt;*************************** 1. row ***************************&lt;span&gt;
              a: abc
         HEX(a): &lt;/span&gt;61626320202020202020&lt;span&gt;
      LENGTH (a): &lt;/span&gt;10
      1 row &lt;span&gt;in&lt;/span&gt; set (0.00&lt;span&gt; sec)

在上述这个例子中,先创建了一张表 t,a 列的类型为 CHAR(&lt;/span&gt;10)。然后通过 INSERT语句插入值“abc”,因为 a 列的类型为 CHAR 型,所以会自动在后面填充空字符串,使其长 度为 10。接下来在通过 SELECT 语句取出数据时会将 a 列右填充的空字符移除,从而得到 值“abc”。通过 LENGTH 函数看到 a 列的字符长度为 3 而非 10&lt;span&gt;。
接着我们将 SQL_MODE 显式地设置为 PAD_CHAR_TO_FULL_LENGTH。这时再通过 SELECT 语句进行查询时,得到的结果是“abc ”,abc 右边有 &lt;/span&gt;7 个填充字符 0x20,并通 过 HEX 函数得到了验证。这次 LENGTH 函数返回的长度为 10。需要注意的是,LENGTH 函数返回的是字节长度,而不是字符长度。对于多字节字符集,CHAR(N)长度的列最多 可占用的字节数为该字符集单字符最大占用字节数 *N。例如,对于 utf8 下,CHAR(10)最 多可能占用 30&lt;span&gt; 个字节。通过对多字节字符串使用 CHAR_LENGTH 函数和 LENGTH 函数, 可以发现两者的不同,示例如下:
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SET NAMES gbk;
     Query OK, 0 rows affected (&lt;/span&gt;0.03&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt; SELECT @a:=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MySQL 技术内幕 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; Query OK, 0 rows affected (0.03&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt; SELECT @a,HEX(@a),LENGTH(@a),CHAR_LENGTH(@a)\G; ***************************** 1. row ****************************&lt;span&gt; a: MySQL 技术内幕
HEX(a): 4D7953514CBCBCCAF5C4DAC4BB
LENGTH (a): &lt;/span&gt;13&lt;span&gt;
CHAR_LENGTH(a): &lt;/span&gt;9
1 row &lt;span&gt;in&lt;/span&gt; set (0.00&lt;span&gt; sec)

变 量 @ a 是 g b k 字 符 集 的 字 符 串 类 型 , 值 为 “ M y S Q L 技 术 内 幕 ”, 十 六 进 制 为 &lt;/span&gt;0x4D7953514CBCBCCAF5C4DAC4BB,LENGTH 函数返回 13,即该字符串占用 13 字节, 因为 gbk 字符集中的中文字符占用两个字节,因此一共占用 13 字节。CHAR_LENGTH 函数 返回 9,很显然该字符长度为 9&lt;span&gt;。



&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;VARCHAR类型&lt;/span&gt;
VARCHAR 类型存储变长字段的字符类型,与 CHAR 类型不同的是,其存储时需要在 前缀长度列表加上实际存储的字符,该字符占用 1 ~ 2 字节的空间。当存储的字符串长度小 于 255 字节时,其需要 1 字节的空间,当大于 255 字节时,需要 2 字节的空间。所以,对 于单字节的 latin1 来说,CHAR(10)和 VARCHAR(10)最大占用的存储空间是不同的, CHAR(10)占用 10 个字节这是毫无疑问的,而 VARCHAR(10)的最大占用空间数是 11 字节,因为其需要 1&lt;span&gt; 字节来存放字符长度。
&lt;/span&gt;-------------------------------------------------&lt;span&gt;
注意 对于有些多字节的字符集类型,其 CHAR 和 VARCHAR 在存储方法上是一样的,同样 需要为长度列表加上字符串的值。对于 GBK 和 UTF&lt;/span&gt;-8 这些字符类型,其有些字符是以 1 字节 存放的,有些字符是按 2 或 3 字节存放的,因此同样需要 1 ~ 2&lt;span&gt; 字节的空间来存储字符的长 度。
&lt;/span&gt;-------------------------------------------------&lt;span&gt;
虽然 CHAR 和 VARCHAR 的存储方式不太相同,但是对于两个字符串的比较,都只比 较其值,忽略 CHAR 值存在的右填充,即使将 SQL _MODE 设置为 PAD_CHAR_TO_FULL_ LENGTH 也一样,例如:
mysql&lt;/span&gt;&amp;gt; CREATE TABLE t ( a CHAR(10), b VARCHAR(10&lt;span&gt;));
    Query OK, 0 rows affected (&lt;/span&gt;0.01&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt; INSERT INTO t SELECT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    Query OK, &lt;/span&gt;1 row affected (0.00&lt;span&gt; sec)
    Records: &lt;/span&gt;1&lt;span&gt;  Duplicates: 0  Warnings: 0
mysql&lt;/span&gt;&amp;gt; SELECT a=&lt;span&gt;b FROM t\G;
    &lt;/span&gt;*************************** 1. row ***************************&lt;span&gt;
    a&lt;/span&gt;=b: 1
    1 row &lt;span&gt;in&lt;/span&gt; set (0.00&lt;span&gt; sec)
    mysql&lt;/span&gt;&amp;gt; SET SQL_MODE=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PAD_CHAR_TO_FULL_LENGTH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    Query OK, 0 rows affected (&lt;/span&gt;0.00&lt;span&gt; sec)
mysql&lt;/span&gt;&amp;gt; SELECT a=&lt;span&gt;b FROM t\G;
    &lt;/span&gt;*************************** 1. row ***************************&lt;span&gt;
    a&lt;/span&gt;=b: 1
    1 row &lt;span&gt;in&lt;/span&gt; set (0.00 sec)
&lt;/pre&gt;</description>
<pubDate>Fri, 02 Mar 2018 12:29:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/8495001.html</dc:identifier>
</item>
<item>
<title>02 浅析Spring的AOP（面向切面编程） - nnngu</title>
<link>http://www.cnblogs.com/nnngu/p/8494923.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnngu/p/8494923.html</guid>
<description>&lt;h2 id=&quot;关于aop&quot;&gt;1、关于AOP&lt;/h2&gt;
&lt;p&gt;AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系，对于其他类型的代码，如安全性、异常处理等等也是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。&lt;/p&gt;
&lt;p&gt;AOP技术恰恰相反，它利用一种称为&quot;横切&quot;的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为&quot;Aspect&quot;，即切面。所谓&quot;切面&quot;，简单说就是将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。&lt;/p&gt;
&lt;p&gt;使用&quot;横切&quot;技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如 权限认证、日志、事务等等。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。&lt;/p&gt;
&lt;h2 id=&quot;aop的核心概念&quot;&gt;2、AOP的核心概念&lt;/h2&gt;
&lt;p&gt;1、横切关注点&lt;/p&gt;
&lt;p&gt;对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点&lt;/p&gt;
&lt;p&gt;2、切面（aspect）&lt;/p&gt;
&lt;p&gt;类是对物体特征的抽象，切面就是对横切关注点的抽象&lt;/p&gt;
&lt;p&gt;3、连接点（joinpoint）&lt;/p&gt;
&lt;p&gt;被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器&lt;/p&gt;
&lt;p&gt;4、切入点（pointcut）&lt;/p&gt;
&lt;p&gt;对连接点进行拦截的定义&lt;/p&gt;
&lt;p&gt;5、通知（advice）&lt;/p&gt;
&lt;p&gt;所谓通知指的就是拦截到连接点之后要执行的代码，通知分为五类：前置、后置、异常、最终、环绕。&lt;/p&gt;
&lt;p&gt;6、目标对象&lt;/p&gt;
&lt;p&gt;代理的目标对象&lt;/p&gt;
&lt;p&gt;7、织入（weave）&lt;/p&gt;
&lt;p&gt;将切面应用到目标对象并导致代理对象创建的过程&lt;/p&gt;
&lt;p&gt;8、引入（introduction）&lt;/p&gt;
&lt;p&gt;在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段&lt;/p&gt;
&lt;h2 id=&quot;spring对aop的支持&quot;&gt;3、Spring对AOP的支持&lt;/h2&gt;
&lt;p&gt;Spring中AOP代理由Spring的IoC容器负责生成、管理，其依赖关系也由IoC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IoC容器的依赖注入提供。Spring创建代理的规则为：&lt;/p&gt;
&lt;p&gt;1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了&lt;/p&gt;
&lt;p&gt;2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB&lt;/p&gt;
&lt;p&gt;AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：&lt;/p&gt;
&lt;p&gt;1、定义普通业务组件&lt;/p&gt;
&lt;p&gt;2、定义切入点，一个切入点可能横切多个业务组件&lt;/p&gt;
&lt;p&gt;3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作&lt;/p&gt;
&lt;p&gt;所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。&lt;/p&gt;
&lt;p&gt;下面给出一个Spring AOP的.xml文件模板，名字叫做aop.xml，之后的内容都在aop.xml上进行扩展：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:tx=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;基于spring的aop简单实现&quot;&gt;4、基于Spring的AOP简单实现&lt;/h2&gt;
&lt;p&gt;在讲解之前，说明一点：使用Spring AOP，要成功运行代码，只用Spring提供给开发者的jar包是不够的，请额外上网下载两个jar包：&lt;/p&gt;
&lt;p&gt;1、aopalliance.jar&lt;/p&gt;
&lt;p&gt;2、aspectjweaver.jar&lt;/p&gt;
&lt;p&gt;开始讲解用Spring AOP的XML实现方式，先定义一个接口：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; HelloWorld
{
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;printHelloWorld&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPrint&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义两个接口实现类：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloWorldImpl1 &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; HelloWorld
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;printHelloWorld&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Enter HelloWorldImpl1.printHelloWorld()&quot;&lt;/span&gt;);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPrint&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Enter HelloWorldImpl1.doPrint()&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloWorldImpl2 &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; HelloWorld
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;printHelloWorld&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Enter HelloWorldImpl2.printHelloWorld()&quot;&lt;/span&gt;);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPrint&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Enter HelloWorldImpl2.doPrint()&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;横切关注点，这里是打印时间：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TimeHandler
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;printTime&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CurrentTime = &quot;&lt;/span&gt; + System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有这三个类就可以实现一个简单的Spring AOP了，看一下aop.xml的配置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:tx=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl1&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl2&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl2&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.TimeHandler&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* com.nnngu.aop.HelloWorld.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写一个main函数调用一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args)
{
    ApplicationContext ctx = 
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;aop.xml&quot;&lt;/span&gt;);
        
    HelloWorld hw1 = (HelloWorld)ctx.&lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl1&quot;&lt;/span&gt;);
    HelloWorld hw2 = (HelloWorld)ctx.&lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl2&quot;&lt;/span&gt;);
    hw1.&lt;span class=&quot;fu&quot;&gt;printHelloWorld&lt;/span&gt;();
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 换行&lt;/span&gt;
    hw1.&lt;span class=&quot;fu&quot;&gt;doPrint&lt;/span&gt;();
    
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 换行&lt;/span&gt;
    hw2.&lt;span class=&quot;fu&quot;&gt;printHelloWorld&lt;/span&gt;();
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 换行&lt;/span&gt;
    hw2.&lt;span class=&quot;fu&quot;&gt;doPrint&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CurrentTime = 1446129611993
Enter HelloWorldImpl1.printHelloWorld()
CurrentTime = 1446129611993

CurrentTime = 1446129611994
Enter HelloWorldImpl1.doPrint()
CurrentTime = 1446129611994

CurrentTime = 1446129611994
Enter HelloWorldImpl2.printHelloWorld()
CurrentTime = 1446129611994

CurrentTime = 1446129611994
Enter HelloWorldImpl2.doPrint()
CurrentTime = 1446129611994&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到给HelloWorld接口的两个实现类的所有方法都加上了代理，代理内容就是打印时间。&lt;/p&gt;
&lt;h2 id=&quot;基于spring的aop使用其他细节&quot;&gt;5、基于Spring的AOP使用其他细节&lt;/h2&gt;
&lt;h3 id=&quot;增加一个横切关注点打印日志java类为&quot;&gt;5-1、增加一个横切关注点，打印日志，Java类为：&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; LogHandler
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;LogBefore&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Log before method&quot;&lt;/span&gt;);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;LogAfter&lt;/span&gt;()
    {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Log after method&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;aop.xml配置为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:tx=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl1&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl2&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl2&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.TimeHandler&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.LogHandler&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; order=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* com.nnngu.aop.HelloWorld.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; order=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* com.nnngu.aop.HelloWorld.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;LogBefore&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;LogAfter&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类不变，打印结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CurrentTime = 1446130273734
Log before method
Enter HelloWorldImpl1.printHelloWorld()
Log after method
CurrentTime = 1446130273735

CurrentTime = 1446130273736
Log before method
Enter HelloWorldImpl1.doPrint()
Log after method
CurrentTime = 1446130273736

CurrentTime = 1446130273736
Log before method
Enter HelloWorldImpl2.printHelloWorld()
Log after method
CurrentTime = 1446130273736

CurrentTime = 1446130273737
Log before method
Enter HelloWorldImpl2.doPrint()
Log after method
CurrentTime = 1446130273737&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要想让logHandler在timeHandler前使用有两个办法：&lt;/p&gt;
&lt;p&gt;（1）aspect里面有一个order属性，order属性的数字就是横切关注点的顺序&lt;/p&gt;
&lt;p&gt;（2）在aop.xml里，把logHandler定义在timeHandler前面，Spring默认以aspect的定义顺序作为织入顺序&lt;/p&gt;
&lt;h3 id=&quot;我只想织入接口中的某些方法&quot;&gt;5-2、我只想织入接口中的某些方法&lt;/h3&gt;
&lt;p&gt;修改一下pointcut的expression就好了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:tx=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl1&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;helloWorldImpl2&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.HelloWorldImpl2&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.TimeHandler&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.nnngu.aop.LogHandler&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;timeHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; order=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* com.nnngu.aop.HelloWorld.print*(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printTime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addTime&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logHandler&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; order=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* com.nnngu.aop.HelloWorld.do*(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;LogBefore&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;LogAfter&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;printLog&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上的修改，表示timeHandler只会织入HelloWorld接口print开头的方法，logHandler只会织入HelloWorld接口do开头的方法&lt;/p&gt;
&lt;h3 id=&quot;强制使用cglib生成代理&quot;&gt;5-3、强制使用CGLIB生成代理&lt;/h3&gt;
&lt;p&gt;前面说过Spring使用JDK动态代理或是CGLIB生成代理是有规则的，高版本的Spring会自动选择是使用JDK动态代理还是CGLIB生成代理内容，当然我们也可以强制使用CGLIB生成代理，那就是里面有一个&quot;proxy-target-class&quot;属性，这个属性值如果被设置为true，那么基于类的代理将起作用，如果proxy-target-class被设置为false或者这个属性被省略，那么基于接口的代理将起作用。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文永久更新地址：&lt;a href=&quot;https://github.com/nnngu/LearningNotes/blob/master/Spring/02%20Spring%E7%9A%84AOP%EF%BC%88%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%EF%BC%89.md&quot;&gt;https://github.com/nnngu/LearningNotes/blob/master/Spring/02%20Spring%E7%9A%84AOP%EF%BC%88%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%EF%BC%89.md&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:04:00 +0000</pubDate>
<dc:creator>nnngu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnngu/p/8494923.html</dc:identifier>
</item>
<item>
<title>Mysql(六)：数据备份、pymysql模块 - 带带大师兄丶</title>
<link>http://www.cnblogs.com/6324TV/p/8494775.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/6324TV/p/8494775.html</guid>
<description>&lt;h3&gt;一 IDE工具介绍&lt;/h3&gt;
&lt;p&gt;生产环境还是推荐使用mysql命令行，但为了方便我们测试，可以使用IDE工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1bpo5mqj&quot; target=&quot;_blank&quot;&gt;下载链接：https://pan.baidu.com/s/1bpo5mqj&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;掌握：
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;1. 测试+链接数据库&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;2. 新建库&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;3. 新建表，新增字段+类型+约束&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;4. 设计表：外键&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;5. 新建查询&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;6. 备份库/表&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注意：&lt;/span&gt;
批量加注释：ctrl+&lt;span&gt;？键
批量去注释：ctrl&lt;/span&gt;+shift+？键
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二 MySQL数据备份&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;1. 物理备份： 直接复制数据库文件，适用于大型数据库环境。但不能恢复到异构系统中如Windows。&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;2. 逻辑备份： 备份的是建表、建库、插入等操作所执行SQL语句，适用于中小型数据库，效率相对较低。&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;3. 导出表： 将表导入到文本文件中。&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、使用mysqldump实现逻辑备份&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;语法：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; mysqldump -h 服务器 -u用户名 -p密码 数据库名 &amp;gt; 备份文件.sql&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;单库备份&lt;/span&gt;
mysqldump -uroot -p123 db1 &amp;gt;&lt;span&gt; db1.sql
mysqldump &lt;/span&gt;-uroot -p123 db1 table1 table2 &amp;gt; db1-table1-&lt;span&gt;table2.sql

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;多库备份&lt;/span&gt;
mysqldump -uroot -p123 --databases db1 db2 mysql db3 &amp;gt;&lt;span&gt; db1_db2_mysql_db3.sql

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;备份所有库&lt;/span&gt;
mysqldump -uroot -p123 --all-databases &amp;gt; all.sql 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;二、恢复逻辑备份&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;方法一：&lt;/span&gt;
[root@egon backup]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysql -uroot -p123 &amp;lt; /backup/all.sql&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;方法二：&lt;/span&gt;
mysql&amp;gt;&lt;span&gt; use db1;
mysql&lt;/span&gt;&amp;gt; SET SQL_LOG_BIN=&lt;span&gt;0;
mysql&lt;/span&gt;&amp;gt; source /root/&lt;span&gt;db1.sql

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注：如果备份/恢复单个库时，可以修改sql文件&lt;/span&gt;
DROP database &lt;span&gt;if&lt;/span&gt;&lt;span&gt; exists school;
create database school;
use school;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、备份/恢复案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5b4cb974-74cf-4727-972c-ea5e88956d30')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5b4cb974-74cf-4727-972c-ea5e88956d30&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b4cb974-74cf-4727-972c-ea5e88956d30&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5b4cb974-74cf-4727-972c-ea5e88956d30',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b4cb974-74cf-4727-972c-ea5e88956d30&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据库备份/恢复实验一：数据库损坏&lt;/span&gt;
&lt;span&gt;备份：
&lt;/span&gt;1. &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysqldump -uroot -p123 --all-databases &amp;gt; /backup/`date +%F`_all.sql&lt;/span&gt;
2. &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysql -uroot -p123 -e 'flush logs' //截断并产生新的binlog&lt;/span&gt;
3. 插入数据 //&lt;span&gt;模拟服务器正常运行
&lt;/span&gt;4. mysql&amp;gt; set sql_log_bin=0; //&lt;span&gt;模拟服务器损坏
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; drop database db;

恢复：
&lt;/span&gt;1. &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysqlbinlog 最后一个binlog &amp;gt; /backup/last_bin.log&lt;/span&gt;
2. mysql&amp;gt; set sql_log_bin=&lt;span&gt;0; 
mysql&lt;/span&gt;&amp;gt; source /backup/2014-02-13_all.sql //&lt;span&gt;恢复最近一次完全备份 
mysql&lt;/span&gt;&amp;gt; source /backup/last_bin.log //&lt;span&gt;恢复最后个binlog文件


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据库备份/恢复实验二：如果有误删除&lt;/span&gt;
&lt;span&gt;备份：
&lt;/span&gt;1. mysqldump -uroot -p123 --all-databases &amp;gt; /backup/`date +%&lt;span&gt;F`_all.sql
&lt;/span&gt;2. mysql -uroot -p123 -e &lt;span&gt;'&lt;/span&gt;&lt;span&gt;flush logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; //&lt;span&gt;截断并产生新的binlog
&lt;/span&gt;3. 插入数据 //&lt;span&gt;模拟服务器正常运行
&lt;/span&gt;4. drop table db1.t1 //&lt;span&gt;模拟误删除
&lt;/span&gt;5. 插入数据 //&lt;span&gt;模拟服务器正常运行

恢复：
&lt;/span&gt;1. &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysqlbinlog 最后一个binlog --stop-position=260 &amp;gt; /tmp/1.sql &lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; mysqlbinlog 最后一个binlog --start-position=900 &amp;gt; /tmp/2.sql &lt;/span&gt;
2. mysql&amp;gt; set sql_log_bin=&lt;span&gt;0; 
mysql&lt;/span&gt;&amp;gt; source /backup/2014-02-13_all.sql //&lt;span&gt;恢复最近一次完全备份
mysql&lt;/span&gt;&amp;gt; source /tmp/1.log //&lt;span&gt;恢复最后个binlog文件
mysql&lt;/span&gt;&amp;gt; source /tmp/2.log //&lt;span&gt;恢复最后个binlog文件

注意事项：
&lt;/span&gt;1&lt;span&gt;. 完全恢复到一个干净的环境（例如新的数据库或删除原有的数据库）
&lt;/span&gt;2. 恢复期间所有SQL语句不应该记录到binlog中
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;四、实现自动化备份&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f451285c-0744-403d-8073-c5f29cb9044a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f451285c-0744-403d-8073-c5f29cb9044a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f451285c-0744-403d-8073-c5f29cb9044a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f451285c-0744-403d-8073-c5f29cb9044a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f451285c-0744-403d-8073-c5f29cb9044a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;备份计划：
&lt;/span&gt;1. 什么时间 2:00
2&lt;span&gt;. 对哪些数据库备份
&lt;/span&gt;3&lt;span&gt;. 备份文件放的位置

备份脚本：
[root@egon &lt;/span&gt;~]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; vim /mysql_back.sql&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;
back_dir=/&lt;span&gt;backup
back_file&lt;/span&gt;=`date +%&lt;span&gt;F`_all.sql
user&lt;/span&gt;=&lt;span&gt;root
&lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;=123

&lt;span&gt;if&lt;/span&gt; [ ! -d /&lt;span&gt;backup ];then
mkdir &lt;/span&gt;-p /&lt;span&gt;backup
fi

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 备份并截断日志&lt;/span&gt;
mysqldump -u${user} -p${&lt;span&gt;pass&lt;/span&gt;} --events --all-databases &amp;gt; ${back_dir}/&lt;span&gt;${back_file}
mysql &lt;/span&gt;-u${user} -p${&lt;span&gt;pass&lt;/span&gt;} -e &lt;span&gt;'&lt;/span&gt;&lt;span&gt;flush logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 只保留最近一周的备份&lt;/span&gt;
&lt;span&gt;cd $back_dir
find . &lt;/span&gt;-mtime +7 -&lt;span&gt;exec&lt;/span&gt; rm -&lt;span&gt;rf {} \;

手动测试：
[root@egon &lt;/span&gt;~]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; chmod a+x /mysql_back.sql &lt;/span&gt;
[root@egon ~]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; chattr +i /mysql_back.sql&lt;/span&gt;
[root@egon ~]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; /mysql_back.sql&lt;/span&gt;
&lt;span&gt;
配置cron：
[root@egon &lt;/span&gt;~]&lt;span&gt;#&lt;/span&gt;&lt;span&gt; crontab -l&lt;/span&gt;
2 * * * /mysql_back.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、表的导出和导入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0f09fea7-3001-4315-969a-5e7678dac9b5')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_0f09fea7-3001-4315-969a-5e7678dac9b5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0f09fea7-3001-4315-969a-5e7678dac9b5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0f09fea7-3001-4315-969a-5e7678dac9b5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0f09fea7-3001-4315-969a-5e7678dac9b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT... INTO OUTFILE 导出文本文件
示例：
mysql&lt;/span&gt;&amp;gt; SELECT *&lt;span&gt; FROM school.student1
INTO OUTFILE &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;student1.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
FIELDS TERMINATED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; //&lt;span&gt;定义字段分隔符
OPTIONALLY ENCLOSED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; //&lt;span&gt;定义字符串使用什么符号括起来
LINES TERMINATED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ; //&lt;span&gt;定义换行符


mysql 命令导出文本文件
示例:
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysql -u root -p123 -e 'select * from student1.school' &amp;gt; /tmp/student1.txt&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; mysql -u root -p123 --xml -e 'select * from student1.school' &amp;gt; /tmp/student1.xml&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; mysql -u root -p123 --html -e 'select * from student1.school' &amp;gt; /tmp/student1.html&lt;/span&gt;
&lt;span&gt;
LOAD DATA INFILE 导入文本文件
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; DELETE FROM student1;
mysql&lt;/span&gt;&amp;gt; LOAD DATA INFILE &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/student1.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
INTO TABLE school.student1
FIELDS TERMINATED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
OPTIONALLY ENCLOSED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
LINES TERMINATED BY &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b99f6256-cf1f-43b7-a7bc-2789b62b4480')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b99f6256-cf1f-43b7-a7bc-2789b62b4480&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b99f6256-cf1f-43b7-a7bc-2789b62b4480&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b99f6256-cf1f-43b7-a7bc-2789b62b4480',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b99f6256-cf1f-43b7-a7bc-2789b62b4480&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;可能会报错&lt;/span&gt;
mysql&amp;gt; select * &lt;span&gt;from&lt;/span&gt; db1.emp into outfile &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\db1.emp.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; fields terminated by &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; lines terminated by &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
ERROR &lt;/span&gt;1238 (HY000): Variable &lt;span&gt;'&lt;/span&gt;&lt;span&gt;secure_file_priv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a read only variable


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据库最关键的是数据，一旦数据库权限泄露，那么通过上述语句就可以轻松将数据导出到文件中然后下载拿走，因而mysql对此作了限制，只能将文件导出到指定目录&lt;/span&gt;
&lt;span&gt;在配置文件中
[mysqld]
secure_file_priv&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;只能将数据导出到C:\\下&lt;/span&gt;
&lt;span&gt;
重启mysql
重新执行上述语句&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;报错：Variable 'secure_file_priv' is a read only&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;六、数据库迁移&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;务必保证在相同版本之间迁移
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; mysqldump -h 源IP -uroot -p123 --databases db1 | mysql -h 目标IP -uroot -p456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;三 pymysql模块&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;安装&lt;/span&gt;
pip3 install pymysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一 链接、执行sql、关闭（游标）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201709/1036857-20170915114556719-2064840662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
user&lt;/span&gt;=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
pwd&lt;/span&gt;=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;链接&lt;/span&gt;
conn=pymysql.connect(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;游标&lt;/span&gt;
cursor=conn.cursor() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行完毕返回的结果集默认以元组显示&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句&lt;/span&gt;
sql=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select * from userinfo where name=&quot;%s&quot; and password=&quot;%s&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(user,pwd) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;注意%s需要加引号&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sql)
res&lt;/span&gt;=cursor.execute(sql) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句，返回sql查询成功的记录数目&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res)

cursor.close()
conn.close()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; res:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二 execute()之sql注入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意：符号--会注释掉它之后的sql，正确的语法：--后至少有一个任意字符&lt;/p&gt;
&lt;p&gt;根本原理：就根据程序的字符串拼接name='%s'，我们输入一个&lt;span&gt;&lt;em&gt;&lt;strong&gt;xxx' -- haha&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;,用我们输入的xxx加'在程序中拼接成一个判断条件name='&lt;span&gt;&lt;em&gt;&lt;strong&gt;xxx' -- haha&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;'&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
最后那一个空格，在一条sql语句中如果遇到select * &lt;span&gt;from&lt;/span&gt; t1 where id &amp;gt; 3 -- &lt;span&gt;and&lt;/span&gt; name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;则--&lt;span&gt;之后的条件被注释掉了

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;1、sql注入之：用户存在，绕过密码&lt;/span&gt;
egon&lt;span&gt;'&lt;/span&gt;&lt;span&gt; -- 任意字符&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;2、sql注入之：用户不存在，绕过用户与密码&lt;/span&gt;
xxx&lt;span&gt;'&lt;/span&gt;&lt;span&gt; or 1=1 -- 任意字符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201709/1036857-20170914080611375-1304472294.png&quot; alt=&quot;&quot; width=&quot;663&quot; height=&quot;197&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201709/1036857-20170914073716813-2024667165.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201709/1036857-20170914073927438-1525371660.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;173&quot;/&gt; &lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 原来是我们对sql进行字符串拼接&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; sql=&quot;select * from userinfo where name='%s' and password='%s'&quot; %(user,pwd)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(sql)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; res=cursor.execute(sql)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;改写为（execute帮我们做字符串拼接，我们无需且一定不能再为%s加引号了）&lt;/span&gt;
sql=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from userinfo where name=%s and password=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;！！！注意%s需要去掉引号，因为pymysql会自动为我们加上&lt;/span&gt;
res=cursor.execute(sql,[user,pwd]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pymysql模块自动帮我们解决sql注入的问题，只要我们按照pymysql的规矩来。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三 增、删、改：conn.commit()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2ffcf73c-8ec6-4e08-8173-01d4243cf6bd')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_2ffcf73c-8ec6-4e08-8173-01d4243cf6bd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2ffcf73c-8ec6-4e08-8173-01d4243cf6bd&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2ffcf73c-8ec6-4e08-8173-01d4243cf6bd',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2ffcf73c-8ec6-4e08-8173-01d4243cf6bd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;链接&lt;/span&gt;
conn=pymysql.connect(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;游标&lt;/span&gt;
cursor=&lt;span&gt;conn.cursor()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;part1&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; sql='insert into userinfo(name,password) values(&quot;root&quot;,&quot;123456&quot;);'&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; res=cursor.execute(sql) #执行sql语句，返回sql影响成功的行数&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(res)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;part2&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; sql='insert into userinfo(name,password) values(%s,%s);'&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; res=cursor.execute(sql,(&quot;root&quot;,&quot;123456&quot;)) #执行sql语句，返回sql影响成功的行数&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(res)&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;part3&lt;/span&gt;
sql=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert into userinfo(name,password) values(%s,%s);&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
res&lt;/span&gt;=cursor.executemany(sql,[(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lhf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12356&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句，返回sql影响成功的行数&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res)

conn.commit() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;提交后才发现表中插入记录成功&lt;/span&gt;
&lt;span&gt;cursor.close()
conn.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四 查：fetchone，fetchmany，fetchall&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201709/1036857-20170914075702438-239735784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('eaca94cb-c582-43eb-b0f1-7cb682603c4e')&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_eaca94cb-c582-43eb-b0f1-7cb682603c4e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eaca94cb-c582-43eb-b0f1-7cb682603c4e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('eaca94cb-c582-43eb-b0f1-7cb682603c4e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eaca94cb-c582-43eb-b0f1-7cb682603c4e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;链接&lt;/span&gt;
conn=pymysql.connect(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;游标&lt;/span&gt;
cursor=&lt;span&gt;conn.cursor()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句&lt;/span&gt;
sql=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select * from userinfo;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
rows&lt;/span&gt;=cursor.execute(sql) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行sql语句，返回sql影响成功的行数rows,将结果放入一个集合，等待被查询&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; cursor.scroll(3,mode='absolute') # 相对绝对位置移动&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; cursor.scroll(3,mode='relative') # 相对当前位置移动&lt;/span&gt;
res1=&lt;span&gt;cursor.fetchone()
res2&lt;/span&gt;=&lt;span&gt;cursor.fetchone()
res3&lt;/span&gt;=&lt;span&gt;cursor.fetchone()
res4&lt;/span&gt;=cursor.fetchmany(2&lt;span&gt;)
res5&lt;/span&gt;=&lt;span&gt;cursor.fetchall()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res1)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res2)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res3)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res4)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res5)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s rows in set (0.00 sec)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;rows)



conn.commit() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;提交后才发现表中插入记录成功&lt;/span&gt;
&lt;span&gt;cursor.close()
conn.close()

&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
(1, 'root', '123456')
(2, 'root', '123456')
(3, 'root', '123456')
((4, 'root', '123456'), (5, 'root', '123456'))
((6, 'root', '123456'), (7, 'lhf', '12356'), (8, 'eee', '156'))
rows in set (0.00 sec)
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五 获取插入的最后一条数据的自增ID&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c633ac75-1e62-416a-92fc-7c3784f11f9f')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_c633ac75-1e62-416a-92fc-7c3784f11f9f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c633ac75-1e62-416a-92fc-7c3784f11f9f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c633ac75-1e62-416a-92fc-7c3784f11f9f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c633ac75-1e62-416a-92fc-7c3784f11f9f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
conn&lt;/span&gt;=pymysql.connect(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
cursor&lt;/span&gt;=&lt;span&gt;conn.cursor()

sql&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert into userinfo(name,password) values(&quot;xxx&quot;,&quot;123&quot;);&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
rows&lt;/span&gt;=&lt;span&gt;cursor.execute(sql)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(cursor.lastrowid) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在插入语句后查看&lt;/span&gt;
&lt;span&gt;
conn.commit()

cursor.close()
conn.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 02 Mar 2018 11:07:00 +0000</pubDate>
<dc:creator>带带大师兄丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/6324TV/p/8494775.html</dc:identifier>
</item>
</channel>
</rss>