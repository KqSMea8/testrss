<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python 学习笔记之 Numpy 库——数组基础 - 永森</title>
<link>http://www.cnblogs.com/seniusen/p/9734774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/seniusen/p/9734774.html</guid>
<description>&lt;h2 id=&quot;初识数组&quot;&gt;1. 初识数组&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;import numpy as np
a = np.arange(15)
a = a.reshape(3, 5)
print(a.ndim, a.shape, a.dtype, a.size, a.itemsize)
# 2 (3, 5) int64 15 8&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;ndim，数组的维度数，二维数组就是 2&lt;/li&gt;
&lt;li&gt;shape，数组在各个维度上的长度，用元组表示&lt;/li&gt;
&lt;li&gt;dtype，数组中元素的数据类型，比如 int32, float64 等&lt;/li&gt;
&lt;li&gt;size，数组中所有元素的总数&lt;/li&gt;
&lt;li&gt;itemsize，数组中每个元素所占的字节数&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;创建数组&quot;&gt;2. 创建数组&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;a = np.array([[1, 2, 3], [4, 5, 6]])
a = np.ones((3, 4))
a = np.zeros((3, 4), dtype=np.float32)
a = np.linspace(0, 2, 9)   # 9 numbers from 0 to 2&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.linspace(start, stop, num=50) 产生一个区间在[start, stop]，长度为 num 的一维数组&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;基本运算&quot;&gt;3. 基本运算&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;a = np.array([[1, 2, 3], [4, 5, 6]]) # (2, 3)
b = np.array([[1, 0, 1], [0, 1, 1], [1, 1, 0]]) # (3, 3)
c = np.dot(a, b)        # 矩阵相乘
d = a @ b                 # 矩阵相乘
e = np.dot(a[0], [0])   # 向量内积
f = a * a                   # 元素相乘

g = np.sum(a)
h = np.mean(a, axis=0)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.sum 等函数若不指定 axis，则把数组所有元素当成列表来处理，axis = 0，表示只在第一个维度上进行求和，以此类推。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;维度操作&quot;&gt;4. 维度操作&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;a = np.zeros((2, 3))
b = np.zeros((3, 3))
np.vstack((a, b)).shape # (5, 3)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.vstack， 沿着垂直方向或者行的方向将数组堆起来&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.zeros((2, 1, 5))
b = np.zeros((2, 2, 5))
np.hstack((a, b)).shape # (2, 3, 5)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.hstack， 沿着水平方向或者列的方向将数组堆起来&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.zeros((2, 5, 1))
b = np.zeros((2, 5, 5))
np.concatenate((a, b), axis=2).shape # (2, 5, 6)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.concatenate， 沿着某一维度将数组堆起来&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.zeros((3, ))
b = np.zeros((3, ))
np.stack((a, b), axis=0).shape # (2, 3)
np.stack((a, b), axis=1).shape # (3, 2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.stack， 将数组沿着新的维度堆起来&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;随机数&quot;&gt;5. 随机数&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;a = np.random.rand(3, 2) # (3, 2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.rand， 返回一个 [0, 1) 之间的随机分布&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.random.random((2, 3)) # (2, 3)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.random， 返回一个 [0, 1) 之间的随机分布&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.random.randn(3, 2) # (3, 2)
a = sigma * np.random.randn(...) + mu &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.randn， 返回一个均值为 0 方差为 1 的标准正态分布，通过 mu 和 sigma 可以任意改变均值和方差&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;a = np.random.randint(1, 5, (3, 2)) # (3, 2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.randint(low, high=None, size=None)， 返回一个 [0, low) 或者 [low, high) 之间的随机整数&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;np.random.choice(np.arange(5, 10), 3, replace=False)
np.random.choice(5, (3,2))&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.choice(a, size=None, replace=True, p=None)， 返回 a 中元素或者 np.arange(a) 范围内的随机整数，replace=True 默认可以有重复元素&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;np.random.seed(1)
a = np.random.rand(3, 2)
np.random.seed(1)
b = np.random.rand(3, 2) # a == b

a = np.array([1, 2, 3, 4, 5])
np.random.shuffle(a) &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;np.random.seed 通过设置随机数种子的值可以保证两次产生的随机数相同&lt;/li&gt;
&lt;li&gt;np.random.shuffle() 沿着第一维随机打乱数组&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;获取更多精彩，请关注「seniusen」!&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11895466-a85c1ea650a52c58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;seniusen&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Oct 2018 07:39:00 +0000</pubDate>
<dc:creator>永森</dc:creator>
<og:description>1. 初识数组 ndim，数组的维度数，二维数组就是 2 shape，数组在各个维度上的长度，用元组表示 dtype，数组中元素的数据类型，比如 int32, float64 等 size，数组中所有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/seniusen/p/9734774.html</dc:identifier>
</item>
<item>
<title>TensorFlow 训练 MNIST （1）—— softmax 单层神经网络 - (•̀ω•́)y</title>
<link>http://www.cnblogs.com/laishenghao/p/9576806.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laishenghao/p/9576806.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、MNIST数据集简介&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　首先通过下面两行代码获取到TensorFlow内置的MNIST数据集：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data

mnist &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;'.&lt;/span&gt;&lt;span&gt;/data/mnist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, one_hot=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　MNIST数据集共有55000（mnist.train.num_examples）张用于训练的数据，对应的有55000个标签；共有10000（mnist.test.num_examples）张用于测试的图片的数据，同样的有10000个标签与之对应。为了方便访问，这些图片或标签的数据都是被格式化了的。&lt;/p&gt;
&lt;p&gt;　　MNIST数据集的训练数据集（mnist.train.images）是一个 55000 * 784 的矩阵，矩阵的每一行代表一张图片（28 * 28 * 1）的数据，图片的数据范围是 [0, 1]，代表像素点灰度归一化后的值。&lt;/p&gt;
&lt;p&gt;　　训练集的标签（mnist.train.labels）是一个55000 * 10 的矩阵，每一行的10个数字分别代表对应的图片属于数字0到9的概率，范围是0或1。一个标签行只有一个是1，表示该图片的正确数字是对应的下标值， 其余是0。&lt;/p&gt;
&lt;p&gt;　　测试集与训练集的类似，只是数据量不同。&lt;/p&gt;
&lt;p&gt;　　以下代码显示部分MNIST训练图片的形状及标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plot
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data

mnist &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;'.&lt;/span&gt;&lt;span&gt;/data/mnist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, one_hot=&lt;span&gt;True)
trainImages &lt;/span&gt;=&lt;span&gt; mnist.train.images
trainLabels &lt;/span&gt;=&lt;span&gt; mnist.train.labels

plot.figure(&lt;/span&gt;1, figsize=(4, 3&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(6&lt;span&gt;):
    curImage &lt;/span&gt;= np.reshape(trainImages[i, :], (28, 28&lt;span&gt;))
    curLabel &lt;/span&gt;=&lt;span&gt; np.argmax(trainLabels[i, :])
    ax &lt;/span&gt;= plot.subplot(int(str(23) + str(i+1&lt;span&gt;)))
    plot.imshow(curImage, cmap&lt;/span&gt;=plot.get_cmap(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gray&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    plot.axis(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;off&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    ax.set_title(curLabel)

plot.suptitle(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MNIST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plot.show()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述代码输出的MNIST图片及其标签：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/855030/201809/855030-20180903084030270-1894397914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 2、通过单层神经网络进行训练&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; train(trainCycle=50000, debug=&lt;span&gt;False):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     inputSize  = 784
&lt;span&gt; 3&lt;/span&gt;     outputSize = 10
&lt;span&gt; 4&lt;/span&gt;     batchSize  = 64
&lt;span&gt; 5&lt;/span&gt;     inputs = tf.placeholder(tf.float32, shape=&lt;span&gt;[None, inputSize])
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x * w = [64, 784] * [784, 10]&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     weights   = tf.Variable(tf.random_normal([784, 10], 0, 0.1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     bias      = tf.Variable(tf.random_normal([outputSize], 0, 0.1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     outputs   =&lt;span&gt; tf.add(tf.matmul(inputs, weights), bias)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     outputs   =&lt;span&gt; tf.nn.softmax(outputs)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     labels = tf.placeholder(tf.float32, shape=&lt;span&gt;[None, outputSize])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     loss      = tf.reduce_mean(tf.square(outputs -&lt;span&gt; labels))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     optimizer = tf.train.GradientDescentOptimizer(0.1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     trainer   =&lt;span&gt; optimizer.minimize(loss)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     sess =&lt;span&gt; tf.Session()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    sess.run(tf.global_variables_initializer())
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(trainCycle):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         batch =&lt;span&gt; mnist.train.next_batch(batchSize)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         sess.run([trainer, loss], feed_dict={inputs: batch[0], labels: batch[1&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; debug &lt;span&gt;and&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             corrected = tf.equal(tf.argmax(labels, 1), tf.argmax(outputs, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(corrected, tf.float32))
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             accuracyValue = sess.run(accuracy, feed_dict={inputs: batch[0], labels: batch[1&lt;span&gt;]})
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(i, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; train set accuracy:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, accuracyValue)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 测试&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     corrected = tf.equal(tf.argmax(labels, 1), tf.argmax(outputs, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     accuracy =&lt;span&gt; tf.reduce_mean(tf.cast(corrected, tf.float32))
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     accuracyValue = sess.run(accuracy, feed_dict=&lt;span&gt;{inputs: mnist.test.images, labels: mnist.test.labels})
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;accuracy on test set:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, accuracyValue)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     sess.close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、训练结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　上述模型的最终输出为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/855030/201810/855030-20181001150705857-1043186667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由打印日志可以看出，前期收敛速度很快，后期开始波动。最后该模型在训练集上的正确率大概为90%，测试集上也差不多。精度还是比较低的，说明单层的神经网络在处理图片数据上存在着很大的缺陷，并不是一个很好的选择。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/855030/201810/855030-20181001150854574-1786035444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://www.cnblogs.com/laishenghao/p/9576806.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/laishenghao/p/9576806.html&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Oct 2018 07:16:00 +0000</pubDate>
<dc:creator>(•̀ω•́)y</dc:creator>
<og:description>1、MNIST数据集简介 首先通过下面两行代码获取到TensorFlow内置的MNIST数据集： MNIST数据集共有55000（mnist.train.num_examples）张用于训练的数据，对</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laishenghao/p/9576806.html</dc:identifier>
</item>
<item>
<title>手把手教你使用 Clion 开发 Linux C++ 项目 - SolidMango</title>
<link>http://www.cnblogs.com/pugang/p/9734547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pugang/p/9734547.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;手把手教你使用 Clion 开发 Linux C++ 项目&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于CLion&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CLion是一款专为开发C及C++所设计的跨平台IDE。它是以IntelliJ为基础设计的，包含了许多智能功能来提高开发人员的生产力，提高开发人员的工作效率。这种强大的IDE帮助开发人员在Linux、OS X和Windows上来开发C/C++，同时它还使用智能编辑器来提高代码质量、自动代码重构并且深度整合CMake编译系统，从而提高开发人员的工作效率。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;重要功能有：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;提供C及C++支持(包含C++11, libc++ 和Boost)，同时也支持JavaScript, XML, HTML 和CSS 。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;跨平台：您可在64-bit Linux，OS X 以及64-bit Windows上使用它。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;支持GCC、clang、MinGW、Cygwin 编译器以及 GDB 调试器。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;提供对CMake 支持：包含自动处理CMake changes和CMake targets，更新新创建的 C/C++ 档案及CMake Cache 编辑器。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;提供各式编码辅助：包含多行编辑功能、智能完成功能以及一键导航等。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;安全可信的自动代码重构功能。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;代码分析功能：监控代码品质并提供快速修复让开发人员得以及时就地解决问题。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;集成GDB 调试器及评估表达式(expressions)功能、STL 容器渲染器(renderers)、监视(watches)、内嵌变量视图等。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;与最热门的版本控制系统集成：Subversion、Git、GitHub,、Mercurial、CVS、Perforce及TFS。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;内建terminal 模式并可通过插件实现提供Vim-emulation模式。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;智能编辑器-CLion的智能编辑器能帮助开发人员更快地将代码补全，同时它还保持开发人员的代码格式化并符合配置编码的风格。使用此智能编辑器能快速选择代码块，还可以将代码重新排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码生成和重构-在CLion中，开发人员可以使用之前定义发布的函数、变量、数据成员或者一个类，在IDE中会用红色来突出显示。同时CLion还提供了一套可靠的重构来帮助开发人员保持代码的质量，此代码重构适用于整个变化范围。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;代码分析-CLion还提供了动态的代码分析，能不断地监控代码潜在的错误。如果在编辑器中找到了可以的代码，那么它会提出快速修正的方法来解决这个问题。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;支持CMake-CLion提供了对CMake的支持，这包括了自动处理CMake changes和CMake targets更新新创建的 C/C++ 档案及CMake Cache 编辑器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于本文示例代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码配置在一台名称为ubuntu的linux开发机上，代码清单如下所示，分别为main.cc和CMakeLists.txt&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;


/**
 * power - Calculate the power of number.
 * @param base: Base value.
 * @param exponent: Exponent value.
 *
 * @return base raised to the power exponent.
 */
double power(double base, int exponent)
{
    int result = base;
    int i;

    if (exponent == 0) {
        return 1;
    }
    
    for(i = 1; i &amp;lt; exponent; ++i){
        result = result * base;
    }

    return result;
}

int main(int argc, char *argv[])
{
    if (argc &amp;lt; 3){
        printf(&quot;Usage: %s base exponent \n&quot;, argv[0]);
        return 1;
    }
    double base = atof(argv[1]);
    int exponent = atoi(argv[2]);
    double result = power(base, exponent);
    printf(&quot;%g ^ %d is %g test\n&quot;, base, exponent, result);

    std::string ss;
    ss = &quot;teetee&quot;;

    std::cout&amp;lt;&amp;lt; ss.append(&quot;hello&quot;)&amp;lt;&amp;lt;std::endl;

    return 0;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cmake_minimum_required (VERSION 2.8)

project (Demo1)
add_executable(Demo main.cc)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于具体配置方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先将远程的ubuntu开发服务器加入Clion&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/60039/201810/60039-20181001130504810-1327038554.png&quot; alt=&quot;&quot; width=&quot;1018&quot; height=&quot;849&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其次配置项目双向关联&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/60039/201810/60039-20181001130826489-711418076.png&quot; alt=&quot;&quot; width=&quot;1019&quot; height=&quot;728&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;接下来配置演示如何调试代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/60039/201810/60039-20181001130853236-1992927542.png&quot; alt=&quot;&quot; width=&quot;1014&quot; height=&quot;604&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最后说明如何使用CLion提供的静态分析功能分析项目中代码的问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/60039/201810/60039-20181001130915480-467375822.png&quot; alt=&quot;&quot; width=&quot;1008&quot; height=&quot;557&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文完整的介绍了使用Clion 开发 Linux C++ 项目的每一个步骤，提供了完整的测试代码，同时在需要配置的地方都给出了完整的截图，希望对大家有所帮助。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Oct 2018 05:20:00 +0000</pubDate>
<dc:creator>SolidMango</dc:creator>
<og:description>手把手教你使用 Clion 开发 Linux C++ 项目 关于CLion CLion是一款专为开发C及C++所设计的跨平台IDE。它是以IntelliJ为基础设计的，包含了许多智能功能来提高开发人员</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pugang/p/9734547.html</dc:identifier>
</item>
<item>
<title>java项目打包生成MD5文件 - 枫叶、</title>
<link>http://www.cnblogs.com/qq376324789/p/9732129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qq376324789/p/9732129.html</guid>
<description>&lt;p&gt;     之所以发出这篇博客，因为我前几天搞这个问题搞了几天，各种百度居然都没有找到相关的案例，虽然很简单的事件。可是百度博客上面居然都搜不到案例o(*￣︶￣*)o觉得奇怪！！！&lt;/p&gt;
&lt;p&gt;     新总监来了，项目要上线，以前都没听旧总监提起要做什么打包生成MD5文件；一下子就蒙了o(*￣︶￣*)o，主要原因还是因为我太菜O(∩_∩)O哈哈~&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;    因为项目要上线，很多工作要做，总监也忙的基本搭不上话，这几天会也没开，能完成那也是因为我对工作比较认真负责啊（手动滑稽）；&lt;/p&gt;
&lt;p&gt;    以前没做过这样的事情，所以开始问其他朋友，都说直接上线就上线了。哪有这些东西，吐槽  ~~~~（一看你们都是小项目   ）O(∩_∩)O哈哈~！&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一.无从下手，自然先进行任务分析&lt;/p&gt;
&lt;p&gt;    项目都要上线了 &lt;/p&gt;
&lt;p&gt;        1.要么就是为了版本问题&lt;/p&gt;
&lt;p&gt;        2.要么就是为了代码安全问题&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;      第一.  代码都是部署到自家使用的服务器上的，也不是给其他公司写的，也没有卖给别人，这个代码安全问题，防止反编译好像是不存在了&lt;/p&gt;
&lt;p&gt;       第二.为了版本问题，每次上传打包进行文件验证，确保文件唯一性和正确性&lt;/p&gt;
&lt;p&gt; 解决这个问题也算是投机取巧了哈，目测一看第一个解决起来好麻烦啊，所以就先从第二个开始。先解决了再过去问总监看对不对&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;二.开始找资料看文库&lt;/p&gt;
&lt;p&gt;     还真的看到一个提问者的问题。&lt;/p&gt;
&lt;p&gt;     他提出的问题是“如何通过MD5值判断两个war包是否一样？”&lt;/p&gt;
&lt;p&gt;    看起来好像是这么回事哦，然后我点进去并没有回答的人，&lt;/p&gt;
&lt;p&gt;    包括我自己在博客提问搜索也没有相关的答案，我也觉得奇怪不知道为什么。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;三.试着百度一些生成文件MD5值得工具&lt;/p&gt;
&lt;p&gt;    最后把war包的MD5弄出来了，修改哪怕一个空格之后MD5值也变了，我想总不能直接把war包和一串MD5字符串交出去吧。o(*￣︶￣*)o怕被打死。&lt;/p&gt;
&lt;p&gt;   后来找到一篇liunx系统通过命令生成文件MD5文件的文档，操作流程和案例如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1350670/201809/1350670-20180930154951279-2119571583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  然后生成MD5文件&lt;/p&gt;
&lt;p&gt; md5sum skjd-admin.war &amp;gt; skjd-admin.war.md5      文件名要一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1350670/201809/1350670-20180930155128167-265418173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后通过命令验证这个war包的MD5值是不是和它的MD5文件一致&lt;/p&gt;
&lt;p&gt;md5sum -c skjd-admin.war.md5     文件和文件的MD5文件在一个目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1350670/201809/1350670-20180930155331151-171322228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;     然后拿着完成的东西去找技术总监确认下，为了防止做法不对导致任务没完成嘛；然后确认就是这样了。o(*￣︶￣*)o&lt;/p&gt;


&lt;hr/&gt;

&lt;p&gt;本来是一个毫无技术含量的东西，也简单的不能再简单了，可是我搜索问题也搜不出来，更加没有人回答，所以就特此写出一篇博客当做笔记，也留给以后碰见此问题找不到答案和我一样菜鸟的程序猿o(*￣︶￣*)o&lt;/p&gt;
















</description>
<pubDate>Mon, 01 Oct 2018 04:40:00 +0000</pubDate>
<dc:creator>枫叶、</dc:creator>
<og:description>之所以发出这篇博客，因为我前几天搞这个问题搞了几天，各种百度居然都没有找到相关的案例，虽然很简单的事件。可是百度博客上面居然都搜不到案例o(*￣︶￣*)o觉得奇怪！！！ 新总监来了，项目要上线，以前都</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qq376324789/p/9732129.html</dc:identifier>
</item>
<item>
<title>高负载集群实战之lvs负载均衡-技术流ken - 技术流ken</title>
<link>http://www.cnblogs.com/kenken2018/p/9734382.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenken2018/p/9734382.html</guid>
<description>&lt;p&gt;LVS的英文全称是Linux Virtual Server，即Linux虚拟服务器。&lt;/p&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;p&gt;跨平台：window,linux&lt;/p&gt;
&lt;h3&gt;作用&lt;/h3&gt;
&lt;p&gt;实现负载均衡&lt;/p&gt;
&lt;h3&gt;核心组件&lt;/h3&gt;
&lt;p&gt;ip_vs&lt;span&gt;：&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;的内核功能模块，工作在内核，依赖该内核模块实现负载均衡功能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ipvsadm&lt;span&gt;：应用层程序，该程序可以和内核中的&lt;/span&gt;&lt;span&gt;ip_vs&lt;/span&gt;&lt;span&gt;模块通信，实现对负载均衡的管理和控制&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;LVS主要用于多服务器的负载均衡。它工作在网络层，可以实现高性能，高可用的服务器集群技术。它廉价，可把许多低性能的服务器组合在一起形成一个超级服务器。它易用，配置非常简单，且有多种负载均衡的方法。它稳定可靠，即使在集群的服务器中某台服务器无法正常工作，也不影响整体效果。另外可扩展性也非常好。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;补充&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;keepalived&lt;span&gt;也可以对&lt;/span&gt;&lt;span&gt;ip_vs&lt;/span&gt;&lt;span&gt;进行管理&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.相关术语&lt;/h2&gt;
&lt;p&gt;1. DS：Director Server。指的是前端负载均衡器节点。&lt;br/&gt;2. RS：Real Server。后端真实的工作服务器。&lt;br/&gt;3. VIP：向外部直接面向用户请求，作为用户请求的目标的IP地址。&lt;br/&gt;4. DIP：Director Server IP，主要用于和内部主机通讯的IP地址。&lt;br/&gt;5. RIP：Real Server IP，后端服务器的IP地址。&lt;br/&gt;6. CIP：Client IP，访问客户端的IP地址。&lt;/p&gt;
&lt;h2&gt;3.LVS的工作模式&lt;/h2&gt;
&lt;p&gt;DR&lt;/p&gt;
&lt;p&gt;NAT&lt;/p&gt;
&lt;p&gt;TUN&lt;/p&gt;
&lt;p&gt;FULLNAT&lt;/p&gt;
&lt;h2&gt;4.LVS的调度算法&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;【所谓的算法：&lt;/span&gt;DR&lt;span&gt;按照什么规则来从多个&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;中筛选出来一个给用户提供服务】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动态算法：&lt;/span&gt;DR&lt;span&gt;会实时的检测后端的&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;的负载情况，将新用户的请求调度到一个负载较少的&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;之上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;静态算法：无论后端的&lt;/span&gt;RS&lt;span&gt;当前的服务器负载情况怎么样，都安装固定的方式来给&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;分配用户请求&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;静态算法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;rr&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Round Bobin&lt;/span&gt;&lt;span&gt;，轮询，将客户端的请求交替分配给&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;wrr&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Weighted Round Bobin&lt;/span&gt;&lt;span&gt;，加权轮询，根据&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;的性能不同，让他们来承担不同比例的用户请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dh&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Destination Hashing&lt;/span&gt;&lt;span&gt;，目标地址哈希调度，基于用户所请求的地址做哈希表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：实现将对于相同的地址&lt;/span&gt;(rs)&lt;span&gt;的请求调度到同一个&lt;/span&gt;RS&lt;span&gt;之上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用场景：适应于前端是一个&lt;/span&gt;DR&lt;span&gt;，后端是多个&lt;/span&gt;&lt;span&gt;cache&lt;/span&gt;&lt;span&gt;的时候&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;sh&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Source Hashing&lt;/span&gt;&lt;span&gt;，源地址的哈希调度，基于用户的&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;地址做哈希表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：实现将同一个客户端调度到相同的&lt;/span&gt;RS&lt;span&gt;之上&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;动态算法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;lc&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Least Connection&lt;/span&gt;&lt;span&gt;，最小连接数调度，本质是调度到当前负载最低的主机上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;overhead=active*256+inactive&lt;/p&gt;
&lt;p&gt;wlc&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Weighted Least Connection&lt;/span&gt;&lt;span&gt;，加权最小连接数调度，本质是调度到当前负载最低的主机上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;overhead=(active*256+inactive)/weight&lt;/p&gt;
&lt;p&gt;SED&lt;span&gt;：是&lt;/span&gt;&lt;span&gt;wlc&lt;/span&gt;&lt;span&gt;补充，为了降低&lt;/span&gt;&lt;span&gt;overhead&lt;/span&gt;&lt;span&gt;出现重复的情况&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;overhead=((active+1)*256+inactive))/weight&lt;/p&gt;
&lt;p&gt;NQ&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Never queue&lt;/span&gt;&lt;span&gt;，算法基本和&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt;&lt;span&gt;相同，为了避免性能差的&lt;/span&gt;&lt;span&gt;RS&lt;/span&gt;&lt;span&gt;长时间处于空闲状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;lblc&lt;span&gt;：基于目标地址的最小连接数调度，这种算法那是&lt;/span&gt;&lt;span&gt;lc&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;dh&lt;/span&gt;&lt;span&gt;的组合，适应于&lt;/span&gt;&lt;span&gt;cache&lt;/span&gt;&lt;span&gt;场景&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;lblcr&lt;span&gt;：带有复制功能的&lt;/span&gt;&lt;span&gt;lblc&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;5.ipvsadm的使用格式&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ipvsadm的使用格式
ipvsadm &lt;/span&gt;-A|E -t|u|f service-address:port [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine]    &amp;lt;&amp;lt;&lt;span&gt;添加一个lvs服务器  
ipvsadm &lt;/span&gt;-D -t|u|f service-address                  &amp;lt;&amp;lt;&lt;span&gt;删除一个lvs服务器
ipvsadm &lt;/span&gt;-C &amp;lt;&amp;lt;&lt;span&gt;清空规则表
ipvsadm &lt;/span&gt;-R &amp;lt;&amp;lt;&lt;span&gt;从标准输入恢复规则表
ipvsadm &lt;/span&gt;-S [-n]                          &amp;lt;&amp;lt;&lt;span&gt;使用service ipvsadm save即可
ipvsadm &lt;/span&gt;-a|e -t|u|f service-address -r server-address [options] &amp;lt;&amp;lt;&lt;span&gt;添加一个后端web服务
ipvsadm &lt;/span&gt;-d -t|u|f service-address -r server-address          &amp;lt;&amp;lt;&lt;span&gt;删除一个后端web服务
ipvsadm &lt;/span&gt;-L|l [options]                              &amp;lt;&amp;lt;&lt;span&gt; 显示lvs中的规则表
ipvsadm &lt;/span&gt;-Z [-t|u|f service-&lt;span&gt;address]
ipvsadm &lt;/span&gt;--&lt;span&gt;set&lt;/span&gt;&lt;span&gt; tcp tcpfin udp
ipvsadm &lt;/span&gt;--start-daemon state [--mcast-&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;] [--&lt;span&gt;syncid sid]
ipvsadm &lt;/span&gt;--stop-&lt;span&gt;daemon state
ipvsadm &lt;/span&gt;-&lt;span&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.ipvsad的选项参数&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;A：添加一个虚拟服务（添加vip）[相当于负载均衡哪个服务器]
&lt;/span&gt;-&lt;span&gt;E：编辑修改一个虚拟服务
&lt;/span&gt;-&lt;span&gt;D：删除虚拟服务
&lt;/span&gt;-&lt;span&gt;C：清空规则表
&lt;/span&gt;-&lt;span&gt;R：从标准输入恢复规则表
&lt;/span&gt;--save|-&lt;span&gt;S：将当前内存中的规则保存到标准输出
&lt;/span&gt;-&lt;span&gt;a：指定在虚拟服务中添加RS节点 [添加后端的web服务器]
&lt;/span&gt;-&lt;span&gt;e：指定在虚拟服务中编辑修改RS节点
&lt;/span&gt;-&lt;span&gt;d：指定在虚拟服务中删除RS节点
&lt;/span&gt;-L|-l：显示lvs中的规则表 &amp;lt;&amp;lt; ipvsadm -L -n --&lt;span&gt;stats
&lt;/span&gt;-&lt;span&gt;Z：将计数器清零
&lt;/span&gt;-t service-&lt;span&gt;address[:port]：该规则是对tcp协议的请求做调度
&lt;/span&gt;-u service-&lt;span&gt;address[:port]：该规则是对udp协议的请求做调度
&lt;/span&gt;-&lt;span&gt;f：表示这个请求是经过iptables所标记过的服务类型
&lt;/span&gt;-&lt;span&gt;r: 指定真实服务器的地址(remote)
&lt;/span&gt;-s scheduler：指定该规则要用的调度算法（rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|&lt;span&gt;nq）
&lt;/span&gt;-&lt;span&gt;p [time]：指定在多次时间以内，将相同的客户端调度到相同的后端节点之上，默认时间300s
&lt;/span&gt;-&lt;span&gt;w：设置RS节点的权重
&lt;/span&gt;-&lt;span&gt;g：指定用DR模式（默认）
&lt;/span&gt;-&lt;span&gt;i：指定用tunnel模式
&lt;/span&gt;-m：指定用nat模式
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;7.ipvsadm主要配置文件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;说明：&lt;/span&gt;lvs&lt;span&gt;主要文件说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;/etc/rc.d/init.d/ipvsadm&lt;span&gt;：&lt;/span&gt;&lt;span&gt;sysV&lt;/span&gt;&lt;span&gt;风格服务管理脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;/etc/sysconfig/ipvsadm-config&lt;span&gt;：配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;/sbin/ipvsadm&lt;span&gt;：用于配置&lt;/span&gt;&lt;span&gt;lvs&lt;/span&gt;&lt;span&gt;规则的工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;/sbin/ipvsadm-restore&lt;span&gt;：恢复或者读取规则到内存的工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;/sbin/ipvsadm-save&lt;span&gt;：保存内存中的规则的工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【默认情况下，所配置的规则都是保存在内存中的】&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;8.LVS的DR模式实战&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1.准备环境&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;centos7.5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DR1  172.20.10.2/28&lt;/p&gt;
&lt;p&gt;WEB1 172.20.10.8/28&lt;/p&gt;
&lt;p&gt;WEB2 172.20.10.8/28&lt;/p&gt;
&lt;p&gt;VIP  172.20.10.11/28&lt;/p&gt;
&lt;h3&gt; 2.配置服务器端&lt;/h3&gt;
&lt;p&gt;安装依赖包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install libnl* popt* kernel-devel -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给安装的内核开发库做连接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ln -s /usr/src/kernels/&lt;span&gt;3.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;862&lt;/span&gt;.el7.x86_64/ /usr/src/linux/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装lvs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install ipvsadm -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加一个vip&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ip a a &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;/&lt;span&gt;28&lt;/span&gt; dev eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加一个虚拟服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ipvsadm -A -t &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -&lt;span&gt;s rr&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在虚拟服务器中添加后端服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ipvsadm -a -t &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -r &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.9&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -w &lt;span&gt;1&lt;/span&gt; -&lt;span&gt;g
[root@ken &lt;/span&gt;~]# ipvsadm -a -t &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -r &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.8&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -w &lt;span&gt;1&lt;/span&gt; -g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ipvsadm -L -n --&lt;span&gt;stats
IP Virtual Server version &lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; (size=&lt;span&gt;4096&lt;/span&gt;&lt;span&gt;)
Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes
  &lt;/span&gt;-&amp;gt;&lt;span&gt; RemoteAddress:Port
TCP  &lt;/span&gt;&lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;                     &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;
  -&amp;gt; &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.8&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;                      &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;
  -&amp;gt; &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.9&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;                      &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;        &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.配置客户端&lt;/h3&gt;
&lt;p&gt;两台客户端配置保持完全相同，除了测试文件之外。&lt;/p&gt;
&lt;p&gt;安装配置web服务器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@ken ~]# yum install httpd -&lt;span&gt;y
[root@ken &lt;/span&gt;~]# echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;this is 172.20.10.9 for test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;/&lt;span&gt;var&lt;/span&gt;/www/html/&lt;span&gt;index.html
[root@ken &lt;/span&gt;~]# systemctl restart http
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给RS绑定虚拟IP&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# ip a a &lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;10.11&lt;/span&gt;/&lt;span&gt;32&lt;/span&gt; dev lo:&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在RS做ARP抑制&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ken ~]# echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;/proc/sys/net/ipv4/conf/lo/&lt;span&gt;arp_ignore
[root@ken &lt;/span&gt;~]# echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;/proc/sys/net/ipv4/conf/all/&lt;span&gt;arp_ignore
[root@ken &lt;/span&gt;~]# echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;/proc/sys/net/ipv4/conf/lo/&lt;span&gt;arp_announce
[root@ken &lt;/span&gt;~]# echo &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;9.关闭安全服务&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@ken ~]# setenforce &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
[root@ken &lt;/span&gt;~]# iptables -F
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;10.浏览器测试&lt;/h2&gt;
&lt;p&gt;输入VIP地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201810/1499615-20181001112452546-250128438.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进行刷新测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1499615/201810/1499615-20181001112654284-737434255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试完成！&lt;/p&gt;
&lt;h2&gt;11.补充&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;关于&lt;/span&gt;arp&lt;span&gt;抑制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：设置不对某些&lt;/span&gt;arp&lt;span&gt;请求做应答&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现原理：修改内核参数&lt;/span&gt; /proc/sys/net/ipv4/conf/&lt;/p&gt;

&lt;p&gt;&lt;span&gt;控制方式&lt;/span&gt;1&lt;span&gt;：&lt;/span&gt;&lt;span&gt;arp_ignore&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;0&lt;span&gt;：默认，表示的当该主机收到&lt;/span&gt;&lt;span&gt;arp&lt;/span&gt;&lt;span&gt;请求，只有该主机有所请求的哪个&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;地址，就会给对方做成应答&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;：只对哪些请求的目标&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;是当前主机的网卡接口&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;这个接口就是插着网线的接口&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;上的地址的时候，才会做出应答&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;控制方式&lt;/span&gt;2&lt;span&gt;：&lt;/span&gt;&lt;span&gt;arp_announced&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：限制当前主机做&lt;/span&gt;arp&lt;span&gt;应该的条件（也就是限制当用户所请的&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;是哪个&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;的时候，才做&lt;/span&gt;&lt;span&gt;arp&lt;/span&gt;&lt;span&gt;应答）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;0&lt;span&gt;：默认值，表示在任意网络接口上的&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;都可以做&lt;/span&gt;&lt;span&gt;arp&lt;/span&gt;&lt;span&gt;应答&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;：优先使用本地的接口做&lt;/span&gt;&lt;span&gt;arp&lt;/span&gt;&lt;span&gt;应答&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2&lt;span&gt;：优先使用子接口做&lt;/span&gt;&lt;span&gt;arp&lt;/span&gt;&lt;span&gt;应答&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Oct 2018 03:35:00 +0000</pubDate>
<dc:creator>技术流ken</dc:creator>
<og:description>1.lvs简介 LVS的英文全称是Linux Virtual Server，即Linux虚拟服务器。 特点 跨平台：window,linux 作用 实现负载均衡 核心组件 ip_v</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenken2018/p/9734382.html</dc:identifier>
</item>
<item>
<title>接口测试用例设计思路 - 主妇笔记</title>
<link>http://www.cnblogs.com/dinghanhua/p/9734383.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dinghanhua/p/9734383.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近的项目经常测试接口，记录一下接口测试用例设计的思路。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般咱们功能测试用例包含： 前置条件+测试步骤+预期结果，接口测试也是一样的。以下是我的接口测试用例设计思路。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第一步  分析接口。就如同分析功能测试的需求文档。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;考虑几个方面：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1 有哪些接口 &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;2 分析每一个接口：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;header，url，参数（含义、可选/必选、格式、类型等等），响应数据来源及数据量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;3 分析接口与接口之间的关联关系或者叫依赖关系  &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;4 分析接口与业务直接的关联关系或者叫依赖关系  &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;第二步 设计接口测试用例。 尽量做到考虑全面，高覆盖率。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1 接口的功能是否ok，是否符合接口文档，接口传递的数据需要入库的数据库是否更新。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;2 参数很多是key:value格式的&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;分别考虑key的个数、空、修改key；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;value的个数（多参数或者少参数）、空值、长度、格式、类型等；value是枚举类型的，要遍历每一个枚举值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;3 业务依赖关系&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;4 接口依赖关系&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;【比如登录接口成功，用户信息获取接口才可以成功；否则提示未登录】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;5 header、cookie&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;6 接口的安全性&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;【是否有敏感信息、是否加密等】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;7 响应结果的数据量&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;【&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;有些&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;接口返回大量数据，一定要设置取数时间段。首先跟业务确认预估的业务量 并对预估的业务量在后台添加上对应的测试数据量，再反馈给业务当前业务量下接口的响应时间。如果时间太长，可以缩短取值区间，或进行分段请求&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;第三步 调试接口脚本。可以使用jmeter，postman等接口工具，也可以自编接口测试脚本。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1 调试脚本&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;2 添加逻辑控制，对脚本内的数据进行参数化 【前置条件，测试步骤 及 测试数据】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;3 添加断言【其实就是用例里的预期结果】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;第四部 执行测试，脚本的批量执行。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;对执行结果进行分析，错误分析、响应结果分析、响应时间分析等等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Oct 2018 03:35:00 +0000</pubDate>
<dc:creator>主妇笔记</dc:creator>
<og:description>最近的项目经常测试接口，记录一下接口测试用例设计的思路。 一般咱们功能测试用例包含： 前置条件+测试步骤+预期结果，接口测试也是一样的。以下是我的接口测试用例设计思路。 第一步 分析接口。就</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dinghanhua/p/9734383.html</dc:identifier>
</item>
<item>
<title>CSS 小结笔记之em - Assist</title>
<link>http://www.cnblogs.com/Assist/p/9732780.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Assist/p/9732780.html</guid>
<description>&lt;h2&gt;1、为什么使用em&lt;/h2&gt;
&lt;p&gt;em也是css中的一种单位，和px类似。很多人会疑惑为什么有了px之后还要使用em，而且em使用起来相对于px来讲比较麻烦。&lt;/p&gt;
&lt;p&gt;em主要是应用于弹性布局，下面给出一个小栗子说明em的强大之处&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ec3f961f-3308-4e70-b837-bf042519dcdb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ec3f961f-3308-4e70-b837-bf042519dcdb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ec3f961f-3308-4e70-b837-bf042519dcdb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        ul &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .top &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 960px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ccc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .left &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 16px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 18px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .right &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1.125em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; right&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例，没有em的情况&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;em测试用例有em的强大之处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这里模仿了一个网页的大致布局，给出使用em和px的区别。&lt;/p&gt;
&lt;p&gt;在正常情况下，em和px看起来没什么区别。如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180930160209504-1864544778.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;256&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，按住ctrl键并连续按 ‘-’（减号）键，对页面不断进行缩小。缩小到25%时会出现很明显的差别（这里使用的是chrome浏览器，其他浏览器如果没有这种状况，可以在浏览器中手动去改动字体大小，在增大字体的情况下可以看出类似的情况发生）具体如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180930160607107-1716512297.png&quot; alt=&quot;&quot; width=&quot;318&quot; height=&quot;446&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　可以看到使用px的左边已经完全崩溃了，看不出来具体的文字了。而右边使用em的仍然可以清楚的看到文字。造成这种现象的主要原因是em是相对大小，使用em时对页面进放大或缩小不会造成太大的影响。&lt;/p&gt;
&lt;p&gt;　既然是相对大小，那么就会有参考大小，&lt;strong&gt;em的参考大小是当前元素的字体大小。&lt;/strong&gt;这时又会引发一个问题，既然是当前元素的字体大小作为参考，那么当前字体以em为单位时又是以什么作为参考呢？这时是以其父级元素的字体大小作为参考。&lt;/p&gt;
&lt;p&gt;　因此当整个页面都是使用em作为字体大小的情况下，页面中的1em就是浏览器默认的字体大小为16px;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2、em的具体使用：&lt;/strong&gt;&lt;/h2&gt;
&lt;h4&gt;　1、设置body{font-size：1em} &lt;/h4&gt;
&lt;p&gt;　　在设置好body的字体大小的情况下，由于body字体是继承浏览器默认是16px，那么这时只要网页上全是用em，那么1em=16px；&lt;/p&gt;
&lt;h4&gt;　2、开始计算元素具体需要的大小&lt;/h4&gt;
&lt;p&gt;　　（1）如果元素的字体大小是继承于上层即16px，那么在元素内部1em=16px；因此计算方法如下&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;em&gt;&lt;strong&gt;需要的em值=当前元素的px值/父元素的字体大小值px（一般是16px）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　　　　　&lt;/em&gt;例如：1px=1/16=0.0625em，18px=18/16=1.125em&lt;/p&gt;
&lt;p&gt;　　（2）如果元素的字体大小是自己设置的&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;em&gt;&lt;strong&gt;当前元素的字体大小的em值=当前元素字体大小px/父元素字体大小px&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;　　　　　　当前元素需要的其他em值=当前元素的px值/元素自身的字体大小px&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　　　　&lt;/em&gt;下面通过一个例子进行具体的解释　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0.0625em solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 32px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aaa son1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aaa son2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　打开浏览器中显示的.son1盒子的盒子模型，以及网页结果图具体入下&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180930170911933-2134643247.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180930171558709-705326859.png&quot; alt=&quot;&quot; width=&quot;97&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以发现.son1 和.son2 一模一样。&lt;/p&gt;
&lt;p&gt;　　.son1 的字体大小为 2em 对应的px为 2*16=32px；（反过来可以验证公式 &lt;em&gt;&lt;strong&gt;当前元素的字体大小的em值（&lt;span&gt;2&lt;/span&gt;）=当前元素字体大小px（&lt;span&gt;32&lt;/span&gt;）/父元素字体大小px（&lt;span&gt;16&lt;/span&gt;）&lt;/strong&gt;&lt;/em&gt;）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;高度宽度为5em 对应px为 5*32=160px；（反过来可以验证公式&lt;em&gt;&lt;strong&gt;当前元素需要的其他em值&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;（&lt;span&gt;5&lt;/span&gt;）&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;=当前元素的px值&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;（&lt;span&gt;160&lt;/span&gt;）&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;/元素自身的字体大小px&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;（&lt;span&gt;32&lt;/span&gt;）&lt;/strong&gt;&lt;/em&gt;）&lt;/p&gt;
&lt;p&gt;注意：在ie5/6中还需要添html { font-size：100%} 以保证弹性布局（但是目前ie5/6基本没有，而且这条是根据文章&lt;a href=&quot;http://v1.jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css&quot;&gt; &lt;span&gt;《&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css&quot; target=&quot;_blank&quot;&gt;The Incredible Em &amp;amp; Elastic Layouts with CSS&lt;/a&gt;&lt;a href=&quot;http://v1.jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css&quot;&gt;&lt;span&gt;》&lt;/span&gt; &lt;/a&gt;得知的,本人并没有试出来具体问题在哪。。先记下，以后遇到类似情况使用）&lt;/p&gt;

&lt;h2&gt;3、rem的使用&lt;/h2&gt;
&lt;p&gt;　　rem使用方法和em类似，不过rem是相对于根元素的大小（即html的字体大小），而不是自身的大小。2中的栗子中的.son1 的相关带em的属性全改为rem 代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_00da4f3d-51a1-497e-be98-44380eab479a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_00da4f3d-51a1-497e-be98-44380eab479a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_00da4f3d-51a1-497e-be98-44380eab479a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=\, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2rem&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5rem&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5rem&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0.0625rem solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 32px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 160px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aaa son1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aaa son2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;结果图为：&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180930173113129-1197596583.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;174&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 因为.son1 中的单位全改为rem，参考对象为html字体的大小即为16px，所以.son1字体大小为&lt;strong&gt;2*16=32px  &lt;/strong&gt;，宽度和高度为&lt;strong&gt;5*16=80px，&lt;/strong&gt;边框为&lt;strong&gt;1px&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Oct 2018 02:56:00 +0000</pubDate>
<dc:creator>Assist</dc:creator>
<og:description>1、为什么使用em em也是css中的一种单位，和px类似。很多人会疑惑为什么有了px之后还要使用em，而且em使用起来相对于px来讲比较麻烦。 em主要是应用于弹性布局，下面给出一个小栗子说明em的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Assist/p/9732780.html</dc:identifier>
</item>
<item>
<title>大数据开发需要学什么?-《每日五分钟搞定大数据》 - 大叔据</title>
<link>http://www.cnblogs.com/uncleData/p/9734010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/uncleData/p/9734010.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意本文非广告，阅读时间四分钟左右，适合大数据入门级读者阅读&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;大数据需要学习什么？很多人问过我这个问题。每一次回答完都觉得自己讲得太片面了，总是没有一个合适的契机去好好总结这些内容，直到开始写这篇东西。大数据是近五年兴起的行业，发展迅速，很多技术经过这些年的迭代也变得比较成熟了，同时新的东西也不断涌现，想要保持自己竞争力的唯一办法就是不断学习。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面的是我整理的一张思维导图，内容分成几大块，包括了分布式计算与查询，分布式调度与管理，持久化存储，大数据常用的编程语言等等内容，每个大类下有很多的开源工具，这些就是作为大数据程序猿又爱又恨折腾得死去活来的东西了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491039/201809/1491039-20180930091035512-1150957499.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt;
&lt;p&gt;java可以说是大数据最基础的编程语言，据我这些年的经验，我接触的很大一部分的大数据开发都是从Jave Web开发转岗过来的（当然也不是绝对我甚至见过产品转岗大数据开发的，逆了个天）。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一是因为大数据的本质无非就是海量数据的计算，查询与存储，后台开发很容易接触到大数据量存取的应用场景&lt;/li&gt;
&lt;li&gt;二就是java语言本事了，天然的优势，因为大数据的组件很多都是用java开发的像HDFS,Yarn,Hbase,MR,Zookeeper等等，想要深入学习，填上生产环境中踩到的各种坑，必须得先学会java然后去啃源码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说到啃源码顺便说一句，开始的时候肯定是会很难，需要对组件本身和开发语言都有比较深入的理解，熟能生巧慢慢来，等你过了这个阶段，习惯了看源码解决问题的时候你会发现源码真香。&lt;/p&gt;
&lt;h2 id=&quot;scala&quot;&gt;Scala&lt;/h2&gt;
&lt;p&gt;scala和java很相似都是在jvm运行的语言，在开发过程中是可以无缝互相调用的。Scala在大数据领域的影响力大部分都是来自社区中的明星Spark和kafka,这两个东西大家应该都知道（后面我会有文章多维度介绍它们），它们的强势发展直接带动了Scala在这个领域的流行。&lt;/p&gt;
&lt;h2 id=&quot;python和shell&quot;&gt;Python和Shell&lt;/h2&gt;
&lt;p&gt;shell应该不用过多的介绍非常的常用，属于程序猿必备的通用技能。python更多的是用在数据挖掘领域以及写一些复杂的且shell难以实现的日常脚本。&lt;/p&gt;

&lt;p&gt;什么是分布式计算？分布式计算研究的是如何把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给许多服务器进行处理，最后把这些计算结果综合起来得到最终的结果。&lt;/p&gt;
&lt;p&gt;举个栗子，就像是组长把一个大项目拆分，让组员每个人开发一部分，最后将所有人代码merge，大项目完成。听起来好像很简单，但是真正参与过大项目开发的人一定知道中间涉及的内容可不少。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如这个大项目如何拆分？任务如何分配？每个人手头已有工作怎么办？每个人能力不一样怎么办？每个人开发进度不一样怎么办？开发过程中组员生病要请长假他手头的工作怎么办？指挥督促大家干活的组长请假了怎么办？最后代码合并过程出现问题怎么办？项目延期怎么办？项目最后黄了怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仔细想想上面的夺命十连问，其实每一条都是对应了分布式计算可能会出现的问题，具体怎么对应大家思考吧我就不多说了，其实已经是非常明显了。也许有人觉得这些问题其实在多人开发的时候都不重要不需要特别去考虑怎么办，但是在分布式计算系统中不一样，每一个都是非常严重并且非常基础的问题，需要有很好的解决方案。&lt;/p&gt;
&lt;p&gt;最后提一下，分布式计算目前流行的工具有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;离线工具Spark，MapReduce等&lt;/li&gt;
&lt;li&gt;实时工具Spark Streaming，Storm，Flink等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这几个东西的区别和各自的应用场景我们之后再聊。&lt;/p&gt;

&lt;p&gt;传统的网络存储系统采用的是集中的存储服务器存放所有数据，单台存储服务器的io能力是有限的，这成为了系统性能的瓶颈，同时服务器的可靠性和安全性也不能满足需求，尤其是大规模的存储应用。&lt;/p&gt;
&lt;p&gt;分布式存储系统，是将数据分散存储在多台独立的设备上。采用的是可扩展的系统结构，利用多台存储服务器分担存储负荷，利用位置服务器定位存储信息，它不但提高了系统的可靠性、可用性和存取效率，还易于扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491039/201809/1491039-20180923163220973-309243746.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是hdfs的存储架构图，hdfs作为分布式文件系统，兼备了可靠性和扩展性，数据存储3份在不同机器上（两份存在同一机架，一份存在其他机架）保证数据不丢失。由NameNode统一管理元数据，可以任意扩展集群。&lt;/p&gt;
&lt;p&gt;主流的分布式数据库有很多hbase，mongoDB，GreenPlum，redis等等等等，没有孰好孰坏之分，只有合不合适，每个数据库的应用场景都不同，其实直接比较是没有意义的，后续我也会有文章一个个讲解它们的应用场景原理架构等。&lt;/p&gt;

&lt;p&gt;现在人们好像都很热衷于谈&quot;去中心化&quot;，也许是区块链带起的这个潮流。但是&quot;中心化&quot;在大数据领域还是很重要的，至少目前来说是的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分布式的集群管理需要有个组件去分配调度资源给各个节点，这个东西叫yarn;&lt;/li&gt;
&lt;li&gt;需要有个组件来解决在分布式环境下&quot;锁&quot;的问题，这个东西叫zookeeper；&lt;/li&gt;
&lt;li&gt;需要有个组件来记录任务的依赖关系并定时调度任务，这个东西叫azkaban。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然这些“东西”并不是唯一的，其实都是有很多替代品的，我这里只举了几个比较常用的例子。&lt;/p&gt;

&lt;p&gt;回答完这个问题，准备说点其他的。最近想了很久，准备开始写一系列的文章，记录这些年来的所得所想，感觉内容比较多不知从哪里开始，就画了文章开头的思维导图确定了大的方向，大家都知道大数据的主流技术变化迭代很快，不断会有新的东西加入，所以这张图里内容也会根据情况不断添加。细节的东西我会边写边定，大家也可以给我一些建议，我会根据写的内容实时更新这张图以及下面的目录。&lt;/p&gt;
&lt;h2 id=&quot;关于分组&quot;&gt;关于分组&lt;/h2&gt;
&lt;p&gt;上面的大数据组件分组其实是比较纠结的，特别是作为一个有强迫症的程序猿，有些组件好像放在其他组也可以，而且我又不想要分太多的组看起来会很乱，所以上面这张图的分组方式会稍主观一些。分组方式肯定不是绝对的。&lt;/p&gt;
&lt;p&gt;举个例子，像kafka这种消息队列一般不会和其它的数据库或者像HDFS这种文件系统放在一起，但是它们同样都具备有分布式持久化存储的功能，所以就把它们放在一块儿了；还有openTsDB这种时序数据库，说是数据库实际上只是基于HBase上的一个应用，我觉得这个东西更侧重于查询和以及用何种方式存储，而不在于存储本身，所以就主观地放在了“分布式计算与查询”这一类，还有OLAP的工具也同样放在了这一组。&lt;/p&gt;
&lt;p&gt;同样的情况还存在很多，大家有异议也可以说出来讨论下。&lt;/p&gt;
&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;大家都知道大数据的技术日新月异，作为一个程序猿想要保持竞争力就必须得不断地学习。写这些文章的目的比较简单，&lt;strong&gt;一是可以当做一个笔记，梳理知识点；二是希望能帮到一些人了解学习大数据&lt;/strong&gt;。每一篇的篇幅不会太长，阅读时间控制在5到10分钟。我的公众号大叔据，会同步更新。喜欢看公众号文章的同学可以关注下，文章的篇幅不会太长，不会占用你太多的阅读时间，每天花一点时间学习，长期积累总是会有收获的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1491039/201809/1491039-20180927100606722-790197844.jpg&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 01 Oct 2018 00:17:00 +0000</pubDate>
<dc:creator>大叔据</dc:creator>
<og:description>注意本文非广告，阅读时间四分钟左右，适合大数据入门级读者阅读 大数据需要学习什么？很多人问过我这个问题。每一次回答完都觉得自己讲得太片面了，总是没有一个合适的契机去好好总结这些内容，直到开始写这篇东西</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/uncleData/p/9734010.html</dc:identifier>
</item>
<item>
<title>Linux 桌面玩家指南：05. 发博客必备的图片处理和视频录制神器 - 京山游侠</title>
<link>http://www.cnblogs.com/youxia/p/LinuxDesktop005.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youxia/p/LinuxDesktop005.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;要在我的随笔后写评论的小伙伴们请注意了，我的博客开启了 MathJax 数学公式支持，MathJax 使用&lt;code&gt;$&lt;/code&gt;标记数学公式的开始和结束。如果某条评论中出现了两个&lt;code&gt;$&lt;/code&gt;，MathJax 会将两个&lt;code&gt;$&lt;/code&gt;之间的内容按照数学公式进行排版，从而导致评论区格式混乱。如果大家的评论中用到了&lt;code&gt;$&lt;/code&gt;，但是又不是为了使用数学公式，就请使用&lt;code&gt;\$&lt;/code&gt;转义一下，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想从头阅读该系列吗？下面是传送门：&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;写博客时，总免不了要贴图片，有时是对屏幕进行截图，有时是自己画示意图，要求更高的时候，甚至还需要 GIF 动画或者屏幕录像，所以熟练掌握几个图片处理软件极其重要。在这里，我把我自己在 Linux 系统下使用到的运行稳定、界面美观、功能强大的图片处理工具介绍给大家。&lt;/p&gt;
&lt;h2 id=&quot;录制-gif-动画的工具-peek&quot;&gt;录制 GIF 动画的工具 Peek&lt;/h2&gt;
&lt;p&gt;这个工具 Ubuntu 官方软件仓库中没有，但是 PPA 中有。PPA是 personal package archive 的缩写，即个人维护的软件包，非 Ubuntu 官方维护的软件包。使用PPA，软件制作者可以轻松地发布软件，并且能够准确地对用户进行升级。Ubuntu用户使用 PPA 源将更加方便的获得软件的最新版本。关于PPA的详细情况，可以参考：&lt;a href=&quot;https://help.launchpad.net/Packaging/PPA&quot; class=&quot;uri&quot;&gt;https://help.launchpad.net/Packaging/PPA&lt;/a&gt;。针对 ubuntu 的用户，访问这个网站 &lt;a href=&quot;https://launchpad.net/&quot; class=&quot;uri&quot;&gt;https://launchpad.net/&lt;/a&gt;，搜索需要的软件，就可以得到该软件的PPA源。当然，对于很多开源软件，github 中也可以找到它。我们到 github 中搜索 peek，找到该软件，查看它的安装说明，如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930123354827-681492510.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该说明中还是指导用户使用 PPA 进行安装。命令如下：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;sudo add-apt-repository ppa:peek-developers/stable
sudo apt update
sudo apt install peek&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Peek 的使用很简单，只需要把它的窗口拖动到要录像的区域，开始录制就行了。如下 GIF 动画：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930124425439-1732770513.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重要的是，使用 Peek 录制的 GIF 动画文件比较小，适合发博客。顺便提一句，在 Windows 下好用的录制 GIF 动画的软件是 ScreenToGif，我也是在 github 下找到的。&lt;/p&gt;
&lt;h2 id=&quot;gnome-自带的截图工具-gnome-screenshot&quot;&gt;Gnome 自带的截图工具 gnome-screenshot&lt;/h2&gt;
&lt;p&gt;这个软件不用自己安装，它是 Gnome 桌面自带的截图软件，一般在 Linux 系统安装完成后就自动安装了，它的软件名是 gnome-screenshot，中文名就叫截图，很直接。虽然 Linux 下还有很多其它更优秀的截图软件，但是我认为这个系统自带的已经完全够用了。而且很好用。&lt;/p&gt;
&lt;p&gt;使用该工具甚至都不需要特别运行它，只需要记住 Gnome 桌面的几个快捷键就足够了，这几个快捷键分别如下：&lt;/p&gt;
&lt;p&gt;1、PrintScreen 键：直接按下键盘右上方的“Print Screen”键，就可以对整个屏幕进行截图，“咔擦”一声之后，就会跳出保存图片的对话框，非常方便。&lt;/p&gt;
&lt;p&gt;2、Alt + PrintScreen 键：如果只需要对当前窗口进行截图，按下 Alt + PrintScreen 即可。&lt;/p&gt;
&lt;p&gt;3、Shift + PrintScreen 键：如果只想对某个区域进行截图，按下 Shift + PrintScreen 键，然后鼠标指针就变了形状，按住鼠标左键拖动，选择屏幕上的哪个范围就可以对哪个范围进行截图。&lt;/p&gt;
&lt;p&gt;小技巧：使用快捷键截图时，往往难以截下如菜单项、下拉选框等弹出式界面里的内容。要截取这些内容，就不能使用上面的快捷键，必须打开截图软件，并设置延迟几秒后截图，然后打开菜单进行操作，设定的延迟时间一到，就把菜单、下拉选框中的内容截下了。&lt;/p&gt;
&lt;h2 id=&quot;功能更强大的截图工具-shutter&quot;&gt;功能更强大的截图工具 shutter&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;sudo aptitude install shutter&lt;/code&gt;命令就可以安装。该工具比 Gnome 自带的截图工具要稍微强大一点，可以针对选区、窗口、工作区进行截图，还可以针对菜单进行截图。截图后，还可以通过运行插件的方式对图片应用简单的特效，比如我最喜欢的手撕纸效果。Shutter 的界面如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930130546372-1623333673.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行插件的界面：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930130712219-574908257.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;位图处理软件-gimp&quot;&gt;位图处理软件 GIMP&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;sudo aptitude install gimp&lt;/code&gt;命令就可以安装。这款软件可以算得上是 Linux 系统下的 Photoshop，功能强大。正是因为功能强大，所以要驾驭它必须得下点功夫。由于本人以前有 Photoshop 基础，所以上手该软件也不算难。该软件启动后的初始界面可能不太符合大家的习惯，如下图：&lt;br/&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/16576/201410/201708311373249.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过没关系，通过窗口菜单中的单窗口模式选项，可以更改为以下界面：&lt;br/&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/16576/201410/201709564965273.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;更适合绘图板使用的工具-mypaint&quot;&gt;更适合绘图板使用的工具 MyPaint&lt;/h2&gt;
&lt;p&gt;同样使用&lt;code&gt;sudo aptitude install mypaint&lt;/code&gt;即可安装。为什么说它更适合绘图板使用呢？因为它定义笔刷更自由。其界面如下图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930132059243-817776112.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;矢量图绘制软件-inkscape&quot;&gt;矢量图绘制软件 Inkscape&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;sudo aptitude install inkscape&lt;/code&gt;安装。先来看看 Inkscape 的界面，功能很强大的说：&lt;br/&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/16576/201410/201712477468288.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为什么我这里要介绍一个位图处理软件，然后又介绍一个矢量图绘制软件呢？那是因为位图处理和矢量图处理还是有区别的。举例说明：比如我经常要在我截下的图片中，重点标出某个命令或菜单，这时我习惯在目标上画一个红色的线框表示强调。对于画框这么一件简单的事，用 Inkscape 就很方便，在矢量图绘制软件中，画框就是画框，画完框后可以改变这个框的边线颜色及样式，可以改变它的填充颜色及样式，可以拖动它的位置，可以改变它的大小，但是在位图处理软件中，就得换一种思考模式，在位图处理软件中，要画框只能先建立一个矩形的选区，然后对这个选区进行描边和填充，还可以对选取进行羽化，这样可以得到一个模模糊糊的框框，一旦描边和填充结束，则这个框框就再不能更改。所以 Inkscape 适合做添加框框、文字这样的工作，而 GIMP 适合做对选区羽化、非规则区域切图、添加阴影和发光这样的工作。&lt;/p&gt;
&lt;h2 id=&quot;示意图绘制软件-dia&quot;&gt;示意图绘制软件 Dia&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;sudo aptitude install dia&lt;/code&gt;进行安装。Dia 功能也非常强大，它最大的优势是它里面内置很多图像元素，非常适合画流程图、UML 图等各种示意图。界面如下：&lt;br/&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/16576/201410/201724386377672.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面几个类图是我随便乱画的，就是体现一下 DIA 的效果，里面的背景颜色没有特殊意义。&lt;/p&gt;
&lt;h2 id=&quot;在线示意图绘制工具-draw.io&quot;&gt;在线示意图绘制工具 Draw.io&lt;/h2&gt;
&lt;p&gt;直接在浏览器的地址栏输入&lt;code&gt;www.draw.io&lt;/code&gt;就可以使用该工具了，其界面如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930132304377-865668408.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以直接下载它的桌面版进行安装，然后离线使用。桌面版界面如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930132538572-1272159779.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;估计也就是对在线版做了个简单的封装。&lt;/p&gt;
&lt;h2 id=&quot;uml-建模工具-umbrello&quot;&gt;UML 建模工具 umbrello&lt;/h2&gt;
&lt;p&gt;为了找一款好用的的 UML 建模工具我是花了不少的心思，好的工具都要钱，比如 Rose、Enterprise Architecture、Microsoft Visual Studio 等等；不要钱的工具，品质总是不那么令人满意。经过多方测试后，我最终选择了 umbrello。这是 KDE 桌面自带的建模软件，但是在 Gnome 桌面下也可以完美运行，使用&lt;code&gt;sudo aptitude install umbrello&lt;/code&gt;就可以安装。界面如下：&lt;br/&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/16576/201410/201728508087999.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;和 DIA 相比，它最大的优势就是支持 UML 的前向功能和逆向功能。也就是说，它可以从 UML 模型生成代码，也可以从我们写好的代码生成 UML 图。而 DIA 则是纯粹的绘图工具，UML 图就是图，它不能理解它的内涵，更不能生成代码。&lt;/p&gt;
&lt;h2 id=&quot;思维导图工具-xmind&quot;&gt;思维导图工具 XMind&lt;/h2&gt;
&lt;p&gt;我试过好几个开源的思维导图工具，包括 vym、 freemind 及其分支 freeplane，最后发现界面最美观，且生成的图片最美观的，依然是 XMind。其官网是 &lt;a href=&quot;https://www.xmind.net/&quot; class=&quot;uri&quot;&gt;https://www.xmind.net/&lt;/a&gt;。它是个开源软件，但同时也收费。除了官网，github 上也可以找到它。下载安装后，其界面如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930133753792-718408228.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;视频录制工具&quot;&gt;视频录制工具&lt;/h2&gt;
&lt;p&gt;要将我们的操作录制为视频，可以使用的软件比较多，有 recordmydesktop、simplescreenrecorder 和 kazam 可以用。前者在命令行使用，后两者都可以在图形界面下使用，并且在录制视频的同时还可以录制音频。这三个软件都可以使用&lt;code&gt;sudo aptitude install&lt;/code&gt;安装。下面是后两者的界面截图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/16576/201809/16576-20180930134143392-1167246794.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;求打赏&quot;&gt;求打赏&lt;/h2&gt;
&lt;p&gt;我对这次写的这个系列要求是非常高的：首先内容要有意义、够充实，信息量要足够丰富；其次是每一个知识点要讲透彻，不能模棱两可含糊不清；最后是包含丰富的截图，让那些不想装 Linux 系统的朋友们也可以领略到 Linux 桌面的风采。如果我的努力得到大家的认可，可以扫下面的二维码打赏一下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/16576/201808/16576-20180831154735325-1276475036.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;版权申明&quot;&gt;版权申明&lt;/h2&gt;
&lt;p&gt;该随笔由京山游侠在2018年10月01日发布于博客园，引用请注明出处，转载或出版请联系博主。QQ邮箱：1841079@qq.com&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 21:42:00 +0000</pubDate>
<dc:creator>京山游侠</dc:creator>
<og:description>特别说明： 要在我的随笔后写评论的小伙伴们请注意了，我的博客开启了 MathJax 数学公式支持，MathJax 使用 标记数学公式的开始和结束。如果某条评论中出现了两个 ，MathJax 会将两个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youxia/p/LinuxDesktop005.html</dc:identifier>
</item>
<item>
<title>Unity 如何高效的解析数据 - wuzhang</title>
<link>http://www.cnblogs.com/wuzhang/p/wuzhang20181001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuzhang/p/wuzhang20181001.html</guid>
<description>&lt;p&gt;昨天和朋友聊天时，他遇到这么一个问题：现在有按照一定格式的数据，例如：&lt;br/&gt;&lt;strong&gt;#code==text 此处是注释&lt;br/&gt;100==确定&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;101==取消&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;key==value&lt;/strong&gt; 这么个格式的,说白了就是怎样解析这些固定格式字符串的Key和Value而已。他们项目已经做过了数据的解析，现在他在做项目优化，发现这一块数据解析部分GC偏高,&lt;span&gt;何谓GC，就是&lt;em&gt;Garbage Collection，&lt;/em&gt;在.Net中GC是由系统自动调用的，对内存的释放和回收&lt;em&gt;。&lt;/em&gt;&lt;span&gt;程序员是特别害怕遇上GC的，数据结构设计不合理，导致系统频繁调用GC，从而导致GC的代数增加，最终结果就是你的程序就会越来越卡，直到无响应！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;他就问我：“要是我，我会选择什么样的方式去解析这些数据?&quot;&lt;/p&gt;
&lt;p&gt;我当时不假思索：“格式固定，那就按这个固定的格式去解析，不就可以了!&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;我们可以按照”==“进行分割，分割后刚好得到我们想要的Key和Value！刚好系统提供了N多分割的方法，在这里刚好用字符串的分割&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string[] keyPair = Regex.Split(data,@&quot;==&quot;,RegexOptions.IgnoreCase);&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 正则表达式分割字符串
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filePath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;infoDic&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;解析后的kv&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ParseDataTable(&lt;span&gt;string&lt;/span&gt; filePath,&lt;span&gt;ref&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; infoDic)
{
    infoDic.Clear();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (File.Exists(filePath))
    {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (FileStream fs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileStream(filePath,FileMode.Open,FileAccess.Read))
        {
            StreamReader sr &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(fs);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; data =&lt;span&gt; sr.ReadLine();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data.StartsWith(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;忽略注释行&lt;/span&gt;
&lt;span&gt;                {
                    data &lt;/span&gt;=&lt;span&gt; sr.ReadLine();
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分割key和value&lt;/span&gt;
                    &lt;span&gt;string&lt;/span&gt;[] keyPair = Regex.Split(data,&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,RegexOptions.IgnoreCase);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (keyPair.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!infoDic.ContainsKey(keyPair[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]))
                        {
                            infoDic.Add(keyPair[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;], keyPair[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        {
                            Debug.LogError(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[ERROR]:Has same key:{0},value:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,keyPair[&lt;span&gt;0&lt;/span&gt;],keyPair[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]));
                        }
                    }
                }
                data &lt;/span&gt;=&lt;span&gt; sr.ReadLine();
            }
            sr.Close();
            fs.Close();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506960/201809/506960-20180930233204776-1147116243.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;好了，方法一到此完美分割出key和value！&lt;strong&gt;But......&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;朋友说这就是他们正在使用的解析方式，正因为正则表达式使用及其的方便不需要关心它是怎么实现的所有产生大量的GC，导致我们束手无策，因为字符串匹配解析的同时会生成许多字符串临时变量，这些都要在内存堆上申请空间，在profiler中看到解析时有大概10M的GC。所以我想到的这个解析方式被否了！朋友让我继续想想有没有什么好的办法，过了一会他给我说了他的想法，为何我们不自己去写一种解析方式呢，正则耗内存，我们可以不用它，string临时变量占用内存我们也可以不用它改用StringBuilder来替代它。这么说是可行的啊！无论是我们自己解析还是使用正则去解析，这个读取还是肯定要做的，读取后针对这个string我们逐字节去解析，特殊字符就去特殊处理，添加特殊的标记，例如：&lt;br/&gt;‘&lt;strong&gt;#&lt;/strong&gt;’：表示该行是注释行，解析时可以忽略；&lt;br/&gt;‘&lt;strong&gt;\n&lt;/strong&gt;’：表示要换行了，也意味着接下来key要出现了;&lt;br/&gt;‘&lt;strong&gt;\r&lt;/strong&gt;’：回车键的标识符号；&lt;br/&gt;‘&lt;strong&gt;=&lt;/strong&gt;’：这是一个很重要的符号，这个要特殊照顾，对它采取计数，&lt;strong&gt;奇数个&lt;/strong&gt;出现时刚好是&lt;strong&gt;key的结束&lt;/strong&gt;位置，&lt;strong&gt;偶数个&lt;/strong&gt;出现时刚好是&lt;strong&gt;value的起始&lt;/strong&gt;位置，这里是不是信息量很大，你会很快的　　想到计数个数对2取余做判断处理；&lt;br/&gt;也就这几个关键字符，那么接下来看如何处理，取出我们想要的key和value呢！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据解析
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;数据字典kv&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; ParseDatatable(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
{
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; isKey = &lt;span&gt;false&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;key开始&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; isValue = &lt;span&gt;false&lt;/span&gt;;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;value开始&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; isValueStart = &lt;span&gt;false&lt;/span&gt;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否value首次检测&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; equalIndex = &lt;span&gt;0&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; = 出现次数的计数&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; valueStartIndex = &lt;span&gt;0&lt;/span&gt;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Value的起始索引&lt;/span&gt;
    StringBuilder sbKey = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
    StringBuilder sbvalue &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; msg.Length; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (msg[i])
        {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                isKey &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isValue)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;收集颜色码中的#&lt;/span&gt;
&lt;span&gt;                    sbvalue.Append(msg[i]);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                isKey &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                isValue &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(sbKey.ToString()) &amp;amp;&amp;amp; !&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(sbvalue.ToString()))
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (infoDic.ContainsKey(sbKey.ToString()))
                        Debug.LogError(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[ERROR]:has the same key:{0}, value:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sbKey.ToString(), sbvalue.ToString().Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        infoDic.Add(sbKey.ToString(), sbvalue.ToString().Replace(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                }
                sbKey.Remove(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, sbKey.Length);
                sbvalue.Remove(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, sbvalue.Length);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!isValue)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;忽略value里的 = 计数&lt;/span&gt;
                    equalIndex++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (equalIndex % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; equalIndex &amp;gt; &lt;span&gt;1&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;key end&lt;/span&gt;
&lt;span&gt;                {
                    isKey &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    isValue &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (valueStartIndex !=&lt;span&gt; equalIndex)
                    {
                        isValueStart &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        valueStartIndex &lt;/span&gt;=&lt;span&gt; equalIndex;
                    }
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isValue)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isValueStart &amp;amp;&amp;amp; msg[i - &lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;忽略==value前最开始的那个=&lt;/span&gt;
&lt;span&gt;                    {
                        isValueStart &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }
                    sbvalue.Append(msg[i]);
                }
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isKey)
                    sbKey.Append(msg[i]);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isValue)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msg[i - &lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; msg[i + &lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;忽略转义字符'\'&lt;/span&gt;
                        &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    sbvalue.Append(msg[i]);
                    DealEndLine((i &lt;/span&gt;== msg.Length - &lt;span&gt;1&lt;/span&gt;), &lt;span&gt;ref&lt;/span&gt;&lt;span&gt; infoDic, sbKey, sbvalue);
                }
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; infoDic;
}

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 行尾特殊处理
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;lastLine&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否最后一行&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;dictionary&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;infoDic&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;key&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DealEndLine(&lt;span&gt;bool&lt;/span&gt; lastLine, &lt;span&gt;ref&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary, StringBuilder key, StringBuilder value)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (lastLine)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (infoDic.ContainsKey(key.ToString()))
            Debug.Log(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[ERROR]:has the same key:{0}, value:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, key.ToString(), value.ToString().Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            infoDic.Add(key.ToString(), value.ToString().Replace(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是后期比较完善的代码了，这里做了以下错误兼容：&lt;br/&gt;1，兼容了策划在value里配置==或者===，均不影响解析。&lt;br/&gt;2，兼容了颜色码&amp;lt;color=#7893AA&amp;gt;{1}&amp;lt;/color&amp;gt;的’#‘和’=‘，此处不再是特殊转义字符处理。&lt;br/&gt;3，兼容了系统默认会添加&quot;\\n&quot;多个转义字符’\‘导致在Text上无法换行的问题。&lt;br/&gt;4，兼容了策划最后一行无回车换行导致无法解析的bug。&lt;br/&gt;目前就发现以上问题，对以上发现问题进行了解决！&lt;br/&gt;不早了，写这么点东西花了近三个多小时，如果有幸被您读到请留下你的脚印，得洗洗睡了，明天回家了，祝大家十一玩的愉快！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS:“纸上得来终觉浅 绝知此事要躬行”只有在实践中才能发现问题，交流是很好的灵感碰撞，遇到问题了多和小伙伴交流可能会有不一样的解决方案！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a title=&quot;Unity 数据解析&quot; href=&quot;https://gitee.com/wuzhang/UnityParseData.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/wuzhang/UnityParseData.git&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 16:15:00 +0000</pubDate>
<dc:creator>wuzhang</dc:creator>
<og:description>昨天和朋友聊天时，他遇到这么一个问题：现在有按照一定格式的数据，例如：#code==text 此处是注释100==确定101==取消key==value 这么个格式的,说白了就是怎样解析这些固定格式字</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuzhang/p/wuzhang20181001.html</dc:identifier>
</item>
</channel>
</rss>