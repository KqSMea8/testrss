<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>WPF自学入门（三）WPF路由事件之内置路由事件 - 黄昏前黎明后</title>
<link>http://www.cnblogs.com/fly-bird/p/8537134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fly-bird/p/8537134.html</guid>
<description>&lt;p&gt;       有没有想过在.NET中已经有了事件机制，为什么在WPF中不直接使用.NET事件要加入路由事件来取代事件呢？最直观的原因就是典型的WPF应用程序使用很多元素关联和组合起来，是否还记得在WPF自学入门（一）XAM基本知识中提到过两棵树，逻辑树LogicalTree 和可视化树 VisualTree，那么它们分别是什么？&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010110740-1172144146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的代码就是逻辑树LogicalTree，一个Grid里面镶嵌了其他控件或布局组件，相当于一棵树中的叶子。而可视化树VisualTree是什么？它就是一个树中的树叶里面的结构，用放大镜看一下，其实叶子里面的结构也是一颗树结构&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010122583-1771845225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       既然WPF中使用这样的一个设计理念，路由事件就是特别为WPF而生，它的功能就是可以把一个事件从触发点沿着树向上或者向下传播，需要对这个事件作出反应的地方就添加一个监听器，就会有相应的反应，当然，它的传递是可以用代码来停止。 好了，我已经大概了解了一些路由事件。下面先来了解一下WPF内置的路由事件和原理，然后我们来创建一个属于自己的路由事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、WPF内置的路由事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      新建WPF项目，在页面上放置按钮。然后在Window，Grid，Button标签上使用MouseDown事件，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010132473-1491417842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加后置代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010142650-1302936487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;调试运行，鼠标右键点击按钮，会依次弹出下列三个对话框。&lt;/p&gt;
&lt;p&gt;ButtonMouseDown事件被触发:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010157017-1415384287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;GridMouseDown事件被触发:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010207614-1716606257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;WindowMouseDown事件被触发:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310010215128-49695062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       我点击的是按钮，为什么Grid和Window也会引发事件呢？其实这就是路由事件的机制，引发的事件由源元素逐级传到上层的元素，Button—&amp;gt;Grid—&amp;gt;Window，这样就导致这几个元素都接收到了事件。（&lt;span&gt;注意一定是鼠标右键，否则引发不了事件。&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;      如果想Grid和Window不处理这个事件，只需要在Button_MouseDown这个方法中加上e.Handled = true; 这样就表示事件已经被处理，其他元素不需要再处理这个事件了。&lt;/p&gt;
&lt;p&gt; private void Button_MouseDown(object sender, MouseButtonEventArgs e)&lt;/p&gt;
&lt;p&gt;  {&lt;/p&gt;
&lt;p&gt;            MessageBox.Show(&quot;Button被点击！&quot;);&lt;/p&gt;
&lt;p&gt;            e.Handled = true;&lt;/p&gt;
&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;        如果想要Grid参与事件处理只需要给它AddHandler即可&lt;/p&gt;
&lt;p&gt;grid.AddHandler(Grid.MouseDownEvent, new RoutedEventHandler(Grid_MouseDown), true);&lt;/p&gt;
&lt;p&gt;        到这里我想大家应该对路由事件有了大概认识了。路由事件实际上分两类：气泡事件和预览事件（也叫做隧道事件）。上文中的例子就是气泡事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、内置路由事件学习总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;气泡事件是WPF路由事件中最为常见，它表示事件从源元素扩散传播到可视树，直到它被处理或到达根元素。这样我们就可以针对源元素的上方层级对象处理事件。(例如MouseDown)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     预览事件采用另一种方式，从根元素开始，向下遍历元素树，直到被处理或到达事件的源元素。这样上游元素就可以在事件到达源元素之前先行截取并进行处理。根据命名惯例，预览事件带有前缀 Preview（例如 PreviewMouseDown）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     气泡事件和预览事件区别&lt;/p&gt;
&lt;p&gt;     气泡事件：在Button上点击，首先弹出“Button”，再弹出“Grid”,最后弹出“Window”。&lt;/p&gt;
&lt;p&gt;     预览事件：在Button上点击，首先弹出“Window”，再弹出“Grid”,最后弹出“Button”。&lt;/p&gt;
&lt;p&gt;     看到了这个顺序区别，那么我们加入e.Handled=true的时机也要不同&lt;/p&gt;

&lt;p&gt;PS:本人也是WPF的初学者，如有不对的地方，欢迎在评论区多多指教，学习，为了分享，为了提高。&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 17:07:00 +0000</pubDate>
<dc:creator>黄昏前黎明后</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fly-bird/p/8537134.html</dc:identifier>
</item>
<item>
<title>SpringMVC国际化支持 - Ark~</title>
<link>http://www.cnblogs.com/ark-blog/p/8537124.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ark-blog/p/8537124.html</guid>
<description>&lt;p&gt;这周公司领导希望我对一个项目，出一个国际化的解决方案，研究两个小时，采用了SpringMVC的国际化支持，在此记录下。&lt;/p&gt;

&lt;p&gt;原理:　在DispatchServlet中注册&lt;span&gt;localeResolver(区域解析器)&lt;/span&gt;，并添加&lt;span&gt;Locale拦截器(LocaleChangeInterceptor)&lt;/span&gt;，来检测请求中的参数和语言环境的改变。&lt;/p&gt;
&lt;p&gt;　　     在应用上下文中注册&lt;span&gt;ResourceBundleMessageSource&lt;/span&gt;，定义国际化文件在程序中的路径和名称。&lt;/p&gt;

&lt;p&gt;1. 语言解析器&lt;/p&gt;
&lt;p&gt;　　在SpringMVC中，常用的语言解析器有&lt;/p&gt;
&lt;p&gt;　　Header resolver：通过解析客户端请求头信息中心的accept-language，来获取用户需要的国际化语言。详见=AcceptHeaderLocaleResolver&lt;/p&gt;
&lt;p&gt;　　Cookie resolver：通过解析客户端上Cookie指定的locale，来获取用户需要的国际化信息。详见=CookieLocaleResolver&lt;/p&gt;
&lt;p&gt;　　Session resolver：通过解析客户端请求域中的loacle信息，来获取需要的国际化信息，并存储在httpSession中。详见=SessionLocaleResolver&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9292403-418c-4f64-a8a6-06c43128d068&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9292403-418c-4f64-a8a6-06c43128d068&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9292403-418c-4f64-a8a6-06c43128d068&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;bean id=&quot;localeResolver&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;&amp;gt;
&lt;span&gt;2&lt;/span&gt;       &amp;lt;property name=&quot;defaultLocale&quot; value=&quot;en_US&quot; /&amp;gt;
&lt;span&gt;3&lt;/span&gt; &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;2. 区域拦截器&lt;/p&gt;
&lt;p&gt;　　我们需要在DispatchServlet中注册监控区域改变的拦截器， 他能帮助我们检测请求参数，根据请求参数对应的语言，更改语言环境。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_1ce40e34-d8d7-4680-b69b-d17bff83f9b3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1ce40e34-d8d7-4680-b69b-d17bff83f9b3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1ce40e34-d8d7-4680-b69b-d17bff83f9b3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;mvc:interceptors&amp;gt;
&lt;span&gt;2&lt;/span&gt;     &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;com.xxx.web.interceptor.IhgLocaleChangeInterceptor&quot; /&amp;gt;
&lt;span&gt;3&lt;/span&gt; &amp;lt;/mvc:interceptors&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;3.  国际化资源配置&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_7e52865c-4100-439b-b82b-249734ce5604&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7e52865c-4100-439b-b82b-249734ce5604&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7e52865c-4100-439b-b82b-249734ce5604&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;bean id=&quot;messageSource&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&amp;gt;
&lt;span&gt;2&lt;/span&gt;     &amp;lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot; /&amp;gt;
&lt;span&gt;3&lt;/span&gt;     &amp;lt;property name=&quot;basename&quot; value=&quot;classpath*:/ApplicationMessage&quot; /&amp;gt;
&lt;span&gt;4&lt;/span&gt;     &amp;lt;property name=&quot;useCodeAsDefaultMessage&quot; value=&quot;true&quot; /&amp;gt;
&lt;span&gt;5&lt;/span&gt; &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;4. 页面国际化&lt;/p&gt;
&lt;p&gt;　　在这里，我是用的是jstl的fmt标签来实现国际化。有兴趣的同学也可以使用spring的message标签。&lt;/p&gt;
&lt;p&gt;　　1) 引入标签库&amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　2) 指定国际化文件资源名&amp;lt;fmt:setBundle basename=&quot;ApplicationMessage&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　3) 通过国际化资源文件的key，读取文件信息。 &amp;lt;fmt:message key=&quot;security.account.number&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;5. 我们在第二步中选择的是SessionResolver解析器。所以在请求中，我们需要在url的参数后面拼接上&lt;span&gt;locale=具体语言标识&lt;span&gt;(例如：locale=zh_CN)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　注意：在每个页面都拼接url的话会显得麻烦，通常用户会希望能做的，一次选择语言后，之后都首选这种语言。所以有兴趣的同学可考虑，通过扩展LocaleChangeInterceptor，来达到更完善的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;mvc-localeresolver-session&quot;&gt; &lt;/h5&gt;
</description>
<pubDate>Fri, 09 Mar 2018 16:48:00 +0000</pubDate>
<dc:creator>Ark~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ark-blog/p/8537124.html</dc:identifier>
</item>
<item>
<title>我的虚拟机挂了！怎么把镜像里面的数据找回来？ - popsuper1982</title>
<link>http://www.cnblogs.com/popsuper1982/p/8537119.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/popsuper1982/p/8537119.html</guid>
<description>&lt;p&gt;创建了一个虚拟机，不知道为什么挂了，重启也启动不了，VNC也登不上去，强行关机后再也启动不起来了，开机一大堆错误，可是里面还有很重要的数据啊，怎么办，怎么办，谁能救救我！&lt;/p&gt;

&lt;p&gt;下面分析几个解救的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法零：谁让你把重要数据放在系统盘里面了，请使用云盘，也即块存储，虚拟机挂了，盘可以轻松的关联到新的机器上，而且块存储系统如Ceph多是三备份，数据丢不了，下次请牢记。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;您肯定会骂我，这次咋办，下面分享真正解救的办法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 方法一：使用qemu的工具Network Block Device&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网络块设备是通过NBD Server将虚拟块设备通过TCP/IP export出来，可以远程访问。&lt;/p&gt;

&lt;p&gt;NBD Server通常是qemu-nbd&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.1 使用方法一：可以提供unix socket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;qemu-nbd -t -k /home/openstack/images/ubuntutest-nbd ubuntutest.img&lt;/p&gt;

&lt;p&gt;连接这个unix socket&lt;/p&gt;

&lt;p&gt;qemu-system-x86_64 -enable-kvm -name ubuntutest -m 2048 -hda nbd:unix:/home/openstack/images/ubuntutest-nbd -vnc :19 -net nic,model=virtio -net tap,ifname=tap0,script=no,downscript=n -monitor stdio&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 使用方法二：普通的socket连接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;qemu-nbd -t -p 1088 ubuntutest.qcow2&lt;/p&gt;

&lt;p&gt;qemu-system-x86_64 -enable-kvm -name ubuntutest  -m 2048 -hda nbd:16.158.166.150:1088 -vnc :19 -net nic,model=virtio -net tap,ifname=tap0,script=no,downscript=n -monitor stdio&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.3 使用方法三：将镜像 mount到一个network block device&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;竟然可以这样做，咱们镜像里面的内容有救了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;查看内核是否编译进去NBD&lt;/p&gt;

&lt;p&gt;#grep NBD /boot/config-XXXX-generic &lt;/p&gt;

&lt;p&gt;CONFIG_BLK_DEV_NBD=m&lt;/p&gt;

&lt;p&gt;查看内核模块信息modinfo nbd&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234344679-217319654.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;查看内核模块是否加载lsmod | grep nbd&lt;/p&gt;

&lt;p&gt;如果没有加载modprobe nbd，也可以指定最多的partition: modprobe nbd max_part=16&lt;/p&gt;

&lt;p&gt;加载后出现16个NBD&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234453680-1045738669.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p&gt;查看哪个nbd device被使用：cat /proc/partitions&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234613693-1682942924.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;将image付给一个network block device&lt;/p&gt;

&lt;p&gt;qemu-nbd -c /dev/nbd0 ubuntutest.img&lt;/p&gt;

&lt;p&gt;可以看到这个image里面有三个partition&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234655868-1062570587.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Mount其中一个partition&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234739069-587094094.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可以看到里面的文件啦！！！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;修改结束后&lt;/p&gt;

&lt;p&gt;umount ubuntutestnbd0p1&lt;/p&gt;

&lt;p&gt;qemu-nbd -d /dev/nbd0&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234823257-436558033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 方法二：如果镜像里面是LVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有LVM的情况相对复杂&lt;/p&gt;

&lt;p&gt;qemu-nbd -c /dev/nbd0 centos-5.8.new.qcow2&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234908379-1281654389.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;发现里面有LVM，当然LVM不能作为整体访问，因为里面有Logic volume，都是单独成文件系统的&lt;/p&gt;

&lt;p&gt;查看LVM的信息&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309234950622-1095771555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Import这个volume group&lt;/p&gt;

&lt;p&gt;vgimport VolGroup00&lt;/p&gt;

&lt;p&gt;将这个volume group设为active&lt;/p&gt;

&lt;p&gt;vgchange -ay VolGroup00&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235032538-1199230089.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Mount其中一个LV&lt;/p&gt;

&lt;p&gt;mount /dev/VolGroup00/LogVol00 ubuntutestnbd0p1/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可以拿到这个Logic Volume里面的文件啦！！！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;修改结束后&lt;/p&gt;

&lt;p&gt;umount ubuntutestnbd0p1/&lt;/p&gt;
&lt;p&gt;vgchange -an VolGroup00&lt;/p&gt;
&lt;p&gt;vgexport VolGroup00&lt;/p&gt;
&lt;p&gt;qemu-nbd -d /dev/nbd0&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235117486-440774826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;3. 方法三：使用libguestfs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个工具十分强大，Libguestfs可以在不启动虚拟机的情况下，编辑Image&lt;/p&gt;

&lt;p&gt;安装：apt-get install libguestfs-tools&lt;/p&gt;

&lt;p&gt;编辑一个Image：&lt;/p&gt;

&lt;p&gt;guestfish -a trusty-server-cloudimg-amd64-disk1.img&lt;/p&gt;

&lt;p&gt;接着运行run，则一个虚拟机启动了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235153360-1438938532.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;查看所有的文件系统&lt;/p&gt;

&lt;p&gt;list-filesystems&lt;/p&gt;

&lt;p&gt;Mount这个文件系统&lt;/p&gt;

&lt;p&gt;mount /dev/sda1 /&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235236055-333593809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.1 libguestfs的架构和原理，知其然知其所以然&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;guestfish -a trusty-server-cloudimg-amd64-disk1.img启动的进程，也即那个交互命令行是main program&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;运行run的时候，会创建一个child process，在child process中，qemu运行一个称为appliance的小的虚拟机。创建子进程是由guestfs_launch函数完成的&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在appliance中，运行了linux kernel和一系列用户空间的工具(LVM, ext2等)，以及一个后台进程guestfsd&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;main process中的libguestfs和这个guestfd通过RPC进行交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;由child process的kernel来操作disk image&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235312911-1233332053.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;libguestfs是一个C的library，你可以写一个C的程序，将这个类库加载进去，调用它的API&lt;/p&gt;

&lt;p&gt;文档http://libguestfs.org/guestfs.3.html就描述了这些C的API&lt;/p&gt;

&lt;p&gt;而guestfish是一个交互命令行，可以通过执行命令，他来调用C类库的API，帮我们完成操作&lt;/p&gt;

&lt;p&gt;文档http://libguestfs.org/guestfish.1.html描述了这些命令，几乎所有的API，都有对应的命令&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2 Libguestfs appliance的启动过程，更详细的了解它&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果我们想看这个appliance启动的详细过程，则需要export LIBGUESTFS_DEBUG=1&lt;/p&gt;

&lt;p&gt;然后运行guestfish -a trusty-server-cloudimg-amd64-disk1.img&lt;/p&gt;

&lt;p&gt;然后运行run，打印出很多的东西&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1) 启动guestfish&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235352882-168208907.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) 运行supermin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235431885-614473904.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) 选择kernel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235503976-130466506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) 选择initrd, root images, 创建appliance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235536546-1204055867.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(5) 检测qemu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235605596-1144556529.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(6) 启动qemu appliance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235634930-1437076021.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(7)启动initrd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235707380-818423800.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(8) load kernel modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235736527-854688409.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(9) mount sda, sdb&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235804298-1254324175.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(10) 将sdb作为root device&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235848226-1812572354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(11) 运行init&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235916950-390483121.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(12) 启动guestfsd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180309235955219-385974185.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;(13) 开通一个端口，C类库会通过RPC连接这个端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000026321-1981848756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.3 Guestfish的有很多的命令&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加一个drive&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个命令只有在run之前起作用&lt;/p&gt;

&lt;p&gt;对应的API是guestfs_add_drive_opts&lt;/p&gt;

&lt;p&gt;add-drive filename [readonly:true|false] [format:..] [iface:..] [name:..] [label:..] [protocol:..] [server:..]&lt;/p&gt;

&lt;p&gt;guestfish -a trusty-server-cloudimg-amd64-disk1.img，这个Image是第一个drive&lt;/p&gt;

&lt;p&gt;add-drive /home/openstack/images/ubuntutest.img format:qcow2，添加一个drive&lt;/p&gt;

&lt;p&gt;运行run&lt;/p&gt;

&lt;p&gt;查看所有的device: list-devices&lt;/p&gt;
&lt;p&gt;查看所有的分区: list-partitions&lt;/p&gt;
&lt;p&gt;查看所有的文件系统: list-filesystems&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000056023-912765809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mount文件系统&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应的API是guestfs_mount&lt;/p&gt;

&lt;p&gt;mount /dev/sda1 /&lt;/p&gt;

&lt;p&gt;文件系统操作&lt;/p&gt;

&lt;p&gt;ls /&lt;/p&gt;
&lt;p&gt;mkdir /mnt/sdb&lt;/p&gt;
&lt;p&gt;mount /dev/sdb1 /mnt/sdb&lt;/p&gt;
&lt;p&gt;ls /mnt/sdb&lt;/p&gt;
&lt;p&gt;ls /mnt/sdb/home/openstack&lt;/p&gt;
&lt;p&gt;cat /mnt/sdb/home/openstack/.bash_history&lt;/p&gt;

&lt;p&gt;更多文件系统命令chown，chmod，cp等都支持&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000131710-1183733981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000159155-660191452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000224828-459176360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对partition的操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;part-list /dev/sdb&lt;/p&gt;
&lt;p&gt;part-get-bootable /dev/sdb 1&lt;/p&gt;

&lt;p&gt;有个partition的命令包括：&lt;/p&gt;
&lt;p&gt;part-add，part-del，part-disk，part-get-bootable，part-get-gpt-type，part-get-mbr-id，part-get-name，part-get-parttype，part-init，part-list，part-set-bootable，part-set-gpt-type，part-set-mbr-id，part-set-name，part-to-dev，part-to-partnum&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000303976-1603704814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000318623-350997116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;guestfish -a trusty-server-cloudimg-amd64-disk1.img&lt;/p&gt;

&lt;p&gt;add-drive ./centos-5.8.new.qcow2 format:qcow2&lt;/p&gt;

&lt;p&gt;run&lt;/p&gt;

&lt;p&gt;查看所有的PV: pvs-full&lt;/p&gt;

&lt;p&gt;查看所有的VG: vgs-full&lt;/p&gt;

&lt;p&gt;命令包含：lvcreate, lvcreate-free, lvm-canonical-lv-name, lvm-clear-filter, lvm-remove-all, lvm-set-filter, lvremove, lvrename, lvresize, lvresize-free, lvs, lvs-full, lvuuid, pvcreate, pvremove, pvresize, pvresize-size, pvs, pvs-full, pvuuid, vg-activate, vg-activate-all, vgchange-uuid, vgchange-uuid-all, vgcreate, vglvuuids, vgmeta, vgpvuuids, vgremove, vgrename, vgs, vgs-full, vgscan, vguuid&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000351477-1428485769.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;guestfish -a ubuntutest.img&lt;/p&gt;

&lt;p&gt;run&lt;/p&gt;

&lt;p&gt;list-filesystems&lt;/p&gt;

&lt;p&gt;mount /dev/sda1 /&lt;/p&gt;

&lt;p&gt;download /home/openstack/.bash_history testdownload&lt;/p&gt;

&lt;p&gt;upload instance01.xml /home/openstack/testupload&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000445282-674754696.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.4 在Libvirt里面，Virt也提供了相应命令系列&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个命令完成操作，无需启动交互命令行&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Guestmount&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个本地文件夹&lt;/p&gt;

&lt;p&gt;mkdir testguestmount&lt;/p&gt;

&lt;p&gt;将image里面的/dev/sda1 mount到这个文件夹里面&lt;/p&gt;
&lt;p&gt;guestmount -a ubuntutest.img -m /dev/sda1 testguestmount&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000523774-1559942202.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;结束编辑后&lt;/p&gt;
&lt;p&gt;guestunmount testguestmount&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;virt-builder&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以快速的创建虚拟机镜像&lt;/p&gt;

&lt;p&gt;update-guestfs-appliance&lt;/p&gt;

&lt;p&gt;查看所有的镜像类型&lt;/p&gt;

&lt;p&gt;virt-builder –list&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310000555029-1652617259.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;创建一个Image&lt;/p&gt;

&lt;p&gt;virt-builder fedora-20 -o myfedora.img --format qcow2 --size 20G &lt;/p&gt;

&lt;p&gt;设置root password, 放在文件里面&lt;/p&gt;

&lt;p&gt;virt-builder fedora-20 --root-password file:/tmp/rootpw&lt;/p&gt;

&lt;p&gt;设置hostname&lt;/p&gt;

&lt;p&gt;virt-builder fedora-20 --hostname virt.example.com&lt;/p&gt;

&lt;p&gt;安装软件&lt;/p&gt;

&lt;p&gt;virt-builder fedora-20 –install “apache2“&lt;/p&gt;

&lt;p&gt;第一次启动运行脚本&lt;/p&gt;

&lt;p&gt;virt-builder fedora-20 --firstboot /tmp/yum-update.sh&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004023096-187562224.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;virt-ls -a myfedora.img /root/&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004056135-108662709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;virt-cat -a myfedora.img /root/.bash_profile&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004130148-1182469533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;virt-copy-in -a myfedora.img desktop.xml /root/&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004202415-1737138910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;virt-copy-out -a myfedora.img /root/.bash_profile ./&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004233576-952163709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;virt-df -a myfedora.img&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004305871-378004650.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;virt-list-filesystems -a myfedora.img&lt;/p&gt;

&lt;p&gt;virt-list-partitions myfedora.img&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004330076-1100080858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;欢迎关注微信公众号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180310004426759-2073997287.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 09 Mar 2018 16:45:00 +0000</pubDate>
<dc:creator>popsuper1982</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/popsuper1982/p/8537119.html</dc:identifier>
</item>
<item>
<title>Spring Boot Actutaur + Telegraf + InFluxDB + Grafana 构建监控平台 - appleYang</title>
<link>http://www.cnblogs.com/zhikou/p/8537074.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhikou/p/8537074.html</guid>
<description>&lt;h2&gt;完成一套精准，漂亮图形化监控系统从这里开始第一步&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180309232232129-47769797.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;span&gt;Telegraf是收集和报告指标和数据的代理&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　它是TICK堆栈的一部分，是一个用于&lt;strong&gt;收集&lt;/strong&gt;和&lt;strong&gt;报告指标的插件驱动的服务器代理&lt;/strong&gt;。&lt;span&gt;Telegraf拥有插件或集成功能，可&lt;strong&gt;直接从运行的系统获取各种指标&lt;/strong&gt;，从第三方API获取指标，甚至通过StatsD和&lt;strong&gt;Kafka消费者服务来收听指标&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;它还具有输出插件，&lt;strong&gt;可将指标发送到各种其他数据存储&lt;/strong&gt;，&lt;strong&gt;服务&lt;/strong&gt;和&lt;strong&gt;消息队列&lt;/strong&gt;，包括InfluxDB，Graphite，OpenTSDB，Datadog，Librato，Kafka，MQTT，NSQ等等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180309230611865-2002874753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Spring Boot Actuator&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　Spring Boot Actuator包含一个带“metrics”和“gauge”支持的度量服务。&lt;/span&gt;&lt;span&gt;“量表”记录单个值; &lt;/span&gt;&lt;span&gt;'计数器'记录增量（增量或减量）。&lt;/span&gt;&lt;span&gt;Spring Boot Actuator还提供了一个&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;link&quot; href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.5.10.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/PublicMetrics.java&quot; target=&quot;_top&quot;&gt;&lt;code class=&quot;literal&quot;&gt;PublicMetrics&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;可以实现&lt;/span&gt;&lt;span&gt;的 &lt;/span&gt;&lt;span&gt;界面，用于公开您无法通过这两种机制之一记录的指标。&lt;/span&gt;&lt;span&gt;看&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;link&quot; href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.5.10.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java&quot; target=&quot;_top&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SystemPublicMetrics&lt;/code&gt;&lt;/a&gt;&lt;span&gt; 一个例子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　将你的springboot项目中依赖Spring Boot Actuator 的包，启动之后会发现控制台打出的mapped变得很多了，例如/env、/health、/info等等的信息，恭喜你已经成功使用了metric对程序进行了简单的监控了，在浏览器中输入本地的ip项目访问地址如：http://localhost:8080/metrics，就会出现如下的数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;63&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
{
    &quot;counter.status.200.root&quot;: 20,
    &quot;counter.status.200.metrics&quot;: 3,
    &quot;counter.status.200.star-star&quot;: 5,
    &quot;counter.status.401.root&quot;: 4,
    &quot;gauge.response.star-star&quot;: 6,
    &quot;gauge.response.root&quot;: 2,
    &quot;gauge.response.metrics&quot;: 3,
    &quot;classes&quot;: 5808,
    &quot;classes.loaded&quot;: 5808,
    &quot;classes.unloaded&quot;: 0,
    &quot;heap&quot;: 3728384,
    &quot;heap.committed&quot;: 986624,
    &quot;heap.init&quot;: 262144,
    &quot;heap.used&quot;: 52765,
    &quot;nonheap&quot;: 0,
    &quot;nonheap.committed&quot;: 77568,
    &quot;nonheap.init&quot;: 2496,
    &quot;nonheap.used&quot;: 75826,
    &quot;mem&quot;: 986624,
    &quot;mem.free&quot;: 933858,
    &quot;processors&quot;: 8,
    &quot;threads&quot;: 15,
    &quot;threads.daemon&quot;: 11,
    &quot;threads.peak&quot;: 15,
    &quot;threads.totalStarted&quot;: 42,
    &quot;uptime&quot;: 494836,
    &quot;instance.uptime&quot;: 489782,
    &quot;datasource.primary.active&quot;: 5,
    &quot;datasource.primary.usage&quot;: 0.25
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;title&quot;&gt;&lt;span&gt;管理员功能&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　通过指定&lt;/span&gt;&lt;code class=&quot;literal&quot;&gt;spring.application.admin.enabled&lt;/code&gt;&lt;span&gt;&lt;span&gt;属性&lt;/span&gt;&lt;span&gt;可以为应用程序启用与管理相关的功能 &lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;这暴露 &lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;link&quot; href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.5.10.RELEASE/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java&quot; target=&quot;_top&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SpringApplicationAdminMXBean&lt;/code&gt;&lt;/a&gt;&lt;span&gt; 了平台上&lt;/span&gt;&lt;code class=&quot;literal&quot;&gt;MBeanServer&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;您可以使用此功能远程管理您的Spring Boot应用程序。&lt;/span&gt;&lt;span&gt;这对于任何服务包装器实现也是有用的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
引入spring-boot-&lt;span&gt;admin依赖  
&lt;/span&gt;&amp;lt;dependency&amp;gt;  
    &amp;lt;groupId&amp;gt;de.codecentric&amp;lt;/groupId&amp;gt;  
    &amp;lt;artifactId&amp;gt;spring-boot-admin-server&amp;lt;/artifactId&amp;gt;  
    &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;  
&amp;lt;/dependency&amp;gt;  
  
&amp;lt;dependency&amp;gt;  
    &amp;lt;groupId&amp;gt;de.codecentric&amp;lt;/groupId&amp;gt;  
    &amp;lt;artifactId&amp;gt;spring-boot-admin-server-ui&amp;lt;/artifactId&amp;gt;  
    &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;  
&amp;lt;/dependency&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;如果您想知道应用程序在哪个HTTP端口上运行，请使用密钥获取该属性&lt;/span&gt;&lt;code class=&quot;literal&quot;&gt;local.server.port&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　当启用此功能时要小心，因为MBean公开了关闭应用程序的方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;title&quot;&gt;&lt;span&gt;使用Jolokia进行JMX over HTTP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;span&gt;Jolokia是一个JMX-HTTP桥梁，它提供了访问JMX bean的另一种方法。&lt;/span&gt;&lt;span&gt;要使用Jolokia，只需添加依赖项即可&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;literal&quot;&gt;org.jolokia:jolokia-core&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;例如，使用Maven你可以添加以下内容：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt; 
    &amp;lt;groupId&amp;gt; org.jolokia &amp;lt;/ groupId&amp;gt; 
    &amp;lt;artifactId&amp;gt; jolokia-core &amp;lt;/ artifactId&amp;gt; 
 &amp;lt;/ dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在application.yaml后者application.properties中配置响应的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
jolokia.config.debug=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;  
endpoints.jolokia.enabled&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;  
#endpoints.jolokia.sensitive&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;  
endpoints.jolokia.path&lt;/span&gt;=/jolokia 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下载Telegraf、influxdb 、grafana，我个人建议先搭建一个windows版本的环境自己配置玩一玩&lt;/p&gt;
&lt;pre&gt;
&lt;a href=&quot;https://www.linuxdaxue.com/wp-content/themes/template/inc/go.php?url=https://portal.influxdata.com/downloads#influxdb&quot;&gt;https://portal.influxdata.com/downloads#influxdb&lt;/a&gt;&lt;br/&gt;https://grafana.com/grafana/download?platform=windows
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180309234348948-189147303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1 Influxdb配置&lt;/p&gt;
&lt;p&gt;      修改influxdb.conf，设置日志文件目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#cd 到安装解压的修改influxdb.conf
&lt;/pre&gt;
&lt;p&gt;[admin]&lt;br/&gt;# Determines whether the admin service is enabled.&lt;br/&gt;enabled = true&lt;/p&gt;
&lt;p&gt;# The default bind address used by the admin service.&lt;br/&gt;bind-address = &quot;:8083&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;其他配置都是默认好的，不用修改，如果版本下载不一样可能需要修改，不妨给我留言，我会及时回复的&lt;/p&gt;
&lt;p&gt;2启动&lt;/p&gt;
&lt;p&gt; 　通过cmd命令窗口，切换到influxdb安装目录，执行如下命令：&lt;/p&gt;
&lt;p&gt;     influxd -config influxdb.conf&lt;/p&gt;
&lt;p&gt;　通过cmd命令窗口，切换到Telegraf安装目录，执行如下命令：&lt;/p&gt;
&lt;p&gt;    telegraf -config telegraf.conf&lt;/p&gt;
&lt;p&gt;    切换到Grafana安装目录中的bin目录下，双击grafana-server.exe启动程序&lt;/p&gt;
&lt;p&gt;访问http://locahost:8090,这是可以配置的端口号，可以访问了：&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;访问http://localhost:8086，使用admin/admin登录本机Grafana，新建influxdb数据源：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310000740690-1250275618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;【注意】Telegraf启动后，向InfluxDb中上报数据时，会默认创建一个telegraf数据库，所以上面我们配置DataBase是telegraf&lt;/p&gt;
&lt;p&gt;点击new创建一个Dashboards&lt;/p&gt;
&lt;p&gt;配置编辑会出来可配置页面：&lt;/p&gt;
&lt;p&gt;点击General：配置基本的图表信息&lt;/p&gt;
&lt;p&gt;点击metrics，配置收集到的收据信息，实际就是写sql查询，不同数据库数据sql书写方式不同&lt;/p&gt;
&lt;p&gt;查看http://localhost:8083，可以发现telegraf库中，默认有4个Measurements（表）：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310000944430-974101207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置Grafana中的面板完成后，这样一个简易的本机监控系统就搭建完了：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310001056076-31961662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 09 Mar 2018 16:12:00 +0000</pubDate>
<dc:creator>appleYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhikou/p/8537074.html</dc:identifier>
</item>
<item>
<title>使用pyh生成HTML文档 - masimaro</title>
<link>http://www.cnblogs.com/lanuage/p/8537047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lanuage/p/8537047.html</guid>
<description>&lt;p&gt;最近在项目中需要将结果导出到HTML中，在网上搜索的时候发现了这个库，通过官方的一些文档以及网上的博客发现它的使用还是很简单的，因此选择在项目中使用它。&lt;br/&gt;在使用的时候发现在Python3中有些问题，网上很多地方都没有提到，因此我在这将它的使用以及我遇到的问题和解决方案整理出来供大家参考&lt;br/&gt;本文主要参考&lt;a href=&quot;http://hanxiaomax.github.io/trans/pyh-chinese-doc/&quot;&gt;pyh中文文档&lt;/a&gt;&lt;br/&gt;下载的样本也是该文中提到的地址&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;在使用时一般先导入模块:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; phy &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后可以创建一个PyH对象就像这样&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;page &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; PyH(title)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中title是一个字符串，这个字符串将作为页面的标题显示，也就是说此时产生的HTML代码就是在头部加上一个title标签并将这个字符串作为文本值&lt;br/&gt;然后我们可以addCSS方法或者addJS方法引入外部的js文件或者css文件（调用这两个函数将在HTML的头部产生一个引入的代码，对于那种在body中添加style代码的我暂时没有找到什么办法）&lt;br/&gt;然后就是创建标签对象，对应标签类的名字所与在HTML中的对应的名称相同，传入对象的参数就是标签中的属性,除了class属性对应的参数名称是cl外，其余的参数名称与在HTML中的属性一一对应。比如我们要创建一个div标签可以这样写&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;myDiv &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; div(&lt;span class=&quot;st&quot;&gt;'测试div'&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'div1'&lt;/span&gt;, cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;cls_div&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终生成的HTML代码如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'div1'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'cls_div'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;测试div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将元素加入某个元素中可以使用&amp;lt;&amp;lt;符号，该符号返回的是最后被包含的符号对象。比如这样&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;div(&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'div1'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p(&lt;span class=&quot;st&quot;&gt;'测试'&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'p_tag'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这句代码会返回p元素对应的对象，而生成的HTML代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'div1'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'p_tag'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;测试&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当生成了合适的HTML文档后可以使用printOut方法将其打印，也可以使用render函数返回对应的HTML代码，以便我们进行存盘或者做进一步处理&lt;br/&gt;上面只是简单的做一下介绍，详细的使用方法请参看上面提到的一篇文章，这上面写的比较详细。下面来通过一个例子代码来说明我是如何处理一些出现的错误、做一些简单的扩展，并大致看看里面的源代码&lt;/p&gt;

&lt;div class=&quot;sourceCode&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; pyh &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; codecs
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; xml.sax.saxutils &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; escape

WORD_WIDTH &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; create_base(table_title, page):
    page.addCSS(&lt;span class=&quot;st&quot;&gt;'base.css'&lt;/span&gt;)

    &lt;span class=&quot;co&quot;&gt;#展示信息的表&lt;/span&gt;
    base_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; page &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; table(cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'diff'&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'difflib_chg_to0__top'&lt;/span&gt;, cellspacing &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, cellpadding &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, rules &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'groups'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;):
        base_table &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; colgroup()
    &lt;span class=&quot;co&quot;&gt;#表头&lt;/span&gt;
    t_head &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; base_table &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; thead()
    tr_tag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; t_head &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; tr()
    tr_tag &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; th(cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'diff_next'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; br()
    tr_tag &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; th(table_title, colspan &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'diff_header'&lt;/span&gt;)
    t_body &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; base_table &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; tbody()

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; t_body

&lt;span class=&quot;co&quot;&gt;#写入一行信息&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; write_line(tr_tag, mark, data):
    tr_tag &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; td(mark, cl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'diff_header'&lt;/span&gt;)
    tr_tag &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; td(data)

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; txt2html(title, table_title, ifile, ofile):
    i_f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; codecs.&lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(ifile, &lt;span class=&quot;st&quot;&gt;'r'&lt;/span&gt;,encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
    lines &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; i_f.read().splitlines()
    i_f.close()
    page &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; PyH(title)
    t_body &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; create_base(table_title, page)
    lineno &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; data &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; lines:
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; WORD_WIDTH:
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;//&lt;/span&gt; WORD_WIDTH &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;):
                sub_data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[WORD_WIDTH &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; i: &lt;span class=&quot;bu&quot;&gt;min&lt;/span&gt;(WORD_WIDTH &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (i &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)]
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                    mark &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(lineno)
                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                    mark &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;gt;'&lt;/span&gt;
                tr_tag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; t_body &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; tr()
                sub_data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; escape(sub_data)
                sub_data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sub_data.replace(&lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;nbsp;&quot;&lt;/span&gt;)
                sub_data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sub_data.replace(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&quot;&lt;/span&gt;)
                write_line(tr_tag, mark, sub_data)
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            tr_tag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; t_body &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; tr()
            data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; escape(data)
            data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.replace(&lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;nbsp;&quot;&lt;/span&gt;)
            data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.replace(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&quot;&lt;/span&gt;)
            write_line(tr_tag, &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(lineno), data)
        lineno &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;

    html &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; page.render()
    o_f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; codecs.&lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(ofile, &lt;span class=&quot;st&quot;&gt;'w'&lt;/span&gt;, encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
    o_f.write(html)
    o_f.close()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个将任意文本文件转化为HTML文档的例子，主要是在调用txt2html函数，该函数有4个参数，页面的标题，展示文本内容的表格的标题，输入文件路径，输出文件路径&lt;br/&gt;同时做了一些简单的处理，对原文档中的每行进行标号，同时设置一行只显示100个字符多余的进行换行，以便阅读&lt;br/&gt;最终打开生成的HTML大致如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1264547/201803/1264547-20180309235944673-639063473.jpg&quot; alt=&quot;最终效果&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Python3环境下直接运行发现它报了一个错误：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1264547/201803/1264547-20180310000025881-1893053285.jpg&quot; alt=&quot;unicode错误&quot;/&gt;&lt;br/&gt;在Python2中存在Unicode字符串和普通字符串的区别，但是在Python3中所有字符串都默认是Unicode的，它取消了关于Python2中unicode函数，这里报错主要是这个原因，因此我们定位到报错的地方，将代码进行修改，去掉unicode函数（在Python2中unicode函数需要传入一个普通字符串，因此这里我们只需要去掉unicode函数，保留原来的参数即可,对于进行字符号转化的直接注释或者改为pass即可&lt;br/&gt;解决了unicode问题之后再次运行，又报了这样一个错误&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1264547/201803/1264547-20180310000052327-1055811488.jpg&quot; alt=&quot;标签未定义错误&quot;/&gt;&lt;/p&gt;
&lt;p&gt;定位到对应代码处，在原来的代码位置有这么一段代码:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; TagFactory(name):
    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; f(Tag):
        tagname &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name
    f.&lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; f

thisModule &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; modules[&lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt;]

&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; tags:
    &lt;span class=&quot;bu&quot;&gt;setattr&lt;/span&gt;(thisModule, t, TagFactory(t))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这段代码上可以知道，每当我们通过对应名称创建一个标签时，会在tags里面里面寻找到对应的标签，然后调用工厂方法生成一个对应的标签，这个工厂方法生成的其实是一个Tag对象，并且所有HTML标签都是这个Tag类，因此可以猜测如果要添加新的标签对象，那么可以通过修改tags里面的值，我们加入对应的标签值之后发现代码可以运行了，至此问题都解决了。&lt;br/&gt;其实这些错误都是Python2代码移植到python3环境下常见的错误，至于它的源码我没怎么看太明白，主要是它生成标签的这一块，我也不知道为什么修改了tags之后就可以运行了，python类厂的概念我还是不太明白，看来要花时间好好补一下基础内容了。&lt;br/&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Fri, 09 Mar 2018 15:57:00 +0000</pubDate>
<dc:creator>masimaro</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lanuage/p/8537047.html</dc:identifier>
</item>
<item>
<title>SpringMVC 框架系列之初识与入门实例 - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8537008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8537008.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;微信公众号：compassblog&lt;/p&gt;
&lt;p&gt;欢迎关注、转发，互相学习，共同进步！&lt;/p&gt;
&lt;p&gt;有任何问题，请后台留言联系！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1、SpringMVC 概述&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）、 MVC：Model-View-Control&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Control 层属于框架性质，完成的主要工作是：封装 web 请求为一个数据对象、调用业务逻辑层来处理数据对象、返回处理数据结果及相应的视图给客户端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）、什么是 SpringMVC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring mvc 和 Struts2 都属于表现层的框架，是 Spring 框架的一部分，Spring 框架的 Control 层的核心是 DispatcherServlet，它的作用是将请求分发给不同的后端处理器。&lt;/p&gt;
&lt;p&gt;Spring 的 Control 层框架使用了后端控制器来映射处理器和视图解析器来共同完成 Control 层框架的主要工作。并且 spring 的 Control 层框架还真正地把业务层处理的数据结果和相应的视图拼成一个对象，即 ModelAndView 对象。&lt;/p&gt;
&lt;p&gt;SpringMVC 本身就是  Spring 的子项目，对 Spring 兼容性很好，因此也不需要做过多的配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）SpringMVC 框架处理流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180309234103758-105967839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;2、SpringMVC 入门实例&lt;/h4&gt;
&lt;p&gt;（1）、创建 web  项目，导入所需要的 jar 包，如图下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180309234113344-146066257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）、创建 SpringMVC 的核心配置文件，具体配置如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;springmvc.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans &lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:p=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:mvc=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/mvc&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&lt;br/&gt;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;br/&gt;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&amp;gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）、配置 SpringMVC 的前端控制器 DispatcherServlet，具体配置如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;web.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;web-app &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:web=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WebApp_ID&quot; &lt;span class=&quot;hljs-attr&quot;&gt;version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.5&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;display-name&amp;gt;SpringmvcProject&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;display-name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;index.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;index.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;index.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;default.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;default.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;default.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;springmvc&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;init-param&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&amp;gt;contextConfigLocation&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&amp;gt;classpath:springmvc.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;init-param&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;springmvc&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&amp;gt;*.action&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;web-app&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）、在 /WEB-INF/ 目录下新建 jsp 目录，新建 jsp 文件，具体代码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;itemList.jsp&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;taglib &lt;span class=&quot;hljs-attr&quot;&gt;uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot; &lt;span class=&quot;hljs-attr&quot;&gt;prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot; %&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;taglib &lt;span class=&quot;hljs-attr&quot;&gt;uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/fmt&quot;  &lt;span class=&quot;hljs-attr&quot;&gt;prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;查询商品列表&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt; &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath }/item/queryitem.action&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&amp;gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&amp;gt;&lt;br/&gt;商品列表：&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&amp;gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table &lt;span class=&quot;hljs-attr&quot;&gt;width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;100%&quot; &lt;span class=&quot;hljs-attr&quot;&gt;border=&lt;span class=&quot;hljs-string&quot;&gt;1&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;商品名称&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;商品价格&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;生产日期&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;商品描述&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;c:forEach &lt;span class=&quot;hljs-attr&quot;&gt;items=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${itemList }&quot; &lt;span class=&quot;hljs-attr&quot;&gt;var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${item.name }&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${item.price }&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;fmt:formatDate &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${item.createtime}&quot; &lt;span class=&quot;hljs-attr&quot;&gt;pattern=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;/&amp;gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${item.detail }&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）、创建 POJO 类，具体代码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Items.java&lt;/code&gt;&lt;/p&gt;
&lt;pre readability=&quot;18.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;31&quot;&gt;package com.springmvc.pojo;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import java.util.Date;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Items {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Items&lt;span class=&quot;hljs-params&quot;&gt;(Integer id, String name, Float price, Date createtime, String detail) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;super();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.id = id;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.price = price;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.createtime = createtime;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.detail = detail;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Integer id;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String name;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Float price;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String pic;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Date createtime;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String detail;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Integer &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return id;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setId&lt;span class=&quot;hljs-params&quot;&gt;(Integer id) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.id = id;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getName&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return name;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setName&lt;span class=&quot;hljs-params&quot;&gt;(String name) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name == &lt;span class=&quot;hljs-keyword&quot;&gt;null ? &lt;span class=&quot;hljs-keyword&quot;&gt;null : name.trim();&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Float &lt;span class=&quot;hljs-title&quot;&gt;getPrice&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return price;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setPrice&lt;span class=&quot;hljs-params&quot;&gt;(Float price) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.price = price;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getPic&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return pic;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setPic&lt;span class=&quot;hljs-params&quot;&gt;(String pic) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.pic = pic == &lt;span class=&quot;hljs-keyword&quot;&gt;null ? &lt;span class=&quot;hljs-keyword&quot;&gt;null : pic.trim();&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Date &lt;span class=&quot;hljs-title&quot;&gt;getCreatetime&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return createtime;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setCreatetime&lt;span class=&quot;hljs-params&quot;&gt;(Date createtime) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.createtime = createtime;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getDetail&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return detail;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setDetail&lt;span class=&quot;hljs-params&quot;&gt;(String detail) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.detail = detail == &lt;span class=&quot;hljs-keyword&quot;&gt;null ? &lt;span class=&quot;hljs-keyword&quot;&gt;null : detail.trim();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）、创建 Controller 类，具体代码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ItemController.java&lt;/code&gt;&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;11&quot;&gt;package com.springmvc.controller;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import java.util.Date;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import java.util.List;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.stereotype.Controller;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.servlet.ModelAndView;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import com.springmvc.pojo.Items;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/itemlist.action&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public ModelAndView &lt;span class=&quot;hljs-title&quot;&gt;itemList&lt;span class=&quot;hljs-params&quot;&gt;(){&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ModelAndView mav = &lt;span class=&quot;hljs-keyword&quot;&gt;new ModelAndView();&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（7）、启动 Tomcat，并到浏览器地址栏测试，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxuokgLoCSVq1LwBv2uIP816soAicWx0rWxnnBIE2nQW99o0oG0PufiaicAUBNEZiaZKWF8L2Xh2ickxwibQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.43108108108108106&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;3、SpringMVC 框架访问流程图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxuokgLoCSVq1LwBv2uIP816Pniadic9ZIlUdialbsTFEDUng8ibibhibV7Giaib69o2TgEBT3GkjYzbfWIq2w/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6237942122186495&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：部分知识源于网络，侵权联删。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注微信公众号compassblog，后台回复 “SpringMVC系列一” 获取本项目源码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本系列后期仍会持续更新，欢迎关注！&lt;/p&gt;

&lt;p&gt;如果你认为这篇文章有用，欢迎转发分享给你的好友！&lt;/p&gt;
&lt;p&gt;本号文章可以任意转载，转载请注明出处！&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;扫描关注微信公众号，了解更多&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180309234212704-687174474.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 15:43:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8537008.html</dc:identifier>
</item>
<item>
<title>CentOS7使用dnf安装mysql - 不忘初心1223</title>
<link>http://www.cnblogs.com/vitasyuan/p/8536983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vitasyuan/p/8536983.html</guid>
<description>&lt;h2 id=&quot;安装mysql的yum仓库&quot;&gt;1.安装mysql的yum仓库&lt;/h2&gt;
&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum localinstall https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装mysql&quot;&gt;2.安装mysql&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;dnf install mysql-community-server&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;开启mysql服务&quot;&gt;3.开启mysql服务&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;service mysql start&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;查找默认密码&quot;&gt;4.查找默认密码&lt;/h2&gt;
&lt;p&gt;为了加强安全性，MySQL5.7为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。&lt;br/&gt;只有启动过一次mysql才可以查看临时密码，输入以下命令查看密码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;grep 'temporary password' /var/log/mysqld.log&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@VM_0_13_centos init.d]# grep 'temporary password' /var/log/mysqld.log                                                    
2018-03-09T13:03:32.859149Z 1 [Note] A temporary password is generated for root@localhost: IVXhn:4E3uQ4  &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;登陆mysql并且修改密码&quot;&gt;5.登陆mysql并且修改密码&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;ALTER USER 'root'@'localhost' IDENTIFIED BY 'root123';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改密码，会出现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ERROR 1819 (HY000): Your password does not satisfy the current policy requirements&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;必须修改两个全局参数：&lt;br/&gt;首先，修改validate_password_policy参数的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; set global validate_password_policy=0; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再修改密码的长度&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;set global validate_password_length=1;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次执行修改密码就可以了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ALTER USER 'root'@'localhost' IDENTIFIED BY 'root123';&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;授权其他机器连接&quot;&gt;6.授权其他机器连接&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'passwort' WITH GRANT OPTION; //passwort改为mysql登陆密码

FLUSH  PRIVILEGES;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;密码设置的详细说明&quot;&gt;7.密码设置的详细说明&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linuxidc.com/Linux/2016-01/127831.htm&quot; class=&quot;uri&quot;&gt;https://www.linuxidc.com/Linux/2016-01/127831.htm&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 15:35:00 +0000</pubDate>
<dc:creator>不忘初心1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vitasyuan/p/8536983.html</dc:identifier>
</item>
<item>
<title>Android外部存储 - 腾讯WeTest</title>
<link>http://www.cnblogs.com/wetest/p/8536868.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wetest/p/8536868.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;WeTest 导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;外部存储作为开发中经常接触的一个重要系统组成，在Android历代版本中，有过许许多多重要的变更。我也曾疑惑过，为什么一个简简单单外部存储，会存在存在这么多奇奇怪怪的路径：/sdcard、/mnt/sdacrd、/storage/extSdCard、/mnt/shell/emulated/0、/storage/emulated/0、/mnt/shell/runtime/default/emulated/0...其实，这背后代表了一项项技术的成熟与发布：模拟外部存储、多用户、运行时权限...&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、各版本外部存储特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、Android 4.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 支持模拟外部存储（通过FUSE实现）&lt;/p&gt;
&lt;p&gt;● 出现了主外部存储，以及二级外部存储（没有接口对外暴露）&lt;/p&gt;
&lt;p&gt;● 支持MTP（Media Transfer Protocol）、PTP协议（Picture Transfer Protocol）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、Android 4.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 开发者选项出现”强制应用声明读权限才可以进行读操作”的开关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、Android 4.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 支持多用户，每个用户拥有独立的外部存储&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、Android 4.4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 读操作需要声明READ_EXTERNAL_STORAGE权限&lt;/p&gt;
&lt;p&gt;● 应用读写在外部存储的应用目录（/sdcard/Android/&amp;lt;pkg&amp;gt;/）不需要声明权限&lt;/p&gt;
&lt;p&gt;● 增加了Context.getExternalFilesDirs() 接口，可以获取应用在主外部存储和其他二级外部存储下的files路径&lt;/p&gt;
&lt;p&gt;● 引入存储访问框架（SAF，Storage Access Framework）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223657887-506668545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、Android 6.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 外部存储支持动态权限管理&lt;/p&gt;
&lt;p&gt;● Adoptable Storage特性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、Android 7.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 引入作用域目录访问&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223722418-1242175376.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;补充一个点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果应用的minSdkVersion和targetSdkVersion设置成&amp;lt;=3，系统会默认授予READ_EXTERNAL_STORAGE权限。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、部分特性讲解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.模拟外部存储&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a. 必要性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● FAT32 属于微软专利，可能存在许可和法律问题（相关文章）；&lt;/p&gt;
&lt;p&gt;● 可以定制Android自己的外部存储访问规则；&lt;/p&gt;
&lt;p&gt;● 为多用户做铺垫；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b. 实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统/system/bin/sdcard守护进程，使用FUSE实现类FAT格式SD卡文件系统的模拟，也就是我们经常说的内置SD卡。（详细代码可以参考：/xref/system/core/sdcard/sdcard.c）&lt;/p&gt;

&lt;p&gt;用户空间文件系统（Filesystem in Userspace，简称FUSE）是一个面向类Unix计算机操作系统的软件接口，它使无特权的用户能够无需编辑内核代码而创建自己的文件系统。目前Linux通过内核模块对此进行支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223806883-1714000861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sdcard守护进程模拟外部存储大致流程（Android 4.0为例）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 首先，指定/data/media目录用于模拟外部存储。该路径的owner和group一般为media_rw，这样保证只有sdcard程序或root进程能够访问该目录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223835352-815948055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;● sdcard守护进程启动后，打开/dev/fuse设备。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223850274-1669644554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;● 在/mnt/sdcard目录挂载fuse文件系统。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223930554-977463261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 开线程，在线程中处理文件系统事件，并将结果写回。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309223947786-1643356738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;经过上面一系列步骤，sdcard进程在/mnt/sdcard路径上创建了一个FUSE文件系统，所有对/mnt/sdcard将转为事件由sdcard守护进程处理，并对应到/data/media目录。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;例如，应用创建/mnt/sdcard/a文件，实际是创建/data/media/a文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c. 优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 模拟外部存储容量和/data分区是共享的，用户数据在内外存储的分配更加自由；&lt;/p&gt;
&lt;p&gt;● 模拟外部存储本身不可卸载，不会因为卸载导致应用访问出现问题，也减少了外部因素导致被破坏的情况；&lt;/p&gt;
&lt;p&gt;● 所有的访问都经过sdcard守护进程，Android可以定制访问规则；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d. 劣势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 性能上存在一定损失&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e. 影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● Android 6.0以后，由于动态权限管理的需要，会存在多个fuse挂载点，这导致inotify/FileObserver对外部存储进行文件事件监控时，会丢失事件。&lt;/p&gt;

&lt;p&gt;inotify是Linux核心子系统之一，做为文件系统的附加功能，它可监控文件系统并将异动通知应用程序。 —— 维基百科（&lt;a href=&quot;https://zh.wikipedia.org/wiki/Inotify&quot;&gt;https://zh.wikipedia.org/wiki/Inotify&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、多用户&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a. 支持版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● Android 4.2开始支持多用户，但仅限平板；&lt;/p&gt;
&lt;p&gt;● Android 5.0开始，设备制造商可以在编译时候开启多用户模块；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b. 背景知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 绑定挂载——mount —bind&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MS_BIND&lt;/strong&gt; (Linux 2.4 onward)&lt;/p&gt;

&lt;p&gt;Perform a bind mount, making a file or a directory subtree visible at another point within a file system. Bind mounts may cross file system boundaries and span chroot(2) jails. The filesystemtype and dataarguments are ignored. Up until Linux 2.6.26, mountflagswas also ignored (the bind mount has the same mount options as the underlying mount point). ——&lt;strong&gt; mount(2) - Linux man page&lt;/strong&gt;&lt;a href=&quot;https://linux.die.net/man/2/mount&quot;&gt;（https://linux.die.net/man/2/mount）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图例&lt;/strong&gt;（来自https://xionchen.github.io/2016/08/25/linux-bind-mount）&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1) 将/home目录树bind到/mnt/backup：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224030606-767807521.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;


&lt;p&gt;2) bind完成之后，对/mnt/backup的访问将等同于对/home的访问，原/mnt/backup变为不可见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224043816-723281872.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 挂载命名空间&lt;/p&gt;
&lt;p&gt;Mount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance. Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies. ——&lt;strong&gt;mount_namespaces(7) - Linux manual page - man7.org&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（http://man7.org/linux/man-pages/man7/mount_namespaces.7.html）&lt;/p&gt;

&lt;p&gt;通俗的讲，挂载命名空间实现了挂载点的隔离，在不同挂载命名空间的进程，看到的目录层次不同。&lt;/p&gt;

&lt;p&gt;● 挂载传播之共享挂载、从属挂载、私有挂载&lt;/p&gt;
&lt;p&gt;挂载命名空间实现了完全的隔离，但对于有些情况并不适用。例如在Linux系统上，进程A在命名空间1挂载了一张CD-ROM，这时候命名空间2因为隔离无法看到这张CD-ROM。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为了解决这个问题，引入了挂载传播（mount propagation）。传播挂载定义了挂载点的传播类型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）共享挂载，此类型的挂载点会加入一个peer group，并会在group内传播和接收挂载事件；&lt;/p&gt;
&lt;p&gt;2）从属挂载，此类型的挂载点会加入一个peer group，并会接收group内的挂载事件，但不传播；&lt;/p&gt;
&lt;p&gt;3）共享/从属挂载，上面两种类型的共存体。可以从一个peer group（此时类型为从属挂载）接收挂载事件，再传播到另一个peer group；&lt;/p&gt;
&lt;p&gt;4）私有挂载，此类型的挂载点没有peer group，既不传播也不接收挂载事件；&lt;/p&gt;
&lt;p&gt;5）不可绑定挂载，不展开讲；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;peer group的形成条件为，一个挂载点被设置成共享挂载，并满足以下任意一种情况：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）挂载点在创建新的命名空间时被复制&lt;/p&gt;
&lt;p&gt;2）从该挂载点创建了一个绑定挂载&lt;/p&gt;

&lt;p&gt;另外再补充下传播类型的转换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224116556-427303076.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1）如果一个共享挂载是peer group中仅存的挂载点，那么对它应用从属挂载将会导致它变为私有挂载。&lt;br/&gt;2）对一个非共享挂载类型的挂载点，应用从属挂载是无效的。&lt;/p&gt;

&lt;p&gt;背景知识讲到这里，其中挂载点的传播类型比较不好理解，但很重要，可以参考上面mount namespace的Linux Programmer’s Manual里面的例子（搜索MS_XXX example）进行学习：http://man7.org/linux/man-pages/man7/mount_namespaces.7.html&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c. 实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;概括多用户的外部存储隔离实现：应用进程在创建时，创建了新的挂载命名空间，然后通过绑定挂载对应用暴露当前用户的外部存储空间。&lt;/p&gt;

&lt;p&gt;以Android 4.2代码为例【mountEmulatedStorage(dalvik_system_Zygote.cpp)】：&lt;/p&gt;

&lt;p&gt;● 首先获取用户id。在多用户下，用户id为应用uid/100000。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224135562-184308706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 通过unshare方法创建新的挂载命名空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224156146-1917615314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 获取外部存储相关的环境变量。EXTERNAL_STORAGE环境变量是从旧版本沿袭下来的环境变量，记录了外部存储的传统路径。EMULATED_STORAGE_SOURCE环境变量，记录绑定挂载的源路径，注意应用是没有权限进入这个目录的。EMULATED_STORAGE_TARGET记录绑定挂载的目标路径，应用获取的外部存储路径就在这个目录下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224227939-1208544818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 准备挂载路径并进行绑定挂载。这里看mountMode为MOUNT_EXTERNAL_MULTIUSER时的执行分支，/mnt/shell/emulated/0将被绑定到/storage/emulated/0。如果是第二个用户，则是/mnt/shell/emulated/1绑定到/storage/emulated/1，数字就是用户id。注意这里是新的挂载命名空间，所以只有该应用看得到/storage/emulated/0下的绑定挂载，从adb shell下是看到的只能是个空目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224244293-76162200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● 为了兼容以前的版本，将用户的外部存储路径绑定到EXTERNAL_STORAGE环境变量指定的路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224302532-1411229102.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 动态权限管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Android 6.0引入了运行时权限，允许用户对危险权限进行动态授权，这部分权限包含外部存储访问权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;外部存储访问权限的动态授权，是利用FUSE和挂载命名空间这两个技术配合实现。&lt;br/&gt;通过下面这个提交记录（https://android.googlesource.com/platform/system/core/+/f38f29c87d97cea45d04b783bddbd969234b1030%5E%21/#F1），我们可以很清楚的了解整个实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224333607-1866762106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;为了达到不杀死进程，就能够赋予进程读/写外置存储的目的，Android利用FUSE对/data/media模拟了三种访问视图，分别是default、read、write。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224352386-1795100496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当应用被授予读/写权限时，vold子进程会切换到应用的挂载命名空间，将对应的视图重新绑定到应用的外部存储路径上。&lt;/p&gt;

&lt;p&gt;切换进程的挂载命名空间，需要内核版本在3.8及以上，切换函数为setns，ndk貌似没有对开发者暴露，但可以在源码里找到arm的实现，有需要直接编入就可以了，也就一个sys call。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224412134-557504955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c. 代码分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● 源码版本：Android 6.0.0_r1&lt;/p&gt;
&lt;p&gt;● 首先从/xref/system/core/sdcard/sdcard.c开始分析，仅摘取部分代码，并加了些注释：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224441375-1741428201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224455082-1912425522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;● &lt;span&gt;应用进程创建时，大致流程如下（/xref/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1）创建新的挂载命名空间；&lt;/p&gt;
&lt;p&gt;2）将之前的挂载命名空间在/storage下的挂载全部去除，排除影响；&lt;/p&gt;
&lt;p&gt;3）根据mount_mode，选择一个路径；&lt;/p&gt;
&lt;p&gt;4）将选择的路径绑定到/storage下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224515405-271964536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;● &lt;span&gt;进程在运行时，当外部存储的访问许可发生改变（用户授权）时，基本流程如下（/xref/system/vold/VolumeManager.cpp）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1）获取init的挂载命名空间，为了对之后进程的挂载命2）名空间进行对比，如果一致，不重新绑定；&lt;/p&gt;
&lt;p&gt;3）遍历/proc下各个进程目录，根据uid进行筛选；&lt;/p&gt;
&lt;p&gt;找到对应的pid后，fork子进程进行重新挂载，这里用到setns进行挂载命名空间的切换；&lt;/p&gt;

&lt;p&gt;重新挂载部分的逻辑和应用进程创建时基本一致，不难理解。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/992994/201803/992994-20180309224537830-844429913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;腾讯WeTest提供上千台真实手机&lt;/strong&gt;，随时随地进行测试，保障应用/手游品质。节省百万硬件费用，加速敏捷研发流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同时腾讯WeTest兼容性测试团队积累了10年的手游测试经验&lt;/strong&gt;，旨在通过制定针对性的测试方案，精准选取目标机型，执行专业、完整的测试用例，来提前发现游戏版本的兼容性问题，针对性地做出修正和优化，来保障手游产品的质量。目前该团队已经支持所有腾讯在研和&lt;span&gt;运营的手游项目&lt;/span&gt;&lt;/p&gt;



</description>
<pubDate>Fri, 09 Mar 2018 14:50:00 +0000</pubDate>
<dc:creator>腾讯WeTest</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wetest/p/8536868.html</dc:identifier>
</item>
<item>
<title>Python 学习笔记（二）开发环境的搭建 - 冰雪柔情的天空</title>
<link>http://www.cnblogs.com/wangruihua-521/p/8536433.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangruihua-521/p/8536433.html</guid>
<description>
&lt;p&gt;安装Python &lt;/p&gt;
&lt;p&gt;windows 下安装：&lt;/p&gt;
&lt;p&gt;下载地址：https://www.python.org/downloads&lt;/p&gt;
&lt;p&gt;Python的版本&lt;/p&gt;
&lt;p&gt;3.x 是趋势&lt;/p&gt;
&lt;p&gt;2.x 还在被大量使用&lt;/p&gt;
&lt;p&gt;至于使用2.x 还是3.x ，我觉得两者没有太大的区别，学会了2.x 也会使用3.x的，只要开始学习就好了&lt;/p&gt;
&lt;p&gt;当前我使用的Python2.7.14&lt;/p&gt;
&lt;p&gt;选择 &lt;a href=&quot;https://www.python.org/ftp/python/2.7.14/python-2.7.14.amd64.msi&quot;&gt;Windows x86-64 MSI installer&lt;/a&gt;  msi 64位安装&lt;/p&gt;

&lt;p&gt;windows 下设置环境变量 两种方式&lt;/p&gt;
&lt;p&gt;1、Win+R   输入cmd   在命令提示框中输入 path=%path%;C:\Python27  (注：Python的安装目录)  Enter 键&lt;/p&gt;
&lt;p&gt;2、计算机右键属性，这种方法自己查&lt;/p&gt;

&lt;p&gt;Linux 或Unix 上一般会自带&lt;/p&gt;
&lt;p&gt;也可使用源安装&lt;/p&gt;
&lt;p&gt;下载源码压缩包&lt;/p&gt;
&lt;p&gt; 解压缩包&lt;/p&gt;
&lt;p&gt; 执行 ./configure 脚本&lt;/p&gt;
&lt;p&gt; make &lt;/p&gt;
&lt;p&gt; make install&lt;/p&gt;

&lt;p&gt;Python 的开发工具&lt;/p&gt;
&lt;p&gt;Python自带的IDLE(Python GUI)&lt;/p&gt;
&lt;p&gt;其他工具&lt;/p&gt;
&lt;p&gt;Anaconda(包管理必备)+Pycharm&lt;/p&gt;
&lt;p&gt;Sublime3&lt;/p&gt;
&lt;p&gt;PythonWin&lt;/p&gt;
&lt;p&gt;Eclipse +PyDev&lt;/p&gt;
&lt;p&gt;等&lt;/p&gt;

</description>
<pubDate>Fri, 09 Mar 2018 14:49:00 +0000</pubDate>
<dc:creator>冰雪柔情的天空</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangruihua-521/p/8536433.html</dc:identifier>
</item>
<item>
<title>用VSCode开发一个asp.net core 2.0+angular 5项目(4): Angular5全局错误处理 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/8536350.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/8536350.html</guid>
<description>&lt;p&gt;第一部分: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8478993.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8478993.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二部分: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8481825.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8481825.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三部分: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/8525541.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/8525541.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章将介绍angular 5的全局错误处理.&lt;/p&gt;
&lt;p&gt;需要使用到代码: &lt;a href=&quot;https://pan.baidu.com/s/1F0KjbwVE8_Tzfwy69Alp-A&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1F0KjbwVE8_Tzfwy69Alp-A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文档: &lt;a href=&quot;https://angular.io/api/core/ErrorHandler&quot; target=&quot;_blank&quot;&gt;https://angular.io/api/core/ErrorHandler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先按照文档在客户端项目建立app.error-handler.ts 文件:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import { ErrorHandler } from '@angular/core'&lt;span&gt;;

export class AppErrorHandler implements ErrorHandler {
    handleError(error: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        console.log(&lt;/span&gt;'ERROR Occurred.'&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里, 我们只写log.&lt;/p&gt;
&lt;p&gt;然后在app.module里面注册:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;providers: [
    TvNetworkService,
    &lt;strong&gt;{ provide: ErrorHandler, useClass: AppErrorHandler }&lt;/strong&gt;
  ],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后把tv-network-list.component.ts里面到一个错误处理删除掉:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309194420741-1665121211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在后端到Controller里面抛一个异常:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309194544072-1527312880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们试一下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309194713170-1894483544.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到, 这个全局错误处理器正常到工作了.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先别急, 让我们在errorhandler里面使用toastr试试&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;app.error-handler.ts:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
import { ErrorHandler } from '@angular/core'&lt;span&gt;;
import { ToastrService } from &lt;/span&gt;'ngx-toastr'&lt;span&gt;;

export class AppErrorHandler implements ErrorHandler {

    &lt;strong&gt;constructor(private toastr: ToastrService) { }&lt;/strong&gt;

    handleError(error: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log('ERROR Occurred.');&lt;/span&gt;
        &lt;strong&gt;&lt;span&gt;this&lt;/span&gt;.toastr.error('发生了错误'&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而这时回到浏览器之后, 发生了错误:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309195202263-642691546.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之所以发生这个错误, 是因为AppErrorHandler在angular引入Toastr模块之前就初始化了.&lt;/p&gt;
&lt;p&gt;我们可以这样处理:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
import { ErrorHandler, Injectable, Injector, Inject } from '@angular/core'&lt;span&gt;;
import { ToastrService, Toast } from &lt;/span&gt;'ngx-toastr'&lt;span&gt;;

&lt;strong&gt;@Injectable()&lt;/strong&gt;
export class AppErrorHandler implements ErrorHandler {

    constructor(&lt;strong&gt;private injector: Injector&lt;/strong&gt;) { }

    &lt;strong&gt;private get toastr(): ToastrService {
        &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;.injector.get(ToastrService);
    }&lt;/strong&gt;

    handleError(error: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toastr.error('发生了错误'&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用Injector来手动注入ToastrService.&lt;/p&gt;
&lt;p&gt;回到浏览器:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309202230419-1891218957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并没有弹出错误信息!!!!, 但是来回切换菜单后, 开始显示错误信息了, 貌似有点迟钝.&lt;/p&gt;
&lt;p&gt;这是什么原因呢? 首先, 我们得了解以下这个东西:&lt;/p&gt;
&lt;h2&gt;Zone&lt;/h2&gt;
&lt;p&gt;首先到首先, 需要了解以下&lt;strong&gt;execution context&lt;/strong&gt;, 程序执行到上下文, 但是这些东西到定义看了之后可能会让人迷糊. 所以还是先看这段代码吧:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
const Zone =&lt;span&gt; {
  run: (callback) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beforeTask) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beforeTask();
    }
    callback();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterTask) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterTask();
    }
  }
};

Zone.beforeTask &lt;/span&gt;= () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'Before Task.'&lt;span&gt;);
};
Zone.afterTask &lt;/span&gt;= () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'After Task.'&lt;span&gt;);
};
Zone.run(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'Running...'&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就是定义一个Zone, 它到run方法可以执行某个回调函数, 回调函数到前后还可以有一些预定义的函数, 如果它们存在就会被执行. 通过定义这些函数的内容, 我们就可以在执行run的回调前后添加自定义逻辑了.&lt;/p&gt;
&lt;p&gt;回到Angular, angular的变化检测(Change Detection)功能就用到了这些东西.&lt;/p&gt;
&lt;p&gt;比如angular的一个component有一个click事件, click()方法里更新了某些属性的值, 这个时候angular就需要进行变化检测, 如果真的发生了变化, 那么angular 就会更新dom, 这样我们就能看见页面的变化了. Angular用了这个猴子补丁, 使之运行在Zone里面, 当点击按钮的时候, 这段代码总是在Zone里面执行, 在执行完click处理方法之后, angular会执行变化检测动作.&lt;/p&gt;
&lt;p&gt;angular应该是这样来进行猴子补丁的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
const Zone =&lt;span&gt; {
  run: (callback) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beforeTask) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beforeTask();
    }
    callback();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterTask) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterTask();
    }
  }
};

Zone.beforeTask &lt;/span&gt;= () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'Before Task.'&lt;span&gt;);
};
Zone.afterTask &lt;/span&gt;= () =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'After Task.'&lt;span&gt;);
};
Zone.run(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'Running...'&lt;span&gt;);
});

&lt;/span&gt;&lt;strong&gt;&lt;span&gt;var&lt;/span&gt; _setTimeout =&lt;span&gt; setTimeout;
setTimeout &lt;/span&gt;= (callback, timeout) =&amp;gt;&lt;span&gt; {
  Zone.run(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    _setTimeout(callback, timeout);
  });
};
click(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'设置Timeout'&lt;span&gt;);
});&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于这个是异步的, 所以打印到控制台到顺序可能是: Before Task, After Task, 设置Timeout.&lt;/p&gt;
&lt;p&gt;js运行时里, 有一个信息队列. 任何时候出现一个异步操作, 队列里就会推进去一条信息, js运行时会训话这个队列, 一个个把消息推出队列, 然后调用这个消息到回调函数. 对于这个例子来说就是setTimeout().&lt;/p&gt;
&lt;p&gt;所以就出现了Zone.js这个库.&lt;/p&gt;
&lt;p&gt;Zone.js就是一个执行的上下文, 它可以在不同的异步操作之间进行持久性传递.&lt;/p&gt;
&lt;p&gt;Angular就使用了这个库, 在它之上建立了ngZone这个模块. 就这样angular在发生异步操作后进行到了变化检测.&lt;/p&gt;
&lt;p&gt;浏览器里面主要有这几种异步操作: dom事件, ajax请求, 定时回调之类的.&lt;/p&gt;
&lt;p&gt;回到项目里的app.error-handler.ts:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309210825572-557876267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这句话呢就跑出了angular zone的范围...&lt;/p&gt;
&lt;p&gt;所以当错误发生的时候, toastr的error方法被调用了(状态改变了), 但是angular并不知道这个变化, 所以toastr通知没有显示.&lt;/p&gt;
&lt;p&gt;那如何解决呢?&lt;/p&gt;
&lt;p&gt;使用ngZone:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { ErrorHandler, Injectable, Injector, Inject, NgZone } from '@angular/core'&lt;span&gt;;
import { ToastrService, Toast } from &lt;/span&gt;'ngx-toastr'&lt;span&gt;;

@Injectable()
export class AppErrorHandler implements ErrorHandler {

    constructor(
        private injector: Injector,
        &lt;strong&gt;private ngZone: NgZone&lt;/strong&gt;
    ) { }

    private get toastr(): ToastrService {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.injector.get(ToastrService);
    }

    handleError(error: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;strong&gt;&lt;span&gt;this&lt;/span&gt;.ngZone.run(() =&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toastr.error('发生了错误'&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;);
        });&lt;/strong&gt;
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面试试页面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309211327654-1587486952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这次没有任何问题了.&lt;/p&gt;

&lt;p&gt;您可以自己写一个后台api来记录日志, 但是这里我介绍一个专门做logging的云服务, &lt;strong&gt;sentry.io&lt;/strong&gt;. &lt;a href=&quot;https://sentry.io/&quot; target=&quot;_blank&quot;&gt;https://sentry.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先请您自己注册账户. &lt;/p&gt;
&lt;p&gt;然后创建一个项目, 选择angular:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309211904065-341030640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击下面按钮Create Project.&lt;/p&gt;
&lt;p&gt;然后它给出了安装和配置的说明:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309212012221-1610994030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先执行命令安装.&lt;/p&gt;
&lt;p&gt;然后, 配置:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;import * as Raven from 'raven-js'&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;
import { BrowserModule } from &lt;/span&gt;'@angular/platform-browser'&lt;span&gt;;
import { NgModule, ErrorHandler } from &lt;/span&gt;'@angular/core'&lt;span&gt;;
import { AppComponent } from &lt;/span&gt;'./app.component'&lt;span&gt;;

&lt;strong&gt;Raven
  .config(&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;'https://&lt;span&gt;fa66d9390ab04c7f8e8c82ad0613fb4e@sentry.io/301095&lt;/span&gt;'&lt;span&gt;)
  .install();
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;
@NgModule({
  imports: [ BrowserModule ],
  declarations: [ AppComponent ],
  bootstrap: [ AppComponent ],
  providers: [ { provide: ErrorHandler, useClass: AppErrorHandler } ]
})
export class AppModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照说明进行配置, 我们做一些调整, 这里红色部分是每个用户都不一样都.&lt;/p&gt;
&lt;p&gt;最后修改app.error-handler.ts:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { ErrorHandler, Injectable, Injector, Inject, NgZone } from '@angular/core'&lt;span&gt;;
import { ToastrService, Toast } from &lt;/span&gt;'ngx-toastr'&lt;span&gt;;
&lt;strong&gt;import &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;* as Raven from 'raven-js'&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;

@Injectable()
export class AppErrorHandler implements ErrorHandler {

    constructor(
        private injector: Injector,
        private ngZone: NgZone
    ) { }

    private get toastr(): ToastrService {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.injector.get(ToastrService);
    }

    handleError(error: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
        &lt;strong&gt;Raven.captureException(error);
        &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ngZone.run(() =&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toastr.error('发生了错误'&lt;span&gt;);
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到浏览器的错误页面, 触发错误后, 大约几分钟后, 来到sentry.io网站查看:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309213531826-1752346126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309213428462-1962752471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201803/986268-20180309213450061-749570193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;今天先写到这, 明天后天写以下 angular5上传文件到asp.net core web api.&lt;/p&gt;
</description>
<pubDate>Fri, 09 Mar 2018 13:38:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/8536350.html</dc:identifier>
</item>
</channel>
</rss>