<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>通过分析HSL/HSB获取图片主色调 - 奋发的小铁匠</title>
<link>http://www.cnblogs.com/yanshouwang/p/8549522.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanshouwang/p/8549522.html</guid>
<description>&lt;p&gt;这两天稍微研究了一下颜色的HSL/HSB值，主要因为写程序想要实现通过一张图片拿到图片中的最突出的颜色值（类似Groove Music中播放栏背景就是从专辑封面中取出主色调，还有Windows 10任务栏也可以从桌面背景获取主色调作为主题颜色）。&lt;/p&gt;
&lt;p&gt;网上搜索了一下并没有满意的解决办法，于是自己小小的研究了一下，最后效果还算可以啦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312142233272-1709934356.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312142435856-1405014586.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312142256913-334113214.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;开始的时候想通过分析ARGB来获取，可以说是一头雾水，因为ARGB的组合实在是多，而且我也不清楚组合以后出来的颜色到底有什么规律，所以没过多久就放弃了。&lt;/p&gt;
&lt;p&gt;之后决定用HSL/HSB的方式来获取主色调，之前只是了解有这个模式，并没有具体研究过H、S、B分别表示什么，然后小小的学习了一下，收获很大，RGB的模式对于计算机来说很简单，但是对于人类来说就很不友好了，毕竟我们是感性的动物，而HSL/HSB模式就很好理解了，Hue代表色调，范围0-360°，代表了各种颜色（没有白色和黑色，大家应该都知道白色和黑色并不是颜色~），Saturation代表饱和度，范围0-1，饱和度为0那么颜色就是真了，所有的颜色都将变为灰色，Brightness/Lightness代表亮度，范围0-1，这两个之间是有区别的，Brightness为0的话就是黑色（没有光当然是漆黑一片了），为1的话是某种颜色最亮的状态。而Lightness为0的时候也是黑色，但是为1的时候就是白色了（我觉得可以这样认为，光强超过了物体吸收光波的极限，所有的光都反射了回来，所以你看到的就是一片白色啦，对眼睛伤害很大，所以阳光很足的时候不要老在外面待着哦），Lightness为0.5对应了Brightness为1的状态，所以我认为Lightness是Brightness在数值上的延伸而已。总只Wiki上Copy来两张图就解释一切啦！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312144921068-556422576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至于HSB/HSL与ARGB之间具体的转换关系就没有深入研究了，公式都有，深入研究就算了，毕竟头发宝贵……&lt;/p&gt;
&lt;p&gt;看到网上都是再拿Hue来做文章，毕竟Hue代表了色调，开始我也这样认为，觉得拿到图片的所有像素，统计一下Hue在哪个颜色范围最多，然后就取这个色调颜色的均值好了，结果发现如果图片的颜色不多还好，如果颜色复杂的话，并不是很容易就能拿到想要的颜色，而且很容易把图片的背景色错认为图片的主色调，想了很多的方法，都觉得不能满足所有的情况，比如有的时候背景色占的面积很大，有时候很小，或者图片就一种颜色，或者颜色很多，这样的话可能需要分类讨论的情况很多，很复杂，最重要的是自己的数学真的不足以支持那么复杂的运算，高数线代什么的早都还给老师了，还是那句话，头发宝贵啊....&lt;/p&gt;
&lt;p&gt;然后又经历了一个晚上的不眠之夜，早上起来班车上突然灵感来了，哈哈，觉得真的是想复杂了，入手点不应该从Hue出发，而是从另外两个值来搞事情，Saturation和Brightness，很简单，怎么样定义主色调？很简单，就是看一张图片我们第一眼就关注到的颜色，这样的颜色只需要满足两个条件，饱和度最大并且亮度最大，也就是最鲜艳的颜色，注意这里其实也是有个小问题的，有一个颜色喜好的问题，就想看红绿灯，虽然红绿黄三种颜色都是纯色，他们的饱和度和亮度都是1，但是最能引起我们注意的还是红色，而对于不同的颜色，我觉得每个人最先分辨的颜色可能也是不一样的……那么这个问题，我就不解决了，大神可以自己研究一下，我的做法相当的简单，拿到一组饱和度+亮度的值最大的颜色（可能还涉及到权重，我也不管这个，直接相加），这组颜色可能是很多色调的组合，那就说明这张图上我们第一眼可能看到的颜色有多种，那么拿到这些颜色，可以随机取一种或者进行某种运算，我的话就直接取均色好了，我觉得这样也不错。然后最终效果就是最上面的两张图，我自己是满意了，而且这样处理直接会去掉白色和黑色，除非图上只有这两种颜色。&lt;/p&gt;
&lt;p&gt;以上完全是个人想法，请轻喷……&lt;/p&gt;
&lt;p&gt;最后要吐槽一下微软，C#里面获取亮度的方法是GetBrightness，看名字觉得应该是采用HSB的颜色模式，结果写完代码一看傻眼了，所有图片拿到的都是白花花的一片，才意识到可能微软用的是HSL的模式，写了个小程序测试了一下，果然，纯色的Brightness都是0.5，而白色的Brightness为1，NM真的是坑啊，要不你就换成GetLightness好不好？？？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312151624227-118185455.png&quot; alt=&quot;&quot; width=&quot;367&quot; height=&quot;227&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1207029/201803/1207029-20180312151640139-75580186.png&quot; alt=&quot;&quot; width=&quot;368&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后附代码，直接来一发拓展方法（刚刚跟猛哥那学来没多久，当然要多用一用），其实代码不重要，重要的是思路，如果大家有更好的想法，欢迎分享给我啦&lt;/p&gt;
&lt;p&gt;（WPF的话还简单点，UWP取图片的像素点还是有点小麻烦的）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_d7b7f3e6-6607-4867-bb21-f85977ef76d8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d7b7f3e6-6607-4867-bb21-f85977ef76d8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d7b7f3e6-6607-4867-bb21-f85977ef76d8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExtensionMethod
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; GetHue(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Color color)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B).GetHue();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; GetSaturation(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Color color)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B).GetSaturation();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; GetBrightness(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Color color)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B).GetBrightness();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;Color&amp;gt; GetMajorColorAsync(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; BitmapImage bitmap)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; random =&lt;span&gt; RandomAccessStreamReference.CreateFromUri(bitmap.UriSource);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; stream = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; random.OpenReadAsync();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; decoder = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; BitmapDecoder.CreateAsync(stream);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; data = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; decoder.GetPixelDataAsync();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; bytes =&lt;span&gt; data.DetachPixelData();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; colors = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Color&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i += &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 colors.Add(Color.FromArgb(bytes[i + &lt;span&gt;3&lt;/span&gt;], bytes[i + &lt;span&gt;2&lt;/span&gt;], bytes[i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;], bytes[i]));
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             colors = colors.GroupBy(c =&amp;gt; &lt;span&gt;1&lt;/span&gt; - c.GetSaturation() + Math.Abs(&lt;span&gt;0.5&lt;/span&gt; - c.GetBrightness())).OrderBy(g =&amp;gt;&lt;span&gt; g.Key).FirstOrDefault().ToList();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; color = Color.FromArgb(Convert.ToByte(colors.Average(c =&amp;gt; c.A)), Convert.ToByte(colors.Average(c =&amp;gt; c.R)), Convert.ToByte(colors.Average(c =&amp;gt; c.G)), Convert.ToByte(colors.Average(c =&amp;gt;&lt;span&gt; c.B)));
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; color;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;终于写完了，每天进步一点点，Get√&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 07:24:00 +0000</pubDate>
<dc:creator>奋发的小铁匠</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanshouwang/p/8549522.html</dc:identifier>
</item>
<item>
<title>面试总结 - ZepheryWen</title>
<link>http://www.cnblogs.com/w1570631036/p/8549333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w1570631036/p/8549333.html</guid>
<description>&lt;p&gt;周五去了一趟深圳某互联网金融面试，很遗憾吧，没过，听到没过的时候心都碎了，毕竟还是很想去这家公司的，之后还不要脸的问了“能不能再聊聊”，下楼之后，被二面的经理叫回来说跟架构师聊聊，依旧没过。。。面试官很好，还给了很多建议，还说要是有合适的会给你联系的。回想一下，只能怪自己真的太不争气了，没有借口！！！基础！基础！基础！&lt;/p&gt;
&lt;h3 id=&quot;重写equals为什么要重写hashcode&quot;&gt;1. 重写equals为什么要重写hashCode&lt;/h3&gt;
&lt;p&gt;这个，，，真是个意外，好久没看到过这个问题了，而且好久没重写过equals了，面试官还问“这不是面试常考题么”，额，我还是太菜。&lt;br/&gt;主要有两点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;(1)不被重写（原生）的hashCode值是根据内存地址换算出来的一个值。
(2)不被重写（原生）的equals方法是严格判断一个对象是否相等的方法（object1 == object2）。&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常考题还有“==”跟“equals”的区别&lt;/p&gt;
&lt;h3 id=&quot;jvm中survivor区存在的意义是啥&quot;&gt;2. JVM中survivor区存在的意义是啥&lt;/h3&gt;
&lt;p&gt;在任何时候，总有一个survivor space是empty的，在下一次coping collection时，会将eden和另一个survivor space里的live object copy到这个里面。&lt;br/&gt;live objects在两个survivor space里copy来copy去，直到对象old enough可以放到tenured generation里（copy 过去的）&lt;br/&gt;因为在垃圾收集的时候需要将dead object清理掉，如果只有一个survivor区，那么这个survivor区里的dead object在清理掉之后就会产生内存碎片，为了避免内存碎片那么必须将live object移动来移动去，这样就会损失性能。&lt;br/&gt;如果有两个survivor区，按照上面的说法，就不会存在内存碎片的问题。&lt;br/&gt;参考：&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/antony9118/article/details/51425581&quot;&gt;为什么新生代内存需要有两个Survivor区&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;minor-gcmajor-gcfull-gc使用了哪种垃圾回收算法为什么&quot;&gt;3. minor gc、major gc、full gc使用了哪种垃圾回收算法，为什么&lt;/h3&gt;
&lt;p&gt;先来讲一下这几个算法的特性吧&lt;br/&gt;&lt;strong&gt;复制&lt;/strong&gt;：1.将内存分为两块，只用一块，另一块用来讲这一块的对象复制；2.不会产生内存碎片&lt;br/&gt;&lt;strong&gt;标记-清除&lt;/strong&gt;：1.从引用根节点开始标记所有被引用的对象；2.遍历整个堆，把未标记的对象清除。此算法需要暂停整个应用，同时，会产生内存碎片。&lt;br/&gt;&lt;strong&gt;标记-整理&lt;/strong&gt;：1.从根节点开始标记所有被引用对象；2.遍历整个堆，把清除未标记对象并且把存活对象“压缩”到堆的其中一块，按顺序排放。此算法避免了“标记-清除”的碎片问题，同时也避免了“复制”算法的空间问题。&lt;br/&gt;说的有点不够形象，还是用对比的表格来展示吧。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;速度&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;最慢&lt;/td&gt;
&lt;td&gt;最快&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;空间开销&lt;/td&gt;
&lt;td&gt;少（但会堆积碎片）&lt;/td&gt;
&lt;td&gt;少（不堆积碎片）&lt;/td&gt;
&lt;td&gt;通常需要活对象的2倍大小（不堆积碎片）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;移动对象&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;新生代的Minor GC触发条件&lt;/strong&gt;：Copying算法就是扫描出存活的对象，并复制到一块新的完全未使用的空间中，对应于新生代，就是在Eden和FromSpace或ToSpace之间copy。所有的Minor GC都会触发全世界的暂停（stop-the-world）&lt;br/&gt;&lt;strong&gt;老年代的GC（Major GC/Full GC）&lt;/strong&gt;：老年代与新生代不同，老年代对象存活的时间比较长、比较稳定，因此采用标记(Mark)算法来进行回收，所谓标记就是扫描出存活的对象，然后再进行回收未被标记的对象，回收后对用空出的空间要么进行合并、要么标记出来便于下次进行分配，总之目的就是要减少内存碎片带来的效率损耗。&lt;/p&gt;
&lt;h3 id=&quot;mq中的queue和topic有什么区别&quot;&gt;4. mq中的queue和topic有什么区别&lt;/h3&gt;
&lt;p&gt;有点懵逼，mq只是简单的了解一下，没想到会到这点。。。留张图先，后续写篇大文&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180311105601.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.cnblogs.com/lemon-flm/p/7676047.html&quot;&gt;ActiveMQ——activemq的详细说明，queue、topic的区别（精选）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;线程池中shutdownshutdownnowisshutdownisterminatedawaittermination的使用场景&quot;&gt;5. 线程池中shutdown、shutdownNow、isShutdown、isTerminated、awaitTermination的使用场景&lt;/h3&gt;
&lt;p&gt;好久线程池这一块了，有点搞乱&lt;br/&gt;shutdown在终止前允许执行以前提交的任务&lt;br/&gt;shutdownNow试图停止当前正执行的task，并返回尚未执行的task的list&lt;br/&gt;isShutDown当调用shutdown()方法后返回为true。&lt;br/&gt;isTerminated当调用shutdown()方法后，并且所有提交的任务完成后返回为true&lt;br/&gt;awaitTermination当等待超过设定时间时，会监测ExecutorService是否已经关闭，若关闭则返回true，否则返回false&lt;/p&gt;
&lt;h3 id=&quot;使用new-threadpoolexecutor中里面的几个参数含义以及使用场景maximumpoolsize超了会怎样&quot;&gt;6. 使用new ThreadPoolExecutor()中里面的几个参数含义以及使用场景（maximumPoolSize超了会怎样）&lt;/h3&gt;
&lt;p&gt;这题。。。细，太细了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;int corePoolSize  核心线程数，核心线程会一直存活，即使没有任务需要执行
int maximumPoolSize  最大线程数
long keepAliveTime   线程空闲时间
TimeUnit unit   指定keepAliveTime的单位，如TimeUnit.SECONDS。当将allowCoreThreadTimeOut设置为true时对corePoolSize生效。
BlockingQueue&lt;span class=&quot;kw&quot;&gt;&amp;lt;Runnable&amp;gt;&lt;/span&gt; workQueue  线程池中的任务队列
ThreadFactory threadFactory    线程工厂，提供创建新线程的功能。
RejectedExecutionHandler handler 当线程池中的资源已经全部使用，添加新线程被拒绝时，会调用                                &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;corePoolSize、maximumPoolSize之间的关系&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;1.如果线程数量&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;=核心线程数量，那么直接启动一个核心线程来执行任务，不会放入队列中。
2.如果线程数量&amp;gt;核心线程数，但&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;=最大线程数，并且任务队列是LinkedBlockingDeque的时候，超过核心线程数量的任务会放在任务队列中排队。
3.如果线程数量&amp;gt;核心线程数，但&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;=最大线程数，并且任务队列是SynchronousQueue的时候，线程池会创建新线程执行任务，这些任务也不会被放在任务队列中。这些线程属于非核心线程，在任务完成后，闲置时间达到了超时时间就会被清除。
4.如果线程数量&amp;gt;核心线程数，并且&amp;gt;最大线程数，当任务队列是LinkedBlockingDeque，会将超过核心线程的任务放在任务队列中排队。也就是当任务队列是LinkedBlockingDeque并且没有大小限制时，线程池的最大线程数设置是无效的，他的线程数最多不会超过核心线程数。
5.如果线程数量&amp;gt;核心线程数，并且&amp;gt;最大线程数，当任务队列是SynchronousQueue的时候，会因为线程池拒绝添加任务而抛出异常。&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考：&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/waytobestcoder/p/5323130.html&quot;&gt;ThreadPoolExecutor线程池参数设置技巧&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/qq_25806863/article/details/71126867&quot;&gt;Java多线程-线程池ThreadPoolExecutor构造方法和规则&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;concurrenthashmap中segment的作用还有用了什么锁&quot;&gt;7. ConcurrentHashMap中Segment的作用，还有用了什么锁&lt;/h3&gt;
&lt;p&gt;此问题保留，改天看源码写文章。。。。&lt;/p&gt;
&lt;h3 id=&quot;tail--f中f的含义&quot;&gt;8. tail -f中f的含义&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;-c, --bytes=N                     输出最后N个字节
-F                                等同于--follow=name  --retry，**根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪**
-f, --follow[={name|descriptor}]  根据文件描述符进行追踪，当文件改名或被删除，追踪停止; -f, --follow以及 --follow=descriptor 都是相同的意思
-n, --lines=N                     输出最后N行,而非默认的最后10行
    --max-unchanged-stats=N       参看texinfo文档(默认为5)
    --max-consecutive-size-changes=N    参看texinfo文档(默认为200)
    --pid=PID                     与-f合用,表示在进程ID,PID死掉之后结束.
-q, --quiet, --silent             从不输出给出文件名的首部
-s, --sleep-interval=S            与-f合用,表示在每次反复的间隔休眠S秒
-v, --verbose                     总是输出给出文件名的首部
--help                            显示帮助信息后退出
--version                         输出版本信息后退出&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;df--h中h的含义&quot;&gt;9. df -h中h的含义&lt;/h3&gt;
&lt;p&gt;我有点慌，df --help看了下我还是记不住那么多。。。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;  -a, --all             全部文件系统列表
  -B, --block-size=SIZE 使用SIZE大小的Blocks
  -h, --human-readable  以可读性较高的方式来显示信息
  -H, --si              与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；
  -i, --inodes          显示inode的信息；
  -k                    指定区块大小为1024字节；跟--block-size=1K一样
  -l, --local           仅显示本地端的文件系统；
      --no-sync         在取得磁盘使用信息前，不要执行sync指令，此为预设值；
  -P, --portability     使用POSIX的输出格式；
      --sync            在取得磁盘使用信息前，先执行sync指令；
  -t, --type=TYPE       仅显示指定文件系统类型的磁盘信息；
  -T, --print-type      显示文件系统的类型；
  -x, --exclude-type=TYPE   不要显示指定文件系统类型的磁盘信息；
  -v                    (ignored)
      --help     display this help and exit
      --version  output version information and exit&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;fastdfs原理&quot;&gt;10. fastdfs原理&lt;/h3&gt;
&lt;p&gt;这个真的没有深入研究的，写在简历上是希望通过引入新技术（之前一直用的JDK1.6写的FTP文件服务器），给团队带来贡献的，结果没有说出来，相当于挖了个坑把自己埋了，好尴尬，先在这放张图，有空再深入研究下了。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180311063143.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;分布式锁原理与实现方式如果保持一致性秒杀架构中会加1000把锁&quot;&gt;11. 分布式锁原理与实现方式，如果保持一致性，秒杀架构中会加1000把锁？&lt;/h3&gt;
&lt;p&gt;分布式锁是最近刚开始看的问题，知道目前通常实现方式有三种：1.数据库的共享锁；2.Redis；3.ZooKeeper，其中Redis的实现方式核心是setnx(set if not exist)，只看过一点点Redisson的源码。面试的时候被问到了，有点慌的其实，毕竟公司没有项目用到分布式锁这种东西，面试官还不一直不信，问我“那你们提工单的时候如果处理点击多次的情况”。&lt;br/&gt;此问题保留，后续会写一篇RedissonLock源码的文章。&lt;/p&gt;
&lt;p&gt;参考：&lt;br/&gt;&lt;a href=&quot;https://github.com/redisson/redisson&quot;&gt;Redisson&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.jobbole.com/99751/&quot;&gt;基于Redis实现分布式锁，Redisson使用及源码分析&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;threadlocal有何缺陷&quot;&gt;12. threadlocal有何缺陷&lt;/h3&gt;
&lt;p&gt;Java中的ThreadLocal 变量用于将变量同当前线程绑定，每个线程都有自己独立的ThreadLocal变量。这些变量通常用于保存一些变量的状态信息，譬如用户信息这种在整个应用中都使用的到并且你不想在每个方法中都重新声明。hreadLocal对Key使用到了弱引用，但是为了保证不再内存泄露，在每次set.get的时候主动对key==null的entry做遍历回收。虽然不会造成内存泄露，但是因为只有在每次set，get的时候才会对entry做key==null的判断，从而释放内存，所以可能使大对象在内存中存活很长一段时间，从而占用内存。所以，我们在使用完ThreadLocal里的对象后最好能手动remove一下，或者至少调用下ThreadLocal.set(null)。&lt;br/&gt;参考：&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3920407.html&quot;&gt;Java并发编程：深入剖析ThreadLocal&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.importnew.com/22480.html&quot;&gt;ThreadLocal内存泄露&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://liuinsect.iteye.com/blog/1827012&quot;&gt;ThreadLocal内存泄露分析&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;cookie和session的原理分布式场景下如何保持唯一&quot;&gt;13. cookie和session的原理，分布式场景下如何保持唯一。&lt;/h3&gt;
&lt;p&gt;这个问题，一开始我觉得自己理解还是足够的，毕竟自己做过网站，爬虫还做了不少，但是说出来的时候，跟自己想象中的很不一样，这里再次总结一下吧。由于HTTP是无状态的协议，一旦数据交换完毕，客户端和服务器的连接就会关闭，如果需要重新连接，那么久必须发起新的会话。所以，在客户端和服务器中保存相关的信息是通过cookie和session来实现的。简单的来说，session存储于服务端，cookie存在于客户端，每次会话时服务器会在内存中开辟一小块内存空间记录会话，session的运行依赖于session id（tomcat中叫jsessionid），而session id是存储在cookie中的，如果浏览器禁用了cookie，那么session也会失效，以大部分登录网站为例，可以试试登录之后禁用cookie，刷新页面，登录信息没了，之后是再怎么登录也登录不进去。所以，需要记录的点是：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;1.session存储在服务端，cookie存储在客户端（浏览器）；
2.服务端中记录唯一会话标示用的是session id，tomcat中叫做jsessionid，cookie中保存session id，发送请求的时候携带sessionid
3.session存放的位置一般放在服务器的内存中，分布式环境下一般都是用spring-session和redis构建。
4.cookie安全性差，一般采用加密。而且不能跨域。&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分布式环境下如何保存，公司采用的还是memcache，新项目都换成了redis集群。公司的不是我负责的，但是，我自己的项目用到了spring-session和redis，可是面试的时候，不知道怎么了，没有发挥出来，我也是醉了。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180311045948.png&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;参考：&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/linguoguo/p/5106618.html&quot;&gt;Cookie和session详解&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/19786827&quot;&gt;COOKIE和SESSION有什么区别？&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/wojiaolinaaa/article/details/62424642&quot;&gt;spring-session简介、使用及实现原理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;你对你们公司项目有什么深入的理解么&quot;&gt;14. 你对你们公司项目有什么深入的理解么？&lt;/h3&gt;
&lt;p&gt;这个问题。。。本质上挺好，但是，我们公司的项目真的没有技术含量，面试官不信，我都不知道该怎么回答了，说我们公司项目很牛逼？但是牛逼在哪里？全都是增删改查的项目，缓存还用的ehcache，而且用缓存的地方及其少，JDK还用的1.6。。。把我们部门的项目给公司其他部门看，别人说，我以为我这边的项目已经够烂了，没想到还有更烂的，不想看你们的。离职前还问了我们组技术最好的项目有没有技术深度高一点的东西，想了半会，跟我说没有，我又问了，提工单的时候如何保持一致性的，下面是聊天记录，可以看下。其实我也超想挖掘项目中比较高深的东西，但是，我们做的就是业务系统，我有啥办法啊。。。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;公司的防止重复提交方法，点击一次后让它不可点击。如果浏览器坏了发送了两次请求，需要人工干预。
list[i].disabled = false;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是聊天记录：&lt;br/&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180310071247.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180310071306.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20180310071623.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;br/&gt;都是基础，真恨自己平时没总结，一心只想看架构，结果地基都没打好，导致面试的时候，楼全面崩塌了。。。。好好反思吧。。。&lt;/p&gt;
&lt;p&gt;BTY：&lt;br/&gt;本人目前已离职，如果觉得我还行，，，，，希望各位大佬内推，B轮融资以上的就更好了。。。哦对，坐标&lt;strong&gt;深圳&lt;/strong&gt;。&lt;br/&gt;个人网站：&lt;a href=&quot;http://www.wenzhihuai.com/&quot; class=&quot;uri&quot;&gt;http://www.wenzhihuai.com/&lt;/a&gt;&lt;br/&gt;我的简历：&lt;a href=&quot;http://www.wenzhihuai.com/myresume.html&quot; class=&quot;uri&quot;&gt;http://www.wenzhihuai.com/myresume.html&lt;/a&gt;&lt;br/&gt;GitHub:&lt;a href=&quot;https://github.com/Zephery&quot; class=&quot;uri&quot;&gt;https://github.com/Zephery&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 07:20:00 +0000</pubDate>
<dc:creator>ZepheryWen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w1570631036/p/8549333.html</dc:identifier>
</item>
<item>
<title>numpy使用总结 - 骑猪去流浪</title>
<link>http://www.cnblogs.com/flowyourheart/p/numpy-shi-yong-zong-jie.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flowyourheart/p/numpy-shi-yong-zong-jie.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;numpy是Python中常用的数据处理库的基础库,一般通过import numpy as np的方式导进&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;科学计算库numpy&quot;&gt;科学计算库numpy&lt;/h3&gt;
&lt;p&gt;在numpy中,主要的数据结构是ndarray,在numpy中称为数组,其中二维数组对应于数学上的矩阵,是数据处理中的常见结构&lt;/p&gt;
&lt;h4 id=&quot;numpy的创建&quot;&gt;numpy的创建&lt;/h4&gt;
&lt;ol readability=&quot;10&quot;&gt;&lt;li readability=&quot;17&quot;&gt;
&lt;p&gt;可以通过读取本地文件来创建:genfromtxt()&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;world_alcohol &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.genfromtxt(&lt;span class=&quot;st&quot;&gt;&quot;world_alcohol.txt&quot;&lt;/span&gt;, delimiter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt;,dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;,skip_header&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;&quot;world_alcohol.txt&quot;&lt;/code&gt;为数据文件的路径,&lt;code&gt;delimiter=&quot;,&quot;&lt;/code&gt;为区分元素的字符,以数据文件的具体情况来指定,有时候是空格,&lt;code&gt;dtype=str&lt;/code&gt;指定生成ndarray的元素类型,有int/float/str三种类型可选,并且在一个ndarray中全部元素只能为同一种类型,如果指定的类型不对,转换后会有数据丢失,&lt;code&gt;skip_header=1&lt;/code&gt;表示不读取第一行&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;可以通过将Python中的列表转换而成:array()&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;],dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个参数为Python中的列表数据结构,列表可以是一维/二维等列表,一维列表表示矩阵中的标量,二维列表表示普通矩阵,指定类型为可选参数&lt;br/&gt;****&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;打印数组的维度行数和列数shape&quot;&gt;打印数组的维度(行数和列数):shape&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(vector.shape)
matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;]])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(matrix.shape)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,)
(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;查看列表中元素的数据类型dtype&quot;&gt;查看列表中元素的数据类型dtype&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;numbers &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;])
numbers.dtype&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;dtype(&lt;span class=&quot;st&quot;&gt;'int32'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;索引与切片&quot;&gt;索引与切片&lt;/h4&gt;
&lt;p&gt;跟Python中的列表类似,&lt;code&gt;,&lt;/code&gt;为不同维度的分隔符,&lt;code&gt;:&lt;/code&gt;可以取同一个维度的一个范围,二维矩阵则是将行的选取范围和列的选取单位进行并集操作&lt;/p&gt;
&lt;p&gt;一维矩阵的范围选取&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(vector[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]) &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;[ &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二维矩阵的范围选取&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                    [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                    [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                    [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
                 ])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(matrix[:,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                    [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                    [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                    [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
                 ])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(matrix[:,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;

[[ &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                    [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                    [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                    [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
                 ])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(matrix[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])

 &lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
 
 [[&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;numpy的条件判断&quot;&gt;numpy的条件判断&lt;/h4&gt;
&lt;p&gt;使用numpy的条件判断时,矩阵会将每一个元素都与该条件进行比较,返回每个元素的比较结果,结果为True或False&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#输入&lt;/span&gt;
vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
vector &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;])

&lt;span class=&quot;co&quot;&gt;#输入&lt;/span&gt;
matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                    [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                    [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                    [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
                 ])
matrix &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([[ &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;],
       [ &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;],
       [&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;通过判断得到的结果可以用来当做索引取值&quot;&gt;通过判断得到的结果,可以用来当做索引取值&lt;/h4&gt;
&lt;p&gt;在上一步对矩阵进行条件判断后,得到一个与矩阵维度相同的元素只有True和False的矩阵(暂且取名b),在实际应用中,我们通常不仅仅需要得到这个矩阵b,更多的是需要得到满足该条件的元素值,在numpy中可以通过矩阵b作为索引,取出位置处为true的元素值&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
equal_to_ten &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; equal_to_ten
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(vector[equal_to_ten])

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;]
[&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;]

matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
             ])
second_column_25 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (matrix[:,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; second_column_25
&lt;span class=&quot;co&quot;&gt;#条件结果一维矩阵,可以用来作为获取某些行或者列的索引&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(matrix[second_column_25, :])

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;]
[[&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;条件判断结果可以使用&lt;code&gt;$ |&lt;/code&gt;这两个逻辑操作符进行运算,跟普通的条件运算一样&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
equal_to_ten_and_five &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; equal_to_ten_and_five

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;]

vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
equal_to_ten_or_five &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; equal_to_ten_or_five

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[ &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;]

vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
equal_to_ten_or_five &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; (vector &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
vector[equal_to_ten_or_five] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(vector)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;转换矩阵元素的数据类型astype&quot;&gt;转换矩阵元素的数据类型astype&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;3&quot;&lt;/span&gt;])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; vector.dtype
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; vector
vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; vector.astype(&lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; vector.dtype
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; vector

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;|&lt;/span&gt;S1
[&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;]
float64
[ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;.  &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;矩阵元素的累加求和sum&quot;&gt;矩阵元素的累加求和sum()&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;vector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;])
vector.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;()

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;#axis指的是计算行还是列方向,axis=0:从列方向进行计算,axis=1:从行方向进计算,如果没有传入axis参数,求的是整个矩阵的元素和&lt;/span&gt;
matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
             ])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (matrix.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;())
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (matrix.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;225&lt;/span&gt;
array([ &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;,  &lt;span class=&quot;dv&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;120&lt;/span&gt;])

matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.array([
                [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;], 
                [&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;],
                [&lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;]
             ])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (matrix.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个小例子,求出&lt;code&gt;world_alcohol.txt&lt;/code&gt;数据中第5列的和及平均数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#replace nan value with 0&lt;/span&gt;
world_alcohol &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.genfromtxt(&lt;span class=&quot;st&quot;&gt;&quot;world_alcohol.txt&quot;&lt;/span&gt;, delimiter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;#isnan对矩阵元素进行是否为nan进行判断&lt;/span&gt;
is_value_empty &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.isnan(world_alcohol[:,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;])
&lt;span class=&quot;co&quot;&gt;#将为nan的元素值替换为'0'&lt;/span&gt;
world_alcohol[is_value_empty, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;
alcohol_consumption &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; world_alcohol[:,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;co&quot;&gt;#将str类型转换为float类型,进行下一步的计算&lt;/span&gt;
alcohol_consumption &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; alcohol_consumption.astype(&lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;)
total_alcohol &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; alcohol_consumption.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;()
average_alcohol &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; alcohol_consumption.mean()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (total_alcohol)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (average_alcohol)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;1137.78&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;1.140060120240481&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;常用函数&quot;&gt;常用函数&lt;/h4&gt;
&lt;h5 id=&quot;arange&quot;&gt;arange&lt;/h5&gt;
&lt;p&gt;np.arange([start,]stop[,step,],dtype=None),确定一个数值范围,从范围中取出符合step要求的数,组成一个一维矩阵&lt;/p&gt;
&lt;h5 id=&quot;reshape&quot;&gt;reshape&lt;/h5&gt;
&lt;p&gt;np.reshape(),修改矩阵维度,参数中需要传入矩阵新维度,如果其中一个维度参数为-1,则以另外一个维度参数进行计算&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np
a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a)
b&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;a.reshape(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;]]
[[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;查看矩阵的维度shape&quot;&gt;查看矩阵的维度shape&lt;/h5&gt;
&lt;p&gt;shape是每个矩阵的属性,调用可以获取到维度(即行与高)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.shape

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;查看矩阵的维数ndim&quot;&gt;查看矩阵的维数ndim&lt;/h5&gt;
&lt;p&gt;ndim是矩阵的属性,比如二维矩阵的维数是2&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.ndim

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;数据类型名称的字符串dtype.name&quot;&gt;数据类型名称的字符串dtype.name&lt;/h5&gt;
&lt;p&gt;dtype返回的是类型,而dtype.name返回的是类型的字符串&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.dtype.name

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'int64'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;查看矩阵中元素的总数量size&quot;&gt;查看矩阵中元素的总数量size&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.size

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;创建全0矩阵zeros参数传值类型为tuple&quot;&gt;创建全0矩阵,zeros(),参数传值类型为tuple&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.zeros ((&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)) 

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.],
       [ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.],
       [ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;创建全1矩阵ones参数传值类型为tuple&quot;&gt;创建全1矩阵,ones(),参数传值类型为tuple&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.ones( (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.int32 )

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]],

       [[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;生成随机数矩阵np.random.random参数传值为tuple由此发现如果函数参数需要传递的参数为矩阵的维度参数都是用tuple包装起来这个是必须的因为很多函数除了需要传递维度的参数还需要传递其他参数比如指定类型等需要将维度参数封装起来才符合逻辑&quot;&gt;生成随机数矩阵np.random.random(),参数传值为tuple,由此发现,如果函数参数需要传递的参数为矩阵的维度,参数都是用tuple包装起来,这个是必须的,因为很多函数除了需要传递维度的参数,还需要传递其他参数,比如指定类型等,需要将维度参数封装起来,才符合逻辑&lt;/h5&gt;
&lt;p&gt;np.random.random(),获取范围为[0:1)的随机数,可以传入tuple来确定矩阵的维度&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
array([[&lt;span class=&quot;fl&quot;&gt;0.74742051&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.70915301&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.2530189&lt;/span&gt; ],
       [&lt;span class=&quot;fl&quot;&gt;0.4440015&lt;/span&gt; , &lt;span class=&quot;fl&quot;&gt;0.94236515&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.49901836&lt;/span&gt;],
       [&lt;span class=&quot;fl&quot;&gt;0.55138142&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.92399121&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.36560045&lt;/span&gt;],
       [&lt;span class=&quot;fl&quot;&gt;0.86989627&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.91722679&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.20743568&lt;/span&gt;]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;输出指定范围指定数量的数据linspace&quot;&gt;输出指定范围指定数量的数据linspace()&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.linspace( &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;numpy.pi, (&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;) )
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a.size)
np.sin(a)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
array([ &lt;span class=&quot;fl&quot;&gt;0.00000000e+00&lt;/span&gt;,  &lt;span class=&quot;fl&quot;&gt;6.42787610e-01&lt;/span&gt;,  &lt;span class=&quot;fl&quot;&gt;9.84807753e-01&lt;/span&gt;,  &lt;span class=&quot;fl&quot;&gt;8.66025404e-01&lt;/span&gt;,
        &lt;span class=&quot;fl&quot;&gt;3.42020143e-01&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;3.42020143e-01&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;8.66025404e-01&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;9.84807753e-01&lt;/span&gt;,
       &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;6.42787610e-01&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;2.44929360e-16&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵与常量的加减乘除&quot;&gt;矩阵与常量的加减乘除&lt;/h5&gt;
&lt;p&gt;矩阵里的每一个元素有常量进行加减乘除的运算,得到一个新矩阵&lt;/p&gt;
&lt;h5 id=&quot;矩阵与矩阵的加减乘&quot;&gt;矩阵与矩阵的加减乘&lt;/h5&gt;
&lt;p&gt;矩阵与矩阵的加减就是两个矩阵对应位置的元素进行加减&lt;/p&gt;
&lt;p&gt;矩阵与矩阵的乘法分两种情况,一种是&lt;code&gt;a*b&lt;/code&gt;这种的,是两个矩阵对应位置中的元素进行相乘;第二种是&lt;code&gt;a.dot(b)&lt;/code&gt;点乘,是矩阵的乘积,需要a矩阵的列数与b矩阵的行数相等&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;A &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array( [[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],
               [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]] )
B &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array( [[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;],
               [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]] )
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (A&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;B)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (A.dot(B))
               
&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]]
[[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]]   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;求每个元素的开方np.sqrta将每个元素作为指数求e的次方&quot;&gt;求每个元素的开方np.sqrt(a),将每个元素作为指数,求e的次方&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;B &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.exp(B))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.sqrt(B))

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.         &lt;span class=&quot;fl&quot;&gt;2.71828183&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;7.3890561&lt;/span&gt; ]
[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.         &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.         &lt;span class=&quot;fl&quot;&gt;1.41421356&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;将矩阵进行地板除np.floora将矩阵展开成一维矩阵a.ravel矩阵倒置a.t-修改矩阵的维度a.shapexya.reshapexya.resizexy&quot;&gt;将矩阵进行地板除np.floor(a),将矩阵展开成一维矩阵a.ravel(),矩阵倒置a.T, 修改矩阵的维度a.shape=(x,y),a.reshape(x,y),a.resize(x,y)&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.floor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a.ravel())
a.shape &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
a.shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a) 
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a.T)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a.resize((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]]
[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]
[[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]]
[[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]]
&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵的拼接水平方向进行拼接np.hstackab垂直方向拼接np.vstackab&quot;&gt;矩阵的拼接,水平方向进行拼接np.hstack(a,b),垂直方向拼接np.vstack(a,b)&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.floor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.floor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'---'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (b)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'---'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.hstack((a,b)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'---'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.vstack((a,b)))

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.]]
&lt;span class=&quot;op&quot;&gt;---&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]]
&lt;span class=&quot;op&quot;&gt;---&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]]
&lt;span class=&quot;op&quot;&gt;---&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵的切割在行方向进行切割np.hsplitax在列方向进行切割np.vsplitax其中a是需要切割的矩阵x是将矩阵切割成多少份&quot;&gt;矩阵的切割,在行方向进行切割np.hsplit(a,x),在列方向进行切割np.vsplit(a,x),其中a是需要切割的矩阵,x是将矩阵切割成多少份&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;87&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.floor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.hsplit(a,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))

&lt;span class=&quot;co&quot;&gt;#以第4列为分割线,分别切割成3份,其中第4列为单独的一份&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.hsplit(a,(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)))   
a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.floor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.random.random((&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)
np.vsplit(a,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]]
[array([[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.],
       [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.]]), array([[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;.],
       [&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]])]
[array([[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.],
       [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]]), array([[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.],
       [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.]]), array([[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;.],
       [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]])]
[[&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]
 [&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;. &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]]
[array([[&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.]]), array([[&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;.]]), array([[&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.],
        [&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;., &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;.]])]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵的复制浅复制ab深复制ba.copy&quot;&gt;矩阵的复制,浅复制a=b,深复制b=a.copy()&lt;/h5&gt;
&lt;p&gt;浅复制只是将a所指向的对象的引用传递给b,也就是a与b所持有的对象引用是一样的,在修改任何一个矩阵,其他一个都会变&lt;/p&gt;
&lt;p&gt;深复制,是重新生成一个矩阵对象,再将新生成的矩阵对象地址赋值给b变量,修改a或者b其中一个矩阵,不影响其他矩阵&lt;/p&gt;
&lt;h5 id=&quot;返回矩阵每一列或者每一行中的最大值的索引值a.argmaxaixs返回每一行或者每一列的最大最小值a.maxaixs求索引值这个函数往往可以用在先求出特征中符合某个条件的值的行数接着再通过行数得到该样本的数据&quot;&gt;返回矩阵每一列或者每一行中的最大值的索引值a.argmax([aixs]),返回每一行或者每一列的最大/最小值a.max([aixs]),求索引值这个函数往往可以用在先求出特征中符合某个条件的值的行数,接着再通过行数得到该样本的数据&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np
data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.sin(np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)).reshape(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (data)
ind &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.argmax(axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (ind)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (data.&lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.          &lt;span class=&quot;fl&quot;&gt;0.84147098&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.90929743&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.14112001&lt;/span&gt;]
 [&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.7568025&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.95892427&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.2794155&lt;/span&gt;   &lt;span class=&quot;fl&quot;&gt;0.6569866&lt;/span&gt; ]
 [ &lt;span class=&quot;fl&quot;&gt;0.98935825&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.41211849&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.54402111&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.99999021&lt;/span&gt;]
 [&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.53657292&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.42016704&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.99060736&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.65028784&lt;/span&gt;]
 [&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.28790332&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.96139749&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.75098725&lt;/span&gt;  &lt;span class=&quot;fl&quot;&gt;0.14987721&lt;/span&gt;]]
[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
[&lt;span class=&quot;fl&quot;&gt;0.98935825&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.84147098&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.99060736&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.6569866&lt;/span&gt; ]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵的重复拓展tile&quot;&gt;矩阵的重复拓展tile&lt;/h5&gt;
&lt;p&gt;np.tile(a,(x,y))将a矩阵在行方向拓展x次,在列方向拓展y次&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.tile(a, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)) 
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (b)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;]
 [ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;矩阵升序排序np.sortaaxis&quot;&gt;矩阵升序排序np.sort(a,axis)&lt;/h5&gt;
&lt;p&gt;轴参数:axis=0,表示列,axis=1,表示行&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array([[&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (a)
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.sort(a, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (b)

&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[[&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]
[[&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
 [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出矩阵,元素值从小到大的索引位置&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array([&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])
j &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.argsort(a)

&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#输出&lt;/span&gt;
[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 12 Mar 2018 07:00:00 +0000</pubDate>
<dc:creator>骑猪去流浪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flowyourheart/p/numpy-shi-yong-zong-jie.html</dc:identifier>
</item>
<item>
<title>几种常见的排序算法 - 阿姆斯特朗回旋炮</title>
<link>http://www.cnblogs.com/null-qige/p/8522794.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/null-qige/p/8522794.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;&lt;span&gt;冒泡排序（Bubble Sort）：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;　　冒泡排序是一种计算机科学领域的较简单的排序算法。以数字排序为例，冒泡排序让相连的两个数字进行比较，将比较大的数字放在右边。假设最大的数字N在最左边。第一趟排序的时候，N每次和右边的数字做对比，都将比右边的数字大，然后将N一直往右移动只到最右。情形犹如冒泡，因此称为冒泡排序。&lt;/p&gt;
&lt;p&gt;　　以下为冒泡排序的一次范例：&lt;/p&gt;

&lt;table border=&quot;1&quot; frame=&quot;border&quot; align=&quot;center&quot;&gt;&lt;caption&gt;冒泡排序示例&lt;/caption&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;原始数据&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第1次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第2次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第3次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第4次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第5次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　第一趟排序对数组的0、1位置进行排序，10&amp;gt;1,将1放在10之后；10&amp;lt;66，不动；66&amp;gt;20，对换20跟66的位置；66&amp;gt;19;对换66跟19的位置；66&amp;gt;3，对换66跟3的位置。从而获取到了最大值66。&lt;/p&gt;
&lt;p&gt;　　第二趟排序进行跟上面一样的对比，只是66可以不参与比较。获取第二大的数字20&lt;/p&gt;
&lt;p&gt;　　第三趟排序获取第三大的数字19。&lt;/p&gt;
&lt;p&gt;　　。。。。。。&lt;/p&gt;
&lt;p&gt;　　重复步骤，完成数字排序。&lt;/p&gt;
&lt;p&gt;　　以java代码为例，进行编码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; bubbleSorted(Integer[] list) {
        Integer temp;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; list.length; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有进行数据调换，则说明排序完成&lt;/span&gt;
            &lt;span&gt;boolean&lt;/span&gt; didSwap = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; list.length - i - 1; j++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list[j] &amp;gt; list[j + 1&lt;span&gt;]) {
                    temp &lt;/span&gt;=&lt;span&gt; list[j];
                    list[j] &lt;/span&gt;= list[j + 1&lt;span&gt;];
                    list[j &lt;/span&gt;+ 1] =&lt;span&gt; temp;
                    didSwap &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (didSwap == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　分析：冒泡排序每一次都进行了N次迭代，因此插入排序的时间复杂度为O(n²)。它过于简单了，以至于可以毫不费力地写出来。然而当数据量很小的时候它会有些应用的价值，数据量比较小的时候其实也有其他更优的选择，所以一般不会使用冒泡排序。&lt;/p&gt;




&lt;h2&gt;&lt;span&gt;插入排序（insertion Sort）：&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;　　插入排序是一种最简单的排序算法，假设待排序的数组长度为N，插入排序必须进行N-1趟排序。插入排序的第M趟排序，保证数组的0位置开始到M位置处于已排序状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      以下为插入排序的一次范例：&lt;/p&gt;
&lt;table border=&quot;1&quot; frame=&quot;border&quot; align=&quot;center&quot;&gt;&lt;caption&gt;插入排序示例&lt;/caption&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;原始数据&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第1次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第2次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第3次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第4次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第5次排序&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　第一趟排序对数组的0、1位置进行排序，10&amp;gt;1,将1放在10之后。&lt;/p&gt;
&lt;p&gt;　　第二趟排序对数组的0、1、2位置进行排序，1&amp;lt;10&amp;lt;66,不进行数据移动。&lt;/p&gt;
&lt;p&gt;　　第三趟排序对数组的0、1、2、3位置进行排序，1&amp;lt;10&amp;lt;19&amp;lt;20。移动数据。&lt;/p&gt;
&lt;p&gt;　　。。。。。。&lt;/p&gt;
&lt;p&gt;　　重复上述步骤，直到数组中的所有元素排序完成。&lt;/p&gt;

&lt;p&gt;　　以java代码为例，进行编码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insertionSorted(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; list.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             Integer temp =&lt;span&gt; list[i];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; j;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (j = i; j &amp;gt; 0 &amp;amp;&amp;amp; list[j - 1] &amp;gt; temp; j--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 list[j] = list[j - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             list[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　分析：由于插入排序每一次都进行了N次迭代，因此插入排序的时间复杂度为O(n²)。而且在数组的&lt;strong&gt;&lt;span&gt;数量比较小的情况下，插入排序的速度是很可观的&lt;/span&gt;&lt;/strong&gt;。插入排序跟冒泡排序经常会拿起来做比较，看下方数据比较：&lt;/p&gt;
&lt;table border=&quot;1&quot; align=&quot;center&quot;&gt;&lt;caption&gt;冒泡排序和插入排序对比&lt;/caption&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;算法名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最差时间复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均时间复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最优时间复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;稳定性&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冒泡排序&lt;/td&gt;
&lt;td&gt;O(N²)&lt;/td&gt;
&lt;td&gt;O(N²)&lt;/td&gt;
&lt;td&gt;O(N)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;O(N²)&lt;/td&gt;
&lt;td&gt;O(N²)&lt;/td&gt;
&lt;td&gt;O(N)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　两者在数据上的表现非常一致。但是插入排序可能因为循环不成立而退出，从而减少了比较的次数。&lt;strong&gt;&lt;span&gt;因此一般情况下，插入排序是相比冒泡排序更优秀的排序算法，小数据量的情况下一般优先选择插入排序。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;h2&gt;&lt;span&gt;希尔排序（Shellsort）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　希尔排序的名称来自他的发明者DonaldShell，希尔排序是第一批冲破二次时间屏障的算法之一。它的算法思路是通过比较一定距离的元素，逐渐缩减，直到比较距离为1的元素。所以希尔排序也叫缩减增量排序。&lt;/p&gt;
&lt;p&gt;以下为希尔排序的一次范例：&lt;/p&gt;
&lt;table border=&quot;1&quot; frame=&quot;border&quot; cellspacing=&quot;1&quot; align=&quot;center&quot;&gt;&lt;caption&gt;希尔排序示例&lt;/caption&gt;
&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td&gt;原始数据&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;第1次排序(间距为3)&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;第2次排序(间距为2)&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;第3次排序(间距为1)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　第一趟排序间距为3，将10与20比较；1跟19比较；66跟3比较，交换66跟3的位置。&lt;/p&gt;
&lt;p&gt;　　第二趟排序间距为2，将10与3比较，交换10个3的位置；20跟1比较；10跟19比较；66跟20比较；&lt;/p&gt;
&lt;p&gt;　　第三趟排序间距为1，将1跟3比较，交换1跟3的位置；3跟10比较；10跟20比较；20跟19比较，交换19跟20的位置。19再跟10比较；20跟66比较；&lt;/p&gt;

&lt;p&gt;　　以java代码为例，进行编程：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; shellSorted(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; gap = 3; gap &amp;gt; 0; gap--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = gap; i &amp;lt; list.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 Integer temp =&lt;span&gt; list[i];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;&lt;span&gt; j;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (j = i; j - gap &amp;gt;= 0 &amp;amp;&amp;amp; list[j - gap] &amp;gt; temp; j -=&lt;span&gt; gap) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                     list[j] = list[j -&lt;span&gt; gap];
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 list[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　分析：上述代码中，gap为3、2、1，称为增量序列。希尔排序的效率依赖于增量序列的选择。希尔排序的问题在于，增量未必是互素的。&lt;/p&gt;
&lt;p&gt;　　Hibbard提出一个增量序列，称为Hibbard增量序列。Hibbard增量序列形如1、3、7、.....、2^k-1。因此增量之间没有公因子，所以Hibbard增量的最坏运行情形时间为O(N^3/2),平均运行时间为O(N^5/4)。&lt;/p&gt;
&lt;p&gt;　　Sedgewick提出的几种增量序列，最坏运行时间为O(N^4/3),平均运行时间为O（N^7/6）,其中最好的序列为{1,5,19,41,109....},该序列9*4^i-9*2^i+1,或者4^i-3*2^i+1的形式。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;堆排序（Heapsort）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　堆排序是一种使用堆为结构来进行排序的算法。利用二叉堆作为优先队列，进行排序，每次获取堆中最大值或者最小值，放入新序列中。实现了队列的排序。&lt;/p&gt;

&lt;p&gt;堆排序例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180308134508843-1518390783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　第一步获取最大值66；&lt;/p&gt;
&lt;p&gt;　　第二步获取最大值20；&lt;/p&gt;
&lt;p&gt;　　第三部获取最大值19；&lt;/p&gt;
&lt;p&gt; 　　　　。。。。。&lt;/p&gt;
&lt;p&gt;　　　　以上述方式获取新的排序队列。&lt;/p&gt;

&lt;p&gt;　　　　以java代码为例，进行编程：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; leftChild(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; 2 * i + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; perDown(Integer[] list, &lt;span&gt;int&lt;/span&gt; i, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; child;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        Integer temp;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (temp = list[i]; leftChild(i) &amp;lt; n; i =&lt;span&gt; child) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             child =&lt;span&gt; leftChild(i);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (child != n - 1 &amp;amp;&amp;amp; list[child] &amp;lt; list[child + 1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 child++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (temp &amp;lt;&lt;span&gt; list[child]) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 list[i] =&lt;span&gt; list[child];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         list[i] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; heapSort(Integer[] list) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        Integer temp;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = list.length / 2 - 1; i &amp;gt;= 0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            perDown(list, i, list.length);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = list.length - 1; i &amp;gt; 0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             temp = list[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             list[0] =&lt;span&gt; list[i];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             list[i] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             perDown(list, 0&lt;span&gt;, i);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　分析：堆排序种，第一阶段构建堆最多用到2N次比较，第二阶段，第i次deleteMax最多用到2Logi次比较，总共最多2N*LogN-O(N)次比较。堆排序也是一个非常稳定的算法。他的比较平均只比最坏情况指出的情况略少。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;归并排序（mergeSort）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　 归并排序的用法于上面几种排序不同，归并排序使用场景是存在已经排序完成的队列A和队列B，现要将已经排序完成A、B两个队列合并成队列C；归并排序以O(N*logN)的最坏情形时间运行，而使用的比较时间几乎是最优的。它是递归算法的一个好的事例应用。&lt;/p&gt;
&lt;p&gt;　　归并排序例子：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180308154206376-1730738465.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　A、B为已经排序的数组，C为新建数组。A、B数组一开始有个指针指向第一个元素。&lt;/p&gt;
&lt;p&gt;　　　　第一步,比较A、B第一个元素1&amp;lt;2。将1写入C中，A的指针往右移动。&lt;/p&gt;
&lt;p&gt;　　　　第二部，比较2&amp;lt;4，将2写入C中，B的指针往右移动。&lt;/p&gt;
&lt;p&gt;　　　　.....&lt;/p&gt;
&lt;p&gt;　　　　同上，A或者B全部写入后，将另外的数组剩余的数字也写入C中。&lt;/p&gt;

&lt;p&gt;　　　　在单个数组进行排序的时候使用归并排序，则是将单个数组拆分成两个数组，将这两个数组分别排序完成后，再进行归并。&lt;/p&gt;
&lt;p&gt;　　　　以java代码为例，进行编程：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; mergeSort(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Integer[] tempArray = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer[list.length];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         mergeSort(list, tempArray, 0, list.length - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mergeSort(Integer[] list, Integer[] tempArray, &lt;span&gt;int&lt;/span&gt; left, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (left &amp;gt;=&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; center = (left + right) / 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        mergeSort(list, tempArray, left, center);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         mergeSort(list, tempArray, center + 1&lt;span&gt;, right);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         merge(list, tempArray, left, center + 1&lt;span&gt;, right);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; merge(Integer[] list, Integer[] tempArray, &lt;span&gt;int&lt;/span&gt; leftPos, &lt;span&gt;int&lt;/span&gt; rightPos, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; rightEnd) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; leftEnd = rightPos - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tempPos =&lt;span&gt; leftPos;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numberElements = rightEnd - leftPos + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (leftPos &amp;lt;= leftEnd &amp;amp;&amp;amp; rightPos &amp;lt;=&lt;span&gt; rightEnd) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (list[leftPos] &amp;lt;=&lt;span&gt; list[rightPos]) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 tempArray[tempPos++] = list[leftPos++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 tempArray[tempPos++] = list[rightPos++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (leftPos &amp;lt;=&lt;span&gt; leftEnd) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             tempArray[tempPos++] = list[leftPos++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (rightPos &amp;lt;=&lt;span&gt; rightEnd) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             tempArray[tempPos++] = list[rightPos++&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; numberElements; i++, rightEnd--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             list[rightEnd] =&lt;span&gt; tempArray[rightEnd];
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　分析：归并排序的运行时间为O(N*logN)，但是归并排序需要线性附加内存。整个算法在花费了数据拷贝再拷回来这些附加工作，减慢了排序速度。这种拷贝可以通过list和tempArray进行角色交换来避免。在java中归并排序的数据移动是很省时的，因为归并排序只是移动了对象的引用。在java类库中泛型排序使用的就是归并算法。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;快速排序（mergeSort）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　快速排序是实践中的一种快速排序算法，在Java中对&lt;span&gt;基本类型&lt;/span&gt;的排序特别有用，&lt;span&gt;也是面试时候最容易被问道的排序算法&lt;/span&gt;。快排的平均运行时间为O(N*logN),最坏情形为O(N^2),但是经过稍许努力就能让最坏情况很难出现。通过快排和堆排序进行结合，由于堆排序的最坏为O（N*logN）,我们可以对几乎所有的输入都能达到快速排序的快速运行时间。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　快排例子：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180308173322162-640447091.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　第一步，随机获取枢纽元，上例中为19。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　第二步，将其他数字跟19做比较，一组比19小，一组等于19，一组大于19。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　第三步，将大于19和小于19的两组进行排序。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　第四步，按照顺序将他们写入数组中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;　　以java代码为例，进行编程：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; quickSort(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         quickSort(list, 0, list.length - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; quickSort(Integer[] list, &lt;span&gt;int&lt;/span&gt; left, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (left + CUTOFF &amp;lt;=&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Integer pivot =&lt;span&gt; media3(list, left, right);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = left + 1, j = right - 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;=pivot，防止list[i]=list[j]=pivot,进入死循环&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (i&amp;lt;list.length-1&amp;amp;&amp;amp;list[i] &amp;lt;=&lt;span&gt;pivot) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (j&amp;gt;0&amp;amp;&amp;amp;list[j] &amp;gt;=&lt;span&gt; pivot) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i &amp;lt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    swapReferences(list, i, j);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分组完成再把中值拎回来放在中间&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             swapReferences(list, i, right - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止数组中数字一样进入死循环&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(left&amp;lt;i-1&amp;amp;&amp;amp;i-1&amp;lt;&lt;span&gt;right){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 quickSort(list, left, i - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(left&amp;lt;i+1&amp;amp;&amp;amp;i+1&amp;lt;&lt;span&gt;right){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 quickSort(list, i + 1&lt;span&gt;, right);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            insertionSorted(list, left, right);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer media3(Integer[] list, &lt;span&gt;int&lt;/span&gt; left, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; center = (left + right) / 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (list[center] &amp;lt;&lt;span&gt; list[left]) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            swapReferences(list, left, center);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (list[right] &amp;lt;&lt;span&gt; list[left]) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            swapReferences(list, left, right);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (list[right] &amp;lt;&lt;span&gt; list[center]) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            swapReferences(list, center, right);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先把中值拎出去，方便交换操作&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         swapReferences(list, center, right - 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; list[right - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; swapReferences(Integer[] list, &lt;span&gt;int&lt;/span&gt; i, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         Integer temp =&lt;span&gt; list[i];
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         list[i] =&lt;span&gt; list[j];
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         list[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;　　分析：枢纽元的选择对快排的效率有很大影响，随机选取枢纽元是很比较靠谱的做法。比较不好的选取方式选取第一个或者最后一个，上述代码的枢纽元用的三数中值分割法，取数组第一位，中间位，和最后一位，从三个数中去中间值作为枢纽元。因为快排是递归的分隔数组进行排序，当数组被切割得比较小的时候（N&amp;lt;=20），可以使用插入排序来完成，效率会更高。快速排序的最坏情况为O(N^2),最好情况为O(NlogN),平均情况也是O(NlogN)。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;桶排序（bucketSorted）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　当输入的数据由仅小于M的正整数来组成，可以使用桶排序来完成。假设有一个存在一个整数数组，数组中的元素不超过10。对这个数组进行排序，创建一个长度为11的数组count，count中的每个元素都为0，当读入数据为i的时候，count(i)加上1，等全部读取完毕之后根据count数将数组排列出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　桶排序例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180309164124828-1670434559.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　原数组进行迭代，读到的数据在在count数组中对应下标的地方进行+1操作。等原数组迭代完成后，将count数组读出就是排序完成的数组。&lt;/p&gt;

&lt;p&gt;　　　　java代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; bucketSorted(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Integer[] count = &lt;span&gt;new&lt;/span&gt; Integer[10&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; count.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             count[i] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Integer value : list) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             count[value] += 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = 0; k &amp;lt; count.length - 1; k++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 1; j &amp;lt;= count[k]; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 list[i++] =&lt;span&gt; k;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　分析：桶排序比较简单，然而在业务中很少有机会能使用到。当你的数字M上限比较高的时候，可以使用基数排序来实现。算法的用时为O(M+N),M为桶的个数。如果M为O(N)，则总时间为O(N)。&lt;/p&gt;



&lt;h2&gt;&lt;span&gt;基数排序（radix sort）：&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;基数排序又叫做卡片排序，假设我们有大小在0~999之间数据进行排序，如果使用桶排序就不大合适。此时我们就可以使用基数排序，按照个位、十位、百位数进行三次排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基数排序例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180309172425784-1021588430.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　　　第一步，根据个位数排序，排序完成依次读取。&lt;/p&gt;
&lt;p&gt;　　　　第二部，根据十位数排序，排序完成依次读取。&lt;/p&gt;
&lt;p&gt;　　　　第三部，根据百位数排序，排序完成依次读取。&lt;/p&gt;

&lt;p&gt;　　　　由于每一次排序的过程都保留了上一次排序的顺序，所以最后数字能按照大小进行排序。&lt;/p&gt;

&lt;p&gt;　　　　以java代码为例，进行编程：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; radixSort(Integer[] list, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; numberLen) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BUCKETS = 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         ArrayList&amp;lt;Integer&amp;gt;[] buckets = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList[BUCKETS];
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; BUCKETS; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             buckets[i] = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;排序&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; numberLen; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Integer num : list) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 buckets[(&lt;span&gt;int&lt;/span&gt;) ((num / Math.pow(10, i)) % 10&lt;span&gt;)].add(num);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; j = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt; bucket : buckets) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Integer number : bucket) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     list[j++] =&lt;span&gt; number;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                bucket.clear();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　分析：基数排序的运行时间为O(p(N+b)),p是排序的趟数，对应上述代码的numberLen。b为桶的个数，对应上述代码中的BUCKETS。桶排序和基数排序实现了线性时间完成排序。但是桶排序和基数排序的条件相比其他排序苛刻。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;计数基数排序（counting radix sort）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;计数基数排序是基数排序的另外一个实现，他避免使用ArrayList，取而代之的是用一个计数器。当数组扫描的对应的数字的时候，计数器在对应的位置上+1。等所有排序完成之后，根据计算器的数据，将对应的数据翻出来。完成排序。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180312110151304-1757694170.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;　　第一步，遍历原数组，读取到值之后，在对应的计数器上+1，比如读取到5，则在计数器的5上加1。&lt;/p&gt;
&lt;p&gt;　　第二部，将计数器上数据进行叠加，获取对应数字的位置，计数器上1的位置上为0的数量+1的数量，2位置上的数量为0的数量+1的数量+2的数量。&lt;/p&gt;
&lt;p&gt;　　第三部，根据计数器，重排排序数组。&lt;/p&gt;

&lt;p&gt;　　以java代码为例，进行编程：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Integer[] countingSort(Integer[] list) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Integer max =&lt;span&gt; getMax(list);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Integer min =&lt;span&gt; getMin(list);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         Integer[] result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer[list.length];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; k = max - min + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] count = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[k];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; list.length; ++&lt;span&gt;i) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             count[list[i] - min] += 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; count.length; ++&lt;span&gt;i) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             count[i] = count[i] + count[i - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = list.length - 1; i &amp;gt;= 0; --&lt;span&gt;i) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             result[--count[list[i] - min]] = list[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按存取的方式取出c的元素&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Integer getMax(Integer[] list) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; b[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[list.length];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max = list[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i : list) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt;&lt;span&gt; max) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 max =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; max;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Integer getMin(Integer[] list) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; b[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[list.length];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; min = list[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i : list) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;lt;&lt;span&gt; min) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 min =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; min;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　分析：计数排序也可以用来做字符串的排序。但是和桶排序有一个共同的问题是，当要进行排序的数字之间跨度非常大，或者字符串排序中字符串的长度特别长的时候，该算法的优势就没有那么明显，甚至完全消失。&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;外部排序（external sorting）：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;以上的各种算法，都是将要排序的数组放到内存之中进行排序，但是在一些特殊场景下，需要被排序的内容数量太大，而没办法装载入内存的时候，我们就需要用到外部排序算法。下面简单介绍一种在磁盘上进行外部排序的算法，因为在磁带上访问一个元素需要把磁带转到正确的位置上，因此磁带需要被连续访问才能提高效率。我们通过部分排序的方式，在磁带上顺序得读入数据和写出数据来完成排序。假设现在我们有4个磁带，a1,a2,b1,b2，内存一次可以容纳3个数据,见下方模型：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1102674/201803/1102674-20180312143115646-1966097372.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　1、一开始数据并无排序，因为内存每次可以读入3个数据，每三个数据进行一次排序，保存12个数据中，有四队有序数据，b1两组，b2有两组。&lt;/p&gt;
&lt;p&gt;　　　2、使用归并排序的套路，磁盘的磁头分别指向两组数据的开头部分，读入后进行比较，然后按顺序写入a1中。第三组数据和第四组数据写入a2中。&lt;/p&gt;
&lt;p&gt;　　　3、跟上述方式一样，磁头指向a1、a2的开始部分，然后将比较后的的数据写入b1中。&lt;/p&gt;
&lt;p&gt;　　　排序完成。&lt;/p&gt;

&lt;p&gt;　　   分析：上方的模型比较简单，当我们有更多磁带，就可以进行多路合并，即同时比较多组数据来减少数据写入写出的次数。但是通过增加磁带来减少读写次数并不方便，还可以通过多相合并，即通过分配不同磁带的不同顺串的数量来完成上述工作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;　  总结&lt;/span&gt;：&lt;span&gt;排序是最古老，被研究得最完备的问题之一。对于大部分内部排序的应用，不是插入、希尔、归并、就是快排。就主要取决于输入数量的大小和底层环境决定的。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;插入排序&lt;/span&gt;适用于非常少量的输入。中等规模用&lt;span&gt;希尔&lt;/span&gt;是个不错的选择，只要增量序列合适，就能表现优异。&lt;span&gt;归并排序&lt;/span&gt;最坏情况为O(NLogN),但是却需要额外的空间，但是比较的次数几乎是最优的。&lt;span&gt;快排&lt;/span&gt;并不保证提供最坏的时间复杂度，并且编程麻烦。但是几乎可以肯定做到O（N logN），配合&lt;span&gt;堆排序&lt;/span&gt;，就可以保证最坏情况为O（N logN）。&lt;span&gt;&lt;span&gt;&lt;span&gt;基数排序&lt;/span&gt;可以在线性时间内排序，在特定环境下是相对比较的排序法更加实用。而&lt;span&gt;外部排序&lt;/span&gt;则处理数据量大无法完全放入内存的情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 06:55:00 +0000</pubDate>
<dc:creator>阿姆斯特朗回旋炮</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/null-qige/p/8522794.html</dc:identifier>
</item>
<item>
<title>彻底禁用Chrome的“请停用以开发者模式运行的扩展程序”提示 - 我是小茗同学</title>
<link>http://www.cnblogs.com/liuxianan/p/disable-chrome-extension-warning.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuxianan/p/disable-chrome-extension-warning.html</guid>
<description>&lt;p&gt;作为一个前端程序员，难免会有一些专属自己的小扩展，没必要每一个都发到Chrome应用商店去，虽然可以勾选“开发者模式”来运行本地插件，但是每次启动都会有一个烦人的&lt;strong&gt;“请停用以开发者模式运行的扩展程序”&lt;/strong&gt;提示，这个提示有多烦人，接触过的人都知道，启动的时候它不立即提示，等过了几秒钟等你打开某个网页开始执行某些操作时它突然弹出来干扰你的操作，真是苦不堪言！所以总想着如何把它给去掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_142912_913_8332.png&quot; alt=&quot;a_W518xH258_&quot;/&gt;&lt;/p&gt;

&lt;p&gt;网上搜索了一圈，发现主要有3种方法：组策略法，运行批处理法，直接改dll文件法。第一种组策略的据说很早就失效了，我亲测了一下确实没用。另外一个批处理的方法据说也生效了，而且批处理权限太大没敢尝试运行，直接试了第三种方法，一次性成功！下面记录一下解决过程（ps：原文说的不是特别清楚，有些误导人的地方，我这里全部重新截图描述一遍）。&lt;/p&gt;
&lt;h2 id=&quot;修改dll文件法&quot;&gt;修改dll文件法&lt;/h2&gt;
&lt;p&gt;打开Chrome安装目录，找到&lt;code&gt;chrome.dll&lt;/code&gt;文件，用&lt;a href=&quot;http://www.jb51.net/softs/467705.html&quot;&gt;x64dbg&lt;/a&gt;打开，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_123327_116_2500.png&quot; alt=&quot;W521xH347&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双击&lt;code&gt;x96dbg.exe&lt;/code&gt;，然后选择&lt;code&gt;x64dbg&lt;/code&gt;（如果打不开，换&lt;code&gt;x32dbg&lt;/code&gt;打开）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_123705_457_1439.png&quot; alt=&quot;W594xH330&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后连续多次点击&lt;code&gt;运行到用户代码&lt;/code&gt;按钮，直至窗口标题处的模块变成&lt;code&gt;chrome.dll&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_124240_942_1264.png&quot; alt=&quot;W771xH532&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在主面板右键依次选择&lt;code&gt;搜索&lt;/code&gt; -&amp;gt; &lt;code&gt;当前模块&lt;/code&gt; -&amp;gt; &lt;code&gt;字符串&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_124537_616_3647.png&quot; alt=&quot;W580xH327&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后会打开一个搜索界面，等待进度条加载完毕，搜索&lt;code&gt;ExtensionDeveloperModeWarning&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_124758_755_4562.png&quot; alt=&quot;W645xH508&quot;/&gt;&lt;/p&gt;
&lt;p&gt;会搜到2条结果，双击第一个，跳转到反汇编界面，往上翻一点，找到&lt;code&gt;cmp eax,2&lt;/code&gt;（也有可能是&lt;code&gt;cmp eax,3&lt;/code&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_125051_645_8661.png&quot; alt=&quot;W786xH379&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双击打开编辑页面，修改成&lt;code&gt;cmp eax,9&lt;/code&gt;，然后点击确定，注意只需要点击一次确定即可，点击确定后它还是会继续弹出其它行的编辑界面，此时直接关闭对话框即可。：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_125258_344_3025.png&quot; alt=&quot;W648xH166&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改完之后&lt;code&gt;Ctrl+P&lt;/code&gt;导出修改过的dll文件（点击修补文件按钮就是导出dll文件）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201803/20180312_125503_589_4007.png&quot; alt=&quot;W529xH496&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你可以把dll文件导出到其它某个位置，然后把原始chrome.dll文件备份，再把这个修改过的替换，然后重启Chrome，可以发现该死的提示已经没有了。&lt;/p&gt;
&lt;p&gt;以上步骤测试于&lt;code&gt;chrome@64.0.3282.140&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;组策略法&quot;&gt;组策略法&lt;/h2&gt;
&lt;p&gt;经测试已失效：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/ce09321b7d581e2bff858f23.html&quot; class=&quot;uri&quot;&gt;https://jingyan.baidu.com/article/ce09321b7d581e2bff858f23.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;批处理法&quot;&gt;批处理法&lt;/h2&gt;
&lt;p&gt;以下方法未亲测，但据说已失效：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/a493113713/article/details/54917592&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/a493113713/article/details/54917592&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&quot; class=&quot;uri&quot;&gt;https://stackoverflow.com/questions/30287907/how-to-get-rid-of-disable-developer-mode-extensions-pop-up/30361260#30361260&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=695123&amp;amp;page=1&amp;amp;authorid=533705&quot; class=&quot;uri&quot;&gt;https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=695123&amp;amp;page=1&amp;amp;authorid=533705&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 06:43:00 +0000</pubDate>
<dc:creator>我是小茗同学</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuxianan/p/disable-chrome-extension-warning.html</dc:identifier>
</item>
<item>
<title>ssm框架之将数据库的数据导入导出为excel文件 - 小明唯一ID</title>
<link>http://www.cnblogs.com/dingzhaoming/p/8549147.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dingzhaoming/p/8549147.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;利用poi实现数据库的数据导入导出excel文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在这里首先我要将自己遇到的各种问题，以及需求记录下来，做一个备忘，便于以后查看：&lt;/p&gt;
&lt;p&gt;需求：主要实现两个功能，将oracle数据库里的数据导出为excel，同时需要将excel表格的数据导入到数据库&lt;/p&gt;
&lt;p&gt;环境：springmvc + spring + mybatis + jdk1.7 + poi3.8 + easyui + oracle&lt;/p&gt;
&lt;p&gt;在开始的时候，我就各种找ｊａｒ包搭建环境，搭建环境时候所有的ｊａｒ包都没有，只能去各种找，去下载，话不多说，直接上ｊａｒ包，&lt;/p&gt;
&lt;p&gt;然后就是各种配置文件，将配置文件现在直接贴出来：&lt;/p&gt;
&lt;p&gt;《 applicationContext-dao.xml 》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:db.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 驱动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClassName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; url &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用户名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 密码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mapper配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;typeAliasesPackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.sword.dataprocess.pojo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置Mapper扫描器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;basePackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.sword.dataprocess.mapper&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;《 applicationContext-service.xml 》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.sword.dataprocess.service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通知 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:advice &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;txAdvice&quot;&lt;/span&gt;&lt;span&gt; transaction-manager&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:attributes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 传播行为 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;save*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;insert*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;delete*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;update*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;REQUIRED&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;find*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:method &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;get*&quot;&lt;/span&gt;&lt;span&gt; propagation&lt;/span&gt;&lt;span&gt;=&quot;SUPPORTS&quot;&lt;/span&gt;&lt;span&gt; read-only&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tx:attributes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tx:advice&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 切面 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:advisor &lt;/span&gt;&lt;span&gt;advice-ref&lt;/span&gt;&lt;span&gt;=&quot;txAdvice&quot;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;pointcut&lt;/span&gt;&lt;span&gt;=&quot;execution(* com.sword.dataprocess.service*.*.*(..))&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据库的连接信息：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《 db.properties 》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;jdbc.dbType=oracle
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;jdbc.driver=oracle.jdbc.driver.OracleDriver
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;jdbc.url=jdbc:oracle:thin:@远程的连接ip:orcl
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;jdbc.username=xxx
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; jdbc.password=xxx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;日志文件：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《log4j.properties 》： 这里不再贴出&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;springmvc的xml：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《springmvc.xml》：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;xmlns:task&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/task&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/mvc 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.2.xsd 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/aop 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/task
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/task/spring-task-4.2.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载属性文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;context:property-placeholder location=&quot;classpath:resource.properties&quot;/&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置扫描 器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.sword.dataprocess.controller&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置处理器映射器 适配器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置不拦截静态文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/css/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/css/**&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/js/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/js/**&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;/plugins/&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;/plugins/**&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置视图解释器 jsp &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;jspViewResolver&quot;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/jsp/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置文件解析器 上传文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;multipartResolver&quot;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultEncoding&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置上传文件的最大尺寸为5MB &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxUploadSize&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5242880&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 最后最重要的就是web.xml ：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《web.xml 》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;WebApp_ID&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;2.5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DataProcess&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.html&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.htm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default.html&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default.htm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;default.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext-*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置servlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:springmvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;前端主要使用的是easyui里面的datagried :大致页面如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1249653/201803/1249653-20180312142400267-938284414.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;然后就是把jsp页面的代码贴出来：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《index.jsp》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;86&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
&lt;span&gt;  2&lt;/span&gt; pageEncoding=&quot;UTF-8&quot;%&amp;gt;
&lt;span&gt;  3&lt;/span&gt; &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;
&lt;span&gt;  4&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt;  5&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  6&lt;/span&gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;
&lt;span&gt;  7&lt;/span&gt; &amp;lt;title&amp;gt;MRP导入导出&amp;lt;/title&amp;gt;
&lt;span&gt;  8&lt;/span&gt; &amp;lt;!-- 导入jquery核心类库 --&amp;gt;
&lt;span&gt;  9&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot; src=&quot;${pageContext.request.contextPath}/js/jquery-1.8.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 10&lt;/span&gt; &amp;lt;!-- 导入easyui类库 --&amp;gt;
&lt;span&gt; 11&lt;/span&gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${pageContext.request.contextPath}/js/easyui/themes/default/easyui.css&quot;&amp;gt;
&lt;span&gt; 12&lt;/span&gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;    href=&quot;${pageContext.request.contextPath}/js/easyui/themes/icon.css&quot;&amp;gt;
&lt;span&gt; 13&lt;/span&gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;    href=&quot;${pageContext.request.contextPath}/js/easyui/ext/portal.css&quot;&amp;gt;
&lt;span&gt; 14&lt;/span&gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${pageContext.request.contextPath}/css/default.css&quot;&amp;gt;
&lt;span&gt; 15&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;    src=&quot;${pageContext.request.contextPath}/js/easyui/jquery.easyui.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 16&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;    src=&quot;${pageContext.request.contextPath}/js/easyui/ext/jquery.portal.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 17&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;    src=&quot;${pageContext.request.contextPath}/js/easyui/ext/jquery.cookie.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 18&lt;/span&gt; &amp;lt;script src=&quot;${pageContext.request.contextPath}/js/easyui/locale/easyui-lang-zh_CN.js&quot;    type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 19&lt;/span&gt; &amp;lt;script src=&quot;${pageContext.request.contextPath}/js/jquery.serializejson.min.js&quot;    type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 20&lt;/span&gt; &amp;lt;script src=&quot;${pageContext.request.contextPath}/js/jquery.ocupload-1.1.2.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 21&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; doExport() {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; location.href=&quot;${pageContext.request.contextPath}/export&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; doImport() {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; $(&quot;#button-import&quot;&lt;span&gt;).upload({
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; name:'myFile'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; action:'${pageContext.request.contextPath}/import&quot;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; onComplete:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;alert(data);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(data == &quot;success&quot;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; $.messager.alert('友情提示','恭喜你，导入成功'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(data == &quot;error&quot;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; $.messager.alert('友情提示','导入失败，请按正确的模板数据导入！'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; $('#grid').datagrid('load'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;工具栏&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; toolbar =&lt;span&gt; [{
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; id : 'button-import'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; text : '导入'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; iconCls : 'icon-redo'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;handler : doImport
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; id : 'button-export'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; text : '导出'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; iconCls : 'icon-undo'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;handler : doExport
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;} ];
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义列&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; columns =&lt;span&gt; [ [ {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; field : 'p_id'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; title : '料件编号'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; width : 120&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; align : 'center'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; field : 'p_name'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; title : '品名'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; width : 120&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; align : 'center'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; field : 'p_guige'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; title : '规格'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; width : 120&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; align : 'center'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; field : 'p_xdata'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; title : '行动日期'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; width : 120&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; align : 'center'
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; field : 'p_jdate'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; title : '交货日期'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; width : 100&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; align : 'center'
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; field : 'p_descCount'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; title : '排产数量'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; width : 100&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; align : 'center'
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;} ] ];
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt; $(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; daoru fenqu &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先将body隐藏，再显示，不会出现页面刷新效果&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; $(&quot;body&quot;&lt;span&gt;).css({
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; visibility : &quot;visible&quot;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 管理数据表格&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; $('#grid'&lt;span&gt;).datagrid({
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; iconCls : 'icon-forward'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; fit : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; border : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; rownumbers : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; striped : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; pageList : [ 30, 50, 100&lt;span&gt; ],
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; pagination : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;toolbar : toolbar,
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; url : &quot;${pageContext.request.contextPath}/show&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; idField : 'p_id'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;columns : columns,
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; pager = $('#grid').datagrid('getPager'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; get the pager of datagrid&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;pager.pagination({
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; showPageList:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;121&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;122&lt;/span&gt; &amp;lt;body class=&quot;easyui-layout&quot; style=&quot;visibility: hidden;&quot;&amp;gt;
&lt;span&gt;123&lt;/span&gt; &amp;lt;div region=&quot;center&quot; border=&quot;false&quot;&amp;gt;
&lt;span&gt;124&lt;/span&gt; &amp;lt;table id=&quot;grid&quot;&amp;gt;&amp;lt;/table&amp;gt;
&lt;span&gt;125&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;126&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;127&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 接下来就是代码的实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　《controller层》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletOutputStream;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.disk.DiskFileItem;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.context.request.RequestContextHolder;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.context.request.ServletRequestAttributes;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.multipart.MultipartFile;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.multipart.MultipartHttpServletRequest;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.multipart.commons.CommonsMultipartFile;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.pojo.DataProcess;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.service.DataService;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.utils.FileUtils;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataController {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;@Autowired
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataService dataService;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; @RequestMapping(value={&quot;/index&quot;,&quot;/index.html&quot;,&quot;/index.htm&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(){
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; @RequestMapping(&quot;/show&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;@ResponseBody
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; List&amp;lt;DataProcess&amp;gt;&lt;span&gt; show(Model model){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; List&amp;lt;DataProcess&amp;gt; list =&lt;span&gt; dataService.findAll();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; model.addAttribute(&quot;list&quot;&lt;span&gt;, list);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list; 
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件导出&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; @RequestMapping(&quot;/export&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; exportXls(HttpServletRequest request,HttpServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一个流
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 两个头
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下载文件的mime类型&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; response.setContentType(&quot;application/vnd.ms-excel&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 常见的文件 可以省略
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件的打开方式 inline在线打开 attachment&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; String agent = request.getHeader(&quot;User-Agent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; String filename = FileUtils.encodeDownloadFilename(&quot;data.xlsx&quot;&lt;span&gt;, agent);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; response.setHeader(&quot;content-disposition&quot;, &quot;attachment;fileName=&quot;+&lt;span&gt;filename);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; ServletOutputStream outputStream =&lt;span&gt; response.getOutputStream();
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取模板 在当前项目&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; ServletRequestAttributes attributes =&lt;span&gt; (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; String templatePath = request.getServletContext().getRealPath(File.separator)+&quot;temp&quot;+File.separator+&quot;data.xlsx&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;System.out.println(templatePath);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; FileInputStream fileInputStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(templatePath);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;dataService.exportAls(fileInputStream, outputStream);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    文件导入
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接收页面传来的文件&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt; @RequestMapping(&quot;/import&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;@ResponseBody
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String importXlsx(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; System.out.println(111&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; MultipartHttpServletRequest multipartRequest =&lt;span&gt; (MultipartHttpServletRequest) request;
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; MultipartFile myFile = multipartRequest.getFile(&quot;myFile&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过参数名获取指定文件 文件本身 变量名和文件上传时的名称保持一致&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt; String myFileFileName = myFile.getOriginalFilename();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件的名字&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; String myFileContentType = myFile.getContentType(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件的mime类型&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt; CommonsMultipartFile cf=&lt;span&gt; (CommonsMultipartFile)myFile; 
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; DiskFileItem fi =&lt;span&gt; (DiskFileItem)cf.getFileItem();
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; 
&lt;span&gt;83&lt;/span&gt; File f =&lt;span&gt; fi.getStoreLocation();
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; String msg = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; 
&lt;span&gt;86&lt;/span&gt; Boolean    flag =&lt;span&gt; dataService.importXls(f,myFileContentType);
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(flag){
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; msg = &quot;success&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; msg = &quot;error&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;    
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt; 
&lt;span&gt;95&lt;/span&gt; 
&lt;span&gt;96&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;《service层》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletOutputStream;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFRow;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFCell;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFRow;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFSheet;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFWorkbook;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.mapper.DataMapper;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.pojo.DataProcess;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.service.DataService;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DataServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; DataService{
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;@Autowired
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataMapper dataMapper;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; dataCount() {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataMapper.dataCount();
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;@Override 
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; exportAls(FileInputStream fileInputStream, ServletOutputStream outputStream) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Workbook工作簿&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; XSSFWorkbook book = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; book = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XSSFWorkbook(fileInputStream);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 工作表 sheet&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; XSSFSheet sheet = book.getSheetAt(0&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取第二个sheet中的第一行第一列的样式 及边框
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    XSSFCellStyle cellStyle = book.getSheetAt(1).getRow(0).getCell(0).getCellStyle();&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; List&amp;lt;DataProcess&amp;gt; list =&lt;span&gt; dataMapper.findAll();
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;System.out.println(list.size());
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; rowIndex = 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让表格从第二行开始导入&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; XSSFCell cell = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (DataProcess dataProcess : list) {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新建一行&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; XSSFRow row =&lt;span&gt; sheet.createRow(rowIndex);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; cell = row.createCell(0); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个单元格
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    设定已经准备好单元格的样式
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    cell.setCellStyle(cellStyle);&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; String id =&lt;span&gt; dataProcess.getP_id();
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(id != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;cell.setCellValue(id);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt; cell = row.createCell(1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个单元格&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; String name =&lt;span&gt; dataProcess.getP_name();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(name != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;cell.setCellValue(name);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt; cell = row.createCell(2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二个单元格&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; String guige =&lt;span&gt; dataProcess.getP_guige();
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(guige != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;cell.setCellValue(guige);
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt; cell = row.createCell(3); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第三个单元格&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; String xdata =&lt;span&gt; dataProcess.getP_xdata();
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(xdata != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;cell.setCellValue(xdata);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; cell = row.createCell(4); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第四个单元格&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; String jdate =&lt;span&gt; dataProcess.getP_jdate();
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(jdate != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;cell.setCellValue(jdate);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;cell = row.createCell(5); // 第五个单元格
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;Integer sourceCount = dataProcess.getP_sourceCount();
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;if(sourceCount != null){
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;cell.setCellValue(sourceCount);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; cell = row.createCell(6); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第六个单元格&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; Integer descCount =&lt;span&gt; dataProcess.getP_descCount();
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (descCount != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;cell.setCellValue(descCount);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt; rowIndex++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把工作簿放在输出流中&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;book.write(outputStream);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;e.printStackTrace();
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 导入数据&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Boolean importXls(File myFile, String myFileContentType) {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;application/vnd.ms-excel&quot;&lt;span&gt;.equals(myFileContentType)) {
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; System.out.println(123&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取workbook工作簿&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; HSSFWorkbook hssfWorkbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(myFile));
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取sheet 工作表&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; HSSFSheet sheet = hssfWorkbook.getSheetAt(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取工作表的最后一行索引&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; lastRowNum =&lt;span&gt; sheet.getLastRowNum();
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt;= lastRowNum; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; DataProcess dataProcess = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataProcess();
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; HSSFRow row =&lt;span&gt; sheet.getRow(i);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 料件编号 特征码（8个0）行动日期 交货日期 排产数量 版本号（一次导入只用设置一个相同的值就行） 已执行步骤为0
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 料件编号&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; String p_id = row.getCell(0&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;dataProcess.setP_id(p_id);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 行动日期&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; String p_xdata = row.getCell(3&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;dataProcess.setP_xdata(p_xdata);;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 交货日期 &lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; String p_jdate = row.getCell(4&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;dataProcess.setP_jdate(p_jdate);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;//    需求数量
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;Integer p_sourceCount = (int) row.getCell(5).getNumericCellValue();
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;dataProcess.setP_sourceCount(p_sourceCount);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排产数量&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; Integer p_descCount = (&lt;span&gt;int&lt;/span&gt;) row.getCell(5&lt;span&gt;).getNumericCellValue();
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;dataProcess.setP_descCount(p_descCount);
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    版本号（一次导入只用设置一个相同的值就行）&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; SimpleDateFormat tempDate = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd&quot;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; String datetime = tempDate.format(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date()); 
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; String p_version = &quot;MRPVERNO&quot;+&lt;span&gt;datetime;
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;dataProcess.setP_version(p_version);
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向tc_aau_file表插入数据&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;dataMapper.insertdata(dataProcess);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向tc_aat_file表插入数据&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;lastRowNum){
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;dataMapper.insertToAAT(p_version);
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;e.printStackTrace();
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; 
&lt;span&gt;159&lt;/span&gt; } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;&lt;span&gt;.equals(myFileContentType)) {
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取workbook工作簿&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt; XSSFWorkbook xssfWorkbook = &lt;span&gt;new&lt;/span&gt; XSSFWorkbook(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(myFile));
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取sheet 工作表&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt; XSSFSheet sheet = xssfWorkbook.getSheetAt(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取工作表的最后一行索引&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; lastRowNum =&lt;span&gt; sheet.getLastRowNum();
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt;= lastRowNum; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; DataProcess dataProcess = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataProcess();
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; XSSFRow row =&lt;span&gt; sheet.getRow(i);
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 料件编号 特征码（8个0）行动日期 交货日期 排产数量 版本号（一次导入只用设置一个相同的值就行） 已执行步骤为0
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; 
&lt;span&gt;172&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 料件编号&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; String p_id = row.getCell(0&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;dataProcess.setP_id(p_id);
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 行动日期&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt; String p_xdata = row.getCell(3&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;dataProcess.setP_xdata(p_xdata);
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 交货日期 &lt;/span&gt;
&lt;span&gt;179&lt;/span&gt; String p_jdate = row.getCell(4&lt;span&gt;).getStringCellValue();
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;dataProcess.setP_jdate(p_jdate);
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; 
&lt;span&gt;182&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;//    需求数量
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;Integer p_sourceCount = (int) row.getCell(5).getNumericCellValue();
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;dataProcess.setP_sourceCount(p_sourceCount);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排产数量&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; Integer p_descCount = (&lt;span&gt;int&lt;/span&gt;) row.getCell(5&lt;span&gt;).getNumericCellValue();
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;dataProcess.setP_descCount(p_descCount);
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    版本号（一次导入只用设置一个相同的值就行）&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt; SimpleDateFormat tempDate = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd&quot;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; String datetime = tempDate.format(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date()); 
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; String p_version = &quot;MRPVERNO&quot;+&lt;span&gt;datetime;
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;dataProcess.setP_version(p_version);
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; 
&lt;span&gt;194&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向tc_aau_file表插入数据&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &lt;span&gt;dataMapper.insertdata(dataProcess);
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向tc_aat_file表插入数据&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;lastRowNum){
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;dataMapper.insertToAAT(p_version);
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; &lt;span&gt;e.printStackTrace();
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; } &lt;span&gt;//&lt;/span&gt;&lt;span&gt; elseif 结束&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; 
&lt;span&gt;209&lt;/span&gt; 
&lt;span&gt;210&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    查询所有数据&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; List&amp;lt;DataProcess&amp;gt;&lt;span&gt; findAll() {
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; List&amp;lt;DataProcess&amp;gt; result =&lt;span&gt; dataMapper.findAll();
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;《mapper 层》：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Param;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sword.dataprocess.pojo.DataProcess;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; DataMapper {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; dataCount();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; List&amp;lt;DataProcess&amp;gt;&lt;span&gt; findAll();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertdata(@Param(&quot;dataProcess&quot;&lt;span&gt;)DataProcess dataProcess);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insertToAAT(@Param(&quot;p_version&quot;&lt;span&gt;)String p_version);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;《对应的xml：》：　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;com.sword.dataprocess.mapper.DataMapper&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataCount&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;select count(1) from tc_aau_file
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;dataProcess&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;datdProcessMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tc_aau01&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;IMA02&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_guige&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;ima021&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;TC_AAU06&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_xdata&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;TC_AAU07&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_jdate&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;TC_AAU09&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;p_descCount&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;findAll&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;datdProcessMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;select t.TC_AAU01 , 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;i.IMA02 ,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;i.ima021 , 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;t.TC_AAU06 ,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;t.TC_AAU07 ,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;t.TC_AAU09 
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;from SWORD.IMA_FILE i, SWORD.TC_AAU_FILE t where i.ima01 = t.tc_aau01
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertdata&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;dataProcess&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;INSERT INTO SWORD.TC_AAU_FILE (&quot;TC_AAU01&quot;, &quot;TC_AAU03&quot;, &quot;TC_AAU06&quot;, &quot;TC_AAU07&quot;, &quot;TC_AAU09&quot;, &quot;TC_AAU13&quot;, &quot;TC_AAU14&quot;) VALUES (#{dataProcess.p_id}, '00000000', TO_DATE(#{dataProcess.p_xdata}, 'SYYYY-MM-DD HH24:MI:SS'), TO_DATE(#{dataProcess.p_jdate}, 'SYYYY-MM-DD HH24:MI:SS'),#{dataProcess.p_descCount}, #{dataProcess.p_version}, '0')
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertToAAT&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;INSERT INTO SWORD.TC_AAT_FILE (&quot;TC_AAT01&quot;) VALUES (#{p_version}) 
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;用到了一个工具类（fileutils）：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.URLEncoder;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sun.misc.BASE64Encoder;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileUtils {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;* 下载文件时，针对不同浏览器，进行附件名的编码
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;* 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filename
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;* 下载文件名
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; agent
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;* 客户端浏览器
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 编码后的下载附件名 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;* &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String encodeDownloadFilename(String filename, String agent)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (agent.contains(&quot;Firefox&quot;)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 火狐浏览器&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; filename = &quot;=?UTF-8?B?&quot;
&lt;span&gt;21&lt;/span&gt; + &lt;span&gt;new&lt;/span&gt; BASE64Encoder().encode(filename.getBytes(&quot;utf-8&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; + &quot;?=&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; filename = filename.replaceAll(&quot;\r\n&quot;, &quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; IE及其他浏览器&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; filename = URLEncoder.encode(filename, &quot;utf-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; filename = filename.replace(&quot;+&quot;,&quot; &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; filename;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 遇到的问题：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1.在springmvc.xml配置了前端静态资源不拦截之后，在显示前端界面时候，总是报一个错：不能够找到各种静态文件，无论我怎么设置，就是获取不到，而且在项目启动之后，直接访问对应的页面，是可以正常显示的，然后一通过视图解析器就获取不到静态资源，不能够正常显示，最终各种查资料，都显示的是没有配置忽略前端静态资源文件，解决不了问题，最后我处理了很久，终于发现自己犯了一个大错，就是将静态资源的导入时候，写的是相对路径，找不到对应的文件，最终解决办法就是写的动态获取的全路径。&lt;/p&gt;
&lt;p&gt;　　2.遇到的第二个问题：我在导入的时候封装了一个对象，在mapper那里传入了一个对象，但是在对应的xml里面我取不到对象里面的属性值，最终查阅资料，需要在传的对象前面添加一个@param（”xxx“）注解，问题得以解决。&lt;/p&gt;
&lt;p&gt;后续会继续补充，未经允许不得转载，欢迎大家多多指正！&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 06:39:00 +0000</pubDate>
<dc:creator>小明唯一ID</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dingzhaoming/p/8549147.html</dc:identifier>
</item>
<item>
<title>gprecoverseg导致的元数据库问题致使数据库无法启动以及修复 - yxly2008</title>
<link>http://www.cnblogs.com/qiannianyuan/p/greenplum_change_tracking.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qiannianyuan/p/greenplum_change_tracking.html</guid>
<description>&lt;p&gt;在一次执行gprecoverseg后发现数据库无法正常连接，现象如下：&lt;/p&gt;&lt;div readability=&quot;36&quot;&gt;
&lt;pre&gt;
gprecoverseg:mdw-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Starting gprecoverseg with args: -&lt;span&gt;r
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-local Greenplum Version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;postgres (Greenplum Database) 4.3.99.00 build dev&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-master Greenplum Version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PostgreSQL 8.3.23 (Greenplum Database 4.3.99.00 build dev) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4) compiled on Jan 18 2018 15:34:00 (with assert checking)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt;&lt;span&gt; segments are ready to connect
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Unable to connect to database. Retrying &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt;&lt;span&gt; segments are ready to connect
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Unable to connect to database. Retrying &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt;&lt;span&gt; segments are ready to connect
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Unable to connect to database. Retrying &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt;&lt;span&gt; segments are ready to connect
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Unable to connect to database. Retrying &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt;&lt;span&gt; segments are ready to connect
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Unable to connect to database. Retrying &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
gprecoverseg:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[CRITICAL]:-gprecoverseg failed. (Reason=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unable to connect to database and start transaction&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) exiting...
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;36&quot;&gt;
&lt;pre&gt;
gpstart:mdw-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;Commencing parallel primary and mirror segment instance startup, please wait...
..
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;Process results...
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Successful segment starts                                            = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Failed segment starts                                                = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Skipped segment starts (segments are marked down &lt;span&gt;in&lt;/span&gt; configuration)   = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Successfully started &lt;span&gt;8&lt;/span&gt; of &lt;span&gt;8&lt;/span&gt;&lt;span&gt; segment instances
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Starting Master instance mdw-&lt;span&gt;1&lt;/span&gt; directory /home/data/master/gpseg-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Command pg_ctl reports Master mdw-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; instance active
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[WARNING]:-&lt;span&gt;server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; processing the request.

gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;Starting standby master
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Checking &lt;span&gt;if&lt;/span&gt; standby master &lt;span&gt;is&lt;/span&gt; running on host: mdw-&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;in&lt;/span&gt; directory: /home/data/master/gpseg-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpstart:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Check status of database with gpstate utility
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;36&quot;&gt;
&lt;pre&gt;
gpstate:mdw-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;Starting gpstate with args:
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-local Greenplum Version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;postgres (Greenplum Database) 4.3.99.00 build dev&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-master Greenplum Version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PostgreSQL 8.3.23 (Greenplum Database 4.3.99.00 build dev) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4) compiled on Jan 18 2018 15:34:00 (with assert checking)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Obtaining Segment details &lt;span&gt;from&lt;/span&gt;&lt;span&gt; master...
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-Gathering data &lt;span&gt;from&lt;/span&gt;&lt;span&gt; segments...
.
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;Greenplum instance status summary
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Master instance                                           =&lt;span&gt; Active
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Master standby                                            = mdw-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Standby master state                                      =&lt;span&gt; Standby host passive
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total segment instance count &lt;span&gt;from&lt;/span&gt; metadata                = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;   Primary Segment Status
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total primary segments                                    = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total primary segment valid (at master)                   = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total primary segment failures (at master)                = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid files missing              = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid files found                = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid PIDs missing               = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid PIDs found                 = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of /tmp &lt;span&gt;lock&lt;/span&gt; files missing                   = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of /tmp &lt;span&gt;lock&lt;/span&gt; files found                     = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number postmaster processes missing                 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number postmaster processes found                   = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-&lt;span&gt;   Mirror Segment Status
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total mirror segments                                     = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total mirror segment valid (at master)                    = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total mirror segment failures (at master)                 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid files missing              = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid files found                = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid PIDs missing               = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of postmaster.pid PIDs found                 = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of /tmp &lt;span&gt;lock&lt;/span&gt; files missing                   = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number of /tmp &lt;span&gt;lock&lt;/span&gt; files found                     = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number postmaster processes missing                 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number postmaster processes found                   = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[WARNING]:-Total number mirror segments acting &lt;span&gt;as&lt;/span&gt; primary segments   = &lt;span&gt;1&lt;/span&gt;                      &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-   Total number mirror segments acting &lt;span&gt;as&lt;/span&gt; mirror segments    = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
gpstate:mdw&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:gpadmin-[INFO]:-----------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;psql: server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; processing the request.
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;354&quot;&gt;
&lt;pre&gt;
CST,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gpadmin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgres&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p30743,th1692887104,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[local]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,CST,&lt;span&gt;0&lt;/span&gt;,con38,,seg-&lt;span&gt;1&lt;/span&gt;,,,,sx1,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The previous session was reset because its gang was disconnected (session id = 37). The new session id = 38&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cdbgang.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1638&lt;/span&gt;&lt;span&gt;,
CST,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gpadmin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgres&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p30743,th1692887104,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[local]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,CST,&lt;span&gt;0&lt;/span&gt;,con38,,seg-&lt;span&gt;1&lt;/span&gt;,,,,sx1,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Failed to connect to seg0 xx.xx.xx.xx:50000(xx.xx.xx.xx是segment的ip)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cdbgang_async.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;174&lt;/span&gt;&lt;span&gt;,
CST,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gpadmin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgres&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p30743,th1692887104,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[local]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,CST,&lt;span&gt;0&lt;/span&gt;,con39,,seg-&lt;span&gt;1&lt;/span&gt;,,,,sx1,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The previous session was reset because its gang was disconnected (session id = 38). The new session id = 39&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cdbgang.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1638&lt;/span&gt;&lt;span&gt;,
CST,,,p30743,th0,,,CST,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,con39,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PANIC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XX000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unexpected internal error: Master process received signal SIGSEGV&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1    0xa0ce4b postgres StandardHandlerForSigillSigsegvSigbus_OnMainThread + 0x1b2&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;    &lt;span&gt;0x8d376e&lt;/span&gt; postgres CdbProgramErrorHandler + &lt;span&gt;0xf1&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;    &lt;span&gt;0x7fee63a14100&lt;/span&gt; libpthread.so.&lt;span&gt;0&lt;/span&gt; &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0x63a14100&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;    &lt;span&gt;0xaaa718&lt;/span&gt; postgres &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0xaaa718&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;    &lt;span&gt;0xaaa3e4&lt;/span&gt; postgres CdbDispatchCommand + &lt;span&gt;0x35&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;    &lt;span&gt;0xb75719&lt;/span&gt; postgres &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0xb75719&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;    &lt;span&gt;0xb755d4&lt;/span&gt; postgres &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0xb755d4&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;    &lt;span&gt;0xb7524b&lt;/span&gt; postgres &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0xb7524b&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt;    &lt;span&gt;0xb71c51&lt;/span&gt; postgres &amp;lt;symbol not found&amp;gt; + &lt;span&gt;0xb71c51&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;0xb720ae&lt;/span&gt; postgres initTM + &lt;span&gt;0xe2&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;0xb78864&lt;/span&gt; postgres cdb_setup + &lt;span&gt;0x4b&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;0xa1b6e8&lt;/span&gt; postgres InitPostgres + &lt;span&gt;0x9fa&lt;/span&gt;
&lt;span&gt;&quot;
&lt;/span&gt;CST,,,p28893,th1692887104,,,,&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;server process (PID 30743) was terminated by signal 11: Segmentation fault&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;5604&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;terminating any other active server processes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;5284&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;seqserver process (PID 28900) exited with exit code 2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;5584&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ftsprobe process (PID 28901) exited with exit code 2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;5584&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sweeper process (PID 28902) exited with exit code 2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;5584&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BeginResetOfPostmasterAfterChildrenAreShutDown: counter 0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;2171&lt;/span&gt;&lt;span&gt;,
CST,,,p28893,th1692887104,,,,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,,,seg-&lt;span&gt;1&lt;/span&gt;,,,,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LOG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gp_session_id high-water mark is 39&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,,,,,,,&lt;span&gt;0&lt;/span&gt;,,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postmaster.c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;2197&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; 连接到这个segment所在的物理机，查看segment日志，发现这个时间点segment并没有相关的日志信息。&lt;/p&gt;&lt;p&gt;使用gpstate -s 查看各节点的状态，截取其中有问题的一个segment：&lt;/p&gt;&lt;p&gt; 这里看到segment是处于Change Tracking状态的，其中数据库是Stopping状态，sdw-1机器上，端口为40000的Mirror处于down的状态，和配置中的up状态是冲突的。&lt;/p&gt;&lt;p&gt;由于这个时候库是不可连接的，所以通过master only模式直接连接到master，查看源数据库，信息如下：&lt;/p&gt;&lt;p&gt; 这里可以看到源数据库标记的这个segment处于同步状态，然而status的状态都为‘u’，可见，源数据库标记出现了错误！&lt;/p&gt;&lt;p&gt;那么需要通过修复元数据的方式，让greenplum数据库正常启动，首先我们了解下greenplum的primary/mirror的状态：&lt;/p&gt;&lt;p&gt; greenplum检测segment状态的机制称为FTS，所以在主备切换时，Primary活着，Mirror挂了。GP Master探测Primary成功之后，通过Primary返回的状态得知Mirror挂掉了（Mirror挂掉之后，Primary将会探测到，将自己变成ChangeTracking模式），这时候更新Master元信息，进行下一个Segment检测；在这种状态下，会进行自动的primary/mirror的同步，知道了这点，我们就可以修改元数据库，让greenplum顺利的完成同步。&lt;/p&gt;&lt;p&gt;这里我们可以看到数据是先进primary，然后由primary发送数据到mirror上，所以如果发生了primary/mirror的切换，肯定是要将原来的primary(当前的mirror)数据同步到原来的mirror(当前的primary)，知道这一点后，修改源数据表&lt;/p&gt;&lt;p&gt;将dbid为2的mode修改为‘c’，将dbid为6的status修改为'd'，重启数据库即可正常启动，数据进入同步状态&lt;/p&gt;&lt;p&gt;http://mysql.taobao.org/monthly/2016/03/08/?spm=a2c4e.11153959.blogcont51176.4.4c08674ct1QNx1&lt;/p&gt;&lt;p&gt;朋友的星球开通了，传授java基础知识、面试技巧，讨论不限于java的技术问题，有兴趣的朋友可以加入：&lt;/p&gt;</description>
<pubDate>Mon, 12 Mar 2018 06:07:00 +0000</pubDate>
<dc:creator>yxly2008</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qiannianyuan/p/greenplum_change_tracking.html</dc:identifier>
</item>
<item>
<title>SDP（11）：MongoDB-Engine功能实现 - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/8548860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/8548860.html</guid>
<description>&lt;p&gt;&lt;span&gt;  根据上篇关于MongoDB-Engine的功能设计方案，我们将在这篇讨论里进行功能实现和测试。下面是具体的功能实现代码：基本上是直接调用Mongo-scala的对应函数，需要注意的是java类型和scala类型之间的相互转换：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOEngine {
  import MGOContext._
  import MGOCommands._
  import MGOAdmins._

  def mgoExecute[T](ctx: MGOContext)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): Future[T] =&lt;span&gt; {
    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)
    ctx.action match {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; count &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Count(Some(filter),Some(opt)) =&amp;gt;&lt;span&gt;
        coll.count(filter,opt.asInstanceOf[CountOptions])
          .toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(Some(filter),None) =&amp;gt;&lt;span&gt;
        coll.count(filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(None,None) =&amp;gt;&lt;span&gt;
        coll.count().toFuture()
          .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; distinct &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Distict(field,Some(filter)) =&amp;gt;&lt;span&gt;
        coll.distinct(field,filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Distict(field,None) =&amp;gt;&lt;span&gt;
        coll.distinct((field)).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; find &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Find(None,None,optConv,&lt;span&gt;false&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None,None,optConv,&lt;span&gt;true&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),None,optConv,&lt;span&gt;false&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),None,optConv,&lt;span&gt;true&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None,Some(next),optConv,_) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document]()).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document]()).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),Some(next),optConv,_) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document](filter)).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document](filter)).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; aggregate &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Aggregate(pline) =&amp;gt;&lt;span&gt; coll.aggregate(pline).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; mapReduce &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; MapReduce(mf,rf) =&amp;gt;&lt;span&gt; coll.mapReduce(mf,rf).toFuture().asInstanceOf[Future[T]]
       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; insert &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Insert(docs,Some(opt)) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs,opt.asInstanceOf[InsertManyOptions]).toFuture()
          .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head,opt.asInstanceOf[InsertOneOptions]).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Insert(docs,None) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; delete &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Delete(filter,None,onlyOne) =&amp;gt;
         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter).toFuture().asInstanceOf[Future[T]]
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Delete(filter,Some(opt),onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter,opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter,opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; replace &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Replace(filter,replacement,None) =&amp;gt;&lt;span&gt;
         coll.replaceOne(filter,replacement).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Replace(filter,replacement,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.replaceOne(filter,replacement,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; update &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Update(filter,update,None,onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter,update).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter,update).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Update(filter,update,Some(opt),onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter,update,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter,update,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; bulkWrite &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; BulkWrite(commands,None) =&amp;gt;&lt;span&gt;
         coll.bulkWrite(commands).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; BulkWrite(commands,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.bulkWrite(commands,opt.asInstanceOf[BulkWriteOptions]).toFuture().asInstanceOf[Future[T]]

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropCollection(collName) =&amp;gt;&lt;span&gt;
        val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(collName)
        coll.drop().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateCollection(collName,None) =&amp;gt;&lt;span&gt;
        db.createCollection(collName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateCollection(collName,Some(opt)) =&amp;gt;&lt;span&gt;
        db.createCollection(collName,opt.asInstanceOf[CreateCollectionOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; ListCollection(dbName) =&amp;gt;&lt;span&gt;
        client.getDatabase(dbName).listCollections().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create view &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateView(viewName,viewOn,pline,None) =&amp;gt;&lt;span&gt;
        db.createView(viewName,viewOn,pline).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateView(viewName,viewOn,pline,Some(opt)) =&amp;gt;&lt;span&gt;
        db.createView(viewName,viewOn,pline,opt.asInstanceOf[CreateViewOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateIndex(key,None) =&amp;gt;&lt;span&gt;
        coll.createIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateIndex(key,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.createIndex(key,opt.asInstanceOf[IndexOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, None) =&amp;gt;&lt;span&gt;
        coll.dropIndex(indexName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndex(indexName,opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key,None) =&amp;gt;&lt;span&gt;
        coll.dropIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndex(key,opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(None) =&amp;gt;&lt;span&gt;
        coll.dropIndexes().toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndexes(opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
    }

  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：以上所有函数都返回Future[T]结果。下面我们来试运行这些函数，不过先关注一些细节：关于MongoDB的Date,Blob,Array等类型在scala中的使用方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt; type MGODate =&lt;span&gt; java.util.Date
  def mgoDate(yyyy: Int, mm: Int, dd: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd)
    ca.getTime()
  }
  def mgoDateTime(yyyy: Int, mm: Int, dd: Int, hr: Int, min: Int, sec: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd,hr,min,sec)
    ca.getTime()
  }
  def mgoDateTimeNow: MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.getTime
  }


  def mgoDateToString(dt: MGODate, formatString: String): String &lt;/span&gt;=&lt;span&gt; {
    val fmt&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleDateFormat(formatString)
    fmt.format(dt)
  }

  type MGOBlob &lt;/span&gt;=&lt;span&gt; BsonBinary
  type MGOArray &lt;/span&gt;=&lt;span&gt; BsonArray

  def fileToMGOBlob(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; FileToByteArray(fileName,timeOut)

  def mgoBlobToFile(blob: MGOBlob, fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =  ByteArrayToFile(blob.getData,fileName)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后就是MongoDB数据类型的读取帮助函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; def mgoGetStringOrNone(doc: Document, fieldName: String) =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getString(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetIntOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getInteger(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetLonggOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getLong(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDoubleOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDouble(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBoolOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getBoolean(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDateOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDate(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBlobOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOBlob]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetArrayOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOArray]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }

  def mgoArrayToDocumentList(arr: MGOArray): scala.collection.immutable.List[org.bson.BsonDocument] &lt;/span&gt;=&lt;span&gt; {
   (arr.getValues.asScala.toList)
      .asInstanceOf[scala.collection.immutable.List[org.bson.BsonDocument]]
  }

  type MGOFilterResult &lt;/span&gt;= FindObservable[Document] =&amp;gt; FindObservable[Document]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面我们就开始设置试运行环境，从一个全新的collection开始：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import org.mongodb.scala._
import org.mongodb.scala.connection._

import scala.collection.JavaConverters._
import com.mongodb.client.model._

import scala.util._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MongoEngineTest extends App {
import MGOContext._
import MGOEngine._
import MGOHelpers._
import MGOCommands._
import MGOAdmins._

  val clusterSettings &lt;/span&gt;=&lt;span&gt; ClusterSettings.builder()
    .hosts(List(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServerAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).asJava).build()
  val clientSettings &lt;/span&gt;=&lt;span&gt; MongoClientSettings.builder().clusterSettings(clusterSettings).build()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val client =&lt;span&gt; MongoClient(clientSettings)

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val system =&lt;span&gt; ActorSystem()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val mat =&lt;span&gt; ActorMaterializer()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val ec =&lt;span&gt; system.dispatcher

  val ctx &lt;/span&gt;= MGOContext(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).setCommand(
    DropCollection(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  println(getResult(mgoExecute(ctx)))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试运行了DropCollection指令。下面我们试着insert两个document：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  val pic = fileToMGOBlob(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/nobody.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val po1 &lt;/span&gt;=&lt;span&gt; Document (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po18012301&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The smartphone compay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; mgoDate(&lt;span&gt;2017&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urgent, rush order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; pic,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; Seq(
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sony smartphone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;2389.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1239&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ericson smartphone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;897.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30 days&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  )

  val po2 &lt;/span&gt;=&lt;span&gt; Document (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po18022002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The Samsung compay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; mgoDate(&lt;span&gt;2015&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; Seq(
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;samsung galaxy s8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;2300.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;samsung galaxy s7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1897.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30 days&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple iphone7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;6500.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;luxury&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  )

  val optInsert &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; InsertManyOptions().ordered(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
  val ctxInsert &lt;/span&gt;=&lt;span&gt; ctx.setCommand(
    Insert(Seq(po1,po2),Some(optInsert))
  ) println(getResult(mgoExecute(ctxInsert)))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意InsertManyOptions的具体设定方式。 为了配合更方便准确的强类型操作，我们需要进行Document类型到具体应用类型之间的对应转换：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PO (
                  ponum: String,
                  podate: MGODate,
                  vendor: String,
                  remarks: Option[String],
                  podtl: Option[MGOArray],
                  handler: Option[MGOBlob]
                )
  def toPO(doc: Document): PO &lt;/span&gt;=&lt;span&gt; {
    PO(
      ponum &lt;/span&gt;= doc.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      podate &lt;/span&gt;= doc.getDate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      vendor &lt;/span&gt;= doc.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      remarks &lt;/span&gt;= mgoGetStringOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      podtl &lt;/span&gt;= mgoGetArrayOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      handler &lt;/span&gt;= mgoGetBlobOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PODTL(
                    item: String,
                    price: Double,
                    qty: Int,
                    packing: Option[String],
                    payTerm: Option[String]
                  )
  def toPODTL(podtl: Document): PODTL &lt;/span&gt;=&lt;span&gt; {
    PODTL(
      item &lt;/span&gt;= podtl.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      price &lt;/span&gt;= podtl.getDouble(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      qty &lt;/span&gt;= podtl.getInteger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      packing &lt;/span&gt;= mgoGetStringOrNone(podtl,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      payTerm &lt;/span&gt;= mgoGetStringOrNone(podtl,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  }

  def showPO(po: PO) &lt;/span&gt;=&lt;span&gt; {
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po number: ${po.ponum}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po date: ${mgoDateToString(po.podate,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yyyy-MM-dd&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor: ${po.vendor}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (po.remarks !=&lt;span&gt; None)
      println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks: ${po.remarks.get}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    po.podtl match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(barr) =&amp;gt;&lt;span&gt;
        mgoArrayToDocumentList(barr)
         .map { dc &lt;/span&gt;=&amp;gt;&lt;span&gt; toPODTL(dc)}
           .&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { doc: PODTL =&amp;gt;&lt;span&gt;
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==&amp;gt;Item: ${doc.item} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price: ${doc.price} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty: ${doc.qty} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          doc.packing.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(pk =&amp;gt; print(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing: ${pk} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          doc.payTerm.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(pt =&amp;gt; print(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payTerm: ${pt} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          println(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        }
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt;
    }

    po.handler match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(blob) =&amp;gt;&lt;span&gt;
        val fileName &lt;/span&gt;= s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/${po.ponum}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        mgoBlobToFile(blob,fileName)
        println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture saved to ${fileName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no picture provided&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在上面的代码里我们使用了前面提供的MongoDB数据类型读取帮助函数。下面我们测试对poCollection中的Document进行查询，示范包括projection,sort,filter等：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  import org.mongodb.scala.model.Projections._
  import org.mongodb.scala.model.Filters._
  import org.mongodb.scala.model.Sorts._
  val sort: MGOFilterResult &lt;/span&gt;= find =&amp;gt; find.sort(descending(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  val proj: MGOFilterResult &lt;/span&gt;= find =&amp;gt; find.projection(and(include(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),include(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),excludeId()))
  val ctxFind &lt;/span&gt;= ctx.setCommand(Find(andThen=&lt;span&gt;Some(proj)))
  val ctxFindFirst &lt;/span&gt;= ctx.setCommand(Find(firstOnly=&lt;span&gt;true&lt;/span&gt;,converter =&lt;span&gt; Some(toPO _)))
  val ctxFindArrayItem &lt;/span&gt;=&lt;span&gt; ctx.setCommand(
    Find(filter &lt;/span&gt;= Some(equal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl.qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;)), converter =&lt;span&gt; Some(toPO _))
  )
  
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; {
    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[List[Document]](ctxFind).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(docs) =&amp;gt; docs.map(toPO).&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(showPO)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[PO](ctxFindFirst).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(doc) =&amp;gt;&lt;span&gt; showPO(doc)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[List[PO]](ctxFindArrayItem).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(docs) =&amp;gt; docs.&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(showPO)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }
  } &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;因为mgoExecute返回Future结果，所以我们可以用for-comprehension对几个运算进行串联运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是这次示范的源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;build.sbt&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;name := &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;learn-mongo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

version :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

scalaVersion :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.12.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

libraryDependencies :&lt;/span&gt;=&lt;span&gt; Seq(
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.mongodb.scala&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongo-scala-driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.2.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.lightbend.akka&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka-stream-alpakka-mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MGOHelpers.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import org.mongodb.scala._
import scala.concurrent._
import scala.concurrent.duration._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOHelpers {

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DocumentObservable[C](val observable: Observable[Document]) extends ImplicitObservable[Document] {
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; val converter: (Document) =&amp;gt; String = (doc) =&amp;gt;&lt;span&gt; doc.toJson
  }

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GenericObservable[C](val observable: Observable[C]) extends ImplicitObservable[C] {
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; val converter: (C) =&amp;gt; String = (doc) =&amp;gt;&lt;span&gt; doc.toString
  }

  trait ImplicitObservable[C] {
    val observable: Observable[C]
    val converter: (C) &lt;/span&gt;=&amp;gt;&lt;span&gt; String

    def results(): Seq[C] &lt;/span&gt;= Await.result(observable.toFuture(), &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds)
    def headResult() &lt;/span&gt;= Await.result(observable.head(), &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds)
    def printResults(initial: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;): Unit =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (initial.length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) print(initial)
      results().&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(res =&amp;gt;&lt;span&gt; println(converter(res)))
    }
    def printHeadResult(initial: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;): Unit = println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${initial}${converter(headResult())}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }

  def getResult[T](fut: Future[T], timeOut: Duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; second): T =&lt;span&gt; {
      Await.result(fut,timeOut)
  }
  def getResults[T](fut: Future[Iterable[T]], timeOut: Duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; second): Iterable[T] =&lt;span&gt; {
    Await.result(fut,timeOut)
  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FileStreaming.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import java.io.{InputStream, ByteArrayInputStream}
import java.nio.ByteBuffer
import java.nio.file.Paths

import akka.stream.{Materializer}
import akka.stream.scaladsl.{FileIO, StreamConverters}

import scala.concurrent.{Await}
import akka.util._
import scala.concurrent.duration._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; FileStreaming {
  def FileToByteBuffer(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer):ByteBuffer =&lt;span&gt; {
    val fut &lt;/span&gt;= FileIO.fromPath(Paths.&lt;span&gt;get&lt;/span&gt;(fileName)).runFold(ByteString()) { &lt;span&gt;case&lt;/span&gt; (hd, bs) =&amp;gt;&lt;span&gt;
      hd &lt;/span&gt;++&lt;span&gt; bs
    }
    (Await.result(fut, timeOut)).toByteBuffer
  }

  def FileToByteArray(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer): Array[Byte] =&lt;span&gt; {
    val fut &lt;/span&gt;= FileIO.fromPath(Paths.&lt;span&gt;get&lt;/span&gt;(fileName)).runFold(ByteString()) { &lt;span&gt;case&lt;/span&gt; (hd, bs) =&amp;gt;&lt;span&gt;
      hd &lt;/span&gt;++&lt;span&gt; bs
    }
    (Await.result(fut, timeOut)).toArray
  }

  def FileToInputStream(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer): InputStream =&lt;span&gt; {
    val fut &lt;/span&gt;= FileIO.fromPath(Paths.&lt;span&gt;get&lt;/span&gt;(fileName)).runFold(ByteString()) { &lt;span&gt;case&lt;/span&gt; (hd, bs) =&amp;gt;&lt;span&gt;
      hd &lt;/span&gt;++&lt;span&gt; bs
    }
    val buf &lt;/span&gt;=&lt;span&gt; (Await.result(fut, timeOut)).toArray
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayInputStream(buf)
  }

  def ByteBufferToFile(byteBuf: ByteBuffer, fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; {
    val ba &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array[Byte](byteBuf.remaining())
    byteBuf.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;(ba,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,ba.length)
    val baInput &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayInputStream(ba)
    val source &lt;/span&gt;= StreamConverters.fromInputStream(() =&amp;gt; baInput)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ByteBufferInputStream(bytes))&lt;/span&gt;
    source.runWith(FileIO.toPath(Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fileName)))
  }

  def ByteArrayToFile(bytes: Array[Byte], fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; {
    val bb &lt;/span&gt;=&lt;span&gt; ByteBuffer.wrap(bytes)
    val baInput &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayInputStream(bytes)
    val source &lt;/span&gt;= StreamConverters.fromInputStream(() =&amp;gt; baInput) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ByteBufferInputStream(bytes))&lt;/span&gt;
    source.runWith(FileIO.toPath(Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fileName)))
  }

  def InputStreamToFile(&lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;: InputStream, fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; {
    val source &lt;/span&gt;= StreamConverters.fromInputStream(() =&amp;gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt;)
    source.runWith(FileIO.toPath(Paths.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fileName)))
  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MongoEngine.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;175&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import java.text.SimpleDateFormat

import org.bson.conversions.Bson
import org.mongodb.scala._
import org.mongodb.scala.model._
import java.util.Calendar
import scala.collection.JavaConverters._
import FileStreaming._
import akka.stream.Materializer
import org.mongodb.scala.bson.{BsonArray, BsonBinary}

import scala.concurrent._
import scala.concurrent.duration._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOContext {

  trait MGOCommands

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOCommands {

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Count(filter: Option[Bson], options: Option[Any]) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Distict(fieldName: String, filter: Option[Bson]) extends MGOCommands

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  org.mongodb.scala.FindObservable
  import com.mongodb.async.client.FindIterable
  val resultDocType = FindIterable[Document]
  val resultOption = FindObservable(resultDocType)
    .maxScan(...)
  .limit(...)
  .sort(...)
  .project(...) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Find[M](filter: Option[Bson] =&lt;span&gt; None,
                    andThen: Option[FindObservable[Document] &lt;/span&gt;=&amp;gt; FindObservable[Document]]=&lt;span&gt; None,
                    converter: Option[Document &lt;/span&gt;=&amp;gt; M] =&lt;span&gt; None,
                    firstOnly: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Aggregate(pipeLine: Seq[Bson]) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapReduce(mapFunction: String, reduceFunction: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Insert(newdocs: Seq[Document], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Delete(filter: Bson, options: Option[Any] = None, onlyOne: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Replace(filter: Bson, replacement: Document, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Update(filter: Bson, update: Bson, options: Option[Any] = None, onlyOne: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BulkWrite(commands: List[WriteModel[Document]], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOAdmins {

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropCollection(collName: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateCollection(collName: String, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ListCollection(dbName: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateView(viewName: String, viewOn: String, pipeline: Seq[Bson], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateIndex(key: Bson, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropIndexByName(indexName: String, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropIndexByKey(key: Bson, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropAllIndexes(options: Option[Any] =&lt;span&gt; None) extends MGOCommands

  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MGOContext(
                         dbName: String,
                         collName: String,
                         action: MGOCommands &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                       ) {
    ctx &lt;/span&gt;=&amp;gt;&lt;span&gt;
    def setDbName(name: String): MGOContext &lt;/span&gt;= ctx.copy(dbName =&lt;span&gt; name)

    def setCollName(name: String): MGOContext &lt;/span&gt;= ctx.copy(collName =&lt;span&gt; name)

    def setCommand(cmd: MGOCommands): MGOContext &lt;/span&gt;= ctx.copy(action =&lt;span&gt; cmd)
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOContext {
    def apply(db: String, coll: String) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(db, coll)

    def apply(db: String, coll: String, command: MGOCommands) &lt;/span&gt;=
      &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(db, coll, command)

  }

  type MGODate &lt;/span&gt;=&lt;span&gt; java.util.Date
  def mgoDate(yyyy: Int, mm: Int, dd: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd)
    ca.getTime()
  }
  def mgoDateTime(yyyy: Int, mm: Int, dd: Int, hr: Int, min: Int, sec: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd,hr,min,sec)
    ca.getTime()
  }
  def mgoDateTimeNow: MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.getTime
  }


  def mgoDateToString(dt: MGODate, formatString: String): String &lt;/span&gt;=&lt;span&gt; {
    val fmt&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleDateFormat(formatString)
    fmt.format(dt)
  }

  type MGOBlob &lt;/span&gt;=&lt;span&gt; BsonBinary
  type MGOArray &lt;/span&gt;=&lt;span&gt; BsonArray

  def fileToMGOBlob(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; FileToByteArray(fileName,timeOut)

  def mgoBlobToFile(blob: MGOBlob, fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt;  ByteArrayToFile(blob.getData,fileName)

  def mgoGetStringOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getString(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetIntOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getInteger(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetLonggOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getLong(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDoubleOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDouble(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBoolOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getBoolean(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDateOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDate(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBlobOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOBlob]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetArrayOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOArray]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }

  def mgoArrayToDocumentList(arr: MGOArray): scala.collection.immutable.List[org.bson.BsonDocument] &lt;/span&gt;=&lt;span&gt; {
   (arr.getValues.asScala.toList)
      .asInstanceOf[scala.collection.immutable.List[org.bson.BsonDocument]]
  }

  type MGOFilterResult &lt;/span&gt;= FindObservable[Document] =&amp;gt;&lt;span&gt; FindObservable[Document]
}
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOEngine {
  import MGOContext._
  import MGOCommands._
  import MGOAdmins._

  def mgoExecute[T](ctx: MGOContext)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): Future[T] =&lt;span&gt; {
    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)
    ctx.action match {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; count &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Count(Some(filter),Some(opt)) =&amp;gt;&lt;span&gt;
        coll.count(filter,opt.asInstanceOf[CountOptions])
          .toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(Some(filter),None) =&amp;gt;&lt;span&gt;
        coll.count(filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(None,None) =&amp;gt;&lt;span&gt;
        coll.count().toFuture()
          .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; distinct &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Distict(field,Some(filter)) =&amp;gt;&lt;span&gt;
        coll.distinct(field,filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Distict(field,None) =&amp;gt;&lt;span&gt;
        coll.distinct((field)).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; find &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Find(None,None,optConv,&lt;span&gt;false&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None,None,optConv,&lt;span&gt;true&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),None,optConv,&lt;span&gt;false&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),None,optConv,&lt;span&gt;true&lt;/span&gt;) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None,Some(next),optConv,_) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document]()).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document]()).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter),Some(next),optConv,_) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document](filter)).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document](filter)).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; aggregate &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Aggregate(pline) =&amp;gt;&lt;span&gt; coll.aggregate(pline).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; mapReduce &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; MapReduce(mf,rf) =&amp;gt;&lt;span&gt; coll.mapReduce(mf,rf).toFuture().asInstanceOf[Future[T]]
       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; insert &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Insert(docs,Some(opt)) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs,opt.asInstanceOf[InsertManyOptions]).toFuture()
          .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head,opt.asInstanceOf[InsertOneOptions]).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Insert(docs,None) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; delete &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Delete(filter,None,onlyOne) =&amp;gt;
         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter).toFuture().asInstanceOf[Future[T]]
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Delete(filter,Some(opt),onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter,opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter,opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; replace &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Replace(filter,replacement,None) =&amp;gt;&lt;span&gt;
         coll.replaceOne(filter,replacement).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Replace(filter,replacement,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.replaceOne(filter,replacement,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; update &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Update(filter,update,None,onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter,update).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter,update).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Update(filter,update,Some(opt),onlyOne) =&amp;gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter,update,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter,update,opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; bulkWrite &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; BulkWrite(commands,None) =&amp;gt;&lt;span&gt;
         coll.bulkWrite(commands).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; BulkWrite(commands,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.bulkWrite(commands,opt.asInstanceOf[BulkWriteOptions]).toFuture().asInstanceOf[Future[T]]

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropCollection(collName) =&amp;gt;&lt;span&gt;
        val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(collName)
        coll.drop().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateCollection(collName,None) =&amp;gt;&lt;span&gt;
        db.createCollection(collName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateCollection(collName,Some(opt)) =&amp;gt;&lt;span&gt;
        db.createCollection(collName,opt.asInstanceOf[CreateCollectionOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; ListCollection(dbName) =&amp;gt;&lt;span&gt;
        client.getDatabase(dbName).listCollections().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create view &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateView(viewName,viewOn,pline,None) =&amp;gt;&lt;span&gt;
        db.createView(viewName,viewOn,pline).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateView(viewName,viewOn,pline,Some(opt)) =&amp;gt;&lt;span&gt;
        db.createView(viewName,viewOn,pline,opt.asInstanceOf[CreateViewOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateIndex(key,None) =&amp;gt;&lt;span&gt;
        coll.createIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateIndex(key,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.createIndex(key,opt.asInstanceOf[IndexOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, None) =&amp;gt;&lt;span&gt;
        coll.dropIndex(indexName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndex(indexName,opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key,None) =&amp;gt;&lt;span&gt;
        coll.dropIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key,Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndex(key,opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(None) =&amp;gt;&lt;span&gt;
        coll.dropIndexes().toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(Some(opt)) =&amp;gt;&lt;span&gt;
        coll.dropIndexes(opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
    }

  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MongoEngineTest.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import org.mongodb.scala._
import org.mongodb.scala.connection._

import scala.collection.JavaConverters._
import com.mongodb.client.model._

import scala.util._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MongoEngineTest extends App {
import MGOContext._
import MGOEngine._
import MGOHelpers._
import MGOCommands._
import MGOAdmins._

  val clusterSettings &lt;/span&gt;=&lt;span&gt; ClusterSettings.builder()
    .hosts(List(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServerAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).asJava).build()
  val clientSettings &lt;/span&gt;=&lt;span&gt; MongoClientSettings.builder().clusterSettings(clusterSettings).build()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val client =&lt;span&gt; MongoClient(clientSettings)

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val system =&lt;span&gt; ActorSystem()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val mat =&lt;span&gt; ActorMaterializer()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val ec =&lt;span&gt; system.dispatcher

  val ctx &lt;/span&gt;= MGOContext(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).setCommand(
    DropCollection(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  println(getResult(mgoExecute(ctx)))


  val pic &lt;/span&gt;= fileToMGOBlob(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/nobody.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val po1 &lt;/span&gt;=&lt;span&gt; Document (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po18012301&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The smartphone compay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; mgoDate(&lt;span&gt;2017&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urgent, rush order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; pic,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; Seq(
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sony smartphone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;2389.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1239&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ericson smartphone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;897.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30 days&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  )

  val po2 &lt;/span&gt;=&lt;span&gt; Document (
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po18022002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The Samsung compay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; mgoDate(&lt;span&gt;2015&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt;&lt;span&gt; Seq(
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;samsung galaxy s8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;2300.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;samsung galaxy s7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1897.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30 days&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      Document(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple iphone7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;6500.00&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;luxury&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  )

  val optInsert &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; InsertManyOptions().ordered(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
  val ctxInsert &lt;/span&gt;=&lt;span&gt; ctx.setCommand(
    Insert(Seq(po1,po2),Some(optInsert))
  )
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; println(getResult(mgoExecute(ctxInsert)))&lt;/span&gt;

  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PO (
                  ponum: String,
                  podate: MGODate,
                  vendor: String,
                  remarks: Option[String],
                  podtl: Option[MGOArray],
                  handler: Option[MGOBlob]
                )
  def toPO(doc: Document): PO &lt;/span&gt;=&lt;span&gt; {
    PO(
      ponum &lt;/span&gt;= doc.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      podate &lt;/span&gt;= doc.getDate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      vendor &lt;/span&gt;= doc.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      remarks &lt;/span&gt;= mgoGetStringOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      podtl &lt;/span&gt;= mgoGetArrayOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      handler &lt;/span&gt;= mgoGetBlobOrNone(doc,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PODTL(
                    item: String,
                    price: Double,
                    qty: Int,
                    packing: Option[String],
                    payTerm: Option[String]
                  )
  def toPODTL(podtl: Document): PODTL &lt;/span&gt;=&lt;span&gt; {
    PODTL(
      item &lt;/span&gt;= podtl.getString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      price &lt;/span&gt;= podtl.getDouble(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      qty &lt;/span&gt;= podtl.getInteger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      packing &lt;/span&gt;= mgoGetStringOrNone(podtl,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
      payTerm &lt;/span&gt;= mgoGetStringOrNone(podtl,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    )
  }

  def showPO(po: PO) &lt;/span&gt;=&lt;span&gt; {
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po number: ${po.ponum}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;po date: ${mgoDateToString(po.podate,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yyyy-MM-dd&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor: ${po.vendor}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (po.remarks !=&lt;span&gt; None)
      println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remarks: ${po.remarks.get}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    po.podtl match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(barr) =&amp;gt;&lt;span&gt;
        mgoArrayToDocumentList(barr)
         .map { dc &lt;/span&gt;=&amp;gt;&lt;span&gt; toPODTL(dc)}
           .&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { doc: PODTL =&amp;gt;&lt;span&gt;
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==&amp;gt;Item: ${doc.item} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price: ${doc.price} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          print(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qty: ${doc.qty} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          doc.packing.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(pk =&amp;gt; print(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;packing: ${pk} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          doc.payTerm.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(pt =&amp;gt; print(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payTerm: ${pt} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          println(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        }
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt;
    }

    po.handler match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(blob) =&amp;gt;&lt;span&gt;
        val fileName &lt;/span&gt;= s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/${po.ponum}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        mgoBlobToFile(blob,fileName)
        println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture saved to ${fileName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no picture provided&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }

  import org.mongodb.scala.model.Projections._
  import org.mongodb.scala.model.Filters._
  import org.mongodb.scala.model.Sorts._
  val sort: MGOFilterResult &lt;/span&gt;= find =&amp;gt; find.sort(descending(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
  val proj: MGOFilterResult &lt;/span&gt;= find =&amp;gt; find.projection(and(include(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ponum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),include(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),excludeId()))
  val ctxFind &lt;/span&gt;= ctx.setCommand(Find(andThen=&lt;span&gt;Some(proj)))
  val ctxFindFirst &lt;/span&gt;= ctx.setCommand(Find(firstOnly=&lt;span&gt;true&lt;/span&gt;,converter =&lt;span&gt; Some(toPO _)))
  val ctxFindArrayItem &lt;/span&gt;=&lt;span&gt; ctx.setCommand(
    Find(filter &lt;/span&gt;= Some(equal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;podtl.qty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;)), converter =&lt;span&gt; Some(toPO _))
  )

  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; {
    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[List[Document]](ctxFind).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(docs) =&amp;gt; docs.map(toPO).&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(showPO)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[PO](ctxFindFirst).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(doc) =&amp;gt;&lt;span&gt; showPO(doc)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

    _ &lt;/span&gt;&amp;lt;-&lt;span&gt; mgoExecute[List[PO]](ctxFindArrayItem).andThen {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(docs) =&amp;gt; docs.&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(showPO)
        println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(e) =&amp;gt;&lt;span&gt; println(e.getMessage)
    }
  } &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt;()


  scala.io.StdIn.readLine()


  system.terminate()
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 05:49:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/8548860.html</dc:identifier>
</item>
<item>
<title>Autofac高级用法之动态代理 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/8547839.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/8547839.html</guid>
<description>&lt;p&gt;Autofac的DynamicProxy来自老牌的Castle项目。DynamicProxy（以下称为动态代理）起作用主要是为我们的类生成一个代理类，这个代理类可以在我们调用原本类的方法之前，调用拦截器以实现AOP。那么动态代理是怎么实现的呢，这里简单一下提一下，这里主要是用了emit技术动态生成IL，相当于在内存中用IL给我们编写了一个Class。&lt;/p&gt;

&lt;p&gt;我们新建一个类&lt;code&gt;Cat&lt;/code&gt;，并实现&lt;code&gt;ICat&lt;/code&gt;接口&lt;/p&gt;
&lt;p&gt;ICat:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface ICat
{
    void Eat();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cat:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class Cat:ICat
{
    public void Eat()
    {
        Console.WriteLine(&quot;猫在吃东西&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然然后我们为其创建一个代理类，&lt;code&gt;CatProxy&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class CatProxy:ICat
{
    private readonly ICat _cat;
    public CatProxy(ICat cat)
    {
        _cat = cat;
    }
    public void Eat()
    {
        Console.WriteLine(&quot;猫吃东西之前&quot;);
        _cat.Eat();
        Console.WriteLine(&quot;猫吃东西之后&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在我们调用一下试试效果：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class Progarm
{
    static void Main(string[] args)
    {
        ICat icat=new Cat();

        var catProxy=new CatProxy(icat);

        catProxy.Eat();

        Console.Read();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201803/668104-20180312102227177-147733345.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看见，我们已经成功的通过代理实现在猫吃东西之前和之后执行我们定义的代码，这就是一个简单的AOP，这个称之为静态代理，需要我们手动编写代理类，这个是十分耗费时间的，那么有什么方法帮我们自动生成代理呢，当然有了，接下来介绍我们的动态代理。&lt;/p&gt;

&lt;p&gt;我在前言中已经简单提了下动态代理的实现原理，我们这里就只说说怎么用，而不去讨论怎么实现了（烧脑阔）。我们这里使用Autofac的DynamicProxy。&lt;/p&gt;
&lt;p&gt;我们依然使用前一章节所用的控制台项目，通过nuget安装两个Package：&lt;code&gt;Autofac&lt;/code&gt;、&lt;code&gt;Autofac.Extras.DynamicProxy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201803/668104-20180312103033245-1313320944.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先我们需要定义一个拦截器：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class CatInterceptor:IInterceptor
{
    public void Intercept(IInvocation invocation)
    {
        Console.WriteLine(&quot;猫吃东西之前&quot;);
        invocation.Proceed();
        Console.WriteLine(&quot;猫吃东西之后&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在Autofac容器中注册我们的拦截器和类型:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{

    var builder = new ContainerBuilder();

    builder.RegisterType&amp;lt;CatInterceptor&amp;gt;();//注册拦截器
    builder.RegisterType&amp;lt;Cat&amp;gt;().As&amp;lt;ICat&amp;gt;().InterceptedBy(typeof(CatInterceptor)).EnableInterfaceInterceptors();//注册Cat并为其添加拦截器

    var container = builder.Build();

    var cat = container.Resolve&amp;lt;ICat&amp;gt;();

    cat.Eat();

    Console.Read();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们运行一下看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201803/668104-20180312105904918-1211648291.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过运行我们可以看出，和上一章节的效果一样，但是我们并不需要取手动定义我们的代理类，而是通过组件动态生成了。&lt;/p&gt;
&lt;p&gt;关于这个拦截器，我们还可以通过Attribute的方式绑定到我们的具体类型，而不需要在注册到容器的时候动态指定。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[Intercept(typeof(CatInterceptor))]
public class Cat:ICat
{
    public void Eat()
    {
        Console.WriteLine(&quot;猫在吃东西&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注册的代码可改为:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;builder.RegisterType&amp;lt;Cat&amp;gt;().As&amp;lt;ICat&amp;gt;().EnableInterfaceInterceptors();&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;我们前面说了，动态代理是动态生成一个代理类，那么我们可以&lt;strong&gt;动态&lt;/strong&gt;的为这个代理类添加一个接口吗，答案当然是可以。&lt;/p&gt;
&lt;p&gt;现在我们定义一个&lt;code&gt;铲屎官&lt;/code&gt;类:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class CatOwner
{
        
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出我们的&lt;code&gt;铲屎官&lt;/code&gt;类什么都没有，如果我们的铲屎官想喂猫吃东西怎么办，按照我们传统的思维当然是实例化一个cat传入我们的&lt;code&gt;CatOwner&lt;/code&gt;，但是我们可以用我们的DynamicProxy动态生成。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var builder = new ContainerBuilder();

builder.RegisterType&amp;lt;CatInterceptor&amp;gt;();//注册拦截器
builder.RegisterType&amp;lt;Cat&amp;gt;().As&amp;lt;ICat&amp;gt;();//注册Cat
builder.RegisterType&amp;lt;CatOwner&amp;gt;().InterceptedBy(typeof(CatInterceptor))
    .EnableClassInterceptors(ProxyGenerationOptions.Default, additionalInterfaces: typeof(ICat));//注册CatOwner并为其添加拦截器和接口
var container = builder.Build();

var cat = container.Resolve&amp;lt;CatOwner&amp;gt;();//获取CatOwner的代理类

cat.GetType().GetMethod(&quot;Eat&quot;).Invoke(cat, null);//因为我们的代理类添加了ICat接口，所以我们可以通过反射获取代理类的Eat方法来执行

Console.Read();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们上面的代码是肯定不能运行的，因为我们的代理类虽然添加了ICat接口，但是却没有具体实现它，所以抛出为卫视现异常：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201803/668104-20180312111924997-1134175138.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用AOP在我们执行代理类的Eat方法之前去调用我们的具体实现&lt;code&gt;Cat&lt;/code&gt;的Eat方法，我们修改一下拦截器。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class CatInterceptor:IInterceptor
{
    private readonly ICat _cat;

    /// &amp;lt;summary&amp;gt;
    /// 通过依赖注入 注入ICat的具体实现
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&quot;cat&quot;&amp;gt;&amp;lt;/param&amp;gt;
    public CatInterceptor(ICat cat)
    {
        _cat = cat;
    }
    public void Intercept(IInvocation invocation)
    {
        Console.WriteLine(&quot;喂猫吃东西&quot;);

        invocation.Method.Invoke(_cat, invocation.Arguments);//调用Cat的指定方法
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看一下运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201803/668104-20180312112323929-1941330560.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看见我们从一个什么都没有的&lt;code&gt;CatOwner&lt;/code&gt;类，来为其调用了一个具体的猫吃东西的行为，是不是感觉很神奇!&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;有人可能会说，一个铲屎官为什么要去实现一个ICat接口。我想说纯属胡编乱造，只是想阐明这个用法，这个意思。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用过ABP框架的人都应该知道其有个技术名为DynamicWebapi，非常方便可以动态帮我们的应用逻辑层生成webapi，而不需要我们手动去编写webapi来发布。这里据用到了上面所说的技术，动态生成Wabpi Controller，然后为其添加应用逻辑接口，在调用具体的应用逻辑方法时（Action）通过AOP拦截调用具体应用逻辑实现来完成。&lt;/p&gt;
&lt;p&gt;Demo:&lt;a href=&quot;https://github.com/stulzq/BlogDemos/tree/master/AutofacDynamicProxyTest&quot; class=&quot;uri&quot;&gt;https://github.com/stulzq/BlogDemos/tree/master/AutofacDynamicProxyTest&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 03:43:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/8547839.html</dc:identifier>
</item>
<item>
<title>【JDK1.8】JUC.Lock综述 - joemsu</title>
<link>http://www.cnblogs.com/joemsu/p/8543449.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joemsu/p/8543449.html</guid>
<description>&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;前段时间结束了jdk1.8集合框架的源码阅读，在过年的这段时间里，一直在准备JUC(java.util.concurrent)的源码阅读。平时接触的并发场景开发并不很多，但是有网络的地方，就存在并发，所以想找几本书阅读深入一下，看到网上推荐较多的两本书《Java并发编程实战》和《Java多线程编程核心技术》。看了两书的优缺点后，笔者选择了先看后者，据说代码例子较多，书到手后，看完后的印象就是对并发的关键字、几个常见类的api进行了介绍，内容挺早以前，讲的也是不是很深，对Java SE5新加的类介绍很少，只能说对于刚接触并发编程的人来说，还是值得一看的。&lt;/p&gt;

&lt;h2 id=&quot;二java.util.concurrent.locks图概览&quot;&gt;二、java.util.concurrent.locks图概览&lt;/h2&gt;
&lt;p&gt;在JUC的包里面，有一个包专门用于存放锁相关的类，笔者将其中的大部分内容整理进了下面UML中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1256203/201803/1256203-20180311110002993-1339634772.png&quot; alt=&quot;lock_structrue&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体关系大家可以去看看UML的关系图，顺便介绍个生成UML的工具：&lt;a href=&quot;http://plantuml.com/&quot;&gt;PlantUml&lt;/a&gt;，UML界的markdown，真的挺好用。&lt;/p&gt;
&lt;p&gt;图中要提的是：圆圈里面有个+的关系，代表内部类，笔者为了图片看的更简洁，把&lt;code&gt;ReentrantLock&lt;/code&gt;、&lt;code&gt;Semaphore&lt;/code&gt;等类中的内部类&lt;code&gt;Sync&lt;/code&gt;合到了一起，其实它们是一个类，只不过都叫这个名字。&lt;/p&gt;
&lt;p&gt;从图中我们可以看到，关系较为紧密的是AbstractQueuedSynchronizer抽象类，而它则直接依赖了LockSupport这个类，笔者将在后面先分析这个类的源码。&lt;/p&gt;
&lt;h2 id=&quot;三基础接口的源码解析&quot;&gt;三、基础接口的源码解析&lt;/h2&gt;
&lt;h3 id=&quot;lock接口&quot;&gt;3.1 Lock接口&lt;/h3&gt;
&lt;p&gt;在JDK1.5以后，添加了Lock接口，它用于实现与Synchronized关键字相同的锁操作，来实现多个线程控制对共享资源的访问。但是能提供更加灵活的结构，可能具有完全不同的属性，并且可能支持多个相关的Condition对象。基本用法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Lock l = ...;
l.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;// 访问被锁保护的资源&lt;/span&gt;
} &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
    l.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们来简单看一下它下面的具体内容：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Lock {
    &lt;span class=&quot;co&quot;&gt;// 获得锁资源&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 尝试获得锁，如果当前线程被调用了interrupted则中断，并抛出异常，否则就获得锁&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;lockInterruptibly&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 判断能否获得锁，如果能获得，则获得锁，并返回true(此时已经获得了锁)&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;tryLock&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 保持给定的等待时间，如果期间能拿到锁，则获得锁，同样如果期间被中断，则抛异常&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;tryLock&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; time, TimeUnit unit) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 释放锁&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 返回与此Lock对象绑定Condition实例&lt;/span&gt;
    Condition &lt;span class=&quot;fu&quot;&gt;newCondition&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，tryLock只会尝试一次，如果返回false，则走false的流程，不会一直让线程一直等待。&lt;/p&gt;

&lt;h3 id=&quot;condition接口&quot;&gt;3.2 Condition接口&lt;/h3&gt;
&lt;p&gt;Condition与Lock要结合使用，使用Condition可以用来实现&lt;code&gt;wait()&lt;/code&gt;和&lt;code&gt;notify()/notifyAll()&lt;/code&gt;类似的等待/通知模式。与Object对象里不同的是，Condition更加灵活，可以在一个Lock对象里创建多个Condition实例，有选择的进行线程通知，在线程调度上更加灵活。使用Condition注释上的例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BoundedBuffer {
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Lock lock = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ReentrantLock();
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Condition notFull  = lock.&lt;span class=&quot;fu&quot;&gt;newCondition&lt;/span&gt;(); 
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Condition notEmpty = lock.&lt;span class=&quot;fu&quot;&gt;newCondition&lt;/span&gt;(); 

    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] items = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;];
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; putptr, takeptr, count;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(Object x) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException {
        lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 当count等于数组的大小时，当前线程等待，直到notFull通知，再进行生产&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (count == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;)
                notFull.&lt;span class=&quot;fu&quot;&gt;await&lt;/span&gt;();
            items[putptr] = x;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++putptr == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) putptr = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
            ++count;
            notEmpty.&lt;span class=&quot;fu&quot;&gt;signal&lt;/span&gt;();
        } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;take&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException {
        lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 当count为0，进入等待，直到notEmpty通知，进行消费。&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (count == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
                notEmpty.&lt;span class=&quot;fu&quot;&gt;await&lt;/span&gt;();
            Object x = items[takeptr];
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++takeptr == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) takeptr = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
            --count;
            notFull.&lt;span class=&quot;fu&quot;&gt;signal&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; x;
        } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过多个线程来调用put和take方法，来模拟生产者和消费者。&lt;br/&gt;我们来换成常规的wait/notify的实现方式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BoundedBuffer {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object lock;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BoundedBuffer&lt;/span&gt;(Object lock) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt; = lock;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(Object x) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;synchronized&lt;/span&gt; (items) {
                &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (count == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) {
                    items.&lt;span class=&quot;fu&quot;&gt;wait&lt;/span&gt;();
                }
                items[putptr] = x;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++putptr == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) putptr = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                ++count;
                &lt;span class=&quot;co&quot;&gt;// items.notify();&lt;/span&gt;
                items.&lt;span class=&quot;fu&quot;&gt;notifyAll&lt;/span&gt;();
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;take&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;synchronized&lt;/span&gt; (items) {
                &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (count == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                    items.&lt;span class=&quot;fu&quot;&gt;wait&lt;/span&gt;();
                }
                Object x = items[takeptr];
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++takeptr == items.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) takeptr = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                --count;
                &lt;span class=&quot;co&quot;&gt;// items.notify();&lt;/span&gt;
                items.&lt;span class=&quot;fu&quot;&gt;notifyAll&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; x;
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果将&lt;code&gt;items.notifyAll()&lt;/code&gt;换成&lt;code&gt;items.notify()&lt;/code&gt;，在多生产者和多消费者模式情况下，可能出现take唤醒了take的情况，导致生产者在等待消费者消费，而消费者等待生产者生产，最终导致程序无限等待，而用notifyAll()，则唤醒所有的生产者和消费者，不像Condition可以选择性的通知。下面我们来看一下它的源码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Condition {
    &lt;span class=&quot;co&quot;&gt;// 让当前线程等待，直到被通知或者被中断&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;await&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 与前者的区别是，当等待过程中被中断时，仍会继续等待，直到被唤醒，才会设置中断状态&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;awaitUninterruptibly&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 让当前线程等待，直到它被告知或中断，或指定的等待时间已经过。&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;await&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; time, TimeUnit unit) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 与上面的类似，让当前线程等待，不过时间单位是纳秒&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;awaitNanos&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; nanosTimeout) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 让当前线程等待到确切的指定时间，而不是时长&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;awaitUntil&lt;/span&gt;(Date deadline) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; InterruptedException;
    &lt;span class=&quot;co&quot;&gt;// 唤醒一个等待当前condition的线程，有多个则随机选一个&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;signal&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 唤醒所有等待当前condition的线程&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;signalAll&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;readwritelock接口&quot;&gt;3.3 ReadWriteLock接口&lt;/h3&gt;
&lt;p&gt;读写锁与一般的互斥锁不同，它分为读锁和写锁，在同一时间里，可以有多个线程获取读锁来进行共享资源的访问。如果此时有线程获取了写锁，那么读锁的线程将等待，直到写锁释放掉，才能进行共享资源访问。简单来说就是读锁与写锁互斥。&lt;/p&gt;
&lt;p&gt;读写锁比互斥锁允许对于共享数据更大程度的并发。每次只能有一个写线程，但是同时可以有多个线程并发地读数据。ReadWriteLock适用于读多写少的并发情况。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; ReadWriteLock {
    &lt;span class=&quot;co&quot;&gt;// 返回写锁&lt;/span&gt;
    Lock &lt;span class=&quot;fu&quot;&gt;writeLock&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 返回读锁&lt;/span&gt;
    Lock &lt;span class=&quot;fu&quot;&gt;readLock&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再看一下源码里提供的示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CachedData {
    Object data;
    &lt;span class=&quot;kw&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; cacheValid;
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ReentrantReadWriteLock rwl = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ReentrantReadWriteLock();

    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;processCachedData&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 获得写锁&lt;/span&gt;
        rwl.&lt;span class=&quot;fu&quot;&gt;readLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 缓存无效，则重写数据&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!cacheValid) {
            &lt;span class=&quot;co&quot;&gt;// 在获得写锁之前，必须先释放读锁&lt;/span&gt;
            rwl.&lt;span class=&quot;fu&quot;&gt;readLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
            rwl.&lt;span class=&quot;fu&quot;&gt;writeLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;// 重写检查一次，因为其他线程可能在这段时间里获得了写锁，并且修改了状态&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!cacheValid) {
                    data = ...
                        cacheValid = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
                }
                &lt;span class=&quot;co&quot;&gt;// 在释放写锁之前，通过获取读锁来降级。&lt;/span&gt;
                rwl.&lt;span class=&quot;fu&quot;&gt;readLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
            } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;// 释放写锁&lt;/span&gt;
                rwl.&lt;span class=&quot;fu&quot;&gt;writeLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
            }
        }
        &lt;span class=&quot;co&quot;&gt;// cacheValid，直接获取数据，并释放读锁&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;fu&quot;&gt;use&lt;/span&gt;(data);
        } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            rwl.&lt;span class=&quot;fu&quot;&gt;readLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ReentrantReadWriteLock中，读锁可以获取写锁，而返过来，写锁不能获得读锁，所以在上面代码中，要先释放写锁，再获取读锁，具体的源码分析后面再细说。&lt;/p&gt;

&lt;h2 id=&quot;四总结&quot;&gt;四、总结&lt;/h2&gt;
&lt;p&gt;开了个新坑，边看边学。最后谢谢各位园友观看，如果有描述不对的地方欢迎指正，与大家共同进步！&lt;/p&gt;


</description>
<pubDate>Mon, 12 Mar 2018 02:50:00 +0000</pubDate>
<dc:creator>joemsu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joemsu/p/8543449.html</dc:identifier>
</item>
</channel>
</rss>