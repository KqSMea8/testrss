<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Git（二）Git几个区的关系与Git和GitHub的关联 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/8099185.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/8099185.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　前面只是大概的介绍了一点基础的东西，接下来会更加深入的去了解一下Git。&lt;/p&gt;
&lt;h2&gt;一、Git的工作区、暂存区和版本库之间的区别和联系&lt;/h2&gt;
&lt;p&gt;　　1）工作区&lt;/p&gt;
&lt;p&gt;　　　　在PC中能看得到的&lt;span&gt;创建的一个管理仓库的目录。比如目录下GitTest里的文件&lt;/span&gt;(.git隐藏目录版本库除外)。&lt;span&gt;或者以后需要再新建的目录文件等等都属于工作区范畴&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224205039303-1967924303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）版本库（repository）　&lt;/p&gt;
&lt;p&gt;　　　　工作区&lt;span&gt;有一个隐藏目录.git，这个不算工作区，而是Git的版本库&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　Git的版本库里&lt;span&gt;存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区&lt;/span&gt;，还有&lt;span&gt;Git为我们自动创建的第一个分支master，以及指向master的一个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　指针叫HEAD。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　3）联系&lt;/p&gt;
&lt;p&gt;　　　　在初始化git版本库之后会生成一个隐藏的文件 .git ，可以将该文件理解为git的版本库 repository，而我们自己建立的项目文件夹即工作区 working directory ,&lt;/p&gt;
&lt;p&gt;　　　　在.git 文件夹里面还有很多文件，其中有&lt;span&gt;一个index 文件 就是暂存区也可以叫做 stage&lt;/span&gt; ,git还为我们自动生成了一个分支master以及指向该分支的指针head。　　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224205725287-1447668820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　从图中可以看出来&lt;span&gt;respository包括分支master和stage&lt;/span&gt;, working diretory 可以理解为&lt;span&gt;我们打开开发环境如eclipse，里面的内容即工作区的内容，在工作区里面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　有的代码以及配置文件等我们需要提交到版本库里面，最终是到了分支master上面，暂存区只是一个临时保存修改文件的地方&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;　　　　前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：&lt;/p&gt;
&lt;p&gt;　　　　　　第一步是：用git add把文件添加进去，实际上就是把文件修改添加到暂存区；&lt;/p&gt;
&lt;p&gt;　　　　　　第二步是：用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。&lt;/p&gt;
&lt;p&gt;　　　　因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。&lt;/p&gt;
&lt;p&gt;　　4）编写一个Demo&lt;/p&gt;
&lt;p&gt;　　　　我们在lance.txt再添加一行内容为eeeeee，接着在目录下新建一个文件为fosun.txt 内容为test，我们先用命令 git status来查看下状态，如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224210747490-973426237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　现在我们先使用git add . 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224210846537-1683737432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　接着我们可以使用git commit一次性提交到分支上，如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224211014209-910284701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　注意：当在工作去修改了文件或者新建了文件没有加入到暂存区去时，使用git status显示的是红色的。加入到之后是绿色的了。&lt;/p&gt;
&lt;h2&gt;二、远程仓库&lt;/h2&gt;
&lt;h3&gt;2.1、本地与远程GitHub的配置&lt;/h3&gt;
&lt;p&gt;　　在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要进行简单的设置：&lt;/p&gt;
&lt;p&gt;　　　　1）创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，&lt;/p&gt;
&lt;p&gt;　　　　　　如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　ssh-keygen  -t rsa –C “youremail@example.com”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224213130318-704214175.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。&lt;/p&gt;
&lt;p&gt;　　　　2）登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224213346553-1280678958.png&quot; alt=&quot;&quot; width=&quot;972&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　然后&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224213617928-2145320307.png&quot; alt=&quot;&quot; width=&quot;795&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　然后&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224213825771-853688438.png&quot; alt=&quot;&quot; width=&quot;802&quot; height=&quot;339&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　点击 Add Key，你就应该可以看到已经添加的key。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224213930646-81988955.png&quot; alt=&quot;&quot; width=&quot;781&quot; height=&quot;427&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.2、添加远程库&lt;/h3&gt;
&lt;p&gt;　　1）需求&lt;/p&gt;
&lt;p&gt;　　　　我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，&lt;/p&gt;
&lt;p&gt;　　　　这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。&lt;/p&gt;
&lt;p&gt;　　2）首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224214850568-283850948.png&quot; alt=&quot;&quot; width=&quot;776&quot; height=&quot;235&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　然后&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224215025209-2053315340.png&quot; alt=&quot;&quot; width=&quot;593&quot; height=&quot;459&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在Repository name填入&lt;code&gt;GitTest&lt;/code&gt;，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224215204896-562898294.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;487&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　目前，在GitHub上的这个&lt;code&gt;testgit&lt;/code&gt;仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，&lt;/p&gt;
&lt;p&gt;　　　　然后，把本地仓库的内容推送到GitHub仓库。&lt;/p&gt;
&lt;p&gt;　　　　现在，我们根据GitHub的提示，在本地的GitTest仓库下运行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　git remote add origin https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/zyh2017/GitTest.git&lt;br/&gt;　　　　git push -u origin master&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224215645193-1439092432.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　　　把本地库的&lt;span&gt;内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　由于远程库是空的，我们&lt;span&gt;第一次推送master分支时，加上了 –u参数&lt;/span&gt;，Git不但会把本地的master分支内容推送的远程新的master分支，&lt;/p&gt;
&lt;p&gt;　　　　还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面&lt;/p&gt;
&lt;p&gt;　　　　中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224215944428-252152373.png&quot; alt=&quot;&quot; width=&quot;760&quot; height=&quot;399&quot;/&gt;　　　&lt;/p&gt;
&lt;p&gt;　　　　从现在起，只要本地作了提交，就可以通过如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。&lt;/p&gt;
&lt;h3&gt;2.3、从远程库克隆&lt;/h3&gt;
&lt;p&gt;　　上面我们了解了先有本地库，后有远程库时候，如何关联远程库。&lt;/p&gt;
&lt;p&gt;　　现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？&lt;/p&gt;
&lt;p&gt;　　举个简单的例子：&lt;/p&gt;
&lt;p&gt;　　　　1）首先，登录github，创建一个新的仓库GitTest2&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224220732756-1509332686.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;463&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224220801287-1309673216.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;373&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：&lt;/p&gt;
&lt;p&gt;　　　　执行命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/zyh2017/GitTest2.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224220948146-1800804800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201712/999804-20171224221045709-1079735178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　喜欢就“推荐”哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 14:14:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/8099185.html</dc:identifier>
</item>
<item>
<title>Material使用05 自定义主题、黑夜模式\白天模式切换 - NeverCtrl_C</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/8099416.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/8099416.html</guid>
<description>&lt;p&gt;需求：&lt;/p&gt;
&lt;p&gt;　　1 不使用materil依赖内建的主题，使用自己创建的主题&lt;/p&gt;
&lt;p&gt;　　2 利用自己创建的主题实现白天模式和黑夜模式&lt;/p&gt;

&lt;h2&gt;1 自定义主题&lt;/h2&gt;
&lt;h3&gt;　　1.1 创建自定义主题文件 them.scss&lt;/h3&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224172810975-1383816394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_5ae37737-2a7c-494c-861b-bc541f79da05&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ae37737-2a7c-494c-861b-bc541f79da05&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ae37737-2a7c-494c-861b-bc541f79da05&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material自定义主题支持&lt;/span&gt;
@import '~@angular/material/theming'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material公用的主题风格&lt;/span&gt;
@include mat-&lt;span&gt;core();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义颜色&lt;/span&gt;
$my-app-primary: mat-palette($mat-&lt;span&gt;blue);
$my&lt;/span&gt;-app-accent: mat-palette($mat-&lt;span&gt;teal, A200, A100, A400);
$my&lt;/span&gt;-app-warn: mat-palette($mat-&lt;span&gt;red);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用自定义颜色组装自定义主题&lt;/span&gt;
$my-app-theme: mat-light-theme($my-app-primary, $my-app-accent, $my-app-&lt;span&gt;warn);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置自定义主题，使其生效&lt;/span&gt;
@include angular-material-theme($my-app-theme);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　1.1.1 引入material主题支持和material公用的主题风格&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material自定义主题支持&lt;/span&gt;
@import '~@angular/material/theming'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material公用的主题风格&lt;/span&gt;
@include mat-core();
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　1.1.2 根据material公用的主题风格设定自己的主题颜色&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义颜色&lt;/span&gt;
$my-app-primary: mat-palette($mat-blue); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主色&lt;/span&gt;
$my-app-accent: mat-palette($mat-teal, A200, A100, A400); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 副色&lt;/span&gt;
$my-app-warn: mat-palette($mat-red); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 警告色&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　代码解释01： $my-app-primary就是一个自定义的变量&lt;/p&gt;
&lt;p&gt;　　　　代码解释02： $mat-blue表示使用material主题风格中的blue这种颜色&lt;/p&gt;
&lt;p&gt;　　　　代码解释03： $my-app-primary: mat-palette($mat-blue); 表示通过material主题风格的函数将material主题风格中的blue颜色赋值给$my-app-primary变量&lt;/p&gt;
&lt;p&gt;　　　　技巧01：如何查看material的主题风格中提供了哪些颜色 -&amp;gt; &lt;a href=&quot;https://material.io/color/#!/?view.left=0&amp;amp;view.right=0&amp;amp;primary.color=4FC3F7&quot; target=&quot;_blank&quot;&gt;点击前往&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;　　　　1.1.3 利用自己的主题颜色组成自定义主题&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用自定义颜色组装自定义主题&lt;/span&gt;
$my-app-theme: mat-light-theme($my-app-primary, $my-app-accent, $my-app-warn);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　1.1.4 设置主题颜色使其生效&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置自定义主题，使其生效&lt;/span&gt;
@include angular-material-theme($my-app-theme);
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　1.2 在全局样式文件中引入自定义的主题文件them.scss&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：需要将默认引入的materi内建主题注释掉&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224173732990-764909287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_c8fcd71d-da49-4b57-a7da-a8115090ca67&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c8fcd71d-da49-4b57-a7da-a8115090ca67&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c8fcd71d-da49-4b57-a7da-a8115090ca67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; You can add global styles to this file, and also import other style files &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @import '~@angular/material/prebuilt-themes/deeppurple-amber.css'; // 导入material的内建主体&lt;/span&gt;
@import 'theme.scss'&lt;span&gt;;


html, body, app&lt;/span&gt;-root, md-sidenav-&lt;span&gt;container, .site {
    width: &lt;/span&gt;100%&lt;span&gt;;
    height: &lt;/span&gt;100%&lt;span&gt;;
    margin: &lt;/span&gt;0&lt;span&gt;;
}

.site {
    display: flex;
    flex&lt;/span&gt;-&lt;span&gt;direction: column;
}
header {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; background-color: skyblue;&lt;/span&gt;
&lt;span&gt;}
main {
    flex: &lt;/span&gt;1&lt;span&gt;;
}
footer {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; background-color: skyblue; &lt;/span&gt;
&lt;span&gt;}

.fill&lt;/span&gt;-remaining-space { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; flex项目自动填充多余空间&lt;/span&gt;
    flex: 1 1&lt;span&gt; auto;
}

.full&lt;/span&gt;-&lt;span&gt;width {
    width: &lt;/span&gt;100%&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　1.3 效果如下&lt;/h3&gt;
&lt;p&gt; 　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224173925787-1690487828.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2 利用多主题实现多模式&lt;/h2&gt;
&lt;h3&gt;　　2.1 添加黑夜主题&lt;/h3&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224214047428-1696074806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_0c1eb0a5-e5f2-4540-b522-53487a670eff&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0c1eb0a5-e5f2-4540-b522-53487a670eff&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0c1eb0a5-e5f2-4540-b522-53487a670eff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material自定义主题支持&lt;/span&gt;
@import '~@angular/material/theming'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入material公用的主题风格&lt;/span&gt;
@include mat-&lt;span&gt;core();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义颜色&lt;/span&gt;
$my-app-primary: mat-palette($mat-blue); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主色&lt;/span&gt;
$my-app-accent: mat-palette($mat-teal, A200, A100, A400); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 副色&lt;/span&gt;
$my-app-warn: mat-palette($mat-red); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 警告色&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用自定义颜色组装自定义主题&lt;/span&gt;
$my-app-theme: mat-light-theme($my-app-primary, $my-app-accent, $my-app-&lt;span&gt;warn);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置自定义主题，使其生效&lt;/span&gt;
@include angular-material-theme($my-app-&lt;span&gt;theme);



&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义颜色&lt;/span&gt;
$my-dark-primary: mat-palette($mat-blue-grey); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主色&lt;/span&gt;
$my-dark-accent: mat-palette($mat-amber, A200, A100, A400); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 副色&lt;/span&gt;
$my-dark-warn: mat-palette($mat-deep-orange); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 警告色&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用自定义颜色组装自定义主题&lt;/span&gt;
$my-dark-theme: mat-light-theme($my-dark-primary, $my-dark-accent, $my-dark-&lt;span&gt;warn);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置自定义主题，使其生效&lt;/span&gt;
.myapp-dark-&lt;span&gt;theme {
    @include angular&lt;/span&gt;-material-theme($my-dark-&lt;span&gt;theme);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　技巧01：将黑夜主题放在一个class类中进行引入，当这个类被激活时就表示开启黑夜模式&lt;/p&gt;
&lt;h3&gt;　　2.2 在页眉组件添加一个按钮用于开启或者关闭黑夜模式&lt;/h3&gt;
&lt;h4&gt;　　　　2.2.1 在共享模块中引入MdSlideToggleModule&lt;/h4&gt;
&lt;p&gt; 　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224214429943-1844435301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46.5&quot;&gt;&lt;img id=&quot;code_img_closed_eb4001fb-0c3a-493f-9b1a-1f678c6ae61e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eb4001fb-0c3a-493f-9b1a-1f678c6ae61e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eb4001fb-0c3a-493f-9b1a-1f678c6ae61e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
import { NgModule } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { 
  MdSidenavModule, 
  MdToolbarModule,
  MdIconModule,
  MdButtonModule,
  MdIconRegistry,
  MdCardModule,
  MdInputModule,
  MdListModule,
  MdSlideToggleModule
 } from &lt;/span&gt;'@angular/material'&lt;span&gt;;
 import { HttpModule } from &lt;/span&gt;'@angular/http'&lt;span&gt;;

@NgModule({
  imports: [
    CommonModule,
    HttpModule,
    MdSidenavModule,
    MdToolbarModule,
    MdIconModule,
    MdButtonModule,
    MdCardModule,
    MdInputModule,
    MdListModule,
    MdSlideToggleModule
  ],
  declarations: [],
  exports: [
    CommonModule,
    MdSidenavModule,
    MdToolbarModule,
    MdIconModule,
    MdButtonModule,
    HttpModule,
    MdCardModule,
    MdInputModule,
    MdListModule,
    MdSlideToggleModule
  ]
})
export class SharedModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　2.2.2 在组件中使用MdSlideToggleModule提供的md-slide-toggle组件&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224214606740-1615932929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d6f01222-0650-4544-9407-9ef99b5544cd&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6f01222-0650-4544-9407-9ef99b5544cd&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6f01222-0650-4544-9407-9ef99b5544cd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;md-toolbar color=&quot;primary&quot;&amp;gt;
    &amp;lt;button md-icon-button (click)=&quot;openSidebar()&quot;&amp;gt;
        &amp;lt;md-icon&amp;gt;menu&amp;lt;/md-icon&amp;gt;
    &amp;lt;/button&amp;gt;
    &amp;amp;&lt;span&gt;nbsp;
    &lt;/span&gt;&amp;lt;span&amp;gt;企业协作平台&amp;lt;/span&amp;gt;
    &amp;lt;!-- &amp;amp;&lt;span&gt;nbsp;
    &lt;/span&gt;&amp;lt;md-icon&amp;gt;accessibility&amp;lt;/md-icon&amp;gt;
    &amp;lt;md-icon svgIcon=&quot;header&quot;&amp;gt;&amp;lt;/md-icon&amp;gt; --&amp;gt;
    &amp;lt;span class='fill-remaining-space'&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;md-slide-toggle (change)='onChange($event.checked)'&amp;gt;黑夜模式&amp;lt;/md-slide-toggle&amp;gt;
&amp;lt;/md-toolbar&amp;gt;               
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　代码解释01：&amp;lt;span class='fill-remaining-space'&amp;gt;&amp;lt;/span&amp;gt;的主要作用是撑满剩余的空间&lt;/p&gt;
&lt;p&gt;　　　　　　代码解释02：(change)='onChange($event.checked)' 的作用是当md-slide-toggle组件发生变化时执行相应的方法，参数md-slide-toggle的当前值&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：md-slide-toggle官方文档 -&amp;gt; &lt;a href=&quot;https://material.angular.io/components/slide-toggle/overview&quot; target=&quot;_blank&quot;&gt;点击前往&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt; 　　　　2.2.3 在使用md-slide-toggle的组件编写一个输出变量&lt;/h4&gt;
&lt;p&gt;　　　　　　当md-slide-toggle组件的值发生变化时就将变化后的值发送给使用md-slide-toggle这个组件的父组件&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224215113068-1011006667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_a761cbc8-371a-4d9e-a0b8-8b5f32f071d5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a761cbc8-371a-4d9e-a0b8-8b5f32f071d5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a761cbc8-371a-4d9e-a0b8-8b5f32f071d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
import { Component, OnInit, Output, EventEmitter } from '@angular/core'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-header'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./header.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./header.component.scss'&lt;span&gt;]
})
export class HeaderComponent implements OnInit {
  @Output()
  toggle &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; EventEmitter&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt;&lt;span&gt;();

  @Output()
  toggleDarkTheme &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; EventEmitter&amp;lt;&lt;span&gt;boolean&lt;/span&gt;&amp;gt;&lt;span&gt;();

  constructor() { }

  ngOnInit() {
  }

  openSidebar() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.toggle.emit();
  }

  onChange(eventValue: &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log('是否黑夜模式：' + eventValue);&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.toggleDarkTheme.emit(eventValue);
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　2.2.4 在父组件中监听使用md-slide-toggle的那个组件触发的事件&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224215422162-1728094240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_57e714a6-7252-4ef6-b2f9-12bb031e01de&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_57e714a6-7252-4ef6-b2f9-12bb031e01de&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_57e714a6-7252-4ef6-b2f9-12bb031e01de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;md-sidenav-container [class.myapp-dark-theme]=&quot;darkTheme&quot;&amp;gt;
  &amp;lt;md-sidenav #sidenav mode=&quot;push&quot;&amp;gt;
    &amp;lt;app-sidenav&amp;gt;&amp;lt;/app-sidenav&amp;gt;
  &amp;lt;/md-sidenav&amp;gt;
  &amp;lt;div class=&quot;site&quot;&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;app-header (toggle)=&quot;sidenav.toggle()&quot; (toggleDarkTheme)=&quot;switchTheme($event)&quot;&amp;gt;&amp;lt;/app-header&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;footer&amp;gt;
      &amp;lt;app-footer&amp;gt;&amp;lt;/app-footer&amp;gt;
    &amp;lt;/footer&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/md-sidenav-container&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　代码解释01：&amp;lt;app-header (toggle)=&quot;sidenav.toggle()&quot; (toggleDarkTheme)=&quot;switchTheme($event)&quot;&amp;gt;&amp;lt;/app-header&amp;gt; 当app-header组件触发toggleDarkTheme会引发使用app-haeder组件的父组件触发switchTheme方法，并将app-header组件发出的参数接收到作为switchTheme方法的参数&lt;/p&gt;
&lt;h4&gt; 　　　　2.2.5 在父组件中编写switchTheme方法&lt;/h4&gt;
&lt;p&gt;　　　　　　该方法根据接收到的参数真假来判断是否开启黑夜模式对应的class类&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224220033490-1966019584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224220127912-1203110391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a1b384b7-6ffb-4ea4-9f3d-9714d5a863cf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a1b384b7-6ffb-4ea4-9f3d-9714d5a863cf&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a1b384b7-6ffb-4ea4-9f3d-9714d5a863cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
import { Component } from '@angular/core'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-root'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./app.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./app.component.scss'&lt;span&gt;]
})
export class AppComponent { 
  darkTheme &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

  switchTheme(dark) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.darkTheme =&lt;span&gt; dark;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; alert(this.darkTheme);&lt;/span&gt;
&lt;span&gt;  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.3 效果图如下&lt;/h3&gt;
&lt;h4&gt;　　　　2.3.1 白天模式&lt;/h4&gt;
&lt;p&gt; 　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224220311725-1328408032.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　2.3.2 黑夜模式&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057762/201712/1057762-20171224220347771-264689367.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;　　2.4 待解决问题&lt;/h3&gt;
&lt;p&gt;　　　　2017年12月24日22:04:30&lt;/p&gt;
&lt;p&gt;　　　　md-card组件的主题失效&lt;/p&gt;
&lt;p&gt; 　　　　md-side-nav组件的主题失效&lt;/p&gt;

</description>
<pubDate>Sun, 24 Dec 2017 14:06:00 +0000</pubDate>
<dc:creator>NeverCtrl_C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/8099416.html</dc:identifier>
</item>
<item>
<title>Android查缺补漏--BroadcastReceiver的类型与使用 - codingblock</title>
<link>http://www.cnblogs.com/codingblock/p/8034110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codingblock/p/8034110.html</guid>
<description>&lt;p&gt;Broadcast 是一种被用于应用内和应用之间传递信息的机制。一个广播可以对应多个接受者。一个完整的广播机制，需要具有以下三个要素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;发送广播的Broadcast&lt;/li&gt;
&lt;li&gt;接受广播的BroadcastReceiver&lt;/li&gt;
&lt;li&gt;传递信息的Intent&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;广播的注册分为静态注册和动态注册：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;静态注册：静态注册的广播是指在AndroidManifest中注册的广播，此种广播在应用安装时就被系统解析，不需要启动应用就可以收到相应的广播。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcastReceiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;动态注册：通过Context.registerReceiver()来实现，不需要时要通过Context.unRegisterReceiver()解除广播，此种广播必须应用启动后才能注册并接收广播。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 动态注册广播接收器
registerReceiver(new DynamicBroadcastReceiver(), new IntentFilter(MyBroadcastReceiver.ACTION));&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;广播又分为普通广播、有序广播、本地广播和sticky广播。&lt;/p&gt;
&lt;h3 id=&quot;一普通广播&quot;&gt;一、普通广播&lt;/h3&gt;
&lt;p&gt;普通广播通过Context.sendBroadcast()发送，我们没有办法制定Receiver们对于普通广播的接收顺序。理论上所有的接收器（Receiver）接收到广播的顺序不确定，但一般是按照其在AndroidMainfest.xml文件中注册的顺序（不绝对）。&lt;br/&gt;普通广播中，接受者不能将处理结果传递给下一个接收器，也无法终止广播的传播。&lt;/p&gt;
&lt;p&gt;如下代码是一个静态注册的广播示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class MyBroadcastReceiver extends BroadcastReceiver {

    String TAG = MyBroadcastReceiver.class.getSimpleName();

    public static final String ACTION = &quot;MY_BROADCAST_RECEIVER&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(TAG, &quot;接收到广播消息：&quot; + intent.getStringExtra(BroadcastTestActivity.INTENT_INFO));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后再AndroidMainfest.xml中注册这个广播:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcastReceiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来在Activity中调用Context.sendBroadcast()发送广播就可以了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Intent intent = new Intent(MyBroadcastReceiver.ACTION);
intent.putExtra(INTENT_INFO, &quot;我是一个普通广播&quot;);
sendBroadcast(intent);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;log如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-08 17:29:44.259 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcastReceiver: 接收到广播消息：我是一个普通广播&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;普通广播的接收顺序测试&lt;br/&gt;我们仿照MyBroadcastReciver创建多个接收器，代码一样：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;/**
 * 静态注册的广播接收器2
 * Created by liuwei on 17/12/7.
 */
public class MyBroadcast2Receiver extends BroadcastReceiver {

    String TAG = MyBroadcast2Receiver.class.getSimpleName();

    public static final String ACTION = &quot;MY_BROADCAST_RECEIVER&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(TAG, &quot;接收到广播消息：&quot; + intent.getStringExtra(BroadcastTestActivity.INTENT_INFO));
    }
}
/**
 * 静态注册的广播接收器3
 * Created by liuwei on 17/12/7.
 */
public class MyBroadcast3Receiver extends BroadcastReceiver {...}
/**
 * 静态注册的广播接收器4
 * Created by liuwei on 17/12/7.
 */
public class MyBroadcast4Receiver extends BroadcastReceiver {...}
/**
 * 静态注册的广播接收器5
 * Created by liuwei on 17/12/7.
 */
public class MyBroadcast5Receiver extends BroadcastReceiver {...}
/**
 * 静态注册的广播接收器6
 * Created by liuwei on 17/12/7.
 */
public class MyBroadcast6Receiver extends BroadcastReceiver {...}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在AndroidMainfest.xml中为以上广播都注册同一个action&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcastReceiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast6Receiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast2Receiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast3Receiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast4Receiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast5Receiver&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;点击发送广播，查看log：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-08 17:29:44.259 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcastReceiver: 接收到广播消息：我是一个普通广播
12-08 17:29:44.268 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcast6Receiver: 接收到广播消息：我是一个普通广播
12-08 17:29:44.271 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcast2Receiver: 接收到广播消息：我是一个普通广播
12-08 17:29:44.273 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcast3Receiver: 接收到广播消息：我是一个普通广播
12-08 17:29:44.277 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcast4Receiver: 接收到广播消息：我是一个普通广播
12-08 17:29:44.280 6644-6644/cn.codingblock.androidadvancestudy I/MyBroadcast5Receiver: 接收到广播消息：我是一个普通广播&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二有序广播&quot;&gt;二、有序广播&lt;/h3&gt;
&lt;p&gt;在AndroidMainfest.xml中注册广播时通过priority（值越优先级越高）节点为广播添加优先级，然后再用Context.sendOrderedBroadcast()发送，接收者们就会按照优先级顺序依次执行。&lt;/p&gt;
&lt;p&gt;有序广播的接收者和给下一个接收者传递数据，并且接收者在收到广播之后可以抛弃广播，使广播不再向后传递。&lt;/p&gt;
&lt;p&gt;为上面6个接收器添加优先级：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcastReceiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;1&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast6Receiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;6&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast2Receiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;2&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast3Receiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;3&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast4Receiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;4&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;

&amp;lt;receiver android:name=&quot;.broadcast.MyBroadcast5Receiver&quot;&amp;gt;
    &amp;lt;intent-filter android:priority=&quot;5&quot;&amp;gt;
        &amp;lt;action android:name=&quot;MY_BROADCAST_RECEIVER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后通过sendOrderedBroadcast发送广播观察log：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;intent = new Intent(MyBroadcastReceiver.ACTION);
intent.putExtra(INTENT_INFO, &quot;我是一个有序广播&quot;);
sendOrderedBroadcast(intent, null);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;log如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-08 18:17:26.455 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcast6Receiver: 接收到广播消息：我是一个有序广播
12-08 18:17:26.462 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcast5Receiver: 接收到广播消息：我是一个有序广播
12-08 18:17:26.464 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcast4Receiver: 接收到广播消息：我是一个有序广播
12-08 18:17:26.465 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcast3Receiver: 接收到广播消息：我是一个有序广播
12-08 18:17:26.466 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcast2Receiver: 接收到广播消息：我是一个有序广播
12-08 18:17:26.467 25919-25919/cn.codingblock.androidadvancestudy I/MyBroadcastReceiver: 接收到广播消息：我是一个有序广播&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;abortBroadcast()抛弃广播：&lt;br/&gt;普通的广播是没有办法抛弃的，否则会抛出RuntimeException的异常。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;只有有序广播才可以通过此方法抛弃。我们在MyBroadcast6Receiver中添加abortBroadcast()方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class MyBroadcast6Receiver extends BroadcastReceiver {

    String TAG = MyBroadcast6Receiver.class.getSimpleName();

    public static final String ACTION = &quot;MY_BROADCAST_RECEIVER&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(TAG, &quot;接收到广播消息：&quot; + intent.getStringExtra(BroadcastTestActivity.INTENT_INFO));
        abortBroadcast();
        Log.i(TAG, &quot;丢弃广播&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后点击发送有序广播，log如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-08 18:34:27.989 1329-1329/cn.codingblock.androidadvancestudy I/MyBroadcast6Receiver: 接收到广播消息：我是一个有序广播
12-08 18:34:27.989 1329-1329/cn.codingblock.androidadvancestudy I/MyBroadcast6Receiver: 丢弃广播&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到广播已经被丢弃了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;setResult()传递给下一个接收者结果。&lt;/li&gt;
&lt;li&gt;getResult()接收上一个接收者的结果。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在MyBroadcast6Receiver中添加setResult方法，在MyBroadcast5Receiver添加getResult方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class MyBroadcast6Receiver extends BroadcastReceiver {

    String TAG = MyBroadcast6Receiver.class.getSimpleName();

    public static final String ACTION = &quot;MY_BROADCAST_RECEIVER&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(TAG, &quot;接收到广播消息：&quot; + intent.getStringExtra(BroadcastTestActivity.INTENT_INFO));
//        abortBroadcast();
//        Log.i(TAG, &quot;丢弃广播&quot;);
        setResult(006, &quot;我是老6传来的消息&quot;, null);
    }
}
public class MyBroadcast5Receiver extends BroadcastReceiver {

    String TAG = MyBroadcast5Receiver.class.getSimpleName();

    public static final String ACTION = &quot;MY_BROADCAST_RECEIVER&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(TAG, &quot;接收到广播消息：&quot; + intent.getStringExtra(BroadcastTestActivity.INTENT_INFO));
        String data = getResultData();
        Log.i(TAG, &quot;data=&quot; + data);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;log如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-08 18:40:01.415 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast6Receiver: 接收到广播消息：我是一个有序广播
12-08 18:40:01.434 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast5Receiver: 接收到广播消息：我是一个有序广播
12-08 18:40:01.434 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast5Receiver: data=我是老6传来的消息
12-08 18:40:01.440 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast4Receiver: 接收到广播消息：我是一个有序广播
12-08 18:40:01.442 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast3Receiver: 接收到广播消息：我是一个有序广播
12-08 18:40:01.445 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcast2Receiver: 接收到广播消息：我是一个有序广播
12-08 18:40:01.447 10372-10372/cn.codingblock.androidadvancestudy I/MyBroadcastReceiver: 接收到广播消息：我是一个有序广播&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三本地广播&quot;&gt;三、本地广播&lt;/h3&gt;
&lt;p&gt;以上的广播对于系统来说是全局的，发出广播后，系统内的应用只要注册了相应的接收器就都可以收到广播。如果我们想在本应用发出的广播只在此应用内可以收到，那么可以使用本地广播了。&lt;/p&gt;
&lt;p&gt;本地广播由 LocalBroadcastManager 管理，是在 API 21 以后添加的，使用起来也很方便，需要先通过 LocalBroadcastManager.getInstance() 方法获取其单例，剩下的用法与其他广播类似，其主要方法有以下几个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;registerReceiver():注册广播接收器。&lt;/li&gt;
&lt;li&gt;unregisterReceiver():解除广播接收器。&lt;/li&gt;
&lt;li&gt;sendBroadcast():发送异步广播。&lt;/li&gt;
&lt;li&gt;sendBroadcastSync():发送同步广播。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用本地广播时，无需在AndroidMainfest.xml中注册，必须使用 LocalBroadcastManager.getInstance(...).registerReceiver(..)来注册接收器。&lt;/p&gt;
&lt;p&gt;我们来写个本地广播的小栗子，首先注册两个本地广播：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalBroadcastManager.getInstance(context).registerReceiver(new MyBroadcastReceiver(), new IntentFilter(MyBroadcastReceiver.ACTION));
LocalBroadcastManager.getInstance(context).registerReceiver(new MyBroadcast2Receiver(), new IntentFilter(MyBroadcastReceiver.ACTION));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后发送本地广播：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;intent.putExtra(INTENT_INFO, &quot;我是一个本地广播&quot;);
LocalBroadcastManager.getInstance(context).sendBroadcast(intent);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;log如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;12-09 17:20:47.799 15019-15019/cn.codingblock.androidadvancestudy I/MyBroadcastReceiver: 接收到广播消息：我是一个本地广播
12-09 17:20:47.799 15019-15019/cn.codingblock.androidadvancestudy I/MyBroadcast2Receiver: 接收到广播消息：我是一个本地广播&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四sticky广播不建议使用&quot;&gt;四、sticky广播（不建议使用）&lt;/h3&gt;
&lt;p&gt;sticky广播会一直处于滞留状态，sticky广播被发出后，只要有能够匹配其的新接收器被注册了就可以收到广播，sticky广播通过Context.sendStickyBroadcast()发送。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;最后想说的是，本系列文章为博主对Android知识进行再次梳理，查缺补漏的学习过程，一方面是对自己遗忘的东西加以复习重新掌握，另一方面相信在重新学习的过程中定会有巨大的新收获，如果你也有跟我同样的想法，不妨关注我一起学习，互相探讨，共同进步！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参考文献：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;《Android开发艺术探索》&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;《Android开发进阶从小工到专家》&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 24 Dec 2017 13:44:00 +0000</pubDate>
<dc:creator>codingblock</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codingblock/p/8034110.html</dc:identifier>
</item>
<item>
<title>OVS 总体架构、源码结构及数据流程全面解析 - bakari</title>
<link>http://www.cnblogs.com/bakari/p/8097478.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bakari/p/8097478.html</guid>
<description>&lt;p&gt;在前文「&lt;a href=&quot;http://www.cnblogs.com/bakari/p/8097439.html&quot;&gt;从 Bridge 到 OVS&lt;/a&gt;」中，我们已经对 OVS 进行了一番探索。本文决定从 OVS 的整体架构到各个组件都进行一个详细的介绍。&lt;/p&gt;
&lt;h2 id=&quot;ovs-架构&quot;&gt;OVS 架构&lt;/h2&gt;
&lt;p&gt;OVS 是产品级的虚拟交换机，大量应用在生产环境中，支撑整个数据中心虚拟网络的运转。OVS 基于 SDN 的思想，将整个核心架构分为控制面和数据面，数据面负责数据的交换工作，控制面实现交换策略，指导数据面工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/431521/201712/431521-20171224102317818-1090106576.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从整体上看，OVS 可以划分为三大块，管理面、数据面和控制面。&lt;/p&gt;
&lt;p&gt;数据面就是以用户态的 ovs-vswitchd 和内核态的 datapath 为主的转发模块，以及与之相关联的数据库模块 ovsdb-server，控制面主要是由 ovs-ofctl 模块负责，基于 OpenFlow 协议与数据面进行交互。而管理面则是由 OVS 提供的各种工具来负责，这些工具的提供也是为了方便用户对底层各个模块的控制管理，提高用户体验。下面就对这些工具进行一个逐一的阐述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovs-ofctl&lt;/code&gt;&lt;/strong&gt;：这个是控制面的模块，但本质上它也是一个管理工具，主要是基于 OpenFlow 协议对 OpenFlow 交换机进行监控和管理，通过它可以显示一个 OpenFlow 交换机的当前状态，包括功能、配置和表中的项。使用时，有很多参数，我们可以通过 ovs-ofctl --help 查看。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;常用命令：

ovs-ofctl show switch-name ：输出交换机信息，包括其流量表和端口信息。

ovs-ofctl dump-ports switch-name：输出交换机的端口统计信息，包括收发包、丢包、错误包等数量。

ovs-ofctl add-flow switch-name：为交换机配置流策略。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovs-dpctl&lt;/code&gt;&lt;/strong&gt;：用来配置交换机的内核模块 datapath，它可以创建，修改和删除 datapath，一般，单个机器上的 datapath 有 256 条（0-255）。一条 datapath 对应一个虚拟网络设备。该工具还可以统计每条 datapath 上的设备通过的流量，打印流的信息等，更过参数通过 ovs-dpctl --help 查看。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;常用命令：

ovs-dpctl show ：显示所有 datapath 的基本信息。

ovs-dpctl dump-dps ：显示所有 datapath 的名字。

ovs-dpctl dump-flows DP ：显示一条 datapath DP 上的流信息。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovs-appctl&lt;/code&gt;&lt;/strong&gt;：查询和控制运行中的 OVS 守护进程，包括 ovs-switchd，datapath，OpenFlow 控制器等，兼具 ovs-ofctl、ovs-dpctl 的功能，是一个非常强大的命令。ovs-vswitchd 等进程启动之后就以一个守护进程的形式运行，为了能够很好的让用户控制这些进程，就有了这个命令。详细可以 ovs-appctl --help 查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovs-vsctl&lt;/code&gt;&lt;/strong&gt;：查询和更新 ovs-vswitchd 的配置，这也是一个很强大的命令，网桥、端口、协议等相关的命令都由它来完成。此外，还负责和 ovsdb-server 相关的数据库操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;常用命令：

ovs-vsctl show ：显示主机上已有的网桥及端口信息。

ovs-vsctl add-br br0：添加网桥 br0。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovsdb-client&lt;/code&gt;&lt;/strong&gt;：访问 ovsdb-server 的客户端程序，通过 ovsdb-server 执行一些数据库操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;常用命令：

ovsdb-client dump：用来查看ovsdb内容。

ovsdb-client transact ：用来执行一条类 sql。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ovsdb-tool&lt;/code&gt;&lt;/strong&gt;：和 ovsdb-client 要借助 ovsdb-server 才能进行相关数据库操作不同，ovsdb-tool 可以直接操作数据库。&lt;/p&gt;
&lt;h2 id=&quot;ovs-源码结构&quot;&gt;OVS 源码结构&lt;/h2&gt;
&lt;p&gt;OVS 源码结构中，主要包含以下几个主要的模块，数据交换逻辑在 vswitchd 和 datapath 中实现，vswitchd 是最核心的模块，OpenFlow 的相关逻辑都在 vswitchd 中实现，datapath 则不是必须的模块。ovsdb 用于存储 vswitch 本身的配置信息，如端口、拓扑、规则等。控制面部分采用的是 OVS 自家实现的 OVN，和其他控制器相比，OVN 对 OVS 和 OpenStack 有更好的兼容性和性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/431521/201712/431521-20171224102359443-1589744207.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出 OVS 的分层结构，最上层 vswitchd 主要与 ovsdb 通信，做配置下发和更新等，中间层是 ofproto ，用于和 OpenFlow 控制器通信，并基于下层的 ofproto provider 提供的接口，完成具体的设备操作和流表操作等工作。&lt;/p&gt;
&lt;p&gt;dpif 层实现对流表的操作。&lt;/p&gt;
&lt;p&gt;netdev 层实现了对网络设备（如 Ethernet）的抽象，基于 netdev provider 接口实现多种不同平台的设备，如 Linux 内核的 system, tap, internal 等，dpdk 系的 vhost, vhost-user 等，以及隧道相关的 gre, vxlan 等。&lt;/p&gt;
&lt;h2 id=&quot;数据转发流程&quot;&gt;数据转发流程&lt;/h2&gt;
&lt;p&gt;通过一个例子来看看 OVS 中数据包是如何进行转发的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/431521/201712/431521-20171224102412506-951322711.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1）ovs 的 datapath 接收到从 ovs 连接的某个网络端口发来的数据包，从数据包中提取源/目的 IP、源/目的 MAC、端口等信息。&lt;/p&gt;
&lt;p&gt;2）ovs 在内核态查看流表结构（通过 hash），如果命中，则快速转发。&lt;/p&gt;
&lt;p&gt;3）如果没有命中，内核态不知道如何处置这个数据包，所以，通过 netlink upcall 机制从内核态通知用户态，发送给 ovs-vswitchd 组件处理。&lt;/p&gt;
&lt;p&gt;4）ovs-vswitchd 查询用户态精确流表和模糊流表，如果还不命中，在 SDN 控制器接入的情况下，经过 OpenFlow 协议，通告给控制器，由控制器处理。&lt;/p&gt;
&lt;p&gt;5）如果模糊命中， ovs-vswitchd 会同时刷新用户态精确流表和内核态精确流表，如果精确命中，则只更新内核态流表。&lt;/p&gt;
&lt;p&gt;6）刷新后，重新把该数据包注入给内核态 datapath 模块处理。&lt;/p&gt;
&lt;p&gt;7）datapath 重新发起选路，查询内核流表，匹配；报文转发，结束。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;OVS 为了方便用户操作，提供了很多管理工具，我们平常在使用过程中只需记住每个工具的作用，具体的命令可以使用 -h 或 --help 查看。&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;对云计算感兴趣的小伙伴可以关注我的微信公众号：aCloudDeveloper，专注云计算领域，坚持分享干货。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/431521/201712/431521-20171224102452490-840809963.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 13:33:00 +0000</pubDate>
<dc:creator>bakari</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bakari/p/8097478.html</dc:identifier>
</item>
<item>
<title>2017年加班总结 - 木的树</title>
<link>http://www.cnblogs.com/dojo-lzz/p/8099255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dojo-lzz/p/8099255.html</guid>
<description>&lt;p&gt;之前总是写一些技术文章，每年的总结我实在是觉得自己写不出什么，大多时候没有目标，虚度的光阴，索性就不去写，得过且过。17年之前基本都是待在一家外企，过着朝九晚五的生活，17年来到一家一线互联网公司。这一年的工作量等于我上家公司两年半的工作量，对于我来说是一个转折点，有必要记录下来。&lt;/p&gt;
&lt;h2 id=&quot;加班&quot;&gt;加班&lt;/h2&gt;
&lt;p&gt;这一年工作上主要精力放在一个新项目和一堆老项目上，在外企基本是5点半下班，然而来了这里之后，我的下班时间变成了：八点、十点、十一点、十二点、两点。我们同事间经常开玩笑，我们可以出去忽悠新人，我们团队早上十点上班，两点就下班了。在跟前同事介绍这里的加班时，经常举一个例子，大家晚上七点出去聚餐，九点聚完餐，接着回来加班。那么为什么加班？我总结下来主要四点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大老板对方向失误有不可推卸的责任，资源的稀缺性决定不可能在任何方向投入相同资源，这个时候大老板的眼光个选择决定了团队努力的方向和资源的倾斜，很不幸的是某些原因历任几位大老板都在方向判定上做了错误的选择，这是导致人员流失，历史遗留的根本原因。同时也是的部门基础能力相较竞品大幅落后。那么几位老板最大的失误在哪里，我认为是一步登天的侥幸心理，对产品的认知不足，这个方向的产品需要深耕基础能力而不是弯道超车。&lt;/li&gt;
&lt;li&gt;团队领导，这个团队是一个产品型团队还是项目型团队。如果只是单纯去做项目，没有自己的产品路线，就会被大客户牵着鼻子走。有些领导特别喜欢收破烂。可你有没有想过，你接过来的破烂最终给了谁，接一个破烂对队员的伤害有多大。当然从另一个角度来说，这是考察一个队员抗压能力的时候，乱世出英雄，就需要有人来扛起大旗。&lt;/li&gt;
&lt;li&gt;项目负责人问题，面对业务压力和技术欠债如何抉择。面对外部团队的合作方式，能否顶住压力打磨自己的产品，自己的产品能否做得了主。对于项目负责人来说，面对与外部合作，首先要明确界限，对于自己的产品不能伤害用户，排期权利要掌握在自己手中。加班加点赶出的项目，别人不会感激你，反而会因为质量问题而受到指责。&lt;/li&gt;
&lt;li&gt;个人问题，是否能够临危受命，面对历史项目的打法，恐怕不是维护而是需要推陈出新。另外不能光考虑个人得失，也要为团队利益考虑，在不伤害选原则的情况下做出调整。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;收获&quot;&gt;收获&lt;/h2&gt;
&lt;p&gt;这一年虽然很累，加班不少，但同时也是一种锻炼，曾跟同事开玩笑，在这里经历一年，外面什么样的项目也不会怕了。&lt;/p&gt;
&lt;p&gt;技术能力：前半年主要工作在各种前端项目，下半年转战WebGL，从前端到WebGL可以说是进入了一个新的技术领域，除了JavaScript写写代码，前端的其他知识在这里毫无用武之地，等于重新学习了一门新技术。门槛的提升同时也意味着解决问题难度的提升，现在在回过头来看一些前端技术难点，跟WebGL比起来根本不在同一层次上。&lt;/p&gt;
&lt;p&gt;抗压能力：我们的项目经过2维到3位的推到重来，六七月份基本是7*14的工作状态，这个过程面临巨大压力。首先是环境，这个环境可能来自工作项目、家庭、政策，对于工作项目来说往往是时间点与目标之间的问题，从砍功能与加人手来调节；然后是个人层面，往往是技术能力、性格、工作方式，性格方面需要经过磨炼总结调整，技术能力需要平时积累、向高手请教、必要时候通过培训等方式获取，工作方式方面比如避免看手机、避免中断。&lt;/p&gt;
&lt;p&gt;沟通能力：明确沟通目标、真诚，确定问题边界，根据情况确定时间点或者确定时间点的时间点；去玻璃心，之前别人与我观点相矛盾或者推动事情受阻，我往往会感到委屈找原因，现在我会对自己说扔掉你的玻璃心吧，更难的事情还在后面。&lt;/p&gt;
&lt;p&gt;项目流程：如果在让我遇到一次这种项目，首先我先会先进行技术选型、架构讨论、对于不了解的技术首先做技术探针调研，然后做排期；然后启动项目流程（立项、需求评估、开发迭代、UI总查、提测、bug修改、上线发布），这其中会明确项目目标，从项目管理角度（资源、时间、质量）来思考解决突发情况，预防控制风险（砍功能、加人手、延期）&lt;/p&gt;
&lt;p&gt;根据这几年的工作经验，总结了下项目技术的生命周期：功能实现期，这一阶段主要做各种功能迭代，主要还是写业务；性能优化期，在功能实现阶段，主要不是阻断型的性能问题都可以暂放，在性能优化这一阶段主要针在功能的性能指标上下功夫，如计算性能、页面FPS、首屏加载时间、内存、耗电量等；绣花迭代期，这一阶段系统基本稳定，对细节方面进行优化，往往根据用户统计上报数据，进行优化迭代；流程改进期，这个阶段系统稳定，主要从流程方面法线问题解决问题，这个时候的技术就不再是单一的技术工种而是发现哪个节点有问题就来解决哪个节点的技术难题。这四个周期往往是循环往复的。&lt;/p&gt;
&lt;h2 id=&quot;这一年的感触&quot;&gt;这一年的感触&lt;/h2&gt;
&lt;p&gt;随着年龄的增长，生活工作的压力只会越来越大，迟早会进入一个上有老下有小的阶段。如果不去扩展自身边界，继续做一个一线码农，可能过不了三年就会被新人替代。毕竟在大公司，技术的培养成本是最低的。&lt;/p&gt;
&lt;p&gt;那么对于自身希望有一定成长的码农来说，业务方向上，需要把握部门团队的主要矛盾，我们从技术角度给出合理的优化建议。对于一些做项目的团队，我的思路是按照项目状态分为三个级别：第一级是平台型，只需要配置就能完成任务，第二级是模板型，基本功能成型，只需要改一部分就能解决问题，第三级是方案型，需要重新做，但是技术方案很确定，大家基本都掌握。&lt;/p&gt;
&lt;p&gt;技术层面上，不能过度关注局部的技术难点，忽视对全局方案的把握。需要形成自己的方法论，能够判评技术方案的合理性，指出难点，提供解决办法，沉淀团队的公共代码和组件，实现技术复用。&lt;/p&gt;
&lt;p&gt;团队方面，根据团队现有情况发现流程问题，制定工作流程和制度规范，形成文档。培养新人，新人的关注点往往是我做什么能够成长最快，而公司的关注点在于我用谁做这个事情能够最高效的完成。这两个关注点的差异，往往是造成新人缺乏团队归属感，人员流动的主要原因。&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 13:19:00 +0000</pubDate>
<dc:creator>木的树</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dojo-lzz/p/8099255.html</dc:identifier>
</item>
<item>
<title>Objective-C 和 Swift 混编项目的小 Tips（一） - tingxins</title>
<link>http://www.cnblogs.com/tingxins/p/8099247.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tingxins/p/8099247.html</guid>
<description>&lt;p&gt;本文主要闲聊一些 Objective-C 和 Swift 混编项目带来的一些潜规则，希望能帮到对此感到疑惑的朋友。下面我们开始进入主题：&lt;/p&gt;
&lt;h2 id=&quot;命名&quot;&gt;命名&lt;/h2&gt;
&lt;p&gt;官方 Guide 上只是简单叙述（&lt;strong&gt;Using Swift with Cocoa and Objective-C&lt;/strong&gt;），即 Swift 编译器会在我们使用 Objective-C 的 API 时自动的将其转成 Swift 风格的 API（说白了就是会对一些方法名、枚举名等等做一些有规则的删减，即重命名）。&lt;/p&gt;
&lt;h3 id=&quot;单例方法命名&quot;&gt;单例方法命名&lt;/h3&gt;
&lt;p&gt;在 Swift 中引用 Objective-C 单例时，如果单例方法包含于类名，则会出现编译错误，下面我们来看几个例子。&lt;/p&gt;
&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (instancetype)manager;

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TXLoginManager&lt;/code&gt; 类有一个单例方法命名为 manager，在 Swift 中引用 manager 方法时，会出现编译错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.tingxins.cn/blog/2017/12/objc-singleton-name-in-swift.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说白了，manager 方法已经废了。。。&lt;/p&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example 2&lt;/h4&gt;
&lt;p&gt;在 Example 1 的基础上，我们把单例方法的命名改一改：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (instancetype)shareInstance;

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;单例方法命名改成 shareInstance 后，编译通过了。至此，至少问题已经解决了，现在我们再简单看看是什么原因？为何 manager 方法无法引用，而 shareInstance 却可以引用呢？&lt;/p&gt;
&lt;h4 id=&quot;example-3&quot;&gt;Example 3&lt;/h4&gt;
&lt;p&gt;在 Example 1 的基础上，把 manager 单例方法名称改为 shareManager :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (instancetype)shareManager;

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以发现在 Swift 中引用时，shareManager 方法名被重命名为 share :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.tingxins.cn/blog/2017/12/objc-singleton-name-in-swift-1.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;至此，我们可以得出一个简单的命名潜规则：在 Swift 中引用 Objective-C 单例时，如果单例方法包含于类名，则会出现编译错误，准确的说，应该是如果单例方法的名称正好是该类名驼峰命名的后缀，那么在 Swift 中引用该单例方法时，会出现编译错误。&lt;/p&gt;
&lt;p&gt;为何在 Swift 中引用 Objective-C 类的 API 会出现这种问题呢？官方 Guide 上时这样描述的：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The Swift compiler automatically imports Objective-C code as conventional Swift code. It imports Objective-C class factory methods as Swift initializers, and Objective-C enumeration cases truncated names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为 Swift 编译器在使用 Objective-C 的代码时会自动的将其转成 Swift 风格的代码，就是会对一些方法名、枚举名等等做一些有规则的删减。&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;There may be edge cases in your code that are not automatically handled. If you need to change the name imported by Swift of an Objective-C method, enumeration case, or option set value, you can use the NS_SWIFT_NAME macro to customize how a declaration is imported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据官方 Guide，上述的这种 case 属于 特殊的情况。那如何解决这种问题呢，Swift 提供了一个宏，专门处理我们遇到的这种 case —— &lt;code&gt;NS_SWIFT_NAME&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (instancetype)manager NS_SWIFT_NAME(shareInstance());

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，manager 该单例方法，当我们在 Swift 中引用时，会被重命名为 shareInstance。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
let _ = TXLocationManager.shareInstance()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;普通方法命名&quot;&gt;普通方法命名&lt;/h3&gt;
&lt;p&gt;有时候，我们在 Swift 中引用 Objective-C 中某个类的 API 时，方法名是可能会被重命名的，下面我们直接看例子。&lt;/p&gt;
&lt;h4 id=&quot;类方法&quot;&gt;类方法&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (instancetype)managerWithCoordinateY:(CGFloat)y

// Or
// + (TXLocationManager *)managerWithCoordinateY:(CGFloat)y

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当该类的类方法返回自身类型的实例对象时，上述的方法会被重命名。应该这样引用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 方式一：
let _ = TXLocationManager.init(coordinateY: 9)

// 方式二：
let _ = TXLocationManager(coordinateY: 9)

// 错误引用方式，编译失败
let _ = TXLocationManager.manager(withCoordinateY: 9)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过上述实践，我们可以发现类方法中的 manager 前缀会被删掉，而且变成了 Swift 中的 init 方法。如果该类的类方法不返回自身类型的实例对象呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@interface TXLocationManager : NSObject

+ (void)managerWithCoordinateY:(CGFloat)y;

// Or
// + (NSObject *)managerWithCoordinateY:(CGFloat)y;
// + (CGFloat)managerWithCoordinateY:(CGFloat)y;

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过实践可以发现，在 Swift 中是可以这样引用的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
TXLocationManager.manager(withCoordinateY: 9)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种方式的引用同我们一般的方法引用是一致的，无异同。&lt;/p&gt;
&lt;h4 id=&quot;实例方法&quot;&gt;实例方法&lt;/h4&gt;
&lt;p&gt;实例方法的重命名规则与类方法有点相似，此处就不再详述了，感兴趣的朋友可以自己实践一下。（当然方法的重命名我们一般都可以通过 &lt;code&gt;NS_SWIFT_NAME&lt;/code&gt; 来指定）&lt;/p&gt;
&lt;h3 id=&quot;参考链接&quot;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24148464/how-to-call-an-objective-c-singleton-from-swift&quot;&gt;How to call an Objective-C singleton from Swift?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 13:16:00 +0000</pubDate>
<dc:creator>tingxins</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tingxins/p/8099247.html</dc:identifier>
</item>
<item>
<title>跨越：迈过成长阶梯的断层 - mindwind</title>
<link>http://www.cnblogs.com/mindwind/p/8099197.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mindwind/p/8099197.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/815275/201712/815275-20171224205458131-1205166333.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在旧文&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=2650610534&amp;amp;idx=1&amp;amp;sn=653dbd5b54b32f232dc86f973b30e983#rd&quot;&gt;《程序员的成长阶梯和级别定义》&lt;/a&gt;中定义了一个程序员的成长阶梯，大概有下面几个阶段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;初级&lt;/li&gt;
&lt;li&gt;中级&lt;/li&gt;
&lt;li&gt;高级&lt;/li&gt;
&lt;li&gt;资深&lt;/li&gt;
&lt;li&gt;专家&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;很遗憾，当时到了专家这个阶段，我就没法给出很明确的答案了。只说了，职业成长就像爬楼，每一个级别就像一个楼层。但到了一定阶段（每个人的阶段不会一样）会发现上面似乎还有几层但却看不见下一层的楼梯了。&lt;/p&gt;
&lt;p&gt;这就是本文想探讨的，关于成长阶梯的断层。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;因为之前我已经走到了资深阶段，并停留了一段时间，所以我的断层出现在从资深到专家之间。&lt;/p&gt;
&lt;p&gt;旧文中，我用一种模糊怀疑的语气表达过关于专家的定义 —— 专家可能就是这个领域内你绕不过去的人吧。如今看来，这个定义太大。比如，若你处在物理学领域，牛顿就是你绕不过去的人，之后是爱因斯坦。而在计算机领域，图灵定义了计算机的边界，也是这个领域绕不过去的人。但这样的天才人物，百年来才出一个，那么这样的定义也就失去了指导意义。&lt;/p&gt;
&lt;p&gt;这个定义中包含两个点，一是领域、另一个是绕不过去。第一点表达了某个范围，第二个则模糊的表达了这个范围的大小，绕不过去其实就是一个很大的范围了。如今反思，其实用这两点来定义专家也是可以的，只是需要更清晰的量化下。&lt;/p&gt;
&lt;p&gt;大至国家、社会、行业，小到公司、团队、小组都有自己关于专家的定义。曾经，好些年前，我最早在公司几个同事组成的小组内研究引入 Java NIO 的技术来编写网络程序，读了一些相关的书和开源框架代码（Mina、Netty），周围的几个同事就戏称我为 Java NIO 的专家。这就是用领域（Java NIO 是一个很细分的技术领域）加范围（局限于周围组内几个同事，他们要解决 NIO 的网络编程问题都绕不过我）定义专家的方式。&lt;/p&gt;
&lt;p&gt;因而，像前面说的爱因斯坦、牛顿、图灵，他们既是行业（学科维度）范围内的，也是世界（地理维度）范围内的专家。而公司内的专家职级定义，其范围，无非就是与公司经营相关的领域，其大小无非就是公司组织架构的某一层级之内。&lt;/p&gt;
&lt;p&gt;这样理解，公司范围的专家领域定义，包含了两块：责任域和能力域。而能力域，又进步一细分为业务和技术两方面。蜘蛛侠里有句台词是这样说的：能力越大，责任越大（With great power comes great responsibility），能力和责任总是相辅相成。&lt;/p&gt;
&lt;h2 id=&quot;识别&quot;&gt;识别&lt;/h2&gt;
&lt;p&gt;有了专家的定义，不代表就能很容易识别出来，而成为专家就是要建立可识别的领域。&lt;/p&gt;
&lt;p&gt;公司大了后，经营业务广泛，涉及的技术领域也很广泛，所以公司不是只需要一个专家，而是需要很多不同领域的专家。都是专家，但大家处在不同的识别领域范围之内。&lt;/p&gt;
&lt;p&gt;公司的专家领域内，责任域相对还容易识别。但与能力域有关的业务和技术则过于抽象，很难清晰识别。所以对于专家的可识别领域，其实主要还是通过作品来体现的。作品是以一定形式表现出来的智力成果，而前面爱因斯坦、牛顿、图灵，他们作品的一定形式都是通过理论来体现的。&lt;/p&gt;
&lt;p&gt;因此，公司内所有的晋升述职都只是为了一个目的：识别员工的领域和范围，且在多大范围内获得了认可，再贴上一个对应的职级标签。而这个识别过程是非常短暂的，需要把 1 到 2 年的工作成果、能力成长、领域边界，在 10 到 20 分钟的时间范围内表现出来。所以，这个过程是肯定不完美的，而且也没法精确量化出识别的准确率。&lt;/p&gt;
&lt;p&gt;之所以在有限的时间范围内需要完成这个过程，对公司是一个成本问题。述职人员在有限的时间内展示了几个点，对评审识别人员来说，就像在管中窥豹。看不到全貌，看完几个特征点，然后就需要判断这是豹子（符合下一级别的晋升标准）还是猫（不符合）。&lt;/p&gt;
&lt;p&gt;我在做晋升评审时，就一直被这样的判断所困扰，多数述职同事都在这几个点上表现的很好。这就像是说，如果是豹子，它确实该有这些特征，反过来，拥有这些特征一定就是豹子么？这些特征点，是豹子的唯一或足够有区分度的标志性特征吗？&lt;/p&gt;
&lt;p&gt;而站在述职答辩人的角度，他的表达和展现更多的不应该是点，而是先有整体（面），再深入局部（点），这应该是一个画龙点睛的过程。&lt;/p&gt;
&lt;p&gt;识别的过程，本质是在解一个概率问题。当参与这个过程的两方都这样努力去考虑时，我想这样的过程会有更高的准确率。&lt;/p&gt;
&lt;h2 id=&quot;路径&quot;&gt;路径&lt;/h2&gt;
&lt;p&gt;成为专家，就是建立领域的过程，那么如何建立更大范围且更具识别性的领域呢？这就是这个路径中的非连续性断层问题。&lt;/p&gt;
&lt;p&gt;每个人在成长过程中，从新人到初级到高级，甚至到资深都可以是一个连续阶段，从生到熟的一个过程。熟到了一定程度，就会发现成长进入了高原期。&lt;/p&gt;
&lt;p&gt;最近，读到一篇吴军的文章，也提到了工程师成长过程中的类似问题，他用了一个公式来定义：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;成就 ＝ 成功率 x 事情的量级 x 做事的速度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连续的成长阶段，我们的成长主要体现在不断提升做事的熟练度（也就是上述公式中的速度和成功率），但这两个指标到了一定的熟练度阶段后就会碰到物理极限。实际情况是，一个资深的工程师的速度甚至不会比一个初级工程师快两倍，但可能成功率会高几倍，甚至十倍，这就是传说中的一个顶十个的程序员，但离极限也就差不远了。&lt;/p&gt;
&lt;p&gt;而更是传说中以一敌百的程序员，只有一个可能，他们做的事情和其他人不在一个了量级。现实案例中，就有如 Linus 这样的人。所以，一直做同样的事，都是写代码，也可以跨越断层。但关键是，你写的代码体现在什么量级的事情上。&lt;/p&gt;
&lt;p&gt;这里公式中的成就，也可以通过作品域来体现，就像水泥和砖头不是作品，大教堂才是。代码本身不是作品，它只是作品的原料。&lt;/p&gt;
&lt;p&gt;作为程序员，我们会有直观的感受，用户量级越过了一定的门槛后，我们编写、维护和部署程序系统的方式都会发生本质的变化。而提升量级、最难得就在于我们要放下曾经熟悉的方式和习惯，要站在更高的维度去看更大量级的事情，并且找到适合这个量级事情的合适解决方案。&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;看得见断层不见得就跨得过去，但看得见至少多了一种选择，而看不见则很可能一直在原地转圈。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;写点文字，画点画儿，记录成长瞬间。&lt;br/&gt;微信公众号「瞬息之间」，既然遇见，不如同行。&lt;br/&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/815275/201602/815275-20160216164606173-1251141402.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 13:09:00 +0000</pubDate>
<dc:creator>mindwind</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mindwind/p/8099197.html</dc:identifier>
</item>
<item>
<title>西游记之设计模式原则——单一职责原则 - 霜天晓角—Megan</title>
<link>http://www.cnblogs.com/meganhyy/p/8099206.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/meganhyy/p/8099206.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;单一职责原则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;——专心致志只做一件事&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3a72fd9e-0edc-4dd4-8d11-822b0d788b22&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a72fd9e-0edc-4dd4-8d11-822b0d788b22&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a72fd9e-0edc-4dd4-8d11-822b0d788b22&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package danyizhize;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SunWuKong {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XiangMo(String name) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;降魔！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XingLi(String name) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;拿行李！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QianMa(String name) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牵白龙马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QiMa(String name) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;骑马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DanYiZhiZe {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         SunWuKong sunWuKong = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SunWuKong();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         sunWuKong.XiangMo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         sunWuKong.QianMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         sunWuKong.XingLi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         sunWuKong.QiMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;孙悟空降魔！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;孙悟空牵白龙马!&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;孙悟空拿行李！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;孙悟空骑马!&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;孙悟空的任务太多，忙不过来！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2e906dbf-24cf-4caa-91c9-7efca1ffee12&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2e906dbf-24cf-4caa-91c9-7efca1ffee12&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2e906dbf-24cf-4caa-91c9-7efca1ffee12&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package danyizhize;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SunWuKong {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XiangMo(String name) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;降魔！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZhuBaJie {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QianMa(String name) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牵白龙马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShaHeShang {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XingLi(String name) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;拿行李！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TangSeng {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QiMa(String name) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;骑马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DanYiZhiZe {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         SunWuKong sunWuKong = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SunWuKong();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         ZhuBaJie zhuBaJie = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZhuBaJie();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         ShaHeShang shaHeShang = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShaHeShang();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         TangSeng tangSeng = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TangSeng();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;         sunWuKong.XiangMo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         zhuBaJie.QianMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;猪八戒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         shaHeShang.XingLi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沙和尚&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         tangSeng.QiMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唐僧&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;孙悟空降魔！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;猪八戒牵白龙马!&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;沙和尚拿行李！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;唐僧骑马!&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;改动大，将原有的1个类变成了4个类，还需要修改客户端代码！！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6c529024-877b-46a7-a049-5ece80dfeabc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6c529024-877b-46a7-a049-5ece80dfeabc&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6c529024-877b-46a7-a049-5ece80dfeabc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package danyizhize;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Work(String name) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(name)) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;降魔！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;猪八戒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(name)) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牵白龙马！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沙和尚&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(name)) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;拿行李！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唐僧&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(name)) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;骑马！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DanYiZhiZe {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         Person person = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         person.Work(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         person.Work(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;猪八戒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         person.Work(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沙和尚&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         person.Work(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唐僧&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;孙悟空降魔！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;猪八戒牵白龙马！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;沙和尚拿行李！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;唐僧骑马！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果再增加其他人，很有可能变成孙悟空做饭，操作简单，却存在隐患！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_70e3d95a-a650-4885-9a7b-fa6604925775&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_70e3d95a-a650-4885-9a7b-fa6604925775&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70e3d95a-a650-4885-9a7b-fa6604925775&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package danyizhize;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XiangMo(String name) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;降魔！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; XingLi(String name) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;拿行李！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QianMa(String name) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牵白龙马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QiMa(String name) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;.println(name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;骑马!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DanYiZhiZe {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         Person person = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         person.XiangMo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;孙悟空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         person.QianMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;猪八戒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         person.XingLi(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;沙和尚&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         person.QiMa(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;唐僧&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;孙悟空降魔！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;猪八戒牵白龙马!&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;沙和尚拿行李！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;唐僧骑马!&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要足够简单的逻辑，才可以在&lt;span&gt;代码上&lt;/span&gt;违反单一职责原则；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要类中方法数量足够少，才可以在&lt;span&gt;方法级别上&lt;/span&gt;违反单一职责原则。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 13:00:00 +0000</pubDate>
<dc:creator>霜天晓角—Megan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/meganhyy/p/8099206.html</dc:identifier>
</item>
<item>
<title>.NET作品集：linux下的.net mvc cms - 叶鹏</title>
<link>http://www.cnblogs.com/jqbird/p/8098334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jqbird/p/8098334.html</guid>
<description>&lt;p&gt;本程序是主要是用于企业网站开发的，也可以做博客程序，程序是从之前上一篇的.net 博客程序改进过来的，主要技术由webform转成.net mvc了，由于是很早之前的项目，12年还是mvc3版本，当然还是跑在linux下的。&lt;/p&gt;
&lt;h2 id=&quot;技术栈&quot;&gt;技术栈&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;.net framework 4.0&lt;/li&gt;
&lt;li&gt;sqlite 数据库&lt;/li&gt;
&lt;li&gt;mono linux 运行环境以及mono下的sqlite库&lt;/li&gt;
&lt;li&gt;razor 模板引擎&lt;/li&gt;
&lt;li&gt;dapper 轻量级orm框架&lt;/li&gt;
&lt;li&gt;vs2017 社区版本&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这次的开发工具比较新了吧，上次用vs2010发的，跨度比较大，这个项目之前也是在10下开发出来的，虽然用2017，其实没什么影响的。&lt;/p&gt;
&lt;p&gt;razor引擎比nvelocity的易用性高很多，而且跟后端集合的比较好。&lt;/p&gt;
&lt;p&gt;而且这次的项目完全使用dapper orm，整个数据库访问层操作看起来也清爽很多了。&lt;/p&gt;
&lt;h2 id=&quot;代码结构&quot;&gt;代码结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224162331443-281105605.png&quot; alt=&quot;代码结构&quot;/&gt;&lt;br/&gt;左侧主要分为三个文件夹，Jqpress.web是存放web路由入口、模板皮肤、静态文件，上传文件夹，后台管理程序通过Areas域管理来实现的，整个项目结构还是比较清晰的。&lt;/p&gt;
&lt;h2 id=&quot;路由设计&quot;&gt;路由设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224162657959-398039244.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;路由入口为HomeController这个文件，包括首页、产品列表，文章列表，文章内容等待，都是通过这个Controller来路由的，虽然功能比较多，但是代码量不到300行，业务逻辑处理基本都在service层。&lt;/p&gt;
&lt;p&gt;如下为一个列表界面的Action逻辑才20几行&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        public ActionResult Category(string pagename) 
        {
            var model = new PostListModel();
            CategoryInfo cate = _categoryService.GetCategory(pagename);
            model.Category = cate;
            if (cate != null)
            {
                int categoryId = cate.CategoryId;
                model.MetaKeywords = cate.CateName;
                model.MetaDescription = cate.Description;
                ViewBag.Title = cate.CateName;
                model.Url = ConfigHelper.SiteUrl + &quot;category/&quot; + Jqpress.Framework.Utils.StringHelper.SqlEncode(pagename) + &quot;/page/{0}&quot;;

                const int pageSize = 10;
                int count = 0;
                int pageIndex = PressRequest.GetInt(&quot;page&quot;, 1);
                int cateid = PressRequest.GetQueryInt(&quot;cateid&quot;, -1);
                int tagid = PressRequest.GetQueryInt(&quot;tagid&quot;, -1);
                if (cateid &amp;gt; 0)
                    pageIndex = pageIndex + 1;
                var cateids =categoryId+&quot;,&quot;+ _categoryService.GetCategoryList().FindAll(c =&amp;gt; c.ParentId == categoryId).Aggregate(string.Empty, (current, t) =&amp;gt; current + (t.CategoryId + &quot;,&quot;)).TrimEnd(',');
                var postlist = _postService.GetPostPageList(pageSize, pageIndex, out count, cateids.TrimEnd(','), tagid, -1, -1, -1, -1, -1,-1, &quot;&quot;, &quot;&quot;, &quot;&quot;);
                model.PageList.LoadPagedList(postlist);
                model.PostList = (List&amp;lt;PostInfo&amp;gt;)postlist;
            }
            model.IsDefault = 0;
            

            return View(model.Category.ViewName,model);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;模板引擎设计&quot;&gt;模板引擎设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224163243584-1312562996.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224173006568-1791258772.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模板引擎采用razor，不同的cms风格模板以文件夹的形式存放在Themes文件夹下,通过后端设置可以随意切换模板（此功能还在完善当中）。&lt;/p&gt;
&lt;h2 id=&quot;数据存储设计&quot;&gt;数据存储设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224163735615-568447981.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为轻量级的cms，当然不会用mysql或者sqlserver，依然坚定的使用sqlite，以上是通过dapper进行数据库操作，虽然没有微软增加的orm强大，但是可读性和操控性都是非常好的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224164701459-27334103.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为要支持linux，所以sqlite的操作类需要&lt;code&gt;using Mono.Data.Sqlite;&lt;/code&gt;&lt;br/&gt;，当然可以在windows下切换过来，上面我写的切换方式太粗暴了，学过设计模式的同学应该分分钟能够重构出来，切换windows和linux简直不要太方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224170703350-264992807.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;jq_category&lt;/code&gt; 分类及标签表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq_comments&lt;/code&gt; 评论表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq_links&lt;/code&gt; 友链及导航设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq_posts&lt;/code&gt; 文章表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq_sites&lt;/code&gt; 站点访问统计数字及文章、分类、数量统计表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq_users&lt;/code&gt; 账户表&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数据库结构跟之前的 博客程序没差别，只是部分表结构字段有所差别&lt;/p&gt;

&lt;h2 id=&quot;vs2017调试模式预览&quot;&gt;vs2017调试模式预览&lt;/h2&gt;
&lt;p&gt;cms首页&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224165016850-1657811660.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台登录，默认用户名admin，密码123456&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224165218506-2007036355.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台首页&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224165352162-1305665329.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文章列表&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224165456928-232080569.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文章编辑&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224165633771-1635828495.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;linux下的部署方式&quot;&gt;linux下的部署方式&lt;/h2&gt;
&lt;h2 id=&quot;mono&quot;&gt;mono&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171209224739669-240915517.png&quot; alt=&quot;mono&quot;/&gt;&lt;br/&gt;上图为我服务器上的mono安装信息。&lt;/p&gt;
&lt;h2 id=&quot;jexus&quot;&gt;jexus&lt;/h2&gt;
&lt;p&gt;linux下需要安装mono和jexus就可以运行起来，mono作为.net framework的linux运行环境，jexus作为web服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224180219365-500707975.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;jexus配置，因为我的服务器上还有其他语言的站点，所以没有直接采用jexus对外服务。&lt;/p&gt;
&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224180511256-524879828.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;nginx代理了jexus的81端口，此地方不是必选，但是Nginx作为常规的代理软件，可以在服务器上跑.net、php、java等，各司其职，百花齐放。&lt;/p&gt;
&lt;h2 id=&quot;bin文件夹说明&quot;&gt;bin文件夹说明&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224174826146-393656298.png&quot;/&gt;&lt;br/&gt;.net mvc3在 linux下的部署需要注意的是需要将项目下引用的dll都需要上传到bin目录下。并且还需要上传Microsoft.web.Infrastructure.dll，这个是发布mvc项目需要用的。可以对比下我webform下的Linux博客程序站点bin下只要引入Mono和Nvelocity这2个第三方dll，其他都是自己的业务程序，这个.net cms要的东西还挺多,下图是我的博客站点下的bin文件夹内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/94489/201712/94489-20171224175257100-614022173.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;linux服务器上的的.net-程序问题&quot;&gt;linux服务器上的的.net 程序问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;jexus不支持中文，所以文件上传的路径必须重写成字母加数字符号形式，&lt;/li&gt;
&lt;li&gt;jexus web服务器是默认对大小写敏感的，所以部署的时候一定要&lt;br/&gt;只需要把 jws这个脚本文件中的 “export MONO_IOMAP=...”这一句前边的“#”去掉，就可以不区分大小写了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robotbird/jqpress.cms&quot; class=&quot;uri&quot;&gt;https://github.com/robotbird/jqpress.cms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了防止部分同学无法访问Github，所以放oschina的gitee上了&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/robotbird/jqpress.cms&quot; class=&quot;uri&quot;&gt;https://gitee.com/robotbird/jqpress.cms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在开发这个cms的时候那时候.net core还没诞生，作为linux下的.net mvc项目还还是比较新颖的，只可惜没能好好的写代码，跑去做项目做产品去了，在这里开源出来缅怀写代码的岁月，如果对大家有用那最好不过了。&lt;br/&gt;如果对源码感兴趣可以联系qq:330296409&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 11:15:00 +0000</pubDate>
<dc:creator>叶鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jqbird/p/8098334.html</dc:identifier>
</item>
<item>
<title>jQuery 插件 Magnify 开发简介（仿 Windows 照片查看器） - 叙帝利</title>
<link>http://www.cnblogs.com/nzbin/p/8098461.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/8098461.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224222608537-2042708813.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因为一些特殊的业务需求，经过一个多月的蛰伏及思考，我开发了这款 jQuery 图片查看器插件 Magnify，它实现了 Windows 照片查看器的所有功能，比如模态窗的拖拽、调整大小、最大化，图片的缩放、旋转，平移、键盘控制等。插件的样式都是最基础的 CSS，定制非常容易，可以轻松修改成自己喜欢的样式。随后会陆续发布 React 及 Vue 相关版本的插件。本文主要介绍插件的特点及使用方法，而关于插件开发的细节将会在之后的具体文章中说明。&lt;/p&gt;
&lt;blockquote readability=&quot;1.6867469879518&quot;&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/nzbin/magnify&quot; target=&quot;_blank&quot;&gt;https://github.com/nzbin/magnify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Website:  &lt;a href=&quot;https://nzbin.github.io/magnify&quot; target=&quot;_blank&quot;&gt;https://nzbin.github.io/magnify&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;开发小记&lt;/h2&gt;
&lt;p&gt;由于最近工作繁忙，几乎每天都是晚上十点到家，然后开始编写插件，睡觉时已过凌晨，如今身心俱疲。因为没有找到相关的插件，所以很多问题都是绞尽脑汁独立思考，比如以鼠标为中心缩放图片、改变弹窗大小时对图片移动的限制、图片旋转之后的缩放、平移等问题，而开发插件最让人头疼的就是细节，甚至大部分时间是在修复单一功能的 bug 。&lt;/p&gt;
&lt;p&gt;另外，开发插件的最大难度不是功能实现，而是如何设计插件，如何让插件的使用更简单、更方便。关于如何设计插件并不是本篇文章的重点，我会在之后专门写一篇介绍插件设计思想的文章。&lt;/p&gt;
&lt;p&gt;插件所有的代码几乎都是在调整弹窗或者图片的 width、height、left、top ，所以兼容性问题不大，主要是 2D 旋转问题，IE 9 以下需要使用滤镜实现。为了方便调整样式，其中有很多相对位置的计算。&lt;/p&gt;
&lt;p&gt;Magnify 采用了文件分离的方式编写，使用 npm 插件打包，并没有使用新语法，也没有使用现在流行的打包工具。使用 npm 工具已经是项目开发打包发布的一个趋势。&lt;/p&gt;
&lt;h2&gt;演示&lt;/h2&gt;
&lt;p&gt;如果你不想点开网址查看示例的话，可以通过下面的 CodePen 查看插件效果，除了视窗的大小之外，两种方式没有任何区别：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;xpEvNp&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;A jQuery lightbox plugin to view images just like in Windows.&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/xpEvNp/&quot;&gt;A jQuery lightbox plugin to view images just like in Windows.&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你的网速和其他原因不能打开 CodePen 的话，可以查看下面的图片演示。&lt;/p&gt;
&lt;h2&gt;主要功能&lt;/h2&gt;
&lt;p&gt;Magnify 的功能可以参考 Windows 照片查看器，基本完成了可以实现的所有功能。&lt;/p&gt;
&lt;h3&gt;1.模态窗拖拽&lt;/h3&gt;
&lt;p&gt;如果图片尺寸不大于展示区域，通过图片展示区域也可以拖拽弹窗。这和 QQ 图片查看器的操作方式是相同的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224105600943-315893822.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.模态窗调整大小&lt;/h3&gt;
&lt;p&gt;目前的调整大小存在一点 bug，但不影响整体的使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224105615771-398385363.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.模态窗最大化&lt;/h3&gt;
&lt;p&gt;除了弹窗最大化，开发初期也设计了最小化的功能，但感觉有些鸡肋，所以暂时没有添加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224105628521-1664556924.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4.图片缩放&lt;/h3&gt;
&lt;p&gt;可以通过鼠标滚轮、按钮、键盘等操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224105640646-1350113054.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.图片旋转&lt;/h3&gt;
&lt;p&gt;目前的图片旋转功能还没有添加支持 IE9 以下版本的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224110822146-1582958436.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;6.键盘控制&lt;/h3&gt;
&lt;p&gt;Magnify 和 Windows 照片查看器的按键是一样的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;←&lt;/code&gt; 上一张&lt;/li&gt;
&lt;li&gt;&lt;code&gt;→&lt;/code&gt; 下一张&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; 放大&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; 缩小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + alt + 0&lt;/code&gt; 实际尺寸&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ,&lt;/code&gt; 向左旋转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + .&lt;/code&gt; 向右旋转&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;7.全屏显示&lt;/h3&gt;
&lt;p&gt;Magnify 的全屏显示只实现了基本的展示功能，还没有实现幻灯片自动轮播的功能。全屏环境下使用键盘控制图片。&lt;/p&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;Magnify 的使用和其他大多数 lightbox 插件的用法并没有两样，如果你习惯了其它插件的使用，使用 Magnify 也不会有任何障碍。&lt;/p&gt;
&lt;h3&gt;1.需要引用的文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/path/to/magnify.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/path/to/jquery.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/path/to/jquery.magnify.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Magnify 默认使用 font-awesome 的图标，所以需要引用 font-awesome 的 css 文件。如果你想使用其它图标，可以修改 options 的 icons 参数。在之后的版本中，我可能会添加定制的字体图标文件或者使用 svg 图标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.HTML 结构&lt;/h3&gt;
&lt;p&gt;Magnify 默认使用以下结构，这样的结构可以做兼容处理，也是大多数 lightbox 使用的结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;big-1.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;small-1.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;big-2.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;small-2.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;big-3.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;small-3.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以使用下面更简洁的结构&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;big-1.jpg&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;small-1.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;big-2.jpg&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;small-2.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;data-magnify&lt;/span&gt;&lt;span&gt;=&quot;gallery&quot;&lt;/span&gt;&lt;span&gt; data-src&lt;/span&gt;&lt;span&gt;=&quot;big-3.jpg&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;small-3.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Magnify 的 HTML 结构包含以下几个选项&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加 &lt;code&gt;data-src&lt;/code&gt; 属性可以链接到大图。如果在 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签中使用，它会覆盖 &lt;code&gt;href&lt;/code&gt; 属性的值。&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;data-caption&lt;/code&gt; 属性可以显示标题。如果你不使用这个属性，插件会显示 URL 中的图片名。&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;data-group&lt;/code&gt; 属性可以对图片分组。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3.初始化插件&lt;/h3&gt;
&lt;p&gt;如果在 HTML 中添加 &lt;code&gt;data-magnify&lt;/code&gt; 属性，插件会自动初始化。&lt;/p&gt;
&lt;p&gt;手动初始化插件的方法和所有 jQuery 插件一样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$('[data-magnify=gallery]').magnify(options);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;参数配置&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
options =&lt;span&gt; {
    draggable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    resizable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    movable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    keyboard: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    title: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    modalWidth: &lt;/span&gt;320&lt;span&gt;,
    modalHeight: &lt;/span&gt;320&lt;span&gt;,
    fixedContent: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    fixedModalSize: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    initMaximized: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    gapThreshold: &lt;/span&gt;0.02&lt;span&gt;,
    ratioThreshold: &lt;/span&gt;0.1&lt;span&gt;,
    minRatio: &lt;/span&gt;0.1&lt;span&gt;,
    maxRatio: &lt;/span&gt;16&lt;span&gt;,
    headToolbar: [
      &lt;/span&gt;'maximize'&lt;span&gt;,
      &lt;/span&gt;'close'&lt;span&gt;
    ],
    footToolbar: [
      &lt;/span&gt;'zoomIn'&lt;span&gt;,
      &lt;/span&gt;'zoomOut'&lt;span&gt;,
      &lt;/span&gt;'prev'&lt;span&gt;,
      &lt;/span&gt;'fullscreen'&lt;span&gt;,
      &lt;/span&gt;'next'&lt;span&gt;,
      &lt;/span&gt;'actualSize'&lt;span&gt;,
      &lt;/span&gt;'rotateRight'&lt;span&gt;
    ],
    icons: {
      maximize: &lt;/span&gt;'fa fa-window-maximize'&lt;span&gt;,
      close: &lt;/span&gt;'fa fa-close'&lt;span&gt;,
      zoomIn: &lt;/span&gt;'fa fa-search-plus'&lt;span&gt;,
      zoomOut: &lt;/span&gt;'fa fa-search-minus'&lt;span&gt;,
      prev: &lt;/span&gt;'fa fa-arrow-left'&lt;span&gt;,
      next: &lt;/span&gt;'fa fa-arrow-right'&lt;span&gt;,
      fullscreen: &lt;/span&gt;'fa fa-photo'&lt;span&gt;,
      actualSize: &lt;/span&gt;'fa fa-arrows-alt'&lt;span&gt;,
      rotateLeft: &lt;/span&gt;'fa fa-rotate-left'&lt;span&gt;,
      rotateRight: &lt;/span&gt;'fa fa-rotate-right'&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于插件参数的具体含义，我就不在此复制黏贴了，请大家参考 &lt;a href=&quot;https://nzbin.github.io/magnify&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt; 的详细说明。如有问题，可以在此留言。&lt;/p&gt;
&lt;h2&gt;自定义样式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201712/999445-20171224222645350-1450225213.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为插件的样式比较简单，所以修改起来也非常容易。除了 Windows 照片查看器，QQ 的图片查看器也非常的高大上。我们只要简单修改就可以实现 QQ 图片查看器的效果，但是部分功能比如缩略图还没有实现。以下是实时演示：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;GyNpEr&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Magnify with QQ viewer style&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/GyNpEr/&quot;&gt;Magnify with another viewer style&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;面对这样的图片查看器足以令人心旷神怡~&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;目前插件整体已经趋于完善，但仍然有很多需要修改及添加的细节，尤其对移动端的支持，大家可以 star 一下随时关注项目的更新动态。关于插件的介绍就不再赘述了，如果大家发现了 Bug 或者有更好的建议，可以在 &lt;a href=&quot;https://github.com/nzbin/magnify&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; 中提问，也可以在此留言，大家的支持是我前进的最大动力！如果这款插件对你有帮助或者你在项目中使用了这款插件，欢迎留言告知！&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 24 Dec 2017 11:06:00 +0000</pubDate>
<dc:creator>叙帝利</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/8098461.html</dc:identifier>
</item>
</channel>
</rss>