<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>SpringCloud实战-Hystrix请求熔断与服务降级 - 蜗居在小黑屋操控世界</title>
<link>http://www.cnblogs.com/huangjuncong/p/9026949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/9026949.html</guid>
<description>&lt;p&gt;我们知道大量请求会阻塞在Tomcat服务器上,影响其它整个服务.在复杂的分布式架构的应用程序有很多的依赖,都会不可避免地在某些时候失败.高并发的依赖失败时如果没有隔离措施,当前应用服务就有被拖垮的风险.&lt;br/&gt;Spring Cloud Netflix Hystrix就是隔离措施的一种实现,可以设置在某种超时或者失败情形下断开依赖调用或者返回指定逻辑,从而提高分布式系统的稳定性.&lt;/p&gt;
&lt;p&gt;生活中举个例子，如电力过载保护器，当电流过大的的时候，出问题，过载器会自动断开，从而保护电器不受烧坏。因此Hystrix请求熔断的机制跟电力过载保护器的原理很类似。&lt;/p&gt;
&lt;p&gt;比如：订单系统请求库存系统，结果一个请求过去，因为各种原因，网络超时，在规定几秒内没反应，或者服务本身就挂了，这时候更多的请求来了，不断的请求库存服务，不断的创建线程，因为没有返回，也就资源没有释放，&lt;/p&gt;
&lt;p&gt;这也导致了系统资源被耗尽，你的服务奔溃了，这订单系统好好的，你访问了一个可能有问题的库存系统，结果导致你的订单系统也奔溃了，你再继续调用更多的依赖服务，可会会导致更多的系统奔溃，这时候Hystrix可以实现快速失败，&lt;/p&gt;
&lt;p&gt;如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作进而导致资源耗尽。这时候Hystrix进行FallBack操作来服务降级，&lt;/p&gt;
&lt;p&gt;Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.通知后面的请求告知这服务暂时不可用了。&lt;/p&gt;
&lt;p&gt;使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。Hystrix熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511214309133-899781909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h3 id=&quot;23-hystrix设计原则&quot;&gt;Hystrix设计原则&lt;/h3&gt;
&lt;p&gt;　　1.防止单个服务的故障，耗尽整个系统服务的容器（比如tomcat）的线程资源，避免分布式环境里大量级联失败。通过第三方客户端访问（通常是通过网络）依赖服务出现失败、拒绝、超时或短路时执行回退逻辑&lt;/p&gt;
&lt;p&gt;       2.用快速失败代替排队(每个依赖服务维护一个小的线程池或信号量，当线程池满或信号量满，会立即拒绝服务而不会排队等待)和优雅的服务降级；当依赖服务失效后又恢复正常，快速恢复&lt;/p&gt;
&lt;p&gt;       3.提供接近实时的监控和警报，从而能够快速发现故障和修复。监控信息包括请求成功，失败（客户端抛出的异常），超时和线程拒绝。如果访问依赖服务的错误百分比超过阈值,断路器会跳闸，此时服务会在一段时间内停止对特定服务的所有请求&lt;/p&gt;
&lt;p&gt;       4.将所有请求外部系统（或请求依赖服务）封装到HystrixCommand或HystrixObservableCommand对象中，然后这些请求在一个独立的线程中执行。使用隔离技术来限制任何一个依赖的失败对系统的影响。每个依赖服务维护一个小的线程池（或信号量），当线程池满或信号量满，会立即拒绝服务而不会排队等待&lt;/p&gt;

&lt;h3 id=&quot;hystrix特性&quot;&gt;Hystrix特性&lt;/h3&gt;
&lt;p&gt;　　1.请求熔断： 当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN).&lt;/p&gt;
&lt;p&gt;　　　 这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力.&lt;/p&gt;
&lt;p&gt;　　2.服务降级：Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.告知后面的请求服务不可用了，不要再来了。&lt;/p&gt;
&lt;p&gt;　　3.依赖隔离(采用舱壁模式，Docker就是舱壁模式的一种)：在Hystrix中, 主要通过线程池来实现资源隔离. 通常在使用的时候我们会根据调用的远程服务划分出多个线程池.比如说，一个服务调用两外两个服务，你如果调用两个服务都用一个线程池，那么如果一个服务卡在哪里，资源没被释放&lt;/p&gt;
&lt;p&gt;　　　后面的请求又来了，导致后面的请求都卡在哪里等待，导致你依赖的A服务把你卡在哪里，耗尽了资源，也导致了你另外一个B服务也不可用了。这时如果依赖隔离，某一个服务调用A B两个服务，如果这时我有100个线程可用，我给A服务分配50个，给B服务分配50个，这样就算A服务挂了，&lt;/p&gt;
&lt;p&gt;　　　我的B服务依然可以用。&lt;/p&gt;
&lt;p&gt;　　4.请求缓存：比如一个请求过来请求我userId=1的数据，你后面的请求也过来请求同样的数据，这时我不会继续走原来的那条请求链路了，而是把第一次请求缓存过了，把第一次的请求结果返回给后面的请求。&lt;/p&gt;
&lt;p&gt;　　5.请求合并：我依赖于某一个服务，我要调用N次，比如说查数据库的时候，我发了N条请求发了N条SQL然后拿到一堆结果，这时候我们可以把多个请求合并成一个请求，发送一个查询多条数据的SQL的请求，这样我们只需查询一次数据库，提升了效率。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Hystrixl流程图如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511230432617-597437297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hystrix流程说明:&lt;/strong&gt;&lt;/p&gt;

&lt;div readability=&quot;20&quot;&gt;
&lt;p&gt;   　1:每次调用创建一个新的HystrixCommand,把依赖调用封装在run()方法中.&lt;br/&gt;　　2:执行execute()/queue做同步或异步调用.&lt;br/&gt;　　3:判断熔断器(circuit-breaker)是否打开,如果打开跳到步骤8,进行降级策略,如果关闭进入步骤.&lt;br/&gt;　　4:判断线程池/队列/信号量是否跑满，如果跑满进入降级步骤8,否则继续后续步骤.&lt;br/&gt;　　5:调用HystrixCommand的run方法.运行依赖逻辑&lt;br/&gt;　　5a:依赖逻辑调用超时,进入步骤8.&lt;br/&gt;　　6:判断逻辑是否调用成功&lt;br/&gt;　　6a:返回成功调用结果&lt;br/&gt;　　6b:调用出错，进入步骤8.&lt;br/&gt;　　7:计算熔断器状态,所有的运行状态(成功, 失败, 拒绝,超时)上报给熔断器，用于统计从而判断熔断器状态.&lt;br/&gt;　　8:getFallback()降级逻辑.以下四种情况将触发getFallback调用：&lt;br/&gt;　　　　(1):run()方法抛出非HystrixBadRequestException异常。&lt;br/&gt;　　　　(2):run()方法调用超时&lt;br/&gt;　　　　(3):熔断器开启拦截调用&lt;br/&gt;　　　　(4):线程池/队列/信号量是否跑满&lt;br/&gt;　　8a:没有实现getFallback的Command将直接抛出异常&lt;br/&gt;　　8b:fallback降级逻辑调用成功直接返回&lt;br/&gt;　　8c:降级逻辑调用失败抛出异常&lt;br/&gt;　　9:返回执行成功结果&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;这里接着前面的Ribbon进行Hystrix集成。说白了你想对一个请求进行熔断，必然不能让客户直接去调用那个请求，你必然要要对别人的请求进行包装一层和拦截，才能做点手脚，比如进行熔断，所以说要在Ribbon上动手脚。因为它是请求发起的地方。&lt;/p&gt;
&lt;p&gt;我们刚开始请求一个服务，为了负载均衡进行了拦截一次，现在我们要进行熔断，所以必须跟Ribbon集成一次，再进行请求拦截来熔断。&lt;/p&gt;

&lt;p&gt;下面开始进行实战：&lt;/p&gt;
&lt;p&gt;1.引入Hystrix相关的依赖如下依赖所示：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　　　&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-hystrix&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-hystrix-dashboard&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;2.在启动类中加入@EnableCircuitBreaker注解，表示允许断路器。如下代码所示：&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package hjc;

import com.netflix.loadbalancer.IRule;
import com.netflix.loadbalancer.RandomRule;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
@EnableDiscoveryClient&lt;br/&gt;//允许断路器
@EnableCircuitBreaker
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RibbonApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(RibbonApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IRule ribbonRule(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RandomRule();
    }

    @Bean
    @LoadBalanced
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplate();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;2.现在为了代码比较清晰一点，我们需要在先前的Ribbon模块进行新建一个service&lt;/p&gt;

&lt;div readability=&quot;21.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/9.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;
&lt;br/&gt;　　//请求熔断注解，当服务出现问题时候会执行fallbackMetho属性的名为helloFallBack的方法
    @HystrixCommand(fallbackMethod &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;helloFallBack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloService() throws ExecutionException, InterruptedException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,String.&lt;span&gt;class&lt;/span&gt;).getBody();&lt;br/&gt;　　}&lt;/pre&gt;
&lt;pre&gt;
　　public String helloFallBack(){&lt;br/&gt;　　return &quot;error&quot;;&lt;br/&gt;　　}
&lt;/pre&gt;
&lt;pre&gt;
&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Controller端代码修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ConsumerController {&lt;/pre&gt;
&lt;pre&gt;
　　@Autowired&lt;br/&gt;　　private HelloService helloService;&lt;/pre&gt;
&lt;pre&gt;
　　@RequestMapping(&quot;/consumer&quot;)&lt;br/&gt;　　public String helloConsumer() throws ExecutionException, InterruptedException {&lt;br/&gt;　　　　return helloService.helloService();&lt;br/&gt;　　}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;先把前面的两个Eureka注册中心，和前面的provider1,和provider2模块启动起来。&lt;/p&gt;
&lt;p&gt;接着再把Ribbon模块启动起来，在浏览器上输入localhost:8082/consumer，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225351116-446870171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt; 不管敲几遍，还是出现hello1,hello2,因为有前面的轮询算法。&lt;/p&gt;
&lt;p&gt;现在如果我们突然将provider2模块断开，即停止下来，再来在浏览器上输入localhost:8082/consumer，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225338504-789475550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 再进行一次localhost:8082/consumer，运行结果，就变成如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225438009-1649831144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们看到了当轮询到第二个服务提供者的时候，即provider2,由于provider2被我们停止了，导致服务不可访问了，返回我们原先在代码中定义的服务降级后的结果error回来，当后面还有请求再也不会轮询到provider2了，&lt;/p&gt;
&lt;p&gt;网页上永远出现hello1。&lt;/p&gt;

&lt;p&gt;到这里简单演示了用Hystrix的注解@HystrixCommand(fallbackMethod = &quot;helloFallBack&quot;)，来实现熔断和服务降级。这只是表面的东西而已，根本不清楚他背后的原理，&lt;/p&gt;
&lt;p&gt;因此这里进入注解@HystrixCommand(fallbackMethod = &quot;helloFallBack&quot;)的背后原理来实现熔断和服务降级。用我们自己手写的代码去实现熔断和服务降级。那么Hystrix给我们留下了什么样的接口呢？可以让我们自己手动更灵活的去实现熔断和服务降级。&lt;/p&gt;
&lt;p&gt;Hystrix给我们提供了HystrixCommand类，让我们去继承它，去实现灵活的熔断和服务降级。&lt;/p&gt;
&lt;p&gt;如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloServiceCommand extends HystrixCommand&amp;lt;String&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; HelloServiceCommand(HystrixCommandGroupKey group) {
        &lt;br/&gt;　　　　　　super(group);
        &lt;/span&gt;&lt;span&gt;
    }
　　//服务调用
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String run() throws Exception {
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(Thread.currentThread().getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();
    }
　　//服务降级时所调用的Fallback()
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String getFallback() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到上面的代码，问题又来了，我们知道我们继承HystrixCommand类的HelloServiceCommand 是没有交由Spring进行管理的，那么也就没法进行RestTemplate注入了。&lt;/p&gt;
&lt;p&gt;那么我们怎么做的呢？这时候读者要转过弯来了，我们为什么不通过Controller先注入，然后调用Service层的时候，通过HelloServiceCommand的构造方法注入呢？因此问题就迎刃而解了。&lt;/p&gt;
&lt;p&gt;修改后的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package hjc.consumer;

import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import org.springframework.web.client.RestTemplate;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/9.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloServiceCommand extends HystrixCommand&amp;lt;String&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; HelloServiceCommand(String commandGroupKey,RestTemplate restTemplate) {
        super(HystrixCommandGroupKey.Factory.asKey(commandGroupKey));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.restTemplate =&lt;span&gt; restTemplate;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String run() throws Exception {
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(Thread.currentThread().getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String getFallback() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller层的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/8.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerController {
    

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HelloService helloService;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;  RestTemplate restTemplate;

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/consumer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer() throws ExecutionException, InterruptedException {

        HelloServiceCommand command &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HelloServiceCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,restTemplate);
        String result &lt;/span&gt;=&lt;span&gt; command.execute();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;　　}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里我们要注意一下，虽然我们在这里new了个HelloServiceCommand，但是并没有调用HelloServiceCommand的方法，而是用command.execute()；方法来手工执行的。&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;接着再把Ribbon模块启动起来，在浏览器上输入localhost:8082/consumer，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225351116-446870171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt; 不管敲几遍，还是出现hello1,hello2,因为有前面的轮询算法。&lt;/p&gt;
&lt;p&gt;现在如果我们突然将provider2模块断开，即停止下来，再来在浏览器上输入localhost:8082/consumer，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225338504-789475550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 再进行一次localhost:8082/consumer，运行结果，就变成如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180511225438009-1649831144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们看到了当轮询到第二个服务提供者的时候，即provider2,由于provider2被我们停止了，导致服务不可访问了，返回我们原先在代码中定义的服务降级后的结果error回来，当后面还有请求再也不会轮询到provider2了，&lt;/p&gt;
&lt;p&gt;网页上永远出现hello1。&lt;/p&gt;

&lt;p&gt;那么问题又来了，restTemplate.getForEntity(&quot;http://HELLO-SERVICE/hello&quot;,String.class).getBody();这是阻塞式的，因为这是阻塞式的，如果后面还有代码，必须等到网络请求restTemplate.getForEntity(&quot;http://HELLO-SERVICE/hello&quot;,String.class).getBody();返回结果后，你后面的代码才会执行。&lt;/p&gt;
&lt;p&gt;如果此刻，有一个请求过来，通过Ribbon客户端进来了，Ribbon客户端调用了三个服务，每一服务执行的时间都是2秒钟，那么这三个服务都是用阻塞IO来执行的话，那么耗时是2+2+2=6，一共就花了6秒钟。那么如果我们使用异步来执行的话，花费的时间就是这三个服务中&lt;/p&gt;
&lt;p&gt;哪一个耗时长就是总耗时时间，比如，此时耗时最多的一个服务是3秒钟，那么总共耗时就花了3秒钟。那么异步IO是什么意思呢？就是请求发出去以后，主线程不会在原地等着，会继续往下执行我的主线程，什么时候返回结果，我就什么时候过去取出来。等着三个服务执行完了我就一次性把结果取&lt;/p&gt;
&lt;p&gt;出来。&lt;/p&gt;
&lt;p&gt;非阻塞式IO有两个分别是：Future将来式，Callable回调式&lt;/p&gt;
&lt;p&gt;1.Future将来式：就是说你用Future将来式去请求一个网络IO之类的任务，它会一多线程的形式去实现，主线程不必卡死在哪里等待，等什么时候需要结果就通过Future的get()方法去取，不用阻塞。&lt;/p&gt;
&lt;p&gt;2.Callable回调式：预定义一个回调任务，Callable发出去的请求，主线程继续往下执行，等你请求返回结果执行完了，会自动调用你哪个回调任务。&lt;/p&gt;

&lt;p&gt;好了，那么代码如何修改呢？其实HelloServiceCommand类几面不用变，只需要改变一下在Controller层的command的调用方式即可，command的叫用方式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Future&amp;lt;String&amp;gt; queue =&lt;span&gt; command.queue();
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; queue.&lt;span&gt;get&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重启Ribbon模块，结果跟上面一样。&lt;/p&gt;

&lt;p&gt;那么Future的注解方式如何调用呢？代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/9.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;

    @HystrixCommand(fallbackMethod &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;helloFallBack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloService() throws ExecutionException, InterruptedException {

        Future&lt;/span&gt;&amp;lt;String&amp;gt; future = &lt;span&gt;new&lt;/span&gt; AsyncResult&amp;lt;String&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String invoke() {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();
            }
        };
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; future.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
    }&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
　　public String helloFallBack(){&lt;br/&gt;　　return &quot;error&quot;;&lt;br/&gt;　　}
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;p&gt;}&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果跟上面的一样。&lt;/p&gt;

&lt;p&gt;那么接下来我们又有另外一个需求就是，我发多个请求出去请求多个服务，我需要把请求结果汇总起来，一起返回给我，上面的例子，什么同步异步都不太好办。很麻烦，要写N个Future。&lt;/p&gt;

&lt;p&gt;这时候Hystrix又给我们提供了另外一种模式HystrixObservableCommand来让我们继承这个类，其实这种模式就运用了Java的RX编程中的观察者模式，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180512150731405-1833170934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 接下来我们新建一个名为HelloServiceObserveCommand的类，来继承Hystrix给我们提供的HystrixObservableCommand类，同样HelloServiceObserveCommand类也不是交由Spring管理的，需要我们通过Controller层注入RestTemplate，放在构造方法来注入，代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package hjc.consumer;

import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixObservableCommand;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import rx.Observable;
import rx.Subscriber;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/10.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloServiceObserveCommand extends HystrixObservableCommand&amp;lt;String&amp;gt;&lt;span&gt;{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; HelloServiceObserveCommand(String commandGroupKey, RestTemplate restTemplate) {
        super(HystrixCommandGroupKey.Factory.asKey(commandGroupKey));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.restTemplate =&lt;span&gt; restTemplate;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Observable&amp;lt;String&amp;gt;&lt;span&gt; construct() {&lt;br/&gt;　　　　　　//观察者订阅网络请求事件
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Observable.create(&lt;span&gt;new&lt;/span&gt; Observable.OnSubscribe&amp;lt;String&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; call(Subscriber&amp;lt;? super String&amp;gt;&lt;span&gt; subscriber) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;subscriber.isUnsubscribed()){
                        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        String result &lt;/span&gt;= restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();&lt;br/&gt;　　　　　　　　　　　　　　//这个方法监听方法，是传递结果的，请求多次的结果通过它返回去汇总起来。
                        subscriber.onNext(result);
                        String result1 &lt;/span&gt;= restTemplate.getForEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://HELLO-SERVICE/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();&lt;br/&gt;　　　　　　　　　　　　　　//这个方法是监听方法，传递结果的
                        subscriber.onNext(result1);
                        subscriber.onCompleted();
                    }
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                    subscriber.onError(e);
                }
            }
        });
    }
　　//服务降级Fallback
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Observable&amp;lt;String&amp;gt;&lt;span&gt; resumeWithFallback() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Observable.create(&lt;span&gt;new&lt;/span&gt; Observable.OnSubscribe&amp;lt;String&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; call(Subscriber&amp;lt;? super String&amp;gt;&lt;span&gt; subscriber) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;subscriber.isUnsubscribed()) {
                        subscriber.onNext(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        subscriber.onCompleted();
                    }
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                    subscriber.onError(e);
                }
            }
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller层调用如下代码所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/8.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerController {



    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;  RestTemplate restTemplate;

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/consumer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer() throws ExecutionException, InterruptedException {

        List&lt;/span&gt;&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        HelloServiceObserveCommand command &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HelloServiceObserveCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,restTemplate);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;热执行&lt;/span&gt;
        Observable&amp;lt;String&amp;gt; observable =&lt;span&gt; command.observe();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;冷执行
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Observable&amp;lt;String&amp;gt; observable =command.toObservable();&lt;/span&gt;
　　　　//订阅&lt;span&gt;
        observable.subscribe(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Observer&amp;lt;String&amp;gt;&lt;span&gt;() {&lt;br/&gt;　　　　　　　　//请求完成的方法
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCompleted() {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;会聚完了所有查询请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
　　　　　　
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onError(Throwable throwable) {
                throwable.printStackTrace();
            }
　　　　　　　　//订阅调用事件，结果会聚的地方，用集合去装返回的结果会聚起来。
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onNext(String s) {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结果来了.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                list.add(s);
            }
        });

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.toString();

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180512152159719-956192281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;前面的例子有异步和同步这两种方式，这里HystrixObservableCommand也有两个中执行方式，分别是，冷执行，和热执行&lt;/p&gt;
&lt;p&gt;刚刚HystrixObservableCommand中的command.observe()热执行方式。&lt;/p&gt;
&lt;p&gt;什么是热执行方式呢？&lt;/p&gt;
&lt;p&gt;　　所谓的热执行就是不管你事件有没有注册完(onCompleted()，onError，onNext这三个事件注册)，就去执行我的业务方法即(HystrixObservableCommand实现类中的construct()方法).我们可以在上面的代码中sleep（10000）一下清楚看出热执行，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/8.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerController {



    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;  RestTemplate restTemplate;

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/consumer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer() throws ExecutionException, InterruptedException {

        List&lt;/span&gt;&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        HelloServiceObserveCommand command &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HelloServiceObserveCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,restTemplate);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;热执行&lt;/span&gt;
        Observable&amp;lt;String&amp;gt; observable =&lt;span&gt; command.observe();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;冷执行
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        Observable&amp;lt;String&amp;gt; observable =command.toObservable();&lt;br/&gt;　　　　Thread.sleep(10000);
　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅&lt;/span&gt;
        observable.subscribe(&lt;span&gt;new&lt;/span&gt; Observer&amp;lt;String&amp;gt;&lt;span&gt;() {
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求完成的方法&lt;/span&gt;
&lt;span&gt;            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCompleted() {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;会聚完了所有查询请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
　　　　　　
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onError(Throwable throwable) {
                throwable.printStackTrace();
            }
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅调用事件，结果会聚的地方，用集合去装返回的结果会聚起来。&lt;/span&gt;
&lt;span&gt;            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onNext(String s) {
                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结果来了.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                list.add(s);
            }
        });

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.toString();

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果可以看到，是先执行了业务方法，在卡顿了10秒后才时间监听方法才执行，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180512153559096-1618581106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;过10秒后事件监听方法才执行，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180512153637467-1071637844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;什么是冷执行呢？&lt;/p&gt;
&lt;p&gt;　　所谓的冷执行就是，先进行事件监听方法注册完成后，才执行业务方法&lt;/p&gt;
&lt;p&gt;接下来我们把Controller中的Observable&amp;lt;String&amp;gt; observable = command.observe();改成冷执行Observable&amp;lt;String&amp;gt; observable =command.toObservable();&lt;/p&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;　　先卡顿了10S后，才出现如下的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180512154017724-1813892840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了，现在我们有回到注解的方式层面上去实现多请求，将结果会聚起来，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45.5&quot;&gt;
&lt;pre readability=&quot;16&quot;&gt;
/**&lt;br/&gt;* Created by cong on 2018/5/9.&lt;br/&gt;*/&lt;br/&gt;@Service&lt;br/&gt;public class HelloService {&lt;p&gt;@Autowired&lt;br/&gt;private RestTemplate restTemplate;&lt;/p&gt;&lt;p&gt;//多请求结果会聚的注解写法，调用还是跟手写会聚一样调用&lt;br/&gt;//ObservableExecutionMode.EAGER热执行  ObservableExecutionMode.LAZY冷执行&lt;br/&gt;@HystrixCommand(fallbackMethod = &quot;helloFallBack&quot;,observableExecutionMode = ObservableExecutionMode.LAZY)&lt;br/&gt;public Observable&amp;lt;String&amp;gt; helloService() throws ExecutionException, InterruptedException {&lt;br/&gt;return Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() {&lt;br/&gt;@Override&lt;br/&gt;public void call(Subscriber&amp;lt;? super String&amp;gt; subscriber) {&lt;br/&gt;try {&lt;br/&gt;if (!subscriber.isUnsubscribed()){&lt;br/&gt;String result = restTemplate.getForEntity(&quot;http://HELLO-SERVICE/hello&quot;, String.class).getBody();&lt;br/&gt;subscriber.onNext(result);&lt;br/&gt;String result1 = restTemplate.getForEntity(&quot;http://HELLO-SERVICE/hello&quot;, String.class).getBody();&lt;br/&gt;subscriber.onNext(result1);&lt;br/&gt;subscriber.onCompleted();&lt;br/&gt;}&lt;br/&gt;} catch (Exception e) {&lt;br/&gt;subscriber.onError(e);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;public String helloFallBack(){&lt;br/&gt;return &quot;error&quot;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller层直接调用就行了，运行结果跟上面例子的结果都是一样的，这里就不演示了。&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 07:46:00 +0000</pubDate>
<dc:creator>蜗居在小黑屋操控世界</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/9026949.html</dc:identifier>
</item>
<item>
<title>Python并发编程之创建多线程的几种方法（二） - 站在两个世界的边缘</title>
<link>http://www.cnblogs.com/wongbingming/p/9028851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wongbingming/p/9028851.html</guid>
<description>&lt;div class=&quot;output_wrapper&quot; id=&quot;output_wrapper_id&quot; readability=&quot;24&quot;&gt;
&lt;p&gt;大家好，&lt;code&gt;并发编程&lt;/code&gt; 进入第二篇。&lt;/p&gt;
&lt;p&gt;今天的内容会比较基础，主要是为了让新手也能无障碍地阅读，所以还是要再巩固下基础。学完了基础，你们也就能很顺畅地跟着我的思路理解以后的文章。&lt;/p&gt;
&lt;h2 id=&quot;h&quot;&gt;&lt;span&gt;本文目录&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;学会使用函数创建多线程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;学会使用类创建多线程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;多线程：必学函数讲解&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;经过总结，Python创建多线程主要有如下两种方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;类&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来，我们就来揭开多线程的神秘面纱。&lt;/p&gt;
&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 学会使用函数创建多线程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在Python3中，Python提供了一个内置模块 &lt;code&gt;threading.Thread&lt;/code&gt;，可以很方便地让我们创建多线程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;threading.Thread()&lt;/code&gt; 一般接收两个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;线程函数名：要放置线程让其后台执行的函数，由我们自已定义，注意不要加&lt;code&gt;()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span&gt;线程函数的参数：线程函数名所需的参数，以元组的形式传入。若不需要参数，可以不指定。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;举个例子&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Thread&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Python&quot;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, name)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;thread_01 = Thread(target=main)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 12 May 2018 07:35:00 +0000</pubDate>
<dc:creator>站在两个世界的边缘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wongbingming/p/9028851.html</dc:identifier>
</item>
<item>
<title>django项目部署上线 - python热爱者</title>
<link>http://www.cnblogs.com/pythonedu/p/9028827.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythonedu/p/9028827.html</guid>
<description>&lt;div readability=&quot;73.409410892923&quot;&gt;
&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;完善的django项目上线，有很多种上线的方法，比如apache, uwsgi, nginx等。这里只介绍2种，一种是django自带的，另外一种则是nginx + uwsgi完成介绍。这里的系统环境采用的是ubantu系统， python环境采用的是python3, django环境采用1.11&lt;/p&gt;
&lt;h3&gt;一、自带的部署功能&lt;/h3&gt;
&lt;p&gt;数据库迁移：&lt;br/&gt;如果django项目中的数据是在本地的mysql中，需要将它的数据迁移到远程连接的数据库中。使用navicat操作， 在工具下拉列表中有一个数据传输按钮&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;258&quot; data-height=&quot;103&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-e0a7734bcdf23f9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/258&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-e0a7734bcdf23f9a.png&quot; data-original-width=&quot;258&quot; data-original-height=&quot;103&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;6869&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;进入后，配置好，点击下一步就好&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;866&quot; data-height=&quot;232&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-1a0c1b5d99422209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-1a0c1b5d99422209.png&quot; data-original-width=&quot;866&quot; data-original-height=&quot;232&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;11085&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;1. 环境配置&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;更新安装包： sudo apt update&lt;/li&gt;
&lt;li&gt;下载mysql : apt install mysql-server mysql-client&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;2. 设置远程访问mysql:&lt;/h4&gt;
&lt;p&gt;（1） 查找 mysql.conf， 一般在/etc/mysql/mysql.conf.d目录下&lt;br/&gt;find / -name mysql.cnf&lt;br/&gt;（2）注释掉mysql.cnf文件中bind.conf.d，使外网也可以访问数据库&lt;br/&gt;vim /etc/mysql/mysql.conf.d/mysqld.cnf&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;719&quot; data-height=&quot;164&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-02b7ed0b5ab75af3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-02b7ed0b5ab75af3.png&quot; data-original-width=&quot;719&quot; data-original-height=&quot;164&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;11915&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;QQ图片20180512085640.png&lt;/p&gt;
&lt;/div&gt;
&lt;br/&gt;（3）设置mysql数据库的用户密码&lt;br/&gt;设置： GRANT ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;&lt;br/&gt;刷新操作：flush privileges;

&lt;h4&gt;3. 修改django中的配置文件&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;修改settings.py&lt;br/&gt;（1） 设置DEBUG=FALSE, ALLOWED_HOST = ['&lt;em&gt;&lt;em&gt;']&lt;br/&gt;&lt;/em&gt;&lt;/em&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;279&quot; data-height=&quot;160&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-3008de379decb48a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/279&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-3008de379decb48a.png&quot; data-original-width=&quot;279&quot; data-original-height=&quot;160&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;7430&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;em&gt;&lt;br/&gt;如果上线的时候出现500,502错误等，可以将DEBUG=False设置为DEBUG=True,这时候你就可以在浏览器中看到具体的错误，然后进行调试&lt;br/&gt;（2）&lt;br/&gt;静态文件的STARC的路径配置&lt;br/&gt;STATIC_ROOT = os.path.join(BASE_DIR, 'static')&lt;br/&gt;![image.png](&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F10914545-f44323417d3ce602.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://upload-images.jianshu.io/upload_images/10914545-f44323417d3ce602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&lt;/a&gt;&lt;br/&gt;(3)修改工程urls.py配置&lt;br/&gt;导入serve包：&lt;br/&gt;from django.views.static import serve&lt;br/&gt;在路由中加入static的路由地址：&lt;br/&gt;url(r'^static/(?P&amp;lt;path&amp;gt;.&lt;/em&gt;)$', serve, {&quot;document_root&quot;: settings.STATIC_ROOT})&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;843&quot; data-height=&quot;303&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-086cad1755ef27e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-086cad1755ef27e3.png&quot; data-original-width=&quot;843&quot; data-original-height=&quot;303&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;33853&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;4.修改首页的访问地址&lt;/h4&gt;
&lt;p&gt;在工程urls.py里部署首页访问的地址： views.home是自己设置的一个方法，是路由指向的地址&lt;br/&gt;url(r'^$', views.home)&lt;/p&gt;
&lt;h4&gt;5. 安装pip3， 使用pip3来安装必备的数据库&lt;/h4&gt;
&lt;p&gt;安装pip3 ：up主在这里遇到过一个bug，安装不上库文件，这时候你需要将pip3更新到最新的版本&lt;br/&gt;apt install python3-pip&lt;br/&gt;安装必备库：&lt;br/&gt;pip3 install django&lt;br/&gt;pip3 install pymysql&lt;br/&gt;pip3 install pillow&lt;/p&gt;
&lt;h4&gt;6. 查看进程：&lt;/h4&gt;
&lt;p&gt;看看端口啥的， 如果80端口被占用了，下面可以更换到其他端口，也可以直接kill -9 掉占用端口的程序&lt;br/&gt;netstat -lntp&lt;/p&gt;
&lt;h4&gt;7. 启动项目&lt;/h4&gt;
&lt;p&gt;进入manage.py文件目录下：&lt;br/&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/p&gt;
&lt;h3&gt;二、使用nginx+uwsgi部署&lt;/h3&gt;
&lt;h4&gt;1.nagin和uwsgi介绍&lt;/h4&gt;
&lt;p&gt;关于nginx和uwsgi与django的联系，有一篇博文讲得简单明了&lt;br/&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fblog.csdn.net%2Fu014761344%2Farticle%2Fdetails%2F40146597&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/u014761344/article/details/40146597&lt;/a&gt;&lt;br/&gt;（1）nginx:&lt;br/&gt;nginx概念：&lt;br/&gt;Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。&lt;br/&gt;nginx应用场景：&lt;br/&gt;1、 http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。&lt;br/&gt;2、 虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。&lt;br/&gt;基于端口的，不同的端口&lt;br/&gt;基于域名的，不同域名&lt;br/&gt;3、 反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。&lt;br/&gt;(2)uwsgi&lt;br/&gt;uwsgi概念：&lt;br/&gt;uWSGI实现了WSGI的所有接口，是一个快速、自我修复、开发人员和系统管理员友好的服务器&lt;/p&gt;
&lt;h4&gt;2.安装nginx&lt;/h4&gt;
&lt;p&gt;nginx启动后，可以在公网的ip地址上看到welcome to nginx&lt;br/&gt;sudo apt-get install nginx&lt;/p&gt;
&lt;h4&gt;3.查看nginx的状态&lt;/h4&gt;
&lt;p&gt;systemctl status nginx 查看nginx的状态&lt;br/&gt;system start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动&lt;br/&gt;service nginx status/stop/restart/start 查看状态/停止/重启/开启 ngnix&lt;br/&gt;安装完成后，如果不能启动nginx，可以使用 ps -ef | grep nginx 查看进程，杀掉全部的nginx进程，再重新启动nginx&lt;/p&gt;
&lt;h4&gt;4.安装uwsgi&lt;/h4&gt;
&lt;p&gt;pip install uwsgi&lt;/p&gt;
&lt;h4&gt;5.在nginx的配置文件中加载自定义的nginx的配置文件&lt;/h4&gt;
&lt;p&gt;up主这里使用自己的&lt;em&gt;.conf文件放在 /home/app/conf/的，这里建议大家建立一个统一的文件夹来管理conf文件&lt;br/&gt;进入nginx的配置文件:&lt;br/&gt;vim /etc/nginx/nginx.conf&lt;br/&gt;修改文件：增加 include /home/app/conf/&lt;/em&gt;.conf;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;618&quot; data-height=&quot;231&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-410d0d1f7e301f20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/618&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-410d0d1f7e301f20.png&quot; data-original-width=&quot;618&quot; data-original-height=&quot;231&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;13113&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;QQ图片20180512095927.png&lt;/p&gt;
&lt;/div&gt;

&lt;h4&gt;6. 配置自定的nginx文件：&lt;/h4&gt;
&lt;p&gt;up主建议每一个项目都单独建立一个conf文件&lt;br/&gt;找到自己创建的conf文件：&lt;br/&gt;vim /home/app/conf/axfnginx.conf&lt;br/&gt;配置：&lt;br/&gt;server {&lt;br/&gt;listen 80;&lt;br/&gt;server_name 47.92.164.198 localhost;&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;    access_log /home/app/&lt;span class=&quot;hljs-built_in&quot;&gt;log/access.&lt;span class=&quot;hljs-built_in&quot;&gt;log;
    error_log /home/app/&lt;span class=&quot;hljs-built_in&quot;&gt;log/error.&lt;span class=&quot;hljs-built_in&quot;&gt;log;

    location / {
        include uwsgi_params;
        uwsgi_pass &lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;span class=&quot;hljs-number&quot;&gt;.1:&lt;span class=&quot;hljs-number&quot;&gt;8890;
    }
    location /&lt;span class=&quot;hljs-keyword&quot;&gt;static/ {
        alias /home/app/day11axf0/&lt;span class=&quot;hljs-keyword&quot;&gt;static/;
        expires &lt;span class=&quot;hljs-number&quot;&gt;30d;
    }

}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;588&quot; data-height=&quot;356&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-625d1b12390ea68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/588&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-625d1b12390ea68f.png&quot; data-original-width=&quot;588&quot; data-original-height=&quot;356&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;22771&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;7.配置uwsgi&lt;/h4&gt;
&lt;p&gt;up主是将uwsgi.ini文件与conf文件放在一起的&lt;br/&gt;pythonpath为工程文件目录&lt;br/&gt;scoket要与nginx中的完全相同&lt;br/&gt;logto为保存日志文件的地方&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;529&quot; data-height=&quot;292&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/10914545-a9c60149fe52d2d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/529&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/10914545-a9c60149fe52d2d8.png&quot; data-original-width=&quot;529&quot; data-original-height=&quot;292&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;15565&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;nginx和uwsgi还可以配置更多的东西，这里配置的都是最简单需要的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;8.启动项目&lt;/h4&gt;
&lt;p&gt;进入uwsgi.ini文件目录中：&lt;br/&gt;uwsgi --ini uwsgi.ini&lt;/p&gt;
&lt;h4&gt;9.部署完成&lt;/h4&gt;
&lt;p&gt;python学习交流群：125240963&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;转载至：https://www.jianshu.com/p/c060448b3e78?&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 07:29:00 +0000</pubDate>
<dc:creator>python热爱者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythonedu/p/9028827.html</dc:identifier>
</item>
<item>
<title>tomcat的配置使用详细版 - yumiaoxa</title>
<link>http://www.cnblogs.com/yumiaoxia/p/9028785.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yumiaoxia/p/9028785.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;开发者开发部署web应用时通常使用tomcat服务器，很多初学者只懂得在开发工具上配置，但离开了开发工具，自己手动配置部署，并让一个项目跑起来，你会了吗。小编也遇到过这样的困扰。网上查找的资料说法不一，小编就亲自动手实验&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一. 下载&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;tomcat服务器直接到官网下载就好，根据自己的电脑系统选择对应的版本下载，window系统下载zip包，下载后解压&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二. 配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们下载完成后，我们试图启动tomcat，启动有两种方式&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;直接到tomcat服务器的bin目录下双击startup.bat&lt;/li&gt;
&lt;li&gt;通过cmd进入bin目录，输入命令startup.bat&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;但这时会出现的问题是，服务器启动程序只是一闪而过，为什么呢？&lt;/p&gt;
&lt;p&gt;其实问题就是，没有Java的JDK,我们需要到环境变量配置系统变量JAVA_HOME。我们都知道，1.5 以上的版本的JDK只需要配置path变量就可以了。但是如果你想在机器上使用tomcat的话，你就必须配置JAVA_HOME，指向JDK的安装位置。&lt;/p&gt;
&lt;p&gt;配置好之后我们就可以正常打开tomcat了，双击startup.bat，tomcat正常启动。启动完成后，我们在浏览器地址栏上输入：http://localhost:8080,会得到以下的界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157286/201805/1157286-20180512105528382-1340595231.png&quot; alt=&quot;&quot; width=&quot;991&quot; height=&quot;551&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       这样就能使用tomcat部署应用了吗，还不行。我们还需要另外的一些配置&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 配置环境变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们需要配置三个系统环境变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ATALINA_BASE：指向tomcat的安装位置&lt;/li&gt;
&lt;li&gt;CATALINE_HOME:指向tomcat的安装位置&lt;/li&gt;
&lt;li&gt;Path：%CATALINA_HOME%\lib;%CATALINA_HOME%\bin&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 配置tomcat的服务端口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;tomcat的默认服务端口是8080。可以通过配置文件来改变该服务端口，甚至通过修改配置文件让tomcat同时在多个端口提供服务&lt;/p&gt;
&lt;p&gt;tomcat的配置文件都放在conf目录下。使用无格式文本编辑器打开该目录下的server.xml文件，定位到68行处&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Connector &lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;=&quot;8080&quot;&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;=&quot;HTTP/1.1&quot;&lt;/span&gt;&lt;span&gt;
               connectionTimeout&lt;/span&gt;&lt;span&gt;=&quot;20000&quot;&lt;/span&gt;&lt;span&gt;
               redirectPort&lt;/span&gt;&lt;span&gt;=&quot;8443&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，port=&quot;8080&quot;就是web应用的服务端口，将8080改为任意端口，建议使用1024以上的端口，避免与公用端口冲突。&lt;/p&gt;
&lt;p&gt;如果需要让tomcat运行多个服务，只需要复制server.xml中的&amp;lt;serverce&amp;gt;元素，并修改相应的参数，便可以实现一个tomcat运行多个服务，当然在不同端口提供服务&lt;/p&gt;
&lt;p&gt;在web应用的开发阶段，通常希望Tomat能列出Web应用根目录下的所有页面，这样能更方便的调试JSP页面。默认情况下，出于安全考虑，tomcat并不会这样做。我们可以手动打开conf目录下的web.xml文件，修改第110，111两行的listing参数，改为true即可，改为如下形式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;listings&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 进入控制台&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;tomcat有三个控制台，分别是Server Status控制台、Manager App控制台和Host Manager控制台。Status控制台用来监控服务器状态，而manager控制台可以部署、监控web应用，因此通常使用Manager控制台即可。&lt;/p&gt;
&lt;p&gt;登陆控制台，我们需要用户和密码。控制台的用户和密码是通过Tomcat的JAAS控制的。&lt;/p&gt;
&lt;p&gt;我们登陆Manager控制台需要不同的角色，参考\webapps\manager\WEB-INF目录下的web.xml文件知道，登录控制台可能需要不同的角色。对于普通开发者来说，通常需要访问匹配/html/*、/status/*的资源，因此我们创建一个manager-gui角色即可。&lt;/p&gt;
&lt;p&gt;tomcat默认没有配置任何用户。我们可以打开conf目录下的tomcat-users.xml文件，添加user元素增加用户，修改如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tomcat-users &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://tomcat.apache.org/xml&quot;&lt;/span&gt;&lt;span&gt;
              xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
              xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;&lt;/span&gt;&lt;span&gt;
              version&lt;/span&gt;&lt;span&gt;=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
  &amp;lt;role rolename=&quot;tomcat&quot;/&amp;gt;
  &amp;lt;role rolename=&quot;role1&quot;/&amp;gt;
  &amp;lt;user username=&quot;tomcat&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat&quot;/&amp;gt;
  &amp;lt;user username=&quot;both&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat,role1&quot;/&amp;gt;
  &amp;lt;user username=&quot;role1&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;role1&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user &lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;=&quot;manager&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;manager&quot;&lt;/span&gt;&lt;span&gt; roes&lt;/span&gt;&lt;span&gt;=&quot;manager-gui&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tomcat-users&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 上面配置文件增加了一个manager用户&lt;/p&gt;
&lt;p&gt;成功登录之后，可以看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157286/201805/1157286-20180512123412655-857999335.png&quot; alt=&quot;&quot; width=&quot;909&quot; height=&quot;714&quot;/&gt;&lt;/p&gt;
&lt;p&gt;控制台下方的Deploy区用于部署web应用。tomcat提供两种方式部署web应用：一种是将整个路径部署成web应用；另一种是将war文件部署成web应用&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;四. 部署web应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;部署web应用的方式主要有以下几种&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;利用tomcat的自动部署&lt;/li&gt;
&lt;li&gt;利用控制台部署&lt;/li&gt;
&lt;li&gt;增加自定义的Web部署文件&lt;/li&gt;
&lt;li&gt;修改server.xml文件部署Web应用&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.1 利用tomcat的自动部署&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用tomcat的自动部署是最简单，最常用的方式，只需要将一个web应用复制到Tomcat的webapps下，系统就会把该应用部署到tomcat中。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.2 利用控制台部署&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;利用控制台部署也很简单，在web应用的控制台按如下方式输入即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157286/201805/1157286-20180512124621332-1905204627.png&quot; alt=&quot;&quot; width=&quot;955&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入后，点击Deploy按钮，将会看到Tomcat的webapps目录下多了一个名为aaa的文件夹，该文件夹的内容和E:\webDemo文件夹下的内容完全相同。这表明：当利用控制台部署应用时，实际依然是利用tomcat的自动部署&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.3 增加自定义的Web部署文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这种方式操作步骤是：在conf目录下新建Catalina目录，再在该Catalina目录下新建localhost目录，最后在该localhost目录下新建一个任意名字的xml文件——该文件就是部署web应用的配置文件，该文件的主文件名将作为web应用的虚拟路径。例如在\conf\Catalina\localhost目录下增加一个dd.xml文件，该文件内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Context &lt;/span&gt;&lt;span&gt;docBase&lt;/span&gt;&lt;span&gt;=&quot;E:/webDemo&quot;&lt;/span&gt;&lt;span&gt; debug&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; privileged&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     该文件指定了web应用的绝对路径，再次启动tomcat，tomcat会把/路径下的webDemo文件夹部署成web应用&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.4 修改server.xml文件部署Web应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方式是修改conf目录下的server.xml文件，修改该文件可能破坏Tomcat的系统文件，不建议采用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五. 配置数据源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从tomcat 5.5开始，tomcat内置了DBCP的数据源实现，可以非常方便的配置DBCP数据源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tomcat提供了两种配置数据源的方式，一种是全局数据源，可以让所有的web应用都能访问；一种是局部数据源，只能让单个数据源访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不管配置那种数据源，都需要提供特定数据库的JDBC驱动程序，将它复制到Tomcat的lib路径下。例如将MySQL的JDBC驱动程序复制到lib路径下 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;局部数据源无需修改系统的配置文件，只需用户修改自己的Web部署文件，不会造成系统的混乱，而且数据源被封装在一个Web应用之内，防止被其他应用访问，提供了良好的封装性。例如修改dd.xml文件。为Context元素增加一个子元素Resource，文件内容如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Context &lt;/span&gt;&lt;span&gt;docBase&lt;/span&gt;&lt;span&gt;=&quot;E:/webDemo&quot;&lt;/span&gt;&lt;span&gt; debug&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; privileged&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;其中name指定数据源在容器中的JNDI名
driverClassName指定连接数据库的驱动
url指定数据库服务的URL
maxActive指定数据库最大活动连接数
maxIdle指定数据池中最大的空闲连接数
maxWait指定数据池中最大等待获取连接的客户端
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Resource &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc/dstest&quot;&lt;/span&gt;&lt;span&gt; auth&lt;/span&gt;&lt;span&gt;=&quot;sherman&quot;&lt;/span&gt;&lt;span&gt;
type&lt;/span&gt;&lt;span&gt;=&quot;javax.sql.DataSource&quot;&lt;/span&gt;&lt;span&gt;
driverClassName&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;span&gt;
url&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/tb_test&quot;&lt;/span&gt;&lt;span&gt;
username&lt;/span&gt;&lt;span&gt;=&quot;sherman&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;a123&quot;&lt;/span&gt;&lt;span&gt; maxActive&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;
maxIdle&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; maxWait&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次启动tomcat，该web应用即可通过JNDI名字来访问该数据源下面是测试访问数据源代码的JSP页面代码。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;六. 一些注意点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;手动编写jsp文件时，保存文件时，文件编码设为utf-8,否则显示乱码&lt;/li&gt;
&lt;li&gt;部署配置文件跟web应用的配置文件不一样，要区分开&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 12 May 2018 07:17:00 +0000</pubDate>
<dc:creator>yumiaoxa</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yumiaoxia/p/9028785.html</dc:identifier>
</item>
<item>
<title>内边距、边框和外边距 - 皮普</title>
<link>http://www.cnblogs.com/pipu/p/9028671.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pipu/p/9028671.html</guid>
<description>&lt;p&gt;　　在20世纪90年代末期的web页面很可能全部用table来建立布局，原因是table可以创建边栏，可以为整个web页面建立复杂的结构。但是仔细想想如果你只想要为一个段落创建一个有色边框，黄色背景，如果能直接创建不是更好吗。&lt;/p&gt;
&lt;p&gt;　　CSS作者他们下了很大的功夫，允许你为段落标题、div、锚和图形几乎web页面包含的一切定义边框，这些边框可以将元素与其他元素区分开来，强调其外观，将某类数据标志为是否可以改变样式，或其他效果。&lt;/p&gt;
&lt;p&gt;　　还允许你为元素外围定义一块区域，控制这块区域相对于内容的摆放位置，以及间隔其他元素的远近距离。在这个元素的内容及边框之间，可以看到元素的内边距，外边距如何影响着整个文档的布局。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;一个可以显示的文档可能由多个矩形框组成，这些矩形框分布开来，从而不会相互重叠，另外根据某些限制，这些框框要尽可能少占用空间，同时还要保证相互之间有足够的空间可以看清哪些内容属于哪个元素。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;如果使用手工定位，框框可能会相互重叠，或者在正常流元素上使用负外边距也可能出现重叠。&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512133520473-1867867441.jpg&quot; alt=&quot;&quot; width=&quot;467&quot; height=&quot;348&quot;/&gt;&lt;/h3&gt;











&lt;p&gt;&lt;strong&gt;　　模型图中箭头指示的高度和宽度为一个元素的高宽&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;它不能应用于行内非替换元素&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;a:link{height:15px;width:60px;} 其高度由链接的内容确定，不会是15px高60px宽的像素。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;　　在正常流中元素很少设置指定的高度，高度都是由元素的内容来确定。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;背景会衍生到内边距，而不会对外边距产生影响&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512135404101-1806030261.jpg&quot; alt=&quot;&quot; width=&quot;421&quot; height=&quot;300&quot;/&gt;　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;背景衍生到内边距&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        .to-padding{
            padding: 100px;
            background: #2bc4e2;
            height: 100px;
            width: 100px;
        }
        .to-margin {
            margin: 100px;
            background: #2bc4e2;
            height: 100px;
            width: 100px;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;to-padding&quot;&amp;gt;
       内边距使内容区看起来更大了
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;to-margin&quot;&amp;gt;
            外边距的背景没有变化
        &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;　　&lt;strong&gt;外边距空白区不能放置其他元素，但是可以看到父元素的背景&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;　　&lt;strong&gt;顺时针方向确定边距的方向&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  　　　　h1{margin:10px 20px 30px 40px}　　h1元素上右下左方向会多出指定的空白区域&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　&lt;strong&gt;外边距百分数会相对于父元素的宽度进行计算&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512141400607-165121621.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;父元素宽度与百分比&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        *{
            margin: 0;
            padding: 0;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div style=&quot;width: 500px;background: #2bc4e2&quot;&amp;gt;
         下面的内容距离我50px;
        &amp;lt;p style=&quot;margin-top:10%; background: grey&quot;&amp;gt;
            这个段落距离父元素50px
        &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;这里作者解释如果元素的上下外边距是取决于父元素的高度就会导致一个无限循环。不必要深究如此晦涩的原理了，我猜想在具体的实现机制上面，相对于父元素的高度与宽度可能有它的难易取舍之处。&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;　　值复制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　　这里我只记两对，上对下、左对右，例如h1{margin:10px 20px;}　　会应用上下外边距10px,左右20px。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;　　负外边距和合并外边距&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512143249101-1698383463.jpg&quot; alt=&quot;&quot; width=&quot;294&quot; height=&quot;176&quot;/&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;负外边距&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        *{
            margin: 0;
            padding: 0;
        }
        div{
            border: 1px solid black;
        }
        .outer{
            background: #2bc4e2;
            width: 200px;
            height: 200px;
        }
        .inner{
            background: grey;
            width: 100px;
            height: 100px;
            margin-top: -50px;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&quot;outer&quot;&amp;gt;
    &amp;lt;div class=&quot;inner&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 负外边距会呈现元素像游览器外部移出的效果。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　&lt;strong&gt;外边距和行内替换元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512145526595-1688829665.jpg&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;63&quot;/&gt;　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
p{
            border: 1px solid black;
        }
        span{
            margin: 25px;
            background: #2bc4e2;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;对于行内非替换元素应为有行高的影响，上下外边距没有作用，而左右外边距是效果的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　而对于行内替换元素来说会使行高增加或者减少。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;另外还有负外边距的情况，它会使行内元素出现重叠的效果。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　边框在外边距内，前面说过背景颜色会影作用到内边距。另外背景颜色也会作用到边框的虚线之间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果没有为边框设置颜色，它与元素文本的颜色相同，如果它没有任何文本，那么它的颜色将会继承父元素的文本颜色。&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;　　　元素框的内边距在边框和内容区之间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　默认的，元素没有内边距，如果为段落增加一个边框，那么边框会与内容相当接近，可以设置一个内边距来解决这个问题。&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;&lt;strong&gt;内边距不会和合并，如果想要段落之间有传统的一个空行的时候可以写作:p{margin:0;padding:0.5em 0}&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;　　百分数值与内边距&lt;/strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;　　　　与外边距一样相对于父宽度计算&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;　　内边距与行内元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; 　　　　因为背景可以向内边距延伸，所以它会与文本重叠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512154338813-1966198093.jpg&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;249&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我这个360急速游览器很奇怪，它挡住了上面，下面的却没有挡住。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;内边距与行内元素&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        div{
            background: #2bc4e2;
            width: 300px;
            height: 300px;
        }
        span{
            padding: 20px;
            background: grey;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;span&amp;gt;这是一个文本&amp;lt;/span&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;　　内边距和替换元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1101267/201805/1101267-20180512154755064-436678940.jpg&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;230&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;内边距与行内元素&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        div{
            background: #2bc4e2;
            width: 300px;
            height: 300px;
        }
        img{
            padding: 20px;
            background: grey;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;img&amp;gt;这是一个文本&amp;lt;/img&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;这是一个文本这是一个文本这是一个文本这是一个文本这是一个文本&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;把img元素推离其内容。&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 06:40:00 +0000</pubDate>
<dc:creator>皮普</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pipu/p/9028671.html</dc:identifier>
</item>
<item>
<title>自定义完美的ViewPager 真正无限循环的轮播图 - 短暂的火光</title>
<link>http://www.cnblogs.com/bimingcong/p/9028515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bimingcong/p/9028515.html</guid>
<description>&lt;p&gt;       &lt;span&gt;网上80%的思路关于Android轮播图无限循环都是不正确的，不是真正意义上的无限循环，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其思路大多是将&lt;span&gt;&lt;span&gt;ViewPager&lt;/span&gt;的getCount&lt;/span&gt;方法返回值设置为&lt;span&gt;Integer.MAX_VALUE&lt;/span&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后呢将ViewPager的当前展示页设置为第1000页或者是10000页，这样用户一般情况下是滑不到边界的&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　例如有5张图片的轮播图，item的编号为（0,1,2，3,4）当前页的页号如果是5， 这时候就将编号设置为0，即 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;actPosition %= datas.size()&lt;/span&gt;;这个公式就是这么来的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        &lt;span&gt; 这种思路实现的无限轮播虽然可以实现需求  但是却不是真正意义的无限轮播，&lt;/span&gt;&lt;span&gt;结合了&lt;span&gt;iOS 、HTML5&lt;/span&gt;的无限轮播图实现思路，总结如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   例如：有五张轮播图 item的编号为（0,1,2，3,4） 要想实现 无限循环  我们在这五张的头部和尾部各加一张即&lt;span&gt;&lt;strong&gt;&lt;span&gt;（5+2）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;张,item编号为（0,1,2,3，4,5，6）&lt;span&gt;其中编号为0,6的两张不做展示只是为了做循环轮播的铺垫&lt;/span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt; 1、当我们从编号为5 右滑的时候到了编号6 这时候就将当前页面设置为1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     2、当我们从编号为1左滑的时候到了编号0  这时候就将当前页面设置为5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;   第一种情况：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/808039/201805/808039-20180512121554170-675653853.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;&lt;strong&gt;第二种情况：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/808039/201805/808039-20180512121616747-1871091697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这么做之后就可以实现无限轮播  怎么保证从编号6跳转编号1的时候不出现页面&lt;span&gt;停顿 突然跳到下一页&lt;/span&gt;的现象呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Object instantiateItem (ViewGroup container, &lt;span&gt;int&lt;/span&gt; position)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在指定的位置创建页面；适配器负责添加view到这个容器中，然而它只保证在&lt;strong&gt;&lt;span&gt;finishUpdate(ViewGroup)&lt;/span&gt;&lt;/strong&gt;返回时才完成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroyItem (ViewGroup container, &lt;span&gt;int&lt;/span&gt; position, Object object)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除指定位置的页面；适配器负责从view容器中删除view，然而它只保证在&lt;strong&gt;&lt;span&gt;finishUpdate(ViewGroup)&lt;/span&gt;&lt;/strong&gt;返回时才完成。&lt;/p&gt;
&lt;p&gt; 所以说 重点就在于finishUpdate(ViewGroup)这个方法 其实无论是创建view添加到容器中  还是 销毁view 都是在此方法结束之后执行的&lt;/p&gt;
&lt;p&gt;换句话说  就是 我在这个方法里让页面完成从 编号5跳转到编号1 或者从编号1跳转到编号5，此方法完成时 视图还未完成创建或者 销毁 这样也就不会出现 页面停顿 突然跳到下一页的现象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; finishUpdate(ViewGroup container) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; position =&lt;span&gt; mBanner.getCurrentItem();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (position == 0&lt;span&gt;) {
                position &lt;/span&gt;=&lt;span&gt; datas.size();
                viewPager.setCurrentItem(position,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (position == (datas.size()+2) - 1&lt;span&gt;) {
                position &lt;/span&gt;= 1&lt;span&gt;;
                viewPager.setCurrentItem(position,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此 完美解决 无限轮播&lt;/p&gt;
&lt;p&gt;  一般情况下 轮播图要求自动轮播  没关系  我们可以利用Handler去开启线程 让其每隔一定时间去轮播 &lt;/p&gt;
&lt;p&gt;这里的重点是 如果我们定义每隔3秒轮播一张，当我们用手滑动了之后这时候要&lt;span&gt;重新计时&lt;/span&gt;，防止用户刚滑动完 程序立马又滑动一次，&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
handler.removeCallbacksAndMessages(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);&lt;br/&gt;此方法意思是移除所有的定消息

 handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000);&lt;br/&gt;此方法是三秒之后发送一个 message.what=0的消息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整的代码&lt;/p&gt;
&lt;p&gt; 我定义了一个View名字叫TopView 实现每隔3秒轮播，并且下方有小圆点（当前显示的编号小圆点会变成白色，其他小圆点显示为灰色）的轮播图&lt;/p&gt;
&lt;p&gt;基本思路是 在FrameLayout里边底层是一个Viewpager 上层是一个LinearLayout 里边有对应张数的小圆点 小圆点是根据数据的个数动态生成的&lt;/p&gt;
&lt;p&gt;类里边还定义了一个 点击监听接口 ，点击对应的图片可以回调给调用者&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TopView &lt;span&gt;extends&lt;/span&gt; FrameLayout &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ViewPager.OnPageChangeListener {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ViewPager vPager;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;ImageView&amp;gt;&lt;span&gt; imgViews;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; datas;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据源&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; LinearLayout navLayout;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; LinearLayout.LayoutParams layoutParams;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;线性布局中子控件使用的布局参数，作用设置子控件大小，外边距&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Context mContext;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DownLoadImage imageLoader;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; currentPosition=0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Handler handler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Handler(){
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleMessage(Message msg) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.handleMessage(msg);
            currentPosition &lt;/span&gt;= (++currentPosition) %&lt;span&gt; imgViews.size();
            vPager.setCurrentItem(currentPosition,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理完之前的消息之后再次发送一个3秒之后的消息  如此  可实现每隔三秒轮播&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000&lt;span&gt;);
            }
        }
    };

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TopView(Context context) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(context,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TopView(Context context, AttributeSet attrs) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(context,attrs,0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TopView(Context context,AttributeSet attrs,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; defStyle) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(context,attrs,defStyle);
        mContext&lt;/span&gt;=&lt;span&gt;context;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二个参数this: 布局资源中根标签内声明的布局参数参考的父控件对象
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第三个参数true: 代表是将第一个参数中声明的子控件归属到第二个参数对象中，false不归属&lt;/span&gt;
        LayoutInflater.from(context).inflate(R.layout.topview, &lt;span&gt;this&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        initView();
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initView() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查找相关的UI控件&lt;/span&gt;
        vPager =&lt;span&gt; (ViewPager) findViewById(R.id.viewPager);
        navLayout &lt;/span&gt;=&lt;span&gt; (LinearLayout) findViewById(R.id.navLayout);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setData(List&amp;lt;String&amp;gt;&lt;span&gt; datas) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.datas =&lt;span&gt; datas;
        createViews();
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createViews() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据数据源创建ViewPager中显示的UI&lt;/span&gt;
        imgViews = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;ImageView&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入数据源&lt;/span&gt;
        layoutParams =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  layoutParams.leftMargin=20;&lt;/span&gt;
        layoutParams.rightMargin=10;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;
        layoutParams.width=20&lt;span&gt;;
        layoutParams.height&lt;/span&gt;=20&lt;span&gt;;
        ImageView imgView &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ImageView navImg &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;datas.size();i++&lt;span&gt;)
        {
            imgView &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ImageView(getContext());
            imgView.setScaleType(ImageView.ScaleType.FIT_XY);
            imgView.setTag(datas.get(i));

            imgViews.add(imgView);

            navImg &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ImageView(getContext());
            navImg.setScaleType(ImageView.ScaleType.CENTER_CROP);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i==0&lt;span&gt;)
                navImg.setImageResource(R.drawable.page_now);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                navImg.setImageResource(R.drawable.page);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置导航图片的标签： 当前导航图片的位置&lt;/span&gt;
&lt;span&gt;            navImg.setTag(i);

            navImg.setLayoutParams(layoutParams);
            navLayout.addView(navImg);
        }

        vPager.setAdapter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ImageAdapter());
        vPager.addOnPageChangeListener(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        loadImgs();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启handler的线程 3秒之后发出此消息&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loadImgs() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载网络图片加载后放入imageView&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;datas.size();i++&lt;span&gt;) {
            String data&lt;/span&gt;=&lt;span&gt;datas.get(i);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ImageView imageView : imgViews) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(imageView.getTag().equals(data)){
                    getImageView(imageView,data,i);
                }
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; ImageAdapter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; PagerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCount() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; datas.size()+2&lt;span&gt;;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isViewFromObject(View arg0, Object arg1) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; arg0 ==&lt;span&gt; arg1;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object instantiateItem(ViewGroup container, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; actPosition) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对Viewpager页号求模去除View列表中要显示的项&lt;/span&gt;
            actPosition %=&lt;span&gt; datas.size();
            ImageView view &lt;/span&gt;=&lt;span&gt; imgViews.get(actPosition);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果View已经在之前添加到了一个父组件，则必须先remove，否则会抛出IllegalStateException。&lt;/span&gt;
            ViewParent viewParent =&lt;span&gt; view.getParent();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (viewParent!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                ViewGroup parent &lt;/span&gt;=&lt;span&gt; (ViewGroup)viewParent;
                parent.removeView(view);
            }
            container.addView(view);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; view;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroyItem(ViewGroup container, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; actPosition, Object object) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意不在此方法进行removeView&lt;/span&gt;
&lt;span&gt;        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; finishUpdate(ViewGroup container) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.finishUpdate(container);

            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; position =&lt;span&gt; vPager.getCurrentItem();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (position == 0&lt;span&gt;) {
                position &lt;/span&gt;=&lt;span&gt; datas.size();
                currentPosition&lt;/span&gt;=&lt;span&gt;position;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    handler.removeCallbacksAndMessages(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000&lt;span&gt;);
                }
                vPager.setCurrentItem(position,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (position == (datas.size()+2) - 1&lt;span&gt;) {
                position &lt;/span&gt;= 1&lt;span&gt;;
                currentPosition&lt;/span&gt;=&lt;span&gt;position;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    handler.removeCallbacksAndMessages(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000&lt;span&gt;);
                }
                vPager.setCurrentItem(position,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            }

        }

    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onPageScrollStateChanged(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg0) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onPageScrolled(&lt;span&gt;int&lt;/span&gt; arg0, &lt;span&gt;float&lt;/span&gt; arg1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg2) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onPageSelected(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position) {
        position&lt;/span&gt;=position %&lt;span&gt; datas.size();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            handler.removeCallbacksAndMessages(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        currentPosition&lt;/span&gt;=&lt;span&gt;position;
        ImageView navImg  &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历 导航布局中所有的子控件，判断子控件的位置是否为选择位置，若是，则改变图片的内容&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;navLayout.getChildCount();i++&lt;span&gt;){
            navImg &lt;/span&gt;= (ImageView) navLayout.getChildAt(i );&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取布局中指定位置的子控件&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;position)
                navImg.setImageResource(R.drawable.page_now);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                navImg.setImageResource(R.drawable.page);
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(handler!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            handler.sendEmptyMessageDelayed(&lt;/span&gt;0,3000&lt;span&gt;);
        }

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; TopViewClickListener{
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onTopViewClick(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TopViewClickListener mTopViewClickListener;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTopViewClickListener(TopViewClickListener topViewClickListener){
        mTopViewClickListener&lt;/span&gt;=&lt;span&gt;topViewClickListener;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ImageView getImageView(ImageView imageView,String url, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; position) {
        imageView.setOnClickListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mTopViewClickListener != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    mTopViewClickListener.onTopViewClick(position);
                }
            }
        });
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (imageLoader == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            imageLoader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DownLoadImage(mContext, R.drawable.bannerdefault, R.drawable.bannerdefault, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        imageLoader.displayImage(url, imageView, &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; imageView;
    }



}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; TopView类中用到的布局文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&lt;span&gt;
             android:layout_width&lt;/span&gt;=&quot;match_parent&quot;&lt;span&gt;
             android:layout_height&lt;/span&gt;=&quot;wrap_content&quot;&amp;gt;

    &amp;lt;&lt;span&gt;android.support.v4.view.ViewPager
            android:id&lt;/span&gt;=&quot;@+id/viewPager&quot;&lt;span&gt;
            android:layout_width&lt;/span&gt;=&quot;match_parent&quot;&lt;span&gt;
            android:layout_height&lt;/span&gt;=&quot;match_parent&quot; /&amp;gt;

    &amp;lt;&lt;span&gt;LinearLayout
            android:id&lt;/span&gt;=&quot;@+id/navLayout&quot;&lt;span&gt;
            android:layout_height&lt;/span&gt;=&quot;30dp&quot;&lt;span&gt;
            android:layout_width&lt;/span&gt;=&quot;match_parent&quot;&lt;span&gt;
            android:layout_gravity&lt;/span&gt;=&quot;bottom&quot;&lt;span&gt;
            android:gravity&lt;/span&gt;=&quot;center&quot;&lt;span&gt;
            android:orientation&lt;/span&gt;=&quot;horizontal&quot; /&amp;gt;

&amp;lt;/FrameLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何调用：&lt;/p&gt;
&lt;p&gt;在activity_main.xml中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;&lt;span&gt;com.myview.TopView
        android:id&lt;/span&gt;=&quot;@+id/topview&quot;&lt;span&gt;
        android:layout_width&lt;/span&gt;=&quot;match_parent&quot;&lt;span&gt;
        android:layout_height&lt;/span&gt;=&quot;@dimen/size_600px&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在MainActivity 中的伪代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TopView topView;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ActivityMain &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Activity implements TopView.TopViewClickListener{&lt;br/&gt;public void onCreate（。。。。。）{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;urls是图片的地址&lt;/span&gt;&lt;span&gt;
     topView.setData(urls);
     topView&lt;/span&gt;=&lt;span&gt; (TopView) findViewById(R.id.topview);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置点击图片事件的监听器&lt;/span&gt;
     topView.setTopViewClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
　　}
  @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onTopViewClick(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (datas!= &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; datas.size() &amp;gt; 0&lt;span&gt;) {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用position去加载对应的数据即可&lt;/span&gt;
&lt;span&gt;        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;如此  完美解决真正意义上的无限轮播图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/808039/201805/808039-20180512134107356-1767995052.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 05:42:00 +0000</pubDate>
<dc:creator>短暂的火光</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bimingcong/p/9028515.html</dc:identifier>
</item>
<item>
<title>Flask快速入门 - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/9027171.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/9027171.html</guid>
<description>&lt;h2&gt;flask快速入门&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1.三种框架比较&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Django: 重武器，内部包含了非常多组件：ORM、Form、ModelForm、缓存、Session、中间件、信号等&lt;/p&gt;
&lt;p&gt;Flask：短小精悍，内部没有太多组件，第三方组件非常丰富。路由比较特殊，是基于装饰器来实现，但是本质还是通过add_url_rule来实现的&lt;/p&gt;
&lt;p&gt;Tornado：异步非阻塞&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.安装和运行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）安装&lt;/p&gt;
&lt;p&gt;创建虚拟环境，然后直接安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkvirtualenv flask_project

pip install -i https://pypi.douban.com/simple flask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）运行&lt;/p&gt;
&lt;p&gt;基本使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化flask对象&lt;/span&gt;
app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将'/'和函数index的对应关系加到路由中&lt;/span&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;监听用户请求&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果有用户请求到来，则执行app的__call__方法，app.__call__&lt;/span&gt;
    app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器访问：http://127.0.0.1:5000/&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3.快速入门实例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）view.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,render_template,request,redirect,session,url_for

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True&lt;br/&gt;app.secret_key = 'abcdef'

USERS &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;1:{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:18&lt;span&gt;},
    &lt;/span&gt;2:{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:20&lt;span&gt;},
    &lt;/span&gt;3:{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:22&lt;span&gt;},
}

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/detail/&amp;lt;int:nid&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; detail(nid):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 没登录不能访问&lt;/span&gt;
    user = session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; user:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    info &lt;/span&gt;=&lt;span&gt; USERS.get(nid)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,info=&lt;span&gt;info)

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;没登录不能访问&lt;/span&gt;
    user = session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; user:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; return redirect('/login')&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;根据设置的别名反向生成url&lt;/span&gt;
        url = url_for(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; redirect(url)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,user_dict=&lt;span&gt;USERS)


@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],endpoint=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;endpoint起别名&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        user &lt;/span&gt;= request.form.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        pwd &lt;/span&gt;= request.form.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; user == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; pwd == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加session值&lt;/span&gt;
            user = session[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; user
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;'/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,error=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）templates/login.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;登录&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{error}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（3）templates/index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% for k,v in user_dict.items() %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{k}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{v.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{v['name']}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{v.get('name')}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/detail/{{k}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查看详细&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180512013840422-1504107455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180512014146159-822334906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）templates/detail.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    {{info.name}}
    {{info.age}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.4.配置文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ce6d0df2-47b0-4bff-be6d-b6ff898cd61a')&quot; readability=&quot;47&quot;&gt;&lt;img id=&quot;code_img_closed_ce6d0df2-47b0-4bff-be6d-b6ff898cd61a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ce6d0df2-47b0-4bff-be6d-b6ff898cd61a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ce6d0df2-47b0-4bff-be6d-b6ff898cd61a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ce6d0df2-47b0-4bff-be6d-b6ff898cd61a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;89&quot;&gt;
&lt;pre&gt;
&lt;span&gt;flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：
    {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:                                get_debug_flag(default=&lt;span&gt;False),  是否开启Debug模式
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TESTING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                              False,                          是否开启测试模式
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROPAGATE_EXCEPTIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                 None,                          
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PRESERVE_CONTEXT_ON_EXCEPTION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:        None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SECRET_KEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                           None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PERMANENT_SESSION_LIFETIME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:           timedelta(days=31&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USE_X_SENDFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                       False,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOGGER_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                          None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOGGER_HANDLER_POLICY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:               &lt;span&gt;'&lt;/span&gt;&lt;span&gt;always&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                          None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;APPLICATION_ROOT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                     None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_COOKIE_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:                  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;session&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_COOKIE_DOMAIN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_COOKIE_PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                  None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_COOKIE_HTTPONLY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:              True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_COOKIE_SECURE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                False,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_REFRESH_EACH_REQUEST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:         True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;MAX_CONTENT_LENGTH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                   None,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SEND_FILE_MAX_AGE_DEFAULT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:            timedelta(hours=12&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRAP_BAD_REQUEST_ERRORS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:              False,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TRAP_HTTP_EXCEPTIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                 False,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;EXPLAIN_TEMPLATE_LOADING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:             False,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PREFERRED_URL_SCHEME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:                 &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JSON_AS_ASCII&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                        True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JSON_SORT_KEYS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                       True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JSONIFY_PRETTYPRINT_REGULAR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:          True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JSONIFY_MIMETYPE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:                     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TEMPLATES_AUTO_RELOAD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:                None,
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;flask配置文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（1）方式一&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
app.debug = True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）方式二&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
app.config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）方式三（最常用）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
app.config.from_object(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;settings.DevelopmentConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;settings.py&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个父类，其它子类继承，重写父类的某个方法　　　　 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(object):
    DEBUG &lt;/span&gt;=&lt;span&gt; False
    TESTING &lt;/span&gt;=&lt;span&gt; False
    DATABASE_URI &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sqlite://:memory:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductionConfig(Config):
    DATABASE_URI &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql://user@localhost/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; DevelopmentConfig(Config):
    DEBUG &lt;/span&gt;=&lt;span&gt; True


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestingConfig(Config):
    TESTING &lt;/span&gt;= True
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.5.路由系统本质&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;（1）常用路由系统有以下五种&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/&amp;lt;username&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;int:post_id&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;float:post_id&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;path:path&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本上这五种方式满足大多数需求，还可以自定制正则路由&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('77efb1ff-320f-4084-b477-03aae72e0455')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_77efb1ff-320f-4084-b477-03aae72e0455&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_77efb1ff-320f-4084-b477-03aae72e0455&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('77efb1ff-320f-4084-b477-03aae72e0455',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_77efb1ff-320f-4084-b477-03aae72e0455&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, views, url_for
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; werkzeug.routing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseConverter

            app &lt;/span&gt;= Flask(import_name=&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)


            &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; RegexConverter(BaseConverter):
                &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                自定义URL匹配正则表达式
                &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, map, regex):
                    super(RegexConverter, self).&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(map)
                    self.regex &lt;/span&gt;=&lt;span&gt; regex

                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_python(self, value):
                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    路由匹配时，匹配成功后传递给视图函数中参数的值
                    :param value: 
                    :return: 
                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; int(value)

                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_url(self, value):
                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数
                    :param value: 
                    :return: 
                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                    val &lt;/span&gt;=&lt;span&gt; super(RegexConverter, self).to_url(value)
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; val

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加到flask中&lt;/span&gt;
            app.url_map.converters[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;regex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; RegexConverter


            @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index/&amp;lt;regex(&quot;\d+&quot;):nid&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(nid):
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(url_for(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, nid=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;888&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                app.run()

b. 自定制正则路由匹配&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;自定制正则路由&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（2）路由系统的本质&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,render_template,request,redirect,session,url_for

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True
app.secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdef&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;源码分析&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
路由本质，通过看源码分析得出，其本质是通过add_url_rule来实现的

1.decorator = app.route('/',methods=['GET','POST'],endpoint='index')

    def route(self, rule, **options):
        #app对象（即self）
        #rule=/
        #option = methods=['GET','POST'],endpoint='index'
        def decorator(f):
            endpoint = options.pop('endpoint', None)
            self.add_url_rule(rule, endpoint, f, **options)
            return f
        return decorator

2.@decorator
    decorator(index)
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],endpoint=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello word&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过分析源码，路由可以用下面这种方式实现&lt;/span&gt;
app.add_url_rule(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,login,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第二个参数是别名，第三个参数是视图函数，如果endpoint不写，则默认endpoint='视图函数名'&lt;/span&gt;


&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.6.flask之CBV&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,render_template,request,redirect,session,url_for,views

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True
app.secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdef&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; inner(*args, **&lt;span&gt;kwargs):
        result &lt;/span&gt;= func(*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; inner


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexView(views.MethodView):
    methods &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    decorators &lt;/span&gt;=&lt;span&gt; [auth, ]

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Index.GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; post(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Index.POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;


app.add_url_rule(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, view_func=IndexView.as_view(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name=endpoint&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.7.add_url_role参数介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('52258689-4533-4264-92c4-a97ebb5098c7')&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_52258689-4533-4264-92c4-a97ebb5098c7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_52258689-4533-4264-92c4-a97ebb5098c7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('52258689-4533-4264-92c4-a97ebb5098c7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_52258689-4533-4264-92c4-a97ebb5098c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@app.route和app.add_url_rule参数：
            rule,                       URL规则
            view_func,                  视图函数名称
            defaults&lt;/span&gt;=None,              默认值,当URL中无参数，函数需要参数时，使用defaults={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}为函数提供参数
            endpoint&lt;/span&gt;=None,              名称，用于反向生成URL，即： url_for(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            methods&lt;/span&gt;=None,               允许的请求方式，如：[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
            

            strict_slashes&lt;/span&gt;=None,        对URL最后的 /&lt;span&gt; 符号是否严格要求，
                                        如：
                                            @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,strict_slashes=&lt;span&gt;False)，
                                                访问 http:&lt;/span&gt;//www.xx.com/index/ 或 http://www.xx.com/&lt;span&gt;index均可
                                            @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,strict_slashes=&lt;span&gt;True)
                                                仅访问 http:&lt;/span&gt;//www.xx.com/&lt;span&gt;index 
            redirect_to&lt;/span&gt;=&lt;span&gt;None,           重定向到指定地址
                                        如：
                                            @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index/&amp;lt;int:nid&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, redirect_to=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/home/&amp;lt;nid&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                                            或
                                            &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; func(adapter, nid):
                                                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/home/888&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                            @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index/&amp;lt;int:nid&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, redirect_to=&lt;span&gt;func)
            subdomain&lt;/span&gt;=&lt;span&gt;None,             子域名访问
                                                &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, views, url_for

                                                app &lt;/span&gt;= Flask(import_name=&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
                                                app.config[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wupeiqi.com:5000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;


                                                @app.route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, subdomain=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                                                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; static_index():
                                                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Flask supports static subdomains
                                                    This is available at static.your-domain.tld&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                                                    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;static.your-domain.tld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


                                                @app.route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/dynamic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, subdomain=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;username&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                                                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; username_index(username):
                                                    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Dynamic subdomains are also supported
                                                    Try going to user1.your-domain.tld/dynamic&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                                                    &lt;span&gt;return&lt;/span&gt; username + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.your-domain.tld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


                                                &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                                                    app.run()
        &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;所有参数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（1）最基本的url几种方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,views
app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True
app.secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdef&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一种&lt;/span&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],endpoint=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;第二种&lt;/span&gt;
app.add_url_rule(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,login,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])




&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; inner(*args, **&lt;span&gt;kwargs):
        result &lt;/span&gt;= func(*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; inner

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;CBV的模式&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; DetailView(views.MethodView):
    methods &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    decorators &lt;/span&gt;=&lt;span&gt; [auth, ]

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Detail.GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; post(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Detail.POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;第三种&lt;/span&gt;
app.add_url_rule(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, view_func=DetailView.as_view(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name=endpoint&lt;/span&gt;


&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）参数defaults&lt;/p&gt;
&lt;p&gt;默认值,当URL中无参数，函数需要参数时，使用defaults={'k':'v'}为函数提供参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180512102228707-567736066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （3）参数strict_slashes=None&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对URL最后的 / 符号是否严格要求，默认为False,如：&lt;/span&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, strict_slashes=&lt;span&gt;False)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;下面两种方式都可以访问&lt;/span&gt;
http: // www.xx.com / index /&lt;span&gt; 
http: &lt;/span&gt;// www.xx.com /&lt;span&gt; index


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果设为True&lt;/span&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, strict_slashes=&lt;span&gt;True)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;只能这样访问&lt;/span&gt;
http: // www.xx.com / index 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（4）redirect_to=None&lt;/p&gt;
&lt;p&gt;重定向到指定地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],endpoint=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,redirect_to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/index2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;公司旧网页&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],endpoint=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;公司新网页&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问：http://127.0.0.1:5000/index会直接重定向到http://127.0.0.1:5000/index2&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.8.模板语言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;flask的模板语法和Django的语法差不多，下面一个简单实例&lt;/p&gt;
&lt;p&gt;Markup等价于Django的mark_safe&lt;/p&gt;
&lt;p&gt;前端也是用 |safe&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,render_template,Markup

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True
app.secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdef&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;def&lt;/span&gt;&lt;span&gt; func1(arg):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Markup(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;input type='text' value='%s' /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;arg)

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,func1=&lt;span&gt;func1)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:

    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{{func1(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zhang &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)}}     &amp;lt;!--传参数arg  --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 1.9.请求与响应&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2c21fe98-5d74-450e-9988-36be203a658d')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_2c21fe98-5d74-450e-9988-36be203a658d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2c21fe98-5d74-450e-9988-36be203a658d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2c21fe98-5d74-450e-9988-36be203a658d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c21fe98-5d74-450e-9988-36be203a658d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
    &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; request
    &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render_template
    &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; redirect
    &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; make_response

    app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)


    @app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求相关信息&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.method&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.args&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.form&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.values&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.cookies&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.headers&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.path&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.full_path&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.script_root&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.url&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.base_url&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.url_root&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.host_url&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.host&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request.files&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj = request.files['the_file_name']&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.save('/var/www/uploads/' + secure_filename(f.filename))&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 响应相关信息&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return &quot;字符串&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return render_template('html模板路径',**{})&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return redirect('/index.html')&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response = make_response(render_template('index.html'))&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response是flask.wrappers.Response类型&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response.delete_cookie('key')&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response.set_cookie('key', 'value')&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response.headers['X-Something'] = 'A value'&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return response&lt;/span&gt;


        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;请求与响应&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.10.flash介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）简单使用方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask,flash,get_flashed_messages

app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
app.debug &lt;/span&gt;=&lt;span&gt; True
app.secret_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdef&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;


@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get():
    data &lt;/span&gt;=&lt;span&gt; get_flashed_messages()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

@app.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set():
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;向某个地方设置一个值&lt;/span&gt;
    flash(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;访问一次就设置一次&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;访问：http://127.0.0.1:5000/set     访问一个就会设置一次值&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 访问：http://127.0.0.1:5000/get     从某个地方获取所有的值，并清除&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180512130741264-1338444867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 05:27:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/9027171.html</dc:identifier>
</item>
<item>
<title>Hadoop 3.x 新特性剖析系列2 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/9028267.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/9028267.html</guid>
<description>&lt;p&gt;接着上一篇博客的内容，继续介绍Hadoop3的其他新特性。其内容包含：优化Hadoop Shell脚本、重构Hadoop Client Jar包、支持等待Container、MapReduce任务级别本地优化、支持多个NameNode、部分默认服务端口被改变、支持文件系统连接器、DataNode内部添加负载均衡、重构后台程序和任务堆管理。&lt;/p&gt;

&lt;h2&gt;2.2.1 优化Hadoop Shell脚本&lt;/h2&gt;
&lt;p&gt;Hadoop Shell脚本已经被重写，用来修复已知的BUG，解决兼容性问题和一些现有安装的更改。它还包含了一些新的特性，内容如下所示：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有Hadoop Shell脚本子系统现在都会执行hadoop-env.sh这个脚本，它允许所有环节变量位于一个位置；&lt;/li&gt;
&lt;li&gt;守护进程已通过*-daemon.sh选项从*-daemon.sh移动到了bin命令中，在Hadoop3中，我们可以简单的使用守护进程来启动、停止对应的Hadoop系统进程；&lt;/li&gt;
&lt;li&gt;触发SSH连接操作现在可以在安装时使用PDSH；&lt;/li&gt;
&lt;li&gt;${HADOOP_CONF_DIR}现在可以任意配置到任何地方；&lt;/li&gt;
&lt;li&gt;脚本现在测试并报告守护进程启动时日志和进程ID的各种状态；&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.2.2 重构Hadoop Client Jar包&lt;/h2&gt;
&lt;p&gt;Hadoop2 中可用的Hadoop客户端将Hadoop的传递依赖性拉到Hadoop应用程序的类路径上。如果这些传递依赖项的版本与应用程序使用的版本发送冲突，这可能会产生问题。&lt;/p&gt;
&lt;p&gt;因此，在Hadoop3中有新的Hadoop客户端API和Hadoop客户端运行时工件，它们将Hadoop的依赖性遮蔽到单个JAR中，Hadoop客户端API是编译范围，Hadoop客户端运行时是运行时范围，它包含从Hadoop客户端重新定位的第三方依赖关系。因此，你可以将依赖项绑定到JAR中，并测试整个JAR以解决版本冲突。这样避免了将Hadoop的依赖性泄露到应用程序的类路径上。例如，HBase可以用来与Hadoop集群进行数据交互，而不需要看到任何实现依赖。&lt;/p&gt;
&lt;h2&gt;2.2.3  支持等待容器和分布式调度&lt;/h2&gt;
&lt;p&gt;在Hadoop3 中引入了一种新型执行类型，即等待容器，即使在调度时集群没有可用的资源，它也可以在NodeManager中被调度执行。在这种情况下，这些容器将在NM中排队等待资源启动，等待荣容器比默认容器优先级低，因此，如果需要，可以抢占默认容器的空间，这样可以提供机器的利用率。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201805/666745-20180512115949734-114683161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认容器对于现有的YARN容器，它们由容量调度分配，一旦被调度到节点，就保证有可用的资源使它们执行立即开始。此外，只要没有故障发生，这些容器就可以允许完毕。&lt;/p&gt;
&lt;p&gt;等待容器默认由中心RM分配，但还增加了支持以允许等待容器被分布式调度，该调度群被实现于AM和RM协议的拦截器。&lt;/p&gt;
&lt;h2&gt; 2.2.4 MapReduce任务级别本地化优化&lt;/h2&gt;
&lt;p&gt;在Hadoop3中，本地的Java实现已加入MapReduce地图输出器，对于Shuffle密集的作业，这样可以提高30%或者更高的性能。&lt;/p&gt;
&lt;p&gt;它们添加了映射输出收集器的本机实现，让MapTask基于JNI来本机优化。基本思想是添加一个NativeMapOutputCollector收集器来处理映射器发出的键值对，因此Sort、Spill、文件序列化都可以在本机代码中完成。&lt;/p&gt;
&lt;h2&gt;2.2.5 支持多个NameNode节点&lt;/h2&gt;
&lt;p&gt;在Hadoop2中，HDFS NameNode高可用体系结构有一个Active和Standby NameNode，通过JournalNodes，该体系结构能够容忍任何一个NameNode失败。&lt;/p&gt;
&lt;p&gt;然而，业务关键部署需要更高程度的容错性。因此，在Hadoop3中允许用户运行多个备用的NameNode。例如，通过配置三个NameNode（1个Active NameNode和2个Standby NameNode）和5个JournalNodes节点，集群可以容忍2个NameNode节点故障。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201805/666745-20180512122110789-1716583191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2.6 默认的服务端口被修改&lt;/h2&gt;
&lt;p&gt;早些时候，多个Hadoop服务的默认端口位于Linux端口范围以内。除非客户端程序明确的请求特定的端口号，否则使用的端口号是临时的，因此，在启动时，服务有时会因为与其他另一个应用程序冲突而无法绑定到端口。&lt;/p&gt;
&lt;p&gt;因此，具有临时范围冲突端口已经被移除该范围，影响多个服务的端口号，即NameNode、Secondary NameNode、DataNode等如下所示：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;Daemon&lt;/td&gt;
&lt;td&gt;App&lt;/td&gt;
&lt;td&gt;Hadoop2 Port&lt;/td&gt;
&lt;td&gt;Hadoop3 Port&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NameNode Port&lt;/td&gt;
&lt;td&gt;Hadoop HDFS NameNode&lt;/td&gt;
&lt;td&gt;8020&lt;/td&gt;
&lt;td&gt;9820&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Hadoop HDFS NameNode HTTP UI&lt;/td&gt;
&lt;td&gt;50070&lt;/td&gt;
&lt;td&gt;9870&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Hadoop HDFS NameNode HTTPS UI&lt;/td&gt;
&lt;td&gt;50470&lt;/td&gt;
&lt;td&gt;9871&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Secondary NameNode Port&lt;/td&gt;
&lt;td&gt;Secondary NameNode HTTP&lt;/td&gt;
&lt;td&gt;50091&lt;/td&gt;
&lt;td&gt;9869&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Secondary NameNode HTTP UI&lt;/td&gt;
&lt;td&gt;50090&lt;/td&gt;
&lt;td&gt;9868&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DataNode Port&lt;/td&gt;
&lt;td&gt;Hadoop HDFS DataNode IPC&lt;/td&gt;
&lt;td&gt;50020&lt;/td&gt;
&lt;td&gt;9867&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Hadoop HDFS DataNode&lt;/td&gt;
&lt;td&gt;50010&lt;/td&gt;
&lt;td&gt;9866&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Hadoop HDFS DataNode HTTP UI&lt;/td&gt;
&lt;td&gt;50075&lt;/td&gt;
&lt;td&gt;9864&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Hadoop HDFS DataNode HTTPS UI&lt;/td&gt;
&lt;td&gt;50475&lt;/td&gt;
&lt;td&gt;9865&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;2.2.6 支持文件系统连接器&lt;/h2&gt;
&lt;p&gt;Hadoop现在支持与微软 Azure数据和阿里云对象存储系统的集成。它可以作为一种替代Hadoop兼容的文件系统，首先添加微软Azure数据，然后添加阿里云对象存储系统。&lt;/p&gt;
&lt;h2&gt;2.2.7 DataNode内部负载均衡&lt;/h2&gt;
&lt;p&gt;单个数据节点配置多个数据磁盘，在正常写入操作期间，数据被均匀的划分，因此，磁盘被均匀填充。但是，在维护磁盘时，添加或者替换磁盘会导致DataNode节点存储出现偏移，这种情况在早期的HDFS文件系统中，是没有被处理的。如图下图所示，维护前和维护后不均衡的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201805/666745-20180512125235348-1069765629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在Hadoop3通过新的内部DataNode平衡功能来处理这种情况，这是通过hdfs diskbalancer CLI来进行调用的。执行之后，DataNode会进行均衡处理，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201805/666745-20180512125432569-1927365558.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.2.8 重构后台程序和任务堆管理&lt;/h2&gt;
&lt;p&gt;Hadoop守护进程和MapReduce任务的堆管理已经发生了一系列的变化。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配置守护进程堆大小的新方法：值得注意的是，现在可以根据主机的内存大小进行自动调整，并且已经禁止HADOOP_HEAPSIZE变量。在HADOOP\_HEAPSIZE\_MAX 和 HADOOP\_HEAPSIZE\_MIN位置上，分别设置XMX和XMS。所有全局和守护进程特定堆大小变量现在都支持单元。如果变量仅为一个数，它的大小为MB。&lt;/li&gt;
&lt;li&gt;Map和Reduce的堆大小的配置被简化了，所以不再需要任务配置作为一个Java选项指定。已经指定的两个现有配置不受此更改的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hadoop3的这些新特性还是很吸引人的，目前官方推出的稳定版本是2.9.0，发行版是3.1.0，感兴趣的同学可以下载Hadoop3去体验调研学习一下这些新特性。&lt;/p&gt;

&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;58&quot;&gt;
&lt;p&gt;这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉！&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 12 May 2018 04:55:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smartloli/p/9028267.html</dc:identifier>
</item>
<item>
<title>机器学习（2） - KNN识别MNIST - 风口上的猪</title>
<link>http://www.cnblogs.com/haoyifei/p/9028235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoyifei/p/9028235.html</guid>
<description>&lt;p&gt; https://github.com/s055523/MNISTTensorFlowSharp&lt;/p&gt;

&lt;p&gt;数据可以由http://yann.lecun.com/exdb/mnist/下载。之后，储存在trainDir中，下次就不需要下载了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('75e95db5-65ca-45f7-bee7-48d9b9f42799')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_75e95db5-65ca-45f7-bee7-48d9b9f42799&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_75e95db5-65ca-45f7-bee7-48d9b9f42799&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('75e95db5-65ca-45f7-bee7-48d9b9f42799',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_75e95db5-65ca-45f7-bee7-48d9b9f42799&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果文件不存在就去下载
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;urlBase&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;下载地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;trainDir&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;文件目录地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;file&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;文件名&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Stream MaybeDownload(&lt;span&gt;string&lt;/span&gt; urlBase, &lt;span&gt;string&lt;/span&gt; trainDir, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; file)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Directory.Exists(trainDir))
            {
                Directory.CreateDirectory(trainDir);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; target =&lt;span&gt; Path.Combine(trainDir, file);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;File.Exists(target))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; wc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebClient();
                wc.DownloadFile(urlBase &lt;/span&gt;+&lt;span&gt; file, target);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; File.OpenRead(target);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;下载下来的文件共有四个，都是扩展名为gz的压缩包。&lt;/p&gt;
&lt;p&gt;train-images-idx3-ubyte.gz  55000张训练图片和5000张验证图片&lt;/p&gt;
&lt;p&gt;train-labels-idx1-ubyte.gz     训练图片对应的数字标签（即答案）&lt;/p&gt;
&lt;p&gt;t10k-images-idx3-ubyte.gz   10000张测试图片&lt;/p&gt;
&lt;p&gt;t10k-labels-idx1-ubyte.gz     测试图片对应的数字标签（即答案）&lt;/p&gt;
&lt;h2&gt;处理图片数据压缩包&lt;/h2&gt;
&lt;p&gt;每个压缩包的格式为:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;偏移量&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;值&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;意义&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;2051或2049&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;一个定死的魔术数。用来验证该压缩包是训练集（2051）或测试集（2049）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;60000或10000&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;压缩包的图片数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;每个图片的行数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;每个图片的列数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Unsigned byte&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0 - 255&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;第一张图片的第一个像素&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Unsigned byte&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0 - 255&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;第一张图片的第二个像素&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;因此，我们可以使用一个统一的方式将数据处理。我们只需要那些图片像素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('de6133b2-0fba-4f16-bf31-1ec391da4dc2')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_de6133b2-0fba-4f16-bf31-1ec391da4dc2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_de6133b2-0fba-4f16-bf31-1ec391da4dc2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('de6133b2-0fba-4f16-bf31-1ec391da4dc2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_de6133b2-0fba-4f16-bf31-1ec391da4dc2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 从数据流中读取下一个int32
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;s&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Read32(Stream s)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
            s.Read(x, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; DataConverter.BigEndian.GetInt32(x, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理图片数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;file&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        MnistImage[] ExtractImages(Stream input, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; file)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件是gz格式的&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; gz = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GZipStream(input, CompressionMode.Decompress))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是2051说明下载的文件不对&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Read32(gz) != &lt;span&gt;2051&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不是2051说明下载的文件不对： &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; file);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片数&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; count =&lt;span&gt; Read32(gz);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;行数&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; rows =&lt;span&gt; Read32(gz);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;列数&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; cols =&lt;span&gt; Read32(gz);

                Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;准备读取{count}张图片。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MnistImage[count];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; count; i++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片的大小（每个像素占一个bit)&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; size = rows *&lt;span&gt; cols;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[size];

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从数据流中读取这么大的一块内容&lt;/span&gt;
                    gz.Read(data, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, size);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将读取到的内容转换为MnistImage类型&lt;/span&gt;
                    result[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MnistImage(cols, rows, data);
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;准备一个MnistImage类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d0578d0b-85c4-41c1-ab62-3659c8087174')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_d0578d0b-85c4-41c1-ab62-3659c8087174&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d0578d0b-85c4-41c1-ab62-3659c8087174&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d0578d0b-85c4-41c1-ab62-3659c8087174',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d0578d0b-85c4-41c1-ab62-3659c8087174&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片类型
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; MnistImage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Cols, Rows;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] Data;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt;[] DataFloat;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MnistImage(&lt;span&gt;int&lt;/span&gt; cols, &lt;span&gt;int&lt;/span&gt; rows, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data)
        {
            Cols &lt;/span&gt;=&lt;span&gt; cols;
            Rows &lt;/span&gt;=&lt;span&gt; rows;
            Data &lt;/span&gt;=&lt;span&gt; data;
            DataFloat &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt;[data.Length];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.Length; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据归一化（这里将0-255除255变成了0-1之间的小数）
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以归一为-0.5到0.5之间&lt;/span&gt;
                DataFloat[i] = Data[i] /&lt;span&gt; 255f;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这样一来，图片数据就处理完成了。&lt;/p&gt;
&lt;h2&gt;处理数字标签数据压缩包&lt;/h2&gt;
&lt;p&gt;数字标签数据压缩包和图片数据压缩包的格式类似。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;偏移量&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;值&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;意义&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;2051或2049&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;一个定死的魔术数。用来验证该压缩包是训练集（2051）或测试集（2049）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Int32&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;60000或10000&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;压缩包的数字标签数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Unsigned byte&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0 - 9&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;第一张图片对应的数字&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;Unsigned byte&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;0 - 9&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;第二张图片对应的数字&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;150&quot;&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;它的处理更加简单。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('eda5251d-c606-4e6d-872f-eb59e5ef5ef0')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_eda5251d-c606-4e6d-872f-eb59e5ef5ef0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eda5251d-c606-4e6d-872f-eb59e5ef5ef0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('eda5251d-c606-4e6d-872f-eb59e5ef5ef0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eda5251d-c606-4e6d-872f-eb59e5ef5ef0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理标签数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;input&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;file&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt;[] ExtractLabels(Stream input, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; file)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; gz = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GZipStream(input, CompressionMode.Decompress))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是2049说明下载的文件不对&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (Read32(gz) != &lt;span&gt;2049&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不是2049说明下载的文件不对:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; file);
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; count =&lt;span&gt; Read32(gz);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; labels = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[count];

                gz.Read(labels, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, count);

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; labels;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;将数字标签转化为二维数组：one-hot编码&lt;/h2&gt;
&lt;p&gt;由于我们的数字为0-9，所以，可以视为有十个class。此时，为了后续的处理方便，我们将数字标签转化为数组。因此，一组标签就转换为了一个二维数组。&lt;/p&gt;
&lt;p&gt;例如，标签0变成[1，0，0，0，0，0，0，0，0，0]&lt;/p&gt;
&lt;p&gt;标签1变成[0，1，0，0，0，0，0，0，0，0]&lt;/p&gt;
&lt;p&gt;以此类推。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1edb0ca9-a46e-49f3-ba8d-ef23ffa368be')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_1edb0ca9-a46e-49f3-ba8d-ef23ffa368be&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1edb0ca9-a46e-49f3-ba8d-ef23ffa368be&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1edb0ca9-a46e-49f3-ba8d-ef23ffa368be',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1edb0ca9-a46e-49f3-ba8d-ef23ffa368be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将数字标签一维数组转为一个二维数组
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;labels&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;numClasses&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;多少个类别，这里是10（0到9）&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt;[,] OneHot(&lt;span&gt;byte&lt;/span&gt;[] labels, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; numClasses)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oneHot = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[labels.Length, numClasses];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; labels.Length; i++&lt;span&gt;)
            {
                oneHot[i, labels[i]] &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oneHot;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;到此为止，数据格式处理就全部结束了。下面的代码展示了数据处理的全过程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('404c9ae7-9a96-40b9-8f10-27db358e5dd8')&quot; readability=&quot;55&quot;&gt;&lt;img id=&quot;code_img_closed_404c9ae7-9a96-40b9-8f10-27db358e5dd8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_404c9ae7-9a96-40b9-8f10-27db358e5dd8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('404c9ae7-9a96-40b9-8f10-27db358e5dd8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_404c9ae7-9a96-40b9-8f10-27db358e5dd8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;105&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理数据集
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;trainDir&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;数据集所在文件夹&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;numClasses&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;validationSize&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;拿出多少做验证?&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReadDataSets(&lt;span&gt;string&lt;/span&gt; trainDir, &lt;span&gt;int&lt;/span&gt; numClasses = &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; validationSize = &lt;span&gt;5000&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SourceUrl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://yann.lecun.com/exdb/mnist/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TrainImagesName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train-images-idx3-ubyte.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TrainLabelsName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train-labels-idx1-ubyte.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TestImagesName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t10k-images-idx3-ubyte.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TestLabelsName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t10k-labels-idx1-ubyte.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得训练数据，然后处理训练数据和测试数据&lt;/span&gt;
            TrainImages =&lt;span&gt; ExtractImages(Helper.MaybeDownload(SourceUrl, trainDir, TrainImagesName), TrainImagesName);
            TestImages &lt;/span&gt;=&lt;span&gt; ExtractImages(Helper.MaybeDownload(SourceUrl, trainDir, TestImagesName), TestImagesName);
            TrainLabels &lt;/span&gt;=&lt;span&gt; ExtractLabels(Helper.MaybeDownload(SourceUrl, trainDir, TrainLabelsName), TrainLabelsName);
            TestLabels &lt;/span&gt;=&lt;span&gt; ExtractLabels(Helper.MaybeDownload(SourceUrl, trainDir, TestLabelsName), TestLabelsName);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿出前面的一部分做验证&lt;/span&gt;
            ValidationImages = Pick(TrainImages, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, validationSize);
            ValidationLabels &lt;/span&gt;= Pick(TrainLabels, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, validationSize);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿出剩下的做训练（输入0意味着拿剩下所有的）&lt;/span&gt;
            TrainImages = Pick(TrainImages, validationSize, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            TrainLabels &lt;/span&gt;= Pick(TrainLabels, validationSize, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数字标签转换为二维数组
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;例如，标签3 =》 [0,0,0,1,0,0,0,0,0,0]
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标签0 =》 [1,0,0,0,0,0,0,0,0,0]&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (numClasses != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                OneHotTrainLabels &lt;/span&gt;=&lt;span&gt; OneHot(TrainLabels, numClasses);
                OneHotValidationLabels &lt;/span&gt;=&lt;span&gt; OneHot(ValidationLabels, numClasses);
                OneHotTestLabels &lt;/span&gt;=&lt;span&gt; OneHot(TestLabels, numClasses);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获得source集合中的一部分，从first开始，到last结束
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;first&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;last&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        T[] Pick&amp;lt;T&amp;gt;(T[] source, &lt;span&gt;int&lt;/span&gt; first, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; last)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (last == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                last &lt;/span&gt;=&lt;span&gt; source.Length;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; count = last -&lt;span&gt; first;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret =&lt;span&gt; source.Skip(first).Take(count).ToArray();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Mnist Load()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mnist();
            x.ReadDataSets(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\人工智能\C#代码\MNISTTensorFlowSharp\MNISTTensorFlowSharp\data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在这里，数据共有下面几部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;训练图片数据55000 TrainImages及对应标签TrainLabels&lt;/li&gt;
&lt;li&gt;验证图片数据5000 ValidationImages及对应标签ValidationLabels&lt;/li&gt;
&lt;li&gt;测试图片数据10000 TestImages及对应标签TestLabels&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在，我们已经有了所有的数据在手。需要实现的是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;拿出数据中的一部分（例如，5000张图片）作为KNN的训练数据，然后，再从数据中的另一部分拿一张图片A&lt;/li&gt;
&lt;li&gt;对这张图片A，求它和5000张训练图片的距离，并找出一张训练图片B，它是所有训练图片中，和A距离最小的那张（这意味着K=1）&lt;/li&gt;
&lt;li&gt;此时，就认为A所代表的数字等同于B所代表的数字b&lt;/li&gt;
&lt;li&gt;重复1-3，N次&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;首先进行数据的收集：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('80a081e0-7d89-4b40-a93b-e392bfd86ee1')&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_80a081e0-7d89-4b40-a93b-e392bfd86ee1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_80a081e0-7d89-4b40-a93b-e392bfd86ee1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('80a081e0-7d89-4b40-a93b-e392bfd86ee1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_80a081e0-7d89-4b40-a93b-e392bfd86ee1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;三个Reader分别从总的数据库中获得数据&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; BatchReader GetTrainReader() =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BatchReader(TrainImages, TrainLabels, OneHotTrainLabels);
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BatchReader GetTestReader() =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BatchReader(TestImages, TestLabels, OneHotTestLabels);
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BatchReader GetValidationReader() =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BatchReader(ValidationImages, ValidationLabels, OneHotValidationLabels);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据的一部分，包括了所有的有用信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BatchReader
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; start = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片库&lt;/span&gt;
&lt;span&gt;            MnistImage[] source;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数字标签&lt;/span&gt;
            &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] labels;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;oneHot之后的数字标签&lt;/span&gt;
            &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[,] oneHotLabels;

            &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; BatchReader(MnistImage[] source, &lt;span&gt;byte&lt;/span&gt;[] labels, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[,] oneHotLabels)
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.source =&lt;span&gt; source;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.labels =&lt;span&gt; labels;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.oneHotLabels =&lt;span&gt; oneHotLabels;
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回两个浮点二维数组（C# 7的新语法）
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;batchSize&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; (&lt;span&gt;float&lt;/span&gt;[,], &lt;span&gt;float&lt;/span&gt;[,]) NextBatch(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; batchSize)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一张图&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; imageData = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;[batchSize, &lt;span&gt;784&lt;/span&gt;&lt;span&gt;];
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标签&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; labelData = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;[batchSize, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;];

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; p = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; item = &lt;span&gt;0&lt;/span&gt;; item &amp;lt; batchSize; item++&lt;span&gt;)
                {
                    Buffer.BlockCopy(source[start &lt;/span&gt;+ item].DataFloat, &lt;span&gt;0&lt;/span&gt;, imageData, p, &lt;span&gt;784&lt;/span&gt; * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;float&lt;/span&gt;&lt;span&gt;));
                    p &lt;/span&gt;+= &lt;span&gt;784&lt;/span&gt; * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;float&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; &lt;span&gt;10&lt;/span&gt;; j++&lt;span&gt;)
                        labelData[item, j] &lt;/span&gt;= oneHotLabels[item +&lt;span&gt; start, j];
                }

                start &lt;/span&gt;+=&lt;span&gt; batchSize;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (imageData, labelData);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后，在算法中，获取数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3a3bf0fe-723c-4604-86ea-22aab233cd10')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_3a3bf0fe-723c-4604-86ea-22aab233cd10&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a3bf0fe-723c-4604-86ea-22aab233cd10&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3a3bf0fe-723c-4604-86ea-22aab233cd10',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a3bf0fe-723c-4604-86ea-22aab233cd10&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; KNN()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得数据&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; mnist =&lt;span&gt; Mnist.Load();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿5000个训练数据，200个测试数据&lt;/span&gt;
            &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; trainCount = &lt;span&gt;5000&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; testCount = &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得的数据有两个
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个是图片，它们都是28*28的
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个是one-hot的标签，它们都是1*10的&lt;/span&gt;
            (&lt;span&gt;var&lt;/span&gt; trainingImages, &lt;span&gt;var&lt;/span&gt; trainingLabels) =&lt;span&gt; mnist.GetTrainReader().NextBatch(trainCount);
            (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; testImages, &lt;span&gt;var&lt;/span&gt; testLabels) =&lt;span&gt; mnist.GetTestReader().NextBatch(testCount);

            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MNIST 1NN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;下面进行计算。这里使用了K=1的L1距离。这是最简单的情况。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d310da78-4674-4850-a69d-80620a89532d')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_d310da78-4674-4850-a69d-80620a89532d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d310da78-4674-4850-a69d-80620a89532d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d310da78-4674-4850-a69d-80620a89532d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d310da78-4674-4850-a69d-80620a89532d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立一个图表示计算任务&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; graph = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TFGraph())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; session = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TFSession(graph);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来feed数据的占位符。trainingInput表示N张用来进行训练的图片,N是一个变量，所以这里使用-1&lt;/span&gt;
                TFOutput trainingInput = graph.Placeholder(TFDataType.Float, &lt;span&gt;new&lt;/span&gt; TFShape(-&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;784&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;xte表示一张用来测试的图片&lt;/span&gt;
                TFOutput xte = graph.Placeholder(TFDataType.Float, &lt;span&gt;new&lt;/span&gt; TFShape(&lt;span&gt;784&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算这两张图片的L1距离。这很简单，实际上就是把784个数字逐对相减，然后取绝对值，最后加起来变成一个总和&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; distance = graph.ReduceSum(graph.Abs(graph.Sub(trainingInput, xte)), axis: graph.Const(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里只是用了最近的那个数据
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也就是说，最近的那个数据是什么，那pred（预测值）就是什么&lt;/span&gt;
                TFOutput pred = graph.ArgMin(distance, graph.Const(&lt;span&gt;0&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;最后是开启Session计算的过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6abded40-0791-4dc4-87ed-76c153f249b9')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_6abded40-0791-4dc4-87ed-76c153f249b9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6abded40-0791-4dc4-87ed-76c153f249b9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6abded40-0791-4dc4-87ed-76c153f249b9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6abded40-0791-4dc4-87ed-76c153f249b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;var&lt;/span&gt; accuracy =&lt;span&gt; 0f;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始循环进行计算，循环trainCount次&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; testCount; i++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; runner =&lt;span&gt; session.GetRunner();

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次，对一张新的测试图，计算它和trainCount张训练图的距离，并获得最近的那张&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; runner.Fetch(pred).Fetch(distance)
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;trainCount张训练图（数据是trainingImages）&lt;/span&gt;
&lt;span&gt;                        .AddInput(trainingInput, trainingImages)
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;testCount张测试图（数据是从testImages中拿出来的）&lt;/span&gt;
&lt;span&gt;                        .AddInput(xte, Extract(testImages, i))
                        .Run();
                    
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最近的点的序号&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; nn_index = (&lt;span&gt;int&lt;/span&gt;)(&lt;span&gt;long&lt;/span&gt;)result[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].GetValue();

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从trainingLabels中找到答案（这是预测值）&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; prediction =&lt;span&gt; ArgMax(trainingLabels, nn_index);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确答案位于testLabels[i]中&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; real =&lt;span&gt; ArgMax(testLabels, i);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;PrintImage(testImages, i);&lt;/span&gt;
&lt;span&gt;
                    Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试 {i}: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt;
                        $&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;预测: {prediction} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt;
                        $&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正确答案: {real} (最近的点的序号={nn_index})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(testImages);&lt;/span&gt;

                    &lt;span&gt;if&lt;/span&gt; (prediction ==&lt;span&gt; real)
                    {
                        accuracy &lt;/span&gt;+= 1f /&lt;span&gt; testCount;
                    }
                }
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;准确率: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + accuracy);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;本文只是对KNN识别MNIST数据集进行了一个非常简单的介绍。在实现了最简单的K=1的L1距离计算之后，正确率约为91%。大家可以试着将算法进行改进，例如取K=2或者其他数，或者计算L2距离等。L2距离的结果比L1好一些，可以达到93-94%的正确率。&lt;/p&gt;
</description>
<pubDate>Sat, 12 May 2018 03:49:00 +0000</pubDate>
<dc:creator>风口上的猪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haoyifei/p/9028235.html</dc:identifier>
</item>
<item>
<title>前端工程化（二）---webpack配置 - lichking2017</title>
<link>http://www.cnblogs.com/lichking2017/p/9024642.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lichking2017/p/9024642.html</guid>
<description>&lt;p&gt;导航&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9023821.html&quot; target=&quot;_blank&quot;&gt;前端工程化（一）---工程基础目录搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9024642.html&quot; target=&quot;_blank&quot;&gt;前端工程化（二）---webpack配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端工程化（三）---Vue的开发模式&lt;/p&gt;
&lt;p&gt;前端工程化（四）---helloWord&lt;/p&gt;

&lt;p&gt;继续上一遍的配置，本节主要记录webpack的配置过程&lt;/p&gt;
&lt;p&gt;webpack的基础知识可以参照官方文档：&lt;a href=&quot;https://doc.webpack-china.org/&quot; target=&quot;_blank&quot;&gt;webpack中文官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前在我的项目中起到的作用：&lt;/p&gt;
&lt;h2&gt;1、webpack在前端工程打包过程中起到了什么作用&lt;/h2&gt;
&lt;p&gt;　　声明入口（entry）：通俗来讲，就是项目的构建过程是从哪开始，指定的是一个或多个js文件。前端开发，都是基于es6的模块化概念的，每一个文件都可以认为是一个模块，模块之间使用import语句相互引用，相互协作。这种依赖最终会形成一颗依赖树，而入口文件就是树的根。webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。每个依赖项随即被处理，最终输出到**.bundles文件中&lt;/p&gt;
&lt;p&gt;　　声明出口（output）：其实就是构建输出目录，也就是&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9023821.html&quot; target=&quot;_blank&quot;&gt;前端工程化（一）---工程基础目录搭建&lt;/a&gt;中创建的dist目录&lt;/p&gt;
&lt;p&gt;　　对于非JavaScript文件的处理（loader）：webpack自身只能理解JavaScript，在模块依赖过程中，除了.js文件外，对于vue、css等模块的import是无法理解的。loader将vue、css、图片等信息转化为webpack能理解的方式，从而完成模块之间的依赖&lt;/p&gt;
&lt;p&gt;　　插件的应用（plugin）：比如常用的HtmlWebpackPlugin插件、ProvidePlugin等，辅助项目的构建&lt;/p&gt;
&lt;h2&gt;2、webpack-dev-server&lt;/h2&gt;
&lt;p&gt;　　类似于tomcat、是前端的web容器。前端工程打包后，就通过它访问&lt;/p&gt;
&lt;h2&gt;3、webpack-merge模块的使用&lt;/h2&gt;
&lt;p&gt;　　可以使webpack的配置文件拥有类似于继承的关系。而前端项目的构建是要分环境的，比如开发环境、正式环境。我们可以将通用的配置抽取为common配置，然后让开发环境与正式环境的配置分别继承自common，这样好维护&lt;/p&gt;
&lt;h2&gt;4、webpack的路径&lt;/h2&gt;
&lt;p&gt;　　在配置entry等需要制定文件位置的元素的时候，需要指定文件所在的路径。&lt;/p&gt;
&lt;p&gt;　　刚刚接触webpack的时候，总是被路径搞糊涂，总是提示找不到文件。&lt;/p&gt;
&lt;p&gt;　　记住一点，一定要利用&quot;__dirname&quot;来配置文件的路径(注意，是两个下划线)。&lt;/p&gt;
&lt;p&gt;　　“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。在webpack的配置文件中使用__dirname，那就代表当前的配置文件所在的路径&lt;/p&gt;
&lt;p&gt;      文件路径=&lt;span&gt;__dirname+相对路径&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;注意：一定要搞清楚自己安装的webpack版本，不同的版本配置是有所不同的。比如从webpack2-&amp;gt;webpack4这种大版本跳跃，对于loader的配置是有很大的区别的。我当前的webpack版本是4.5.0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9023821.html&quot; target=&quot;_blank&quot;&gt;前端工程化（一）---工程基础目录搭建&lt;/a&gt; 中已经介绍了如何安装webpack，下面直接介绍配置的过程&lt;/p&gt;
&lt;h2&gt;1、新建webpack配置文件&lt;/h2&gt;
&lt;p&gt;在&lt;span&gt;工程的根目录下&lt;/span&gt;，新建如下文件&lt;/p&gt;
&lt;p&gt;webpack.common.js：通用配置。主要是entry、output、loader、插件的配置&lt;/p&gt;
&lt;p&gt;webpack.dev.js：开发环境的配置。主要配置devtool、代理等信息&lt;/p&gt;
&lt;p&gt;webpack.prod.js：生产环境的配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1394048/201805/1394048-20180512040936017-1694260586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、安装项目依赖的模块&lt;/h2&gt;
&lt;p&gt;使用cnpm i 模块名 --save-dev 命令安装项目的依赖&lt;/p&gt;
&lt;p&gt;以下是安装过程，有几点需要注意&lt;/p&gt;
&lt;p&gt;第40行，提示模块需要webpack3.1.0的依赖，但是安装的却是4.2.0。这说明正式版本的extract-text-webpack-plugin还没有与webpack最新版本同步。这时需要在模块后面加上版本信息“@next”&lt;/p&gt;
&lt;p&gt;第46行，提示没有找到iview需要依赖的vue模块。安装上vue就可以了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装过程要注意警告信息，否则安装的模块可能会不生效&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;&lt;img id=&quot;code_img_closed_e2ca4f14-486e-403e-886f-5f739795e080&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e2ca4f14-486e-403e-886f-5f739795e080&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e2ca4f14-486e-403e-886f-5f739795e080&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;133&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i babel-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; ✔ Linked &lt;span&gt;10&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; ✔ All packages installed (&lt;span&gt;5&lt;/span&gt; packages installed from npm registry, used 695ms, speed &lt;span&gt;105&lt;/span&gt;.18kB/s, json &lt;span&gt;11&lt;/span&gt;(&lt;span&gt;73&lt;/span&gt;&lt;span&gt;.1kB), tarball 0B)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i webpack-dev-server --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; ✔ Linked &lt;span&gt;0&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; ✔ All packages installed (used 523ms, speed &lt;span&gt;273&lt;/span&gt;.9kB/s, json &lt;span&gt;1&lt;/span&gt;(&lt;span&gt;143&lt;/span&gt;&lt;span&gt;.25kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i babel-loader babel-core babel-preset-&lt;span&gt;env&lt;/span&gt; --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; ✔ Installed &lt;span&gt;3&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; ✔ Linked &lt;span&gt;93&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;4&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; ✔ All packages installed (&lt;span&gt;84&lt;/span&gt; packages installed from npm registry, used 3s, speed &lt;span&gt;643&lt;/span&gt;.47kB/s, json &lt;span&gt;96&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;.38MB), tarball &lt;span&gt;275&lt;/span&gt;&lt;span&gt;.95kB)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i clean-webpack-plugin --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; ✔ Linked &lt;span&gt;1&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; ✔ All packages installed (&lt;span&gt;1&lt;/span&gt; packages installed from npm registry, used 505ms, speed &lt;span&gt;35&lt;/span&gt;.25kB/s, json &lt;span&gt;2&lt;/span&gt;(&lt;span&gt;17&lt;/span&gt;&lt;span&gt;.8kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i css-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; ✔ Linked &lt;span&gt;106&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; ✔ All packages installed (&lt;span&gt;94&lt;/span&gt; packages installed from npm registry, used 2s, speed &lt;span&gt;348&lt;/span&gt;.87kB/s, json &lt;span&gt;107&lt;/span&gt;(&lt;span&gt;695&lt;/span&gt;&lt;span&gt;.29kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i express --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; ✔ Linked &lt;span&gt;0&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; ✔ All packages installed (used 281ms, speed &lt;span&gt;90&lt;/span&gt;.08kB/s, json &lt;span&gt;1&lt;/span&gt;(&lt;span&gt;25&lt;/span&gt;&lt;span&gt;.31kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i extract-text-webpack-plugin --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; ✔ Linked &lt;span&gt;12&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt; peerDependencies WARNING extract-text-webpack-plugin@* requires a peer of webpack@^&lt;span&gt;3.1&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; but webpack@&lt;span&gt;4.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt; was installed
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; ✔ All packages installed (&lt;span&gt;9&lt;/span&gt; packages installed from npm registry, used 1s, speed &lt;span&gt;247&lt;/span&gt;.39kB/s, json &lt;span&gt;13&lt;/span&gt;(&lt;span&gt;261&lt;/span&gt;&lt;span&gt;.98kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i extract-text-webpack-plugin@next --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; ✔ Linked &lt;span&gt;11&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; peerDependencies link ajv@&lt;span&gt;6.5&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/_ajv-keywords@&lt;span&gt;3.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;@ajv-keywords unmet with /Users/lichking2015/Documents/&lt;span&gt;remote
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; Ftp/test1/node_modules/ajv(&lt;span&gt;5.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; ✔ All packages installed (&lt;span&gt;7&lt;/span&gt; packages installed from npm registry, used 990ms, speed &lt;span&gt;122&lt;/span&gt;.31kB/s, json &lt;span&gt;12&lt;/span&gt;(&lt;span&gt;121&lt;/span&gt;&lt;span&gt;.08kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i &lt;span&gt;file&lt;/span&gt;-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; ✔ Linked &lt;span&gt;2&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; ✔ All packages installed (&lt;span&gt;1&lt;/span&gt; packages installed from npm registry, used 427ms, speed &lt;span&gt;15&lt;/span&gt;.47kB/s, json &lt;span&gt;3&lt;/span&gt;(&lt;span&gt;6&lt;/span&gt;&lt;span&gt;.61kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i html-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; ✔ Linked &lt;span&gt;11&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; ✔ All packages installed (&lt;span&gt;6&lt;/span&gt; packages installed from npm registry, used 719ms, speed &lt;span&gt;216&lt;/span&gt;.8kB/s, json &lt;span&gt;12&lt;/span&gt;(&lt;span&gt;155&lt;/span&gt;&lt;span&gt;.88kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i html-webpack-plugin --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; ✔ Linked &lt;span&gt;0&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; ✔ All packages installed (used 261ms, speed &lt;span&gt;25&lt;/span&gt;.2kB/s, json &lt;span&gt;1&lt;/span&gt;(&lt;span&gt;6&lt;/span&gt;&lt;span&gt;.58kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i iview iview-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; ✔ Installed &lt;span&gt;2&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt; ✔ Linked &lt;span&gt;10&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; peerDependencies WARNING iview@* requires a peer of vue@^&lt;span&gt;2.5&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt; but none was installed
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; ✔ All packages installed (&lt;span&gt;10&lt;/span&gt; packages installed from npm registry, used 2s, speed &lt;span&gt;1&lt;/span&gt;.39MB/s, json &lt;span&gt;12&lt;/span&gt;(&lt;span&gt;340&lt;/span&gt;.44kB), tarball &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.24MB)
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i jquery --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; ✔ Linked &lt;span&gt;0&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; ✔ All packages installed (&lt;span&gt;1&lt;/span&gt; packages installed from npm registry, used 409ms, speed &lt;span&gt;92&lt;/span&gt;.41kB/s, json &lt;span&gt;1&lt;/span&gt;(&lt;span&gt;37&lt;/span&gt;&lt;span&gt;.79kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i &lt;span&gt;less&lt;/span&gt; --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; ✔ Linked &lt;span&gt;54&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; ✔ All packages installed (&lt;span&gt;48&lt;/span&gt; packages installed from npm registry, used 2s, speed 499kB/s, json &lt;span&gt;55&lt;/span&gt;(&lt;span&gt;566&lt;/span&gt;.14kB), tarball &lt;span&gt;596&lt;/span&gt;&lt;span&gt;.03kB)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i &lt;span&gt;less&lt;/span&gt; &lt;span&gt;less&lt;/span&gt;-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; ✔ Installed &lt;span&gt;2&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; ✔ Linked &lt;span&gt;3&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; ✔ All packages installed (&lt;span&gt;2&lt;/span&gt; packages installed from npm registry, used 587ms, speed &lt;span&gt;81&lt;/span&gt;.06kB/s, json &lt;span&gt;5&lt;/span&gt;(&lt;span&gt;42&lt;/span&gt;.13kB), tarball &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.45kB)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i style-loader --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; ✔ Linked &lt;span&gt;2&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; ✔ All packages installed (&lt;span&gt;1&lt;/span&gt; packages installed from npm registry, used 825ms, speed &lt;span&gt;63&lt;/span&gt;.68kB/s, json &lt;span&gt;3&lt;/span&gt;(&lt;span&gt;40&lt;/span&gt;.45kB), tarball &lt;span&gt;12&lt;/span&gt;&lt;span&gt;.08kB)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i uglifyjs-webpack-plugin --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; ✔ Linked &lt;span&gt;49&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; ✔ All packages installed (&lt;span&gt;36&lt;/span&gt; packages installed from npm registry, used 2s, speed &lt;span&gt;225&lt;/span&gt;.22kB/s, json &lt;span&gt;50&lt;/span&gt;(&lt;span&gt;497&lt;/span&gt;&lt;span&gt;.07kB), tarball 0B)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i vue vue-loader vue-router vue-template-compiler --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; ✔ Installed &lt;span&gt;4&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; ✔ Linked &lt;span&gt;21&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; Recently updated (since &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt; packages (detail see &lt;span&gt;file&lt;/span&gt; /Users/lichking2015/Documents/remoteFtp/test1/node_modules/&lt;span&gt;.recently_updates.txt)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; ✔ All packages installed (&lt;span&gt;16&lt;/span&gt; packages installed from npm registry, used 2s, speed &lt;span&gt;1&lt;/span&gt;.13MB/s, json &lt;span&gt;25&lt;/span&gt;(&lt;span&gt;527&lt;/span&gt;.25kB), tarball &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.89MB)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i wepack-merge --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; ✖ Install fail! Error: GET https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npm.taobao.org/wepack-merge response 404 status&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; Error: GET https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npm.taobao.org/wepack-merge response 404 status&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;     at get (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/get.js:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;17&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     at get.next (&amp;lt;anonymous&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     at onFulfilled (/usr/local/lib/node_modules/cnpm/node_modules/co/index.js:&lt;span&gt;65&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     at &amp;lt;anonymous&amp;gt;
&lt;span&gt;111&lt;/span&gt;     at process._tickCallback (internal/process/next_tick.js:&lt;span&gt;118&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; npminstall version: &lt;span&gt;3.5&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; npminstall args: /usr/local/bin/node /usr/local/lib/node_modules/cnpm/node_modules/npminstall/bin/&lt;span&gt;install&lt;/span&gt;.js --fix-bug-versions --china --userconfig=/Users/lichking2015/&lt;span&gt;.cnpm
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; rc --disturl=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;npm.taobao.org/mirrors/node --registry=&lt;/span&gt;&lt;span&gt;https://registry.npm.taobao.org&lt;/span&gt;&lt;span&gt; wepack-merge --save-dev&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; lichdeMacBook-Pro:test1 lichking2015$ cnpm i webpack-merge --save-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; ✔ Installed &lt;span&gt;1&lt;/span&gt;&lt;span&gt; packages
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; ✔ Linked &lt;span&gt;1&lt;/span&gt;&lt;span&gt; latest versions
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; ✔ Run &lt;span&gt;0&lt;/span&gt;&lt;span&gt; scripts
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; ✔ All packages installed (&lt;span&gt;1&lt;/span&gt; packages installed from npm registry, used 338ms, speed &lt;span&gt;30&lt;/span&gt;.75kB/s, json &lt;span&gt;2&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;.39kB), tarball 0B)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;安装的内容主要包括：各种loader、插件。由于项目是基于vue、iView开发的，因此也添加了这两部分的依赖。最后的package.json结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &quot;name&quot;: &quot;syinfo&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;,
    &quot;start&quot;: &quot;webpack-dev-server --config webpack.dev.js&quot;,
    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;
  },
  &quot;author&quot;: &quot;lichking2017&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;devDependencies&quot;: {
    &quot;axios&quot;: &quot;^0.18.0&quot;,
    &quot;babel-core&quot;: &quot;^6.26.0&quot;,
    &quot;babel-loader&quot;: &quot;^7.1.4&quot;,
    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,
    &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;,
    &quot;css-loader&quot;: &quot;^0.28.11&quot;,
    &quot;express&quot;: &quot;^4.16.3&quot;,
    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,
    &quot;file-loader&quot;: &quot;^1.1.11&quot;,
    &quot;html-loader&quot;: &quot;^0.5.5&quot;,
    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,
    &quot;iview&quot;: &quot;^2.12.0&quot;,
    &quot;iview-loader&quot;: &quot;^1.0.0&quot;,
    &quot;jquery&quot;: &quot;^3.3.1&quot;,
    &quot;less&quot;: &quot;^3.0.1&quot;,
    &quot;less-loader&quot;: &quot;^4.1.0&quot;,
    &quot;style-loader&quot;: &quot;^0.20.3&quot;,
    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.2.4&quot;,
    &quot;vue&quot;: &quot;^2.5.16&quot;,
    &quot;vue-loader&quot;: &quot;^14.2.2&quot;,
    &quot;vue-router&quot;: &quot;^3.0.1&quot;,
    &quot;vue-template-compiler&quot;: &quot;^2.5.16&quot;,
    &quot;webpack&quot;: &quot;^4.5.0&quot;,
    &quot;webpack-dev-server&quot;: &quot;^3.1.1&quot;,
    &quot;webpack-merge&quot;: &quot;^4.1.2&quot;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3、配置webpack&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;webpack.common.js的配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是&lt;/p&gt;
&lt;p&gt;第96行的jquery引入方式，Vue虽然不建议类似于Jquery这样的类库去直接操作DOM，但是某些场景下，使用JQuery还是很方便的，比如使用$.extend来扩展对象，一般都是在编写组件的时候用到&lt;/p&gt;
&lt;p&gt;第4~7行是node引入模块的方式。这种方式能够成功的引入模块，是依赖于本地的模块库，也就是项目根目录下的node_modules文件夹&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u014337212/article/details/78251670&quot; target=&quot;_blank&quot;&gt;什么是Node的全局安装，什么又是本地安装？&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59.5&quot;&gt;&lt;img id=&quot;code_img_closed_a7942d3a-2044-4e3e-95a7-234dfda5652e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a7942d3a-2044-4e3e-95a7-234dfda5652e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a7942d3a-2044-4e3e-95a7-234dfda5652e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;114&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;通用配置
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; const path = require('path'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; const HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; const webpack = require('webpack'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;  entry:{
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     index:path.join(__dirname,'src/index.js'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     login:path.join(__dirname,'src/login.js'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;  output: {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     filename: 'js/[name].bundle.js'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     path: path.resolve(__dirname, 'dist'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;  module:{
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;    rules: [
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解析vue文件&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         test:/\.vue$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        use:[
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;           'vue-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;          {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             loader:'iview-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;            options:{
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;               prefix:&lt;span&gt;false&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用babel解析js文件，当js文件中包含es6的时候，需要它&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         test: /\.js$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         exclude: /(node_modules|bower_components)/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        use: {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;           loader: 'babel-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;          options: {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             presets: ['env'&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 管理样式资源，使js文件能够引入css模块&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抽取样式文件为单独的css文件&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         test:/\.css$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use:[&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   'style-loader',&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   'css-loader'&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        use: ExtractTextPlugin.extract({
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;           fallback: &quot;style-loader&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;           use: &quot;css-loader&quot;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         test:/\.less$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        use:[
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;           'style-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;           'css-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;           'less-loader'
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 管理图片文件，使css文件能够对图片引用&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         test:/\.(png|svg|jpg|gif)$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        use:[
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;          {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             loader:'file-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;            options:{
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;               name:'img/[name].[hash:8].[ext]'
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 管理字体文件&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         test:/\.(woff|woff2|eot|ttf|otf)$/&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        use:[
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;          {
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             loader:'file-loader'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;            options:{
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;               name:'img/[name].[hash:8].[ext]'
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;  plugins: [
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; new HtmlWebpackPlugin({&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   title: 'Production'&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }),&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; shimming配置，使jquery能够在所有模块中使用&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.ProvidePlugin({
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;       $:'jquery'
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    }),
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将css样式文件从js 打包中抽取出来，形成名字叫styles.css的文件&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt; ExtractTextPlugin(&quot;[name].css&quot;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件title，如果不使用模板，那么直接就会显示在生成的文件中&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果使用了模板，那么就要使用表达式&amp;lt;%=htmlWebpackPlugin.options.title%&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;       title:'后台主页'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成目标文件的名字&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;       filename:'index.html'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以指定生成目录&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; filename:'assets/index.html'&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定模板&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;       template:'./src/assets/templates/index.html'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定资源引入的script标签位置&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;       inject:'header'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加入icon图标&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;       favicon:'./src/assets/icons/logo.net.ico'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 压缩代码&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体选项见https://github.com/kangax/html-minifier#options-quick-reference&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;      minify:{
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去除注释&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         removeComments:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 压缩HTML代码，变成一行&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         collapseWhitespace:&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在html页面引入打包后的js和css资源的时候，加上hash码&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; hash:true,&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;       cache:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在生成html的过程中，如果出现错误，则显示在html页面上，默认为true&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;       showErrors:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;      chunks:[
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;         'index'
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;      ]
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;    }),
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;       filename:'login.html'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;       title:'欢迎您，请登录'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;       hash:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;       template:'./src/assets/templates/login.html'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;       showErrors:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;      chunks:[
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         'login'
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;      ],
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定资源引入的script标签位置&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;       inject:'header'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加入icon图标&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;       favicon:'./src/assets/icons/logo.net.ico'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 压缩代码&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体选项见https://github.com/kangax/html-minifier#options-quick-reference&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; &lt;span&gt;      minify:{
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去除注释&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         removeComments:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 压缩HTML代码，变成一行&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;         collapseWhitespace:&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;      },
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;  ],
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;webpack.dev.js的配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是&lt;/p&gt;
&lt;p&gt;devServer的作用：它是webpack-dev-server的配置项，可以定义开启端口等web容器相关的信息。具体的配置信息参见&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外就是proxy的配置：它是用来解决跨域问题的。由于项目是前后端分离的，因此肯定会涉及到跨域，配置中的意思就是如果请求是以'/api'开头的，那么就要转发到'http://192.168.0.103:8081'这个地址上，而这个地址正是后端服务器监听的端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_dbaab64f-c004-4f71-b7f3-ef474b6bb543&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbaab64f-c004-4f71-b7f3-ef474b6bb543&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbaab64f-c004-4f71-b7f3-ef474b6bb543&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  开发环境配置
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; const merge = require('webpack-merge'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; const common = require('./webpack.common.js'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; const webpack = require('webpack'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const express = require('express')&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const app = express()&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const appData = require('./src/assets/data/menuData.json')&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const userList = require('./src/assets/data/userList.json')&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var apiRoutes = express.Router()&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.use('/data', apiRoutes)&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; module.exports =&lt;span&gt; merge(common, {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有助于代码调试&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启后，控制台会显示错误所在的具体js文件&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产环境下不要使用&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     devtool: 'inline-source-map'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     mode: 'development'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    devServer: {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         contentBase: './dist'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; before(app){&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   app.get('/data/menuData',(req,res)=&amp;gt;{&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     res.json({&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;       errno:0,&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;       data:appData&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     })&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }),&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   app.get('/data/userList',(req,res)=&amp;gt;{&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     res.json({&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;       errono:0,&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;       data:userList&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     })&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   })&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; },&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        proxy: {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             '/api'&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; target: 'http://192.168.0.111:8080',//设置你调用的接口域名和端口号 别忘了加http&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; target:'http://192.168.0.101:8081',//集成环境&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                 target: 'http://192.168.0.103:8081',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;本地环境&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                 changeOrigin: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                pathRewrite: {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     '^/api': ''&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用'http://40.00.100.100:3002/user/add'，直接写‘/api/user/add’即可&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         open: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; plugins: [&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     new webpack.DefinePlugin({&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         'process.env.NODE_ENV': JSON.stringify('development')&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     })&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;webpack.prod.js的配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_45e7e0b1-05f2-43b6-8a32-d21896372d11&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45e7e0b1-05f2-43b6-8a32-d21896372d11&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45e7e0b1-05f2-43b6-8a32-d21896372d11&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  生产环境配置
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; const merge = require('webpack-merge'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; const UglifyJSPlugin = require('uglifyjs-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; const common = require('./webpack.common.js'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; const CleanWebpackPlugin = require('clean-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const webpack = require('webpack')&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; module.exports =&lt;span&gt; merge(common, {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关于source-map，官网中的解释看不明白，以后再说&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     devtool: 'source-map'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     mode: 'production'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    plugins: [
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; CleanWebpackPlugin(['dist'&lt;span&gt;]),
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UglifyJSPlugin({
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             sourceMap: &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }),
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; new CleanWebpackPlugin(['dist']),&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; new webpack.DefinePlugin({&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     'process.env.NODE_ENV': JSON.stringify('production')&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; })&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;4、项目启动脚本的配置&lt;/h2&gt;
&lt;p&gt;修改package.json文件，增加启动脚本，红色字体部分&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   &quot;name&quot;: &quot;syinfo&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &quot;version&quot;: &quot;1.0.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   &quot;description&quot;: &quot;管理系统&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   &quot;main&quot;: &quot;index.js&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   &quot;scripts&quot;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&quot;start&quot;: &quot;webpack-dev-server --config webpack.dev.js&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   &quot;author&quot;: &quot;lichking2017&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   &quot;license&quot;: &quot;ISC&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   &quot;devDependencies&quot;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &quot;axios&quot;: &quot;^0.18.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &quot;babel-core&quot;: &quot;^6.26.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &quot;babel-loader&quot;: &quot;^7.1.4&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &quot;css-loader&quot;: &quot;^0.28.11&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &quot;express&quot;: &quot;^4.16.3&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &quot;file-loader&quot;: &quot;^1.1.11&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &quot;html-loader&quot;: &quot;^0.5.5&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &quot;iview&quot;: &quot;^2.12.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &quot;iview-loader&quot;: &quot;^1.0.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &quot;jquery&quot;: &quot;^3.3.1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &quot;less&quot;: &quot;^3.0.1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &quot;less-loader&quot;: &quot;^4.1.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &quot;style-loader&quot;: &quot;^0.20.3&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.2.4&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &quot;vue&quot;: &quot;^2.5.16&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &quot;vue-loader&quot;: &quot;^14.2.2&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &quot;vue-router&quot;: &quot;^3.0.1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &quot;vue-template-compiler&quot;: &quot;^2.5.16&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &quot;webpack&quot;: &quot;^4.5.0&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &quot;webpack-dev-server&quot;: &quot;^3.1.1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &quot;webpack-merge&quot;: &quot;^4.1.2&quot;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5、启动&lt;/h2&gt;
&lt;p&gt;执行如下命令启动&lt;/p&gt;
&lt;p&gt;cnpm run start&lt;/p&gt;
&lt;p&gt;以下是我自己的项目的启动信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b0dddd40-862d-45d6-8228-5b50b29063ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b0dddd40-862d-45d6-8228-5b50b29063ed&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b0dddd40-862d-45d6-8228-5b50b29063ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&amp;gt; webpack-dev-server --&lt;span&gt;config webpack.dev.js

ℹ ｢wds｣: Project is running at http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8080/&lt;/span&gt;
ℹ ｢wds｣: webpack output is served from /&lt;span&gt;
ℹ ｢wds｣: Content not from webpack is served from .&lt;/span&gt;/dist
&lt;span&gt;⚠ ｢wdm｣: Hash: b306468681d3292664db
Version: webpack &lt;/span&gt;4.5.0&lt;span&gt;
Time: 5360ms
Built at: &lt;/span&gt;2018-5-12 11:10:35&lt;span&gt;
                      Asset       Size  Chunks             Chunk Names
         js&lt;/span&gt;/login.bundle.js   5.74 MiB   login  [emitted]  login
  img/ionicons.2c2ae068.eot    118 KiB          [emitted]  
  img/ionicons.24712f6c.ttf    184 KiB          [emitted]  
 img/ionicons.05acfdb5.woff   66.3 KiB          [emitted]  
img/background.98bc53d2.jpg   1.32 MiB          [emitted]  
         js/index.bundle.js   6.23 MiB   index  [emitted]  index
  img/ionicons.621bd386.svg    326 KiB          [emitted]  
                  index.css    258&lt;span&gt; KiB   index  [emitted]  index
                  login.css    &lt;/span&gt;258&lt;span&gt; KiB   login  [emitted]  login
               logo.net.ico    &lt;/span&gt;2.4&lt;span&gt; KiB          [emitted]  
                 index.html  &lt;/span&gt;438&lt;span&gt; bytes          [emitted]  
                 login.html  &lt;/span&gt;433&lt;span&gt; bytes          [emitted]  
Entrypoint index &lt;/span&gt;= js/index.bundle.js index.css
Entrypoint login = js/login.bundle.js login.css
[./node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client/index.js?http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8080] ./node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client?http://localhost:8080 7.75 KiB {login} {index} [built]&lt;/span&gt;
[./src/assets/styles/common.less] 1.35&lt;span&gt; KiB {login} [built]
[.&lt;/span&gt;/src/components/common/WolfTotem.js] 1.47&lt;span&gt; KiB {index} [built]
[.&lt;/span&gt;/src/components/imageUpload/imageUpload.js] 447&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/components/layout/layout.js] 403&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/components/menu/menuTree.js] 418&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/components/modal/modal.js] 405&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/components/select/select.js] 413&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/components/table/dataTable.js] 437&lt;span&gt; bytes {index} [built]
[.&lt;/span&gt;/src/index.js] 2.61&lt;span&gt; KiB {index} [built]
[.&lt;/span&gt;/src/login.js] 780&lt;span&gt; bytes {login} [built]
[.&lt;/span&gt;/src/login.vue] 2.34&lt;span&gt; KiB {login} [built]
[.&lt;/span&gt;/src/routes/router.js] 644 bytes {index} [built]
   [0] multi ./node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client?http://localhost:8080 ./src/index.js 40 bytes {index} [built]
   [1] multi ./node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client?http://localhost:8080 ./src/login.js 40 bytes {login} [built]
    + 122&lt;span&gt; hidden modules

WARNING &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; ./src/components/menu/menuTree.vue (./node_modules/_vue-loader@14.2.2@vue-loader/lib/template-compiler?{&quot;id&quot;:&quot;data-v-79741c26&quot;,&quot;hasScoped&quot;:&lt;span&gt;false&lt;/span&gt;,&quot;optionsId&quot;:&quot;0&quot;,&quot;buble&quot;:{&quot;transforms&quot;:{}}}!./node_modules/_vue-loader@14.2.2@vue-loader/lib/selector.js?type=template&amp;amp;index=0!./node_modules/_iview-loader@1.0.0@iview-loader??ref--4-1!./src/components/menu/&lt;span&gt;menuTree.vue)
(Emitted value instead of an instance of Error) &lt;/span&gt;&amp;lt;MenuItem v-&lt;span&gt;for&lt;/span&gt;=&quot;menu in mu.children&quot;&amp;gt;: component lists rendered &lt;span&gt;with&lt;/span&gt; v-&lt;span&gt;for&lt;/span&gt; should have explicit keys. See https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vuejs.org/guide/list.html#key for more info.&lt;/span&gt;
 @ ./src/components/menu/menuTree.vue 10:0-443 22:2-16 23:2-27&lt;span&gt;
 @ .&lt;/span&gt;/src/components/menu/&lt;span&gt;menuTree.js
 @ .&lt;/span&gt;/src/&lt;span&gt;index.js
 @ multi .&lt;/span&gt;/node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client?http://localhost:8080 ./src/index.js
&lt;span&gt;
WARNING &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; ./src/components/menu/menuTree.vue (./node_modules/_vue-loader@14.2.2@vue-loader/lib/template-compiler?{&quot;id&quot;:&quot;data-v-79741c26&quot;,&quot;hasScoped&quot;:&lt;span&gt;false&lt;/span&gt;,&quot;optionsId&quot;:&quot;0&quot;,&quot;buble&quot;:{&quot;transforms&quot;:{}}}!./node_modules/_vue-loader@14.2.2@vue-loader/lib/selector.js?type=template&amp;amp;index=0!./node_modules/_iview-loader@1.0.0@iview-loader??ref--4-1!./src/components/menu/&lt;span&gt;menuTree.vue)
(Emitted value instead of an instance of Error) &lt;/span&gt;&amp;lt;Submenu v-&lt;span&gt;for&lt;/span&gt;=&quot;mu in menus&quot;&amp;gt;: component lists rendered &lt;span&gt;with&lt;/span&gt; v-&lt;span&gt;for&lt;/span&gt; should have explicit keys. See https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vuejs.org/guide/list.html#key for more info.&lt;/span&gt;
 @ ./src/components/menu/menuTree.vue 10:0-443 22:2-16 23:2-27&lt;span&gt;
 @ .&lt;/span&gt;/src/components/menu/&lt;span&gt;menuTree.js
 @ .&lt;/span&gt;/src/&lt;span&gt;index.js
 @ multi .&lt;/span&gt;/node_modules/_webpack-dev-server@3.1.1@webpack-dev-server/client?http://localhost:8080 ./src/index.js
Child extract-text-webpack-plugin node_modules/_extract-text-webpack-plugin@4.0.0-beta.0@extract-text-webpack-plugin/dist node_modules/_css-loader@0.28.11@css-loader/index.js!node_modules/_iview@2.12.0@iview/dist/styles/&lt;span&gt;iview.css:
     &lt;/span&gt;4&lt;span&gt; assets
    Entrypoint undefined &lt;/span&gt;= extract-text-webpack-plugin-output-&lt;span&gt;filename
    [.&lt;/span&gt;/node_modules/_css-loader@0.28.11@css-loader/index.js!./node_modules/_iview@2.12.0@iview/dist/styles/iview.css] ./node_modules/_css-loader@0.28.11@css-loader!./node_modules/_iview@2.12.0@iview/dist/styles/iview.css 260 KiB {0} [built]
    [./node_modules/_css-loader@0.28.11@css-loader/lib/css-base.js] 2.21 KiB {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_css-loader@0.28.11@css-loader/lib/url/escape.js] 448 bytes {0} [built]
    [./node_modules/_iview@2.12.0@iview/dist/styles/fonts/ionicons.eot?v=2.0.0] 71 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_iview@2.12.0@iview/dist/styles/fonts/ionicons.svg?v=2.0.0] 71 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_iview@2.12.0@iview/dist/styles/fonts/ionicons.ttf?v=2.0.0] 71 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_iview@2.12.0@iview/dist/styles/fonts/ionicons.woff?v=2.0.0] 72 bytes {0&lt;span&gt;} [built]
Child html&lt;/span&gt;-webpack-plugin &lt;span&gt;for&lt;/span&gt; &quot;index.html&quot;&lt;span&gt;:
     &lt;/span&gt;1&lt;span&gt; asset
    Entrypoint undefined &lt;/span&gt;=&lt;span&gt; index.html
    [.&lt;/span&gt;/node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./src/assets/templates/index.html] 577 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_lodash@4.17.5@lodash/lodash.js] 527 KiB {0} [built]
    [./node_modules/_webpack@4.5.0@webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_webpack@4.5.0@webpack/buildin/module.js] (webpack)/buildin/module.js 519 bytes {0&lt;span&gt;} [built]
Child html&lt;/span&gt;-webpack-plugin &lt;span&gt;for&lt;/span&gt; &quot;login.html&quot;&lt;span&gt;:
     &lt;/span&gt;1&lt;span&gt; asset
    Entrypoint undefined &lt;/span&gt;=&lt;span&gt; login.html
    [.&lt;/span&gt;/node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./src/assets/templates/login.html] 579 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_lodash@4.17.5@lodash/lodash.js] 527 KiB {0} [built]
    [./node_modules/_webpack@4.5.0@webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {0&lt;span&gt;} [built]
    [.&lt;/span&gt;/node_modules/_webpack@4.5.0@webpack/buildin/module.js] (webpack)/buildin/module.js 519 bytes {0&lt;span&gt;} [built]
ℹ ｢wdm｣: Compiled &lt;/span&gt;&lt;span&gt;with&lt;/span&gt; warnings.
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;在浏览器中就可以访问了（做到一半的东西）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1394048/201805/1394048-20180512111647275-1402941225.png&quot; alt=&quot;&quot; width=&quot;963&quot; height=&quot;453&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 12 May 2018 03:19:00 +0000</pubDate>
<dc:creator>lichking2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lichking2017/p/9024642.html</dc:identifier>
</item>
</channel>
</rss>