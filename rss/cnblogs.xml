<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>什么情况下你会毫不犹豫地辞职？ - 骑车走西藏</title>
<link>http://www.cnblogs.com/qczxz/p/8985746.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qczxz/p/8985746.html</guid>
<description>&lt;p&gt;在一家公司工作五年以上，今年年初开始改革，改革以来各种对之前工作的否认和不尊重，人事上面临的党我伐异很严重，每天揣测上面到底什么意思，非常的累。但从工作本身来看，是很有意义的，但是发展前景不是很好，最终改革的项目成熟的话会是一个好的教育工作者。&lt;/p&gt;

&lt;p&gt;我24岁，上个月辞掉了月薪1w+的工作，没冲动，深思熟虑过，也不纠结，不曾犹豫过。&lt;/p&gt;
&lt;p&gt;先介绍本人情况：&lt;/p&gt;
&lt;p&gt;女，2016年中山大学本科毕业，毕业后进入教育行业，在某二线城市的一家培训机构做教师，兼做业务岗。大学同学刚进入社会还拿着不到5k工资的时候，我已经月入8k+了，干了1年多以后，平均月收入稳定在1w左右。除了每周只休周一以外，身边没人觉得我的工作有什么不好。&lt;/p&gt;
&lt;p&gt;但我还是毅然决然地辞职了，原因主要有三点。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;1.我日渐增长的对成就感的需求，和公司安于现状的氛围之间的矛盾&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;我们只需在生活中稍作抽离，观察一下这个社会，就会发现很多人都陷在物质焦虑中，大家渴望能及早过上有房有车有面子的精致生活。&lt;/p&gt;
&lt;p&gt;那如果，一个人本科一毕业就攒得住钱、还得起房贷，在公司干够3年还能申请无息贷款，他会作何选择呢？&lt;/p&gt;
&lt;p&gt;教育企业为了吸引优质人才，平均工资都比较高。我离开的这家公司，待遇在同行内算是更好一点的。我入职1年多的时候，身边85%的同龄男生都买房了。（我所在的部门男多女少，所以我接触的基本都是男生）&lt;/p&gt;
&lt;p&gt;早早买房是好事，既解决了物质基础问题，又能刺激人努力工作挣钱。然而，由于我们公司晋升渠道不畅通、激励制度缺失（后文会解释），而工资在同行里还算高的，所以我身边的同事们过得并不积极，张口闭口都是抱怨。&lt;/p&gt;
&lt;p&gt;他们压力很大，并且心里清楚换家公司压力只会更大，所以不会轻易做出变动。他们的生活重心就在房子上，而周围人还会怂恿他们再买一辆车。他们会开始用娱乐缓解压力，把挣钱作为工作的首要目标。&lt;/p&gt;
&lt;p&gt;所以大家应该可以想象我之前处在一个怎样的氛围中了。没有人思考自己真正想要什么，没有人会为了更好的工作成绩冒风险，大家活着是为了还房贷。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有经历过真正的困苦，于是越来越安于现状。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，请注意，不光和我同年入职的人这样，上级领导也是这样，他们也是这么过来的。&lt;/p&gt;
&lt;p&gt;那么，一个公司从上到下都安于现状会怎样？&lt;/p&gt;
&lt;p&gt;工作遇到问题大家很会找借口，需要作出变革的时候大家都下意识地逃避，工作成绩不好大家都很会自我安慰。&lt;/p&gt;
&lt;p&gt;反正，这么大个公司，也不太可能突然倒闭，工资虽然没涨但也没下降啊，多一事不如少一事。反正大家工作，也不过是为了这份工资。&lt;/p&gt;
&lt;p&gt;大家亲眼看着公司出现越来越多的问题，却没人想真正解决这些问题。&lt;/p&gt;
&lt;p&gt;我的成就感，被周围人的房贷压力，压得抬不起头。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;2.我日渐增长的对自我认同感的需求，和公司激励制度缺失之间的矛盾&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;读过上文，大家应该能知道，我在公司里有种很孤独的感觉。我做事是为了让公司变得更好，身边人做事是为了领工资。我努力想让工作有所突破，身边人每天踩点下班打卡。&lt;/p&gt;
&lt;p&gt;然后，我和他们的工资一样。2年来，都一样。&lt;/p&gt;
&lt;p&gt;横向比较，我和其它比我懒惰、糊弄事的人工资一样多；不仅如此，纵向比较，我每个月的工资，也都是一样的，丝毫浮动都没有。&lt;/p&gt;
&lt;p&gt;另外，晋升渠道并不十分畅通，晋升机会也比较渺茫，这种情况下，我干的好没有奖励，干的差也没有惩罚，那我为什么要费劲去干好？我有病？&lt;/p&gt;
&lt;p&gt;激励制度的缺失，让我非常没有自我认同感，也很难再坚持行动下去。&lt;/p&gt;
&lt;p&gt;不仅如此。&lt;strong&gt;由于安于现状的氛围和不完善的激励机制，公司里真正的人才越来越少，我身边越来越没有榜样。这同样让人很痛苦。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;3.我有了新的方向&lt;/h2&gt;
&lt;p&gt;经过近两年的工作，很多大学毕业时不清楚的事情渐渐清楚了。我慢慢确定，我是一个不甘愿做螺丝钉、更不甘愿混吃等死的人，我需要事业中有挑战、有失败、有成就、有荣耀、有悔恨，所以我决定离开整体风格都比较保守的教育行业，未来争取往互联网行业发展，职位则锁定为新媒体运营。&lt;/p&gt;
&lt;p&gt;转行，意味着从头开始，我的月薪会大幅度缩水，别说1w了，4k都算不错了。&lt;/p&gt;
&lt;p&gt;但是我愿意。&lt;/p&gt;
&lt;p&gt;对于一个还未成熟的普通年轻人来说，1w月薪会带来什么后果，我已经充分清楚了。我不要那点钱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我心里的世界，远比一套房子广阔。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了能顺利转行，我也开始做准备。为了训练自己的运营思维和新媒体运营能力，我开始尝试经营自己的自媒体，做了公众号「倒数三二一」，「倒数」是我面对人生的态度，我希望能用这样的态度和更多人一起成长。此刻在知乎积极回答问题，也都是我对未来的一种准备。一切还在摸索阶段，但我过得充实又开心。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然经验不算丰富，但我挣扎过后，还是非常坚定且清醒的。关于「犹豫是否辞职时应该怎么办」，我也总结了一份自己的答案，若能帮到你，是我的荣幸：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;第一步&lt;/strong&gt;，回忆你上一次在工作中感受到发自内心的、持久的快乐是什么时候，为了什么；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二步&lt;/strong&gt;，分析自己在工作中想去争取的是什么，是成就感，是地位和权力，还是钱？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三步&lt;/strong&gt;，分析公司的现状，它能否时常给你发自内心的快乐，能否给你提供争取的机会。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四步&lt;/strong&gt;，如果你的工作不能给你带来快乐，还不能为你提供争取的机会，那你就可以果断离开了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，可能有一种情况，你既无法确认你是否快乐，也无法确认自己想争取的到底是什么，或者你觉得自己根本什么都不想争取，那我觉得你可以考虑更多外部因素。举个例子，如果你有后路（比如家里经济条件很好），你可以辞职试一下，也许一些新的际遇会让你变得更清醒；如果你没有后路，那你还是别轻易辞职，最好在现有岗位上多挣扎一下，然后多读书、多思考，等待自己想明白的一天。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后，没有一种现状可以安逸一辈子，人还是要有持续不断的追求。另外，海阔凭鱼跃，天高任鸟飞，任何时候也别觉得未来无法逆转了。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;转载自：https://www.zhihu.com/question/50056807/answer/363325267&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:49:00 +0000</pubDate>
<dc:creator>骑车走西藏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qczxz/p/8985746.html</dc:identifier>
</item>
<item>
<title>C++——虚函数问题小集 - tp_16b</title>
<link>http://www.cnblogs.com/tp-16b/p/8983331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tp-16b/p/8983331.html</guid>
<description>&lt;p&gt;&lt;span&gt;学习C++ &lt;span&gt;不可避免地会遇到虚函数的问题，下面几个问题在学习初期或多或少会存在一些疑惑，所以便将其总结了下来。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1.为什么静态成员函数、构造函数不能定义为虚函数？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;因为静态成员函数是一个大家共享的一个资源，它其实就是一个“受类域限定符限制”的普通函数，没有this指针，&lt;span&gt;不需要对象就可以调用；而虚函数是实打实的成员函数，调用依赖于创建的实例（编译时要把实例的地址给该成员函数的this指针） 所以一个依赖对象，一个则不，两者是是相矛盾的.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　 对构造函数来说，因为在用运行构造函数来构造实例的时候，实例还未创建完成，而虚函数的运行是建立在对象构建完备的基础上，所以将构造函数定义为虚函数是行不通的。&lt;/span&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;2.为什么在构造、析构函数中不要调用virtual函数？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　&lt;span&gt;直白的说是由于调用的虚函数达不到虚函数的效果，而实现虚函数有代价，结果就是费力不讨好。　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不妨考虑下面一个例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e65c3095-61fa-4e61-9598-aeb56f1fbde4')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e65c3095-61fa-4e61-9598-aeb56f1fbde4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e65c3095-61fa-4e61-9598-aeb56f1fbde4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e65c3095-61fa-4e61-9598-aeb56f1fbde4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e65c3095-61fa-4e61-9598-aeb56f1fbde4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    Base()
    {
        vfunc();
    }

    &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; vfunc()
    {
        cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Base::vfunc()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    }
};
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Derive : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Base
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    Derive()
        :Base()
        ,_pData(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)) 
    { 
        vfunc();
    }

    &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; vfunc()
    {
        cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Derive::vfunc() &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;*_pData&amp;lt;&amp;lt;&lt;span&gt;endl;
    }

    &lt;/span&gt;~Derive() { &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; _pData;}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;*&lt;span&gt; _pData;
};
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Test()
{
    Derive d;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;例子&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;结果是这样：　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201805/1272978-20180503123326692-1926178174.png&quot; alt=&quot;&quot; width=&quot;281&quot; height=&quot;101&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们都知道在构造子类对象d的时候，会先去构造d中基类成份，即去调用基类构造函数；但现在这里的虚函数好像构成重写，那么输出怎么不是&lt;span&gt;这样呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Derive::vfunc() &lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;Derive::vfunc() &lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 但是这样答案明显是错的！！前面的这个‘2’不可能出现，它这不还没初始的嘛。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　现在发现了问题，拿&lt;strong&gt;effectiveC++&lt;/strong&gt;观点来讲就是&lt;span&gt;“&lt;strong&gt;在base class构造期间，virtual函数不是virtual函数&lt;/strong&gt;”，这里vfunc（）没有达到虚函数的效果。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;原因就是构造基类成份时d中&lt;span&gt;虚表中尚未注册派生类的VFunc()，这时便只能调用基类的VFunc()；所以这类虚函数调用是不会下降到子类中。&lt;span&gt;退一步讲，假使下降到子类中，那也会出现上面那种访问子类中未初始化成员_pData，致使程序崩溃的情况。所以干嘛还要在构造函数当中调用它呢？又没有虚函数效果，还影响效率。&lt;br/&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　对于析构函数，道理同样是如此。派生类部分先析构，然后析构基类部分，但此时只能调用基类自身的函数。倘若一旦让派生类析构函数再执行，对象内派生类成员变量（如_pData）便呈现未定义的值，导致未知的行为。（如果将基类改为纯虚函数，并在构造、析构中调用，此时编译器便不会“安分”了）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　所以，&lt;strong&gt;不要在构造、析构函数中调虚函数，它带不来预想的结果（多态），就算有也是一张通往“彻夜调试大会串的直达车票”&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;



&lt;h3&gt;&lt;span&gt;3.什么情况下要将基类的析构函数声明为虚函数？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　&lt;span&gt;　&lt;span&gt;答：&lt;span&gt;&lt;strong&gt;继承类对象经由一个基类指针被删除时需要令析构为虚函数。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　编译器总是根据类型来调用类成员函数。但是一个派生类的指针可以安全地转化为一个基类的指针。这样删除一个基类的指针的时候，C++不管这个指针指向一个 基类对象还是一个派生类的对象，调用的都是基类的析构函数而不是派生类的；所以这样&lt;span&gt;继承类的成分没有被销毁，造成局部销毁对象，形成资源泄漏。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以建议将析构函数声明为虚函数。这样就实现了多态，避免内存泄漏&lt;/span&gt;     &lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201805/1272978-20180503153025675-172174615.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;259&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①基类中函数一旦声明为虚函数，不管子类是否加上virtual，子类形式相同函数保持虚函数特性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②析构函数十分特殊，由于&lt;span&gt;基类和子类的析构&lt;/span&gt;它们底层其实是同名的（destructor），所以会构成覆盖&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;    虽然虚函数有好处，但&lt;strong&gt;C++不 把虚析构函数直接作为默认值&lt;/strong&gt;。原因就是是虚函数表的开销以及和C语言的类型的兼容性。有虚函数的对象总是在开始的位置包含一个隐含的虚函数表指针成员。所以，如果我们设计的类不涉及继承关系时，不要将析构搞成虚函数，没有必要。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 03 May 2018 07:45:00 +0000</pubDate>
<dc:creator>tp_16b</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tp-16b/p/8983331.html</dc:identifier>
</item>
<item>
<title>自适应宽度元素单行文本省略用法探究 - 雨霖月寒</title>
<link>http://www.cnblogs.com/jofun/p/8985704.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jofun/p/8985704.html</guid>
<description>&lt;p&gt;单行文本省略是现代网页设计中非常常用的技术，几乎每个站点都会用到。单行文本省略适用于显示摘要信息的场景，如列表标题、文章摘要等。在响应式开发中，自适应宽度元素单行文本省略容易失效不起作用，对网页开发这造成困扰。因此，本文将要要探究自适应宽度元素单行文本省略用法。现代浏览器都支持单行文本显示生省略号（...）样式，一般情况下，实现单行文本省略只需要给元素添加下面三个CSS样式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.demo&lt;/span&gt;{&lt;span&gt;
    text-overflow&lt;/span&gt;:&lt;span&gt;ellipsis&lt;/span&gt;;&lt;span&gt;
    white-space&lt;/span&gt;:&lt;span&gt; nowrap&lt;/span&gt;;&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;单行文本省略和元素及其父元素的width属性都无关&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多文章提到单行文本省略时都会添加多一个条件，那就是设置width属性。事实真的是这样吗？通过下面的实例去检验一下就可以证明这个结论。&lt;/p&gt;
&lt;p&gt;实例1：在body添加一个p标签和一个span标签，并设置单行文本省略：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
body,p,span&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

p,
span&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    text-overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;ellipsis&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    white-space&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nowrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略，单行文本省略&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果是，p标签内文本成功省略，span标签内文本省略失败，结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339591/201805/1339591-20180503112923843-2141354508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，我尝试着给p标签设置宽度为auto或100%，结果不变；给p标签和span标签设置固定宽度值为300px，结果不变；用其他标签把p标签和span标签包裹起来，结果不变；给包裹元素设置固定宽度值，结果还是一样的。这就足以证明了单行文本省略和元素及其父元素的width属性都无关。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;单行文本省略和元素及其父元素的display属性有关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;什么属性会影响单行文本省略呢？在实例1中，我特意用来一个p标签和一个span标签，span标签无法省略。经过测试发现display属性为inline和inline-block的元素都无法实现省略。这证明单行文本省略与元素的display属性有关。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）table元素（或display为table元素）内单行文本省略，需要给table元素（或display为table元素）添加table-layout:fixed样式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置为table布局元素的子元素单行文本省略不起作用，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
body,p,span,img&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

p,
span&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    text-overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;ellipsis&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    white-space&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nowrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

.demo&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;15px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    border-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo .left,
.demo .right&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;table-cell&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo .left&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    min-width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;90px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

.demo .left img&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo .right&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    vertical-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; top&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;                       
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;demo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/1879408419498933204.jpg&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是一个标题&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个实例中，demo元素设置为dispaly:table，其子元素left和right设置为display:table-cell，这种布局方式导致了元素right内的h2和p的文本省略样式都不起作用，运行结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339591/201805/1339591-20180503144530674-107508141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了使元素right内的h2和p的文本省略样式起作用，必须在元素demo（即设置display:table的元素）添加一条样式table-layout:fixed，这个解决方式同样适用于table元素。添加这个样式后，运行结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339591/201805/1339591-20180503144941475-1859412069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）display为flex元素的子元素flex-item如果是自适应宽度时，&lt;/strong&gt;flex-item内的子元素实现单行文本省略，需要给&lt;strong&gt;&lt;strong&gt;flex-item&lt;/strong&gt;&lt;/strong&gt;添加overflow:hidden样式&lt;/p&gt;
&lt;p&gt;display为flex元素的子元素flex-item如果是自适应宽度时，flex-item内的子元素单行文本省略样式不起作用，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
body,h2,p,span,img&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;-webkit-flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;15px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    border-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.left,
.right&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;90px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo .left&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
.demo .right&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    -webkit-flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            
h2,
p,
span&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    text-overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;ellipsis&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    white-space&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nowrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
    overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;demo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/1879408419498933204.jpg&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是一个标题&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。这是一段介绍文字。&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个flex布局的实例中，元素right的宽度时自适应的，元素right内的h2和p元素单行文本省略样式都不起作用。如果去掉标签直接在元素right内添加文本，并为元素right添加单行文本省略样式，这时单行文本省略样式却可以正常工作。该实例的运行结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339591/201805/1339591-20180503144530674-107508141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个实例中，为元素right添加overflow:hidden样式后，单行文本省略样式工作正常，运行结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1339591/201805/1339591-20180503144941475-1859412069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）单行文本省略必须满足三个CSS样式：text-overflow:ellipsis，white-space: nowrap，overflow: hidden。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）单行文本省略和元素及其父元素的width属性都无关&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）table元素（或display为table元素）内单行文本省略，需要给table元素（或display为table元素）添加table-layout:fixed样式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4）display为flex元素的子元素flex-item如果是自适应宽度时，flex-item内的子元素实现单行文本省略，需要给flex-item添加overflow:hidden样式&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:42:00 +0000</pubDate>
<dc:creator>雨霖月寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jofun/p/8985704.html</dc:identifier>
</item>
<item>
<title>PowerBI开发 第十篇：R 脚本 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4729828.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4729828.html</guid>
<description>&lt;p&gt;R是一种专门用于数据分析和统计的脚本语言，广泛应用在每一个需要统计和数据分析的领域。PowerBI支持R脚本，两者强强结合，使PowerBI的功能更加强大。PowerBI Desktop默认没有安装R，在使用R脚本之前，必须向PowerBI Desktop中安装R引擎。用户可以使用R脚本加载数据、对数据进行转换和处理、使用R脚本图形化显示数据，这意味着，PowerBI对R的支持是深度融合的，在数据处理的各个阶段都能使用R。而且，为了便于开发人员使用R进行编程，PowerBI可以直接调用R外部IDE，编程体验更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，安装R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用R之前，用户必须向本地主机中安装R引擎。安装的过程非常简单，用户只需要点击File菜单，选择“Options and settings”，打开“Options”窗口，切换到“R scripting”选项卡，根据提示的帮助，安装R引擎和R外部IDE。&lt;/p&gt;
&lt;p&gt;R引擎安装的根目录由“Detected R home directories”指定，用于R编程的外部IDE由“Detected R IDEs”指定，如下图，R外部的IDE是&lt;strong&gt;R Studio&lt;/strong&gt;，R根目录是：&lt;strong&gt;C:\Program Files\R\R-3.4.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503152256273-1996989486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果本地主机已经安装了R引擎和R IDE，PowerBI会自动探测到，用户只需要从下来列表中选择相应的列表项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，使用R脚本加载数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据是数据分析的原材料，R脚本是PowerBI加载数据的一种方法，工作流程是：PowerBI执行R脚本，按照R代码逻辑对数据源进行加工和处理，把最终的数据加载到PowerBI中，创建一个查询（Query），用于代表该数据集。&lt;/p&gt;
&lt;p&gt;和其他加载方式一样，用户需要通过“Get Data”菜单来加载数据，从Other分类中，选择R Script，输入R脚本，保存之后，PowerBI自动执行脚本，处理并加载数据。R脚本数据源的图标如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503145434799-1775653763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击该图标，打开一个R Script的窗体，例如，输入R脚本，该脚本末尾包含一个数据框，作为最终的输出：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503150616341-1154746991.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，使用R 转换数据&lt;/strong&gt;&lt;strong&gt;（Transfrom）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在查询编辑器（Query Editor）中，切换到转换（Transform）菜单，用户可以使用“Run R Script”菜单对数据进行转换加工，以生成新的Query，R数据转换的图标如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180427101617280-1849559139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户编写R脚本对现有的数据进行转换操作，如下图，PowerBI自动创建一个dataset变量，该变量是数据框类型，作为转换的输入数据；R脚本转换对dataset进行数据处理，最终生成适合业务逻辑的输出数据，输出数据的变量名是output，类型是数据框。&lt;/p&gt;
&lt;p&gt;示例脚本如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503150855636-1619399598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四，使用R显示数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Visualization列表中，选择 R Script Visual，图标如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180427101338512-1150600895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户启用R脚本之后，向R脚本编辑器中输入字段，例如，向R脚本编辑器中插入两个字段x1和x2，该字段作为R visual的输入字段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503151642755-1806871757.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;PowerBI 自动创建数据框dataset，移除重复的数据行。用户编写自定义的代码，对输入数据dataset进行处理和重塑，最后编写绘图代码显示数据，例如：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201805/628084-20180503152014674-48686946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般来说，R脚本包含两部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用于处理数据的代码；&lt;/li&gt;
&lt;li&gt;用于绘图的代码； &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.learningtree.com/how-import-data-from-r-scripts-into-power-bi/&quot; target=&quot;_blank&quot;&gt;How to Import Data from R Scripts into Power BI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/power-bi/desktop-r-in-query-editor&quot; target=&quot;_blank&quot;&gt;Using R in Query Editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://powerbi.microsoft.com/en-us/documentation/powerbi-desktop-r-visuals/&quot; target=&quot;_blank&quot;&gt;Create Power BI visuals using R&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:41:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4729828.html</dc:identifier>
</item>
<item>
<title>Python Selenium之异常处理 - 菜鸟可米</title>
<link>http://www.cnblogs.com/cnkemi/p/8985654.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cnkemi/p/8985654.html</guid>
<description>&lt;p&gt;　　自动化测试执行过程中，难免会有错误/异常出现，比如测试脚本没有发现对应元素，则会立刻抛出&lt;strong&gt;NoSuchElementException&lt;/strong&gt;异常。这时不要怕，肯定是测试脚本或者测试环境哪里出错了！那如何处理才是关键？因为一般只是局部有问题，为了让脚本继续执行，so我们可以用try...except...raise捕获异常。该捕获异常后可以打印出相应的异常原因，这样以便于分析异常原因。&lt;/p&gt;
&lt;p&gt;　　下面将举例说明，当异常抛出后将信息打印在控制台，同时截取当前浏览器窗口，作为后续bug的依据给相应开发人员更好下定位问题。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span&gt;import&lt;/span&gt; NoSuchElementException    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入NoSuchElementException&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionTest(unittest.TestCase):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        self.driver &lt;/span&gt;=&lt;span&gt; webdriver.Chrome()
        self.driver.get(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_exception(self):
        driver &lt;/span&gt;=&lt;span&gt; self.driver
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            search_text &lt;/span&gt;= driver.find_element_by_id(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            self.assertEqual(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;百度一下&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, search_text.get_attribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; NoSuchElementException:
            file_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no_such_element.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;driver.save_screenshot(file_name)&lt;/span&gt;
&lt;span&gt;            driver.get_screenshot_as_file(file_name)  
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;抛出异常，注释后则不抛出异常&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
        self.driver.quit()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    unittest.main(verbosity&lt;/span&gt;=2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行有异常，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201805/942023-20180503151731394-662227604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码中用到WebDriver内置的捕获屏幕并保存的方法，如这里的&lt;strong&gt;save_screenshot(filename)&lt;/strong&gt;方法和&lt;strong&gt;save_screenshot_as_file(filename)&lt;/strong&gt;方法，在测试异常抛出时，同时截取浏览器屏幕并以自定义的图片文件名保存在指定路径（上面代码为当前路径）。&lt;br/&gt;　　又如当一个元素呈现在DOM，但它是不可见的，不能与之进行交互，异常将抛出，以百度首页的登录为例，当元素不能不可见时，抛出&lt;strong&gt;ElementNotVisibleException&lt;/strong&gt;的异常，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span&gt;import&lt;/span&gt; ElementNotVisibleException    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入ElementNotVisibleException&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionTest(unittest.TestCase):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        self.driver &lt;/span&gt;=&lt;span&gt; webdriver.Chrome()
        self.driver.get(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_exception(self):
        driver &lt;/span&gt;=&lt;span&gt; self.driver
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            login &lt;/span&gt;= driver.find_element_by_name(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tj_login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            login.click()
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; ElementNotVisibleException:
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;    

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
        self.driver.quit()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    unittest.main(verbosity&lt;/span&gt;=2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行有异常，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201805/942023-20180503152918806-671785977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　下面将列举selenium常见的异常：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201805/942023-20180503153233357-1859521043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如果想了解更多异常，可以直接到你的python安装路径下面的&lt;strong&gt;\Lib\site-packages\selenium\common&lt;/strong&gt;，打开&lt;strong&gt;exceptions.py&lt;/strong&gt;文件~&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:37:00 +0000</pubDate>
<dc:creator>菜鸟可米</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cnkemi/p/8985654.html</dc:identifier>
</item>
<item>
<title>知物由学｜游戏开发者如何从容应对Unity手游风险？ - 网易云</title>
<link>http://www.cnblogs.com/163yun/p/8985562.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/163yun/p/8985562.html</guid>
<description>&lt;p&gt;本文由 &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;a href=&quot;https://www.163yun.com/?tag=M_cnblogs_8985562&quot; target=&quot;_blank&quot;&gt;网易云&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/a&gt;发布。&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;“知物由学”是网易云易盾打造的一个品牌栏目，词语出自汉·王充《论衡·实知》。人，能力有高下之分，学习才知道事物的道理，而后才有智慧，不去求问就不会知道。“知物由学”希望通过一篇篇技术干货、趋势解读、人物思考和沉淀给你带来收获的同时，也希望打开你的眼界，成就不一样的你。当然，如果你有不错的认知或分享，也欢迎通过邮件（zhangyong02@corp.netease.com）投稿。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下为正文：&lt;/p&gt;
&lt;p&gt;3月25日，2018 Unity技术路演首站：移动游戏技术分享日在广州举办。此次活动，旨在为移动游戏开发者们搭建一个更好的交流平台，学习Unity在移动游戏开发领域的最新工具与应用技巧，分享最炫酷的游戏开发与行业应用案例，了解移动游戏开发中的安全问题所能给企业带来的隐患，帮助开发者提前感知安全隐患，避免受到损失。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-093d1de990896850e6f34b383f17b9a0_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; data-original=&quot;https://pic3.zhimg.com/v2-093d1de990896850e6f34b383f17b9a0_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-093d1de990896850e6f34b383f17b9a0_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;网易云易盾移动游戏安全技术专家陈士留&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;网易云易盾移动游戏安全技术专家陈士留出席交流活动，并进行了《Unity手游风险及安全问题——网易云易盾来保驾护航》的技术演讲。在分享中，他介绍了时下Unity手游面临的众多风险及热门外挂，并重点讲解了易盾安全解决方案的技术原理和实践案例。&lt;/p&gt;
&lt;h2&gt;一、Unity手游面临的风险&lt;/h2&gt;
&lt;p&gt;据统计，2017年国内活跃移动游戏APP应用约有9000款，其多数存在被破解、恶意代码插入、广告插入、外挂、二次打包等安全问题。而这些安全问题为企业带来隐患是，研发难度增加，研发成本的提高、玩家付费意愿减低、游戏失去公平性，玩家流失，直接损失收入——因此，破除Unity手游风险对于开发者来说十分重要。&lt;/p&gt;
&lt;p&gt;常见的Unity手游风险主要包括破解风险、外挂工具这两类。&lt;/p&gt;

&lt;h2&gt;破解风险&lt;/h2&gt;
&lt;p&gt;破解风险主要有Unity mono脚本解密、Unity il2cpp脚本解析、Assetbundle资源篡改这三项。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Unity mono脚本解密&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以下两张图为mono脚本文件的二进制形式及源码转换。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;content_image lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-23e3d81faf31c1c74ae6ceef019ac186_hd.jpg&quot; alt=&quot;&quot; width=&quot;372&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;372&quot; data-rawheight=&quot;403&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-23e3d81faf31c1c74ae6ceef019ac186_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-38eb1dff28cdbf90285fe57aebddafa8_hd.jpg&quot; alt=&quot;&quot; width=&quot;828&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;828&quot; data-rawheight=&quot;511&quot; data-original=&quot;https://pic4.zhimg.com/v2-38eb1dff28cdbf90285fe57aebddafa8_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-38eb1dff28cdbf90285fe57aebddafa8_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Unity il2cpp脚本解析&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以libil2cpp.so和global-metadata.dat作为输入，使用Il2CppDumper即可进行解析：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-a1a0e8bf5f37d02eab0a39bad2c8d215_hd.jpg&quot; alt=&quot;&quot; width=&quot;462&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;462&quot; data-rawheight=&quot;290&quot; data-original=&quot;https://pic1.zhimg.com/v2-a1a0e8bf5f37d02eab0a39bad2c8d215_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a1a0e8bf5f37d02eab0a39bad2c8d215_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;解析出来的效果如下所示，类名、函数名以及对应的偏移都能够被解析出来：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-704f26031c8fe59adbafd39658c4608c_hd.jpg&quot; alt=&quot;&quot; width=&quot;506&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;506&quot; data-rawheight=&quot;461&quot; data-original=&quot;https://pic2.zhimg.com/v2-704f26031c8fe59adbafd39658c4608c_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-704f26031c8fe59adbafd39658c4608c_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;目前iOS中还没有能够解析为源码的工具，但是如果可以解密或解析Android脚本，将会大大方便iOS的破解。因此Android的有效脚本加密非常有必要。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Assetbundle资源篡改&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;透视功能可让使用修改版的玩家获取不对称优势。如下所示的某枪击游戏，将其中Assetbundle资源里面的材质属性修改为透明，即可达到透视的效果。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-57795177132f85a35af1d5716ccc4fb4_hd.jpg&quot; alt=&quot;&quot; width=&quot;550&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;283&quot; data-original=&quot;https://pic3.zhimg.com/v2-57795177132f85a35af1d5716ccc4fb4_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-57795177132f85a35af1d5716ccc4fb4_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;除了资源被篡改的风险外，游戏中还存在资源被竞品盗取、分析的风险。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存档数据被修改&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-c160f66989eb9aa90d2155fca87a8419_hd.jpg&quot; alt=&quot;&quot; width=&quot;586&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;586&quot; data-rawheight=&quot;262&quot; data-original=&quot;https://pic1.zhimg.com/v2-c160f66989eb9aa90d2155fca87a8419_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c160f66989eb9aa90d2155fca87a8419_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;某些游戏存档数据以明文形式存在，如果这些数据不去服务端校验，或者是单机游戏的话，则存在巨大的安全风险，游戏的各种属性可以直接修改。&lt;/p&gt;
&lt;h2&gt;外挂工具&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;游戏修改器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用修改器能够将伤害倍率从18%改成999.9%，使得攻击伤害提升了几十倍。类似的原理也可以实现无敌、秒杀、无限蓝、技能无CD等效果，因此修改器对游戏平衡的危害相当大。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-0053a233959c525b90b07612c6ea49c0_hd.jpg&quot; alt=&quot;&quot; width=&quot;550&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;281&quot; data-original=&quot;https://pic3.zhimg.com/v2-0053a233959c525b90b07612c6ea49c0_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0053a233959c525b90b07612c6ea49c0_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;常用的修改器有烧饼修改器、八门神器和GameGuardian（GG修改器及其各种修改版），其中的GG修改器（GameGuardian）流行于即时对战类游戏（比如吃鸡游戏）。&lt;/p&gt;
&lt;p&gt;上图为搜索数值界面，下图为调用lua脚本界面&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-d03cf5b54f9120d0169e0170826d9d58_hd.jpg&quot; alt=&quot;&quot; width=&quot;496&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;496&quot; data-rawheight=&quot;882&quot; data-original=&quot;https://pic2.zhimg.com/v2-d03cf5b54f9120d0169e0170826d9d58_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d03cf5b54f9120d0169e0170826d9d58_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-a74a90f864b63754b2148061bf590c98_hd.jpg&quot; alt=&quot;&quot; width=&quot;497&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;497&quot; data-rawheight=&quot;884&quot; data-original=&quot;https://pic4.zhimg.com/v2-a74a90f864b63754b2148061bf590c98_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a74a90f864b63754b2148061bf590c98_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;某QQ群售卖的GG lua脚本&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;免ROOT修改器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;免ROOT修改器是指通过第三方软件获得Root权限，可以访问和修改手机游戏中几乎所有的文件，但这样操作有可能影响游戏的稳定性，出现死机、卡顿、重启等人为性故障。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-49a77302c3b916b96124ae1063329511_hd.jpg&quot; alt=&quot;&quot; width=&quot;451&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;451&quot; data-rawheight=&quot;802&quot; data-original=&quot;https://pic4.zhimg.com/v2-49a77302c3b916b96124ae1063329511_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-49a77302c3b916b96124ae1063329511_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;八门神器附带的免ROOT修改器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-5819cae05b4986e6d4262f3f559170ac_hd.jpg&quot; alt=&quot;&quot; width=&quot;774&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;774&quot; data-rawheight=&quot;435&quot; data-original=&quot;https://pic1.zhimg.com/v2-5819cae05b4986e6d4262f3f559170ac_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5819cae05b4986e6d4262f3f559170ac_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;GG大玩家附带的免ROOT修改器&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;游戏加速器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;加速器分2种类型，一种是手机加速器，例如烧饼加速器、GG加速器；另一种是模拟器加速器，例如天天加速器。加速器除了可以加速，还可以减速。如下图所示，使用烧饼加速器，背景速度会随加速倍数加大而提高。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-f707d1319947821d907154beeab0ee15_hd.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;338&quot; data-original=&quot;https://pic4.zhimg.com/v2-f707d1319947821d907154beeab0ee15_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f707d1319947821d907154beeab0ee15_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;游戏破解版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;破解版提供了很多变态的功能来吸引玩家。下图是某个站专门破解游戏售卖进行盈利，他们除了有售卖网站，还开了淘宝店。只要月付150元，就已经超过很多游戏的ARPU值了。这样破解版的存在会严重影响普通玩家体验，给游戏收入和口碑都造成很大的损失。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-2e369b8ef1cc36eec2566274e5304c0b_hd.jpg&quot; alt=&quot;&quot; width=&quot;468&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;299&quot; data-original=&quot;https://pic4.zhimg.com/v2-2e369b8ef1cc36eec2566274e5304c0b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2e369b8ef1cc36eec2566274e5304c0b_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;包括GG大玩家、光环助手等等，市面上都有各种破解版售卖。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-9cd4f8eb76908629169b392fac5a9325_hd.jpg&quot; alt=&quot;&quot; width=&quot;537&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;955&quot; data-original=&quot;https://pic3.zhimg.com/v2-9cd4f8eb76908629169b392fac5a9325_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9cd4f8eb76908629169b392fac5a9325_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-84a29c899502ecf0578d20b6e08835cf_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-84a29c899502ecf0578d20b6e08835cf_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-84a29c899502ecf0578d20b6e08835cf_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GG大玩家游戏破解版，上图为修改版列表，下图为修改版功能&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-e308bba6ad2ddd73c4fcc105a7e96648_hd.jpg&quot; alt=&quot;&quot; width=&quot;506&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;506&quot; data-rawheight=&quot;899&quot; data-original=&quot;https://pic2.zhimg.com/v2-e308bba6ad2ddd73c4fcc105a7e96648_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e308bba6ad2ddd73c4fcc105a7e96648_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-dbc132225ebef55bb605d732e47a67cc_hd.jpg&quot; alt=&quot;&quot; width=&quot;507&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;507&quot; data-rawheight=&quot;902&quot; data-original=&quot;https://pic3.zhimg.com/v2-dbc132225ebef55bb605d732e47a67cc_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-dbc132225ebef55bb605d732e47a67cc_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;光环助手游戏破解版，上图为修改版列表，下图为修改版功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;模拟按键挂&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-3d915d51ae70c41b5603785f99d49d34_hd.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;336&quot; data-original=&quot;https://pic2.zhimg.com/v2-3d915d51ae70c41b5603785f99d49d34_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3d915d51ae70c41b5603785f99d49d34_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上图就是一个模拟按键挂，虽然只是模拟点击，但是可以做到自动游戏，可以刷各种金币、积分，对游戏平衡也会有比较大的影响。常见的模拟按键挂包括有触动精灵、触摸精灵、按键精灵、叉叉助手、游戏蜂窝等等。&lt;/p&gt;

&lt;h2&gt;二、易盾是怎么做的？&lt;/h2&gt;

&lt;p&gt;网易易盾能够提供Unity mono DLL脚本加密、IL2CPP 加密、Assetbundle加密等加密解决方案，以及反修改器、反加速、反模拟器、反调试等手游通用保护功能和手游风险感知。&lt;/p&gt;

&lt;h2&gt;Unity mono DLL脚本加密&lt;/h2&gt;

&lt;p&gt;通过修改或者HOOK mono_image_open_from_data_with_name能够对DLL脚本加解密。mono_image_open_from_data_with_name是CSharp 脚本的加载函数，如果CSharpDLL脚本做了加密，需要在这个函数执行之前解密。因此只要在这个函数这里下断点或者HOOK，就可以解密出原始DLL，而不需要逆向加密算法。需要注意的是，这里有个memcpy拷贝操作，mono会把解密后的DLL在内存中留存一份拷贝。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-4b02e64792393cfc903954b1b90536ea_hd.jpg&quot; alt=&quot;&quot; width=&quot;684&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;684&quot; data-rawheight=&quot;484&quot; data-original=&quot;https://pic3.zhimg.com/v2-4b02e64792393cfc903954b1b90536ea_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-4b02e64792393cfc903954b1b90536ea_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Unity mono DLL脚本加密经历了三代的技术演进。&lt;/p&gt;

&lt;p&gt;第一代加密直接对DLL文件进行加密，在mono_image_open_from_data_with_name函数开始处解密。对于这个的破解方法很简单，PE结构的文件，以4d 5a90 00这四个字节为magic head，这可以做为CSharp DLL脚本的特征，只要搜索0x905a4d这个数值就可以了，由于烧饼修改器是使用10进制数值，将其转换成10进制值:9460301。因此解密门槛很低，只要使用修改器就可以解密。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-fe68a3c06f3093050e164fd01d96a864_hd.jpg&quot; alt=&quot;&quot; width=&quot;815&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;815&quot; data-rawheight=&quot;213&quot; data-original=&quot;https://pic3.zhimg.com/v2-fe68a3c06f3093050e164fd01d96a864_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-fe68a3c06f3093050e164fd01d96a864_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-960616973ea387c4cc82eff4b1f0b746_hd.jpg&quot; alt=&quot;&quot; width=&quot;1011&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1011&quot; data-rawheight=&quot;544&quot; data-original=&quot;https://pic1.zhimg.com/v2-960616973ea387c4cc82eff4b1f0b746_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-960616973ea387c4cc82eff4b1f0b746_b.jpg&quot;/&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-bad024775904143232133f2f4780d88f_hd.jpg&quot; alt=&quot;&quot; width=&quot;637&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;637&quot; data-rawheight=&quot;72&quot; data-original=&quot;https://pic4.zhimg.com/v2-bad024775904143232133f2f4780d88f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bad024775904143232133f2f4780d88f_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第二代加密基于第一代加密的明显弱点，针对解密加强了防护。解密后，把下图所示的PE头抹掉，使得修改器无法定位到脚本位置。因此解密门槛比较高，需要非常强的逆向开发能力才能破解。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-2f9d77940968e80e60dd3c993a0e256a_hd.jpg&quot; alt=&quot;&quot; width=&quot;820&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;820&quot; data-rawheight=&quot;490&quot; data-original=&quot;https://pic2.zhimg.com/v2-2f9d77940968e80e60dd3c993a0e256a_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2f9d77940968e80e60dd3c993a0e256a_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第三代加密针对Csharp 函数做了加密，也就是方法级加密，需动态解密。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-ac9c67cf57fdb65a5f270a8fe3672e3c_hd.jpg&quot; alt=&quot;&quot; width=&quot;811&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;811&quot; data-rawheight=&quot;785&quot; data-original=&quot;https://pic3.zhimg.com/v2-ac9c67cf57fdb65a5f270a8fe3672e3c_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ac9c67cf57fdb65a5f270a8fe3672e3c_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;原始未加密dnspy函数解析结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-7a70702db841254acc74920551fdd546_hd.jpg&quot; alt=&quot;&quot; width=&quot;811&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;811&quot; data-rawheight=&quot;785&quot; data-original=&quot;https://pic2.zhimg.com/v2-7a70702db841254acc74920551fdd546_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7a70702db841254acc74920551fdd546_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;函数加密后dnspy函数解析报错&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;IL2CPP 加密&lt;/h2&gt;
&lt;p&gt;Il2cpp脚本信息以lib2cpp.so形式存在，结合global-metadata.dat文件内的符号信息，即可进行解析，因此需要对libil2cpp.so做so加壳，如下图所示，原始libil2cpp.so用IDA可以看到475个导出函数：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-8f81ad6338b4e0be500ed11b29ce7b98_hd.jpg&quot; alt=&quot;&quot; width=&quot;674&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;674&quot; data-rawheight=&quot;389&quot; data-original=&quot;https://pic2.zhimg.com/v2-8f81ad6338b4e0be500ed11b29ce7b98_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8f81ad6338b4e0be500ed11b29ce7b98_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;加固后的libil2cpp.so导出函数则为空：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-d833ee078eb6bfec49e65cbdb9f7a729_hd.jpg&quot; alt=&quot;&quot; width=&quot;808&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;808&quot; data-rawheight=&quot;428&quot; data-original=&quot;https://pic4.zhimg.com/v2-d833ee078eb6bfec49e65cbdb9f7a729_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d833ee078eb6bfec49e65cbdb9f7a729_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Assetbundle加密&lt;/h2&gt;

&lt;p&gt;Assetbundle未加密时，Unity Studio可解析出各种资源：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-7576bbf69b257124ac016af8813e82fc_hd.jpg&quot; alt=&quot;&quot; width=&quot;672&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;672&quot; data-rawheight=&quot;445&quot; data-original=&quot;https://pic1.zhimg.com/v2-7576bbf69b257124ac016af8813e82fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7576bbf69b257124ac016af8813e82fc_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对Assetbundle加密后，Unity Studio就无法解析了：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-ebaa833aa59864c64ffa30dcabfa9d16_hd.jpg&quot; alt=&quot;&quot; width=&quot;619&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;619&quot; data-rawheight=&quot;336&quot; data-original=&quot;https://pic2.zhimg.com/v2-ebaa833aa59864c64ffa30dcabfa9d16_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-ebaa833aa59864c64ffa30dcabfa9d16_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;手游通用保护功能&lt;/h2&gt;
&lt;p&gt;除去Unity mono DLL脚本加密、IL2CPP 加密、Assetbundle加密等加密解决方案外，网易易盾也能够提供通用的手游保护功能，包括反修改器、反加速、反模拟器、反调试、反模拟点击、文件校验、防二次打包、存档加密、引擎SO定制化加壳等。一般而言，这些通用功能任何游戏引擎都支持，可以根据游戏需求选择一个或多个。目前，网易易盾支持的游戏主要包含Unity3d、COCOS、NEOX和UE4。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;反修改器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;修改器可以实现很多功能，如无限蓝、技能无CD、无敌、秒杀、倍攻等，是工具党的最爱，也是专业破解者常用的工具之一。常见的修改器除了常见的烧饼、八门神器、葫芦侠、GG（GameGuardian）以外，还有很多定制修改版。&lt;/p&gt;

&lt;p&gt;其中，GG修改器是做的最专业的修改器，专门做了反检测措施（随机化包名、子进程使用系统进程名等），因此常规的进程检测对GG无效。但是易盾手游保护采用修改行为检测，可以通杀所有修改器，包括所有已知和未知的修改器。下图是检测效果示例：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-5b4d83beb2bfa58ac127ddcea6700e45_hd.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;378&quot; data-original=&quot;https://pic3.zhimg.com/v2-5b4d83beb2bfa58ac127ddcea6700e45_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-5b4d83beb2bfa58ac127ddcea6700e45_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;加速器可加速可减速，主要分为两类：一是Android系统内的加速器，如烧饼加速器、叉叉加速器，一般修改器都附带加速功能；二是对模拟器进程加速的加速器，此加速原理跟端游加速相同，实质是对整个模拟器做了加速，Android系统内并没有加速器在运行，比较典型的是天天模拟器附带的天天加速器。&lt;/p&gt;

&lt;p&gt;加速器的使用会让个别玩家获得游戏优势，影响游戏平衡。但是易盾手游保护对以上这2种加速都有检测方案，而且是针对行为的检测方案，不针对特定的某些加速器，通用性更好——对于天天加速器这样的进程加速器，即使只加速0.1倍也可以检测到。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;content_image lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-007f7edcfaaa903083475b2eb4371b08_hd.jpg&quot; alt=&quot;&quot; width=&quot;285&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;285&quot; data-rawheight=&quot;594&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-007f7edcfaaa903083475b2eb4371b08_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上图是一个加固过的跑酷游戏，用天天加速器加速生效后，过了一秒钟左右，即会闪退。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;反模拟点击&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;模拟点击严格上来说不属于非法外挂，处于灰色地带，因此模拟点击器都是公司化动作，应用很广泛，但是模拟点击脚本提供的功能对游戏平衡也会带来很大的不良影响。目前比较知名的模拟点击器，有叉叉助手、触动精灵、触摸精灵、按键精灵、游戏蜂窝等。&lt;/p&gt;
&lt;p&gt;如下图所示，触动精灵启动后，再启动游戏，保护检测到模拟点击器的存在即会闪退：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;content_image lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-671e0af009ab88df73d4c3453e0b5a80_hd.jpg&quot; alt=&quot;&quot; width=&quot;321&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;321&quot; data-rawheight=&quot;612&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-671e0af009ab88df73d4c3453e0b5a80_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是易盾手游保护使用了进程+行为检测相结合的方式，能够对模拟点击器进行检测。&lt;/p&gt;
&lt;p&gt;以上介绍的这些手游通用保护功能各有其特点，开发者可以按实际需求进行选择：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-2b686513f3eec41f43f917fc09e71e1d_hd.jpg&quot; alt=&quot;&quot; width=&quot;722&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;722&quot; data-rawheight=&quot;267&quot; data-original=&quot;https://pic2.zhimg.com/v2-2b686513f3eec41f43f917fc09e71e1d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2b686513f3eec41f43f917fc09e71e1d_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;手游风险感知&lt;/h2&gt;

&lt;p&gt;网易易盾还能够提供手游风险感知功能，主要包括包含破解包的检测、跟破解者无感知对抗、恶意用户风险评估以及支持私有化部署。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-e436e862d4dcd397395336aa053d6893_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; data-original=&quot;https://pic4.zhimg.com/v2-e436e862d4dcd397395336aa053d6893_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e436e862d4dcd397395336aa053d6893_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;三、易盾保护方案特点&lt;/h2&gt;

&lt;p&gt;网易易盾保护方案具有纯Native保护、对引擎SO做加壳、兼容性和稳定性高、性能影响小、支持Windows、Linux、Mac三平台加固等性能特点。&lt;/p&gt;

&lt;h2&gt;纯Native保护&lt;/h2&gt;
&lt;p&gt;游戏dex内部都是第三方SDK以及游戏内部不涉及到游戏逻辑的SDK。如果对Dex加壳的话，一方面容易造成Android碎片化，导致Dex加壳会降低app的兼容性；另外Android存在Dalvik和Art两种虚拟机，所以Dex加壳会为了兼容2种虚拟机而增加处理成本，从而导致启动耗时增加比较厉害。阿里和腾讯都有Dex加壳服务，但是支付宝、微信都没做Dex加壳。支付宝和微信的安全问题应该是所有APP中间最严重的，他们都没做Dex加壳，这很能说明问题，此外所有腾讯的游戏都没有做Dex加壳。所以如果手游保护需要依赖于Dex加壳的话，兼容性和安全性都是很难保证的。因此建议游戏不要使用Dex加壳。&lt;/p&gt;
&lt;p&gt;下图是以一个第三方游戏为例，使用jeb分析其Dex包含的模块：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;content_image lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-927b4d8257a1b212ebbb088bf7a5e7d3_hd.jpg&quot; alt=&quot;&quot; width=&quot;368&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;368&quot; data-rawheight=&quot;897&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-927b4d8257a1b212ebbb088bf7a5e7d3_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;网易易盾可以提供纯Native保护，使游戏保护不依赖Dex加壳。Dex加壳和纯Native保护优缺点比较如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-5fe43bcb4379f5bb6586799329673a40_hd.jpg&quot; alt=&quot;&quot; width=&quot;738&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;738&quot; data-rawheight=&quot;322&quot; data-original=&quot;https://pic3.zhimg.com/v2-5fe43bcb4379f5bb6586799329673a40_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-5fe43bcb4379f5bb6586799329673a40_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;对引擎SO做加壳&lt;/h2&gt;
&lt;p&gt;基本上所有的破解都依赖于对引擎so的逆向分析，如果对so进行了加壳保护，会大大增加游戏被破解的门槛。除了对引擎SO加壳，网易易盾还会对敏感函数代码做校验。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-6972dfa61a82b208a16dcfa84638e761_hd.jpg&quot; alt=&quot;&quot; width=&quot;745&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;745&quot; data-rawheight=&quot;506&quot; data-original=&quot;https://pic4.zhimg.com/v2-6972dfa61a82b208a16dcfa84638e761_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-6972dfa61a82b208a16dcfa84638e761_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;兼容性和稳定性高&lt;/h2&gt;

&lt;p&gt;兼容强的原理在于所有保护都在SO层，不会对DEX进行修改，有效避免了Android碎片化导致的兼容问题。网易易盾的兼容性极高，可以兼容从Android 2.3到Android 9.0所有版本系统、所有模拟器以及所有游戏引擎使用的指令集。&lt;/p&gt;

&lt;p&gt;手游保护的稳定性，需要遵循如下发布流程：&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;QA测试：在200台手机上以及各种模拟器上测试；&lt;/li&gt;
&lt;li&gt;预线上测试：将安全模块集成到日活1000的APP上线测试2周；&lt;/li&gt;
&lt;li&gt;版本发布：前面2轮都测试稳定后，正式发布；&lt;/li&gt;
&lt;li&gt;线上回归：先在内部比较小的游戏上线测试，确保稳定性。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;性能影响小&lt;/h2&gt;
&lt;p&gt;易盾保护方案还具有性能影响小的特点，无论是CPU占用、内存占用、启动时间、电量消耗等方面的影响几乎都可忽略不计。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-2a9148a0455aff7d50626a4a38b0cea7_hd.jpg&quot; alt=&quot;&quot; width=&quot;694&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;694&quot; data-rawheight=&quot;345&quot; data-original=&quot;https://pic4.zhimg.com/v2-2a9148a0455aff7d50626a4a38b0cea7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2a9148a0455aff7d50626a4a38b0cea7_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;支持Windows、Linux、Mac三平台加固&lt;/h2&gt;
&lt;p&gt;此外，易盾保护方案还支持Windows、Linux、Mac三平台加固，加固工具以jar包形式提供，不仅自带极速签名功能，而且对加固做了全面优化，速度更快。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-5e545d9bef7520ab7bd2f7398098660c_hd.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;350&quot; data-original=&quot;https://pic2.zhimg.com/v2-5e545d9bef7520ab7bd2f7398098660c_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5e545d9bef7520ab7bd2f7398098660c_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;加固接入的对接过程包括：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-44e24f698e34dc553ec10306fd844ddf_hd.jpg&quot; alt=&quot;&quot; width=&quot;934&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;934&quot; data-rawheight=&quot;311&quot; data-original=&quot;https://pic3.zhimg.com/v2-44e24f698e34dc553ec10306fd844ddf_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-44e24f698e34dc553ec10306fd844ddf_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;确定游戏加固项；&lt;/li&gt;
&lt;li&gt;易盾技术支持云端配置好加固项；&lt;/li&gt;
&lt;li&gt;获取appkey；&lt;/li&gt;
&lt;li&gt;下载加固jar包工具，根据使用说明配置好appkey。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;四、易盾的解决方案获得了哪些客户认可？&lt;/h2&gt;
&lt;p&gt;网易易盾保护方案广泛应用于实际案例中，包括网易公司内部的倩女幽魂、终结者2：审判日等手游之中。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-715e2fd85e6294ed9ca8f7f0c43e29a4_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;415&quot; data-original=&quot;https://pic1.zhimg.com/v2-715e2fd85e6294ed9ca8f7f0c43e29a4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-715e2fd85e6294ed9ca8f7f0c43e29a4_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在外部，也有游戏公司多个游戏皆采用了易盾手游保护方案。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-84d8e62731562101f32fcd39d13871ca_hd.jpg&quot; alt=&quot;&quot; width=&quot;1038&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1038&quot; data-rawheight=&quot;207&quot; data-original=&quot;https://pic2.zhimg.com/v2-84d8e62731562101f32fcd39d13871ca_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-84d8e62731562101f32fcd39d13871ca_b.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后：易盾还在现场举办了安全诊断环节，现场有用户问及加固的流程。网易客户全工程师李沛然表示，加固流程上，一条命令行即可接入，不会影响开发流程。&lt;/p&gt;
&lt;p&gt;“使用很便捷。”李沛然强调。&lt;a class=&quot; wrap external&quot; href=&quot;https://www.163yun.com/product/android-protect?tag=M_cnblogs_8985562&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;点击这里可免费试用易盾加固&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;相关阅读：&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.cnblogs.com/163yun/p/8892356.html&quot; data-za-detail-view-id=&quot;1043&quot;&gt;知物由学第三期：知物由学 | 一文读懂互联网内容审核机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.cnblogs.com/163yun/p/8862077.html&quot; data-za-detail-view-id=&quot;1043&quot;&gt;知物由学第四期 | 干货！一文了解安卓APP逆向分析与保护机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://www.cnblogs.com/163yun/p/8985516.html&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;知物由学第五期 | 这些企业大佬如何看待2018年的安全形势？&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;了解 网易云 ：&lt;br data-filtered=&quot;filtered&quot;/&gt;
网易云官网：&lt;a href=&quot;https://www.163yun.com/?tag=M_cnblogs_8985562&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/&lt;/a&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;
新用户大礼包：&lt;a href=&quot;https://www.163yun.com/gift?tag=M_cnblogs_8985562&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/gift&lt;/a&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;
网易云社区：&lt;a href=&quot;https://sq.163yun.com/?tag=M_cnblogs_8985562&quot; target=&quot;_blank&quot;&gt;https://sq.163yun.com/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:27:00 +0000</pubDate>
<dc:creator>网易云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/163yun/p/8985562.html</dc:identifier>
</item>
<item>
<title>Object对象你真理解了吗？ - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8985368.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8985368.html</guid>
<description>&lt;p&gt;五一回家又断更了一个放假时间了~~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有光头才能变强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回顾前面：&lt;/p&gt;
&lt;p&gt;之前花了点之间时间去搞多线程的基础知识了，难呀难呀难呀....打算&lt;strong&gt;还&lt;/strong&gt;写一篇线程池的就&lt;strong&gt;暂时&lt;/strong&gt;将多线程系列停止了...&lt;/p&gt;
&lt;p&gt;今天中午在逛简书的时候发现一些大厂也会问Object对象里面有什么方法(也算是一个知识点吧)，Object我还没去认真复习过，于是这篇主要看看Object对象有什么要注意的地方~&lt;/p&gt;
&lt;p&gt;那么接下来就开始吧，如果文章有错误的地方请大家多多包涵，不吝在评论区指正哦~&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;声明：本文都是使用JDK1.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们学Java的知道，Java是一门面向对象的语言。无论在Java中出现什么，都可以认为它是对象(&lt;strong&gt;除了&lt;/strong&gt;八大基本数据类型。当然了，八大基本数据类型也能&lt;strong&gt;装箱&lt;/strong&gt;成为对象)：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;而Object就是这些对象的最高级别的，所有的Java对象都&lt;strong&gt;隐式&lt;/strong&gt;地继承了Object对象(不用显示写&lt;code&gt;extends&lt;/code&gt;继承)&lt;/li&gt;
&lt;li&gt;所有的Java对象都&lt;strong&gt;拥有Object默认的方法&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那么我们看看Object有什么方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6bea131236?w=492&amp;amp;h=398&amp;amp;f=png&amp;amp;s=8128&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实就可以归纳成几个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;registerNatives()&lt;/code&gt;【底层实现、不研究】&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hashCode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals(Object obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clone()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifyAll()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait(long timeout)&lt;/code&gt;【还有重载了两个】&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Object一共有&lt;strong&gt;11&lt;/strong&gt;个方法，其中一个为底层的实现&lt;code&gt;registerNatives()&lt;/code&gt;，其中两个&lt;code&gt;wait()&lt;/code&gt;和&lt;code&gt;wait(long timeout, int nanos)&lt;/code&gt;重载方法。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所以我们真正需要看的就是&lt;strong&gt;8个&lt;/strong&gt;方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;还有&lt;strong&gt;一个属性&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
 &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;native&lt;/span&gt; Class&amp;lt;?&amp;gt; &lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6bacc30249?w=1067&amp;amp;h=554&amp;amp;f=png&amp;amp;s=23886&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二equals和hashcode方法&quot;&gt;二、equals和hashCode方法&lt;/h2&gt;
&lt;p&gt;equals和hashCode方法可以说是面试的重点题了，配合着String可以说在面试题中&lt;strong&gt;哪都有它们的存在&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们来看看equals和hashCode在Object中&lt;strong&gt;原生&lt;/strong&gt;的实现吧：&lt;/p&gt;
&lt;p&gt;hashCode：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;equals：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object obj) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt; == obj);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看上去都非常简单：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;hashCode()&lt;/code&gt;由native方法底层实现了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;就直接&lt;code&gt;==&lt;/code&gt;判断是否相等了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;想要更加清晰它们究竟是做什么的，我们来读读它的注释：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XR9hFfA.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6dd98fafb9?w=1918&amp;amp;h=1443&amp;amp;f=png&amp;amp;s=114394&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据注释我们可以&lt;strong&gt;总结以下的要点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;重写&lt;code&gt;equals()&lt;/code&gt;方法，就必须重写&lt;code&gt;hashCode()&lt;/code&gt;的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;方法默认是比较对象的地址，使用的是&lt;code&gt;==&lt;/code&gt;等值运算符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hashCode()&lt;/code&gt;方法对底层是散列表的对象有提升性能的功能&lt;/li&gt;
&lt;li&gt;同一个对象(如果该对象没有被修改)：那么重复调用&lt;code&gt;hashCode()&lt;/code&gt;那么返回的int是相同的！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hashCode()&lt;/code&gt;方法默认是由对象的地址转换而来的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;方法还有5个默认的原则：
&lt;ul&gt;&lt;li&gt;自反性---&amp;gt;调用&lt;code&gt;equals()&lt;/code&gt;返回的是true，无论这两个对象谁调用&lt;code&gt;equals()&lt;/code&gt;都好，返回的都是true&lt;/li&gt;
&lt;li&gt;一致性---&amp;gt;只要对象没有被修改，那么多次调用还是返回对应的结果！&lt;/li&gt;
&lt;li&gt;传递性---&amp;gt;&lt;code&gt;x.equals(y)&lt;/code&gt;和&lt;code&gt;y.equals(z)&lt;/code&gt;都返回true，那么可以得出：&lt;code&gt;x.equals(z)&lt;/code&gt;返回true&lt;/li&gt;
&lt;li&gt;对称性---&amp;gt;&lt;code&gt;x.equals(y)&lt;/code&gt;和&lt;code&gt;y.equals(x)&lt;/code&gt;结果应该是相等的。&lt;/li&gt;
&lt;li&gt;传入的参数为null，返回的是false&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为啥说&lt;code&gt;hashCode()&lt;/code&gt;以散列表为底层带来性能的提升是很容易理解的。我们再来&lt;strong&gt;回顾&lt;/strong&gt;一下HashMap的插入：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6dc3ba8c3e?w=1307&amp;amp;h=595&amp;amp;f=png&amp;amp;s=23075&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果hash值都不相等，那么可以直接判断该key是不相等的了！&lt;/p&gt;
&lt;h3 id=&quot;equals和hashcode方法重写&quot;&gt;2.1equals和hashCode方法重写&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt;方法默认是比较对象的地址，使用的是&lt;code&gt;==&lt;/code&gt;等值运算符。但是按我们正常开发来说，&lt;strong&gt;比较的是对象地址是没有意义的&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一般地，如果我们有两个Address对象，只要这两个对象的&lt;strong&gt;省号、城市号、街道号相等&lt;/strong&gt;，我们就认为这两个对象相等了！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6bae49e75a?w=1236&amp;amp;h=563&amp;amp;f=png&amp;amp;s=31589&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;string实现的equals和hashcode方法&quot;&gt;2.2String实现的equals和hashCode方法&lt;/h3&gt;
&lt;p&gt;我们在初学的时候可能就听过了：String&lt;strong&gt;已经&lt;/strong&gt;实现了equals和hashCode方法了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这也就是为什么，我们可以&lt;strong&gt;直接&lt;/strong&gt;使用String.equals()来&lt;strong&gt;判断两个字符串&lt;/strong&gt;是否相等！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们就来看看它的实现吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6bf58f1e99?w=816&amp;amp;h=572&amp;amp;f=png&amp;amp;s=16723&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6bf1509f15?w=858&amp;amp;h=376&amp;amp;f=png&amp;amp;s=6831&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接下来我们看看toString方法，也十分简单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6c36facd57?w=1200&amp;amp;h=628&amp;amp;f=png&amp;amp;s=33237&quot;/&gt;&lt;/p&gt;
&lt;p&gt;toString方法主要是用来&lt;strong&gt;标识&lt;/strong&gt;该对象的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6c48984185?w=1343&amp;amp;h=176&amp;amp;f=png&amp;amp;s=10768&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面的结果我们都可以看出来：&lt;strong&gt;得出的结果我们并不能看到什么东西&lt;/strong&gt;~&lt;/p&gt;
&lt;p&gt;于是我们一般都重写toString()，那么&lt;strong&gt;打印出的结果就很方便我们调试了&lt;/strong&gt;！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Address{&quot;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&quot;provinceNo=&quot;&lt;/span&gt; + provinceNo +
                &lt;span class=&quot;st&quot;&gt;&quot;, cityNo=&quot;&lt;/span&gt; + cityNo +
                &lt;span class=&quot;st&quot;&gt;&quot;, streetNo=&quot;&lt;/span&gt; + streetNo +
                '}';
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的结果看起来就好多了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6c5155fd2c?w=1517&amp;amp;h=205&amp;amp;f=png&amp;amp;s=13814&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们也来看看它的顶部注释：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6c5fd4239f?w=1918&amp;amp;h=1839&amp;amp;f=png&amp;amp;s=155030&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看了上面的注释我们可以&lt;strong&gt;总结以下的要点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;clone方法用于对象的克隆，一般想要克隆出的对象是&lt;strong&gt;独立&lt;/strong&gt;的(与原有的对象是分开的)&lt;/li&gt;
&lt;li&gt;深拷贝指的是该对象的成员变量(如果是可变引用)都应该克隆一份，浅拷贝指的是成员变量没有被克隆一份&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们来看一下浅拷贝：&lt;strong&gt;拷贝了Employee对象，但是其成员变量hireday没有被克隆出去，所以指向的还是同一个Date对象&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6c8d1dd69f?w=2448&amp;amp;h=3264&amp;amp;f=jpeg&amp;amp;s=502763&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;clone用法&quot;&gt;4.1clone用法&lt;/h2&gt;
&lt;p&gt;那么我们如何克隆对象呢？无论是浅拷贝还是深拷贝都是这两步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;克隆的对象要&lt;strong&gt;实现Cloneable接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重写clone方法&lt;/strong&gt;，最好修饰成public&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;浅拷贝&lt;/strong&gt;：仅仅拷贝了Person对象，而date没有拷贝！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Cloneable {

    &lt;span class=&quot;co&quot;&gt;// 可变的成员变量&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; CloneNotSupportedException {

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;();
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;：不仅拷贝了Person对象，也拷贝了date成员变量&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Cloneable {

    &lt;span class=&quot;co&quot;&gt;// 可变的成员变量&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt;  Date date;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; CloneNotSupportedException {


        &lt;span class=&quot;co&quot;&gt;// 拷贝Person对象&lt;/span&gt;
        Person person = (Person) &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;// 将可变的成员变量也拷贝&lt;/span&gt;
        person.&lt;span class=&quot;fu&quot;&gt;date&lt;/span&gt; = (Date) date.&lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;();


        &lt;span class=&quot;co&quot;&gt;// 返回拷贝的对象&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person;
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;clone疑问进一步学习protected&quot;&gt;4.2clone疑问进一步学习protected&lt;/h2&gt;
&lt;p&gt;不知道有没有人跟我有相同的&lt;strong&gt;疑问&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我只想要&lt;strong&gt;浅拷贝&lt;/strong&gt;，能不能&lt;strong&gt;直接调用该对象.clone()来实现&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;比如我现在有个Address对象：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Address  {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; provinceNo;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; cityNo;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; streetNo;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; provinceNo, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; cityNo, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; streetNo) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;provinceNo&lt;/span&gt; = provinceNo;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cityNo&lt;/span&gt; = cityNo;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;streetNo&lt;/span&gt; = streetNo;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的代码你们&lt;strong&gt;认为如何&lt;/strong&gt;？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    Address address = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
    address.&lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们都知道：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;protected修饰的类和属性,对于自己、本包和其子类可见&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;可能会想&lt;/strong&gt;：&lt;code&gt;clone()&lt;/code&gt;方法是定义在Object类上的(以protected来修饰)，而我们自定义的Address对象&lt;strong&gt;隐式&lt;/strong&gt;继承着Object(所有的对象都是Object的子类)，那么子类调用Object以protected来修饰&lt;code&gt;clone()&lt;/code&gt;是完全没问题的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;但是，IDE现实告诉我，这&lt;strong&gt;编译就不通过了&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6cb2a8e1aa?w=942&amp;amp;h=144&amp;amp;f=png&amp;amp;s=5416&quot;/&gt;&lt;/p&gt;
&lt;p&gt;出现错误的原因我立马就想到：&lt;strong&gt;是不是我对protected修饰符出现了偏差？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;protected修饰的类和属性,对于自己、本包和其子类可见，这句话本身是没有错的。但是&lt;strong&gt;还需要补充&lt;/strong&gt;：对于protected的成员或方法，要分子类和超类&lt;strong&gt;是否在同一个包中&lt;/strong&gt;。与基类&lt;strong&gt;不在同一个包中的子类&lt;/strong&gt;，只能&lt;strong&gt;访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上面的代码就错在：Address与Object&lt;strong&gt;不是在同一个包下&lt;/strong&gt;的，而Address直接访问了Object的clone方法。这是不行的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我截两张图再来给你们看看(看完图再看上面的描述，就能理解了)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6cb5b10a60?w=388&amp;amp;h=345&amp;amp;f=png&amp;amp;s=6062&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6dda89dc8b?w=563&amp;amp;h=896&amp;amp;f=png&amp;amp;s=18328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片来源和更多的展开阅读&lt;/strong&gt;：&lt;a href=&quot;https://blog.csdn.net/wangyanguiyiyang/article/details/49800493&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/wangyanguiyiyang/article/details/49800493&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wait和notify方法其实就是Java给我们提供让&lt;strong&gt;线程之间通信&lt;/strong&gt;的API。&lt;/p&gt;
&lt;p&gt;按照惯例我们还是来看注释怎么说吧：&lt;/p&gt;
&lt;p&gt;wait方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6d134d6573?w=1918&amp;amp;h=2649&amp;amp;f=png&amp;amp;s=220138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;notify方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6d2ccb71a1?w=1647&amp;amp;h=832&amp;amp;f=png&amp;amp;s=63557&quot;/&gt;&lt;/p&gt;
&lt;p&gt;notifyAll()方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6d53677af3?w=1188&amp;amp;h=631&amp;amp;f=png&amp;amp;s=28415&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看完上面的注释我们可以&lt;strong&gt;总结以下的要点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无论是wait、notify还是notifyAll()都需要&lt;strong&gt;由监听器对象(锁对象)来进行调用&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;简单来说：&lt;strong&gt;他们都是在同步代码块中调用的&lt;/strong&gt;，否则会抛出异常！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notify()&lt;/code&gt;唤醒的是在等待队列的&lt;strong&gt;某个&lt;/strong&gt;线程(不确定会唤醒哪个)，&lt;code&gt;notifyAll()&lt;/code&gt;唤醒的是等待队列&lt;strong&gt;所有&lt;/strong&gt;线程&lt;/li&gt;
&lt;li&gt;导致&lt;code&gt;wait()&lt;/code&gt;的线程被唤醒可以有4种情况
&lt;ul&gt;&lt;li&gt;该线程被中断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;时间到了&lt;/li&gt;
&lt;li&gt;被&lt;code&gt;notify()&lt;/code&gt;唤醒&lt;/li&gt;
&lt;li&gt;被&lt;code&gt;notifyAll()&lt;/code&gt;唤醒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;wait()&lt;/code&gt;的线程会&lt;strong&gt;释放掉锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其实总结完上面的并不会有比较深刻的印象，可以尝试着回答几个问题来加深对&lt;code&gt;wait()&lt;/code&gt;和&lt;code&gt;notify()&lt;/code&gt;的理解。&lt;/p&gt;
&lt;h2 id=&quot;为什么wait和notify在object方法上&quot;&gt;5.1为什么wait和notify在Object方法上？&lt;/h2&gt;
&lt;p&gt;从一开始我们就说了：&lt;code&gt;wait()&lt;/code&gt;和&lt;code&gt;notify()&lt;/code&gt;是Java给我们提供线程之间通信的API，既然是线程的东西，那什么是在Object类上定义，而不是在Thread类上定义呢？&lt;/p&gt;
&lt;p&gt;因为我们的&lt;strong&gt;锁是对象锁&lt;/strong&gt;【要是忘记的同学可回顾：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484198&amp;amp;idx=1&amp;amp;sn=4d8e372165bb49987a6243f17153a9b4&amp;amp;chksm=ebd74227dca0cb31311886f835092c9360d08a9f0a249ece34d4b1e49a31c9ec773fa66c8acc#rd&quot;&gt;Java锁机制了解一下&lt;/a&gt;】，每个对象都可以成为锁。&lt;strong&gt;让当前线程等待某个对象的锁，当然应该通过这个对象来操作了&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;锁对象是&lt;strong&gt;任意&lt;/strong&gt;的，所以这些方法必须定义在Object类中&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;notify方法调用后会发生什么&quot;&gt;5.2notify方法调用后，会发生什么？&lt;/h2&gt;
&lt;p&gt;上面已经说了，notify会唤醒某个处于等待队列的线程。&lt;/p&gt;
&lt;p&gt;但是要&lt;strong&gt;注意&lt;/strong&gt;的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;notify方法调用后，被唤醒的线程&lt;strong&gt;不会立马获得到锁对象&lt;/strong&gt;。而是等待notify的synchronized代码块&lt;strong&gt;执行完之后&lt;/strong&gt;才会获得锁对象&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;sleep和wait有什么区别&quot;&gt;5.3sleep和wait有什么区别？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Thread.sleep()&lt;/code&gt;与&lt;code&gt;Object.wait()&lt;/code&gt;二者都可以暂停当前线程，释放CPU控制权。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主要的区别在于&lt;code&gt;Object.wait()&lt;/code&gt;在释放CPU同时，&lt;strong&gt;释放了对象锁的控制&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;而&lt;code&gt;Thread.sleep()&lt;/code&gt;没有对锁释放&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;finalize()&lt;/code&gt;方法将在&lt;strong&gt;垃圾回收器清除对象之前调用&lt;/strong&gt;，但该方法不知道何时调用，具有&lt;strong&gt;不定性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一般我们都不会重写它~&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;一个对象的finalize()方法&lt;strong&gt;只会被调用一次&lt;/strong&gt;，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;进阶的资料：&lt;/p&gt;

&lt;p&gt;总的来说也算是把Object看了一遍了，不至于一下子把它的方法给忘了~~~在学习的过程中也遇到过问题，最明显的是对protected修饰符又加深了一次理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/16324c6d5dc7eb99?w=499&amp;amp;h=534&amp;amp;f=png&amp;amp;s=17713&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;《Java核心技术卷一》&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;。为了大家方便，刚新建了一下&lt;strong&gt;qq群：742919422&lt;/strong&gt;，大家也可以去交流交流。谢谢支持了！希望能多介绍给其他有需要的朋友&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文章的目录导航&lt;/strong&gt;：&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 07:01:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8985368.html</dc:identifier>
</item>
<item>
<title>PHP单元测试使用 - 雪山飞猪</title>
<link>http://www.cnblogs.com/chenqionghe/p/8984157.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenqionghe/p/8984157.html</guid>
<description>&lt;p&gt;php与其他语言不太一样，单元测试需要自己安装和配置，相对麻烦一点，不过单元测试对于提高库的稳定性和健壮性还是非常给力的，下面教大家怎么配置PHP单元测试&lt;/p&gt;
&lt;p&gt;注意：php需升级到7.1版本以上&lt;/p&gt;


&lt;h2&gt;1.全局安装phpunit命令脚本&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
$ wget https://phar.phpunit.de/phpunit-7.0.phar
$ chmod +x phpunit-7.0.phar
$ sudo mv phpunit-7.0.phar /usr/local/bin/phpunit
$ phpunit --version
PHPUnit x.y.z by Sebastian Bergmann and contributors.
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.全局安装安装phpunit代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
composer global  require phpunit/phpunit
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.创建 phpunit.xml放在你的项目根目录, 这个文件是 phpunit 会默认读取的一个配置文件：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;phpunit bootstrap=&quot;vendor/autoload.php&quot;&amp;gt;
    &amp;lt;testsuites&amp;gt;
        &amp;lt;testsuite name=&quot;service&quot;&amp;gt;
            &amp;lt;directory&amp;gt;tests&amp;lt;/directory&amp;gt;
        &amp;lt;/testsuite&amp;gt;
    &amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.配置phpstorm单元phpunit.phar路径，Languages &amp;amp; Frameworks &amp;gt; PHP &amp;gt; PHPUinit&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503102725103-1358575807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.配置单元测试类提示,Languages &amp;amp; Frameworks &amp;gt; PHP &amp;gt; include path&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503102748161-1785126566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.单元测试编写&lt;/h2&gt;
&lt;h4&gt;1.Class为Demo的测试类为DemoTest&lt;/h4&gt;
&lt;h4&gt;2.测试类继承于 PHPUnit\Framework\TestCase&lt;/h4&gt;
&lt;h4&gt;3.测试方法&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;必须为public权限，&lt;/li&gt;
&lt;li&gt;一般以test开头，也可以给其加注释@test来标识&lt;/li&gt;
&lt;li&gt;在测试方法内，类似于 assertEquals() 这样的断言方法用来对实际值与预期值的匹配做出断言。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&amp;lt;?php
use Eoffcn\Utils\Arrays;
use PHPUnit\Framework\TestCase;
/**
 * Array测试用例
 * Class ArraysTest
 */
class ArraysTest extends TestCase
{
    public function testGet()
    {
        $array = [
            1 =&amp;gt; [
                'b' =&amp;gt; [
                    'c' =&amp;gt; 'cqh'
                ]
            ],
            2 =&amp;gt; [
                'b' =&amp;gt; [
                    'c' =&amp;gt; 'cqh'
                ] ]
        ];
        $this-&amp;gt;assertEquals('cqh', Arrays::get($array, '1.b.c'));
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1.执行单个文件单元测试&lt;/h2&gt;
&lt;p&gt;Phpstorm方式，当前测试类右键Run即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503102910734-1911799565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命令行的方式，进行项目目录执行&lt;/p&gt;
&lt;div id=&quot;wiz_cm_1525314387393_4403&quot; class=&quot;wiz-code-container&quot; data-mode=&quot;JavaScript&quot; data-theme=&quot;default&quot;&gt;
&lt;div class=&quot;CodeMirror cm-s-default CodeMirror-wrap&quot; data-id=&quot;wiz_cm_1525314387393_4403&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
phpunit tests/ArraysTest.php
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503102937467-51171589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;2.执行全局单元测试&lt;/h2&gt;
&lt;p&gt;phpstorm方式&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503102954130-2123065122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503103854442-1195338524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;命令行方式，命令行下进入当前项目执行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662544/201805/662544-20180503104005540-1950774934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 03 May 2018 06:03:00 +0000</pubDate>
<dc:creator>雪山飞猪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenqionghe/p/8984157.html</dc:identifier>
</item>
<item>
<title>自定义ViewGroup添加布局动画 - ganchuanpu</title>
<link>http://www.cnblogs.com/ganchuanpu/p/8985002.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ganchuanpu/p/8985002.html</guid>
<description>&lt;p&gt;声明几个属性值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;declare-styleable name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GridImageViewGroup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
     &amp;lt;attr name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;childVerticalSpace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; format=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dimension&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;attr name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;childHorizontalSpace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; format=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dimension&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;attr name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;columnNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; format=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/declare-styleable&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;GridImageViewGroup.java 代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GridImageViewGroup extends ViewGroup {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; childVerticalSpace = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; childHorizontalSpace = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; columnNum = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; childWidth = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; childHeight = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; GridImageViewGroup(Context context, AttributeSet attrs) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        super(context, attrs);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         TypedArray attributes =&lt;span&gt; context.obtainStyledAttributes(attrs, R.styleable.GridImageViewGroup);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (attributes != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             childVerticalSpace = attributes.getDimensionPixelSize(R.styleable.GridImageViewGroup_childVerticalSpace, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             childHorizontalSpace = attributes.getDimensionPixelSize(R.styleable.GridImageViewGroup_childHorizontalSpace, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             columnNum = attributes.getInt(R.styleable.GridImageViewGroup_columnNum, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            attributes.recycle();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onMeasure(&lt;span&gt;int&lt;/span&gt; widthMeasureSpec, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; heightMeasureSpec) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; rw =&lt;span&gt; MeasureSpec.getSize(widthMeasureSpec);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; rh =&lt;span&gt; MeasureSpec.getSize(heightMeasureSpec);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; childCount =&lt;span&gt; getChildCount();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (childCount &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             childWidth = (rw - (columnNum - &lt;span&gt;1&lt;/span&gt;) * childHorizontalSpace) /&lt;span&gt; columnNum;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;             childHeight =&lt;span&gt; childWidth;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; vw =&lt;span&gt; rw;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (childCount &amp;lt;&lt;span&gt; columnNum) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 vw = childCount * (childHeight +&lt;span&gt; childVerticalSpace);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; rowCount = childCount / columnNum + (childCount % columnNum != &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; vh = rowCount * childHeight + (rowCount &amp;gt; &lt;span&gt;0&lt;/span&gt; ? rowCount - &lt;span&gt;1&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;) *&lt;span&gt; childVerticalSpace;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            setMeasuredDimension(vw, vh);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onLayout(boolean changed, &lt;span&gt;int&lt;/span&gt; l, &lt;span&gt;int&lt;/span&gt; t, &lt;span&gt;int&lt;/span&gt; r, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; left = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; top = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; getChildCount();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; count; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             View child =&lt;span&gt; getChildAt(i);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             left = (i % columnNum) * (childWidth +&lt;span&gt; childHorizontalSpace);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             top = (i / columnNum) * (childHeight +&lt;span&gt; childVerticalSpace);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             child.layout(left, top, left + childWidth, top +&lt;span&gt; childHeight);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在xml中引用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;&lt;span&gt;com.whoislcj.animation.GridImageViewGroup
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/image_layout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;             android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             android:layout_margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;             android:animateLayoutChanges=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;             lee:childHorizontalSpace=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;             lee:childVerticalSpace=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt;             lee:columnNum=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Activity中调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initViews() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         mImageViewGroup =&lt;span&gt; (GridImageViewGroup) findViewById(R.id.image_layout);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         ImageView imageView = &lt;span&gt;new&lt;/span&gt; ImageView(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        imageView.setImageResource(R.mipmap.add_image);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         imageView.setOnClickListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                addImageView();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        mImageViewGroup.addView(imageView);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addImageView() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         final ImageView imageView = &lt;span&gt;new&lt;/span&gt; ImageView(MainActivity4.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        imageView.setImageResource(R.mipmap.lottery);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         imageView.setOnClickListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View v) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                mImageViewGroup.removeView(imageView);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         mImageViewGroup.addView(imageView, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/950883/201608/950883-20160824151605823-1505116752.gif&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;585&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;布局动画产生的背景：&lt;/h3&gt;
&lt;p&gt;     凡事总要问个明白，为何要引入布局动画呢？其实通过上面的实现效果可以看出，在添加和删除图片时都显得很突兀，不知道该用什么语言形容了，总之就是感觉不舒服。其实我平时在开发中调用View.setVisibility()方法时也会有这种感受，这也是布局动画产生的一个背景吧。&lt;/p&gt;
&lt;h3&gt;布局动画：&lt;/h3&gt;
&lt;p&gt;   布局动画是指ViewGroup在布局时产生的动画效果 。实现布局动画有如下几种方式&lt;/p&gt;
&lt;h4&gt;第一种方式：在xml中，对ViewGrope设置&lt;code&gt;android:animateLayoutChanges=&quot;true&quot;&lt;/code&gt;属性：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;&lt;span&gt;com.whoislcj.animation.GridImageViewGroup
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/image_layout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;             android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             android:layout_margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;             android:animateLayoutChanges=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;             lee:childHorizontalSpace=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;             lee:childVerticalSpace=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt;             lee:columnNum=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就这么简单的一句话实现的效果就可以实现了，看看效果如何&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/950883/201608/950883-20160824153403261-1946525516.gif&quot; alt=&quot;&quot; width=&quot;284&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种方式虽然简单但是实现的布局动画比较单一，下面看第二种方式。&lt;/p&gt;
&lt;h4&gt;第二种方式：LayoutTransition实现&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; LayoutTransition mLayoutTransition = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LayoutTransition();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置每个动画持续的时间&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         mLayoutTransition.setStagger(LayoutTransition.CHANGE_APPEARING, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         mLayoutTransition.setStagger(LayoutTransition.CHANGE_DISAPPEARING, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         mLayoutTransition.setStagger(LayoutTransition.APPEARING, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         mLayoutTransition.setStagger(LayoutTransition.DISAPPEARING, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         PropertyValuesHolder appearingScaleX = PropertyValuesHolder.ofFloat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scaleX&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0.5f&lt;/span&gt;, &lt;span&gt;1.0f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         PropertyValuesHolder appearingScaleY = PropertyValuesHolder.ofFloat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scaleY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0.5f&lt;/span&gt;, &lt;span&gt;1.0f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         PropertyValuesHolder appearingAlpha = PropertyValuesHolder.ofFloat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alpha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 0f, 1f);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         ObjectAnimator mAnimatorAppearing = ObjectAnimator.ofPropertyValuesHolder(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, appearingAlpha, appearingScaleX, appearingScaleY);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为LayoutTransition设置动画及动画类型&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        mLayoutTransition.setAnimator(LayoutTransition.APPEARING, mAnimatorAppearing);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         PropertyValuesHolder disappearingAlpha = PropertyValuesHolder.ofFloat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alpha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 1f, 0f);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         PropertyValuesHolder disappearingRotationY = PropertyValuesHolder.ofFloat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rotationY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0.0f&lt;/span&gt;, &lt;span&gt;90.0f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         ObjectAnimator mAnimatorDisappearing = ObjectAnimator.ofPropertyValuesHolder(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, disappearingAlpha, disappearingRotationY);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为LayoutTransition设置动画及动画类型&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        mLayoutTransition.setAnimator(LayoutTransition.DISAPPEARING, mAnimatorDisappearing);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         ObjectAnimator mAnimatorChangeDisappearing = ObjectAnimator.ofFloat(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alpha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 1f, 0f);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为LayoutTransition设置动画及动画类型&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        mLayoutTransition.setAnimator(LayoutTransition.CHANGE_DISAPPEARING, mAnimatorChangeDisappearing);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         ObjectAnimator mAnimatorChangeAppearing = ObjectAnimator.ofFloat(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alpha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 1f, 0f);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为LayoutTransition设置动画及动画类型&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        mLayoutTransition.setAnimator(LayoutTransition.CHANGE_APPEARING, mAnimatorChangeAppearing);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为mImageViewGroup设置mLayoutTransition对象&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         mImageViewGroup.setLayoutTransition(mLayoutTransition);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面通过自定义LayoutTransition 修改系统提高的默认动画效果，如果不需要自定义的动画效果的话，不调用mLayoutTransition.setAnimator(LayoutTransition.DISAPPEARING, mAnimatorDisappearing);就行了。&lt;/p&gt;
&lt;p&gt;LayoutTransition 提供了以下几种过渡类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;APPEARING —— 元素在容器中显现时需要动画显示。&lt;/li&gt;
&lt;li&gt;CHANGE_APPEARING —— 由于容器中要显现一个新的元素，其它元素的变化需要动画显示。&lt;/li&gt;
&lt;li&gt;DISAPPEARING —— 元素在容器中消失时需要动画显示。&lt;/li&gt;
&lt;li&gt;CHANGE_DISAPPEARING —— 由于容器中某个元素要消失，其它元素的变化需要动画显示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看下修改过的动画效果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/950883/201608/950883-20160824162322589-166403964.gif&quot; alt=&quot;&quot; width=&quot;308&quot; height=&quot;548&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;第三种方式：通过设置LayoutAnimation来实现布局动画&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  AlphaAnimation alphaAnimation = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AlphaAnimation(0f, 1f);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         alphaAnimation.setDuration(&lt;span&gt;200&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         LayoutAnimationController animationController = &lt;span&gt;new&lt;/span&gt; LayoutAnimationController(alphaAnimation, &lt;span&gt;0.5f&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;        animationController.setOrder(LayoutAnimationController.ORDER_NORMAL);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         mImageViewGroup.setLayoutAnimation(animationController);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 显示顺序有以下几种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; ORDER_NORMAL;//顺序显示&lt;/li&gt;
&lt;li&gt; ORDER_REVERSE;//反显示&lt;/li&gt;
&lt;li&gt; ORDER_RANDOM//随机显示&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;也可以通过xml实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;&lt;span&gt;layoutAnimation
    xmlns:android&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:delay&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:animationOrder&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;normal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    android:animation&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@anim/alpha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ViewGroup xml添加android:layoutAnimation属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span&gt;com.whoislcj.animation.GridImageViewGroup
            android:id&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/image_layout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_width&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_margin&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            android:layoutAnimation&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@anim/layoutanimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            lee:childHorizontalSpace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            lee:childVerticalSpace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10dp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            lee:columnNum&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于这种方式采用的是补间动画，个人不再推荐使用这种方式，原因很简单实现的动画效果相对单一。&lt;/p&gt;
&lt;h3&gt;总结：&lt;/h3&gt;
&lt;p&gt;   本篇学习了布局动画，自此Android的动画学习也将告一段落了，接下来准备总结一下学习动画的过程中遇见的编程知识，比如链式编程，TreadLocal等。&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 05:57:00 +0000</pubDate>
<dc:creator>ganchuanpu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ganchuanpu/p/8985002.html</dc:identifier>
</item>
<item>
<title>白瑜庆：知乎基于Kubernetes的kafka平台的设计和实现 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8984966.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8984966.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文首发在云+社区，未经许可，不得转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;strong&gt;自我介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;我是知乎的技术中台工程师，现在是负责知乎的存储相关组件。我的分享主要基于三个，一个是简单介绍一下Kafka在知乎是的应用，另外一个是为什么做基于Kubernetes的Kafka平台，还有我们如何去实现了基于Kubernetes平台&lt;/p&gt;
&lt;h2&gt;Kafka在知乎的应用&lt;/h2&gt;
&lt;p&gt;Kafka一个是非常优秀的，消息或者是数据流的组件，在知乎承载了日志，数据收集，消息队列的服务日志，显而易见就包括业务，包括运行的DEBUG日志关键性日志。&lt;/p&gt;
&lt;p&gt;数据传输，比如我们在浏览知乎的时候，有些用户行为或者内容特征，通过我们这个平台做数据的流失处理。&lt;/p&gt;

&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/utwtsuohk2.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;另外一个是Kafka实现对消息服务。简单地，就是我关注的A用户，我是不是应该基于关注用户行为上做很多事情，这是一个消息队列的服务。我们那个平台现在是部署超过有40个Kafka集群，这些集群都是独立的。另外上面有超过一千个topic，我们的Broker数有超过有两千个Kafka。平台从上线到现在已经运行有两年了，承载的数据量都是百TB级的，我们现在这个设计是Kafka集群，我们要实现多集群。因为是对于公司内部的平台，我们要保证高可用，平台架构底层其实是广大Broker管理员，上层是抽象出来的。Kafka的集群对业务其实也无感，。另外就是一个管理平台管理，我创建topic，去创建分区，或者做故障处理。第一，上层只可能有管理平台和客户端是对R业务有感，客户端我们要对客户端进行收敛，有一个客户端是原生支持的——Java。不同客端会有不同的表现，现在我们需要去收敛这个词，&lt;/p&gt;
&lt;h2&gt;为什么采用Kubernetes？&lt;/h2&gt;
&lt;p&gt;因为我们遇到的问题在早期的时候，知乎的Kafka是一个单集群，在大家使用率不高，或者在数据量增长不爆炸的时候，单集群大家用得还OK时有天发现有一个Broker挂了，等到大家都挂了，这时候才发现其实是一条路是不可以常走的。因此我们觉得我们认为集群和大型社科系统单点，大家会依赖集权，不管任何的业务，我写日志也好，发消息也好，或者我去做数据传输也好，这是不可以的。对于Kafka来，我们有一个开发，有各国的Top的概念，其实发生到业务来，每个topic都代表了不同的一个业务的场景，我们觉得对业务场景在内部要做分级，比如我重要的数据，我要做分析，我们的业务与Kafka的深耦合。当我先做了规划，去梳理一下发现为什么我会这么多，它topic为什么集中挂掉之后有人还没事，还非常的愤怒，觉得简单就是天灾。&lt;/p&gt;
&lt;p&gt;那时候我们发现，其实我们的日志里面topic有很多类型，抽样出来，一种是日志，一种是数据和消息。数据，比如在做一个离线计算的时候，收集了用户数据或者我在APP里有埋点，这些数据可以通过开发管道或者spa或者我们的计算任务。另外一个是消息刚才也提到，比如我用户去做了一次关注或者点赞，触发后面一系列处理流程，很显然看出他们其实是有分级的。我们要把Kafka集群在内部要做成多集群的方式，然而根据我们套配合做出划分。&lt;/p&gt;

&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/uhowr61ecn.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;同类型的topic做不同集群的管理和配置。其实最简单的法是Kafka有分片，我们是做高可用，日志的分片可以少。消息容量是小的，对于数据大家都做，比如用Kafka做数据分析，肯定知道在离线技术，在数据分析时候看一下数据量是跟在线的时候应该是千倍万倍的这种关系，那就会出现一个问题——我们去规划一个设计就去实施的，最后结果我们的需求会变的非常多，比如一个A业务，我认为非常的重要，去做一个但是承载了一个，我每天有几百几十T的数据，那我是不是可以申请一个新的Broker。新的集群，别人不要跟我掺到一起，我提供的是基础数据，这样的话我们遇到问题是集群会越来越多，事实上现在很多已经是超过四十亿四十个了。服务器资源怎么去使用？因为早期部署的时候肯定单机部署，但又不是，比如我有一个普通的，比如我做了一个G，承载的数量有四个T，这样的话我部署一个消息任务是不是有点浪费？那不数数任务它是有点就太太小，其实我们提供一个提高资源利用率，希望从单机上部署更多的Broker，并且能够做到它们之间的相互的影响降到最低。实际上在我们实验实践中，磁盘其实是Kafka一个绕不开的问题。&lt;/p&gt;
&lt;p&gt;首先磁盘不可以做数据持久化，但是我们遇到了很多的问题，有量突增的或者流量大的时候，磁盘首先容量会有问题，比如我有申请了1T的磁盘，那可能我现在写一天给我写两天就已经写到了3T。&lt;/p&gt;
&lt;p&gt;另外一个问题就是磁盘的LUTOC其实IOPS过高这种问题出现的话，开发的性能是有很大的下降的。既然Broker可以做到多部署，那我们就在磁盘层面上做隔离，先在保证这种不要互相影响，就是比如数据和消息，Broker在磁盘这个层面要做好，做到互相不影响，因此我们想到的方法就是磁盘是不是可以分开，在物理层面就分开，并且开它本身又有副本。&lt;/p&gt;
&lt;p&gt;这种物理存在分开是可以接受的，而且如果出现故障，完全是在可控范围之内的，而是可期的。因此我觉得把分开，我们当时选服务器，正好黑石这边也提供了一种叫高性能的服务器，其实非常满足我们需求，它有12个高性能的磁盘，是单盘的，他不做瑞的，每个盘就是容量还不小。它的CPU和内存上面其实有优势的，因为Kafka是对内存是有要求的，比如走的文件缓存，内存是满足我需求的CPU，现在英特尔的CPU性能还蛮。我们就采用了黑色这款高性能服务器，现在我们的平台都主要部署在这种服务器。底层的服务器想好了，资源划分想好了，就是怎么去管理它？&lt;/p&gt;
&lt;p&gt;我们先讲一个有意思的，我们平台之前有一个开发的管理平台是自写自演的，实现了部署Broker，包括渲染配置，去做迁移的，这个平台比较私有，而且在运维上面或者管理上面不是很方便，而且观众很高兴来同事都要从代码层面学习，从那一套我们的平台学习影响，或者是有一个更好的方案来去解决。如果激情数增加到了保证的不可数增加，并且是服务器如果坏掉了，你看我们如何感染管理他，调度的时候我们如何去考虑到按照磁盘这个维度做调度。因此我们想到QQ那铁丝，因为之前我们有很多的一个在容器化方面的实践，早期在开发上QQ来此之前其实知乎在ks上部署了很多计算任务，在这上面有很多积累，所以我们想利用它的管理功能和容器的技术进行资源管理。另外一个是应用程序管理。&lt;/p&gt;
&lt;h2&gt;Kafka on Kubernetes&lt;/h2&gt;
&lt;p&gt;首先解决问题设计Kafka容器，无非就是四个问题——内存，CPU，网络和存储。另外一个问题是我们怎么实现具体调度Kafka容器。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/agxqiycw8m.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;首先是内存和CPU。其实CPU是比较难以预估的，因为根据咨询类型不同，对于内存和CPU消耗是不同的，Kafka本身是不强，依赖于CPU。但是在实际使用中还是有些问题的，比如咱们Kafka不是做批量，但很多时候有时候大家对它比较理解得透的时候，会把批量会得很小，比如我降低延迟，要保证每一条消息都确切的投放过去，把Brokers收得很小，这时候会造成一个什么问题？CPU会高，但是很这种问题我们可以通过调高CPU来解决。如果不出现这种大流量的话，一般内存是不会超过八个G的，而且一般使用会更低，所以我们的基准的容器会设置成8G根据实际使用时间长，经常会做调整，这个调整可以在IT市场很容易改。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/bthr6mv9cy.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;另外网络方面就是我们对外服务，采用的是一种独立的内网ip方式，比如我每一个Broker都有一个独立的ip，实际上因为我们的单机上会部署很多容器，所以每个都有IP，并且将这个ip注册在内网DNS上面，这样照好处是对于使用者来说，不需要知道具体容器的ip。这个是网络又有一个很好的方式——可以做单机的多ip网络设计，至少可以满足我们的需求，这是容器方面的设计。默认支持的磁盘的挂载方式是HostParh Volume，这种方式是最优的，因为Kafka在本地磁盘性能最好的，而且能够充分利用到本地的这种高效的文件缓存，我们本身的磁盘性能也是非常棒的，至少我可以满足我的需求。&lt;/p&gt;
&lt;p&gt;因此我们就应该是本地的目录一个cosplay，也就到K2起来之后是给他的，请求的配置挂载到服务器的磁盘，黑色框是我们的一个容器，开发目录指向的蓝色框是服务器上的一个磁盘或者服务器上的目录。虽然我们的集群看来就是这个样子的，每一个方块代表网上有很多的部署的Broker。业务上面可以反过来看，每个蓝色的地方代表Broker。&lt;/p&gt;

&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/49ch4slq7p.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;第一，CPU和内存并不是问题，网络其实已过测试过的，服务器网络是二世纪的20G带宽，每个盘我们经过测试，是有一点几个G性能，即便把每个盘所有人都跑满，其实这是灾难情况，他只有不会超过20个G，因此我们不在考虑范围之内，我们考虑的是磁盘的高可用目标，让单个集群的Broker在节点要尽量做到分散。&lt;/p&gt;
&lt;p&gt;第二是节点上的存储使用尽量均匀。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/cbha9yxmf0.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;算法是根据服务器磁盘状态计算分数，分数高者被调度。另外就是磁盘的使用情况，如果有更多的可用盘，我们倾向于把Broker挂在了上面。其实它用了一个简单的方式，假设创建一个红色集群，实际上A和C都可以，但C是最优的，因为C上面的Broker数比较少。如果要创建一个蓝色集群，那显然是A是最优的。另外，在实际使用情况下要更复杂，因为得考虑到分片的高可用。按照算法去实现会遇到了一个实际性的问题——用HostPat是有很大局限性，一致性不好，比如需要去管理要调度的节点，因为如果用class的话需要去注册一个本身选择的word，或者其实我是不知道被调到哪个节点上。另外主机上要去挂载的目录其实是没有人管理的。这是我们遇到的问题，当时我们希望是既要利用到HostPath，只有挂在本地的磁盘这种特性来提高我们的性能管理。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/nw67fe8bo7.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;而且我要能够选出合理节点，并且能够管理到这个存储。因此我们在当时对Kubernetes做改造，实现磁盘和调度器的算法，可以实现实时更新磁盘信息。但是实现方式是通过假设创建实例.&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/gqyac84x2r.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;本地磁盘管理&lt;/h2&gt;
&lt;p&gt;如果Broker已经在设备上建立起来，磁盘也被用了，那如何去管理它？事实上磁盘管理只能进入第三方的Agent。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/jh0beefld.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;故障处理和提升资源利用时会预留空间，比如为了快速处理故障不做签署，首先就是成本太高，现在做的是快速恢复，因此我们会预留1到2个盘，即快速处理盘，因此只要把软件指向这个容器，就可以马上启用，并且不会有太大的网络开销。另外就是在主机层面，即把分片在主机层面是做分开，做到高可用。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/048qwm4ch0.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;但我们遇到一个问题——需要把客户端统一，因为技术平台化。那如何把客户端做到统一？我们的看这里，客户端可以去读Consul信息，检查topic是不是有用。还有个好处是，如果做迁移的时候，因为事情使了很多方，生产和消费方式是很多的，而且一般流程是先于生产方，消费方就过来，大家可能有业务，可能大家如果按照这种注册方式的话，其实迁移过程是可以同步的。在这个地方更改信息，整个这个生产所生产的消费，都可以感受到，就是另外就是易用性会提高。且用这种方式有好处是有一个集群比如我整个集群全部断掉了，虽然事没发生过，但是作为一个备用的方式的话，我们会有一个灾备集群把所有的客户端都可以直接迁移过去。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1184429/dk0sh75w60.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;Q/A&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q: 你好，麻烦问一下,一个集群里面可能有很多topic，不同的用户消费topic的时候，用户之间是怎么隔离的？会不会消费到其他的topic数据？想问一下有没有什么隔离的好的办法？你一个集群里有多少套？集群里有多个topic，数据我就不想让别人看到吗？当然我如果提供一个客户端给他，他就能把所有的数据看得到，有没有什么好的办法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：其实是这样的，就是在我们的一个情况称，如果这个进群它有多少Broker，假如在这个会相互影响，我们还是建议把它不是相互影响，因为集群面不可能只给一个用户只提供一个集群，就是我们一个大的集群，会有很多用户在使用他的数据，都是不同的topic进来的吗？他消费的时候如果我没有隔离的话，我只要给他客户端，它所有的数据都看得到吗？只能通过我在前面去做提供什么API服务来这种方式，有没有？Kafka本身有没有什么好的办法去本身应该是有认证。&lt;/p&gt;

&lt;p&gt;了解更多详情，请戳下面的链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ask.qcloudimg.com/draft/1184429/vz545uds4s.pdf&quot; target=&quot;_blank&quot;&gt;知乎基于Kubernetes的Kafka平台的设计和实现.pdf&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.1933962264151&quot;&gt;
&lt;p&gt;问答&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/53848?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;apache kafka vs apache storm如何使用？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关阅读&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1114627?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;陈新宇：CKafka在人脸识别PASS中的应用&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1114658?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;杨原：腾讯云Kafka自动化运营实践&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1114675?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;饶军：Apache Kafka的过去，现在，和未来&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;58&quot;&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/developer/article/1114620?fromSource=waitui&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201803/1112679-20180330104936874-1573429539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 03 May 2018 05:49:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8984966.html</dc:identifier>
</item>
</channel>
</rss>