<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Nexus 私有仓库搭建与 Maven 集成 - RexFang</title>
<link>http://www.cnblogs.com/rexfang/p/7625696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rexfang/p/7625696.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/span&gt;作者：RexFang&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/span&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/rexfang/&quot;&gt;http://www.cnblogs.com/rexfang/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/span&gt;关于作者：Java 程序员一枚&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/span&gt;版权：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接。如有问题，可以邮件：fangruitao.work@foxmail.com&lt;/p&gt;
&lt;p&gt;　　Maven 是日常开发过程中，都会接触到的项目管理工具。Maven 可以将开发人员从繁杂的文档管理、项目打包等工作中解放出来，把更多的精力放在业务开发上。Maven 带来的便利这里就不多说了，但是只是单单使用 Maven，有时候也会遇到依赖文件无法下载的情况，原因有很多，有可能是中央仓库的问题，也有可能是网络问题等等；与此同时，有一部分的第三方的类库是没有发布到 Maven 上的，因此并没有 Maven 相关的依赖信息，这就给我们使用 Maven 构建项目带来了一定的麻烦。例如以下的这个例子，就是经常会遇到的问题。&lt;/p&gt;
&lt;p&gt;　　在最近的一个测试项目中，由于个人比较喜欢有条不紊，所以一直是使用 Maven 作为项目构建的工具，但是在构建 Hibernate 相关依赖的过程中，发现有一部分相关的 Jar 无法正常下载，中间也换过各种软件仓库，但是最后都是无法正常构建项目。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;hibernate-distribution&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.6.0.Beta2&amp;lt;/version&amp;gt;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004140612552-642493879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后，实在没辙了，想起了要搭建一个私有仓库。本文主要介绍 Nexus 私有仓库的搭建过程，以及 Nexus 与 Maven 的整合。本文使用的 Nexus 版本为 &lt;span&gt;Nexus Repository Manager OSS 2.14.5-02&lt;/span&gt; ，之所以不使用最新的 Nexus Repository Manager OSS 3 是因为个人感觉版本3还没有版本2友好，特别是在图形管理界面的操作上。&lt;/p&gt;
&lt;p&gt;　　首先需要到官网上下载 Nexus Repository Manager OSS 2.14.5-02 的安装包，下载地址为：&lt;a href=&quot;https://www.sonatype.com/download-oss-sonatype&quot; target=&quot;_blank&quot;&gt;https://www.sonatype.com/download-oss-sonatype&lt;/a&gt;，解压后的目录结构：&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004141457661-1155310082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在命令行窗口，进入 \nexus-2.14.5-02-bundle\nexus-2.14.5-02\bin 目录，输入 nexus install 命令，安装 Nexus（需要等待一小段时间）。安装成功后，进入服务管理界面，找到一个名为 nexus 的服务，启动该服务，服务启动完成后，打开浏览器，输入 &lt;a href=&quot;http://localhost:8081/nexus&quot; target=&quot;_blank&quot;&gt;http://localhost:8081/nexus&lt;/a&gt; ，如果可以看到欢迎界面，说明 Nexus 安装成功了。&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004142144411-163416823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　点击右上角的登录按钮，输入管理员账号和密码（&lt;span&gt;默认账号：admin，密码：admin123&lt;/span&gt;）登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004142447271-632585311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　登录成功后，选择左边 Views/Repositories 菜单下的 Repositories，可以看到一些预设的仓库，我们会用到的一般只有 Public Repositories 和 3rd party ， Public Repositories 为公共仓库，3rd party 为第三方仓库，可以上传第三方的 Jar （当然也可以是自己封装的 Jar）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004143416755-744156673.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Nexus 安装成功后，接下来需要修改 Maven 的配置文件（settings.xml），整合 Nexus。&lt;/p&gt;
&lt;p&gt;　　找到 &amp;lt;servers&amp;gt; 标签，添加 Nexus 默认认证信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
　　&amp;lt;server&amp;gt;    
      &amp;lt;id&amp;gt;my-nexus-releases&amp;lt;/id&amp;gt;    
      &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;    
      &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt;    
    &amp;lt;/server&amp;gt;    
    &amp;lt;server&amp;gt;    
      &amp;lt;id&amp;gt;my-nexus-snapshot&amp;lt;/id&amp;gt;    
      &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;    
      &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt;    
    &amp;lt;/server&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　找到 &amp;lt;mirrors&amp;gt; 标签，添加镜像：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;mirror&amp;gt;
      &amp;lt;!--This sends everything else to /public --&amp;gt;
      &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;
      &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
      &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/groups/public/&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　找到 &amp;lt;profiles&amp;gt; 标签，添加仓库信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;
      &amp;lt;!--Enable snapshots for the built in central repo to direct --&amp;gt;
      &amp;lt;!--all requests to nexus via the mirror --&amp;gt;
      &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
          &amp;lt;id&amp;gt;central&amp;lt;/id&amp;gt;
          &amp;lt;url&amp;gt;http://central&amp;lt;/url&amp;gt;
          &amp;lt;releases&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/releases&amp;gt;
          &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt;
        &amp;lt;/repository&amp;gt;
      &amp;lt;/repositories&amp;gt;
     &amp;lt;pluginRepositories&amp;gt;
        &amp;lt;pluginRepository&amp;gt;
          &amp;lt;id&amp;gt;central&amp;lt;/id&amp;gt;
          &amp;lt;url&amp;gt;http://central&amp;lt;/url&amp;gt;
          &amp;lt;releases&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/releases&amp;gt;
          &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt;
        &amp;lt;/pluginRepository&amp;gt;
      &amp;lt;/pluginRepositories&amp;gt;
    &amp;lt;/profile&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　激活仓库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
  &amp;lt;activeProfiles&amp;gt;
    &amp;lt;!--make the profile active all the time --&amp;gt;
    &amp;lt;activeProfile&amp;gt;nexus&amp;lt;/activeProfile&amp;gt;
  &amp;lt;/activeProfiles&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置完成后保存，并重启 nexus  服务。&lt;/p&gt;
&lt;p&gt;　　重启  nexus  服务 完成后，在命令行窗口进入一个使用 Maven 构建的项目，输入 mvn package clean 命令，清理完成后，登录 nexus 的 admin 账号可以看到 Public Repositories  下出现了一些 Jar 包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004144923755-1606974615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此时刷新之前报错的项目，发现 Maven 依赖仍然有问题，无法正常下载 jboss 的一个 Jar 包。这个时候我们可以利用我们刚刚搭建的 Nexus 私有仓库，在网上自己下载缺失的 Jar 包，然后以第三方 Jar 的形式上传到私有仓库，依赖信息可以设置跟中央仓库一样。例如添加 jbosscache-core-3.2.1.GA.jar ，在外网上的依赖为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.jboss.cache&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jbosscache-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.2.1.GA&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　选择 3rd party，把我们自己下载的  jbosscache-core-3.2.1.GA.jar 上传到 3rd party。在 Artifact Upload 选择卡页面，点击 Select Artifact(s) to Upload 按钮，选择需要上传的 Jar 包，选择完成后点击 Add Artifact 按钮。然后设置 Jar 的 Maven 依赖信息（后续引用 Jar 包需要用到），其中 Maven 依赖的相关信息可以设置成和中央仓库一致，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004145853224-244843569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004150426521-1458071237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004150606568-2117008784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004150648552-1614959229.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Jar 包上传成功后，切换到 Browse Index 选项卡页面，点击刷新按钮，可以看到我们刚刚上传的 Jar 包，选中 Jar 包我们可以在右边看到 Jar 包对应的 Maven 依赖信息，可以用于项目的构建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004150959365-1853229351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　进入本地仓库删除 \.m2\org\jboss\cache\jbosscache-core\3.2.1.GA 目录下的所有文件（&lt;span&gt;重要，否则会构建失败&lt;/span&gt;），此时，再次回到刚刚构建失败的项目，刷新 Maven，可以看到项目已经可以正常构建了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1129358/201710/1129358-20171004151330365-1658917141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此处，也提供一些常用的软件仓库：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://maven.aliyun.com/nexus/content/groups/public&quot; target=&quot;_blank&quot;&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/a&gt;（阿里云，推荐）&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://mvnrepository.com&quot; target=&quot;_blank&quot;&gt;http://mvnrepository.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://www.sonatype.org/nexus&quot; target=&quot;_blank&quot;&gt;http://www.sonatype.org/nexus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://repo1.maven.org/maven2&quot; target=&quot;_blank&quot;&gt;http://repo1.maven.org/maven2&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Wed, 04 Oct 2017 07:29:00 +0000</pubDate>
<dc:creator>RexFang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rexfang/p/7625696.html</dc:identifier>
</item>
<item>
<title>Spring Boot-------JPA——EntityManager构建通用DAO - 坚持到底gl</title>
<link>http://www.cnblogs.com/zhouguanglin/p/7625655.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouguanglin/p/7625655.html</guid>
<description>&lt;hr/&gt;
&lt;p&gt;　　EntityManager 是用来对实体Bean 进行操作的辅助类。他可以用来产生/删除持久化的实体Bean，通过主键查找实体bean，也可以通过EJB3 QL 语言查找满足条件的实体Bean。实体Bean 被EntityManager 管理时，EntityManager跟踪他的状态改变，在任何决定更新实体Bean 的时候便会把发生改变的值同步到数据库中。当实体Bean 从EntityManager 分离后，他是不受管理的，EntityManager 无法跟踪他的任何状态改变。EntityManager 的获取前面已经介绍过，可以通过@PersistenceContext 注释由EJB 容器动态注入。&lt;/p&gt;
&lt;h4&gt;　　Entitymanager的核心概念图&lt;/h4&gt;
&lt;p&gt;　　　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1190778/201710/1190778-20171004143209911-1516587547.jpg&quot; alt=&quot;&quot; width=&quot;718&quot; height=&quot;462&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;EntityManager构建通用DAO&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;一般的开发都是需要每一个实体类都要构建一个DAO去继承JPA的一些类，我不咋喜欢这样的感觉，我比较喜欢一个项目中简洁不乱，所有偷懒的写了一个四不像的通用DAO&lt;/p&gt;
&lt;p&gt;1、首先可以去官网看一下，了解一下entitymanager的一些方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;persist() :添加实体Bean&lt;/li&gt;
&lt;li&gt;flush() ：将实体的改变立刻刷新到数据库中&lt;/li&gt;
&lt;li&gt;merge () :比较麻烦，用好了很不错，配合flush&lt;/li&gt;
&lt;li&gt;Remove() :删除对象&lt;/li&gt;
&lt;li&gt;createQuery() ：返回Query对象,以执行JPQL语句&lt;/li&gt;
&lt;li&gt;createNativeQuery() ：返回Query对象,以执行SQL语句&lt;/li&gt;
&lt;li&gt;refresh() ：刷新实体Bean,以得到对新对象&lt;/li&gt;
&lt;li&gt;contains()： 检测实体当前是否被管理中&lt;/li&gt;
&lt;li&gt;clear() 分离所有当前正在被管理的实体&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、用@PersistenceContext动态注入Entitymanager&lt;/p&gt;
&lt;p&gt;先来一个BaseDAO &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; BaseAppDAO&amp;lt;T,ID &lt;span&gt;extends&lt;/span&gt; Serializable&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 保存数据对象
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; entity
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; save(T entity);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据id查询
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; t
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    T findByid(T t,Long id);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据表名，字段，参数查询，拼接sql语句
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  tablename 表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filed 字段名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; o 字段参数
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span&gt; findBysql(String tablename,String filed,Object o);
    Object findObjiectBysql(String tablename,String filed,Object o);

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 多个字段的查询
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tablename 表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; map 将你的字段传入map中
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;T&amp;gt; findByMoreFiled(String tablename,LinkedHashMap&amp;lt;String,Object&amp;gt;&lt;span&gt; map);

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 多字段查询分页
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tablename 表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; map 以map存储key,value
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; start 第几页
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageNumer 一个页面的条数
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;T&amp;gt; findByMoreFiledpages(String tablename, LinkedHashMap&amp;lt;String,Object&amp;gt; map, &lt;span&gt;int&lt;/span&gt; start, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageNumer);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 一个字段的分页
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  tablename 表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filed 字段名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; o 字段参数
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; start 第几页
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageNumer 一个页面多少条数据
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    List&lt;/span&gt;&amp;lt;T&amp;gt; findpages(String tablename,String filed,Object o,&lt;span&gt;int&lt;/span&gt; start,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageNumer);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据表的id删除数据
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt;  entity
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; delete(T entity);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 更新对象
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; e
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; update(T e);
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据传入的map遍历key,value拼接字符串，以id为条件更新
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tablename 表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; map 传入参数放入map中
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    Integer updateMoreFiled(String tablename,LinkedHashMap&lt;/span&gt;&amp;lt;String,Object&amp;gt;&lt;span&gt; map);


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据条件查询总条数返回object类型
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tablename  表名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; map 传入参数放入map中
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    Object findCount(String tablename, LinkedHashMap&lt;/span&gt;&amp;lt;String,Object&amp;gt;&lt;span&gt; map);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再写一个实现类BaseDAOimpl，其中注意的是@Transactional事务的注入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 坚持到底gl
 * @create 2017-09-26 10:36
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Repository
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BaseAppDAOimpl&amp;lt;T,ID &lt;span&gt;extends&lt;/span&gt; Serializable&amp;gt; &lt;span&gt;implements&lt;/span&gt; BaseAppDAO&amp;lt;T,ID&amp;gt;&lt;span&gt; {

    @PersistenceContext
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; EntityManager entityManager;
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; save(T entity){
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            entityManager.persist(entity);
            flag&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;---------------保存出错---------------&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object findByid(Object o,Long id) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entityManager.find(o.getClass(),id);
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt; findBysql(String tablename, String filed, Object o ) {
        String sql&lt;/span&gt;=&quot;from &quot;+tablename+&quot; u WHERE u.&quot;+filed+&quot;=?&quot;&lt;span&gt;;
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
        query.setParameter(&lt;/span&gt;1&lt;span&gt;,o);
        List&lt;/span&gt;&amp;lt;T&amp;gt; list=&lt;span&gt; query.getResultList();
        entityManager.close();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object findObjiectBysql(String tablename, String filed, Object o) {
        String sql&lt;/span&gt;=&quot;from &quot;+tablename+&quot; u WHERE u.&quot;+filed+&quot;=?&quot;&lt;span&gt;;
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
        query.setParameter(&lt;/span&gt;1&lt;span&gt;,o);

        entityManager.close();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; query.getSingleResult();
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; findByMoreFiled(String tablename,LinkedHashMap&amp;lt;String,Object&amp;gt;&lt;span&gt; map) {
        String sql&lt;/span&gt;=&quot;from &quot;+tablename+&quot; u WHERE &quot;&lt;span&gt;;
        Set&lt;/span&gt;&amp;lt;String&amp;gt; set=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        set&lt;/span&gt;=&lt;span&gt;map.keySet();
        List&lt;/span&gt;&amp;lt;String&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(set);
        List&lt;/span&gt;&amp;lt;Object&amp;gt; filedlist=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String filed:list){
            sql&lt;/span&gt;+=&quot;u.&quot;+filed+&quot;=? and &quot;&lt;span&gt;;
            filedlist.add(filed);
        }
        sql&lt;/span&gt;=sql.substring(0,sql.length()-4&lt;span&gt;);
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;filedlist.size();i++&lt;span&gt;){
            query.setParameter(i&lt;/span&gt;+1&lt;span&gt;,map.get(filedlist.get(i)));
        }
        List&lt;/span&gt;&amp;lt;T&amp;gt; listRe=&lt;span&gt; query.getResultList();
        entityManager.close();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; listRe;
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; findByMoreFiledpages(String tablename,LinkedHashMap&amp;lt;String,Object&amp;gt; map,&lt;span&gt;int&lt;/span&gt; start,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageNumber) {
        String sql&lt;/span&gt;=&quot;from &quot;+tablename+&quot; u WHERE &quot;&lt;span&gt;;
        Set&lt;/span&gt;&amp;lt;String&amp;gt; set=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        set&lt;/span&gt;=&lt;span&gt;map.keySet();
        List&lt;/span&gt;&amp;lt;String&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(set);
        List&lt;/span&gt;&amp;lt;Object&amp;gt; filedlist=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String filed:list){
            sql&lt;/span&gt;+=&quot;u.&quot;+filed+&quot;=? and &quot;&lt;span&gt;;
            filedlist.add(filed);
        }
        sql&lt;/span&gt;=sql.substring(0,sql.length()-4&lt;span&gt;);
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;filedlist.size();i++&lt;span&gt;){
            query.setParameter(i&lt;/span&gt;+1&lt;span&gt;,map.get(filedlist.get(i)));
        }
        query.setFirstResult((start&lt;/span&gt;-1)*&lt;span&gt;pageNumber);
        query.setMaxResults(pageNumber);
        List&lt;/span&gt;&amp;lt;T&amp;gt; listRe=&lt;span&gt; query.getResultList();
        entityManager.close();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; listRe;
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; findpages(String tablename, String filed, Object o, &lt;span&gt;int&lt;/span&gt; start, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageNumer) {
        String sql&lt;/span&gt;=&quot;from &quot;+tablename+&quot; u WHERE u.&quot;+filed+&quot;=?&quot;&lt;span&gt;;
        System.out.println(sql&lt;/span&gt;+&quot;--------page--sql语句-------------&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;T&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
            query.setParameter(&lt;/span&gt;1&lt;span&gt;,o);
            query.setFirstResult((start&lt;/span&gt;-1)*&lt;span&gt;pageNumer);
            query.setMaxResults(pageNumer);
            list&lt;/span&gt;=&lt;span&gt; query.getResultList();
            entityManager.close();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;------------分页错误---------------&quot;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; update(T entity) {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            entityManager.merge(entity);
            flag &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            System.out.println(&lt;/span&gt;&quot;---------------更新出错---------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
    }
    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Integer updateMoreFiled(String tablename, LinkedHashMap&amp;lt;String, Object&amp;gt;&lt;span&gt; map) {
        String sql&lt;/span&gt;=&quot;UPDATE &quot;+tablename+&quot; AS u SET &quot;&lt;span&gt;;
        Set&lt;/span&gt;&amp;lt;String&amp;gt; set=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        set&lt;/span&gt;=&lt;span&gt;map.keySet();
        List&lt;/span&gt;&amp;lt;String&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(set);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;list.size()-1;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (map.get(list.get(i)).getClass().getTypeName()==&quot;java.lang.String&quot;&lt;span&gt;){
                System.out.println(&lt;/span&gt;&quot;-*****&quot;+map.get(list.get(i))+&quot;------------&quot;+&lt;span&gt;list.get(i));
                sql&lt;/span&gt;+=&quot;u.&quot;+list.get(i)+&quot;='&quot;+map.get(list.get(i))+&quot;' , &quot;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                sql&lt;/span&gt;+=&quot;u.&quot;+list.get(i)+&quot;=&quot;+map.get(list.get(i))+&quot; , &quot;&lt;span&gt;;
            }
        }
        sql&lt;/span&gt;=sql.substring(0,sql.length()-2&lt;span&gt;);
        sql&lt;/span&gt;+=&quot;where u.id=? &quot;&lt;span&gt;;
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; resurlt=0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
            query.setParameter(&lt;/span&gt;1,map.get(&quot;id&quot;&lt;span&gt;));
            resurlt&lt;/span&gt;=&lt;span&gt; query.executeUpdate();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;更新出错-----------------------&quot;&lt;span&gt;);
            e.printStackTrace();

        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resurlt;
    }

    @Transactional
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; delete(T entity) {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            entityManager.remove(entityManager.merge(entity));
            flag&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;---------------删除出错---------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object findCount(String tablename, LinkedHashMap&amp;lt;String, Object&amp;gt;&lt;span&gt; map) {
        String sql&lt;/span&gt;=&quot;select count(u) from &quot;+tablename+&quot; u WHERE &quot;&lt;span&gt;;
        Set&lt;/span&gt;&amp;lt;String&amp;gt; set=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        set&lt;/span&gt;=&lt;span&gt;map.keySet();
        List&lt;/span&gt;&amp;lt;String&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(set);
        List&lt;/span&gt;&amp;lt;Object&amp;gt; filedlist=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String filed:list){
            sql&lt;/span&gt;+=&quot;u.&quot;+filed+&quot;=? and &quot;&lt;span&gt;;
            filedlist.add(filed);
        }
        sql&lt;/span&gt;=sql.substring(0,sql.length()-4&lt;span&gt;);
        System.out.println(sql&lt;/span&gt;+&quot;--------sql语句-------------&quot;&lt;span&gt;);
        Query query&lt;/span&gt;=&lt;span&gt;entityManager.createQuery(sql);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;filedlist.size();i++&lt;span&gt;){
            query.setParameter(i&lt;/span&gt;+1&lt;span&gt;,map.get(filedlist.get(i)));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; query.getSingleResult();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一套就可以完成一个项目的差不多增删改查了，需要其他特殊功能的可以自行添加&lt;/p&gt;
&lt;p&gt; &lt;br/&gt;        &lt;span&gt;   &lt;/span&gt; 【版本声明】本文为博主原创文章，转载请注明出处&lt;/p&gt;
</description>
<pubDate>Wed, 04 Oct 2017 07:02:00 +0000</pubDate>
<dc:creator>坚持到底gl</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouguanglin/p/7625655.html</dc:identifier>
</item>
<item>
<title>图论3——图的存储与基本性质 - frankchenfu</title>
<link>http://www.cnblogs.com/frankchenfu/p/7625393.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/frankchenfu/p/7625393.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;本文作者frankchenfu，blogs网址http://www.cnblogs.com/frankchenfu/，转载请保留此文字。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在数学上，图是表示物件与物件之间联系的数学对象；而在计算机中，每个物件可以抽象成一个节点，而关系就是一条边。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里主要介绍图的一些较关键的性质以及邻接矩阵、邻接表的应用。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、有向图和无向图&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;图分为&lt;strong&gt;有向图和无向图&lt;/strong&gt;。顾名思义，有向图就是每条边都具有方向，一条从$A$-&amp;gt;$B$的有向边它可以让一个东西从$A$走到$B$，却不能沿同一条边从$B$走回$A$；反之，无向图就是不具有方向的，既可以从$A$到$B$，也可以沿同一条边从$B$到$A$。一条边可能有一个权值，叫边权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1099135/201710/1099135-20171004113118286-2014763664.png&quot; alt=&quot;&quot; width=&quot;449&quot; height=&quot;226&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1099135/201710/1099135-20171004113126927-449018933.png&quot; alt=&quot;&quot; width=&quot;399&quot; height=&quot;213&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　有向图　　　　　　　　　　　　　　　　　　　　　　　　　　　　　无向图&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意到上面这一句话中，我强调了同一条边。这表明，一张图中可能会有重复的边，即起点和终点相同的边（在无向图中可能是起点终点位置调换的边），我们把这样的边成为&lt;strong&gt;重边&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果一张图中，有$n$个结点，同时还有着$n-1$条边，那么这张图事实上是一颗树。&lt;/p&gt;
&lt;p&gt;如果这张图中，从$A$一直沿着某些不重复的边走，然后能走回$A$，那么这张图中就存在着环。一张图中可能存在着很多个环，也可能一个都没有。例如，在上面的有向图中，不存在环，而在无向图中，结点$2,4,7$构成了一个环。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、图的存储&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;限于篇幅，这里仅介绍最常用的&lt;strong&gt;邻接矩阵和邻接表&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.1 邻接矩阵法&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 我们可以构造一个矩阵，矩阵的第$i$行第$j$列（即$g_{i,j}$）表示结点$i$和结点$j$的关系，而没有连边的两个节点，我们就设置为“假想无穷大”。例如，上面的有向图可以表示为（inf即“假想无穷大”）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1099135/201710/1099135-20171004123237099-1932783595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里为第$i$行第$j$列为1表示有连边。大家可以自行验证是否表示上述有向图。用代码表示就可以是 &lt;span class=&quot;cnblogs_code&quot;&gt;g[i][j]=&lt;span&gt;1&lt;/span&gt;;&lt;/span&gt; .无向图也可以类似的表示，注意，因为边是无向的，所以一旦第$i$行第$j$列有连边，那么第$j$行第$i$列也一定是有连边的。用代码表示即为 &lt;span class=&quot;cnblogs_code&quot;&gt;g[i][j]=g[j][i]=&lt;span&gt;1&lt;/span&gt;;&lt;/span&gt; 。那么邻接矩阵法就讲完了。可是，如果对于这样一个数据范围：&lt;/p&gt;
&lt;p&gt;对于$100$%的数据满足$n \le 10^6 , m \le 10^6$，其中$n$表示节点数，$m$表示边数。&lt;/p&gt;
&lt;p&gt;如果空间限制是标准的256MB或512MB，即使是1GB，存邻接矩阵也是不够的啊！邻接矩阵的二维数组的空间消耗是O($n^2$)的。注意到有很多无用的空间，也就是上面的inf，事实上比我们有用的空间还多（在浏览上面的表格时你有没有这么想呢？）。因为边的数量较小，于是我们考虑，能不能主要存边的信息，而尽量不存点呢？于是我们的邻接表就出来了。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.2 邻接表法&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;邻接表的思想就是存边的信息，而不是点的信息。&lt;/span&gt;我们给每一条边一个编号。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1099135/201710/1099135-20171004125650474-362102208.png&quot; alt=&quot;&quot; width=&quot;551&quot; height=&quot;295&quot;/&gt;&lt;/p&gt;
&lt;p&gt;仍然对于上面的有向图，我们邻接表里存的内容可以这么表示：（其中冒号前的数字表示表示这一条边的编号）&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1099135/201710/1099135-20171004130632990-1547344956.png&quot; alt=&quot;&quot; width=&quot;655&quot; height=&quot;472&quot;/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;邻接表存的就是这么一个东西。它首先每个节点都有存一个“从这条边出发的第一条边”，然后每一条边除了保存自身的信息（包括到哪里去，权值等）以外，还有指向下一条边的编号。这让我们想起了什么？对，链表！它每个节点内存的内容就很像链表，然后下一条边指向0就表示结束了，这个节点的边就遍历忘了。这样也是可以存储一个图的。这种方法的优点就是空间复杂度上的优势，它的空间复杂度（如果不考虑每个节点存的“第一条边”的话）是O($m$)的。那么对于上面的数据范围就可以很轻松的解决了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可是这种方法也有缺点，例如判断点之间是否联通，那么查找最坏情况下要O($m$)的复杂度，而邻接矩阵只需要O($1$)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来给出两种存图方法的Cpp代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#include&amp;lt;cstdio&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;cstring&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;邻接矩阵&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXN=&lt;span&gt;3010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; g[MAXN][MAXN];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;graph&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在一般情况下，u和v分别表示边的起点和终点，w表示权值&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; init()
{
    memset(g,&lt;/span&gt;&lt;span&gt;0x7f&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;(g));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;inf&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
        g[i][i]&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; adde(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w)
{
    g[u][v]&lt;/span&gt;=w;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有向&lt;/span&gt;
    g[u][v]=g[v][u]=w;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无向&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#include&amp;lt;cstdio&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;cstring&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;邻接表&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXN=&lt;span&gt;100010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXM=&lt;span&gt;200010&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意，无向图空间双倍!&lt;/span&gt;

&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; edge
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; to,w,nxt;
}e[MAXM];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fir[MAXN];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; n,m,tot=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; adde(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w)
{
    e[&lt;/span&gt;++tot].to=v;e[tot].w=&lt;span&gt;w;
    e[tot].nxt&lt;/span&gt;=&lt;span&gt;fir[u];
    fir[u]&lt;/span&gt;=&lt;span&gt;tot;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打一个广告，我自己的博客中还有使用邻接表储存的&lt;a href=&quot;http://www.cnblogs.com/frankchenfu/p/6368526.html&quot; target=&quot;_blank&quot;&gt;堆优化Dijkstra算法&lt;/a&gt;，有兴趣的同学可以浏览一下。限于水平，作者所写的难免有疏忽之处，望大家指正，Thanks！&lt;/p&gt;
</description>
<pubDate>Wed, 04 Oct 2017 05:32:00 +0000</pubDate>
<dc:creator>frankchenfu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/frankchenfu/p/7625393.html</dc:identifier>
</item>
<item>
<title>【Revit API】梁构件支座检查算法 - airforce094</title>
<link>http://www.cnblogs.com/lovecsharp094/p/7624208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovecsharp094/p/7624208.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;       &lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;应该是第二次写关于Revit API的博文了。虽然在BIM企业中工作，从事桌面BIM软件开发，但是我是不怎么喜欢写Revit API相关的代码。平时更多的是在写界面展示，架构维护，授权验证这块。为什么不喜欢Revit API呢？其实Autodesk封装的这套API是不错的（我在之后的工作中用起来挺舒服的），可能还是人比较懒吧，老查英文的API手册有点烦，而且这手册界面让我想起了上学时帮导师写ObjectARX的痛苦经历。。。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171003181519036-825594021.png&quot; alt=&quot;&quot; width=&quot;449&quot; height=&quot;285&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        吐槽完之后，开始上干货。为什么需要去判断梁构件是否有支座？原因有以下几个点：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        1. 提醒BIM建模设计师其设计的梁构件是否正确，说白点就是：你丫画对了没？！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            a. 如果有支座，支座与梁的位置是否符合图纸；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            b. 如果没支座，为什么？是画错了（画成虚接触）还是本身就没有支座；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        2. 如果梁有支座，OK！我根据平法规则自动分析节点并自动生成钢筋，完美；（这是后话，此篇不做节点分析与钢筋生成）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        开发这个功能还是想帮助建模人员去检查自己画的模型。中国之大，BIM建模人员参差不齐，一个人就一种画法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        本篇会以图文代码结合的方式叙述，保证初来认识Revit的朋友也能看得懂，也希望高手能提提改进建议。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;二、正文&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;       &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Revit 版本&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;2016，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;         主函数：IsBeamHasSeat(Element element)，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;         作用：判断梁构件是否有支座，适用于&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;直梁&lt;span&gt;与&lt;/span&gt;弧形梁&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;         &lt;strong&gt;&lt;span&gt;思路&lt;/span&gt;&lt;/strong&gt;：因为梁有支座的话肯定要有2个构件作为其支座，不然就翘脚了。counter就是计数器，如果到2了，就不用执行了，返回true即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;         说明：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                 1. 相交构件的函数GetJointElements是自己封装的，各位可根据实际自己编写，不暴露了。&lt;strong&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/strong&gt;就是获取该梁周围一定范围内的所有构件；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                 2. IsStructrualColumn()，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;IsStructrualBeam()也是自己封装的，比较简单，不暴露了。&lt;strong&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/strong&gt;就是要求作为梁支座的柱与梁是结构型构件，墙不用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                 3. &lt;span&gt;IsCoulmnBeSeatForBeam()，&lt;span&gt;IsWallBeSeatForBeam&lt;/span&gt;()，&lt;span&gt;IsBeamBeSeatForBeam&lt;/span&gt;() 这三个函数是&lt;strong&gt;&lt;span&gt;核心&lt;/span&gt;&lt;/strong&gt;，下面会慢慢展开讲。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsBeamHasSeat(Element element)&lt;br/&gt;{
   &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; counter = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取相交构件&lt;/span&gt;
   &lt;span&gt;var&lt;/span&gt; jointElements =&lt;span&gt; BaseGeomUtils.GetJointElements(element);
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jointElements != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; jointElements.Any())
   {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查柱的                &lt;/span&gt;
      &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; column &lt;span&gt;in&lt;/span&gt;&lt;span&gt; jointElements)
      {

         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (column.IsStructuralColumn() &amp;amp;&amp;amp;&lt;span&gt; IsCoulmnBeSeatForBeam(element, column))
         {
             counter&lt;/span&gt;++&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (counter == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
         {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
         }
      }


       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查墙的&lt;/span&gt;
       &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; wall &lt;span&gt;in&lt;/span&gt;&lt;span&gt; jointElements)
       {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (IsWallBeSeatForBeam(element, wall))
          {
              counter&lt;/span&gt;++&lt;span&gt;;
          }
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (counter == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
          {
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
          }
       }


       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查梁的&lt;/span&gt;
       &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; beam &lt;span&gt;in&lt;/span&gt;&lt;span&gt; jointElements)
       {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (beam.IsStructuralBeam() &amp;amp;&amp;amp;&lt;span&gt; IsBeamBeSeatForBeam(element, beam))
           {
               counter&lt;/span&gt;++&lt;span&gt;;
           }
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (counter == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
           {
               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
           }
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;            &lt;strong&gt;&lt;span&gt;A.&lt;/span&gt;&lt;/strong&gt; 判断柱构件是否为当前梁的支座&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            这时候要上图了，方便理解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;第1个&lt;/strong&gt;&lt;span&gt;大条件&lt;/span&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171003194907755-2098130171.png&quot; alt=&quot;&quot; width=&quot;786&quot; height=&quot;486&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;               &lt;span&gt;如果不符合这个条件，说明梁与柱可能是侧面相交的关系：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171003200403349-1570348852.png&quot; alt=&quot;&quot; width=&quot;807&quot; height=&quot;229&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsCoulmnBeSeatForBeam(Element currentBeam, Element jointColumn)
{
     &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
     {
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; minArea = &lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columnBottomFace =&lt;span&gt; FaceUtils.GetBottomFace(jointColumn, minArea);
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamBottomFace =&lt;span&gt; FaceUtils.GetBottomFace(currentBeam, minArea);
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;柱的下底面低于梁的下底面&lt;/span&gt;
         &lt;span&gt;bool&lt;/span&gt; isLower = columnBottomFace.Origin.Z &amp;lt;&lt;span&gt; beamBottomFace.Origin.Z;

         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取Location和LocationCurve&lt;/span&gt;
         &lt;span&gt;var&lt;/span&gt; columnLocation = jointColumn.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationPoint;
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLocationCurve = currentBeam.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationCurve;
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (columnLocation != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; beamLocationCurve != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
         {
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.Column的Location在Beam的Location下面
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.Column的LocationPoint能映射到Beam的下底面
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.Beam中有点可以投影到Column的下底面&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt; (beamBottomFace.Project(columnLocation.Point) != &lt;span&gt;null&lt;/span&gt; ||&lt;span&gt;
                  beamLocationCurve.Curve.Tessellate().Any(x &lt;/span&gt;=&amp;gt; columnBottomFace.Project(x) != &lt;span&gt;null&lt;/span&gt;
                  &amp;amp;&amp;amp;&lt;span&gt; isLower))
              {
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
              }

              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;侧面关系&lt;/span&gt;
              &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
              {
                  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bc =&lt;span&gt; beamLocationCurve.Curve;
                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取构件侧面（除去Z方向上下两个面） &lt;/span&gt;
                  &lt;span&gt;var&lt;/span&gt; columnFaces =&lt;span&gt; FaceUtils.GetSideFaces(jointColumn);
                  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamFaces =&lt;span&gt; FaceUtils.GetSideFaces(currentBeam);
                  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; line = bc &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Line;
                  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (line != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                  {
                      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLine =&lt;span&gt; line.Direction;
                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁两端的面&lt;/span&gt;
                      &lt;span&gt;var&lt;/span&gt; terminalFaces =&lt;span&gt;
                          beamFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine) ||&lt;span&gt;
                                               (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-&lt;span&gt;beamLine));
                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断梁的两端面与支座梁的侧面有没有相交&lt;/span&gt;
                      &lt;span&gt;if&lt;/span&gt; (columnFaces.Any(fc =&amp;gt; terminalFaces.Any(tf =&amp;gt; tf.Intersect(fc) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting)))
                      {
                         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                      }

                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有相交则继续
                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到梁与柱相交面&lt;/span&gt;
                      &lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                                    columnFaces.Where(
                                    x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-beamLine) ||&lt;span&gt;
                                         (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine));

                      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = line.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = line.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁的端点能否投影到柱的相交面上&lt;/span&gt;
                      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchedItem.Any())
                      {
                          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canProject = matchedItem.Any(face =&amp;gt; face.Project(sp) != &lt;span&gt;null&lt;/span&gt; || face.Project(ep) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (canProject &amp;amp;&amp;amp;&lt;span&gt; isLower)
                          {
                               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                          }
                      }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (bc &lt;span&gt;is&lt;/span&gt;&lt;span&gt; Arc)
                {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = bc.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = bc.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; points = bc.Tessellate().Where(x =&amp;gt; !x.IsAlmostEqualTo(sp) &amp;amp;&amp;amp; !&lt;span&gt;x.IsAlmostEqualTo(ep));
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeSp =&lt;span&gt; points.FirstOrDefault();
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeEp =&lt;span&gt; points.LastOrDefault();
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentSp = closeSp -&lt;span&gt; sp;
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentEp = closeEp -&lt;span&gt; ep;

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到梁与柱相交面&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                                columnFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁的端点能否投影到柱的相交面上&lt;/span&gt;
                            &lt;span&gt;if&lt;/span&gt; (matchedItem.Any() &amp;amp;&amp;amp;&lt;span&gt; isLower)
                            {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isInsect = columnFaces.Any(fc =&amp;gt; beamFaces.Any(x =&amp;gt; x.Intersect(fc) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting));
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canProject = matchedItem.Any(face =&amp;gt; face.Project(sp) != &lt;span&gt;null&lt;/span&gt; || face.Project(ep) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((isInsect || canProject) &amp;amp;&amp;amp;&lt;span&gt; isLower)
                                {
                                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                                }
                            }
                    }
               }
          }
      }
      &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
      {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
      }

   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;              B.&lt;/span&gt;&lt;/strong&gt; 判断墙构件是否为当前梁的支座&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              墙的判断与柱类似，但是墙没有LocationPoint，但有LocationCurve，所以是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171003201452802-152067923.png&quot; alt=&quot;&quot; width=&quot;860&quot; height=&quot;530&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsWallBeSeatForBeam(Element currentBeam, Element jointWall)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jointWall &lt;span&gt;is&lt;/span&gt;&lt;span&gt; Wall)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentWall = jointWall &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Wall;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; minArea = &lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; wallBottomFace =&lt;span&gt; FaceUtils.GetBottomFace(currentWall, minArea);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamBottomFace =&lt;span&gt; FaceUtils.GetBottomFace(currentBeam, minArea);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;墙的下底面低于梁的下底面&lt;/span&gt;
                    &lt;span&gt;bool&lt;/span&gt; isLower = wallBottomFace.Origin.Z &amp;lt;&lt;span&gt; beamBottomFace.Origin.Z;


                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取LocationCurve&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; wallLocationCurve = currentWall.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationCurve;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLocationCurve = currentBeam.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationCurve;

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (wallLocationCurve != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; beamLocationCurve != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.Wall的Location在Beam的Location下面
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.Wall中有点可以投影到Beam的下底面
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.Beam中有点可以投影到Wall的下底面&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt; (wallLocationCurve.Curve.Tessellate().Any(pt =&amp;gt; beamBottomFace.Project(pt) != &lt;span&gt;null&lt;/span&gt; ||&lt;span&gt;
                            beamLocationCurve.Curve.Tessellate().Any(x &lt;/span&gt;=&amp;gt; wallBottomFace.Project(x) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; isLower)))
                        {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        }

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;侧面关系&lt;/span&gt;
                        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bc =&lt;span&gt; beamLocationCurve.Curve;
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; wallFaces =&lt;span&gt; FaceUtils.GetSideFaces(currentWall);
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamFaces =&lt;span&gt; FaceUtils.GetSideFaces(currentBeam);
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; line = bc &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Line;
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (line != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                            {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLine =&lt;span&gt; line.Direction;

                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁两端的面&lt;/span&gt;
                                &lt;span&gt;var&lt;/span&gt; terminalFaces =&lt;span&gt;
                                    beamFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine) ||&lt;span&gt;
                                                             (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-&lt;span&gt;beamLine));
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断梁的两端面与支座梁的侧面有没有相交&lt;/span&gt;
                                &lt;span&gt;if&lt;/span&gt; (wallFaces.Any(fc =&amp;gt; terminalFaces.Any(tf =&amp;gt; tf.Intersect(fc) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting)))
                                {
                                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                                }

                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有相交则继续
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到梁与墙相交面&lt;/span&gt;
                                &lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                                    wallFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-beamLine) ||&lt;span&gt;
                                                   (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine));

                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = line.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = line.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁的端点能否投影到墙的相交面上&lt;/span&gt;
                                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchedItem.Any())
                                {
                                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canProject = matchedItem.Any(face =&amp;gt; face.Project(sp) != &lt;span&gt;null&lt;/span&gt; || face.Project(ep) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (canProject &amp;amp;&amp;amp;&lt;span&gt; isLower)
                                    {
                                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                                    }
                                }
                            }
                            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (bc &lt;span&gt;is&lt;/span&gt;&lt;span&gt; Arc)
                            {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = bc.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = bc.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; points = bc.Tessellate().Where(x =&amp;gt; !x.IsAlmostEqualTo(sp) &amp;amp;&amp;amp; !&lt;span&gt;x.IsAlmostEqualTo(ep));
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeSp =&lt;span&gt; points.FirstOrDefault();
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeEp =&lt;span&gt; points.LastOrDefault();
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentSp = closeSp -&lt;span&gt; sp;
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentEp = closeEp -&lt;span&gt; ep;
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到梁与墙相交面&lt;/span&gt;
                                &lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                                wallFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));


                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁的端点能否投影到墙的相交面上&lt;/span&gt;
                                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchedItem.Any())
                                {
                                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isInsect = wallFaces.Any(fc =&amp;gt; beamFaces.Any(x =&amp;gt; x.Intersect(fc) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting));
                                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canProject = matchedItem.Any(face =&amp;gt; face.Project(sp) != &lt;span&gt;null&lt;/span&gt; || face.Project(ep) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((isInsect || canProject) &amp;amp;&amp;amp;&lt;span&gt; isLower)
                                    {
                                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;             &lt;span&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;.&lt;/span&gt;&lt;/strong&gt; 判断梁构件是否为当前梁的支座，这块是最最最烦的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;             为什么？因为：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171004123747255-1721348056.png&quot; alt=&quot;&quot; width=&quot;869&quot; height=&quot;326&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;         &lt;span&gt;下面是梁作为另一个梁的支座的完整思路：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171004125538083-2056251175.png&quot; alt=&quot;&quot; width=&quot;771&quot; height=&quot;239&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       如果两个构件不是上下关系，那就要检查侧面相交关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       我这里使用了若干个条件：conditionOne &amp;amp;&amp;amp; (conditionTwo || conditionThree || conditionSp)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/943487/201710/943487-20171004132340740-646514596.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsBeamBeSeatForBeam(Element currentBeam, Element jointBeam)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLocationCurve = currentBeam.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationCurve;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; seatBeamLocationCurve = jointBeam.Location &lt;span&gt;as&lt;/span&gt;&lt;span&gt; LocationCurve;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamFaces =&lt;span&gt; FaceUtils.GetSideFaces(currentBeam);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; seatBeamFaces =&lt;span&gt; FaceUtils.GetSideFaces(jointBeam);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; seatBeamBottomFace =&lt;span&gt; FaceUtils.GetBottomFace(jointBeam);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (beamLocationCurve != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; seatBeamLocationCurve != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bc =&lt;span&gt; beamLocationCurve.Curve;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bc &lt;span&gt;is&lt;/span&gt;&lt;span&gt; Line)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamLine = (bc &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Line).Direction;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = bc.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = bc.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                            seatBeamFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-beamLine) ||&lt;span&gt;
                                               (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine) ||&lt;span&gt;
                                               (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(beamLine) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                               (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-beamLine) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchedItem.Any())
                        {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支座梁在主体梁的下方&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; canBeamCurvePointProjectToSeatBeamBottomFace =&lt;span&gt;
                                bc.Tessellate().Any(x &lt;/span&gt;=&amp;gt; seatBeamBottomFace.Project(x) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (canBeamCurvePointProjectToSeatBeamBottomFace)
                            {
                                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                            }
                        }

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支座梁在主体梁的侧面
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取梁的两端的面&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; terminalFaces =&lt;span&gt;
                            beamFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine) ||&lt;span&gt;
                                                     (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-&lt;span&gt;beamLine));

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (terminalFaces.Count() != &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
                        {
                            terminalFaces &lt;/span&gt;=&lt;span&gt; beamFaces;
                        }

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断梁的两端面与支座梁的侧面有没有相交&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; BeamHasSeatWithBeam(terminalFaces, seatBeamFaces, beamLine, matchedItem, sp, ep);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result)
                        {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (bc &lt;span&gt;is&lt;/span&gt;&lt;span&gt; Arc)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sp = bc.GetEndPoint(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ep = bc.GetEndPoint(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; points = bc.Tessellate().Where(x =&amp;gt; !x.IsAlmostEqualTo(sp) &amp;amp;&amp;amp; !&lt;span&gt;x.IsAlmostEqualTo(ep));
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeSp =&lt;span&gt; points.FirstOrDefault();
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; closeEp =&lt;span&gt; points.LastOrDefault();
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentSp = closeSp -&lt;span&gt; sp;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tangentEp = closeEp -&lt;span&gt; ep;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; matchedItem =&lt;span&gt;
                            seatBeamFaces.Where(x &lt;/span&gt;=&amp;gt; (x &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                            (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentSp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                            (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(-tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                            (x &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().AngleTo(tangentEp) &amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));


                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchedItem.Any())
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isInsect = seatBeamFaces.Any(fc =&amp;gt; beamFaces.Any(x =&amp;gt; x.Intersect(fc) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting));

                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canProject = matchedItem.Any(face =&amp;gt; face.Project(sp) != &lt;span&gt;null&lt;/span&gt; || face.Project(ep) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isInsect ||&lt;span&gt; canProject)
                            {
                                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                            }
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; BeamHasSeatWithBeam(IEnumerable&amp;lt;Face&amp;gt; terminalFaces, IEnumerable&amp;lt;Face&amp;gt; seatBeamFaces, XYZ beamLine, &lt;br/&gt;IEnumerable&amp;lt;Face&amp;gt;&lt;span&gt; seatBeamSpecialFaces, XYZ startpoint, XYZ endpoint)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁任意端点能投影到支座梁的对迎面&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; conditionSp = seatBeamSpecialFaces.Any() &amp;amp;&amp;amp;&lt;span&gt;
                              seatBeamSpecialFaces.Any(x &lt;/span&gt;=&amp;gt; x.Project(startpoint) != &lt;span&gt;null&lt;/span&gt; || x.Project(endpoint) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

            
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; tf &lt;span&gt;in&lt;/span&gt;&lt;span&gt; terminalFaces)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; fc &lt;span&gt;in&lt;/span&gt;&lt;span&gt; seatBeamFaces)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支座梁的Face生成Solid&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; seatBeamCl = (fc &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).GetEdgesAsCurveLoops().ToList();
                    Solid seatBeamTempSolid &lt;/span&gt;=&lt;span&gt; GeometryCreationUtilities.CreateExtrusionGeometry(seatBeamCl,
                                      fc.ComputeNormal(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UV().Negate()),
                                      UnitUtils.ConvertToInternalUnits(&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;, DisplayUnitType.DUT_MILLIMETERS));
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; seatBeamDestFaces = (&lt;span&gt;from&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; f &lt;span&gt;in&lt;/span&gt; seatBeamTempSolid.Faces &lt;span&gt;where&lt;/span&gt; (f &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(beamLine) || &lt;br/&gt;(f &lt;span&gt;as&lt;/span&gt; PlanarFace).SafelyFaceNormal().IsAlmostEqualTo(-beamLine) || &lt;br/&gt;(f &lt;span&gt;as&lt;/span&gt; PlanarFace).Project(startpoint) != &lt;span&gt;null&lt;/span&gt; || &lt;br/&gt;(f &lt;span&gt;as&lt;/span&gt; PlanarFace).Project(endpoint) != &lt;span&gt;null&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; f &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).ToList();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;seatBeamDestFaces.Any())
                    {
                        seatBeamDestFaces &lt;/span&gt;= (&lt;span&gt;from&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; f &lt;span&gt;in&lt;/span&gt; seatBeamTempSolid.Faces &lt;span&gt;select&lt;/span&gt; f &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).ToList();
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁的Face生成Solid&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; beamCL = (tf &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).GetEdgesAsCurveLoops().ToList();
                    Solid beamTempSolid &lt;/span&gt;=&lt;span&gt; GeometryCreationUtilities.CreateExtrusionGeometry(beamCL,
                                          tf.ComputeNormal(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UV().Negate()),
                                          UnitUtils.ConvertToInternalUnits(&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;, DisplayUnitType.DUT_MILLIMETERS));
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beamDestFaces = (&lt;span&gt;from&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; f &lt;span&gt;in&lt;/span&gt; beamTempSolid.Faces &lt;span&gt;select&lt;/span&gt; f &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).ToList();


                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;梁与支座梁有相交&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; conditionOne = seatBeamDestFaces.Any(x=&amp;gt; tf.Intersect(x) == FaceIntersectionFaceResult.Intersecting ||&lt;span&gt;
                                       x.Project(startpoint) &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; || x.Project(endpoint) != &lt;span&gt;null&lt;/span&gt;) ||&lt;span&gt;
                                       seatBeamDestFaces.Any(x&lt;/span&gt;=&amp;gt; beamDestFaces.Any(y=&amp;gt;y.Intersect(x) ==&lt;span&gt; FaceIntersectionFaceResult.Intersecting));

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fc1 = (tf &lt;span&gt;as&lt;/span&gt;&lt;span&gt; PlanarFace).SafelyFaceNormal();
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; conditionTwo = seatBeamDestFaces.Any(x=&amp;gt; fc1.IsAlmostEqualTo(x.SafelyFaceNormal()) ||&lt;span&gt; 
                                                                 fc1.IsAlmostEqualTo(&lt;/span&gt;-&lt;span&gt;x.SafelyFaceNormal()));
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; conditionThree = seatBeamDestFaces.Any(x =&amp;gt;&lt;span&gt;
                                         fc1.AngleTo(x.SafelyFaceNormal()) &lt;/span&gt;&amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;) ||&lt;span&gt;
                                         fc1.AngleTo(x.SafelyFaceNormal()) &lt;/span&gt;&amp;lt; UnitConverter.AngleToRad(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (conditionOne &amp;amp;&amp;amp; (conditionTwo || conditionThree ||&lt;span&gt; conditionSp))
                    {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    }                                  
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;代码中有一些自己封装的函数，比如求构件所有底面，求构件所有侧面，比较简单，这里就不暴露了。本篇主要以思路为主，掌握了思路代码也就清晰了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;三、结尾&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt; &lt;span&gt;&lt;span&gt;本文只是个抛砖引玉，改造的空间是非常大的，我这里只判断true，false。还可以输出梁的支座构件做进一步分析。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;        算法本身还可以改进，在Revit模型中扣减是一个大难题，如何应对复杂扣减情况下的梁支座判断是非常必要的，特别是判断梁作为另一个梁的支座时尤其小心，很容易就因为梁上面的一块板导致梁与梁之间的扣减关系变复杂从而导致IsBeamBeSeatForBeam()适应性变低。最好的解决方式是先检查构件之间的扣减关系是否正确（扣减部分一直是Revit二次开发的难点），修正之后再调用上述函数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;    对算法有建议或者意见的欢迎在评论区留言！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;《原创，转载请注明来源》&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Oct 2017 05:30:00 +0000</pubDate>
<dc:creator>airforce094</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovecsharp094/p/7624208.html</dc:identifier>
</item>
<item>
<title>用canvas给自己的博客园加背景（二） - dkplus</title>
<link>http://www.cnblogs.com/dkplus/p/7625511.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dkplus/p/7625511.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;前一篇大概介绍了canvas绘图的一些基础API，本文来介绍动画的部分，canvas最关键的函数是&lt;code&gt;requestAnimationFrame(callback)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;本文面向canvas入门人员，写的如有纰漏请指出，不喜勿喷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;requestanimationframecallback&quot;&gt;requestAnimationFrame(callback)&lt;/h2&gt;
&lt;p&gt;这是一个用于制作逐帧动画的函数，在它出现之前，我们的动画基本用setTimeout或者setInterval制作。&lt;/p&gt;
&lt;p&gt;我们可以尝试声明一个animate函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//这个函数会在控制台无限输出&quot;dkplus-canvas&quot;&lt;/span&gt;
(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;dkplus-canvas&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时打开控制台看一下效果。&lt;/p&gt;
&lt;p&gt;可以看到animate()里面的操作在无限执行，而我们用canvas绘制动画也可以选择这样的思路，无限刷新画布，无限绘制画布。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//在同一个坐标无限循环画一个圆&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//重新定义开始坐标，试着注释掉这一行看看效果有何不同&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这段代码画出来的圆和只画一次的圆是有区别的，明显很多个圆叠加在一起了。&lt;/p&gt;
&lt;p&gt;我们试着改一改代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//初始化坐标&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//重新定义开始坐标，试着注释掉这一行看看效果有何不同&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//动态修改坐标&lt;/span&gt;
    x &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;刷新画布&quot;&gt;刷新画布&lt;/h2&gt;
&lt;p&gt;可以看到，这个图确实是动起来了，但是前面的图像没有被清除，而是简单的图像覆盖。所以我们要在每次绘图之前先清楚画布，使用clearRect()这个函数（可以说是canvas的橡皮擦）。&lt;/p&gt;
&lt;p&gt;和fillRect()，strokeRect()参数一样，clearRect(x坐标,y坐标,宽度,高度)：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//这是我们加入的橡皮擦函数&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerHeight)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;保存打开浏览器，效果确实不一样了，看到的是一个圆圈在运动。&lt;/p&gt;
&lt;h2 id=&quot;反弹条件&quot;&gt;反弹条件&lt;/h2&gt;
&lt;p&gt;但是这个圆圈只会斜向下走，我们得做一些判断，让它反弹回来。比如说当圆心+半径超出浏览器边界时，我们把&lt;code&gt;x+=1&lt;/code&gt;变为&lt;code&gt;x+= -1&lt;/code&gt;。这里的1其实代表着速度，我们可以把速度储存到一个变量里，方便修改。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//我把参数都设为变量&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerHeight)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//当触及边界时进行反弹&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;innerWidth &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (y&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;innerHeight &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    x &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然都设了变量，为何不让变量变起来呢？设为随机数可好？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//半径暂且不设随机，以后有用&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerHeight&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
})()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;面向对象&quot;&gt;面向对象&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本人对面向对象这块不太熟，可能说的不太好请见谅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好，现在我们声明一个function为Circle，假装我们有一个Circle类，把这些变量传进去，同时把我们刚才用于绘图的、用于刷新的代码都填进去。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerHeight&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//这是一个Circle对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;radius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;raidus&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; radius&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//这是绘制方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//这是刷新方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;innerWidth &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (y&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;innerHeight &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;radius&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        x &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        y &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//每刷新一次重新绘图&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//new一个Circle对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;radius)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerHeight)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//对象c调用刷新方法&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;多圆&quot;&gt;多圆&lt;/h2&gt;
&lt;p&gt;现在我们已经实现了一个圆在画布上的弹跳，那么我们要怎么实现很多圆弹跳呢？&lt;/p&gt;
&lt;p&gt;我们可以用for循环，循环随机参数，循环制造圆，循环刷新不同的圆。那么我们先引进一个圆的数组，一切都是为了方便操作：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//圆的数组&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; cirleArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//循环制造不同的圆，放进数组&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;innerHeight&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;cirleArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;radius))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerWidth&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;innerHeight)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//循环刷新不同的圆&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cirleArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        cirleArray[i].&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这篇就介绍到这里，大家有兴趣可以试试，下一篇我们讲怎么用canvas进行交互。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Oct 2017 05:11:00 +0000</pubDate>
<dc:creator>dkplus</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dkplus/p/7625511.html</dc:identifier>
</item>
<item>
<title>matplotlib学习之绘图基础 - Jasonhaven.D</title>
<link>http://www.cnblogs.com/jasonhaven/p/7625396.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jasonhaven/p/7625396.html</guid>
<description>&lt;h3&gt;&lt;span&gt;matplotlib基础概念：&lt;a href=&quot;http://www.cnblogs.com/jasonhaven/p/7609059.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/jasonhaven/p/7609059.html&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;matplotlib颜色样式学习：&lt;a href=&quot;http://www.cnblogs.com/jasonhaven/p/7625436.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/jasonhaven/p/7625436.html&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;h3&gt;1.基本图形&lt;/h3&gt;
&lt;p&gt;散点图：显示两组数据的值，每个点的坐标位置由变量的值决定，头一组不连续的点完成，用于观察两种变量的相关性。&lt;/p&gt;
&lt;p&gt;折线图：用直线段将各种数据连接起来组成的图形，常用来观察数据随时间变化的趋势。&lt;/p&gt;
&lt;p&gt;条形图：以长方形的长度为变量的统计图表，用来比较多个项目分类的数据大小，通常利用较小的数据集分析。&lt;/p&gt;
&lt;p&gt;直方图：由一系列高度不等的纵向条形组成，表示数据分析的情况。&lt;/p&gt;
&lt;p&gt;饼图：饼状图显示一个数据系列中各项的大小与各项占总和的比例。&lt;/p&gt;
&lt;p&gt;箱线图：箱线图又称为盒装图，盒式图或者箱形图，是一种用作显示数据分散情况的统计图。&lt;/p&gt;
&lt;p&gt;其中条形图与直方图的区别是：&lt;/p&gt;
&lt;p&gt;首先,条形图是用条形的长度表示各类别频数的多少,其宽度（表示类别）则是固定的，直方图是用面积表示各组频数的多少,矩形的高度表示每一组的频数或频率,宽度则表示各组的组距,因此其高度与宽度均有意义&lt;/p&gt;
&lt;p&gt;其次,由于分组数据具有连续性,直方图的各矩形通常是连续排列,而条形图则是分开排列&lt;/p&gt;
&lt;p&gt;最后,条形图主要用于展示分类数据,而直方图则主要用于展示数据型数据&lt;/p&gt;

&lt;h3&gt;2.基础任务&lt;/h3&gt;
&lt;p&gt;a.绘制股票跌涨前一天和今天是否有相关性的散点图，并设置散点图的常用属性&lt;/p&gt;
&lt;p&gt;b.绘制股票开盘价和最高价前一天和今天是否有相关性的散点图，并设置散点图的常用属性&lt;/p&gt;
&lt;p&gt;c.绘制折线图，并设置属性&lt;/p&gt;
&lt;p&gt;d.绘制条形图，并设置属性&lt;/p&gt;
&lt;p&gt;e.绘制直方图，并设置属性&lt;/p&gt;
&lt;p&gt;f.绘制饼图，并设置属性&lt;/p&gt;
&lt;p&gt;g.绘制箱线图，并设置属性&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;2.操作文件（000001.csv）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_81320b18-3ec3-41c5-97d5-8ab7a826cde5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View csv source&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;3.测试代码&lt;/h3&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_4c79c01a-59aa-4646-bcd8-7b9bc05113a8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_93bb73b2-153c-4f60-870d-ef2886dd2ca8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_1cafbb85-6e60-4636-994e-891a921d40d1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_7152a5a7-f5dc-4bcd-8273-9022e7fcf39e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;e&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_67fad13f-980b-4bbb-a490-039e78ecc5a6&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;f&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_aaf297f3-b30b-448b-b9b9-91835c361764&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;g&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_7e7c7230-8d9c-4f9b-9709-b89061c6dbc4&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt; 4.相关链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://matplotlib.org/api/markers_api.html?highlight=marker#module-matplotlib.markers&quot; target=&quot;_blank&quot;&gt;marker属性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://matplotlib.org/contents.html&quot; target=&quot;_blank&quot;&gt;matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/&quot; target=&quot;_blank&quot;&gt;numpy&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt; 5.部分结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004104831911-738290157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004104855693-64301292.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004104925677-280838413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004104941240-1317923509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004105322630-451641942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004110055708-1275396337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201240/201710/1201240-20171004110759458-585408653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 04 Oct 2017 03:10:00 +0000</pubDate>
<dc:creator>Jasonhaven.D</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jasonhaven/p/7625396.html</dc:identifier>
</item>
<item>
<title>翻译：MLAPP（2.2节 概率论简要回顾） - 天文-HITer</title>
<link>http://www.cnblogs.com/jtianwen2014/p/7624376.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jtianwen2014/p/7624376.html</guid>
<description>&lt;blockquote readability=&quot;6.3727598566308&quot;&gt;
&lt;p&gt;笔者：尝试翻译MLAPP（Machine Learning: a Probabilistic Perspective）一书，供机器学习的学者参考，如有错误理解之处请指出，不胜感激！（如需转载，请联系本人：&lt;a href=&quot;https://home.cnblogs.com/u/jtianwen2014/&quot;&gt;jtianwen2014&lt;/a&gt;，并注明&lt;a href=&quot;http://www.cnblogs.com/jtianwen2014/&quot;&gt;出处&lt;/a&gt;，本书翻译在&lt;a href=&quot;https://www.gitbook.com/book/twjiang/mlapp/details&quot;&gt;GitBook&lt;/a&gt;上同步更新）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171003201959505-1191554107.jpg&quot;/&gt;&lt;br/&gt;----------------------------------------------------分页线-------------------------------------------------------------&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171003202003990-1405274461.jpg&quot;/&gt;&lt;br/&gt;----------------------------------------------------分页线-------------------------------------------------------------&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171003202008380-716033535.jpg&quot;/&gt;&lt;br/&gt;----------------------------------------------------分页线-------------------------------------------------------------&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171003202012224-102355228.jpg&quot;/&gt;&lt;br/&gt;----------------------------------------------------分页线-------------------------------------------------------------&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171003202018193-463930826.jpg&quot;/&gt;&lt;br/&gt;----------------------------------------------------分页线-------------------------------------------------------------&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/706575/201710/706575-20171004090451990-1058923775.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Oct 2017 00:52:00 +0000</pubDate>
<dc:creator>天文-HITer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jtianwen2014/p/7624376.html</dc:identifier>
</item>
<item>
<title>创建 Rex-Ray volume - 每天5分钟玩转 Docker 容器技术（76） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7624556.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7624556.html</guid>
<description>&lt;p&gt;&lt;span&gt;前面我们安装部署了 Rex-Ray，并且成功配置 VirtualBox backend，今天演示如何创建和使用 Rex-Ray volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在 docker1 或 docker2 上执行如下命令创建 volume：&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker volume create --driver rexray --name=mysqldata --opt=size=2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036469334041299.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036843090029709.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;volume&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;创建成功，大小为 2GB。在 VirtualBox 宿主机中也能看到&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036463011008098.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036843608084568.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为 VirtualBox 使用的是 thin-provisioning，volume 初始分配的空间很小。&lt;/p&gt;
&lt;p&gt;接下来我们将：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在 dokcer1 上启动 MySQL 容器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;，并使用&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;作为数据卷。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更新数据库，然后销毁&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在 dokcer2 上启动 MySQL 容器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker2&lt;/span&gt;&lt;/code&gt;，也使用&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;作为数据卷，然后验证数据的有效性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;创建容器并使用数据卷&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在 dokcer1 上执行如下命令，启动 MySQL 容器：&lt;br/&gt;&lt;span&gt;docker run --name mydb_on_docker1 -v mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=passw0rd -d mysql&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;-v mysqldata:/var/lib/mysql&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;将之前创建的 volume mount 到 MySQL 的数据目录。&lt;/p&gt;
&lt;p&gt;我们接下来从更底层分析一下这个 mount 是如何实现的。&lt;/p&gt;
&lt;p&gt;首先在 VirtualBox 中查看虚拟机 docker1 的 storage 配置：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036454345044417.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036843789002920.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Rex-Ray volume&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;已经挂载到 docker1。&lt;/p&gt;
&lt;p&gt;执行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker volume inspect mysqldata&lt;/span&gt;&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036459685030149.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036844079040077.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;已被 mount 到 docker1 目录&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;/var/lib/libstorage/volumes/mysqldata/data&lt;/span&gt;&lt;/code&gt;，执行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker inspect mydb_on_docker1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;查看容器的 volume 信息：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036459950004523.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036844340022346.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;/var/lib/libstorage/volumes/mysqldata/data&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;被 mount 到了容器的目录&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;/var/lib/mysql&lt;/span&gt;&lt;/code&gt;，这样 Rex-Ray volume&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;就已经 mount 到了容器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036466697049603.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036844704038586.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span&gt;&lt;strong&gt;更新数据库&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;按照如下步骤更新 MySQL 数据：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036469670005578.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036845032097540.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 进入容器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;② 登录数据库，输入容器启动时由环境变量&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;指定的密码。&lt;/p&gt;
&lt;p&gt;③ 切换到数据库&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;④ 创建数据库表&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;my_id&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;⑤ 插入一条数据。&lt;/p&gt;
&lt;p&gt;⑥ 确认数据已经写入。&lt;/p&gt;
&lt;p&gt;执行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker rm -f mydb_on_docker1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;删除容器。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在容器已经被销毁了，下一节我们将在 docker2 上创建新容器并重新使用 volume &lt;span&gt;mysqldata&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170926-1506393629819061392.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171003-1507036845472040533.jpg&quot; alt=&quot;二维码+指纹.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Oct 2017 23:54:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7624556.html</dc:identifier>
</item>
<item>
<title>Springboot 学习笔记 ① - ~阿坨坨</title>
<link>http://www.cnblogs.com/atuotuo/p/7624818.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/atuotuo/p/7624818.html</guid>
<description>&lt;p&gt;&lt;span&gt;之前一直在寻找Springboot的学习资料，终于得偿所愿。。。那么，先给自己定一个小目标 - 能够使用Springboot这套架构来搭建自己的服务。&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;1. 开发环境&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;开发环境其实还是因人而异的（官方的说法是Java7以上，推荐Java8；貌似也可以用Java6）。lz这里的平台为Windows，Jdk版本为1.8，maven版本为3.39。具体信息可以看下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003224936286-1590691388.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;2. 为maven配置aliyun镜像仓库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;由于众所周知的原因，我们访问maven官方的网站的时候，速度没有辣么“给力”，所以通过aliyun的镜像仓库来“加速”。具体的配置方法也很简单，就是在&quot;.m2&quot;目录下的“setting.xml”文件中加入如下配置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirrors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirror&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus-aliyun&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirrorOf&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirrorOf&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Nexus aliyun&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   &lt;br/&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirror&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirrors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3. IDE&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我这里使用的是STS，版本为： 3.8.4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003230018193-1123399368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;好了，前面啰嗦了一大堆，终于进入正题啦。。。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; 1. 新建一个spring start project &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003230330927-709376191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 2. 选择建立一个Web项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003230729583-1733207390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;选择完成后，点击“finish”按钮，之后STS就会开始下载项目依赖的项目；待所有东西就绪之后，我们可以看到项目的结构如图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003231108083-201249527.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3. 编写controller类，处理Http request&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.HelloSpringBoot.Controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloSpringBootController {

    @RequestMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello spring boot!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;@RestController - 该注解表示类 “&lt;/span&gt;HelloSpringBootController”是一个web controller，它用来处理web request
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;@RequestMapping(&quot;/hello&quot;&lt;span&gt;) - 该注解表明请求的相对路径为 “/hello”&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;至此，我们的编码工作已经完成。&lt;/p&gt;

&lt;h2&gt;4. 启动Springboot项目&lt;/h2&gt;
&lt;p&gt;选中默认生成的文件“HelloSpringBootApplication.java” -&amp;gt; 右键 -&amp;gt; &quot;run as spring boot app&quot;&lt;/p&gt;
&lt;p&gt;启动后，我们会在console里面看到如下输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.7.RELEASE)

2017-10-03 23:28:58.291  INFO 9436 --- [           main] c.e.H.HelloSpringBootApplication         : Starting HelloSpringBootApplication on Tuo-PC with PID 9436 (E:\sts-bundle\sts-3.8.4.RELEASE\workspace_springboot\HelloSpringBoot\target\classes started by Tuo in E:\sts-bundle\sts-3.8.4.RELEASE\workspace_springboot\HelloSpringBoot)
2017-10-03 23:28:58.298  INFO 9436 --- [           main] c.e.H.HelloSpringBootApplication         : No active profile set, falling back to default profiles: default
2017-10-03 23:28:58.483  INFO 9436 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@351d0846: startup date [Tue Oct 03 23:28:58 CST 2017]; root of context hierarchy
2017-10-03 23:29:01.261  INFO 9436 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)
2017-10-03 23:29:01.298  INFO 9436 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2017-10-03 23:29:01.303  INFO 9436 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.20
2017-10-03 23:29:01.696  INFO 9436 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2017-10-03 23:29:01.696  INFO 9436 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3219 ms
2017-10-03 23:29:02.216  INFO 9436 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: 'dispatcherServlet' to [/]
2017-10-03 23:29:02.227  INFO 9436 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'characterEncodingFilter' to: [/*]
2017-10-03 23:29:02.230  INFO 9436 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2017-10-03 23:29:02.231  INFO 9436 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'httpPutFormContentFilter' to: [/*]
2017-10-03 23:29:02.231  INFO 9436 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'requestContextFilter' to: [/*]
2017-10-03 23:29:02.968  INFO 9436 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@351d0846: startup date [Tue Oct 03 23:28:58 CST 2017]; root of context hierarchy
2017-10-03 23:29:03.114  INFO 9436 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/hello]}&quot; onto public java.lang.String com.example.HelloSpringBoot.Controller.HelloSpringBootController.hello()
2017-10-03 23:29:03.122  INFO 9436 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error]}&quot; onto public org.springframework.http.ResponseEntity&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.util.Map&lt;/span&gt;&lt;span&gt;&amp;lt;java.lang.String, java.lang.Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2017-10-03 23:29:03.123  INFO 9436 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error],produces=[text/html]}&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2017-10-03 23:29:03.182  INFO 9436 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-10-03 23:29:03.182  INFO 9436 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-10-03 23:29:03.260  INFO 9436 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-10-03 23:29:03.628  INFO 9436 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-10-03 23:29:03.832  INFO 9436 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)
2017-10-03 23:29:03.842  INFO 9436 --- [           main] c.e.H.HelloSpringBootApplication         : Started HelloSpringBootApplication in 6.118 seconds (JVM running for 7.13)
2017-10-03 23:29:27.484  INFO 9436 --- [nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'
2017-10-03 23:29:27.484  INFO 9436 --- [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2017-10-03 23:29:27.515  INFO 9436 --- [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 31 ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;通过输出的内容，我们可以看到Springboot程序已经成功启动！&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;5. 通过浏览器，发送web request，验证程序。&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/396477/201710/396477-20171003233430443-1627092595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;OK，我们的第一个基于Springboot的测试程序就大功告成啦，感谢大家的观看，祝大家国庆快乐！！  &lt;/span&gt;&lt;span&gt;^_^&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Oct 2017 15:37:00 +0000</pubDate>
<dc:creator>~阿坨坨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/atuotuo/p/7624818.html</dc:identifier>
</item>
<item>
<title>机器学习数学基础之矩阵理论（二） - tanv</title>
<link>http://www.cnblogs.com/tan-v/p/7624779.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tan-v/p/7624779.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;　　       目录&lt;/p&gt;
&lt;p&gt;一、线性空间&lt;/p&gt;
&lt;p&gt;1.    线性空间的概念&lt;/p&gt;
&lt;p&gt;（1） 线性空间的定义&lt;/p&gt;
&lt;p&gt;（2） 线性空间的本质&lt;/p&gt;
&lt;p&gt;2.    线性空间的基&lt;/p&gt;
&lt;p&gt;（1） 线性表示&lt;/p&gt;
&lt;p&gt;（2） 线性相关&lt;/p&gt;
&lt;p&gt;（3） 线性无关&lt;/p&gt;
&lt;p&gt;（4） 线性空间基的定义&lt;/p&gt;
&lt;p&gt;（5） 坐标&lt;/p&gt;
&lt;p&gt;3.   线性空间的范数&lt;/p&gt;
&lt;p&gt;（1） 范数的定义&lt;/p&gt;
&lt;p&gt;（2） 赋范线性空间中的距离&lt;/p&gt;
&lt;p&gt;（3） 欧几里得范数&lt;/p&gt;
&lt;p&gt;（4） Lp范数&lt;/p&gt;
&lt;p&gt;（5） Frobenius范数，矩阵中常用的范数&lt;/p&gt;
&lt;p&gt;二、  矩阵分解&lt;/p&gt;
&lt;p&gt;1.   方阵的正交分解&lt;/p&gt;
&lt;p&gt;（1） 特征值和特征向量的定义&lt;/p&gt;
&lt;p&gt;（2） 特征值：&lt;/p&gt;
&lt;p&gt;（3） 特征向量：&lt;/p&gt;
&lt;p&gt;（4） 矩阵分解&lt;/p&gt;
&lt;p&gt;（5） 特征向量与其特征值之间的关系&lt;/p&gt;
&lt;p&gt;2.   正交分解&lt;/p&gt;
&lt;p&gt;（1） 正交矩阵&lt;/p&gt;
&lt;p&gt;（2）  标准正交基&lt;/p&gt;
&lt;p&gt;（3）  正交矩阵的性质&lt;/p&gt;
&lt;p&gt;（4）  正交分解&lt;/p&gt;
&lt;p&gt;3.   矩阵的奇异值分解(SVD)&lt;/p&gt;
&lt;p&gt;（1） 非退化方阵的SVD&lt;/p&gt;
&lt;p&gt;（2） 一般矩阵的SVD&lt;/p&gt;
&lt;p&gt;（3） 伪逆(Moor-Penrose)&lt;/p&gt;
&lt;p&gt;（4） 不相容线性方程组的解&lt;/p&gt;
&lt;p&gt;（5）  定理&lt;/p&gt;
&lt;p&gt;4.   主成分分析(PCA)&lt;/p&gt;

&lt;p&gt;一、线性空间&lt;/p&gt;
&lt;p&gt;1. 线性空间的概念&lt;/p&gt;
&lt;p&gt;（1）  线性空间的定义&lt;/p&gt;
&lt;p&gt;　　设V是一个非空集合，R为实数域。如果对于任意两个元素 𝛼，𝛽∈𝑉，总有唯一的元素 𝛾∈𝑉与之对应，成为 𝛼和𝛽的和（和的运算法则可以任意定义），记为 𝛾=𝛼+𝛽；&lt;/p&gt;
&lt;p&gt;　　又对于任一实数λ∈𝑅和任一元素𝛼∈𝑉，总有唯一的元素𝛿∈𝑉与之对应，称为λ与𝛼的积（积的运算法则可以任意定义），记作 𝛿=λ𝛼；&lt;/p&gt;
&lt;p&gt;　　并且这两种运算满足以下八条规：&lt;/p&gt;
&lt;p&gt;　　（设𝛼，𝛽，𝛾∈𝑉，λ，𝜇∈𝑅）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（i）&lt;/strong&gt; &lt;strong&gt; 𝛼&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛽&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝛽&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（ii）&lt;/strong&gt; &lt;strong&gt;(𝛼&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛽)&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛾&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;+(&lt;/strong&gt;&lt;strong&gt;𝛽&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛾)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（iii）&lt;/strong&gt; &lt;strong&gt;在&lt;/strong&gt;&lt;strong&gt;V&lt;/strong&gt;&lt;strong&gt;中存在零元素&lt;/strong&gt;&lt;strong&gt;𝜃&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑉&lt;/strong&gt;&lt;strong&gt;，对任意的&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑉&lt;/strong&gt;&lt;strong&gt;，都有&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝜃&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（&lt;/strong&gt;&lt;strong&gt;iv&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;strong&gt;对于任何的&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑉&lt;/strong&gt;&lt;strong&gt;，都有&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;的负元素&lt;/strong&gt;&lt;strong&gt;𝛿&lt;/strong&gt;&lt;strong&gt;，使得&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛿&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝜃&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（&lt;/strong&gt;&lt;strong&gt;v&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt; &lt;strong&gt; 1&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（&lt;/strong&gt;&lt;strong&gt;vi&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;𝜇𝛼)&lt;/strong&gt;&lt;strong&gt;=(&lt;/strong&gt;&lt;strong&gt;λμ&lt;/strong&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（&lt;/strong&gt;&lt;strong&gt;vii&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt; &lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝜇)𝛼&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;λα&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝜇𝛼&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（&lt;/strong&gt;&lt;strong&gt;viii&lt;/strong&gt;&lt;strong&gt;）λ&lt;/strong&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝛽)&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;λα&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;strong&gt;𝛽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　那么，集合V就称为（实数域上的）线性空间或向量。&lt;/p&gt;
&lt;p&gt;　　满足上述八条性质的加法和数乘运算叫做线性运算。&lt;/p&gt;
&lt;p&gt;（2） 线性空间的本质：&lt;/p&gt;
&lt;p&gt;　　在数学上其实就是一个集合，线性集合，只要满足&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　对于任意的&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;strong&gt;𝛽&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑉&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝜇&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑅&lt;/strong&gt;&lt;strong&gt;，都有λα&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝜇𝛽&lt;/strong&gt;&lt;strong&gt;∈&lt;/strong&gt;&lt;strong&gt;𝑉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &lt;/strong&gt; 　即，加法和数乘都是封闭的，都称为线性空间&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 线性空间的基&lt;/p&gt;
&lt;p&gt;（1） 线性表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt; ，&lt;strong&gt;𝛽&lt;/strong&gt;∈𝑉，若存在一组实数&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;∈𝑅，满足&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;⋯&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;=&lt;strong&gt;𝛽&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;　　则称&lt;strong&gt;𝛽&lt;/strong&gt;可以由&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;线性表示。&lt;/p&gt;
&lt;p&gt;（2） 线性相关&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;∈𝑉，若存在一组不全为0的实数&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;，满足&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;⋯&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;=&lt;strong&gt;0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　则&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;线性相关。&lt;/p&gt;
&lt;p&gt;　　诠释：&lt;/p&gt;
&lt;p&gt;　　　　1）线性相关，说明至少存在一个向量可以被其余的向量线性表示。&lt;/p&gt;
&lt;p&gt;　　　　2）使用线性方程组来说明，就是至少有一个方程是无用的，即至少有一个向量是废的，无用的。&lt;/p&gt;
&lt;p&gt;（3）  线性无关&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;∈𝑉，若满足&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;⋯&lt;/strong&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;=&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;且必有&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝑘&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;strong&gt;𝑘&lt;sub&gt;𝑛&lt;/sub&gt;=0&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　则&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;线性无关。&lt;/p&gt;
&lt;p&gt;　　诠释：&lt;/p&gt;
&lt;p&gt;　　　　1）方程组中每一个方程都是有用的，都是方程组的本质。&lt;/p&gt;
&lt;p&gt;（4） 线性空间基的定义&lt;/p&gt;
&lt;p&gt;　　在线性空间V中，如果存在n个元素&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;，满足：&lt;/p&gt;
&lt;p&gt;　　（i） &lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;线性无关&lt;/p&gt;
&lt;p&gt;　　（ii） V中任一元素𝛼都可以由&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;线性表示&lt;/p&gt;
&lt;p&gt;　　　　  那么，&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;称为线性空间V的一个基，n（基的个数）称为线性空间V的维数。&lt;/p&gt;
&lt;p&gt;　　　　 空间V称为由基&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;张成的线性空间，记作V =span{&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;}。&lt;/p&gt;
&lt;p&gt;　　1)   本质&lt;/p&gt;
&lt;p&gt;　　　　基的本质就是指基是本质的、消不掉的、基础的东西，可以由此刻画出线性空间中其他所有元素，研究线性空间，研究构成这线性空间的基就可以了。&lt;/p&gt;
&lt;p&gt;　　2)   基的性质&lt;/p&gt;
&lt;p&gt;　　　　线性空间V中的任意元素x，都可以由该线性空间的基线性表示：&lt;/p&gt;
&lt;p&gt;　　　　V = { x|x=𝑐&lt;sub&gt;1&lt;/sub&gt;𝛼&lt;sub&gt;1&lt;/sub&gt;+𝑐&lt;sub&gt;2&lt;/sub&gt;𝛼&lt;sub&gt;2&lt;/sub&gt;+⋯+𝑐&lt;sub&gt;𝑛&lt;/sub&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt; }，𝑐&lt;sub&gt;𝑖&lt;/sub&gt;为任意实数，𝑖=1,2,…,𝑛&lt;/p&gt;
&lt;p&gt;（5）  坐标&lt;/p&gt;
&lt;p&gt;　　1）定义&lt;/p&gt;
&lt;p&gt;　　　 若V是一个线性空间，{&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;}是线性空间V的一组基，对于𝛼∈𝑉，如果有 𝛼=𝑥&lt;sub&gt;1&lt;/sub&gt;𝛼&lt;sub&gt;1&lt;/sub&gt;+𝑥&lt;sub&gt;2&lt;/sub&gt;𝛼&lt;sub&gt;2&lt;/sub&gt;+⋯+𝑥&lt;sub&gt;𝑛&lt;/sub&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;，那么由系数所构成的 n维实向量(𝑥&lt;sub&gt;1&lt;/sub&gt;,𝑥&lt;sub&gt;2&lt;/sub&gt;,…,𝑥&lt;sub&gt;𝑛&lt;/sub&gt;)称为𝛼在基{&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;/strong&gt;&lt;strong&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;𝛼&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/strong&gt;}下的　　　　&lt;/p&gt;
&lt;p&gt;　　　坐标。因此，线性空间的元素也称为向量，线性空间也称为向量空间。&lt;/p&gt;
&lt;p&gt;　　2）本质&lt;/p&gt;
&lt;p&gt;　　　在基下的坐标，也就解释了为什么使用坐标可以表示空间中任意一个元素了，如二维坐标中，使用坐标(x,y)可以表示二维空间中任意一个数值。&lt;/p&gt;
&lt;p&gt; 3. 线性空间的范数&lt;/p&gt;
&lt;p&gt;　　范数也称为模&lt;/p&gt;
&lt;p&gt;（1）范数的定义&lt;/p&gt;
&lt;p&gt;　　在线性空间V中定义一种运算||.||:𝑉→𝑹，对于任意的𝛼,𝛽∈𝑉，𝜆∈𝑅，满足如下性质：&lt;/p&gt;
&lt;p&gt;　　（i） || 𝛼||≥ 0，即若 ||𝛼|| = 0 等价于 𝛼 = &lt;strong&gt;𝜃&lt;/strong&gt;（零向量）&lt;/p&gt;
&lt;p&gt;　　（ii） 膨胀性：||𝜆𝛼|| = ||𝜆|| ||𝛼||&lt;/p&gt;
&lt;p&gt;　　（iii） 三角不等式： ||𝛼+𝛽|| ≤ ||𝛼|| + ||𝛽||&lt;/p&gt;
&lt;p&gt;　　则称||.||这种运算为线性空间V的一个范数，称V为赋范线性空间。&lt;/p&gt;
&lt;p&gt;（2）赋范线性空间中的距离&lt;/p&gt;
&lt;p&gt;　　赋范线性空间中的元素𝛼,𝛽∈𝑉，定义||𝛼−𝛽||为𝛼,𝛽之间的距离。（即长度，也在这个线性空间中）&lt;/p&gt;
&lt;p&gt;（3）欧几里得范数&lt;/p&gt;
&lt;p&gt;　　在n维向量空间𝑅&lt;sup&gt;𝑛&lt;/sup&gt;中，对于任意向量&lt;strong&gt;x&lt;/strong&gt; = (𝑥&lt;sub&gt;1&lt;/sub&gt;,𝑥&lt;sub&gt;2&lt;/sub&gt;,…,𝑥&lt;sub&gt;𝑛&lt;/sub&gt;)∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt;, 则欧几里得范数：      &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224042427-240341129.png&quot; alt=&quot;&quot;/&gt;   &lt;/p&gt;
&lt;p&gt;（4）L&lt;sup&gt;p&lt;/sup&gt;范数&lt;/p&gt;
&lt;p&gt;　　在实数空间𝑅&lt;sup&gt;𝑛&lt;/sup&gt;内，但1≤𝑝&amp;lt;∞时，L&lt;sup&gt;p&lt;/sup&gt;范数定义为：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003223855380-2126108022.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　当𝑝=∞时，𝑅&lt;sup&gt;𝑛&lt;/sup&gt;空间的𝐿∞范数定义为 ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003223945490-1148838412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5） Frobenius范数，矩阵中常用的范数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224142568-822064117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、矩阵分解&lt;/p&gt;
&lt;p&gt;1. 方阵的正交分解&lt;/p&gt;
&lt;p&gt;（1）  特征值和特征向量的定义&lt;/p&gt;
&lt;p&gt;　　设 &lt;strong&gt;A&lt;/strong&gt;&lt;sub&gt;n×n&lt;/sub&gt;，如果有数 和n维非零列向量𝒙，使得&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224454240-1993490039.png&quot; alt=&quot;&quot;/&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;　　则称 为&lt;strong&gt;A&lt;/strong&gt;的特征值，非零列向量𝒙为&lt;strong&gt;A&lt;/strong&gt;的对应与特征值 的特征向量。&lt;/p&gt;
&lt;p&gt;　　注意：&lt;/p&gt;
&lt;p&gt;　　　　1）  A是方阵，方阵才有特征值和特征向量&lt;/p&gt;
&lt;p&gt;　　　　2）  特征向量𝒙是非零列向量&lt;/p&gt;
&lt;p&gt;　　　　3）  属于特征值 的特征向量不唯一，有无数个&lt;/p&gt;
&lt;p&gt;　　　　4）  但一个特征向量只能属于一个特征值&lt;/p&gt;
&lt;p&gt;（2）  特征值：&lt;/p&gt;
&lt;p&gt;　　λ&lt;sub&gt;𝑖&lt;/sub&gt;是关于λ的多项式|𝐴−λ𝐼&lt;sub&gt;𝑛&lt;/sub&gt;|=0的根，记作λ&lt;sub&gt;1&lt;/sub&gt;,λ&lt;sub&gt;2&lt;/sub&gt;,…,λ&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;（3） 特征向量：&lt;/p&gt;
&lt;p&gt;　　属于λ&lt;sub&gt;𝑖&lt;/sub&gt;的特征向量是线性方程组 (𝐴−λ&lt;sub&gt;𝑖&lt;/sub&gt;𝐼&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;strong&gt;x&lt;/strong&gt;=0的解。&lt;/p&gt;
&lt;p&gt;（4） 矩阵分解&lt;/p&gt;
&lt;p&gt;　　设{𝒙&lt;sub&gt;𝑖&lt;/sub&gt;&lt;sub&gt;1&lt;/sub&gt;,𝒙&lt;sub&gt;𝑖&lt;/sub&gt;&lt;sub&gt;2&lt;/sub&gt;,…,𝒙&lt;sub&gt;𝑖𝑚&lt;/sub&gt;}是方程组(𝐴−λ&lt;sub&gt;𝑖&lt;/sub&gt;𝐼&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;strong&gt;x&lt;/strong&gt;=0的解空间的基（特征向量），定义一个矩阵：&lt;/p&gt;
&lt;p&gt;　　　　　𝑃&lt;sub&gt;𝑛&lt;/sub&gt;&lt;sub&gt;×&lt;/sub&gt;&lt;sub&gt;𝑛&lt;/sub&gt; = [𝒙&lt;sub&gt;11&lt;/sub&gt;,𝒙&lt;sub&gt;12&lt;/sub&gt;,…,𝒙&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;𝑚&lt;/sub&gt;,𝒙&lt;sub&gt;21&lt;/sub&gt;,𝒙&lt;sub&gt;22&lt;/sub&gt;,…]&lt;sub&gt;𝑛&lt;/sub&gt;&lt;sub&gt;×&lt;/sub&gt;&lt;sub&gt;𝑛&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;    　那么可以把矩阵A分解成如下形式：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224553911-1160264804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　称这样的分解为特征分解（或者称为相似对角化）。&lt;/p&gt;
&lt;p&gt;　　本质：&lt;/p&gt;
&lt;p&gt;　　　　1） A可表示为：基(base)*特征值(feature) （联想到了PCA）&lt;/p&gt;
&lt;p&gt;　　　　2） A的特征分解可表征其特征向量与其特征值之间的关系&lt;/p&gt;

&lt;p&gt; 2.  正交分解&lt;/p&gt;
&lt;p&gt;（1）  正交矩阵&lt;/p&gt;
&lt;p&gt;　　定义：满足 𝐴𝐴&lt;sup&gt;𝑇&lt;/sup&gt;=𝐼&lt;sub&gt;𝑛&lt;/sub&gt;（即𝐴&lt;sup&gt;−1&lt;/sup&gt;=𝐴&lt;sup&gt;𝑇&lt;/sup&gt;）的n阶方阵&lt;/p&gt;
&lt;p&gt;（2）  标准正交基&lt;/p&gt;
&lt;p&gt;　　定义：n个n维向量{𝒙&lt;sub&gt;1&lt;/sub&gt;,𝒙&lt;sub&gt;2&lt;/sub&gt;,…,𝒙&lt;sub&gt;𝑛&lt;/sub&gt;}∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt;，满足一下性质&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224640802-464093391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　则称{𝒙&lt;sub&gt;1&lt;/sub&gt;,𝒙&lt;sub&gt;2&lt;/sub&gt;,…,𝒙&lt;sub&gt;𝑛&lt;/sub&gt;}∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt;为一组标准正交基。&lt;/p&gt;
&lt;p&gt;　　几何意义：向量跟自己平行(长度)，而与其他都垂直，例如二维空间的坐标。&lt;/p&gt;
&lt;p&gt;　　性质：[𝒙&lt;sub&gt;1&lt;/sub&gt;,𝒙&lt;sub&gt;2&lt;/sub&gt;,…,𝒙&lt;sub&gt;𝑛&lt;/sub&gt;]为n阶交正矩阵，则{𝒙&lt;sub&gt;1&lt;/sub&gt;,𝒙&lt;sub&gt;2&lt;/sub&gt;,…,𝒙&lt;sub&gt;𝑛&lt;/sub&gt; ∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt; } 为一组标准正交基，反之也成立。&lt;/p&gt;
&lt;p&gt;（3）  正交矩阵的性质&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224718615-503167454.png&quot; alt=&quot;&quot; width=&quot;418&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4） 正交分解&lt;/p&gt;
&lt;p&gt;　　若n阶方阵A可进行特征分解，即存在n阶可逆矩阵P，使得&lt;/p&gt;
&lt;p&gt;　　　　𝑃&lt;sup&gt;−1&lt;/sup&gt;𝐴𝑃 = 𝑑𝑖𝑎𝑔(λ&lt;sub&gt;1&lt;/sub&gt;,λ&lt;sub&gt;2&lt;/sub&gt;,…,λ&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;/p&gt;
&lt;p&gt;　　其中𝜆&lt;sub&gt;𝑖&lt;/sub&gt;为𝐴的特征值, &lt;strong&gt;𝑃&lt;/strong&gt;&lt;sub&gt;𝑛&lt;/sub&gt;&lt;sub&gt;×&lt;/sub&gt;&lt;sub&gt;𝑛&lt;/sub&gt; = [𝒙&lt;sub&gt;11&lt;/sub&gt;,𝒙&lt;sub&gt;12&lt;/sub&gt;,…,𝒙&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;𝑚&lt;/sub&gt;,𝒙&lt;sub&gt;21&lt;/sub&gt;,𝒙&lt;sub&gt;22&lt;/sub&gt;,…]&lt;sub&gt;𝑛&lt;/sub&gt;&lt;sub&gt;×&lt;/sub&gt;&lt;sub&gt;𝑛&lt;/sub&gt;列向量为𝜆&lt;sub&gt;𝑖&lt;/sub&gt;对应的特征向量。&lt;/p&gt;
&lt;p&gt;　　那么，一定存在：&lt;/p&gt;
&lt;p&gt;　　另一组属于𝜆&lt;sub&gt;𝑖&lt;/sub&gt;的特征向量&lt;strong&gt;Q&lt;/strong&gt;=[𝒚&lt;sub&gt;11,&lt;/sub&gt;𝒚&lt;sub&gt;12&lt;/sub&gt;,…,𝒚&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;𝑚&lt;/sub&gt;,𝒚&lt;sub&gt;21&lt;/sub&gt;,𝒚&lt;sub&gt;22&lt;/sub&gt;,…]，满足向量组{ 𝒚&lt;sub&gt;11,&lt;/sub&gt;𝒚&lt;sub&gt;12&lt;/sub&gt;,…,𝒚&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;𝑚&lt;/sub&gt;,𝒚&lt;sub&gt;21&lt;/sub&gt;,𝒚&lt;sub&gt;22&lt;/sub&gt;,…}是一组n维标准正交基，即&lt;strong&gt;Q&lt;/strong&gt;是n阶正交矩阵，则有&lt;/p&gt;
&lt;p&gt;　　　　𝑄&lt;sup&gt;−1&lt;/sup&gt;𝐴𝑄=𝑄&lt;sup&gt;𝑇&lt;/sup&gt;𝐴𝑄=𝑑𝑖𝑎𝑔(λ&lt;sub&gt;1&lt;/sub&gt;,λ&lt;sub&gt;2&lt;/sub&gt;,…,λ&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;/p&gt;
&lt;p&gt;　　称该分解为正交分解。&lt;/p&gt;
&lt;p&gt;      本质：正交分解是一种特殊的特征分解。&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;3.  矩阵的奇异值分解(SVD)&lt;/p&gt;
&lt;p&gt;　　如果矩阵不可特征分解怎么办？引入了矩阵的奇异值分解。&lt;/p&gt;
&lt;p&gt;（1）  非退化方阵的SVD&lt;/p&gt;
&lt;p&gt;　　设𝐴是n阶非退化方阵，即满秩：𝑟(𝐴)=𝑛。那么存在正交矩阵P和Q，使得&lt;/p&gt;
&lt;p&gt;　　　　𝑃&lt;sup&gt;𝑇&lt;/sup&gt;𝐴𝑄=diag(𝛼&lt;sub&gt;1&lt;/sub&gt;,𝛼&lt;sub&gt;2&lt;/sub&gt;,…,𝛼&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;/p&gt;
&lt;p&gt;　　其中 𝛼&lt;sub&gt;𝑖&lt;/sub&gt; &amp;gt; 0（𝑖=1,2,…,𝑛），但不是特征值，而是奇异值。称为非退化方阵的SVD。&lt;/p&gt;
&lt;p&gt;　　性质：&lt;/p&gt;
&lt;p&gt;　　　　1） 不一定每个方阵都可以正交分解，只有实对称矩阵(𝐴=𝐴&lt;sup&gt;𝑇&lt;/sup&gt;)一定可以正交分解。但是每个方阵都可以进行SVD。&lt;/p&gt;
&lt;p&gt;　　　　2）正交分解是同一个正交矩阵Q，SVD分解是两个正交矩阵&lt;strong&gt;P&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Q&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　3）正交分解对角线是特征值，SVD对角线不是特征值，但都大于0&lt;/p&gt;
&lt;p&gt;（2） 一般矩阵的SVD&lt;/p&gt;
&lt;p&gt;　　设A是秩为𝑟(𝑟 &amp;gt; 0)的𝑚×𝑛阶实矩阵，则存在m阶正交矩阵&lt;strong&gt;U&lt;/strong&gt;和n阶正交矩阵&lt;strong&gt;V&lt;/strong&gt;，使得&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003224905536-845726195.png&quot; alt=&quot;&quot; width=&quot;371&quot; height=&quot;65&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中Λ&lt;sub&gt;𝑟&lt;/sub&gt;=diag (𝜎&lt;sub&gt;1&lt;/sub&gt;,𝜎&lt;sub&gt;2&lt;/sub&gt;,…,𝜎&lt;sub&gt;𝑟&lt;/sub&gt;)&lt;/p&gt;
&lt;p&gt;　　𝜎&lt;sub&gt;1&lt;/sub&gt;≥𝜎&lt;sub&gt;2&lt;/sub&gt;≥⋯≥𝜎&lt;sub&gt;𝑟&lt;/sub&gt;&amp;gt;0为矩阵𝐴的全部奇异值.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003225002505-1877705772.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;54&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　𝑈&lt;sub&gt;𝑖&lt;/sub&gt;,𝑉&lt;sub&gt;𝑖&lt;/sub&gt;为矩阵𝑈,𝑉的列向量。&lt;/p&gt;
&lt;p&gt;（3） 伪逆(Moor-Penrose)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003225106740-1665016982.png&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;102&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　则称𝐴&lt;sup&gt;+&lt;/sup&gt;为矩阵A的伪逆，上述四个方程称为Moore –Penrose方程。&lt;/p&gt;
&lt;p&gt;（4） 不相容线性方程组的解&lt;/p&gt;
&lt;p&gt;　　1）定义：设𝐴∈𝑅&lt;sup&gt;𝑚&lt;/sup&gt;&lt;sup&gt;×&lt;/sup&gt;&lt;sup&gt;𝑛&lt;/sup&gt;,𝒃∈𝑅&lt;sup&gt;𝑚&lt;/sup&gt;，𝐴𝒙=𝒃是不相容线性方程组(即无解的方程组)。&lt;/p&gt;
&lt;p&gt;　　　　　　 若存在向量𝑥&lt;sub&gt;0&lt;/sub&gt;∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt;，使得对于任何𝒙∈𝑅&lt;sup&gt;𝑛&lt;/sup&gt;，都有&lt;/p&gt;
&lt;p&gt;　　　　　　　　||𝐴𝑥&lt;sub&gt;0&lt;/sub&gt;−𝑏||≤||𝐴𝑥−𝑏||&lt;/p&gt;
&lt;p&gt;　　　　　　则称𝑥&lt;sub&gt;0&lt;/sub&gt;为方程组𝐴𝒙=𝒃的最小乘解。&lt;/p&gt;
&lt;p&gt;       本质：虽然无解，但可以找一个与解最近的一个解，最近，则使用范数来衡量。&lt;/p&gt;
&lt;p&gt;　　 2）若𝑢是方程组𝐴𝒙=𝒃的最小二乘解，如果对于任意一个𝑥&lt;sub&gt;0&lt;/sub&gt;，都有&lt;/p&gt;
&lt;p&gt;              　　 ||𝑢|| ≤ ||𝑥&lt;sub&gt;0&lt;/sub&gt;||  （即取自己长度最短的）&lt;/p&gt;
&lt;p&gt;　　　　则称𝑢是最佳最小二乘解。&lt;/p&gt;
&lt;p&gt;（5） 定理&lt;/p&gt;
&lt;p&gt;　　1） 设𝐴∈𝑅&lt;sup&gt;𝑚&lt;/sup&gt;&lt;sup&gt;×&lt;/sup&gt;&lt;sup&gt;𝑛&lt;/sup&gt;，𝒃∈𝑅&lt;sup&gt;𝑚&lt;/sup&gt;，则向量𝒙=𝐴&lt;sup&gt;+&lt;/sup&gt;𝒃是方程组𝐴𝒙=𝒃的最佳最小二乘解。&lt;/p&gt;
&lt;p&gt;　　2） 如果矩阵A的𝑆𝑉𝐷为𝐴=𝑈Λ𝑉&lt;sup&gt;𝑇&lt;/sup&gt;，那么A的伪逆为𝐴&lt;sup&gt;+&lt;/sup&gt;=𝑉Λ&lt;sup&gt;+&lt;/sup&gt;𝑈&lt;sup&gt;𝑇&lt;/sup&gt;，其中Λ&lt;sup&gt;+&lt;/sup&gt;是Λ的伪逆，是将Λ主对角线上非零元素𝜎&lt;sub&gt;𝑖&lt;/sub&gt;取倒数变成1/𝜎&lt;sub&gt;𝑖&lt;/sub&gt;之后再取转置。&lt;/p&gt;
&lt;p&gt;4.  主成分分析(PCA)&lt;/p&gt;
&lt;p&gt;（1）  计算样品数据的协方差矩阵 𝐴=(S&lt;sub&gt;𝑖𝑗&lt;/sub&gt;)&lt;sub&gt;𝑛&lt;/sub&gt;&lt;sub&gt;×&lt;/sub&gt;&lt;sub&gt;𝑛&lt;/sub&gt;，其中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003225356568-1949137355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）  对矩阵𝐴进行正交分解，并对特征值进行排序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003225347099-1566891107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3） 确定最小的m，使得贡献率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171003225407786-239315148.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者大于设定的某个值。&lt;/p&gt;
&lt;p&gt;（4） 则主成分变量为：𝐹&lt;sub&gt;𝑖&lt;/sub&gt; = 𝑄&lt;sub&gt;𝑖&lt;/sub&gt;𝒙 (i=1…m)，其中&lt;/p&gt;
&lt;p&gt;𝒙= (𝑥&lt;sub&gt;1&lt;/sub&gt;,…,𝑥&lt;sub&gt;𝑛&lt;/sub&gt;)&lt;sup&gt;𝑇&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;𝑄&lt;sub&gt;𝑖&lt;/sub&gt;为正交矩阵𝑄的第𝑖列向量&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;      -tany 2017年10月3日 于杭州&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Oct 2017 15:06:00 +0000</pubDate>
<dc:creator>tanv</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tan-v/p/7624779.html</dc:identifier>
</item>
</channel>
</rss>